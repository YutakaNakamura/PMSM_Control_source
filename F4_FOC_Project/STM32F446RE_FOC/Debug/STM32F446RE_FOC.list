
STM32F446RE_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7cc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  0800c9a0  0800c9a0  0001c9a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf90  0800cf90  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf90  0800cf90  0001cf90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf98  0800cf98  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800cf98  0800cf98  0001cf98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800cfa0  0800cfa0  0001cfa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800cfa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000304c  200001dc  0800d184  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003228  0800d184  00023228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00055e32  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009708  00000000  00000000  0007603e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002418  00000000  00000000  0007f748  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002150  00000000  00000000  00081b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00030e32  00000000  00000000  00083cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000210e9  00000000  00000000  000b4ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00105b42  00000000  00000000  000d5bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001db70d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bad4  00000000  00000000  001db788  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c984 	.word	0x0800c984

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800c984 	.word	0x0800c984

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <HAL_Init+0x40>)
 8000f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <HAL_Init+0x40>)
 8000f9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <HAL_Init+0x40>)
 8000faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f000 fd05 	bl	80019c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb6:	2004      	movs	r0, #4
 8000fb8:	f000 f808 	bl	8000fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fbc:	f006 fa36 	bl	800742c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023c00 	.word	0x40023c00

08000fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_InitTick+0x54>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_InitTick+0x58>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 fd1d 	bl	8001a2a <HAL_SYSTICK_Config>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00e      	b.n	8001018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0f      	cmp	r3, #15
 8000ffe:	d80a      	bhi.n	8001016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001008:	f000 fce5 	bl	80019d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800100c:	4a06      	ldr	r2, [pc, #24]	; (8001028 <HAL_InitTick+0x5c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	e000      	b.n	8001018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000008 	.word	0x20000008
 8001024:	20000004 	.word	0x20000004
 8001028:	20000000 	.word	0x20000000

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000004 	.word	0x20000004
 8001050:	20003220 	.word	0x20003220

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20003220 	.word	0x20003220

0800106c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001074:	2300      	movs	r3, #0
 8001076:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e033      	b.n	80010ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	2b00      	cmp	r3, #0
 8001088:	d109      	bne.n	800109e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f005 ff38 	bl	8006f00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f003 0310 	and.w	r3, r3, #16
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d118      	bne.n	80010dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010b2:	f023 0302 	bic.w	r3, r3, #2
 80010b6:	f043 0202 	orr.w	r2, r3, #2
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 faa8 	bl	8001614 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f023 0303 	bic.w	r3, r3, #3
 80010d2:	f043 0201 	orr.w	r2, r3, #1
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	641a      	str	r2, [r3, #64]	; 0x40
 80010da:	e001      	b.n	80010e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b084      	sub	sp, #16
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b02      	cmp	r3, #2
 800110e:	bf0c      	ite	eq
 8001110:	2301      	moveq	r3, #1
 8001112:	2300      	movne	r3, #0
 8001114:	b2db      	uxtb	r3, r3
 8001116:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0320 	and.w	r3, r3, #32
 8001122:	2b20      	cmp	r3, #32
 8001124:	bf0c      	ite	eq
 8001126:	2301      	moveq	r3, #1
 8001128:	2300      	movne	r3, #0
 800112a:	b2db      	uxtb	r3, r3
 800112c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d049      	beq.n	80011c8 <HAL_ADC_IRQHandler+0xd6>
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d046      	beq.n	80011c8 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f003 0310 	and.w	r3, r3, #16
 8001142:	2b00      	cmp	r3, #0
 8001144:	d105      	bne.n	8001152 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d12b      	bne.n	80011b8 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001164:	2b00      	cmp	r3, #0
 8001166:	d127      	bne.n	80011b8 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001172:	2b00      	cmp	r3, #0
 8001174:	d006      	beq.n	8001184 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001180:	2b00      	cmp	r3, #0
 8001182:	d119      	bne.n	80011b8 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0220 	bic.w	r2, r2, #32
 8001192:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d105      	bne.n	80011b8 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f043 0201 	orr.w	r2, r3, #1
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 f8db 	bl	8001374 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f06f 0212 	mvn.w	r2, #18
 80011c6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	bf0c      	ite	eq
 80011d6:	2301      	moveq	r3, #1
 80011d8:	2300      	movne	r3, #0
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e8:	2b80      	cmp	r3, #128	; 0x80
 80011ea:	bf0c      	ite	eq
 80011ec:	2301      	moveq	r3, #1
 80011ee:	2300      	movne	r3, #0
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d057      	beq.n	80012aa <HAL_ADC_IRQHandler+0x1b8>
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d054      	beq.n	80012aa <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	f003 0310 	and.w	r3, r3, #16
 8001208:	2b00      	cmp	r3, #0
 800120a:	d105      	bne.n	8001218 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d139      	bne.n	800129a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800122c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001230:	2b00      	cmp	r3, #0
 8001232:	d006      	beq.n	8001242 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800123e:	2b00      	cmp	r3, #0
 8001240:	d12b      	bne.n	800129a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800124c:	2b00      	cmp	r3, #0
 800124e:	d124      	bne.n	800129a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800125a:	2b00      	cmp	r3, #0
 800125c:	d11d      	bne.n	800129a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001262:	2b00      	cmp	r3, #0
 8001264:	d119      	bne.n	800129a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001274:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800128a:	2b00      	cmp	r3, #0
 800128c:	d105      	bne.n	800129a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f043 0201 	orr.w	r2, r3, #1
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 fab6 	bl	800180c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f06f 020c 	mvn.w	r2, #12
 80012a8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	bf0c      	ite	eq
 80012b8:	2301      	moveq	r3, #1
 80012ba:	2300      	movne	r3, #0
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ca:	2b40      	cmp	r3, #64	; 0x40
 80012cc:	bf0c      	ite	eq
 80012ce:	2301      	moveq	r3, #1
 80012d0:	2300      	movne	r3, #0
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d017      	beq.n	800130c <HAL_ADC_IRQHandler+0x21a>
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d014      	beq.n	800130c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d10d      	bne.n	800130c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 f843 	bl	8001388 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f06f 0201 	mvn.w	r2, #1
 800130a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0320 	and.w	r3, r3, #32
 8001316:	2b20      	cmp	r3, #32
 8001318:	bf0c      	ite	eq
 800131a:	2301      	moveq	r3, #1
 800131c:	2300      	movne	r3, #0
 800131e:	b2db      	uxtb	r3, r3
 8001320:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800132c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001330:	bf0c      	ite	eq
 8001332:	2301      	moveq	r3, #1
 8001334:	2300      	movne	r3, #0
 8001336:	b2db      	uxtb	r3, r3
 8001338:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d015      	beq.n	800136c <HAL_ADC_IRQHandler+0x27a>
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d012      	beq.n	800136c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	f043 0202 	orr.w	r2, r3, #2
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f06f 0220 	mvn.w	r2, #32
 800135a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 f81d 	bl	800139c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f06f 0220 	mvn.w	r2, #32
 800136a:	601a      	str	r2, [r3, #0]
  }
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d101      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x1c>
 80013c8:	2302      	movs	r3, #2
 80013ca:	e113      	b.n	80015f4 <HAL_ADC_ConfigChannel+0x244>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b09      	cmp	r3, #9
 80013da:	d925      	bls.n	8001428 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68d9      	ldr	r1, [r3, #12]
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	4613      	mov	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4413      	add	r3, r2
 80013f0:	3b1e      	subs	r3, #30
 80013f2:	2207      	movs	r2, #7
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43da      	mvns	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	400a      	ands	r2, r1
 8001400:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68d9      	ldr	r1, [r3, #12]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	b29b      	uxth	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	4603      	mov	r3, r0
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	4403      	add	r3, r0
 800141a:	3b1e      	subs	r3, #30
 800141c:	409a      	lsls	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	e022      	b.n	800146e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6919      	ldr	r1, [r3, #16]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	b29b      	uxth	r3, r3
 8001434:	461a      	mov	r2, r3
 8001436:	4613      	mov	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4413      	add	r3, r2
 800143c:	2207      	movs	r2, #7
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43da      	mvns	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	400a      	ands	r2, r1
 800144a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6919      	ldr	r1, [r3, #16]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	b29b      	uxth	r3, r3
 800145c:	4618      	mov	r0, r3
 800145e:	4603      	mov	r3, r0
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	4403      	add	r3, r0
 8001464:	409a      	lsls	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b06      	cmp	r3, #6
 8001474:	d824      	bhi.n	80014c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	3b05      	subs	r3, #5
 8001488:	221f      	movs	r2, #31
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43da      	mvns	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	400a      	ands	r2, r1
 8001496:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	4618      	mov	r0, r3
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	3b05      	subs	r3, #5
 80014b2:	fa00 f203 	lsl.w	r2, r0, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	635a      	str	r2, [r3, #52]	; 0x34
 80014be:	e04c      	b.n	800155a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b0c      	cmp	r3, #12
 80014c6:	d824      	bhi.n	8001512 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	3b23      	subs	r3, #35	; 0x23
 80014da:	221f      	movs	r2, #31
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43da      	mvns	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	400a      	ands	r2, r1
 80014e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	3b23      	subs	r3, #35	; 0x23
 8001504:	fa00 f203 	lsl.w	r2, r0, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	631a      	str	r2, [r3, #48]	; 0x30
 8001510:	e023      	b.n	800155a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	3b41      	subs	r3, #65	; 0x41
 8001524:	221f      	movs	r2, #31
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43da      	mvns	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	400a      	ands	r2, r1
 8001532:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	b29b      	uxth	r3, r3
 8001540:	4618      	mov	r0, r3
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	3b41      	subs	r3, #65	; 0x41
 800154e:	fa00 f203 	lsl.w	r2, r0, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800155a:	4b29      	ldr	r3, [pc, #164]	; (8001600 <HAL_ADC_ConfigChannel+0x250>)
 800155c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a28      	ldr	r2, [pc, #160]	; (8001604 <HAL_ADC_ConfigChannel+0x254>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d10f      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x1d8>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b12      	cmp	r3, #18
 800156e:	d10b      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a1d      	ldr	r2, [pc, #116]	; (8001604 <HAL_ADC_ConfigChannel+0x254>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d12b      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x23a>
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a1c      	ldr	r2, [pc, #112]	; (8001608 <HAL_ADC_ConfigChannel+0x258>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d003      	beq.n	80015a4 <HAL_ADC_ConfigChannel+0x1f4>
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b11      	cmp	r3, #17
 80015a2:	d122      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a11      	ldr	r2, [pc, #68]	; (8001608 <HAL_ADC_ConfigChannel+0x258>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d111      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_ADC_ConfigChannel+0x25c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a11      	ldr	r2, [pc, #68]	; (8001610 <HAL_ADC_ConfigChannel+0x260>)
 80015cc:	fba2 2303 	umull	r2, r3, r2, r3
 80015d0:	0c9a      	lsrs	r2, r3, #18
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015dc:	e002      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	3b01      	subs	r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f9      	bne.n	80015de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	40012300 	.word	0x40012300
 8001604:	40012000 	.word	0x40012000
 8001608:	10000012 	.word	0x10000012
 800160c:	20000008 	.word	0x20000008
 8001610:	431bde83 	.word	0x431bde83

08001614 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800161c:	4b79      	ldr	r3, [pc, #484]	; (8001804 <ADC_Init+0x1f0>)
 800161e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	431a      	orrs	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001648:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6859      	ldr	r1, [r3, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	021a      	lsls	r2, r3, #8
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800166c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6859      	ldr	r1, [r3, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	430a      	orrs	r2, r1
 800167e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800168e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6899      	ldr	r1, [r3, #8]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a6:	4a58      	ldr	r2, [pc, #352]	; (8001808 <ADC_Init+0x1f4>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d022      	beq.n	80016f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6899      	ldr	r1, [r3, #8]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6899      	ldr	r1, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	e00f      	b.n	8001712 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001700:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001710:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0202 	bic.w	r2, r2, #2
 8001720:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6899      	ldr	r1, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	7e1b      	ldrb	r3, [r3, #24]
 800172c:	005a      	lsls	r2, r3, #1
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3020 	ldrb.w	r3, [r3, #32]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d01b      	beq.n	8001778 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800174e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800175e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6859      	ldr	r1, [r3, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176a:	3b01      	subs	r3, #1
 800176c:	035a      	lsls	r2, r3, #13
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	e007      	b.n	8001788 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001786:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001796:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	051a      	lsls	r2, r3, #20
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6899      	ldr	r1, [r3, #8]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017ca:	025a      	lsls	r2, r3, #9
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6899      	ldr	r1, [r3, #8]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	029a      	lsls	r2, r3, #10
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	609a      	str	r2, [r3, #8]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	40012300 	.word	0x40012300
 8001808:	0f000001 	.word	0x0f000001

0800180c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800183c:	4013      	ands	r3, r2
 800183e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800184c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001852:	4a04      	ldr	r2, [pc, #16]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	60d3      	str	r3, [r2, #12]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <__NVIC_GetPriorityGrouping+0x18>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	f003 0307 	and.w	r3, r3, #7
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	2b00      	cmp	r3, #0
 8001894:	db0b      	blt.n	80018ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	f003 021f 	and.w	r2, r3, #31
 800189c:	4907      	ldr	r1, [pc, #28]	; (80018bc <__NVIC_EnableIRQ+0x38>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	2001      	movs	r0, #1
 80018a6:	fa00 f202 	lsl.w	r2, r0, r2
 80018aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000e100 	.word	0xe000e100

080018c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	6039      	str	r1, [r7, #0]
 80018ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	db0a      	blt.n	80018ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	490c      	ldr	r1, [pc, #48]	; (800190c <__NVIC_SetPriority+0x4c>)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	0112      	lsls	r2, r2, #4
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	440b      	add	r3, r1
 80018e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e8:	e00a      	b.n	8001900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4908      	ldr	r1, [pc, #32]	; (8001910 <__NVIC_SetPriority+0x50>)
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	3b04      	subs	r3, #4
 80018f8:	0112      	lsls	r2, r2, #4
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	440b      	add	r3, r1
 80018fe:	761a      	strb	r2, [r3, #24]
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000e100 	.word	0xe000e100
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001914:	b480      	push	{r7}
 8001916:	b089      	sub	sp, #36	; 0x24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f1c3 0307 	rsb	r3, r3, #7
 800192e:	2b04      	cmp	r3, #4
 8001930:	bf28      	it	cs
 8001932:	2304      	movcs	r3, #4
 8001934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3304      	adds	r3, #4
 800193a:	2b06      	cmp	r3, #6
 800193c:	d902      	bls.n	8001944 <NVIC_EncodePriority+0x30>
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3b03      	subs	r3, #3
 8001942:	e000      	b.n	8001946 <NVIC_EncodePriority+0x32>
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43da      	mvns	r2, r3
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	401a      	ands	r2, r3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800195c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	fa01 f303 	lsl.w	r3, r1, r3
 8001966:	43d9      	mvns	r1, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	4313      	orrs	r3, r2
         );
}
 800196e:	4618      	mov	r0, r3
 8001970:	3724      	adds	r7, #36	; 0x24
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3b01      	subs	r3, #1
 8001988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800198c:	d301      	bcc.n	8001992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198e:	2301      	movs	r3, #1
 8001990:	e00f      	b.n	80019b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001992:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <SysTick_Config+0x40>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3b01      	subs	r3, #1
 8001998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199a:	210f      	movs	r1, #15
 800199c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019a0:	f7ff ff8e 	bl	80018c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <SysTick_Config+0x40>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019aa:	4b04      	ldr	r3, [pc, #16]	; (80019bc <SysTick_Config+0x40>)
 80019ac:	2207      	movs	r2, #7
 80019ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	e000e010 	.word	0xe000e010

080019c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ff29 	bl	8001820 <__NVIC_SetPriorityGrouping>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b086      	sub	sp, #24
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
 80019e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e8:	f7ff ff3e 	bl	8001868 <__NVIC_GetPriorityGrouping>
 80019ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	68b9      	ldr	r1, [r7, #8]
 80019f2:	6978      	ldr	r0, [r7, #20]
 80019f4:	f7ff ff8e 	bl	8001914 <NVIC_EncodePriority>
 80019f8:	4602      	mov	r2, r0
 80019fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff5d 	bl	80018c0 <__NVIC_SetPriority>
}
 8001a06:	bf00      	nop
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff31 	bl	8001884 <__NVIC_EnableIRQ>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ffa2 	bl	800197c <SysTick_Config>
 8001a38:	4603      	mov	r3, r0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b089      	sub	sp, #36	; 0x24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
 8001a5e:	e165      	b.n	8001d2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a60:	2201      	movs	r2, #1
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	4013      	ands	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	f040 8154 	bne.w	8001d26 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x4a>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b12      	cmp	r3, #18
 8001a8c:	d123      	bne.n	8001ad6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	08da      	lsrs	r2, r3, #3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3208      	adds	r2, #8
 8001a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	220f      	movs	r2, #15
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	691a      	ldr	r2, [r3, #16]
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	08da      	lsrs	r2, r3, #3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3208      	adds	r2, #8
 8001ad0:	69b9      	ldr	r1, [r7, #24]
 8001ad2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 0203 	and.w	r2, r3, #3
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d00b      	beq.n	8001b2a <HAL_GPIO_Init+0xe6>
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d007      	beq.n	8001b2a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b1e:	2b11      	cmp	r3, #17
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b12      	cmp	r3, #18
 8001b28:	d130      	bne.n	8001b8c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	2203      	movs	r2, #3
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b60:	2201      	movs	r2, #1
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	091b      	lsrs	r3, r3, #4
 8001b76:	f003 0201 	and.w	r2, r3, #1
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	2203      	movs	r2, #3
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 80ae 	beq.w	8001d26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	4b5c      	ldr	r3, [pc, #368]	; (8001d40 <HAL_GPIO_Init+0x2fc>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	4a5b      	ldr	r2, [pc, #364]	; (8001d40 <HAL_GPIO_Init+0x2fc>)
 8001bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bda:	4b59      	ldr	r3, [pc, #356]	; (8001d40 <HAL_GPIO_Init+0x2fc>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001be6:	4a57      	ldr	r2, [pc, #348]	; (8001d44 <HAL_GPIO_Init+0x300>)
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	089b      	lsrs	r3, r3, #2
 8001bec:	3302      	adds	r3, #2
 8001bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	220f      	movs	r2, #15
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a4e      	ldr	r2, [pc, #312]	; (8001d48 <HAL_GPIO_Init+0x304>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d025      	beq.n	8001c5e <HAL_GPIO_Init+0x21a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a4d      	ldr	r2, [pc, #308]	; (8001d4c <HAL_GPIO_Init+0x308>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d01f      	beq.n	8001c5a <HAL_GPIO_Init+0x216>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a4c      	ldr	r2, [pc, #304]	; (8001d50 <HAL_GPIO_Init+0x30c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d019      	beq.n	8001c56 <HAL_GPIO_Init+0x212>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a4b      	ldr	r2, [pc, #300]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d013      	beq.n	8001c52 <HAL_GPIO_Init+0x20e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a4a      	ldr	r2, [pc, #296]	; (8001d58 <HAL_GPIO_Init+0x314>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d00d      	beq.n	8001c4e <HAL_GPIO_Init+0x20a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a49      	ldr	r2, [pc, #292]	; (8001d5c <HAL_GPIO_Init+0x318>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d007      	beq.n	8001c4a <HAL_GPIO_Init+0x206>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a48      	ldr	r2, [pc, #288]	; (8001d60 <HAL_GPIO_Init+0x31c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d101      	bne.n	8001c46 <HAL_GPIO_Init+0x202>
 8001c42:	2306      	movs	r3, #6
 8001c44:	e00c      	b.n	8001c60 <HAL_GPIO_Init+0x21c>
 8001c46:	2307      	movs	r3, #7
 8001c48:	e00a      	b.n	8001c60 <HAL_GPIO_Init+0x21c>
 8001c4a:	2305      	movs	r3, #5
 8001c4c:	e008      	b.n	8001c60 <HAL_GPIO_Init+0x21c>
 8001c4e:	2304      	movs	r3, #4
 8001c50:	e006      	b.n	8001c60 <HAL_GPIO_Init+0x21c>
 8001c52:	2303      	movs	r3, #3
 8001c54:	e004      	b.n	8001c60 <HAL_GPIO_Init+0x21c>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e002      	b.n	8001c60 <HAL_GPIO_Init+0x21c>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <HAL_GPIO_Init+0x21c>
 8001c5e:	2300      	movs	r3, #0
 8001c60:	69fa      	ldr	r2, [r7, #28]
 8001c62:	f002 0203 	and.w	r2, r2, #3
 8001c66:	0092      	lsls	r2, r2, #2
 8001c68:	4093      	lsls	r3, r2
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c70:	4934      	ldr	r1, [pc, #208]	; (8001d44 <HAL_GPIO_Init+0x300>)
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	089b      	lsrs	r3, r3, #2
 8001c76:	3302      	adds	r3, #2
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c7e:	4b39      	ldr	r3, [pc, #228]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ca2:	4a30      	ldr	r2, [pc, #192]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ca8:	4b2e      	ldr	r3, [pc, #184]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ccc:	4a25      	ldr	r2, [pc, #148]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cd2:	4b24      	ldr	r3, [pc, #144]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cf6:	4a1b      	ldr	r2, [pc, #108]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cfc:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d20:	4a10      	ldr	r2, [pc, #64]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	61fb      	str	r3, [r7, #28]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	2b0f      	cmp	r3, #15
 8001d30:	f67f ae96 	bls.w	8001a60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d34:	bf00      	nop
 8001d36:	3724      	adds	r7, #36	; 0x24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40013800 	.word	0x40013800
 8001d48:	40020000 	.word	0x40020000
 8001d4c:	40020400 	.word	0x40020400
 8001d50:	40020800 	.word	0x40020800
 8001d54:	40020c00 	.word	0x40020c00
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40021400 	.word	0x40021400
 8001d60:	40021800 	.word	0x40021800
 8001d64:	40013c00 	.word	0x40013c00

08001d68 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	4b20      	ldr	r3, [pc, #128]	; (8001df8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	4a1f      	ldr	r2, [pc, #124]	; (8001df8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d80:	6413      	str	r3, [r2, #64]	; 0x40
 8001d82:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d8e:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <HAL_PWREx_EnableOverDrive+0x94>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d94:	f7ff f95e 	bl	8001054 <HAL_GetTick>
 8001d98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d9a:	e009      	b.n	8001db0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d9c:	f7ff f95a 	bl	8001054 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001daa:	d901      	bls.n	8001db0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e01f      	b.n	8001df0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001db0:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <HAL_PWREx_EnableOverDrive+0x98>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dbc:	d1ee      	bne.n	8001d9c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001dbe:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dc4:	f7ff f946 	bl	8001054 <HAL_GetTick>
 8001dc8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001dca:	e009      	b.n	8001de0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001dcc:	f7ff f942 	bl	8001054 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dda:	d901      	bls.n	8001de0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e007      	b.n	8001df0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001de0:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <HAL_PWREx_EnableOverDrive+0x98>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001dec:	d1ee      	bne.n	8001dcc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	420e0040 	.word	0x420e0040
 8001e00:	40007000 	.word	0x40007000
 8001e04:	420e0044 	.word	0x420e0044

08001e08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0ca      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e1c:	4b67      	ldr	r3, [pc, #412]	; (8001fbc <HAL_RCC_ClockConfig+0x1b4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 030f 	and.w	r3, r3, #15
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d90c      	bls.n	8001e44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2a:	4b64      	ldr	r3, [pc, #400]	; (8001fbc <HAL_RCC_ClockConfig+0x1b4>)
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e32:	4b62      	ldr	r3, [pc, #392]	; (8001fbc <HAL_RCC_ClockConfig+0x1b4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d001      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e0b6      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d020      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d005      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e5c:	4b58      	ldr	r3, [pc, #352]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	4a57      	ldr	r2, [pc, #348]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e74:	4b52      	ldr	r3, [pc, #328]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4a51      	ldr	r2, [pc, #324]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e80:	4b4f      	ldr	r3, [pc, #316]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	494c      	ldr	r1, [pc, #304]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d044      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d107      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea6:	4b46      	ldr	r3, [pc, #280]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d119      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e07d      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d003      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	d107      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec6:	4b3e      	ldr	r3, [pc, #248]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d109      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e06d      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed6:	4b3a      	ldr	r3, [pc, #232]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e065      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ee6:	4b36      	ldr	r3, [pc, #216]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f023 0203 	bic.w	r2, r3, #3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	4933      	ldr	r1, [pc, #204]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ef8:	f7ff f8ac 	bl	8001054 <HAL_GetTick>
 8001efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efe:	e00a      	b.n	8001f16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f00:	f7ff f8a8 	bl	8001054 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e04d      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f16:	4b2a      	ldr	r3, [pc, #168]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 020c 	and.w	r2, r3, #12
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d1eb      	bne.n	8001f00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f28:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <HAL_RCC_ClockConfig+0x1b4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 030f 	and.w	r3, r3, #15
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d20c      	bcs.n	8001f50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f36:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <HAL_RCC_ClockConfig+0x1b4>)
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3e:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <HAL_RCC_ClockConfig+0x1b4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e030      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d008      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f5c:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	4915      	ldr	r1, [pc, #84]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d009      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	490d      	ldr	r1, [pc, #52]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f8e:	f000 f81d 	bl	8001fcc <HAL_RCC_GetSysClockFreq>
 8001f92:	4601      	mov	r1, r0
 8001f94:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	091b      	lsrs	r3, r3, #4
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	4a09      	ldr	r2, [pc, #36]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa0:	5cd3      	ldrb	r3, [r2, r3]
 8001fa2:	fa21 f303 	lsr.w	r3, r1, r3
 8001fa6:	4a08      	ldr	r2, [pc, #32]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001faa:	2004      	movs	r0, #4
 8001fac:	f7ff f80e 	bl	8000fcc <HAL_InitTick>

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40023c00 	.word	0x40023c00
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	0800caf4 	.word	0x0800caf4
 8001fc8:	20000008 	.word	0x20000008

08001fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fce:	b087      	sub	sp, #28
 8001fd0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fe6:	4bc6      	ldr	r3, [pc, #792]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b0c      	cmp	r3, #12
 8001ff0:	f200 817e 	bhi.w	80022f0 <HAL_RCC_GetSysClockFreq+0x324>
 8001ff4:	a201      	add	r2, pc, #4	; (adr r2, 8001ffc <HAL_RCC_GetSysClockFreq+0x30>)
 8001ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffa:	bf00      	nop
 8001ffc:	08002031 	.word	0x08002031
 8002000:	080022f1 	.word	0x080022f1
 8002004:	080022f1 	.word	0x080022f1
 8002008:	080022f1 	.word	0x080022f1
 800200c:	08002037 	.word	0x08002037
 8002010:	080022f1 	.word	0x080022f1
 8002014:	080022f1 	.word	0x080022f1
 8002018:	080022f1 	.word	0x080022f1
 800201c:	0800203d 	.word	0x0800203d
 8002020:	080022f1 	.word	0x080022f1
 8002024:	080022f1 	.word	0x080022f1
 8002028:	080022f1 	.word	0x080022f1
 800202c:	08002199 	.word	0x08002199
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002030:	4bb4      	ldr	r3, [pc, #720]	; (8002304 <HAL_RCC_GetSysClockFreq+0x338>)
 8002032:	613b      	str	r3, [r7, #16]
       break;
 8002034:	e15f      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002036:	4bb4      	ldr	r3, [pc, #720]	; (8002308 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002038:	613b      	str	r3, [r7, #16]
      break;
 800203a:	e15c      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800203c:	4bb0      	ldr	r3, [pc, #704]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002044:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002046:	4bae      	ldr	r3, [pc, #696]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d04a      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002052:	4bab      	ldr	r3, [pc, #684]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	099b      	lsrs	r3, r3, #6
 8002058:	f04f 0400 	mov.w	r4, #0
 800205c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	ea03 0501 	and.w	r5, r3, r1
 8002068:	ea04 0602 	and.w	r6, r4, r2
 800206c:	4629      	mov	r1, r5
 800206e:	4632      	mov	r2, r6
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	f04f 0400 	mov.w	r4, #0
 8002078:	0154      	lsls	r4, r2, #5
 800207a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800207e:	014b      	lsls	r3, r1, #5
 8002080:	4619      	mov	r1, r3
 8002082:	4622      	mov	r2, r4
 8002084:	1b49      	subs	r1, r1, r5
 8002086:	eb62 0206 	sbc.w	r2, r2, r6
 800208a:	f04f 0300 	mov.w	r3, #0
 800208e:	f04f 0400 	mov.w	r4, #0
 8002092:	0194      	lsls	r4, r2, #6
 8002094:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002098:	018b      	lsls	r3, r1, #6
 800209a:	1a5b      	subs	r3, r3, r1
 800209c:	eb64 0402 	sbc.w	r4, r4, r2
 80020a0:	f04f 0100 	mov.w	r1, #0
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	00e2      	lsls	r2, r4, #3
 80020aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020ae:	00d9      	lsls	r1, r3, #3
 80020b0:	460b      	mov	r3, r1
 80020b2:	4614      	mov	r4, r2
 80020b4:	195b      	adds	r3, r3, r5
 80020b6:	eb44 0406 	adc.w	r4, r4, r6
 80020ba:	f04f 0100 	mov.w	r1, #0
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	0262      	lsls	r2, r4, #9
 80020c4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80020c8:	0259      	lsls	r1, r3, #9
 80020ca:	460b      	mov	r3, r1
 80020cc:	4614      	mov	r4, r2
 80020ce:	4618      	mov	r0, r3
 80020d0:	4621      	mov	r1, r4
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f04f 0400 	mov.w	r4, #0
 80020d8:	461a      	mov	r2, r3
 80020da:	4623      	mov	r3, r4
 80020dc:	f7fe fdd4 	bl	8000c88 <__aeabi_uldivmod>
 80020e0:	4603      	mov	r3, r0
 80020e2:	460c      	mov	r4, r1
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	e049      	b.n	800217c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020e8:	4b85      	ldr	r3, [pc, #532]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	099b      	lsrs	r3, r3, #6
 80020ee:	f04f 0400 	mov.w	r4, #0
 80020f2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	ea03 0501 	and.w	r5, r3, r1
 80020fe:	ea04 0602 	and.w	r6, r4, r2
 8002102:	4629      	mov	r1, r5
 8002104:	4632      	mov	r2, r6
 8002106:	f04f 0300 	mov.w	r3, #0
 800210a:	f04f 0400 	mov.w	r4, #0
 800210e:	0154      	lsls	r4, r2, #5
 8002110:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002114:	014b      	lsls	r3, r1, #5
 8002116:	4619      	mov	r1, r3
 8002118:	4622      	mov	r2, r4
 800211a:	1b49      	subs	r1, r1, r5
 800211c:	eb62 0206 	sbc.w	r2, r2, r6
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	f04f 0400 	mov.w	r4, #0
 8002128:	0194      	lsls	r4, r2, #6
 800212a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800212e:	018b      	lsls	r3, r1, #6
 8002130:	1a5b      	subs	r3, r3, r1
 8002132:	eb64 0402 	sbc.w	r4, r4, r2
 8002136:	f04f 0100 	mov.w	r1, #0
 800213a:	f04f 0200 	mov.w	r2, #0
 800213e:	00e2      	lsls	r2, r4, #3
 8002140:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002144:	00d9      	lsls	r1, r3, #3
 8002146:	460b      	mov	r3, r1
 8002148:	4614      	mov	r4, r2
 800214a:	195b      	adds	r3, r3, r5
 800214c:	eb44 0406 	adc.w	r4, r4, r6
 8002150:	f04f 0100 	mov.w	r1, #0
 8002154:	f04f 0200 	mov.w	r2, #0
 8002158:	02a2      	lsls	r2, r4, #10
 800215a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800215e:	0299      	lsls	r1, r3, #10
 8002160:	460b      	mov	r3, r1
 8002162:	4614      	mov	r4, r2
 8002164:	4618      	mov	r0, r3
 8002166:	4621      	mov	r1, r4
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f04f 0400 	mov.w	r4, #0
 800216e:	461a      	mov	r2, r3
 8002170:	4623      	mov	r3, r4
 8002172:	f7fe fd89 	bl	8000c88 <__aeabi_uldivmod>
 8002176:	4603      	mov	r3, r0
 8002178:	460c      	mov	r4, r1
 800217a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800217c:	4b60      	ldr	r3, [pc, #384]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	0c1b      	lsrs	r3, r3, #16
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	3301      	adds	r3, #1
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	fbb2 f3f3 	udiv	r3, r2, r3
 8002194:	613b      	str	r3, [r7, #16]
      break;
 8002196:	e0ae      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002198:	4b59      	ldr	r3, [pc, #356]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021a0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021a2:	4b57      	ldr	r3, [pc, #348]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d04a      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ae:	4b54      	ldr	r3, [pc, #336]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	099b      	lsrs	r3, r3, #6
 80021b4:	f04f 0400 	mov.w	r4, #0
 80021b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	ea03 0501 	and.w	r5, r3, r1
 80021c4:	ea04 0602 	and.w	r6, r4, r2
 80021c8:	4629      	mov	r1, r5
 80021ca:	4632      	mov	r2, r6
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	f04f 0400 	mov.w	r4, #0
 80021d4:	0154      	lsls	r4, r2, #5
 80021d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021da:	014b      	lsls	r3, r1, #5
 80021dc:	4619      	mov	r1, r3
 80021de:	4622      	mov	r2, r4
 80021e0:	1b49      	subs	r1, r1, r5
 80021e2:	eb62 0206 	sbc.w	r2, r2, r6
 80021e6:	f04f 0300 	mov.w	r3, #0
 80021ea:	f04f 0400 	mov.w	r4, #0
 80021ee:	0194      	lsls	r4, r2, #6
 80021f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021f4:	018b      	lsls	r3, r1, #6
 80021f6:	1a5b      	subs	r3, r3, r1
 80021f8:	eb64 0402 	sbc.w	r4, r4, r2
 80021fc:	f04f 0100 	mov.w	r1, #0
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	00e2      	lsls	r2, r4, #3
 8002206:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800220a:	00d9      	lsls	r1, r3, #3
 800220c:	460b      	mov	r3, r1
 800220e:	4614      	mov	r4, r2
 8002210:	195b      	adds	r3, r3, r5
 8002212:	eb44 0406 	adc.w	r4, r4, r6
 8002216:	f04f 0100 	mov.w	r1, #0
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	0262      	lsls	r2, r4, #9
 8002220:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002224:	0259      	lsls	r1, r3, #9
 8002226:	460b      	mov	r3, r1
 8002228:	4614      	mov	r4, r2
 800222a:	4618      	mov	r0, r3
 800222c:	4621      	mov	r1, r4
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f04f 0400 	mov.w	r4, #0
 8002234:	461a      	mov	r2, r3
 8002236:	4623      	mov	r3, r4
 8002238:	f7fe fd26 	bl	8000c88 <__aeabi_uldivmod>
 800223c:	4603      	mov	r3, r0
 800223e:	460c      	mov	r4, r1
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	e049      	b.n	80022d8 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002244:	4b2e      	ldr	r3, [pc, #184]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	099b      	lsrs	r3, r3, #6
 800224a:	f04f 0400 	mov.w	r4, #0
 800224e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	ea03 0501 	and.w	r5, r3, r1
 800225a:	ea04 0602 	and.w	r6, r4, r2
 800225e:	4629      	mov	r1, r5
 8002260:	4632      	mov	r2, r6
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	f04f 0400 	mov.w	r4, #0
 800226a:	0154      	lsls	r4, r2, #5
 800226c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002270:	014b      	lsls	r3, r1, #5
 8002272:	4619      	mov	r1, r3
 8002274:	4622      	mov	r2, r4
 8002276:	1b49      	subs	r1, r1, r5
 8002278:	eb62 0206 	sbc.w	r2, r2, r6
 800227c:	f04f 0300 	mov.w	r3, #0
 8002280:	f04f 0400 	mov.w	r4, #0
 8002284:	0194      	lsls	r4, r2, #6
 8002286:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800228a:	018b      	lsls	r3, r1, #6
 800228c:	1a5b      	subs	r3, r3, r1
 800228e:	eb64 0402 	sbc.w	r4, r4, r2
 8002292:	f04f 0100 	mov.w	r1, #0
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	00e2      	lsls	r2, r4, #3
 800229c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022a0:	00d9      	lsls	r1, r3, #3
 80022a2:	460b      	mov	r3, r1
 80022a4:	4614      	mov	r4, r2
 80022a6:	195b      	adds	r3, r3, r5
 80022a8:	eb44 0406 	adc.w	r4, r4, r6
 80022ac:	f04f 0100 	mov.w	r1, #0
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	02a2      	lsls	r2, r4, #10
 80022b6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80022ba:	0299      	lsls	r1, r3, #10
 80022bc:	460b      	mov	r3, r1
 80022be:	4614      	mov	r4, r2
 80022c0:	4618      	mov	r0, r3
 80022c2:	4621      	mov	r1, r4
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f04f 0400 	mov.w	r4, #0
 80022ca:	461a      	mov	r2, r3
 80022cc:	4623      	mov	r3, r4
 80022ce:	f7fe fcdb 	bl	8000c88 <__aeabi_uldivmod>
 80022d2:	4603      	mov	r3, r0
 80022d4:	460c      	mov	r4, r1
 80022d6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	0f1b      	lsrs	r3, r3, #28
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ec:	613b      	str	r3, [r7, #16]
      break;
 80022ee:	e002      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022f0:	4b04      	ldr	r3, [pc, #16]	; (8002304 <HAL_RCC_GetSysClockFreq+0x338>)
 80022f2:	613b      	str	r3, [r7, #16]
      break;
 80022f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022f6:	693b      	ldr	r3, [r7, #16]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	371c      	adds	r7, #28
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002300:	40023800 	.word	0x40023800
 8002304:	00f42400 	.word	0x00f42400
 8002308:	007a1200 	.word	0x007a1200

0800230c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 8083 	beq.w	800242c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002326:	4b95      	ldr	r3, [pc, #596]	; (800257c <HAL_RCC_OscConfig+0x270>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
 800232e:	2b04      	cmp	r3, #4
 8002330:	d019      	beq.n	8002366 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002332:	4b92      	ldr	r3, [pc, #584]	; (800257c <HAL_RCC_OscConfig+0x270>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800233a:	2b08      	cmp	r3, #8
 800233c:	d106      	bne.n	800234c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800233e:	4b8f      	ldr	r3, [pc, #572]	; (800257c <HAL_RCC_OscConfig+0x270>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800234a:	d00c      	beq.n	8002366 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800234c:	4b8b      	ldr	r3, [pc, #556]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002354:	2b0c      	cmp	r3, #12
 8002356:	d112      	bne.n	800237e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002358:	4b88      	ldr	r3, [pc, #544]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002360:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002364:	d10b      	bne.n	800237e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002366:	4b85      	ldr	r3, [pc, #532]	; (800257c <HAL_RCC_OscConfig+0x270>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d05b      	beq.n	800242a <HAL_RCC_OscConfig+0x11e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d157      	bne.n	800242a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e216      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002386:	d106      	bne.n	8002396 <HAL_RCC_OscConfig+0x8a>
 8002388:	4b7c      	ldr	r3, [pc, #496]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a7b      	ldr	r2, [pc, #492]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800238e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	e01d      	b.n	80023d2 <HAL_RCC_OscConfig+0xc6>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800239e:	d10c      	bne.n	80023ba <HAL_RCC_OscConfig+0xae>
 80023a0:	4b76      	ldr	r3, [pc, #472]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a75      	ldr	r2, [pc, #468]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80023a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	4b73      	ldr	r3, [pc, #460]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a72      	ldr	r2, [pc, #456]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80023b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b6:	6013      	str	r3, [r2, #0]
 80023b8:	e00b      	b.n	80023d2 <HAL_RCC_OscConfig+0xc6>
 80023ba:	4b70      	ldr	r3, [pc, #448]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a6f      	ldr	r2, [pc, #444]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80023c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	4b6d      	ldr	r3, [pc, #436]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a6c      	ldr	r2, [pc, #432]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80023cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d013      	beq.n	8002402 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023da:	f7fe fe3b 	bl	8001054 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023e2:	f7fe fe37 	bl	8001054 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b64      	cmp	r3, #100	; 0x64
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e1db      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f4:	4b61      	ldr	r3, [pc, #388]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f0      	beq.n	80023e2 <HAL_RCC_OscConfig+0xd6>
 8002400:	e014      	b.n	800242c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002402:	f7fe fe27 	bl	8001054 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800240a:	f7fe fe23 	bl	8001054 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b64      	cmp	r3, #100	; 0x64
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e1c7      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241c:	4b57      	ldr	r3, [pc, #348]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1f0      	bne.n	800240a <HAL_RCC_OscConfig+0xfe>
 8002428:	e000      	b.n	800242c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d06f      	beq.n	8002518 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002438:	4b50      	ldr	r3, [pc, #320]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 030c 	and.w	r3, r3, #12
 8002440:	2b00      	cmp	r3, #0
 8002442:	d017      	beq.n	8002474 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002444:	4b4d      	ldr	r3, [pc, #308]	; (800257c <HAL_RCC_OscConfig+0x270>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800244c:	2b08      	cmp	r3, #8
 800244e:	d105      	bne.n	800245c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002450:	4b4a      	ldr	r3, [pc, #296]	; (800257c <HAL_RCC_OscConfig+0x270>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00b      	beq.n	8002474 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245c:	4b47      	ldr	r3, [pc, #284]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002464:	2b0c      	cmp	r3, #12
 8002466:	d11c      	bne.n	80024a2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002468:	4b44      	ldr	r3, [pc, #272]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d116      	bne.n	80024a2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002474:	4b41      	ldr	r3, [pc, #260]	; (800257c <HAL_RCC_OscConfig+0x270>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_RCC_OscConfig+0x180>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d001      	beq.n	800248c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e18f      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248c:	4b3b      	ldr	r3, [pc, #236]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	4938      	ldr	r1, [pc, #224]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800249c:	4313      	orrs	r3, r2
 800249e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a0:	e03a      	b.n	8002518 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d020      	beq.n	80024ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024aa:	4b35      	ldr	r3, [pc, #212]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b0:	f7fe fdd0 	bl	8001054 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b8:	f7fe fdcc 	bl	8001054 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e170      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ca:	4b2c      	ldr	r3, [pc, #176]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f0      	beq.n	80024b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d6:	4b29      	ldr	r3, [pc, #164]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4925      	ldr	r1, [pc, #148]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	600b      	str	r3, [r1, #0]
 80024ea:	e015      	b.n	8002518 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ec:	4b24      	ldr	r3, [pc, #144]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f2:	f7fe fdaf 	bl	8001054 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024fa:	f7fe fdab 	bl	8001054 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e14f      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250c:	4b1b      	ldr	r3, [pc, #108]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1f0      	bne.n	80024fa <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	2b00      	cmp	r3, #0
 8002522:	d037      	beq.n	8002594 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d016      	beq.n	800255a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252c:	4b15      	ldr	r3, [pc, #84]	; (8002584 <HAL_RCC_OscConfig+0x278>)
 800252e:	2201      	movs	r2, #1
 8002530:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002532:	f7fe fd8f 	bl	8001054 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800253a:	f7fe fd8b 	bl	8001054 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e12f      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800254e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0f0      	beq.n	800253a <HAL_RCC_OscConfig+0x22e>
 8002558:	e01c      	b.n	8002594 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <HAL_RCC_OscConfig+0x278>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002560:	f7fe fd78 	bl	8001054 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002566:	e00f      	b.n	8002588 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002568:	f7fe fd74 	bl	8001054 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d908      	bls.n	8002588 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e118      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800
 8002580:	42470000 	.word	0x42470000
 8002584:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002588:	4b8a      	ldr	r3, [pc, #552]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 800258a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1e9      	bne.n	8002568 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 8097 	beq.w	80026d0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a2:	2300      	movs	r3, #0
 80025a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025a6:	4b83      	ldr	r3, [pc, #524]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10f      	bne.n	80025d2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	4b7f      	ldr	r3, [pc, #508]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	4a7e      	ldr	r2, [pc, #504]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 80025bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c0:	6413      	str	r3, [r2, #64]	; 0x40
 80025c2:	4b7c      	ldr	r3, [pc, #496]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025ce:	2301      	movs	r3, #1
 80025d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d2:	4b79      	ldr	r3, [pc, #484]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d118      	bne.n	8002610 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025de:	4b76      	ldr	r3, [pc, #472]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a75      	ldr	r2, [pc, #468]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 80025e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ea:	f7fe fd33 	bl	8001054 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f2:	f7fe fd2f 	bl	8001054 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e0d3      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002604:	4b6c      	ldr	r3, [pc, #432]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0f0      	beq.n	80025f2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d106      	bne.n	8002626 <HAL_RCC_OscConfig+0x31a>
 8002618:	4b66      	ldr	r3, [pc, #408]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	4a65      	ldr	r2, [pc, #404]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	6713      	str	r3, [r2, #112]	; 0x70
 8002624:	e01c      	b.n	8002660 <HAL_RCC_OscConfig+0x354>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2b05      	cmp	r3, #5
 800262c:	d10c      	bne.n	8002648 <HAL_RCC_OscConfig+0x33c>
 800262e:	4b61      	ldr	r3, [pc, #388]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 8002630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002632:	4a60      	ldr	r2, [pc, #384]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 8002634:	f043 0304 	orr.w	r3, r3, #4
 8002638:	6713      	str	r3, [r2, #112]	; 0x70
 800263a:	4b5e      	ldr	r3, [pc, #376]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 800263c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263e:	4a5d      	ldr	r2, [pc, #372]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	6713      	str	r3, [r2, #112]	; 0x70
 8002646:	e00b      	b.n	8002660 <HAL_RCC_OscConfig+0x354>
 8002648:	4b5a      	ldr	r3, [pc, #360]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 800264a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264c:	4a59      	ldr	r2, [pc, #356]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 800264e:	f023 0301 	bic.w	r3, r3, #1
 8002652:	6713      	str	r3, [r2, #112]	; 0x70
 8002654:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 8002656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002658:	4a56      	ldr	r2, [pc, #344]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 800265a:	f023 0304 	bic.w	r3, r3, #4
 800265e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d015      	beq.n	8002694 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002668:	f7fe fcf4 	bl	8001054 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800266e:	e00a      	b.n	8002686 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002670:	f7fe fcf0 	bl	8001054 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f241 3288 	movw	r2, #5000	; 0x1388
 800267e:	4293      	cmp	r3, r2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e092      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002686:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 8002688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0ee      	beq.n	8002670 <HAL_RCC_OscConfig+0x364>
 8002692:	e014      	b.n	80026be <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002694:	f7fe fcde 	bl	8001054 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269a:	e00a      	b.n	80026b2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269c:	f7fe fcda 	bl	8001054 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e07c      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b2:	4b40      	ldr	r3, [pc, #256]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 80026b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1ee      	bne.n	800269c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026be:	7dfb      	ldrb	r3, [r7, #23]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d105      	bne.n	80026d0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c4:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	4a3a      	ldr	r2, [pc, #232]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 80026ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d068      	beq.n	80027aa <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026d8:	4b36      	ldr	r3, [pc, #216]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 030c 	and.w	r3, r3, #12
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d060      	beq.n	80027a6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d145      	bne.n	8002778 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ec:	4b33      	ldr	r3, [pc, #204]	; (80027bc <HAL_RCC_OscConfig+0x4b0>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f2:	f7fe fcaf 	bl	8001054 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fa:	f7fe fcab 	bl	8001054 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e04f      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270c:	4b29      	ldr	r3, [pc, #164]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f0      	bne.n	80026fa <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69da      	ldr	r2, [r3, #28]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	019b      	lsls	r3, r3, #6
 8002728:	431a      	orrs	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272e:	085b      	lsrs	r3, r3, #1
 8002730:	3b01      	subs	r3, #1
 8002732:	041b      	lsls	r3, r3, #16
 8002734:	431a      	orrs	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273a:	061b      	lsls	r3, r3, #24
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	071b      	lsls	r3, r3, #28
 8002744:	491b      	ldr	r1, [pc, #108]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 8002746:	4313      	orrs	r3, r2
 8002748:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800274a:	4b1c      	ldr	r3, [pc, #112]	; (80027bc <HAL_RCC_OscConfig+0x4b0>)
 800274c:	2201      	movs	r2, #1
 800274e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002750:	f7fe fc80 	bl	8001054 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002758:	f7fe fc7c 	bl	8001054 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e020      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276a:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0f0      	beq.n	8002758 <HAL_RCC_OscConfig+0x44c>
 8002776:	e018      	b.n	80027aa <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002778:	4b10      	ldr	r3, [pc, #64]	; (80027bc <HAL_RCC_OscConfig+0x4b0>)
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277e:	f7fe fc69 	bl	8001054 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002786:	f7fe fc65 	bl	8001054 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e009      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1f0      	bne.n	8002786 <HAL_RCC_OscConfig+0x47a>
 80027a4:	e001      	b.n	80027aa <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40023800 	.word	0x40023800
 80027b8:	40007000 	.word	0x40007000
 80027bc:	42470060 	.word	0x42470060

080027c0 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ce:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <LL_ADC_INJ_SetSequencerLength>:
  *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
  *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b01      	cmp	r3, #1
 800281e:	bf0c      	ite	eq
 8002820:	2301      	moveq	r3, #1
 8002822:	2300      	movne	r3, #0
 8002824:	b2db      	uxtb	r3, r3
}
 8002826:	4618      	mov	r0, r3
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
	...

08002834 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8002834:	b590      	push	{r4, r7, lr}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800283e:	2300      	movs	r3, #0
 8002840:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8002842:	481c      	ldr	r0, [pc, #112]	; (80028b4 <LL_ADC_CommonInit+0x80>)
 8002844:	f7ff ffe2 	bl	800280c <LL_ADC_IsEnabled>
 8002848:	4604      	mov	r4, r0
 800284a:	481b      	ldr	r0, [pc, #108]	; (80028b8 <LL_ADC_CommonInit+0x84>)
 800284c:	f7ff ffde 	bl	800280c <LL_ADC_IsEnabled>
 8002850:	4603      	mov	r3, r0
 8002852:	431c      	orrs	r4, r3
 8002854:	4819      	ldr	r0, [pc, #100]	; (80028bc <LL_ADC_CommonInit+0x88>)
 8002856:	f7ff ffd9 	bl	800280c <LL_ADC_IsEnabled>
 800285a:	4603      	mov	r3, r0
 800285c:	4323      	orrs	r3, r4
 800285e:	2b00      	cmp	r3, #0
 8002860:	d120      	bne.n	80028a4 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d012      	beq.n	8002890 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <LL_ADC_CommonInit+0x8c>)
 8002870:	4013      	ands	r3, r2
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	6811      	ldr	r1, [r2, #0]
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	6852      	ldr	r2, [r2, #4]
 800287a:	4311      	orrs	r1, r2
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	6892      	ldr	r2, [r2, #8]
 8002880:	4311      	orrs	r1, r2
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	68d2      	ldr	r2, [r2, #12]
 8002886:	430a      	orrs	r2, r1
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	e00b      	b.n	80028a8 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <LL_ADC_CommonInit+0x8c>)
 8002896:	4013      	ands	r3, r2
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	431a      	orrs	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	e001      	b.n	80028a8 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd90      	pop	{r4, r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40012000 	.word	0x40012000
 80028b8:	40012100 	.word	0x40012100
 80028bc:	40012200 	.word	0x40012200
 80028c0:	fffc10e0 	.word	0xfffc10e0

080028c4 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80028ce:	2300      	movs	r3, #0
 80028d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff ff9a 	bl	800280c <LL_ADC_IsEnabled>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d117      	bne.n	800290e <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80028e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	6811      	ldr	r1, [r2, #0]
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	6892      	ldr	r2, [r2, #8]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	e001      	b.n	8002912 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002912:	7bfb      	ldrb	r3, [r7, #15]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002926:	2300      	movs	r3, #0
 8002928:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff ff6e 	bl	800280c <LL_ADC_IsEnabled>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d131      	bne.n	800299a <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00c      	beq.n	8002958 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6859      	ldr	r1, [r3, #4]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	430b      	orrs	r3, r1
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	e008      	b.n	800296a <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	431a      	orrs	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <LL_ADC_REG_Init+0x8c>)
 8002970:	4013      	ands	r3, r2
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	6812      	ldr	r2, [r2, #0]
 8002976:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	68d2      	ldr	r2, [r2, #12]
 800297e:	4311      	orrs	r1, r2
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	6912      	ldr	r2, [r2, #16]
 8002984:	430a      	orrs	r2, r1
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	4619      	mov	r1, r3
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff ff14 	bl	80027c0 <LL_ADC_REG_SetSequencerLength>
 8002998:	e001      	b.n	800299e <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800299e:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	c0fffcfd 	.word	0xc0fffcfd

080029ac <LL_ADC_INJ_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_INJ_Init(ADC_TypeDef *ADCx, LL_ADC_INJ_InitTypeDef *ADC_INJ_InitStruct)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80029b6:	2300      	movs	r3, #0
 80029b8:	73fb      	strb	r3, [r7, #15]
  }
  assert_param(IS_LL_ADC_INJ_TRIG_AUTO(ADC_INJ_InitStruct->TrigAuto));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff ff26 	bl	800280c <LL_ADC_IsEnabled>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d12b      	bne.n	8002a1e <LL_ADC_INJ_Init+0x72>
    /*    - Set ADC group injected conversion trigger: independent or         */
    /*      from ADC group regular                                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_INJ_StartConversionExtTrig().      */
    if(ADC_INJ_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00c      	beq.n	80029e8 <LL_ADC_INJ_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f423 52a0 	bic.w	r2, r3, #5120	; 0x1400
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6899      	ldr	r1, [r3, #8]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	430b      	orrs	r3, r1
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	e008      	b.n	80029fa <LL_ADC_INJ_Init+0x4e>
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f423 52a0 	bic.w	r2, r3, #5120	; 0x1400
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	431a      	orrs	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	605a      	str	r2, [r3, #4]
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_INJ_SetSequencerLength(ADCx, ADC_INJ_InitStruct->SequencerLength);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	4619      	mov	r1, r3
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff fee5 	bl	80027e6 <LL_ADC_INJ_SetSequencerLength>
 8002a1c:	e001      	b.n	8002a22 <LL_ADC_INJ_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <LL_EXTI_EnableIT_0_31+0x20>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4904      	ldr	r1, [pc, #16]	; (8002a4c <LL_EXTI_EnableIT_0_31+0x20>)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	600b      	str	r3, [r1, #0]
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	40013c00 	.word	0x40013c00

08002a50 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <LL_EXTI_DisableIT_0_31+0x24>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	4904      	ldr	r1, [pc, #16]	; (8002a74 <LL_EXTI_DisableIT_0_31+0x24>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40013c00 	.word	0x40013c00

08002a78 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	4904      	ldr	r1, [pc, #16]	; (8002a98 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	604b      	str	r3, [r1, #4]

}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	40013c00 	.word	0x40013c00

08002a9c <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002aa4:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	4904      	ldr	r1, [pc, #16]	; (8002ac0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	604b      	str	r3, [r1, #4]
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	40013c00 	.word	0x40013c00

08002ac4 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002acc:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	4904      	ldr	r1, [pc, #16]	; (8002ae4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	608b      	str	r3, [r1, #8]

}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	40013c00 	.word	0x40013c00

08002ae8 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	43db      	mvns	r3, r3
 8002af8:	4904      	ldr	r1, [pc, #16]	; (8002b0c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	608b      	str	r3, [r1, #8]

}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	40013c00 	.word	0x40013c00

08002b10 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002b18:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	4904      	ldr	r1, [pc, #16]	; (8002b30 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	60cb      	str	r3, [r1, #12]
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	40013c00 	.word	0x40013c00

08002b34 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	43db      	mvns	r3, r3
 8002b44:	4904      	ldr	r1, [pc, #16]	; (8002b58 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	60cb      	str	r3, [r1, #12]
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40013c00 	.word	0x40013c00

08002b5c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002b64:	2300      	movs	r3, #0
 8002b66:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	791b      	ldrb	r3, [r3, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d060      	beq.n	8002c32 <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d067      	beq.n	8002c48 <LL_EXTI_Init+0xec>
    {
      switch (EXTI_InitStruct->Mode)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	795b      	ldrb	r3, [r3, #5]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d00e      	beq.n	8002b9e <LL_EXTI_Init+0x42>
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d017      	beq.n	8002bb4 <LL_EXTI_Init+0x58>
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d120      	bne.n	8002bca <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff ff85 	bl	8002a9c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff ff48 	bl	8002a2c <LL_EXTI_EnableIT_0_31>
          break;
 8002b9c:	e018      	b.n	8002bd0 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff ff54 	bl	8002a50 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff ff63 	bl	8002a78 <LL_EXTI_EnableEvent_0_31>
          break;
 8002bb2:	e00d      	b.n	8002bd0 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff ff37 	bl	8002a2c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff ff58 	bl	8002a78 <LL_EXTI_EnableEvent_0_31>
          break;
 8002bc8:	e002      	b.n	8002bd0 <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	73fb      	strb	r3, [r7, #15]
          break;
 8002bce:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	799b      	ldrb	r3, [r3, #6]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d037      	beq.n	8002c48 <LL_EXTI_Init+0xec>
      {
        switch (EXTI_InitStruct->Trigger)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	799b      	ldrb	r3, [r3, #6]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d00e      	beq.n	8002bfe <LL_EXTI_Init+0xa2>
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d017      	beq.n	8002c14 <LL_EXTI_Init+0xb8>
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d120      	bne.n	8002c2a <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff ffa1 	bl	8002b34 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff ff64 	bl	8002ac4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002bfc:	e025      	b.n	8002c4a <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff ff70 	bl	8002ae8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff ff7f 	bl	8002b10 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002c12:	e01a      	b.n	8002c4a <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff ff53 	bl	8002ac4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff ff74 	bl	8002b10 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002c28:	e00f      	b.n	8002c4a <LL_EXTI_Init+0xee>
          default:
            status = ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	73fb      	strb	r3, [r7, #15]
            break;
 8002c2e:	bf00      	nop
 8002c30:	e00b      	b.n	8002c4a <LL_EXTI_Init+0xee>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff ff0a 	bl	8002a50 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff ff2b 	bl	8002a9c <LL_EXTI_DisableEvent_0_31>
 8002c46:	e000      	b.n	8002c4a <LL_EXTI_Init+0xee>
      }
 8002c48:	bf00      	nop
  }
  return status;
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b089      	sub	sp, #36	; 0x24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	2103      	movs	r1, #3
 8002c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	401a      	ands	r2, r3
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	fa93 f3a3 	rbit	r3, r3
 8002c8e:	61bb      	str	r3, [r7, #24]
  return result;
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	601a      	str	r2, [r3, #0]
}
 8002ca6:	bf00      	nop
 8002ca8:	3724      	adds	r7, #36	; 0x24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b085      	sub	sp, #20
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	605a      	str	r2, [r3, #4]
}
 8002cd6:	bf00      	nop
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b089      	sub	sp, #36	; 0x24
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	fa93 f3a3 	rbit	r3, r3
 8002cfc:	613b      	str	r3, [r7, #16]
  return result;
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	fab3 f383 	clz	r3, r3
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	2103      	movs	r1, #3
 8002d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	401a      	ands	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	fa93 f3a3 	rbit	r3, r3
 8002d1c:	61bb      	str	r3, [r7, #24]
  return result;
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	fab3 f383 	clz	r3, r3
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002d34:	bf00      	nop
 8002d36:	3724      	adds	r7, #36	; 0x24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b089      	sub	sp, #36	; 0x24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	fa93 f3a3 	rbit	r3, r3
 8002d5a:	613b      	str	r3, [r7, #16]
  return result;
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	2103      	movs	r1, #3
 8002d68:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	401a      	ands	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	61bb      	str	r3, [r7, #24]
  return result;
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	fab3 f383 	clz	r3, r3
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	60da      	str	r2, [r3, #12]
}
 8002d92:	bf00      	nop
 8002d94:	3724      	adds	r7, #36	; 0x24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b089      	sub	sp, #36	; 0x24
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a1a      	ldr	r2, [r3, #32]
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	fa93 f3a3 	rbit	r3, r3
 8002db8:	613b      	str	r3, [r7, #16]
  return result;
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	fab3 f383 	clz	r3, r3
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	210f      	movs	r1, #15
 8002dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	401a      	ands	r2, r3
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	fa93 f3a3 	rbit	r3, r3
 8002dd8:	61bb      	str	r3, [r7, #24]
  return result;
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	fab3 f383 	clz	r3, r3
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dea:	431a      	orrs	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002df0:	bf00      	nop
 8002df2:	3724      	adds	r7, #36	; 0x24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b089      	sub	sp, #36	; 0x24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	0a1b      	lsrs	r3, r3, #8
 8002e10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	613b      	str	r3, [r7, #16]
  return result;
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	fab3 f383 	clz	r3, r3
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	210f      	movs	r1, #15
 8002e26:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	401a      	ands	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	0a1b      	lsrs	r3, r3, #8
 8002e32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	fa93 f3a3 	rbit	r3, r3
 8002e3a:	61bb      	str	r3, [r7, #24]
  return result;
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	fab3 f383 	clz	r3, r3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002e52:	bf00      	nop
 8002e54:	3724      	adds	r7, #36	; 0x24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b088      	sub	sp, #32
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	fa93 f3a3 	rbit	r3, r3
 8002e7c:	613b      	str	r3, [r7, #16]
  return result;
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	fab3 f383 	clz	r3, r3
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002e88:	e049      	b.n	8002f1e <LL_GPIO_Init+0xc0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	2101      	movs	r1, #1
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	fa01 f303 	lsl.w	r3, r1, r3
 8002e96:	4013      	ands	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d03b      	beq.n	8002f18 <LL_GPIO_Init+0xba>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	69b9      	ldr	r1, [r7, #24]
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7ff fed3 	bl	8002c54 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d003      	beq.n	8002ebe <LL_GPIO_Init+0x60>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d106      	bne.n	8002ecc <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	69b9      	ldr	r1, [r7, #24]
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff ff0b 	bl	8002ce2 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	69b9      	ldr	r1, [r7, #24]
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff ff33 	bl	8002d40 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d11a      	bne.n	8002f18 <LL_GPIO_Init+0xba>
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	fa93 f3a3 	rbit	r3, r3
 8002eec:	60bb      	str	r3, [r7, #8]
  return result;
 8002eee:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002ef0:	fab3 f383 	clz	r3, r3
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b07      	cmp	r3, #7
 8002ef8:	d807      	bhi.n	8002f0a <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	461a      	mov	r2, r3
 8002f00:	69b9      	ldr	r1, [r7, #24]
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7ff ff4b 	bl	8002d9e <LL_GPIO_SetAFPin_0_7>
 8002f08:	e006      	b.n	8002f18 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	69b9      	ldr	r1, [r7, #24]
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff ff72 	bl	8002dfc <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	fa22 f303 	lsr.w	r3, r2, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1ae      	bne.n	8002e8a <LL_GPIO_Init+0x2c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d003      	beq.n	8002f3c <LL_GPIO_Init+0xde>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d107      	bne.n	8002f4c <LL_GPIO_Init+0xee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	6819      	ldr	r1, [r3, #0]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	461a      	mov	r2, r3
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7ff feb3 	bl	8002cb2 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3720      	adds	r7, #32
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002f5c:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <LL_RCC_GetSysClkSource+0x18>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f003 030c 	and.w	r3, r3, #12
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40023800 	.word	0x40023800

08002f74 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002f78:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <LL_RCC_GetAHBPrescaler+0x18>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40023800 	.word	0x40023800

08002f90 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002f94:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40023800 	.word	0x40023800

08002fac <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002fb0:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40023800 	.word	0x40023800

08002fc8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002fcc:	4b04      	ldr	r3, [pc, #16]	; (8002fe0 <LL_RCC_PLL_GetMainSource+0x18>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	40023800 	.word	0x40023800

08002fe4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002fe8:	4b04      	ldr	r3, [pc, #16]	; (8002ffc <LL_RCC_PLL_GetN+0x18>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	099b      	lsrs	r3, r3, #6
 8002fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	40023800 	.word	0x40023800

08003000 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003004:	4b04      	ldr	r3, [pc, #16]	; (8003018 <LL_RCC_PLL_GetP+0x18>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800300c:	4618      	mov	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40023800 	.word	0x40023800

0800301c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003020:	4b04      	ldr	r3, [pc, #16]	; (8003034 <LL_RCC_PLL_GetR+0x18>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
}
 8003028:	4618      	mov	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40023800 	.word	0x40023800

08003038 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800303c:	4b04      	ldr	r3, [pc, #16]	; (8003050 <LL_RCC_PLL_GetDivider+0x18>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003044:	4618      	mov	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800

08003054 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800305c:	f000 f820 	bl	80030a0 <RCC_GetSystemClockFreq>
 8003060:	4602      	mov	r2, r0
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f000 f85c 	bl	8003128 <RCC_GetHCLKClockFreq>
 8003070:	4602      	mov	r2, r0
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	4618      	mov	r0, r3
 800307c:	f000 f86a 	bl	8003154 <RCC_GetPCLK1ClockFreq>
 8003080:	4602      	mov	r2, r0
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4618      	mov	r0, r3
 800308c:	f000 f876 	bl	800317c <RCC_GetPCLK2ClockFreq>
 8003090:	4602      	mov	r2, r0
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	60da      	str	r2, [r3, #12]
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80030a6:	2300      	movs	r3, #0
 80030a8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80030aa:	f7ff ff55 	bl	8002f58 <LL_RCC_GetSysClkSource>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b0c      	cmp	r3, #12
 80030b2:	d82d      	bhi.n	8003110 <RCC_GetSystemClockFreq+0x70>
 80030b4:	a201      	add	r2, pc, #4	; (adr r2, 80030bc <RCC_GetSystemClockFreq+0x1c>)
 80030b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ba:	bf00      	nop
 80030bc:	080030f1 	.word	0x080030f1
 80030c0:	08003111 	.word	0x08003111
 80030c4:	08003111 	.word	0x08003111
 80030c8:	08003111 	.word	0x08003111
 80030cc:	080030f7 	.word	0x080030f7
 80030d0:	08003111 	.word	0x08003111
 80030d4:	08003111 	.word	0x08003111
 80030d8:	08003111 	.word	0x08003111
 80030dc:	080030fd 	.word	0x080030fd
 80030e0:	08003111 	.word	0x08003111
 80030e4:	08003111 	.word	0x08003111
 80030e8:	08003111 	.word	0x08003111
 80030ec:	08003107 	.word	0x08003107
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <RCC_GetSystemClockFreq+0x80>)
 80030f2:	607b      	str	r3, [r7, #4]
      break;
 80030f4:	e00f      	b.n	8003116 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80030f6:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <RCC_GetSystemClockFreq+0x84>)
 80030f8:	607b      	str	r3, [r7, #4]
      break;
 80030fa:	e00c      	b.n	8003116 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80030fc:	2008      	movs	r0, #8
 80030fe:	f000 f851 	bl	80031a4 <RCC_PLL_GetFreqDomain_SYS>
 8003102:	6078      	str	r0, [r7, #4]
      break;
 8003104:	e007      	b.n	8003116 <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 8003106:	200c      	movs	r0, #12
 8003108:	f000 f84c 	bl	80031a4 <RCC_PLL_GetFreqDomain_SYS>
 800310c:	6078      	str	r0, [r7, #4]
      break;
 800310e:	e002      	b.n	8003116 <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003110:	4b03      	ldr	r3, [pc, #12]	; (8003120 <RCC_GetSystemClockFreq+0x80>)
 8003112:	607b      	str	r3, [r7, #4]
      break;
 8003114:	bf00      	nop
  }

  return frequency;
 8003116:	687b      	ldr	r3, [r7, #4]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	00f42400 	.word	0x00f42400
 8003124:	007a1200 	.word	0x007a1200

08003128 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003130:	f7ff ff20 	bl	8002f74 <LL_RCC_GetAHBPrescaler>
 8003134:	4603      	mov	r3, r0
 8003136:	091b      	lsrs	r3, r3, #4
 8003138:	f003 030f 	and.w	r3, r3, #15
 800313c:	4a04      	ldr	r2, [pc, #16]	; (8003150 <RCC_GetHCLKClockFreq+0x28>)
 800313e:	5cd3      	ldrb	r3, [r2, r3]
 8003140:	461a      	mov	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	40d3      	lsrs	r3, r2
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	0800caf4 	.word	0x0800caf4

08003154 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800315c:	f7ff ff18 	bl	8002f90 <LL_RCC_GetAPB1Prescaler>
 8003160:	4603      	mov	r3, r0
 8003162:	0a9b      	lsrs	r3, r3, #10
 8003164:	4a04      	ldr	r2, [pc, #16]	; (8003178 <RCC_GetPCLK1ClockFreq+0x24>)
 8003166:	5cd3      	ldrb	r3, [r2, r3]
 8003168:	461a      	mov	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	40d3      	lsrs	r3, r2
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	0800cb04 	.word	0x0800cb04

0800317c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003184:	f7ff ff12 	bl	8002fac <LL_RCC_GetAPB2Prescaler>
 8003188:	4603      	mov	r3, r0
 800318a:	0b5b      	lsrs	r3, r3, #13
 800318c:	4a04      	ldr	r2, [pc, #16]	; (80031a0 <RCC_GetPCLK2ClockFreq+0x24>)
 800318e:	5cd3      	ldrb	r3, [r2, r3]
 8003190:	461a      	mov	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	40d3      	lsrs	r3, r2
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	0800cb04 	.word	0x0800cb04

080031a4 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80031a4:	b590      	push	{r4, r7, lr}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
 80031b0:	2300      	movs	r3, #0
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	2300      	movs	r3, #0
 80031b6:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80031b8:	f7ff ff06 	bl	8002fc8 <LL_RCC_PLL_GetMainSource>
 80031bc:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <RCC_PLL_GetFreqDomain_SYS+0x28>
 80031c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031c8:	d003      	beq.n	80031d2 <RCC_PLL_GetFreqDomain_SYS+0x2e>
 80031ca:	e005      	b.n	80031d8 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80031cc:	4b1b      	ldr	r3, [pc, #108]	; (800323c <RCC_PLL_GetFreqDomain_SYS+0x98>)
 80031ce:	617b      	str	r3, [r7, #20]
      break;
 80031d0:	e005      	b.n	80031de <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80031d2:	4b1b      	ldr	r3, [pc, #108]	; (8003240 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 80031d4:	617b      	str	r3, [r7, #20]
      break;
 80031d6:	e002      	b.n	80031de <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 80031d8:	4b18      	ldr	r3, [pc, #96]	; (800323c <RCC_PLL_GetFreqDomain_SYS+0x98>)
 80031da:	617b      	str	r3, [r7, #20]
      break;
 80031dc:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d114      	bne.n	800320e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80031e4:	f7ff ff28 	bl	8003038 <LL_RCC_PLL_GetDivider>
 80031e8:	4602      	mov	r2, r0
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	fbb3 f4f2 	udiv	r4, r3, r2
 80031f0:	f7ff fef8 	bl	8002fe4 <LL_RCC_PLL_GetN>
 80031f4:	4603      	mov	r3, r0
 80031f6:	fb03 f404 	mul.w	r4, r3, r4
 80031fa:	f7ff ff01 	bl	8003000 <LL_RCC_PLL_GetP>
 80031fe:	4603      	mov	r3, r0
 8003200:	0c1b      	lsrs	r3, r3, #16
 8003202:	3301      	adds	r3, #1
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	fbb4 f3f3 	udiv	r3, r4, r3
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	e011      	b.n	8003232 <RCC_PLL_GetFreqDomain_SYS+0x8e>
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800320e:	f7ff ff13 	bl	8003038 <LL_RCC_PLL_GetDivider>
 8003212:	4602      	mov	r2, r0
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	fbb3 f4f2 	udiv	r4, r3, r2
 800321a:	f7ff fee3 	bl	8002fe4 <LL_RCC_PLL_GetN>
 800321e:	4603      	mov	r3, r0
 8003220:	fb03 f404 	mul.w	r4, r3, r4
 8003224:	f7ff fefa 	bl	800301c <LL_RCC_PLL_GetR>
 8003228:	4603      	mov	r3, r0
 800322a:	0f1b      	lsrs	r3, r3, #28
 800322c:	fbb4 f3f3 	udiv	r3, r4, r3
 8003230:	613b      	str	r3, [r7, #16]
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003232:	693b      	ldr	r3, [r7, #16]
}
 8003234:	4618      	mov	r0, r3
 8003236:	371c      	adds	r7, #28
 8003238:	46bd      	mov	sp, r7
 800323a:	bd90      	pop	{r4, r7, pc}
 800323c:	00f42400 	.word	0x00f42400
 8003240:	007a1200 	.word	0x007a1200

08003244 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	641a      	str	r2, [r3, #64]	; 0x40
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f043 0201 	orr.w	r2, r3, #1
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	615a      	str	r2, [r3, #20]
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a3d      	ldr	r2, [pc, #244]	; (8003430 <LL_TIM_Init+0x108>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d013      	beq.n	8003368 <LL_TIM_Init+0x40>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003346:	d00f      	beq.n	8003368 <LL_TIM_Init+0x40>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a3a      	ldr	r2, [pc, #232]	; (8003434 <LL_TIM_Init+0x10c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d00b      	beq.n	8003368 <LL_TIM_Init+0x40>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a39      	ldr	r2, [pc, #228]	; (8003438 <LL_TIM_Init+0x110>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d007      	beq.n	8003368 <LL_TIM_Init+0x40>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a38      	ldr	r2, [pc, #224]	; (800343c <LL_TIM_Init+0x114>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d003      	beq.n	8003368 <LL_TIM_Init+0x40>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a37      	ldr	r2, [pc, #220]	; (8003440 <LL_TIM_Init+0x118>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d106      	bne.n	8003376 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4313      	orrs	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a2d      	ldr	r2, [pc, #180]	; (8003430 <LL_TIM_Init+0x108>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d02b      	beq.n	80033d6 <LL_TIM_Init+0xae>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003384:	d027      	beq.n	80033d6 <LL_TIM_Init+0xae>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a2a      	ldr	r2, [pc, #168]	; (8003434 <LL_TIM_Init+0x10c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d023      	beq.n	80033d6 <LL_TIM_Init+0xae>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a29      	ldr	r2, [pc, #164]	; (8003438 <LL_TIM_Init+0x110>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d01f      	beq.n	80033d6 <LL_TIM_Init+0xae>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a28      	ldr	r2, [pc, #160]	; (800343c <LL_TIM_Init+0x114>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d01b      	beq.n	80033d6 <LL_TIM_Init+0xae>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a27      	ldr	r2, [pc, #156]	; (8003440 <LL_TIM_Init+0x118>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d017      	beq.n	80033d6 <LL_TIM_Init+0xae>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a26      	ldr	r2, [pc, #152]	; (8003444 <LL_TIM_Init+0x11c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d013      	beq.n	80033d6 <LL_TIM_Init+0xae>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a25      	ldr	r2, [pc, #148]	; (8003448 <LL_TIM_Init+0x120>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00f      	beq.n	80033d6 <LL_TIM_Init+0xae>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a24      	ldr	r2, [pc, #144]	; (800344c <LL_TIM_Init+0x124>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d00b      	beq.n	80033d6 <LL_TIM_Init+0xae>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a23      	ldr	r2, [pc, #140]	; (8003450 <LL_TIM_Init+0x128>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d007      	beq.n	80033d6 <LL_TIM_Init+0xae>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a22      	ldr	r2, [pc, #136]	; (8003454 <LL_TIM_Init+0x12c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d003      	beq.n	80033d6 <LL_TIM_Init+0xae>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a21      	ldr	r2, [pc, #132]	; (8003458 <LL_TIM_Init+0x130>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d106      	bne.n	80033e4 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	4619      	mov	r1, r3
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff ff35 	bl	8003260 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	4619      	mov	r1, r3
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff ff21 	bl	8003244 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a0a      	ldr	r2, [pc, #40]	; (8003430 <LL_TIM_Init+0x108>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d003      	beq.n	8003412 <LL_TIM_Init+0xea>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a0c      	ldr	r2, [pc, #48]	; (8003440 <LL_TIM_Init+0x118>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d105      	bne.n	800341e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	7c1b      	ldrb	r3, [r3, #16]
 8003416:	4619      	mov	r1, r3
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7ff ff2f 	bl	800327c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff ff72 	bl	8003308 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40010000 	.word	0x40010000
 8003434:	40000400 	.word	0x40000400
 8003438:	40000800 	.word	0x40000800
 800343c:	40000c00 	.word	0x40000c00
 8003440:	40010400 	.word	0x40010400
 8003444:	40014000 	.word	0x40014000
 8003448:	40014400 	.word	0x40014400
 800344c:	40014800 	.word	0x40014800
 8003450:	40001800 	.word	0x40001800
 8003454:	40001c00 	.word	0x40001c00
 8003458:	40002000 	.word	0x40002000

0800345c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2b10      	cmp	r3, #16
 8003470:	d012      	beq.n	8003498 <LL_TIM_OC_Init+0x3c>
 8003472:	2b10      	cmp	r3, #16
 8003474:	d802      	bhi.n	800347c <LL_TIM_OC_Init+0x20>
 8003476:	2b01      	cmp	r3, #1
 8003478:	d007      	beq.n	800348a <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800347a:	e022      	b.n	80034c2 <LL_TIM_OC_Init+0x66>
  switch (Channel)
 800347c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003480:	d011      	beq.n	80034a6 <LL_TIM_OC_Init+0x4a>
 8003482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003486:	d015      	beq.n	80034b4 <LL_TIM_OC_Init+0x58>
      break;
 8003488:	e01b      	b.n	80034c2 <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f867 	bl	8003560 <OC1Config>
 8003492:	4603      	mov	r3, r0
 8003494:	75fb      	strb	r3, [r7, #23]
      break;
 8003496:	e014      	b.n	80034c2 <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 f8cc 	bl	8003638 <OC2Config>
 80034a0:	4603      	mov	r3, r0
 80034a2:	75fb      	strb	r3, [r7, #23]
      break;
 80034a4:	e00d      	b.n	80034c2 <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 f935 	bl	8003718 <OC3Config>
 80034ae:	4603      	mov	r3, r0
 80034b0:	75fb      	strb	r3, [r7, #23]
      break;
 80034b2:	e006      	b.n	80034c2 <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 f99e 	bl	80037f8 <OC4Config>
 80034bc:	4603      	mov	r3, r0
 80034be:	75fb      	strb	r3, [r7, #23]
      break;
 80034c0:	bf00      	nop
  }

  return result;
 80034c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	7b12      	ldrb	r2, [r2, #12]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4313      	orrs	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	89d2      	ldrh	r2, [r2, #14]
 800351c:	4313      	orrs	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	4313      	orrs	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	4313      	orrs	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
	...

08003560 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	f023 0201 	bic.w	r2, r3, #1
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0303 	bic.w	r3, r3, #3
 800358e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f023 0202 	bic.w	r2, r3, #2
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f023 0201 	bic.w	r2, r3, #1
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a1c      	ldr	r2, [pc, #112]	; (8003630 <OC1Config+0xd0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d003      	beq.n	80035ca <OC1Config+0x6a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a1b      	ldr	r2, [pc, #108]	; (8003634 <OC1Config+0xd4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d11e      	bne.n	8003608 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f023 0208 	bic.w	r2, r3, #8
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4313      	orrs	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f023 0204 	bic.w	r2, r3, #4
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4313      	orrs	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	4313      	orrs	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	4619      	mov	r1, r3
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7ff fe3c 	bl	8003298 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40010000 	.word	0x40010000
 8003634:	40010400 	.word	0x40010400

08003638 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	f023 0210 	bic.w	r2, r3, #16
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	021b      	lsls	r3, r3, #8
 8003674:	4313      	orrs	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f023 0220 	bic.w	r2, r3, #32
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	4313      	orrs	r3, r2
 8003686:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f023 0210 	bic.w	r2, r3, #16
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a1d      	ldr	r2, [pc, #116]	; (8003710 <OC2Config+0xd8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <OC2Config+0x70>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a1c      	ldr	r2, [pc, #112]	; (8003714 <OC2Config+0xdc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d11f      	bne.n	80036e8 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	019b      	lsls	r3, r3, #6
 80036b4:	4313      	orrs	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	019b      	lsls	r3, r3, #6
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	4619      	mov	r1, r3
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff fdda 	bl	80032b4 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40010000 	.word	0x40010000
 8003714:	40010400 	.word	0x40010400

08003718 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0303 	bic.w	r3, r3, #3
 8003746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4313      	orrs	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	021b      	lsls	r3, r3, #8
 8003762:	4313      	orrs	r3, r2
 8003764:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	021b      	lsls	r3, r3, #8
 8003772:	4313      	orrs	r3, r2
 8003774:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a1d      	ldr	r2, [pc, #116]	; (80037f0 <OC3Config+0xd8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d003      	beq.n	8003786 <OC3Config+0x6e>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a1c      	ldr	r2, [pc, #112]	; (80037f4 <OC3Config+0xdc>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d11f      	bne.n	80037c6 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	029b      	lsls	r3, r3, #10
 8003792:	4313      	orrs	r3, r2
 8003794:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	029b      	lsls	r3, r3, #10
 80037a2:	4313      	orrs	r3, r2
 80037a4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	011b      	lsls	r3, r3, #4
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	015b      	lsls	r3, r3, #5
 80037c2:	4313      	orrs	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	4619      	mov	r1, r3
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff fd79 	bl	80032d0 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3718      	adds	r7, #24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40010000 	.word	0x40010000
 80037f4:	40010400 	.word	0x40010400

080037f8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	021b      	lsls	r3, r3, #8
 8003834:	4313      	orrs	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	031b      	lsls	r3, r3, #12
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	031b      	lsls	r3, r3, #12
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a11      	ldr	r2, [pc, #68]	; (80038a0 <OC4Config+0xa8>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d003      	beq.n	8003868 <OC4Config+0x70>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a10      	ldr	r2, [pc, #64]	; (80038a4 <OC4Config+0xac>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d107      	bne.n	8003878 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	019b      	lsls	r3, r3, #6
 8003874:	4313      	orrs	r3, r2
 8003876:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	4619      	mov	r1, r3
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7ff fd2e 	bl	80032ec <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40010000 	.word	0x40010000
 80038a4:	40010400 	.word	0x40010400

080038a8 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038bc:	bf0c      	ite	eq
 80038be:	2301      	moveq	r3, #1
 80038c0:	2300      	movne	r3, #0
 80038c2:	b2db      	uxtb	r3, r3
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	611a      	str	r2, [r3, #16]
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	615a      	str	r2, [r3, #20]
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003930:	d152      	bne.n	80039d8 <LL_USART_SetBaudRate+0xbc>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	009a      	lsls	r2, r3, #2
 800393c:	441a      	add	r2, r3
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	fbb2 f3f3 	udiv	r3, r2, r3
 8003946:	4a4f      	ldr	r2, [pc, #316]	; (8003a84 <LL_USART_SetBaudRate+0x168>)
 8003948:	fba2 2303 	umull	r2, r3, r2, r3
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	b29b      	uxth	r3, r3
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	b299      	uxth	r1, r3
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	4613      	mov	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	009a      	lsls	r2, r3, #2
 800395e:	441a      	add	r2, r3
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	fbb2 f2f3 	udiv	r2, r2, r3
 8003968:	4b46      	ldr	r3, [pc, #280]	; (8003a84 <LL_USART_SetBaudRate+0x168>)
 800396a:	fba3 0302 	umull	r0, r3, r3, r2
 800396e:	095b      	lsrs	r3, r3, #5
 8003970:	2064      	movs	r0, #100	; 0x64
 8003972:	fb00 f303 	mul.w	r3, r0, r3
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	3332      	adds	r3, #50	; 0x32
 800397c:	4a41      	ldr	r2, [pc, #260]	; (8003a84 <LL_USART_SetBaudRate+0x168>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	095b      	lsrs	r3, r3, #5
 8003984:	b29b      	uxth	r3, r3
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	b29b      	uxth	r3, r3
 800398a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800398e:	b29b      	uxth	r3, r3
 8003990:	440b      	add	r3, r1
 8003992:	b299      	uxth	r1, r3
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	009a      	lsls	r2, r3, #2
 800399e:	441a      	add	r2, r3
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039a8:	4b36      	ldr	r3, [pc, #216]	; (8003a84 <LL_USART_SetBaudRate+0x168>)
 80039aa:	fba3 0302 	umull	r0, r3, r3, r2
 80039ae:	095b      	lsrs	r3, r3, #5
 80039b0:	2064      	movs	r0, #100	; 0x64
 80039b2:	fb00 f303 	mul.w	r3, r0, r3
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	3332      	adds	r3, #50	; 0x32
 80039bc:	4a31      	ldr	r2, [pc, #196]	; (8003a84 <LL_USART_SetBaudRate+0x168>)
 80039be:	fba2 2303 	umull	r2, r3, r2, r3
 80039c2:	095b      	lsrs	r3, r3, #5
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	440b      	add	r3, r1
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	461a      	mov	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 80039d6:	e04f      	b.n	8003a78 <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	4613      	mov	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4413      	add	r3, r2
 80039e0:	009a      	lsls	r2, r3, #2
 80039e2:	441a      	add	r2, r3
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ec:	4a25      	ldr	r2, [pc, #148]	; (8003a84 <LL_USART_SetBaudRate+0x168>)
 80039ee:	fba2 2303 	umull	r2, r3, r2, r3
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	b299      	uxth	r1, r3
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	4613      	mov	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	009a      	lsls	r2, r3, #2
 8003a04:	441a      	add	r2, r3
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a0e:	4b1d      	ldr	r3, [pc, #116]	; (8003a84 <LL_USART_SetBaudRate+0x168>)
 8003a10:	fba3 0302 	umull	r0, r3, r3, r2
 8003a14:	095b      	lsrs	r3, r3, #5
 8003a16:	2064      	movs	r0, #100	; 0x64
 8003a18:	fb00 f303 	mul.w	r3, r0, r3
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	3332      	adds	r3, #50	; 0x32
 8003a22:	4a18      	ldr	r2, [pc, #96]	; (8003a84 <LL_USART_SetBaudRate+0x168>)
 8003a24:	fba2 2303 	umull	r2, r3, r2, r3
 8003a28:	095b      	lsrs	r3, r3, #5
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	440b      	add	r3, r1
 8003a34:	b299      	uxth	r1, r3
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009a      	lsls	r2, r3, #2
 8003a40:	441a      	add	r2, r3
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a4a:	4b0e      	ldr	r3, [pc, #56]	; (8003a84 <LL_USART_SetBaudRate+0x168>)
 8003a4c:	fba3 0302 	umull	r0, r3, r3, r2
 8003a50:	095b      	lsrs	r3, r3, #5
 8003a52:	2064      	movs	r0, #100	; 0x64
 8003a54:	fb00 f303 	mul.w	r3, r0, r3
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	3332      	adds	r3, #50	; 0x32
 8003a5e:	4a09      	ldr	r2, [pc, #36]	; (8003a84 <LL_USART_SetBaudRate+0x168>)
 8003a60:	fba2 2303 	umull	r2, r3, r2, r3
 8003a64:	095b      	lsrs	r3, r3, #5
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	440b      	add	r3, r1
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	461a      	mov	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	609a      	str	r2, [r3, #8]
}
 8003a78:	bf00      	nop
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	51eb851f 	.word	0x51eb851f

08003a88 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003a96:	2300      	movs	r3, #0
 8003a98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff ff04 	bl	80038a8 <LL_USART_IsEnabled>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d15e      	bne.n	8003b64 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003aae:	f023 030c 	bic.w	r3, r3, #12
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	6851      	ldr	r1, [r2, #4]
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	68d2      	ldr	r2, [r2, #12]
 8003aba:	4311      	orrs	r1, r2
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	6912      	ldr	r2, [r2, #16]
 8003ac0:	4311      	orrs	r1, r2
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	6992      	ldr	r2, [r2, #24]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7ff fefb 	bl	80038d0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	4619      	mov	r1, r3
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff ff08 	bl	80038f6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003ae6:	f107 0308 	add.w	r3, r7, #8
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff fab2 	bl	8003054 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a1f      	ldr	r2, [pc, #124]	; (8003b70 <LL_USART_Init+0xe8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d102      	bne.n	8003afe <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	61bb      	str	r3, [r7, #24]
 8003afc:	e021      	b.n	8003b42 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a1c      	ldr	r2, [pc, #112]	; (8003b74 <LL_USART_Init+0xec>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d102      	bne.n	8003b0c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	61bb      	str	r3, [r7, #24]
 8003b0a:	e01a      	b.n	8003b42 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a1a      	ldr	r2, [pc, #104]	; (8003b78 <LL_USART_Init+0xf0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d102      	bne.n	8003b1a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	61bb      	str	r3, [r7, #24]
 8003b18:	e013      	b.n	8003b42 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a17      	ldr	r2, [pc, #92]	; (8003b7c <LL_USART_Init+0xf4>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d102      	bne.n	8003b28 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	61bb      	str	r3, [r7, #24]
 8003b26:	e00c      	b.n	8003b42 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a15      	ldr	r2, [pc, #84]	; (8003b80 <LL_USART_Init+0xf8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d102      	bne.n	8003b36 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	61bb      	str	r3, [r7, #24]
 8003b34:	e005      	b.n	8003b42 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a12      	ldr	r2, [pc, #72]	; (8003b84 <LL_USART_Init+0xfc>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d101      	bne.n	8003b42 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00d      	beq.n	8003b64 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d009      	beq.n	8003b64 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8003b50:	2300      	movs	r3, #0
 8003b52:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	699a      	ldr	r2, [r3, #24]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69b9      	ldr	r1, [r7, #24]
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7ff fedc 	bl	800391c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003b64:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3720      	adds	r7, #32
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40011000 	.word	0x40011000
 8003b74:	40004400 	.word	0x40004400
 8003b78:	40004800 	.word	0x40004800
 8003b7c:	40011400 	.word	0x40011400
 8003b80:	40004c00 	.word	0x40004c00
 8003b84:	40005000 	.word	0x40005000

08003b88 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <_ZN7MathLibC1Ev>:
 *	256個の値を生成したならば、0~255の番地となることに注意すること。
 */

#include "MathLib.hpp"

MathLib::MathLib() {
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	4a0a      	ldr	r2, [pc, #40]	; (8003bd4 <_ZN7MathLibC1Ev+0x34>)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 f92c 	bl	8003e10 <_ZNSt6vectorIfSaIfEEC1Ev>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3310      	adds	r3, #16
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 f927 	bl	8003e10 <_ZNSt6vectorIfSaIfEEC1Ev>
	mSize = 0;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	61da      	str	r2, [r3, #28]
}
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	0800ca3c 	.word	0x0800ca3c

08003bd8 <_ZN7MathLibD1Ev>:

MathLib::~MathLib() {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	4a0f      	ldr	r2, [pc, #60]	; (8003c20 <_ZN7MathLibD1Ev+0x48>)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	601a      	str	r2, [r3, #0]
	mSize = 0;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	61da      	str	r2, [r3, #28]
	mSinList.clear();
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3304      	adds	r3, #4
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 f935 	bl	8003e60 <_ZNSt6vectorIfSaIfEE5clearEv>
	mCosList.clear();
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	3310      	adds	r3, #16
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 f930 	bl	8003e60 <_ZNSt6vectorIfSaIfEE5clearEv>
MathLib::~MathLib() {
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3310      	adds	r3, #16
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 f910 	bl	8003e2a <_ZNSt6vectorIfSaIfEED1Ev>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 f90b 	bl	8003e2a <_ZNSt6vectorIfSaIfEED1Ev>
}
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4618      	mov	r0, r3
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	0800ca3c 	.word	0x0800ca3c

08003c24 <_ZN7MathLibD0Ev>:
MathLib::~MathLib() {
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
}
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7ff ffd3 	bl	8003bd8 <_ZN7MathLibD1Ev>
 8003c32:	2124      	movs	r1, #36	; 0x24
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f005 fc5d 	bl	80094f4 <_ZdlPvj>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <_ZN7MathLib10setLibSizeEi>:

void MathLib::setLibSize(int pSize){
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
	mSize = pSize;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	61da      	str	r2, [r3, #28]
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <_ZN7MathLib5fInitEi>:

void MathLib::fInit(int pSize){
 8003c60:	b590      	push	{r4, r7, lr}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
	setLibSize(pSize);
 8003c6a:	6839      	ldr	r1, [r7, #0]
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7ff ffe9 	bl	8003c44 <_ZN7MathLib10setLibSizeEi>
	if(mSize == 0){
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d100      	bne.n	8003c7c <_ZN7MathLib5fInitEi+0x1c>
		while(1){}//error check
 8003c7a:	e7fe      	b.n	8003c7a <_ZN7MathLib5fInitEi+0x1a>
	}
	mRadvsSize = mSize / (2*M_PI);//サイズと1radianの比
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fc fc6f 	bl	8000564 <__aeabi_i2d>
 8003c86:	a310      	add	r3, pc, #64	; (adr r3, 8003cc8 <_ZN7MathLib5fInitEi+0x68>)
 8003c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8c:	f7fc fdfe 	bl	800088c <__aeabi_ddiv>
 8003c90:	4603      	mov	r3, r0
 8003c92:	460c      	mov	r4, r1
 8003c94:	4618      	mov	r0, r3
 8003c96:	4621      	mov	r1, r4
 8003c98:	f7fc ffa6 	bl	8000be8 <__aeabi_d2f>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	621a      	str	r2, [r3, #32]

	fSinVectorInit(&mSinList);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f811 	bl	8003cd0 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE>
	fCosVectorInit(&mCosList);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3310      	adds	r3, #16
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f85b 	bl	8003d70 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE>
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd90      	pop	{r4, r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	f3af 8000 	nop.w
 8003cc8:	54442d18 	.word	0x54442d18
 8003ccc:	401921fb 	.word	0x401921fb

08003cd0 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE>:

int MathLib::getLibSize(void){return mSize;}

void MathLib::fSinVectorInit(std::vector<float> *pVector){
 8003cd0:	b5b0      	push	{r4, r5, r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
	for(int i=0;i<mSize;i++){
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	da39      	bge.n	8003d5c <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE+0x8c>
		float fsinval = sin(i*2*M_PI/(float)mSize);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fc fc39 	bl	8000564 <__aeabi_i2d>
 8003cf2:	a31d      	add	r3, pc, #116	; (adr r3, 8003d68 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE+0x98>)
 8003cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf8:	f7fc fc9e 	bl	8000638 <__aeabi_dmul>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	460c      	mov	r4, r1
 8003d00:	4625      	mov	r5, r4
 8003d02:	461c      	mov	r4, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	ee07 3a90 	vmov	s15, r3
 8003d0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d10:	ee17 0a90 	vmov	r0, s15
 8003d14:	f7fc fc38 	bl	8000588 <__aeabi_f2d>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	4629      	mov	r1, r5
 8003d20:	f7fc fdb4 	bl	800088c <__aeabi_ddiv>
 8003d24:	4603      	mov	r3, r0
 8003d26:	460c      	mov	r4, r1
 8003d28:	ec44 3b17 	vmov	d7, r3, r4
 8003d2c:	eeb0 0a47 	vmov.f32	s0, s14
 8003d30:	eef0 0a67 	vmov.f32	s1, s15
 8003d34:	f005 fe3c 	bl	80099b0 <sin>
 8003d38:	ec54 3b10 	vmov	r3, r4, d0
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	4621      	mov	r1, r4
 8003d40:	f7fc ff52 	bl	8000be8 <__aeabi_d2f>
 8003d44:	4603      	mov	r3, r0
 8003d46:	60bb      	str	r3, [r7, #8]
		pVector->push_back(fsinval);
 8003d48:	f107 0308 	add.w	r3, r7, #8
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	6838      	ldr	r0, [r7, #0]
 8003d50:	f000 f894 	bl	8003e7c <_ZNSt6vectorIfSaIfEE9push_backERKf>
	for(int i=0;i<mSize;i++){
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	3301      	adds	r3, #1
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	e7c0      	b.n	8003cde <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE+0xe>
	}
}
 8003d5c:	bf00      	nop
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bdb0      	pop	{r4, r5, r7, pc}
 8003d64:	f3af 8000 	nop.w
 8003d68:	54442d18 	.word	0x54442d18
 8003d6c:	400921fb 	.word	0x400921fb

08003d70 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE>:

void MathLib::fCosVectorInit(std::vector<float> *pVector){
 8003d70:	b5b0      	push	{r4, r5, r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
	for(int i=0;i<mSize;i++){
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	da39      	bge.n	8003dfc <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE+0x8c>
		float fcosval = cos(i*2*M_PI/(float)mSize);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fc fbe9 	bl	8000564 <__aeabi_i2d>
 8003d92:	a31d      	add	r3, pc, #116	; (adr r3, 8003e08 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE+0x98>)
 8003d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d98:	f7fc fc4e 	bl	8000638 <__aeabi_dmul>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	460c      	mov	r4, r1
 8003da0:	4625      	mov	r5, r4
 8003da2:	461c      	mov	r4, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	ee07 3a90 	vmov	s15, r3
 8003dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003db0:	ee17 0a90 	vmov	r0, s15
 8003db4:	f7fc fbe8 	bl	8000588 <__aeabi_f2d>
 8003db8:	4602      	mov	r2, r0
 8003dba:	460b      	mov	r3, r1
 8003dbc:	4620      	mov	r0, r4
 8003dbe:	4629      	mov	r1, r5
 8003dc0:	f7fc fd64 	bl	800088c <__aeabi_ddiv>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	460c      	mov	r4, r1
 8003dc8:	ec44 3b17 	vmov	d7, r3, r4
 8003dcc:	eeb0 0a47 	vmov.f32	s0, s14
 8003dd0:	eef0 0a67 	vmov.f32	s1, s15
 8003dd4:	f005 fca0 	bl	8009718 <cos>
 8003dd8:	ec54 3b10 	vmov	r3, r4, d0
 8003ddc:	4618      	mov	r0, r3
 8003dde:	4621      	mov	r1, r4
 8003de0:	f7fc ff02 	bl	8000be8 <__aeabi_d2f>
 8003de4:	4603      	mov	r3, r0
 8003de6:	60bb      	str	r3, [r7, #8]
		pVector->push_back(fcosval);
 8003de8:	f107 0308 	add.w	r3, r7, #8
 8003dec:	4619      	mov	r1, r3
 8003dee:	6838      	ldr	r0, [r7, #0]
 8003df0:	f000 f844 	bl	8003e7c <_ZNSt6vectorIfSaIfEE9push_backERKf>
	for(int i=0;i<mSize;i++){
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	3301      	adds	r3, #1
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	e7c0      	b.n	8003d7e <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE+0xe>
	}
}
 8003dfc:	bf00      	nop
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bdb0      	pop	{r4, r5, r7, pc}
 8003e04:	f3af 8000 	nop.w
 8003e08:	54442d18 	.word	0x54442d18
 8003e0c:	400921fb 	.word	0x400921fb

08003e10 <_ZNSt6vectorIfSaIfEEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 f89c 	bl	8003f58 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <_ZNSt6vectorIfSaIfEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8003e2a:	b5b0      	push	{r4, r5, r7, lr}
 8003e2c:	b082      	sub	sp, #8
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681c      	ldr	r4, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 f8b2 	bl	8003fa6 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003e42:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003e44:	461a      	mov	r2, r3
 8003e46:	4629      	mov	r1, r5
 8003e48:	4620      	mov	r0, r4
 8003e4a:	f000 f8b7 	bl	8003fbc <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 f88e 	bl	8003f72 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bdb0      	pop	{r4, r5, r7, pc}

08003e60 <_ZNSt6vectorIfSaIfEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f8b2 	bl	8003fd8 <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>
 8003e74:	bf00      	nop
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <_ZNSt6vectorIfSaIfEE9push_backERKf>:
      push_back(const value_type& __x)
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d00c      	beq.n	8003eac <_ZNSt6vectorIfSaIfEE9push_backERKf+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	f000 f8bf 	bl	800401e <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	1d1a      	adds	r2, r3, #4
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	605a      	str	r2, [r3, #4]
      }
 8003eaa:	e008      	b.n	8003ebe <_ZNSt6vectorIfSaIfEE9push_backERKf+0x42>
	  _M_realloc_insert(end(), __x);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f8c9 	bl	8004044 <_ZNSt6vectorIfSaIfEE3endEv>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f8d5 	bl	8004068 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>
      }
 8003ebe:	bf00      	nop
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 8003ec6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ec8:	b085      	sub	sp, #20
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8003ed0:	687c      	ldr	r4, [r7, #4]
 8003ed2:	6838      	ldr	r0, [r7, #0]
 8003ed4:	f000 f954 	bl	8004180 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003ed8:	4605      	mov	r5, r0
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 f96e 	bl	80041be <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	f107 030c 	add.w	r3, r7, #12
 8003ee8:	4611      	mov	r1, r2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 f959 	bl	80041a2 <_ZN9__gnu_cxx14__alloc_traitsISaIfEE17_S_select_on_copyERKS1_>
 8003ef0:	f107 030c 	add.w	r3, r7, #12
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	4629      	mov	r1, r5
 8003ef8:	4620      	mov	r0, r4
 8003efa:	f000 f977 	bl	80041ec <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 8003efe:	f107 030c 	add.w	r3, r7, #12
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 f966 	bl	80041d4 <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8003f08:	6838      	ldr	r0, [r7, #0]
 8003f0a:	f000 f983 	bl	8004214 <_ZNKSt6vectorIfSaIfEE5beginEv>
 8003f0e:	4605      	mov	r5, r0
 8003f10:	6838      	ldr	r0, [r7, #0]
 8003f12:	f000 f993 	bl	800423c <_ZNKSt6vectorIfSaIfEE3endEv>
 8003f16:	4606      	mov	r6, r0
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 f841 	bl	8003fa6 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003f24:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8003f26:	4622      	mov	r2, r4
 8003f28:	4631      	mov	r1, r6
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	f000 f99a 	bl	8004264 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 8003f30:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	605a      	str	r2, [r3, #4]
      }
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f40 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f943 	bl	80041d4 <_ZNSaIfED1Ev>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4618      	mov	r0, r3
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      _Vector_base()
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 f98f 	bl	8004286 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b082      	sub	sp, #8
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6819      	ldr	r1, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8003f82:	461a      	mov	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f98e 	bl	80042b0 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
		      - this->_M_impl._M_start); }
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff ffd2 	bl	8003f40 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8003fc8:	68b9      	ldr	r1, [r7, #8]
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 f983 	bl	80042d6 <_ZSt8_DestroyIPfEvT_S1_>
    }
 8003fd0:	bf00      	nop
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8003fd8:	b590      	push	{r4, r7, lr}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685c      	ldr	r4, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff ffdc 	bl	8003fa6 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	6838      	ldr	r0, [r7, #0]
 8003ff6:	f7ff ffe1 	bl	8003fbc <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	605a      	str	r2, [r3, #4]
      }
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	bd90      	pop	{r4, r7, pc}

08004008 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4618      	mov	r0, r3
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800401e:	b580      	push	{r7, lr}
 8004020:	b084      	sub	sp, #16
 8004022:	af00      	add	r7, sp, #0
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	60b9      	str	r1, [r7, #8]
 8004028:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff ffec 	bl	8004008 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8004030:	4603      	mov	r3, r0
 8004032:	461a      	mov	r2, r3
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 f95a 	bl	80042f0 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_>
 800403c:	bf00      	nop
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <_ZNSt6vectorIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	1d1a      	adds	r2, r3, #4
 8004050:	f107 030c 	add.w	r3, r7, #12
 8004054:	4611      	mov	r1, r2
 8004056:	4618      	mov	r0, r3
 8004058:	f000 f962 	bl	8004320 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
	...

08004068 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8004068:	b5b0      	push	{r4, r5, r7, lr}
 800406a:	b08a      	sub	sp, #40	; 0x28
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8004074:	4a41      	ldr	r2, [pc, #260]	; (800417c <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x114>)
 8004076:	2101      	movs	r1, #1
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 f961 	bl	8004340 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 800407e:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 f9a5 	bl	80043d0 <_ZNSt6vectorIfSaIfEE5beginEv>
 8004086:	4603      	mov	r3, r0
 8004088:	617b      	str	r3, [r7, #20]
 800408a:	f107 0214 	add.w	r2, r7, #20
 800408e:	f107 0308 	add.w	r3, r7, #8
 8004092:	4611      	mov	r1, r2
 8004094:	4618      	mov	r0, r3
 8004096:	f000 f9ab 	bl	80043f0 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800409a:	4603      	mov	r3, r0
 800409c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 f9ba 	bl	800441c <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 80040a8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80040ae:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80040b4:	69fa      	ldr	r2, [r7, #28]
 80040b6:	18d5      	adds	r5, r2, r3
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7ff ffa5 	bl	8004008 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 80040be:	4603      	mov	r3, r0
 80040c0:	461a      	mov	r2, r3
 80040c2:	4629      	mov	r1, r5
 80040c4:	4620      	mov	r0, r4
 80040c6:	f7ff ffaa 	bl	800401e <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80040ca:	2300      	movs	r3, #0
 80040cc:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681c      	ldr	r4, [r3, #0]
 80040d2:	f107 0308 	add.w	r3, r7, #8
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 f9b4 	bl	8004444 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 80040dc:	4603      	mov	r3, r0
 80040de:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff ff5f 	bl	8003fa6 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80040e8:	4603      	mov	r3, r0
	  __new_finish
 80040ea:	69fa      	ldr	r2, [r7, #28]
 80040ec:	4629      	mov	r1, r5
 80040ee:	4620      	mov	r0, r4
 80040f0:	f000 f9b3 	bl	800445a <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 80040f4:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	3304      	adds	r3, #4
 80040fa:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 80040fc:	f107 0308 	add.w	r3, r7, #8
 8004100:	4618      	mov	r0, r3
 8004102:	f000 f99f 	bl	8004444 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8004106:	4603      	mov	r3, r0
 8004108:	681c      	ldr	r4, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff ff48 	bl	8003fa6 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8004116:	4603      	mov	r3, r0
	  __new_finish
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	4629      	mov	r1, r5
 800411c:	4620      	mov	r0, r4
 800411e:	f000 f99c 	bl	800445a <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 8004122:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681c      	ldr	r4, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff ff39 	bl	8003fa6 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8004134:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004136:	461a      	mov	r2, r3
 8004138:	4629      	mov	r1, r5
 800413a:	4620      	mov	r0, r4
 800413c:	f7ff ff3e 	bl	8003fbc <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 800414a:	461a      	mov	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 8004154:	461a      	mov	r2, r3
 8004156:	f000 f8ab 	bl	80042b0 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	69fa      	ldr	r2, [r7, #28]
 800415e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	69fa      	ldr	r2, [r7, #28]
 800416c:	441a      	add	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	609a      	str	r2, [r3, #8]
    }
 8004172:	bf00      	nop
 8004174:	3728      	adds	r7, #40	; 0x28
 8004176:	46bd      	mov	sp, r7
 8004178:	bdb0      	pop	{r4, r5, r7, pc}
 800417a:	bf00      	nop
 800417c:	0800c9a0 	.word	0x0800c9a0

08004180 <_ZNKSt6vectorIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	461a      	mov	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	109b      	asrs	r3, r3, #2
 8004196:	4618      	mov	r0, r3
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <_ZN9__gnu_cxx14__alloc_traitsISaIfEE17_S_select_on_copyERKS1_>:
    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::addressof(*__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b082      	sub	sp, #8
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6839      	ldr	r1, [r7, #0]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 f96b 	bl	800448c <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4618      	mov	r0, r3
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <_ZNSaIfED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f970 	bl	80044c2 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4618      	mov	r0, r3
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 f96b 	bl	80044d8 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8004202:	68b9      	ldr	r1, [r7, #8]
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 f97e 	bl	8004506 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	f107 020c 	add.w	r2, r7, #12
 8004226:	f107 0308 	add.w	r3, r7, #8
 800422a:	4611      	mov	r1, r2
 800422c:	4618      	mov	r0, r3
 800422e:	f000 f985 	bl	800453c <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	f107 020c 	add.w	r2, r7, #12
 800424e:	f107 0308 	add.w	r3, r7, #8
 8004252:	4611      	mov	r1, r2
 8004254:	4618      	mov	r0, r3
 8004256:	f000 f971 	bl	800453c <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	68b9      	ldr	r1, [r7, #8]
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 f970 	bl	800455c <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 800427c:	4603      	mov	r3, r0
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl()
 8004286:	b580      	push	{r7, lr}
 8004288:	b082      	sub	sp, #8
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f976 	bl	8004580 <_ZNSaIfEC1Ev>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	605a      	str	r2, [r3, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	609a      	str	r2, [r3, #8]
	{ }
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4618      	mov	r0, r3
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
	if (__p)
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d005      	beq.n	80042ce <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	68b9      	ldr	r1, [r7, #8]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 f965 	bl	8004598 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 80042ce:	bf00      	nop
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <_ZSt8_DestroyIPfEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b082      	sub	sp, #8
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80042e0:	6839      	ldr	r1, [r7, #0]
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f967 	bl	80045b6 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 80042e8:	bf00      	nop
 80042ea:	3708      	adds	r7, #8
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80042f0:	b590      	push	{r4, r7, lr}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7ff fe83 	bl	8004008 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8004302:	4603      	mov	r3, r0
 8004304:	681c      	ldr	r4, [r3, #0]
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	4619      	mov	r1, r3
 800430a:	2004      	movs	r0, #4
 800430c:	f7ff fc3c 	bl	8003b88 <_ZnwjPv>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d000      	beq.n	8004318 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_+0x28>
 8004316:	601c      	str	r4, [r3, #0]
 8004318:	bf00      	nop
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	bd90      	pop	{r4, r7, pc}

08004320 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4618      	mov	r0, r3
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8004340:	b590      	push	{r4, r7, lr}
 8004342:	b087      	sub	sp, #28
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 f93d 	bl	80045cc <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8004352:	4604      	mov	r4, r0
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f7ff ff13 	bl	8004180 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800435a:	4603      	mov	r3, r0
 800435c:	1ae2      	subs	r2, r4, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	429a      	cmp	r2, r3
 8004362:	bf34      	ite	cc
 8004364:	2301      	movcc	r3, #1
 8004366:	2300      	movcs	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4618      	mov	r0, r3
 8004372:	f005 f8da 	bl	800952a <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f7ff ff02 	bl	8004180 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800437c:	4604      	mov	r4, r0
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f7ff fefe 	bl	8004180 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004384:	4603      	mov	r3, r0
 8004386:	613b      	str	r3, [r7, #16]
 8004388:	f107 0208 	add.w	r2, r7, #8
 800438c:	f107 0310 	add.w	r3, r7, #16
 8004390:	4611      	mov	r1, r2
 8004392:	4618      	mov	r0, r3
 8004394:	f000 f92b 	bl	80045ee <_ZSt3maxIjERKT_S2_S2_>
 8004398:	4603      	mov	r3, r0
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4423      	add	r3, r4
 800439e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f7ff feed 	bl	8004180 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80043a6:	4602      	mov	r2, r0
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d306      	bcc.n	80043bc <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x7c>
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 f90c 	bl	80045cc <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 80043b4:	4602      	mov	r2, r0
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d904      	bls.n	80043c6 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x86>
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 f905 	bl	80045cc <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 80043c2:	4603      	mov	r3, r0
 80043c4:	e000      	b.n	80043c8 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x88>
 80043c6:	697b      	ldr	r3, [r7, #20]
      }
 80043c8:	4618      	mov	r0, r3
 80043ca:	371c      	adds	r7, #28
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd90      	pop	{r4, r7, pc}

080043d0 <_ZNSt6vectorIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	f107 030c 	add.w	r3, r7, #12
 80043de:	4611      	mov	r1, r2
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff ff9d 	bl	8004320 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80043f0:	b590      	push	{r4, r7, lr}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f822 	bl	8004444 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8004400:	4603      	mov	r3, r0
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	461c      	mov	r4, r3
 8004406:	6838      	ldr	r0, [r7, #0]
 8004408:	f000 f81c 	bl	8004444 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800440c:	4603      	mov	r3, r0
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	1ae3      	subs	r3, r4, r3
 8004412:	109b      	asrs	r3, r3, #2
 8004414:	4618      	mov	r0, r3
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	bd90      	pop	{r4, r7, pc}

0800441c <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d006      	beq.n	800443a <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6839      	ldr	r1, [r7, #0]
 8004430:	4618      	mov	r0, r3
 8004432:	f000 f8f0 	bl	8004616 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8004436:	4603      	mov	r3, r0
 8004438:	e000      	b.n	800443c <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 800443a:	2300      	movs	r3, #0
      }
 800443c:	4618      	mov	r0, r3
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4618      	mov	r0, r3
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800445a:	b590      	push	{r4, r7, lr}
 800445c:	b085      	sub	sp, #20
 800445e:	af00      	add	r7, sp, #0
 8004460:	60f8      	str	r0, [r7, #12]
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	607a      	str	r2, [r7, #4]
 8004466:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 f8e3 	bl	8004634 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 800446e:	4604      	mov	r4, r0
 8004470:	68b8      	ldr	r0, [r7, #8]
 8004472:	f000 f8df 	bl	8004634 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 8004476:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	4620      	mov	r0, r4
 800447e:	f000 f8e8 	bl	8004652 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>
 8004482:	4603      	mov	r3, r0
    }
 8004484:	4618      	mov	r0, r3
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	bd90      	pop	{r4, r7, pc}

0800448c <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8004496:	6839      	ldr	r1, [r7, #0]
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f804 	bl	80044a6 <_ZNSaIfEC1ERKS_>
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) throw()
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b082      	sub	sp, #8
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
 80044ae:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80044b0:	6839      	ldr	r1, [r7, #0]
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f8de 	bl	8004674 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4618      	mov	r0, r3
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 80044e2:	6839      	ldr	r1, [r7, #0]
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7ff ffde 	bl	80044a6 <_ZNSaIfEC1ERKS_>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	605a      	str	r2, [r3, #4]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	609a      	str	r2, [r3, #8]
	{ }
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4618      	mov	r0, r3
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8004506:	b580      	push	{r7, lr}
 8004508:	b082      	sub	sp, #8
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
 800450e:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8004510:	6839      	ldr	r1, [r7, #0]
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7ff ff82 	bl	800441c <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8004518:	4602      	mov	r2, r0
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	441a      	add	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	609a      	str	r2, [r3, #8]
      }
 8004534:	bf00      	nop
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	601a      	str	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4618      	mov	r0, r3
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8004568:	2301      	movs	r3, #1
 800456a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	68b9      	ldr	r1, [r7, #8]
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 f88b 	bl	800468c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 8004576:	4603      	mov	r3, r0
    }
 8004578:	4618      	mov	r0, r3
 800457a:	3718      	adds	r7, #24
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <_ZNSaIfEC1Ev>:
      allocator() throw() { }
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f88f 	bl	80046ac <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4618      	mov	r0, r3
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	68b9      	ldr	r1, [r7, #8]
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 f88a 	bl	80046c2 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
 80045ae:	bf00      	nop
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80045b6:	b480      	push	{r7}
 80045b8:	b083      	sub	sp, #12
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
 80045be:	6039      	str	r1, [r7, #0]
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <_ZNKSt6vectorIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff fdf1 	bl	80041be <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80045dc:	4603      	mov	r3, r0
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 f87c 	bl	80046dc <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 80045e4:	4603      	mov	r3, r0
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	429a      	cmp	r2, r3
 8004602:	d201      	bcs.n	8004608 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	e000      	b.n	800460a <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8004608:	687b      	ldr	r3, [r7, #4]
    }
 800460a:	4618      	mov	r0, r3
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004620:	2200      	movs	r2, #0
 8004622:	6839      	ldr	r1, [r7, #0]
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f865 	bl	80046f4 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 800462a:	4603      	mov	r3, r0
 800462c:	4618      	mov	r0, r3
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800463c:	f107 030c 	add.w	r3, r7, #12
 8004640:	6879      	ldr	r1, [r7, #4]
 8004642:	4618      	mov	r0, r3
 8004644:	f000 f874 	bl	8004730 <_ZNSt13move_iteratorIPfEC1ES0_>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8004652:	b580      	push	{r7, lr}
 8004654:	b084      	sub	sp, #16
 8004656:	af00      	add	r7, sp, #0
 8004658:	60f8      	str	r0, [r7, #12]
 800465a:	60b9      	str	r1, [r7, #8]
 800465c:	607a      	str	r2, [r7, #4]
 800465e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	68b9      	ldr	r1, [r7, #8]
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 f872 	bl	800474e <_ZSt18uninitialized_copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>
 800466a:	4603      	mov	r3, r0
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4618      	mov	r0, r3
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	68b9      	ldr	r1, [r7, #8]
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 f868 	bl	8004772 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 80046a2:	4603      	mov	r3, r0
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4618      	mov	r0, r3
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
      deallocate(pointer __p, size_type)
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80046ce:	68b8      	ldr	r0, [r7, #8]
 80046d0:	f004 ff0e 	bl	80094f0 <_ZdlPv>
      }
 80046d4:	bf00      	nop
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f85c 	bl	80047a2 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 80046ea:	4603      	mov	r3, r0
 80046ec:	4618      	mov	r0, r3
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f000 f84e 	bl	80047a2 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 8004706:	4602      	mov	r2, r0
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4293      	cmp	r3, r2
 800470c:	bf8c      	ite	hi
 800470e:	2301      	movhi	r3, #1
 8004710:	2300      	movls	r3, #0
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004718:	f004 ff01 	bl	800951e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4618      	mov	r0, r3
 8004722:	f004 fee9 	bl	80094f8 <_Znwj>
 8004726:	4603      	mov	r3, r0
      }
 8004728:	4618      	mov	r0, r3
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <_ZNSt13move_iteratorIPfEC1ES0_>:
      move_iterator(iterator_type __i)
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4618      	mov	r0, r3
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <_ZSt18uninitialized_copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800474e:	b580      	push	{r7, lr}
 8004750:	b086      	sub	sp, #24
 8004752:	af00      	add	r7, sp, #0
 8004754:	60f8      	str	r0, [r7, #12]
 8004756:	60b9      	str	r1, [r7, #8]
 8004758:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800475a:	2301      	movs	r3, #1
 800475c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	68b9      	ldr	r1, [r7, #8]
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 f829 	bl	80047ba <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPfES3_EET0_T_S6_S5_>
 8004768:	4603      	mov	r3, r0
    }
 800476a:	4618      	mov	r0, r3
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8004772:	b590      	push	{r4, r7, lr}
 8004774:	b085      	sub	sp, #20
 8004776:	af00      	add	r7, sp, #0
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 f82b 	bl	80047da <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8004784:	4604      	mov	r4, r0
 8004786:	68b8      	ldr	r0, [r7, #8]
 8004788:	f000 f827 	bl	80047da <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 800478c:	4603      	mov	r3, r0
	       __result));
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	4619      	mov	r1, r3
 8004792:	4620      	mov	r0, r4
 8004794:	f000 f82c 	bl	80047f0 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 8004798:	4603      	mov	r3, r0
    }
 800479a:	4618      	mov	r0, r3
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd90      	pop	{r4, r7, pc}

080047a2 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80047a2:	b480      	push	{r7}
 80047a4:	b083      	sub	sp, #12
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80047aa:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80047ae:	4618      	mov	r0, r3
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPfES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b084      	sub	sp, #16
 80047be:	af00      	add	r7, sp, #0
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	68b9      	ldr	r1, [r7, #8]
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 f82c 	bl	8004828 <_ZSt4copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>
 80047d0:	4603      	mov	r3, r0
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
    { return __it; }
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4618      	mov	r0, r3
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80047f0:	b5b0      	push	{r4, r5, r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 f82b 	bl	8004858 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8004802:	4604      	mov	r4, r0
 8004804:	68b8      	ldr	r0, [r7, #8]
 8004806:	f000 f827 	bl	8004858 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800480a:	4605      	mov	r5, r0
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f831 	bl	8004874 <_ZSt12__niter_baseIPfET_S1_>
 8004812:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8004814:	461a      	mov	r2, r3
 8004816:	4629      	mov	r1, r5
 8004818:	4620      	mov	r0, r4
 800481a:	f000 f836 	bl	800488a <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 800481e:	4603      	mov	r3, r0
    }
 8004820:	4618      	mov	r0, r3
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bdb0      	pop	{r4, r5, r7, pc}

08004828 <_ZSt4copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8004828:	b590      	push	{r4, r7, lr}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 f83a 	bl	80048ae <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800483a:	4604      	mov	r4, r0
 800483c:	68b8      	ldr	r0, [r7, #8]
 800483e:	f000 f836 	bl	80048ae <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8004842:	4603      	mov	r3, r0
	       __result));
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	4619      	mov	r1, r3
 8004848:	4620      	mov	r0, r4
 800484a:	f000 f841 	bl	80048d0 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>
 800484e:	4603      	mov	r3, r0
    }
 8004850:	4618      	mov	r0, r3
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	bd90      	pop	{r4, r7, pc}

08004858 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8004860:	1d3b      	adds	r3, r7, #4
 8004862:	4618      	mov	r0, r3
 8004864:	f000 f850 	bl	8004908 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 8004868:	4603      	mov	r3, r0
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4618      	mov	r0, r3
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4618      	mov	r0, r3
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800488a:	b580      	push	{r7, lr}
 800488c:	b086      	sub	sp, #24
 800488e:	af00      	add	r7, sp, #0
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	60b9      	str	r1, [r7, #8]
 8004894:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8004896:	2301      	movs	r3, #1
 8004898:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	68b9      	ldr	r1, [r7, #8]
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 f83d 	bl	800491e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 80048a4:	4603      	mov	r3, r0
    }
 80048a6:	4618      	mov	r0, r3
 80048a8:	3718      	adds	r7, #24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b082      	sub	sp, #8
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 80048b6:	1d3b      	adds	r3, r7, #4
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 f84d 	bl	8004958 <_ZNKSt13move_iteratorIPfE4baseEv>
 80048be:	4603      	mov	r3, r0
 80048c0:	4618      	mov	r0, r3
 80048c2:	f000 f855 	bl	8004970 <_ZSt12__miter_baseIPfET_S1_>
 80048c6:	4603      	mov	r3, r0
 80048c8:	4618      	mov	r0, r3
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80048d0:	b5b0      	push	{r4, r5, r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f7ff ffc9 	bl	8004874 <_ZSt12__niter_baseIPfET_S1_>
 80048e2:	4604      	mov	r4, r0
 80048e4:	68b8      	ldr	r0, [r7, #8]
 80048e6:	f7ff ffc5 	bl	8004874 <_ZSt12__niter_baseIPfET_S1_>
 80048ea:	4605      	mov	r5, r0
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7ff ffc1 	bl	8004874 <_ZSt12__niter_baseIPfET_S1_>
 80048f2:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 80048f4:	461a      	mov	r2, r3
 80048f6:	4629      	mov	r1, r5
 80048f8:	4620      	mov	r0, r4
 80048fa:	f000 f844 	bl	8004986 <_ZSt13__copy_move_aILb1EPfS0_ET1_T0_S2_S1_>
 80048fe:	4603      	mov	r3, r0
    }
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bdb0      	pop	{r4, r5, r7, pc}

08004908 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4618      	mov	r0, r3
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800491e:	b580      	push	{r7, lr}
 8004920:	b086      	sub	sp, #24
 8004922:	af00      	add	r7, sp, #0
 8004924:	60f8      	str	r0, [r7, #12]
 8004926:	60b9      	str	r1, [r7, #8]
 8004928:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	109b      	asrs	r3, r3, #2
 8004932:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d006      	beq.n	8004948 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	461a      	mov	r2, r3
 8004940:	68f9      	ldr	r1, [r7, #12]
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f005 ff8d 	bl	800a862 <memmove>
	  return __result + _Num;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	4413      	add	r3, r2
	}
 8004950:	4618      	mov	r0, r3
 8004952:	3718      	adds	r7, #24
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <_ZNKSt13move_iteratorIPfE4baseEv>:
      base() const
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4618      	mov	r0, r3
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <_ZSt12__miter_baseIPfET_S1_>:
    __miter_base(_Iterator __it)
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4618      	mov	r0, r3
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <_ZSt13__copy_move_aILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004986:	b580      	push	{r7, lr}
 8004988:	b086      	sub	sp, #24
 800498a:	af00      	add	r7, sp, #0
 800498c:	60f8      	str	r0, [r7, #12]
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8004992:	2301      	movs	r3, #1
 8004994:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	68b9      	ldr	r1, [r7, #8]
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 f805 	bl	80049aa <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 80049a0:	4603      	mov	r3, r0
    }
 80049a2:	4618      	mov	r0, r3
 80049a4:	3718      	adds	r7, #24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b086      	sub	sp, #24
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	60f8      	str	r0, [r7, #12]
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	109b      	asrs	r3, r3, #2
 80049be:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d006      	beq.n	80049d4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	461a      	mov	r2, r3
 80049cc:	68f9      	ldr	r1, [r7, #12]
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f005 ff47 	bl	800a862 <memmove>
	  return __result + _Num;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	4413      	add	r3, r2
	}
 80049dc:	4618      	mov	r0, r3
 80049de:	3718      	adds	r7, #24
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <_ZN3PIDC1Ev>:
 * OutPut()でFloatを取り出せば速度型のPID制御が簡単にできるはず。
 */

#include "PID.hpp"

PID::PID(){
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	4a04      	ldr	r2, [pc, #16]	; (8004a00 <_ZN3PIDC1Ev+0x1c>)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	601a      	str	r2, [r3, #0]

}
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4618      	mov	r0, r3
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	0800ca4c 	.word	0x0800ca4c

08004a04 <_ZN3PIDD1Ev>:
	// TODO Auto-generated constructor stub

	mError.fill(0);
}

PID::~PID() {
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	4a04      	ldr	r2, [pc, #16]	; (8004a20 <_ZN3PIDD1Ev+0x1c>)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4618      	mov	r0, r3
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	0800ca4c 	.word	0x0800ca4c

08004a24 <_ZN3PIDD0Ev>:
PID::~PID() {
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
}
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7ff ffe9 	bl	8004a04 <_ZN3PIDD1Ev>
 8004a32:	2128      	movs	r1, #40	; 0x28
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f004 fd5d 	bl	80094f4 <_ZdlPvj>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <_ZN3PID8SetParamEfff>:

void PID::SetParam(float pGain_p, float pGain_i, float pGain_d){
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004a50:	edc7 0a01 	vstr	s1, [r7, #4]
 8004a54:	ed87 1a00 	vstr	s2, [r7]
	mGain_p = pGain_p;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	615a      	str	r2, [r3, #20]
	mGain_i = pGain_i;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	619a      	str	r2, [r3, #24]
	mGain_d = pGain_d;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	61da      	str	r2, [r3, #28]
}
 8004a6a:	bf00      	nop
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
	...

08004a78 <_ZN9ArgSensorC1Ev>:
 * ABZエンコーダ等の物理エンコーダもここに実装する。
 */

#include "ArgSensor.hpp"

ArgSensor::ArgSensor() {
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	4a0e      	ldr	r2, [pc, #56]	; (8004abc <_ZN9ArgSensorC1Ev+0x44>)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3318      	adds	r3, #24
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f001 fd4a 	bl	8006524 <_ZN8ObserverC1Ev>
	// TODO Auto-generated constructor stub
	mArg = 0;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f04f 0200 	mov.w	r2, #0
 8004a96:	605a      	str	r2, [r3, #4]
	mImArgcount = 0;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	615a      	str	r2, [r3, #20]
	mArg_delta = 0;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f04f 0200 	mov.w	r2, #0
 8004aa4:	60da      	str	r2, [r3, #12]
	mFCisON = 0;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	741a      	strb	r2, [r3, #16]
	mIsAccelerating = false;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	745a      	strb	r2, [r3, #17]
}
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	0800ca5c 	.word	0x0800ca5c

08004ac0 <_ZN9ArgSensorD1Ev>:

ArgSensor::~ArgSensor() {
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	4a06      	ldr	r2, [pc, #24]	; (8004ae4 <_ZN9ArgSensorD1Ev+0x24>)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	3318      	adds	r3, #24
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f001 fd40 	bl	8006558 <_ZN8ObserverD1Ev>
	// TODO Auto-generated destructor stub
}
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4618      	mov	r0, r3
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	0800ca5c 	.word	0x0800ca5c

08004ae8 <_ZN9ArgSensorD0Ev>:
ArgSensor::~ArgSensor() {
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
}
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7ff ffe5 	bl	8004ac0 <_ZN9ArgSensorD1Ev>
 8004af6:	f44f 719c 	mov.w	r1, #312	; 0x138
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f004 fcfa 	bl	80094f4 <_ZdlPvj>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4618      	mov	r0, r3
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <_ZN9ArgSensor4InitEv>:

void ArgSensor::Init(void) {
 8004b0a:	b480      	push	{r7}
 8004b0c:	b083      	sub	sp, #12
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
	mArgOld = 0;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f04f 0200 	mov.w	r2, #0
 8004b18:	609a      	str	r2, [r3, #8]
	mArg = 0;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	605a      	str	r2, [r3, #4]
	mArg_delta = 0;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	60da      	str	r2, [r3, #12]
	mFCisON = 0;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	741a      	strb	r2, [r3, #16]
	mIsAccelerating = false;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	745a      	strb	r2, [r3, #17]
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
	...

08004b44 <_ZN9DebugCtrlC1Ev>:
 *      Author: watashi
 */

#include "DebugCtrl.hpp"

DebugCtrl::DebugCtrl() {
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	4a0b      	ldr	r2, [pc, #44]	; (8004b7c <_ZN9DebugCtrlC1Ev+0x38>)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	3304      	adds	r3, #4
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 fa12 	bl	8004f80 <_ZN9DebugInfoC1Ev>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3314      	adds	r3, #20
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 fa8b 	bl	800507c <_ZN13DebugInfoTinyC1Ev>
	// TODO Auto-generated constructor stub
	mDebugStatus = 0;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f503 5334 	add.w	r3, r3, #11520	; 0x2d00
 8004b6c:	3320      	adds	r3, #32
 8004b6e:	2200      	movs	r2, #0
 8004b70:	601a      	str	r2, [r3, #0]
}
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4618      	mov	r0, r3
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	0800ca6c 	.word	0x0800ca6c

08004b80 <_ZN9DebugCtrlD1Ev>:

DebugCtrl::~DebugCtrl() {
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	4a08      	ldr	r2, [pc, #32]	; (8004bac <_ZN9DebugCtrlD1Ev+0x2c>)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	3314      	adds	r3, #20
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 fa86 	bl	80050a4 <_ZN13DebugInfoTinyD1Ev>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fa03 	bl	8004fa8 <_ZN9DebugInfoD1Ev>
	// TODO Auto-generated destructor stub
}
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	0800ca6c 	.word	0x0800ca6c

08004bb0 <_ZN9DebugCtrlD0Ev>:
DebugCtrl::~DebugCtrl() {
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
}
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7ff ffe1 	bl	8004b80 <_ZN9DebugCtrlD1Ev>
 8004bbe:	f642 5124 	movw	r1, #11556	; 0x2d24
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f004 fc96 	bl	80094f4 <_ZdlPvj>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8004bd2:	b408      	push	{r3}
 8004bd4:	b590      	push	{r4, r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	3307      	adds	r3, #7
 8004be4:	3307      	adds	r3, #7
 8004be6:	08db      	lsrs	r3, r3, #3
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	ebad 0d03 	sub.w	sp, sp, r3
 8004bee:	466b      	mov	r3, sp
 8004bf0:	3307      	adds	r3, #7
 8004bf2:	08db      	lsrs	r3, r3, #3
 8004bf4:	00db      	lsls	r3, r3, #3
 8004bf6:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 8004bf8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004bfc:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 8004bfe:	68bc      	ldr	r4, [r7, #8]
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c04:	6879      	ldr	r1, [r7, #4]
 8004c06:	69f8      	ldr	r0, [r7, #28]
 8004c08:	47a0      	blx	r4
 8004c0a:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	69fa      	ldr	r2, [r7, #28]
 8004c10:	18d4      	adds	r4, r2, r3
 8004c12:	f107 0314 	add.w	r3, r7, #20
 8004c16:	4618      	mov	r0, r3
 8004c18:	f004 fc7f 	bl	800951a <_ZNSaIcEC1Ev>
 8004c1c:	f107 0314 	add.w	r3, r7, #20
 8004c20:	4622      	mov	r2, r4
 8004c22:	69f9      	ldr	r1, [r7, #28]
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 f827 	bl	8004c78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8004c2a:	f107 0314 	add.w	r3, r7, #20
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f004 fc74 	bl	800951c <_ZNSaIcED1Ev>
    }
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	3720      	adds	r7, #32
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004c3e:	b001      	add	sp, #4
 8004c40:	4770      	bx	lr

08004c42 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8004c42:	b5b0      	push	{r4, r5, r7, lr}
 8004c44:	b082      	sub	sp, #8
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681c      	ldr	r4, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 f850 	bl	8004cfa <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>
 8004c5a:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	4629      	mov	r1, r5
 8004c60:	4620      	mov	r0, r4
 8004c62:	f000 f855 	bl	8004d10 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataES1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 f82c 	bl	8004cc6 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4618      	mov	r0, r3
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bdb0      	pop	{r4, r5, r7, pc}

08004c78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
      template<typename _InputIterator,
	       typename = std::_RequireInputIter<_InputIterator>>
#else
      template<typename _InputIterator>
#endif
        basic_string(_InputIterator __beg, _InputIterator __end,
 8004c78:	b590      	push	{r4, r7, lr}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
 8004c84:	603b      	str	r3, [r7, #0]
		     const _Alloc& __a = _Alloc())
	: _M_dataplus(_M_local_data(), __a)
 8004c86:	68fc      	ldr	r4, [r7, #12]
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f004 fc59 	bl	8009540 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	4619      	mov	r1, r3
 8004c94:	4620      	mov	r0, r4
 8004c96:	f004 fd25 	bl	80096e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	68b9      	ldr	r1, [r7, #8]
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f844 	bl	8004d2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd90      	pop	{r4, r7, pc}

08004cae <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b082      	sub	sp, #8
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f847 	bl	8004d4a <_ZNSaIN9DebugInfo13SendMotorDataEED1Ev>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b082      	sub	sp, #8
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6819      	ldr	r1, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	119b      	asrs	r3, r3, #6
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f83d 	bl	8004d62 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff ffdf 	bl	8004cae <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implD1Ev>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4618      	mov	r0, r3
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8004d1c:	68b9      	ldr	r1, [r7, #8]
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 f832 	bl	8004d88 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataEEvT_S3_>
    }
 8004d24:	bf00      	nop
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	68b9      	ldr	r1, [r7, #8]
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 f830 	bl	8004da2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 8004d42:	bf00      	nop
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <_ZNSaIN9DebugInfo13SendMotorDataEED1Ev>:
      ~allocator() throw() { }
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b082      	sub	sp, #8
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f836 	bl	8004dc4 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEED1Ev>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b084      	sub	sp, #16
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	60f8      	str	r0, [r7, #12]
 8004d6a:	60b9      	str	r1, [r7, #8]
 8004d6c:	607a      	str	r2, [r7, #4]
	if (__p)
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d005      	beq.n	8004d80 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	68b9      	ldr	r1, [r7, #8]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 f82d 	bl	8004dda <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE10deallocateERS2_PS1_j>
      }
 8004d80:	bf00      	nop
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8004d92:	6839      	ldr	r1, [r7, #0]
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f83a 	bl	8004e0e <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_>
    }
 8004d9a:	bf00      	nop
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8004da2:	b590      	push	{r4, r7, lr}
 8004da4:	b087      	sub	sp, #28
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	60f8      	str	r0, [r7, #12]
 8004daa:	60b9      	str	r1, [r7, #8]
 8004dac:	607a      	str	r2, [r7, #4]
 8004dae:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8004db0:	4623      	mov	r3, r4
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	68b9      	ldr	r1, [r7, #8]
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 f842 	bl	8004e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 8004dbc:	bf00      	nop
 8004dbe:	371c      	adds	r7, #28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd90      	pop	{r4, r7, pc}

08004dc4 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b084      	sub	sp, #16
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	60f8      	str	r0, [r7, #12]
 8004de2:	60b9      	str	r1, [r7, #8]
 8004de4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	68b9      	ldr	r1, [r7, #8]
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 f870 	bl	8004ed0 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE10deallocateEPS2_j>
 8004df0:	bf00      	nop
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <_ZSt11__addressofIN9DebugInfo13SendMotorDataEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4618      	mov	r0, r3
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b082      	sub	sp, #8
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
 8004e16:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d00a      	beq.n	8004e36 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f7ff ffe9 	bl	8004df8 <_ZSt11__addressofIN9DebugInfo13SendMotorDataEEPT_RS2_>
 8004e26:	4603      	mov	r3, r0
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 f85e 	bl	8004eea <_ZSt8_DestroyIN9DebugInfo13SendMotorDataEEvPT_>
	  for (; __first != __last; ++__first)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	3340      	adds	r3, #64	; 0x40
 8004e32:	607b      	str	r3, [r7, #4]
 8004e34:	e7f0      	b.n	8004e18 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_+0xa>
	}
 8004e36:	bf00      	nop
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
	...

08004e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
 8004e4c:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8004e4e:	68b8      	ldr	r0, [r7, #8]
 8004e50:	f000 f858 	bl	8004f04 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d005      	beq.n	8004e66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d001      	beq.n	8004e66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8004e62:	2301      	movs	r3, #1
 8004e64:	e000      	b.n	8004e68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 8004e66:	2300      	movs	r3, #0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d002      	beq.n	8004e72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8004e6c:	4817      	ldr	r0, [pc, #92]	; (8004ecc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 8004e6e:	f004 fb59 	bl	8009524 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	68b8      	ldr	r0, [r7, #8]
 8004e76:	f000 f85f 	bl	8004f38 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	2b0f      	cmp	r3, #15
 8004e82:	d910      	bls.n	8004ea6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8004e84:	f107 0314 	add.w	r3, r7, #20
 8004e88:	2200      	movs	r2, #0
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f004 fb61 	bl	8009554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8004e92:	4603      	mov	r3, r0
 8004e94:	4619      	mov	r1, r3
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f004 fb4e 	bl	8009538 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f004 fb4f 	bl	8009544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f004 fb48 	bl	800953c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8004eac:	4603      	mov	r3, r0
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	68b9      	ldr	r1, [r7, #8]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f004 fb85 	bl	80095c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	4619      	mov	r1, r3
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f004 fb43 	bl	8009548 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8004ec2:	bf00      	nop
 8004ec4:	3718      	adds	r7, #24
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	0800c9c8 	.word	0x0800c9c8

08004ed0 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8004edc:	68b8      	ldr	r0, [r7, #8]
 8004ede:	f004 fb07 	bl	80094f0 <_ZdlPv>
      }
 8004ee2:	bf00      	nop
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <_ZSt8_DestroyIN9DebugInfo13SendMotorDataEEvPT_>:
    _Destroy(_Tp* __pointer)
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b082      	sub	sp, #8
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	4798      	blx	r3
 8004efc:	bf00      	nop
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	bf0c      	ite	eq
 8004f12:	2301      	moveq	r3, #1
 8004f14:	2300      	movne	r3, #0
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	4618      	mov	r0, r3
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8004f38:	b5b0      	push	{r4, r5, r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8004f42:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8004f44:	1d3b      	adds	r3, r7, #4
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7ff ffec 	bl	8004f24 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 8004f4c:	462a      	mov	r2, r5
 8004f4e:	6839      	ldr	r1, [r7, #0]
 8004f50:	4620      	mov	r0, r4
 8004f52:	f000 f805 	bl	8004f60 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8004f56:	4603      	mov	r3, r0
    }
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bdb0      	pop	{r4, r5, r7, pc}

08004f60 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	1ad3      	subs	r3, r2, r3
    }
 8004f72:	4618      	mov	r0, r3
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
	...

08004f80 <_ZN9DebugInfoC1Ev>:

DebugInfo::SendMotorData::~SendMotorData(){
	//destructor
}

DebugInfo::DebugInfo() {
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	4a06      	ldr	r2, [pc, #24]	; (8004fa4 <_ZN9DebugInfoC1Ev+0x24>)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	3304      	adds	r3, #4
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 f82c 	bl	8004ff0 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>
	// TODO Auto-generated constructor stub
}
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	0800ca7c 	.word	0x0800ca7c

08004fa8 <_ZN9DebugInfoD1Ev>:

DebugInfo::~DebugInfo() {
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	4a06      	ldr	r2, [pc, #24]	; (8004fcc <_ZN9DebugInfoD1Ev+0x24>)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	601a      	str	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3304      	adds	r3, #4
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7ff fe41 	bl	8004c42 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>
	// TODO Auto-generated destructor stub
}
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	0800ca7c 	.word	0x0800ca7c

08004fd0 <_ZN9DebugInfoD0Ev>:
DebugInfo::~DebugInfo() {
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
}
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7ff ffe5 	bl	8004fa8 <_ZN9DebugInfoD1Ev>
 8004fde:	2110      	movs	r1, #16
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f004 fa87 	bl	80094f4 <_ZdlPvj>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>:
      vector()
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 f805 	bl	800500a <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4618      	mov	r0, r3
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>:
      _Vector_base()
 800500a:	b580      	push	{r7, lr}
 800500c:	b082      	sub	sp, #8
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4618      	mov	r0, r3
 8005016:	f000 f805 	bl	8005024 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implC1Ev>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4618      	mov	r0, r3
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 f80e 	bl	800504e <_ZNSaIN9DebugInfo13SendMotorDataEEC1Ev>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	605a      	str	r2, [r3, #4]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	609a      	str	r2, [r3, #8]
	{ }
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4618      	mov	r0, r3
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <_ZNSaIN9DebugInfo13SendMotorDataEEC1Ev>:
      allocator() throw() { }
 800504e:	b580      	push	{r7, lr}
 8005050:	b082      	sub	sp, #8
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f805 	bl	8005066 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEEC1Ev>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4618      	mov	r0, r3
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005066:	b480      	push	{r7}
 8005068:	b083      	sub	sp, #12
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4618      	mov	r0, r3
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <_ZN13DebugInfoTinyC1Ev>:
 * 読み出しがVector型であるのは(float型でないのは)データの個数の変化に対応するため。
 *(配列のfor使って調理してください(にっこり))
 */
#include "DebugInfoTiny.hpp"

DebugInfoTiny::DebugInfoTiny() {
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	4a06      	ldr	r2, [pc, #24]	; (80050a0 <_ZN13DebugInfoTinyC1Ev+0x24>)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	mCNT = 0;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	605a      	str	r2, [r3, #4]
}
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4618      	mov	r0, r3
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	0800ca8c 	.word	0x0800ca8c

080050a4 <_ZN13DebugInfoTinyD1Ev>:

DebugInfoTiny::~DebugInfoTiny() {
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	4a04      	ldr	r2, [pc, #16]	; (80050c0 <_ZN13DebugInfoTinyD1Ev+0x1c>)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4618      	mov	r0, r3
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	0800ca8c 	.word	0x0800ca8c

080050c4 <_ZN13DebugInfoTinyD0Ev>:
DebugInfoTiny::~DebugInfoTiny() {
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
}
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7ff ffe9 	bl	80050a4 <_ZN13DebugInfoTinyD1Ev>
 80050d2:	f642 5108 	movw	r1, #11528	; 0x2d08
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f004 fa0c 	bl	80094f4 <_ZdlPvj>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4618      	mov	r0, r3
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <LL_ADC_Enable>:
{
 80050e6:	b480      	push	{r7}
 80050e8:	b083      	sub	sp, #12
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f043 0201 	orr.w	r2, r3, #1
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	609a      	str	r2, [r3, #8]
}
 80050fa:	bf00      	nop
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <LL_ADC_ClearFlag_JEOS>:
  * @rmtoll SR       JEOC           LL_ADC_ClearFlag_JEOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_JEOS(ADC_TypeDef *ADCx)
{
 8005106:	b480      	push	{r7}
 8005108:	b083      	sub	sp, #12
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f06f 0204 	mvn.w	r2, #4
 8005114:	601a      	str	r2, [r3, #0]
}
 8005116:	bf00      	nop
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <LL_ADC_EnableIT_JEOS>:
  * @rmtoll CR1      JEOCIE         LL_ADC_EnableIT_JEOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_JEOS(ADC_TypeDef *ADCx)
{
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	605a      	str	r2, [r3, #4]
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8005142:	b480      	push	{r7}
 8005144:	b083      	sub	sp, #12
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	619a      	str	r2, [r3, #24]
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <_ZN3PWMC1Ev>:

#include "STM32SystemPack.h"
#include "paramsetting.h"
//#include "stm32f4xx_ll_tim.h"//need

class PWM {
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	605a      	str	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	609a      	str	r2, [r3, #8]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4618      	mov	r0, r3
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <_ZN9MotorCtrlC1Ev>:
 *      Author: watashi
 */

#include "MotorCtrl.hpp"

MotorCtrl::MotorCtrl() {
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	4a15      	ldr	r2, [pc, #84]	; (80051e0 <_ZN9MotorCtrlC1Ev+0x60>)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	3304      	adds	r3, #4
 8005192:	4618      	mov	r0, r3
 8005194:	f001 f83e 	bl	8006214 <_ZN9MotorInfoC1Ev>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 800519e:	4618      	mov	r0, r3
 80051a0:	f7ff ffdd 	bl	800515e <_ZN3PWMC1Ev>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7ff ffd7 	bl	800515e <_ZN3PWMC1Ev>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7ff ffd1 	bl	800515e <_ZN3PWMC1Ev>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7ff ffcb 	bl	800515e <_ZN3PWMC1Ev>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7ff fcb8 	bl	8004b44 <_ZN9DebugCtrlC1Ev>
	// TODO Auto-generated constructor stub

}
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4618      	mov	r0, r3
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	0800ca9c 	.word	0x0800ca9c

080051e4 <_ZN9MotorCtrlD1Ev>:

MotorCtrl::~MotorCtrl() {
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	4a09      	ldr	r2, [pc, #36]	; (8005214 <_ZN9MotorCtrlD1Ev+0x30>)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7ff fcc1 	bl	8004b80 <_ZN9DebugCtrlD1Ev>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	3304      	adds	r3, #4
 8005202:	4618      	mov	r0, r3
 8005204:	f001 f83a 	bl	800627c <_ZN9MotorInfoD1Ev>
	// TODO Auto-generated destructor stub
}
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4618      	mov	r0, r3
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	0800ca9c 	.word	0x0800ca9c

08005218 <_ZN9MotorCtrlD0Ev>:
MotorCtrl::~MotorCtrl() {
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
}
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7ff ffdf 	bl	80051e4 <_ZN9MotorCtrlD1Ev>
 8005226:	f642 71d0 	movw	r1, #12240	; 0x2fd0
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f004 f962 	bl	80094f4 <_ZdlPvj>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4618      	mov	r0, r3
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <_ZN7MathLibaSERKS_>:
#define MATHLIB_HPP_

#include <vector>
#include "math.h"

class MathLib {
 800523a:	b580      	push	{r7, lr}
 800523c:	b082      	sub	sp, #8
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
 8005242:	6039      	str	r1, [r7, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	1d1a      	adds	r2, r3, #4
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	3304      	adds	r3, #4
 800524c:	4619      	mov	r1, r3
 800524e:	4610      	mov	r0, r2
 8005250:	f000 fdab 	bl	8005daa <_ZNSt6vectorIfSaIfEEaSERKS1_>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f103 0210 	add.w	r2, r3, #16
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	3310      	adds	r3, #16
 800525e:	4619      	mov	r1, r3
 8005260:	4610      	mov	r0, r2
 8005262:	f000 fda2 	bl	8005daa <_ZNSt6vectorIfSaIfEEaSERKS1_>
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	69da      	ldr	r2, [r3, #28]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	61da      	str	r2, [r3, #28]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	6a1a      	ldr	r2, [r3, #32]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	621a      	str	r2, [r3, #32]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4618      	mov	r0, r3
 800527a:	3708      	adds	r7, #8
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <_ZN7TimInfoaSERKS_>:
#ifndef TIMINFO_HPP_
#define TIMINFO_HPP_

#include "STM32SystemPack.h"

class TimInfo {
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	605a      	str	r2, [r3, #4]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	689a      	ldr	r2, [r3, #8]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	609a      	str	r2, [r3, #8]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68da      	ldr	r2, [r3, #12]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	60da      	str	r2, [r3, #12]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	691a      	ldr	r2, [r3, #16]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	611a      	str	r2, [r3, #16]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4618      	mov	r0, r3
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <_ZN3PIDaSERKS_>:
#ifndef PID_HPP_
#define PID_HPP_

#include <array>

class PID {
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	3304      	adds	r3, #4
 80052c8:	3204      	adds	r2, #4
 80052ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80052cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	691a      	ldr	r2, [r3, #16]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	611a      	str	r2, [r3, #16]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	695a      	ldr	r2, [r3, #20]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	615a      	str	r2, [r3, #20]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	699a      	ldr	r2, [r3, #24]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	619a      	str	r2, [r3, #24]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	69da      	ldr	r2, [r3, #28]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	61da      	str	r2, [r3, #28]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	6a1a      	ldr	r2, [r3, #32]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	621a      	str	r2, [r3, #32]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	625a      	str	r2, [r3, #36]	; 0x24
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4618      	mov	r0, r3
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <_ZN11AdaptVelEstaSERKS_>:
#include "Matrix.hpp"
#include "ZIntegrate.hpp"
#include "Trigonometric.hpp"


class AdaptVelEst {
 800530e:	b4b0      	push	{r4, r5, r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	6039      	str	r1, [r7, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	3304      	adds	r3, #4
 800531e:	3204      	adds	r2, #4
 8005320:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005324:	e883 0003 	stmia.w	r3, {r0, r1}
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	330c      	adds	r3, #12
 800532e:	320c      	adds	r2, #12
 8005330:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005334:	e883 0003 	stmia.w	r3, {r0, r1}
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	695a      	ldr	r2, [r3, #20]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	615a      	str	r2, [r3, #20]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	699a      	ldr	r2, [r3, #24]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	619a      	str	r2, [r3, #24]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	69da      	ldr	r2, [r3, #28]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	61da      	str	r2, [r3, #28]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	6a1a      	ldr	r2, [r3, #32]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	621a      	str	r2, [r3, #32]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	625a      	str	r2, [r3, #36]	; 0x24
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	629a      	str	r2, [r3, #40]	; 0x28
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	631a      	str	r2, [r3, #48]	; 0x30
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	3334      	adds	r3, #52	; 0x34
 800537e:	3234      	adds	r2, #52	; 0x34
 8005380:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005384:	e883 0003 	stmia.w	r3, {r0, r1}
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	333c      	adds	r3, #60	; 0x3c
 800538e:	323c      	adds	r2, #60	; 0x3c
 8005390:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005394:	e883 0003 	stmia.w	r3, {r0, r1}
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	3344      	adds	r3, #68	; 0x44
 800539e:	3244      	adds	r2, #68	; 0x44
 80053a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053a4:	e883 0003 	stmia.w	r3, {r0, r1}
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	334c      	adds	r3, #76	; 0x4c
 80053ae:	324c      	adds	r2, #76	; 0x4c
 80053b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	3354      	adds	r3, #84	; 0x54
 80053be:	3254      	adds	r2, #84	; 0x54
 80053c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053c4:	e883 0003 	stmia.w	r3, {r0, r1}
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	335c      	adds	r3, #92	; 0x5c
 80053ce:	325c      	adds	r2, #92	; 0x5c
 80053d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	f102 0464 	add.w	r4, r2, #100	; 0x64
 80053e0:	f103 0564 	add.w	r5, r3, #100	; 0x64
 80053e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053e8:	682b      	ldr	r3, [r5, #0]
 80053ea:	6023      	str	r3, [r4, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	3378      	adds	r3, #120	; 0x78
 80053f2:	3278      	adds	r2, #120	; 0x78
 80053f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053f8:	e883 0003 	stmia.w	r3, {r0, r1}
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	3380      	adds	r3, #128	; 0x80
 8005402:	3280      	adds	r2, #128	; 0x80
 8005404:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005408:	e883 0003 	stmia.w	r3, {r0, r1}
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	3388      	adds	r3, #136	; 0x88
 8005412:	3288      	adds	r2, #136	; 0x88
 8005414:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005418:	e883 0003 	stmia.w	r3, {r0, r1}
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	3390      	adds	r3, #144	; 0x90
 8005422:	3290      	adds	r2, #144	; 0x90
 8005424:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005428:	e883 0003 	stmia.w	r3, {r0, r1}
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	683a      	ldr	r2, [r7, #0]
 8005430:	3398      	adds	r3, #152	; 0x98
 8005432:	3298      	adds	r2, #152	; 0x98
 8005434:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005438:	e883 0003 	stmia.w	r3, {r0, r1}
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	33a0      	adds	r3, #160	; 0xa0
 8005442:	32a0      	adds	r2, #160	; 0xa0
 8005444:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005448:	e883 0003 	stmia.w	r3, {r0, r1}
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	33a8      	adds	r3, #168	; 0xa8
 8005452:	32a8      	adds	r2, #168	; 0xa8
 8005454:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005458:	e883 0003 	stmia.w	r3, {r0, r1}
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	33b0      	adds	r3, #176	; 0xb0
 8005462:	32b0      	adds	r2, #176	; 0xb0
 8005464:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005468:	e883 0003 	stmia.w	r3, {r0, r1}
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	f102 04b8 	add.w	r4, r2, #184	; 0xb8
 8005474:	f103 05b8 	add.w	r5, r3, #184	; 0xb8
 8005478:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800547a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800547c:	682b      	ldr	r3, [r5, #0]
 800547e:	6023      	str	r3, [r4, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	33cc      	adds	r3, #204	; 0xcc
 8005486:	32cc      	adds	r2, #204	; 0xcc
 8005488:	e892 0003 	ldmia.w	r2, {r0, r1}
 800548c:	e883 0003 	stmia.w	r3, {r0, r1}
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	33d4      	adds	r3, #212	; 0xd4
 8005496:	32d4      	adds	r2, #212	; 0xd4
 8005498:	e892 0003 	ldmia.w	r2, {r0, r1}
 800549c:	e883 0003 	stmia.w	r3, {r0, r1}
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	33e8      	adds	r3, #232	; 0xe8
 80054ca:	32e8      	adds	r2, #232	; 0xe8
 80054cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80054ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4618      	mov	r0, r3
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bcb0      	pop	{r4, r5, r7}
 80054f4:	4770      	bx	lr

080054f6 <_ZN6EMFObsaSERKS_>:
 */

#ifndef INC_EMFOBS_HPP_
#define INC_EMFOBS_HPP_

class EMFObs {
 80054f6:	b480      	push	{r7}
 80054f8:	b083      	sub	sp, #12
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
 80054fe:	6039      	str	r1, [r7, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4618      	mov	r0, r3
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <_ZN8ObserveraSERKS_>:
#define OBSERVER_HPP_

#include "AdaptVelEst.hpp"
#include "EMFObs.hpp"

class Observer {
 800550e:	b580      	push	{r7, lr}
 8005510:	b082      	sub	sp, #8
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	6039      	str	r1, [r7, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	1d1a      	adds	r2, r3, #4
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	3304      	adds	r3, #4
 8005520:	4619      	mov	r1, r3
 8005522:	4610      	mov	r0, r2
 8005524:	f7ff fef3 	bl	800530e <_ZN11AdaptVelEstaSERKS_>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005534:	4619      	mov	r1, r3
 8005536:	4610      	mov	r0, r2
 8005538:	f7ff ffdd 	bl	80054f6 <_ZN6EMFObsaSERKS_>
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4618      	mov	r0, r3
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <_ZN9ArgSensoraSERKS_>:
#define ARGSENSOR_HPP_

#include "math.h"
#include "Observer.hpp"

class ArgSensor {
 800559a:	b580      	push	{r7, lr}
 800559c:	b082      	sub	sp, #8
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
 80055a2:	6039      	str	r1, [r7, #0]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	605a      	str	r2, [r3, #4]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	609a      	str	r2, [r3, #8]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	60da      	str	r2, [r3, #12]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	7c1a      	ldrb	r2, [r3, #16]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	741a      	strb	r2, [r3, #16]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	7c5a      	ldrb	r2, [r3, #17]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	745a      	strb	r2, [r3, #17]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	695a      	ldr	r2, [r3, #20]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	615a      	str	r2, [r3, #20]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f103 0218 	add.w	r2, r3, #24
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	3318      	adds	r3, #24
 80055de:	4619      	mov	r1, r3
 80055e0:	4610      	mov	r0, r2
 80055e2:	f7ff ff94 	bl	800550e <_ZN8ObserveraSERKS_>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4618      	mov	r0, r3
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <_ZN9MotorCtrl10InitSystemEv>:

void MotorCtrl::SetPWMch4(PWM pPWM) {
	mPWMch4 = pPWM;
}

void MotorCtrl::InitSystem(void) {
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
	//以下CubeMXに頼らない定義たち
	//mainで既に定義されているとうまく動かないかもしれない。注意。
	GPIOInit::Init();
 80055f8:	f003 fa24 	bl	8008a44 <_ZN8GPIOInit4InitEv>
	USARTInit::Init();
 80055fc:	f003 ff22 	bl	8009444 <_ZN9USARTInit4InitEv>
	ADCInit::Init();
 8005600:	f002 fe52 	bl	80082a8 <_ZN7ADCInit4InitEv>
	TIMInit::Init();
 8005604:	f003 fd5c 	bl	80090c0 <_ZN7TIMInit4InitEv>
}
 8005608:	bf00      	nop
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <_ZN9MotorCtrl7InitPWMEv>:

void MotorCtrl::InitPWM(void) {
 8005610:	b590      	push	{r4, r7, lr}
 8005612:	b093      	sub	sp, #76	; 0x4c
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
	PWM PWM_Object1; //PWMのHWを叩くClass
 8005618:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800561c:	4618      	mov	r0, r3
 800561e:	f7ff fd9e 	bl	800515e <_ZN3PWMC1Ev>
	PWM PWM_Object2;
 8005622:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005626:	4618      	mov	r0, r3
 8005628:	f7ff fd99 	bl	800515e <_ZN3PWMC1Ev>
	PWM PWM_Object3;
 800562c:	f107 0318 	add.w	r3, r7, #24
 8005630:	4618      	mov	r0, r3
 8005632:	f7ff fd94 	bl	800515e <_ZN3PWMC1Ev>
	PWM PWM_Object4;
 8005636:	f107 0308 	add.w	r3, r7, #8
 800563a:	4618      	mov	r0, r3
 800563c:	f7ff fd8f 	bl	800515e <_ZN3PWMC1Ev>

	//LL_TIM_DisableBRK(TIM1);//こっちは未検証
	//LL_TIM_DisableIT_BRK(TIM1);//効かない

	PWM_Object1.setTIM(TIM1);
 8005640:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005644:	4953      	ldr	r1, [pc, #332]	; (8005794 <_ZN9MotorCtrl7InitPWMEv+0x184>)
 8005646:	4618      	mov	r0, r3
 8005648:	f003 fabd 	bl	8008bc6 <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object2.setTIM(TIM1);
 800564c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005650:	4950      	ldr	r1, [pc, #320]	; (8005794 <_ZN9MotorCtrl7InitPWMEv+0x184>)
 8005652:	4618      	mov	r0, r3
 8005654:	f003 fab7 	bl	8008bc6 <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object3.setTIM(TIM1);
 8005658:	f107 0318 	add.w	r3, r7, #24
 800565c:	494d      	ldr	r1, [pc, #308]	; (8005794 <_ZN9MotorCtrl7InitPWMEv+0x184>)
 800565e:	4618      	mov	r0, r3
 8005660:	f003 fab1 	bl	8008bc6 <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object4.setTIM(TIM1);
 8005664:	f107 0308 	add.w	r3, r7, #8
 8005668:	494a      	ldr	r1, [pc, #296]	; (8005794 <_ZN9MotorCtrl7InitPWMEv+0x184>)
 800566a:	4618      	mov	r0, r3
 800566c:	f003 faab 	bl	8008bc6 <_ZN3PWM6setTIMEP11TIM_TypeDef>

	PWM_Object1.setCH(1);
 8005670:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005674:	2101      	movs	r1, #1
 8005676:	4618      	mov	r0, r3
 8005678:	f003 fab3 	bl	8008be2 <_ZN3PWM5setCHEi>
	PWM_Object2.setCH(2);
 800567c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005680:	2102      	movs	r1, #2
 8005682:	4618      	mov	r0, r3
 8005684:	f003 faad 	bl	8008be2 <_ZN3PWM5setCHEi>
	PWM_Object3.setCH(3);
 8005688:	f107 0318 	add.w	r3, r7, #24
 800568c:	2103      	movs	r1, #3
 800568e:	4618      	mov	r0, r3
 8005690:	f003 faa7 	bl	8008be2 <_ZN3PWM5setCHEi>
	PWM_Object4.setCH(4);
 8005694:	f107 0308 	add.w	r3, r7, #8
 8005698:	2104      	movs	r1, #4
 800569a:	4618      	mov	r0, r3
 800569c:	f003 faa1 	bl	8008be2 <_ZN3PWM5setCHEi>

	PWM_Object1.fInit(PWM_COUNT);
 80056a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80056a4:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80056a8:	4618      	mov	r0, r3
 80056aa:	f003 faa8 	bl	8008bfe <_ZN3PWM5fInitEi>
	PWM_Object2.fInit(PWM_COUNT);
 80056ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056b2:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80056b6:	4618      	mov	r0, r3
 80056b8:	f003 faa1 	bl	8008bfe <_ZN3PWM5fInitEi>
	PWM_Object3.fInit(PWM_COUNT);
 80056bc:	f107 0318 	add.w	r3, r7, #24
 80056c0:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80056c4:	4618      	mov	r0, r3
 80056c6:	f003 fa9a 	bl	8008bfe <_ZN3PWM5fInitEi>
	PWM_Object4.fInit(PWM_COUNT);
 80056ca:	f107 0308 	add.w	r3, r7, #8
 80056ce:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80056d2:	4618      	mov	r0, r3
 80056d4:	f003 fa93 	bl	8008bfe <_ZN3PWM5fInitEi>

	PWM_Object1.f2Duty(0);//50%duty
 80056d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80056dc:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8005798 <_ZN9MotorCtrl7InitPWMEv+0x188>
 80056e0:	4618      	mov	r0, r3
 80056e2:	f003 fb0a 	bl	8008cfa <_ZN3PWM6f2DutyEf>
	PWM_Object2.f2Duty(0);
 80056e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056ea:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8005798 <_ZN9MotorCtrl7InitPWMEv+0x188>
 80056ee:	4618      	mov	r0, r3
 80056f0:	f003 fb03 	bl	8008cfa <_ZN3PWM6f2DutyEf>
	PWM_Object3.f2Duty(0);
 80056f4:	f107 0318 	add.w	r3, r7, #24
 80056f8:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8005798 <_ZN9MotorCtrl7InitPWMEv+0x188>
 80056fc:	4618      	mov	r0, r3
 80056fe:	f003 fafc 	bl	8008cfa <_ZN3PWM6f2DutyEf>
	PWM_Object4.f2Duty(0);
 8005702:	f107 0308 	add.w	r3, r7, #8
 8005706:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8005798 <_ZN9MotorCtrl7InitPWMEv+0x188>
 800570a:	4618      	mov	r0, r3
 800570c:	f003 faf5 	bl	8008cfa <_ZN3PWM6f2DutyEf>

	LL_GPIO_SetOutputPin(GPIOC, GPIO_PIN_10);
 8005710:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005714:	4821      	ldr	r0, [pc, #132]	; (800579c <_ZN9MotorCtrl7InitPWMEv+0x18c>)
 8005716:	f7ff fd14 	bl	8005142 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOC, GPIO_PIN_11);
 800571a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800571e:	481f      	ldr	r0, [pc, #124]	; (800579c <_ZN9MotorCtrl7InitPWMEv+0x18c>)
 8005720:	f7ff fd0f 	bl	8005142 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOC, GPIO_PIN_12);
 8005724:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005728:	481c      	ldr	r0, [pc, #112]	; (800579c <_ZN9MotorCtrl7InitPWMEv+0x18c>)
 800572a:	f7ff fd0a 	bl	8005142 <LL_GPIO_SetOutputPin>

	mPWMch1 = PWM_Object1;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f503 741b 	add.w	r4, r3, #620	; 0x26c
 8005734:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005738:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800573a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mPWMch2 = PWM_Object2;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f503 741f 	add.w	r4, r3, #636	; 0x27c
 8005744:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005748:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800574a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mPWMch3 = PWM_Object3;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f503 7423 	add.w	r4, r3, #652	; 0x28c
 8005754:	f107 0318 	add.w	r3, r7, #24
 8005758:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800575a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mPWMch4 = PWM_Object4;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f503 7427 	add.w	r4, r3, #668	; 0x29c
 8005764:	f107 0308 	add.w	r3, r7, #8
 8005768:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800576a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	//ADC Start
    LL_ADC_Enable( ADC1 );
 800576e:	480c      	ldr	r0, [pc, #48]	; (80057a0 <_ZN9MotorCtrl7InitPWMEv+0x190>)
 8005770:	f7ff fcb9 	bl	80050e6 <LL_ADC_Enable>
    LL_ADC_Enable( ADC2 );
 8005774:	480b      	ldr	r0, [pc, #44]	; (80057a4 <_ZN9MotorCtrl7InitPWMEv+0x194>)
 8005776:	f7ff fcb6 	bl	80050e6 <LL_ADC_Enable>
    LL_ADC_Enable( ADC3 );
 800577a:	480b      	ldr	r0, [pc, #44]	; (80057a8 <_ZN9MotorCtrl7InitPWMEv+0x198>)
 800577c:	f7ff fcb3 	bl	80050e6 <LL_ADC_Enable>
    /* ADC1 Injected conversions end interrupt enabling */
    LL_ADC_ClearFlag_JEOS( ADC1 );
 8005780:	4807      	ldr	r0, [pc, #28]	; (80057a0 <_ZN9MotorCtrl7InitPWMEv+0x190>)
 8005782:	f7ff fcc0 	bl	8005106 <LL_ADC_ClearFlag_JEOS>
    LL_ADC_EnableIT_JEOS( ADC1 );
 8005786:	4806      	ldr	r0, [pc, #24]	; (80057a0 <_ZN9MotorCtrl7InitPWMEv+0x190>)
 8005788:	f7ff fccb 	bl	8005122 <LL_ADC_EnableIT_JEOS>
}
 800578c:	bf00      	nop
 800578e:	374c      	adds	r7, #76	; 0x4c
 8005790:	46bd      	mov	sp, r7
 8005792:	bd90      	pop	{r4, r7, pc}
 8005794:	40010000 	.word	0x40010000
 8005798:	00000000 	.word	0x00000000
 800579c:	40020800 	.word	0x40020800
 80057a0:	40012000 	.word	0x40012000
 80057a4:	40012100 	.word	0x40012100
 80057a8:	40012200 	.word	0x40012200

080057ac <_ZN7MathLibC1ERKS_>:
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
 80057b6:	4a10      	ldr	r2, [pc, #64]	; (80057f8 <_ZN7MathLibC1ERKS_+0x4c>)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	601a      	str	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	1d1a      	adds	r2, r3, #4
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	3304      	adds	r3, #4
 80057c4:	4619      	mov	r1, r3
 80057c6:	4610      	mov	r0, r2
 80057c8:	f7fe fb7d 	bl	8003ec6 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f103 0210 	add.w	r2, r3, #16
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	3310      	adds	r3, #16
 80057d6:	4619      	mov	r1, r3
 80057d8:	4610      	mov	r0, r2
 80057da:	f7fe fb74 	bl	8003ec6 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	69da      	ldr	r2, [r3, #28]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	61da      	str	r2, [r3, #28]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	6a1a      	ldr	r2, [r3, #32]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	621a      	str	r2, [r3, #32]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4618      	mov	r0, r3
 80057f2:	3708      	adds	r7, #8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	0800ca3c 	.word	0x0800ca3c

080057fc <_ZN11AdaptVelEstC1ERKS_>:
 80057fc:	b4b0      	push	{r4, r5, r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
 8005806:	4a79      	ldr	r2, [pc, #484]	; (80059ec <_ZN11AdaptVelEstC1ERKS_+0x1f0>)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	3304      	adds	r3, #4
 8005812:	3204      	adds	r2, #4
 8005814:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005818:	e883 0003 	stmia.w	r3, {r0, r1}
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	330c      	adds	r3, #12
 8005822:	320c      	adds	r2, #12
 8005824:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005828:	e883 0003 	stmia.w	r3, {r0, r1}
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	695a      	ldr	r2, [r3, #20]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	615a      	str	r2, [r3, #20]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	699a      	ldr	r2, [r3, #24]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	619a      	str	r2, [r3, #24]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	69da      	ldr	r2, [r3, #28]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	61da      	str	r2, [r3, #28]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	6a1a      	ldr	r2, [r3, #32]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	621a      	str	r2, [r3, #32]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	625a      	str	r2, [r3, #36]	; 0x24
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	629a      	str	r2, [r3, #40]	; 0x28
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	62da      	str	r2, [r3, #44]	; 0x2c
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	631a      	str	r2, [r3, #48]	; 0x30
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	3334      	adds	r3, #52	; 0x34
 8005872:	3234      	adds	r2, #52	; 0x34
 8005874:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005878:	e883 0003 	stmia.w	r3, {r0, r1}
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	333c      	adds	r3, #60	; 0x3c
 8005882:	323c      	adds	r2, #60	; 0x3c
 8005884:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005888:	e883 0003 	stmia.w	r3, {r0, r1}
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	3344      	adds	r3, #68	; 0x44
 8005892:	3244      	adds	r2, #68	; 0x44
 8005894:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005898:	e883 0003 	stmia.w	r3, {r0, r1}
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	334c      	adds	r3, #76	; 0x4c
 80058a2:	324c      	adds	r2, #76	; 0x4c
 80058a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058a8:	e883 0003 	stmia.w	r3, {r0, r1}
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	3354      	adds	r3, #84	; 0x54
 80058b2:	3254      	adds	r2, #84	; 0x54
 80058b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058b8:	e883 0003 	stmia.w	r3, {r0, r1}
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	335c      	adds	r3, #92	; 0x5c
 80058c2:	325c      	adds	r2, #92	; 0x5c
 80058c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058c8:	e883 0003 	stmia.w	r3, {r0, r1}
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	f102 0464 	add.w	r4, r2, #100	; 0x64
 80058d4:	f103 0564 	add.w	r5, r3, #100	; 0x64
 80058d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058dc:	682b      	ldr	r3, [r5, #0]
 80058de:	6023      	str	r3, [r4, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	3378      	adds	r3, #120	; 0x78
 80058e6:	3278      	adds	r2, #120	; 0x78
 80058e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058ec:	e883 0003 	stmia.w	r3, {r0, r1}
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	3380      	adds	r3, #128	; 0x80
 80058f6:	3280      	adds	r2, #128	; 0x80
 80058f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	3388      	adds	r3, #136	; 0x88
 8005906:	3288      	adds	r2, #136	; 0x88
 8005908:	e892 0003 	ldmia.w	r2, {r0, r1}
 800590c:	e883 0003 	stmia.w	r3, {r0, r1}
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	3390      	adds	r3, #144	; 0x90
 8005916:	3290      	adds	r2, #144	; 0x90
 8005918:	e892 0003 	ldmia.w	r2, {r0, r1}
 800591c:	e883 0003 	stmia.w	r3, {r0, r1}
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	3398      	adds	r3, #152	; 0x98
 8005926:	3298      	adds	r2, #152	; 0x98
 8005928:	e892 0003 	ldmia.w	r2, {r0, r1}
 800592c:	e883 0003 	stmia.w	r3, {r0, r1}
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	683a      	ldr	r2, [r7, #0]
 8005934:	33a0      	adds	r3, #160	; 0xa0
 8005936:	32a0      	adds	r2, #160	; 0xa0
 8005938:	e892 0003 	ldmia.w	r2, {r0, r1}
 800593c:	e883 0003 	stmia.w	r3, {r0, r1}
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	33a8      	adds	r3, #168	; 0xa8
 8005946:	32a8      	adds	r2, #168	; 0xa8
 8005948:	e892 0003 	ldmia.w	r2, {r0, r1}
 800594c:	e883 0003 	stmia.w	r3, {r0, r1}
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	33b0      	adds	r3, #176	; 0xb0
 8005956:	32b0      	adds	r2, #176	; 0xb0
 8005958:	e892 0003 	ldmia.w	r2, {r0, r1}
 800595c:	e883 0003 	stmia.w	r3, {r0, r1}
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	f102 04b8 	add.w	r4, r2, #184	; 0xb8
 8005968:	f103 05b8 	add.w	r5, r3, #184	; 0xb8
 800596c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800596e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005970:	682b      	ldr	r3, [r5, #0]
 8005972:	6023      	str	r3, [r4, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	33cc      	adds	r3, #204	; 0xcc
 800597a:	32cc      	adds	r2, #204	; 0xcc
 800597c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005980:	e883 0003 	stmia.w	r3, {r0, r1}
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	33d4      	adds	r3, #212	; 0xd4
 800598a:	32d4      	adds	r2, #212	; 0xd4
 800598c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005990:	e883 0003 	stmia.w	r3, {r0, r1}
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	33e8      	adds	r3, #232	; 0xe8
 80059be:	32e8      	adds	r2, #232	; 0xe8
 80059c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80059c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4618      	mov	r0, r3
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bcb0      	pop	{r4, r5, r7}
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	0800cabc 	.word	0x0800cabc

080059f0 <_ZN6EMFObsC1ERKS_>:
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
 80059fa:	4a05      	ldr	r2, [pc, #20]	; (8005a10 <_ZN6EMFObsC1ERKS_+0x20>)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	601a      	str	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4618      	mov	r0, r3
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	0800cacc 	.word	0x0800cacc

08005a14 <_ZN8ObserverC1ERKS_>:
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
 8005a1e:	4a22      	ldr	r2, [pc, #136]	; (8005aa8 <_ZN8ObserverC1ERKS_+0x94>)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	1d1a      	adds	r2, r3, #4
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	4610      	mov	r0, r2
 8005a30:	f7ff fee4 	bl	80057fc <_ZN11AdaptVelEstC1ERKS_>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005a40:	4619      	mov	r1, r3
 8005a42:	4610      	mov	r0, r2
 8005a44:	f7ff ffd4 	bl	80059f0 <_ZN6EMFObsC1ERKS_>
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	0800cadc 	.word	0x0800cadc

08005aac <_ZN9ArgSensorC1ERKS_>:
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
 8005ab6:	4a14      	ldr	r2, [pc, #80]	; (8005b08 <_ZN9ArgSensorC1ERKS_+0x5c>)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	601a      	str	r2, [r3, #0]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	605a      	str	r2, [r3, #4]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	689a      	ldr	r2, [r3, #8]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	609a      	str	r2, [r3, #8]
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	68da      	ldr	r2, [r3, #12]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	60da      	str	r2, [r3, #12]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	7c1a      	ldrb	r2, [r3, #16]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	741a      	strb	r2, [r3, #16]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	7c5a      	ldrb	r2, [r3, #17]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	745a      	strb	r2, [r3, #17]
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	695a      	ldr	r2, [r3, #20]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	615a      	str	r2, [r3, #20]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f103 0218 	add.w	r2, r3, #24
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	3318      	adds	r3, #24
 8005af6:	4619      	mov	r1, r3
 8005af8:	4610      	mov	r0, r2
 8005afa:	f7ff ff8b 	bl	8005a14 <_ZN8ObserverC1ERKS_>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4618      	mov	r0, r3
 8005b02:	3708      	adds	r7, #8
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	0800ca5c 	.word	0x0800ca5c

08005b0c <_ZN7TimInfoC1ERKS_>:
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
 8005b16:	4a0d      	ldr	r2, [pc, #52]	; (8005b4c <_ZN7TimInfoC1ERKS_+0x40>)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	605a      	str	r2, [r3, #4]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	689a      	ldr	r2, [r3, #8]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	609a      	str	r2, [r3, #8]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	68da      	ldr	r2, [r3, #12]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	60da      	str	r2, [r3, #12]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	691a      	ldr	r2, [r3, #16]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	611a      	str	r2, [r3, #16]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	370c      	adds	r7, #12
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	0800caec 	.word	0x0800caec

08005b50 <_ZN3PIDC1ERKS_>:
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
 8005b5a:	4a14      	ldr	r2, [pc, #80]	; (8005bac <_ZN3PIDC1ERKS_+0x5c>)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	3304      	adds	r3, #4
 8005b66:	3204      	adds	r2, #4
 8005b68:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	691a      	ldr	r2, [r3, #16]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	611a      	str	r2, [r3, #16]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	695a      	ldr	r2, [r3, #20]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	615a      	str	r2, [r3, #20]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	699a      	ldr	r2, [r3, #24]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	619a      	str	r2, [r3, #24]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	69da      	ldr	r2, [r3, #28]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	61da      	str	r2, [r3, #28]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	6a1a      	ldr	r2, [r3, #32]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	621a      	str	r2, [r3, #32]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	625a      	str	r2, [r3, #36]	; 0x24
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr
 8005bac:	0800ca4c 	.word	0x0800ca4c

08005bb0 <_ZN9MotorCtrl13InitMotorInfoEv>:

void MotorCtrl::InitMotorInfo(void) {
 8005bb0:	b590      	push	{r4, r7, lr}
 8005bb2:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	1d3b      	adds	r3, r7, #4
 8005bba:	6018      	str	r0, [r3, #0]
	{//MathLibの生存時間調整(メモリ空けてくれ!!)
		MathLib mathlibrary;//三角関数を取得
 8005bbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7fd ffed 	bl	8003ba0 <_ZN7MathLibC1Ev>
		int mathlib_size = 512;//ライブラリのサイズを指定
 8005bc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bca:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
		mathlibrary.fInit(mathlib_size);
 8005bce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005bd2:	f8d7 133c 	ldr.w	r1, [r7, #828]	; 0x33c
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fe f842 	bl	8003c60 <_ZN7MathLib5fInitEi>
		mMotorInfo.setMathLib(mathlibrary);//モータクラスに算術ライブラリを渡す
 8005bdc:	1d3b      	adds	r3, r7, #4
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	1d1c      	adds	r4, r3, #4
 8005be2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005be6:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005bea:	4611      	mov	r1, r2
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7ff fddd 	bl	80057ac <_ZN7MathLibC1ERKS_>
 8005bf2:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	f000 fb84 	bl	8006306 <_ZN9MotorInfo10setMathLibE7MathLib>
 8005bfe:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7fd ffe8 	bl	8003bd8 <_ZN7MathLibD1Ev>
		MathLib mathlibrary;//三角関数を取得
 8005c08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7fd ffe3 	bl	8003bd8 <_ZN7MathLibD1Ev>
	}
	{
		ArgSensor sensor; //角度を求める機能を持ったclass
 8005c12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fe ff2e 	bl	8004a78 <_ZN9ArgSensorC1Ev>
		sensor.Init();
 8005c1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7fe ff72 	bl	8004b0a <_ZN9ArgSensor4InitEv>
		mMotorInfo.setArgSensor(sensor);
 8005c26:	1d3b      	adds	r3, r7, #4
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	1d1c      	adds	r4, r3, #4
 8005c2c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005c30:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005c34:	4611      	mov	r1, r2
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7ff ff38 	bl	8005aac <_ZN9ArgSensorC1ERKS_>
 8005c3c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005c40:	4619      	mov	r1, r3
 8005c42:	4620      	mov	r0, r4
 8005c44:	f000 fb6e 	bl	8006324 <_ZN9MotorInfo12setArgSensorE9ArgSensor>
 8005c48:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7fe ff37 	bl	8004ac0 <_ZN9ArgSensorD1Ev>
		ArgSensor sensor; //角度を求める機能を持ったclass
 8005c52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7fe ff32 	bl	8004ac0 <_ZN9ArgSensorD1Ev>
	}
	{
		TimInfo Tim_Info;//タイマの経過時間測定Class
 8005c5c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005c60:	4618      	mov	r0, r3
 8005c62:	f000 fcb1 	bl	80065c8 <_ZN7TimInfoC1Ev>
		Tim_Info.Init(TIM1);
 8005c66:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005c6a:	4939      	ldr	r1, [pc, #228]	; (8005d50 <_ZN9MotorCtrl13InitMotorInfoEv+0x1a0>)
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 fcdb 	bl	8006628 <_ZN7TimInfo4InitEP11TIM_TypeDef>
		mMotorInfo.setTimInfo(Tim_Info);
 8005c72:	1d3b      	adds	r3, r7, #4
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	1d1c      	adds	r4, r3, #4
 8005c78:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8005c7c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8005c80:	4611      	mov	r1, r2
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7ff ff42 	bl	8005b0c <_ZN7TimInfoC1ERKS_>
 8005c88:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	4620      	mov	r0, r4
 8005c90:	f000 fb58 	bl	8006344 <_ZN9MotorInfo10setTimInfoE7TimInfo>
 8005c94:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f000 fca5 	bl	80065e8 <_ZN7TimInfoD1Ev>
		TimInfo Tim_Info;//タイマの経過時間測定Class
 8005c9e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 fca0 	bl	80065e8 <_ZN7TimInfoD1Ev>
	}
	{//PIDLibの生存時間調整(代入後メモリを解放する)
		PID IqPID;
 8005ca8:	f107 0308 	add.w	r3, r7, #8
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7fe fe99 	bl	80049e4 <_ZN3PIDC1Ev>
		PID IdPID;
 8005cb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fe fe94 	bl	80049e4 <_ZN3PIDC1Ev>
		IdPID.SetParam(PID_GAIN_ID_P, PID_GAIN_ID_I, PID_GAIN_ID_D);
 8005cbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005cc0:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8005d54 <_ZN9MotorCtrl13InitMotorInfoEv+0x1a4>
 8005cc4:	eddf 0a23 	vldr	s1, [pc, #140]	; 8005d54 <_ZN9MotorCtrl13InitMotorInfoEv+0x1a4>
 8005cc8:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8005d54 <_ZN9MotorCtrl13InitMotorInfoEv+0x1a4>
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7fe feb9 	bl	8004a44 <_ZN3PID8SetParamEfff>
		IqPID.SetParam(PID_GAIN_IQ_P, PID_GAIN_IQ_I, PID_GAIN_IQ_D);
 8005cd2:	f107 0308 	add.w	r3, r7, #8
 8005cd6:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8005d54 <_ZN9MotorCtrl13InitMotorInfoEv+0x1a4>
 8005cda:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8005d54 <_ZN9MotorCtrl13InitMotorInfoEv+0x1a4>
 8005cde:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8005d54 <_ZN9MotorCtrl13InitMotorInfoEv+0x1a4>
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fe feae 	bl	8004a44 <_ZN3PID8SetParamEfff>
		mMotorInfo.setIdqPIDLib(IdPID, IqPID);
 8005ce8:	1d3b      	adds	r3, r7, #4
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	1d1c      	adds	r4, r3, #4
 8005cee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005cf2:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8005cf6:	4611      	mov	r1, r2
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7ff ff29 	bl	8005b50 <_ZN3PIDC1ERKS_>
 8005cfe:	f107 0208 	add.w	r2, r7, #8
 8005d02:	f507 7345 	add.w	r3, r7, #788	; 0x314
 8005d06:	4611      	mov	r1, r2
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7ff ff21 	bl	8005b50 <_ZN3PIDC1ERKS_>
 8005d0e:	f507 7245 	add.w	r2, r7, #788	; 0x314
 8005d12:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8005d16:	4619      	mov	r1, r3
 8005d18:	4620      	mov	r0, r4
 8005d1a:	f000 fb22 	bl	8006362 <_ZN9MotorInfo12setIdqPIDLibE3PIDS0_>
 8005d1e:	f507 7345 	add.w	r3, r7, #788	; 0x314
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7fe fe6e 	bl	8004a04 <_ZN3PIDD1Ev>
 8005d28:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7fe fe69 	bl	8004a04 <_ZN3PIDD1Ev>
		PID IdPID;
 8005d32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fe fe64 	bl	8004a04 <_ZN3PIDD1Ev>
		PID IqPID;
 8005d3c:	f107 0308 	add.w	r3, r7, #8
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7fe fe5f 	bl	8004a04 <_ZN3PIDD1Ev>
		//mMotorInfo.setIganmadeltaPIDLib(IganmaPID, IdeltaPID);
	}
}
 8005d46:	bf00      	nop
 8005d48:	f507 7751 	add.w	r7, r7, #836	; 0x344
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd90      	pop	{r4, r7, pc}
 8005d50:	40010000 	.word	0x40010000
 8005d54:	3dcccccd 	.word	0x3dcccccd

08005d58 <_ZN9MotorCtrl7DbgUartENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	mMotorInfo.startForceCommutation();
}


////////////////func of debug ///////////////////
void MotorCtrl::DbgUart(std::string pStr) {
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b088      	sub	sp, #32
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
	UART::Transmit(pStr);
 8005d62:	f107 0308 	add.w	r3, r7, #8
 8005d66:	6839      	ldr	r1, [r7, #0]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f003 fcbd 	bl	80096e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005d6e:	f107 0308 	add.w	r3, r7, #8
 8005d72:	4618      	mov	r0, r3
 8005d74:	f003 fae8 	bl	8009348 <_ZN4UART8TransmitENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8005d78:	f107 0308 	add.w	r3, r7, #8
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f003 fc6b 	bl	8009658 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8005d82:	bf00      	nop
 8005d84:	3720      	adds	r7, #32
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <_ZN9__gnu_cxx14__alloc_traitsISaIfEE27_S_propagate_on_copy_assignEv>:

    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
 8005d8a:	b480      	push	{r7}
 8005d8c:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 8005d8e:	2300      	movs	r3, #0
 8005d90:	4618      	mov	r0, r3
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <_ZN9__gnu_cxx14__alloc_traitsISaIfEE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 8005d9a:	b480      	push	{r7}
 8005d9c:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 8005d9e:	2301      	movs	r3, #1
 8005da0:	4618      	mov	r0, r3
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <_ZNSt6vectorIfSaIfEEaSERKS1_>:
    vector<_Tp, _Alloc>::
 8005daa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dac:	b085      	sub	sp, #20
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
 8005db2:	6039      	str	r1, [r7, #0]
      if (&__x != this)
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	f000 80e8 	beq.w	8005f8e <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1e4>
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 8005dbe:	f7ff ffe4 	bl	8005d8a <_ZN9__gnu_cxx14__alloc_traitsISaIfEE27_S_propagate_on_copy_assignEv>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d044      	beq.n	8005e52 <_ZNSt6vectorIfSaIfEEaSERKS1_+0xa8>
	      if (!_Alloc_traits::_S_always_equal()
 8005dc8:	f7ff ffe7 	bl	8005d9a <_ZN9__gnu_cxx14__alloc_traitsISaIfEE15_S_always_equalEv>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	f083 0301 	eor.w	r3, r3, #1
 8005dd2:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d012      	beq.n	8005dfe <_ZNSt6vectorIfSaIfEEaSERKS1_+0x54>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fe f8e3 	bl	8003fa6 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8005de0:	4604      	mov	r4, r0
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7fe f9ea 	bl	80041be <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8005dea:	4603      	mov	r3, r0
 8005dec:	4619      	mov	r1, r3
 8005dee:	4620      	mov	r0, r4
 8005df0:	f000 f8d2 	bl	8005f98 <_ZStneIfEbRKSaIT_ES3_>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d001      	beq.n	8005dfe <_ZNSt6vectorIfSaIfEEaSERKS1_+0x54>
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e000      	b.n	8005e00 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x56>
 8005dfe:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d018      	beq.n	8005e36 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x8c>
		  this->clear();
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f7fe f82b 	bl	8003e60 <_ZNSt6vectorIfSaIfEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
				- this->_M_impl._M_start);
 8005e14:	461a      	mov	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	109b      	asrs	r3, r3, #2
		  _M_deallocate(this->_M_impl._M_start,
 8005e1e:	461a      	mov	r2, r3
 8005e20:	f7fe fa46 	bl	80042b0 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
		  this->_M_impl._M_start = nullptr;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	609a      	str	r2, [r3, #8]
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7fe f8b4 	bl	8003fa6 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8005e3e:	4604      	mov	r4, r0
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fe f9bb 	bl	80041be <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	f000 f8af 	bl	8005fb0 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>
	  const size_type __xlen = __x.size();
 8005e52:	6838      	ldr	r0, [r7, #0]
 8005e54:	f7fe f994 	bl	8004180 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8005e58:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f8b6 	bl	8005fcc <_ZNKSt6vectorIfSaIfEE8capacityEv>
 8005e60:	4602      	mov	r2, r0
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4293      	cmp	r3, r2
 8005e66:	bf8c      	ite	hi
 8005e68:	2301      	movhi	r3, #1
 8005e6a:	2300      	movls	r3, #0
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d033      	beq.n	8005eda <_ZNSt6vectorIfSaIfEEaSERKS1_+0x130>
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 8005e72:	6838      	ldr	r0, [r7, #0]
 8005e74:	f7fe f9ce 	bl	8004214 <_ZNKSt6vectorIfSaIfEE5beginEv>
 8005e78:	4604      	mov	r4, r0
 8005e7a:	6838      	ldr	r0, [r7, #0]
 8005e7c:	f7fe f9de 	bl	800423c <_ZNKSt6vectorIfSaIfEE3endEv>
 8005e80:	4603      	mov	r3, r0
 8005e82:	4622      	mov	r2, r4
 8005e84:	68f9      	ldr	r1, [r7, #12]
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f8b1 	bl	8005fee <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>
 8005e8c:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681c      	ldr	r4, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7fe f884 	bl	8003fa6 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8005e9e:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	f7fe f889 	bl	8003fbc <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
			    - this->_M_impl._M_start);
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	f7fe f9f6 	bl	80042b0 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
	      this->_M_impl._M_start = __tmp;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	441a      	add	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	609a      	str	r2, [r3, #8]
 8005ed8:	e052      	b.n	8005f80 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d6>
	  else if (size() >= __xlen)
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7fe f950 	bl	8004180 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	bf94      	ite	ls
 8005ee8:	2301      	movls	r3, #1
 8005eea:	2300      	movhi	r3, #0
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d020      	beq.n	8005f34 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x18a>
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8005ef2:	6838      	ldr	r0, [r7, #0]
 8005ef4:	f7fe f98e 	bl	8004214 <_ZNKSt6vectorIfSaIfEE5beginEv>
 8005ef8:	4604      	mov	r4, r0
 8005efa:	6838      	ldr	r0, [r7, #0]
 8005efc:	f7fe f99e 	bl	800423c <_ZNKSt6vectorIfSaIfEE3endEv>
 8005f00:	4605      	mov	r5, r0
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7fe fa64 	bl	80043d0 <_ZNSt6vectorIfSaIfEE5beginEv>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	4629      	mov	r1, r5
 8005f0e:	4620      	mov	r0, r4
 8005f10:	f000 f889 	bl	8006026 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>
 8005f14:	4604      	mov	r4, r0
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7fe f894 	bl	8004044 <_ZNSt6vectorIfSaIfEE3endEv>
 8005f1c:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7fe f840 	bl	8003fa6 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8005f26:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8005f28:	461a      	mov	r2, r3
 8005f2a:	4629      	mov	r1, r5
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	f000 f892 	bl	8006056 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>
 8005f32:	e025      	b.n	8005f80 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d6>
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	681d      	ldr	r5, [r3, #0]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681c      	ldr	r4, [r3, #0]
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f7fe f91f 	bl	8004180 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8005f42:	4603      	mov	r3, r0
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	18e1      	adds	r1, r4, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	4628      	mov	r0, r5
 8005f50:	f000 f88f 	bl	8006072 <_ZSt4copyIPfS0_ET0_T_S2_S1_>
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681c      	ldr	r4, [r3, #0]
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7fe f911 	bl	8004180 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685e      	ldr	r6, [r3, #4]
					  _M_get_Tp_allocator());
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7fe f819 	bl	8003fa6 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8005f74:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8005f76:	4632      	mov	r2, r6
 8005f78:	4629      	mov	r1, r5
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	f000 f891 	bl	80060a2 <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	441a      	add	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	605a      	str	r2, [r3, #4]
      return *this;
 8005f8e:	687b      	ldr	r3, [r7, #4]
    }
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f98 <_ZStneIfEbRKSaIT_ES3_>:
    _GLIBCXX_USE_NOEXCEPT
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
    _GLIBCXX_USE_NOEXCEPT
    { return false; }
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>:
    inline void
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_copy_assignment __pocca;
      __do_alloc_on_copy(__one, __two, __pocca());
 8005fba:	461a      	mov	r2, r3
 8005fbc:	6839      	ldr	r1, [r7, #0]
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f880 	bl	80060c4 <_ZSt18__do_alloc_on_copyISaIfEEvRT_RKS1_St17integral_constantIbLb0EE>
    }
 8005fc4:	bf00      	nop
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <_ZNKSt6vectorIfSaIfEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
			 - this->_M_impl._M_start); }
 8005fd8:	461a      	mov	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	109b      	asrs	r3, r3, #2
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>:
	_M_allocate_and_copy(size_type __n,
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b086      	sub	sp, #24
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	60f8      	str	r0, [r7, #12]
 8005ff6:	60b9      	str	r1, [r7, #8]
 8005ff8:	607a      	str	r2, [r7, #4]
 8005ffa:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	68b9      	ldr	r1, [r7, #8]
 8006000:	4618      	mov	r0, r3
 8006002:	f7fe fa0b 	bl	800441c <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8006006:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4618      	mov	r0, r3
 800600c:	f7fd ffcb 	bl	8003fa6 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8006010:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	6839      	ldr	r1, [r7, #0]
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7fe f924 	bl	8004264 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
	      return __result;
 800601c:	697b      	ldr	r3, [r7, #20]
	}
 800601e:	4618      	mov	r0, r3
 8006020:	3718      	adds	r7, #24
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 8006026:	b590      	push	{r4, r7, lr}
 8006028:	b085      	sub	sp, #20
 800602a:	af00      	add	r7, sp, #0
 800602c:	60f8      	str	r0, [r7, #12]
 800602e:	60b9      	str	r1, [r7, #8]
 8006030:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f7fe fbd1 	bl	80047da <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8006038:	4604      	mov	r4, r0
 800603a:	68b8      	ldr	r0, [r7, #8]
 800603c:	f7fe fbcd 	bl	80047da <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8006040:	4603      	mov	r3, r0
	       __result));
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	4619      	mov	r1, r3
 8006046:	4620      	mov	r0, r4
 8006048:	f000 f848 	bl	80060dc <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>
 800604c:	4603      	mov	r3, r0
    }
 800604e:	4618      	mov	r0, r3
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	bd90      	pop	{r4, r7, pc}

08006056 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8006056:	b580      	push	{r7, lr}
 8006058:	b084      	sub	sp, #16
 800605a:	af00      	add	r7, sp, #0
 800605c:	60f8      	str	r0, [r7, #12]
 800605e:	60b9      	str	r1, [r7, #8]
 8006060:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8006062:	68b9      	ldr	r1, [r7, #8]
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 f85f 	bl	8006128 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>
    }
 800606a:	bf00      	nop
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <_ZSt4copyIPfS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 8006072:	b590      	push	{r4, r7, lr}
 8006074:	b085      	sub	sp, #20
 8006076:	af00      	add	r7, sp, #0
 8006078:	60f8      	str	r0, [r7, #12]
 800607a:	60b9      	str	r1, [r7, #8]
 800607c:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f7fe fc76 	bl	8004970 <_ZSt12__miter_baseIPfET_S1_>
 8006084:	4604      	mov	r4, r0
 8006086:	68b8      	ldr	r0, [r7, #8]
 8006088:	f7fe fc72 	bl	8004970 <_ZSt12__miter_baseIPfET_S1_>
 800608c:	4603      	mov	r3, r0
	       __result));
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	4619      	mov	r1, r3
 8006092:	4620      	mov	r0, r4
 8006094:	f000 f855 	bl	8006142 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>
 8006098:	4603      	mov	r3, r0
    }
 800609a:	4618      	mov	r0, r3
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd90      	pop	{r4, r7, pc}

080060a2 <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b084      	sub	sp, #16
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	60f8      	str	r0, [r7, #12]
 80060aa:	60b9      	str	r1, [r7, #8]
 80060ac:	607a      	str	r2, [r7, #4]
 80060ae:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	68b9      	ldr	r1, [r7, #8]
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 f860 	bl	800617a <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>
 80060ba:	4603      	mov	r3, r0
 80060bc:	4618      	mov	r0, r3
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <_ZSt18__do_alloc_on_copyISaIfEEvRT_RKS1_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	713a      	strb	r2, [r7, #4]
    { }
 80060d0:	bf00      	nop
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80060dc:	b5b0      	push	{r4, r5, r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f7fe fbb5 	bl	8004858 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80060ee:	4604      	mov	r4, r0
 80060f0:	68b8      	ldr	r0, [r7, #8]
 80060f2:	f7fe fbb1 	bl	8004858 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80060f6:	4605      	mov	r5, r0
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f850 	bl	800619e <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80060fe:	4603      	mov	r3, r0
 8006100:	461a      	mov	r2, r3
 8006102:	4629      	mov	r1, r5
 8006104:	4620      	mov	r0, r4
 8006106:	f7fe fbc0 	bl	800488a <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 800610a:	4603      	mov	r3, r0
 800610c:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 800610e:	f107 0214 	add.w	r2, r7, #20
 8006112:	f107 0310 	add.w	r3, r7, #16
 8006116:	4611      	mov	r1, r2
 8006118:	4618      	mov	r0, r3
 800611a:	f7fe f901 	bl	8004320 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 800611e:	693b      	ldr	r3, [r7, #16]
    }
 8006120:	4618      	mov	r0, r3
 8006122:	3718      	adds	r7, #24
 8006124:	46bd      	mov	sp, r7
 8006126:	bdb0      	pop	{r4, r5, r7, pc}

08006128 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8006132:	6839      	ldr	r1, [r7, #0]
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f840 	bl	80061ba <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>
    }
 800613a:	bf00      	nop
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8006142:	b5b0      	push	{r4, r5, r7, lr}
 8006144:	b084      	sub	sp, #16
 8006146:	af00      	add	r7, sp, #0
 8006148:	60f8      	str	r0, [r7, #12]
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f7fe fb90 	bl	8004874 <_ZSt12__niter_baseIPfET_S1_>
 8006154:	4604      	mov	r4, r0
 8006156:	68b8      	ldr	r0, [r7, #8]
 8006158:	f7fe fb8c 	bl	8004874 <_ZSt12__niter_baseIPfET_S1_>
 800615c:	4605      	mov	r5, r0
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7fe fb88 	bl	8004874 <_ZSt12__niter_baseIPfET_S1_>
 8006164:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8006166:	461a      	mov	r2, r3
 8006168:	4629      	mov	r1, r5
 800616a:	4620      	mov	r0, r4
 800616c:	f000 f830 	bl	80061d0 <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>
 8006170:	4603      	mov	r3, r0
    }
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bdb0      	pop	{r4, r5, r7, pc}

0800617a <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800617a:	b580      	push	{r7, lr}
 800617c:	b086      	sub	sp, #24
 800617e:	af00      	add	r7, sp, #0
 8006180:	60f8      	str	r0, [r7, #12]
 8006182:	60b9      	str	r1, [r7, #8]
 8006184:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8006186:	2301      	movs	r3, #1
 8006188:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	68b9      	ldr	r1, [r7, #8]
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f000 f830 	bl	80061f4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>
 8006194:	4603      	mov	r3, r0
    }
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800619e:	b580      	push	{r7, lr}
 80061a0:	b082      	sub	sp, #8
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 80061a6:	1d3b      	adds	r3, r7, #4
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7fe f94b 	bl	8004444 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 80061ae:	4603      	mov	r3, r0
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4618      	mov	r0, r3
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80061ba:	b480      	push	{r7}
 80061bc:	b083      	sub	sp, #12
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	6039      	str	r1, [r7, #0]
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 80061dc:	2301      	movs	r3, #1
 80061de:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	68b9      	ldr	r1, [r7, #8]
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f7fe fb9a 	bl	800491e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 80061ea:	4603      	mov	r3, r0
    }
 80061ec:	4618      	mov	r0, r3
 80061ee:	3718      	adds	r7, #24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	68b9      	ldr	r1, [r7, #8]
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f7ff ff34 	bl	8006072 <_ZSt4copyIPfS0_ET0_T_S2_S1_>
 800620a:	4603      	mov	r3, r0
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <_ZN9MotorInfoC1Ev>:

#include "MotorInfo.hpp"

//Init

MotorInfo::MotorInfo() {
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	4a16      	ldr	r2, [pc, #88]	; (8006278 <_ZN9MotorInfoC1Ev+0x64>)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	334c      	adds	r3, #76	; 0x4c
 8006226:	4618      	mov	r0, r3
 8006228:	f7fd fcba 	bl	8003ba0 <_ZN7MathLibC1Ev>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	337c      	adds	r3, #124	; 0x7c
 8006230:	4618      	mov	r0, r3
 8006232:	f000 f9c9 	bl	80065c8 <_ZN7TimInfoC1Ev>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	3390      	adds	r3, #144	; 0x90
 800623a:	4618      	mov	r0, r3
 800623c:	f7fe fbd2 	bl	80049e4 <_ZN3PIDC1Ev>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	33b8      	adds	r3, #184	; 0xb8
 8006244:	4618      	mov	r0, r3
 8006246:	f7fe fbcd 	bl	80049e4 <_ZN3PIDC1Ev>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	33e0      	adds	r3, #224	; 0xe0
 800624e:	4618      	mov	r0, r3
 8006250:	f7fe fbc8 	bl	80049e4 <_ZN3PIDC1Ev>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800625a:	4618      	mov	r0, r3
 800625c:	f7fe fbc2 	bl	80049e4 <_ZN3PIDC1Ev>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8006266:	4618      	mov	r0, r3
 8006268:	f7fe fc06 	bl	8004a78 <_ZN9ArgSensorC1Ev>
	// TODO Auto-generated constructor stub

}
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4618      	mov	r0, r3
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	0800caac 	.word	0x0800caac

0800627c <_ZN9MotorInfoD1Ev>:

MotorInfo::~MotorInfo() {
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	4a16      	ldr	r2, [pc, #88]	; (80062e0 <_ZN9MotorInfoD1Ev+0x64>)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	601a      	str	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8006290:	4618      	mov	r0, r3
 8006292:	f7fe fc15 	bl	8004ac0 <_ZN9ArgSensorD1Ev>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800629c:	4618      	mov	r0, r3
 800629e:	f7fe fbb1 	bl	8004a04 <_ZN3PIDD1Ev>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	33e0      	adds	r3, #224	; 0xe0
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fe fbac 	bl	8004a04 <_ZN3PIDD1Ev>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	33b8      	adds	r3, #184	; 0xb8
 80062b0:	4618      	mov	r0, r3
 80062b2:	f7fe fba7 	bl	8004a04 <_ZN3PIDD1Ev>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	3390      	adds	r3, #144	; 0x90
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fe fba2 	bl	8004a04 <_ZN3PIDD1Ev>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	337c      	adds	r3, #124	; 0x7c
 80062c4:	4618      	mov	r0, r3
 80062c6:	f000 f98f 	bl	80065e8 <_ZN7TimInfoD1Ev>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	334c      	adds	r3, #76	; 0x4c
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7fd fc82 	bl	8003bd8 <_ZN7MathLibD1Ev>
	// TODO Auto-generated destructor stub
}
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4618      	mov	r0, r3
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	0800caac 	.word	0x0800caac

080062e4 <_ZN9MotorInfoD0Ev>:
MotorInfo::~MotorInfo() {
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
}
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f7ff ffc5 	bl	800627c <_ZN9MotorInfoD1Ev>
 80062f2:	f44f 711a 	mov.w	r1, #616	; 0x268
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f003 f8fc 	bl	80094f4 <_ZdlPvj>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4618      	mov	r0, r3
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <_ZN9MotorInfo10setMathLibE7MathLib>:

void MotorInfo::setMathLib(MathLib pLib){
 8006306:	b580      	push	{r7, lr}
 8006308:	b082      	sub	sp, #8
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
 800630e:	6039      	str	r1, [r7, #0]
	mLib = pLib;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	334c      	adds	r3, #76	; 0x4c
 8006314:	6839      	ldr	r1, [r7, #0]
 8006316:	4618      	mov	r0, r3
 8006318:	f7fe ff8f 	bl	800523a <_ZN7MathLibaSERKS_>
}
 800631c:	bf00      	nop
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <_ZN9MotorInfo12setArgSensorE9ArgSensor>:

MathLib MotorInfo::getMathLib(void){return mLib;}

void MotorInfo::setArgSensor(ArgSensor pSensor){
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
	mSensor = pSensor;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8006334:	6839      	ldr	r1, [r7, #0]
 8006336:	4618      	mov	r0, r3
 8006338:	f7ff f92f 	bl	800559a <_ZN9ArgSensoraSERKS_>
}
 800633c:	bf00      	nop
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <_ZN9MotorInfo10setTimInfoE7TimInfo>:

void MotorInfo::setTimInfo(TimInfo pTimInfo) {
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
	mTimInfo = pTimInfo;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	337c      	adds	r3, #124	; 0x7c
 8006352:	6839      	ldr	r1, [r7, #0]
 8006354:	4618      	mov	r0, r3
 8006356:	f7fe ff93 	bl	8005280 <_ZN7TimInfoaSERKS_>
}
 800635a:	bf00      	nop
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <_ZN9MotorInfo12setIdqPIDLibE3PIDS0_>:


void MotorInfo::setIdqPIDLib(PID pdPID, PID pqPID){
 8006362:	b580      	push	{r7, lr}
 8006364:	b084      	sub	sp, #16
 8006366:	af00      	add	r7, sp, #0
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	607a      	str	r2, [r7, #4]
	mIdPID = pdPID;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	3390      	adds	r3, #144	; 0x90
 8006372:	68b9      	ldr	r1, [r7, #8]
 8006374:	4618      	mov	r0, r3
 8006376:	f7fe ff9f 	bl	80052b8 <_ZN3PIDaSERKS_>
	mIqPID = pqPID;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	33b8      	adds	r3, #184	; 0xb8
 800637e:	6879      	ldr	r1, [r7, #4]
 8006380:	4618      	mov	r0, r3
 8006382:	f7fe ff99 	bl	80052b8 <_ZN3PIDaSERKS_>
}
 8006386:	bf00      	nop
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
	...

08006390 <_ZN11AdaptVelEstC1Ev>:
 *      Author: watashi
 */

#include <AdaptVelEst.hpp>

AdaptVelEst::AdaptVelEst() {
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	4a39      	ldr	r2, [pc, #228]	; (8006480 <_ZN11AdaptVelEstC1Ev+0xf0>)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	//オブジェクト生成時に必ず0埋めすること.
	mBufVec1 = {0};
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	3334      	adds	r3, #52	; 0x34
 80063a2:	2200      	movs	r2, #0
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	605a      	str	r2, [r3, #4]
	mBufVec2 = {0};
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	333c      	adds	r3, #60	; 0x3c
 80063ac:	2200      	movs	r2, #0
 80063ae:	601a      	str	r2, [r3, #0]
 80063b0:	605a      	str	r2, [r3, #4]
	mBufVec3 = {0};
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	3344      	adds	r3, #68	; 0x44
 80063b6:	2200      	movs	r2, #0
 80063b8:	601a      	str	r2, [r3, #0]
 80063ba:	605a      	str	r2, [r3, #4]
	mBufVec4 = {0};
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	334c      	adds	r3, #76	; 0x4c
 80063c0:	2200      	movs	r2, #0
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	605a      	str	r2, [r3, #4]
	mBufVec5 = {0};
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	3354      	adds	r3, #84	; 0x54
 80063ca:	2200      	movs	r2, #0
 80063cc:	601a      	str	r2, [r3, #0]
 80063ce:	605a      	str	r2, [r3, #4]
	mBufVec6 = {0};
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	335c      	adds	r3, #92	; 0x5c
 80063d4:	2200      	movs	r2, #0
 80063d6:	601a      	str	r2, [r3, #0]
 80063d8:	605a      	str	r2, [r3, #4]
	mEtaAlphaBeta = {0};
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	3378      	adds	r3, #120	; 0x78
 80063de:	2200      	movs	r2, #0
 80063e0:	601a      	str	r2, [r3, #0]
 80063e2:	605a      	str	r2, [r3, #4]
	mBufVec7 = {0};
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	3380      	adds	r3, #128	; 0x80
 80063e8:	2200      	movs	r2, #0
 80063ea:	601a      	str	r2, [r3, #0]
 80063ec:	605a      	str	r2, [r3, #4]
	mEstEmfAlphaBeta = {0};
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	3388      	adds	r3, #136	; 0x88
 80063f2:	2200      	movs	r2, #0
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	605a      	str	r2, [r3, #4]
	mErrEmfAlphaBeta = {0};
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	3390      	adds	r3, #144	; 0x90
 80063fc:	2200      	movs	r2, #0
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	605a      	str	r2, [r3, #4]
	mBufVec8 = {0};
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	3398      	adds	r3, #152	; 0x98
 8006406:	2200      	movs	r2, #0
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	605a      	str	r2, [r3, #4]
	mBufVec9 = {0};
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	33a0      	adds	r3, #160	; 0xa0
 8006410:	2200      	movs	r2, #0
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	605a      	str	r2, [r3, #4]
	mBufVec10 = {0};
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	33a8      	adds	r3, #168	; 0xa8
 800641a:	2200      	movs	r2, #0
 800641c:	601a      	str	r2, [r3, #0]
 800641e:	605a      	str	r2, [r3, #4]
	mBufVec11 = {0};
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	33b0      	adds	r3, #176	; 0xb0
 8006424:	2200      	movs	r2, #0
 8006426:	601a      	str	r2, [r3, #0]
 8006428:	605a      	str	r2, [r3, #4]
	mAdaptEmfAlphaBeta = {0};
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	33cc      	adds	r3, #204	; 0xcc
 800642e:	2200      	movs	r2, #0
 8006430:	601a      	str	r2, [r3, #0]
 8006432:	605a      	str	r2, [r3, #4]
	mBufVec12 = {0};
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	33d4      	adds	r3, #212	; 0xd4
 8006438:	2200      	movs	r2, #0
 800643a:	601a      	str	r2, [r3, #0]
 800643c:	605a      	str	r2, [r3, #4]

	mBufVal1 = 0;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f04f 0200 	mov.w	r2, #0
 8006444:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	mBufVal2 = 0;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f04f 0200 	mov.w	r2, #0
 800644e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	mBufVal3 = 0;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f04f 0200 	mov.w	r2, #0
 8006458:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	mBufVal4 = 0;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f04f 0200 	mov.w	r2, #0
 8006462:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	mEstOmegaE = 0;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f04f 0200 	mov.w	r2, #0
 800646c:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
}
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4618      	mov	r0, r3
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	0800cabc 	.word	0x0800cabc

08006484 <_ZN11AdaptVelEstD1Ev>:
AdaptVelEst::~AdaptVelEst() {
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	4a04      	ldr	r2, [pc, #16]	; (80064a0 <_ZN11AdaptVelEstD1Ev+0x1c>)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4618      	mov	r0, r3
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr
 80064a0:	0800cabc 	.word	0x0800cabc

080064a4 <_ZN11AdaptVelEstD0Ev>:
AdaptVelEst::~AdaptVelEst() {
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
}
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f7ff ffe9 	bl	8006484 <_ZN11AdaptVelEstD1Ev>
 80064b2:	21fc      	movs	r1, #252	; 0xfc
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f003 f81d 	bl	80094f4 <_ZdlPvj>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4618      	mov	r0, r3
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <_ZN6EMFObsC1Ev>:
 *      Author: watashi
 */

#include <EMFObs.hpp>

EMFObs::EMFObs() {
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	4a04      	ldr	r2, [pc, #16]	; (80064e0 <_ZN6EMFObsC1Ev+0x1c>)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4618      	mov	r0, r3
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	0800cacc 	.word	0x0800cacc

080064e4 <_ZN6EMFObsD1Ev>:

EMFObs::~EMFObs() {
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	4a04      	ldr	r2, [pc, #16]	; (8006500 <_ZN6EMFObsD1Ev+0x1c>)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4618      	mov	r0, r3
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr
 8006500:	0800cacc 	.word	0x0800cacc

08006504 <_ZN6EMFObsD0Ev>:
EMFObs::~EMFObs() {
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
}
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7ff ffe9 	bl	80064e4 <_ZN6EMFObsD1Ev>
 8006512:	2104      	movs	r1, #4
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f002 ffed 	bl	80094f4 <_ZdlPvj>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4618      	mov	r0, r3
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <_ZN8ObserverC1Ev>:
 *      Author: watashi
 */

#include "Observer.hpp"

Observer::Observer() {
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	4a09      	ldr	r2, [pc, #36]	; (8006554 <_ZN8ObserverC1Ev+0x30>)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	601a      	str	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	3304      	adds	r3, #4
 8006536:	4618      	mov	r0, r3
 8006538:	f7ff ff2a 	bl	8006390 <_ZN11AdaptVelEstC1Ev>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006542:	4618      	mov	r0, r3
 8006544:	f7ff ffbe 	bl	80064c4 <_ZN6EMFObsC1Ev>
	// TODO Auto-generated constructor stub
}
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4618      	mov	r0, r3
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	0800cadc 	.word	0x0800cadc

08006558 <_ZN8ObserverD1Ev>:

Observer::~Observer() {
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	4a09      	ldr	r2, [pc, #36]	; (8006588 <_ZN8ObserverD1Ev+0x30>)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	601a      	str	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800656c:	4618      	mov	r0, r3
 800656e:	f7ff ffb9 	bl	80064e4 <_ZN6EMFObsD1Ev>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	3304      	adds	r3, #4
 8006576:	4618      	mov	r0, r3
 8006578:	f7ff ff84 	bl	8006484 <_ZN11AdaptVelEstD1Ev>
	// TODO Auto-generated destructor stub
}
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4618      	mov	r0, r3
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	0800cadc 	.word	0x0800cadc

0800658c <_ZN8ObserverD0Ev>:
Observer::~Observer() {
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
}
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f7ff ffdf 	bl	8006558 <_ZN8ObserverD1Ev>
 800659a:	f44f 7190 	mov.w	r1, #288	; 0x120
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f002 ffa8 	bl	80094f4 <_ZdlPvj>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4618      	mov	r0, r3
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <LL_TIM_GetAutoReload>:
{
 80065ae:	b480      	push	{r7}
 80065b0:	b083      	sub	sp, #12
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->ARR));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	370c      	adds	r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
	...

080065c8 <_ZN7TimInfoC1Ev>:


#include "TimInfo.hpp"


TimInfo::TimInfo() {
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	4a04      	ldr	r2, [pc, #16]	; (80065e4 <_ZN7TimInfoC1Ev+0x1c>)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4618      	mov	r0, r3
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr
 80065e4:	0800caec 	.word	0x0800caec

080065e8 <_ZN7TimInfoD1Ev>:

TimInfo::~TimInfo() {
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	4a04      	ldr	r2, [pc, #16]	; (8006604 <_ZN7TimInfoD1Ev+0x1c>)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4618      	mov	r0, r3
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr
 8006604:	0800caec 	.word	0x0800caec

08006608 <_ZN7TimInfoD0Ev>:
TimInfo::~TimInfo() {
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
}
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7ff ffe9 	bl	80065e8 <_ZN7TimInfoD1Ev>
 8006616:	2114      	movs	r1, #20
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f002 ff6b 	bl	80094f4 <_ZdlPvj>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4618      	mov	r0, r3
 8006622:	3708      	adds	r7, #8
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <_ZN7TimInfo4InitEP11TIM_TypeDef>:

void TimInfo::Init(TIM_TypeDef *pTIMx) {
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]

	if(pTIMx == NULL) {
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d100      	bne.n	800663a <_ZN7TimInfo4InitEP11TIM_TypeDef+0x12>
		//null ptr error
		while(1){}
 8006638:	e7fe      	b.n	8006638 <_ZN7TimInfo4InitEP11TIM_TypeDef+0x10>
	}

	mReload = 0;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	609a      	str	r2, [r3, #8]
	mStartTime = 0;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	60da      	str	r2, [r3, #12]
	mStopTime = 0;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	611a      	str	r2, [r3, #16]

	mTIMx = pTIMx;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	605a      	str	r2, [r3, #4]
	mReload = LL_TIM_GetAutoReload(pTIMx);
 8006652:	6838      	ldr	r0, [r7, #0]
 8006654:	f7ff ffab 	bl	80065ae <LL_TIM_GetAutoReload>
 8006658:	4603      	mov	r3, r0
 800665a:	461a      	mov	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	609a      	str	r2, [r3, #8]

}
 8006660:	bf00      	nop
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <__NVIC_GetPriorityGrouping>:
{
 8006668:	b480      	push	{r7}
 800666a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800666c:	4b04      	ldr	r3, [pc, #16]	; (8006680 <__NVIC_GetPriorityGrouping+0x18>)
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	0a1b      	lsrs	r3, r3, #8
 8006672:	f003 0307 	and.w	r3, r3, #7
}
 8006676:	4618      	mov	r0, r3
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	e000ed00 	.word	0xe000ed00

08006684 <__NVIC_EnableIRQ>:
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	4603      	mov	r3, r0
 800668c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800668e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006692:	2b00      	cmp	r3, #0
 8006694:	db0b      	blt.n	80066ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006696:	79fb      	ldrb	r3, [r7, #7]
 8006698:	f003 021f 	and.w	r2, r3, #31
 800669c:	4907      	ldr	r1, [pc, #28]	; (80066bc <__NVIC_EnableIRQ+0x38>)
 800669e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066a2:	095b      	lsrs	r3, r3, #5
 80066a4:	2001      	movs	r0, #1
 80066a6:	fa00 f202 	lsl.w	r2, r0, r2
 80066aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	e000e100 	.word	0xe000e100

080066c0 <__NVIC_SetPriority>:
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	4603      	mov	r3, r0
 80066c8:	6039      	str	r1, [r7, #0]
 80066ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	db0a      	blt.n	80066ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	490c      	ldr	r1, [pc, #48]	; (800670c <__NVIC_SetPriority+0x4c>)
 80066da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066de:	0112      	lsls	r2, r2, #4
 80066e0:	b2d2      	uxtb	r2, r2
 80066e2:	440b      	add	r3, r1
 80066e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80066e8:	e00a      	b.n	8006700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	b2da      	uxtb	r2, r3
 80066ee:	4908      	ldr	r1, [pc, #32]	; (8006710 <__NVIC_SetPriority+0x50>)
 80066f0:	79fb      	ldrb	r3, [r7, #7]
 80066f2:	f003 030f 	and.w	r3, r3, #15
 80066f6:	3b04      	subs	r3, #4
 80066f8:	0112      	lsls	r2, r2, #4
 80066fa:	b2d2      	uxtb	r2, r2
 80066fc:	440b      	add	r3, r1
 80066fe:	761a      	strb	r2, [r3, #24]
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	e000e100 	.word	0xe000e100
 8006710:	e000ed00 	.word	0xe000ed00

08006714 <NVIC_EncodePriority>:
{
 8006714:	b480      	push	{r7}
 8006716:	b089      	sub	sp, #36	; 0x24
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f003 0307 	and.w	r3, r3, #7
 8006726:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	f1c3 0307 	rsb	r3, r3, #7
 800672e:	2b04      	cmp	r3, #4
 8006730:	bf28      	it	cs
 8006732:	2304      	movcs	r3, #4
 8006734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	3304      	adds	r3, #4
 800673a:	2b06      	cmp	r3, #6
 800673c:	d902      	bls.n	8006744 <NVIC_EncodePriority+0x30>
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	3b03      	subs	r3, #3
 8006742:	e000      	b.n	8006746 <NVIC_EncodePriority+0x32>
 8006744:	2300      	movs	r3, #0
 8006746:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006748:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	fa02 f303 	lsl.w	r3, r2, r3
 8006752:	43da      	mvns	r2, r3
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	401a      	ands	r2, r3
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800675c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	fa01 f303 	lsl.w	r3, r1, r3
 8006766:	43d9      	mvns	r1, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800676c:	4313      	orrs	r3, r2
}
 800676e:	4618      	mov	r0, r3
 8006770:	3724      	adds	r7, #36	; 0x24
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <LL_ADC_REG_SetSequencerRanks>:
{
 800677a:	b490      	push	{r4, r7}
 800677c:	b086      	sub	sp, #24
 800677e:	af00      	add	r7, sp, #0
 8006780:	60f8      	str	r0, [r7, #12]
 8006782:	60b9      	str	r1, [r7, #8]
 8006784:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	332c      	adds	r3, #44	; 0x2c
 800678a:	4619      	mov	r1, r3
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006792:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006796:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	fa92 f2a2 	rbit	r2, r2
 800679e:	613a      	str	r2, [r7, #16]
  return result;
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	fab2 f282 	clz	r2, r2
 80067a6:	b2d2      	uxtb	r2, r2
 80067a8:	40d3      	lsrs	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	440b      	add	r3, r1
 80067ae:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80067b0:	6822      	ldr	r2, [r4, #0]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	f003 031f 	and.w	r3, r3, #31
 80067b8:	211f      	movs	r1, #31
 80067ba:	fa01 f303 	lsl.w	r3, r1, r3
 80067be:	43db      	mvns	r3, r3
 80067c0:	401a      	ands	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f003 011f 	and.w	r1, r3, #31
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f003 031f 	and.w	r3, r3, #31
 80067ce:	fa01 f303 	lsl.w	r3, r1, r3
 80067d2:	4313      	orrs	r3, r2
 80067d4:	6023      	str	r3, [r4, #0]
}
 80067d6:	bf00      	nop
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bc90      	pop	{r4, r7}
 80067de:	4770      	bx	lr

080067e0 <LL_ADC_REG_SetFlagEndOfConversion>:
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	431a      	orrs	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	609a      	str	r2, [r3, #8]
}
 80067fa:	bf00      	nop
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <LL_ADC_INJ_SetSequencerRanks>:
{
 8006806:	b490      	push	{r4, r7}
 8006808:	b084      	sub	sp, #16
 800680a:	af00      	add	r7, sp, #0
 800680c:	60f8      	str	r0, [r7, #12]
 800680e:	60b9      	str	r1, [r7, #8]
 8006810:	607a      	str	r2, [r7, #4]
  register uint32_t tmpreg1 = (READ_BIT(ADCx->JSQR, ADC_JSQR_JL) >> ADC_JSQR_JL_Pos) + 1U;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006816:	0d1b      	lsrs	r3, r3, #20
 8006818:	f003 0303 	and.w	r3, r3, #3
 800681c:	1c5c      	adds	r4, r3, #1
  MODIFY_REG(ADCx->JSQR,
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	b2d9      	uxtb	r1, r3
 8006826:	b2e3      	uxtb	r3, r4
 8006828:	1acb      	subs	r3, r1, r3
 800682a:	b2db      	uxtb	r3, r3
 800682c:	3303      	adds	r3, #3
 800682e:	b2db      	uxtb	r3, r3
 8006830:	4619      	mov	r1, r3
 8006832:	460b      	mov	r3, r1
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	440b      	add	r3, r1
 8006838:	211f      	movs	r1, #31
 800683a:	fa01 f303 	lsl.w	r3, r1, r3
 800683e:	43db      	mvns	r3, r3
 8006840:	401a      	ands	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f003 011f 	and.w	r1, r3, #31
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	b2d8      	uxtb	r0, r3
 800684c:	b2e3      	uxtb	r3, r4
 800684e:	1ac3      	subs	r3, r0, r3
 8006850:	b2db      	uxtb	r3, r3
 8006852:	3303      	adds	r3, #3
 8006854:	b2db      	uxtb	r3, r3
 8006856:	4618      	mov	r0, r3
 8006858:	4603      	mov	r3, r0
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4403      	add	r3, r0
 800685e:	fa01 f303 	lsl.w	r3, r1, r3
 8006862:	431a      	orrs	r2, r3
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006868:	bf00      	nop
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bc90      	pop	{r4, r7}
 8006870:	4770      	bx	lr

08006872 <LL_ADC_INJ_SetOffset>:
{
 8006872:	b490      	push	{r4, r7}
 8006874:	b086      	sub	sp, #24
 8006876:	af00      	add	r7, sp, #0
 8006878:	60f8      	str	r0, [r7, #12]
 800687a:	60b9      	str	r1, [r7, #8]
 800687c:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JOFR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JOFRX_REGOFFSET_MASK));
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	3314      	adds	r3, #20
 8006882:	4619      	mov	r1, r3
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800688a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800688e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006890:	697a      	ldr	r2, [r7, #20]
 8006892:	fa92 f2a2 	rbit	r2, r2
 8006896:	613a      	str	r2, [r7, #16]
  return result;
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	fab2 f282 	clz	r2, r2
 800689e:	b2d2      	uxtb	r2, r2
 80068a0:	40d3      	lsrs	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	440b      	add	r3, r1
 80068a6:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80068a8:	6823      	ldr	r3, [r4, #0]
 80068aa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80068ae:	f023 030f 	bic.w	r3, r3, #15
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	6023      	str	r3, [r4, #0]
}
 80068b8:	bf00      	nop
 80068ba:	3718      	adds	r7, #24
 80068bc:	46bd      	mov	sp, r7
 80068be:	bc90      	pop	{r4, r7}
 80068c0:	4770      	bx	lr

080068c2 <LL_ADC_SetChannelSamplingTime>:
{
 80068c2:	b490      	push	{r4, r7}
 80068c4:	b08a      	sub	sp, #40	; 0x28
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	60f8      	str	r0, [r7, #12]
 80068ca:	60b9      	str	r1, [r7, #8]
 80068cc:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	330c      	adds	r3, #12
 80068d2:	4619      	mov	r1, r3
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80068de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	fa92 f2a2 	rbit	r2, r2
 80068e6:	613a      	str	r2, [r7, #16]
  return result;
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	fab2 f282 	clz	r2, r2
 80068ee:	b2d2      	uxtb	r2, r2
 80068f0:	40d3      	lsrs	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	440b      	add	r3, r1
 80068f6:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80068f8:	6822      	ldr	r2, [r4, #0]
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8006900:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8006904:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006906:	69f9      	ldr	r1, [r7, #28]
 8006908:	fa91 f1a1 	rbit	r1, r1
 800690c:	61b9      	str	r1, [r7, #24]
  return result;
 800690e:	69b9      	ldr	r1, [r7, #24]
 8006910:	fab1 f181 	clz	r1, r1
 8006914:	b2c9      	uxtb	r1, r1
 8006916:	40cb      	lsrs	r3, r1
 8006918:	2107      	movs	r1, #7
 800691a:	fa01 f303 	lsl.w	r3, r1, r3
 800691e:	43db      	mvns	r3, r3
 8006920:	401a      	ands	r2, r3
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8006928:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800692c:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800692e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006930:	fa91 f1a1 	rbit	r1, r1
 8006934:	6239      	str	r1, [r7, #32]
  return result;
 8006936:	6a39      	ldr	r1, [r7, #32]
 8006938:	fab1 f181 	clz	r1, r1
 800693c:	b2c9      	uxtb	r1, r1
 800693e:	40cb      	lsrs	r3, r1
 8006940:	6879      	ldr	r1, [r7, #4]
 8006942:	fa01 f303 	lsl.w	r3, r1, r3
 8006946:	4313      	orrs	r3, r2
 8006948:	6023      	str	r3, [r4, #0]
}
 800694a:	bf00      	nop
 800694c:	3728      	adds	r7, #40	; 0x28
 800694e:	46bd      	mov	sp, r7
 8006950:	bc90      	pop	{r4, r7}
 8006952:	4770      	bx	lr

08006954 <LL_ADC_INJ_StartConversionExtTrig>:
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	689a      	ldr	r2, [r3, #8]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	431a      	orrs	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	609a      	str	r2, [r3, #8]
}
 800696a:	bf00      	nop
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <LL_ADC_DisableIT_EOCS>:
  * @rmtoll CR1      EOCIE          LL_ADC_DisableIT_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
 8006976:	b480      	push	{r7}
 8006978:	b083      	sub	sp, #12
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f023 0220 	bic.w	r2, r3, #32
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	605a      	str	r2, [r3, #4]
}
 800698a:	bf00      	nop
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <LL_ADC_DisableIT_JEOS>:
  * @rmtoll CR1      JEOCIE         LL_ADC_EnableIT_JEOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOS(ADC_TypeDef *ADCx)
{
 8006996:	b480      	push	{r7}
 8006998:	b083      	sub	sp, #12
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	605a      	str	r2, [r3, #4]
}
 80069aa:	bf00      	nop
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
	...

080069b8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80069c0:	4b08      	ldr	r3, [pc, #32]	; (80069e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80069c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069c4:	4907      	ldr	r1, [pc, #28]	; (80069e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80069cc:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80069ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4013      	ands	r3, r2
 80069d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80069d6:	68fb      	ldr	r3, [r7, #12]
}
 80069d8:	bf00      	nop
 80069da:	3714      	adds	r7, #20
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	40023800 	.word	0x40023800

080069e8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80069f0:	4b08      	ldr	r3, [pc, #32]	; (8006a14 <LL_APB2_GRP1_EnableClock+0x2c>)
 80069f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069f4:	4907      	ldr	r1, [pc, #28]	; (8006a14 <LL_APB2_GRP1_EnableClock+0x2c>)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80069fc:	4b05      	ldr	r3, [pc, #20]	; (8006a14 <LL_APB2_GRP1_EnableClock+0x2c>)
 80069fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4013      	ands	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006a06:	68fb      	ldr	r3, [r7, #12]
}
 8006a08:	bf00      	nop
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr
 8006a14:	40023800 	.word	0x40023800

08006a18 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b096      	sub	sp, #88	; 0x58
 8006a1c:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8006a1e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006a22:	2200      	movs	r2, #0
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	605a      	str	r2, [r3, #4]
 8006a28:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8006a2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006a2e:	2200      	movs	r2, #0
 8006a30:	601a      	str	r2, [r3, #0]
 8006a32:	605a      	str	r2, [r3, #4]
 8006a34:	609a      	str	r2, [r3, #8]
 8006a36:	60da      	str	r2, [r3, #12]
 8006a38:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8006a3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a3e:	2200      	movs	r2, #0
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	605a      	str	r2, [r3, #4]
 8006a44:	609a      	str	r2, [r3, #8]
 8006a46:	60da      	str	r2, [r3, #12]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 8006a48:	f107 0318 	add.w	r3, r7, #24
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	601a      	str	r2, [r3, #0]
 8006a50:	605a      	str	r2, [r3, #4]
 8006a52:	609a      	str	r2, [r3, #8]
 8006a54:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a56:	463b      	mov	r3, r7
 8006a58:	2200      	movs	r2, #0
 8006a5a:	601a      	str	r2, [r3, #0]
 8006a5c:	605a      	str	r2, [r3, #4]
 8006a5e:	609a      	str	r2, [r3, #8]
 8006a60:	60da      	str	r2, [r3, #12]
 8006a62:	611a      	str	r2, [r3, #16]
 8006a64:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8006a66:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006a6a:	f7ff ffbd 	bl	80069e8 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8006a6e:	2004      	movs	r0, #4
 8006a70:	f7ff ffa2 	bl	80069b8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8006a74:	2001      	movs	r0, #1
 8006a76:	f7ff ff9f 	bl	80069b8 <LL_AHB1_GRP1_EnableClock>
  PC1   ------> ADC1_IN11
  PC2   ------> ADC1_IN12
  PA0-WKUP   ------> ADC1_IN0
  PA1   ------> ADC1_IN1 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 8006a7a:	2307      	movs	r3, #7
 8006a7c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006a82:	2300      	movs	r3, #0
 8006a84:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a86:	463b      	mov	r3, r7
 8006a88:	4619      	mov	r1, r3
 8006a8a:	4869      	ldr	r0, [pc, #420]	; (8006c30 <MX_ADC1_Init+0x218>)
 8006a8c:	f7fc f9e7 	bl	8002e5e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8006a90:	2303      	movs	r3, #3
 8006a92:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8006a94:	2303      	movs	r3, #3
 8006a96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a9c:	463b      	mov	r3, r7
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	4864      	ldr	r0, [pc, #400]	; (8006c34 <MX_ADC1_Init+0x21c>)
 8006aa2:	f7fc f9dc 	bl	8002e5e <LL_GPIO_Init>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8006aa6:	f7ff fddf 	bl	8006668 <__NVIC_GetPriorityGrouping>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2200      	movs	r2, #0
 8006aae:	2102      	movs	r1, #2
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7ff fe2f 	bl	8006714 <NVIC_EncodePriority>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	4619      	mov	r1, r3
 8006aba:	2012      	movs	r0, #18
 8006abc:	f7ff fe00 	bl	80066c0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 8006ac0:	2012      	movs	r0, #18
 8006ac2:	f7ff fddf 	bl	8006684 <__NVIC_EnableIRQ>

  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8006aca:	2300      	movs	r3, #0
 8006acc:	653b      	str	r3, [r7, #80]	; 0x50
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8006ace:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ad2:	657b      	str	r3, [r7, #84]	; 0x54
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8006ad4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006ad8:	4619      	mov	r1, r3
 8006ada:	4857      	ldr	r0, [pc, #348]	; (8006c38 <MX_ADC1_Init+0x220>)
 8006adc:	f7fb fef2 	bl	80028c4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8006ae4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8006aea:	2300      	movs	r3, #0
 8006aec:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8006aee:	2300      	movs	r3, #0
 8006af0:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8006af2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006af6:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8006af8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006afc:	4619      	mov	r1, r3
 8006afe:	484e      	ldr	r0, [pc, #312]	; (8006c38 <MX_ADC1_Init+0x220>)
 8006b00:	f7fb ff0c 	bl	800291c <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8006b04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b08:	484b      	ldr	r0, [pc, #300]	; (8006c38 <MX_ADC1_Init+0x220>)
 8006b0a:	f7ff fe69 	bl	80067e0 <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC1);
 8006b0e:	484a      	ldr	r0, [pc, #296]	; (8006c38 <MX_ADC1_Init+0x220>)
 8006b10:	f7ff ff31 	bl	8006976 <LL_ADC_DisableIT_EOCS>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8006b14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b18:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8006b1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b22:	4619      	mov	r1, r3
 8006b24:	4845      	ldr	r0, [pc, #276]	; (8006c3c <MX_ADC1_Init+0x224>)
 8006b26:	f7fb fe85 	bl	8002834 <LL_ADC_CommonInit>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8006b2a:	4a45      	ldr	r2, [pc, #276]	; (8006c40 <MX_ADC1_Init+0x228>)
 8006b2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b30:	4841      	ldr	r0, [pc, #260]	; (8006c38 <MX_ADC1_Init+0x220>)
 8006b32:	f7ff fe22 	bl	800677a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_28CYCLES);
 8006b36:	2202      	movs	r2, #2
 8006b38:	4941      	ldr	r1, [pc, #260]	; (8006c40 <MX_ADC1_Init+0x228>)
 8006b3a:	483f      	ldr	r0, [pc, #252]	; (8006c38 <MX_ADC1_Init+0x220>)
 8006b3c:	f7ff fec1 	bl	80068c2 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_12);
 8006b40:	4a40      	ldr	r2, [pc, #256]	; (8006c44 <MX_ADC1_Init+0x22c>)
 8006b42:	f240 2105 	movw	r1, #517	; 0x205
 8006b46:	483c      	ldr	r0, [pc, #240]	; (8006c38 <MX_ADC1_Init+0x220>)
 8006b48:	f7ff fe17 	bl	800677a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_28CYCLES);
 8006b4c:	2202      	movs	r2, #2
 8006b4e:	493d      	ldr	r1, [pc, #244]	; (8006c44 <MX_ADC1_Init+0x22c>)
 8006b50:	4839      	ldr	r0, [pc, #228]	; (8006c38 <MX_ADC1_Init+0x220>)
 8006b52:	f7ff feb6 	bl	80068c2 <LL_ADC_SetChannelSamplingTime>
  /** Configure Injected Channel 
  */
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8006b56:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006b5a:	61bb      	str	r3, [r7, #24]
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 8006b5c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006b60:	61fb      	str	r3, [r7, #28]
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_1RANK;
 8006b62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b66:	623b      	str	r3, [r7, #32]
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8006b6c:	f107 0318 	add.w	r3, r7, #24
 8006b70:	4619      	mov	r1, r3
 8006b72:	4831      	ldr	r0, [pc, #196]	; (8006c38 <MX_ADC1_Init+0x220>)
 8006b74:	f7fb ff1a 	bl	80029ac <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 8006b78:	482f      	ldr	r0, [pc, #188]	; (8006c38 <MX_ADC1_Init+0x220>)
 8006b7a:	f7ff ff0c 	bl	8006996 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_0);
 8006b7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b82:	2101      	movs	r1, #1
 8006b84:	482c      	ldr	r0, [pc, #176]	; (8006c38 <MX_ADC1_Init+0x220>)
 8006b86:	f7ff fe3e 	bl	8006806 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006b90:	4829      	ldr	r0, [pc, #164]	; (8006c38 <MX_ADC1_Init+0x220>)
 8006b92:	f7ff fe96 	bl	80068c2 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_1, 0);
 8006b96:	2200      	movs	r2, #0
 8006b98:	2101      	movs	r1, #1
 8006b9a:	4827      	ldr	r0, [pc, #156]	; (8006c38 <MX_ADC1_Init+0x220>)
 8006b9c:	f7ff fe69 	bl	8006872 <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8006ba0:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8006ba4:	4824      	ldr	r0, [pc, #144]	; (8006c38 <MX_ADC1_Init+0x220>)
 8006ba6:	f7ff fed5 	bl	8006954 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8006baa:	f107 0318 	add.w	r3, r7, #24
 8006bae:	4619      	mov	r1, r3
 8006bb0:	4821      	ldr	r0, [pc, #132]	; (8006c38 <MX_ADC1_Init+0x220>)
 8006bb2:	f7fb fefb 	bl	80029ac <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 8006bb6:	4820      	ldr	r0, [pc, #128]	; (8006c38 <MX_ADC1_Init+0x220>)
 8006bb8:	f7ff feed 	bl	8006996 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_11);
 8006bbc:	4a22      	ldr	r2, [pc, #136]	; (8006c48 <MX_ADC1_Init+0x230>)
 8006bbe:	f241 1102 	movw	r1, #4354	; 0x1102
 8006bc2:	481d      	ldr	r0, [pc, #116]	; (8006c38 <MX_ADC1_Init+0x220>)
 8006bc4:	f7ff fe1f 	bl	8006806 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 8006bc8:	2200      	movs	r2, #0
 8006bca:	491f      	ldr	r1, [pc, #124]	; (8006c48 <MX_ADC1_Init+0x230>)
 8006bcc:	481a      	ldr	r0, [pc, #104]	; (8006c38 <MX_ADC1_Init+0x220>)
 8006bce:	f7ff fe78 	bl	80068c2 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_2, 0);
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f241 1102 	movw	r1, #4354	; 0x1102
 8006bd8:	4817      	ldr	r0, [pc, #92]	; (8006c38 <MX_ADC1_Init+0x220>)
 8006bda:	f7ff fe4a 	bl	8006872 <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8006bde:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8006be2:	4815      	ldr	r0, [pc, #84]	; (8006c38 <MX_ADC1_Init+0x220>)
 8006be4:	f7ff feb6 	bl	8006954 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8006be8:	f107 0318 	add.w	r3, r7, #24
 8006bec:	4619      	mov	r1, r3
 8006bee:	4812      	ldr	r0, [pc, #72]	; (8006c38 <MX_ADC1_Init+0x220>)
 8006bf0:	f7fb fedc 	bl	80029ac <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 8006bf4:	4810      	ldr	r0, [pc, #64]	; (8006c38 <MX_ADC1_Init+0x220>)
 8006bf6:	f7ff fece 	bl	8006996 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_10);
 8006bfa:	220a      	movs	r2, #10
 8006bfc:	f242 2103 	movw	r1, #8707	; 0x2203
 8006c00:	480d      	ldr	r0, [pc, #52]	; (8006c38 <MX_ADC1_Init+0x220>)
 8006c02:	f7ff fe00 	bl	8006806 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_3CYCLES);
 8006c06:	2200      	movs	r2, #0
 8006c08:	210a      	movs	r1, #10
 8006c0a:	480b      	ldr	r0, [pc, #44]	; (8006c38 <MX_ADC1_Init+0x220>)
 8006c0c:	f7ff fe59 	bl	80068c2 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_3, 0);
 8006c10:	2200      	movs	r2, #0
 8006c12:	f242 2103 	movw	r1, #8707	; 0x2203
 8006c16:	4808      	ldr	r0, [pc, #32]	; (8006c38 <MX_ADC1_Init+0x220>)
 8006c18:	f7ff fe2b 	bl	8006872 <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8006c1c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8006c20:	4805      	ldr	r0, [pc, #20]	; (8006c38 <MX_ADC1_Init+0x220>)
 8006c22:	f7ff fe97 	bl	8006954 <LL_ADC_INJ_StartConversionExtTrig>

}
 8006c26:	bf00      	nop
 8006c28:	3758      	adds	r7, #88	; 0x58
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	40020800 	.word	0x40020800
 8006c34:	40020000 	.word	0x40020000
 8006c38:	40012000 	.word	0x40012000
 8006c3c:	40012300 	.word	0x40012300
 8006c40:	02300001 	.word	0x02300001
 8006c44:	0060000c 	.word	0x0060000c
 8006c48:	0030000b 	.word	0x0030000b

08006c4c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b092      	sub	sp, #72	; 0x48
 8006c50:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8006c52:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006c56:	2200      	movs	r2, #0
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	605a      	str	r2, [r3, #4]
 8006c5c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8006c5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c62:	2200      	movs	r2, #0
 8006c64:	601a      	str	r2, [r3, #0]
 8006c66:	605a      	str	r2, [r3, #4]
 8006c68:	609a      	str	r2, [r3, #8]
 8006c6a:	60da      	str	r2, [r3, #12]
 8006c6c:	611a      	str	r2, [r3, #16]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 8006c6e:	f107 0318 	add.w	r3, r7, #24
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]
 8006c76:	605a      	str	r2, [r3, #4]
 8006c78:	609a      	str	r2, [r3, #8]
 8006c7a:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c7c:	463b      	mov	r3, r7
 8006c7e:	2200      	movs	r2, #0
 8006c80:	601a      	str	r2, [r3, #0]
 8006c82:	605a      	str	r2, [r3, #4]
 8006c84:	609a      	str	r2, [r3, #8]
 8006c86:	60da      	str	r2, [r3, #12]
 8006c88:	611a      	str	r2, [r3, #16]
 8006c8a:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC2);
 8006c8c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006c90:	f7ff feaa 	bl	80069e8 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8006c94:	2004      	movs	r0, #4
 8006c96:	f7ff fe8f 	bl	80069b8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8006c9a:	2001      	movs	r0, #1
 8006c9c:	f7ff fe8c 	bl	80069b8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8006ca0:	2002      	movs	r0, #2
 8006ca2:	f7ff fe89 	bl	80069b8 <LL_AHB1_GRP1_EnableClock>
  PC0   ------> ADC2_IN10
  PC1   ------> ADC2_IN11
  PA0-WKUP   ------> ADC2_IN0
  PB1   ------> ADC2_IN9 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8006caa:	2303      	movs	r3, #3
 8006cac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006cb2:	463b      	mov	r3, r7
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	4863      	ldr	r0, [pc, #396]	; (8006e44 <MX_ADC2_Init+0x1f8>)
 8006cb8:	f7fc f8d1 	bl	8002e5e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cc8:	463b      	mov	r3, r7
 8006cca:	4619      	mov	r1, r3
 8006ccc:	485e      	ldr	r0, [pc, #376]	; (8006e48 <MX_ADC2_Init+0x1fc>)
 8006cce:	f7fc f8c6 	bl	8002e5e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8006cd2:	2302      	movs	r3, #2
 8006cd4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cde:	463b      	mov	r3, r7
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	485a      	ldr	r0, [pc, #360]	; (8006e4c <MX_ADC2_Init+0x200>)
 8006ce4:	f7fc f8bb 	bl	8002e5e <LL_GPIO_Init>

  /* ADC2 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8006ce8:	f7ff fcbe 	bl	8006668 <__NVIC_GetPriorityGrouping>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2200      	movs	r2, #0
 8006cf0:	2102      	movs	r1, #2
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7ff fd0e 	bl	8006714 <NVIC_EncodePriority>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	2012      	movs	r0, #18
 8006cfe:	f7ff fcdf 	bl	80066c0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 8006d02:	2012      	movs	r0, #18
 8006d04:	f7ff fcbe 	bl	8006684 <__NVIC_EnableIRQ>

  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8006d10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d14:	647b      	str	r3, [r7, #68]	; 0x44
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8006d16:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	484c      	ldr	r0, [pc, #304]	; (8006e50 <MX_ADC2_Init+0x204>)
 8006d1e:	f7fb fdd1 	bl	80028c4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8006d22:	2300      	movs	r3, #0
 8006d24:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8006d26:	2300      	movs	r3, #0
 8006d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8006d32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d36:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8006d38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	4844      	ldr	r0, [pc, #272]	; (8006e50 <MX_ADC2_Init+0x204>)
 8006d40:	f7fb fdec 	bl	800291c <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC2, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8006d44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006d48:	4841      	ldr	r0, [pc, #260]	; (8006e50 <MX_ADC2_Init+0x204>)
 8006d4a:	f7ff fd49 	bl	80067e0 <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC2);
 8006d4e:	4840      	ldr	r0, [pc, #256]	; (8006e50 <MX_ADC2_Init+0x204>)
 8006d50:	f7ff fe11 	bl	8006976 <LL_ADC_DisableIT_EOCS>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_9);
 8006d54:	4a3f      	ldr	r2, [pc, #252]	; (8006e54 <MX_ADC2_Init+0x208>)
 8006d56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d5a:	483d      	ldr	r0, [pc, #244]	; (8006e50 <MX_ADC2_Init+0x204>)
 8006d5c:	f7ff fd0d 	bl	800677a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_3CYCLES);
 8006d60:	2200      	movs	r2, #0
 8006d62:	493c      	ldr	r1, [pc, #240]	; (8006e54 <MX_ADC2_Init+0x208>)
 8006d64:	483a      	ldr	r0, [pc, #232]	; (8006e50 <MX_ADC2_Init+0x204>)
 8006d66:	f7ff fdac 	bl	80068c2 <LL_ADC_SetChannelSamplingTime>
  /** Configure Injected Channel 
  */
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8006d6a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006d6e:	61bb      	str	r3, [r7, #24]
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 8006d70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006d74:	61fb      	str	r3, [r7, #28]
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_1RANK;
 8006d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d7a:	623b      	str	r3, [r7, #32]
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 8006d80:	f107 0318 	add.w	r3, r7, #24
 8006d84:	4619      	mov	r1, r3
 8006d86:	4832      	ldr	r0, [pc, #200]	; (8006e50 <MX_ADC2_Init+0x204>)
 8006d88:	f7fb fe10 	bl	80029ac <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 8006d8c:	4830      	ldr	r0, [pc, #192]	; (8006e50 <MX_ADC2_Init+0x204>)
 8006d8e:	f7ff fe02 	bl	8006996 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_0);
 8006d92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d96:	2101      	movs	r1, #1
 8006d98:	482d      	ldr	r0, [pc, #180]	; (8006e50 <MX_ADC2_Init+0x204>)
 8006d9a:	f7ff fd34 	bl	8006806 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006da4:	482a      	ldr	r0, [pc, #168]	; (8006e50 <MX_ADC2_Init+0x204>)
 8006da6:	f7ff fd8c 	bl	80068c2 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_1, 0);
 8006daa:	2200      	movs	r2, #0
 8006dac:	2101      	movs	r1, #1
 8006dae:	4828      	ldr	r0, [pc, #160]	; (8006e50 <MX_ADC2_Init+0x204>)
 8006db0:	f7ff fd5f 	bl	8006872 <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 8006db4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8006db8:	4825      	ldr	r0, [pc, #148]	; (8006e50 <MX_ADC2_Init+0x204>)
 8006dba:	f7ff fdcb 	bl	8006954 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 8006dbe:	f107 0318 	add.w	r3, r7, #24
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	4822      	ldr	r0, [pc, #136]	; (8006e50 <MX_ADC2_Init+0x204>)
 8006dc6:	f7fb fdf1 	bl	80029ac <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 8006dca:	4821      	ldr	r0, [pc, #132]	; (8006e50 <MX_ADC2_Init+0x204>)
 8006dcc:	f7ff fde3 	bl	8006996 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_11);
 8006dd0:	4a21      	ldr	r2, [pc, #132]	; (8006e58 <MX_ADC2_Init+0x20c>)
 8006dd2:	f241 1102 	movw	r1, #4354	; 0x1102
 8006dd6:	481e      	ldr	r0, [pc, #120]	; (8006e50 <MX_ADC2_Init+0x204>)
 8006dd8:	f7ff fd15 	bl	8006806 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 8006ddc:	2200      	movs	r2, #0
 8006dde:	491e      	ldr	r1, [pc, #120]	; (8006e58 <MX_ADC2_Init+0x20c>)
 8006de0:	481b      	ldr	r0, [pc, #108]	; (8006e50 <MX_ADC2_Init+0x204>)
 8006de2:	f7ff fd6e 	bl	80068c2 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_2, 0);
 8006de6:	2200      	movs	r2, #0
 8006de8:	f241 1102 	movw	r1, #4354	; 0x1102
 8006dec:	4818      	ldr	r0, [pc, #96]	; (8006e50 <MX_ADC2_Init+0x204>)
 8006dee:	f7ff fd40 	bl	8006872 <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 8006df2:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8006df6:	4816      	ldr	r0, [pc, #88]	; (8006e50 <MX_ADC2_Init+0x204>)
 8006df8:	f7ff fdac 	bl	8006954 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 8006dfc:	f107 0318 	add.w	r3, r7, #24
 8006e00:	4619      	mov	r1, r3
 8006e02:	4813      	ldr	r0, [pc, #76]	; (8006e50 <MX_ADC2_Init+0x204>)
 8006e04:	f7fb fdd2 	bl	80029ac <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 8006e08:	4811      	ldr	r0, [pc, #68]	; (8006e50 <MX_ADC2_Init+0x204>)
 8006e0a:	f7ff fdc4 	bl	8006996 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_10);
 8006e0e:	220a      	movs	r2, #10
 8006e10:	f242 2103 	movw	r1, #8707	; 0x2203
 8006e14:	480e      	ldr	r0, [pc, #56]	; (8006e50 <MX_ADC2_Init+0x204>)
 8006e16:	f7ff fcf6 	bl	8006806 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_3CYCLES);
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	210a      	movs	r1, #10
 8006e1e:	480c      	ldr	r0, [pc, #48]	; (8006e50 <MX_ADC2_Init+0x204>)
 8006e20:	f7ff fd4f 	bl	80068c2 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_3, 0);
 8006e24:	2200      	movs	r2, #0
 8006e26:	f242 2103 	movw	r1, #8707	; 0x2203
 8006e2a:	4809      	ldr	r0, [pc, #36]	; (8006e50 <MX_ADC2_Init+0x204>)
 8006e2c:	f7ff fd21 	bl	8006872 <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 8006e30:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8006e34:	4806      	ldr	r0, [pc, #24]	; (8006e50 <MX_ADC2_Init+0x204>)
 8006e36:	f7ff fd8d 	bl	8006954 <LL_ADC_INJ_StartConversionExtTrig>

}
 8006e3a:	bf00      	nop
 8006e3c:	3748      	adds	r7, #72	; 0x48
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	40020800 	.word	0x40020800
 8006e48:	40020000 	.word	0x40020000
 8006e4c:	40020400 	.word	0x40020400
 8006e50:	40012100 	.word	0x40012100
 8006e54:	03b00009 	.word	0x03b00009
 8006e58:	0030000b 	.word	0x0030000b

08006e5c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8006e62:	463b      	mov	r3, r7
 8006e64:	2200      	movs	r2, #0
 8006e66:	601a      	str	r2, [r3, #0]
 8006e68:	605a      	str	r2, [r3, #4]
 8006e6a:	609a      	str	r2, [r3, #8]
 8006e6c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8006e6e:	4b21      	ldr	r3, [pc, #132]	; (8006ef4 <MX_ADC3_Init+0x98>)
 8006e70:	4a21      	ldr	r2, [pc, #132]	; (8006ef8 <MX_ADC3_Init+0x9c>)
 8006e72:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006e74:	4b1f      	ldr	r3, [pc, #124]	; (8006ef4 <MX_ADC3_Init+0x98>)
 8006e76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006e7a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8006e7c:	4b1d      	ldr	r3, [pc, #116]	; (8006ef4 <MX_ADC3_Init+0x98>)
 8006e7e:	2200      	movs	r2, #0
 8006e80:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8006e82:	4b1c      	ldr	r3, [pc, #112]	; (8006ef4 <MX_ADC3_Init+0x98>)
 8006e84:	2201      	movs	r2, #1
 8006e86:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8006e88:	4b1a      	ldr	r3, [pc, #104]	; (8006ef4 <MX_ADC3_Init+0x98>)
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8006e8e:	4b19      	ldr	r3, [pc, #100]	; (8006ef4 <MX_ADC3_Init+0x98>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006e96:	4b17      	ldr	r3, [pc, #92]	; (8006ef4 <MX_ADC3_Init+0x98>)
 8006e98:	2200      	movs	r2, #0
 8006e9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006e9c:	4b15      	ldr	r3, [pc, #84]	; (8006ef4 <MX_ADC3_Init+0x98>)
 8006e9e:	4a17      	ldr	r2, [pc, #92]	; (8006efc <MX_ADC3_Init+0xa0>)
 8006ea0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006ea2:	4b14      	ldr	r3, [pc, #80]	; (8006ef4 <MX_ADC3_Init+0x98>)
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8006ea8:	4b12      	ldr	r3, [pc, #72]	; (8006ef4 <MX_ADC3_Init+0x98>)
 8006eaa:	2201      	movs	r2, #1
 8006eac:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8006eae:	4b11      	ldr	r3, [pc, #68]	; (8006ef4 <MX_ADC3_Init+0x98>)
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006eb6:	4b0f      	ldr	r3, [pc, #60]	; (8006ef4 <MX_ADC3_Init+0x98>)
 8006eb8:	2201      	movs	r2, #1
 8006eba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8006ebc:	480d      	ldr	r0, [pc, #52]	; (8006ef4 <MX_ADC3_Init+0x98>)
 8006ebe:	f7fa f8d5 	bl	800106c <HAL_ADC_Init>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d001      	beq.n	8006ecc <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8006ec8:	f000 faa8 	bl	800741c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8006ecc:	230d      	movs	r3, #13
 8006ece:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8006ed8:	463b      	mov	r3, r7
 8006eda:	4619      	mov	r1, r3
 8006edc:	4805      	ldr	r0, [pc, #20]	; (8006ef4 <MX_ADC3_Init+0x98>)
 8006ede:	f7fa fa67 	bl	80013b0 <HAL_ADC_ConfigChannel>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d001      	beq.n	8006eec <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8006ee8:	f000 fa98 	bl	800741c <Error_Handler>
  }

}
 8006eec:	bf00      	nop
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	200031cc 	.word	0x200031cc
 8006ef8:	40012200 	.word	0x40012200
 8006efc:	0f000001 	.word	0x0f000001

08006f00 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b08a      	sub	sp, #40	; 0x28
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f08:	f107 0314 	add.w	r3, r7, #20
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	601a      	str	r2, [r3, #0]
 8006f10:	605a      	str	r2, [r3, #4]
 8006f12:	609a      	str	r2, [r3, #8]
 8006f14:	60da      	str	r2, [r3, #12]
 8006f16:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a1b      	ldr	r2, [pc, #108]	; (8006f8c <HAL_ADC_MspInit+0x8c>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d12f      	bne.n	8006f82 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8006f22:	2300      	movs	r3, #0
 8006f24:	613b      	str	r3, [r7, #16]
 8006f26:	4b1a      	ldr	r3, [pc, #104]	; (8006f90 <HAL_ADC_MspInit+0x90>)
 8006f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f2a:	4a19      	ldr	r2, [pc, #100]	; (8006f90 <HAL_ADC_MspInit+0x90>)
 8006f2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f30:	6453      	str	r3, [r2, #68]	; 0x44
 8006f32:	4b17      	ldr	r3, [pc, #92]	; (8006f90 <HAL_ADC_MspInit+0x90>)
 8006f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f3a:	613b      	str	r3, [r7, #16]
 8006f3c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f3e:	2300      	movs	r3, #0
 8006f40:	60fb      	str	r3, [r7, #12]
 8006f42:	4b13      	ldr	r3, [pc, #76]	; (8006f90 <HAL_ADC_MspInit+0x90>)
 8006f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f46:	4a12      	ldr	r2, [pc, #72]	; (8006f90 <HAL_ADC_MspInit+0x90>)
 8006f48:	f043 0304 	orr.w	r3, r3, #4
 8006f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f4e:	4b10      	ldr	r3, [pc, #64]	; (8006f90 <HAL_ADC_MspInit+0x90>)
 8006f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f52:	f003 0304 	and.w	r3, r3, #4
 8006f56:	60fb      	str	r3, [r7, #12]
 8006f58:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration    
    PC3     ------> ADC3_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006f5a:	2308      	movs	r3, #8
 8006f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f62:	2300      	movs	r3, #0
 8006f64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f66:	f107 0314 	add.w	r3, r7, #20
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	4809      	ldr	r0, [pc, #36]	; (8006f94 <HAL_ADC_MspInit+0x94>)
 8006f6e:	f7fa fd69 	bl	8001a44 <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8006f72:	2200      	movs	r2, #0
 8006f74:	2102      	movs	r1, #2
 8006f76:	2012      	movs	r0, #18
 8006f78:	f7fa fd2d 	bl	80019d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006f7c:	2012      	movs	r0, #18
 8006f7e:	f7fa fd46 	bl	8001a0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8006f82:	bf00      	nop
 8006f84:	3728      	adds	r7, #40	; 0x28
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	40012200 	.word	0x40012200
 8006f90:	40023800 	.word	0x40023800
 8006f94:	40020800 	.word	0x40020800

08006f98 <__NVIC_GetPriorityGrouping>:
{
 8006f98:	b480      	push	{r7}
 8006f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f9c:	4b04      	ldr	r3, [pc, #16]	; (8006fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	0a1b      	lsrs	r3, r3, #8
 8006fa2:	f003 0307 	and.w	r3, r3, #7
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr
 8006fb0:	e000ed00 	.word	0xe000ed00

08006fb4 <__NVIC_EnableIRQ>:
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	4603      	mov	r3, r0
 8006fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	db0b      	blt.n	8006fde <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006fc6:	79fb      	ldrb	r3, [r7, #7]
 8006fc8:	f003 021f 	and.w	r2, r3, #31
 8006fcc:	4907      	ldr	r1, [pc, #28]	; (8006fec <__NVIC_EnableIRQ+0x38>)
 8006fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fd2:	095b      	lsrs	r3, r3, #5
 8006fd4:	2001      	movs	r0, #1
 8006fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8006fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006fde:	bf00      	nop
 8006fe0:	370c      	adds	r7, #12
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	e000e100 	.word	0xe000e100

08006ff0 <__NVIC_SetPriority>:
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	6039      	str	r1, [r7, #0]
 8006ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007000:	2b00      	cmp	r3, #0
 8007002:	db0a      	blt.n	800701a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	b2da      	uxtb	r2, r3
 8007008:	490c      	ldr	r1, [pc, #48]	; (800703c <__NVIC_SetPriority+0x4c>)
 800700a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800700e:	0112      	lsls	r2, r2, #4
 8007010:	b2d2      	uxtb	r2, r2
 8007012:	440b      	add	r3, r1
 8007014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007018:	e00a      	b.n	8007030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	b2da      	uxtb	r2, r3
 800701e:	4908      	ldr	r1, [pc, #32]	; (8007040 <__NVIC_SetPriority+0x50>)
 8007020:	79fb      	ldrb	r3, [r7, #7]
 8007022:	f003 030f 	and.w	r3, r3, #15
 8007026:	3b04      	subs	r3, #4
 8007028:	0112      	lsls	r2, r2, #4
 800702a:	b2d2      	uxtb	r2, r2
 800702c:	440b      	add	r3, r1
 800702e:	761a      	strb	r2, [r3, #24]
}
 8007030:	bf00      	nop
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr
 800703c:	e000e100 	.word	0xe000e100
 8007040:	e000ed00 	.word	0xe000ed00

08007044 <NVIC_EncodePriority>:
{
 8007044:	b480      	push	{r7}
 8007046:	b089      	sub	sp, #36	; 0x24
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f003 0307 	and.w	r3, r3, #7
 8007056:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	f1c3 0307 	rsb	r3, r3, #7
 800705e:	2b04      	cmp	r3, #4
 8007060:	bf28      	it	cs
 8007062:	2304      	movcs	r3, #4
 8007064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	3304      	adds	r3, #4
 800706a:	2b06      	cmp	r3, #6
 800706c:	d902      	bls.n	8007074 <NVIC_EncodePriority+0x30>
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	3b03      	subs	r3, #3
 8007072:	e000      	b.n	8007076 <NVIC_EncodePriority+0x32>
 8007074:	2300      	movs	r3, #0
 8007076:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007078:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	fa02 f303 	lsl.w	r3, r2, r3
 8007082:	43da      	mvns	r2, r3
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	401a      	ands	r2, r3
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800708c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	fa01 f303 	lsl.w	r3, r1, r3
 8007096:	43d9      	mvns	r1, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800709c:	4313      	orrs	r3, r2
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3724      	adds	r7, #36	; 0x24
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
	...

080070ac <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80070b6:	4a13      	ldr	r2, [pc, #76]	; (8007104 <LL_SYSCFG_SetEXTISource+0x58>)
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	3302      	adds	r3, #2
 80070be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	0c1b      	lsrs	r3, r3, #16
 80070c6:	43db      	mvns	r3, r3
 80070c8:	ea02 0103 	and.w	r1, r2, r3
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	0c1b      	lsrs	r3, r3, #16
 80070d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	fa93 f3a3 	rbit	r3, r3
 80070d8:	60bb      	str	r3, [r7, #8]
  return result;
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	fab3 f383 	clz	r3, r3
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	461a      	mov	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	fa03 f202 	lsl.w	r2, r3, r2
 80070ea:	4806      	ldr	r0, [pc, #24]	; (8007104 <LL_SYSCFG_SetEXTISource+0x58>)
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	430a      	orrs	r2, r1
 80070f2:	3302      	adds	r3, #2
 80070f4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80070f8:	bf00      	nop
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	40013800 	.word	0x40013800

08007108 <LL_GPIO_SetPinMode>:
{
 8007108:	b480      	push	{r7}
 800710a:	b089      	sub	sp, #36	; 0x24
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	fa93 f3a3 	rbit	r3, r3
 8007122:	613b      	str	r3, [r7, #16]
  return result;
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	fab3 f383 	clz	r3, r3
 800712a:	b2db      	uxtb	r3, r3
 800712c:	005b      	lsls	r3, r3, #1
 800712e:	2103      	movs	r1, #3
 8007130:	fa01 f303 	lsl.w	r3, r1, r3
 8007134:	43db      	mvns	r3, r3
 8007136:	401a      	ands	r2, r3
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	fa93 f3a3 	rbit	r3, r3
 8007142:	61bb      	str	r3, [r7, #24]
  return result;
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	fab3 f383 	clz	r3, r3
 800714a:	b2db      	uxtb	r3, r3
 800714c:	005b      	lsls	r3, r3, #1
 800714e:	6879      	ldr	r1, [r7, #4]
 8007150:	fa01 f303 	lsl.w	r3, r1, r3
 8007154:	431a      	orrs	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	601a      	str	r2, [r3, #0]
}
 800715a:	bf00      	nop
 800715c:	3724      	adds	r7, #36	; 0x24
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <LL_GPIO_SetPinPull>:
{
 8007166:	b480      	push	{r7}
 8007168:	b089      	sub	sp, #36	; 0x24
 800716a:	af00      	add	r7, sp, #0
 800716c:	60f8      	str	r0, [r7, #12]
 800716e:	60b9      	str	r1, [r7, #8]
 8007170:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	68da      	ldr	r2, [r3, #12]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	fa93 f3a3 	rbit	r3, r3
 8007180:	613b      	str	r3, [r7, #16]
  return result;
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	fab3 f383 	clz	r3, r3
 8007188:	b2db      	uxtb	r3, r3
 800718a:	005b      	lsls	r3, r3, #1
 800718c:	2103      	movs	r1, #3
 800718e:	fa01 f303 	lsl.w	r3, r1, r3
 8007192:	43db      	mvns	r3, r3
 8007194:	401a      	ands	r2, r3
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	fa93 f3a3 	rbit	r3, r3
 80071a0:	61bb      	str	r3, [r7, #24]
  return result;
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	fab3 f383 	clz	r3, r3
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	005b      	lsls	r3, r3, #1
 80071ac:	6879      	ldr	r1, [r7, #4]
 80071ae:	fa01 f303 	lsl.w	r3, r1, r3
 80071b2:	431a      	orrs	r2, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	60da      	str	r2, [r3, #12]
}
 80071b8:	bf00      	nop
 80071ba:	3724      	adds	r7, #36	; 0x24
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	041a      	lsls	r2, r3, #16
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	619a      	str	r2, [r3, #24]
}
 80071d6:	bf00      	nop
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
	...

080071e4 <LL_AHB1_GRP1_EnableClock>:
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80071ec:	4b08      	ldr	r3, [pc, #32]	; (8007210 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80071ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071f0:	4907      	ldr	r1, [pc, #28]	; (8007210 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80071f8:	4b05      	ldr	r3, [pc, #20]	; (8007210 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80071fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4013      	ands	r3, r2
 8007200:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007202:	68fb      	ldr	r3, [r7, #12]
}
 8007204:	bf00      	nop
 8007206:	3714      	adds	r7, #20
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	40023800 	.word	0x40023800

08007214 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b088      	sub	sp, #32
 8007218:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800721a:	f107 0318 	add.w	r3, r7, #24
 800721e:	2200      	movs	r2, #0
 8007220:	601a      	str	r2, [r3, #0]
 8007222:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007224:	463b      	mov	r3, r7
 8007226:	2200      	movs	r2, #0
 8007228:	601a      	str	r2, [r3, #0]
 800722a:	605a      	str	r2, [r3, #4]
 800722c:	609a      	str	r2, [r3, #8]
 800722e:	60da      	str	r2, [r3, #12]
 8007230:	611a      	str	r2, [r3, #16]
 8007232:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8007234:	2004      	movs	r0, #4
 8007236:	f7ff ffd5 	bl	80071e4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800723a:	2080      	movs	r0, #128	; 0x80
 800723c:	f7ff ffd2 	bl	80071e4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8007240:	2001      	movs	r0, #1
 8007242:	f7ff ffcf 	bl	80071e4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8007246:	2002      	movs	r0, #2
 8007248:	f7ff ffcc 	bl	80071e4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 800724c:	2120      	movs	r1, #32
 800724e:	482c      	ldr	r0, [pc, #176]	; (8007300 <MX_GPIO_Init+0xec>)
 8007250:	f7ff ffb8 	bl	80071c4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12);
 8007254:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8007258:	482a      	ldr	r0, [pc, #168]	; (8007304 <MX_GPIO_Init+0xf0>)
 800725a:	f7ff ffb3 	bl	80071c4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 800725e:	492a      	ldr	r1, [pc, #168]	; (8007308 <MX_GPIO_Init+0xf4>)
 8007260:	2002      	movs	r0, #2
 8007262:	f7ff ff23 	bl	80070ac <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8007266:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800726a:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800726c:	2301      	movs	r3, #1
 800726e:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007270:	2300      	movs	r3, #0
 8007272:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007274:	2302      	movs	r3, #2
 8007276:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8007278:	f107 0318 	add.w	r3, r7, #24
 800727c:	4618      	mov	r0, r3
 800727e:	f7fb fc6d 	bl	8002b5c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8007282:	2200      	movs	r2, #0
 8007284:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007288:	481e      	ldr	r0, [pc, #120]	; (8007304 <MX_GPIO_Init+0xf0>)
 800728a:	f7ff ff6c 	bl	8007166 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 800728e:	2200      	movs	r2, #0
 8007290:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007294:	481b      	ldr	r0, [pc, #108]	; (8007304 <MX_GPIO_Init+0xf0>)
 8007296:	f7ff ff37 	bl	8007108 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 800729a:	2320      	movs	r3, #32
 800729c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800729e:	2301      	movs	r3, #1
 80072a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80072a2:	2300      	movs	r3, #0
 80072a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80072a6:	2300      	movs	r3, #0
 80072a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80072aa:	2300      	movs	r3, #0
 80072ac:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80072ae:	463b      	mov	r3, r7
 80072b0:	4619      	mov	r1, r3
 80072b2:	4813      	ldr	r0, [pc, #76]	; (8007300 <MX_GPIO_Init+0xec>)
 80072b4:	f7fb fdd3 	bl	8002e5e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 80072b8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80072bc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80072be:	2301      	movs	r3, #1
 80072c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80072c2:	2300      	movs	r3, #0
 80072c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80072ca:	2300      	movs	r3, #0
 80072cc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80072ce:	463b      	mov	r3, r7
 80072d0:	4619      	mov	r1, r3
 80072d2:	480c      	ldr	r0, [pc, #48]	; (8007304 <MX_GPIO_Init+0xf0>)
 80072d4:	f7fb fdc3 	bl	8002e5e <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80072d8:	f7ff fe5e 	bl	8006f98 <__NVIC_GetPriorityGrouping>
 80072dc:	4603      	mov	r3, r0
 80072de:	2200      	movs	r2, #0
 80072e0:	2100      	movs	r1, #0
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7ff feae 	bl	8007044 <NVIC_EncodePriority>
 80072e8:	4603      	mov	r3, r0
 80072ea:	4619      	mov	r1, r3
 80072ec:	2028      	movs	r0, #40	; 0x28
 80072ee:	f7ff fe7f 	bl	8006ff0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80072f2:	2028      	movs	r0, #40	; 0x28
 80072f4:	f7ff fe5e 	bl	8006fb4 <__NVIC_EnableIRQ>

}
 80072f8:	bf00      	nop
 80072fa:	3720      	adds	r7, #32
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	40020000 	.word	0x40020000
 8007304:	40020800 	.word	0x40020800
 8007308:	00f00003 	.word	0x00f00003

0800730c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007310:	f7f9 fe3a 	bl	8000f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007314:	f000 f810 	bl	8007338 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  cppwrapper();
 8007318:	f000 fd42 	bl	8007da0 <cppwrapper>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800731c:	f7ff ff7a 	bl	8007214 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8007320:	f000 fcd8 	bl	8007cd4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8007324:	f000 fb62 	bl	80079ec <MX_TIM1_Init>
  MX_ADC1_Init();
 8007328:	f7ff fb76 	bl	8006a18 <MX_ADC1_Init>
  MX_ADC2_Init();
 800732c:	f7ff fc8e 	bl	8006c4c <MX_ADC2_Init>
  MX_ADC3_Init();
 8007330:	f7ff fd94 	bl	8006e5c <MX_ADC3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007334:	e7fe      	b.n	8007334 <main+0x28>
	...

08007338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b094      	sub	sp, #80	; 0x50
 800733c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800733e:	f107 031c 	add.w	r3, r7, #28
 8007342:	2234      	movs	r2, #52	; 0x34
 8007344:	2100      	movs	r1, #0
 8007346:	4618      	mov	r0, r3
 8007348:	f003 faa4 	bl	800a894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800734c:	f107 0308 	add.w	r3, r7, #8
 8007350:	2200      	movs	r2, #0
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	605a      	str	r2, [r3, #4]
 8007356:	609a      	str	r2, [r3, #8]
 8007358:	60da      	str	r2, [r3, #12]
 800735a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800735c:	2300      	movs	r3, #0
 800735e:	607b      	str	r3, [r7, #4]
 8007360:	4b2c      	ldr	r3, [pc, #176]	; (8007414 <SystemClock_Config+0xdc>)
 8007362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007364:	4a2b      	ldr	r2, [pc, #172]	; (8007414 <SystemClock_Config+0xdc>)
 8007366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800736a:	6413      	str	r3, [r2, #64]	; 0x40
 800736c:	4b29      	ldr	r3, [pc, #164]	; (8007414 <SystemClock_Config+0xdc>)
 800736e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007374:	607b      	str	r3, [r7, #4]
 8007376:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007378:	2300      	movs	r3, #0
 800737a:	603b      	str	r3, [r7, #0]
 800737c:	4b26      	ldr	r3, [pc, #152]	; (8007418 <SystemClock_Config+0xe0>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a25      	ldr	r2, [pc, #148]	; (8007418 <SystemClock_Config+0xe0>)
 8007382:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007386:	6013      	str	r3, [r2, #0]
 8007388:	4b23      	ldr	r3, [pc, #140]	; (8007418 <SystemClock_Config+0xe0>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007390:	603b      	str	r3, [r7, #0]
 8007392:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007394:	2301      	movs	r3, #1
 8007396:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007398:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800739c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800739e:	2302      	movs	r3, #2
 80073a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80073a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80073a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80073a8:	2304      	movs	r3, #4
 80073aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80073ac:	23b4      	movs	r3, #180	; 0xb4
 80073ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80073b0:	2302      	movs	r3, #2
 80073b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80073b4:	2302      	movs	r3, #2
 80073b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80073b8:	2302      	movs	r3, #2
 80073ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80073bc:	f107 031c 	add.w	r3, r7, #28
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7fa ffa3 	bl	800230c <HAL_RCC_OscConfig>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80073cc:	f000 f826 	bl	800741c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80073d0:	f7fa fcca 	bl	8001d68 <HAL_PWREx_EnableOverDrive>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80073da:	f000 f81f 	bl	800741c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80073de:	230f      	movs	r3, #15
 80073e0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80073e2:	2302      	movs	r3, #2
 80073e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80073e6:	2300      	movs	r3, #0
 80073e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80073ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80073ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80073f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073f4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80073f6:	f107 0308 	add.w	r3, r7, #8
 80073fa:	2105      	movs	r1, #5
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7fa fd03 	bl	8001e08 <HAL_RCC_ClockConfig>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d001      	beq.n	800740c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8007408:	f000 f808 	bl	800741c <Error_Handler>
  }
}
 800740c:	bf00      	nop
 800740e:	3750      	adds	r7, #80	; 0x50
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	40023800 	.word	0x40023800
 8007418:	40007000 	.word	0x40007000

0800741c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800741c:	b480      	push	{r7}
 800741e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007420:	bf00      	nop
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
	...

0800742c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007432:	2300      	movs	r3, #0
 8007434:	607b      	str	r3, [r7, #4]
 8007436:	4b10      	ldr	r3, [pc, #64]	; (8007478 <HAL_MspInit+0x4c>)
 8007438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800743a:	4a0f      	ldr	r2, [pc, #60]	; (8007478 <HAL_MspInit+0x4c>)
 800743c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007440:	6453      	str	r3, [r2, #68]	; 0x44
 8007442:	4b0d      	ldr	r3, [pc, #52]	; (8007478 <HAL_MspInit+0x4c>)
 8007444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800744a:	607b      	str	r3, [r7, #4]
 800744c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800744e:	2300      	movs	r3, #0
 8007450:	603b      	str	r3, [r7, #0]
 8007452:	4b09      	ldr	r3, [pc, #36]	; (8007478 <HAL_MspInit+0x4c>)
 8007454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007456:	4a08      	ldr	r2, [pc, #32]	; (8007478 <HAL_MspInit+0x4c>)
 8007458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800745c:	6413      	str	r3, [r2, #64]	; 0x40
 800745e:	4b06      	ldr	r3, [pc, #24]	; (8007478 <HAL_MspInit+0x4c>)
 8007460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007466:	603b      	str	r3, [r7, #0]
 8007468:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800746a:	2004      	movs	r0, #4
 800746c:	f7fa faa8 	bl	80019c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007470:	bf00      	nop
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	40023800 	.word	0x40023800

0800747c <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8007484:	4b07      	ldr	r3, [pc, #28]	; (80074a4 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8007486:	695a      	ldr	r2, [r3, #20]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4013      	ands	r3, r2
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	429a      	cmp	r2, r3
 8007490:	bf0c      	ite	eq
 8007492:	2301      	moveq	r3, #1
 8007494:	2300      	movne	r3, #0
 8007496:	b2db      	uxtb	r3, r3
}
 8007498:	4618      	mov	r0, r3
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr
 80074a4:	40013c00 	.word	0x40013c00

080074a8 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80074b0:	4a04      	ldr	r2, [pc, #16]	; (80074c4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6153      	str	r3, [r2, #20]
}
 80074b6:	bf00      	nop
 80074b8:	370c      	adds	r7, #12
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	40013c00 	.word	0x40013c00

080074c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80074c8:	b480      	push	{r7}
 80074ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80074cc:	bf00      	nop
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr

080074d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80074d6:	b480      	push	{r7}
 80074d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80074da:	e7fe      	b.n	80074da <HardFault_Handler+0x4>

080074dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80074dc:	b480      	push	{r7}
 80074de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80074e0:	e7fe      	b.n	80074e0 <MemManage_Handler+0x4>

080074e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80074e2:	b480      	push	{r7}
 80074e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80074e6:	e7fe      	b.n	80074e6 <BusFault_Handler+0x4>

080074e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80074e8:	b480      	push	{r7}
 80074ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80074ec:	e7fe      	b.n	80074ec <UsageFault_Handler+0x4>

080074ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80074ee:	b480      	push	{r7}
 80074f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80074f2:	bf00      	nop
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80074fc:	b480      	push	{r7}
 80074fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007500:	bf00      	nop
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800750a:	b480      	push	{r7}
 800750c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800750e:	bf00      	nop
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800751c:	f7f9 fd86 	bl	800102c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007520:	bf00      	nop
 8007522:	bd80      	pop	{r7, pc}

08007524 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8007528:	4802      	ldr	r0, [pc, #8]	; (8007534 <ADC_IRQHandler+0x10>)
 800752a:	f7f9 fde2 	bl	80010f2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800752e:	bf00      	nop
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	200031cc 	.word	0x200031cc

08007538 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8007538:	b480      	push	{r7}
 800753a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800753c:	bf00      	nop
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8007546:	b480      	push	{r7}
 8007548:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800754a:	bf00      	nop
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8007558:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800755c:	f7ff ff8e 	bl	800747c <LL_EXTI_IsActiveFlag_0_31>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d003      	beq.n	800756e <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8007566:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800756a:	f7ff ff9d 	bl	80074a8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800756e:	bf00      	nop
 8007570:	bd80      	pop	{r7, pc}

08007572 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007572:	b480      	push	{r7}
 8007574:	af00      	add	r7, sp, #0
	return 1;
 8007576:	2301      	movs	r3, #1
}
 8007578:	4618      	mov	r0, r3
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <_kill>:

int _kill(int pid, int sig)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b082      	sub	sp, #8
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800758c:	f003 f924 	bl	800a7d8 <__errno>
 8007590:	4602      	mov	r2, r0
 8007592:	2316      	movs	r3, #22
 8007594:	6013      	str	r3, [r2, #0]
	return -1;
 8007596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800759a:	4618      	mov	r0, r3
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <_exit>:

void _exit (int status)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b082      	sub	sp, #8
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80075aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f7ff ffe7 	bl	8007582 <_kill>
	while (1) {}		/* Make sure we hang here */
 80075b4:	e7fe      	b.n	80075b4 <_exit+0x12>
	...

080075b8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80075c0:	4b11      	ldr	r3, [pc, #68]	; (8007608 <_sbrk+0x50>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d102      	bne.n	80075ce <_sbrk+0x16>
		heap_end = &end;
 80075c8:	4b0f      	ldr	r3, [pc, #60]	; (8007608 <_sbrk+0x50>)
 80075ca:	4a10      	ldr	r2, [pc, #64]	; (800760c <_sbrk+0x54>)
 80075cc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80075ce:	4b0e      	ldr	r3, [pc, #56]	; (8007608 <_sbrk+0x50>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80075d4:	4b0c      	ldr	r3, [pc, #48]	; (8007608 <_sbrk+0x50>)
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4413      	add	r3, r2
 80075dc:	466a      	mov	r2, sp
 80075de:	4293      	cmp	r3, r2
 80075e0:	d907      	bls.n	80075f2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80075e2:	f003 f8f9 	bl	800a7d8 <__errno>
 80075e6:	4602      	mov	r2, r0
 80075e8:	230c      	movs	r3, #12
 80075ea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80075ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075f0:	e006      	b.n	8007600 <_sbrk+0x48>
	}

	heap_end += incr;
 80075f2:	4b05      	ldr	r3, [pc, #20]	; (8007608 <_sbrk+0x50>)
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4413      	add	r3, r2
 80075fa:	4a03      	ldr	r2, [pc, #12]	; (8007608 <_sbrk+0x50>)
 80075fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80075fe:	68fb      	ldr	r3, [r7, #12]
}
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	200001f8 	.word	0x200001f8
 800760c:	20003228 	.word	0x20003228

08007610 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007610:	b480      	push	{r7}
 8007612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007614:	4b16      	ldr	r3, [pc, #88]	; (8007670 <SystemInit+0x60>)
 8007616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800761a:	4a15      	ldr	r2, [pc, #84]	; (8007670 <SystemInit+0x60>)
 800761c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007624:	4b13      	ldr	r3, [pc, #76]	; (8007674 <SystemInit+0x64>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a12      	ldr	r2, [pc, #72]	; (8007674 <SystemInit+0x64>)
 800762a:	f043 0301 	orr.w	r3, r3, #1
 800762e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007630:	4b10      	ldr	r3, [pc, #64]	; (8007674 <SystemInit+0x64>)
 8007632:	2200      	movs	r2, #0
 8007634:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007636:	4b0f      	ldr	r3, [pc, #60]	; (8007674 <SystemInit+0x64>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a0e      	ldr	r2, [pc, #56]	; (8007674 <SystemInit+0x64>)
 800763c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007644:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007646:	4b0b      	ldr	r3, [pc, #44]	; (8007674 <SystemInit+0x64>)
 8007648:	4a0b      	ldr	r2, [pc, #44]	; (8007678 <SystemInit+0x68>)
 800764a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800764c:	4b09      	ldr	r3, [pc, #36]	; (8007674 <SystemInit+0x64>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a08      	ldr	r2, [pc, #32]	; (8007674 <SystemInit+0x64>)
 8007652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007656:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007658:	4b06      	ldr	r3, [pc, #24]	; (8007674 <SystemInit+0x64>)
 800765a:	2200      	movs	r2, #0
 800765c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800765e:	4b04      	ldr	r3, [pc, #16]	; (8007670 <SystemInit+0x60>)
 8007660:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007664:	609a      	str	r2, [r3, #8]
#endif
}
 8007666:	bf00      	nop
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	e000ed00 	.word	0xe000ed00
 8007674:	40023800 	.word	0x40023800
 8007678:	24003010 	.word	0x24003010

0800767c <__NVIC_GetPriorityGrouping>:
{
 800767c:	b480      	push	{r7}
 800767e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007680:	4b04      	ldr	r3, [pc, #16]	; (8007694 <__NVIC_GetPriorityGrouping+0x18>)
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	0a1b      	lsrs	r3, r3, #8
 8007686:	f003 0307 	and.w	r3, r3, #7
}
 800768a:	4618      	mov	r0, r3
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	e000ed00 	.word	0xe000ed00

08007698 <__NVIC_EnableIRQ>:
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	4603      	mov	r3, r0
 80076a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	db0b      	blt.n	80076c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80076aa:	79fb      	ldrb	r3, [r7, #7]
 80076ac:	f003 021f 	and.w	r2, r3, #31
 80076b0:	4907      	ldr	r1, [pc, #28]	; (80076d0 <__NVIC_EnableIRQ+0x38>)
 80076b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076b6:	095b      	lsrs	r3, r3, #5
 80076b8:	2001      	movs	r0, #1
 80076ba:	fa00 f202 	lsl.w	r2, r0, r2
 80076be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80076c2:	bf00      	nop
 80076c4:	370c      	adds	r7, #12
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	e000e100 	.word	0xe000e100

080076d4 <__NVIC_SetPriority>:
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	4603      	mov	r3, r0
 80076dc:	6039      	str	r1, [r7, #0]
 80076de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	db0a      	blt.n	80076fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	b2da      	uxtb	r2, r3
 80076ec:	490c      	ldr	r1, [pc, #48]	; (8007720 <__NVIC_SetPriority+0x4c>)
 80076ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076f2:	0112      	lsls	r2, r2, #4
 80076f4:	b2d2      	uxtb	r2, r2
 80076f6:	440b      	add	r3, r1
 80076f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80076fc:	e00a      	b.n	8007714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	b2da      	uxtb	r2, r3
 8007702:	4908      	ldr	r1, [pc, #32]	; (8007724 <__NVIC_SetPriority+0x50>)
 8007704:	79fb      	ldrb	r3, [r7, #7]
 8007706:	f003 030f 	and.w	r3, r3, #15
 800770a:	3b04      	subs	r3, #4
 800770c:	0112      	lsls	r2, r2, #4
 800770e:	b2d2      	uxtb	r2, r2
 8007710:	440b      	add	r3, r1
 8007712:	761a      	strb	r2, [r3, #24]
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr
 8007720:	e000e100 	.word	0xe000e100
 8007724:	e000ed00 	.word	0xe000ed00

08007728 <NVIC_EncodePriority>:
{
 8007728:	b480      	push	{r7}
 800772a:	b089      	sub	sp, #36	; 0x24
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f003 0307 	and.w	r3, r3, #7
 800773a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	f1c3 0307 	rsb	r3, r3, #7
 8007742:	2b04      	cmp	r3, #4
 8007744:	bf28      	it	cs
 8007746:	2304      	movcs	r3, #4
 8007748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	3304      	adds	r3, #4
 800774e:	2b06      	cmp	r3, #6
 8007750:	d902      	bls.n	8007758 <NVIC_EncodePriority+0x30>
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	3b03      	subs	r3, #3
 8007756:	e000      	b.n	800775a <NVIC_EncodePriority+0x32>
 8007758:	2300      	movs	r3, #0
 800775a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800775c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	fa02 f303 	lsl.w	r3, r2, r3
 8007766:	43da      	mvns	r2, r3
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	401a      	ands	r2, r3
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007770:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	fa01 f303 	lsl.w	r3, r1, r3
 800777a:	43d9      	mvns	r1, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007780:	4313      	orrs	r3, r2
}
 8007782:	4618      	mov	r0, r3
 8007784:	3724      	adds	r7, #36	; 0x24
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <LL_TIM_DisableARRPreload>:
{
 800778e:	b480      	push	{r7}
 8007790:	b083      	sub	sp, #12
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	601a      	str	r2, [r3, #0]
}
 80077a2:	bf00      	nop
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
	...

080077b0 <LL_TIM_OC_DisableFast>:
{
 80077b0:	b4b0      	push	{r4, r5, r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d01c      	beq.n	80077fa <LL_TIM_OC_DisableFast+0x4a>
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	2b04      	cmp	r3, #4
 80077c4:	d017      	beq.n	80077f6 <LL_TIM_OC_DisableFast+0x46>
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	2b10      	cmp	r3, #16
 80077ca:	d012      	beq.n	80077f2 <LL_TIM_OC_DisableFast+0x42>
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	2b40      	cmp	r3, #64	; 0x40
 80077d0:	d00d      	beq.n	80077ee <LL_TIM_OC_DisableFast+0x3e>
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077d8:	d007      	beq.n	80077ea <LL_TIM_OC_DisableFast+0x3a>
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077e0:	d101      	bne.n	80077e6 <LL_TIM_OC_DisableFast+0x36>
 80077e2:	2305      	movs	r3, #5
 80077e4:	e00a      	b.n	80077fc <LL_TIM_OC_DisableFast+0x4c>
 80077e6:	2306      	movs	r3, #6
 80077e8:	e008      	b.n	80077fc <LL_TIM_OC_DisableFast+0x4c>
 80077ea:	2304      	movs	r3, #4
 80077ec:	e006      	b.n	80077fc <LL_TIM_OC_DisableFast+0x4c>
 80077ee:	2303      	movs	r3, #3
 80077f0:	e004      	b.n	80077fc <LL_TIM_OC_DisableFast+0x4c>
 80077f2:	2302      	movs	r3, #2
 80077f4:	e002      	b.n	80077fc <LL_TIM_OC_DisableFast+0x4c>
 80077f6:	2301      	movs	r3, #1
 80077f8:	e000      	b.n	80077fc <LL_TIM_OC_DisableFast+0x4c>
 80077fa:	2300      	movs	r3, #0
 80077fc:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	3318      	adds	r3, #24
 8007802:	461a      	mov	r2, r3
 8007804:	4629      	mov	r1, r5
 8007806:	4b09      	ldr	r3, [pc, #36]	; (800782c <LL_TIM_OC_DisableFast+0x7c>)
 8007808:	5c5b      	ldrb	r3, [r3, r1]
 800780a:	4413      	add	r3, r2
 800780c:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800780e:	6822      	ldr	r2, [r4, #0]
 8007810:	4629      	mov	r1, r5
 8007812:	4b07      	ldr	r3, [pc, #28]	; (8007830 <LL_TIM_OC_DisableFast+0x80>)
 8007814:	5c5b      	ldrb	r3, [r3, r1]
 8007816:	4619      	mov	r1, r3
 8007818:	2304      	movs	r3, #4
 800781a:	408b      	lsls	r3, r1
 800781c:	43db      	mvns	r3, r3
 800781e:	4013      	ands	r3, r2
 8007820:	6023      	str	r3, [r4, #0]
}
 8007822:	bf00      	nop
 8007824:	370c      	adds	r7, #12
 8007826:	46bd      	mov	sp, r7
 8007828:	bcb0      	pop	{r4, r5, r7}
 800782a:	4770      	bx	lr
 800782c:	0800cb0c 	.word	0x0800cb0c
 8007830:	0800cb14 	.word	0x0800cb14

08007834 <LL_TIM_OC_EnablePreload>:
{
 8007834:	b4b0      	push	{r4, r5, r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d01c      	beq.n	800787e <LL_TIM_OC_EnablePreload+0x4a>
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	2b04      	cmp	r3, #4
 8007848:	d017      	beq.n	800787a <LL_TIM_OC_EnablePreload+0x46>
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	2b10      	cmp	r3, #16
 800784e:	d012      	beq.n	8007876 <LL_TIM_OC_EnablePreload+0x42>
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	2b40      	cmp	r3, #64	; 0x40
 8007854:	d00d      	beq.n	8007872 <LL_TIM_OC_EnablePreload+0x3e>
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800785c:	d007      	beq.n	800786e <LL_TIM_OC_EnablePreload+0x3a>
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007864:	d101      	bne.n	800786a <LL_TIM_OC_EnablePreload+0x36>
 8007866:	2305      	movs	r3, #5
 8007868:	e00a      	b.n	8007880 <LL_TIM_OC_EnablePreload+0x4c>
 800786a:	2306      	movs	r3, #6
 800786c:	e008      	b.n	8007880 <LL_TIM_OC_EnablePreload+0x4c>
 800786e:	2304      	movs	r3, #4
 8007870:	e006      	b.n	8007880 <LL_TIM_OC_EnablePreload+0x4c>
 8007872:	2303      	movs	r3, #3
 8007874:	e004      	b.n	8007880 <LL_TIM_OC_EnablePreload+0x4c>
 8007876:	2302      	movs	r3, #2
 8007878:	e002      	b.n	8007880 <LL_TIM_OC_EnablePreload+0x4c>
 800787a:	2301      	movs	r3, #1
 800787c:	e000      	b.n	8007880 <LL_TIM_OC_EnablePreload+0x4c>
 800787e:	2300      	movs	r3, #0
 8007880:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	3318      	adds	r3, #24
 8007886:	461a      	mov	r2, r3
 8007888:	4629      	mov	r1, r5
 800788a:	4b09      	ldr	r3, [pc, #36]	; (80078b0 <LL_TIM_OC_EnablePreload+0x7c>)
 800788c:	5c5b      	ldrb	r3, [r3, r1]
 800788e:	4413      	add	r3, r2
 8007890:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007892:	6822      	ldr	r2, [r4, #0]
 8007894:	4629      	mov	r1, r5
 8007896:	4b07      	ldr	r3, [pc, #28]	; (80078b4 <LL_TIM_OC_EnablePreload+0x80>)
 8007898:	5c5b      	ldrb	r3, [r3, r1]
 800789a:	4619      	mov	r1, r3
 800789c:	2308      	movs	r3, #8
 800789e:	408b      	lsls	r3, r1
 80078a0:	4313      	orrs	r3, r2
 80078a2:	6023      	str	r3, [r4, #0]
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bcb0      	pop	{r4, r5, r7}
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	0800cb0c 	.word	0x0800cb0c
 80078b4:	0800cb14 	.word	0x0800cb14

080078b8 <LL_TIM_SetTriggerOutput>:
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	431a      	orrs	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	605a      	str	r2, [r3, #4]
}
 80078d2:	bf00      	nop
 80078d4:	370c      	adds	r7, #12
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <LL_TIM_SetSlaveMode>:
{
 80078de:	b480      	push	{r7}
 80078e0:	b083      	sub	sp, #12
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
 80078e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	f023 0207 	bic.w	r2, r3, #7
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	431a      	orrs	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	609a      	str	r2, [r3, #8]
}
 80078f8:	bf00      	nop
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <LL_TIM_SetTriggerInput>:
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	431a      	orrs	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	609a      	str	r2, [r3, #8]
}
 800791e:	bf00      	nop
 8007920:	370c      	adds	r7, #12
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <LL_TIM_DisableMasterSlaveMode>:
{
 800792a:	b480      	push	{r7}
 800792c:	b083      	sub	sp, #12
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	609a      	str	r2, [r3, #8]
}
 800793e:	bf00      	nop
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <LL_TIM_DisableIT_TRIG>:
{
 800794a:	b480      	push	{r7}
 800794c:	b083      	sub	sp, #12
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TIE);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	60da      	str	r2, [r3, #12]
}
 800795e:	bf00      	nop
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <LL_TIM_DisableDMAReq_TRIG>:
{
 800796a:	b480      	push	{r7}
 800796c:	b083      	sub	sp, #12
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TDE);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	60da      	str	r2, [r3, #12]
}
 800797e:	bf00      	nop
 8007980:	370c      	adds	r7, #12
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
	...

0800798c <LL_AHB1_GRP1_EnableClock>:
{
 800798c:	b480      	push	{r7}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8007994:	4b08      	ldr	r3, [pc, #32]	; (80079b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007998:	4907      	ldr	r1, [pc, #28]	; (80079b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4313      	orrs	r3, r2
 800799e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80079a0:	4b05      	ldr	r3, [pc, #20]	; (80079b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80079a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4013      	ands	r3, r2
 80079a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80079aa:	68fb      	ldr	r3, [r7, #12]
}
 80079ac:	bf00      	nop
 80079ae:	3714      	adds	r7, #20
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr
 80079b8:	40023800 	.word	0x40023800

080079bc <LL_APB2_GRP1_EnableClock>:
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80079c4:	4b08      	ldr	r3, [pc, #32]	; (80079e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80079c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079c8:	4907      	ldr	r1, [pc, #28]	; (80079e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80079d0:	4b05      	ldr	r3, [pc, #20]	; (80079e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80079d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4013      	ands	r3, r2
 80079d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80079da:	68fb      	ldr	r3, [r7, #12]
}
 80079dc:	bf00      	nop
 80079de:	3714      	adds	r7, #20
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr
 80079e8:	40023800 	.word	0x40023800

080079ec <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b09a      	sub	sp, #104	; 0x68
 80079f0:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80079f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80079f6:	2200      	movs	r2, #0
 80079f8:	601a      	str	r2, [r3, #0]
 80079fa:	605a      	str	r2, [r3, #4]
 80079fc:	609a      	str	r2, [r3, #8]
 80079fe:	60da      	str	r2, [r3, #12]
 8007a00:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8007a02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007a06:	2220      	movs	r2, #32
 8007a08:	2100      	movs	r1, #0
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f002 ff42 	bl	800a894 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8007a10:	f107 031c 	add.w	r3, r7, #28
 8007a14:	2200      	movs	r2, #0
 8007a16:	601a      	str	r2, [r3, #0]
 8007a18:	605a      	str	r2, [r3, #4]
 8007a1a:	609a      	str	r2, [r3, #8]
 8007a1c:	60da      	str	r2, [r3, #12]
 8007a1e:	611a      	str	r2, [r3, #16]
 8007a20:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a22:	1d3b      	adds	r3, r7, #4
 8007a24:	2200      	movs	r2, #0
 8007a26:	601a      	str	r2, [r3, #0]
 8007a28:	605a      	str	r2, [r3, #4]
 8007a2a:	609a      	str	r2, [r3, #8]
 8007a2c:	60da      	str	r2, [r3, #12]
 8007a2e:	611a      	str	r2, [r3, #16]
 8007a30:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8007a32:	2001      	movs	r0, #1
 8007a34:	f7ff ffc2 	bl	80079bc <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8007a38:	2001      	movs	r0, #1
 8007a3a:	f7ff ffa7 	bl	800798c <LL_AHB1_GRP1_EnableClock>
  /**TIM1 GPIO Configuration  
  PA6   ------> TIM1_BKIN 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8007a3e:	2340      	movs	r3, #64	; 0x40
 8007a40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007a42:	2302      	movs	r3, #2
 8007a44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007a46:	2300      	movs	r3, #0
 8007a48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007a4e:	2302      	movs	r3, #2
 8007a50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8007a52:	2301      	movs	r3, #1
 8007a54:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a56:	1d3b      	adds	r3, r7, #4
 8007a58:	4619      	mov	r1, r3
 8007a5a:	4871      	ldr	r0, [pc, #452]	; (8007c20 <MX_TIM1_Init+0x234>)
 8007a5c:	f7fb f9ff 	bl	8002e5e <LL_GPIO_Init>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 1));
 8007a60:	f7ff fe0c 	bl	800767c <__NVIC_GetPriorityGrouping>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2201      	movs	r2, #1
 8007a68:	2104      	movs	r1, #4
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7ff fe5c 	bl	8007728 <NVIC_EncodePriority>
 8007a70:	4603      	mov	r3, r0
 8007a72:	4619      	mov	r1, r3
 8007a74:	2018      	movs	r0, #24
 8007a76:	f7ff fe2d 	bl	80076d4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8007a7a:	2018      	movs	r0, #24
 8007a7c:	f7ff fe0c 	bl	8007698 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007a80:	f7ff fdfc 	bl	800767c <__NVIC_GetPriorityGrouping>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2200      	movs	r2, #0
 8007a88:	2100      	movs	r1, #0
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7ff fe4c 	bl	8007728 <NVIC_EncodePriority>
 8007a90:	4603      	mov	r3, r0
 8007a92:	4619      	mov	r1, r3
 8007a94:	2019      	movs	r0, #25
 8007a96:	f7ff fe1d 	bl	80076d4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8007a9a:	2019      	movs	r0, #25
 8007a9c:	f7ff fdfc 	bl	8007698 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 0;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_UP;
 8007aa6:	2320      	movs	r3, #32
 8007aa8:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 65535;
 8007aaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007aae:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV2;
 8007ab0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ab4:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8007abc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	4858      	ldr	r0, [pc, #352]	; (8007c24 <MX_TIM1_Init+0x238>)
 8007ac4:	f7fb fc30 	bl	8003328 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8007ac8:	4856      	ldr	r0, [pc, #344]	; (8007c24 <MX_TIM1_Init+0x238>)
 8007aca:	f7ff fe60 	bl	800778e <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8007ace:	2101      	movs	r1, #1
 8007ad0:	4854      	ldr	r0, [pc, #336]	; (8007c24 <MX_TIM1_Init+0x238>)
 8007ad2:	f7ff feaf 	bl	8007834 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8007ad6:	2360      	movs	r3, #96	; 0x60
 8007ad8:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8007ada:	2300      	movs	r3, #0
 8007adc:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8007aea:	2300      	movs	r3, #0
 8007aec:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8007aee:	2300      	movs	r3, #0
 8007af0:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8007af2:	2300      	movs	r3, #0
 8007af4:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8007af6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007afa:	461a      	mov	r2, r3
 8007afc:	2101      	movs	r1, #1
 8007afe:	4849      	ldr	r0, [pc, #292]	; (8007c24 <MX_TIM1_Init+0x238>)
 8007b00:	f7fb fcac 	bl	800345c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8007b04:	2101      	movs	r1, #1
 8007b06:	4847      	ldr	r0, [pc, #284]	; (8007c24 <MX_TIM1_Init+0x238>)
 8007b08:	f7ff fe52 	bl	80077b0 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 8007b0c:	2110      	movs	r1, #16
 8007b0e:	4845      	ldr	r0, [pc, #276]	; (8007c24 <MX_TIM1_Init+0x238>)
 8007b10:	f7ff fe90 	bl	8007834 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8007b14:	2300      	movs	r3, #0
 8007b16:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8007b1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007b20:	461a      	mov	r2, r3
 8007b22:	2110      	movs	r1, #16
 8007b24:	483f      	ldr	r0, [pc, #252]	; (8007c24 <MX_TIM1_Init+0x238>)
 8007b26:	f7fb fc99 	bl	800345c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 8007b2a:	2110      	movs	r1, #16
 8007b2c:	483d      	ldr	r0, [pc, #244]	; (8007c24 <MX_TIM1_Init+0x238>)
 8007b2e:	f7ff fe3f 	bl	80077b0 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8007b32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007b36:	483b      	ldr	r0, [pc, #236]	; (8007c24 <MX_TIM1_Init+0x238>)
 8007b38:	f7ff fe7c 	bl	8007834 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8007b40:	2300      	movs	r3, #0
 8007b42:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8007b44:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007b48:	461a      	mov	r2, r3
 8007b4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007b4e:	4835      	ldr	r0, [pc, #212]	; (8007c24 <MX_TIM1_Init+0x238>)
 8007b50:	f7fb fc84 	bl	800345c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8007b54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007b58:	4832      	ldr	r0, [pc, #200]	; (8007c24 <MX_TIM1_Init+0x238>)
 8007b5a:	f7ff fe29 	bl	80077b0 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 8007b5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007b62:	4830      	ldr	r0, [pc, #192]	; (8007c24 <MX_TIM1_Init+0x238>)
 8007b64:	f7ff fe66 	bl	8007834 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 8007b68:	2370      	movs	r3, #112	; 0x70
 8007b6a:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8007b70:	2300      	movs	r3, #0
 8007b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8007b74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007b78:	461a      	mov	r2, r3
 8007b7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007b7e:	4829      	ldr	r0, [pc, #164]	; (8007c24 <MX_TIM1_Init+0x238>)
 8007b80:	f7fb fc6c 	bl	800345c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 8007b84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007b88:	4826      	ldr	r0, [pc, #152]	; (8007c24 <MX_TIM1_Init+0x238>)
 8007b8a:	f7ff fe11 	bl	80077b0 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerInput(TIM1, LL_TIM_TS_ITR1);
 8007b8e:	2110      	movs	r1, #16
 8007b90:	4824      	ldr	r0, [pc, #144]	; (8007c24 <MX_TIM1_Init+0x238>)
 8007b92:	f7ff feb7 	bl	8007904 <LL_TIM_SetTriggerInput>
  LL_TIM_SetSlaveMode(TIM1, LL_TIM_SLAVEMODE_TRIGGER);
 8007b96:	2106      	movs	r1, #6
 8007b98:	4822      	ldr	r0, [pc, #136]	; (8007c24 <MX_TIM1_Init+0x238>)
 8007b9a:	f7ff fea0 	bl	80078de <LL_TIM_SetSlaveMode>
  LL_TIM_DisableIT_TRIG(TIM1);
 8007b9e:	4821      	ldr	r0, [pc, #132]	; (8007c24 <MX_TIM1_Init+0x238>)
 8007ba0:	f7ff fed3 	bl	800794a <LL_TIM_DisableIT_TRIG>
  LL_TIM_DisableDMAReq_TRIG(TIM1);
 8007ba4:	481f      	ldr	r0, [pc, #124]	; (8007c24 <MX_TIM1_Init+0x238>)
 8007ba6:	f7ff fee0 	bl	800796a <LL_TIM_DisableDMAReq_TRIG>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8007baa:	2100      	movs	r1, #0
 8007bac:	481d      	ldr	r0, [pc, #116]	; (8007c24 <MX_TIM1_Init+0x238>)
 8007bae:	f7ff fe83 	bl	80078b8 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8007bb2:	481c      	ldr	r0, [pc, #112]	; (8007c24 <MX_TIM1_Init+0x238>)
 8007bb4:	f7ff feb9 	bl	800792a <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_ENABLE;
 8007bb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007bbc:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_ENABLE;
 8007bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bc2:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_1;
 8007bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bc8:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_ENABLE;
 8007bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bd4:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8007bd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8007be0:	f107 031c 	add.w	r3, r7, #28
 8007be4:	4619      	mov	r1, r3
 8007be6:	480f      	ldr	r0, [pc, #60]	; (8007c24 <MX_TIM1_Init+0x238>)
 8007be8:	f7fb fc70 	bl	80034cc <LL_TIM_BDTR_Init>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8007bec:	2001      	movs	r0, #1
 8007bee:	f7ff fecd 	bl	800798c <LL_AHB1_GRP1_EnableClock>
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8007bf2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8007bf6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007c00:	2300      	movs	r3, #0
 8007c02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007c04:	2302      	movs	r3, #2
 8007c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c0c:	1d3b      	adds	r3, r7, #4
 8007c0e:	4619      	mov	r1, r3
 8007c10:	4803      	ldr	r0, [pc, #12]	; (8007c20 <MX_TIM1_Init+0x234>)
 8007c12:	f7fb f924 	bl	8002e5e <LL_GPIO_Init>

}
 8007c16:	bf00      	nop
 8007c18:	3768      	adds	r7, #104	; 0x68
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	40020000 	.word	0x40020000
 8007c24:	40010000 	.word	0x40010000

08007c28 <LL_USART_Enable>:
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	60da      	str	r2, [r3, #12]
}
 8007c3c:	bf00      	nop
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	695b      	ldr	r3, [r3, #20]
 8007c60:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	615a      	str	r2, [r3, #20]
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <LL_AHB1_GRP1_EnableClock>:
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8007c7c:	4b08      	ldr	r3, [pc, #32]	; (8007ca0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c80:	4907      	ldr	r1, [pc, #28]	; (8007ca0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8007c88:	4b05      	ldr	r3, [pc, #20]	; (8007ca0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4013      	ands	r3, r2
 8007c90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007c92:	68fb      	ldr	r3, [r7, #12]
}
 8007c94:	bf00      	nop
 8007c96:	3714      	adds	r7, #20
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr
 8007ca0:	40023800 	.word	0x40023800

08007ca4 <LL_APB1_GRP1_EnableClock>:
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8007cac:	4b08      	ldr	r3, [pc, #32]	; (8007cd0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8007cae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cb0:	4907      	ldr	r1, [pc, #28]	; (8007cd0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8007cb8:	4b05      	ldr	r3, [pc, #20]	; (8007cd0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8007cba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
}
 8007cc4:	bf00      	nop
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr
 8007cd0:	40023800 	.word	0x40023800

08007cd4 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b08e      	sub	sp, #56	; 0x38
 8007cd8:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8007cda:	f107 031c 	add.w	r3, r7, #28
 8007cde:	2200      	movs	r2, #0
 8007ce0:	601a      	str	r2, [r3, #0]
 8007ce2:	605a      	str	r2, [r3, #4]
 8007ce4:	609a      	str	r2, [r3, #8]
 8007ce6:	60da      	str	r2, [r3, #12]
 8007ce8:	611a      	str	r2, [r3, #16]
 8007cea:	615a      	str	r2, [r3, #20]
 8007cec:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cee:	1d3b      	adds	r3, r7, #4
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	601a      	str	r2, [r3, #0]
 8007cf4:	605a      	str	r2, [r3, #4]
 8007cf6:	609a      	str	r2, [r3, #8]
 8007cf8:	60da      	str	r2, [r3, #12]
 8007cfa:	611a      	str	r2, [r3, #16]
 8007cfc:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8007cfe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007d02:	f7ff ffcf 	bl	8007ca4 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8007d06:	2001      	movs	r0, #1
 8007d08:	f7ff ffb4 	bl	8007c74 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8007d0c:	230c      	movs	r3, #12
 8007d0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007d10:	2302      	movs	r3, #2
 8007d12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007d14:	2303      	movs	r3, #3
 8007d16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8007d20:	2307      	movs	r3, #7
 8007d22:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d24:	1d3b      	adds	r3, r7, #4
 8007d26:	4619      	mov	r1, r3
 8007d28:	4810      	ldr	r0, [pc, #64]	; (8007d6c <MX_USART2_UART_Init+0x98>)
 8007d2a:	f7fb f898 	bl	8002e5e <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 8007d2e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8007d32:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8007d34:	2300      	movs	r3, #0
 8007d36:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8007d40:	230c      	movs	r3, #12
 8007d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8007d44:	2300      	movs	r3, #0
 8007d46:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8007d4c:	f107 031c 	add.w	r3, r7, #28
 8007d50:	4619      	mov	r1, r3
 8007d52:	4807      	ldr	r0, [pc, #28]	; (8007d70 <MX_USART2_UART_Init+0x9c>)
 8007d54:	f7fb fe98 	bl	8003a88 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8007d58:	4805      	ldr	r0, [pc, #20]	; (8007d70 <MX_USART2_UART_Init+0x9c>)
 8007d5a:	f7ff ff75 	bl	8007c48 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8007d5e:	4804      	ldr	r0, [pc, #16]	; (8007d70 <MX_USART2_UART_Init+0x9c>)
 8007d60:	f7ff ff62 	bl	8007c28 <LL_USART_Enable>

}
 8007d64:	bf00      	nop
 8007d66:	3738      	adds	r7, #56	; 0x38
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	40020000 	.word	0x40020000
 8007d70:	40004400 	.word	0x40004400

08007d74 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af02      	add	r7, sp, #8
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	9300      	str	r3, [sp, #0]
 8007d84:	4b04      	ldr	r3, [pc, #16]	; (8007d98 <_ZNSt7__cxx119to_stringEi+0x24>)
 8007d86:	2210      	movs	r2, #16
 8007d88:	4904      	ldr	r1, [pc, #16]	; (8007d9c <_ZNSt7__cxx119to_stringEi+0x28>)
 8007d8a:	f7fc ff22 	bl	8004bd2 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	3708      	adds	r7, #8
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	0800c9f4 	.word	0x0800c9f4
 8007d9c:	0800b3ad 	.word	0x0800b3ad

08007da0 <cppwrapper>:
//unsigned int debugCount = DEBUG_COUNT;

MotorCtrl M_Ctrl;


void cppwrapper(void){
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b094      	sub	sp, #80	; 0x50
 8007da4:	af00      	add	r7, sp, #0

	M_Ctrl.InitSystem();
 8007da6:	481f      	ldr	r0, [pc, #124]	; (8007e24 <cppwrapper+0x84>)
 8007da8:	f7fd fc22 	bl	80055f0 <_ZN9MotorCtrl10InitSystemEv>

	//debug
	std::string DbgStr;
 8007dac:	1d3b      	adds	r3, r7, #4
 8007dae:	4618      	mov	r0, r3
 8007db0:	f001 fc4b 	bl	800964a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	int Dbgint=3456;
 8007db4:	f44f 6358 	mov.w	r3, #3456	; 0xd80
 8007db8:	64fb      	str	r3, [r7, #76]	; 0x4c

	DbgStr.append("testnum:");
 8007dba:	1d3b      	adds	r3, r7, #4
 8007dbc:	491a      	ldr	r1, [pc, #104]	; (8007e28 <cppwrapper+0x88>)
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f001 fc78 	bl	80096b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
	DbgStr.append(std::to_string(Dbgint));
 8007dc4:	f107 031c 	add.w	r3, r7, #28
 8007dc8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7ff ffd2 	bl	8007d74 <_ZNSt7__cxx119to_stringEi>
 8007dd0:	f107 021c 	add.w	r2, r7, #28
 8007dd4:	1d3b      	adds	r3, r7, #4
 8007dd6:	4611      	mov	r1, r2
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f001 fc65 	bl	80096a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8007dde:	f107 031c 	add.w	r3, r7, #28
 8007de2:	4618      	mov	r0, r3
 8007de4:	f001 fc38 	bl	8009658 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	DbgStr.append("\r\n");
 8007de8:	1d3b      	adds	r3, r7, #4
 8007dea:	4910      	ldr	r1, [pc, #64]	; (8007e2c <cppwrapper+0x8c>)
 8007dec:	4618      	mov	r0, r3
 8007dee:	f001 fc61 	bl	80096b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
	M_Ctrl.DbgUart(DbgStr);
 8007df2:	1d3a      	adds	r2, r7, #4
 8007df4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007df8:	4611      	mov	r1, r2
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f001 fc74 	bl	80096e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8007e00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007e04:	4619      	mov	r1, r3
 8007e06:	4807      	ldr	r0, [pc, #28]	; (8007e24 <cppwrapper+0x84>)
 8007e08:	f7fd ffa6 	bl	8005d58 <_ZN9MotorCtrl7DbgUartENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8007e0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007e10:	4618      	mov	r0, r3
 8007e12:	f001 fc21 	bl	8009658 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

	M_Ctrl.InitMotorInfo();
 8007e16:	4803      	ldr	r0, [pc, #12]	; (8007e24 <cppwrapper+0x84>)
 8007e18:	f7fd feca 	bl	8005bb0 <_ZN9MotorCtrl13InitMotorInfoEv>
	M_Ctrl.InitPWM();
 8007e1c:	4801      	ldr	r0, [pc, #4]	; (8007e24 <cppwrapper+0x84>)
 8007e1e:	f7fd fbf7 	bl	8005610 <_ZN9MotorCtrl7InitPWMEv>

	while(1){}
 8007e22:	e7fe      	b.n	8007e22 <cppwrapper+0x82>
 8007e24:	200001fc 	.word	0x200001fc
 8007e28:	0800c9f8 	.word	0x0800c9f8
 8007e2c:	0800ca04 	.word	0x0800ca04

08007e30 <_Z41__static_initialization_and_destruction_0ii>:
}


void BtnAct(void) { //割り込みラッパ
	M_Ctrl.BtnAct();
}
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d107      	bne.n	8007e50 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d102      	bne.n	8007e50 <_Z41__static_initialization_and_destruction_0ii+0x20>
MotorCtrl M_Ctrl;
 8007e4a:	4809      	ldr	r0, [pc, #36]	; (8007e70 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8007e4c:	f7fd f998 	bl	8005180 <_ZN9MotorCtrlC1Ev>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d107      	bne.n	8007e66 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d102      	bne.n	8007e66 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8007e60:	4803      	ldr	r0, [pc, #12]	; (8007e70 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8007e62:	f7fd f9bf 	bl	80051e4 <_ZN9MotorCtrlD1Ev>
}
 8007e66:	bf00      	nop
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	200001fc 	.word	0x200001fc

08007e74 <_GLOBAL__sub_I_M_Ctrl>:
 8007e74:	b580      	push	{r7, lr}
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007e7c:	2001      	movs	r0, #1
 8007e7e:	f7ff ffd7 	bl	8007e30 <_Z41__static_initialization_and_destruction_0ii>
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <_GLOBAL__sub_D_M_Ctrl>:
 8007e84:	b580      	push	{r7, lr}
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007e8c:	2000      	movs	r0, #0
 8007e8e:	f7ff ffcf 	bl	8007e30 <_Z41__static_initialization_and_destruction_0ii>
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007e94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007ecc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007e98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007e9a:	e003      	b.n	8007ea4 <LoopCopyDataInit>

08007e9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007e9c:	4b0c      	ldr	r3, [pc, #48]	; (8007ed0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007e9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007ea0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007ea2:	3104      	adds	r1, #4

08007ea4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007ea4:	480b      	ldr	r0, [pc, #44]	; (8007ed4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007ea6:	4b0c      	ldr	r3, [pc, #48]	; (8007ed8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007ea8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007eaa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007eac:	d3f6      	bcc.n	8007e9c <CopyDataInit>
  ldr  r2, =_sbss
 8007eae:	4a0b      	ldr	r2, [pc, #44]	; (8007edc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007eb0:	e002      	b.n	8007eb8 <LoopFillZerobss>

08007eb2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007eb2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007eb4:	f842 3b04 	str.w	r3, [r2], #4

08007eb8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007eb8:	4b09      	ldr	r3, [pc, #36]	; (8007ee0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007eba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007ebc:	d3f9      	bcc.n	8007eb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007ebe:	f7ff fba7 	bl	8007610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007ec2:	f002 fc8f 	bl	800a7e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007ec6:	f7ff fa21 	bl	800730c <main>
  bx  lr    
 8007eca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007ecc:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 8007ed0:	0800cfa8 	.word	0x0800cfa8
  ldr  r0, =_sdata
 8007ed4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007ed8:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8007edc:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8007ee0:	20003228 	.word	0x20003228

08007ee4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007ee4:	e7fe      	b.n	8007ee4 <CAN1_RX0_IRQHandler>
	...

08007ee8 <__NVIC_GetPriorityGrouping>:
{
 8007ee8:	b480      	push	{r7}
 8007eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007eec:	4b04      	ldr	r3, [pc, #16]	; (8007f00 <__NVIC_GetPriorityGrouping+0x18>)
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	0a1b      	lsrs	r3, r3, #8
 8007ef2:	f003 0307 	and.w	r3, r3, #7
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	e000ed00 	.word	0xe000ed00

08007f04 <__NVIC_EnableIRQ>:
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	db0d      	blt.n	8007f32 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	f003 021f 	and.w	r2, r3, #31
 8007f20:	4907      	ldr	r1, [pc, #28]	; (8007f40 <__NVIC_EnableIRQ+0x3c>)
 8007f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f26:	095b      	lsrs	r3, r3, #5
 8007f28:	2001      	movs	r0, #1
 8007f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8007f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007f32:	bf00      	nop
 8007f34:	370c      	adds	r7, #12
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	e000e100 	.word	0xe000e100

08007f44 <__NVIC_SetPriority>:
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	6039      	str	r1, [r7, #0]
 8007f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	db0c      	blt.n	8007f72 <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	4a0e      	ldr	r2, [pc, #56]	; (8007f98 <__NVIC_SetPriority+0x54>)
 8007f5e:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8007f62:	4608      	mov	r0, r1
 8007f64:	011b      	lsls	r3, r3, #4
 8007f66:	b2d9      	uxtb	r1, r3
 8007f68:	1813      	adds	r3, r2, r0
 8007f6a:	460a      	mov	r2, r1
 8007f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007f70:	e00c      	b.n	8007f8c <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	b2da      	uxtb	r2, r3
 8007f76:	4909      	ldr	r1, [pc, #36]	; (8007f9c <__NVIC_SetPriority+0x58>)
 8007f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	f003 030f 	and.w	r3, r3, #15
 8007f82:	3b04      	subs	r3, #4
 8007f84:	0112      	lsls	r2, r2, #4
 8007f86:	b2d2      	uxtb	r2, r2
 8007f88:	440b      	add	r3, r1
 8007f8a:	761a      	strb	r2, [r3, #24]
}
 8007f8c:	bf00      	nop
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr
 8007f98:	e000e100 	.word	0xe000e100
 8007f9c:	e000ed00 	.word	0xe000ed00

08007fa0 <NVIC_EncodePriority>:
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b089      	sub	sp, #36	; 0x24
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f003 0307 	and.w	r3, r3, #7
 8007fb2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	f1c3 0307 	rsb	r3, r3, #7
 8007fba:	2b04      	cmp	r3, #4
 8007fbc:	bf28      	it	cs
 8007fbe:	2304      	movcs	r3, #4
 8007fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	3304      	adds	r3, #4
 8007fc6:	2b06      	cmp	r3, #6
 8007fc8:	d902      	bls.n	8007fd0 <NVIC_EncodePriority+0x30>
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	3b03      	subs	r3, #3
 8007fce:	e000      	b.n	8007fd2 <NVIC_EncodePriority+0x32>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fdc:	1e5a      	subs	r2, r3, #1
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	401a      	ands	r2, r3
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	2101      	movs	r1, #1
 8007fea:	fa01 f303 	lsl.w	r3, r1, r3
 8007fee:	1e59      	subs	r1, r3, #1
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	400b      	ands	r3, r1
         );
 8007ff4:	4313      	orrs	r3, r2
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3724      	adds	r7, #36	; 0x24
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <LL_ADC_REG_SetSequencerRanks>:
{
 8008002:	b490      	push	{r4, r7}
 8008004:	b086      	sub	sp, #24
 8008006:	af00      	add	r7, sp, #0
 8008008:	60f8      	str	r0, [r7, #12]
 800800a:	60b9      	str	r1, [r7, #8]
 800800c:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	332c      	adds	r3, #44	; 0x2c
 8008012:	4619      	mov	r1, r3
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800801a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800801e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008020:	697a      	ldr	r2, [r7, #20]
 8008022:	fa92 f2a2 	rbit	r2, r2
 8008026:	613a      	str	r2, [r7, #16]
  return result;
 8008028:	693a      	ldr	r2, [r7, #16]
 800802a:	fab2 f282 	clz	r2, r2
 800802e:	b2d2      	uxtb	r2, r2
 8008030:	40d3      	lsrs	r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	440b      	add	r3, r1
 8008036:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8008038:	6822      	ldr	r2, [r4, #0]
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	f003 031f 	and.w	r3, r3, #31
 8008040:	211f      	movs	r1, #31
 8008042:	fa01 f303 	lsl.w	r3, r1, r3
 8008046:	43db      	mvns	r3, r3
 8008048:	401a      	ands	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f003 011f 	and.w	r1, r3, #31
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	f003 031f 	and.w	r3, r3, #31
 8008056:	fa01 f303 	lsl.w	r3, r1, r3
 800805a:	4313      	orrs	r3, r2
 800805c:	6023      	str	r3, [r4, #0]
}
 800805e:	bf00      	nop
 8008060:	3718      	adds	r7, #24
 8008062:	46bd      	mov	sp, r7
 8008064:	bc90      	pop	{r4, r7}
 8008066:	4770      	bx	lr

08008068 <LL_ADC_REG_SetFlagEndOfConversion>:
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	431a      	orrs	r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	609a      	str	r2, [r3, #8]
}
 8008082:	bf00      	nop
 8008084:	370c      	adds	r7, #12
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr

0800808e <LL_ADC_INJ_SetSequencerRanks>:
{
 800808e:	b480      	push	{r7}
 8008090:	b087      	sub	sp, #28
 8008092:	af00      	add	r7, sp, #0
 8008094:	60f8      	str	r0, [r7, #12]
 8008096:	60b9      	str	r1, [r7, #8]
 8008098:	607a      	str	r2, [r7, #4]
  register uint32_t tmpreg1 = (READ_BIT(ADCx->JSQR, ADC_JSQR_JL) >> ADC_JSQR_JL_Pos) + 1U;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809e:	0d1b      	lsrs	r3, r3, #20
 80080a0:	f003 0303 	and.w	r3, r3, #3
 80080a4:	3301      	adds	r3, #1
 80080a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(ADCx->JSQR,
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	b2d9      	uxtb	r1, r3
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	1acb      	subs	r3, r1, r3
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	3303      	adds	r3, #3
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	4619      	mov	r1, r3
 80080be:	460b      	mov	r3, r1
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	440b      	add	r3, r1
 80080c4:	211f      	movs	r1, #31
 80080c6:	fa01 f303 	lsl.w	r3, r1, r3
 80080ca:	43db      	mvns	r3, r3
 80080cc:	401a      	ands	r2, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f003 011f 	and.w	r1, r3, #31
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	b2d8      	uxtb	r0, r3
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	1ac3      	subs	r3, r0, r3
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	3303      	adds	r3, #3
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	4618      	mov	r0, r3
 80080e6:	4603      	mov	r3, r0
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	4403      	add	r3, r0
 80080ec:	fa01 f303 	lsl.w	r3, r1, r3
 80080f0:	431a      	orrs	r2, r3
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80080f6:	bf00      	nop
 80080f8:	371c      	adds	r7, #28
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr

08008102 <LL_ADC_INJ_SetOffset>:
{
 8008102:	b490      	push	{r4, r7}
 8008104:	b086      	sub	sp, #24
 8008106:	af00      	add	r7, sp, #0
 8008108:	60f8      	str	r0, [r7, #12]
 800810a:	60b9      	str	r1, [r7, #8]
 800810c:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JOFR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JOFRX_REGOFFSET_MASK));
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	3314      	adds	r3, #20
 8008112:	4619      	mov	r1, r3
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800811a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800811e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	fa92 f2a2 	rbit	r2, r2
 8008126:	613a      	str	r2, [r7, #16]
  return result;
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	fab2 f282 	clz	r2, r2
 800812e:	b2d2      	uxtb	r2, r2
 8008130:	40d3      	lsrs	r3, r2
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	440b      	add	r3, r1
 8008136:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8008138:	6823      	ldr	r3, [r4, #0]
 800813a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800813e:	f023 030f 	bic.w	r3, r3, #15
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	4313      	orrs	r3, r2
 8008146:	6023      	str	r3, [r4, #0]
}
 8008148:	bf00      	nop
 800814a:	3718      	adds	r7, #24
 800814c:	46bd      	mov	sp, r7
 800814e:	bc90      	pop	{r4, r7}
 8008150:	4770      	bx	lr

08008152 <LL_ADC_SetChannelSamplingTime>:
{
 8008152:	b490      	push	{r4, r7}
 8008154:	b08a      	sub	sp, #40	; 0x28
 8008156:	af00      	add	r7, sp, #0
 8008158:	60f8      	str	r0, [r7, #12]
 800815a:	60b9      	str	r1, [r7, #8]
 800815c:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	330c      	adds	r3, #12
 8008162:	4619      	mov	r1, r3
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800816a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800816e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008170:	697a      	ldr	r2, [r7, #20]
 8008172:	fa92 f2a2 	rbit	r2, r2
 8008176:	613a      	str	r2, [r7, #16]
  return result;
 8008178:	693a      	ldr	r2, [r7, #16]
 800817a:	fab2 f282 	clz	r2, r2
 800817e:	b2d2      	uxtb	r2, r2
 8008180:	40d3      	lsrs	r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	440b      	add	r3, r1
 8008186:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8008188:	6822      	ldr	r2, [r4, #0]
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8008190:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8008194:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008196:	69f9      	ldr	r1, [r7, #28]
 8008198:	fa91 f1a1 	rbit	r1, r1
 800819c:	61b9      	str	r1, [r7, #24]
  return result;
 800819e:	69b9      	ldr	r1, [r7, #24]
 80081a0:	fab1 f181 	clz	r1, r1
 80081a4:	b2c9      	uxtb	r1, r1
 80081a6:	40cb      	lsrs	r3, r1
 80081a8:	2107      	movs	r1, #7
 80081aa:	fa01 f303 	lsl.w	r3, r1, r3
 80081ae:	43db      	mvns	r3, r3
 80081b0:	401a      	ands	r2, r3
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80081b8:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80081bc:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081c0:	fa91 f1a1 	rbit	r1, r1
 80081c4:	6239      	str	r1, [r7, #32]
  return result;
 80081c6:	6a39      	ldr	r1, [r7, #32]
 80081c8:	fab1 f181 	clz	r1, r1
 80081cc:	b2c9      	uxtb	r1, r1
 80081ce:	40cb      	lsrs	r3, r1
 80081d0:	6879      	ldr	r1, [r7, #4]
 80081d2:	fa01 f303 	lsl.w	r3, r1, r3
 80081d6:	4313      	orrs	r3, r2
 80081d8:	6023      	str	r3, [r4, #0]
}
 80081da:	bf00      	nop
 80081dc:	3728      	adds	r7, #40	; 0x28
 80081de:	46bd      	mov	sp, r7
 80081e0:	bc90      	pop	{r4, r7}
 80081e2:	4770      	bx	lr

080081e4 <LL_ADC_INJ_StartConversionExtTrig>:
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	689a      	ldr	r2, [r3, #8]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	431a      	orrs	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	609a      	str	r2, [r3, #8]
}
 80081fa:	bf00      	nop
 80081fc:	370c      	adds	r7, #12
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr

08008206 <LL_ADC_DisableIT_EOCS>:
{
 8008206:	b480      	push	{r7}
 8008208:	b083      	sub	sp, #12
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	f023 0220 	bic.w	r2, r3, #32
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	605a      	str	r2, [r3, #4]
}
 800821a:	bf00      	nop
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <LL_ADC_DisableIT_JEOS>:
{
 8008226:	b480      	push	{r7}
 8008228:	b083      	sub	sp, #12
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	605a      	str	r2, [r3, #4]
}
 800823a:	bf00      	nop
 800823c:	370c      	adds	r7, #12
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
	...

08008248 <LL_AHB1_GRP1_EnableClock>:
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8008250:	4b08      	ldr	r3, [pc, #32]	; (8008274 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4907      	ldr	r1, [pc, #28]	; (8008274 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008258:	4313      	orrs	r3, r2
 800825a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800825c:	4b05      	ldr	r3, [pc, #20]	; (8008274 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800825e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4013      	ands	r3, r2
 8008264:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008266:	68fb      	ldr	r3, [r7, #12]
}
 8008268:	bf00      	nop
 800826a:	3714      	adds	r7, #20
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr
 8008274:	40023800 	.word	0x40023800

08008278 <LL_APB2_GRP1_EnableClock>:
{
 8008278:	b480      	push	{r7}
 800827a:	b085      	sub	sp, #20
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8008280:	4b08      	ldr	r3, [pc, #32]	; (80082a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8008282:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4907      	ldr	r1, [pc, #28]	; (80082a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8008288:	4313      	orrs	r3, r2
 800828a:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800828c:	4b05      	ldr	r3, [pc, #20]	; (80082a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 800828e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4013      	ands	r3, r2
 8008294:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008296:	68fb      	ldr	r3, [r7, #12]
}
 8008298:	bf00      	nop
 800829a:	3714      	adds	r7, #20
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr
 80082a4:	40023800 	.word	0x40023800

080082a8 <_ZN7ADCInit4InitEv>:
void MX_ADC3_Init(void);
ADC_HandleTypeDef hadc3;
//void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle);
//void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle);

void ADCInit::Init() {
 80082a8:	b580      	push	{r7, lr}
 80082aa:	af00      	add	r7, sp, #0
	MX_ADC1_Init();
 80082ac:	f000 f806 	bl	80082bc <_Z12MX_ADC1_Initv>
	MX_ADC2_Init();
 80082b0:	f000 f91e 	bl	80084f0 <_Z12MX_ADC2_Initv>
	MX_ADC3_Init();
 80082b4:	f000 fa24 	bl	8008700 <_Z12MX_ADC3_Initv>
}
 80082b8:	bf00      	nop
 80082ba:	bd80      	pop	{r7, pc}

080082bc <_Z12MX_ADC1_Initv>:



/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b096      	sub	sp, #88	; 0x58
 80082c0:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80082c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80082c6:	2200      	movs	r2, #0
 80082c8:	601a      	str	r2, [r3, #0]
 80082ca:	605a      	str	r2, [r3, #4]
 80082cc:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80082ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80082d2:	2200      	movs	r2, #0
 80082d4:	601a      	str	r2, [r3, #0]
 80082d6:	605a      	str	r2, [r3, #4]
 80082d8:	609a      	str	r2, [r3, #8]
 80082da:	60da      	str	r2, [r3, #12]
 80082dc:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80082de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80082e2:	2200      	movs	r2, #0
 80082e4:	601a      	str	r2, [r3, #0]
 80082e6:	605a      	str	r2, [r3, #4]
 80082e8:	609a      	str	r2, [r3, #8]
 80082ea:	60da      	str	r2, [r3, #12]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 80082ec:	f107 0318 	add.w	r3, r7, #24
 80082f0:	2200      	movs	r2, #0
 80082f2:	601a      	str	r2, [r3, #0]
 80082f4:	605a      	str	r2, [r3, #4]
 80082f6:	609a      	str	r2, [r3, #8]
 80082f8:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082fa:	463b      	mov	r3, r7
 80082fc:	2200      	movs	r2, #0
 80082fe:	601a      	str	r2, [r3, #0]
 8008300:	605a      	str	r2, [r3, #4]
 8008302:	609a      	str	r2, [r3, #8]
 8008304:	60da      	str	r2, [r3, #12]
 8008306:	611a      	str	r2, [r3, #16]
 8008308:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 800830a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800830e:	f7ff ffb3 	bl	8008278 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8008312:	2004      	movs	r0, #4
 8008314:	f7ff ff98 	bl	8008248 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8008318:	2001      	movs	r0, #1
 800831a:	f7ff ff95 	bl	8008248 <LL_AHB1_GRP1_EnableClock>
  PC1   ------> ADC1_IN11
  PC2   ------> ADC1_IN12
  PA0-WKUP   ------> ADC1_IN0
  PA1   ------> ADC1_IN1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 800831e:	2307      	movs	r3, #7
 8008320:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8008322:	2303      	movs	r3, #3
 8008324:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008326:	2300      	movs	r3, #0
 8008328:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800832a:	463b      	mov	r3, r7
 800832c:	4619      	mov	r1, r3
 800832e:	4869      	ldr	r0, [pc, #420]	; (80084d4 <_Z12MX_ADC1_Initv+0x218>)
 8008330:	f7fa fd95 	bl	8002e5e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8008334:	2303      	movs	r3, #3
 8008336:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8008338:	2303      	movs	r3, #3
 800833a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800833c:	2300      	movs	r3, #0
 800833e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008340:	463b      	mov	r3, r7
 8008342:	4619      	mov	r1, r3
 8008344:	4864      	ldr	r0, [pc, #400]	; (80084d8 <_Z12MX_ADC1_Initv+0x21c>)
 8008346:	f7fa fd8a 	bl	8002e5e <LL_GPIO_Init>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 800834a:	f7ff fdcd 	bl	8007ee8 <__NVIC_GetPriorityGrouping>
 800834e:	4603      	mov	r3, r0
 8008350:	2200      	movs	r2, #0
 8008352:	2102      	movs	r1, #2
 8008354:	4618      	mov	r0, r3
 8008356:	f7ff fe23 	bl	8007fa0 <NVIC_EncodePriority>
 800835a:	4603      	mov	r3, r0
 800835c:	4619      	mov	r1, r3
 800835e:	2012      	movs	r0, #18
 8008360:	f7ff fdf0 	bl	8007f44 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 8008364:	2012      	movs	r0, #18
 8008366:	f7ff fdcd 	bl	8007f04 <__NVIC_EnableIRQ>

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800836a:	2300      	movs	r3, #0
 800836c:	64fb      	str	r3, [r7, #76]	; 0x4c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800836e:	2300      	movs	r3, #0
 8008370:	653b      	str	r3, [r7, #80]	; 0x50
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8008372:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008376:	657b      	str	r3, [r7, #84]	; 0x54
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8008378:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800837c:	4619      	mov	r1, r3
 800837e:	4857      	ldr	r0, [pc, #348]	; (80084dc <_Z12MX_ADC1_Initv+0x220>)
 8008380:	f7fa faa0 	bl	80028c4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8008384:	2300      	movs	r3, #0
 8008386:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8008388:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800838c:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800838e:	2300      	movs	r3, #0
 8008390:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8008392:	2300      	movs	r3, #0
 8008394:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8008396:	f44f 7380 	mov.w	r3, #256	; 0x100
 800839a:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800839c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80083a0:	4619      	mov	r1, r3
 80083a2:	484e      	ldr	r0, [pc, #312]	; (80084dc <_Z12MX_ADC1_Initv+0x220>)
 80083a4:	f7fa faba 	bl	800291c <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 80083a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80083ac:	484b      	ldr	r0, [pc, #300]	; (80084dc <_Z12MX_ADC1_Initv+0x220>)
 80083ae:	f7ff fe5b 	bl	8008068 <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC1);
 80083b2:	484a      	ldr	r0, [pc, #296]	; (80084dc <_Z12MX_ADC1_Initv+0x220>)
 80083b4:	f7ff ff27 	bl	8008206 <LL_ADC_DisableIT_EOCS>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 80083b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80083bc:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80083be:	2300      	movs	r3, #0
 80083c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80083c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80083c6:	4619      	mov	r1, r3
 80083c8:	4845      	ldr	r0, [pc, #276]	; (80084e0 <_Z12MX_ADC1_Initv+0x224>)
 80083ca:	f7fa fa33 	bl	8002834 <LL_ADC_CommonInit>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 80083ce:	4a45      	ldr	r2, [pc, #276]	; (80084e4 <_Z12MX_ADC1_Initv+0x228>)
 80083d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80083d4:	4841      	ldr	r0, [pc, #260]	; (80084dc <_Z12MX_ADC1_Initv+0x220>)
 80083d6:	f7ff fe14 	bl	8008002 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_28CYCLES);
 80083da:	2202      	movs	r2, #2
 80083dc:	4941      	ldr	r1, [pc, #260]	; (80084e4 <_Z12MX_ADC1_Initv+0x228>)
 80083de:	483f      	ldr	r0, [pc, #252]	; (80084dc <_Z12MX_ADC1_Initv+0x220>)
 80083e0:	f7ff feb7 	bl	8008152 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_12);
 80083e4:	4a40      	ldr	r2, [pc, #256]	; (80084e8 <_Z12MX_ADC1_Initv+0x22c>)
 80083e6:	f240 2105 	movw	r1, #517	; 0x205
 80083ea:	483c      	ldr	r0, [pc, #240]	; (80084dc <_Z12MX_ADC1_Initv+0x220>)
 80083ec:	f7ff fe09 	bl	8008002 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_28CYCLES);
 80083f0:	2202      	movs	r2, #2
 80083f2:	493d      	ldr	r1, [pc, #244]	; (80084e8 <_Z12MX_ADC1_Initv+0x22c>)
 80083f4:	4839      	ldr	r0, [pc, #228]	; (80084dc <_Z12MX_ADC1_Initv+0x220>)
 80083f6:	f7ff feac 	bl	8008152 <LL_ADC_SetChannelSamplingTime>
  /** Configure Injected Channel
  */
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 80083fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80083fe:	61bb      	str	r3, [r7, #24]
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 8008400:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008404:	61fb      	str	r3, [r7, #28]
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_1RANK;
 8008406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800840a:	623b      	str	r3, [r7, #32]
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 800840c:	2300      	movs	r3, #0
 800840e:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8008410:	f107 0318 	add.w	r3, r7, #24
 8008414:	4619      	mov	r1, r3
 8008416:	4831      	ldr	r0, [pc, #196]	; (80084dc <_Z12MX_ADC1_Initv+0x220>)
 8008418:	f7fa fac8 	bl	80029ac <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 800841c:	482f      	ldr	r0, [pc, #188]	; (80084dc <_Z12MX_ADC1_Initv+0x220>)
 800841e:	f7ff ff02 	bl	8008226 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_0);
 8008422:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008426:	2101      	movs	r1, #1
 8008428:	482c      	ldr	r0, [pc, #176]	; (80084dc <_Z12MX_ADC1_Initv+0x220>)
 800842a:	f7ff fe30 	bl	800808e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 800842e:	2200      	movs	r2, #0
 8008430:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008434:	4829      	ldr	r0, [pc, #164]	; (80084dc <_Z12MX_ADC1_Initv+0x220>)
 8008436:	f7ff fe8c 	bl	8008152 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_1, 0);
 800843a:	2200      	movs	r2, #0
 800843c:	2101      	movs	r1, #1
 800843e:	4827      	ldr	r0, [pc, #156]	; (80084dc <_Z12MX_ADC1_Initv+0x220>)
 8008440:	f7ff fe5f 	bl	8008102 <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8008444:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8008448:	4824      	ldr	r0, [pc, #144]	; (80084dc <_Z12MX_ADC1_Initv+0x220>)
 800844a:	f7ff fecb 	bl	80081e4 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 800844e:	f107 0318 	add.w	r3, r7, #24
 8008452:	4619      	mov	r1, r3
 8008454:	4821      	ldr	r0, [pc, #132]	; (80084dc <_Z12MX_ADC1_Initv+0x220>)
 8008456:	f7fa faa9 	bl	80029ac <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 800845a:	4820      	ldr	r0, [pc, #128]	; (80084dc <_Z12MX_ADC1_Initv+0x220>)
 800845c:	f7ff fee3 	bl	8008226 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_11);
 8008460:	4a22      	ldr	r2, [pc, #136]	; (80084ec <_Z12MX_ADC1_Initv+0x230>)
 8008462:	f241 1102 	movw	r1, #4354	; 0x1102
 8008466:	481d      	ldr	r0, [pc, #116]	; (80084dc <_Z12MX_ADC1_Initv+0x220>)
 8008468:	f7ff fe11 	bl	800808e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 800846c:	2200      	movs	r2, #0
 800846e:	491f      	ldr	r1, [pc, #124]	; (80084ec <_Z12MX_ADC1_Initv+0x230>)
 8008470:	481a      	ldr	r0, [pc, #104]	; (80084dc <_Z12MX_ADC1_Initv+0x220>)
 8008472:	f7ff fe6e 	bl	8008152 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_2, 0);
 8008476:	2200      	movs	r2, #0
 8008478:	f241 1102 	movw	r1, #4354	; 0x1102
 800847c:	4817      	ldr	r0, [pc, #92]	; (80084dc <_Z12MX_ADC1_Initv+0x220>)
 800847e:	f7ff fe40 	bl	8008102 <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8008482:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8008486:	4815      	ldr	r0, [pc, #84]	; (80084dc <_Z12MX_ADC1_Initv+0x220>)
 8008488:	f7ff feac 	bl	80081e4 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 800848c:	f107 0318 	add.w	r3, r7, #24
 8008490:	4619      	mov	r1, r3
 8008492:	4812      	ldr	r0, [pc, #72]	; (80084dc <_Z12MX_ADC1_Initv+0x220>)
 8008494:	f7fa fa8a 	bl	80029ac <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 8008498:	4810      	ldr	r0, [pc, #64]	; (80084dc <_Z12MX_ADC1_Initv+0x220>)
 800849a:	f7ff fec4 	bl	8008226 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_10);
 800849e:	220a      	movs	r2, #10
 80084a0:	f242 2103 	movw	r1, #8707	; 0x2203
 80084a4:	480d      	ldr	r0, [pc, #52]	; (80084dc <_Z12MX_ADC1_Initv+0x220>)
 80084a6:	f7ff fdf2 	bl	800808e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_3CYCLES);
 80084aa:	2200      	movs	r2, #0
 80084ac:	210a      	movs	r1, #10
 80084ae:	480b      	ldr	r0, [pc, #44]	; (80084dc <_Z12MX_ADC1_Initv+0x220>)
 80084b0:	f7ff fe4f 	bl	8008152 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_3, 0);
 80084b4:	2200      	movs	r2, #0
 80084b6:	f242 2103 	movw	r1, #8707	; 0x2203
 80084ba:	4808      	ldr	r0, [pc, #32]	; (80084dc <_Z12MX_ADC1_Initv+0x220>)
 80084bc:	f7ff fe21 	bl	8008102 <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 80084c0:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80084c4:	4805      	ldr	r0, [pc, #20]	; (80084dc <_Z12MX_ADC1_Initv+0x220>)
 80084c6:	f7ff fe8d 	bl	80081e4 <LL_ADC_INJ_StartConversionExtTrig>

}
 80084ca:	bf00      	nop
 80084cc:	3758      	adds	r7, #88	; 0x58
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	40020800 	.word	0x40020800
 80084d8:	40020000 	.word	0x40020000
 80084dc:	40012000 	.word	0x40012000
 80084e0:	40012300 	.word	0x40012300
 80084e4:	02300001 	.word	0x02300001
 80084e8:	0060000c 	.word	0x0060000c
 80084ec:	0030000b 	.word	0x0030000b

080084f0 <_Z12MX_ADC2_Initv>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b092      	sub	sp, #72	; 0x48
 80084f4:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80084f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80084fa:	2200      	movs	r2, #0
 80084fc:	601a      	str	r2, [r3, #0]
 80084fe:	605a      	str	r2, [r3, #4]
 8008500:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8008502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008506:	2200      	movs	r2, #0
 8008508:	601a      	str	r2, [r3, #0]
 800850a:	605a      	str	r2, [r3, #4]
 800850c:	609a      	str	r2, [r3, #8]
 800850e:	60da      	str	r2, [r3, #12]
 8008510:	611a      	str	r2, [r3, #16]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 8008512:	f107 0318 	add.w	r3, r7, #24
 8008516:	2200      	movs	r2, #0
 8008518:	601a      	str	r2, [r3, #0]
 800851a:	605a      	str	r2, [r3, #4]
 800851c:	609a      	str	r2, [r3, #8]
 800851e:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008520:	463b      	mov	r3, r7
 8008522:	2200      	movs	r2, #0
 8008524:	601a      	str	r2, [r3, #0]
 8008526:	605a      	str	r2, [r3, #4]
 8008528:	609a      	str	r2, [r3, #8]
 800852a:	60da      	str	r2, [r3, #12]
 800852c:	611a      	str	r2, [r3, #16]
 800852e:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC2);
 8008530:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008534:	f7ff fea0 	bl	8008278 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8008538:	2004      	movs	r0, #4
 800853a:	f7ff fe85 	bl	8008248 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800853e:	2001      	movs	r0, #1
 8008540:	f7ff fe82 	bl	8008248 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8008544:	2002      	movs	r0, #2
 8008546:	f7ff fe7f 	bl	8008248 <LL_AHB1_GRP1_EnableClock>
  PC0   ------> ADC2_IN10
  PC1   ------> ADC2_IN11
  PA0-WKUP   ------> ADC2_IN0
  PB1   ------> ADC2_IN9
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 800854a:	2303      	movs	r3, #3
 800854c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800854e:	2303      	movs	r3, #3
 8008550:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008552:	2300      	movs	r3, #0
 8008554:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008556:	463b      	mov	r3, r7
 8008558:	4619      	mov	r1, r3
 800855a:	4863      	ldr	r0, [pc, #396]	; (80086e8 <_Z12MX_ADC2_Initv+0x1f8>)
 800855c:	f7fa fc7f 	bl	8002e5e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8008560:	2301      	movs	r3, #1
 8008562:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8008564:	2303      	movs	r3, #3
 8008566:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008568:	2300      	movs	r3, #0
 800856a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800856c:	463b      	mov	r3, r7
 800856e:	4619      	mov	r1, r3
 8008570:	485e      	ldr	r0, [pc, #376]	; (80086ec <_Z12MX_ADC2_Initv+0x1fc>)
 8008572:	f7fa fc74 	bl	8002e5e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8008576:	2302      	movs	r3, #2
 8008578:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800857a:	2303      	movs	r3, #3
 800857c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800857e:	2300      	movs	r3, #0
 8008580:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008582:	463b      	mov	r3, r7
 8008584:	4619      	mov	r1, r3
 8008586:	485a      	ldr	r0, [pc, #360]	; (80086f0 <_Z12MX_ADC2_Initv+0x200>)
 8008588:	f7fa fc69 	bl	8002e5e <LL_GPIO_Init>

  /* ADC2 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 800858c:	f7ff fcac 	bl	8007ee8 <__NVIC_GetPriorityGrouping>
 8008590:	4603      	mov	r3, r0
 8008592:	2200      	movs	r2, #0
 8008594:	2102      	movs	r1, #2
 8008596:	4618      	mov	r0, r3
 8008598:	f7ff fd02 	bl	8007fa0 <NVIC_EncodePriority>
 800859c:	4603      	mov	r3, r0
 800859e:	4619      	mov	r1, r3
 80085a0:	2012      	movs	r0, #18
 80085a2:	f7ff fccf 	bl	8007f44 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 80085a6:	2012      	movs	r0, #18
 80085a8:	f7ff fcac 	bl	8007f04 <__NVIC_EnableIRQ>

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80085ac:	2300      	movs	r3, #0
 80085ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80085b0:	2300      	movs	r3, #0
 80085b2:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 80085b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085b8:	647b      	str	r3, [r7, #68]	; 0x44
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 80085ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80085be:	4619      	mov	r1, r3
 80085c0:	484c      	ldr	r0, [pc, #304]	; (80086f4 <_Z12MX_ADC2_Initv+0x204>)
 80085c2:	f7fa f97f 	bl	80028c4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80085c6:	2300      	movs	r3, #0
 80085c8:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80085ca:	2300      	movs	r3, #0
 80085cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80085ce:	2300      	movs	r3, #0
 80085d0:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80085d2:	2300      	movs	r3, #0
 80085d4:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 80085d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085da:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 80085dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80085e0:	4619      	mov	r1, r3
 80085e2:	4844      	ldr	r0, [pc, #272]	; (80086f4 <_Z12MX_ADC2_Initv+0x204>)
 80085e4:	f7fa f99a 	bl	800291c <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC2, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 80085e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80085ec:	4841      	ldr	r0, [pc, #260]	; (80086f4 <_Z12MX_ADC2_Initv+0x204>)
 80085ee:	f7ff fd3b 	bl	8008068 <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC2);
 80085f2:	4840      	ldr	r0, [pc, #256]	; (80086f4 <_Z12MX_ADC2_Initv+0x204>)
 80085f4:	f7ff fe07 	bl	8008206 <LL_ADC_DisableIT_EOCS>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_9);
 80085f8:	4a3f      	ldr	r2, [pc, #252]	; (80086f8 <_Z12MX_ADC2_Initv+0x208>)
 80085fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80085fe:	483d      	ldr	r0, [pc, #244]	; (80086f4 <_Z12MX_ADC2_Initv+0x204>)
 8008600:	f7ff fcff 	bl	8008002 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_3CYCLES);
 8008604:	2200      	movs	r2, #0
 8008606:	493c      	ldr	r1, [pc, #240]	; (80086f8 <_Z12MX_ADC2_Initv+0x208>)
 8008608:	483a      	ldr	r0, [pc, #232]	; (80086f4 <_Z12MX_ADC2_Initv+0x204>)
 800860a:	f7ff fda2 	bl	8008152 <LL_ADC_SetChannelSamplingTime>
  /** Configure Injected Channel
  */
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 800860e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008612:	61bb      	str	r3, [r7, #24]
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 8008614:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008618:	61fb      	str	r3, [r7, #28]
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_1RANK;
 800861a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800861e:	623b      	str	r3, [r7, #32]
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 8008620:	2300      	movs	r3, #0
 8008622:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 8008624:	f107 0318 	add.w	r3, r7, #24
 8008628:	4619      	mov	r1, r3
 800862a:	4832      	ldr	r0, [pc, #200]	; (80086f4 <_Z12MX_ADC2_Initv+0x204>)
 800862c:	f7fa f9be 	bl	80029ac <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 8008630:	4830      	ldr	r0, [pc, #192]	; (80086f4 <_Z12MX_ADC2_Initv+0x204>)
 8008632:	f7ff fdf8 	bl	8008226 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_0);
 8008636:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800863a:	2101      	movs	r1, #1
 800863c:	482d      	ldr	r0, [pc, #180]	; (80086f4 <_Z12MX_ADC2_Initv+0x204>)
 800863e:	f7ff fd26 	bl	800808e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 8008642:	2200      	movs	r2, #0
 8008644:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008648:	482a      	ldr	r0, [pc, #168]	; (80086f4 <_Z12MX_ADC2_Initv+0x204>)
 800864a:	f7ff fd82 	bl	8008152 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_1, 0);
 800864e:	2200      	movs	r2, #0
 8008650:	2101      	movs	r1, #1
 8008652:	4828      	ldr	r0, [pc, #160]	; (80086f4 <_Z12MX_ADC2_Initv+0x204>)
 8008654:	f7ff fd55 	bl	8008102 <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 8008658:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800865c:	4825      	ldr	r0, [pc, #148]	; (80086f4 <_Z12MX_ADC2_Initv+0x204>)
 800865e:	f7ff fdc1 	bl	80081e4 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel
  */
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 8008662:	f107 0318 	add.w	r3, r7, #24
 8008666:	4619      	mov	r1, r3
 8008668:	4822      	ldr	r0, [pc, #136]	; (80086f4 <_Z12MX_ADC2_Initv+0x204>)
 800866a:	f7fa f99f 	bl	80029ac <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 800866e:	4821      	ldr	r0, [pc, #132]	; (80086f4 <_Z12MX_ADC2_Initv+0x204>)
 8008670:	f7ff fdd9 	bl	8008226 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_11);
 8008674:	4a21      	ldr	r2, [pc, #132]	; (80086fc <_Z12MX_ADC2_Initv+0x20c>)
 8008676:	f241 1102 	movw	r1, #4354	; 0x1102
 800867a:	481e      	ldr	r0, [pc, #120]	; (80086f4 <_Z12MX_ADC2_Initv+0x204>)
 800867c:	f7ff fd07 	bl	800808e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 8008680:	2200      	movs	r2, #0
 8008682:	491e      	ldr	r1, [pc, #120]	; (80086fc <_Z12MX_ADC2_Initv+0x20c>)
 8008684:	481b      	ldr	r0, [pc, #108]	; (80086f4 <_Z12MX_ADC2_Initv+0x204>)
 8008686:	f7ff fd64 	bl	8008152 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_2, 0);
 800868a:	2200      	movs	r2, #0
 800868c:	f241 1102 	movw	r1, #4354	; 0x1102
 8008690:	4818      	ldr	r0, [pc, #96]	; (80086f4 <_Z12MX_ADC2_Initv+0x204>)
 8008692:	f7ff fd36 	bl	8008102 <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 8008696:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800869a:	4816      	ldr	r0, [pc, #88]	; (80086f4 <_Z12MX_ADC2_Initv+0x204>)
 800869c:	f7ff fda2 	bl	80081e4 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel
  */
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 80086a0:	f107 0318 	add.w	r3, r7, #24
 80086a4:	4619      	mov	r1, r3
 80086a6:	4813      	ldr	r0, [pc, #76]	; (80086f4 <_Z12MX_ADC2_Initv+0x204>)
 80086a8:	f7fa f980 	bl	80029ac <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 80086ac:	4811      	ldr	r0, [pc, #68]	; (80086f4 <_Z12MX_ADC2_Initv+0x204>)
 80086ae:	f7ff fdba 	bl	8008226 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_10);
 80086b2:	220a      	movs	r2, #10
 80086b4:	f242 2103 	movw	r1, #8707	; 0x2203
 80086b8:	480e      	ldr	r0, [pc, #56]	; (80086f4 <_Z12MX_ADC2_Initv+0x204>)
 80086ba:	f7ff fce8 	bl	800808e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_3CYCLES);
 80086be:	2200      	movs	r2, #0
 80086c0:	210a      	movs	r1, #10
 80086c2:	480c      	ldr	r0, [pc, #48]	; (80086f4 <_Z12MX_ADC2_Initv+0x204>)
 80086c4:	f7ff fd45 	bl	8008152 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_3, 0);
 80086c8:	2200      	movs	r2, #0
 80086ca:	f242 2103 	movw	r1, #8707	; 0x2203
 80086ce:	4809      	ldr	r0, [pc, #36]	; (80086f4 <_Z12MX_ADC2_Initv+0x204>)
 80086d0:	f7ff fd17 	bl	8008102 <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 80086d4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80086d8:	4806      	ldr	r0, [pc, #24]	; (80086f4 <_Z12MX_ADC2_Initv+0x204>)
 80086da:	f7ff fd83 	bl	80081e4 <LL_ADC_INJ_StartConversionExtTrig>

}
 80086de:	bf00      	nop
 80086e0:	3748      	adds	r7, #72	; 0x48
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	40020800 	.word	0x40020800
 80086ec:	40020000 	.word	0x40020000
 80086f0:	40020400 	.word	0x40020400
 80086f4:	40012100 	.word	0x40012100
 80086f8:	03b00009 	.word	0x03b00009
 80086fc:	0030000b 	.word	0x0030000b

08008700 <_Z12MX_ADC3_Initv>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8008706:	463b      	mov	r3, r7
 8008708:	2200      	movs	r2, #0
 800870a:	601a      	str	r2, [r3, #0]
 800870c:	605a      	str	r2, [r3, #4]
 800870e:	609a      	str	r2, [r3, #8]
 8008710:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8008712:	4b26      	ldr	r3, [pc, #152]	; (80087ac <_Z12MX_ADC3_Initv+0xac>)
 8008714:	4a26      	ldr	r2, [pc, #152]	; (80087b0 <_Z12MX_ADC3_Initv+0xb0>)
 8008716:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008718:	4b24      	ldr	r3, [pc, #144]	; (80087ac <_Z12MX_ADC3_Initv+0xac>)
 800871a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800871e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8008720:	4b22      	ldr	r3, [pc, #136]	; (80087ac <_Z12MX_ADC3_Initv+0xac>)
 8008722:	2200      	movs	r2, #0
 8008724:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8008726:	4b21      	ldr	r3, [pc, #132]	; (80087ac <_Z12MX_ADC3_Initv+0xac>)
 8008728:	2201      	movs	r2, #1
 800872a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800872c:	4b1f      	ldr	r3, [pc, #124]	; (80087ac <_Z12MX_ADC3_Initv+0xac>)
 800872e:	2200      	movs	r2, #0
 8008730:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8008732:	4b1e      	ldr	r3, [pc, #120]	; (80087ac <_Z12MX_ADC3_Initv+0xac>)
 8008734:	2200      	movs	r2, #0
 8008736:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800873a:	4b1c      	ldr	r3, [pc, #112]	; (80087ac <_Z12MX_ADC3_Initv+0xac>)
 800873c:	2200      	movs	r2, #0
 800873e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008740:	4b1a      	ldr	r3, [pc, #104]	; (80087ac <_Z12MX_ADC3_Initv+0xac>)
 8008742:	4a1c      	ldr	r2, [pc, #112]	; (80087b4 <_Z12MX_ADC3_Initv+0xb4>)
 8008744:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008746:	4b19      	ldr	r3, [pc, #100]	; (80087ac <_Z12MX_ADC3_Initv+0xac>)
 8008748:	2200      	movs	r2, #0
 800874a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800874c:	4b17      	ldr	r3, [pc, #92]	; (80087ac <_Z12MX_ADC3_Initv+0xac>)
 800874e:	2201      	movs	r2, #1
 8008750:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8008752:	4b16      	ldr	r3, [pc, #88]	; (80087ac <_Z12MX_ADC3_Initv+0xac>)
 8008754:	2200      	movs	r2, #0
 8008756:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800875a:	4b14      	ldr	r3, [pc, #80]	; (80087ac <_Z12MX_ADC3_Initv+0xac>)
 800875c:	2201      	movs	r2, #1
 800875e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8008760:	4812      	ldr	r0, [pc, #72]	; (80087ac <_Z12MX_ADC3_Initv+0xac>)
 8008762:	f7f8 fc83 	bl	800106c <HAL_ADC_Init>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	bf14      	ite	ne
 800876c:	2301      	movne	r3, #1
 800876e:	2300      	moveq	r3, #0
 8008770:	b2db      	uxtb	r3, r3
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <_Z12MX_ADC3_Initv+0x7a>
  {
	  ErrorHandler::ADC_Error_Handler();
 8008776:	f000 f81f 	bl	80087b8 <_ZN12ErrorHandler17ADC_Error_HandlerEv>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800877a:	230d      	movs	r3, #13
 800877c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800877e:	2301      	movs	r3, #1
 8008780:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8008782:	2300      	movs	r3, #0
 8008784:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8008786:	463b      	mov	r3, r7
 8008788:	4619      	mov	r1, r3
 800878a:	4808      	ldr	r0, [pc, #32]	; (80087ac <_Z12MX_ADC3_Initv+0xac>)
 800878c:	f7f8 fe10 	bl	80013b0 <HAL_ADC_ConfigChannel>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	bf14      	ite	ne
 8008796:	2301      	movne	r3, #1
 8008798:	2300      	moveq	r3, #0
 800879a:	b2db      	uxtb	r3, r3
 800879c:	2b00      	cmp	r3, #0
 800879e:	d001      	beq.n	80087a4 <_Z12MX_ADC3_Initv+0xa4>
  {
	  ErrorHandler::ADC_Error_Handler();
 80087a0:	f000 f80a 	bl	80087b8 <_ZN12ErrorHandler17ADC_Error_HandlerEv>
  }

}
 80087a4:	bf00      	nop
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	200031cc 	.word	0x200031cc
 80087b0:	40012200 	.word	0x40012200
 80087b4:	0f000001 	.word	0x0f000001

080087b8 <_ZN12ErrorHandler17ADC_Error_HandlerEv>:

ErrorHandler::~ErrorHandler() {
	// TODO Auto-generated destructor stub
}

void ErrorHandler::ADC_Error_Handler(){
 80087b8:	b480      	push	{r7}
 80087ba:	af00      	add	r7, sp, #0
	//ADC Error Handler
	  /* USER CODE BEGIN Error_Handler_Debug */
	while(1){}
 80087bc:	e7fe      	b.n	80087bc <_ZN12ErrorHandler17ADC_Error_HandlerEv+0x4>
	...

080087c0 <__NVIC_GetPriorityGrouping>:
{
 80087c0:	b480      	push	{r7}
 80087c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80087c4:	4b04      	ldr	r3, [pc, #16]	; (80087d8 <__NVIC_GetPriorityGrouping+0x18>)
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	0a1b      	lsrs	r3, r3, #8
 80087ca:	f003 0307 	and.w	r3, r3, #7
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr
 80087d8:	e000ed00 	.word	0xe000ed00

080087dc <__NVIC_EnableIRQ>:
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	4603      	mov	r3, r0
 80087e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80087e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	db0d      	blt.n	800880a <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80087ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	f003 021f 	and.w	r2, r3, #31
 80087f8:	4907      	ldr	r1, [pc, #28]	; (8008818 <__NVIC_EnableIRQ+0x3c>)
 80087fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087fe:	095b      	lsrs	r3, r3, #5
 8008800:	2001      	movs	r0, #1
 8008802:	fa00 f202 	lsl.w	r2, r0, r2
 8008806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800880a:	bf00      	nop
 800880c:	370c      	adds	r7, #12
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	e000e100 	.word	0xe000e100

0800881c <__NVIC_SetPriority>:
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	4603      	mov	r3, r0
 8008824:	6039      	str	r1, [r7, #0]
 8008826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800882c:	2b00      	cmp	r3, #0
 800882e:	db0c      	blt.n	800884a <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	b2db      	uxtb	r3, r3
 8008834:	4a0e      	ldr	r2, [pc, #56]	; (8008870 <__NVIC_SetPriority+0x54>)
 8008836:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800883a:	4608      	mov	r0, r1
 800883c:	011b      	lsls	r3, r3, #4
 800883e:	b2d9      	uxtb	r1, r3
 8008840:	1813      	adds	r3, r2, r0
 8008842:	460a      	mov	r2, r1
 8008844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008848:	e00c      	b.n	8008864 <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	b2da      	uxtb	r2, r3
 800884e:	4909      	ldr	r1, [pc, #36]	; (8008874 <__NVIC_SetPriority+0x58>)
 8008850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008854:	b2db      	uxtb	r3, r3
 8008856:	f003 030f 	and.w	r3, r3, #15
 800885a:	3b04      	subs	r3, #4
 800885c:	0112      	lsls	r2, r2, #4
 800885e:	b2d2      	uxtb	r2, r2
 8008860:	440b      	add	r3, r1
 8008862:	761a      	strb	r2, [r3, #24]
}
 8008864:	bf00      	nop
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr
 8008870:	e000e100 	.word	0xe000e100
 8008874:	e000ed00 	.word	0xe000ed00

08008878 <NVIC_EncodePriority>:
{
 8008878:	b480      	push	{r7}
 800887a:	b089      	sub	sp, #36	; 0x24
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f003 0307 	and.w	r3, r3, #7
 800888a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	f1c3 0307 	rsb	r3, r3, #7
 8008892:	2b04      	cmp	r3, #4
 8008894:	bf28      	it	cs
 8008896:	2304      	movcs	r3, #4
 8008898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	3304      	adds	r3, #4
 800889e:	2b06      	cmp	r3, #6
 80088a0:	d902      	bls.n	80088a8 <NVIC_EncodePriority+0x30>
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	3b03      	subs	r3, #3
 80088a6:	e000      	b.n	80088aa <NVIC_EncodePriority+0x32>
 80088a8:	2300      	movs	r3, #0
 80088aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	2201      	movs	r2, #1
 80088b0:	fa02 f303 	lsl.w	r3, r2, r3
 80088b4:	1e5a      	subs	r2, r3, #1
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	401a      	ands	r2, r3
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	2101      	movs	r1, #1
 80088c2:	fa01 f303 	lsl.w	r3, r1, r3
 80088c6:	1e59      	subs	r1, r3, #1
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	400b      	ands	r3, r1
         );
 80088cc:	4313      	orrs	r3, r2
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3724      	adds	r7, #36	; 0x24
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
	...

080088dc <LL_SYSCFG_SetEXTISource>:
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80088e6:	4a13      	ldr	r2, [pc, #76]	; (8008934 <LL_SYSCFG_SetEXTISource+0x58>)
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	3302      	adds	r3, #2
 80088ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	0c1b      	lsrs	r3, r3, #16
 80088f6:	43db      	mvns	r3, r3
 80088f8:	ea02 0103 	and.w	r1, r2, r3
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	0c1b      	lsrs	r3, r3, #16
 8008900:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	fa93 f3a3 	rbit	r3, r3
 8008908:	60bb      	str	r3, [r7, #8]
  return result;
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	fab3 f383 	clz	r3, r3
 8008910:	b2db      	uxtb	r3, r3
 8008912:	461a      	mov	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	fa03 f202 	lsl.w	r2, r3, r2
 800891a:	4806      	ldr	r0, [pc, #24]	; (8008934 <LL_SYSCFG_SetEXTISource+0x58>)
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	b2db      	uxtb	r3, r3
 8008920:	430a      	orrs	r2, r1
 8008922:	3302      	adds	r3, #2
 8008924:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8008928:	bf00      	nop
 800892a:	3714      	adds	r7, #20
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr
 8008934:	40013800 	.word	0x40013800

08008938 <LL_GPIO_SetPinMode>:
{
 8008938:	b480      	push	{r7}
 800893a:	b089      	sub	sp, #36	; 0x24
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	fa93 f3a3 	rbit	r3, r3
 8008952:	613b      	str	r3, [r7, #16]
  return result;
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	fab3 f383 	clz	r3, r3
 800895a:	b2db      	uxtb	r3, r3
 800895c:	005b      	lsls	r3, r3, #1
 800895e:	2103      	movs	r1, #3
 8008960:	fa01 f303 	lsl.w	r3, r1, r3
 8008964:	43db      	mvns	r3, r3
 8008966:	401a      	ands	r2, r3
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	fa93 f3a3 	rbit	r3, r3
 8008972:	61bb      	str	r3, [r7, #24]
  return result;
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	fab3 f383 	clz	r3, r3
 800897a:	b2db      	uxtb	r3, r3
 800897c:	005b      	lsls	r3, r3, #1
 800897e:	6879      	ldr	r1, [r7, #4]
 8008980:	fa01 f303 	lsl.w	r3, r1, r3
 8008984:	431a      	orrs	r2, r3
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	601a      	str	r2, [r3, #0]
}
 800898a:	bf00      	nop
 800898c:	3724      	adds	r7, #36	; 0x24
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr

08008996 <LL_GPIO_SetPinPull>:
{
 8008996:	b480      	push	{r7}
 8008998:	b089      	sub	sp, #36	; 0x24
 800899a:	af00      	add	r7, sp, #0
 800899c:	60f8      	str	r0, [r7, #12]
 800899e:	60b9      	str	r1, [r7, #8]
 80089a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	68da      	ldr	r2, [r3, #12]
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	fa93 f3a3 	rbit	r3, r3
 80089b0:	613b      	str	r3, [r7, #16]
  return result;
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	fab3 f383 	clz	r3, r3
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	005b      	lsls	r3, r3, #1
 80089bc:	2103      	movs	r1, #3
 80089be:	fa01 f303 	lsl.w	r3, r1, r3
 80089c2:	43db      	mvns	r3, r3
 80089c4:	401a      	ands	r2, r3
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	fa93 f3a3 	rbit	r3, r3
 80089d0:	61bb      	str	r3, [r7, #24]
  return result;
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	fab3 f383 	clz	r3, r3
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	005b      	lsls	r3, r3, #1
 80089dc:	6879      	ldr	r1, [r7, #4]
 80089de:	fa01 f303 	lsl.w	r3, r1, r3
 80089e2:	431a      	orrs	r2, r3
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	60da      	str	r2, [r3, #12]
}
 80089e8:	bf00      	nop
 80089ea:	3724      	adds	r7, #36	; 0x24
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <LL_GPIO_ResetOutputPin>:
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	041a      	lsls	r2, r3, #16
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	619a      	str	r2, [r3, #24]
}
 8008a06:	bf00      	nop
 8008a08:	370c      	adds	r7, #12
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
	...

08008a14 <LL_AHB1_GRP1_EnableClock>:
{
 8008a14:	b480      	push	{r7}
 8008a16:	b085      	sub	sp, #20
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8008a1c:	4b08      	ldr	r3, [pc, #32]	; (8008a40 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	4907      	ldr	r1, [pc, #28]	; (8008a40 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008a24:	4313      	orrs	r3, r2
 8008a26:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8008a28:	4b05      	ldr	r3, [pc, #20]	; (8008a40 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008a2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4013      	ands	r3, r2
 8008a30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008a32:	68fb      	ldr	r3, [r7, #12]
}
 8008a34:	bf00      	nop
 8008a36:	3714      	adds	r7, #20
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr
 8008a40:	40023800 	.word	0x40023800

08008a44 <_ZN8GPIOInit4InitEv>:
	// TODO Auto-generated destructor stub
}

void MX_GPIO_Init(void);

void GPIOInit::Init() {
 8008a44:	b580      	push	{r7, lr}
 8008a46:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8008a48:	f000 f802 	bl	8008a50 <_Z12MX_GPIO_Initv>
}
 8008a4c:	bf00      	nop
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <_Z12MX_GPIO_Initv>:

void MX_GPIO_Init(void)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b088      	sub	sp, #32
 8008a54:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8008a56:	f107 0318 	add.w	r3, r7, #24
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	601a      	str	r2, [r3, #0]
 8008a5e:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a60:	463b      	mov	r3, r7
 8008a62:	2200      	movs	r2, #0
 8008a64:	601a      	str	r2, [r3, #0]
 8008a66:	605a      	str	r2, [r3, #4]
 8008a68:	609a      	str	r2, [r3, #8]
 8008a6a:	60da      	str	r2, [r3, #12]
 8008a6c:	611a      	str	r2, [r3, #16]
 8008a6e:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8008a70:	2004      	movs	r0, #4
 8008a72:	f7ff ffcf 	bl	8008a14 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8008a76:	2080      	movs	r0, #128	; 0x80
 8008a78:	f7ff ffcc 	bl	8008a14 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8008a7c:	2001      	movs	r0, #1
 8008a7e:	f7ff ffc9 	bl	8008a14 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8008a82:	2002      	movs	r0, #2
 8008a84:	f7ff ffc6 	bl	8008a14 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8008a88:	2120      	movs	r1, #32
 8008a8a:	482c      	ldr	r0, [pc, #176]	; (8008b3c <_Z12MX_GPIO_Initv+0xec>)
 8008a8c:	f7ff ffb2 	bl	80089f4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12);
 8008a90:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8008a94:	482a      	ldr	r0, [pc, #168]	; (8008b40 <_Z12MX_GPIO_Initv+0xf0>)
 8008a96:	f7ff ffad 	bl	80089f4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8008a9a:	492a      	ldr	r1, [pc, #168]	; (8008b44 <_Z12MX_GPIO_Initv+0xf4>)
 8008a9c:	2002      	movs	r0, #2
 8008a9e:	f7ff ff1d 	bl	80088dc <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8008aa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008aa6:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8008aac:	2300      	movs	r3, #0
 8008aae:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8008ab0:	2302      	movs	r3, #2
 8008ab2:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8008ab4:	f107 0318 	add.w	r3, r7, #24
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7fa f84f 	bl	8002b5c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008ac4:	481e      	ldr	r0, [pc, #120]	; (8008b40 <_Z12MX_GPIO_Initv+0xf0>)
 8008ac6:	f7ff ff66 	bl	8008996 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8008aca:	2200      	movs	r2, #0
 8008acc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008ad0:	481b      	ldr	r0, [pc, #108]	; (8008b40 <_Z12MX_GPIO_Initv+0xf0>)
 8008ad2:	f7ff ff31 	bl	8008938 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8008ad6:	2320      	movs	r3, #32
 8008ad8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008ada:	2301      	movs	r3, #1
 8008adc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8008aea:	463b      	mov	r3, r7
 8008aec:	4619      	mov	r1, r3
 8008aee:	4813      	ldr	r0, [pc, #76]	; (8008b3c <_Z12MX_GPIO_Initv+0xec>)
 8008af0:	f7fa f9b5 	bl	8002e5e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8008af4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008af8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008afa:	2301      	movs	r3, #1
 8008afc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8008afe:	2300      	movs	r3, #0
 8008b00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008b02:	2300      	movs	r3, #0
 8008b04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008b06:	2300      	movs	r3, #0
 8008b08:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b0a:	463b      	mov	r3, r7
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	480c      	ldr	r0, [pc, #48]	; (8008b40 <_Z12MX_GPIO_Initv+0xf0>)
 8008b10:	f7fa f9a5 	bl	8002e5e <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008b14:	f7ff fe54 	bl	80087c0 <__NVIC_GetPriorityGrouping>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	2100      	movs	r1, #0
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7ff feaa 	bl	8008878 <NVIC_EncodePriority>
 8008b24:	4603      	mov	r3, r0
 8008b26:	4619      	mov	r1, r3
 8008b28:	2028      	movs	r0, #40	; 0x28
 8008b2a:	f7ff fe77 	bl	800881c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008b2e:	2028      	movs	r0, #40	; 0x28
 8008b30:	f7ff fe54 	bl	80087dc <__NVIC_EnableIRQ>

}
 8008b34:	bf00      	nop
 8008b36:	3720      	adds	r7, #32
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	40020000 	.word	0x40020000
 8008b40:	40020800 	.word	0x40020800
 8008b44:	00f00003 	.word	0x00f00003

08008b48 <LL_TIM_EnableCounter>:
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f043 0201 	orr.w	r2, r3, #1
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	601a      	str	r2, [r3, #0]
}
 8008b5c:	bf00      	nop
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <LL_TIM_SetAutoReload>:
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8008b72:	683a      	ldr	r2, [r7, #0]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <LL_TIM_CC_EnableChannel>:
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a1a      	ldr	r2, [r3, #32]
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	431a      	orrs	r2, r3
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	621a      	str	r2, [r3, #32]
}
 8008b9a:	bf00      	nop
 8008b9c:	370c      	adds	r7, #12
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr

08008ba6 <LL_TIM_EnableAllOutputs>:
{
 8008ba6:	b480      	push	{r7}
 8008ba8:	b083      	sub	sp, #12
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	645a      	str	r2, [r3, #68]	; 0x44
}
 8008bba:	bf00      	nop
 8008bbc:	370c      	adds	r7, #12
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr

08008bc6 <_ZN3PWM6setTIMEP11TIM_TypeDef>:


#include "PWM.hpp"


void PWM::setTIM(TIM_TypeDef* pTIMx){
 8008bc6:	b480      	push	{r7}
 8008bc8:	b083      	sub	sp, #12
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
 8008bce:	6039      	str	r1, [r7, #0]
	mTIMx = pTIMx;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	683a      	ldr	r2, [r7, #0]
 8008bd4:	601a      	str	r2, [r3, #0]
}
 8008bd6:	bf00      	nop
 8008bd8:	370c      	adds	r7, #12
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr

08008be2 <_ZN3PWM5setCHEi>:

//void PWM::setCH(__IO uint32_t pCCR);

void PWM::setCH(int pCH){
 8008be2:	b480      	push	{r7}
 8008be4:	b083      	sub	sp, #12
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	6039      	str	r1, [r7, #0]
	mCH = pCH;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	683a      	ldr	r2, [r7, #0]
 8008bf0:	605a      	str	r2, [r3, #4]
}
 8008bf2:	bf00      	nop
 8008bf4:	370c      	adds	r7, #12
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr

08008bfe <_ZN3PWM5fInitEi>:
	LL_TIM_EnableAllOutputs(mTIMx);// need
	//PWM TIM Init end

}

void PWM::fInit(int pTimReload){
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b082      	sub	sp, #8
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
 8008c06:	6039      	str	r1, [r7, #0]

	mTimReload = pTimReload;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	683a      	ldr	r2, [r7, #0]
 8008c0c:	609a      	str	r2, [r3, #8]

	if(mCH==0){//error check
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d100      	bne.n	8008c18 <_ZN3PWM5fInitEi+0x1a>
		while(1){}
 8008c16:	e7fe      	b.n	8008c16 <_ZN3PWM5fInitEi+0x18>
	}

	//mREG Init
	if (mCH == 1){
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d105      	bne.n	8008c2c <_ZN3PWM5fInitEi+0x2e>
		mREG=&(mTIMx->CCR1);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 2){
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	2b02      	cmp	r3, #2
 8008c32:	d105      	bne.n	8008c40 <_ZN3PWM5fInitEi+0x42>
		mREG=&(mTIMx->CCR2);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 3){
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	2b03      	cmp	r3, #3
 8008c46:	d105      	bne.n	8008c54 <_ZN3PWM5fInitEi+0x56>
		mREG=&(mTIMx->CCR3);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 4){
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	2b04      	cmp	r3, #4
 8008c5a:	d105      	bne.n	8008c68 <_ZN3PWM5fInitEi+0x6a>
		mREG=&(mTIMx->CCR4);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	60da      	str	r2, [r3, #12]
	}

	if(mREG==NULL){//error check
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d100      	bne.n	8008c72 <_ZN3PWM5fInitEi+0x74>
		while(1){}
 8008c70:	e7fe      	b.n	8008c70 <_ZN3PWM5fInitEi+0x72>
	}
	//mREG Init end

	//PWM Channel Init
	if(mTIMx==NULL){//error check
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d100      	bne.n	8008c7c <_ZN3PWM5fInitEi+0x7e>
		while(1){}
 8008c7a:	e7fe      	b.n	8008c7a <_ZN3PWM5fInitEi+0x7c>
	}
	if (mCH == 1){
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d105      	bne.n	8008c90 <_ZN3PWM5fInitEi+0x92>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH1);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2101      	movs	r1, #1
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7ff ff7a 	bl	8008b84 <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 2){
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d105      	bne.n	8008ca4 <_ZN3PWM5fInitEi+0xa6>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH2);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2110      	movs	r1, #16
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7ff ff70 	bl	8008b84 <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 3){
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	2b03      	cmp	r3, #3
 8008caa:	d106      	bne.n	8008cba <_ZN3PWM5fInitEi+0xbc>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH3);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7ff ff65 	bl	8008b84 <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 4){
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	2b04      	cmp	r3, #4
 8008cc0:	d106      	bne.n	8008cd0 <_ZN3PWM5fInitEi+0xd2>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH4);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7ff ff5a 	bl	8008b84 <LL_TIM_CC_EnableChannel>
	}
	//PWM Channel Init end

	//PWM TIM Init
	LL_TIM_EnableCounter(mTIMx);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7ff ff37 	bl	8008b48 <LL_TIM_EnableCounter>

	//auto reload Init
	LL_TIM_SetAutoReload(mTIMx, pTimReload);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	683a      	ldr	r2, [r7, #0]
 8008ce0:	4611      	mov	r1, r2
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7ff ff40 	bl	8008b68 <LL_TIM_SetAutoReload>

	//LL_TIM_GenerateEvent_UPDATE(TIM1);//
	LL_TIM_EnableAllOutputs(mTIMx);// need
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7ff ff5a 	bl	8008ba6 <LL_TIM_EnableAllOutputs>
	//PWM TIM Init end

}
 8008cf2:	bf00      	nop
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <_ZN3PWM6f2DutyEf>:
void PWM::fDuty(float pfDuty){
	int pDuty = pfDuty * (float)mTimReload;
	WRITE_REG(*mREG, pDuty);
}

void PWM::f2Duty(float pfDuty){
 8008cfa:	b480      	push	{r7}
 8008cfc:	b085      	sub	sp, #20
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	ed87 0a00 	vstr	s0, [r7]
	int pDuty = (pfDuty + 1)/2 * (float)mTimReload;
 8008d06:	edd7 7a00 	vldr	s15, [r7]
 8008d0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008d12:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008d16:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	ee07 3a90 	vmov	s15, r3
 8008d22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d2e:	ee17 3a90 	vmov	r3, s15
 8008d32:	60fb      	str	r3, [r7, #12]
	WRITE_REG(*mREG, pDuty);
 8008d34:	68fa      	ldr	r2, [r7, #12]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	601a      	str	r2, [r3, #0]
}
 8008d3c:	bf00      	nop
 8008d3e:	3714      	adds	r7, #20
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <__NVIC_GetPriorityGrouping>:
{
 8008d48:	b480      	push	{r7}
 8008d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008d4c:	4b04      	ldr	r3, [pc, #16]	; (8008d60 <__NVIC_GetPriorityGrouping+0x18>)
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	0a1b      	lsrs	r3, r3, #8
 8008d52:	f003 0307 	and.w	r3, r3, #7
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr
 8008d60:	e000ed00 	.word	0xe000ed00

08008d64 <__NVIC_EnableIRQ>:
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	db0d      	blt.n	8008d92 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	f003 021f 	and.w	r2, r3, #31
 8008d80:	4907      	ldr	r1, [pc, #28]	; (8008da0 <__NVIC_EnableIRQ+0x3c>)
 8008d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d86:	095b      	lsrs	r3, r3, #5
 8008d88:	2001      	movs	r0, #1
 8008d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8008d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008d92:	bf00      	nop
 8008d94:	370c      	adds	r7, #12
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	e000e100 	.word	0xe000e100

08008da4 <__NVIC_SetPriority>:
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	4603      	mov	r3, r0
 8008dac:	6039      	str	r1, [r7, #0]
 8008dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	db0c      	blt.n	8008dd2 <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	4a0e      	ldr	r2, [pc, #56]	; (8008df8 <__NVIC_SetPriority+0x54>)
 8008dbe:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8008dc2:	4608      	mov	r0, r1
 8008dc4:	011b      	lsls	r3, r3, #4
 8008dc6:	b2d9      	uxtb	r1, r3
 8008dc8:	1813      	adds	r3, r2, r0
 8008dca:	460a      	mov	r2, r1
 8008dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008dd0:	e00c      	b.n	8008dec <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	b2da      	uxtb	r2, r3
 8008dd6:	4909      	ldr	r1, [pc, #36]	; (8008dfc <__NVIC_SetPriority+0x58>)
 8008dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	f003 030f 	and.w	r3, r3, #15
 8008de2:	3b04      	subs	r3, #4
 8008de4:	0112      	lsls	r2, r2, #4
 8008de6:	b2d2      	uxtb	r2, r2
 8008de8:	440b      	add	r3, r1
 8008dea:	761a      	strb	r2, [r3, #24]
}
 8008dec:	bf00      	nop
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr
 8008df8:	e000e100 	.word	0xe000e100
 8008dfc:	e000ed00 	.word	0xe000ed00

08008e00 <NVIC_EncodePriority>:
{
 8008e00:	b480      	push	{r7}
 8008e02:	b089      	sub	sp, #36	; 0x24
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f003 0307 	and.w	r3, r3, #7
 8008e12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	f1c3 0307 	rsb	r3, r3, #7
 8008e1a:	2b04      	cmp	r3, #4
 8008e1c:	bf28      	it	cs
 8008e1e:	2304      	movcs	r3, #4
 8008e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	3304      	adds	r3, #4
 8008e26:	2b06      	cmp	r3, #6
 8008e28:	d902      	bls.n	8008e30 <NVIC_EncodePriority+0x30>
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	3b03      	subs	r3, #3
 8008e2e:	e000      	b.n	8008e32 <NVIC_EncodePriority+0x32>
 8008e30:	2300      	movs	r3, #0
 8008e32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	2201      	movs	r2, #1
 8008e38:	fa02 f303 	lsl.w	r3, r2, r3
 8008e3c:	1e5a      	subs	r2, r3, #1
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	401a      	ands	r2, r3
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	2101      	movs	r1, #1
 8008e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8008e4e:	1e59      	subs	r1, r3, #1
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	400b      	ands	r3, r1
         );
 8008e54:	4313      	orrs	r3, r2
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3724      	adds	r7, #36	; 0x24
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr

08008e62 <LL_TIM_DisableARRPreload>:
{
 8008e62:	b480      	push	{r7}
 8008e64:	b083      	sub	sp, #12
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	601a      	str	r2, [r3, #0]
}
 8008e76:	bf00      	nop
 8008e78:	370c      	adds	r7, #12
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
	...

08008e84 <LL_TIM_OC_DisableFast>:
{
 8008e84:	b4b0      	push	{r4, r5, r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d01c      	beq.n	8008ece <LL_TIM_OC_DisableFast+0x4a>
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	2b04      	cmp	r3, #4
 8008e98:	d017      	beq.n	8008eca <LL_TIM_OC_DisableFast+0x46>
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	2b10      	cmp	r3, #16
 8008e9e:	d012      	beq.n	8008ec6 <LL_TIM_OC_DisableFast+0x42>
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	2b40      	cmp	r3, #64	; 0x40
 8008ea4:	d00d      	beq.n	8008ec2 <LL_TIM_OC_DisableFast+0x3e>
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eac:	d007      	beq.n	8008ebe <LL_TIM_OC_DisableFast+0x3a>
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eb4:	d101      	bne.n	8008eba <LL_TIM_OC_DisableFast+0x36>
 8008eb6:	2305      	movs	r3, #5
 8008eb8:	e00a      	b.n	8008ed0 <LL_TIM_OC_DisableFast+0x4c>
 8008eba:	2306      	movs	r3, #6
 8008ebc:	e008      	b.n	8008ed0 <LL_TIM_OC_DisableFast+0x4c>
 8008ebe:	2304      	movs	r3, #4
 8008ec0:	e006      	b.n	8008ed0 <LL_TIM_OC_DisableFast+0x4c>
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	e004      	b.n	8008ed0 <LL_TIM_OC_DisableFast+0x4c>
 8008ec6:	2302      	movs	r3, #2
 8008ec8:	e002      	b.n	8008ed0 <LL_TIM_OC_DisableFast+0x4c>
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e000      	b.n	8008ed0 <LL_TIM_OC_DisableFast+0x4c>
 8008ece:	2300      	movs	r3, #0
 8008ed0:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	3318      	adds	r3, #24
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	4629      	mov	r1, r5
 8008eda:	4b09      	ldr	r3, [pc, #36]	; (8008f00 <LL_TIM_OC_DisableFast+0x7c>)
 8008edc:	5c5b      	ldrb	r3, [r3, r1]
 8008ede:	4413      	add	r3, r2
 8008ee0:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8008ee2:	6822      	ldr	r2, [r4, #0]
 8008ee4:	4629      	mov	r1, r5
 8008ee6:	4b07      	ldr	r3, [pc, #28]	; (8008f04 <LL_TIM_OC_DisableFast+0x80>)
 8008ee8:	5c5b      	ldrb	r3, [r3, r1]
 8008eea:	4619      	mov	r1, r3
 8008eec:	2304      	movs	r3, #4
 8008eee:	408b      	lsls	r3, r1
 8008ef0:	43db      	mvns	r3, r3
 8008ef2:	4013      	ands	r3, r2
 8008ef4:	6023      	str	r3, [r4, #0]
}
 8008ef6:	bf00      	nop
 8008ef8:	370c      	adds	r7, #12
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bcb0      	pop	{r4, r5, r7}
 8008efe:	4770      	bx	lr
 8008f00:	0800cb1c 	.word	0x0800cb1c
 8008f04:	0800cb24 	.word	0x0800cb24

08008f08 <LL_TIM_OC_EnablePreload>:
{
 8008f08:	b4b0      	push	{r4, r5, r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d01c      	beq.n	8008f52 <LL_TIM_OC_EnablePreload+0x4a>
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	2b04      	cmp	r3, #4
 8008f1c:	d017      	beq.n	8008f4e <LL_TIM_OC_EnablePreload+0x46>
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	2b10      	cmp	r3, #16
 8008f22:	d012      	beq.n	8008f4a <LL_TIM_OC_EnablePreload+0x42>
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	2b40      	cmp	r3, #64	; 0x40
 8008f28:	d00d      	beq.n	8008f46 <LL_TIM_OC_EnablePreload+0x3e>
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f30:	d007      	beq.n	8008f42 <LL_TIM_OC_EnablePreload+0x3a>
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f38:	d101      	bne.n	8008f3e <LL_TIM_OC_EnablePreload+0x36>
 8008f3a:	2305      	movs	r3, #5
 8008f3c:	e00a      	b.n	8008f54 <LL_TIM_OC_EnablePreload+0x4c>
 8008f3e:	2306      	movs	r3, #6
 8008f40:	e008      	b.n	8008f54 <LL_TIM_OC_EnablePreload+0x4c>
 8008f42:	2304      	movs	r3, #4
 8008f44:	e006      	b.n	8008f54 <LL_TIM_OC_EnablePreload+0x4c>
 8008f46:	2303      	movs	r3, #3
 8008f48:	e004      	b.n	8008f54 <LL_TIM_OC_EnablePreload+0x4c>
 8008f4a:	2302      	movs	r3, #2
 8008f4c:	e002      	b.n	8008f54 <LL_TIM_OC_EnablePreload+0x4c>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e000      	b.n	8008f54 <LL_TIM_OC_EnablePreload+0x4c>
 8008f52:	2300      	movs	r3, #0
 8008f54:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	3318      	adds	r3, #24
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	4629      	mov	r1, r5
 8008f5e:	4b09      	ldr	r3, [pc, #36]	; (8008f84 <LL_TIM_OC_EnablePreload+0x7c>)
 8008f60:	5c5b      	ldrb	r3, [r3, r1]
 8008f62:	4413      	add	r3, r2
 8008f64:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008f66:	6822      	ldr	r2, [r4, #0]
 8008f68:	4629      	mov	r1, r5
 8008f6a:	4b07      	ldr	r3, [pc, #28]	; (8008f88 <LL_TIM_OC_EnablePreload+0x80>)
 8008f6c:	5c5b      	ldrb	r3, [r3, r1]
 8008f6e:	4619      	mov	r1, r3
 8008f70:	2308      	movs	r3, #8
 8008f72:	408b      	lsls	r3, r1
 8008f74:	4313      	orrs	r3, r2
 8008f76:	6023      	str	r3, [r4, #0]
}
 8008f78:	bf00      	nop
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bcb0      	pop	{r4, r5, r7}
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	0800cb1c 	.word	0x0800cb1c
 8008f88:	0800cb24 	.word	0x0800cb24

08008f8c <LL_TIM_SetTriggerOutput>:
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	431a      	orrs	r2, r3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	605a      	str	r2, [r3, #4]
}
 8008fa6:	bf00      	nop
 8008fa8:	370c      	adds	r7, #12
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr

08008fb2 <LL_TIM_SetSlaveMode>:
{
 8008fb2:	b480      	push	{r7}
 8008fb4:	b083      	sub	sp, #12
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
 8008fba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	f023 0207 	bic.w	r2, r3, #7
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	431a      	orrs	r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	609a      	str	r2, [r3, #8]
}
 8008fcc:	bf00      	nop
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <LL_TIM_SetTriggerInput>:
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	431a      	orrs	r2, r3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	609a      	str	r2, [r3, #8]
}
 8008ff2:	bf00      	nop
 8008ff4:	370c      	adds	r7, #12
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr

08008ffe <LL_TIM_DisableMasterSlaveMode>:
{
 8008ffe:	b480      	push	{r7}
 8009000:	b083      	sub	sp, #12
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	609a      	str	r2, [r3, #8]
}
 8009012:	bf00      	nop
 8009014:	370c      	adds	r7, #12
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <LL_TIM_DisableIT_TRIG>:
{
 800901e:	b480      	push	{r7}
 8009020:	b083      	sub	sp, #12
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TIE);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	60da      	str	r2, [r3, #12]
}
 8009032:	bf00      	nop
 8009034:	370c      	adds	r7, #12
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr

0800903e <LL_TIM_DisableDMAReq_TRIG>:
{
 800903e:	b480      	push	{r7}
 8009040:	b083      	sub	sp, #12
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TDE);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	60da      	str	r2, [r3, #12]
}
 8009052:	bf00      	nop
 8009054:	370c      	adds	r7, #12
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr
	...

08009060 <LL_AHB1_GRP1_EnableClock>:
{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8009068:	4b08      	ldr	r3, [pc, #32]	; (800908c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800906a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4907      	ldr	r1, [pc, #28]	; (800908c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8009070:	4313      	orrs	r3, r2
 8009072:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8009074:	4b05      	ldr	r3, [pc, #20]	; (800908c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8009076:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	4013      	ands	r3, r2
 800907c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800907e:	68fb      	ldr	r3, [r7, #12]
}
 8009080:	bf00      	nop
 8009082:	3714      	adds	r7, #20
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr
 800908c:	40023800 	.word	0x40023800

08009090 <LL_APB2_GRP1_EnableClock>:
{
 8009090:	b480      	push	{r7}
 8009092:	b085      	sub	sp, #20
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8009098:	4b08      	ldr	r3, [pc, #32]	; (80090bc <LL_APB2_GRP1_EnableClock+0x2c>)
 800909a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4907      	ldr	r1, [pc, #28]	; (80090bc <LL_APB2_GRP1_EnableClock+0x2c>)
 80090a0:	4313      	orrs	r3, r2
 80090a2:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80090a4:	4b05      	ldr	r3, [pc, #20]	; (80090bc <LL_APB2_GRP1_EnableClock+0x2c>)
 80090a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4013      	ands	r3, r2
 80090ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80090ae:	68fb      	ldr	r3, [r7, #12]
}
 80090b0:	bf00      	nop
 80090b2:	3714      	adds	r7, #20
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr
 80090bc:	40023800 	.word	0x40023800

080090c0 <_ZN7TIMInit4InitEv>:
}

void MX_TIM1_Init(void);


void TIMInit::Init() {
 80090c0:	b580      	push	{r7, lr}
 80090c2:	af00      	add	r7, sp, #0
	MX_TIM1_Init();
 80090c4:	f000 f802 	bl	80090cc <_Z12MX_TIM1_Initv>
}
 80090c8:	bf00      	nop
 80090ca:	bd80      	pop	{r7, pc}

080090cc <_Z12MX_TIM1_Initv>:

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b09a      	sub	sp, #104	; 0x68
 80090d0:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80090d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80090d6:	2200      	movs	r2, #0
 80090d8:	601a      	str	r2, [r3, #0]
 80090da:	605a      	str	r2, [r3, #4]
 80090dc:	609a      	str	r2, [r3, #8]
 80090de:	60da      	str	r2, [r3, #12]
 80090e0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80090e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80090e6:	2220      	movs	r2, #32
 80090e8:	2100      	movs	r1, #0
 80090ea:	4618      	mov	r0, r3
 80090ec:	f001 fbd2 	bl	800a894 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 80090f0:	f107 031c 	add.w	r3, r7, #28
 80090f4:	2200      	movs	r2, #0
 80090f6:	601a      	str	r2, [r3, #0]
 80090f8:	605a      	str	r2, [r3, #4]
 80090fa:	609a      	str	r2, [r3, #8]
 80090fc:	60da      	str	r2, [r3, #12]
 80090fe:	611a      	str	r2, [r3, #16]
 8009100:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009102:	1d3b      	adds	r3, r7, #4
 8009104:	2200      	movs	r2, #0
 8009106:	601a      	str	r2, [r3, #0]
 8009108:	605a      	str	r2, [r3, #4]
 800910a:	609a      	str	r2, [r3, #8]
 800910c:	60da      	str	r2, [r3, #12]
 800910e:	611a      	str	r2, [r3, #16]
 8009110:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8009112:	2001      	movs	r0, #1
 8009114:	f7ff ffbc 	bl	8009090 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8009118:	2001      	movs	r0, #1
 800911a:	f7ff ffa1 	bl	8009060 <LL_AHB1_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA6   ------> TIM1_BKIN
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800911e:	2340      	movs	r3, #64	; 0x40
 8009120:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8009122:	2302      	movs	r3, #2
 8009124:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8009126:	2300      	movs	r3, #0
 8009128:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800912a:	2300      	movs	r3, #0
 800912c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800912e:	2302      	movs	r3, #2
 8009130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8009132:	2301      	movs	r3, #1
 8009134:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009136:	1d3b      	adds	r3, r7, #4
 8009138:	4619      	mov	r1, r3
 800913a:	4870      	ldr	r0, [pc, #448]	; (80092fc <_Z12MX_TIM1_Initv+0x230>)
 800913c:	f7f9 fe8f 	bl	8002e5e <LL_GPIO_Init>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 1));
 8009140:	f7ff fe02 	bl	8008d48 <__NVIC_GetPriorityGrouping>
 8009144:	4603      	mov	r3, r0
 8009146:	2201      	movs	r2, #1
 8009148:	2104      	movs	r1, #4
 800914a:	4618      	mov	r0, r3
 800914c:	f7ff fe58 	bl	8008e00 <NVIC_EncodePriority>
 8009150:	4603      	mov	r3, r0
 8009152:	4619      	mov	r1, r3
 8009154:	2018      	movs	r0, #24
 8009156:	f7ff fe25 	bl	8008da4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800915a:	2018      	movs	r0, #24
 800915c:	f7ff fe02 	bl	8008d64 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8009160:	f7ff fdf2 	bl	8008d48 <__NVIC_GetPriorityGrouping>
 8009164:	4603      	mov	r3, r0
 8009166:	2200      	movs	r2, #0
 8009168:	2100      	movs	r1, #0
 800916a:	4618      	mov	r0, r3
 800916c:	f7ff fe48 	bl	8008e00 <NVIC_EncodePriority>
 8009170:	4603      	mov	r3, r0
 8009172:	4619      	mov	r1, r3
 8009174:	2019      	movs	r0, #25
 8009176:	f7ff fe15 	bl	8008da4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800917a:	2019      	movs	r0, #25
 800917c:	f7ff fdf2 	bl	8008d64 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 0;
 8009180:	2300      	movs	r3, #0
 8009182:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_UP;
 8009186:	2320      	movs	r3, #32
 8009188:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 4000;
 800918a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800918e:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV2;
 8009190:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009194:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 8009196:	2300      	movs	r3, #0
 8009198:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800919c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80091a0:	4619      	mov	r1, r3
 80091a2:	4857      	ldr	r0, [pc, #348]	; (8009300 <_Z12MX_TIM1_Initv+0x234>)
 80091a4:	f7fa f8c0 	bl	8003328 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 80091a8:	4855      	ldr	r0, [pc, #340]	; (8009300 <_Z12MX_TIM1_Initv+0x234>)
 80091aa:	f7ff fe5a 	bl	8008e62 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 80091ae:	2101      	movs	r1, #1
 80091b0:	4853      	ldr	r0, [pc, #332]	; (8009300 <_Z12MX_TIM1_Initv+0x234>)
 80091b2:	f7ff fea9 	bl	8008f08 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80091b6:	2360      	movs	r3, #96	; 0x60
 80091b8:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80091ba:	2300      	movs	r3, #0
 80091bc:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80091be:	2300      	movs	r3, #0
 80091c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 80091c2:	2300      	movs	r3, #0
 80091c4:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80091c6:	2300      	movs	r3, #0
 80091c8:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 80091ca:	2300      	movs	r3, #0
 80091cc:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80091ce:	2300      	movs	r3, #0
 80091d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80091d2:	2300      	movs	r3, #0
 80091d4:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80091d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80091da:	461a      	mov	r2, r3
 80091dc:	2101      	movs	r1, #1
 80091de:	4848      	ldr	r0, [pc, #288]	; (8009300 <_Z12MX_TIM1_Initv+0x234>)
 80091e0:	f7fa f93c 	bl	800345c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 80091e4:	2101      	movs	r1, #1
 80091e6:	4846      	ldr	r0, [pc, #280]	; (8009300 <_Z12MX_TIM1_Initv+0x234>)
 80091e8:	f7ff fe4c 	bl	8008e84 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 80091ec:	2110      	movs	r1, #16
 80091ee:	4844      	ldr	r0, [pc, #272]	; (8009300 <_Z12MX_TIM1_Initv+0x234>)
 80091f0:	f7ff fe8a 	bl	8008f08 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80091f4:	2300      	movs	r3, #0
 80091f6:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80091f8:	2300      	movs	r3, #0
 80091fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80091fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009200:	461a      	mov	r2, r3
 8009202:	2110      	movs	r1, #16
 8009204:	483e      	ldr	r0, [pc, #248]	; (8009300 <_Z12MX_TIM1_Initv+0x234>)
 8009206:	f7fa f929 	bl	800345c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 800920a:	2110      	movs	r1, #16
 800920c:	483c      	ldr	r0, [pc, #240]	; (8009300 <_Z12MX_TIM1_Initv+0x234>)
 800920e:	f7ff fe39 	bl	8008e84 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8009212:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009216:	483a      	ldr	r0, [pc, #232]	; (8009300 <_Z12MX_TIM1_Initv+0x234>)
 8009218:	f7ff fe76 	bl	8008f08 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800921c:	2300      	movs	r3, #0
 800921e:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8009220:	2300      	movs	r3, #0
 8009222:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8009224:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009228:	461a      	mov	r2, r3
 800922a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800922e:	4834      	ldr	r0, [pc, #208]	; (8009300 <_Z12MX_TIM1_Initv+0x234>)
 8009230:	f7fa f914 	bl	800345c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8009234:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009238:	4831      	ldr	r0, [pc, #196]	; (8009300 <_Z12MX_TIM1_Initv+0x234>)
 800923a:	f7ff fe23 	bl	8008e84 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 800923e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009242:	482f      	ldr	r0, [pc, #188]	; (8009300 <_Z12MX_TIM1_Initv+0x234>)
 8009244:	f7ff fe60 	bl	8008f08 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 8009248:	2370      	movs	r3, #112	; 0x70
 800924a:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800924c:	2300      	movs	r3, #0
 800924e:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8009250:	2300      	movs	r3, #0
 8009252:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8009254:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009258:	461a      	mov	r2, r3
 800925a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800925e:	4828      	ldr	r0, [pc, #160]	; (8009300 <_Z12MX_TIM1_Initv+0x234>)
 8009260:	f7fa f8fc 	bl	800345c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 8009264:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009268:	4825      	ldr	r0, [pc, #148]	; (8009300 <_Z12MX_TIM1_Initv+0x234>)
 800926a:	f7ff fe0b 	bl	8008e84 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerInput(TIM1, LL_TIM_TS_ITR1);
 800926e:	2110      	movs	r1, #16
 8009270:	4823      	ldr	r0, [pc, #140]	; (8009300 <_Z12MX_TIM1_Initv+0x234>)
 8009272:	f7ff feb1 	bl	8008fd8 <LL_TIM_SetTriggerInput>
  LL_TIM_SetSlaveMode(TIM1, LL_TIM_SLAVEMODE_TRIGGER);
 8009276:	2106      	movs	r1, #6
 8009278:	4821      	ldr	r0, [pc, #132]	; (8009300 <_Z12MX_TIM1_Initv+0x234>)
 800927a:	f7ff fe9a 	bl	8008fb2 <LL_TIM_SetSlaveMode>
  LL_TIM_DisableIT_TRIG(TIM1);
 800927e:	4820      	ldr	r0, [pc, #128]	; (8009300 <_Z12MX_TIM1_Initv+0x234>)
 8009280:	f7ff fecd 	bl	800901e <LL_TIM_DisableIT_TRIG>
  LL_TIM_DisableDMAReq_TRIG(TIM1);
 8009284:	481e      	ldr	r0, [pc, #120]	; (8009300 <_Z12MX_TIM1_Initv+0x234>)
 8009286:	f7ff feda 	bl	800903e <LL_TIM_DisableDMAReq_TRIG>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 800928a:	2100      	movs	r1, #0
 800928c:	481c      	ldr	r0, [pc, #112]	; (8009300 <_Z12MX_TIM1_Initv+0x234>)
 800928e:	f7ff fe7d 	bl	8008f8c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8009292:	481b      	ldr	r0, [pc, #108]	; (8009300 <_Z12MX_TIM1_Initv+0x234>)
 8009294:	f7ff feb3 	bl	8008ffe <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_ENABLE;
 8009298:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800929c:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_ENABLE;
 800929e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092a2:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_1;
 80092a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092a8:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 80092aa:	2300      	movs	r3, #0
 80092ac:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 80092b0:	2300      	movs	r3, #0
 80092b2:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 80092b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80092b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 80092ba:	2300      	movs	r3, #0
 80092bc:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 80092be:	f107 031c 	add.w	r3, r7, #28
 80092c2:	4619      	mov	r1, r3
 80092c4:	480e      	ldr	r0, [pc, #56]	; (8009300 <_Z12MX_TIM1_Initv+0x234>)
 80092c6:	f7fa f901 	bl	80034cc <LL_TIM_BDTR_Init>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80092ca:	2001      	movs	r0, #1
 80092cc:	f7ff fec8 	bl	8009060 <LL_AHB1_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 80092d0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80092d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80092d6:	2302      	movs	r3, #2
 80092d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80092da:	2302      	movs	r3, #2
 80092dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80092de:	2300      	movs	r3, #0
 80092e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80092e2:	2302      	movs	r3, #2
 80092e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80092e6:	2301      	movs	r3, #1
 80092e8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092ea:	1d3b      	adds	r3, r7, #4
 80092ec:	4619      	mov	r1, r3
 80092ee:	4803      	ldr	r0, [pc, #12]	; (80092fc <_Z12MX_TIM1_Initv+0x230>)
 80092f0:	f7f9 fdb5 	bl	8002e5e <LL_GPIO_Init>

}
 80092f4:	bf00      	nop
 80092f6:	3768      	adds	r7, #104	; 0x68
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	40020000 	.word	0x40020000
 8009300:	40010000 	.word	0x40010000

08009304 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009314:	2b80      	cmp	r3, #128	; 0x80
 8009316:	bf0c      	ite	eq
 8009318:	2301      	moveq	r3, #1
 800931a:	2300      	movne	r3, #0
 800931c:	b2db      	uxtb	r3, r3
}
 800931e:	4618      	mov	r0, r3
 8009320:	370c      	adds	r7, #12
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr

0800932a <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800932a:	b480      	push	{r7}
 800932c:	b083      	sub	sp, #12
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
 8009332:	460b      	mov	r3, r1
 8009334:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8009336:	78fa      	ldrb	r2, [r7, #3]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	605a      	str	r2, [r3, #4]
}
 800933c:	bf00      	nop
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <_ZN4UART8TransmitENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	for(int i = 0; *(str + i) != '/0'; i++){
		//LL_USART_TransmitData8(USART2, *(str + i));
	}
}

void UART::Transmit(std::string	pStr){
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
	const char* str = pStr.c_str();
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 f9c5 	bl	80096e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8009356:	60f8      	str	r0, [r7, #12]
	while(*str){ // forで回すと安定しないので、whileでイテレータとして利用する
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d014      	beq.n	800938a <_ZN4UART8TransmitENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x42>
		while(!LL_USART_IsActiveFlag_TXE(USART2)){}; // čekej než bude volno v Tx Bufferu
 8009360:	480c      	ldr	r0, [pc, #48]	; (8009394 <_ZN4UART8TransmitENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 8009362:	f7ff ffcf 	bl	8009304 <LL_USART_IsActiveFlag_TXE>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	bf0c      	ite	eq
 800936c:	2301      	moveq	r3, #1
 800936e:	2300      	movne	r3, #0
 8009370:	b2db      	uxtb	r3, r3
 8009372:	2b00      	cmp	r3, #0
 8009374:	d000      	beq.n	8009378 <_ZN4UART8TransmitENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x30>
 8009376:	e7f3      	b.n	8009360 <_ZN4UART8TransmitENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x18>
		LL_USART_TransmitData8(USART2,*str++); // předej znak k odeslání
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	1c5a      	adds	r2, r3, #1
 800937c:	60fa      	str	r2, [r7, #12]
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	4619      	mov	r1, r3
 8009382:	4804      	ldr	r0, [pc, #16]	; (8009394 <_ZN4UART8TransmitENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 8009384:	f7ff ffd1 	bl	800932a <LL_USART_TransmitData8>
	while(*str){ // forで回すと安定しないので、whileでイテレータとして利用する
 8009388:	e7e6      	b.n	8009358 <_ZN4UART8TransmitENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10>
//		if(str + i){
//			LL_USART_TransmitData8(USART2, *(str + i));
//		}
////		HAL_Delay(20);
//	}
}
 800938a:	bf00      	nop
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	40004400 	.word	0x40004400

08009398 <LL_USART_Enable>:
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	60da      	str	r2, [r3, #12]
}
 80093ac:	bf00      	nop
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <LL_USART_ConfigAsyncMode>:
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	691b      	ldr	r3, [r3, #16]
 80093c4:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	695b      	ldr	r3, [r3, #20]
 80093d0:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	615a      	str	r2, [r3, #20]
}
 80093d8:	bf00      	nop
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <LL_AHB1_GRP1_EnableClock>:
{
 80093e4:	b480      	push	{r7}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80093ec:	4b08      	ldr	r3, [pc, #32]	; (8009410 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80093ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	4907      	ldr	r1, [pc, #28]	; (8009410 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80093f4:	4313      	orrs	r3, r2
 80093f6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80093f8:	4b05      	ldr	r3, [pc, #20]	; (8009410 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80093fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4013      	ands	r3, r2
 8009400:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009402:	68fb      	ldr	r3, [r7, #12]
}
 8009404:	bf00      	nop
 8009406:	3714      	adds	r7, #20
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr
 8009410:	40023800 	.word	0x40023800

08009414 <LL_APB1_GRP1_EnableClock>:
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800941c:	4b08      	ldr	r3, [pc, #32]	; (8009440 <LL_APB1_GRP1_EnableClock+0x2c>)
 800941e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4907      	ldr	r1, [pc, #28]	; (8009440 <LL_APB1_GRP1_EnableClock+0x2c>)
 8009424:	4313      	orrs	r3, r2
 8009426:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8009428:	4b05      	ldr	r3, [pc, #20]	; (8009440 <LL_APB1_GRP1_EnableClock+0x2c>)
 800942a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4013      	ands	r3, r2
 8009430:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009432:	68fb      	ldr	r3, [r7, #12]
}
 8009434:	bf00      	nop
 8009436:	3714      	adds	r7, #20
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr
 8009440:	40023800 	.word	0x40023800

08009444 <_ZN9USARTInit4InitEv>:
//UART_HandleTypeDef huart2;
//void MX_USART2_HAL_UART_Init(void);
//void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle);


void USARTInit::Init() {
 8009444:	b580      	push	{r7, lr}
 8009446:	af00      	add	r7, sp, #0
	MX_USART2_LL_UART_Init();
 8009448:	f000 f802 	bl	8009450 <_Z22MX_USART2_LL_UART_Initv>
	//MX_USART2_HAL_UART_Init();
}
 800944c:	bf00      	nop
 800944e:	bd80      	pop	{r7, pc}

08009450 <_Z22MX_USART2_LL_UART_Initv>:

void MX_USART2_LL_UART_Init(void)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b08e      	sub	sp, #56	; 0x38
 8009454:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8009456:	f107 031c 	add.w	r3, r7, #28
 800945a:	2200      	movs	r2, #0
 800945c:	601a      	str	r2, [r3, #0]
 800945e:	605a      	str	r2, [r3, #4]
 8009460:	609a      	str	r2, [r3, #8]
 8009462:	60da      	str	r2, [r3, #12]
 8009464:	611a      	str	r2, [r3, #16]
 8009466:	615a      	str	r2, [r3, #20]
 8009468:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800946a:	1d3b      	adds	r3, r7, #4
 800946c:	2200      	movs	r2, #0
 800946e:	601a      	str	r2, [r3, #0]
 8009470:	605a      	str	r2, [r3, #4]
 8009472:	609a      	str	r2, [r3, #8]
 8009474:	60da      	str	r2, [r3, #12]
 8009476:	611a      	str	r2, [r3, #16]
 8009478:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800947a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800947e:	f7ff ffc9 	bl	8009414 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8009482:	2001      	movs	r0, #1
 8009484:	f7ff ffae 	bl	80093e4 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8009488:	230c      	movs	r3, #12
 800948a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800948c:	2302      	movs	r3, #2
 800948e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8009490:	2303      	movs	r3, #3
 8009492:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8009494:	2300      	movs	r3, #0
 8009496:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8009498:	2301      	movs	r3, #1
 800949a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800949c:	2307      	movs	r3, #7
 800949e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094a0:	1d3b      	adds	r3, r7, #4
 80094a2:	4619      	mov	r1, r3
 80094a4:	4810      	ldr	r0, [pc, #64]	; (80094e8 <_Z22MX_USART2_LL_UART_Initv+0x98>)
 80094a6:	f7f9 fcda 	bl	8002e5e <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 80094aa:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80094ae:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80094b0:	2300      	movs	r3, #0
 80094b2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80094b4:	2300      	movs	r3, #0
 80094b6:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80094b8:	2300      	movs	r3, #0
 80094ba:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80094bc:	230c      	movs	r3, #12
 80094be:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80094c0:	2300      	movs	r3, #0
 80094c2:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80094c4:	2300      	movs	r3, #0
 80094c6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80094c8:	f107 031c 	add.w	r3, r7, #28
 80094cc:	4619      	mov	r1, r3
 80094ce:	4807      	ldr	r0, [pc, #28]	; (80094ec <_Z22MX_USART2_LL_UART_Initv+0x9c>)
 80094d0:	f7fa fada 	bl	8003a88 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80094d4:	4805      	ldr	r0, [pc, #20]	; (80094ec <_Z22MX_USART2_LL_UART_Initv+0x9c>)
 80094d6:	f7ff ff6f 	bl	80093b8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80094da:	4804      	ldr	r0, [pc, #16]	; (80094ec <_Z22MX_USART2_LL_UART_Initv+0x9c>)
 80094dc:	f7ff ff5c 	bl	8009398 <LL_USART_Enable>

}
 80094e0:	bf00      	nop
 80094e2:	3738      	adds	r7, #56	; 0x38
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	40020000 	.word	0x40020000
 80094ec:	40004400 	.word	0x40004400

080094f0 <_ZdlPv>:
 80094f0:	f001 b9a4 	b.w	800a83c <free>

080094f4 <_ZdlPvj>:
 80094f4:	f7ff bffc 	b.w	80094f0 <_ZdlPv>

080094f8 <_Znwj>:
 80094f8:	b510      	push	{r4, lr}
 80094fa:	2800      	cmp	r0, #0
 80094fc:	bf14      	ite	ne
 80094fe:	4604      	movne	r4, r0
 8009500:	2401      	moveq	r4, #1
 8009502:	4620      	mov	r0, r4
 8009504:	f001 f992 	bl	800a82c <malloc>
 8009508:	b930      	cbnz	r0, 8009518 <_Znwj+0x20>
 800950a:	f000 f8fb 	bl	8009704 <_ZSt15get_new_handlerv>
 800950e:	b908      	cbnz	r0, 8009514 <_Znwj+0x1c>
 8009510:	f001 f95b 	bl	800a7ca <abort>
 8009514:	4780      	blx	r0
 8009516:	e7f4      	b.n	8009502 <_Znwj+0xa>
 8009518:	bd10      	pop	{r4, pc}

0800951a <_ZNSaIcEC1Ev>:
 800951a:	4770      	bx	lr

0800951c <_ZNSaIcED1Ev>:
 800951c:	4770      	bx	lr

0800951e <_ZSt17__throw_bad_allocv>:
 800951e:	b508      	push	{r3, lr}
 8009520:	f001 f953 	bl	800a7ca <abort>

08009524 <_ZSt19__throw_logic_errorPKc>:
 8009524:	b508      	push	{r3, lr}
 8009526:	f001 f950 	bl	800a7ca <abort>

0800952a <_ZSt20__throw_length_errorPKc>:
 800952a:	b508      	push	{r3, lr}
 800952c:	f001 f94d 	bl	800a7ca <abort>

08009530 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8009530:	b10a      	cbz	r2, 8009536 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8009532:	f001 b98b 	b.w	800a84c <memcpy>
 8009536:	4770      	bx	lr

08009538 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 8009538:	6001      	str	r1, [r0, #0]
 800953a:	4770      	bx	lr

0800953c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 800953c:	6800      	ldr	r0, [r0, #0]
 800953e:	4770      	bx	lr

08009540 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 8009540:	3008      	adds	r0, #8
 8009542:	4770      	bx	lr

08009544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8009544:	6081      	str	r1, [r0, #8]
 8009546:	4770      	bx	lr

08009548 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8009548:	6803      	ldr	r3, [r0, #0]
 800954a:	6041      	str	r1, [r0, #4]
 800954c:	2200      	movs	r2, #0
 800954e:	545a      	strb	r2, [r3, r1]
 8009550:	4770      	bx	lr
	...

08009554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8009554:	b508      	push	{r3, lr}
 8009556:	680b      	ldr	r3, [r1, #0]
 8009558:	2b00      	cmp	r3, #0
 800955a:	da02      	bge.n	8009562 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 800955c:	4809      	ldr	r0, [pc, #36]	; (8009584 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 800955e:	f7ff ffe4 	bl	800952a <_ZSt20__throw_length_errorPKc>
 8009562:	4293      	cmp	r3, r2
 8009564:	d908      	bls.n	8009578 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8009566:	0052      	lsls	r2, r2, #1
 8009568:	4293      	cmp	r3, r2
 800956a:	d205      	bcs.n	8009578 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800956c:	2a00      	cmp	r2, #0
 800956e:	bfb6      	itet	lt
 8009570:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8009574:	600a      	strge	r2, [r1, #0]
 8009576:	600b      	strlt	r3, [r1, #0]
 8009578:	6808      	ldr	r0, [r1, #0]
 800957a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800957e:	3001      	adds	r0, #1
 8009580:	f7ff bfba 	b.w	80094f8 <_Znwj>
 8009584:	0800cb40 	.word	0x0800cb40

08009588 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8009588:	4603      	mov	r3, r0
 800958a:	f853 0b08 	ldr.w	r0, [r3], #8
 800958e:	4298      	cmp	r0, r3
 8009590:	d001      	beq.n	8009596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8009592:	f7ff bfad 	b.w	80094f0 <_ZdlPv>
 8009596:	4770      	bx	lr

08009598 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8009598:	b508      	push	{r3, lr}
 800959a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800959e:	6840      	ldr	r0, [r0, #4]
 80095a0:	3901      	subs	r1, #1
 80095a2:	1a09      	subs	r1, r1, r0
 80095a4:	4291      	cmp	r1, r2
 80095a6:	d202      	bcs.n	80095ae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7ff ffbe 	bl	800952a <_ZSt20__throw_length_errorPKc>
 80095ae:	bd08      	pop	{r3, pc}

080095b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80095b0:	2a01      	cmp	r2, #1
 80095b2:	b510      	push	{r4, lr}
 80095b4:	d102      	bne.n	80095bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 80095b6:	780a      	ldrb	r2, [r1, #0]
 80095b8:	7002      	strb	r2, [r0, #0]
 80095ba:	bd10      	pop	{r4, pc}
 80095bc:	f7ff ffb8 	bl	8009530 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80095c0:	e7fb      	b.n	80095ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

080095c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 80095c2:	b508      	push	{r3, lr}
 80095c4:	1a52      	subs	r2, r2, r1
 80095c6:	f7ff fff3 	bl	80095b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80095ca:	bd08      	pop	{r3, pc}

080095cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80095cc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80095d0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80095d4:	4616      	mov	r6, r2
 80095d6:	6842      	ldr	r2, [r0, #4]
 80095d8:	469a      	mov	sl, r3
 80095da:	eba8 0306 	sub.w	r3, r8, r6
 80095de:	1a57      	subs	r7, r2, r1
 80095e0:	4413      	add	r3, r2
 80095e2:	6802      	ldr	r2, [r0, #0]
 80095e4:	9301      	str	r3, [sp, #4]
 80095e6:	f100 0308 	add.w	r3, r0, #8
 80095ea:	429a      	cmp	r2, r3
 80095ec:	460d      	mov	r5, r1
 80095ee:	bf14      	ite	ne
 80095f0:	6882      	ldrne	r2, [r0, #8]
 80095f2:	220f      	moveq	r2, #15
 80095f4:	a901      	add	r1, sp, #4
 80095f6:	4604      	mov	r4, r0
 80095f8:	f7ff ffac 	bl	8009554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80095fc:	1bbf      	subs	r7, r7, r6
 80095fe:	4681      	mov	r9, r0
 8009600:	b11d      	cbz	r5, 800960a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8009602:	462a      	mov	r2, r5
 8009604:	6821      	ldr	r1, [r4, #0]
 8009606:	f7ff ffd3 	bl	80095b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800960a:	f1ba 0f00 	cmp.w	sl, #0
 800960e:	d008      	beq.n	8009622 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8009610:	f1b8 0f00 	cmp.w	r8, #0
 8009614:	d005      	beq.n	8009622 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8009616:	4642      	mov	r2, r8
 8009618:	4651      	mov	r1, sl
 800961a:	eb09 0005 	add.w	r0, r9, r5
 800961e:	f7ff ffc7 	bl	80095b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009622:	b147      	cbz	r7, 8009636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 8009624:	6821      	ldr	r1, [r4, #0]
 8009626:	442e      	add	r6, r5
 8009628:	eb05 0008 	add.w	r0, r5, r8
 800962c:	463a      	mov	r2, r7
 800962e:	4431      	add	r1, r6
 8009630:	4448      	add	r0, r9
 8009632:	f7ff ffbd 	bl	80095b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009636:	4620      	mov	r0, r4
 8009638:	f7ff ffa6 	bl	8009588 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800963c:	9b01      	ldr	r3, [sp, #4]
 800963e:	f8c4 9000 	str.w	r9, [r4]
 8009642:	60a3      	str	r3, [r4, #8]
 8009644:	b002      	add	sp, #8
 8009646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800964a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800964a:	f100 0208 	add.w	r2, r0, #8
 800964e:	6002      	str	r2, [r0, #0]
 8009650:	2200      	movs	r2, #0
 8009652:	6042      	str	r2, [r0, #4]
 8009654:	7202      	strb	r2, [r0, #8]
 8009656:	4770      	bx	lr

08009658 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8009658:	b510      	push	{r4, lr}
 800965a:	4604      	mov	r4, r0
 800965c:	f7ff ff94 	bl	8009588 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8009660:	4620      	mov	r0, r4
 8009662:	bd10      	pop	{r4, pc}

08009664 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8009664:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009666:	4604      	mov	r4, r0
 8009668:	4626      	mov	r6, r4
 800966a:	6840      	ldr	r0, [r0, #4]
 800966c:	f856 3b08 	ldr.w	r3, [r6], #8
 8009670:	42b3      	cmp	r3, r6
 8009672:	bf18      	it	ne
 8009674:	68a6      	ldrne	r6, [r4, #8]
 8009676:	eb00 0502 	add.w	r5, r0, r2
 800967a:	bf08      	it	eq
 800967c:	260f      	moveq	r6, #15
 800967e:	42b5      	cmp	r5, r6
 8009680:	d80a      	bhi.n	8009698 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 8009682:	b112      	cbz	r2, 800968a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 8009684:	4418      	add	r0, r3
 8009686:	f7ff ff93 	bl	80095b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800968a:	6823      	ldr	r3, [r4, #0]
 800968c:	6065      	str	r5, [r4, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	4620      	mov	r0, r4
 8009692:	555a      	strb	r2, [r3, r5]
 8009694:	b002      	add	sp, #8
 8009696:	bd70      	pop	{r4, r5, r6, pc}
 8009698:	9200      	str	r2, [sp, #0]
 800969a:	460b      	mov	r3, r1
 800969c:	2200      	movs	r2, #0
 800969e:	4601      	mov	r1, r0
 80096a0:	4620      	mov	r0, r4
 80096a2:	f7ff ff93 	bl	80095cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80096a6:	e7f0      	b.n	800968a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

080096a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 80096a8:	b508      	push	{r3, lr}
 80096aa:	e9d1 1200 	ldrd	r1, r2, [r1]
 80096ae:	f7ff ffd9 	bl	8009664 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80096b2:	bd08      	pop	{r3, pc}

080096b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 80096b4:	b570      	push	{r4, r5, r6, lr}
 80096b6:	4604      	mov	r4, r0
 80096b8:	4608      	mov	r0, r1
 80096ba:	460d      	mov	r5, r1
 80096bc:	f7f6 fdf8 	bl	80002b0 <strlen>
 80096c0:	4b06      	ldr	r3, [pc, #24]	; (80096dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 80096c2:	4606      	mov	r6, r0
 80096c4:	4602      	mov	r2, r0
 80096c6:	2100      	movs	r1, #0
 80096c8:	4620      	mov	r0, r4
 80096ca:	f7ff ff65 	bl	8009598 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80096ce:	4632      	mov	r2, r6
 80096d0:	4629      	mov	r1, r5
 80096d2:	4620      	mov	r0, r4
 80096d4:	f7ff ffc6 	bl	8009664 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80096d8:	bd70      	pop	{r4, r5, r6, pc}
 80096da:	bf00      	nop
 80096dc:	0800cb2b 	.word	0x0800cb2b

080096e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80096e0:	6800      	ldr	r0, [r0, #0]
 80096e2:	4770      	bx	lr

080096e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 80096e4:	6001      	str	r1, [r0, #0]
 80096e6:	4770      	bx	lr

080096e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 80096e8:	b510      	push	{r4, lr}
 80096ea:	f100 0208 	add.w	r2, r0, #8
 80096ee:	6002      	str	r2, [r0, #0]
 80096f0:	e9d1 1200 	ldrd	r1, r2, [r1]
 80096f4:	4604      	mov	r4, r0
 80096f6:	f04f 0300 	mov.w	r3, #0
 80096fa:	440a      	add	r2, r1
 80096fc:	f7fb fba0 	bl	8004e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8009700:	4620      	mov	r0, r4
 8009702:	bd10      	pop	{r4, pc}

08009704 <_ZSt15get_new_handlerv>:
 8009704:	4b02      	ldr	r3, [pc, #8]	; (8009710 <_ZSt15get_new_handlerv+0xc>)
 8009706:	6818      	ldr	r0, [r3, #0]
 8009708:	f3bf 8f5b 	dmb	ish
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	20003214 	.word	0x20003214
 8009714:	00000000 	.word	0x00000000

08009718 <cos>:
 8009718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800971a:	ec51 0b10 	vmov	r0, r1, d0
 800971e:	4a1e      	ldr	r2, [pc, #120]	; (8009798 <cos+0x80>)
 8009720:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009724:	4293      	cmp	r3, r2
 8009726:	dc06      	bgt.n	8009736 <cos+0x1e>
 8009728:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8009790 <cos+0x78>
 800972c:	f000 fb7c 	bl	8009e28 <__kernel_cos>
 8009730:	ec51 0b10 	vmov	r0, r1, d0
 8009734:	e007      	b.n	8009746 <cos+0x2e>
 8009736:	4a19      	ldr	r2, [pc, #100]	; (800979c <cos+0x84>)
 8009738:	4293      	cmp	r3, r2
 800973a:	dd09      	ble.n	8009750 <cos+0x38>
 800973c:	ee10 2a10 	vmov	r2, s0
 8009740:	460b      	mov	r3, r1
 8009742:	f7f6 fdc1 	bl	80002c8 <__aeabi_dsub>
 8009746:	ec41 0b10 	vmov	d0, r0, r1
 800974a:	b005      	add	sp, #20
 800974c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009750:	4668      	mov	r0, sp
 8009752:	f000 f975 	bl	8009a40 <__ieee754_rem_pio2>
 8009756:	f000 0003 	and.w	r0, r0, #3
 800975a:	2801      	cmp	r0, #1
 800975c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009760:	ed9d 0b00 	vldr	d0, [sp]
 8009764:	d007      	beq.n	8009776 <cos+0x5e>
 8009766:	2802      	cmp	r0, #2
 8009768:	d00e      	beq.n	8009788 <cos+0x70>
 800976a:	2800      	cmp	r0, #0
 800976c:	d0de      	beq.n	800972c <cos+0x14>
 800976e:	2001      	movs	r0, #1
 8009770:	f000 ff62 	bl	800a638 <__kernel_sin>
 8009774:	e7dc      	b.n	8009730 <cos+0x18>
 8009776:	f000 ff5f 	bl	800a638 <__kernel_sin>
 800977a:	ec53 2b10 	vmov	r2, r3, d0
 800977e:	ee10 0a10 	vmov	r0, s0
 8009782:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009786:	e7de      	b.n	8009746 <cos+0x2e>
 8009788:	f000 fb4e 	bl	8009e28 <__kernel_cos>
 800978c:	e7f5      	b.n	800977a <cos+0x62>
 800978e:	bf00      	nop
	...
 8009798:	3fe921fb 	.word	0x3fe921fb
 800979c:	7fefffff 	.word	0x7fefffff

080097a0 <fabs>:
 80097a0:	ec51 0b10 	vmov	r0, r1, d0
 80097a4:	ee10 2a10 	vmov	r2, s0
 80097a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80097ac:	ec43 2b10 	vmov	d0, r2, r3
 80097b0:	4770      	bx	lr
 80097b2:	0000      	movs	r0, r0
 80097b4:	0000      	movs	r0, r0
	...

080097b8 <floor>:
 80097b8:	ec51 0b10 	vmov	r0, r1, d0
 80097bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80097c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80097c8:	2e13      	cmp	r6, #19
 80097ca:	460c      	mov	r4, r1
 80097cc:	ee10 5a10 	vmov	r5, s0
 80097d0:	4680      	mov	r8, r0
 80097d2:	dc34      	bgt.n	800983e <floor+0x86>
 80097d4:	2e00      	cmp	r6, #0
 80097d6:	da16      	bge.n	8009806 <floor+0x4e>
 80097d8:	a335      	add	r3, pc, #212	; (adr r3, 80098b0 <floor+0xf8>)
 80097da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097de:	f7f6 fd75 	bl	80002cc <__adddf3>
 80097e2:	2200      	movs	r2, #0
 80097e4:	2300      	movs	r3, #0
 80097e6:	f7f7 f9b7 	bl	8000b58 <__aeabi_dcmpgt>
 80097ea:	b148      	cbz	r0, 8009800 <floor+0x48>
 80097ec:	2c00      	cmp	r4, #0
 80097ee:	da59      	bge.n	80098a4 <floor+0xec>
 80097f0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80097f4:	4a30      	ldr	r2, [pc, #192]	; (80098b8 <floor+0x100>)
 80097f6:	432b      	orrs	r3, r5
 80097f8:	2500      	movs	r5, #0
 80097fa:	42ab      	cmp	r3, r5
 80097fc:	bf18      	it	ne
 80097fe:	4614      	movne	r4, r2
 8009800:	4621      	mov	r1, r4
 8009802:	4628      	mov	r0, r5
 8009804:	e025      	b.n	8009852 <floor+0x9a>
 8009806:	4f2d      	ldr	r7, [pc, #180]	; (80098bc <floor+0x104>)
 8009808:	4137      	asrs	r7, r6
 800980a:	ea01 0307 	and.w	r3, r1, r7
 800980e:	4303      	orrs	r3, r0
 8009810:	d01f      	beq.n	8009852 <floor+0x9a>
 8009812:	a327      	add	r3, pc, #156	; (adr r3, 80098b0 <floor+0xf8>)
 8009814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009818:	f7f6 fd58 	bl	80002cc <__adddf3>
 800981c:	2200      	movs	r2, #0
 800981e:	2300      	movs	r3, #0
 8009820:	f7f7 f99a 	bl	8000b58 <__aeabi_dcmpgt>
 8009824:	2800      	cmp	r0, #0
 8009826:	d0eb      	beq.n	8009800 <floor+0x48>
 8009828:	2c00      	cmp	r4, #0
 800982a:	bfbe      	ittt	lt
 800982c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009830:	fa43 f606 	asrlt.w	r6, r3, r6
 8009834:	19a4      	addlt	r4, r4, r6
 8009836:	ea24 0407 	bic.w	r4, r4, r7
 800983a:	2500      	movs	r5, #0
 800983c:	e7e0      	b.n	8009800 <floor+0x48>
 800983e:	2e33      	cmp	r6, #51	; 0x33
 8009840:	dd0b      	ble.n	800985a <floor+0xa2>
 8009842:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009846:	d104      	bne.n	8009852 <floor+0x9a>
 8009848:	ee10 2a10 	vmov	r2, s0
 800984c:	460b      	mov	r3, r1
 800984e:	f7f6 fd3d 	bl	80002cc <__adddf3>
 8009852:	ec41 0b10 	vmov	d0, r0, r1
 8009856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800985a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800985e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009862:	fa23 f707 	lsr.w	r7, r3, r7
 8009866:	4207      	tst	r7, r0
 8009868:	d0f3      	beq.n	8009852 <floor+0x9a>
 800986a:	a311      	add	r3, pc, #68	; (adr r3, 80098b0 <floor+0xf8>)
 800986c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009870:	f7f6 fd2c 	bl	80002cc <__adddf3>
 8009874:	2200      	movs	r2, #0
 8009876:	2300      	movs	r3, #0
 8009878:	f7f7 f96e 	bl	8000b58 <__aeabi_dcmpgt>
 800987c:	2800      	cmp	r0, #0
 800987e:	d0bf      	beq.n	8009800 <floor+0x48>
 8009880:	2c00      	cmp	r4, #0
 8009882:	da02      	bge.n	800988a <floor+0xd2>
 8009884:	2e14      	cmp	r6, #20
 8009886:	d103      	bne.n	8009890 <floor+0xd8>
 8009888:	3401      	adds	r4, #1
 800988a:	ea25 0507 	bic.w	r5, r5, r7
 800988e:	e7b7      	b.n	8009800 <floor+0x48>
 8009890:	2301      	movs	r3, #1
 8009892:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009896:	fa03 f606 	lsl.w	r6, r3, r6
 800989a:	4435      	add	r5, r6
 800989c:	4545      	cmp	r5, r8
 800989e:	bf38      	it	cc
 80098a0:	18e4      	addcc	r4, r4, r3
 80098a2:	e7f2      	b.n	800988a <floor+0xd2>
 80098a4:	2500      	movs	r5, #0
 80098a6:	462c      	mov	r4, r5
 80098a8:	e7aa      	b.n	8009800 <floor+0x48>
 80098aa:	bf00      	nop
 80098ac:	f3af 8000 	nop.w
 80098b0:	8800759c 	.word	0x8800759c
 80098b4:	7e37e43c 	.word	0x7e37e43c
 80098b8:	bff00000 	.word	0xbff00000
 80098bc:	000fffff 	.word	0x000fffff

080098c0 <scalbn>:
 80098c0:	b570      	push	{r4, r5, r6, lr}
 80098c2:	ec55 4b10 	vmov	r4, r5, d0
 80098c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80098ca:	4606      	mov	r6, r0
 80098cc:	462b      	mov	r3, r5
 80098ce:	b9aa      	cbnz	r2, 80098fc <scalbn+0x3c>
 80098d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80098d4:	4323      	orrs	r3, r4
 80098d6:	d03b      	beq.n	8009950 <scalbn+0x90>
 80098d8:	4b31      	ldr	r3, [pc, #196]	; (80099a0 <scalbn+0xe0>)
 80098da:	4629      	mov	r1, r5
 80098dc:	2200      	movs	r2, #0
 80098de:	ee10 0a10 	vmov	r0, s0
 80098e2:	f7f6 fea9 	bl	8000638 <__aeabi_dmul>
 80098e6:	4b2f      	ldr	r3, [pc, #188]	; (80099a4 <scalbn+0xe4>)
 80098e8:	429e      	cmp	r6, r3
 80098ea:	4604      	mov	r4, r0
 80098ec:	460d      	mov	r5, r1
 80098ee:	da12      	bge.n	8009916 <scalbn+0x56>
 80098f0:	a327      	add	r3, pc, #156	; (adr r3, 8009990 <scalbn+0xd0>)
 80098f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f6:	f7f6 fe9f 	bl	8000638 <__aeabi_dmul>
 80098fa:	e009      	b.n	8009910 <scalbn+0x50>
 80098fc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009900:	428a      	cmp	r2, r1
 8009902:	d10c      	bne.n	800991e <scalbn+0x5e>
 8009904:	ee10 2a10 	vmov	r2, s0
 8009908:	4620      	mov	r0, r4
 800990a:	4629      	mov	r1, r5
 800990c:	f7f6 fcde 	bl	80002cc <__adddf3>
 8009910:	4604      	mov	r4, r0
 8009912:	460d      	mov	r5, r1
 8009914:	e01c      	b.n	8009950 <scalbn+0x90>
 8009916:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800991a:	460b      	mov	r3, r1
 800991c:	3a36      	subs	r2, #54	; 0x36
 800991e:	4432      	add	r2, r6
 8009920:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009924:	428a      	cmp	r2, r1
 8009926:	dd0b      	ble.n	8009940 <scalbn+0x80>
 8009928:	ec45 4b11 	vmov	d1, r4, r5
 800992c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009998 <scalbn+0xd8>
 8009930:	f000 ff3c 	bl	800a7ac <copysign>
 8009934:	a318      	add	r3, pc, #96	; (adr r3, 8009998 <scalbn+0xd8>)
 8009936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993a:	ec51 0b10 	vmov	r0, r1, d0
 800993e:	e7da      	b.n	80098f6 <scalbn+0x36>
 8009940:	2a00      	cmp	r2, #0
 8009942:	dd08      	ble.n	8009956 <scalbn+0x96>
 8009944:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009948:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800994c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009950:	ec45 4b10 	vmov	d0, r4, r5
 8009954:	bd70      	pop	{r4, r5, r6, pc}
 8009956:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800995a:	da0d      	bge.n	8009978 <scalbn+0xb8>
 800995c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009960:	429e      	cmp	r6, r3
 8009962:	ec45 4b11 	vmov	d1, r4, r5
 8009966:	dce1      	bgt.n	800992c <scalbn+0x6c>
 8009968:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8009990 <scalbn+0xd0>
 800996c:	f000 ff1e 	bl	800a7ac <copysign>
 8009970:	a307      	add	r3, pc, #28	; (adr r3, 8009990 <scalbn+0xd0>)
 8009972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009976:	e7e0      	b.n	800993a <scalbn+0x7a>
 8009978:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800997c:	3236      	adds	r2, #54	; 0x36
 800997e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009982:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009986:	4620      	mov	r0, r4
 8009988:	4629      	mov	r1, r5
 800998a:	2200      	movs	r2, #0
 800998c:	4b06      	ldr	r3, [pc, #24]	; (80099a8 <scalbn+0xe8>)
 800998e:	e7b2      	b.n	80098f6 <scalbn+0x36>
 8009990:	c2f8f359 	.word	0xc2f8f359
 8009994:	01a56e1f 	.word	0x01a56e1f
 8009998:	8800759c 	.word	0x8800759c
 800999c:	7e37e43c 	.word	0x7e37e43c
 80099a0:	43500000 	.word	0x43500000
 80099a4:	ffff3cb0 	.word	0xffff3cb0
 80099a8:	3c900000 	.word	0x3c900000
 80099ac:	00000000 	.word	0x00000000

080099b0 <sin>:
 80099b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80099b2:	ec51 0b10 	vmov	r0, r1, d0
 80099b6:	4a20      	ldr	r2, [pc, #128]	; (8009a38 <sin+0x88>)
 80099b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80099bc:	4293      	cmp	r3, r2
 80099be:	dc07      	bgt.n	80099d0 <sin+0x20>
 80099c0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8009a30 <sin+0x80>
 80099c4:	2000      	movs	r0, #0
 80099c6:	f000 fe37 	bl	800a638 <__kernel_sin>
 80099ca:	ec51 0b10 	vmov	r0, r1, d0
 80099ce:	e007      	b.n	80099e0 <sin+0x30>
 80099d0:	4a1a      	ldr	r2, [pc, #104]	; (8009a3c <sin+0x8c>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	dd09      	ble.n	80099ea <sin+0x3a>
 80099d6:	ee10 2a10 	vmov	r2, s0
 80099da:	460b      	mov	r3, r1
 80099dc:	f7f6 fc74 	bl	80002c8 <__aeabi_dsub>
 80099e0:	ec41 0b10 	vmov	d0, r0, r1
 80099e4:	b005      	add	sp, #20
 80099e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80099ea:	4668      	mov	r0, sp
 80099ec:	f000 f828 	bl	8009a40 <__ieee754_rem_pio2>
 80099f0:	f000 0003 	and.w	r0, r0, #3
 80099f4:	2801      	cmp	r0, #1
 80099f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80099fa:	ed9d 0b00 	vldr	d0, [sp]
 80099fe:	d004      	beq.n	8009a0a <sin+0x5a>
 8009a00:	2802      	cmp	r0, #2
 8009a02:	d005      	beq.n	8009a10 <sin+0x60>
 8009a04:	b970      	cbnz	r0, 8009a24 <sin+0x74>
 8009a06:	2001      	movs	r0, #1
 8009a08:	e7dd      	b.n	80099c6 <sin+0x16>
 8009a0a:	f000 fa0d 	bl	8009e28 <__kernel_cos>
 8009a0e:	e7dc      	b.n	80099ca <sin+0x1a>
 8009a10:	2001      	movs	r0, #1
 8009a12:	f000 fe11 	bl	800a638 <__kernel_sin>
 8009a16:	ec53 2b10 	vmov	r2, r3, d0
 8009a1a:	ee10 0a10 	vmov	r0, s0
 8009a1e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009a22:	e7dd      	b.n	80099e0 <sin+0x30>
 8009a24:	f000 fa00 	bl	8009e28 <__kernel_cos>
 8009a28:	e7f5      	b.n	8009a16 <sin+0x66>
 8009a2a:	bf00      	nop
 8009a2c:	f3af 8000 	nop.w
	...
 8009a38:	3fe921fb 	.word	0x3fe921fb
 8009a3c:	7fefffff 	.word	0x7fefffff

08009a40 <__ieee754_rem_pio2>:
 8009a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a44:	ec57 6b10 	vmov	r6, r7, d0
 8009a48:	4bc3      	ldr	r3, [pc, #780]	; (8009d58 <__ieee754_rem_pio2+0x318>)
 8009a4a:	b08d      	sub	sp, #52	; 0x34
 8009a4c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009a50:	4598      	cmp	r8, r3
 8009a52:	4604      	mov	r4, r0
 8009a54:	9704      	str	r7, [sp, #16]
 8009a56:	dc07      	bgt.n	8009a68 <__ieee754_rem_pio2+0x28>
 8009a58:	2200      	movs	r2, #0
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	ed84 0b00 	vstr	d0, [r4]
 8009a60:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009a64:	2500      	movs	r5, #0
 8009a66:	e027      	b.n	8009ab8 <__ieee754_rem_pio2+0x78>
 8009a68:	4bbc      	ldr	r3, [pc, #752]	; (8009d5c <__ieee754_rem_pio2+0x31c>)
 8009a6a:	4598      	cmp	r8, r3
 8009a6c:	dc75      	bgt.n	8009b5a <__ieee754_rem_pio2+0x11a>
 8009a6e:	9b04      	ldr	r3, [sp, #16]
 8009a70:	4dbb      	ldr	r5, [pc, #748]	; (8009d60 <__ieee754_rem_pio2+0x320>)
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	ee10 0a10 	vmov	r0, s0
 8009a78:	a3a9      	add	r3, pc, #676	; (adr r3, 8009d20 <__ieee754_rem_pio2+0x2e0>)
 8009a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7e:	4639      	mov	r1, r7
 8009a80:	dd36      	ble.n	8009af0 <__ieee754_rem_pio2+0xb0>
 8009a82:	f7f6 fc21 	bl	80002c8 <__aeabi_dsub>
 8009a86:	45a8      	cmp	r8, r5
 8009a88:	4606      	mov	r6, r0
 8009a8a:	460f      	mov	r7, r1
 8009a8c:	d018      	beq.n	8009ac0 <__ieee754_rem_pio2+0x80>
 8009a8e:	a3a6      	add	r3, pc, #664	; (adr r3, 8009d28 <__ieee754_rem_pio2+0x2e8>)
 8009a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a94:	f7f6 fc18 	bl	80002c8 <__aeabi_dsub>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	e9c4 2300 	strd	r2, r3, [r4]
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	4639      	mov	r1, r7
 8009aa4:	f7f6 fc10 	bl	80002c8 <__aeabi_dsub>
 8009aa8:	a39f      	add	r3, pc, #636	; (adr r3, 8009d28 <__ieee754_rem_pio2+0x2e8>)
 8009aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aae:	f7f6 fc0b 	bl	80002c8 <__aeabi_dsub>
 8009ab2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009ab6:	2501      	movs	r5, #1
 8009ab8:	4628      	mov	r0, r5
 8009aba:	b00d      	add	sp, #52	; 0x34
 8009abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac0:	a39b      	add	r3, pc, #620	; (adr r3, 8009d30 <__ieee754_rem_pio2+0x2f0>)
 8009ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac6:	f7f6 fbff 	bl	80002c8 <__aeabi_dsub>
 8009aca:	a39b      	add	r3, pc, #620	; (adr r3, 8009d38 <__ieee754_rem_pio2+0x2f8>)
 8009acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad0:	4606      	mov	r6, r0
 8009ad2:	460f      	mov	r7, r1
 8009ad4:	f7f6 fbf8 	bl	80002c8 <__aeabi_dsub>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	460b      	mov	r3, r1
 8009adc:	e9c4 2300 	strd	r2, r3, [r4]
 8009ae0:	4630      	mov	r0, r6
 8009ae2:	4639      	mov	r1, r7
 8009ae4:	f7f6 fbf0 	bl	80002c8 <__aeabi_dsub>
 8009ae8:	a393      	add	r3, pc, #588	; (adr r3, 8009d38 <__ieee754_rem_pio2+0x2f8>)
 8009aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aee:	e7de      	b.n	8009aae <__ieee754_rem_pio2+0x6e>
 8009af0:	f7f6 fbec 	bl	80002cc <__adddf3>
 8009af4:	45a8      	cmp	r8, r5
 8009af6:	4606      	mov	r6, r0
 8009af8:	460f      	mov	r7, r1
 8009afa:	d016      	beq.n	8009b2a <__ieee754_rem_pio2+0xea>
 8009afc:	a38a      	add	r3, pc, #552	; (adr r3, 8009d28 <__ieee754_rem_pio2+0x2e8>)
 8009afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b02:	f7f6 fbe3 	bl	80002cc <__adddf3>
 8009b06:	4602      	mov	r2, r0
 8009b08:	460b      	mov	r3, r1
 8009b0a:	e9c4 2300 	strd	r2, r3, [r4]
 8009b0e:	4630      	mov	r0, r6
 8009b10:	4639      	mov	r1, r7
 8009b12:	f7f6 fbd9 	bl	80002c8 <__aeabi_dsub>
 8009b16:	a384      	add	r3, pc, #528	; (adr r3, 8009d28 <__ieee754_rem_pio2+0x2e8>)
 8009b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1c:	f7f6 fbd6 	bl	80002cc <__adddf3>
 8009b20:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009b24:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009b28:	e7c6      	b.n	8009ab8 <__ieee754_rem_pio2+0x78>
 8009b2a:	a381      	add	r3, pc, #516	; (adr r3, 8009d30 <__ieee754_rem_pio2+0x2f0>)
 8009b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b30:	f7f6 fbcc 	bl	80002cc <__adddf3>
 8009b34:	a380      	add	r3, pc, #512	; (adr r3, 8009d38 <__ieee754_rem_pio2+0x2f8>)
 8009b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3a:	4606      	mov	r6, r0
 8009b3c:	460f      	mov	r7, r1
 8009b3e:	f7f6 fbc5 	bl	80002cc <__adddf3>
 8009b42:	4602      	mov	r2, r0
 8009b44:	460b      	mov	r3, r1
 8009b46:	e9c4 2300 	strd	r2, r3, [r4]
 8009b4a:	4630      	mov	r0, r6
 8009b4c:	4639      	mov	r1, r7
 8009b4e:	f7f6 fbbb 	bl	80002c8 <__aeabi_dsub>
 8009b52:	a379      	add	r3, pc, #484	; (adr r3, 8009d38 <__ieee754_rem_pio2+0x2f8>)
 8009b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b58:	e7e0      	b.n	8009b1c <__ieee754_rem_pio2+0xdc>
 8009b5a:	4b82      	ldr	r3, [pc, #520]	; (8009d64 <__ieee754_rem_pio2+0x324>)
 8009b5c:	4598      	cmp	r8, r3
 8009b5e:	f300 80d0 	bgt.w	8009d02 <__ieee754_rem_pio2+0x2c2>
 8009b62:	f7ff fe1d 	bl	80097a0 <fabs>
 8009b66:	ec57 6b10 	vmov	r6, r7, d0
 8009b6a:	ee10 0a10 	vmov	r0, s0
 8009b6e:	a374      	add	r3, pc, #464	; (adr r3, 8009d40 <__ieee754_rem_pio2+0x300>)
 8009b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b74:	4639      	mov	r1, r7
 8009b76:	f7f6 fd5f 	bl	8000638 <__aeabi_dmul>
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	4b7a      	ldr	r3, [pc, #488]	; (8009d68 <__ieee754_rem_pio2+0x328>)
 8009b7e:	f7f6 fba5 	bl	80002cc <__adddf3>
 8009b82:	f7f7 f809 	bl	8000b98 <__aeabi_d2iz>
 8009b86:	4605      	mov	r5, r0
 8009b88:	f7f6 fcec 	bl	8000564 <__aeabi_i2d>
 8009b8c:	a364      	add	r3, pc, #400	; (adr r3, 8009d20 <__ieee754_rem_pio2+0x2e0>)
 8009b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b96:	f7f6 fd4f 	bl	8000638 <__aeabi_dmul>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	4630      	mov	r0, r6
 8009ba0:	4639      	mov	r1, r7
 8009ba2:	f7f6 fb91 	bl	80002c8 <__aeabi_dsub>
 8009ba6:	a360      	add	r3, pc, #384	; (adr r3, 8009d28 <__ieee754_rem_pio2+0x2e8>)
 8009ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bac:	4682      	mov	sl, r0
 8009bae:	468b      	mov	fp, r1
 8009bb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bb4:	f7f6 fd40 	bl	8000638 <__aeabi_dmul>
 8009bb8:	2d1f      	cmp	r5, #31
 8009bba:	4606      	mov	r6, r0
 8009bbc:	460f      	mov	r7, r1
 8009bbe:	dc0c      	bgt.n	8009bda <__ieee754_rem_pio2+0x19a>
 8009bc0:	1e6a      	subs	r2, r5, #1
 8009bc2:	4b6a      	ldr	r3, [pc, #424]	; (8009d6c <__ieee754_rem_pio2+0x32c>)
 8009bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc8:	4543      	cmp	r3, r8
 8009bca:	d006      	beq.n	8009bda <__ieee754_rem_pio2+0x19a>
 8009bcc:	4632      	mov	r2, r6
 8009bce:	463b      	mov	r3, r7
 8009bd0:	4650      	mov	r0, sl
 8009bd2:	4659      	mov	r1, fp
 8009bd4:	f7f6 fb78 	bl	80002c8 <__aeabi_dsub>
 8009bd8:	e00e      	b.n	8009bf8 <__ieee754_rem_pio2+0x1b8>
 8009bda:	4632      	mov	r2, r6
 8009bdc:	463b      	mov	r3, r7
 8009bde:	4650      	mov	r0, sl
 8009be0:	4659      	mov	r1, fp
 8009be2:	f7f6 fb71 	bl	80002c8 <__aeabi_dsub>
 8009be6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009bea:	9305      	str	r3, [sp, #20]
 8009bec:	9a05      	ldr	r2, [sp, #20]
 8009bee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009bf2:	1ad3      	subs	r3, r2, r3
 8009bf4:	2b10      	cmp	r3, #16
 8009bf6:	dc02      	bgt.n	8009bfe <__ieee754_rem_pio2+0x1be>
 8009bf8:	e9c4 0100 	strd	r0, r1, [r4]
 8009bfc:	e039      	b.n	8009c72 <__ieee754_rem_pio2+0x232>
 8009bfe:	a34c      	add	r3, pc, #304	; (adr r3, 8009d30 <__ieee754_rem_pio2+0x2f0>)
 8009c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c08:	f7f6 fd16 	bl	8000638 <__aeabi_dmul>
 8009c0c:	4606      	mov	r6, r0
 8009c0e:	460f      	mov	r7, r1
 8009c10:	4602      	mov	r2, r0
 8009c12:	460b      	mov	r3, r1
 8009c14:	4650      	mov	r0, sl
 8009c16:	4659      	mov	r1, fp
 8009c18:	f7f6 fb56 	bl	80002c8 <__aeabi_dsub>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	460b      	mov	r3, r1
 8009c20:	4680      	mov	r8, r0
 8009c22:	4689      	mov	r9, r1
 8009c24:	4650      	mov	r0, sl
 8009c26:	4659      	mov	r1, fp
 8009c28:	f7f6 fb4e 	bl	80002c8 <__aeabi_dsub>
 8009c2c:	4632      	mov	r2, r6
 8009c2e:	463b      	mov	r3, r7
 8009c30:	f7f6 fb4a 	bl	80002c8 <__aeabi_dsub>
 8009c34:	a340      	add	r3, pc, #256	; (adr r3, 8009d38 <__ieee754_rem_pio2+0x2f8>)
 8009c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3a:	4606      	mov	r6, r0
 8009c3c:	460f      	mov	r7, r1
 8009c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c42:	f7f6 fcf9 	bl	8000638 <__aeabi_dmul>
 8009c46:	4632      	mov	r2, r6
 8009c48:	463b      	mov	r3, r7
 8009c4a:	f7f6 fb3d 	bl	80002c8 <__aeabi_dsub>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	460b      	mov	r3, r1
 8009c52:	4606      	mov	r6, r0
 8009c54:	460f      	mov	r7, r1
 8009c56:	4640      	mov	r0, r8
 8009c58:	4649      	mov	r1, r9
 8009c5a:	f7f6 fb35 	bl	80002c8 <__aeabi_dsub>
 8009c5e:	9a05      	ldr	r2, [sp, #20]
 8009c60:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009c64:	1ad3      	subs	r3, r2, r3
 8009c66:	2b31      	cmp	r3, #49	; 0x31
 8009c68:	dc20      	bgt.n	8009cac <__ieee754_rem_pio2+0x26c>
 8009c6a:	e9c4 0100 	strd	r0, r1, [r4]
 8009c6e:	46c2      	mov	sl, r8
 8009c70:	46cb      	mov	fp, r9
 8009c72:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009c76:	4650      	mov	r0, sl
 8009c78:	4642      	mov	r2, r8
 8009c7a:	464b      	mov	r3, r9
 8009c7c:	4659      	mov	r1, fp
 8009c7e:	f7f6 fb23 	bl	80002c8 <__aeabi_dsub>
 8009c82:	463b      	mov	r3, r7
 8009c84:	4632      	mov	r2, r6
 8009c86:	f7f6 fb1f 	bl	80002c8 <__aeabi_dsub>
 8009c8a:	9b04      	ldr	r3, [sp, #16]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009c92:	f6bf af11 	bge.w	8009ab8 <__ieee754_rem_pio2+0x78>
 8009c96:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009c9a:	6063      	str	r3, [r4, #4]
 8009c9c:	f8c4 8000 	str.w	r8, [r4]
 8009ca0:	60a0      	str	r0, [r4, #8]
 8009ca2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ca6:	60e3      	str	r3, [r4, #12]
 8009ca8:	426d      	negs	r5, r5
 8009caa:	e705      	b.n	8009ab8 <__ieee754_rem_pio2+0x78>
 8009cac:	a326      	add	r3, pc, #152	; (adr r3, 8009d48 <__ieee754_rem_pio2+0x308>)
 8009cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cb6:	f7f6 fcbf 	bl	8000638 <__aeabi_dmul>
 8009cba:	4606      	mov	r6, r0
 8009cbc:	460f      	mov	r7, r1
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	4640      	mov	r0, r8
 8009cc4:	4649      	mov	r1, r9
 8009cc6:	f7f6 faff 	bl	80002c8 <__aeabi_dsub>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	460b      	mov	r3, r1
 8009cce:	4682      	mov	sl, r0
 8009cd0:	468b      	mov	fp, r1
 8009cd2:	4640      	mov	r0, r8
 8009cd4:	4649      	mov	r1, r9
 8009cd6:	f7f6 faf7 	bl	80002c8 <__aeabi_dsub>
 8009cda:	4632      	mov	r2, r6
 8009cdc:	463b      	mov	r3, r7
 8009cde:	f7f6 faf3 	bl	80002c8 <__aeabi_dsub>
 8009ce2:	a31b      	add	r3, pc, #108	; (adr r3, 8009d50 <__ieee754_rem_pio2+0x310>)
 8009ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce8:	4606      	mov	r6, r0
 8009cea:	460f      	mov	r7, r1
 8009cec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cf0:	f7f6 fca2 	bl	8000638 <__aeabi_dmul>
 8009cf4:	4632      	mov	r2, r6
 8009cf6:	463b      	mov	r3, r7
 8009cf8:	f7f6 fae6 	bl	80002c8 <__aeabi_dsub>
 8009cfc:	4606      	mov	r6, r0
 8009cfe:	460f      	mov	r7, r1
 8009d00:	e764      	b.n	8009bcc <__ieee754_rem_pio2+0x18c>
 8009d02:	4b1b      	ldr	r3, [pc, #108]	; (8009d70 <__ieee754_rem_pio2+0x330>)
 8009d04:	4598      	cmp	r8, r3
 8009d06:	dd35      	ble.n	8009d74 <__ieee754_rem_pio2+0x334>
 8009d08:	ee10 2a10 	vmov	r2, s0
 8009d0c:	463b      	mov	r3, r7
 8009d0e:	4630      	mov	r0, r6
 8009d10:	4639      	mov	r1, r7
 8009d12:	f7f6 fad9 	bl	80002c8 <__aeabi_dsub>
 8009d16:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009d1a:	e9c4 0100 	strd	r0, r1, [r4]
 8009d1e:	e6a1      	b.n	8009a64 <__ieee754_rem_pio2+0x24>
 8009d20:	54400000 	.word	0x54400000
 8009d24:	3ff921fb 	.word	0x3ff921fb
 8009d28:	1a626331 	.word	0x1a626331
 8009d2c:	3dd0b461 	.word	0x3dd0b461
 8009d30:	1a600000 	.word	0x1a600000
 8009d34:	3dd0b461 	.word	0x3dd0b461
 8009d38:	2e037073 	.word	0x2e037073
 8009d3c:	3ba3198a 	.word	0x3ba3198a
 8009d40:	6dc9c883 	.word	0x6dc9c883
 8009d44:	3fe45f30 	.word	0x3fe45f30
 8009d48:	2e000000 	.word	0x2e000000
 8009d4c:	3ba3198a 	.word	0x3ba3198a
 8009d50:	252049c1 	.word	0x252049c1
 8009d54:	397b839a 	.word	0x397b839a
 8009d58:	3fe921fb 	.word	0x3fe921fb
 8009d5c:	4002d97b 	.word	0x4002d97b
 8009d60:	3ff921fb 	.word	0x3ff921fb
 8009d64:	413921fb 	.word	0x413921fb
 8009d68:	3fe00000 	.word	0x3fe00000
 8009d6c:	0800cb58 	.word	0x0800cb58
 8009d70:	7fefffff 	.word	0x7fefffff
 8009d74:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009d78:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8009d7c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009d80:	4630      	mov	r0, r6
 8009d82:	460f      	mov	r7, r1
 8009d84:	f7f6 ff08 	bl	8000b98 <__aeabi_d2iz>
 8009d88:	f7f6 fbec 	bl	8000564 <__aeabi_i2d>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	460b      	mov	r3, r1
 8009d90:	4630      	mov	r0, r6
 8009d92:	4639      	mov	r1, r7
 8009d94:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009d98:	f7f6 fa96 	bl	80002c8 <__aeabi_dsub>
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	4b1f      	ldr	r3, [pc, #124]	; (8009e1c <__ieee754_rem_pio2+0x3dc>)
 8009da0:	f7f6 fc4a 	bl	8000638 <__aeabi_dmul>
 8009da4:	460f      	mov	r7, r1
 8009da6:	4606      	mov	r6, r0
 8009da8:	f7f6 fef6 	bl	8000b98 <__aeabi_d2iz>
 8009dac:	f7f6 fbda 	bl	8000564 <__aeabi_i2d>
 8009db0:	4602      	mov	r2, r0
 8009db2:	460b      	mov	r3, r1
 8009db4:	4630      	mov	r0, r6
 8009db6:	4639      	mov	r1, r7
 8009db8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009dbc:	f7f6 fa84 	bl	80002c8 <__aeabi_dsub>
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	4b16      	ldr	r3, [pc, #88]	; (8009e1c <__ieee754_rem_pio2+0x3dc>)
 8009dc4:	f7f6 fc38 	bl	8000638 <__aeabi_dmul>
 8009dc8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009dcc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8009dd0:	f04f 0803 	mov.w	r8, #3
 8009dd4:	2600      	movs	r6, #0
 8009dd6:	2700      	movs	r7, #0
 8009dd8:	4632      	mov	r2, r6
 8009dda:	463b      	mov	r3, r7
 8009ddc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009de0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8009de4:	f7f6 fe90 	bl	8000b08 <__aeabi_dcmpeq>
 8009de8:	b9b0      	cbnz	r0, 8009e18 <__ieee754_rem_pio2+0x3d8>
 8009dea:	4b0d      	ldr	r3, [pc, #52]	; (8009e20 <__ieee754_rem_pio2+0x3e0>)
 8009dec:	9301      	str	r3, [sp, #4]
 8009dee:	2302      	movs	r3, #2
 8009df0:	9300      	str	r3, [sp, #0]
 8009df2:	462a      	mov	r2, r5
 8009df4:	4643      	mov	r3, r8
 8009df6:	4621      	mov	r1, r4
 8009df8:	a806      	add	r0, sp, #24
 8009dfa:	f000 f8dd 	bl	8009fb8 <__kernel_rem_pio2>
 8009dfe:	9b04      	ldr	r3, [sp, #16]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	4605      	mov	r5, r0
 8009e04:	f6bf ae58 	bge.w	8009ab8 <__ieee754_rem_pio2+0x78>
 8009e08:	6863      	ldr	r3, [r4, #4]
 8009e0a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009e0e:	6063      	str	r3, [r4, #4]
 8009e10:	68e3      	ldr	r3, [r4, #12]
 8009e12:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009e16:	e746      	b.n	8009ca6 <__ieee754_rem_pio2+0x266>
 8009e18:	46d0      	mov	r8, sl
 8009e1a:	e7dd      	b.n	8009dd8 <__ieee754_rem_pio2+0x398>
 8009e1c:	41700000 	.word	0x41700000
 8009e20:	0800cbd8 	.word	0x0800cbd8
 8009e24:	00000000 	.word	0x00000000

08009e28 <__kernel_cos>:
 8009e28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e2c:	ec59 8b10 	vmov	r8, r9, d0
 8009e30:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8009e34:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8009e38:	ed2d 8b02 	vpush	{d8}
 8009e3c:	eeb0 8a41 	vmov.f32	s16, s2
 8009e40:	eef0 8a61 	vmov.f32	s17, s3
 8009e44:	da07      	bge.n	8009e56 <__kernel_cos+0x2e>
 8009e46:	ee10 0a10 	vmov	r0, s0
 8009e4a:	4649      	mov	r1, r9
 8009e4c:	f7f6 fea4 	bl	8000b98 <__aeabi_d2iz>
 8009e50:	2800      	cmp	r0, #0
 8009e52:	f000 8089 	beq.w	8009f68 <__kernel_cos+0x140>
 8009e56:	4642      	mov	r2, r8
 8009e58:	464b      	mov	r3, r9
 8009e5a:	4640      	mov	r0, r8
 8009e5c:	4649      	mov	r1, r9
 8009e5e:	f7f6 fbeb 	bl	8000638 <__aeabi_dmul>
 8009e62:	2200      	movs	r2, #0
 8009e64:	4b4e      	ldr	r3, [pc, #312]	; (8009fa0 <__kernel_cos+0x178>)
 8009e66:	4604      	mov	r4, r0
 8009e68:	460d      	mov	r5, r1
 8009e6a:	f7f6 fbe5 	bl	8000638 <__aeabi_dmul>
 8009e6e:	a340      	add	r3, pc, #256	; (adr r3, 8009f70 <__kernel_cos+0x148>)
 8009e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e74:	4682      	mov	sl, r0
 8009e76:	468b      	mov	fp, r1
 8009e78:	4620      	mov	r0, r4
 8009e7a:	4629      	mov	r1, r5
 8009e7c:	f7f6 fbdc 	bl	8000638 <__aeabi_dmul>
 8009e80:	a33d      	add	r3, pc, #244	; (adr r3, 8009f78 <__kernel_cos+0x150>)
 8009e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e86:	f7f6 fa21 	bl	80002cc <__adddf3>
 8009e8a:	4622      	mov	r2, r4
 8009e8c:	462b      	mov	r3, r5
 8009e8e:	f7f6 fbd3 	bl	8000638 <__aeabi_dmul>
 8009e92:	a33b      	add	r3, pc, #236	; (adr r3, 8009f80 <__kernel_cos+0x158>)
 8009e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e98:	f7f6 fa16 	bl	80002c8 <__aeabi_dsub>
 8009e9c:	4622      	mov	r2, r4
 8009e9e:	462b      	mov	r3, r5
 8009ea0:	f7f6 fbca 	bl	8000638 <__aeabi_dmul>
 8009ea4:	a338      	add	r3, pc, #224	; (adr r3, 8009f88 <__kernel_cos+0x160>)
 8009ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eaa:	f7f6 fa0f 	bl	80002cc <__adddf3>
 8009eae:	4622      	mov	r2, r4
 8009eb0:	462b      	mov	r3, r5
 8009eb2:	f7f6 fbc1 	bl	8000638 <__aeabi_dmul>
 8009eb6:	a336      	add	r3, pc, #216	; (adr r3, 8009f90 <__kernel_cos+0x168>)
 8009eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ebc:	f7f6 fa04 	bl	80002c8 <__aeabi_dsub>
 8009ec0:	4622      	mov	r2, r4
 8009ec2:	462b      	mov	r3, r5
 8009ec4:	f7f6 fbb8 	bl	8000638 <__aeabi_dmul>
 8009ec8:	a333      	add	r3, pc, #204	; (adr r3, 8009f98 <__kernel_cos+0x170>)
 8009eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ece:	f7f6 f9fd 	bl	80002cc <__adddf3>
 8009ed2:	4622      	mov	r2, r4
 8009ed4:	462b      	mov	r3, r5
 8009ed6:	f7f6 fbaf 	bl	8000638 <__aeabi_dmul>
 8009eda:	4622      	mov	r2, r4
 8009edc:	462b      	mov	r3, r5
 8009ede:	f7f6 fbab 	bl	8000638 <__aeabi_dmul>
 8009ee2:	ec53 2b18 	vmov	r2, r3, d8
 8009ee6:	4604      	mov	r4, r0
 8009ee8:	460d      	mov	r5, r1
 8009eea:	4640      	mov	r0, r8
 8009eec:	4649      	mov	r1, r9
 8009eee:	f7f6 fba3 	bl	8000638 <__aeabi_dmul>
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	4629      	mov	r1, r5
 8009ef8:	4620      	mov	r0, r4
 8009efa:	f7f6 f9e5 	bl	80002c8 <__aeabi_dsub>
 8009efe:	4b29      	ldr	r3, [pc, #164]	; (8009fa4 <__kernel_cos+0x17c>)
 8009f00:	429e      	cmp	r6, r3
 8009f02:	4680      	mov	r8, r0
 8009f04:	4689      	mov	r9, r1
 8009f06:	dc11      	bgt.n	8009f2c <__kernel_cos+0x104>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	4650      	mov	r0, sl
 8009f0e:	4659      	mov	r1, fp
 8009f10:	f7f6 f9da 	bl	80002c8 <__aeabi_dsub>
 8009f14:	460b      	mov	r3, r1
 8009f16:	4924      	ldr	r1, [pc, #144]	; (8009fa8 <__kernel_cos+0x180>)
 8009f18:	4602      	mov	r2, r0
 8009f1a:	2000      	movs	r0, #0
 8009f1c:	f7f6 f9d4 	bl	80002c8 <__aeabi_dsub>
 8009f20:	ecbd 8b02 	vpop	{d8}
 8009f24:	ec41 0b10 	vmov	d0, r0, r1
 8009f28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f2c:	4b1f      	ldr	r3, [pc, #124]	; (8009fac <__kernel_cos+0x184>)
 8009f2e:	491e      	ldr	r1, [pc, #120]	; (8009fa8 <__kernel_cos+0x180>)
 8009f30:	429e      	cmp	r6, r3
 8009f32:	bfcc      	ite	gt
 8009f34:	4d1e      	ldrgt	r5, [pc, #120]	; (8009fb0 <__kernel_cos+0x188>)
 8009f36:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8009f3a:	2400      	movs	r4, #0
 8009f3c:	4622      	mov	r2, r4
 8009f3e:	462b      	mov	r3, r5
 8009f40:	2000      	movs	r0, #0
 8009f42:	f7f6 f9c1 	bl	80002c8 <__aeabi_dsub>
 8009f46:	4622      	mov	r2, r4
 8009f48:	4606      	mov	r6, r0
 8009f4a:	460f      	mov	r7, r1
 8009f4c:	462b      	mov	r3, r5
 8009f4e:	4650      	mov	r0, sl
 8009f50:	4659      	mov	r1, fp
 8009f52:	f7f6 f9b9 	bl	80002c8 <__aeabi_dsub>
 8009f56:	4642      	mov	r2, r8
 8009f58:	464b      	mov	r3, r9
 8009f5a:	f7f6 f9b5 	bl	80002c8 <__aeabi_dsub>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	460b      	mov	r3, r1
 8009f62:	4630      	mov	r0, r6
 8009f64:	4639      	mov	r1, r7
 8009f66:	e7d9      	b.n	8009f1c <__kernel_cos+0xf4>
 8009f68:	2000      	movs	r0, #0
 8009f6a:	490f      	ldr	r1, [pc, #60]	; (8009fa8 <__kernel_cos+0x180>)
 8009f6c:	e7d8      	b.n	8009f20 <__kernel_cos+0xf8>
 8009f6e:	bf00      	nop
 8009f70:	be8838d4 	.word	0xbe8838d4
 8009f74:	bda8fae9 	.word	0xbda8fae9
 8009f78:	bdb4b1c4 	.word	0xbdb4b1c4
 8009f7c:	3e21ee9e 	.word	0x3e21ee9e
 8009f80:	809c52ad 	.word	0x809c52ad
 8009f84:	3e927e4f 	.word	0x3e927e4f
 8009f88:	19cb1590 	.word	0x19cb1590
 8009f8c:	3efa01a0 	.word	0x3efa01a0
 8009f90:	16c15177 	.word	0x16c15177
 8009f94:	3f56c16c 	.word	0x3f56c16c
 8009f98:	5555554c 	.word	0x5555554c
 8009f9c:	3fa55555 	.word	0x3fa55555
 8009fa0:	3fe00000 	.word	0x3fe00000
 8009fa4:	3fd33332 	.word	0x3fd33332
 8009fa8:	3ff00000 	.word	0x3ff00000
 8009fac:	3fe90000 	.word	0x3fe90000
 8009fb0:	3fd20000 	.word	0x3fd20000
 8009fb4:	00000000 	.word	0x00000000

08009fb8 <__kernel_rem_pio2>:
 8009fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fbc:	ed2d 8b02 	vpush	{d8}
 8009fc0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8009fc4:	1ed4      	subs	r4, r2, #3
 8009fc6:	9308      	str	r3, [sp, #32]
 8009fc8:	9101      	str	r1, [sp, #4]
 8009fca:	4bc5      	ldr	r3, [pc, #788]	; (800a2e0 <__kernel_rem_pio2+0x328>)
 8009fcc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8009fce:	9009      	str	r0, [sp, #36]	; 0x24
 8009fd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009fd4:	9304      	str	r3, [sp, #16]
 8009fd6:	9b08      	ldr	r3, [sp, #32]
 8009fd8:	3b01      	subs	r3, #1
 8009fda:	9307      	str	r3, [sp, #28]
 8009fdc:	2318      	movs	r3, #24
 8009fde:	fb94 f4f3 	sdiv	r4, r4, r3
 8009fe2:	f06f 0317 	mvn.w	r3, #23
 8009fe6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8009fea:	fb04 3303 	mla	r3, r4, r3, r3
 8009fee:	eb03 0a02 	add.w	sl, r3, r2
 8009ff2:	9b04      	ldr	r3, [sp, #16]
 8009ff4:	9a07      	ldr	r2, [sp, #28]
 8009ff6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800a2d0 <__kernel_rem_pio2+0x318>
 8009ffa:	eb03 0802 	add.w	r8, r3, r2
 8009ffe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a000:	1aa7      	subs	r7, r4, r2
 800a002:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a006:	ae22      	add	r6, sp, #136	; 0x88
 800a008:	2500      	movs	r5, #0
 800a00a:	4545      	cmp	r5, r8
 800a00c:	dd13      	ble.n	800a036 <__kernel_rem_pio2+0x7e>
 800a00e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800a2d0 <__kernel_rem_pio2+0x318>
 800a012:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a016:	2600      	movs	r6, #0
 800a018:	9b04      	ldr	r3, [sp, #16]
 800a01a:	429e      	cmp	r6, r3
 800a01c:	dc32      	bgt.n	800a084 <__kernel_rem_pio2+0xcc>
 800a01e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a020:	9302      	str	r3, [sp, #8]
 800a022:	9b08      	ldr	r3, [sp, #32]
 800a024:	199d      	adds	r5, r3, r6
 800a026:	ab22      	add	r3, sp, #136	; 0x88
 800a028:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a02c:	9306      	str	r3, [sp, #24]
 800a02e:	ec59 8b18 	vmov	r8, r9, d8
 800a032:	2700      	movs	r7, #0
 800a034:	e01f      	b.n	800a076 <__kernel_rem_pio2+0xbe>
 800a036:	42ef      	cmn	r7, r5
 800a038:	d407      	bmi.n	800a04a <__kernel_rem_pio2+0x92>
 800a03a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a03e:	f7f6 fa91 	bl	8000564 <__aeabi_i2d>
 800a042:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a046:	3501      	adds	r5, #1
 800a048:	e7df      	b.n	800a00a <__kernel_rem_pio2+0x52>
 800a04a:	ec51 0b18 	vmov	r0, r1, d8
 800a04e:	e7f8      	b.n	800a042 <__kernel_rem_pio2+0x8a>
 800a050:	9906      	ldr	r1, [sp, #24]
 800a052:	9d02      	ldr	r5, [sp, #8]
 800a054:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800a058:	9106      	str	r1, [sp, #24]
 800a05a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800a05e:	9502      	str	r5, [sp, #8]
 800a060:	f7f6 faea 	bl	8000638 <__aeabi_dmul>
 800a064:	4602      	mov	r2, r0
 800a066:	460b      	mov	r3, r1
 800a068:	4640      	mov	r0, r8
 800a06a:	4649      	mov	r1, r9
 800a06c:	f7f6 f92e 	bl	80002cc <__adddf3>
 800a070:	3701      	adds	r7, #1
 800a072:	4680      	mov	r8, r0
 800a074:	4689      	mov	r9, r1
 800a076:	9b07      	ldr	r3, [sp, #28]
 800a078:	429f      	cmp	r7, r3
 800a07a:	dde9      	ble.n	800a050 <__kernel_rem_pio2+0x98>
 800a07c:	e8eb 8902 	strd	r8, r9, [fp], #8
 800a080:	3601      	adds	r6, #1
 800a082:	e7c9      	b.n	800a018 <__kernel_rem_pio2+0x60>
 800a084:	9b04      	ldr	r3, [sp, #16]
 800a086:	aa0e      	add	r2, sp, #56	; 0x38
 800a088:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a08c:	930c      	str	r3, [sp, #48]	; 0x30
 800a08e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a090:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a094:	9c04      	ldr	r4, [sp, #16]
 800a096:	930b      	str	r3, [sp, #44]	; 0x2c
 800a098:	ab9a      	add	r3, sp, #616	; 0x268
 800a09a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800a09e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a0a2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a0a6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800a0aa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800a0ae:	ab9a      	add	r3, sp, #616	; 0x268
 800a0b0:	445b      	add	r3, fp
 800a0b2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800a0b6:	2500      	movs	r5, #0
 800a0b8:	1b63      	subs	r3, r4, r5
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	dc78      	bgt.n	800a1b0 <__kernel_rem_pio2+0x1f8>
 800a0be:	4650      	mov	r0, sl
 800a0c0:	ec49 8b10 	vmov	d0, r8, r9
 800a0c4:	f7ff fbfc 	bl	80098c0 <scalbn>
 800a0c8:	ec57 6b10 	vmov	r6, r7, d0
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a0d2:	ee10 0a10 	vmov	r0, s0
 800a0d6:	4639      	mov	r1, r7
 800a0d8:	f7f6 faae 	bl	8000638 <__aeabi_dmul>
 800a0dc:	ec41 0b10 	vmov	d0, r0, r1
 800a0e0:	f7ff fb6a 	bl	80097b8 <floor>
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	ec51 0b10 	vmov	r0, r1, d0
 800a0ea:	4b7e      	ldr	r3, [pc, #504]	; (800a2e4 <__kernel_rem_pio2+0x32c>)
 800a0ec:	f7f6 faa4 	bl	8000638 <__aeabi_dmul>
 800a0f0:	4602      	mov	r2, r0
 800a0f2:	460b      	mov	r3, r1
 800a0f4:	4630      	mov	r0, r6
 800a0f6:	4639      	mov	r1, r7
 800a0f8:	f7f6 f8e6 	bl	80002c8 <__aeabi_dsub>
 800a0fc:	460f      	mov	r7, r1
 800a0fe:	4606      	mov	r6, r0
 800a100:	f7f6 fd4a 	bl	8000b98 <__aeabi_d2iz>
 800a104:	9006      	str	r0, [sp, #24]
 800a106:	f7f6 fa2d 	bl	8000564 <__aeabi_i2d>
 800a10a:	4602      	mov	r2, r0
 800a10c:	460b      	mov	r3, r1
 800a10e:	4630      	mov	r0, r6
 800a110:	4639      	mov	r1, r7
 800a112:	f7f6 f8d9 	bl	80002c8 <__aeabi_dsub>
 800a116:	f1ba 0f00 	cmp.w	sl, #0
 800a11a:	4606      	mov	r6, r0
 800a11c:	460f      	mov	r7, r1
 800a11e:	dd6c      	ble.n	800a1fa <__kernel_rem_pio2+0x242>
 800a120:	1e62      	subs	r2, r4, #1
 800a122:	ab0e      	add	r3, sp, #56	; 0x38
 800a124:	f1ca 0118 	rsb	r1, sl, #24
 800a128:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a12c:	9d06      	ldr	r5, [sp, #24]
 800a12e:	fa40 f301 	asr.w	r3, r0, r1
 800a132:	441d      	add	r5, r3
 800a134:	408b      	lsls	r3, r1
 800a136:	1ac0      	subs	r0, r0, r3
 800a138:	ab0e      	add	r3, sp, #56	; 0x38
 800a13a:	9506      	str	r5, [sp, #24]
 800a13c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a140:	f1ca 0317 	rsb	r3, sl, #23
 800a144:	fa40 f303 	asr.w	r3, r0, r3
 800a148:	9302      	str	r3, [sp, #8]
 800a14a:	9b02      	ldr	r3, [sp, #8]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	dd62      	ble.n	800a216 <__kernel_rem_pio2+0x25e>
 800a150:	9b06      	ldr	r3, [sp, #24]
 800a152:	2200      	movs	r2, #0
 800a154:	3301      	adds	r3, #1
 800a156:	9306      	str	r3, [sp, #24]
 800a158:	4615      	mov	r5, r2
 800a15a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a15e:	4294      	cmp	r4, r2
 800a160:	f300 8095 	bgt.w	800a28e <__kernel_rem_pio2+0x2d6>
 800a164:	f1ba 0f00 	cmp.w	sl, #0
 800a168:	dd07      	ble.n	800a17a <__kernel_rem_pio2+0x1c2>
 800a16a:	f1ba 0f01 	cmp.w	sl, #1
 800a16e:	f000 80a2 	beq.w	800a2b6 <__kernel_rem_pio2+0x2fe>
 800a172:	f1ba 0f02 	cmp.w	sl, #2
 800a176:	f000 80c1 	beq.w	800a2fc <__kernel_rem_pio2+0x344>
 800a17a:	9b02      	ldr	r3, [sp, #8]
 800a17c:	2b02      	cmp	r3, #2
 800a17e:	d14a      	bne.n	800a216 <__kernel_rem_pio2+0x25e>
 800a180:	4632      	mov	r2, r6
 800a182:	463b      	mov	r3, r7
 800a184:	2000      	movs	r0, #0
 800a186:	4958      	ldr	r1, [pc, #352]	; (800a2e8 <__kernel_rem_pio2+0x330>)
 800a188:	f7f6 f89e 	bl	80002c8 <__aeabi_dsub>
 800a18c:	4606      	mov	r6, r0
 800a18e:	460f      	mov	r7, r1
 800a190:	2d00      	cmp	r5, #0
 800a192:	d040      	beq.n	800a216 <__kernel_rem_pio2+0x25e>
 800a194:	4650      	mov	r0, sl
 800a196:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800a2d8 <__kernel_rem_pio2+0x320>
 800a19a:	f7ff fb91 	bl	80098c0 <scalbn>
 800a19e:	4630      	mov	r0, r6
 800a1a0:	4639      	mov	r1, r7
 800a1a2:	ec53 2b10 	vmov	r2, r3, d0
 800a1a6:	f7f6 f88f 	bl	80002c8 <__aeabi_dsub>
 800a1aa:	4606      	mov	r6, r0
 800a1ac:	460f      	mov	r7, r1
 800a1ae:	e032      	b.n	800a216 <__kernel_rem_pio2+0x25e>
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	4b4e      	ldr	r3, [pc, #312]	; (800a2ec <__kernel_rem_pio2+0x334>)
 800a1b4:	4640      	mov	r0, r8
 800a1b6:	4649      	mov	r1, r9
 800a1b8:	f7f6 fa3e 	bl	8000638 <__aeabi_dmul>
 800a1bc:	f7f6 fcec 	bl	8000b98 <__aeabi_d2iz>
 800a1c0:	f7f6 f9d0 	bl	8000564 <__aeabi_i2d>
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	4b4a      	ldr	r3, [pc, #296]	; (800a2f0 <__kernel_rem_pio2+0x338>)
 800a1c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1cc:	f7f6 fa34 	bl	8000638 <__aeabi_dmul>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	4640      	mov	r0, r8
 800a1d6:	4649      	mov	r1, r9
 800a1d8:	f7f6 f876 	bl	80002c8 <__aeabi_dsub>
 800a1dc:	f7f6 fcdc 	bl	8000b98 <__aeabi_d2iz>
 800a1e0:	ab0e      	add	r3, sp, #56	; 0x38
 800a1e2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800a1e6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800a1ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1ee:	f7f6 f86d 	bl	80002cc <__adddf3>
 800a1f2:	3501      	adds	r5, #1
 800a1f4:	4680      	mov	r8, r0
 800a1f6:	4689      	mov	r9, r1
 800a1f8:	e75e      	b.n	800a0b8 <__kernel_rem_pio2+0x100>
 800a1fa:	d105      	bne.n	800a208 <__kernel_rem_pio2+0x250>
 800a1fc:	1e63      	subs	r3, r4, #1
 800a1fe:	aa0e      	add	r2, sp, #56	; 0x38
 800a200:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a204:	15c3      	asrs	r3, r0, #23
 800a206:	e79f      	b.n	800a148 <__kernel_rem_pio2+0x190>
 800a208:	2200      	movs	r2, #0
 800a20a:	4b3a      	ldr	r3, [pc, #232]	; (800a2f4 <__kernel_rem_pio2+0x33c>)
 800a20c:	f7f6 fc9a 	bl	8000b44 <__aeabi_dcmpge>
 800a210:	2800      	cmp	r0, #0
 800a212:	d139      	bne.n	800a288 <__kernel_rem_pio2+0x2d0>
 800a214:	9002      	str	r0, [sp, #8]
 800a216:	2200      	movs	r2, #0
 800a218:	2300      	movs	r3, #0
 800a21a:	4630      	mov	r0, r6
 800a21c:	4639      	mov	r1, r7
 800a21e:	f7f6 fc73 	bl	8000b08 <__aeabi_dcmpeq>
 800a222:	2800      	cmp	r0, #0
 800a224:	f000 80c7 	beq.w	800a3b6 <__kernel_rem_pio2+0x3fe>
 800a228:	1e65      	subs	r5, r4, #1
 800a22a:	462b      	mov	r3, r5
 800a22c:	2200      	movs	r2, #0
 800a22e:	9904      	ldr	r1, [sp, #16]
 800a230:	428b      	cmp	r3, r1
 800a232:	da6a      	bge.n	800a30a <__kernel_rem_pio2+0x352>
 800a234:	2a00      	cmp	r2, #0
 800a236:	f000 8088 	beq.w	800a34a <__kernel_rem_pio2+0x392>
 800a23a:	ab0e      	add	r3, sp, #56	; 0x38
 800a23c:	f1aa 0a18 	sub.w	sl, sl, #24
 800a240:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a244:	2b00      	cmp	r3, #0
 800a246:	f000 80b4 	beq.w	800a3b2 <__kernel_rem_pio2+0x3fa>
 800a24a:	4650      	mov	r0, sl
 800a24c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800a2d8 <__kernel_rem_pio2+0x320>
 800a250:	f7ff fb36 	bl	80098c0 <scalbn>
 800a254:	00ec      	lsls	r4, r5, #3
 800a256:	ab72      	add	r3, sp, #456	; 0x1c8
 800a258:	191e      	adds	r6, r3, r4
 800a25a:	ec59 8b10 	vmov	r8, r9, d0
 800a25e:	f106 0a08 	add.w	sl, r6, #8
 800a262:	462f      	mov	r7, r5
 800a264:	2f00      	cmp	r7, #0
 800a266:	f280 80df 	bge.w	800a428 <__kernel_rem_pio2+0x470>
 800a26a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800a2d0 <__kernel_rem_pio2+0x318>
 800a26e:	f04f 0a00 	mov.w	sl, #0
 800a272:	eba5 030a 	sub.w	r3, r5, sl
 800a276:	2b00      	cmp	r3, #0
 800a278:	f2c0 810a 	blt.w	800a490 <__kernel_rem_pio2+0x4d8>
 800a27c:	f8df b078 	ldr.w	fp, [pc, #120]	; 800a2f8 <__kernel_rem_pio2+0x340>
 800a280:	ec59 8b18 	vmov	r8, r9, d8
 800a284:	2700      	movs	r7, #0
 800a286:	e0f5      	b.n	800a474 <__kernel_rem_pio2+0x4bc>
 800a288:	2302      	movs	r3, #2
 800a28a:	9302      	str	r3, [sp, #8]
 800a28c:	e760      	b.n	800a150 <__kernel_rem_pio2+0x198>
 800a28e:	ab0e      	add	r3, sp, #56	; 0x38
 800a290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a294:	b94d      	cbnz	r5, 800a2aa <__kernel_rem_pio2+0x2f2>
 800a296:	b12b      	cbz	r3, 800a2a4 <__kernel_rem_pio2+0x2ec>
 800a298:	a80e      	add	r0, sp, #56	; 0x38
 800a29a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a29e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	3201      	adds	r2, #1
 800a2a6:	461d      	mov	r5, r3
 800a2a8:	e759      	b.n	800a15e <__kernel_rem_pio2+0x1a6>
 800a2aa:	a80e      	add	r0, sp, #56	; 0x38
 800a2ac:	1acb      	subs	r3, r1, r3
 800a2ae:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a2b2:	462b      	mov	r3, r5
 800a2b4:	e7f6      	b.n	800a2a4 <__kernel_rem_pio2+0x2ec>
 800a2b6:	1e62      	subs	r2, r4, #1
 800a2b8:	ab0e      	add	r3, sp, #56	; 0x38
 800a2ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2be:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a2c2:	a90e      	add	r1, sp, #56	; 0x38
 800a2c4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a2c8:	e757      	b.n	800a17a <__kernel_rem_pio2+0x1c2>
 800a2ca:	bf00      	nop
 800a2cc:	f3af 8000 	nop.w
	...
 800a2dc:	3ff00000 	.word	0x3ff00000
 800a2e0:	0800cd20 	.word	0x0800cd20
 800a2e4:	40200000 	.word	0x40200000
 800a2e8:	3ff00000 	.word	0x3ff00000
 800a2ec:	3e700000 	.word	0x3e700000
 800a2f0:	41700000 	.word	0x41700000
 800a2f4:	3fe00000 	.word	0x3fe00000
 800a2f8:	0800cce0 	.word	0x0800cce0
 800a2fc:	1e62      	subs	r2, r4, #1
 800a2fe:	ab0e      	add	r3, sp, #56	; 0x38
 800a300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a304:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a308:	e7db      	b.n	800a2c2 <__kernel_rem_pio2+0x30a>
 800a30a:	a90e      	add	r1, sp, #56	; 0x38
 800a30c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a310:	3b01      	subs	r3, #1
 800a312:	430a      	orrs	r2, r1
 800a314:	e78b      	b.n	800a22e <__kernel_rem_pio2+0x276>
 800a316:	3301      	adds	r3, #1
 800a318:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a31c:	2900      	cmp	r1, #0
 800a31e:	d0fa      	beq.n	800a316 <__kernel_rem_pio2+0x35e>
 800a320:	9a08      	ldr	r2, [sp, #32]
 800a322:	4422      	add	r2, r4
 800a324:	00d2      	lsls	r2, r2, #3
 800a326:	a922      	add	r1, sp, #136	; 0x88
 800a328:	18e3      	adds	r3, r4, r3
 800a32a:	9206      	str	r2, [sp, #24]
 800a32c:	440a      	add	r2, r1
 800a32e:	9302      	str	r3, [sp, #8]
 800a330:	f10b 0108 	add.w	r1, fp, #8
 800a334:	f102 0308 	add.w	r3, r2, #8
 800a338:	1c66      	adds	r6, r4, #1
 800a33a:	910a      	str	r1, [sp, #40]	; 0x28
 800a33c:	2500      	movs	r5, #0
 800a33e:	930d      	str	r3, [sp, #52]	; 0x34
 800a340:	9b02      	ldr	r3, [sp, #8]
 800a342:	42b3      	cmp	r3, r6
 800a344:	da04      	bge.n	800a350 <__kernel_rem_pio2+0x398>
 800a346:	461c      	mov	r4, r3
 800a348:	e6a6      	b.n	800a098 <__kernel_rem_pio2+0xe0>
 800a34a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a34c:	2301      	movs	r3, #1
 800a34e:	e7e3      	b.n	800a318 <__kernel_rem_pio2+0x360>
 800a350:	9b06      	ldr	r3, [sp, #24]
 800a352:	18ef      	adds	r7, r5, r3
 800a354:	ab22      	add	r3, sp, #136	; 0x88
 800a356:	441f      	add	r7, r3
 800a358:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a35a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a35e:	f7f6 f901 	bl	8000564 <__aeabi_i2d>
 800a362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a364:	461c      	mov	r4, r3
 800a366:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a368:	e9c7 0100 	strd	r0, r1, [r7]
 800a36c:	eb03 0b05 	add.w	fp, r3, r5
 800a370:	2700      	movs	r7, #0
 800a372:	f04f 0800 	mov.w	r8, #0
 800a376:	f04f 0900 	mov.w	r9, #0
 800a37a:	9b07      	ldr	r3, [sp, #28]
 800a37c:	429f      	cmp	r7, r3
 800a37e:	dd08      	ble.n	800a392 <__kernel_rem_pio2+0x3da>
 800a380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a382:	aa72      	add	r2, sp, #456	; 0x1c8
 800a384:	18eb      	adds	r3, r5, r3
 800a386:	4413      	add	r3, r2
 800a388:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800a38c:	3601      	adds	r6, #1
 800a38e:	3508      	adds	r5, #8
 800a390:	e7d6      	b.n	800a340 <__kernel_rem_pio2+0x388>
 800a392:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a396:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a39a:	f7f6 f94d 	bl	8000638 <__aeabi_dmul>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	4640      	mov	r0, r8
 800a3a4:	4649      	mov	r1, r9
 800a3a6:	f7f5 ff91 	bl	80002cc <__adddf3>
 800a3aa:	3701      	adds	r7, #1
 800a3ac:	4680      	mov	r8, r0
 800a3ae:	4689      	mov	r9, r1
 800a3b0:	e7e3      	b.n	800a37a <__kernel_rem_pio2+0x3c2>
 800a3b2:	3d01      	subs	r5, #1
 800a3b4:	e741      	b.n	800a23a <__kernel_rem_pio2+0x282>
 800a3b6:	f1ca 0000 	rsb	r0, sl, #0
 800a3ba:	ec47 6b10 	vmov	d0, r6, r7
 800a3be:	f7ff fa7f 	bl	80098c0 <scalbn>
 800a3c2:	ec57 6b10 	vmov	r6, r7, d0
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	4b99      	ldr	r3, [pc, #612]	; (800a630 <__kernel_rem_pio2+0x678>)
 800a3ca:	ee10 0a10 	vmov	r0, s0
 800a3ce:	4639      	mov	r1, r7
 800a3d0:	f7f6 fbb8 	bl	8000b44 <__aeabi_dcmpge>
 800a3d4:	b1f8      	cbz	r0, 800a416 <__kernel_rem_pio2+0x45e>
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	4b96      	ldr	r3, [pc, #600]	; (800a634 <__kernel_rem_pio2+0x67c>)
 800a3da:	4630      	mov	r0, r6
 800a3dc:	4639      	mov	r1, r7
 800a3de:	f7f6 f92b 	bl	8000638 <__aeabi_dmul>
 800a3e2:	f7f6 fbd9 	bl	8000b98 <__aeabi_d2iz>
 800a3e6:	4680      	mov	r8, r0
 800a3e8:	f7f6 f8bc 	bl	8000564 <__aeabi_i2d>
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	4b90      	ldr	r3, [pc, #576]	; (800a630 <__kernel_rem_pio2+0x678>)
 800a3f0:	f7f6 f922 	bl	8000638 <__aeabi_dmul>
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	4602      	mov	r2, r0
 800a3f8:	4639      	mov	r1, r7
 800a3fa:	4630      	mov	r0, r6
 800a3fc:	f7f5 ff64 	bl	80002c8 <__aeabi_dsub>
 800a400:	f7f6 fbca 	bl	8000b98 <__aeabi_d2iz>
 800a404:	1c65      	adds	r5, r4, #1
 800a406:	ab0e      	add	r3, sp, #56	; 0x38
 800a408:	f10a 0a18 	add.w	sl, sl, #24
 800a40c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a410:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a414:	e719      	b.n	800a24a <__kernel_rem_pio2+0x292>
 800a416:	4630      	mov	r0, r6
 800a418:	4639      	mov	r1, r7
 800a41a:	f7f6 fbbd 	bl	8000b98 <__aeabi_d2iz>
 800a41e:	ab0e      	add	r3, sp, #56	; 0x38
 800a420:	4625      	mov	r5, r4
 800a422:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a426:	e710      	b.n	800a24a <__kernel_rem_pio2+0x292>
 800a428:	ab0e      	add	r3, sp, #56	; 0x38
 800a42a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800a42e:	f7f6 f899 	bl	8000564 <__aeabi_i2d>
 800a432:	4642      	mov	r2, r8
 800a434:	464b      	mov	r3, r9
 800a436:	f7f6 f8ff 	bl	8000638 <__aeabi_dmul>
 800a43a:	2200      	movs	r2, #0
 800a43c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800a440:	4b7c      	ldr	r3, [pc, #496]	; (800a634 <__kernel_rem_pio2+0x67c>)
 800a442:	4640      	mov	r0, r8
 800a444:	4649      	mov	r1, r9
 800a446:	f7f6 f8f7 	bl	8000638 <__aeabi_dmul>
 800a44a:	3f01      	subs	r7, #1
 800a44c:	4680      	mov	r8, r0
 800a44e:	4689      	mov	r9, r1
 800a450:	e708      	b.n	800a264 <__kernel_rem_pio2+0x2ac>
 800a452:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800a456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800a45e:	f7f6 f8eb 	bl	8000638 <__aeabi_dmul>
 800a462:	4602      	mov	r2, r0
 800a464:	460b      	mov	r3, r1
 800a466:	4640      	mov	r0, r8
 800a468:	4649      	mov	r1, r9
 800a46a:	f7f5 ff2f 	bl	80002cc <__adddf3>
 800a46e:	3701      	adds	r7, #1
 800a470:	4680      	mov	r8, r0
 800a472:	4689      	mov	r9, r1
 800a474:	9b04      	ldr	r3, [sp, #16]
 800a476:	429f      	cmp	r7, r3
 800a478:	dc01      	bgt.n	800a47e <__kernel_rem_pio2+0x4c6>
 800a47a:	45ba      	cmp	sl, r7
 800a47c:	dae9      	bge.n	800a452 <__kernel_rem_pio2+0x49a>
 800a47e:	ab4a      	add	r3, sp, #296	; 0x128
 800a480:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a484:	e9c3 8900 	strd	r8, r9, [r3]
 800a488:	f10a 0a01 	add.w	sl, sl, #1
 800a48c:	3e08      	subs	r6, #8
 800a48e:	e6f0      	b.n	800a272 <__kernel_rem_pio2+0x2ba>
 800a490:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a492:	2b03      	cmp	r3, #3
 800a494:	d85b      	bhi.n	800a54e <__kernel_rem_pio2+0x596>
 800a496:	e8df f003 	tbb	[pc, r3]
 800a49a:	264a      	.short	0x264a
 800a49c:	0226      	.short	0x0226
 800a49e:	ab9a      	add	r3, sp, #616	; 0x268
 800a4a0:	441c      	add	r4, r3
 800a4a2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a4a6:	46a2      	mov	sl, r4
 800a4a8:	46ab      	mov	fp, r5
 800a4aa:	f1bb 0f00 	cmp.w	fp, #0
 800a4ae:	dc6c      	bgt.n	800a58a <__kernel_rem_pio2+0x5d2>
 800a4b0:	46a2      	mov	sl, r4
 800a4b2:	46ab      	mov	fp, r5
 800a4b4:	f1bb 0f01 	cmp.w	fp, #1
 800a4b8:	f300 8086 	bgt.w	800a5c8 <__kernel_rem_pio2+0x610>
 800a4bc:	2000      	movs	r0, #0
 800a4be:	2100      	movs	r1, #0
 800a4c0:	2d01      	cmp	r5, #1
 800a4c2:	f300 80a0 	bgt.w	800a606 <__kernel_rem_pio2+0x64e>
 800a4c6:	9b02      	ldr	r3, [sp, #8]
 800a4c8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800a4cc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	f040 809e 	bne.w	800a612 <__kernel_rem_pio2+0x65a>
 800a4d6:	9b01      	ldr	r3, [sp, #4]
 800a4d8:	e9c3 7800 	strd	r7, r8, [r3]
 800a4dc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a4e0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a4e4:	e033      	b.n	800a54e <__kernel_rem_pio2+0x596>
 800a4e6:	3408      	adds	r4, #8
 800a4e8:	ab4a      	add	r3, sp, #296	; 0x128
 800a4ea:	441c      	add	r4, r3
 800a4ec:	462e      	mov	r6, r5
 800a4ee:	2000      	movs	r0, #0
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	2e00      	cmp	r6, #0
 800a4f4:	da3a      	bge.n	800a56c <__kernel_rem_pio2+0x5b4>
 800a4f6:	9b02      	ldr	r3, [sp, #8]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d03d      	beq.n	800a578 <__kernel_rem_pio2+0x5c0>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a502:	9c01      	ldr	r4, [sp, #4]
 800a504:	e9c4 2300 	strd	r2, r3, [r4]
 800a508:	4602      	mov	r2, r0
 800a50a:	460b      	mov	r3, r1
 800a50c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a510:	f7f5 feda 	bl	80002c8 <__aeabi_dsub>
 800a514:	ae4c      	add	r6, sp, #304	; 0x130
 800a516:	2401      	movs	r4, #1
 800a518:	42a5      	cmp	r5, r4
 800a51a:	da30      	bge.n	800a57e <__kernel_rem_pio2+0x5c6>
 800a51c:	9b02      	ldr	r3, [sp, #8]
 800a51e:	b113      	cbz	r3, 800a526 <__kernel_rem_pio2+0x56e>
 800a520:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a524:	4619      	mov	r1, r3
 800a526:	9b01      	ldr	r3, [sp, #4]
 800a528:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a52c:	e00f      	b.n	800a54e <__kernel_rem_pio2+0x596>
 800a52e:	ab9a      	add	r3, sp, #616	; 0x268
 800a530:	441c      	add	r4, r3
 800a532:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a536:	2000      	movs	r0, #0
 800a538:	2100      	movs	r1, #0
 800a53a:	2d00      	cmp	r5, #0
 800a53c:	da10      	bge.n	800a560 <__kernel_rem_pio2+0x5a8>
 800a53e:	9b02      	ldr	r3, [sp, #8]
 800a540:	b113      	cbz	r3, 800a548 <__kernel_rem_pio2+0x590>
 800a542:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a546:	4619      	mov	r1, r3
 800a548:	9b01      	ldr	r3, [sp, #4]
 800a54a:	e9c3 0100 	strd	r0, r1, [r3]
 800a54e:	9b06      	ldr	r3, [sp, #24]
 800a550:	f003 0007 	and.w	r0, r3, #7
 800a554:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a558:	ecbd 8b02 	vpop	{d8}
 800a55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a560:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a564:	f7f5 feb2 	bl	80002cc <__adddf3>
 800a568:	3d01      	subs	r5, #1
 800a56a:	e7e6      	b.n	800a53a <__kernel_rem_pio2+0x582>
 800a56c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a570:	f7f5 feac 	bl	80002cc <__adddf3>
 800a574:	3e01      	subs	r6, #1
 800a576:	e7bc      	b.n	800a4f2 <__kernel_rem_pio2+0x53a>
 800a578:	4602      	mov	r2, r0
 800a57a:	460b      	mov	r3, r1
 800a57c:	e7c1      	b.n	800a502 <__kernel_rem_pio2+0x54a>
 800a57e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a582:	f7f5 fea3 	bl	80002cc <__adddf3>
 800a586:	3401      	adds	r4, #1
 800a588:	e7c6      	b.n	800a518 <__kernel_rem_pio2+0x560>
 800a58a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800a58e:	ed3a 7b02 	vldmdb	sl!, {d7}
 800a592:	4640      	mov	r0, r8
 800a594:	ec53 2b17 	vmov	r2, r3, d7
 800a598:	4649      	mov	r1, r9
 800a59a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a59e:	f7f5 fe95 	bl	80002cc <__adddf3>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	4606      	mov	r6, r0
 800a5a8:	460f      	mov	r7, r1
 800a5aa:	4640      	mov	r0, r8
 800a5ac:	4649      	mov	r1, r9
 800a5ae:	f7f5 fe8b 	bl	80002c8 <__aeabi_dsub>
 800a5b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5b6:	f7f5 fe89 	bl	80002cc <__adddf3>
 800a5ba:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a5be:	e9ca 0100 	strd	r0, r1, [sl]
 800a5c2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800a5c6:	e770      	b.n	800a4aa <__kernel_rem_pio2+0x4f2>
 800a5c8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800a5cc:	ed3a 7b02 	vldmdb	sl!, {d7}
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	ec53 2b17 	vmov	r2, r3, d7
 800a5d6:	4639      	mov	r1, r7
 800a5d8:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a5dc:	f7f5 fe76 	bl	80002cc <__adddf3>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	4680      	mov	r8, r0
 800a5e6:	4689      	mov	r9, r1
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	4639      	mov	r1, r7
 800a5ec:	f7f5 fe6c 	bl	80002c8 <__aeabi_dsub>
 800a5f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5f4:	f7f5 fe6a 	bl	80002cc <__adddf3>
 800a5f8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a5fc:	e9ca 0100 	strd	r0, r1, [sl]
 800a600:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800a604:	e756      	b.n	800a4b4 <__kernel_rem_pio2+0x4fc>
 800a606:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a60a:	f7f5 fe5f 	bl	80002cc <__adddf3>
 800a60e:	3d01      	subs	r5, #1
 800a610:	e756      	b.n	800a4c0 <__kernel_rem_pio2+0x508>
 800a612:	9b01      	ldr	r3, [sp, #4]
 800a614:	9a01      	ldr	r2, [sp, #4]
 800a616:	601f      	str	r7, [r3, #0]
 800a618:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800a61c:	605c      	str	r4, [r3, #4]
 800a61e:	609d      	str	r5, [r3, #8]
 800a620:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a624:	60d3      	str	r3, [r2, #12]
 800a626:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a62a:	6110      	str	r0, [r2, #16]
 800a62c:	6153      	str	r3, [r2, #20]
 800a62e:	e78e      	b.n	800a54e <__kernel_rem_pio2+0x596>
 800a630:	41700000 	.word	0x41700000
 800a634:	3e700000 	.word	0x3e700000

0800a638 <__kernel_sin>:
 800a638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a63c:	ec55 4b10 	vmov	r4, r5, d0
 800a640:	b085      	sub	sp, #20
 800a642:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a646:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a64a:	ed8d 1b00 	vstr	d1, [sp]
 800a64e:	9002      	str	r0, [sp, #8]
 800a650:	da06      	bge.n	800a660 <__kernel_sin+0x28>
 800a652:	ee10 0a10 	vmov	r0, s0
 800a656:	4629      	mov	r1, r5
 800a658:	f7f6 fa9e 	bl	8000b98 <__aeabi_d2iz>
 800a65c:	2800      	cmp	r0, #0
 800a65e:	d051      	beq.n	800a704 <__kernel_sin+0xcc>
 800a660:	4622      	mov	r2, r4
 800a662:	462b      	mov	r3, r5
 800a664:	4620      	mov	r0, r4
 800a666:	4629      	mov	r1, r5
 800a668:	f7f5 ffe6 	bl	8000638 <__aeabi_dmul>
 800a66c:	4682      	mov	sl, r0
 800a66e:	468b      	mov	fp, r1
 800a670:	4602      	mov	r2, r0
 800a672:	460b      	mov	r3, r1
 800a674:	4620      	mov	r0, r4
 800a676:	4629      	mov	r1, r5
 800a678:	f7f5 ffde 	bl	8000638 <__aeabi_dmul>
 800a67c:	a341      	add	r3, pc, #260	; (adr r3, 800a784 <__kernel_sin+0x14c>)
 800a67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a682:	4680      	mov	r8, r0
 800a684:	4689      	mov	r9, r1
 800a686:	4650      	mov	r0, sl
 800a688:	4659      	mov	r1, fp
 800a68a:	f7f5 ffd5 	bl	8000638 <__aeabi_dmul>
 800a68e:	a33f      	add	r3, pc, #252	; (adr r3, 800a78c <__kernel_sin+0x154>)
 800a690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a694:	f7f5 fe18 	bl	80002c8 <__aeabi_dsub>
 800a698:	4652      	mov	r2, sl
 800a69a:	465b      	mov	r3, fp
 800a69c:	f7f5 ffcc 	bl	8000638 <__aeabi_dmul>
 800a6a0:	a33c      	add	r3, pc, #240	; (adr r3, 800a794 <__kernel_sin+0x15c>)
 800a6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a6:	f7f5 fe11 	bl	80002cc <__adddf3>
 800a6aa:	4652      	mov	r2, sl
 800a6ac:	465b      	mov	r3, fp
 800a6ae:	f7f5 ffc3 	bl	8000638 <__aeabi_dmul>
 800a6b2:	a33a      	add	r3, pc, #232	; (adr r3, 800a79c <__kernel_sin+0x164>)
 800a6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b8:	f7f5 fe06 	bl	80002c8 <__aeabi_dsub>
 800a6bc:	4652      	mov	r2, sl
 800a6be:	465b      	mov	r3, fp
 800a6c0:	f7f5 ffba 	bl	8000638 <__aeabi_dmul>
 800a6c4:	a337      	add	r3, pc, #220	; (adr r3, 800a7a4 <__kernel_sin+0x16c>)
 800a6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ca:	f7f5 fdff 	bl	80002cc <__adddf3>
 800a6ce:	9b02      	ldr	r3, [sp, #8]
 800a6d0:	4606      	mov	r6, r0
 800a6d2:	460f      	mov	r7, r1
 800a6d4:	b9db      	cbnz	r3, 800a70e <__kernel_sin+0xd6>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	460b      	mov	r3, r1
 800a6da:	4650      	mov	r0, sl
 800a6dc:	4659      	mov	r1, fp
 800a6de:	f7f5 ffab 	bl	8000638 <__aeabi_dmul>
 800a6e2:	a325      	add	r3, pc, #148	; (adr r3, 800a778 <__kernel_sin+0x140>)
 800a6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e8:	f7f5 fdee 	bl	80002c8 <__aeabi_dsub>
 800a6ec:	4642      	mov	r2, r8
 800a6ee:	464b      	mov	r3, r9
 800a6f0:	f7f5 ffa2 	bl	8000638 <__aeabi_dmul>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	4629      	mov	r1, r5
 800a6fc:	f7f5 fde6 	bl	80002cc <__adddf3>
 800a700:	4604      	mov	r4, r0
 800a702:	460d      	mov	r5, r1
 800a704:	ec45 4b10 	vmov	d0, r4, r5
 800a708:	b005      	add	sp, #20
 800a70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a70e:	2200      	movs	r2, #0
 800a710:	4b1b      	ldr	r3, [pc, #108]	; (800a780 <__kernel_sin+0x148>)
 800a712:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a716:	f7f5 ff8f 	bl	8000638 <__aeabi_dmul>
 800a71a:	4632      	mov	r2, r6
 800a71c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a720:	463b      	mov	r3, r7
 800a722:	4640      	mov	r0, r8
 800a724:	4649      	mov	r1, r9
 800a726:	f7f5 ff87 	bl	8000638 <__aeabi_dmul>
 800a72a:	4602      	mov	r2, r0
 800a72c:	460b      	mov	r3, r1
 800a72e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a732:	f7f5 fdc9 	bl	80002c8 <__aeabi_dsub>
 800a736:	4652      	mov	r2, sl
 800a738:	465b      	mov	r3, fp
 800a73a:	f7f5 ff7d 	bl	8000638 <__aeabi_dmul>
 800a73e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a742:	f7f5 fdc1 	bl	80002c8 <__aeabi_dsub>
 800a746:	a30c      	add	r3, pc, #48	; (adr r3, 800a778 <__kernel_sin+0x140>)
 800a748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74c:	4606      	mov	r6, r0
 800a74e:	460f      	mov	r7, r1
 800a750:	4640      	mov	r0, r8
 800a752:	4649      	mov	r1, r9
 800a754:	f7f5 ff70 	bl	8000638 <__aeabi_dmul>
 800a758:	4602      	mov	r2, r0
 800a75a:	460b      	mov	r3, r1
 800a75c:	4630      	mov	r0, r6
 800a75e:	4639      	mov	r1, r7
 800a760:	f7f5 fdb4 	bl	80002cc <__adddf3>
 800a764:	4602      	mov	r2, r0
 800a766:	460b      	mov	r3, r1
 800a768:	4620      	mov	r0, r4
 800a76a:	4629      	mov	r1, r5
 800a76c:	f7f5 fdac 	bl	80002c8 <__aeabi_dsub>
 800a770:	e7c6      	b.n	800a700 <__kernel_sin+0xc8>
 800a772:	bf00      	nop
 800a774:	f3af 8000 	nop.w
 800a778:	55555549 	.word	0x55555549
 800a77c:	3fc55555 	.word	0x3fc55555
 800a780:	3fe00000 	.word	0x3fe00000
 800a784:	5acfd57c 	.word	0x5acfd57c
 800a788:	3de5d93a 	.word	0x3de5d93a
 800a78c:	8a2b9ceb 	.word	0x8a2b9ceb
 800a790:	3e5ae5e6 	.word	0x3e5ae5e6
 800a794:	57b1fe7d 	.word	0x57b1fe7d
 800a798:	3ec71de3 	.word	0x3ec71de3
 800a79c:	19c161d5 	.word	0x19c161d5
 800a7a0:	3f2a01a0 	.word	0x3f2a01a0
 800a7a4:	1110f8a6 	.word	0x1110f8a6
 800a7a8:	3f811111 	.word	0x3f811111

0800a7ac <copysign>:
 800a7ac:	ec51 0b10 	vmov	r0, r1, d0
 800a7b0:	ee11 0a90 	vmov	r0, s3
 800a7b4:	ee10 2a10 	vmov	r2, s0
 800a7b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a7bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a7c0:	ea41 0300 	orr.w	r3, r1, r0
 800a7c4:	ec43 2b10 	vmov	d0, r2, r3
 800a7c8:	4770      	bx	lr

0800a7ca <abort>:
 800a7ca:	b508      	push	{r3, lr}
 800a7cc:	2006      	movs	r0, #6
 800a7ce:	f000 fda5 	bl	800b31c <raise>
 800a7d2:	2001      	movs	r0, #1
 800a7d4:	f7fc fee5 	bl	80075a2 <_exit>

0800a7d8 <__errno>:
 800a7d8:	4b01      	ldr	r3, [pc, #4]	; (800a7e0 <__errno+0x8>)
 800a7da:	6818      	ldr	r0, [r3, #0]
 800a7dc:	4770      	bx	lr
 800a7de:	bf00      	nop
 800a7e0:	2000000c 	.word	0x2000000c

0800a7e4 <__libc_init_array>:
 800a7e4:	b570      	push	{r4, r5, r6, lr}
 800a7e6:	4e0d      	ldr	r6, [pc, #52]	; (800a81c <__libc_init_array+0x38>)
 800a7e8:	4c0d      	ldr	r4, [pc, #52]	; (800a820 <__libc_init_array+0x3c>)
 800a7ea:	1ba4      	subs	r4, r4, r6
 800a7ec:	10a4      	asrs	r4, r4, #2
 800a7ee:	2500      	movs	r5, #0
 800a7f0:	42a5      	cmp	r5, r4
 800a7f2:	d109      	bne.n	800a808 <__libc_init_array+0x24>
 800a7f4:	4e0b      	ldr	r6, [pc, #44]	; (800a824 <__libc_init_array+0x40>)
 800a7f6:	4c0c      	ldr	r4, [pc, #48]	; (800a828 <__libc_init_array+0x44>)
 800a7f8:	f002 f8c4 	bl	800c984 <_init>
 800a7fc:	1ba4      	subs	r4, r4, r6
 800a7fe:	10a4      	asrs	r4, r4, #2
 800a800:	2500      	movs	r5, #0
 800a802:	42a5      	cmp	r5, r4
 800a804:	d105      	bne.n	800a812 <__libc_init_array+0x2e>
 800a806:	bd70      	pop	{r4, r5, r6, pc}
 800a808:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a80c:	4798      	blx	r3
 800a80e:	3501      	adds	r5, #1
 800a810:	e7ee      	b.n	800a7f0 <__libc_init_array+0xc>
 800a812:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a816:	4798      	blx	r3
 800a818:	3501      	adds	r5, #1
 800a81a:	e7f2      	b.n	800a802 <__libc_init_array+0x1e>
 800a81c:	0800cf98 	.word	0x0800cf98
 800a820:	0800cf98 	.word	0x0800cf98
 800a824:	0800cf98 	.word	0x0800cf98
 800a828:	0800cfa0 	.word	0x0800cfa0

0800a82c <malloc>:
 800a82c:	4b02      	ldr	r3, [pc, #8]	; (800a838 <malloc+0xc>)
 800a82e:	4601      	mov	r1, r0
 800a830:	6818      	ldr	r0, [r3, #0]
 800a832:	f000 b885 	b.w	800a940 <_malloc_r>
 800a836:	bf00      	nop
 800a838:	2000000c 	.word	0x2000000c

0800a83c <free>:
 800a83c:	4b02      	ldr	r3, [pc, #8]	; (800a848 <free+0xc>)
 800a83e:	4601      	mov	r1, r0
 800a840:	6818      	ldr	r0, [r3, #0]
 800a842:	f000 b82f 	b.w	800a8a4 <_free_r>
 800a846:	bf00      	nop
 800a848:	2000000c 	.word	0x2000000c

0800a84c <memcpy>:
 800a84c:	b510      	push	{r4, lr}
 800a84e:	1e43      	subs	r3, r0, #1
 800a850:	440a      	add	r2, r1
 800a852:	4291      	cmp	r1, r2
 800a854:	d100      	bne.n	800a858 <memcpy+0xc>
 800a856:	bd10      	pop	{r4, pc}
 800a858:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a85c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a860:	e7f7      	b.n	800a852 <memcpy+0x6>

0800a862 <memmove>:
 800a862:	4288      	cmp	r0, r1
 800a864:	b510      	push	{r4, lr}
 800a866:	eb01 0302 	add.w	r3, r1, r2
 800a86a:	d807      	bhi.n	800a87c <memmove+0x1a>
 800a86c:	1e42      	subs	r2, r0, #1
 800a86e:	4299      	cmp	r1, r3
 800a870:	d00a      	beq.n	800a888 <memmove+0x26>
 800a872:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a876:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a87a:	e7f8      	b.n	800a86e <memmove+0xc>
 800a87c:	4283      	cmp	r3, r0
 800a87e:	d9f5      	bls.n	800a86c <memmove+0xa>
 800a880:	1881      	adds	r1, r0, r2
 800a882:	1ad2      	subs	r2, r2, r3
 800a884:	42d3      	cmn	r3, r2
 800a886:	d100      	bne.n	800a88a <memmove+0x28>
 800a888:	bd10      	pop	{r4, pc}
 800a88a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a88e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a892:	e7f7      	b.n	800a884 <memmove+0x22>

0800a894 <memset>:
 800a894:	4402      	add	r2, r0
 800a896:	4603      	mov	r3, r0
 800a898:	4293      	cmp	r3, r2
 800a89a:	d100      	bne.n	800a89e <memset+0xa>
 800a89c:	4770      	bx	lr
 800a89e:	f803 1b01 	strb.w	r1, [r3], #1
 800a8a2:	e7f9      	b.n	800a898 <memset+0x4>

0800a8a4 <_free_r>:
 800a8a4:	b538      	push	{r3, r4, r5, lr}
 800a8a6:	4605      	mov	r5, r0
 800a8a8:	2900      	cmp	r1, #0
 800a8aa:	d045      	beq.n	800a938 <_free_r+0x94>
 800a8ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8b0:	1f0c      	subs	r4, r1, #4
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	bfb8      	it	lt
 800a8b6:	18e4      	addlt	r4, r4, r3
 800a8b8:	f001 fbd8 	bl	800c06c <__malloc_lock>
 800a8bc:	4a1f      	ldr	r2, [pc, #124]	; (800a93c <_free_r+0x98>)
 800a8be:	6813      	ldr	r3, [r2, #0]
 800a8c0:	4610      	mov	r0, r2
 800a8c2:	b933      	cbnz	r3, 800a8d2 <_free_r+0x2e>
 800a8c4:	6063      	str	r3, [r4, #4]
 800a8c6:	6014      	str	r4, [r2, #0]
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8ce:	f001 bbce 	b.w	800c06e <__malloc_unlock>
 800a8d2:	42a3      	cmp	r3, r4
 800a8d4:	d90c      	bls.n	800a8f0 <_free_r+0x4c>
 800a8d6:	6821      	ldr	r1, [r4, #0]
 800a8d8:	1862      	adds	r2, r4, r1
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	bf04      	itt	eq
 800a8de:	681a      	ldreq	r2, [r3, #0]
 800a8e0:	685b      	ldreq	r3, [r3, #4]
 800a8e2:	6063      	str	r3, [r4, #4]
 800a8e4:	bf04      	itt	eq
 800a8e6:	1852      	addeq	r2, r2, r1
 800a8e8:	6022      	streq	r2, [r4, #0]
 800a8ea:	6004      	str	r4, [r0, #0]
 800a8ec:	e7ec      	b.n	800a8c8 <_free_r+0x24>
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	685a      	ldr	r2, [r3, #4]
 800a8f2:	b10a      	cbz	r2, 800a8f8 <_free_r+0x54>
 800a8f4:	42a2      	cmp	r2, r4
 800a8f6:	d9fa      	bls.n	800a8ee <_free_r+0x4a>
 800a8f8:	6819      	ldr	r1, [r3, #0]
 800a8fa:	1858      	adds	r0, r3, r1
 800a8fc:	42a0      	cmp	r0, r4
 800a8fe:	d10b      	bne.n	800a918 <_free_r+0x74>
 800a900:	6820      	ldr	r0, [r4, #0]
 800a902:	4401      	add	r1, r0
 800a904:	1858      	adds	r0, r3, r1
 800a906:	4282      	cmp	r2, r0
 800a908:	6019      	str	r1, [r3, #0]
 800a90a:	d1dd      	bne.n	800a8c8 <_free_r+0x24>
 800a90c:	6810      	ldr	r0, [r2, #0]
 800a90e:	6852      	ldr	r2, [r2, #4]
 800a910:	605a      	str	r2, [r3, #4]
 800a912:	4401      	add	r1, r0
 800a914:	6019      	str	r1, [r3, #0]
 800a916:	e7d7      	b.n	800a8c8 <_free_r+0x24>
 800a918:	d902      	bls.n	800a920 <_free_r+0x7c>
 800a91a:	230c      	movs	r3, #12
 800a91c:	602b      	str	r3, [r5, #0]
 800a91e:	e7d3      	b.n	800a8c8 <_free_r+0x24>
 800a920:	6820      	ldr	r0, [r4, #0]
 800a922:	1821      	adds	r1, r4, r0
 800a924:	428a      	cmp	r2, r1
 800a926:	bf04      	itt	eq
 800a928:	6811      	ldreq	r1, [r2, #0]
 800a92a:	6852      	ldreq	r2, [r2, #4]
 800a92c:	6062      	str	r2, [r4, #4]
 800a92e:	bf04      	itt	eq
 800a930:	1809      	addeq	r1, r1, r0
 800a932:	6021      	streq	r1, [r4, #0]
 800a934:	605c      	str	r4, [r3, #4]
 800a936:	e7c7      	b.n	800a8c8 <_free_r+0x24>
 800a938:	bd38      	pop	{r3, r4, r5, pc}
 800a93a:	bf00      	nop
 800a93c:	20003218 	.word	0x20003218

0800a940 <_malloc_r>:
 800a940:	b570      	push	{r4, r5, r6, lr}
 800a942:	1ccd      	adds	r5, r1, #3
 800a944:	f025 0503 	bic.w	r5, r5, #3
 800a948:	3508      	adds	r5, #8
 800a94a:	2d0c      	cmp	r5, #12
 800a94c:	bf38      	it	cc
 800a94e:	250c      	movcc	r5, #12
 800a950:	2d00      	cmp	r5, #0
 800a952:	4606      	mov	r6, r0
 800a954:	db01      	blt.n	800a95a <_malloc_r+0x1a>
 800a956:	42a9      	cmp	r1, r5
 800a958:	d903      	bls.n	800a962 <_malloc_r+0x22>
 800a95a:	230c      	movs	r3, #12
 800a95c:	6033      	str	r3, [r6, #0]
 800a95e:	2000      	movs	r0, #0
 800a960:	bd70      	pop	{r4, r5, r6, pc}
 800a962:	f001 fb83 	bl	800c06c <__malloc_lock>
 800a966:	4a21      	ldr	r2, [pc, #132]	; (800a9ec <_malloc_r+0xac>)
 800a968:	6814      	ldr	r4, [r2, #0]
 800a96a:	4621      	mov	r1, r4
 800a96c:	b991      	cbnz	r1, 800a994 <_malloc_r+0x54>
 800a96e:	4c20      	ldr	r4, [pc, #128]	; (800a9f0 <_malloc_r+0xb0>)
 800a970:	6823      	ldr	r3, [r4, #0]
 800a972:	b91b      	cbnz	r3, 800a97c <_malloc_r+0x3c>
 800a974:	4630      	mov	r0, r6
 800a976:	f000 fc99 	bl	800b2ac <_sbrk_r>
 800a97a:	6020      	str	r0, [r4, #0]
 800a97c:	4629      	mov	r1, r5
 800a97e:	4630      	mov	r0, r6
 800a980:	f000 fc94 	bl	800b2ac <_sbrk_r>
 800a984:	1c43      	adds	r3, r0, #1
 800a986:	d124      	bne.n	800a9d2 <_malloc_r+0x92>
 800a988:	230c      	movs	r3, #12
 800a98a:	6033      	str	r3, [r6, #0]
 800a98c:	4630      	mov	r0, r6
 800a98e:	f001 fb6e 	bl	800c06e <__malloc_unlock>
 800a992:	e7e4      	b.n	800a95e <_malloc_r+0x1e>
 800a994:	680b      	ldr	r3, [r1, #0]
 800a996:	1b5b      	subs	r3, r3, r5
 800a998:	d418      	bmi.n	800a9cc <_malloc_r+0x8c>
 800a99a:	2b0b      	cmp	r3, #11
 800a99c:	d90f      	bls.n	800a9be <_malloc_r+0x7e>
 800a99e:	600b      	str	r3, [r1, #0]
 800a9a0:	50cd      	str	r5, [r1, r3]
 800a9a2:	18cc      	adds	r4, r1, r3
 800a9a4:	4630      	mov	r0, r6
 800a9a6:	f001 fb62 	bl	800c06e <__malloc_unlock>
 800a9aa:	f104 000b 	add.w	r0, r4, #11
 800a9ae:	1d23      	adds	r3, r4, #4
 800a9b0:	f020 0007 	bic.w	r0, r0, #7
 800a9b4:	1ac3      	subs	r3, r0, r3
 800a9b6:	d0d3      	beq.n	800a960 <_malloc_r+0x20>
 800a9b8:	425a      	negs	r2, r3
 800a9ba:	50e2      	str	r2, [r4, r3]
 800a9bc:	e7d0      	b.n	800a960 <_malloc_r+0x20>
 800a9be:	428c      	cmp	r4, r1
 800a9c0:	684b      	ldr	r3, [r1, #4]
 800a9c2:	bf16      	itet	ne
 800a9c4:	6063      	strne	r3, [r4, #4]
 800a9c6:	6013      	streq	r3, [r2, #0]
 800a9c8:	460c      	movne	r4, r1
 800a9ca:	e7eb      	b.n	800a9a4 <_malloc_r+0x64>
 800a9cc:	460c      	mov	r4, r1
 800a9ce:	6849      	ldr	r1, [r1, #4]
 800a9d0:	e7cc      	b.n	800a96c <_malloc_r+0x2c>
 800a9d2:	1cc4      	adds	r4, r0, #3
 800a9d4:	f024 0403 	bic.w	r4, r4, #3
 800a9d8:	42a0      	cmp	r0, r4
 800a9da:	d005      	beq.n	800a9e8 <_malloc_r+0xa8>
 800a9dc:	1a21      	subs	r1, r4, r0
 800a9de:	4630      	mov	r0, r6
 800a9e0:	f000 fc64 	bl	800b2ac <_sbrk_r>
 800a9e4:	3001      	adds	r0, #1
 800a9e6:	d0cf      	beq.n	800a988 <_malloc_r+0x48>
 800a9e8:	6025      	str	r5, [r4, #0]
 800a9ea:	e7db      	b.n	800a9a4 <_malloc_r+0x64>
 800a9ec:	20003218 	.word	0x20003218
 800a9f0:	2000321c 	.word	0x2000321c

0800a9f4 <__cvt>:
 800a9f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9f8:	ec55 4b10 	vmov	r4, r5, d0
 800a9fc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a9fe:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aa02:	2d00      	cmp	r5, #0
 800aa04:	460e      	mov	r6, r1
 800aa06:	4691      	mov	r9, r2
 800aa08:	4619      	mov	r1, r3
 800aa0a:	bfb8      	it	lt
 800aa0c:	4622      	movlt	r2, r4
 800aa0e:	462b      	mov	r3, r5
 800aa10:	f027 0720 	bic.w	r7, r7, #32
 800aa14:	bfbb      	ittet	lt
 800aa16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aa1a:	461d      	movlt	r5, r3
 800aa1c:	2300      	movge	r3, #0
 800aa1e:	232d      	movlt	r3, #45	; 0x2d
 800aa20:	bfb8      	it	lt
 800aa22:	4614      	movlt	r4, r2
 800aa24:	2f46      	cmp	r7, #70	; 0x46
 800aa26:	700b      	strb	r3, [r1, #0]
 800aa28:	d004      	beq.n	800aa34 <__cvt+0x40>
 800aa2a:	2f45      	cmp	r7, #69	; 0x45
 800aa2c:	d100      	bne.n	800aa30 <__cvt+0x3c>
 800aa2e:	3601      	adds	r6, #1
 800aa30:	2102      	movs	r1, #2
 800aa32:	e000      	b.n	800aa36 <__cvt+0x42>
 800aa34:	2103      	movs	r1, #3
 800aa36:	ab03      	add	r3, sp, #12
 800aa38:	9301      	str	r3, [sp, #4]
 800aa3a:	ab02      	add	r3, sp, #8
 800aa3c:	9300      	str	r3, [sp, #0]
 800aa3e:	4632      	mov	r2, r6
 800aa40:	4653      	mov	r3, sl
 800aa42:	ec45 4b10 	vmov	d0, r4, r5
 800aa46:	f000 fd4b 	bl	800b4e0 <_dtoa_r>
 800aa4a:	2f47      	cmp	r7, #71	; 0x47
 800aa4c:	4680      	mov	r8, r0
 800aa4e:	d102      	bne.n	800aa56 <__cvt+0x62>
 800aa50:	f019 0f01 	tst.w	r9, #1
 800aa54:	d026      	beq.n	800aaa4 <__cvt+0xb0>
 800aa56:	2f46      	cmp	r7, #70	; 0x46
 800aa58:	eb08 0906 	add.w	r9, r8, r6
 800aa5c:	d111      	bne.n	800aa82 <__cvt+0x8e>
 800aa5e:	f898 3000 	ldrb.w	r3, [r8]
 800aa62:	2b30      	cmp	r3, #48	; 0x30
 800aa64:	d10a      	bne.n	800aa7c <__cvt+0x88>
 800aa66:	2200      	movs	r2, #0
 800aa68:	2300      	movs	r3, #0
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	4629      	mov	r1, r5
 800aa6e:	f7f6 f84b 	bl	8000b08 <__aeabi_dcmpeq>
 800aa72:	b918      	cbnz	r0, 800aa7c <__cvt+0x88>
 800aa74:	f1c6 0601 	rsb	r6, r6, #1
 800aa78:	f8ca 6000 	str.w	r6, [sl]
 800aa7c:	f8da 3000 	ldr.w	r3, [sl]
 800aa80:	4499      	add	r9, r3
 800aa82:	2200      	movs	r2, #0
 800aa84:	2300      	movs	r3, #0
 800aa86:	4620      	mov	r0, r4
 800aa88:	4629      	mov	r1, r5
 800aa8a:	f7f6 f83d 	bl	8000b08 <__aeabi_dcmpeq>
 800aa8e:	b938      	cbnz	r0, 800aaa0 <__cvt+0xac>
 800aa90:	2230      	movs	r2, #48	; 0x30
 800aa92:	9b03      	ldr	r3, [sp, #12]
 800aa94:	454b      	cmp	r3, r9
 800aa96:	d205      	bcs.n	800aaa4 <__cvt+0xb0>
 800aa98:	1c59      	adds	r1, r3, #1
 800aa9a:	9103      	str	r1, [sp, #12]
 800aa9c:	701a      	strb	r2, [r3, #0]
 800aa9e:	e7f8      	b.n	800aa92 <__cvt+0x9e>
 800aaa0:	f8cd 900c 	str.w	r9, [sp, #12]
 800aaa4:	9b03      	ldr	r3, [sp, #12]
 800aaa6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aaa8:	eba3 0308 	sub.w	r3, r3, r8
 800aaac:	4640      	mov	r0, r8
 800aaae:	6013      	str	r3, [r2, #0]
 800aab0:	b004      	add	sp, #16
 800aab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800aab6 <__exponent>:
 800aab6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aab8:	2900      	cmp	r1, #0
 800aaba:	4604      	mov	r4, r0
 800aabc:	bfba      	itte	lt
 800aabe:	4249      	neglt	r1, r1
 800aac0:	232d      	movlt	r3, #45	; 0x2d
 800aac2:	232b      	movge	r3, #43	; 0x2b
 800aac4:	2909      	cmp	r1, #9
 800aac6:	f804 2b02 	strb.w	r2, [r4], #2
 800aaca:	7043      	strb	r3, [r0, #1]
 800aacc:	dd20      	ble.n	800ab10 <__exponent+0x5a>
 800aace:	f10d 0307 	add.w	r3, sp, #7
 800aad2:	461f      	mov	r7, r3
 800aad4:	260a      	movs	r6, #10
 800aad6:	fb91 f5f6 	sdiv	r5, r1, r6
 800aada:	fb06 1115 	mls	r1, r6, r5, r1
 800aade:	3130      	adds	r1, #48	; 0x30
 800aae0:	2d09      	cmp	r5, #9
 800aae2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aae6:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800aaea:	4629      	mov	r1, r5
 800aaec:	dc09      	bgt.n	800ab02 <__exponent+0x4c>
 800aaee:	3130      	adds	r1, #48	; 0x30
 800aaf0:	3b02      	subs	r3, #2
 800aaf2:	f802 1c01 	strb.w	r1, [r2, #-1]
 800aaf6:	42bb      	cmp	r3, r7
 800aaf8:	4622      	mov	r2, r4
 800aafa:	d304      	bcc.n	800ab06 <__exponent+0x50>
 800aafc:	1a10      	subs	r0, r2, r0
 800aafe:	b003      	add	sp, #12
 800ab00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab02:	4613      	mov	r3, r2
 800ab04:	e7e7      	b.n	800aad6 <__exponent+0x20>
 800ab06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab0a:	f804 2b01 	strb.w	r2, [r4], #1
 800ab0e:	e7f2      	b.n	800aaf6 <__exponent+0x40>
 800ab10:	2330      	movs	r3, #48	; 0x30
 800ab12:	4419      	add	r1, r3
 800ab14:	7083      	strb	r3, [r0, #2]
 800ab16:	1d02      	adds	r2, r0, #4
 800ab18:	70c1      	strb	r1, [r0, #3]
 800ab1a:	e7ef      	b.n	800aafc <__exponent+0x46>

0800ab1c <_printf_float>:
 800ab1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab20:	b08d      	sub	sp, #52	; 0x34
 800ab22:	460c      	mov	r4, r1
 800ab24:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800ab28:	4616      	mov	r6, r2
 800ab2a:	461f      	mov	r7, r3
 800ab2c:	4605      	mov	r5, r0
 800ab2e:	f001 fa8f 	bl	800c050 <_localeconv_r>
 800ab32:	6803      	ldr	r3, [r0, #0]
 800ab34:	9304      	str	r3, [sp, #16]
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7f5 fbba 	bl	80002b0 <strlen>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	930a      	str	r3, [sp, #40]	; 0x28
 800ab40:	f8d8 3000 	ldr.w	r3, [r8]
 800ab44:	9005      	str	r0, [sp, #20]
 800ab46:	3307      	adds	r3, #7
 800ab48:	f023 0307 	bic.w	r3, r3, #7
 800ab4c:	f103 0208 	add.w	r2, r3, #8
 800ab50:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ab54:	f8d4 b000 	ldr.w	fp, [r4]
 800ab58:	f8c8 2000 	str.w	r2, [r8]
 800ab5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab60:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ab64:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ab68:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ab6c:	9307      	str	r3, [sp, #28]
 800ab6e:	f8cd 8018 	str.w	r8, [sp, #24]
 800ab72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab76:	4ba7      	ldr	r3, [pc, #668]	; (800ae14 <_printf_float+0x2f8>)
 800ab78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab7c:	f7f5 fff6 	bl	8000b6c <__aeabi_dcmpun>
 800ab80:	bb70      	cbnz	r0, 800abe0 <_printf_float+0xc4>
 800ab82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab86:	4ba3      	ldr	r3, [pc, #652]	; (800ae14 <_printf_float+0x2f8>)
 800ab88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab8c:	f7f5 ffd0 	bl	8000b30 <__aeabi_dcmple>
 800ab90:	bb30      	cbnz	r0, 800abe0 <_printf_float+0xc4>
 800ab92:	2200      	movs	r2, #0
 800ab94:	2300      	movs	r3, #0
 800ab96:	4640      	mov	r0, r8
 800ab98:	4649      	mov	r1, r9
 800ab9a:	f7f5 ffbf 	bl	8000b1c <__aeabi_dcmplt>
 800ab9e:	b110      	cbz	r0, 800aba6 <_printf_float+0x8a>
 800aba0:	232d      	movs	r3, #45	; 0x2d
 800aba2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aba6:	4a9c      	ldr	r2, [pc, #624]	; (800ae18 <_printf_float+0x2fc>)
 800aba8:	4b9c      	ldr	r3, [pc, #624]	; (800ae1c <_printf_float+0x300>)
 800abaa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800abae:	bf8c      	ite	hi
 800abb0:	4690      	movhi	r8, r2
 800abb2:	4698      	movls	r8, r3
 800abb4:	2303      	movs	r3, #3
 800abb6:	f02b 0204 	bic.w	r2, fp, #4
 800abba:	6123      	str	r3, [r4, #16]
 800abbc:	6022      	str	r2, [r4, #0]
 800abbe:	f04f 0900 	mov.w	r9, #0
 800abc2:	9700      	str	r7, [sp, #0]
 800abc4:	4633      	mov	r3, r6
 800abc6:	aa0b      	add	r2, sp, #44	; 0x2c
 800abc8:	4621      	mov	r1, r4
 800abca:	4628      	mov	r0, r5
 800abcc:	f000 f9e6 	bl	800af9c <_printf_common>
 800abd0:	3001      	adds	r0, #1
 800abd2:	f040 808d 	bne.w	800acf0 <_printf_float+0x1d4>
 800abd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abda:	b00d      	add	sp, #52	; 0x34
 800abdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abe0:	4642      	mov	r2, r8
 800abe2:	464b      	mov	r3, r9
 800abe4:	4640      	mov	r0, r8
 800abe6:	4649      	mov	r1, r9
 800abe8:	f7f5 ffc0 	bl	8000b6c <__aeabi_dcmpun>
 800abec:	b110      	cbz	r0, 800abf4 <_printf_float+0xd8>
 800abee:	4a8c      	ldr	r2, [pc, #560]	; (800ae20 <_printf_float+0x304>)
 800abf0:	4b8c      	ldr	r3, [pc, #560]	; (800ae24 <_printf_float+0x308>)
 800abf2:	e7da      	b.n	800abaa <_printf_float+0x8e>
 800abf4:	6861      	ldr	r1, [r4, #4]
 800abf6:	1c4b      	adds	r3, r1, #1
 800abf8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800abfc:	a80a      	add	r0, sp, #40	; 0x28
 800abfe:	d13e      	bne.n	800ac7e <_printf_float+0x162>
 800ac00:	2306      	movs	r3, #6
 800ac02:	6063      	str	r3, [r4, #4]
 800ac04:	2300      	movs	r3, #0
 800ac06:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ac0a:	ab09      	add	r3, sp, #36	; 0x24
 800ac0c:	9300      	str	r3, [sp, #0]
 800ac0e:	ec49 8b10 	vmov	d0, r8, r9
 800ac12:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ac16:	6022      	str	r2, [r4, #0]
 800ac18:	f8cd a004 	str.w	sl, [sp, #4]
 800ac1c:	6861      	ldr	r1, [r4, #4]
 800ac1e:	4628      	mov	r0, r5
 800ac20:	f7ff fee8 	bl	800a9f4 <__cvt>
 800ac24:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800ac28:	2b47      	cmp	r3, #71	; 0x47
 800ac2a:	4680      	mov	r8, r0
 800ac2c:	d109      	bne.n	800ac42 <_printf_float+0x126>
 800ac2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac30:	1cd8      	adds	r0, r3, #3
 800ac32:	db02      	blt.n	800ac3a <_printf_float+0x11e>
 800ac34:	6862      	ldr	r2, [r4, #4]
 800ac36:	4293      	cmp	r3, r2
 800ac38:	dd47      	ble.n	800acca <_printf_float+0x1ae>
 800ac3a:	f1aa 0a02 	sub.w	sl, sl, #2
 800ac3e:	fa5f fa8a 	uxtb.w	sl, sl
 800ac42:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ac46:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac48:	d824      	bhi.n	800ac94 <_printf_float+0x178>
 800ac4a:	3901      	subs	r1, #1
 800ac4c:	4652      	mov	r2, sl
 800ac4e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ac52:	9109      	str	r1, [sp, #36]	; 0x24
 800ac54:	f7ff ff2f 	bl	800aab6 <__exponent>
 800ac58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac5a:	1813      	adds	r3, r2, r0
 800ac5c:	2a01      	cmp	r2, #1
 800ac5e:	4681      	mov	r9, r0
 800ac60:	6123      	str	r3, [r4, #16]
 800ac62:	dc02      	bgt.n	800ac6a <_printf_float+0x14e>
 800ac64:	6822      	ldr	r2, [r4, #0]
 800ac66:	07d1      	lsls	r1, r2, #31
 800ac68:	d501      	bpl.n	800ac6e <_printf_float+0x152>
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	6123      	str	r3, [r4, #16]
 800ac6e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d0a5      	beq.n	800abc2 <_printf_float+0xa6>
 800ac76:	232d      	movs	r3, #45	; 0x2d
 800ac78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac7c:	e7a1      	b.n	800abc2 <_printf_float+0xa6>
 800ac7e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800ac82:	f000 8177 	beq.w	800af74 <_printf_float+0x458>
 800ac86:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ac8a:	d1bb      	bne.n	800ac04 <_printf_float+0xe8>
 800ac8c:	2900      	cmp	r1, #0
 800ac8e:	d1b9      	bne.n	800ac04 <_printf_float+0xe8>
 800ac90:	2301      	movs	r3, #1
 800ac92:	e7b6      	b.n	800ac02 <_printf_float+0xe6>
 800ac94:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800ac98:	d119      	bne.n	800acce <_printf_float+0x1b2>
 800ac9a:	2900      	cmp	r1, #0
 800ac9c:	6863      	ldr	r3, [r4, #4]
 800ac9e:	dd0c      	ble.n	800acba <_printf_float+0x19e>
 800aca0:	6121      	str	r1, [r4, #16]
 800aca2:	b913      	cbnz	r3, 800acaa <_printf_float+0x18e>
 800aca4:	6822      	ldr	r2, [r4, #0]
 800aca6:	07d2      	lsls	r2, r2, #31
 800aca8:	d502      	bpl.n	800acb0 <_printf_float+0x194>
 800acaa:	3301      	adds	r3, #1
 800acac:	440b      	add	r3, r1
 800acae:	6123      	str	r3, [r4, #16]
 800acb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acb2:	65a3      	str	r3, [r4, #88]	; 0x58
 800acb4:	f04f 0900 	mov.w	r9, #0
 800acb8:	e7d9      	b.n	800ac6e <_printf_float+0x152>
 800acba:	b913      	cbnz	r3, 800acc2 <_printf_float+0x1a6>
 800acbc:	6822      	ldr	r2, [r4, #0]
 800acbe:	07d0      	lsls	r0, r2, #31
 800acc0:	d501      	bpl.n	800acc6 <_printf_float+0x1aa>
 800acc2:	3302      	adds	r3, #2
 800acc4:	e7f3      	b.n	800acae <_printf_float+0x192>
 800acc6:	2301      	movs	r3, #1
 800acc8:	e7f1      	b.n	800acae <_printf_float+0x192>
 800acca:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800acce:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800acd2:	4293      	cmp	r3, r2
 800acd4:	db05      	blt.n	800ace2 <_printf_float+0x1c6>
 800acd6:	6822      	ldr	r2, [r4, #0]
 800acd8:	6123      	str	r3, [r4, #16]
 800acda:	07d1      	lsls	r1, r2, #31
 800acdc:	d5e8      	bpl.n	800acb0 <_printf_float+0x194>
 800acde:	3301      	adds	r3, #1
 800ace0:	e7e5      	b.n	800acae <_printf_float+0x192>
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	bfd4      	ite	le
 800ace6:	f1c3 0302 	rsble	r3, r3, #2
 800acea:	2301      	movgt	r3, #1
 800acec:	4413      	add	r3, r2
 800acee:	e7de      	b.n	800acae <_printf_float+0x192>
 800acf0:	6823      	ldr	r3, [r4, #0]
 800acf2:	055a      	lsls	r2, r3, #21
 800acf4:	d407      	bmi.n	800ad06 <_printf_float+0x1ea>
 800acf6:	6923      	ldr	r3, [r4, #16]
 800acf8:	4642      	mov	r2, r8
 800acfa:	4631      	mov	r1, r6
 800acfc:	4628      	mov	r0, r5
 800acfe:	47b8      	blx	r7
 800ad00:	3001      	adds	r0, #1
 800ad02:	d12b      	bne.n	800ad5c <_printf_float+0x240>
 800ad04:	e767      	b.n	800abd6 <_printf_float+0xba>
 800ad06:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ad0a:	f240 80dc 	bls.w	800aec6 <_printf_float+0x3aa>
 800ad0e:	2200      	movs	r2, #0
 800ad10:	2300      	movs	r3, #0
 800ad12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ad16:	f7f5 fef7 	bl	8000b08 <__aeabi_dcmpeq>
 800ad1a:	2800      	cmp	r0, #0
 800ad1c:	d033      	beq.n	800ad86 <_printf_float+0x26a>
 800ad1e:	2301      	movs	r3, #1
 800ad20:	4a41      	ldr	r2, [pc, #260]	; (800ae28 <_printf_float+0x30c>)
 800ad22:	4631      	mov	r1, r6
 800ad24:	4628      	mov	r0, r5
 800ad26:	47b8      	blx	r7
 800ad28:	3001      	adds	r0, #1
 800ad2a:	f43f af54 	beq.w	800abd6 <_printf_float+0xba>
 800ad2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad32:	429a      	cmp	r2, r3
 800ad34:	db02      	blt.n	800ad3c <_printf_float+0x220>
 800ad36:	6823      	ldr	r3, [r4, #0]
 800ad38:	07d8      	lsls	r0, r3, #31
 800ad3a:	d50f      	bpl.n	800ad5c <_printf_float+0x240>
 800ad3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad40:	4631      	mov	r1, r6
 800ad42:	4628      	mov	r0, r5
 800ad44:	47b8      	blx	r7
 800ad46:	3001      	adds	r0, #1
 800ad48:	f43f af45 	beq.w	800abd6 <_printf_float+0xba>
 800ad4c:	f04f 0800 	mov.w	r8, #0
 800ad50:	f104 091a 	add.w	r9, r4, #26
 800ad54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad56:	3b01      	subs	r3, #1
 800ad58:	4543      	cmp	r3, r8
 800ad5a:	dc09      	bgt.n	800ad70 <_printf_float+0x254>
 800ad5c:	6823      	ldr	r3, [r4, #0]
 800ad5e:	079b      	lsls	r3, r3, #30
 800ad60:	f100 8103 	bmi.w	800af6a <_printf_float+0x44e>
 800ad64:	68e0      	ldr	r0, [r4, #12]
 800ad66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad68:	4298      	cmp	r0, r3
 800ad6a:	bfb8      	it	lt
 800ad6c:	4618      	movlt	r0, r3
 800ad6e:	e734      	b.n	800abda <_printf_float+0xbe>
 800ad70:	2301      	movs	r3, #1
 800ad72:	464a      	mov	r2, r9
 800ad74:	4631      	mov	r1, r6
 800ad76:	4628      	mov	r0, r5
 800ad78:	47b8      	blx	r7
 800ad7a:	3001      	adds	r0, #1
 800ad7c:	f43f af2b 	beq.w	800abd6 <_printf_float+0xba>
 800ad80:	f108 0801 	add.w	r8, r8, #1
 800ad84:	e7e6      	b.n	800ad54 <_printf_float+0x238>
 800ad86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	dc2b      	bgt.n	800ade4 <_printf_float+0x2c8>
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	4a26      	ldr	r2, [pc, #152]	; (800ae28 <_printf_float+0x30c>)
 800ad90:	4631      	mov	r1, r6
 800ad92:	4628      	mov	r0, r5
 800ad94:	47b8      	blx	r7
 800ad96:	3001      	adds	r0, #1
 800ad98:	f43f af1d 	beq.w	800abd6 <_printf_float+0xba>
 800ad9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad9e:	b923      	cbnz	r3, 800adaa <_printf_float+0x28e>
 800ada0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ada2:	b913      	cbnz	r3, 800adaa <_printf_float+0x28e>
 800ada4:	6823      	ldr	r3, [r4, #0]
 800ada6:	07d9      	lsls	r1, r3, #31
 800ada8:	d5d8      	bpl.n	800ad5c <_printf_float+0x240>
 800adaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adae:	4631      	mov	r1, r6
 800adb0:	4628      	mov	r0, r5
 800adb2:	47b8      	blx	r7
 800adb4:	3001      	adds	r0, #1
 800adb6:	f43f af0e 	beq.w	800abd6 <_printf_float+0xba>
 800adba:	f04f 0900 	mov.w	r9, #0
 800adbe:	f104 0a1a 	add.w	sl, r4, #26
 800adc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adc4:	425b      	negs	r3, r3
 800adc6:	454b      	cmp	r3, r9
 800adc8:	dc01      	bgt.n	800adce <_printf_float+0x2b2>
 800adca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adcc:	e794      	b.n	800acf8 <_printf_float+0x1dc>
 800adce:	2301      	movs	r3, #1
 800add0:	4652      	mov	r2, sl
 800add2:	4631      	mov	r1, r6
 800add4:	4628      	mov	r0, r5
 800add6:	47b8      	blx	r7
 800add8:	3001      	adds	r0, #1
 800adda:	f43f aefc 	beq.w	800abd6 <_printf_float+0xba>
 800adde:	f109 0901 	add.w	r9, r9, #1
 800ade2:	e7ee      	b.n	800adc2 <_printf_float+0x2a6>
 800ade4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ade6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ade8:	429a      	cmp	r2, r3
 800adea:	bfa8      	it	ge
 800adec:	461a      	movge	r2, r3
 800adee:	2a00      	cmp	r2, #0
 800adf0:	4691      	mov	r9, r2
 800adf2:	dd07      	ble.n	800ae04 <_printf_float+0x2e8>
 800adf4:	4613      	mov	r3, r2
 800adf6:	4631      	mov	r1, r6
 800adf8:	4642      	mov	r2, r8
 800adfa:	4628      	mov	r0, r5
 800adfc:	47b8      	blx	r7
 800adfe:	3001      	adds	r0, #1
 800ae00:	f43f aee9 	beq.w	800abd6 <_printf_float+0xba>
 800ae04:	f104 031a 	add.w	r3, r4, #26
 800ae08:	f04f 0b00 	mov.w	fp, #0
 800ae0c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae10:	9306      	str	r3, [sp, #24]
 800ae12:	e015      	b.n	800ae40 <_printf_float+0x324>
 800ae14:	7fefffff 	.word	0x7fefffff
 800ae18:	0800cd34 	.word	0x0800cd34
 800ae1c:	0800cd30 	.word	0x0800cd30
 800ae20:	0800cd3c 	.word	0x0800cd3c
 800ae24:	0800cd38 	.word	0x0800cd38
 800ae28:	0800cd40 	.word	0x0800cd40
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	9a06      	ldr	r2, [sp, #24]
 800ae30:	4631      	mov	r1, r6
 800ae32:	4628      	mov	r0, r5
 800ae34:	47b8      	blx	r7
 800ae36:	3001      	adds	r0, #1
 800ae38:	f43f aecd 	beq.w	800abd6 <_printf_float+0xba>
 800ae3c:	f10b 0b01 	add.w	fp, fp, #1
 800ae40:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ae44:	ebaa 0309 	sub.w	r3, sl, r9
 800ae48:	455b      	cmp	r3, fp
 800ae4a:	dcef      	bgt.n	800ae2c <_printf_float+0x310>
 800ae4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae50:	429a      	cmp	r2, r3
 800ae52:	44d0      	add	r8, sl
 800ae54:	db15      	blt.n	800ae82 <_printf_float+0x366>
 800ae56:	6823      	ldr	r3, [r4, #0]
 800ae58:	07da      	lsls	r2, r3, #31
 800ae5a:	d412      	bmi.n	800ae82 <_printf_float+0x366>
 800ae5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae60:	eba3 020a 	sub.w	r2, r3, sl
 800ae64:	eba3 0a01 	sub.w	sl, r3, r1
 800ae68:	4592      	cmp	sl, r2
 800ae6a:	bfa8      	it	ge
 800ae6c:	4692      	movge	sl, r2
 800ae6e:	f1ba 0f00 	cmp.w	sl, #0
 800ae72:	dc0e      	bgt.n	800ae92 <_printf_float+0x376>
 800ae74:	f04f 0800 	mov.w	r8, #0
 800ae78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae7c:	f104 091a 	add.w	r9, r4, #26
 800ae80:	e019      	b.n	800aeb6 <_printf_float+0x39a>
 800ae82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae86:	4631      	mov	r1, r6
 800ae88:	4628      	mov	r0, r5
 800ae8a:	47b8      	blx	r7
 800ae8c:	3001      	adds	r0, #1
 800ae8e:	d1e5      	bne.n	800ae5c <_printf_float+0x340>
 800ae90:	e6a1      	b.n	800abd6 <_printf_float+0xba>
 800ae92:	4653      	mov	r3, sl
 800ae94:	4642      	mov	r2, r8
 800ae96:	4631      	mov	r1, r6
 800ae98:	4628      	mov	r0, r5
 800ae9a:	47b8      	blx	r7
 800ae9c:	3001      	adds	r0, #1
 800ae9e:	d1e9      	bne.n	800ae74 <_printf_float+0x358>
 800aea0:	e699      	b.n	800abd6 <_printf_float+0xba>
 800aea2:	2301      	movs	r3, #1
 800aea4:	464a      	mov	r2, r9
 800aea6:	4631      	mov	r1, r6
 800aea8:	4628      	mov	r0, r5
 800aeaa:	47b8      	blx	r7
 800aeac:	3001      	adds	r0, #1
 800aeae:	f43f ae92 	beq.w	800abd6 <_printf_float+0xba>
 800aeb2:	f108 0801 	add.w	r8, r8, #1
 800aeb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aeba:	1a9b      	subs	r3, r3, r2
 800aebc:	eba3 030a 	sub.w	r3, r3, sl
 800aec0:	4543      	cmp	r3, r8
 800aec2:	dcee      	bgt.n	800aea2 <_printf_float+0x386>
 800aec4:	e74a      	b.n	800ad5c <_printf_float+0x240>
 800aec6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aec8:	2a01      	cmp	r2, #1
 800aeca:	dc01      	bgt.n	800aed0 <_printf_float+0x3b4>
 800aecc:	07db      	lsls	r3, r3, #31
 800aece:	d53a      	bpl.n	800af46 <_printf_float+0x42a>
 800aed0:	2301      	movs	r3, #1
 800aed2:	4642      	mov	r2, r8
 800aed4:	4631      	mov	r1, r6
 800aed6:	4628      	mov	r0, r5
 800aed8:	47b8      	blx	r7
 800aeda:	3001      	adds	r0, #1
 800aedc:	f43f ae7b 	beq.w	800abd6 <_printf_float+0xba>
 800aee0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aee4:	4631      	mov	r1, r6
 800aee6:	4628      	mov	r0, r5
 800aee8:	47b8      	blx	r7
 800aeea:	3001      	adds	r0, #1
 800aeec:	f108 0801 	add.w	r8, r8, #1
 800aef0:	f43f ae71 	beq.w	800abd6 <_printf_float+0xba>
 800aef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aef6:	2200      	movs	r2, #0
 800aef8:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800aefc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800af00:	2300      	movs	r3, #0
 800af02:	f7f5 fe01 	bl	8000b08 <__aeabi_dcmpeq>
 800af06:	b9c8      	cbnz	r0, 800af3c <_printf_float+0x420>
 800af08:	4653      	mov	r3, sl
 800af0a:	4642      	mov	r2, r8
 800af0c:	4631      	mov	r1, r6
 800af0e:	4628      	mov	r0, r5
 800af10:	47b8      	blx	r7
 800af12:	3001      	adds	r0, #1
 800af14:	d10e      	bne.n	800af34 <_printf_float+0x418>
 800af16:	e65e      	b.n	800abd6 <_printf_float+0xba>
 800af18:	2301      	movs	r3, #1
 800af1a:	4652      	mov	r2, sl
 800af1c:	4631      	mov	r1, r6
 800af1e:	4628      	mov	r0, r5
 800af20:	47b8      	blx	r7
 800af22:	3001      	adds	r0, #1
 800af24:	f43f ae57 	beq.w	800abd6 <_printf_float+0xba>
 800af28:	f108 0801 	add.w	r8, r8, #1
 800af2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af2e:	3b01      	subs	r3, #1
 800af30:	4543      	cmp	r3, r8
 800af32:	dcf1      	bgt.n	800af18 <_printf_float+0x3fc>
 800af34:	464b      	mov	r3, r9
 800af36:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800af3a:	e6de      	b.n	800acfa <_printf_float+0x1de>
 800af3c:	f04f 0800 	mov.w	r8, #0
 800af40:	f104 0a1a 	add.w	sl, r4, #26
 800af44:	e7f2      	b.n	800af2c <_printf_float+0x410>
 800af46:	2301      	movs	r3, #1
 800af48:	e7df      	b.n	800af0a <_printf_float+0x3ee>
 800af4a:	2301      	movs	r3, #1
 800af4c:	464a      	mov	r2, r9
 800af4e:	4631      	mov	r1, r6
 800af50:	4628      	mov	r0, r5
 800af52:	47b8      	blx	r7
 800af54:	3001      	adds	r0, #1
 800af56:	f43f ae3e 	beq.w	800abd6 <_printf_float+0xba>
 800af5a:	f108 0801 	add.w	r8, r8, #1
 800af5e:	68e3      	ldr	r3, [r4, #12]
 800af60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af62:	1a9b      	subs	r3, r3, r2
 800af64:	4543      	cmp	r3, r8
 800af66:	dcf0      	bgt.n	800af4a <_printf_float+0x42e>
 800af68:	e6fc      	b.n	800ad64 <_printf_float+0x248>
 800af6a:	f04f 0800 	mov.w	r8, #0
 800af6e:	f104 0919 	add.w	r9, r4, #25
 800af72:	e7f4      	b.n	800af5e <_printf_float+0x442>
 800af74:	2900      	cmp	r1, #0
 800af76:	f43f ae8b 	beq.w	800ac90 <_printf_float+0x174>
 800af7a:	2300      	movs	r3, #0
 800af7c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800af80:	ab09      	add	r3, sp, #36	; 0x24
 800af82:	9300      	str	r3, [sp, #0]
 800af84:	ec49 8b10 	vmov	d0, r8, r9
 800af88:	6022      	str	r2, [r4, #0]
 800af8a:	f8cd a004 	str.w	sl, [sp, #4]
 800af8e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800af92:	4628      	mov	r0, r5
 800af94:	f7ff fd2e 	bl	800a9f4 <__cvt>
 800af98:	4680      	mov	r8, r0
 800af9a:	e648      	b.n	800ac2e <_printf_float+0x112>

0800af9c <_printf_common>:
 800af9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afa0:	4691      	mov	r9, r2
 800afa2:	461f      	mov	r7, r3
 800afa4:	688a      	ldr	r2, [r1, #8]
 800afa6:	690b      	ldr	r3, [r1, #16]
 800afa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800afac:	4293      	cmp	r3, r2
 800afae:	bfb8      	it	lt
 800afb0:	4613      	movlt	r3, r2
 800afb2:	f8c9 3000 	str.w	r3, [r9]
 800afb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800afba:	4606      	mov	r6, r0
 800afbc:	460c      	mov	r4, r1
 800afbe:	b112      	cbz	r2, 800afc6 <_printf_common+0x2a>
 800afc0:	3301      	adds	r3, #1
 800afc2:	f8c9 3000 	str.w	r3, [r9]
 800afc6:	6823      	ldr	r3, [r4, #0]
 800afc8:	0699      	lsls	r1, r3, #26
 800afca:	bf42      	ittt	mi
 800afcc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800afd0:	3302      	addmi	r3, #2
 800afd2:	f8c9 3000 	strmi.w	r3, [r9]
 800afd6:	6825      	ldr	r5, [r4, #0]
 800afd8:	f015 0506 	ands.w	r5, r5, #6
 800afdc:	d107      	bne.n	800afee <_printf_common+0x52>
 800afde:	f104 0a19 	add.w	sl, r4, #25
 800afe2:	68e3      	ldr	r3, [r4, #12]
 800afe4:	f8d9 2000 	ldr.w	r2, [r9]
 800afe8:	1a9b      	subs	r3, r3, r2
 800afea:	42ab      	cmp	r3, r5
 800afec:	dc28      	bgt.n	800b040 <_printf_common+0xa4>
 800afee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800aff2:	6822      	ldr	r2, [r4, #0]
 800aff4:	3300      	adds	r3, #0
 800aff6:	bf18      	it	ne
 800aff8:	2301      	movne	r3, #1
 800affa:	0692      	lsls	r2, r2, #26
 800affc:	d42d      	bmi.n	800b05a <_printf_common+0xbe>
 800affe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b002:	4639      	mov	r1, r7
 800b004:	4630      	mov	r0, r6
 800b006:	47c0      	blx	r8
 800b008:	3001      	adds	r0, #1
 800b00a:	d020      	beq.n	800b04e <_printf_common+0xb2>
 800b00c:	6823      	ldr	r3, [r4, #0]
 800b00e:	68e5      	ldr	r5, [r4, #12]
 800b010:	f8d9 2000 	ldr.w	r2, [r9]
 800b014:	f003 0306 	and.w	r3, r3, #6
 800b018:	2b04      	cmp	r3, #4
 800b01a:	bf08      	it	eq
 800b01c:	1aad      	subeq	r5, r5, r2
 800b01e:	68a3      	ldr	r3, [r4, #8]
 800b020:	6922      	ldr	r2, [r4, #16]
 800b022:	bf0c      	ite	eq
 800b024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b028:	2500      	movne	r5, #0
 800b02a:	4293      	cmp	r3, r2
 800b02c:	bfc4      	itt	gt
 800b02e:	1a9b      	subgt	r3, r3, r2
 800b030:	18ed      	addgt	r5, r5, r3
 800b032:	f04f 0900 	mov.w	r9, #0
 800b036:	341a      	adds	r4, #26
 800b038:	454d      	cmp	r5, r9
 800b03a:	d11a      	bne.n	800b072 <_printf_common+0xd6>
 800b03c:	2000      	movs	r0, #0
 800b03e:	e008      	b.n	800b052 <_printf_common+0xb6>
 800b040:	2301      	movs	r3, #1
 800b042:	4652      	mov	r2, sl
 800b044:	4639      	mov	r1, r7
 800b046:	4630      	mov	r0, r6
 800b048:	47c0      	blx	r8
 800b04a:	3001      	adds	r0, #1
 800b04c:	d103      	bne.n	800b056 <_printf_common+0xba>
 800b04e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b056:	3501      	adds	r5, #1
 800b058:	e7c3      	b.n	800afe2 <_printf_common+0x46>
 800b05a:	18e1      	adds	r1, r4, r3
 800b05c:	1c5a      	adds	r2, r3, #1
 800b05e:	2030      	movs	r0, #48	; 0x30
 800b060:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b064:	4422      	add	r2, r4
 800b066:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b06a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b06e:	3302      	adds	r3, #2
 800b070:	e7c5      	b.n	800affe <_printf_common+0x62>
 800b072:	2301      	movs	r3, #1
 800b074:	4622      	mov	r2, r4
 800b076:	4639      	mov	r1, r7
 800b078:	4630      	mov	r0, r6
 800b07a:	47c0      	blx	r8
 800b07c:	3001      	adds	r0, #1
 800b07e:	d0e6      	beq.n	800b04e <_printf_common+0xb2>
 800b080:	f109 0901 	add.w	r9, r9, #1
 800b084:	e7d8      	b.n	800b038 <_printf_common+0x9c>
	...

0800b088 <_printf_i>:
 800b088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b08c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b090:	460c      	mov	r4, r1
 800b092:	7e09      	ldrb	r1, [r1, #24]
 800b094:	b085      	sub	sp, #20
 800b096:	296e      	cmp	r1, #110	; 0x6e
 800b098:	4617      	mov	r7, r2
 800b09a:	4606      	mov	r6, r0
 800b09c:	4698      	mov	r8, r3
 800b09e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0a0:	f000 80b3 	beq.w	800b20a <_printf_i+0x182>
 800b0a4:	d822      	bhi.n	800b0ec <_printf_i+0x64>
 800b0a6:	2963      	cmp	r1, #99	; 0x63
 800b0a8:	d036      	beq.n	800b118 <_printf_i+0x90>
 800b0aa:	d80a      	bhi.n	800b0c2 <_printf_i+0x3a>
 800b0ac:	2900      	cmp	r1, #0
 800b0ae:	f000 80b9 	beq.w	800b224 <_printf_i+0x19c>
 800b0b2:	2958      	cmp	r1, #88	; 0x58
 800b0b4:	f000 8083 	beq.w	800b1be <_printf_i+0x136>
 800b0b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b0c0:	e032      	b.n	800b128 <_printf_i+0xa0>
 800b0c2:	2964      	cmp	r1, #100	; 0x64
 800b0c4:	d001      	beq.n	800b0ca <_printf_i+0x42>
 800b0c6:	2969      	cmp	r1, #105	; 0x69
 800b0c8:	d1f6      	bne.n	800b0b8 <_printf_i+0x30>
 800b0ca:	6820      	ldr	r0, [r4, #0]
 800b0cc:	6813      	ldr	r3, [r2, #0]
 800b0ce:	0605      	lsls	r5, r0, #24
 800b0d0:	f103 0104 	add.w	r1, r3, #4
 800b0d4:	d52a      	bpl.n	800b12c <_printf_i+0xa4>
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	6011      	str	r1, [r2, #0]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	da03      	bge.n	800b0e6 <_printf_i+0x5e>
 800b0de:	222d      	movs	r2, #45	; 0x2d
 800b0e0:	425b      	negs	r3, r3
 800b0e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b0e6:	486f      	ldr	r0, [pc, #444]	; (800b2a4 <_printf_i+0x21c>)
 800b0e8:	220a      	movs	r2, #10
 800b0ea:	e039      	b.n	800b160 <_printf_i+0xd8>
 800b0ec:	2973      	cmp	r1, #115	; 0x73
 800b0ee:	f000 809d 	beq.w	800b22c <_printf_i+0x1a4>
 800b0f2:	d808      	bhi.n	800b106 <_printf_i+0x7e>
 800b0f4:	296f      	cmp	r1, #111	; 0x6f
 800b0f6:	d020      	beq.n	800b13a <_printf_i+0xb2>
 800b0f8:	2970      	cmp	r1, #112	; 0x70
 800b0fa:	d1dd      	bne.n	800b0b8 <_printf_i+0x30>
 800b0fc:	6823      	ldr	r3, [r4, #0]
 800b0fe:	f043 0320 	orr.w	r3, r3, #32
 800b102:	6023      	str	r3, [r4, #0]
 800b104:	e003      	b.n	800b10e <_printf_i+0x86>
 800b106:	2975      	cmp	r1, #117	; 0x75
 800b108:	d017      	beq.n	800b13a <_printf_i+0xb2>
 800b10a:	2978      	cmp	r1, #120	; 0x78
 800b10c:	d1d4      	bne.n	800b0b8 <_printf_i+0x30>
 800b10e:	2378      	movs	r3, #120	; 0x78
 800b110:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b114:	4864      	ldr	r0, [pc, #400]	; (800b2a8 <_printf_i+0x220>)
 800b116:	e055      	b.n	800b1c4 <_printf_i+0x13c>
 800b118:	6813      	ldr	r3, [r2, #0]
 800b11a:	1d19      	adds	r1, r3, #4
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	6011      	str	r1, [r2, #0]
 800b120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b124:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b128:	2301      	movs	r3, #1
 800b12a:	e08c      	b.n	800b246 <_printf_i+0x1be>
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	6011      	str	r1, [r2, #0]
 800b130:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b134:	bf18      	it	ne
 800b136:	b21b      	sxthne	r3, r3
 800b138:	e7cf      	b.n	800b0da <_printf_i+0x52>
 800b13a:	6813      	ldr	r3, [r2, #0]
 800b13c:	6825      	ldr	r5, [r4, #0]
 800b13e:	1d18      	adds	r0, r3, #4
 800b140:	6010      	str	r0, [r2, #0]
 800b142:	0628      	lsls	r0, r5, #24
 800b144:	d501      	bpl.n	800b14a <_printf_i+0xc2>
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	e002      	b.n	800b150 <_printf_i+0xc8>
 800b14a:	0668      	lsls	r0, r5, #25
 800b14c:	d5fb      	bpl.n	800b146 <_printf_i+0xbe>
 800b14e:	881b      	ldrh	r3, [r3, #0]
 800b150:	4854      	ldr	r0, [pc, #336]	; (800b2a4 <_printf_i+0x21c>)
 800b152:	296f      	cmp	r1, #111	; 0x6f
 800b154:	bf14      	ite	ne
 800b156:	220a      	movne	r2, #10
 800b158:	2208      	moveq	r2, #8
 800b15a:	2100      	movs	r1, #0
 800b15c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b160:	6865      	ldr	r5, [r4, #4]
 800b162:	60a5      	str	r5, [r4, #8]
 800b164:	2d00      	cmp	r5, #0
 800b166:	f2c0 8095 	blt.w	800b294 <_printf_i+0x20c>
 800b16a:	6821      	ldr	r1, [r4, #0]
 800b16c:	f021 0104 	bic.w	r1, r1, #4
 800b170:	6021      	str	r1, [r4, #0]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d13d      	bne.n	800b1f2 <_printf_i+0x16a>
 800b176:	2d00      	cmp	r5, #0
 800b178:	f040 808e 	bne.w	800b298 <_printf_i+0x210>
 800b17c:	4665      	mov	r5, ip
 800b17e:	2a08      	cmp	r2, #8
 800b180:	d10b      	bne.n	800b19a <_printf_i+0x112>
 800b182:	6823      	ldr	r3, [r4, #0]
 800b184:	07db      	lsls	r3, r3, #31
 800b186:	d508      	bpl.n	800b19a <_printf_i+0x112>
 800b188:	6923      	ldr	r3, [r4, #16]
 800b18a:	6862      	ldr	r2, [r4, #4]
 800b18c:	429a      	cmp	r2, r3
 800b18e:	bfde      	ittt	le
 800b190:	2330      	movle	r3, #48	; 0x30
 800b192:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b196:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b19a:	ebac 0305 	sub.w	r3, ip, r5
 800b19e:	6123      	str	r3, [r4, #16]
 800b1a0:	f8cd 8000 	str.w	r8, [sp]
 800b1a4:	463b      	mov	r3, r7
 800b1a6:	aa03      	add	r2, sp, #12
 800b1a8:	4621      	mov	r1, r4
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	f7ff fef6 	bl	800af9c <_printf_common>
 800b1b0:	3001      	adds	r0, #1
 800b1b2:	d14d      	bne.n	800b250 <_printf_i+0x1c8>
 800b1b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1b8:	b005      	add	sp, #20
 800b1ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1be:	4839      	ldr	r0, [pc, #228]	; (800b2a4 <_printf_i+0x21c>)
 800b1c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b1c4:	6813      	ldr	r3, [r2, #0]
 800b1c6:	6821      	ldr	r1, [r4, #0]
 800b1c8:	1d1d      	adds	r5, r3, #4
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	6015      	str	r5, [r2, #0]
 800b1ce:	060a      	lsls	r2, r1, #24
 800b1d0:	d50b      	bpl.n	800b1ea <_printf_i+0x162>
 800b1d2:	07ca      	lsls	r2, r1, #31
 800b1d4:	bf44      	itt	mi
 800b1d6:	f041 0120 	orrmi.w	r1, r1, #32
 800b1da:	6021      	strmi	r1, [r4, #0]
 800b1dc:	b91b      	cbnz	r3, 800b1e6 <_printf_i+0x15e>
 800b1de:	6822      	ldr	r2, [r4, #0]
 800b1e0:	f022 0220 	bic.w	r2, r2, #32
 800b1e4:	6022      	str	r2, [r4, #0]
 800b1e6:	2210      	movs	r2, #16
 800b1e8:	e7b7      	b.n	800b15a <_printf_i+0xd2>
 800b1ea:	064d      	lsls	r5, r1, #25
 800b1ec:	bf48      	it	mi
 800b1ee:	b29b      	uxthmi	r3, r3
 800b1f0:	e7ef      	b.n	800b1d2 <_printf_i+0x14a>
 800b1f2:	4665      	mov	r5, ip
 800b1f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1f8:	fb02 3311 	mls	r3, r2, r1, r3
 800b1fc:	5cc3      	ldrb	r3, [r0, r3]
 800b1fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b202:	460b      	mov	r3, r1
 800b204:	2900      	cmp	r1, #0
 800b206:	d1f5      	bne.n	800b1f4 <_printf_i+0x16c>
 800b208:	e7b9      	b.n	800b17e <_printf_i+0xf6>
 800b20a:	6813      	ldr	r3, [r2, #0]
 800b20c:	6825      	ldr	r5, [r4, #0]
 800b20e:	6961      	ldr	r1, [r4, #20]
 800b210:	1d18      	adds	r0, r3, #4
 800b212:	6010      	str	r0, [r2, #0]
 800b214:	0628      	lsls	r0, r5, #24
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	d501      	bpl.n	800b21e <_printf_i+0x196>
 800b21a:	6019      	str	r1, [r3, #0]
 800b21c:	e002      	b.n	800b224 <_printf_i+0x19c>
 800b21e:	066a      	lsls	r2, r5, #25
 800b220:	d5fb      	bpl.n	800b21a <_printf_i+0x192>
 800b222:	8019      	strh	r1, [r3, #0]
 800b224:	2300      	movs	r3, #0
 800b226:	6123      	str	r3, [r4, #16]
 800b228:	4665      	mov	r5, ip
 800b22a:	e7b9      	b.n	800b1a0 <_printf_i+0x118>
 800b22c:	6813      	ldr	r3, [r2, #0]
 800b22e:	1d19      	adds	r1, r3, #4
 800b230:	6011      	str	r1, [r2, #0]
 800b232:	681d      	ldr	r5, [r3, #0]
 800b234:	6862      	ldr	r2, [r4, #4]
 800b236:	2100      	movs	r1, #0
 800b238:	4628      	mov	r0, r5
 800b23a:	f7f4 ffe9 	bl	8000210 <memchr>
 800b23e:	b108      	cbz	r0, 800b244 <_printf_i+0x1bc>
 800b240:	1b40      	subs	r0, r0, r5
 800b242:	6060      	str	r0, [r4, #4]
 800b244:	6863      	ldr	r3, [r4, #4]
 800b246:	6123      	str	r3, [r4, #16]
 800b248:	2300      	movs	r3, #0
 800b24a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b24e:	e7a7      	b.n	800b1a0 <_printf_i+0x118>
 800b250:	6923      	ldr	r3, [r4, #16]
 800b252:	462a      	mov	r2, r5
 800b254:	4639      	mov	r1, r7
 800b256:	4630      	mov	r0, r6
 800b258:	47c0      	blx	r8
 800b25a:	3001      	adds	r0, #1
 800b25c:	d0aa      	beq.n	800b1b4 <_printf_i+0x12c>
 800b25e:	6823      	ldr	r3, [r4, #0]
 800b260:	079b      	lsls	r3, r3, #30
 800b262:	d413      	bmi.n	800b28c <_printf_i+0x204>
 800b264:	68e0      	ldr	r0, [r4, #12]
 800b266:	9b03      	ldr	r3, [sp, #12]
 800b268:	4298      	cmp	r0, r3
 800b26a:	bfb8      	it	lt
 800b26c:	4618      	movlt	r0, r3
 800b26e:	e7a3      	b.n	800b1b8 <_printf_i+0x130>
 800b270:	2301      	movs	r3, #1
 800b272:	464a      	mov	r2, r9
 800b274:	4639      	mov	r1, r7
 800b276:	4630      	mov	r0, r6
 800b278:	47c0      	blx	r8
 800b27a:	3001      	adds	r0, #1
 800b27c:	d09a      	beq.n	800b1b4 <_printf_i+0x12c>
 800b27e:	3501      	adds	r5, #1
 800b280:	68e3      	ldr	r3, [r4, #12]
 800b282:	9a03      	ldr	r2, [sp, #12]
 800b284:	1a9b      	subs	r3, r3, r2
 800b286:	42ab      	cmp	r3, r5
 800b288:	dcf2      	bgt.n	800b270 <_printf_i+0x1e8>
 800b28a:	e7eb      	b.n	800b264 <_printf_i+0x1dc>
 800b28c:	2500      	movs	r5, #0
 800b28e:	f104 0919 	add.w	r9, r4, #25
 800b292:	e7f5      	b.n	800b280 <_printf_i+0x1f8>
 800b294:	2b00      	cmp	r3, #0
 800b296:	d1ac      	bne.n	800b1f2 <_printf_i+0x16a>
 800b298:	7803      	ldrb	r3, [r0, #0]
 800b29a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b29e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2a2:	e76c      	b.n	800b17e <_printf_i+0xf6>
 800b2a4:	0800cd42 	.word	0x0800cd42
 800b2a8:	0800cd53 	.word	0x0800cd53

0800b2ac <_sbrk_r>:
 800b2ac:	b538      	push	{r3, r4, r5, lr}
 800b2ae:	4c06      	ldr	r4, [pc, #24]	; (800b2c8 <_sbrk_r+0x1c>)
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	4605      	mov	r5, r0
 800b2b4:	4608      	mov	r0, r1
 800b2b6:	6023      	str	r3, [r4, #0]
 800b2b8:	f7fc f97e 	bl	80075b8 <_sbrk>
 800b2bc:	1c43      	adds	r3, r0, #1
 800b2be:	d102      	bne.n	800b2c6 <_sbrk_r+0x1a>
 800b2c0:	6823      	ldr	r3, [r4, #0]
 800b2c2:	b103      	cbz	r3, 800b2c6 <_sbrk_r+0x1a>
 800b2c4:	602b      	str	r3, [r5, #0]
 800b2c6:	bd38      	pop	{r3, r4, r5, pc}
 800b2c8:	20003224 	.word	0x20003224

0800b2cc <_raise_r>:
 800b2cc:	291f      	cmp	r1, #31
 800b2ce:	b538      	push	{r3, r4, r5, lr}
 800b2d0:	4604      	mov	r4, r0
 800b2d2:	460d      	mov	r5, r1
 800b2d4:	d904      	bls.n	800b2e0 <_raise_r+0x14>
 800b2d6:	2316      	movs	r3, #22
 800b2d8:	6003      	str	r3, [r0, #0]
 800b2da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2de:	bd38      	pop	{r3, r4, r5, pc}
 800b2e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b2e2:	b112      	cbz	r2, 800b2ea <_raise_r+0x1e>
 800b2e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b2e8:	b94b      	cbnz	r3, 800b2fe <_raise_r+0x32>
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	f000 f830 	bl	800b350 <_getpid_r>
 800b2f0:	462a      	mov	r2, r5
 800b2f2:	4601      	mov	r1, r0
 800b2f4:	4620      	mov	r0, r4
 800b2f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2fa:	f000 b817 	b.w	800b32c <_kill_r>
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d00a      	beq.n	800b318 <_raise_r+0x4c>
 800b302:	1c59      	adds	r1, r3, #1
 800b304:	d103      	bne.n	800b30e <_raise_r+0x42>
 800b306:	2316      	movs	r3, #22
 800b308:	6003      	str	r3, [r0, #0]
 800b30a:	2001      	movs	r0, #1
 800b30c:	e7e7      	b.n	800b2de <_raise_r+0x12>
 800b30e:	2400      	movs	r4, #0
 800b310:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b314:	4628      	mov	r0, r5
 800b316:	4798      	blx	r3
 800b318:	2000      	movs	r0, #0
 800b31a:	e7e0      	b.n	800b2de <_raise_r+0x12>

0800b31c <raise>:
 800b31c:	4b02      	ldr	r3, [pc, #8]	; (800b328 <raise+0xc>)
 800b31e:	4601      	mov	r1, r0
 800b320:	6818      	ldr	r0, [r3, #0]
 800b322:	f7ff bfd3 	b.w	800b2cc <_raise_r>
 800b326:	bf00      	nop
 800b328:	2000000c 	.word	0x2000000c

0800b32c <_kill_r>:
 800b32c:	b538      	push	{r3, r4, r5, lr}
 800b32e:	4c07      	ldr	r4, [pc, #28]	; (800b34c <_kill_r+0x20>)
 800b330:	2300      	movs	r3, #0
 800b332:	4605      	mov	r5, r0
 800b334:	4608      	mov	r0, r1
 800b336:	4611      	mov	r1, r2
 800b338:	6023      	str	r3, [r4, #0]
 800b33a:	f7fc f922 	bl	8007582 <_kill>
 800b33e:	1c43      	adds	r3, r0, #1
 800b340:	d102      	bne.n	800b348 <_kill_r+0x1c>
 800b342:	6823      	ldr	r3, [r4, #0]
 800b344:	b103      	cbz	r3, 800b348 <_kill_r+0x1c>
 800b346:	602b      	str	r3, [r5, #0]
 800b348:	bd38      	pop	{r3, r4, r5, pc}
 800b34a:	bf00      	nop
 800b34c:	20003224 	.word	0x20003224

0800b350 <_getpid_r>:
 800b350:	f7fc b90f 	b.w	8007572 <_getpid>

0800b354 <_vsniprintf_r>:
 800b354:	b530      	push	{r4, r5, lr}
 800b356:	1e14      	subs	r4, r2, #0
 800b358:	4605      	mov	r5, r0
 800b35a:	b09b      	sub	sp, #108	; 0x6c
 800b35c:	4618      	mov	r0, r3
 800b35e:	da05      	bge.n	800b36c <_vsniprintf_r+0x18>
 800b360:	238b      	movs	r3, #139	; 0x8b
 800b362:	602b      	str	r3, [r5, #0]
 800b364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b368:	b01b      	add	sp, #108	; 0x6c
 800b36a:	bd30      	pop	{r4, r5, pc}
 800b36c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b370:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b374:	bf14      	ite	ne
 800b376:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800b37a:	4623      	moveq	r3, r4
 800b37c:	9302      	str	r3, [sp, #8]
 800b37e:	9305      	str	r3, [sp, #20]
 800b380:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b384:	9100      	str	r1, [sp, #0]
 800b386:	9104      	str	r1, [sp, #16]
 800b388:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b38c:	4602      	mov	r2, r0
 800b38e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b390:	4669      	mov	r1, sp
 800b392:	4628      	mov	r0, r5
 800b394:	f001 f9b0 	bl	800c6f8 <_svfiprintf_r>
 800b398:	1c43      	adds	r3, r0, #1
 800b39a:	bfbc      	itt	lt
 800b39c:	238b      	movlt	r3, #139	; 0x8b
 800b39e:	602b      	strlt	r3, [r5, #0]
 800b3a0:	2c00      	cmp	r4, #0
 800b3a2:	d0e1      	beq.n	800b368 <_vsniprintf_r+0x14>
 800b3a4:	9b00      	ldr	r3, [sp, #0]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	701a      	strb	r2, [r3, #0]
 800b3aa:	e7dd      	b.n	800b368 <_vsniprintf_r+0x14>

0800b3ac <vsniprintf>:
 800b3ac:	b507      	push	{r0, r1, r2, lr}
 800b3ae:	9300      	str	r3, [sp, #0]
 800b3b0:	4613      	mov	r3, r2
 800b3b2:	460a      	mov	r2, r1
 800b3b4:	4601      	mov	r1, r0
 800b3b6:	4803      	ldr	r0, [pc, #12]	; (800b3c4 <vsniprintf+0x18>)
 800b3b8:	6800      	ldr	r0, [r0, #0]
 800b3ba:	f7ff ffcb 	bl	800b354 <_vsniprintf_r>
 800b3be:	b003      	add	sp, #12
 800b3c0:	f85d fb04 	ldr.w	pc, [sp], #4
 800b3c4:	2000000c 	.word	0x2000000c

0800b3c8 <quorem>:
 800b3c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3cc:	6903      	ldr	r3, [r0, #16]
 800b3ce:	690c      	ldr	r4, [r1, #16]
 800b3d0:	42a3      	cmp	r3, r4
 800b3d2:	4680      	mov	r8, r0
 800b3d4:	f2c0 8082 	blt.w	800b4dc <quorem+0x114>
 800b3d8:	3c01      	subs	r4, #1
 800b3da:	f101 0714 	add.w	r7, r1, #20
 800b3de:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b3e2:	f100 0614 	add.w	r6, r0, #20
 800b3e6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b3ea:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b3ee:	eb06 030c 	add.w	r3, r6, ip
 800b3f2:	3501      	adds	r5, #1
 800b3f4:	eb07 090c 	add.w	r9, r7, ip
 800b3f8:	9301      	str	r3, [sp, #4]
 800b3fa:	fbb0 f5f5 	udiv	r5, r0, r5
 800b3fe:	b395      	cbz	r5, 800b466 <quorem+0x9e>
 800b400:	f04f 0a00 	mov.w	sl, #0
 800b404:	4638      	mov	r0, r7
 800b406:	46b6      	mov	lr, r6
 800b408:	46d3      	mov	fp, sl
 800b40a:	f850 2b04 	ldr.w	r2, [r0], #4
 800b40e:	b293      	uxth	r3, r2
 800b410:	fb05 a303 	mla	r3, r5, r3, sl
 800b414:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b418:	b29b      	uxth	r3, r3
 800b41a:	ebab 0303 	sub.w	r3, fp, r3
 800b41e:	0c12      	lsrs	r2, r2, #16
 800b420:	f8de b000 	ldr.w	fp, [lr]
 800b424:	fb05 a202 	mla	r2, r5, r2, sl
 800b428:	fa13 f38b 	uxtah	r3, r3, fp
 800b42c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b430:	fa1f fb82 	uxth.w	fp, r2
 800b434:	f8de 2000 	ldr.w	r2, [lr]
 800b438:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b43c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b440:	b29b      	uxth	r3, r3
 800b442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b446:	4581      	cmp	r9, r0
 800b448:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b44c:	f84e 3b04 	str.w	r3, [lr], #4
 800b450:	d2db      	bcs.n	800b40a <quorem+0x42>
 800b452:	f856 300c 	ldr.w	r3, [r6, ip]
 800b456:	b933      	cbnz	r3, 800b466 <quorem+0x9e>
 800b458:	9b01      	ldr	r3, [sp, #4]
 800b45a:	3b04      	subs	r3, #4
 800b45c:	429e      	cmp	r6, r3
 800b45e:	461a      	mov	r2, r3
 800b460:	d330      	bcc.n	800b4c4 <quorem+0xfc>
 800b462:	f8c8 4010 	str.w	r4, [r8, #16]
 800b466:	4640      	mov	r0, r8
 800b468:	f001 f818 	bl	800c49c <__mcmp>
 800b46c:	2800      	cmp	r0, #0
 800b46e:	db25      	blt.n	800b4bc <quorem+0xf4>
 800b470:	3501      	adds	r5, #1
 800b472:	4630      	mov	r0, r6
 800b474:	f04f 0c00 	mov.w	ip, #0
 800b478:	f857 2b04 	ldr.w	r2, [r7], #4
 800b47c:	f8d0 e000 	ldr.w	lr, [r0]
 800b480:	b293      	uxth	r3, r2
 800b482:	ebac 0303 	sub.w	r3, ip, r3
 800b486:	0c12      	lsrs	r2, r2, #16
 800b488:	fa13 f38e 	uxtah	r3, r3, lr
 800b48c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b490:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b494:	b29b      	uxth	r3, r3
 800b496:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b49a:	45b9      	cmp	r9, r7
 800b49c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b4a0:	f840 3b04 	str.w	r3, [r0], #4
 800b4a4:	d2e8      	bcs.n	800b478 <quorem+0xb0>
 800b4a6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b4aa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b4ae:	b92a      	cbnz	r2, 800b4bc <quorem+0xf4>
 800b4b0:	3b04      	subs	r3, #4
 800b4b2:	429e      	cmp	r6, r3
 800b4b4:	461a      	mov	r2, r3
 800b4b6:	d30b      	bcc.n	800b4d0 <quorem+0x108>
 800b4b8:	f8c8 4010 	str.w	r4, [r8, #16]
 800b4bc:	4628      	mov	r0, r5
 800b4be:	b003      	add	sp, #12
 800b4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4c4:	6812      	ldr	r2, [r2, #0]
 800b4c6:	3b04      	subs	r3, #4
 800b4c8:	2a00      	cmp	r2, #0
 800b4ca:	d1ca      	bne.n	800b462 <quorem+0x9a>
 800b4cc:	3c01      	subs	r4, #1
 800b4ce:	e7c5      	b.n	800b45c <quorem+0x94>
 800b4d0:	6812      	ldr	r2, [r2, #0]
 800b4d2:	3b04      	subs	r3, #4
 800b4d4:	2a00      	cmp	r2, #0
 800b4d6:	d1ef      	bne.n	800b4b8 <quorem+0xf0>
 800b4d8:	3c01      	subs	r4, #1
 800b4da:	e7ea      	b.n	800b4b2 <quorem+0xea>
 800b4dc:	2000      	movs	r0, #0
 800b4de:	e7ee      	b.n	800b4be <quorem+0xf6>

0800b4e0 <_dtoa_r>:
 800b4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4e4:	ec57 6b10 	vmov	r6, r7, d0
 800b4e8:	b097      	sub	sp, #92	; 0x5c
 800b4ea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b4ec:	9106      	str	r1, [sp, #24]
 800b4ee:	4604      	mov	r4, r0
 800b4f0:	920b      	str	r2, [sp, #44]	; 0x2c
 800b4f2:	9312      	str	r3, [sp, #72]	; 0x48
 800b4f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b4f8:	e9cd 6700 	strd	r6, r7, [sp]
 800b4fc:	b93d      	cbnz	r5, 800b50e <_dtoa_r+0x2e>
 800b4fe:	2010      	movs	r0, #16
 800b500:	f7ff f994 	bl	800a82c <malloc>
 800b504:	6260      	str	r0, [r4, #36]	; 0x24
 800b506:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b50a:	6005      	str	r5, [r0, #0]
 800b50c:	60c5      	str	r5, [r0, #12]
 800b50e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b510:	6819      	ldr	r1, [r3, #0]
 800b512:	b151      	cbz	r1, 800b52a <_dtoa_r+0x4a>
 800b514:	685a      	ldr	r2, [r3, #4]
 800b516:	604a      	str	r2, [r1, #4]
 800b518:	2301      	movs	r3, #1
 800b51a:	4093      	lsls	r3, r2
 800b51c:	608b      	str	r3, [r1, #8]
 800b51e:	4620      	mov	r0, r4
 800b520:	f000 fdda 	bl	800c0d8 <_Bfree>
 800b524:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b526:	2200      	movs	r2, #0
 800b528:	601a      	str	r2, [r3, #0]
 800b52a:	1e3b      	subs	r3, r7, #0
 800b52c:	bfbb      	ittet	lt
 800b52e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b532:	9301      	strlt	r3, [sp, #4]
 800b534:	2300      	movge	r3, #0
 800b536:	2201      	movlt	r2, #1
 800b538:	bfac      	ite	ge
 800b53a:	f8c8 3000 	strge.w	r3, [r8]
 800b53e:	f8c8 2000 	strlt.w	r2, [r8]
 800b542:	4baf      	ldr	r3, [pc, #700]	; (800b800 <_dtoa_r+0x320>)
 800b544:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b548:	ea33 0308 	bics.w	r3, r3, r8
 800b54c:	d114      	bne.n	800b578 <_dtoa_r+0x98>
 800b54e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b550:	f242 730f 	movw	r3, #9999	; 0x270f
 800b554:	6013      	str	r3, [r2, #0]
 800b556:	9b00      	ldr	r3, [sp, #0]
 800b558:	b923      	cbnz	r3, 800b564 <_dtoa_r+0x84>
 800b55a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b55e:	2800      	cmp	r0, #0
 800b560:	f000 8542 	beq.w	800bfe8 <_dtoa_r+0xb08>
 800b564:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b566:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800b814 <_dtoa_r+0x334>
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	f000 8544 	beq.w	800bff8 <_dtoa_r+0xb18>
 800b570:	f10b 0303 	add.w	r3, fp, #3
 800b574:	f000 bd3e 	b.w	800bff4 <_dtoa_r+0xb14>
 800b578:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b57c:	2200      	movs	r2, #0
 800b57e:	2300      	movs	r3, #0
 800b580:	4630      	mov	r0, r6
 800b582:	4639      	mov	r1, r7
 800b584:	f7f5 fac0 	bl	8000b08 <__aeabi_dcmpeq>
 800b588:	4681      	mov	r9, r0
 800b58a:	b168      	cbz	r0, 800b5a8 <_dtoa_r+0xc8>
 800b58c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b58e:	2301      	movs	r3, #1
 800b590:	6013      	str	r3, [r2, #0]
 800b592:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b594:	2b00      	cmp	r3, #0
 800b596:	f000 8524 	beq.w	800bfe2 <_dtoa_r+0xb02>
 800b59a:	4b9a      	ldr	r3, [pc, #616]	; (800b804 <_dtoa_r+0x324>)
 800b59c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b59e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800b5a2:	6013      	str	r3, [r2, #0]
 800b5a4:	f000 bd28 	b.w	800bff8 <_dtoa_r+0xb18>
 800b5a8:	aa14      	add	r2, sp, #80	; 0x50
 800b5aa:	a915      	add	r1, sp, #84	; 0x54
 800b5ac:	ec47 6b10 	vmov	d0, r6, r7
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	f000 ffea 	bl	800c58a <__d2b>
 800b5b6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b5ba:	9004      	str	r0, [sp, #16]
 800b5bc:	2d00      	cmp	r5, #0
 800b5be:	d07c      	beq.n	800b6ba <_dtoa_r+0x1da>
 800b5c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b5c4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800b5c8:	46b2      	mov	sl, r6
 800b5ca:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800b5ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b5d2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	4b8b      	ldr	r3, [pc, #556]	; (800b808 <_dtoa_r+0x328>)
 800b5da:	4650      	mov	r0, sl
 800b5dc:	4659      	mov	r1, fp
 800b5de:	f7f4 fe73 	bl	80002c8 <__aeabi_dsub>
 800b5e2:	a381      	add	r3, pc, #516	; (adr r3, 800b7e8 <_dtoa_r+0x308>)
 800b5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e8:	f7f5 f826 	bl	8000638 <__aeabi_dmul>
 800b5ec:	a380      	add	r3, pc, #512	; (adr r3, 800b7f0 <_dtoa_r+0x310>)
 800b5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f2:	f7f4 fe6b 	bl	80002cc <__adddf3>
 800b5f6:	4606      	mov	r6, r0
 800b5f8:	4628      	mov	r0, r5
 800b5fa:	460f      	mov	r7, r1
 800b5fc:	f7f4 ffb2 	bl	8000564 <__aeabi_i2d>
 800b600:	a37d      	add	r3, pc, #500	; (adr r3, 800b7f8 <_dtoa_r+0x318>)
 800b602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b606:	f7f5 f817 	bl	8000638 <__aeabi_dmul>
 800b60a:	4602      	mov	r2, r0
 800b60c:	460b      	mov	r3, r1
 800b60e:	4630      	mov	r0, r6
 800b610:	4639      	mov	r1, r7
 800b612:	f7f4 fe5b 	bl	80002cc <__adddf3>
 800b616:	4606      	mov	r6, r0
 800b618:	460f      	mov	r7, r1
 800b61a:	f7f5 fabd 	bl	8000b98 <__aeabi_d2iz>
 800b61e:	2200      	movs	r2, #0
 800b620:	4682      	mov	sl, r0
 800b622:	2300      	movs	r3, #0
 800b624:	4630      	mov	r0, r6
 800b626:	4639      	mov	r1, r7
 800b628:	f7f5 fa78 	bl	8000b1c <__aeabi_dcmplt>
 800b62c:	b148      	cbz	r0, 800b642 <_dtoa_r+0x162>
 800b62e:	4650      	mov	r0, sl
 800b630:	f7f4 ff98 	bl	8000564 <__aeabi_i2d>
 800b634:	4632      	mov	r2, r6
 800b636:	463b      	mov	r3, r7
 800b638:	f7f5 fa66 	bl	8000b08 <__aeabi_dcmpeq>
 800b63c:	b908      	cbnz	r0, 800b642 <_dtoa_r+0x162>
 800b63e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b642:	f1ba 0f16 	cmp.w	sl, #22
 800b646:	d859      	bhi.n	800b6fc <_dtoa_r+0x21c>
 800b648:	4970      	ldr	r1, [pc, #448]	; (800b80c <_dtoa_r+0x32c>)
 800b64a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b64e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b652:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b656:	f7f5 fa7f 	bl	8000b58 <__aeabi_dcmpgt>
 800b65a:	2800      	cmp	r0, #0
 800b65c:	d050      	beq.n	800b700 <_dtoa_r+0x220>
 800b65e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b662:	2300      	movs	r3, #0
 800b664:	930f      	str	r3, [sp, #60]	; 0x3c
 800b666:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b668:	1b5d      	subs	r5, r3, r5
 800b66a:	f1b5 0801 	subs.w	r8, r5, #1
 800b66e:	bf49      	itett	mi
 800b670:	f1c5 0301 	rsbmi	r3, r5, #1
 800b674:	2300      	movpl	r3, #0
 800b676:	9305      	strmi	r3, [sp, #20]
 800b678:	f04f 0800 	movmi.w	r8, #0
 800b67c:	bf58      	it	pl
 800b67e:	9305      	strpl	r3, [sp, #20]
 800b680:	f1ba 0f00 	cmp.w	sl, #0
 800b684:	db3e      	blt.n	800b704 <_dtoa_r+0x224>
 800b686:	2300      	movs	r3, #0
 800b688:	44d0      	add	r8, sl
 800b68a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b68e:	9307      	str	r3, [sp, #28]
 800b690:	9b06      	ldr	r3, [sp, #24]
 800b692:	2b09      	cmp	r3, #9
 800b694:	f200 8090 	bhi.w	800b7b8 <_dtoa_r+0x2d8>
 800b698:	2b05      	cmp	r3, #5
 800b69a:	bfc4      	itt	gt
 800b69c:	3b04      	subgt	r3, #4
 800b69e:	9306      	strgt	r3, [sp, #24]
 800b6a0:	9b06      	ldr	r3, [sp, #24]
 800b6a2:	f1a3 0302 	sub.w	r3, r3, #2
 800b6a6:	bfcc      	ite	gt
 800b6a8:	2500      	movgt	r5, #0
 800b6aa:	2501      	movle	r5, #1
 800b6ac:	2b03      	cmp	r3, #3
 800b6ae:	f200 808f 	bhi.w	800b7d0 <_dtoa_r+0x2f0>
 800b6b2:	e8df f003 	tbb	[pc, r3]
 800b6b6:	7f7d      	.short	0x7f7d
 800b6b8:	7131      	.short	0x7131
 800b6ba:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800b6be:	441d      	add	r5, r3
 800b6c0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b6c4:	2820      	cmp	r0, #32
 800b6c6:	dd13      	ble.n	800b6f0 <_dtoa_r+0x210>
 800b6c8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b6cc:	9b00      	ldr	r3, [sp, #0]
 800b6ce:	fa08 f800 	lsl.w	r8, r8, r0
 800b6d2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b6d6:	fa23 f000 	lsr.w	r0, r3, r0
 800b6da:	ea48 0000 	orr.w	r0, r8, r0
 800b6de:	f7f4 ff31 	bl	8000544 <__aeabi_ui2d>
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	4682      	mov	sl, r0
 800b6e6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800b6ea:	3d01      	subs	r5, #1
 800b6ec:	9313      	str	r3, [sp, #76]	; 0x4c
 800b6ee:	e772      	b.n	800b5d6 <_dtoa_r+0xf6>
 800b6f0:	9b00      	ldr	r3, [sp, #0]
 800b6f2:	f1c0 0020 	rsb	r0, r0, #32
 800b6f6:	fa03 f000 	lsl.w	r0, r3, r0
 800b6fa:	e7f0      	b.n	800b6de <_dtoa_r+0x1fe>
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	e7b1      	b.n	800b664 <_dtoa_r+0x184>
 800b700:	900f      	str	r0, [sp, #60]	; 0x3c
 800b702:	e7b0      	b.n	800b666 <_dtoa_r+0x186>
 800b704:	9b05      	ldr	r3, [sp, #20]
 800b706:	eba3 030a 	sub.w	r3, r3, sl
 800b70a:	9305      	str	r3, [sp, #20]
 800b70c:	f1ca 0300 	rsb	r3, sl, #0
 800b710:	9307      	str	r3, [sp, #28]
 800b712:	2300      	movs	r3, #0
 800b714:	930e      	str	r3, [sp, #56]	; 0x38
 800b716:	e7bb      	b.n	800b690 <_dtoa_r+0x1b0>
 800b718:	2301      	movs	r3, #1
 800b71a:	930a      	str	r3, [sp, #40]	; 0x28
 800b71c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b71e:	2b00      	cmp	r3, #0
 800b720:	dd59      	ble.n	800b7d6 <_dtoa_r+0x2f6>
 800b722:	9302      	str	r3, [sp, #8]
 800b724:	4699      	mov	r9, r3
 800b726:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b728:	2200      	movs	r2, #0
 800b72a:	6072      	str	r2, [r6, #4]
 800b72c:	2204      	movs	r2, #4
 800b72e:	f102 0014 	add.w	r0, r2, #20
 800b732:	4298      	cmp	r0, r3
 800b734:	6871      	ldr	r1, [r6, #4]
 800b736:	d953      	bls.n	800b7e0 <_dtoa_r+0x300>
 800b738:	4620      	mov	r0, r4
 800b73a:	f000 fc99 	bl	800c070 <_Balloc>
 800b73e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b740:	6030      	str	r0, [r6, #0]
 800b742:	f1b9 0f0e 	cmp.w	r9, #14
 800b746:	f8d3 b000 	ldr.w	fp, [r3]
 800b74a:	f200 80e6 	bhi.w	800b91a <_dtoa_r+0x43a>
 800b74e:	2d00      	cmp	r5, #0
 800b750:	f000 80e3 	beq.w	800b91a <_dtoa_r+0x43a>
 800b754:	ed9d 7b00 	vldr	d7, [sp]
 800b758:	f1ba 0f00 	cmp.w	sl, #0
 800b75c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800b760:	dd74      	ble.n	800b84c <_dtoa_r+0x36c>
 800b762:	4a2a      	ldr	r2, [pc, #168]	; (800b80c <_dtoa_r+0x32c>)
 800b764:	f00a 030f 	and.w	r3, sl, #15
 800b768:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b76c:	ed93 7b00 	vldr	d7, [r3]
 800b770:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b774:	06f0      	lsls	r0, r6, #27
 800b776:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b77a:	d565      	bpl.n	800b848 <_dtoa_r+0x368>
 800b77c:	4b24      	ldr	r3, [pc, #144]	; (800b810 <_dtoa_r+0x330>)
 800b77e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b782:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b786:	f7f5 f881 	bl	800088c <__aeabi_ddiv>
 800b78a:	e9cd 0100 	strd	r0, r1, [sp]
 800b78e:	f006 060f 	and.w	r6, r6, #15
 800b792:	2503      	movs	r5, #3
 800b794:	4f1e      	ldr	r7, [pc, #120]	; (800b810 <_dtoa_r+0x330>)
 800b796:	e04c      	b.n	800b832 <_dtoa_r+0x352>
 800b798:	2301      	movs	r3, #1
 800b79a:	930a      	str	r3, [sp, #40]	; 0x28
 800b79c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b79e:	4453      	add	r3, sl
 800b7a0:	f103 0901 	add.w	r9, r3, #1
 800b7a4:	9302      	str	r3, [sp, #8]
 800b7a6:	464b      	mov	r3, r9
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	bfb8      	it	lt
 800b7ac:	2301      	movlt	r3, #1
 800b7ae:	e7ba      	b.n	800b726 <_dtoa_r+0x246>
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	e7b2      	b.n	800b71a <_dtoa_r+0x23a>
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	e7f0      	b.n	800b79a <_dtoa_r+0x2ba>
 800b7b8:	2501      	movs	r5, #1
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	9306      	str	r3, [sp, #24]
 800b7be:	950a      	str	r5, [sp, #40]	; 0x28
 800b7c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7c4:	9302      	str	r3, [sp, #8]
 800b7c6:	4699      	mov	r9, r3
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	2312      	movs	r3, #18
 800b7cc:	920b      	str	r2, [sp, #44]	; 0x2c
 800b7ce:	e7aa      	b.n	800b726 <_dtoa_r+0x246>
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	930a      	str	r3, [sp, #40]	; 0x28
 800b7d4:	e7f4      	b.n	800b7c0 <_dtoa_r+0x2e0>
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	9302      	str	r3, [sp, #8]
 800b7da:	4699      	mov	r9, r3
 800b7dc:	461a      	mov	r2, r3
 800b7de:	e7f5      	b.n	800b7cc <_dtoa_r+0x2ec>
 800b7e0:	3101      	adds	r1, #1
 800b7e2:	6071      	str	r1, [r6, #4]
 800b7e4:	0052      	lsls	r2, r2, #1
 800b7e6:	e7a2      	b.n	800b72e <_dtoa_r+0x24e>
 800b7e8:	636f4361 	.word	0x636f4361
 800b7ec:	3fd287a7 	.word	0x3fd287a7
 800b7f0:	8b60c8b3 	.word	0x8b60c8b3
 800b7f4:	3fc68a28 	.word	0x3fc68a28
 800b7f8:	509f79fb 	.word	0x509f79fb
 800b7fc:	3fd34413 	.word	0x3fd34413
 800b800:	7ff00000 	.word	0x7ff00000
 800b804:	0800cd41 	.word	0x0800cd41
 800b808:	3ff80000 	.word	0x3ff80000
 800b80c:	0800cda0 	.word	0x0800cda0
 800b810:	0800cd78 	.word	0x0800cd78
 800b814:	0800cd6d 	.word	0x0800cd6d
 800b818:	07f1      	lsls	r1, r6, #31
 800b81a:	d508      	bpl.n	800b82e <_dtoa_r+0x34e>
 800b81c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b820:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b824:	f7f4 ff08 	bl	8000638 <__aeabi_dmul>
 800b828:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b82c:	3501      	adds	r5, #1
 800b82e:	1076      	asrs	r6, r6, #1
 800b830:	3708      	adds	r7, #8
 800b832:	2e00      	cmp	r6, #0
 800b834:	d1f0      	bne.n	800b818 <_dtoa_r+0x338>
 800b836:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b83a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b83e:	f7f5 f825 	bl	800088c <__aeabi_ddiv>
 800b842:	e9cd 0100 	strd	r0, r1, [sp]
 800b846:	e01a      	b.n	800b87e <_dtoa_r+0x39e>
 800b848:	2502      	movs	r5, #2
 800b84a:	e7a3      	b.n	800b794 <_dtoa_r+0x2b4>
 800b84c:	f000 80a0 	beq.w	800b990 <_dtoa_r+0x4b0>
 800b850:	f1ca 0600 	rsb	r6, sl, #0
 800b854:	4b9f      	ldr	r3, [pc, #636]	; (800bad4 <_dtoa_r+0x5f4>)
 800b856:	4fa0      	ldr	r7, [pc, #640]	; (800bad8 <_dtoa_r+0x5f8>)
 800b858:	f006 020f 	and.w	r2, r6, #15
 800b85c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b864:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b868:	f7f4 fee6 	bl	8000638 <__aeabi_dmul>
 800b86c:	e9cd 0100 	strd	r0, r1, [sp]
 800b870:	1136      	asrs	r6, r6, #4
 800b872:	2300      	movs	r3, #0
 800b874:	2502      	movs	r5, #2
 800b876:	2e00      	cmp	r6, #0
 800b878:	d17f      	bne.n	800b97a <_dtoa_r+0x49a>
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d1e1      	bne.n	800b842 <_dtoa_r+0x362>
 800b87e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b880:	2b00      	cmp	r3, #0
 800b882:	f000 8087 	beq.w	800b994 <_dtoa_r+0x4b4>
 800b886:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b88a:	2200      	movs	r2, #0
 800b88c:	4b93      	ldr	r3, [pc, #588]	; (800badc <_dtoa_r+0x5fc>)
 800b88e:	4630      	mov	r0, r6
 800b890:	4639      	mov	r1, r7
 800b892:	f7f5 f943 	bl	8000b1c <__aeabi_dcmplt>
 800b896:	2800      	cmp	r0, #0
 800b898:	d07c      	beq.n	800b994 <_dtoa_r+0x4b4>
 800b89a:	f1b9 0f00 	cmp.w	r9, #0
 800b89e:	d079      	beq.n	800b994 <_dtoa_r+0x4b4>
 800b8a0:	9b02      	ldr	r3, [sp, #8]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	dd35      	ble.n	800b912 <_dtoa_r+0x432>
 800b8a6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800b8aa:	9308      	str	r3, [sp, #32]
 800b8ac:	4639      	mov	r1, r7
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	4b8b      	ldr	r3, [pc, #556]	; (800bae0 <_dtoa_r+0x600>)
 800b8b2:	4630      	mov	r0, r6
 800b8b4:	f7f4 fec0 	bl	8000638 <__aeabi_dmul>
 800b8b8:	e9cd 0100 	strd	r0, r1, [sp]
 800b8bc:	9f02      	ldr	r7, [sp, #8]
 800b8be:	3501      	adds	r5, #1
 800b8c0:	4628      	mov	r0, r5
 800b8c2:	f7f4 fe4f 	bl	8000564 <__aeabi_i2d>
 800b8c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8ca:	f7f4 feb5 	bl	8000638 <__aeabi_dmul>
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	4b84      	ldr	r3, [pc, #528]	; (800bae4 <_dtoa_r+0x604>)
 800b8d2:	f7f4 fcfb 	bl	80002cc <__adddf3>
 800b8d6:	4605      	mov	r5, r0
 800b8d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b8dc:	2f00      	cmp	r7, #0
 800b8de:	d15d      	bne.n	800b99c <_dtoa_r+0x4bc>
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	4b81      	ldr	r3, [pc, #516]	; (800bae8 <_dtoa_r+0x608>)
 800b8e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8e8:	f7f4 fcee 	bl	80002c8 <__aeabi_dsub>
 800b8ec:	462a      	mov	r2, r5
 800b8ee:	4633      	mov	r3, r6
 800b8f0:	e9cd 0100 	strd	r0, r1, [sp]
 800b8f4:	f7f5 f930 	bl	8000b58 <__aeabi_dcmpgt>
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	f040 8288 	bne.w	800be0e <_dtoa_r+0x92e>
 800b8fe:	462a      	mov	r2, r5
 800b900:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b904:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b908:	f7f5 f908 	bl	8000b1c <__aeabi_dcmplt>
 800b90c:	2800      	cmp	r0, #0
 800b90e:	f040 827c 	bne.w	800be0a <_dtoa_r+0x92a>
 800b912:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b916:	e9cd 2300 	strd	r2, r3, [sp]
 800b91a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f2c0 8150 	blt.w	800bbc2 <_dtoa_r+0x6e2>
 800b922:	f1ba 0f0e 	cmp.w	sl, #14
 800b926:	f300 814c 	bgt.w	800bbc2 <_dtoa_r+0x6e2>
 800b92a:	4b6a      	ldr	r3, [pc, #424]	; (800bad4 <_dtoa_r+0x5f4>)
 800b92c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b930:	ed93 7b00 	vldr	d7, [r3]
 800b934:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b936:	2b00      	cmp	r3, #0
 800b938:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b93c:	f280 80d8 	bge.w	800baf0 <_dtoa_r+0x610>
 800b940:	f1b9 0f00 	cmp.w	r9, #0
 800b944:	f300 80d4 	bgt.w	800baf0 <_dtoa_r+0x610>
 800b948:	f040 825e 	bne.w	800be08 <_dtoa_r+0x928>
 800b94c:	2200      	movs	r2, #0
 800b94e:	4b66      	ldr	r3, [pc, #408]	; (800bae8 <_dtoa_r+0x608>)
 800b950:	ec51 0b17 	vmov	r0, r1, d7
 800b954:	f7f4 fe70 	bl	8000638 <__aeabi_dmul>
 800b958:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b95c:	f7f5 f8f2 	bl	8000b44 <__aeabi_dcmpge>
 800b960:	464f      	mov	r7, r9
 800b962:	464e      	mov	r6, r9
 800b964:	2800      	cmp	r0, #0
 800b966:	f040 8234 	bne.w	800bdd2 <_dtoa_r+0x8f2>
 800b96a:	2331      	movs	r3, #49	; 0x31
 800b96c:	f10b 0501 	add.w	r5, fp, #1
 800b970:	f88b 3000 	strb.w	r3, [fp]
 800b974:	f10a 0a01 	add.w	sl, sl, #1
 800b978:	e22f      	b.n	800bdda <_dtoa_r+0x8fa>
 800b97a:	07f2      	lsls	r2, r6, #31
 800b97c:	d505      	bpl.n	800b98a <_dtoa_r+0x4aa>
 800b97e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b982:	f7f4 fe59 	bl	8000638 <__aeabi_dmul>
 800b986:	3501      	adds	r5, #1
 800b988:	2301      	movs	r3, #1
 800b98a:	1076      	asrs	r6, r6, #1
 800b98c:	3708      	adds	r7, #8
 800b98e:	e772      	b.n	800b876 <_dtoa_r+0x396>
 800b990:	2502      	movs	r5, #2
 800b992:	e774      	b.n	800b87e <_dtoa_r+0x39e>
 800b994:	f8cd a020 	str.w	sl, [sp, #32]
 800b998:	464f      	mov	r7, r9
 800b99a:	e791      	b.n	800b8c0 <_dtoa_r+0x3e0>
 800b99c:	4b4d      	ldr	r3, [pc, #308]	; (800bad4 <_dtoa_r+0x5f4>)
 800b99e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b9a2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b9a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d047      	beq.n	800ba3c <_dtoa_r+0x55c>
 800b9ac:	4602      	mov	r2, r0
 800b9ae:	460b      	mov	r3, r1
 800b9b0:	2000      	movs	r0, #0
 800b9b2:	494e      	ldr	r1, [pc, #312]	; (800baec <_dtoa_r+0x60c>)
 800b9b4:	f7f4 ff6a 	bl	800088c <__aeabi_ddiv>
 800b9b8:	462a      	mov	r2, r5
 800b9ba:	4633      	mov	r3, r6
 800b9bc:	f7f4 fc84 	bl	80002c8 <__aeabi_dsub>
 800b9c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b9c4:	465d      	mov	r5, fp
 800b9c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9ca:	f7f5 f8e5 	bl	8000b98 <__aeabi_d2iz>
 800b9ce:	4606      	mov	r6, r0
 800b9d0:	f7f4 fdc8 	bl	8000564 <__aeabi_i2d>
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	460b      	mov	r3, r1
 800b9d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9dc:	f7f4 fc74 	bl	80002c8 <__aeabi_dsub>
 800b9e0:	3630      	adds	r6, #48	; 0x30
 800b9e2:	f805 6b01 	strb.w	r6, [r5], #1
 800b9e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b9ea:	e9cd 0100 	strd	r0, r1, [sp]
 800b9ee:	f7f5 f895 	bl	8000b1c <__aeabi_dcmplt>
 800b9f2:	2800      	cmp	r0, #0
 800b9f4:	d163      	bne.n	800babe <_dtoa_r+0x5de>
 800b9f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9fa:	2000      	movs	r0, #0
 800b9fc:	4937      	ldr	r1, [pc, #220]	; (800badc <_dtoa_r+0x5fc>)
 800b9fe:	f7f4 fc63 	bl	80002c8 <__aeabi_dsub>
 800ba02:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ba06:	f7f5 f889 	bl	8000b1c <__aeabi_dcmplt>
 800ba0a:	2800      	cmp	r0, #0
 800ba0c:	f040 80b7 	bne.w	800bb7e <_dtoa_r+0x69e>
 800ba10:	eba5 030b 	sub.w	r3, r5, fp
 800ba14:	429f      	cmp	r7, r3
 800ba16:	f77f af7c 	ble.w	800b912 <_dtoa_r+0x432>
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	4b30      	ldr	r3, [pc, #192]	; (800bae0 <_dtoa_r+0x600>)
 800ba1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ba22:	f7f4 fe09 	bl	8000638 <__aeabi_dmul>
 800ba26:	2200      	movs	r2, #0
 800ba28:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ba2c:	4b2c      	ldr	r3, [pc, #176]	; (800bae0 <_dtoa_r+0x600>)
 800ba2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba32:	f7f4 fe01 	bl	8000638 <__aeabi_dmul>
 800ba36:	e9cd 0100 	strd	r0, r1, [sp]
 800ba3a:	e7c4      	b.n	800b9c6 <_dtoa_r+0x4e6>
 800ba3c:	462a      	mov	r2, r5
 800ba3e:	4633      	mov	r3, r6
 800ba40:	f7f4 fdfa 	bl	8000638 <__aeabi_dmul>
 800ba44:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ba48:	eb0b 0507 	add.w	r5, fp, r7
 800ba4c:	465e      	mov	r6, fp
 800ba4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba52:	f7f5 f8a1 	bl	8000b98 <__aeabi_d2iz>
 800ba56:	4607      	mov	r7, r0
 800ba58:	f7f4 fd84 	bl	8000564 <__aeabi_i2d>
 800ba5c:	3730      	adds	r7, #48	; 0x30
 800ba5e:	4602      	mov	r2, r0
 800ba60:	460b      	mov	r3, r1
 800ba62:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba66:	f7f4 fc2f 	bl	80002c8 <__aeabi_dsub>
 800ba6a:	f806 7b01 	strb.w	r7, [r6], #1
 800ba6e:	42ae      	cmp	r6, r5
 800ba70:	e9cd 0100 	strd	r0, r1, [sp]
 800ba74:	f04f 0200 	mov.w	r2, #0
 800ba78:	d126      	bne.n	800bac8 <_dtoa_r+0x5e8>
 800ba7a:	4b1c      	ldr	r3, [pc, #112]	; (800baec <_dtoa_r+0x60c>)
 800ba7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ba80:	f7f4 fc24 	bl	80002cc <__adddf3>
 800ba84:	4602      	mov	r2, r0
 800ba86:	460b      	mov	r3, r1
 800ba88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba8c:	f7f5 f864 	bl	8000b58 <__aeabi_dcmpgt>
 800ba90:	2800      	cmp	r0, #0
 800ba92:	d174      	bne.n	800bb7e <_dtoa_r+0x69e>
 800ba94:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ba98:	2000      	movs	r0, #0
 800ba9a:	4914      	ldr	r1, [pc, #80]	; (800baec <_dtoa_r+0x60c>)
 800ba9c:	f7f4 fc14 	bl	80002c8 <__aeabi_dsub>
 800baa0:	4602      	mov	r2, r0
 800baa2:	460b      	mov	r3, r1
 800baa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800baa8:	f7f5 f838 	bl	8000b1c <__aeabi_dcmplt>
 800baac:	2800      	cmp	r0, #0
 800baae:	f43f af30 	beq.w	800b912 <_dtoa_r+0x432>
 800bab2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bab6:	2b30      	cmp	r3, #48	; 0x30
 800bab8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800babc:	d002      	beq.n	800bac4 <_dtoa_r+0x5e4>
 800babe:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bac2:	e04a      	b.n	800bb5a <_dtoa_r+0x67a>
 800bac4:	4615      	mov	r5, r2
 800bac6:	e7f4      	b.n	800bab2 <_dtoa_r+0x5d2>
 800bac8:	4b05      	ldr	r3, [pc, #20]	; (800bae0 <_dtoa_r+0x600>)
 800baca:	f7f4 fdb5 	bl	8000638 <__aeabi_dmul>
 800bace:	e9cd 0100 	strd	r0, r1, [sp]
 800bad2:	e7bc      	b.n	800ba4e <_dtoa_r+0x56e>
 800bad4:	0800cda0 	.word	0x0800cda0
 800bad8:	0800cd78 	.word	0x0800cd78
 800badc:	3ff00000 	.word	0x3ff00000
 800bae0:	40240000 	.word	0x40240000
 800bae4:	401c0000 	.word	0x401c0000
 800bae8:	40140000 	.word	0x40140000
 800baec:	3fe00000 	.word	0x3fe00000
 800baf0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800baf4:	465d      	mov	r5, fp
 800baf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bafa:	4630      	mov	r0, r6
 800bafc:	4639      	mov	r1, r7
 800bafe:	f7f4 fec5 	bl	800088c <__aeabi_ddiv>
 800bb02:	f7f5 f849 	bl	8000b98 <__aeabi_d2iz>
 800bb06:	4680      	mov	r8, r0
 800bb08:	f7f4 fd2c 	bl	8000564 <__aeabi_i2d>
 800bb0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb10:	f7f4 fd92 	bl	8000638 <__aeabi_dmul>
 800bb14:	4602      	mov	r2, r0
 800bb16:	460b      	mov	r3, r1
 800bb18:	4630      	mov	r0, r6
 800bb1a:	4639      	mov	r1, r7
 800bb1c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800bb20:	f7f4 fbd2 	bl	80002c8 <__aeabi_dsub>
 800bb24:	f805 6b01 	strb.w	r6, [r5], #1
 800bb28:	eba5 060b 	sub.w	r6, r5, fp
 800bb2c:	45b1      	cmp	r9, r6
 800bb2e:	4602      	mov	r2, r0
 800bb30:	460b      	mov	r3, r1
 800bb32:	d139      	bne.n	800bba8 <_dtoa_r+0x6c8>
 800bb34:	f7f4 fbca 	bl	80002cc <__adddf3>
 800bb38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb3c:	4606      	mov	r6, r0
 800bb3e:	460f      	mov	r7, r1
 800bb40:	f7f5 f80a 	bl	8000b58 <__aeabi_dcmpgt>
 800bb44:	b9c8      	cbnz	r0, 800bb7a <_dtoa_r+0x69a>
 800bb46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb4a:	4630      	mov	r0, r6
 800bb4c:	4639      	mov	r1, r7
 800bb4e:	f7f4 ffdb 	bl	8000b08 <__aeabi_dcmpeq>
 800bb52:	b110      	cbz	r0, 800bb5a <_dtoa_r+0x67a>
 800bb54:	f018 0f01 	tst.w	r8, #1
 800bb58:	d10f      	bne.n	800bb7a <_dtoa_r+0x69a>
 800bb5a:	9904      	ldr	r1, [sp, #16]
 800bb5c:	4620      	mov	r0, r4
 800bb5e:	f000 fabb 	bl	800c0d8 <_Bfree>
 800bb62:	2300      	movs	r3, #0
 800bb64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bb66:	702b      	strb	r3, [r5, #0]
 800bb68:	f10a 0301 	add.w	r3, sl, #1
 800bb6c:	6013      	str	r3, [r2, #0]
 800bb6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	f000 8241 	beq.w	800bff8 <_dtoa_r+0xb18>
 800bb76:	601d      	str	r5, [r3, #0]
 800bb78:	e23e      	b.n	800bff8 <_dtoa_r+0xb18>
 800bb7a:	f8cd a020 	str.w	sl, [sp, #32]
 800bb7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bb82:	2a39      	cmp	r2, #57	; 0x39
 800bb84:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800bb88:	d108      	bne.n	800bb9c <_dtoa_r+0x6bc>
 800bb8a:	459b      	cmp	fp, r3
 800bb8c:	d10a      	bne.n	800bba4 <_dtoa_r+0x6c4>
 800bb8e:	9b08      	ldr	r3, [sp, #32]
 800bb90:	3301      	adds	r3, #1
 800bb92:	9308      	str	r3, [sp, #32]
 800bb94:	2330      	movs	r3, #48	; 0x30
 800bb96:	f88b 3000 	strb.w	r3, [fp]
 800bb9a:	465b      	mov	r3, fp
 800bb9c:	781a      	ldrb	r2, [r3, #0]
 800bb9e:	3201      	adds	r2, #1
 800bba0:	701a      	strb	r2, [r3, #0]
 800bba2:	e78c      	b.n	800babe <_dtoa_r+0x5de>
 800bba4:	461d      	mov	r5, r3
 800bba6:	e7ea      	b.n	800bb7e <_dtoa_r+0x69e>
 800bba8:	2200      	movs	r2, #0
 800bbaa:	4b9b      	ldr	r3, [pc, #620]	; (800be18 <_dtoa_r+0x938>)
 800bbac:	f7f4 fd44 	bl	8000638 <__aeabi_dmul>
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	4606      	mov	r6, r0
 800bbb6:	460f      	mov	r7, r1
 800bbb8:	f7f4 ffa6 	bl	8000b08 <__aeabi_dcmpeq>
 800bbbc:	2800      	cmp	r0, #0
 800bbbe:	d09a      	beq.n	800baf6 <_dtoa_r+0x616>
 800bbc0:	e7cb      	b.n	800bb5a <_dtoa_r+0x67a>
 800bbc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbc4:	2a00      	cmp	r2, #0
 800bbc6:	f000 808b 	beq.w	800bce0 <_dtoa_r+0x800>
 800bbca:	9a06      	ldr	r2, [sp, #24]
 800bbcc:	2a01      	cmp	r2, #1
 800bbce:	dc6e      	bgt.n	800bcae <_dtoa_r+0x7ce>
 800bbd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bbd2:	2a00      	cmp	r2, #0
 800bbd4:	d067      	beq.n	800bca6 <_dtoa_r+0x7c6>
 800bbd6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bbda:	9f07      	ldr	r7, [sp, #28]
 800bbdc:	9d05      	ldr	r5, [sp, #20]
 800bbde:	9a05      	ldr	r2, [sp, #20]
 800bbe0:	2101      	movs	r1, #1
 800bbe2:	441a      	add	r2, r3
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	9205      	str	r2, [sp, #20]
 800bbe8:	4498      	add	r8, r3
 800bbea:	f000 fb15 	bl	800c218 <__i2b>
 800bbee:	4606      	mov	r6, r0
 800bbf0:	2d00      	cmp	r5, #0
 800bbf2:	dd0c      	ble.n	800bc0e <_dtoa_r+0x72e>
 800bbf4:	f1b8 0f00 	cmp.w	r8, #0
 800bbf8:	dd09      	ble.n	800bc0e <_dtoa_r+0x72e>
 800bbfa:	4545      	cmp	r5, r8
 800bbfc:	9a05      	ldr	r2, [sp, #20]
 800bbfe:	462b      	mov	r3, r5
 800bc00:	bfa8      	it	ge
 800bc02:	4643      	movge	r3, r8
 800bc04:	1ad2      	subs	r2, r2, r3
 800bc06:	9205      	str	r2, [sp, #20]
 800bc08:	1aed      	subs	r5, r5, r3
 800bc0a:	eba8 0803 	sub.w	r8, r8, r3
 800bc0e:	9b07      	ldr	r3, [sp, #28]
 800bc10:	b1eb      	cbz	r3, 800bc4e <_dtoa_r+0x76e>
 800bc12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d067      	beq.n	800bce8 <_dtoa_r+0x808>
 800bc18:	b18f      	cbz	r7, 800bc3e <_dtoa_r+0x75e>
 800bc1a:	4631      	mov	r1, r6
 800bc1c:	463a      	mov	r2, r7
 800bc1e:	4620      	mov	r0, r4
 800bc20:	f000 fb9a 	bl	800c358 <__pow5mult>
 800bc24:	9a04      	ldr	r2, [sp, #16]
 800bc26:	4601      	mov	r1, r0
 800bc28:	4606      	mov	r6, r0
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	f000 fafd 	bl	800c22a <__multiply>
 800bc30:	9904      	ldr	r1, [sp, #16]
 800bc32:	9008      	str	r0, [sp, #32]
 800bc34:	4620      	mov	r0, r4
 800bc36:	f000 fa4f 	bl	800c0d8 <_Bfree>
 800bc3a:	9b08      	ldr	r3, [sp, #32]
 800bc3c:	9304      	str	r3, [sp, #16]
 800bc3e:	9b07      	ldr	r3, [sp, #28]
 800bc40:	1bda      	subs	r2, r3, r7
 800bc42:	d004      	beq.n	800bc4e <_dtoa_r+0x76e>
 800bc44:	9904      	ldr	r1, [sp, #16]
 800bc46:	4620      	mov	r0, r4
 800bc48:	f000 fb86 	bl	800c358 <__pow5mult>
 800bc4c:	9004      	str	r0, [sp, #16]
 800bc4e:	2101      	movs	r1, #1
 800bc50:	4620      	mov	r0, r4
 800bc52:	f000 fae1 	bl	800c218 <__i2b>
 800bc56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc58:	4607      	mov	r7, r0
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	f000 81d0 	beq.w	800c000 <_dtoa_r+0xb20>
 800bc60:	461a      	mov	r2, r3
 800bc62:	4601      	mov	r1, r0
 800bc64:	4620      	mov	r0, r4
 800bc66:	f000 fb77 	bl	800c358 <__pow5mult>
 800bc6a:	9b06      	ldr	r3, [sp, #24]
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	4607      	mov	r7, r0
 800bc70:	dc40      	bgt.n	800bcf4 <_dtoa_r+0x814>
 800bc72:	9b00      	ldr	r3, [sp, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d139      	bne.n	800bcec <_dtoa_r+0x80c>
 800bc78:	9b01      	ldr	r3, [sp, #4]
 800bc7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d136      	bne.n	800bcf0 <_dtoa_r+0x810>
 800bc82:	9b01      	ldr	r3, [sp, #4]
 800bc84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc88:	0d1b      	lsrs	r3, r3, #20
 800bc8a:	051b      	lsls	r3, r3, #20
 800bc8c:	b12b      	cbz	r3, 800bc9a <_dtoa_r+0x7ba>
 800bc8e:	9b05      	ldr	r3, [sp, #20]
 800bc90:	3301      	adds	r3, #1
 800bc92:	9305      	str	r3, [sp, #20]
 800bc94:	f108 0801 	add.w	r8, r8, #1
 800bc98:	2301      	movs	r3, #1
 800bc9a:	9307      	str	r3, [sp, #28]
 800bc9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d12a      	bne.n	800bcf8 <_dtoa_r+0x818>
 800bca2:	2001      	movs	r0, #1
 800bca4:	e030      	b.n	800bd08 <_dtoa_r+0x828>
 800bca6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bca8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bcac:	e795      	b.n	800bbda <_dtoa_r+0x6fa>
 800bcae:	9b07      	ldr	r3, [sp, #28]
 800bcb0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800bcb4:	42bb      	cmp	r3, r7
 800bcb6:	bfbf      	itttt	lt
 800bcb8:	9b07      	ldrlt	r3, [sp, #28]
 800bcba:	9707      	strlt	r7, [sp, #28]
 800bcbc:	1afa      	sublt	r2, r7, r3
 800bcbe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800bcc0:	bfbb      	ittet	lt
 800bcc2:	189b      	addlt	r3, r3, r2
 800bcc4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800bcc6:	1bdf      	subge	r7, r3, r7
 800bcc8:	2700      	movlt	r7, #0
 800bcca:	f1b9 0f00 	cmp.w	r9, #0
 800bcce:	bfb5      	itete	lt
 800bcd0:	9b05      	ldrlt	r3, [sp, #20]
 800bcd2:	9d05      	ldrge	r5, [sp, #20]
 800bcd4:	eba3 0509 	sublt.w	r5, r3, r9
 800bcd8:	464b      	movge	r3, r9
 800bcda:	bfb8      	it	lt
 800bcdc:	2300      	movlt	r3, #0
 800bcde:	e77e      	b.n	800bbde <_dtoa_r+0x6fe>
 800bce0:	9f07      	ldr	r7, [sp, #28]
 800bce2:	9d05      	ldr	r5, [sp, #20]
 800bce4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800bce6:	e783      	b.n	800bbf0 <_dtoa_r+0x710>
 800bce8:	9a07      	ldr	r2, [sp, #28]
 800bcea:	e7ab      	b.n	800bc44 <_dtoa_r+0x764>
 800bcec:	2300      	movs	r3, #0
 800bcee:	e7d4      	b.n	800bc9a <_dtoa_r+0x7ba>
 800bcf0:	9b00      	ldr	r3, [sp, #0]
 800bcf2:	e7d2      	b.n	800bc9a <_dtoa_r+0x7ba>
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	9307      	str	r3, [sp, #28]
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800bcfe:	6918      	ldr	r0, [r3, #16]
 800bd00:	f000 fa3c 	bl	800c17c <__hi0bits>
 800bd04:	f1c0 0020 	rsb	r0, r0, #32
 800bd08:	4440      	add	r0, r8
 800bd0a:	f010 001f 	ands.w	r0, r0, #31
 800bd0e:	d047      	beq.n	800bda0 <_dtoa_r+0x8c0>
 800bd10:	f1c0 0320 	rsb	r3, r0, #32
 800bd14:	2b04      	cmp	r3, #4
 800bd16:	dd3b      	ble.n	800bd90 <_dtoa_r+0x8b0>
 800bd18:	9b05      	ldr	r3, [sp, #20]
 800bd1a:	f1c0 001c 	rsb	r0, r0, #28
 800bd1e:	4403      	add	r3, r0
 800bd20:	9305      	str	r3, [sp, #20]
 800bd22:	4405      	add	r5, r0
 800bd24:	4480      	add	r8, r0
 800bd26:	9b05      	ldr	r3, [sp, #20]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	dd05      	ble.n	800bd38 <_dtoa_r+0x858>
 800bd2c:	461a      	mov	r2, r3
 800bd2e:	9904      	ldr	r1, [sp, #16]
 800bd30:	4620      	mov	r0, r4
 800bd32:	f000 fb5f 	bl	800c3f4 <__lshift>
 800bd36:	9004      	str	r0, [sp, #16]
 800bd38:	f1b8 0f00 	cmp.w	r8, #0
 800bd3c:	dd05      	ble.n	800bd4a <_dtoa_r+0x86a>
 800bd3e:	4639      	mov	r1, r7
 800bd40:	4642      	mov	r2, r8
 800bd42:	4620      	mov	r0, r4
 800bd44:	f000 fb56 	bl	800c3f4 <__lshift>
 800bd48:	4607      	mov	r7, r0
 800bd4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd4c:	b353      	cbz	r3, 800bda4 <_dtoa_r+0x8c4>
 800bd4e:	4639      	mov	r1, r7
 800bd50:	9804      	ldr	r0, [sp, #16]
 800bd52:	f000 fba3 	bl	800c49c <__mcmp>
 800bd56:	2800      	cmp	r0, #0
 800bd58:	da24      	bge.n	800bda4 <_dtoa_r+0x8c4>
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	220a      	movs	r2, #10
 800bd5e:	9904      	ldr	r1, [sp, #16]
 800bd60:	4620      	mov	r0, r4
 800bd62:	f000 f9d0 	bl	800c106 <__multadd>
 800bd66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd68:	9004      	str	r0, [sp, #16]
 800bd6a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	f000 814d 	beq.w	800c00e <_dtoa_r+0xb2e>
 800bd74:	2300      	movs	r3, #0
 800bd76:	4631      	mov	r1, r6
 800bd78:	220a      	movs	r2, #10
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	f000 f9c3 	bl	800c106 <__multadd>
 800bd80:	9b02      	ldr	r3, [sp, #8]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	4606      	mov	r6, r0
 800bd86:	dc4f      	bgt.n	800be28 <_dtoa_r+0x948>
 800bd88:	9b06      	ldr	r3, [sp, #24]
 800bd8a:	2b02      	cmp	r3, #2
 800bd8c:	dd4c      	ble.n	800be28 <_dtoa_r+0x948>
 800bd8e:	e011      	b.n	800bdb4 <_dtoa_r+0x8d4>
 800bd90:	d0c9      	beq.n	800bd26 <_dtoa_r+0x846>
 800bd92:	9a05      	ldr	r2, [sp, #20]
 800bd94:	331c      	adds	r3, #28
 800bd96:	441a      	add	r2, r3
 800bd98:	9205      	str	r2, [sp, #20]
 800bd9a:	441d      	add	r5, r3
 800bd9c:	4498      	add	r8, r3
 800bd9e:	e7c2      	b.n	800bd26 <_dtoa_r+0x846>
 800bda0:	4603      	mov	r3, r0
 800bda2:	e7f6      	b.n	800bd92 <_dtoa_r+0x8b2>
 800bda4:	f1b9 0f00 	cmp.w	r9, #0
 800bda8:	dc38      	bgt.n	800be1c <_dtoa_r+0x93c>
 800bdaa:	9b06      	ldr	r3, [sp, #24]
 800bdac:	2b02      	cmp	r3, #2
 800bdae:	dd35      	ble.n	800be1c <_dtoa_r+0x93c>
 800bdb0:	f8cd 9008 	str.w	r9, [sp, #8]
 800bdb4:	9b02      	ldr	r3, [sp, #8]
 800bdb6:	b963      	cbnz	r3, 800bdd2 <_dtoa_r+0x8f2>
 800bdb8:	4639      	mov	r1, r7
 800bdba:	2205      	movs	r2, #5
 800bdbc:	4620      	mov	r0, r4
 800bdbe:	f000 f9a2 	bl	800c106 <__multadd>
 800bdc2:	4601      	mov	r1, r0
 800bdc4:	4607      	mov	r7, r0
 800bdc6:	9804      	ldr	r0, [sp, #16]
 800bdc8:	f000 fb68 	bl	800c49c <__mcmp>
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	f73f adcc 	bgt.w	800b96a <_dtoa_r+0x48a>
 800bdd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdd4:	465d      	mov	r5, fp
 800bdd6:	ea6f 0a03 	mvn.w	sl, r3
 800bdda:	f04f 0900 	mov.w	r9, #0
 800bdde:	4639      	mov	r1, r7
 800bde0:	4620      	mov	r0, r4
 800bde2:	f000 f979 	bl	800c0d8 <_Bfree>
 800bde6:	2e00      	cmp	r6, #0
 800bde8:	f43f aeb7 	beq.w	800bb5a <_dtoa_r+0x67a>
 800bdec:	f1b9 0f00 	cmp.w	r9, #0
 800bdf0:	d005      	beq.n	800bdfe <_dtoa_r+0x91e>
 800bdf2:	45b1      	cmp	r9, r6
 800bdf4:	d003      	beq.n	800bdfe <_dtoa_r+0x91e>
 800bdf6:	4649      	mov	r1, r9
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	f000 f96d 	bl	800c0d8 <_Bfree>
 800bdfe:	4631      	mov	r1, r6
 800be00:	4620      	mov	r0, r4
 800be02:	f000 f969 	bl	800c0d8 <_Bfree>
 800be06:	e6a8      	b.n	800bb5a <_dtoa_r+0x67a>
 800be08:	2700      	movs	r7, #0
 800be0a:	463e      	mov	r6, r7
 800be0c:	e7e1      	b.n	800bdd2 <_dtoa_r+0x8f2>
 800be0e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800be12:	463e      	mov	r6, r7
 800be14:	e5a9      	b.n	800b96a <_dtoa_r+0x48a>
 800be16:	bf00      	nop
 800be18:	40240000 	.word	0x40240000
 800be1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be1e:	f8cd 9008 	str.w	r9, [sp, #8]
 800be22:	2b00      	cmp	r3, #0
 800be24:	f000 80fa 	beq.w	800c01c <_dtoa_r+0xb3c>
 800be28:	2d00      	cmp	r5, #0
 800be2a:	dd05      	ble.n	800be38 <_dtoa_r+0x958>
 800be2c:	4631      	mov	r1, r6
 800be2e:	462a      	mov	r2, r5
 800be30:	4620      	mov	r0, r4
 800be32:	f000 fadf 	bl	800c3f4 <__lshift>
 800be36:	4606      	mov	r6, r0
 800be38:	9b07      	ldr	r3, [sp, #28]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d04c      	beq.n	800bed8 <_dtoa_r+0x9f8>
 800be3e:	6871      	ldr	r1, [r6, #4]
 800be40:	4620      	mov	r0, r4
 800be42:	f000 f915 	bl	800c070 <_Balloc>
 800be46:	6932      	ldr	r2, [r6, #16]
 800be48:	3202      	adds	r2, #2
 800be4a:	4605      	mov	r5, r0
 800be4c:	0092      	lsls	r2, r2, #2
 800be4e:	f106 010c 	add.w	r1, r6, #12
 800be52:	300c      	adds	r0, #12
 800be54:	f7fe fcfa 	bl	800a84c <memcpy>
 800be58:	2201      	movs	r2, #1
 800be5a:	4629      	mov	r1, r5
 800be5c:	4620      	mov	r0, r4
 800be5e:	f000 fac9 	bl	800c3f4 <__lshift>
 800be62:	9b00      	ldr	r3, [sp, #0]
 800be64:	f8cd b014 	str.w	fp, [sp, #20]
 800be68:	f003 0301 	and.w	r3, r3, #1
 800be6c:	46b1      	mov	r9, r6
 800be6e:	9307      	str	r3, [sp, #28]
 800be70:	4606      	mov	r6, r0
 800be72:	4639      	mov	r1, r7
 800be74:	9804      	ldr	r0, [sp, #16]
 800be76:	f7ff faa7 	bl	800b3c8 <quorem>
 800be7a:	4649      	mov	r1, r9
 800be7c:	4605      	mov	r5, r0
 800be7e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800be82:	9804      	ldr	r0, [sp, #16]
 800be84:	f000 fb0a 	bl	800c49c <__mcmp>
 800be88:	4632      	mov	r2, r6
 800be8a:	9000      	str	r0, [sp, #0]
 800be8c:	4639      	mov	r1, r7
 800be8e:	4620      	mov	r0, r4
 800be90:	f000 fb1e 	bl	800c4d0 <__mdiff>
 800be94:	68c3      	ldr	r3, [r0, #12]
 800be96:	4602      	mov	r2, r0
 800be98:	bb03      	cbnz	r3, 800bedc <_dtoa_r+0x9fc>
 800be9a:	4601      	mov	r1, r0
 800be9c:	9008      	str	r0, [sp, #32]
 800be9e:	9804      	ldr	r0, [sp, #16]
 800bea0:	f000 fafc 	bl	800c49c <__mcmp>
 800bea4:	9a08      	ldr	r2, [sp, #32]
 800bea6:	4603      	mov	r3, r0
 800bea8:	4611      	mov	r1, r2
 800beaa:	4620      	mov	r0, r4
 800beac:	9308      	str	r3, [sp, #32]
 800beae:	f000 f913 	bl	800c0d8 <_Bfree>
 800beb2:	9b08      	ldr	r3, [sp, #32]
 800beb4:	b9a3      	cbnz	r3, 800bee0 <_dtoa_r+0xa00>
 800beb6:	9a06      	ldr	r2, [sp, #24]
 800beb8:	b992      	cbnz	r2, 800bee0 <_dtoa_r+0xa00>
 800beba:	9a07      	ldr	r2, [sp, #28]
 800bebc:	b982      	cbnz	r2, 800bee0 <_dtoa_r+0xa00>
 800bebe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bec2:	d029      	beq.n	800bf18 <_dtoa_r+0xa38>
 800bec4:	9b00      	ldr	r3, [sp, #0]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	dd01      	ble.n	800bece <_dtoa_r+0x9ee>
 800beca:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800bece:	9b05      	ldr	r3, [sp, #20]
 800bed0:	1c5d      	adds	r5, r3, #1
 800bed2:	f883 8000 	strb.w	r8, [r3]
 800bed6:	e782      	b.n	800bdde <_dtoa_r+0x8fe>
 800bed8:	4630      	mov	r0, r6
 800beda:	e7c2      	b.n	800be62 <_dtoa_r+0x982>
 800bedc:	2301      	movs	r3, #1
 800bede:	e7e3      	b.n	800bea8 <_dtoa_r+0x9c8>
 800bee0:	9a00      	ldr	r2, [sp, #0]
 800bee2:	2a00      	cmp	r2, #0
 800bee4:	db04      	blt.n	800bef0 <_dtoa_r+0xa10>
 800bee6:	d125      	bne.n	800bf34 <_dtoa_r+0xa54>
 800bee8:	9a06      	ldr	r2, [sp, #24]
 800beea:	bb1a      	cbnz	r2, 800bf34 <_dtoa_r+0xa54>
 800beec:	9a07      	ldr	r2, [sp, #28]
 800beee:	bb0a      	cbnz	r2, 800bf34 <_dtoa_r+0xa54>
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	ddec      	ble.n	800bece <_dtoa_r+0x9ee>
 800bef4:	2201      	movs	r2, #1
 800bef6:	9904      	ldr	r1, [sp, #16]
 800bef8:	4620      	mov	r0, r4
 800befa:	f000 fa7b 	bl	800c3f4 <__lshift>
 800befe:	4639      	mov	r1, r7
 800bf00:	9004      	str	r0, [sp, #16]
 800bf02:	f000 facb 	bl	800c49c <__mcmp>
 800bf06:	2800      	cmp	r0, #0
 800bf08:	dc03      	bgt.n	800bf12 <_dtoa_r+0xa32>
 800bf0a:	d1e0      	bne.n	800bece <_dtoa_r+0x9ee>
 800bf0c:	f018 0f01 	tst.w	r8, #1
 800bf10:	d0dd      	beq.n	800bece <_dtoa_r+0x9ee>
 800bf12:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bf16:	d1d8      	bne.n	800beca <_dtoa_r+0x9ea>
 800bf18:	9b05      	ldr	r3, [sp, #20]
 800bf1a:	9a05      	ldr	r2, [sp, #20]
 800bf1c:	1c5d      	adds	r5, r3, #1
 800bf1e:	2339      	movs	r3, #57	; 0x39
 800bf20:	7013      	strb	r3, [r2, #0]
 800bf22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bf26:	2b39      	cmp	r3, #57	; 0x39
 800bf28:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800bf2c:	d04f      	beq.n	800bfce <_dtoa_r+0xaee>
 800bf2e:	3301      	adds	r3, #1
 800bf30:	7013      	strb	r3, [r2, #0]
 800bf32:	e754      	b.n	800bdde <_dtoa_r+0x8fe>
 800bf34:	9a05      	ldr	r2, [sp, #20]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	f102 0501 	add.w	r5, r2, #1
 800bf3c:	dd06      	ble.n	800bf4c <_dtoa_r+0xa6c>
 800bf3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bf42:	d0e9      	beq.n	800bf18 <_dtoa_r+0xa38>
 800bf44:	f108 0801 	add.w	r8, r8, #1
 800bf48:	9b05      	ldr	r3, [sp, #20]
 800bf4a:	e7c2      	b.n	800bed2 <_dtoa_r+0x9f2>
 800bf4c:	9a02      	ldr	r2, [sp, #8]
 800bf4e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800bf52:	eba5 030b 	sub.w	r3, r5, fp
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d021      	beq.n	800bf9e <_dtoa_r+0xabe>
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	220a      	movs	r2, #10
 800bf5e:	9904      	ldr	r1, [sp, #16]
 800bf60:	4620      	mov	r0, r4
 800bf62:	f000 f8d0 	bl	800c106 <__multadd>
 800bf66:	45b1      	cmp	r9, r6
 800bf68:	9004      	str	r0, [sp, #16]
 800bf6a:	f04f 0300 	mov.w	r3, #0
 800bf6e:	f04f 020a 	mov.w	r2, #10
 800bf72:	4649      	mov	r1, r9
 800bf74:	4620      	mov	r0, r4
 800bf76:	d105      	bne.n	800bf84 <_dtoa_r+0xaa4>
 800bf78:	f000 f8c5 	bl	800c106 <__multadd>
 800bf7c:	4681      	mov	r9, r0
 800bf7e:	4606      	mov	r6, r0
 800bf80:	9505      	str	r5, [sp, #20]
 800bf82:	e776      	b.n	800be72 <_dtoa_r+0x992>
 800bf84:	f000 f8bf 	bl	800c106 <__multadd>
 800bf88:	4631      	mov	r1, r6
 800bf8a:	4681      	mov	r9, r0
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	220a      	movs	r2, #10
 800bf90:	4620      	mov	r0, r4
 800bf92:	f000 f8b8 	bl	800c106 <__multadd>
 800bf96:	4606      	mov	r6, r0
 800bf98:	e7f2      	b.n	800bf80 <_dtoa_r+0xaa0>
 800bf9a:	f04f 0900 	mov.w	r9, #0
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	9904      	ldr	r1, [sp, #16]
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	f000 fa26 	bl	800c3f4 <__lshift>
 800bfa8:	4639      	mov	r1, r7
 800bfaa:	9004      	str	r0, [sp, #16]
 800bfac:	f000 fa76 	bl	800c49c <__mcmp>
 800bfb0:	2800      	cmp	r0, #0
 800bfb2:	dcb6      	bgt.n	800bf22 <_dtoa_r+0xa42>
 800bfb4:	d102      	bne.n	800bfbc <_dtoa_r+0xadc>
 800bfb6:	f018 0f01 	tst.w	r8, #1
 800bfba:	d1b2      	bne.n	800bf22 <_dtoa_r+0xa42>
 800bfbc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bfc0:	2b30      	cmp	r3, #48	; 0x30
 800bfc2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800bfc6:	f47f af0a 	bne.w	800bdde <_dtoa_r+0x8fe>
 800bfca:	4615      	mov	r5, r2
 800bfcc:	e7f6      	b.n	800bfbc <_dtoa_r+0xadc>
 800bfce:	4593      	cmp	fp, r2
 800bfd0:	d105      	bne.n	800bfde <_dtoa_r+0xafe>
 800bfd2:	2331      	movs	r3, #49	; 0x31
 800bfd4:	f10a 0a01 	add.w	sl, sl, #1
 800bfd8:	f88b 3000 	strb.w	r3, [fp]
 800bfdc:	e6ff      	b.n	800bdde <_dtoa_r+0x8fe>
 800bfde:	4615      	mov	r5, r2
 800bfe0:	e79f      	b.n	800bf22 <_dtoa_r+0xa42>
 800bfe2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c048 <_dtoa_r+0xb68>
 800bfe6:	e007      	b.n	800bff8 <_dtoa_r+0xb18>
 800bfe8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfea:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c04c <_dtoa_r+0xb6c>
 800bfee:	b11b      	cbz	r3, 800bff8 <_dtoa_r+0xb18>
 800bff0:	f10b 0308 	add.w	r3, fp, #8
 800bff4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bff6:	6013      	str	r3, [r2, #0]
 800bff8:	4658      	mov	r0, fp
 800bffa:	b017      	add	sp, #92	; 0x5c
 800bffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c000:	9b06      	ldr	r3, [sp, #24]
 800c002:	2b01      	cmp	r3, #1
 800c004:	f77f ae35 	ble.w	800bc72 <_dtoa_r+0x792>
 800c008:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c00a:	9307      	str	r3, [sp, #28]
 800c00c:	e649      	b.n	800bca2 <_dtoa_r+0x7c2>
 800c00e:	9b02      	ldr	r3, [sp, #8]
 800c010:	2b00      	cmp	r3, #0
 800c012:	dc03      	bgt.n	800c01c <_dtoa_r+0xb3c>
 800c014:	9b06      	ldr	r3, [sp, #24]
 800c016:	2b02      	cmp	r3, #2
 800c018:	f73f aecc 	bgt.w	800bdb4 <_dtoa_r+0x8d4>
 800c01c:	465d      	mov	r5, fp
 800c01e:	4639      	mov	r1, r7
 800c020:	9804      	ldr	r0, [sp, #16]
 800c022:	f7ff f9d1 	bl	800b3c8 <quorem>
 800c026:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c02a:	f805 8b01 	strb.w	r8, [r5], #1
 800c02e:	9a02      	ldr	r2, [sp, #8]
 800c030:	eba5 030b 	sub.w	r3, r5, fp
 800c034:	429a      	cmp	r2, r3
 800c036:	ddb0      	ble.n	800bf9a <_dtoa_r+0xaba>
 800c038:	2300      	movs	r3, #0
 800c03a:	220a      	movs	r2, #10
 800c03c:	9904      	ldr	r1, [sp, #16]
 800c03e:	4620      	mov	r0, r4
 800c040:	f000 f861 	bl	800c106 <__multadd>
 800c044:	9004      	str	r0, [sp, #16]
 800c046:	e7ea      	b.n	800c01e <_dtoa_r+0xb3e>
 800c048:	0800cd40 	.word	0x0800cd40
 800c04c:	0800cd64 	.word	0x0800cd64

0800c050 <_localeconv_r>:
 800c050:	4b04      	ldr	r3, [pc, #16]	; (800c064 <_localeconv_r+0x14>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	6a18      	ldr	r0, [r3, #32]
 800c056:	4b04      	ldr	r3, [pc, #16]	; (800c068 <_localeconv_r+0x18>)
 800c058:	2800      	cmp	r0, #0
 800c05a:	bf08      	it	eq
 800c05c:	4618      	moveq	r0, r3
 800c05e:	30f0      	adds	r0, #240	; 0xf0
 800c060:	4770      	bx	lr
 800c062:	bf00      	nop
 800c064:	2000000c 	.word	0x2000000c
 800c068:	20000070 	.word	0x20000070

0800c06c <__malloc_lock>:
 800c06c:	4770      	bx	lr

0800c06e <__malloc_unlock>:
 800c06e:	4770      	bx	lr

0800c070 <_Balloc>:
 800c070:	b570      	push	{r4, r5, r6, lr}
 800c072:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c074:	4604      	mov	r4, r0
 800c076:	460e      	mov	r6, r1
 800c078:	b93d      	cbnz	r5, 800c08a <_Balloc+0x1a>
 800c07a:	2010      	movs	r0, #16
 800c07c:	f7fe fbd6 	bl	800a82c <malloc>
 800c080:	6260      	str	r0, [r4, #36]	; 0x24
 800c082:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c086:	6005      	str	r5, [r0, #0]
 800c088:	60c5      	str	r5, [r0, #12]
 800c08a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c08c:	68eb      	ldr	r3, [r5, #12]
 800c08e:	b183      	cbz	r3, 800c0b2 <_Balloc+0x42>
 800c090:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c092:	68db      	ldr	r3, [r3, #12]
 800c094:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c098:	b9b8      	cbnz	r0, 800c0ca <_Balloc+0x5a>
 800c09a:	2101      	movs	r1, #1
 800c09c:	fa01 f506 	lsl.w	r5, r1, r6
 800c0a0:	1d6a      	adds	r2, r5, #5
 800c0a2:	0092      	lsls	r2, r2, #2
 800c0a4:	4620      	mov	r0, r4
 800c0a6:	f000 fabf 	bl	800c628 <_calloc_r>
 800c0aa:	b160      	cbz	r0, 800c0c6 <_Balloc+0x56>
 800c0ac:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c0b0:	e00e      	b.n	800c0d0 <_Balloc+0x60>
 800c0b2:	2221      	movs	r2, #33	; 0x21
 800c0b4:	2104      	movs	r1, #4
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	f000 fab6 	bl	800c628 <_calloc_r>
 800c0bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0be:	60e8      	str	r0, [r5, #12]
 800c0c0:	68db      	ldr	r3, [r3, #12]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d1e4      	bne.n	800c090 <_Balloc+0x20>
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	bd70      	pop	{r4, r5, r6, pc}
 800c0ca:	6802      	ldr	r2, [r0, #0]
 800c0cc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c0d6:	e7f7      	b.n	800c0c8 <_Balloc+0x58>

0800c0d8 <_Bfree>:
 800c0d8:	b570      	push	{r4, r5, r6, lr}
 800c0da:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c0dc:	4606      	mov	r6, r0
 800c0de:	460d      	mov	r5, r1
 800c0e0:	b93c      	cbnz	r4, 800c0f2 <_Bfree+0x1a>
 800c0e2:	2010      	movs	r0, #16
 800c0e4:	f7fe fba2 	bl	800a82c <malloc>
 800c0e8:	6270      	str	r0, [r6, #36]	; 0x24
 800c0ea:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c0ee:	6004      	str	r4, [r0, #0]
 800c0f0:	60c4      	str	r4, [r0, #12]
 800c0f2:	b13d      	cbz	r5, 800c104 <_Bfree+0x2c>
 800c0f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c0f6:	686a      	ldr	r2, [r5, #4]
 800c0f8:	68db      	ldr	r3, [r3, #12]
 800c0fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c0fe:	6029      	str	r1, [r5, #0]
 800c100:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c104:	bd70      	pop	{r4, r5, r6, pc}

0800c106 <__multadd>:
 800c106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c10a:	690d      	ldr	r5, [r1, #16]
 800c10c:	461f      	mov	r7, r3
 800c10e:	4606      	mov	r6, r0
 800c110:	460c      	mov	r4, r1
 800c112:	f101 0c14 	add.w	ip, r1, #20
 800c116:	2300      	movs	r3, #0
 800c118:	f8dc 0000 	ldr.w	r0, [ip]
 800c11c:	b281      	uxth	r1, r0
 800c11e:	fb02 7101 	mla	r1, r2, r1, r7
 800c122:	0c0f      	lsrs	r7, r1, #16
 800c124:	0c00      	lsrs	r0, r0, #16
 800c126:	fb02 7000 	mla	r0, r2, r0, r7
 800c12a:	b289      	uxth	r1, r1
 800c12c:	3301      	adds	r3, #1
 800c12e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c132:	429d      	cmp	r5, r3
 800c134:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c138:	f84c 1b04 	str.w	r1, [ip], #4
 800c13c:	dcec      	bgt.n	800c118 <__multadd+0x12>
 800c13e:	b1d7      	cbz	r7, 800c176 <__multadd+0x70>
 800c140:	68a3      	ldr	r3, [r4, #8]
 800c142:	42ab      	cmp	r3, r5
 800c144:	dc12      	bgt.n	800c16c <__multadd+0x66>
 800c146:	6861      	ldr	r1, [r4, #4]
 800c148:	4630      	mov	r0, r6
 800c14a:	3101      	adds	r1, #1
 800c14c:	f7ff ff90 	bl	800c070 <_Balloc>
 800c150:	6922      	ldr	r2, [r4, #16]
 800c152:	3202      	adds	r2, #2
 800c154:	f104 010c 	add.w	r1, r4, #12
 800c158:	4680      	mov	r8, r0
 800c15a:	0092      	lsls	r2, r2, #2
 800c15c:	300c      	adds	r0, #12
 800c15e:	f7fe fb75 	bl	800a84c <memcpy>
 800c162:	4621      	mov	r1, r4
 800c164:	4630      	mov	r0, r6
 800c166:	f7ff ffb7 	bl	800c0d8 <_Bfree>
 800c16a:	4644      	mov	r4, r8
 800c16c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c170:	3501      	adds	r5, #1
 800c172:	615f      	str	r7, [r3, #20]
 800c174:	6125      	str	r5, [r4, #16]
 800c176:	4620      	mov	r0, r4
 800c178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c17c <__hi0bits>:
 800c17c:	0c02      	lsrs	r2, r0, #16
 800c17e:	0412      	lsls	r2, r2, #16
 800c180:	4603      	mov	r3, r0
 800c182:	b9b2      	cbnz	r2, 800c1b2 <__hi0bits+0x36>
 800c184:	0403      	lsls	r3, r0, #16
 800c186:	2010      	movs	r0, #16
 800c188:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c18c:	bf04      	itt	eq
 800c18e:	021b      	lsleq	r3, r3, #8
 800c190:	3008      	addeq	r0, #8
 800c192:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c196:	bf04      	itt	eq
 800c198:	011b      	lsleq	r3, r3, #4
 800c19a:	3004      	addeq	r0, #4
 800c19c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c1a0:	bf04      	itt	eq
 800c1a2:	009b      	lsleq	r3, r3, #2
 800c1a4:	3002      	addeq	r0, #2
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	db06      	blt.n	800c1b8 <__hi0bits+0x3c>
 800c1aa:	005b      	lsls	r3, r3, #1
 800c1ac:	d503      	bpl.n	800c1b6 <__hi0bits+0x3a>
 800c1ae:	3001      	adds	r0, #1
 800c1b0:	4770      	bx	lr
 800c1b2:	2000      	movs	r0, #0
 800c1b4:	e7e8      	b.n	800c188 <__hi0bits+0xc>
 800c1b6:	2020      	movs	r0, #32
 800c1b8:	4770      	bx	lr

0800c1ba <__lo0bits>:
 800c1ba:	6803      	ldr	r3, [r0, #0]
 800c1bc:	f013 0207 	ands.w	r2, r3, #7
 800c1c0:	4601      	mov	r1, r0
 800c1c2:	d00b      	beq.n	800c1dc <__lo0bits+0x22>
 800c1c4:	07da      	lsls	r2, r3, #31
 800c1c6:	d423      	bmi.n	800c210 <__lo0bits+0x56>
 800c1c8:	0798      	lsls	r0, r3, #30
 800c1ca:	bf49      	itett	mi
 800c1cc:	085b      	lsrmi	r3, r3, #1
 800c1ce:	089b      	lsrpl	r3, r3, #2
 800c1d0:	2001      	movmi	r0, #1
 800c1d2:	600b      	strmi	r3, [r1, #0]
 800c1d4:	bf5c      	itt	pl
 800c1d6:	600b      	strpl	r3, [r1, #0]
 800c1d8:	2002      	movpl	r0, #2
 800c1da:	4770      	bx	lr
 800c1dc:	b298      	uxth	r0, r3
 800c1de:	b9a8      	cbnz	r0, 800c20c <__lo0bits+0x52>
 800c1e0:	0c1b      	lsrs	r3, r3, #16
 800c1e2:	2010      	movs	r0, #16
 800c1e4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c1e8:	bf04      	itt	eq
 800c1ea:	0a1b      	lsreq	r3, r3, #8
 800c1ec:	3008      	addeq	r0, #8
 800c1ee:	071a      	lsls	r2, r3, #28
 800c1f0:	bf04      	itt	eq
 800c1f2:	091b      	lsreq	r3, r3, #4
 800c1f4:	3004      	addeq	r0, #4
 800c1f6:	079a      	lsls	r2, r3, #30
 800c1f8:	bf04      	itt	eq
 800c1fa:	089b      	lsreq	r3, r3, #2
 800c1fc:	3002      	addeq	r0, #2
 800c1fe:	07da      	lsls	r2, r3, #31
 800c200:	d402      	bmi.n	800c208 <__lo0bits+0x4e>
 800c202:	085b      	lsrs	r3, r3, #1
 800c204:	d006      	beq.n	800c214 <__lo0bits+0x5a>
 800c206:	3001      	adds	r0, #1
 800c208:	600b      	str	r3, [r1, #0]
 800c20a:	4770      	bx	lr
 800c20c:	4610      	mov	r0, r2
 800c20e:	e7e9      	b.n	800c1e4 <__lo0bits+0x2a>
 800c210:	2000      	movs	r0, #0
 800c212:	4770      	bx	lr
 800c214:	2020      	movs	r0, #32
 800c216:	4770      	bx	lr

0800c218 <__i2b>:
 800c218:	b510      	push	{r4, lr}
 800c21a:	460c      	mov	r4, r1
 800c21c:	2101      	movs	r1, #1
 800c21e:	f7ff ff27 	bl	800c070 <_Balloc>
 800c222:	2201      	movs	r2, #1
 800c224:	6144      	str	r4, [r0, #20]
 800c226:	6102      	str	r2, [r0, #16]
 800c228:	bd10      	pop	{r4, pc}

0800c22a <__multiply>:
 800c22a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c22e:	4614      	mov	r4, r2
 800c230:	690a      	ldr	r2, [r1, #16]
 800c232:	6923      	ldr	r3, [r4, #16]
 800c234:	429a      	cmp	r2, r3
 800c236:	bfb8      	it	lt
 800c238:	460b      	movlt	r3, r1
 800c23a:	4688      	mov	r8, r1
 800c23c:	bfbc      	itt	lt
 800c23e:	46a0      	movlt	r8, r4
 800c240:	461c      	movlt	r4, r3
 800c242:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c246:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c24a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c24e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c252:	eb07 0609 	add.w	r6, r7, r9
 800c256:	42b3      	cmp	r3, r6
 800c258:	bfb8      	it	lt
 800c25a:	3101      	addlt	r1, #1
 800c25c:	f7ff ff08 	bl	800c070 <_Balloc>
 800c260:	f100 0514 	add.w	r5, r0, #20
 800c264:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c268:	462b      	mov	r3, r5
 800c26a:	2200      	movs	r2, #0
 800c26c:	4573      	cmp	r3, lr
 800c26e:	d316      	bcc.n	800c29e <__multiply+0x74>
 800c270:	f104 0214 	add.w	r2, r4, #20
 800c274:	f108 0114 	add.w	r1, r8, #20
 800c278:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c27c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	9b00      	ldr	r3, [sp, #0]
 800c284:	9201      	str	r2, [sp, #4]
 800c286:	4293      	cmp	r3, r2
 800c288:	d80c      	bhi.n	800c2a4 <__multiply+0x7a>
 800c28a:	2e00      	cmp	r6, #0
 800c28c:	dd03      	ble.n	800c296 <__multiply+0x6c>
 800c28e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c292:	2b00      	cmp	r3, #0
 800c294:	d05d      	beq.n	800c352 <__multiply+0x128>
 800c296:	6106      	str	r6, [r0, #16]
 800c298:	b003      	add	sp, #12
 800c29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c29e:	f843 2b04 	str.w	r2, [r3], #4
 800c2a2:	e7e3      	b.n	800c26c <__multiply+0x42>
 800c2a4:	f8b2 b000 	ldrh.w	fp, [r2]
 800c2a8:	f1bb 0f00 	cmp.w	fp, #0
 800c2ac:	d023      	beq.n	800c2f6 <__multiply+0xcc>
 800c2ae:	4689      	mov	r9, r1
 800c2b0:	46ac      	mov	ip, r5
 800c2b2:	f04f 0800 	mov.w	r8, #0
 800c2b6:	f859 4b04 	ldr.w	r4, [r9], #4
 800c2ba:	f8dc a000 	ldr.w	sl, [ip]
 800c2be:	b2a3      	uxth	r3, r4
 800c2c0:	fa1f fa8a 	uxth.w	sl, sl
 800c2c4:	fb0b a303 	mla	r3, fp, r3, sl
 800c2c8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c2cc:	f8dc 4000 	ldr.w	r4, [ip]
 800c2d0:	4443      	add	r3, r8
 800c2d2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c2d6:	fb0b 840a 	mla	r4, fp, sl, r8
 800c2da:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c2de:	46e2      	mov	sl, ip
 800c2e0:	b29b      	uxth	r3, r3
 800c2e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c2e6:	454f      	cmp	r7, r9
 800c2e8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c2ec:	f84a 3b04 	str.w	r3, [sl], #4
 800c2f0:	d82b      	bhi.n	800c34a <__multiply+0x120>
 800c2f2:	f8cc 8004 	str.w	r8, [ip, #4]
 800c2f6:	9b01      	ldr	r3, [sp, #4]
 800c2f8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c2fc:	3204      	adds	r2, #4
 800c2fe:	f1ba 0f00 	cmp.w	sl, #0
 800c302:	d020      	beq.n	800c346 <__multiply+0x11c>
 800c304:	682b      	ldr	r3, [r5, #0]
 800c306:	4689      	mov	r9, r1
 800c308:	46a8      	mov	r8, r5
 800c30a:	f04f 0b00 	mov.w	fp, #0
 800c30e:	f8b9 c000 	ldrh.w	ip, [r9]
 800c312:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c316:	fb0a 440c 	mla	r4, sl, ip, r4
 800c31a:	445c      	add	r4, fp
 800c31c:	46c4      	mov	ip, r8
 800c31e:	b29b      	uxth	r3, r3
 800c320:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c324:	f84c 3b04 	str.w	r3, [ip], #4
 800c328:	f859 3b04 	ldr.w	r3, [r9], #4
 800c32c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c330:	0c1b      	lsrs	r3, r3, #16
 800c332:	fb0a b303 	mla	r3, sl, r3, fp
 800c336:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c33a:	454f      	cmp	r7, r9
 800c33c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c340:	d805      	bhi.n	800c34e <__multiply+0x124>
 800c342:	f8c8 3004 	str.w	r3, [r8, #4]
 800c346:	3504      	adds	r5, #4
 800c348:	e79b      	b.n	800c282 <__multiply+0x58>
 800c34a:	46d4      	mov	ip, sl
 800c34c:	e7b3      	b.n	800c2b6 <__multiply+0x8c>
 800c34e:	46e0      	mov	r8, ip
 800c350:	e7dd      	b.n	800c30e <__multiply+0xe4>
 800c352:	3e01      	subs	r6, #1
 800c354:	e799      	b.n	800c28a <__multiply+0x60>
	...

0800c358 <__pow5mult>:
 800c358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c35c:	4615      	mov	r5, r2
 800c35e:	f012 0203 	ands.w	r2, r2, #3
 800c362:	4606      	mov	r6, r0
 800c364:	460f      	mov	r7, r1
 800c366:	d007      	beq.n	800c378 <__pow5mult+0x20>
 800c368:	3a01      	subs	r2, #1
 800c36a:	4c21      	ldr	r4, [pc, #132]	; (800c3f0 <__pow5mult+0x98>)
 800c36c:	2300      	movs	r3, #0
 800c36e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c372:	f7ff fec8 	bl	800c106 <__multadd>
 800c376:	4607      	mov	r7, r0
 800c378:	10ad      	asrs	r5, r5, #2
 800c37a:	d035      	beq.n	800c3e8 <__pow5mult+0x90>
 800c37c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c37e:	b93c      	cbnz	r4, 800c390 <__pow5mult+0x38>
 800c380:	2010      	movs	r0, #16
 800c382:	f7fe fa53 	bl	800a82c <malloc>
 800c386:	6270      	str	r0, [r6, #36]	; 0x24
 800c388:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c38c:	6004      	str	r4, [r0, #0]
 800c38e:	60c4      	str	r4, [r0, #12]
 800c390:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c394:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c398:	b94c      	cbnz	r4, 800c3ae <__pow5mult+0x56>
 800c39a:	f240 2171 	movw	r1, #625	; 0x271
 800c39e:	4630      	mov	r0, r6
 800c3a0:	f7ff ff3a 	bl	800c218 <__i2b>
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c3aa:	4604      	mov	r4, r0
 800c3ac:	6003      	str	r3, [r0, #0]
 800c3ae:	f04f 0800 	mov.w	r8, #0
 800c3b2:	07eb      	lsls	r3, r5, #31
 800c3b4:	d50a      	bpl.n	800c3cc <__pow5mult+0x74>
 800c3b6:	4639      	mov	r1, r7
 800c3b8:	4622      	mov	r2, r4
 800c3ba:	4630      	mov	r0, r6
 800c3bc:	f7ff ff35 	bl	800c22a <__multiply>
 800c3c0:	4639      	mov	r1, r7
 800c3c2:	4681      	mov	r9, r0
 800c3c4:	4630      	mov	r0, r6
 800c3c6:	f7ff fe87 	bl	800c0d8 <_Bfree>
 800c3ca:	464f      	mov	r7, r9
 800c3cc:	106d      	asrs	r5, r5, #1
 800c3ce:	d00b      	beq.n	800c3e8 <__pow5mult+0x90>
 800c3d0:	6820      	ldr	r0, [r4, #0]
 800c3d2:	b938      	cbnz	r0, 800c3e4 <__pow5mult+0x8c>
 800c3d4:	4622      	mov	r2, r4
 800c3d6:	4621      	mov	r1, r4
 800c3d8:	4630      	mov	r0, r6
 800c3da:	f7ff ff26 	bl	800c22a <__multiply>
 800c3de:	6020      	str	r0, [r4, #0]
 800c3e0:	f8c0 8000 	str.w	r8, [r0]
 800c3e4:	4604      	mov	r4, r0
 800c3e6:	e7e4      	b.n	800c3b2 <__pow5mult+0x5a>
 800c3e8:	4638      	mov	r0, r7
 800c3ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3ee:	bf00      	nop
 800c3f0:	0800ce68 	.word	0x0800ce68

0800c3f4 <__lshift>:
 800c3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3f8:	460c      	mov	r4, r1
 800c3fa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c3fe:	6923      	ldr	r3, [r4, #16]
 800c400:	6849      	ldr	r1, [r1, #4]
 800c402:	eb0a 0903 	add.w	r9, sl, r3
 800c406:	68a3      	ldr	r3, [r4, #8]
 800c408:	4607      	mov	r7, r0
 800c40a:	4616      	mov	r6, r2
 800c40c:	f109 0501 	add.w	r5, r9, #1
 800c410:	42ab      	cmp	r3, r5
 800c412:	db32      	blt.n	800c47a <__lshift+0x86>
 800c414:	4638      	mov	r0, r7
 800c416:	f7ff fe2b 	bl	800c070 <_Balloc>
 800c41a:	2300      	movs	r3, #0
 800c41c:	4680      	mov	r8, r0
 800c41e:	f100 0114 	add.w	r1, r0, #20
 800c422:	461a      	mov	r2, r3
 800c424:	4553      	cmp	r3, sl
 800c426:	db2b      	blt.n	800c480 <__lshift+0x8c>
 800c428:	6920      	ldr	r0, [r4, #16]
 800c42a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c42e:	f104 0314 	add.w	r3, r4, #20
 800c432:	f016 021f 	ands.w	r2, r6, #31
 800c436:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c43a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c43e:	d025      	beq.n	800c48c <__lshift+0x98>
 800c440:	f1c2 0e20 	rsb	lr, r2, #32
 800c444:	2000      	movs	r0, #0
 800c446:	681e      	ldr	r6, [r3, #0]
 800c448:	468a      	mov	sl, r1
 800c44a:	4096      	lsls	r6, r2
 800c44c:	4330      	orrs	r0, r6
 800c44e:	f84a 0b04 	str.w	r0, [sl], #4
 800c452:	f853 0b04 	ldr.w	r0, [r3], #4
 800c456:	459c      	cmp	ip, r3
 800c458:	fa20 f00e 	lsr.w	r0, r0, lr
 800c45c:	d814      	bhi.n	800c488 <__lshift+0x94>
 800c45e:	6048      	str	r0, [r1, #4]
 800c460:	b108      	cbz	r0, 800c466 <__lshift+0x72>
 800c462:	f109 0502 	add.w	r5, r9, #2
 800c466:	3d01      	subs	r5, #1
 800c468:	4638      	mov	r0, r7
 800c46a:	f8c8 5010 	str.w	r5, [r8, #16]
 800c46e:	4621      	mov	r1, r4
 800c470:	f7ff fe32 	bl	800c0d8 <_Bfree>
 800c474:	4640      	mov	r0, r8
 800c476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c47a:	3101      	adds	r1, #1
 800c47c:	005b      	lsls	r3, r3, #1
 800c47e:	e7c7      	b.n	800c410 <__lshift+0x1c>
 800c480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c484:	3301      	adds	r3, #1
 800c486:	e7cd      	b.n	800c424 <__lshift+0x30>
 800c488:	4651      	mov	r1, sl
 800c48a:	e7dc      	b.n	800c446 <__lshift+0x52>
 800c48c:	3904      	subs	r1, #4
 800c48e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c492:	f841 2f04 	str.w	r2, [r1, #4]!
 800c496:	459c      	cmp	ip, r3
 800c498:	d8f9      	bhi.n	800c48e <__lshift+0x9a>
 800c49a:	e7e4      	b.n	800c466 <__lshift+0x72>

0800c49c <__mcmp>:
 800c49c:	6903      	ldr	r3, [r0, #16]
 800c49e:	690a      	ldr	r2, [r1, #16]
 800c4a0:	1a9b      	subs	r3, r3, r2
 800c4a2:	b530      	push	{r4, r5, lr}
 800c4a4:	d10c      	bne.n	800c4c0 <__mcmp+0x24>
 800c4a6:	0092      	lsls	r2, r2, #2
 800c4a8:	3014      	adds	r0, #20
 800c4aa:	3114      	adds	r1, #20
 800c4ac:	1884      	adds	r4, r0, r2
 800c4ae:	4411      	add	r1, r2
 800c4b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c4b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c4b8:	4295      	cmp	r5, r2
 800c4ba:	d003      	beq.n	800c4c4 <__mcmp+0x28>
 800c4bc:	d305      	bcc.n	800c4ca <__mcmp+0x2e>
 800c4be:	2301      	movs	r3, #1
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	bd30      	pop	{r4, r5, pc}
 800c4c4:	42a0      	cmp	r0, r4
 800c4c6:	d3f3      	bcc.n	800c4b0 <__mcmp+0x14>
 800c4c8:	e7fa      	b.n	800c4c0 <__mcmp+0x24>
 800c4ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4ce:	e7f7      	b.n	800c4c0 <__mcmp+0x24>

0800c4d0 <__mdiff>:
 800c4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4d4:	460d      	mov	r5, r1
 800c4d6:	4607      	mov	r7, r0
 800c4d8:	4611      	mov	r1, r2
 800c4da:	4628      	mov	r0, r5
 800c4dc:	4614      	mov	r4, r2
 800c4de:	f7ff ffdd 	bl	800c49c <__mcmp>
 800c4e2:	1e06      	subs	r6, r0, #0
 800c4e4:	d108      	bne.n	800c4f8 <__mdiff+0x28>
 800c4e6:	4631      	mov	r1, r6
 800c4e8:	4638      	mov	r0, r7
 800c4ea:	f7ff fdc1 	bl	800c070 <_Balloc>
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4f8:	bfa4      	itt	ge
 800c4fa:	4623      	movge	r3, r4
 800c4fc:	462c      	movge	r4, r5
 800c4fe:	4638      	mov	r0, r7
 800c500:	6861      	ldr	r1, [r4, #4]
 800c502:	bfa6      	itte	ge
 800c504:	461d      	movge	r5, r3
 800c506:	2600      	movge	r6, #0
 800c508:	2601      	movlt	r6, #1
 800c50a:	f7ff fdb1 	bl	800c070 <_Balloc>
 800c50e:	692b      	ldr	r3, [r5, #16]
 800c510:	60c6      	str	r6, [r0, #12]
 800c512:	6926      	ldr	r6, [r4, #16]
 800c514:	f105 0914 	add.w	r9, r5, #20
 800c518:	f104 0214 	add.w	r2, r4, #20
 800c51c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c520:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c524:	f100 0514 	add.w	r5, r0, #20
 800c528:	f04f 0e00 	mov.w	lr, #0
 800c52c:	f852 ab04 	ldr.w	sl, [r2], #4
 800c530:	f859 4b04 	ldr.w	r4, [r9], #4
 800c534:	fa1e f18a 	uxtah	r1, lr, sl
 800c538:	b2a3      	uxth	r3, r4
 800c53a:	1ac9      	subs	r1, r1, r3
 800c53c:	0c23      	lsrs	r3, r4, #16
 800c53e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c542:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c546:	b289      	uxth	r1, r1
 800c548:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c54c:	45c8      	cmp	r8, r9
 800c54e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c552:	4694      	mov	ip, r2
 800c554:	f845 3b04 	str.w	r3, [r5], #4
 800c558:	d8e8      	bhi.n	800c52c <__mdiff+0x5c>
 800c55a:	45bc      	cmp	ip, r7
 800c55c:	d304      	bcc.n	800c568 <__mdiff+0x98>
 800c55e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c562:	b183      	cbz	r3, 800c586 <__mdiff+0xb6>
 800c564:	6106      	str	r6, [r0, #16]
 800c566:	e7c5      	b.n	800c4f4 <__mdiff+0x24>
 800c568:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c56c:	fa1e f381 	uxtah	r3, lr, r1
 800c570:	141a      	asrs	r2, r3, #16
 800c572:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c576:	b29b      	uxth	r3, r3
 800c578:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c57c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c580:	f845 3b04 	str.w	r3, [r5], #4
 800c584:	e7e9      	b.n	800c55a <__mdiff+0x8a>
 800c586:	3e01      	subs	r6, #1
 800c588:	e7e9      	b.n	800c55e <__mdiff+0x8e>

0800c58a <__d2b>:
 800c58a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c58e:	460e      	mov	r6, r1
 800c590:	2101      	movs	r1, #1
 800c592:	ec59 8b10 	vmov	r8, r9, d0
 800c596:	4615      	mov	r5, r2
 800c598:	f7ff fd6a 	bl	800c070 <_Balloc>
 800c59c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c5a0:	4607      	mov	r7, r0
 800c5a2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c5a6:	bb34      	cbnz	r4, 800c5f6 <__d2b+0x6c>
 800c5a8:	9301      	str	r3, [sp, #4]
 800c5aa:	f1b8 0300 	subs.w	r3, r8, #0
 800c5ae:	d027      	beq.n	800c600 <__d2b+0x76>
 800c5b0:	a802      	add	r0, sp, #8
 800c5b2:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c5b6:	f7ff fe00 	bl	800c1ba <__lo0bits>
 800c5ba:	9900      	ldr	r1, [sp, #0]
 800c5bc:	b1f0      	cbz	r0, 800c5fc <__d2b+0x72>
 800c5be:	9a01      	ldr	r2, [sp, #4]
 800c5c0:	f1c0 0320 	rsb	r3, r0, #32
 800c5c4:	fa02 f303 	lsl.w	r3, r2, r3
 800c5c8:	430b      	orrs	r3, r1
 800c5ca:	40c2      	lsrs	r2, r0
 800c5cc:	617b      	str	r3, [r7, #20]
 800c5ce:	9201      	str	r2, [sp, #4]
 800c5d0:	9b01      	ldr	r3, [sp, #4]
 800c5d2:	61bb      	str	r3, [r7, #24]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	bf14      	ite	ne
 800c5d8:	2102      	movne	r1, #2
 800c5da:	2101      	moveq	r1, #1
 800c5dc:	6139      	str	r1, [r7, #16]
 800c5de:	b1c4      	cbz	r4, 800c612 <__d2b+0x88>
 800c5e0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c5e4:	4404      	add	r4, r0
 800c5e6:	6034      	str	r4, [r6, #0]
 800c5e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c5ec:	6028      	str	r0, [r5, #0]
 800c5ee:	4638      	mov	r0, r7
 800c5f0:	b003      	add	sp, #12
 800c5f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c5fa:	e7d5      	b.n	800c5a8 <__d2b+0x1e>
 800c5fc:	6179      	str	r1, [r7, #20]
 800c5fe:	e7e7      	b.n	800c5d0 <__d2b+0x46>
 800c600:	a801      	add	r0, sp, #4
 800c602:	f7ff fdda 	bl	800c1ba <__lo0bits>
 800c606:	9b01      	ldr	r3, [sp, #4]
 800c608:	617b      	str	r3, [r7, #20]
 800c60a:	2101      	movs	r1, #1
 800c60c:	6139      	str	r1, [r7, #16]
 800c60e:	3020      	adds	r0, #32
 800c610:	e7e5      	b.n	800c5de <__d2b+0x54>
 800c612:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c616:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c61a:	6030      	str	r0, [r6, #0]
 800c61c:	6918      	ldr	r0, [r3, #16]
 800c61e:	f7ff fdad 	bl	800c17c <__hi0bits>
 800c622:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c626:	e7e1      	b.n	800c5ec <__d2b+0x62>

0800c628 <_calloc_r>:
 800c628:	b538      	push	{r3, r4, r5, lr}
 800c62a:	fb02 f401 	mul.w	r4, r2, r1
 800c62e:	4621      	mov	r1, r4
 800c630:	f7fe f986 	bl	800a940 <_malloc_r>
 800c634:	4605      	mov	r5, r0
 800c636:	b118      	cbz	r0, 800c640 <_calloc_r+0x18>
 800c638:	4622      	mov	r2, r4
 800c63a:	2100      	movs	r1, #0
 800c63c:	f7fe f92a 	bl	800a894 <memset>
 800c640:	4628      	mov	r0, r5
 800c642:	bd38      	pop	{r3, r4, r5, pc}

0800c644 <__ssputs_r>:
 800c644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c648:	688e      	ldr	r6, [r1, #8]
 800c64a:	429e      	cmp	r6, r3
 800c64c:	4682      	mov	sl, r0
 800c64e:	460c      	mov	r4, r1
 800c650:	4690      	mov	r8, r2
 800c652:	4699      	mov	r9, r3
 800c654:	d837      	bhi.n	800c6c6 <__ssputs_r+0x82>
 800c656:	898a      	ldrh	r2, [r1, #12]
 800c658:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c65c:	d031      	beq.n	800c6c2 <__ssputs_r+0x7e>
 800c65e:	6825      	ldr	r5, [r4, #0]
 800c660:	6909      	ldr	r1, [r1, #16]
 800c662:	1a6f      	subs	r7, r5, r1
 800c664:	6965      	ldr	r5, [r4, #20]
 800c666:	2302      	movs	r3, #2
 800c668:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c66c:	fb95 f5f3 	sdiv	r5, r5, r3
 800c670:	f109 0301 	add.w	r3, r9, #1
 800c674:	443b      	add	r3, r7
 800c676:	429d      	cmp	r5, r3
 800c678:	bf38      	it	cc
 800c67a:	461d      	movcc	r5, r3
 800c67c:	0553      	lsls	r3, r2, #21
 800c67e:	d530      	bpl.n	800c6e2 <__ssputs_r+0x9e>
 800c680:	4629      	mov	r1, r5
 800c682:	f7fe f95d 	bl	800a940 <_malloc_r>
 800c686:	4606      	mov	r6, r0
 800c688:	b950      	cbnz	r0, 800c6a0 <__ssputs_r+0x5c>
 800c68a:	230c      	movs	r3, #12
 800c68c:	f8ca 3000 	str.w	r3, [sl]
 800c690:	89a3      	ldrh	r3, [r4, #12]
 800c692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c696:	81a3      	strh	r3, [r4, #12]
 800c698:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c69c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6a0:	463a      	mov	r2, r7
 800c6a2:	6921      	ldr	r1, [r4, #16]
 800c6a4:	f7fe f8d2 	bl	800a84c <memcpy>
 800c6a8:	89a3      	ldrh	r3, [r4, #12]
 800c6aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c6ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6b2:	81a3      	strh	r3, [r4, #12]
 800c6b4:	6126      	str	r6, [r4, #16]
 800c6b6:	6165      	str	r5, [r4, #20]
 800c6b8:	443e      	add	r6, r7
 800c6ba:	1bed      	subs	r5, r5, r7
 800c6bc:	6026      	str	r6, [r4, #0]
 800c6be:	60a5      	str	r5, [r4, #8]
 800c6c0:	464e      	mov	r6, r9
 800c6c2:	454e      	cmp	r6, r9
 800c6c4:	d900      	bls.n	800c6c8 <__ssputs_r+0x84>
 800c6c6:	464e      	mov	r6, r9
 800c6c8:	4632      	mov	r2, r6
 800c6ca:	4641      	mov	r1, r8
 800c6cc:	6820      	ldr	r0, [r4, #0]
 800c6ce:	f7fe f8c8 	bl	800a862 <memmove>
 800c6d2:	68a3      	ldr	r3, [r4, #8]
 800c6d4:	1b9b      	subs	r3, r3, r6
 800c6d6:	60a3      	str	r3, [r4, #8]
 800c6d8:	6823      	ldr	r3, [r4, #0]
 800c6da:	441e      	add	r6, r3
 800c6dc:	6026      	str	r6, [r4, #0]
 800c6de:	2000      	movs	r0, #0
 800c6e0:	e7dc      	b.n	800c69c <__ssputs_r+0x58>
 800c6e2:	462a      	mov	r2, r5
 800c6e4:	f000 f912 	bl	800c90c <_realloc_r>
 800c6e8:	4606      	mov	r6, r0
 800c6ea:	2800      	cmp	r0, #0
 800c6ec:	d1e2      	bne.n	800c6b4 <__ssputs_r+0x70>
 800c6ee:	6921      	ldr	r1, [r4, #16]
 800c6f0:	4650      	mov	r0, sl
 800c6f2:	f7fe f8d7 	bl	800a8a4 <_free_r>
 800c6f6:	e7c8      	b.n	800c68a <__ssputs_r+0x46>

0800c6f8 <_svfiprintf_r>:
 800c6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6fc:	461d      	mov	r5, r3
 800c6fe:	898b      	ldrh	r3, [r1, #12]
 800c700:	061f      	lsls	r7, r3, #24
 800c702:	b09d      	sub	sp, #116	; 0x74
 800c704:	4680      	mov	r8, r0
 800c706:	460c      	mov	r4, r1
 800c708:	4616      	mov	r6, r2
 800c70a:	d50f      	bpl.n	800c72c <_svfiprintf_r+0x34>
 800c70c:	690b      	ldr	r3, [r1, #16]
 800c70e:	b96b      	cbnz	r3, 800c72c <_svfiprintf_r+0x34>
 800c710:	2140      	movs	r1, #64	; 0x40
 800c712:	f7fe f915 	bl	800a940 <_malloc_r>
 800c716:	6020      	str	r0, [r4, #0]
 800c718:	6120      	str	r0, [r4, #16]
 800c71a:	b928      	cbnz	r0, 800c728 <_svfiprintf_r+0x30>
 800c71c:	230c      	movs	r3, #12
 800c71e:	f8c8 3000 	str.w	r3, [r8]
 800c722:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c726:	e0c8      	b.n	800c8ba <_svfiprintf_r+0x1c2>
 800c728:	2340      	movs	r3, #64	; 0x40
 800c72a:	6163      	str	r3, [r4, #20]
 800c72c:	2300      	movs	r3, #0
 800c72e:	9309      	str	r3, [sp, #36]	; 0x24
 800c730:	2320      	movs	r3, #32
 800c732:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c736:	2330      	movs	r3, #48	; 0x30
 800c738:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c73c:	9503      	str	r5, [sp, #12]
 800c73e:	f04f 0b01 	mov.w	fp, #1
 800c742:	4637      	mov	r7, r6
 800c744:	463d      	mov	r5, r7
 800c746:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c74a:	b10b      	cbz	r3, 800c750 <_svfiprintf_r+0x58>
 800c74c:	2b25      	cmp	r3, #37	; 0x25
 800c74e:	d13e      	bne.n	800c7ce <_svfiprintf_r+0xd6>
 800c750:	ebb7 0a06 	subs.w	sl, r7, r6
 800c754:	d00b      	beq.n	800c76e <_svfiprintf_r+0x76>
 800c756:	4653      	mov	r3, sl
 800c758:	4632      	mov	r2, r6
 800c75a:	4621      	mov	r1, r4
 800c75c:	4640      	mov	r0, r8
 800c75e:	f7ff ff71 	bl	800c644 <__ssputs_r>
 800c762:	3001      	adds	r0, #1
 800c764:	f000 80a4 	beq.w	800c8b0 <_svfiprintf_r+0x1b8>
 800c768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c76a:	4453      	add	r3, sl
 800c76c:	9309      	str	r3, [sp, #36]	; 0x24
 800c76e:	783b      	ldrb	r3, [r7, #0]
 800c770:	2b00      	cmp	r3, #0
 800c772:	f000 809d 	beq.w	800c8b0 <_svfiprintf_r+0x1b8>
 800c776:	2300      	movs	r3, #0
 800c778:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c77c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c780:	9304      	str	r3, [sp, #16]
 800c782:	9307      	str	r3, [sp, #28]
 800c784:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c788:	931a      	str	r3, [sp, #104]	; 0x68
 800c78a:	462f      	mov	r7, r5
 800c78c:	2205      	movs	r2, #5
 800c78e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c792:	4850      	ldr	r0, [pc, #320]	; (800c8d4 <_svfiprintf_r+0x1dc>)
 800c794:	f7f3 fd3c 	bl	8000210 <memchr>
 800c798:	9b04      	ldr	r3, [sp, #16]
 800c79a:	b9d0      	cbnz	r0, 800c7d2 <_svfiprintf_r+0xda>
 800c79c:	06d9      	lsls	r1, r3, #27
 800c79e:	bf44      	itt	mi
 800c7a0:	2220      	movmi	r2, #32
 800c7a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c7a6:	071a      	lsls	r2, r3, #28
 800c7a8:	bf44      	itt	mi
 800c7aa:	222b      	movmi	r2, #43	; 0x2b
 800c7ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c7b0:	782a      	ldrb	r2, [r5, #0]
 800c7b2:	2a2a      	cmp	r2, #42	; 0x2a
 800c7b4:	d015      	beq.n	800c7e2 <_svfiprintf_r+0xea>
 800c7b6:	9a07      	ldr	r2, [sp, #28]
 800c7b8:	462f      	mov	r7, r5
 800c7ba:	2000      	movs	r0, #0
 800c7bc:	250a      	movs	r5, #10
 800c7be:	4639      	mov	r1, r7
 800c7c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7c4:	3b30      	subs	r3, #48	; 0x30
 800c7c6:	2b09      	cmp	r3, #9
 800c7c8:	d94d      	bls.n	800c866 <_svfiprintf_r+0x16e>
 800c7ca:	b1b8      	cbz	r0, 800c7fc <_svfiprintf_r+0x104>
 800c7cc:	e00f      	b.n	800c7ee <_svfiprintf_r+0xf6>
 800c7ce:	462f      	mov	r7, r5
 800c7d0:	e7b8      	b.n	800c744 <_svfiprintf_r+0x4c>
 800c7d2:	4a40      	ldr	r2, [pc, #256]	; (800c8d4 <_svfiprintf_r+0x1dc>)
 800c7d4:	1a80      	subs	r0, r0, r2
 800c7d6:	fa0b f000 	lsl.w	r0, fp, r0
 800c7da:	4318      	orrs	r0, r3
 800c7dc:	9004      	str	r0, [sp, #16]
 800c7de:	463d      	mov	r5, r7
 800c7e0:	e7d3      	b.n	800c78a <_svfiprintf_r+0x92>
 800c7e2:	9a03      	ldr	r2, [sp, #12]
 800c7e4:	1d11      	adds	r1, r2, #4
 800c7e6:	6812      	ldr	r2, [r2, #0]
 800c7e8:	9103      	str	r1, [sp, #12]
 800c7ea:	2a00      	cmp	r2, #0
 800c7ec:	db01      	blt.n	800c7f2 <_svfiprintf_r+0xfa>
 800c7ee:	9207      	str	r2, [sp, #28]
 800c7f0:	e004      	b.n	800c7fc <_svfiprintf_r+0x104>
 800c7f2:	4252      	negs	r2, r2
 800c7f4:	f043 0302 	orr.w	r3, r3, #2
 800c7f8:	9207      	str	r2, [sp, #28]
 800c7fa:	9304      	str	r3, [sp, #16]
 800c7fc:	783b      	ldrb	r3, [r7, #0]
 800c7fe:	2b2e      	cmp	r3, #46	; 0x2e
 800c800:	d10c      	bne.n	800c81c <_svfiprintf_r+0x124>
 800c802:	787b      	ldrb	r3, [r7, #1]
 800c804:	2b2a      	cmp	r3, #42	; 0x2a
 800c806:	d133      	bne.n	800c870 <_svfiprintf_r+0x178>
 800c808:	9b03      	ldr	r3, [sp, #12]
 800c80a:	1d1a      	adds	r2, r3, #4
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	9203      	str	r2, [sp, #12]
 800c810:	2b00      	cmp	r3, #0
 800c812:	bfb8      	it	lt
 800c814:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c818:	3702      	adds	r7, #2
 800c81a:	9305      	str	r3, [sp, #20]
 800c81c:	4d2e      	ldr	r5, [pc, #184]	; (800c8d8 <_svfiprintf_r+0x1e0>)
 800c81e:	7839      	ldrb	r1, [r7, #0]
 800c820:	2203      	movs	r2, #3
 800c822:	4628      	mov	r0, r5
 800c824:	f7f3 fcf4 	bl	8000210 <memchr>
 800c828:	b138      	cbz	r0, 800c83a <_svfiprintf_r+0x142>
 800c82a:	2340      	movs	r3, #64	; 0x40
 800c82c:	1b40      	subs	r0, r0, r5
 800c82e:	fa03 f000 	lsl.w	r0, r3, r0
 800c832:	9b04      	ldr	r3, [sp, #16]
 800c834:	4303      	orrs	r3, r0
 800c836:	3701      	adds	r7, #1
 800c838:	9304      	str	r3, [sp, #16]
 800c83a:	7839      	ldrb	r1, [r7, #0]
 800c83c:	4827      	ldr	r0, [pc, #156]	; (800c8dc <_svfiprintf_r+0x1e4>)
 800c83e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c842:	2206      	movs	r2, #6
 800c844:	1c7e      	adds	r6, r7, #1
 800c846:	f7f3 fce3 	bl	8000210 <memchr>
 800c84a:	2800      	cmp	r0, #0
 800c84c:	d038      	beq.n	800c8c0 <_svfiprintf_r+0x1c8>
 800c84e:	4b24      	ldr	r3, [pc, #144]	; (800c8e0 <_svfiprintf_r+0x1e8>)
 800c850:	bb13      	cbnz	r3, 800c898 <_svfiprintf_r+0x1a0>
 800c852:	9b03      	ldr	r3, [sp, #12]
 800c854:	3307      	adds	r3, #7
 800c856:	f023 0307 	bic.w	r3, r3, #7
 800c85a:	3308      	adds	r3, #8
 800c85c:	9303      	str	r3, [sp, #12]
 800c85e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c860:	444b      	add	r3, r9
 800c862:	9309      	str	r3, [sp, #36]	; 0x24
 800c864:	e76d      	b.n	800c742 <_svfiprintf_r+0x4a>
 800c866:	fb05 3202 	mla	r2, r5, r2, r3
 800c86a:	2001      	movs	r0, #1
 800c86c:	460f      	mov	r7, r1
 800c86e:	e7a6      	b.n	800c7be <_svfiprintf_r+0xc6>
 800c870:	2300      	movs	r3, #0
 800c872:	3701      	adds	r7, #1
 800c874:	9305      	str	r3, [sp, #20]
 800c876:	4619      	mov	r1, r3
 800c878:	250a      	movs	r5, #10
 800c87a:	4638      	mov	r0, r7
 800c87c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c880:	3a30      	subs	r2, #48	; 0x30
 800c882:	2a09      	cmp	r2, #9
 800c884:	d903      	bls.n	800c88e <_svfiprintf_r+0x196>
 800c886:	2b00      	cmp	r3, #0
 800c888:	d0c8      	beq.n	800c81c <_svfiprintf_r+0x124>
 800c88a:	9105      	str	r1, [sp, #20]
 800c88c:	e7c6      	b.n	800c81c <_svfiprintf_r+0x124>
 800c88e:	fb05 2101 	mla	r1, r5, r1, r2
 800c892:	2301      	movs	r3, #1
 800c894:	4607      	mov	r7, r0
 800c896:	e7f0      	b.n	800c87a <_svfiprintf_r+0x182>
 800c898:	ab03      	add	r3, sp, #12
 800c89a:	9300      	str	r3, [sp, #0]
 800c89c:	4622      	mov	r2, r4
 800c89e:	4b11      	ldr	r3, [pc, #68]	; (800c8e4 <_svfiprintf_r+0x1ec>)
 800c8a0:	a904      	add	r1, sp, #16
 800c8a2:	4640      	mov	r0, r8
 800c8a4:	f7fe f93a 	bl	800ab1c <_printf_float>
 800c8a8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c8ac:	4681      	mov	r9, r0
 800c8ae:	d1d6      	bne.n	800c85e <_svfiprintf_r+0x166>
 800c8b0:	89a3      	ldrh	r3, [r4, #12]
 800c8b2:	065b      	lsls	r3, r3, #25
 800c8b4:	f53f af35 	bmi.w	800c722 <_svfiprintf_r+0x2a>
 800c8b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8ba:	b01d      	add	sp, #116	; 0x74
 800c8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8c0:	ab03      	add	r3, sp, #12
 800c8c2:	9300      	str	r3, [sp, #0]
 800c8c4:	4622      	mov	r2, r4
 800c8c6:	4b07      	ldr	r3, [pc, #28]	; (800c8e4 <_svfiprintf_r+0x1ec>)
 800c8c8:	a904      	add	r1, sp, #16
 800c8ca:	4640      	mov	r0, r8
 800c8cc:	f7fe fbdc 	bl	800b088 <_printf_i>
 800c8d0:	e7ea      	b.n	800c8a8 <_svfiprintf_r+0x1b0>
 800c8d2:	bf00      	nop
 800c8d4:	0800ce74 	.word	0x0800ce74
 800c8d8:	0800ce7a 	.word	0x0800ce7a
 800c8dc:	0800ce7e 	.word	0x0800ce7e
 800c8e0:	0800ab1d 	.word	0x0800ab1d
 800c8e4:	0800c645 	.word	0x0800c645

0800c8e8 <__ascii_mbtowc>:
 800c8e8:	b082      	sub	sp, #8
 800c8ea:	b901      	cbnz	r1, 800c8ee <__ascii_mbtowc+0x6>
 800c8ec:	a901      	add	r1, sp, #4
 800c8ee:	b142      	cbz	r2, 800c902 <__ascii_mbtowc+0x1a>
 800c8f0:	b14b      	cbz	r3, 800c906 <__ascii_mbtowc+0x1e>
 800c8f2:	7813      	ldrb	r3, [r2, #0]
 800c8f4:	600b      	str	r3, [r1, #0]
 800c8f6:	7812      	ldrb	r2, [r2, #0]
 800c8f8:	1c10      	adds	r0, r2, #0
 800c8fa:	bf18      	it	ne
 800c8fc:	2001      	movne	r0, #1
 800c8fe:	b002      	add	sp, #8
 800c900:	4770      	bx	lr
 800c902:	4610      	mov	r0, r2
 800c904:	e7fb      	b.n	800c8fe <__ascii_mbtowc+0x16>
 800c906:	f06f 0001 	mvn.w	r0, #1
 800c90a:	e7f8      	b.n	800c8fe <__ascii_mbtowc+0x16>

0800c90c <_realloc_r>:
 800c90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c90e:	4607      	mov	r7, r0
 800c910:	4614      	mov	r4, r2
 800c912:	460e      	mov	r6, r1
 800c914:	b921      	cbnz	r1, 800c920 <_realloc_r+0x14>
 800c916:	4611      	mov	r1, r2
 800c918:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c91c:	f7fe b810 	b.w	800a940 <_malloc_r>
 800c920:	b922      	cbnz	r2, 800c92c <_realloc_r+0x20>
 800c922:	f7fd ffbf 	bl	800a8a4 <_free_r>
 800c926:	4625      	mov	r5, r4
 800c928:	4628      	mov	r0, r5
 800c92a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c92c:	f000 f821 	bl	800c972 <_malloc_usable_size_r>
 800c930:	42a0      	cmp	r0, r4
 800c932:	d20f      	bcs.n	800c954 <_realloc_r+0x48>
 800c934:	4621      	mov	r1, r4
 800c936:	4638      	mov	r0, r7
 800c938:	f7fe f802 	bl	800a940 <_malloc_r>
 800c93c:	4605      	mov	r5, r0
 800c93e:	2800      	cmp	r0, #0
 800c940:	d0f2      	beq.n	800c928 <_realloc_r+0x1c>
 800c942:	4631      	mov	r1, r6
 800c944:	4622      	mov	r2, r4
 800c946:	f7fd ff81 	bl	800a84c <memcpy>
 800c94a:	4631      	mov	r1, r6
 800c94c:	4638      	mov	r0, r7
 800c94e:	f7fd ffa9 	bl	800a8a4 <_free_r>
 800c952:	e7e9      	b.n	800c928 <_realloc_r+0x1c>
 800c954:	4635      	mov	r5, r6
 800c956:	e7e7      	b.n	800c928 <_realloc_r+0x1c>

0800c958 <__ascii_wctomb>:
 800c958:	b149      	cbz	r1, 800c96e <__ascii_wctomb+0x16>
 800c95a:	2aff      	cmp	r2, #255	; 0xff
 800c95c:	bf85      	ittet	hi
 800c95e:	238a      	movhi	r3, #138	; 0x8a
 800c960:	6003      	strhi	r3, [r0, #0]
 800c962:	700a      	strbls	r2, [r1, #0]
 800c964:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c968:	bf98      	it	ls
 800c96a:	2001      	movls	r0, #1
 800c96c:	4770      	bx	lr
 800c96e:	4608      	mov	r0, r1
 800c970:	4770      	bx	lr

0800c972 <_malloc_usable_size_r>:
 800c972:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c976:	1f18      	subs	r0, r3, #4
 800c978:	2b00      	cmp	r3, #0
 800c97a:	bfbc      	itt	lt
 800c97c:	580b      	ldrlt	r3, [r1, r0]
 800c97e:	18c0      	addlt	r0, r0, r3
 800c980:	4770      	bx	lr
	...

0800c984 <_init>:
 800c984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c986:	bf00      	nop
 800c988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c98a:	bc08      	pop	{r3}
 800c98c:	469e      	mov	lr, r3
 800c98e:	4770      	bx	lr

0800c990 <_fini>:
 800c990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c992:	bf00      	nop
 800c994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c996:	bc08      	pop	{r3}
 800c998:	469e      	mov	lr, r3
 800c99a:	4770      	bx	lr
