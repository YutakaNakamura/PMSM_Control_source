
STM32F446RE_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f2c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  080090f8  080090f8  000190f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009620  08009620  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009620  08009620  00019620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009628  08009628  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009628  08009628  00019628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800962c  0800962c  0001962c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  200001dc  0800980c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  0800980c  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001feea  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ecc  00000000  00000000  000400f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001340  00000000  00000000  00043fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011a8  00000000  00000000  00045308  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025f04  00000000  00000000  000464b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fde5  00000000  00000000  0006c3b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f7d56  00000000  00000000  0007c199  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00173eef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f40  00000000  00000000  00173f6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001dc 	.word	0x200001dc
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080090dc 	.word	0x080090dc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001e0 	.word	0x200001e0
 8000204:	080090dc 	.word	0x080090dc

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bf4:	f000 b972 	b.w	8000edc <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9e08      	ldr	r6, [sp, #32]
 8000c16:	4604      	mov	r4, r0
 8000c18:	4688      	mov	r8, r1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d14b      	bne.n	8000cb6 <__udivmoddi4+0xa6>
 8000c1e:	428a      	cmp	r2, r1
 8000c20:	4615      	mov	r5, r2
 8000c22:	d967      	bls.n	8000cf4 <__udivmoddi4+0xe4>
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	b14a      	cbz	r2, 8000c3e <__udivmoddi4+0x2e>
 8000c2a:	f1c2 0720 	rsb	r7, r2, #32
 8000c2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c32:	fa20 f707 	lsr.w	r7, r0, r7
 8000c36:	4095      	lsls	r5, r2
 8000c38:	ea47 0803 	orr.w	r8, r7, r3
 8000c3c:	4094      	lsls	r4, r2
 8000c3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c42:	0c23      	lsrs	r3, r4, #16
 8000c44:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c48:	fa1f fc85 	uxth.w	ip, r5
 8000c4c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c50:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c54:	fb07 f10c 	mul.w	r1, r7, ip
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	d909      	bls.n	8000c70 <__udivmoddi4+0x60>
 8000c5c:	18eb      	adds	r3, r5, r3
 8000c5e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c62:	f080 811b 	bcs.w	8000e9c <__udivmoddi4+0x28c>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 8118 	bls.w	8000e9c <__udivmoddi4+0x28c>
 8000c6c:	3f02      	subs	r7, #2
 8000c6e:	442b      	add	r3, r5
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c84:	45a4      	cmp	ip, r4
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x8c>
 8000c88:	192c      	adds	r4, r5, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8e:	f080 8107 	bcs.w	8000ea0 <__udivmoddi4+0x290>
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	f240 8104 	bls.w	8000ea0 <__udivmoddi4+0x290>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	442c      	add	r4, r5
 8000c9c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca0:	eba4 040c 	sub.w	r4, r4, ip
 8000ca4:	2700      	movs	r7, #0
 8000ca6:	b11e      	cbz	r6, 8000cb0 <__udivmoddi4+0xa0>
 8000ca8:	40d4      	lsrs	r4, r2
 8000caa:	2300      	movs	r3, #0
 8000cac:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d909      	bls.n	8000cce <__udivmoddi4+0xbe>
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	f000 80eb 	beq.w	8000e96 <__udivmoddi4+0x286>
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	e9c6 0100 	strd	r0, r1, [r6]
 8000cc6:	4638      	mov	r0, r7
 8000cc8:	4639      	mov	r1, r7
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	fab3 f783 	clz	r7, r3
 8000cd2:	2f00      	cmp	r7, #0
 8000cd4:	d147      	bne.n	8000d66 <__udivmoddi4+0x156>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xd0>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 80fa 	bhi.w	8000ed4 <__udivmoddi4+0x2c4>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4698      	mov	r8, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d0e0      	beq.n	8000cb0 <__udivmoddi4+0xa0>
 8000cee:	e9c6 4800 	strd	r4, r8, [r6]
 8000cf2:	e7dd      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000cf4:	b902      	cbnz	r2, 8000cf8 <__udivmoddi4+0xe8>
 8000cf6:	deff      	udf	#255	; 0xff
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	2a00      	cmp	r2, #0
 8000cfe:	f040 808f 	bne.w	8000e20 <__udivmoddi4+0x210>
 8000d02:	1b49      	subs	r1, r1, r5
 8000d04:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d08:	fa1f f885 	uxth.w	r8, r5
 8000d0c:	2701      	movs	r7, #1
 8000d0e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d12:	0c23      	lsrs	r3, r4, #16
 8000d14:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb08 f10c 	mul.w	r1, r8, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x124>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x122>
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2bc>
 8000d32:	4684      	mov	ip, r0
 8000d34:	1a59      	subs	r1, r3, r1
 8000d36:	b2a3      	uxth	r3, r4
 8000d38:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d3c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d44:	fb08 f800 	mul.w	r8, r8, r0
 8000d48:	45a0      	cmp	r8, r4
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x14c>
 8000d4c:	192c      	adds	r4, r5, r4
 8000d4e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x14a>
 8000d54:	45a0      	cmp	r8, r4
 8000d56:	f200 80b6 	bhi.w	8000ec6 <__udivmoddi4+0x2b6>
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	eba4 0408 	sub.w	r4, r4, r8
 8000d60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d64:	e79f      	b.n	8000ca6 <__udivmoddi4+0x96>
 8000d66:	f1c7 0c20 	rsb	ip, r7, #32
 8000d6a:	40bb      	lsls	r3, r7
 8000d6c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d70:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d74:	fa01 f407 	lsl.w	r4, r1, r7
 8000d78:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d7c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d80:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d84:	4325      	orrs	r5, r4
 8000d86:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d8a:	0c2c      	lsrs	r4, r5, #16
 8000d8c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d90:	fa1f fa8e 	uxth.w	sl, lr
 8000d94:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d98:	fb09 f40a 	mul.w	r4, r9, sl
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	fa02 f207 	lsl.w	r2, r2, r7
 8000da2:	fa00 f107 	lsl.w	r1, r0, r7
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b0>
 8000da8:	eb1e 0303 	adds.w	r3, lr, r3
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000db0:	f080 8087 	bcs.w	8000ec2 <__udivmoddi4+0x2b2>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f240 8084 	bls.w	8000ec2 <__udivmoddi4+0x2b2>
 8000dba:	f1a9 0902 	sub.w	r9, r9, #2
 8000dbe:	4473      	add	r3, lr
 8000dc0:	1b1b      	subs	r3, r3, r4
 8000dc2:	b2ad      	uxth	r5, r5
 8000dc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000dcc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dd4:	45a2      	cmp	sl, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1da>
 8000dd8:	eb1e 0404 	adds.w	r4, lr, r4
 8000ddc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de0:	d26b      	bcs.n	8000eba <__udivmoddi4+0x2aa>
 8000de2:	45a2      	cmp	sl, r4
 8000de4:	d969      	bls.n	8000eba <__udivmoddi4+0x2aa>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4474      	add	r4, lr
 8000dea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	eba4 040a 	sub.w	r4, r4, sl
 8000df6:	454c      	cmp	r4, r9
 8000df8:	46c2      	mov	sl, r8
 8000dfa:	464b      	mov	r3, r9
 8000dfc:	d354      	bcc.n	8000ea8 <__udivmoddi4+0x298>
 8000dfe:	d051      	beq.n	8000ea4 <__udivmoddi4+0x294>
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d069      	beq.n	8000ed8 <__udivmoddi4+0x2c8>
 8000e04:	ebb1 050a 	subs.w	r5, r1, sl
 8000e08:	eb64 0403 	sbc.w	r4, r4, r3
 8000e0c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e10:	40fd      	lsrs	r5, r7
 8000e12:	40fc      	lsrs	r4, r7
 8000e14:	ea4c 0505 	orr.w	r5, ip, r5
 8000e18:	e9c6 5400 	strd	r5, r4, [r6]
 8000e1c:	2700      	movs	r7, #0
 8000e1e:	e747      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e20:	f1c2 0320 	rsb	r3, r2, #32
 8000e24:	fa20 f703 	lsr.w	r7, r0, r3
 8000e28:	4095      	lsls	r5, r2
 8000e2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e36:	4338      	orrs	r0, r7
 8000e38:	0c01      	lsrs	r1, r0, #16
 8000e3a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e3e:	fa1f f885 	uxth.w	r8, r5
 8000e42:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4a:	fb07 f308 	mul.w	r3, r7, r8
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x256>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e5c:	d22f      	bcs.n	8000ebe <__udivmoddi4+0x2ae>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d92d      	bls.n	8000ebe <__udivmoddi4+0x2ae>
 8000e62:	3f02      	subs	r7, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1acb      	subs	r3, r1, r3
 8000e68:	b281      	uxth	r1, r0
 8000e6a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e76:	fb00 f308 	mul.w	r3, r0, r8
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x27e>
 8000e7e:	1869      	adds	r1, r5, r1
 8000e80:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e84:	d217      	bcs.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d915      	bls.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	4429      	add	r1, r5
 8000e8e:	1ac9      	subs	r1, r1, r3
 8000e90:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e94:	e73b      	b.n	8000d0e <__udivmoddi4+0xfe>
 8000e96:	4637      	mov	r7, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e709      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e9c:	4607      	mov	r7, r0
 8000e9e:	e6e7      	b.n	8000c70 <__udivmoddi4+0x60>
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	e6fb      	b.n	8000c9c <__udivmoddi4+0x8c>
 8000ea4:	4541      	cmp	r1, r8
 8000ea6:	d2ab      	bcs.n	8000e00 <__udivmoddi4+0x1f0>
 8000ea8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eac:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb0:	3801      	subs	r0, #1
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	e7a4      	b.n	8000e00 <__udivmoddi4+0x1f0>
 8000eb6:	4660      	mov	r0, ip
 8000eb8:	e7e9      	b.n	8000e8e <__udivmoddi4+0x27e>
 8000eba:	4618      	mov	r0, r3
 8000ebc:	e795      	b.n	8000dea <__udivmoddi4+0x1da>
 8000ebe:	4667      	mov	r7, ip
 8000ec0:	e7d1      	b.n	8000e66 <__udivmoddi4+0x256>
 8000ec2:	4681      	mov	r9, r0
 8000ec4:	e77c      	b.n	8000dc0 <__udivmoddi4+0x1b0>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	442c      	add	r4, r5
 8000eca:	e747      	b.n	8000d5c <__udivmoddi4+0x14c>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	442b      	add	r3, r5
 8000ed2:	e72f      	b.n	8000d34 <__udivmoddi4+0x124>
 8000ed4:	4638      	mov	r0, r7
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xda>
 8000ed8:	4637      	mov	r7, r6
 8000eda:	e6e9      	b.n	8000cb0 <__udivmoddi4+0xa0>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	; (8000f20 <HAL_Init+0x40>)
 8000eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <HAL_Init+0x40>)
 8000ef6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <HAL_Init+0x40>)
 8000f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f000 f92f 	bl	800116c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0e:	2004      	movs	r0, #4
 8000f10:	f000 f808 	bl	8000f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f14:	f004 fb68 	bl	80055e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40023c00 	.word	0x40023c00

08000f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_InitTick+0x54>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_InitTick+0x58>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 f939 	bl	80011ba <HAL_SYSTICK_Config>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00e      	b.n	8000f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d80a      	bhi.n	8000f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f60:	f000 f90f 	bl	8001182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f64:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <HAL_InitTick+0x5c>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	20000004 	.word	0x20000004
 8000f80:	20000000 	.word	0x20000000

08000f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_IncTick+0x20>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000004 	.word	0x20000004
 8000fa8:	20000210 	.word	0x20000210

08000fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <HAL_GetTick+0x14>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000210 	.word	0x20000210

08000fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fcc:	f7ff ffee 	bl	8000fac <HAL_GetTick>
 8000fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fdc:	d005      	beq.n	8000fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <HAL_Delay+0x40>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fea:	bf00      	nop
 8000fec:	f7ff ffde 	bl	8000fac <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d8f7      	bhi.n	8000fec <HAL_Delay+0x28>
  {
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000004 	.word	0x20000004

08001008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <__NVIC_SetPriorityGrouping+0x44>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001024:	4013      	ands	r3, r2
 8001026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001030:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103a:	4a04      	ldr	r2, [pc, #16]	; (800104c <__NVIC_SetPriorityGrouping+0x44>)
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	60d3      	str	r3, [r2, #12]
}
 8001040:	bf00      	nop
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <__NVIC_GetPriorityGrouping+0x18>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	0a1b      	lsrs	r3, r3, #8
 800105a:	f003 0307 	and.w	r3, r3, #7
}
 800105e:	4618      	mov	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	db0a      	blt.n	8001096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	490c      	ldr	r1, [pc, #48]	; (80010b8 <__NVIC_SetPriority+0x4c>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	0112      	lsls	r2, r2, #4
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	440b      	add	r3, r1
 8001090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001094:	e00a      	b.n	80010ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4908      	ldr	r1, [pc, #32]	; (80010bc <__NVIC_SetPriority+0x50>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	3b04      	subs	r3, #4
 80010a4:	0112      	lsls	r2, r2, #4
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	440b      	add	r3, r1
 80010aa:	761a      	strb	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000e100 	.word	0xe000e100
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	; 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f1c3 0307 	rsb	r3, r3, #7
 80010da:	2b04      	cmp	r3, #4
 80010dc:	bf28      	it	cs
 80010de:	2304      	movcs	r3, #4
 80010e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3304      	adds	r3, #4
 80010e6:	2b06      	cmp	r3, #6
 80010e8:	d902      	bls.n	80010f0 <NVIC_EncodePriority+0x30>
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3b03      	subs	r3, #3
 80010ee:	e000      	b.n	80010f2 <NVIC_EncodePriority+0x32>
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43da      	mvns	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001108:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	43d9      	mvns	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	4313      	orrs	r3, r2
         );
}
 800111a:	4618      	mov	r0, r3
 800111c:	3724      	adds	r7, #36	; 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001138:	d301      	bcc.n	800113e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113a:	2301      	movs	r3, #1
 800113c:	e00f      	b.n	800115e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <SysTick_Config+0x40>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001146:	210f      	movs	r1, #15
 8001148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800114c:	f7ff ff8e 	bl	800106c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <SysTick_Config+0x40>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001156:	4b04      	ldr	r3, [pc, #16]	; (8001168 <SysTick_Config+0x40>)
 8001158:	2207      	movs	r2, #7
 800115a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	e000e010 	.word	0xe000e010

0800116c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff47 	bl	8001008 <__NVIC_SetPriorityGrouping>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001182:	b580      	push	{r7, lr}
 8001184:	b086      	sub	sp, #24
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
 800118e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001194:	f7ff ff5c 	bl	8001050 <__NVIC_GetPriorityGrouping>
 8001198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	6978      	ldr	r0, [r7, #20]
 80011a0:	f7ff ff8e 	bl	80010c0 <NVIC_EncodePriority>
 80011a4:	4602      	mov	r2, r0
 80011a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff5d 	bl	800106c <__NVIC_SetPriority>
}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ffb0 	bl	8001128 <SysTick_Config>
 80011c8:	4603      	mov	r3, r0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	; 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
 80011ee:	e165      	b.n	80014bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011f0:	2201      	movs	r2, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	429a      	cmp	r2, r3
 800120a:	f040 8154 	bne.w	80014b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b02      	cmp	r3, #2
 8001214:	d003      	beq.n	800121e <HAL_GPIO_Init+0x4a>
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b12      	cmp	r3, #18
 800121c:	d123      	bne.n	8001266 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	08da      	lsrs	r2, r3, #3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3208      	adds	r2, #8
 8001226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	220f      	movs	r2, #15
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	691a      	ldr	r2, [r3, #16]
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	08da      	lsrs	r2, r3, #3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3208      	adds	r2, #8
 8001260:	69b9      	ldr	r1, [r7, #24]
 8001262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	2203      	movs	r2, #3
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 0203 	and.w	r2, r3, #3
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d00b      	beq.n	80012ba <HAL_GPIO_Init+0xe6>
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d007      	beq.n	80012ba <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012ae:	2b11      	cmp	r3, #17
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b12      	cmp	r3, #18
 80012b8:	d130      	bne.n	800131c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	2203      	movs	r2, #3
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	68da      	ldr	r2, [r3, #12]
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f0:	2201      	movs	r2, #1
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	091b      	lsrs	r3, r3, #4
 8001306:	f003 0201 	and.w	r2, r3, #1
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	2203      	movs	r2, #3
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 80ae 	beq.w	80014b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b5c      	ldr	r3, [pc, #368]	; (80014d0 <HAL_GPIO_Init+0x2fc>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	4a5b      	ldr	r2, [pc, #364]	; (80014d0 <HAL_GPIO_Init+0x2fc>)
 8001364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001368:	6453      	str	r3, [r2, #68]	; 0x44
 800136a:	4b59      	ldr	r3, [pc, #356]	; (80014d0 <HAL_GPIO_Init+0x2fc>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001376:	4a57      	ldr	r2, [pc, #348]	; (80014d4 <HAL_GPIO_Init+0x300>)
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	3302      	adds	r3, #2
 800137e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	220f      	movs	r2, #15
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4e      	ldr	r2, [pc, #312]	; (80014d8 <HAL_GPIO_Init+0x304>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d025      	beq.n	80013ee <HAL_GPIO_Init+0x21a>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a4d      	ldr	r2, [pc, #308]	; (80014dc <HAL_GPIO_Init+0x308>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d01f      	beq.n	80013ea <HAL_GPIO_Init+0x216>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4c      	ldr	r2, [pc, #304]	; (80014e0 <HAL_GPIO_Init+0x30c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d019      	beq.n	80013e6 <HAL_GPIO_Init+0x212>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4b      	ldr	r2, [pc, #300]	; (80014e4 <HAL_GPIO_Init+0x310>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d013      	beq.n	80013e2 <HAL_GPIO_Init+0x20e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4a      	ldr	r2, [pc, #296]	; (80014e8 <HAL_GPIO_Init+0x314>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d00d      	beq.n	80013de <HAL_GPIO_Init+0x20a>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a49      	ldr	r2, [pc, #292]	; (80014ec <HAL_GPIO_Init+0x318>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d007      	beq.n	80013da <HAL_GPIO_Init+0x206>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a48      	ldr	r2, [pc, #288]	; (80014f0 <HAL_GPIO_Init+0x31c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d101      	bne.n	80013d6 <HAL_GPIO_Init+0x202>
 80013d2:	2306      	movs	r3, #6
 80013d4:	e00c      	b.n	80013f0 <HAL_GPIO_Init+0x21c>
 80013d6:	2307      	movs	r3, #7
 80013d8:	e00a      	b.n	80013f0 <HAL_GPIO_Init+0x21c>
 80013da:	2305      	movs	r3, #5
 80013dc:	e008      	b.n	80013f0 <HAL_GPIO_Init+0x21c>
 80013de:	2304      	movs	r3, #4
 80013e0:	e006      	b.n	80013f0 <HAL_GPIO_Init+0x21c>
 80013e2:	2303      	movs	r3, #3
 80013e4:	e004      	b.n	80013f0 <HAL_GPIO_Init+0x21c>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e002      	b.n	80013f0 <HAL_GPIO_Init+0x21c>
 80013ea:	2301      	movs	r3, #1
 80013ec:	e000      	b.n	80013f0 <HAL_GPIO_Init+0x21c>
 80013ee:	2300      	movs	r3, #0
 80013f0:	69fa      	ldr	r2, [r7, #28]
 80013f2:	f002 0203 	and.w	r2, r2, #3
 80013f6:	0092      	lsls	r2, r2, #2
 80013f8:	4093      	lsls	r3, r2
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001400:	4934      	ldr	r1, [pc, #208]	; (80014d4 <HAL_GPIO_Init+0x300>)
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	3302      	adds	r3, #2
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800140e:	4b39      	ldr	r3, [pc, #228]	; (80014f4 <HAL_GPIO_Init+0x320>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001432:	4a30      	ldr	r2, [pc, #192]	; (80014f4 <HAL_GPIO_Init+0x320>)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001438:	4b2e      	ldr	r3, [pc, #184]	; (80014f4 <HAL_GPIO_Init+0x320>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800145c:	4a25      	ldr	r2, [pc, #148]	; (80014f4 <HAL_GPIO_Init+0x320>)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001462:	4b24      	ldr	r3, [pc, #144]	; (80014f4 <HAL_GPIO_Init+0x320>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001486:	4a1b      	ldr	r2, [pc, #108]	; (80014f4 <HAL_GPIO_Init+0x320>)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <HAL_GPIO_Init+0x320>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014b0:	4a10      	ldr	r2, [pc, #64]	; (80014f4 <HAL_GPIO_Init+0x320>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3301      	adds	r3, #1
 80014ba:	61fb      	str	r3, [r7, #28]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	2b0f      	cmp	r3, #15
 80014c0:	f67f ae96 	bls.w	80011f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014c4:	bf00      	nop
 80014c6:	3724      	adds	r7, #36	; 0x24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40013800 	.word	0x40013800
 80014d8:	40020000 	.word	0x40020000
 80014dc:	40020400 	.word	0x40020400
 80014e0:	40020800 	.word	0x40020800
 80014e4:	40020c00 	.word	0x40020c00
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40021400 	.word	0x40021400
 80014f0:	40021800 	.word	0x40021800
 80014f4:	40013c00 	.word	0x40013c00

080014f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	603b      	str	r3, [r7, #0]
 8001506:	4b20      	ldr	r3, [pc, #128]	; (8001588 <HAL_PWREx_EnableOverDrive+0x90>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a1f      	ldr	r2, [pc, #124]	; (8001588 <HAL_PWREx_EnableOverDrive+0x90>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <HAL_PWREx_EnableOverDrive+0x90>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	603b      	str	r3, [r7, #0]
 800151c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_PWREx_EnableOverDrive+0x94>)
 8001520:	2201      	movs	r2, #1
 8001522:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001524:	f7ff fd42 	bl	8000fac <HAL_GetTick>
 8001528:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800152a:	e009      	b.n	8001540 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800152c:	f7ff fd3e 	bl	8000fac <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800153a:	d901      	bls.n	8001540 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e01f      	b.n	8001580 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001540:	4b13      	ldr	r3, [pc, #76]	; (8001590 <HAL_PWREx_EnableOverDrive+0x98>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800154c:	d1ee      	bne.n	800152c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800154e:	4b11      	ldr	r3, [pc, #68]	; (8001594 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001550:	2201      	movs	r2, #1
 8001552:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001554:	f7ff fd2a 	bl	8000fac <HAL_GetTick>
 8001558:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800155a:	e009      	b.n	8001570 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800155c:	f7ff fd26 	bl	8000fac <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800156a:	d901      	bls.n	8001570 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e007      	b.n	8001580 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <HAL_PWREx_EnableOverDrive+0x98>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001578:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800157c:	d1ee      	bne.n	800155c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40023800 	.word	0x40023800
 800158c:	420e0040 	.word	0x420e0040
 8001590:	40007000 	.word	0x40007000
 8001594:	420e0044 	.word	0x420e0044

08001598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e0ca      	b.n	8001742 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015ac:	4b67      	ldr	r3, [pc, #412]	; (800174c <HAL_RCC_ClockConfig+0x1b4>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 030f 	and.w	r3, r3, #15
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d90c      	bls.n	80015d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ba:	4b64      	ldr	r3, [pc, #400]	; (800174c <HAL_RCC_ClockConfig+0x1b4>)
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c2:	4b62      	ldr	r3, [pc, #392]	; (800174c <HAL_RCC_ClockConfig+0x1b4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d001      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e0b6      	b.n	8001742 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d020      	beq.n	8001622 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015ec:	4b58      	ldr	r3, [pc, #352]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	4a57      	ldr	r2, [pc, #348]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80015f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0308 	and.w	r3, r3, #8
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001604:	4b52      	ldr	r3, [pc, #328]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	4a51      	ldr	r2, [pc, #324]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 800160a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800160e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001610:	4b4f      	ldr	r3, [pc, #316]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	494c      	ldr	r1, [pc, #304]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 800161e:	4313      	orrs	r3, r2
 8001620:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d044      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d107      	bne.n	8001646 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001636:	4b46      	ldr	r3, [pc, #280]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d119      	bne.n	8001676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e07d      	b.n	8001742 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d003      	beq.n	8001656 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001652:	2b03      	cmp	r3, #3
 8001654:	d107      	bne.n	8001666 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001656:	4b3e      	ldr	r3, [pc, #248]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d109      	bne.n	8001676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e06d      	b.n	8001742 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001666:	4b3a      	ldr	r3, [pc, #232]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e065      	b.n	8001742 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001676:	4b36      	ldr	r3, [pc, #216]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f023 0203 	bic.w	r2, r3, #3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	4933      	ldr	r1, [pc, #204]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 8001684:	4313      	orrs	r3, r2
 8001686:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001688:	f7ff fc90 	bl	8000fac <HAL_GetTick>
 800168c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168e:	e00a      	b.n	80016a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001690:	f7ff fc8c 	bl	8000fac <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f241 3288 	movw	r2, #5000	; 0x1388
 800169e:	4293      	cmp	r3, r2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e04d      	b.n	8001742 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a6:	4b2a      	ldr	r3, [pc, #168]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 020c 	and.w	r2, r3, #12
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d1eb      	bne.n	8001690 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016b8:	4b24      	ldr	r3, [pc, #144]	; (800174c <HAL_RCC_ClockConfig+0x1b4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 030f 	and.w	r3, r3, #15
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d20c      	bcs.n	80016e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c6:	4b21      	ldr	r3, [pc, #132]	; (800174c <HAL_RCC_ClockConfig+0x1b4>)
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ce:	4b1f      	ldr	r3, [pc, #124]	; (800174c <HAL_RCC_ClockConfig+0x1b4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e030      	b.n	8001742 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d008      	beq.n	80016fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016ec:	4b18      	ldr	r3, [pc, #96]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	4915      	ldr	r1, [pc, #84]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	2b00      	cmp	r3, #0
 8001708:	d009      	beq.n	800171e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	490d      	ldr	r1, [pc, #52]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 800171a:	4313      	orrs	r3, r2
 800171c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800171e:	f000 f851 	bl	80017c4 <HAL_RCC_GetSysClockFreq>
 8001722:	4601      	mov	r1, r0
 8001724:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	091b      	lsrs	r3, r3, #4
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	4a09      	ldr	r2, [pc, #36]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	5cd3      	ldrb	r3, [r2, r3]
 8001732:	fa21 f303 	lsr.w	r3, r1, r3
 8001736:	4a08      	ldr	r2, [pc, #32]	; (8001758 <HAL_RCC_ClockConfig+0x1c0>)
 8001738:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800173a:	2004      	movs	r0, #4
 800173c:	f7ff fbf2 	bl	8000f24 <HAL_InitTick>

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023c00 	.word	0x40023c00
 8001750:	40023800 	.word	0x40023800
 8001754:	08009180 	.word	0x08009180
 8001758:	20000008 	.word	0x20000008

0800175c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <HAL_RCC_GetHCLKFreq+0x14>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000008 	.word	0x20000008

08001774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001778:	f7ff fff0 	bl	800175c <HAL_RCC_GetHCLKFreq>
 800177c:	4601      	mov	r1, r0
 800177e:	4b05      	ldr	r3, [pc, #20]	; (8001794 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	0a9b      	lsrs	r3, r3, #10
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	4a03      	ldr	r2, [pc, #12]	; (8001798 <HAL_RCC_GetPCLK1Freq+0x24>)
 800178a:	5cd3      	ldrb	r3, [r2, r3]
 800178c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001790:	4618      	mov	r0, r3
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40023800 	.word	0x40023800
 8001798:	08009190 	.word	0x08009190

0800179c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80017a0:	f7ff ffdc 	bl	800175c <HAL_RCC_GetHCLKFreq>
 80017a4:	4601      	mov	r1, r0
 80017a6:	4b05      	ldr	r3, [pc, #20]	; (80017bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	0b5b      	lsrs	r3, r3, #13
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	4a03      	ldr	r2, [pc, #12]	; (80017c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017b2:	5cd3      	ldrb	r3, [r2, r3]
 80017b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40023800 	.word	0x40023800
 80017c0:	08009190 	.word	0x08009190

080017c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017de:	4bc6      	ldr	r3, [pc, #792]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x334>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	2b0c      	cmp	r3, #12
 80017e8:	f200 817e 	bhi.w	8001ae8 <HAL_RCC_GetSysClockFreq+0x324>
 80017ec:	a201      	add	r2, pc, #4	; (adr r2, 80017f4 <HAL_RCC_GetSysClockFreq+0x30>)
 80017ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f2:	bf00      	nop
 80017f4:	08001829 	.word	0x08001829
 80017f8:	08001ae9 	.word	0x08001ae9
 80017fc:	08001ae9 	.word	0x08001ae9
 8001800:	08001ae9 	.word	0x08001ae9
 8001804:	0800182f 	.word	0x0800182f
 8001808:	08001ae9 	.word	0x08001ae9
 800180c:	08001ae9 	.word	0x08001ae9
 8001810:	08001ae9 	.word	0x08001ae9
 8001814:	08001835 	.word	0x08001835
 8001818:	08001ae9 	.word	0x08001ae9
 800181c:	08001ae9 	.word	0x08001ae9
 8001820:	08001ae9 	.word	0x08001ae9
 8001824:	08001991 	.word	0x08001991
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001828:	4bb4      	ldr	r3, [pc, #720]	; (8001afc <HAL_RCC_GetSysClockFreq+0x338>)
 800182a:	613b      	str	r3, [r7, #16]
       break;
 800182c:	e15f      	b.n	8001aee <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800182e:	4bb4      	ldr	r3, [pc, #720]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001830:	613b      	str	r3, [r7, #16]
      break;
 8001832:	e15c      	b.n	8001aee <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001834:	4bb0      	ldr	r3, [pc, #704]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800183c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800183e:	4bae      	ldr	r3, [pc, #696]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d04a      	beq.n	80018e0 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800184a:	4bab      	ldr	r3, [pc, #684]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x334>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	099b      	lsrs	r3, r3, #6
 8001850:	f04f 0400 	mov.w	r4, #0
 8001854:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	ea03 0501 	and.w	r5, r3, r1
 8001860:	ea04 0602 	and.w	r6, r4, r2
 8001864:	4629      	mov	r1, r5
 8001866:	4632      	mov	r2, r6
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	f04f 0400 	mov.w	r4, #0
 8001870:	0154      	lsls	r4, r2, #5
 8001872:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001876:	014b      	lsls	r3, r1, #5
 8001878:	4619      	mov	r1, r3
 800187a:	4622      	mov	r2, r4
 800187c:	1b49      	subs	r1, r1, r5
 800187e:	eb62 0206 	sbc.w	r2, r2, r6
 8001882:	f04f 0300 	mov.w	r3, #0
 8001886:	f04f 0400 	mov.w	r4, #0
 800188a:	0194      	lsls	r4, r2, #6
 800188c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001890:	018b      	lsls	r3, r1, #6
 8001892:	1a5b      	subs	r3, r3, r1
 8001894:	eb64 0402 	sbc.w	r4, r4, r2
 8001898:	f04f 0100 	mov.w	r1, #0
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	00e2      	lsls	r2, r4, #3
 80018a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018a6:	00d9      	lsls	r1, r3, #3
 80018a8:	460b      	mov	r3, r1
 80018aa:	4614      	mov	r4, r2
 80018ac:	195b      	adds	r3, r3, r5
 80018ae:	eb44 0406 	adc.w	r4, r4, r6
 80018b2:	f04f 0100 	mov.w	r1, #0
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	0262      	lsls	r2, r4, #9
 80018bc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80018c0:	0259      	lsls	r1, r3, #9
 80018c2:	460b      	mov	r3, r1
 80018c4:	4614      	mov	r4, r2
 80018c6:	4618      	mov	r0, r3
 80018c8:	4621      	mov	r1, r4
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f04f 0400 	mov.w	r4, #0
 80018d0:	461a      	mov	r2, r3
 80018d2:	4623      	mov	r3, r4
 80018d4:	f7ff f984 	bl	8000be0 <__aeabi_uldivmod>
 80018d8:	4603      	mov	r3, r0
 80018da:	460c      	mov	r4, r1
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	e049      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e0:	4b85      	ldr	r3, [pc, #532]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x334>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	099b      	lsrs	r3, r3, #6
 80018e6:	f04f 0400 	mov.w	r4, #0
 80018ea:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	ea03 0501 	and.w	r5, r3, r1
 80018f6:	ea04 0602 	and.w	r6, r4, r2
 80018fa:	4629      	mov	r1, r5
 80018fc:	4632      	mov	r2, r6
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	f04f 0400 	mov.w	r4, #0
 8001906:	0154      	lsls	r4, r2, #5
 8001908:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800190c:	014b      	lsls	r3, r1, #5
 800190e:	4619      	mov	r1, r3
 8001910:	4622      	mov	r2, r4
 8001912:	1b49      	subs	r1, r1, r5
 8001914:	eb62 0206 	sbc.w	r2, r2, r6
 8001918:	f04f 0300 	mov.w	r3, #0
 800191c:	f04f 0400 	mov.w	r4, #0
 8001920:	0194      	lsls	r4, r2, #6
 8001922:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001926:	018b      	lsls	r3, r1, #6
 8001928:	1a5b      	subs	r3, r3, r1
 800192a:	eb64 0402 	sbc.w	r4, r4, r2
 800192e:	f04f 0100 	mov.w	r1, #0
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	00e2      	lsls	r2, r4, #3
 8001938:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800193c:	00d9      	lsls	r1, r3, #3
 800193e:	460b      	mov	r3, r1
 8001940:	4614      	mov	r4, r2
 8001942:	195b      	adds	r3, r3, r5
 8001944:	eb44 0406 	adc.w	r4, r4, r6
 8001948:	f04f 0100 	mov.w	r1, #0
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	02a2      	lsls	r2, r4, #10
 8001952:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001956:	0299      	lsls	r1, r3, #10
 8001958:	460b      	mov	r3, r1
 800195a:	4614      	mov	r4, r2
 800195c:	4618      	mov	r0, r3
 800195e:	4621      	mov	r1, r4
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f04f 0400 	mov.w	r4, #0
 8001966:	461a      	mov	r2, r3
 8001968:	4623      	mov	r3, r4
 800196a:	f7ff f939 	bl	8000be0 <__aeabi_uldivmod>
 800196e:	4603      	mov	r3, r0
 8001970:	460c      	mov	r4, r1
 8001972:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001974:	4b60      	ldr	r3, [pc, #384]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	0c1b      	lsrs	r3, r3, #16
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	3301      	adds	r3, #1
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	fbb2 f3f3 	udiv	r3, r2, r3
 800198c:	613b      	str	r3, [r7, #16]
      break;
 800198e:	e0ae      	b.n	8001aee <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001990:	4b59      	ldr	r3, [pc, #356]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001998:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800199a:	4b57      	ldr	r3, [pc, #348]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x334>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d04a      	beq.n	8001a3c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a6:	4b54      	ldr	r3, [pc, #336]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x334>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	099b      	lsrs	r3, r3, #6
 80019ac:	f04f 0400 	mov.w	r4, #0
 80019b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	ea03 0501 	and.w	r5, r3, r1
 80019bc:	ea04 0602 	and.w	r6, r4, r2
 80019c0:	4629      	mov	r1, r5
 80019c2:	4632      	mov	r2, r6
 80019c4:	f04f 0300 	mov.w	r3, #0
 80019c8:	f04f 0400 	mov.w	r4, #0
 80019cc:	0154      	lsls	r4, r2, #5
 80019ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019d2:	014b      	lsls	r3, r1, #5
 80019d4:	4619      	mov	r1, r3
 80019d6:	4622      	mov	r2, r4
 80019d8:	1b49      	subs	r1, r1, r5
 80019da:	eb62 0206 	sbc.w	r2, r2, r6
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	f04f 0400 	mov.w	r4, #0
 80019e6:	0194      	lsls	r4, r2, #6
 80019e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019ec:	018b      	lsls	r3, r1, #6
 80019ee:	1a5b      	subs	r3, r3, r1
 80019f0:	eb64 0402 	sbc.w	r4, r4, r2
 80019f4:	f04f 0100 	mov.w	r1, #0
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	00e2      	lsls	r2, r4, #3
 80019fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a02:	00d9      	lsls	r1, r3, #3
 8001a04:	460b      	mov	r3, r1
 8001a06:	4614      	mov	r4, r2
 8001a08:	195b      	adds	r3, r3, r5
 8001a0a:	eb44 0406 	adc.w	r4, r4, r6
 8001a0e:	f04f 0100 	mov.w	r1, #0
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	0262      	lsls	r2, r4, #9
 8001a18:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001a1c:	0259      	lsls	r1, r3, #9
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4614      	mov	r4, r2
 8001a22:	4618      	mov	r0, r3
 8001a24:	4621      	mov	r1, r4
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f04f 0400 	mov.w	r4, #0
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4623      	mov	r3, r4
 8001a30:	f7ff f8d6 	bl	8000be0 <__aeabi_uldivmod>
 8001a34:	4603      	mov	r3, r0
 8001a36:	460c      	mov	r4, r1
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	e049      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a3c:	4b2e      	ldr	r3, [pc, #184]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	099b      	lsrs	r3, r3, #6
 8001a42:	f04f 0400 	mov.w	r4, #0
 8001a46:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	ea03 0501 	and.w	r5, r3, r1
 8001a52:	ea04 0602 	and.w	r6, r4, r2
 8001a56:	4629      	mov	r1, r5
 8001a58:	4632      	mov	r2, r6
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	f04f 0400 	mov.w	r4, #0
 8001a62:	0154      	lsls	r4, r2, #5
 8001a64:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a68:	014b      	lsls	r3, r1, #5
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4622      	mov	r2, r4
 8001a6e:	1b49      	subs	r1, r1, r5
 8001a70:	eb62 0206 	sbc.w	r2, r2, r6
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	f04f 0400 	mov.w	r4, #0
 8001a7c:	0194      	lsls	r4, r2, #6
 8001a7e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a82:	018b      	lsls	r3, r1, #6
 8001a84:	1a5b      	subs	r3, r3, r1
 8001a86:	eb64 0402 	sbc.w	r4, r4, r2
 8001a8a:	f04f 0100 	mov.w	r1, #0
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	00e2      	lsls	r2, r4, #3
 8001a94:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a98:	00d9      	lsls	r1, r3, #3
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4614      	mov	r4, r2
 8001a9e:	195b      	adds	r3, r3, r5
 8001aa0:	eb44 0406 	adc.w	r4, r4, r6
 8001aa4:	f04f 0100 	mov.w	r1, #0
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	02a2      	lsls	r2, r4, #10
 8001aae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001ab2:	0299      	lsls	r1, r3, #10
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4614      	mov	r4, r2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	4621      	mov	r1, r4
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f04f 0400 	mov.w	r4, #0
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	4623      	mov	r3, r4
 8001ac6:	f7ff f88b 	bl	8000be0 <__aeabi_uldivmod>
 8001aca:	4603      	mov	r3, r0
 8001acc:	460c      	mov	r4, r1
 8001ace:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	0f1b      	lsrs	r3, r3, #28
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae4:	613b      	str	r3, [r7, #16]
      break;
 8001ae6:	e002      	b.n	8001aee <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <HAL_RCC_GetSysClockFreq+0x338>)
 8001aea:	613b      	str	r3, [r7, #16]
      break;
 8001aec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aee:	693b      	ldr	r3, [r7, #16]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	371c      	adds	r7, #28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af8:	40023800 	.word	0x40023800
 8001afc:	00f42400 	.word	0x00f42400
 8001b00:	007a1200 	.word	0x007a1200

08001b04 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 8083 	beq.w	8001c24 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b1e:	4b95      	ldr	r3, [pc, #596]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d019      	beq.n	8001b5e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b2a:	4b92      	ldr	r3, [pc, #584]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d106      	bne.n	8001b44 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b36:	4b8f      	ldr	r3, [pc, #572]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b42:	d00c      	beq.n	8001b5e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b44:	4b8b      	ldr	r3, [pc, #556]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b4c:	2b0c      	cmp	r3, #12
 8001b4e:	d112      	bne.n	8001b76 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b50:	4b88      	ldr	r3, [pc, #544]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b5c:	d10b      	bne.n	8001b76 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5e:	4b85      	ldr	r3, [pc, #532]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d05b      	beq.n	8001c22 <HAL_RCC_OscConfig+0x11e>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d157      	bne.n	8001c22 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e216      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b7e:	d106      	bne.n	8001b8e <HAL_RCC_OscConfig+0x8a>
 8001b80:	4b7c      	ldr	r3, [pc, #496]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a7b      	ldr	r2, [pc, #492]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	e01d      	b.n	8001bca <HAL_RCC_OscConfig+0xc6>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b96:	d10c      	bne.n	8001bb2 <HAL_RCC_OscConfig+0xae>
 8001b98:	4b76      	ldr	r3, [pc, #472]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a75      	ldr	r2, [pc, #468]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001b9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	4b73      	ldr	r3, [pc, #460]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a72      	ldr	r2, [pc, #456]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	e00b      	b.n	8001bca <HAL_RCC_OscConfig+0xc6>
 8001bb2:	4b70      	ldr	r3, [pc, #448]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a6f      	ldr	r2, [pc, #444]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	4b6d      	ldr	r3, [pc, #436]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a6c      	ldr	r2, [pc, #432]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001bc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d013      	beq.n	8001bfa <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd2:	f7ff f9eb 	bl	8000fac <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bda:	f7ff f9e7 	bl	8000fac <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b64      	cmp	r3, #100	; 0x64
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e1db      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bec:	4b61      	ldr	r3, [pc, #388]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0f0      	beq.n	8001bda <HAL_RCC_OscConfig+0xd6>
 8001bf8:	e014      	b.n	8001c24 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfa:	f7ff f9d7 	bl	8000fac <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c02:	f7ff f9d3 	bl	8000fac <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b64      	cmp	r3, #100	; 0x64
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e1c7      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c14:	4b57      	ldr	r3, [pc, #348]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1f0      	bne.n	8001c02 <HAL_RCC_OscConfig+0xfe>
 8001c20:	e000      	b.n	8001c24 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c22:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d06f      	beq.n	8001d10 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c30:	4b50      	ldr	r3, [pc, #320]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 030c 	and.w	r3, r3, #12
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d017      	beq.n	8001c6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c3c:	4b4d      	ldr	r3, [pc, #308]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d105      	bne.n	8001c54 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c48:	4b4a      	ldr	r3, [pc, #296]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00b      	beq.n	8001c6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c54:	4b47      	ldr	r3, [pc, #284]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c5c:	2b0c      	cmp	r3, #12
 8001c5e:	d11c      	bne.n	8001c9a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c60:	4b44      	ldr	r3, [pc, #272]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d116      	bne.n	8001c9a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c6c:	4b41      	ldr	r3, [pc, #260]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_OscConfig+0x180>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e18f      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c84:	4b3b      	ldr	r3, [pc, #236]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	4938      	ldr	r1, [pc, #224]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c98:	e03a      	b.n	8001d10 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d020      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ca2:	4b35      	ldr	r3, [pc, #212]	; (8001d78 <HAL_RCC_OscConfig+0x274>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7ff f980 	bl	8000fac <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cb0:	f7ff f97c 	bl	8000fac <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e170      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc2:	4b2c      	ldr	r3, [pc, #176]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cce:	4b29      	ldr	r3, [pc, #164]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4925      	ldr	r1, [pc, #148]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]
 8001ce2:	e015      	b.n	8001d10 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ce4:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <HAL_RCC_OscConfig+0x274>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cea:	f7ff f95f 	bl	8000fac <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cf2:	f7ff f95b 	bl	8000fac <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e14f      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d04:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1f0      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d037      	beq.n	8001d8c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d016      	beq.n	8001d52 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d24:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <HAL_RCC_OscConfig+0x278>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2a:	f7ff f93f 	bl	8000fac <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d32:	f7ff f93b 	bl	8000fac <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e12f      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0f0      	beq.n	8001d32 <HAL_RCC_OscConfig+0x22e>
 8001d50:	e01c      	b.n	8001d8c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d52:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <HAL_RCC_OscConfig+0x278>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d58:	f7ff f928 	bl	8000fac <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d5e:	e00f      	b.n	8001d80 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d60:	f7ff f924 	bl	8000fac <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d908      	bls.n	8001d80 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e118      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4a0>
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800
 8001d78:	42470000 	.word	0x42470000
 8001d7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d80:	4b8a      	ldr	r3, [pc, #552]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001d82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1e9      	bne.n	8001d60 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 8097 	beq.w	8001ec8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d9e:	4b83      	ldr	r3, [pc, #524]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10f      	bne.n	8001dca <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b7f      	ldr	r3, [pc, #508]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	4a7e      	ldr	r2, [pc, #504]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dba:	4b7c      	ldr	r3, [pc, #496]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dca:	4b79      	ldr	r3, [pc, #484]	; (8001fb0 <HAL_RCC_OscConfig+0x4ac>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d118      	bne.n	8001e08 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dd6:	4b76      	ldr	r3, [pc, #472]	; (8001fb0 <HAL_RCC_OscConfig+0x4ac>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a75      	ldr	r2, [pc, #468]	; (8001fb0 <HAL_RCC_OscConfig+0x4ac>)
 8001ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001de2:	f7ff f8e3 	bl	8000fac <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dea:	f7ff f8df 	bl	8000fac <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e0d3      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfc:	4b6c      	ldr	r3, [pc, #432]	; (8001fb0 <HAL_RCC_OscConfig+0x4ac>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d106      	bne.n	8001e1e <HAL_RCC_OscConfig+0x31a>
 8001e10:	4b66      	ldr	r3, [pc, #408]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e14:	4a65      	ldr	r2, [pc, #404]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e1c:	e01c      	b.n	8001e58 <HAL_RCC_OscConfig+0x354>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b05      	cmp	r3, #5
 8001e24:	d10c      	bne.n	8001e40 <HAL_RCC_OscConfig+0x33c>
 8001e26:	4b61      	ldr	r3, [pc, #388]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2a:	4a60      	ldr	r2, [pc, #384]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001e2c:	f043 0304 	orr.w	r3, r3, #4
 8001e30:	6713      	str	r3, [r2, #112]	; 0x70
 8001e32:	4b5e      	ldr	r3, [pc, #376]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e36:	4a5d      	ldr	r2, [pc, #372]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e3e:	e00b      	b.n	8001e58 <HAL_RCC_OscConfig+0x354>
 8001e40:	4b5a      	ldr	r3, [pc, #360]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e44:	4a59      	ldr	r2, [pc, #356]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001e46:	f023 0301 	bic.w	r3, r3, #1
 8001e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e4c:	4b57      	ldr	r3, [pc, #348]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e50:	4a56      	ldr	r2, [pc, #344]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001e52:	f023 0304 	bic.w	r3, r3, #4
 8001e56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d015      	beq.n	8001e8c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e60:	f7ff f8a4 	bl	8000fac <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e66:	e00a      	b.n	8001e7e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e68:	f7ff f8a0 	bl	8000fac <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e092      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7e:	4b4b      	ldr	r3, [pc, #300]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0ee      	beq.n	8001e68 <HAL_RCC_OscConfig+0x364>
 8001e8a:	e014      	b.n	8001eb6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8c:	f7ff f88e 	bl	8000fac <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e92:	e00a      	b.n	8001eaa <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e94:	f7ff f88a 	bl	8000fac <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e07c      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eaa:	4b40      	ldr	r3, [pc, #256]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1ee      	bne.n	8001e94 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eb6:	7dfb      	ldrb	r3, [r7, #23]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d105      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ebc:	4b3b      	ldr	r3, [pc, #236]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	4a3a      	ldr	r2, [pc, #232]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001ec2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ec6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d068      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ed0:	4b36      	ldr	r3, [pc, #216]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 030c 	and.w	r3, r3, #12
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d060      	beq.n	8001f9e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d145      	bne.n	8001f70 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee4:	4b33      	ldr	r3, [pc, #204]	; (8001fb4 <HAL_RCC_OscConfig+0x4b0>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eea:	f7ff f85f 	bl	8000fac <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef2:	f7ff f85b 	bl	8000fac <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e04f      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f04:	4b29      	ldr	r3, [pc, #164]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1f0      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69da      	ldr	r2, [r3, #28]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	019b      	lsls	r3, r3, #6
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f26:	085b      	lsrs	r3, r3, #1
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	041b      	lsls	r3, r3, #16
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f32:	061b      	lsls	r3, r3, #24
 8001f34:	431a      	orrs	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	071b      	lsls	r3, r3, #28
 8001f3c:	491b      	ldr	r1, [pc, #108]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f42:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <HAL_RCC_OscConfig+0x4b0>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7ff f830 	bl	8000fac <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f50:	f7ff f82c 	bl	8000fac <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e020      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f62:	4b12      	ldr	r3, [pc, #72]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0x44c>
 8001f6e:	e018      	b.n	8001fa2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f70:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <HAL_RCC_OscConfig+0x4b0>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f76:	f7ff f819 	bl	8000fac <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f7e:	f7ff f815 	bl	8000fac <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e009      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f90:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_RCC_OscConfig+0x4a8>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f0      	bne.n	8001f7e <HAL_RCC_OscConfig+0x47a>
 8001f9c:	e001      	b.n	8001fa2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40007000 	.word	0x40007000
 8001fb4:	42470060 	.word	0x42470060

08001fb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e03f      	b.n	800204a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d106      	bne.n	8001fe4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f003 fef0 	bl	8005dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2224      	movs	r2, #36	; 0x24
 8001fe8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ffa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f829 	bl	8002054 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002010:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	695a      	ldr	r2, [r3, #20]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002020:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002030:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2220      	movs	r2, #32
 800203c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2220      	movs	r2, #32
 8002044:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002054:	b5b0      	push	{r4, r5, r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	431a      	orrs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	4313      	orrs	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002094:	f023 030c 	bic.w	r3, r3, #12
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	68f9      	ldr	r1, [r7, #12]
 800209e:	430b      	orrs	r3, r1
 80020a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	699a      	ldr	r2, [r3, #24]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020c0:	f040 80e4 	bne.w	800228c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4aab      	ldr	r2, [pc, #684]	; (8002378 <UART_SetConfig+0x324>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d004      	beq.n	80020d8 <UART_SetConfig+0x84>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4aaa      	ldr	r2, [pc, #680]	; (800237c <UART_SetConfig+0x328>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d16c      	bne.n	80021b2 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80020d8:	f7ff fb60 	bl	800179c <HAL_RCC_GetPCLK2Freq>
 80020dc:	4602      	mov	r2, r0
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	009a      	lsls	r2, r3, #2
 80020e6:	441a      	add	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f2:	4aa3      	ldr	r2, [pc, #652]	; (8002380 <UART_SetConfig+0x32c>)
 80020f4:	fba2 2303 	umull	r2, r3, r2, r3
 80020f8:	095b      	lsrs	r3, r3, #5
 80020fa:	011c      	lsls	r4, r3, #4
 80020fc:	f7ff fb4e 	bl	800179c <HAL_RCC_GetPCLK2Freq>
 8002100:	4602      	mov	r2, r0
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	009a      	lsls	r2, r3, #2
 800210a:	441a      	add	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	fbb2 f5f3 	udiv	r5, r2, r3
 8002116:	f7ff fb41 	bl	800179c <HAL_RCC_GetPCLK2Freq>
 800211a:	4602      	mov	r2, r0
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	009a      	lsls	r2, r3, #2
 8002124:	441a      	add	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002130:	4a93      	ldr	r2, [pc, #588]	; (8002380 <UART_SetConfig+0x32c>)
 8002132:	fba2 2303 	umull	r2, r3, r2, r3
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	2264      	movs	r2, #100	; 0x64
 800213a:	fb02 f303 	mul.w	r3, r2, r3
 800213e:	1aeb      	subs	r3, r5, r3
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	3332      	adds	r3, #50	; 0x32
 8002144:	4a8e      	ldr	r2, [pc, #568]	; (8002380 <UART_SetConfig+0x32c>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	095b      	lsrs	r3, r3, #5
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002152:	441c      	add	r4, r3
 8002154:	f7ff fb22 	bl	800179c <HAL_RCC_GetPCLK2Freq>
 8002158:	4602      	mov	r2, r0
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	009a      	lsls	r2, r3, #2
 8002162:	441a      	add	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	fbb2 f5f3 	udiv	r5, r2, r3
 800216e:	f7ff fb15 	bl	800179c <HAL_RCC_GetPCLK2Freq>
 8002172:	4602      	mov	r2, r0
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	009a      	lsls	r2, r3, #2
 800217c:	441a      	add	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	fbb2 f3f3 	udiv	r3, r2, r3
 8002188:	4a7d      	ldr	r2, [pc, #500]	; (8002380 <UART_SetConfig+0x32c>)
 800218a:	fba2 2303 	umull	r2, r3, r2, r3
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	2264      	movs	r2, #100	; 0x64
 8002192:	fb02 f303 	mul.w	r3, r2, r3
 8002196:	1aeb      	subs	r3, r5, r3
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	3332      	adds	r3, #50	; 0x32
 800219c:	4a78      	ldr	r2, [pc, #480]	; (8002380 <UART_SetConfig+0x32c>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	f003 0207 	and.w	r2, r3, #7
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4422      	add	r2, r4
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	e154      	b.n	800245c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80021b2:	f7ff fadf 	bl	8001774 <HAL_RCC_GetPCLK1Freq>
 80021b6:	4602      	mov	r2, r0
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	009a      	lsls	r2, r3, #2
 80021c0:	441a      	add	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021cc:	4a6c      	ldr	r2, [pc, #432]	; (8002380 <UART_SetConfig+0x32c>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	095b      	lsrs	r3, r3, #5
 80021d4:	011c      	lsls	r4, r3, #4
 80021d6:	f7ff facd 	bl	8001774 <HAL_RCC_GetPCLK1Freq>
 80021da:	4602      	mov	r2, r0
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	009a      	lsls	r2, r3, #2
 80021e4:	441a      	add	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	fbb2 f5f3 	udiv	r5, r2, r3
 80021f0:	f7ff fac0 	bl	8001774 <HAL_RCC_GetPCLK1Freq>
 80021f4:	4602      	mov	r2, r0
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	009a      	lsls	r2, r3, #2
 80021fe:	441a      	add	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	fbb2 f3f3 	udiv	r3, r2, r3
 800220a:	4a5d      	ldr	r2, [pc, #372]	; (8002380 <UART_SetConfig+0x32c>)
 800220c:	fba2 2303 	umull	r2, r3, r2, r3
 8002210:	095b      	lsrs	r3, r3, #5
 8002212:	2264      	movs	r2, #100	; 0x64
 8002214:	fb02 f303 	mul.w	r3, r2, r3
 8002218:	1aeb      	subs	r3, r5, r3
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	3332      	adds	r3, #50	; 0x32
 800221e:	4a58      	ldr	r2, [pc, #352]	; (8002380 <UART_SetConfig+0x32c>)
 8002220:	fba2 2303 	umull	r2, r3, r2, r3
 8002224:	095b      	lsrs	r3, r3, #5
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800222c:	441c      	add	r4, r3
 800222e:	f7ff faa1 	bl	8001774 <HAL_RCC_GetPCLK1Freq>
 8002232:	4602      	mov	r2, r0
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	009a      	lsls	r2, r3, #2
 800223c:	441a      	add	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	fbb2 f5f3 	udiv	r5, r2, r3
 8002248:	f7ff fa94 	bl	8001774 <HAL_RCC_GetPCLK1Freq>
 800224c:	4602      	mov	r2, r0
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	009a      	lsls	r2, r3, #2
 8002256:	441a      	add	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002262:	4a47      	ldr	r2, [pc, #284]	; (8002380 <UART_SetConfig+0x32c>)
 8002264:	fba2 2303 	umull	r2, r3, r2, r3
 8002268:	095b      	lsrs	r3, r3, #5
 800226a:	2264      	movs	r2, #100	; 0x64
 800226c:	fb02 f303 	mul.w	r3, r2, r3
 8002270:	1aeb      	subs	r3, r5, r3
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	3332      	adds	r3, #50	; 0x32
 8002276:	4a42      	ldr	r2, [pc, #264]	; (8002380 <UART_SetConfig+0x32c>)
 8002278:	fba2 2303 	umull	r2, r3, r2, r3
 800227c:	095b      	lsrs	r3, r3, #5
 800227e:	f003 0207 	and.w	r2, r3, #7
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4422      	add	r2, r4
 8002288:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800228a:	e0e7      	b.n	800245c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a39      	ldr	r2, [pc, #228]	; (8002378 <UART_SetConfig+0x324>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d004      	beq.n	80022a0 <UART_SetConfig+0x24c>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a38      	ldr	r2, [pc, #224]	; (800237c <UART_SetConfig+0x328>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d171      	bne.n	8002384 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80022a0:	f7ff fa7c 	bl	800179c <HAL_RCC_GetPCLK2Freq>
 80022a4:	4602      	mov	r2, r0
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	009a      	lsls	r2, r3, #2
 80022ae:	441a      	add	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ba:	4a31      	ldr	r2, [pc, #196]	; (8002380 <UART_SetConfig+0x32c>)
 80022bc:	fba2 2303 	umull	r2, r3, r2, r3
 80022c0:	095b      	lsrs	r3, r3, #5
 80022c2:	011c      	lsls	r4, r3, #4
 80022c4:	f7ff fa6a 	bl	800179c <HAL_RCC_GetPCLK2Freq>
 80022c8:	4602      	mov	r2, r0
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	009a      	lsls	r2, r3, #2
 80022d2:	441a      	add	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	fbb2 f5f3 	udiv	r5, r2, r3
 80022de:	f7ff fa5d 	bl	800179c <HAL_RCC_GetPCLK2Freq>
 80022e2:	4602      	mov	r2, r0
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	009a      	lsls	r2, r3, #2
 80022ec:	441a      	add	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f8:	4a21      	ldr	r2, [pc, #132]	; (8002380 <UART_SetConfig+0x32c>)
 80022fa:	fba2 2303 	umull	r2, r3, r2, r3
 80022fe:	095b      	lsrs	r3, r3, #5
 8002300:	2264      	movs	r2, #100	; 0x64
 8002302:	fb02 f303 	mul.w	r3, r2, r3
 8002306:	1aeb      	subs	r3, r5, r3
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	3332      	adds	r3, #50	; 0x32
 800230c:	4a1c      	ldr	r2, [pc, #112]	; (8002380 <UART_SetConfig+0x32c>)
 800230e:	fba2 2303 	umull	r2, r3, r2, r3
 8002312:	095b      	lsrs	r3, r3, #5
 8002314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002318:	441c      	add	r4, r3
 800231a:	f7ff fa3f 	bl	800179c <HAL_RCC_GetPCLK2Freq>
 800231e:	4602      	mov	r2, r0
 8002320:	4613      	mov	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	009a      	lsls	r2, r3, #2
 8002328:	441a      	add	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	fbb2 f5f3 	udiv	r5, r2, r3
 8002334:	f7ff fa32 	bl	800179c <HAL_RCC_GetPCLK2Freq>
 8002338:	4602      	mov	r2, r0
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	009a      	lsls	r2, r3, #2
 8002342:	441a      	add	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	fbb2 f3f3 	udiv	r3, r2, r3
 800234e:	4a0c      	ldr	r2, [pc, #48]	; (8002380 <UART_SetConfig+0x32c>)
 8002350:	fba2 2303 	umull	r2, r3, r2, r3
 8002354:	095b      	lsrs	r3, r3, #5
 8002356:	2264      	movs	r2, #100	; 0x64
 8002358:	fb02 f303 	mul.w	r3, r2, r3
 800235c:	1aeb      	subs	r3, r5, r3
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	3332      	adds	r3, #50	; 0x32
 8002362:	4a07      	ldr	r2, [pc, #28]	; (8002380 <UART_SetConfig+0x32c>)
 8002364:	fba2 2303 	umull	r2, r3, r2, r3
 8002368:	095b      	lsrs	r3, r3, #5
 800236a:	f003 020f 	and.w	r2, r3, #15
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4422      	add	r2, r4
 8002374:	609a      	str	r2, [r3, #8]
 8002376:	e071      	b.n	800245c <UART_SetConfig+0x408>
 8002378:	40011000 	.word	0x40011000
 800237c:	40011400 	.word	0x40011400
 8002380:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002384:	f7ff f9f6 	bl	8001774 <HAL_RCC_GetPCLK1Freq>
 8002388:	4602      	mov	r2, r0
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	009a      	lsls	r2, r3, #2
 8002392:	441a      	add	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	fbb2 f3f3 	udiv	r3, r2, r3
 800239e:	4a31      	ldr	r2, [pc, #196]	; (8002464 <UART_SetConfig+0x410>)
 80023a0:	fba2 2303 	umull	r2, r3, r2, r3
 80023a4:	095b      	lsrs	r3, r3, #5
 80023a6:	011c      	lsls	r4, r3, #4
 80023a8:	f7ff f9e4 	bl	8001774 <HAL_RCC_GetPCLK1Freq>
 80023ac:	4602      	mov	r2, r0
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	009a      	lsls	r2, r3, #2
 80023b6:	441a      	add	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	fbb2 f5f3 	udiv	r5, r2, r3
 80023c2:	f7ff f9d7 	bl	8001774 <HAL_RCC_GetPCLK1Freq>
 80023c6:	4602      	mov	r2, r0
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	009a      	lsls	r2, r3, #2
 80023d0:	441a      	add	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023dc:	4a21      	ldr	r2, [pc, #132]	; (8002464 <UART_SetConfig+0x410>)
 80023de:	fba2 2303 	umull	r2, r3, r2, r3
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	2264      	movs	r2, #100	; 0x64
 80023e6:	fb02 f303 	mul.w	r3, r2, r3
 80023ea:	1aeb      	subs	r3, r5, r3
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	3332      	adds	r3, #50	; 0x32
 80023f0:	4a1c      	ldr	r2, [pc, #112]	; (8002464 <UART_SetConfig+0x410>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023fc:	441c      	add	r4, r3
 80023fe:	f7ff f9b9 	bl	8001774 <HAL_RCC_GetPCLK1Freq>
 8002402:	4602      	mov	r2, r0
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	009a      	lsls	r2, r3, #2
 800240c:	441a      	add	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	fbb2 f5f3 	udiv	r5, r2, r3
 8002418:	f7ff f9ac 	bl	8001774 <HAL_RCC_GetPCLK1Freq>
 800241c:	4602      	mov	r2, r0
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	009a      	lsls	r2, r3, #2
 8002426:	441a      	add	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002432:	4a0c      	ldr	r2, [pc, #48]	; (8002464 <UART_SetConfig+0x410>)
 8002434:	fba2 2303 	umull	r2, r3, r2, r3
 8002438:	095b      	lsrs	r3, r3, #5
 800243a:	2264      	movs	r2, #100	; 0x64
 800243c:	fb02 f303 	mul.w	r3, r2, r3
 8002440:	1aeb      	subs	r3, r5, r3
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	3332      	adds	r3, #50	; 0x32
 8002446:	4a07      	ldr	r2, [pc, #28]	; (8002464 <UART_SetConfig+0x410>)
 8002448:	fba2 2303 	umull	r2, r3, r2, r3
 800244c:	095b      	lsrs	r3, r3, #5
 800244e:	f003 020f 	and.w	r2, r3, #15
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4422      	add	r2, r4
 8002458:	609a      	str	r2, [r3, #8]
}
 800245a:	e7ff      	b.n	800245c <UART_SetConfig+0x408>
 800245c:	bf00      	nop
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bdb0      	pop	{r4, r5, r7, pc}
 8002464:	51eb851f 	.word	0x51eb851f

08002468 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002476:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	431a      	orrs	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <LL_ADC_INJ_SetSequencerLength>:
  *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
  *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	bf0c      	ite	eq
 80024c8:	2301      	moveq	r3, #1
 80024ca:	2300      	movne	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80024dc:	b590      	push	{r4, r7, lr}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80024e6:	2300      	movs	r3, #0
 80024e8:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 80024ea:	481c      	ldr	r0, [pc, #112]	; (800255c <LL_ADC_CommonInit+0x80>)
 80024ec:	f7ff ffe2 	bl	80024b4 <LL_ADC_IsEnabled>
 80024f0:	4604      	mov	r4, r0
 80024f2:	481b      	ldr	r0, [pc, #108]	; (8002560 <LL_ADC_CommonInit+0x84>)
 80024f4:	f7ff ffde 	bl	80024b4 <LL_ADC_IsEnabled>
 80024f8:	4603      	mov	r3, r0
 80024fa:	431c      	orrs	r4, r3
 80024fc:	4819      	ldr	r0, [pc, #100]	; (8002564 <LL_ADC_CommonInit+0x88>)
 80024fe:	f7ff ffd9 	bl	80024b4 <LL_ADC_IsEnabled>
 8002502:	4603      	mov	r3, r0
 8002504:	4323      	orrs	r3, r4
 8002506:	2b00      	cmp	r3, #0
 8002508:	d120      	bne.n	800254c <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d012      	beq.n	8002538 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	4b14      	ldr	r3, [pc, #80]	; (8002568 <LL_ADC_CommonInit+0x8c>)
 8002518:	4013      	ands	r3, r2
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	6811      	ldr	r1, [r2, #0]
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	6852      	ldr	r2, [r2, #4]
 8002522:	4311      	orrs	r1, r2
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	6892      	ldr	r2, [r2, #8]
 8002528:	4311      	orrs	r1, r2
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	68d2      	ldr	r2, [r2, #12]
 800252e:	430a      	orrs	r2, r1
 8002530:	431a      	orrs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	e00b      	b.n	8002550 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <LL_ADC_CommonInit+0x8c>)
 800253e:	4013      	ands	r3, r2
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	431a      	orrs	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	e001      	b.n	8002550 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8002550:	7bfb      	ldrb	r3, [r7, #15]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	bd90      	pop	{r4, r7, pc}
 800255a:	bf00      	nop
 800255c:	40012000 	.word	0x40012000
 8002560:	40012100 	.word	0x40012100
 8002564:	40012200 	.word	0x40012200
 8002568:	fffc10e0 	.word	0xfffc10e0

0800256c <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002576:	2300      	movs	r3, #0
 8002578:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7ff ff9a 	bl	80024b4 <LL_ADC_IsEnabled>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d117      	bne.n	80025b6 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800258e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	6811      	ldr	r1, [r2, #0]
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	6892      	ldr	r2, [r2, #8]
 800259a:	430a      	orrs	r2, r1
 800259c:	431a      	orrs	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	e001      	b.n	80025ba <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80025ce:	2300      	movs	r3, #0
 80025d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff ff6e 	bl	80024b4 <LL_ADC_IsEnabled>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d131      	bne.n	8002642 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00c      	beq.n	8002600 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6859      	ldr	r1, [r3, #4]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	430b      	orrs	r3, r1
 80025f8:	431a      	orrs	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	e008      	b.n	8002612 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	431a      	orrs	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <LL_ADC_REG_Init+0x8c>)
 8002618:	4013      	ands	r3, r2
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	6812      	ldr	r2, [r2, #0]
 800261e:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	68d2      	ldr	r2, [r2, #12]
 8002626:	4311      	orrs	r1, r2
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	6912      	ldr	r2, [r2, #16]
 800262c:	430a      	orrs	r2, r1
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	4619      	mov	r1, r3
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff ff14 	bl	8002468 <LL_ADC_REG_SetSequencerLength>
 8002640:	e001      	b.n	8002646 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002646:	7bfb      	ldrb	r3, [r7, #15]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	c0fffcfd 	.word	0xc0fffcfd

08002654 <LL_ADC_INJ_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_INJ_Init(ADC_TypeDef *ADCx, LL_ADC_INJ_InitTypeDef *ADC_INJ_InitStruct)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800265e:	2300      	movs	r3, #0
 8002660:	73fb      	strb	r3, [r7, #15]
  }
  assert_param(IS_LL_ADC_INJ_TRIG_AUTO(ADC_INJ_InitStruct->TrigAuto));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff ff26 	bl	80024b4 <LL_ADC_IsEnabled>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d12b      	bne.n	80026c6 <LL_ADC_INJ_Init+0x72>
    /*    - Set ADC group injected conversion trigger: independent or         */
    /*      from ADC group regular                                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_INJ_StartConversionExtTrig().      */
    if(ADC_INJ_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00c      	beq.n	8002690 <LL_ADC_INJ_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f423 52a0 	bic.w	r2, r3, #5120	; 0x1400
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	6899      	ldr	r1, [r3, #8]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	430b      	orrs	r3, r1
 8002688:	431a      	orrs	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	e008      	b.n	80026a2 <LL_ADC_INJ_Init+0x4e>
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f423 52a0 	bic.w	r2, r3, #5120	; 0x1400
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	431a      	orrs	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	605a      	str	r2, [r3, #4]
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_INJ_SetSequencerLength(ADCx, ADC_INJ_InitStruct->SequencerLength);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4619      	mov	r1, r3
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7ff fee5 	bl	800248e <LL_ADC_INJ_SetSequencerLength>
 80026c4:	e001      	b.n	80026ca <LL_ADC_INJ_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <LL_EXTI_EnableIT_0_31+0x20>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4904      	ldr	r1, [pc, #16]	; (80026f4 <LL_EXTI_EnableIT_0_31+0x20>)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	600b      	str	r3, [r1, #0]
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	40013c00 	.word	0x40013c00

080026f8 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002700:	4b06      	ldr	r3, [pc, #24]	; (800271c <LL_EXTI_DisableIT_0_31+0x24>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	43db      	mvns	r3, r3
 8002708:	4904      	ldr	r1, [pc, #16]	; (800271c <LL_EXTI_DisableIT_0_31+0x24>)
 800270a:	4013      	ands	r3, r2
 800270c:	600b      	str	r3, [r1, #0]
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40013c00 	.word	0x40013c00

08002720 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <LL_EXTI_EnableEvent_0_31+0x20>)
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	4904      	ldr	r1, [pc, #16]	; (8002740 <LL_EXTI_EnableEvent_0_31+0x20>)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4313      	orrs	r3, r2
 8002732:	604b      	str	r3, [r1, #4]

}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	40013c00 	.word	0x40013c00

08002744 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <LL_EXTI_DisableEvent_0_31+0x24>)
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	43db      	mvns	r3, r3
 8002754:	4904      	ldr	r1, [pc, #16]	; (8002768 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002756:	4013      	ands	r3, r2
 8002758:	604b      	str	r3, [r1, #4]
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40013c00 	.word	0x40013c00

0800276c <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	4904      	ldr	r1, [pc, #16]	; (800278c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4313      	orrs	r3, r2
 800277e:	608b      	str	r3, [r1, #8]

}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	40013c00 	.word	0x40013c00

08002790 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	43db      	mvns	r3, r3
 80027a0:	4904      	ldr	r1, [pc, #16]	; (80027b4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]

}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40013c00 	.word	0x40013c00

080027b8 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	4904      	ldr	r1, [pc, #16]	; (80027d8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	60cb      	str	r3, [r1, #12]
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	40013c00 	.word	0x40013c00

080027dc <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80027e4:	4b06      	ldr	r3, [pc, #24]	; (8002800 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80027e6:	68da      	ldr	r2, [r3, #12]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	43db      	mvns	r3, r3
 80027ec:	4904      	ldr	r1, [pc, #16]	; (8002800 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	60cb      	str	r3, [r1, #12]
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40013c00 	.word	0x40013c00

08002804 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800280c:	2300      	movs	r3, #0
 800280e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	791b      	ldrb	r3, [r3, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d060      	beq.n	80028da <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d067      	beq.n	80028f0 <LL_EXTI_Init+0xec>
    {
      switch (EXTI_InitStruct->Mode)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	795b      	ldrb	r3, [r3, #5]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d00e      	beq.n	8002846 <LL_EXTI_Init+0x42>
 8002828:	2b02      	cmp	r3, #2
 800282a:	d017      	beq.n	800285c <LL_EXTI_Init+0x58>
 800282c:	2b00      	cmp	r3, #0
 800282e:	d120      	bne.n	8002872 <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ff85 	bl	8002744 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff ff48 	bl	80026d4 <LL_EXTI_EnableIT_0_31>
          break;
 8002844:	e018      	b.n	8002878 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff ff54 	bl	80026f8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff ff63 	bl	8002720 <LL_EXTI_EnableEvent_0_31>
          break;
 800285a:	e00d      	b.n	8002878 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff37 	bl	80026d4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff ff58 	bl	8002720 <LL_EXTI_EnableEvent_0_31>
          break;
 8002870:	e002      	b.n	8002878 <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	73fb      	strb	r3, [r7, #15]
          break;
 8002876:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	799b      	ldrb	r3, [r3, #6]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d037      	beq.n	80028f0 <LL_EXTI_Init+0xec>
      {
        switch (EXTI_InitStruct->Trigger)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	799b      	ldrb	r3, [r3, #6]
 8002884:	2b02      	cmp	r3, #2
 8002886:	d00e      	beq.n	80028a6 <LL_EXTI_Init+0xa2>
 8002888:	2b03      	cmp	r3, #3
 800288a:	d017      	beq.n	80028bc <LL_EXTI_Init+0xb8>
 800288c:	2b01      	cmp	r3, #1
 800288e:	d120      	bne.n	80028d2 <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff ffa1 	bl	80027dc <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff ff64 	bl	800276c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80028a4:	e025      	b.n	80028f2 <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff ff70 	bl	8002790 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff ff7f 	bl	80027b8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80028ba:	e01a      	b.n	80028f2 <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff ff53 	bl	800276c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff ff74 	bl	80027b8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80028d0:	e00f      	b.n	80028f2 <LL_EXTI_Init+0xee>
          default:
            status = ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	73fb      	strb	r3, [r7, #15]
            break;
 80028d6:	bf00      	nop
 80028d8:	e00b      	b.n	80028f2 <LL_EXTI_Init+0xee>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff ff0a 	bl	80026f8 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff2b 	bl	8002744 <LL_EXTI_DisableEvent_0_31>
 80028ee:	e000      	b.n	80028f2 <LL_EXTI_Init+0xee>
      }
 80028f0:	bf00      	nop
  }
  return status;
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b089      	sub	sp, #36	; 0x24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	fa93 f3a3 	rbit	r3, r3
 8002916:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	fab3 f383 	clz	r3, r3
 800291e:	b2db      	uxtb	r3, r3
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	2103      	movs	r1, #3
 8002924:	fa01 f303 	lsl.w	r3, r1, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	401a      	ands	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	61bb      	str	r3, [r7, #24]
  return result;
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	fab3 f383 	clz	r3, r3
 800293e:	b2db      	uxtb	r3, r3
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	fa01 f303 	lsl.w	r3, r1, r3
 8002948:	431a      	orrs	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	601a      	str	r2, [r3, #0]
}
 800294e:	bf00      	nop
 8002950:	3724      	adds	r7, #36	; 0x24
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800295a:	b480      	push	{r7}
 800295c:	b085      	sub	sp, #20
 800295e:	af00      	add	r7, sp, #0
 8002960:	60f8      	str	r0, [r7, #12]
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	43db      	mvns	r3, r3
 800296e:	401a      	ands	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	431a      	orrs	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	605a      	str	r2, [r3, #4]
}
 800297e:	bf00      	nop
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800298a:	b480      	push	{r7}
 800298c:	b089      	sub	sp, #36	; 0x24
 800298e:	af00      	add	r7, sp, #0
 8002990:	60f8      	str	r0, [r7, #12]
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	fa93 f3a3 	rbit	r3, r3
 80029a4:	613b      	str	r3, [r7, #16]
  return result;
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	fab3 f383 	clz	r3, r3
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	2103      	movs	r1, #3
 80029b2:	fa01 f303 	lsl.w	r3, r1, r3
 80029b6:	43db      	mvns	r3, r3
 80029b8:	401a      	ands	r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	fa93 f3a3 	rbit	r3, r3
 80029c4:	61bb      	str	r3, [r7, #24]
  return result;
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	fab3 f383 	clz	r3, r3
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	fa01 f303 	lsl.w	r3, r1, r3
 80029d6:	431a      	orrs	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80029dc:	bf00      	nop
 80029de:	3724      	adds	r7, #36	; 0x24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b089      	sub	sp, #36	; 0x24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	613b      	str	r3, [r7, #16]
  return result;
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	fab3 f383 	clz	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	2103      	movs	r1, #3
 8002a10:	fa01 f303 	lsl.w	r3, r1, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	401a      	ands	r2, r3
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	61bb      	str	r3, [r7, #24]
  return result;
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	fab3 f383 	clz	r3, r3
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	fa01 f303 	lsl.w	r3, r1, r3
 8002a34:	431a      	orrs	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	60da      	str	r2, [r3, #12]
}
 8002a3a:	bf00      	nop
 8002a3c:	3724      	adds	r7, #36	; 0x24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b089      	sub	sp, #36	; 0x24
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	60f8      	str	r0, [r7, #12]
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6a1a      	ldr	r2, [r3, #32]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	fa93 f3a3 	rbit	r3, r3
 8002a60:	613b      	str	r3, [r7, #16]
  return result;
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	fab3 f383 	clz	r3, r3
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	210f      	movs	r1, #15
 8002a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a72:	43db      	mvns	r3, r3
 8002a74:	401a      	ands	r2, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	fa93 f3a3 	rbit	r3, r3
 8002a80:	61bb      	str	r3, [r7, #24]
  return result;
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	fab3 f383 	clz	r3, r3
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a92:	431a      	orrs	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002a98:	bf00      	nop
 8002a9a:	3724      	adds	r7, #36	; 0x24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b089      	sub	sp, #36	; 0x24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	0a1b      	lsrs	r3, r3, #8
 8002ab8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	fa93 f3a3 	rbit	r3, r3
 8002ac0:	613b      	str	r3, [r7, #16]
  return result;
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	fab3 f383 	clz	r3, r3
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	210f      	movs	r1, #15
 8002ace:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	401a      	ands	r2, r3
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	0a1b      	lsrs	r3, r3, #8
 8002ada:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	fa93 f3a3 	rbit	r3, r3
 8002ae2:	61bb      	str	r3, [r7, #24]
  return result;
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	fa01 f303 	lsl.w	r3, r1, r3
 8002af4:	431a      	orrs	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002afa:	bf00      	nop
 8002afc:	3724      	adds	r7, #36	; 0x24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b088      	sub	sp, #32
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	fa93 f3a3 	rbit	r3, r3
 8002b24:	613b      	str	r3, [r7, #16]
  return result;
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	fab3 f383 	clz	r3, r3
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002b30:	e049      	b.n	8002bc6 <LL_GPIO_Init+0xc0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	2101      	movs	r1, #1
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d03b      	beq.n	8002bc0 <LL_GPIO_Init+0xba>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	69b9      	ldr	r1, [r7, #24]
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7ff fed3 	bl	80028fc <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d003      	beq.n	8002b66 <LL_GPIO_Init+0x60>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d106      	bne.n	8002b74 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	69b9      	ldr	r1, [r7, #24]
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7ff ff0b 	bl	800298a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	69b9      	ldr	r1, [r7, #24]
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f7ff ff33 	bl	80029e8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d11a      	bne.n	8002bc0 <LL_GPIO_Init+0xba>
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	fa93 f3a3 	rbit	r3, r3
 8002b94:	60bb      	str	r3, [r7, #8]
  return result;
 8002b96:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002b98:	fab3 f383 	clz	r3, r3
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b07      	cmp	r3, #7
 8002ba0:	d807      	bhi.n	8002bb2 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	69b9      	ldr	r1, [r7, #24]
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7ff ff4b 	bl	8002a46 <LL_GPIO_SetAFPin_0_7>
 8002bb0:	e006      	b.n	8002bc0 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	69b9      	ldr	r1, [r7, #24]
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff ff72 	bl	8002aa4 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1ae      	bne.n	8002b32 <LL_GPIO_Init+0x2c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d003      	beq.n	8002be4 <LL_GPIO_Init+0xde>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d107      	bne.n	8002bf4 <LL_GPIO_Init+0xee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	6819      	ldr	r1, [r3, #0]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	461a      	mov	r2, r3
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7ff feb3 	bl	800295a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3720      	adds	r7, #32
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	f043 0201 	orr.w	r2, r3, #1
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	615a      	str	r2, [r3, #20]
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
	...

08002ce4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a3d      	ldr	r2, [pc, #244]	; (8002dec <LL_TIM_Init+0x108>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d013      	beq.n	8002d24 <LL_TIM_Init+0x40>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d02:	d00f      	beq.n	8002d24 <LL_TIM_Init+0x40>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a3a      	ldr	r2, [pc, #232]	; (8002df0 <LL_TIM_Init+0x10c>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d00b      	beq.n	8002d24 <LL_TIM_Init+0x40>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a39      	ldr	r2, [pc, #228]	; (8002df4 <LL_TIM_Init+0x110>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d007      	beq.n	8002d24 <LL_TIM_Init+0x40>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a38      	ldr	r2, [pc, #224]	; (8002df8 <LL_TIM_Init+0x114>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d003      	beq.n	8002d24 <LL_TIM_Init+0x40>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a37      	ldr	r2, [pc, #220]	; (8002dfc <LL_TIM_Init+0x118>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d106      	bne.n	8002d32 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a2d      	ldr	r2, [pc, #180]	; (8002dec <LL_TIM_Init+0x108>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d02b      	beq.n	8002d92 <LL_TIM_Init+0xae>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d40:	d027      	beq.n	8002d92 <LL_TIM_Init+0xae>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a2a      	ldr	r2, [pc, #168]	; (8002df0 <LL_TIM_Init+0x10c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d023      	beq.n	8002d92 <LL_TIM_Init+0xae>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a29      	ldr	r2, [pc, #164]	; (8002df4 <LL_TIM_Init+0x110>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d01f      	beq.n	8002d92 <LL_TIM_Init+0xae>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a28      	ldr	r2, [pc, #160]	; (8002df8 <LL_TIM_Init+0x114>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d01b      	beq.n	8002d92 <LL_TIM_Init+0xae>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a27      	ldr	r2, [pc, #156]	; (8002dfc <LL_TIM_Init+0x118>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d017      	beq.n	8002d92 <LL_TIM_Init+0xae>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a26      	ldr	r2, [pc, #152]	; (8002e00 <LL_TIM_Init+0x11c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d013      	beq.n	8002d92 <LL_TIM_Init+0xae>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a25      	ldr	r2, [pc, #148]	; (8002e04 <LL_TIM_Init+0x120>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d00f      	beq.n	8002d92 <LL_TIM_Init+0xae>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a24      	ldr	r2, [pc, #144]	; (8002e08 <LL_TIM_Init+0x124>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00b      	beq.n	8002d92 <LL_TIM_Init+0xae>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a23      	ldr	r2, [pc, #140]	; (8002e0c <LL_TIM_Init+0x128>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d007      	beq.n	8002d92 <LL_TIM_Init+0xae>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a22      	ldr	r2, [pc, #136]	; (8002e10 <LL_TIM_Init+0x12c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d003      	beq.n	8002d92 <LL_TIM_Init+0xae>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a21      	ldr	r2, [pc, #132]	; (8002e14 <LL_TIM_Init+0x130>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d106      	bne.n	8002da0 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	4619      	mov	r1, r3
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7ff ff34 	bl	8002c1a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	881b      	ldrh	r3, [r3, #0]
 8002db6:	4619      	mov	r1, r3
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f7ff ff20 	bl	8002bfe <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a0a      	ldr	r2, [pc, #40]	; (8002dec <LL_TIM_Init+0x108>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d003      	beq.n	8002dce <LL_TIM_Init+0xea>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a0c      	ldr	r2, [pc, #48]	; (8002dfc <LL_TIM_Init+0x118>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d105      	bne.n	8002dda <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	7c1b      	ldrb	r3, [r3, #16]
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff ff2e 	bl	8002c36 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7ff ff71 	bl	8002cc2 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40010000 	.word	0x40010000
 8002df0:	40000400 	.word	0x40000400
 8002df4:	40000800 	.word	0x40000800
 8002df8:	40000c00 	.word	0x40000c00
 8002dfc:	40010400 	.word	0x40010400
 8002e00:	40014000 	.word	0x40014000
 8002e04:	40014400 	.word	0x40014400
 8002e08:	40014800 	.word	0x40014800
 8002e0c:	40001800 	.word	0x40001800
 8002e10:	40001c00 	.word	0x40001c00
 8002e14:	40002000 	.word	0x40002000

08002e18 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2b10      	cmp	r3, #16
 8002e2c:	d012      	beq.n	8002e54 <LL_TIM_OC_Init+0x3c>
 8002e2e:	2b10      	cmp	r3, #16
 8002e30:	d802      	bhi.n	8002e38 <LL_TIM_OC_Init+0x20>
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d007      	beq.n	8002e46 <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002e36:	e022      	b.n	8002e7e <LL_TIM_OC_Init+0x66>
  switch (Channel)
 8002e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e3c:	d011      	beq.n	8002e62 <LL_TIM_OC_Init+0x4a>
 8002e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e42:	d015      	beq.n	8002e70 <LL_TIM_OC_Init+0x58>
      break;
 8002e44:	e01b      	b.n	8002e7e <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 f867 	bl	8002f1c <OC1Config>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	75fb      	strb	r3, [r7, #23]
      break;
 8002e52:	e014      	b.n	8002e7e <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 f8cc 	bl	8002ff4 <OC2Config>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	75fb      	strb	r3, [r7, #23]
      break;
 8002e60:	e00d      	b.n	8002e7e <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 f935 	bl	80030d4 <OC3Config>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8002e6e:	e006      	b.n	8002e7e <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 f99e 	bl	80031b4 <OC4Config>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e7c:	bf00      	nop
  }

  return result;
 8002e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8002e92:	2300      	movs	r3, #0
 8002e94:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	7b12      	ldrb	r2, [r2, #12]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	89d2      	ldrh	r2, [r2, #14]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	f023 0201 	bic.w	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f023 0303 	bic.w	r3, r3, #3
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f023 0202 	bic.w	r2, r3, #2
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f023 0201 	bic.w	r2, r3, #1
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a1c      	ldr	r2, [pc, #112]	; (8002fec <OC1Config+0xd0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d003      	beq.n	8002f86 <OC1Config+0x6a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a1b      	ldr	r2, [pc, #108]	; (8002ff0 <OC1Config+0xd4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d11e      	bne.n	8002fc4 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f023 0208 	bic.w	r2, r3, #8
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4313      	orrs	r3, r2
 8002f94:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f023 0204 	bic.w	r2, r3, #4
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff fe3b 	bl	8002c52 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40010000 	.word	0x40010000
 8002ff0:	40010400 	.word	0x40010400

08002ff4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	f023 0210 	bic.w	r2, r3, #16
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	021b      	lsls	r3, r3, #8
 8003030:	4313      	orrs	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f023 0220 	bic.w	r2, r3, #32
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	4313      	orrs	r3, r2
 8003042:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f023 0210 	bic.w	r2, r3, #16
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	4313      	orrs	r3, r2
 8003052:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a1d      	ldr	r2, [pc, #116]	; (80030cc <OC2Config+0xd8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d003      	beq.n	8003064 <OC2Config+0x70>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a1c      	ldr	r2, [pc, #112]	; (80030d0 <OC2Config+0xdc>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d11f      	bne.n	80030a4 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	019b      	lsls	r3, r3, #6
 8003070:	4313      	orrs	r3, r2
 8003072:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	019b      	lsls	r3, r3, #6
 8003080:	4313      	orrs	r3, r2
 8003082:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4313      	orrs	r3, r2
 8003092:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	4313      	orrs	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	4619      	mov	r1, r3
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff fdd9 	bl	8002c6e <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40010000 	.word	0x40010000
 80030d0:	40010400 	.word	0x40010400

080030d4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f023 0303 	bic.w	r3, r3, #3
 8003102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4313      	orrs	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	021b      	lsls	r3, r3, #8
 800311e:	4313      	orrs	r3, r2
 8003120:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	021b      	lsls	r3, r3, #8
 800312e:	4313      	orrs	r3, r2
 8003130:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a1d      	ldr	r2, [pc, #116]	; (80031ac <OC3Config+0xd8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d003      	beq.n	8003142 <OC3Config+0x6e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a1c      	ldr	r2, [pc, #112]	; (80031b0 <OC3Config+0xdc>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d11f      	bne.n	8003182 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	029b      	lsls	r3, r3, #10
 800314e:	4313      	orrs	r3, r2
 8003150:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	029b      	lsls	r3, r3, #10
 800315e:	4313      	orrs	r3, r2
 8003160:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	4313      	orrs	r3, r2
 8003170:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	015b      	lsls	r3, r3, #5
 800317e:	4313      	orrs	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	4619      	mov	r1, r3
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff fd78 	bl	8002c8a <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40010000 	.word	0x40010000
 80031b0:	40010400 	.word	0x40010400

080031b4 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	021b      	lsls	r3, r3, #8
 80031f0:	4313      	orrs	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	031b      	lsls	r3, r3, #12
 8003200:	4313      	orrs	r3, r2
 8003202:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	031b      	lsls	r3, r3, #12
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a11      	ldr	r2, [pc, #68]	; (800325c <OC4Config+0xa8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d003      	beq.n	8003224 <OC4Config+0x70>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a10      	ldr	r2, [pc, #64]	; (8003260 <OC4Config+0xac>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d107      	bne.n	8003234 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	019b      	lsls	r3, r3, #6
 8003230:	4313      	orrs	r3, r2
 8003232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	4619      	mov	r1, r3
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7ff fd2d 	bl	8002ca6 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3718      	adds	r7, #24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40010000 	.word	0x40010000
 8003260:	40010400 	.word	0x40010400

08003264 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <_ZN7MathLibC1Ev>:

#include "MathLib.hpp"
#include <vector>
#include "math.h"

MathLib::MathLib() {
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	4a0a      	ldr	r2, [pc, #40]	; (80032b0 <_ZN7MathLibC1Ev+0x34>)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	3304      	adds	r3, #4
 800328e:	4618      	mov	r0, r3
 8003290:	f000 f930 	bl	80034f4 <_ZNSt6vectorIfSaIfEEC1Ev>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3310      	adds	r3, #16
 8003298:	4618      	mov	r0, r3
 800329a:	f000 f92b 	bl	80034f4 <_ZNSt6vectorIfSaIfEEC1Ev>
	mSize = 0;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	61da      	str	r2, [r3, #28]
}
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	08009168 	.word	0x08009168

080032b4 <_ZN7MathLibD1Ev>:

MathLib::~MathLib() {
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	4a0f      	ldr	r2, [pc, #60]	; (80032fc <_ZN7MathLibD1Ev+0x48>)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	601a      	str	r2, [r3, #0]
	mSize = 0;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	61da      	str	r2, [r3, #28]
	mSinList.clear();
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3304      	adds	r3, #4
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 f939 	bl	8003544 <_ZNSt6vectorIfSaIfEE5clearEv>
	mCosList.clear();
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3310      	adds	r3, #16
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 f934 	bl	8003544 <_ZNSt6vectorIfSaIfEE5clearEv>
MathLib::~MathLib() {
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3310      	adds	r3, #16
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 f914 	bl	800350e <_ZNSt6vectorIfSaIfEED1Ev>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3304      	adds	r3, #4
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 f90f 	bl	800350e <_ZNSt6vectorIfSaIfEED1Ev>
}
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	08009168 	.word	0x08009168

08003300 <_ZN7MathLibD0Ev>:
MathLib::~MathLib() {
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
}
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff ffd3 	bl	80032b4 <_ZN7MathLibD1Ev>
 800330e:	2120      	movs	r1, #32
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f002 ffb0 	bl	8006276 <_ZdlPvj>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4618      	mov	r0, r3
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <_ZN7MathLib5fInitEi>:

void MathLib::fInit(int pSize){
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
	setLibSize(pSize);
 800332a:	6839      	ldr	r1, [r7, #0]
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f815 	bl	800335c <_ZN7MathLib10setLibSizeEi>
	if(mSize == 0){
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d100      	bne.n	800333c <_ZN7MathLib5fInitEi+0x1c>
		while(1){}//error check
 800333a:	e7fe      	b.n	800333a <_ZN7MathLib5fInitEi+0x1a>
	}
	fSinVectorInit(&mSinList);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3304      	adds	r3, #4
 8003340:	4619      	mov	r1, r3
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f818 	bl	8003378 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE>
	fCosVectorInit(&mCosList);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3310      	adds	r3, #16
 800334c:	4619      	mov	r1, r3
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f862 	bl	8003418 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE>
}
 8003354:	bf00      	nop
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <_ZN7MathLib10setLibSizeEi>:

void MathLib::setLibSize(int pSize){
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
	mSize = pSize;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	61da      	str	r2, [r3, #28]
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE>:

void MathLib::fSinVectorInit(std::vector<float> *pVector){
 8003378:	b5b0      	push	{r4, r5, r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
	for(int i=0;i<mSize;i++){
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	429a      	cmp	r2, r3
 800338e:	da39      	bge.n	8003404 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE+0x8c>
		float fsinval = sin(i*2*M_PI/(float)mSize);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	4618      	mov	r0, r3
 8003396:	f7fd f891 	bl	80004bc <__aeabi_i2d>
 800339a:	a31d      	add	r3, pc, #116	; (adr r3, 8003410 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE+0x98>)
 800339c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a0:	f7fd f8f6 	bl	8000590 <__aeabi_dmul>
 80033a4:	4603      	mov	r3, r0
 80033a6:	460c      	mov	r4, r1
 80033a8:	4625      	mov	r5, r4
 80033aa:	461c      	mov	r4, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	ee07 3a90 	vmov	s15, r3
 80033b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033b8:	ee17 0a90 	vmov	r0, s15
 80033bc:	f7fd f890 	bl	80004e0 <__aeabi_f2d>
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4620      	mov	r0, r4
 80033c6:	4629      	mov	r1, r5
 80033c8:	f7fd fa0c 	bl	80007e4 <__aeabi_ddiv>
 80033cc:	4603      	mov	r3, r0
 80033ce:	460c      	mov	r4, r1
 80033d0:	ec44 3b17 	vmov	d7, r3, r4
 80033d4:	eeb0 0a47 	vmov.f32	s0, s14
 80033d8:	eef0 0a67 	vmov.f32	s1, s15
 80033dc:	f003 f85c 	bl	8006498 <sin>
 80033e0:	ec54 3b10 	vmov	r3, r4, d0
 80033e4:	4618      	mov	r0, r3
 80033e6:	4621      	mov	r1, r4
 80033e8:	f7fd fbaa 	bl	8000b40 <__aeabi_d2f>
 80033ec:	4603      	mov	r3, r0
 80033ee:	60bb      	str	r3, [r7, #8]
		pVector->push_back(fsinval);
 80033f0:	f107 0308 	add.w	r3, r7, #8
 80033f4:	4619      	mov	r1, r3
 80033f6:	6838      	ldr	r0, [r7, #0]
 80033f8:	f000 f8b2 	bl	8003560 <_ZNSt6vectorIfSaIfEE9push_backERKf>
	for(int i=0;i<mSize;i++){
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	3301      	adds	r3, #1
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	e7c0      	b.n	8003386 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE+0xe>
	}
}
 8003404:	bf00      	nop
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bdb0      	pop	{r4, r5, r7, pc}
 800340c:	f3af 8000 	nop.w
 8003410:	54442d18 	.word	0x54442d18
 8003414:	400921fb 	.word	0x400921fb

08003418 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE>:

void MathLib::fCosVectorInit(std::vector<float> *pVector){
 8003418:	b5b0      	push	{r4, r5, r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
	for(int i=0;i<mSize;i++){
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	429a      	cmp	r2, r3
 800342e:	da39      	bge.n	80034a4 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE+0x8c>
		float fcosval = cos(i*2*M_PI/(float)mSize);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	4618      	mov	r0, r3
 8003436:	f7fd f841 	bl	80004bc <__aeabi_i2d>
 800343a:	a31d      	add	r3, pc, #116	; (adr r3, 80034b0 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE+0x98>)
 800343c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003440:	f7fd f8a6 	bl	8000590 <__aeabi_dmul>
 8003444:	4603      	mov	r3, r0
 8003446:	460c      	mov	r4, r1
 8003448:	4625      	mov	r5, r4
 800344a:	461c      	mov	r4, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	ee07 3a90 	vmov	s15, r3
 8003454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003458:	ee17 0a90 	vmov	r0, s15
 800345c:	f7fd f840 	bl	80004e0 <__aeabi_f2d>
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	4620      	mov	r0, r4
 8003466:	4629      	mov	r1, r5
 8003468:	f7fd f9bc 	bl	80007e4 <__aeabi_ddiv>
 800346c:	4603      	mov	r3, r0
 800346e:	460c      	mov	r4, r1
 8003470:	ec44 3b17 	vmov	d7, r3, r4
 8003474:	eeb0 0a47 	vmov.f32	s0, s14
 8003478:	eef0 0a67 	vmov.f32	s1, s15
 800347c:	f002 ffc8 	bl	8006410 <cos>
 8003480:	ec54 3b10 	vmov	r3, r4, d0
 8003484:	4618      	mov	r0, r3
 8003486:	4621      	mov	r1, r4
 8003488:	f7fd fb5a 	bl	8000b40 <__aeabi_d2f>
 800348c:	4603      	mov	r3, r0
 800348e:	60bb      	str	r3, [r7, #8]
		pVector->push_back(fcosval);
 8003490:	f107 0308 	add.w	r3, r7, #8
 8003494:	4619      	mov	r1, r3
 8003496:	6838      	ldr	r0, [r7, #0]
 8003498:	f000 f862 	bl	8003560 <_ZNSt6vectorIfSaIfEE9push_backERKf>
	for(int i=0;i<mSize;i++){
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	3301      	adds	r3, #1
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	e7c0      	b.n	8003426 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE+0xe>
	}
}
 80034a4:	bf00      	nop
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bdb0      	pop	{r4, r5, r7, pc}
 80034ac:	f3af 8000 	nop.w
 80034b0:	54442d18 	.word	0x54442d18
 80034b4:	400921fb 	.word	0x400921fb

080034b8 <_ZN7MathLib10getSinListEv>:

std::vector<float> MathLib::getSinList(void){
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
	return mSinList;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	3304      	adds	r3, #4
 80034c6:	4619      	mov	r1, r3
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f86e 	bl	80035aa <_ZNSt6vectorIfSaIfEEC1ERKS1_>
}
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <_ZN7MathLib10getCosListEv>:

std::vector<float> MathLib::getCosList(void){
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b082      	sub	sp, #8
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	6039      	str	r1, [r7, #0]
	return mCosList;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	3310      	adds	r3, #16
 80034e4:	4619      	mov	r1, r3
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f85f 	bl	80035aa <_ZNSt6vectorIfSaIfEEC1ERKS1_>
}
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <_ZNSt6vectorIfSaIfEEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 f89c 	bl	800363c <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <_ZNSt6vectorIfSaIfEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 800350e:	b5b0      	push	{r4, r5, r7, lr}
 8003510:	b082      	sub	sp, #8
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681c      	ldr	r4, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4618      	mov	r0, r3
 8003522:	f000 f8b2 	bl	800368a <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003526:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003528:	461a      	mov	r2, r3
 800352a:	4629      	mov	r1, r5
 800352c:	4620      	mov	r0, r4
 800352e:	f000 f8b7 	bl	80036a0 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4618      	mov	r0, r3
 8003536:	f000 f88e 	bl	8003656 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4618      	mov	r0, r3
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bdb0      	pop	{r4, r5, r7, pc}

08003544 <_ZNSt6vectorIfSaIfEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4619      	mov	r1, r3
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f8b2 	bl	80036bc <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>
 8003558:	bf00      	nop
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <_ZNSt6vectorIfSaIfEE9push_backERKf>:
      push_back(const value_type& __x)
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	429a      	cmp	r2, r3
 8003574:	d00c      	beq.n	8003590 <_ZNSt6vectorIfSaIfEE9push_backERKf+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	4619      	mov	r1, r3
 8003580:	f000 f8bf 	bl	8003702 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	1d1a      	adds	r2, r3, #4
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	605a      	str	r2, [r3, #4]
      }
 800358e:	e008      	b.n	80035a2 <_ZNSt6vectorIfSaIfEE9push_backERKf+0x42>
	  _M_realloc_insert(end(), __x);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f8c9 	bl	8003728 <_ZNSt6vectorIfSaIfEE3endEv>
 8003596:	4603      	mov	r3, r0
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	4619      	mov	r1, r3
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f8d5 	bl	800374c <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>
      }
 80035a2:	bf00      	nop
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 80035aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ac:	b085      	sub	sp, #20
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
 80035b2:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 80035b4:	687c      	ldr	r4, [r7, #4]
 80035b6:	6838      	ldr	r0, [r7, #0]
 80035b8:	f000 f954 	bl	8003864 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80035bc:	4605      	mov	r5, r0
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 f96e 	bl	80038a2 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80035c6:	4602      	mov	r2, r0
 80035c8:	f107 030c 	add.w	r3, r7, #12
 80035cc:	4611      	mov	r1, r2
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 f959 	bl	8003886 <_ZN9__gnu_cxx14__alloc_traitsISaIfEE17_S_select_on_copyERKS1_>
 80035d4:	f107 030c 	add.w	r3, r7, #12
 80035d8:	461a      	mov	r2, r3
 80035da:	4629      	mov	r1, r5
 80035dc:	4620      	mov	r0, r4
 80035de:	f000 f977 	bl	80038d0 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 80035e2:	f107 030c 	add.w	r3, r7, #12
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 f966 	bl	80038b8 <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80035ec:	6838      	ldr	r0, [r7, #0]
 80035ee:	f000 f983 	bl	80038f8 <_ZNKSt6vectorIfSaIfEE5beginEv>
 80035f2:	4605      	mov	r5, r0
 80035f4:	6838      	ldr	r0, [r7, #0]
 80035f6:	f000 f993 	bl	8003920 <_ZNKSt6vectorIfSaIfEE3endEv>
 80035fa:	4606      	mov	r6, r0
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4618      	mov	r0, r3
 8003604:	f000 f841 	bl	800368a <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003608:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800360a:	4622      	mov	r2, r4
 800360c:	4631      	mov	r1, r6
 800360e:	4628      	mov	r0, r5
 8003610:	f000 f99a 	bl	8003948 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 8003614:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	605a      	str	r2, [r3, #4]
      }
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4618      	mov	r0, r3
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003624 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f943 	bl	80038b8 <_ZNSaIfED1Ev>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4618      	mov	r0, r3
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      _Vector_base()
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4618      	mov	r0, r3
 8003648:	f000 f98f 	bl	800396a <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8003656:	b580      	push	{r7, lr}
 8003658:	b082      	sub	sp, #8
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6819      	ldr	r1, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8003666:	461a      	mov	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8003670:	461a      	mov	r2, r3
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f98e 	bl	8003994 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
		      - this->_M_impl._M_start); }
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff ffd2 	bl	8003624 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4618      	mov	r0, r3
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4618      	mov	r0, r3
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80036ac:	68b9      	ldr	r1, [r7, #8]
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 f983 	bl	80039ba <_ZSt8_DestroyIPfEvT_S1_>
    }
 80036b4:	bf00      	nop
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 80036bc:	b590      	push	{r4, r7, lr}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685c      	ldr	r4, [r3, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff ffdc 	bl	800368a <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80036d2:	4603      	mov	r3, r0
 80036d4:	461a      	mov	r2, r3
 80036d6:	4621      	mov	r1, r4
 80036d8:	6838      	ldr	r0, [r7, #0]
 80036da:	f7ff ffe1 	bl	80036a0 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	605a      	str	r2, [r3, #4]
      }
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd90      	pop	{r4, r7, pc}

080036ec <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4618      	mov	r0, r3
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8003702:	b580      	push	{r7, lr}
 8003704:	b084      	sub	sp, #16
 8003706:	af00      	add	r7, sp, #0
 8003708:	60f8      	str	r0, [r7, #12]
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7ff ffec 	bl	80036ec <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8003714:	4603      	mov	r3, r0
 8003716:	461a      	mov	r2, r3
 8003718:	68b9      	ldr	r1, [r7, #8]
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 f95a 	bl	80039d4 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_>
 8003720:	bf00      	nop
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <_ZNSt6vectorIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	1d1a      	adds	r2, r3, #4
 8003734:	f107 030c 	add.w	r3, r7, #12
 8003738:	4611      	mov	r1, r2
 800373a:	4618      	mov	r0, r3
 800373c:	f000 f962 	bl	8003a04 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800374c:	b5b0      	push	{r4, r5, r7, lr}
 800374e:	b08a      	sub	sp, #40	; 0x28
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8003758:	4a41      	ldr	r2, [pc, #260]	; (8003860 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x114>)
 800375a:	2101      	movs	r1, #1
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 f961 	bl	8003a24 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 8003762:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f9a5 	bl	8003ab4 <_ZNSt6vectorIfSaIfEE5beginEv>
 800376a:	4603      	mov	r3, r0
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	f107 0214 	add.w	r2, r7, #20
 8003772:	f107 0308 	add.w	r3, r7, #8
 8003776:	4611      	mov	r1, r2
 8003778:	4618      	mov	r0, r3
 800377a:	f000 f9ab 	bl	8003ad4 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800377e:	4603      	mov	r3, r0
 8003780:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003786:	4618      	mov	r0, r3
 8003788:	f000 f9ba 	bl	8003b00 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 800378c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8003792:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8003798:	69fa      	ldr	r2, [r7, #28]
 800379a:	18d5      	adds	r5, r2, r3
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7ff ffa5 	bl	80036ec <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 80037a2:	4603      	mov	r3, r0
 80037a4:	461a      	mov	r2, r3
 80037a6:	4629      	mov	r1, r5
 80037a8:	4620      	mov	r0, r4
 80037aa:	f7ff ffaa 	bl	8003702 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80037ae:	2300      	movs	r3, #0
 80037b0:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681c      	ldr	r4, [r3, #0]
 80037b6:	f107 0308 	add.w	r3, r7, #8
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 f9b4 	bl	8003b28 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 80037c0:	4603      	mov	r3, r0
 80037c2:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff ff5f 	bl	800368a <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80037cc:	4603      	mov	r3, r0
	  __new_finish
 80037ce:	69fa      	ldr	r2, [r7, #28]
 80037d0:	4629      	mov	r1, r5
 80037d2:	4620      	mov	r0, r4
 80037d4:	f000 f9b3 	bl	8003b3e <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 80037d8:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	3304      	adds	r3, #4
 80037de:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 80037e0:	f107 0308 	add.w	r3, r7, #8
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 f99f 	bl	8003b28 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 80037ea:	4603      	mov	r3, r0
 80037ec:	681c      	ldr	r4, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff ff48 	bl	800368a <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80037fa:	4603      	mov	r3, r0
	  __new_finish
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4629      	mov	r1, r5
 8003800:	4620      	mov	r0, r4
 8003802:	f000 f99c 	bl	8003b3e <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 8003806:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681c      	ldr	r4, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4618      	mov	r0, r3
 8003814:	f7ff ff39 	bl	800368a <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003818:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800381a:	461a      	mov	r2, r3
 800381c:	4629      	mov	r1, r5
 800381e:	4620      	mov	r0, r4
 8003820:	f7ff ff3e 	bl	80036a0 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 800382e:	461a      	mov	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 8003838:	461a      	mov	r2, r3
 800383a:	f000 f8ab 	bl	8003994 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	69fa      	ldr	r2, [r7, #28]
 8003842:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	69fa      	ldr	r2, [r7, #28]
 8003850:	441a      	add	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	609a      	str	r2, [r3, #8]
    }
 8003856:	bf00      	nop
 8003858:	3728      	adds	r7, #40	; 0x28
 800385a:	46bd      	mov	sp, r7
 800385c:	bdb0      	pop	{r4, r5, r7, pc}
 800385e:	bf00      	nop
 8003860:	080090f8 	.word	0x080090f8

08003864 <_ZNKSt6vectorIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	461a      	mov	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	109b      	asrs	r3, r3, #2
 800387a:	4618      	mov	r0, r3
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <_ZN9__gnu_cxx14__alloc_traitsISaIfEE17_S_select_on_copyERKS1_>:
    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::addressof(*__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
 8003886:	b580      	push	{r7, lr}
 8003888:	b082      	sub	sp, #8
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
 800388e:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6839      	ldr	r1, [r7, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f000 f96b 	bl	8003b70 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4618      	mov	r0, r3
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <_ZNSaIfED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f970 	bl	8003ba6 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4618      	mov	r0, r3
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f000 f96b 	bl	8003bbc <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 80038e6:	68b9      	ldr	r1, [r7, #8]
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 f97e 	bl	8003bea <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	f107 020c 	add.w	r2, r7, #12
 800390a:	f107 0308 	add.w	r3, r7, #8
 800390e:	4611      	mov	r1, r2
 8003910:	4618      	mov	r0, r3
 8003912:	f000 f985 	bl	8003c20 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	f107 020c 	add.w	r2, r7, #12
 8003932:	f107 0308 	add.w	r3, r7, #8
 8003936:	4611      	mov	r1, r2
 8003938:	4618      	mov	r0, r3
 800393a:	f000 f971 	bl	8003c20 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
 8003954:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	68b9      	ldr	r1, [r7, #8]
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 f970 	bl	8003c40 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8003960:	4603      	mov	r3, r0
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl()
 800396a:	b580      	push	{r7, lr}
 800396c:	b082      	sub	sp, #8
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f976 	bl	8003c64 <_ZNSaIfEC1Ev>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	605a      	str	r2, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	609a      	str	r2, [r3, #8]
	{ }
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4618      	mov	r0, r3
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
	if (__p)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d005      	beq.n	80039b2 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	68b9      	ldr	r1, [r7, #8]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 f965 	bl	8003c7c <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 80039b2:	bf00      	nop
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <_ZSt8_DestroyIPfEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
 80039c2:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80039c4:	6839      	ldr	r1, [r7, #0]
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f967 	bl	8003c9a <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 80039cc:	bf00      	nop
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80039d4:	b590      	push	{r4, r7, lr}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7ff fe83 	bl	80036ec <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 80039e6:	4603      	mov	r3, r0
 80039e8:	681c      	ldr	r4, [r3, #0]
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	4619      	mov	r1, r3
 80039ee:	2004      	movs	r0, #4
 80039f0:	f7ff fc38 	bl	8003264 <_ZnwjPv>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d000      	beq.n	80039fc <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_+0x28>
 80039fa:	601c      	str	r4, [r3, #0]
 80039fc:	bf00      	nop
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd90      	pop	{r4, r7, pc}

08003a04 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8003a24:	b590      	push	{r4, r7, lr}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 f93d 	bl	8003cb0 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8003a36:	4604      	mov	r4, r0
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f7ff ff13 	bl	8003864 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	1ae2      	subs	r2, r4, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	bf34      	ite	cc
 8003a48:	2301      	movcc	r3, #1
 8003a4a:	2300      	movcs	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f002 fc27 	bl	80062a8 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f7ff ff02 	bl	8003864 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003a60:	4604      	mov	r4, r0
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f7ff fefe 	bl	8003864 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	613b      	str	r3, [r7, #16]
 8003a6c:	f107 0208 	add.w	r2, r7, #8
 8003a70:	f107 0310 	add.w	r3, r7, #16
 8003a74:	4611      	mov	r1, r2
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 f92b 	bl	8003cd2 <_ZSt3maxIjERKT_S2_S2_>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4423      	add	r3, r4
 8003a82:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f7ff feed 	bl	8003864 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d306      	bcc.n	8003aa0 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x7c>
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 f90c 	bl	8003cb0 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d904      	bls.n	8003aaa <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x86>
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 f905 	bl	8003cb0 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	e000      	b.n	8003aac <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x88>
 8003aaa:	697b      	ldr	r3, [r7, #20]
      }
 8003aac:	4618      	mov	r0, r3
 8003aae:	371c      	adds	r7, #28
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd90      	pop	{r4, r7, pc}

08003ab4 <_ZNSt6vectorIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	f107 030c 	add.w	r3, r7, #12
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff ff9d 	bl	8003a04 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003ad4:	b590      	push	{r4, r7, lr}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f822 	bl	8003b28 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	461c      	mov	r4, r3
 8003aea:	6838      	ldr	r0, [r7, #0]
 8003aec:	f000 f81c 	bl	8003b28 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8003af0:	4603      	mov	r3, r0
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	1ae3      	subs	r3, r4, r3
 8003af6:	109b      	asrs	r3, r3, #2
 8003af8:	4618      	mov	r0, r3
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd90      	pop	{r4, r7, pc}

08003b00 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d006      	beq.n	8003b1e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6839      	ldr	r1, [r7, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 f8f0 	bl	8003cfa <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	e000      	b.n	8003b20 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 8003b1e:	2300      	movs	r3, #0
      }
 8003b20:	4618      	mov	r0, r3
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4618      	mov	r0, r3
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8003b3e:	b590      	push	{r4, r7, lr}
 8003b40:	b085      	sub	sp, #20
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	60f8      	str	r0, [r7, #12]
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	607a      	str	r2, [r7, #4]
 8003b4a:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 f8e3 	bl	8003d18 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 8003b52:	4604      	mov	r4, r0
 8003b54:	68b8      	ldr	r0, [r7, #8]
 8003b56:	f000 f8df 	bl	8003d18 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 8003b5a:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	4620      	mov	r0, r4
 8003b62:	f000 f8e8 	bl	8003d36 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>
 8003b66:	4603      	mov	r3, r0
    }
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd90      	pop	{r4, r7, pc}

08003b70 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8003b7a:	6839      	ldr	r1, [r7, #0]
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f804 	bl	8003b8a <_ZNSaIfEC1ERKS_>
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) throw()
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b082      	sub	sp, #8
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
 8003b92:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8003b94:	6839      	ldr	r1, [r7, #0]
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f8de 	bl	8003d58 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 8003bc6:	6839      	ldr	r1, [r7, #0]
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff ffde 	bl	8003b8a <_ZNSaIfEC1ERKS_>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	605a      	str	r2, [r3, #4]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	609a      	str	r2, [r3, #8]
	{ }
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4618      	mov	r0, r3
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b082      	sub	sp, #8
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
 8003bf2:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8003bf4:	6839      	ldr	r1, [r7, #0]
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7ff ff82 	bl	8003b00 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	441a      	add	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	609a      	str	r2, [r3, #8]
      }
 8003c18:	bf00      	nop
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4618      	mov	r0, r3
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	68b9      	ldr	r1, [r7, #8]
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 f88b 	bl	8003d70 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 8003c5a:	4603      	mov	r3, r0
    }
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <_ZNSaIfEC1Ev>:
      allocator() throw() { }
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f88f 	bl	8003d90 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4618      	mov	r0, r3
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	68b9      	ldr	r1, [r7, #8]
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 f88a 	bl	8003da6 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
 8003c92:	bf00      	nop
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	6039      	str	r1, [r7, #0]
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff fdf1 	bl	80038a2 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 f87c 	bl	8003dc0 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
 8003cda:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d201      	bcs.n	8003cec <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	e000      	b.n	8003cee <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8003cec:	687b      	ldr	r3, [r7, #4]
    }
 8003cee:	4618      	mov	r0, r3
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
 8003d02:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003d04:	2200      	movs	r2, #0
 8003d06:	6839      	ldr	r1, [r7, #0]
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f865 	bl	8003dd8 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	4618      	mov	r0, r3
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8003d20:	f107 030c 	add.w	r3, r7, #12
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 f874 	bl	8003e14 <_ZNSt13move_iteratorIPfEC1ES0_>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b084      	sub	sp, #16
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	60f8      	str	r0, [r7, #12]
 8003d3e:	60b9      	str	r1, [r7, #8]
 8003d40:	607a      	str	r2, [r7, #4]
 8003d42:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	68b9      	ldr	r1, [r7, #8]
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 f872 	bl	8003e32 <_ZSt18uninitialized_copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4618      	mov	r0, r3
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	68b9      	ldr	r1, [r7, #8]
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 f868 	bl	8003e56 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8003d86:	4603      	mov	r3, r0
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
      deallocate(pointer __p, size_type)
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b084      	sub	sp, #16
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8003db2:	68b8      	ldr	r0, [r7, #8]
 8003db4:	f002 fa5d 	bl	8006272 <_ZdlPv>
      }
 8003db8:	bf00      	nop
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f85c 	bl	8003e86 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 f84e 	bl	8003e86 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 8003dea:	4602      	mov	r2, r0
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	4293      	cmp	r3, r2
 8003df0:	bf8c      	ite	hi
 8003df2:	2301      	movhi	r3, #1
 8003df4:	2300      	movls	r3, #0
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003dfc:	f002 fa4e 	bl	800629c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4618      	mov	r0, r3
 8003e06:	f002 fa38 	bl	800627a <_Znwj>
 8003e0a:	4603      	mov	r3, r0
      }
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <_ZNSt13move_iteratorIPfEC1ES0_>:
      move_iterator(iterator_type __i)
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4618      	mov	r0, r3
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <_ZSt18uninitialized_copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b086      	sub	sp, #24
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	60f8      	str	r0, [r7, #12]
 8003e3a:	60b9      	str	r1, [r7, #8]
 8003e3c:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	68b9      	ldr	r1, [r7, #8]
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 f829 	bl	8003e9e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPfES3_EET0_T_S6_S5_>
 8003e4c:	4603      	mov	r3, r0
    }
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8003e56:	b590      	push	{r4, r7, lr}
 8003e58:	b085      	sub	sp, #20
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	60f8      	str	r0, [r7, #12]
 8003e5e:	60b9      	str	r1, [r7, #8]
 8003e60:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 f82b 	bl	8003ebe <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8003e68:	4604      	mov	r4, r0
 8003e6a:	68b8      	ldr	r0, [r7, #8]
 8003e6c:	f000 f827 	bl	8003ebe <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8003e70:	4603      	mov	r3, r0
	       __result));
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	4619      	mov	r1, r3
 8003e76:	4620      	mov	r0, r4
 8003e78:	f000 f82c 	bl	8003ed4 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 8003e7c:	4603      	mov	r3, r0
    }
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd90      	pop	{r4, r7, pc}

08003e86 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8003e8e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003e92:	4618      	mov	r0, r3
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPfES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b084      	sub	sp, #16
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	60f8      	str	r0, [r7, #12]
 8003ea6:	60b9      	str	r1, [r7, #8]
 8003ea8:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	68b9      	ldr	r1, [r7, #8]
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 f82c 	bl	8003f0c <_ZSt4copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003ed4:	b5b0      	push	{r4, r5, r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 f82b 	bl	8003f3c <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003ee6:	4604      	mov	r4, r0
 8003ee8:	68b8      	ldr	r0, [r7, #8]
 8003eea:	f000 f827 	bl	8003f3c <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003eee:	4605      	mov	r5, r0
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f831 	bl	8003f58 <_ZSt12__niter_baseIPfET_S1_>
 8003ef6:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4629      	mov	r1, r5
 8003efc:	4620      	mov	r0, r4
 8003efe:	f000 f836 	bl	8003f6e <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 8003f02:	4603      	mov	r3, r0
    }
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bdb0      	pop	{r4, r5, r7, pc}

08003f0c <_ZSt4copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8003f0c:	b590      	push	{r4, r7, lr}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 f83a 	bl	8003f92 <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8003f1e:	4604      	mov	r4, r0
 8003f20:	68b8      	ldr	r0, [r7, #8]
 8003f22:	f000 f836 	bl	8003f92 <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8003f26:	4603      	mov	r3, r0
	       __result));
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4620      	mov	r0, r4
 8003f2e:	f000 f841 	bl	8003fb4 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>
 8003f32:	4603      	mov	r3, r0
    }
 8003f34:	4618      	mov	r0, r3
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd90      	pop	{r4, r7, pc}

08003f3c <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8003f44:	1d3b      	adds	r3, r7, #4
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 f850 	bl	8003fec <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4618      	mov	r0, r3
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b086      	sub	sp, #24
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	60f8      	str	r0, [r7, #12]
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	68b9      	ldr	r1, [r7, #8]
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 f83d 	bl	8004002 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8003f88:	4603      	mov	r3, r0
    }
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8003f9a:	1d3b      	adds	r3, r7, #4
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 f84d 	bl	800403c <_ZNKSt13move_iteratorIPfE4baseEv>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 f855 	bl	8004054 <_ZSt12__miter_baseIPfET_S1_>
 8003faa:	4603      	mov	r3, r0
 8003fac:	4618      	mov	r0, r3
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003fb4:	b5b0      	push	{r4, r5, r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f7ff ffc9 	bl	8003f58 <_ZSt12__niter_baseIPfET_S1_>
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	68b8      	ldr	r0, [r7, #8]
 8003fca:	f7ff ffc5 	bl	8003f58 <_ZSt12__niter_baseIPfET_S1_>
 8003fce:	4605      	mov	r5, r0
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff ffc1 	bl	8003f58 <_ZSt12__niter_baseIPfET_S1_>
 8003fd6:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8003fd8:	461a      	mov	r2, r3
 8003fda:	4629      	mov	r1, r5
 8003fdc:	4620      	mov	r0, r4
 8003fde:	f000 f844 	bl	800406a <_ZSt13__copy_move_aILb1EPfS0_ET1_T0_S2_S1_>
 8003fe2:	4603      	mov	r3, r0
    }
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bdb0      	pop	{r4, r5, r7, pc}

08003fec <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004002:	b580      	push	{r7, lr}
 8004004:	b086      	sub	sp, #24
 8004006:	af00      	add	r7, sp, #0
 8004008:	60f8      	str	r0, [r7, #12]
 800400a:	60b9      	str	r1, [r7, #8]
 800400c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	109b      	asrs	r3, r3, #2
 8004016:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d006      	beq.n	800402c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	461a      	mov	r2, r3
 8004024:	68f9      	ldr	r1, [r7, #12]
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f003 fa93 	bl	8007552 <memmove>
	  return __result + _Num;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	4413      	add	r3, r2
	}
 8004034:	4618      	mov	r0, r3
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <_ZNKSt13move_iteratorIPfE4baseEv>:
      base() const
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4618      	mov	r0, r3
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <_ZSt12__miter_baseIPfET_S1_>:
    __miter_base(_Iterator __it)
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4618      	mov	r0, r3
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <_ZSt13__copy_move_aILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800406a:	b580      	push	{r7, lr}
 800406c:	b086      	sub	sp, #24
 800406e:	af00      	add	r7, sp, #0
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8004076:	2301      	movs	r3, #1
 8004078:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	68b9      	ldr	r1, [r7, #8]
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 f805 	bl	800408e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8004084:	4603      	mov	r3, r0
    }
 8004086:	4618      	mov	r0, r3
 8004088:	3718      	adds	r7, #24
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800408e:	b580      	push	{r7, lr}
 8004090:	b086      	sub	sp, #24
 8004092:	af00      	add	r7, sp, #0
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	60b9      	str	r1, [r7, #8]
 8004098:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	109b      	asrs	r3, r3, #2
 80040a2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d006      	beq.n	80040b8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	461a      	mov	r2, r3
 80040b0:	68f9      	ldr	r1, [r7, #12]
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f003 fa4d 	bl	8007552 <memmove>
	  return __result + _Num;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	4413      	add	r3, r2
	}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3718      	adds	r7, #24
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <_ZN9MotorInfoC1Ev>:
 */

#include "MotorInfo.hpp"
#include "Mathlib.hpp"

MotorInfo::MotorInfo() {
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	4a06      	ldr	r2, [pc, #24]	; (80040ec <_ZN9MotorInfoC1Ev+0x24>)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	333c      	adds	r3, #60	; 0x3c
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff f8ce 	bl	800327c <_ZN7MathLibC1Ev>
	// TODO Auto-generated constructor stub

}
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4618      	mov	r0, r3
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	08009178 	.word	0x08009178

080040f0 <_ZN9MotorInfoD1Ev>:

MotorInfo::~MotorInfo() {
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	4a06      	ldr	r2, [pc, #24]	; (8004114 <_ZN9MotorInfoD1Ev+0x24>)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	333c      	adds	r3, #60	; 0x3c
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff f8d6 	bl	80032b4 <_ZN7MathLibD1Ev>
	// TODO Auto-generated destructor stub
}
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4618      	mov	r0, r3
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	08009178 	.word	0x08009178

08004118 <_ZN9MotorInfoD0Ev>:
MotorInfo::~MotorInfo() {
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
}
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7ff ffe5 	bl	80040f0 <_ZN9MotorInfoD1Ev>
 8004126:	2160      	movs	r1, #96	; 0x60
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f002 f8a4 	bl	8006276 <_ZdlPvj>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4618      	mov	r0, r3
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <_ZN7MathLibaSERKS_>:
#ifndef MATHLIB_HPP_
#define MATHLIB_HPP_

#include <vector>

class MathLib {
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	1d1a      	adds	r2, r3, #4
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	3304      	adds	r3, #4
 800414a:	4619      	mov	r1, r3
 800414c:	4610      	mov	r0, r2
 800414e:	f000 f964 	bl	800441a <_ZNSt6vectorIfSaIfEEaSERKS1_>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f103 0210 	add.w	r2, r3, #16
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	3310      	adds	r3, #16
 800415c:	4619      	mov	r1, r3
 800415e:	4610      	mov	r0, r2
 8004160:	f000 f95b 	bl	800441a <_ZNSt6vectorIfSaIfEEaSERKS1_>
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	69da      	ldr	r2, [r3, #28]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	61da      	str	r2, [r3, #28]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <_ZN9MotorInfo10setMathLibE7MathLib>:

void MotorInfo::setMathLib(MathLib pLib){
 8004176:	b580      	push	{r7, lr}
 8004178:	b082      	sub	sp, #8
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	6039      	str	r1, [r7, #0]
	mLib = pLib;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	333c      	adds	r3, #60	; 0x3c
 8004184:	6839      	ldr	r1, [r7, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff ffd6 	bl	8004138 <_ZN7MathLibaSERKS_>
}
 800418c:	bf00      	nop
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <_ZN9MotorInfo6setArgEi>:

void MotorInfo::setVu(float pVu){mVu=pVu;};
void MotorInfo::setVv(float pVv){mVv=pVv;};
void MotorInfo::setVw(float pVw){mVw=pVw;};

void MotorInfo::setArg(int parg){
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
	marg = parg;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <_ZN9MotorInfo5setVdEf>:
	mIq = -mLib.getSinList().at(marg) * mIalpha + mLib.getCosList().at(marg) * mIbeta;
};

void MotorInfo::PID(void){}

void MotorInfo::setVd(float pVd){mVd = pVd;}
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	ed87 0a00 	vstr	s0, [r7]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	635a      	str	r2, [r3, #52]	; 0x34
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <_ZN9MotorInfo5setVqEf>:
void MotorInfo::setVq(float pVq){mVq = pVq;}
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	ed87 0a00 	vstr	s0, [r7]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	639a      	str	r2, [r3, #56]	; 0x38
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <_ZN9MotorInfo17invClarkTransformEv>:

void MotorInfo::invClarkTransform(void){
 80041ec:	b580      	push	{r7, lr}
 80041ee:	ed2d 8b02 	vpush	{d8}
 80041f2:	b08e      	sub	sp, #56	; 0x38
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
	mValpha = mLib.getCosList().at(marg) * mVd - mLib.getSinList().at(marg) * mVq;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80041fe:	f107 0308 	add.w	r3, r7, #8
 8004202:	4611      	mov	r1, r2
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff f966 	bl	80034d6 <_ZN7MathLib10getCosListEv>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420e:	461a      	mov	r2, r3
 8004210:	f107 0308 	add.w	r3, r7, #8
 8004214:	4611      	mov	r1, r2
 8004216:	4618      	mov	r0, r3
 8004218:	f000 f9f6 	bl	8004608 <_ZNSt6vectorIfSaIfEE2atEj>
 800421c:	4603      	mov	r3, r0
 800421e:	ed93 7a00 	vldr	s14, [r3]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004228:	ee27 8a27 	vmul.f32	s16, s14, s15
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004232:	f107 0314 	add.w	r3, r7, #20
 8004236:	4611      	mov	r1, r2
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff f93d 	bl	80034b8 <_ZN7MathLib10getSinListEv>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004242:	461a      	mov	r2, r3
 8004244:	f107 0314 	add.w	r3, r7, #20
 8004248:	4611      	mov	r1, r2
 800424a:	4618      	mov	r0, r3
 800424c:	f000 f9dc 	bl	8004608 <_ZNSt6vectorIfSaIfEE2atEj>
 8004250:	4603      	mov	r3, r0
 8004252:	ed93 7a00 	vldr	s14, [r3]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800425c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004260:	ee78 7a67 	vsub.f32	s15, s16, s15
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 800426a:	f107 0314 	add.w	r3, r7, #20
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff f94d 	bl	800350e <_ZNSt6vectorIfSaIfEED1Ev>
 8004274:	f107 0308 	add.w	r3, r7, #8
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff f948 	bl	800350e <_ZNSt6vectorIfSaIfEED1Ev>
	mVbeta  = mLib.getSinList().at(marg) * mVd + mLib.getCosList().at(marg) * mVq;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004284:	f107 0320 	add.w	r3, r7, #32
 8004288:	4611      	mov	r1, r2
 800428a:	4618      	mov	r0, r3
 800428c:	f7ff f914 	bl	80034b8 <_ZN7MathLib10getSinListEv>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004294:	461a      	mov	r2, r3
 8004296:	f107 0320 	add.w	r3, r7, #32
 800429a:	4611      	mov	r1, r2
 800429c:	4618      	mov	r0, r3
 800429e:	f000 f9b3 	bl	8004608 <_ZNSt6vectorIfSaIfEE2atEj>
 80042a2:	4603      	mov	r3, r0
 80042a4:	ed93 7a00 	vldr	s14, [r3]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80042ae:	ee27 8a27 	vmul.f32	s16, s14, s15
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80042b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042bc:	4611      	mov	r1, r2
 80042be:	4618      	mov	r0, r3
 80042c0:	f7ff f909 	bl	80034d6 <_ZN7MathLib10getCosListEv>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c8:	461a      	mov	r2, r3
 80042ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042ce:	4611      	mov	r1, r2
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 f999 	bl	8004608 <_ZNSt6vectorIfSaIfEE2atEj>
 80042d6:	4603      	mov	r3, r0
 80042d8:	ed93 7a00 	vldr	s14, [r3]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80042e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e6:	ee78 7a27 	vadd.f32	s15, s16, s15
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
 80042f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff f90a 	bl	800350e <_ZNSt6vectorIfSaIfEED1Ev>
 80042fa:	f107 0320 	add.w	r3, r7, #32
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff f905 	bl	800350e <_ZNSt6vectorIfSaIfEED1Ev>
};
 8004304:	bf00      	nop
 8004306:	3738      	adds	r7, #56	; 0x38
 8004308:	46bd      	mov	sp, r7
 800430a:	ecbd 8b02 	vpop	{d8}
 800430e:	bd80      	pop	{r7, pc}

08004310 <_ZN9MotorInfo16invParkTransformEv>:

void MotorInfo::invParkTransform(void){
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
	mVu = 0.75f * mValpha;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800431e:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8004322:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	edc3 7a08 	vstr	s15, [r3, #32]
	mVv = -0.75f * mValpha + mValpha / 3 + mVbeta / 1.7320508f;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004332:	eebe 7a08 	vmov.f32	s14, #232	; 0xbf400000 -0.750
 8004336:	ee27 7a87 	vmul.f32	s14, s15, s14
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8004340:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8004344:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004348:	ee37 7a27 	vadd.f32	s14, s14, s15
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8004352:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800439c <_ZN9MotorInfo16invParkTransformEv+0x8c>
 8004356:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800435a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	mVw = - mValpha / 3 - mVbeta / 1.7320508f;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800436a:	eef1 7a67 	vneg.f32	s15, s15
 800436e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8004372:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800437c:	ed9f 6a07 	vldr	s12, [pc, #28]	; 800439c <_ZN9MotorInfo16invParkTransformEv+0x8c>
 8004380:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004384:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
//	Iu + Iv - Iw = -2*Iw;
//	Ialpha * 2/3 + Ibeta * 2/sqrt(3) = -2 Iw;
//
//
//	Iv = -Iu - Iw;
};
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	3fddb3d7 	.word	0x3fddb3d7

080043a0 <_ZN9MotorInfo5getVuEv>:
float MotorInfo::getVq(void){return mVq;};

float MotorInfo::getValpha(void){return mValpha;};
float MotorInfo::getVbeta(void){return mVbeta;};

float MotorInfo::getVu(void){return mVu;};
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	ee07 3a90 	vmov	s15, r3
 80043b0:	eeb0 0a67 	vmov.f32	s0, s15
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <_ZN9MotorInfo5getVvEv>:
float MotorInfo::getVv(void){return mVv;};
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	ee07 3a90 	vmov	s15, r3
 80043ce:	eeb0 0a67 	vmov.f32	s0, s15
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <_ZN9MotorInfo5getVwEv>:
float MotorInfo::getVw(void){return mVw;};
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e8:	ee07 3a90 	vmov	s15, r3
 80043ec:	eeb0 0a67 	vmov.f32	s0, s15
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <_ZN9__gnu_cxx14__alloc_traitsISaIfEE27_S_propagate_on_copy_assignEv>:

    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
 80043fa:	b480      	push	{r7}
 80043fc:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 80043fe:	2300      	movs	r3, #0
 8004400:	4618      	mov	r0, r3
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <_ZN9__gnu_cxx14__alloc_traitsISaIfEE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 800440a:	b480      	push	{r7}
 800440c:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 800440e:	2301      	movs	r3, #1
 8004410:	4618      	mov	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <_ZNSt6vectorIfSaIfEEaSERKS1_>:
    vector<_Tp, _Alloc>::
 800441a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800441c:	b085      	sub	sp, #20
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	6039      	str	r1, [r7, #0]
      if (&__x != this)
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	429a      	cmp	r2, r3
 800442a:	f000 80e8 	beq.w	80045fe <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1e4>
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 800442e:	f7ff ffe4 	bl	80043fa <_ZN9__gnu_cxx14__alloc_traitsISaIfEE27_S_propagate_on_copy_assignEv>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d044      	beq.n	80044c2 <_ZNSt6vectorIfSaIfEEaSERKS1_+0xa8>
	      if (!_Alloc_traits::_S_always_equal()
 8004438:	f7ff ffe7 	bl	800440a <_ZN9__gnu_cxx14__alloc_traitsISaIfEE15_S_always_equalEv>
 800443c:	4603      	mov	r3, r0
 800443e:	f083 0301 	eor.w	r3, r3, #1
 8004442:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 8004444:	2b00      	cmp	r3, #0
 8004446:	d012      	beq.n	800446e <_ZNSt6vectorIfSaIfEEaSERKS1_+0x54>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff f91d 	bl	800368a <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8004450:	4604      	mov	r4, r0
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff fa24 	bl	80038a2 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800445a:	4603      	mov	r3, r0
 800445c:	4619      	mov	r1, r3
 800445e:	4620      	mov	r0, r4
 8004460:	f000 f8e4 	bl	800462c <_ZStneIfEbRKSaIT_ES3_>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <_ZNSt6vectorIfSaIfEEaSERKS1_+0x54>
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x56>
 800446e:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 8004470:	2b00      	cmp	r3, #0
 8004472:	d018      	beq.n	80044a6 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x8c>
		  this->clear();
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f7ff f865 	bl	8003544 <_ZNSt6vectorIfSaIfEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
				- this->_M_impl._M_start);
 8004484:	461a      	mov	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	109b      	asrs	r3, r3, #2
		  _M_deallocate(this->_M_impl._M_start,
 800448e:	461a      	mov	r2, r3
 8004490:	f7ff fa80 	bl	8003994 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
		  this->_M_impl._M_start = nullptr;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	609a      	str	r2, [r3, #8]
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff f8ee 	bl	800368a <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80044ae:	4604      	mov	r4, r0
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7ff f9f5 	bl	80038a2 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80044b8:	4603      	mov	r3, r0
 80044ba:	4619      	mov	r1, r3
 80044bc:	4620      	mov	r0, r4
 80044be:	f000 f8c1 	bl	8004644 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>
	  const size_type __xlen = __x.size();
 80044c2:	6838      	ldr	r0, [r7, #0]
 80044c4:	f7ff f9ce 	bl	8003864 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80044c8:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f8c8 	bl	8004660 <_ZNKSt6vectorIfSaIfEE8capacityEv>
 80044d0:	4602      	mov	r2, r0
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	4293      	cmp	r3, r2
 80044d6:	bf8c      	ite	hi
 80044d8:	2301      	movhi	r3, #1
 80044da:	2300      	movls	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d033      	beq.n	800454a <_ZNSt6vectorIfSaIfEEaSERKS1_+0x130>
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 80044e2:	6838      	ldr	r0, [r7, #0]
 80044e4:	f7ff fa08 	bl	80038f8 <_ZNKSt6vectorIfSaIfEE5beginEv>
 80044e8:	4604      	mov	r4, r0
 80044ea:	6838      	ldr	r0, [r7, #0]
 80044ec:	f7ff fa18 	bl	8003920 <_ZNKSt6vectorIfSaIfEE3endEv>
 80044f0:	4603      	mov	r3, r0
 80044f2:	4622      	mov	r2, r4
 80044f4:	68f9      	ldr	r1, [r7, #12]
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f8c3 	bl	8004682 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>
 80044fc:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681c      	ldr	r4, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff f8be 	bl	800368a <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800450e:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004510:	461a      	mov	r2, r3
 8004512:	4629      	mov	r1, r5
 8004514:	4620      	mov	r0, r4
 8004516:	f7ff f8c3 	bl	80036a0 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
			    - this->_M_impl._M_start);
 8004524:	461a      	mov	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 800452e:	461a      	mov	r2, r3
 8004530:	f7ff fa30 	bl	8003994 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
	      this->_M_impl._M_start = __tmp;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	441a      	add	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	609a      	str	r2, [r3, #8]
 8004548:	e052      	b.n	80045f0 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d6>
	  else if (size() >= __xlen)
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7ff f98a 	bl	8003864 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004550:	4602      	mov	r2, r0
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4293      	cmp	r3, r2
 8004556:	bf94      	ite	ls
 8004558:	2301      	movls	r3, #1
 800455a:	2300      	movhi	r3, #0
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d020      	beq.n	80045a4 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x18a>
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8004562:	6838      	ldr	r0, [r7, #0]
 8004564:	f7ff f9c8 	bl	80038f8 <_ZNKSt6vectorIfSaIfEE5beginEv>
 8004568:	4604      	mov	r4, r0
 800456a:	6838      	ldr	r0, [r7, #0]
 800456c:	f7ff f9d8 	bl	8003920 <_ZNKSt6vectorIfSaIfEE3endEv>
 8004570:	4605      	mov	r5, r0
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7ff fa9e 	bl	8003ab4 <_ZNSt6vectorIfSaIfEE5beginEv>
 8004578:	4603      	mov	r3, r0
 800457a:	461a      	mov	r2, r3
 800457c:	4629      	mov	r1, r5
 800457e:	4620      	mov	r0, r4
 8004580:	f000 f89b 	bl	80046ba <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>
 8004584:	4604      	mov	r4, r0
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7ff f8ce 	bl	8003728 <_ZNSt6vectorIfSaIfEE3endEv>
 800458c:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff f87a 	bl	800368a <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8004596:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8004598:	461a      	mov	r2, r3
 800459a:	4629      	mov	r1, r5
 800459c:	4620      	mov	r0, r4
 800459e:	f000 f8a4 	bl	80046ea <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>
 80045a2:	e025      	b.n	80045f0 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d6>
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681d      	ldr	r5, [r3, #0]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681c      	ldr	r4, [r3, #0]
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7ff f959 	bl	8003864 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80045b2:	4603      	mov	r3, r0
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	18e1      	adds	r1, r4, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	461a      	mov	r2, r3
 80045be:	4628      	mov	r0, r5
 80045c0:	f000 f8a1 	bl	8004706 <_ZSt4copyIPfS0_ET0_T_S2_S1_>
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681c      	ldr	r4, [r3, #0]
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7ff f94b 	bl	8003864 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80045ce:	4603      	mov	r3, r0
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685e      	ldr	r6, [r3, #4]
					  _M_get_Tp_allocator());
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff f853 	bl	800368a <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80045e4:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 80045e6:	4632      	mov	r2, r6
 80045e8:	4629      	mov	r1, r5
 80045ea:	4620      	mov	r0, r4
 80045ec:	f000 f8a3 	bl	8004736 <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	441a      	add	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	605a      	str	r2, [r3, #4]
      return *this;
 80045fe:	687b      	ldr	r3, [r7, #4]
    }
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004608 <_ZNSt6vectorIfSaIfEE2atEj>:
      at(size_type __n)
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
	_M_range_check(__n);
 8004612:	6839      	ldr	r1, [r7, #0]
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f89f 	bl	8004758 <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj>
	return (*this)[__n];
 800461a:	6839      	ldr	r1, [r7, #0]
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f8bb 	bl	8004798 <_ZNSt6vectorIfSaIfEEixEj>
 8004622:	4603      	mov	r3, r0
      }
 8004624:	4618      	mov	r0, r3
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <_ZStneIfEbRKSaIT_ES3_>:
    _GLIBCXX_USE_NOEXCEPT
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
    _GLIBCXX_USE_NOEXCEPT
    { return false; }
 8004636:	2300      	movs	r3, #0
 8004638:	4618      	mov	r0, r3
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>:
    inline void
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_copy_assignment __pocca;
      __do_alloc_on_copy(__one, __two, __pocca());
 800464e:	461a      	mov	r2, r3
 8004650:	6839      	ldr	r1, [r7, #0]
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f8b0 	bl	80047b8 <_ZSt18__do_alloc_on_copyISaIfEEvRT_RKS1_St17integral_constantIbLb0EE>
    }
 8004658:	bf00      	nop
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <_ZNKSt6vectorIfSaIfEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
			 - this->_M_impl._M_start); }
 800466c:	461a      	mov	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	109b      	asrs	r3, r3, #2
 8004676:	4618      	mov	r0, r3
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>:
	_M_allocate_and_copy(size_type __n,
 8004682:	b580      	push	{r7, lr}
 8004684:	b086      	sub	sp, #24
 8004686:	af00      	add	r7, sp, #0
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	607a      	str	r2, [r7, #4]
 800468e:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	68b9      	ldr	r1, [r7, #8]
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff fa33 	bl	8003b00 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 800469a:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4618      	mov	r0, r3
 80046a0:	f7fe fff3 	bl	800368a <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80046a4:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	6839      	ldr	r1, [r7, #0]
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7ff f94c 	bl	8003948 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
	      return __result;
 80046b0:	697b      	ldr	r3, [r7, #20]
	}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 80046ba:	b590      	push	{r4, r7, lr}
 80046bc:	b085      	sub	sp, #20
 80046be:	af00      	add	r7, sp, #0
 80046c0:	60f8      	str	r0, [r7, #12]
 80046c2:	60b9      	str	r1, [r7, #8]
 80046c4:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f7ff fbf9 	bl	8003ebe <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 80046cc:	4604      	mov	r4, r0
 80046ce:	68b8      	ldr	r0, [r7, #8]
 80046d0:	f7ff fbf5 	bl	8003ebe <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 80046d4:	4603      	mov	r3, r0
	       __result));
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	4619      	mov	r1, r3
 80046da:	4620      	mov	r0, r4
 80046dc:	f000 f878 	bl	80047d0 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>
 80046e0:	4603      	mov	r3, r0
    }
 80046e2:	4618      	mov	r0, r3
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd90      	pop	{r4, r7, pc}

080046ea <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b084      	sub	sp, #16
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	60f8      	str	r0, [r7, #12]
 80046f2:	60b9      	str	r1, [r7, #8]
 80046f4:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80046f6:	68b9      	ldr	r1, [r7, #8]
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 f88f 	bl	800481c <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>
    }
 80046fe:	bf00      	nop
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <_ZSt4copyIPfS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 8004706:	b590      	push	{r4, r7, lr}
 8004708:	b085      	sub	sp, #20
 800470a:	af00      	add	r7, sp, #0
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f7ff fc9e 	bl	8004054 <_ZSt12__miter_baseIPfET_S1_>
 8004718:	4604      	mov	r4, r0
 800471a:	68b8      	ldr	r0, [r7, #8]
 800471c:	f7ff fc9a 	bl	8004054 <_ZSt12__miter_baseIPfET_S1_>
 8004720:	4603      	mov	r3, r0
	       __result));
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	4619      	mov	r1, r3
 8004726:	4620      	mov	r0, r4
 8004728:	f000 f885 	bl	8004836 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>
 800472c:	4603      	mov	r3, r0
    }
 800472e:	4618      	mov	r0, r3
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	bd90      	pop	{r4, r7, pc}

08004736 <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8004736:	b580      	push	{r7, lr}
 8004738:	b084      	sub	sp, #16
 800473a:	af00      	add	r7, sp, #0
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	607a      	str	r2, [r7, #4]
 8004742:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	68b9      	ldr	r1, [r7, #8]
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f000 f890 	bl	800486e <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>
 800474e:	4603      	mov	r3, r0
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj>:
      _M_range_check(size_type __n) const
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
	if (__n >= this->size())
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7ff f87e 	bl	8003864 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004768:	4602      	mov	r2, r0
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	4293      	cmp	r3, r2
 800476e:	bf2c      	ite	cs
 8004770:	2301      	movcs	r3, #1
 8004772:	2300      	movcc	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d008      	beq.n	800478c <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj+0x34>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7ff f872 	bl	8003864 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004780:	4603      	mov	r3, r0
 8004782:	461a      	mov	r2, r3
 8004784:	6839      	ldr	r1, [r7, #0]
 8004786:	4803      	ldr	r0, [pc, #12]	; (8004794 <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj+0x3c>)
 8004788:	f001 fd91 	bl	80062ae <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 800478c:	bf00      	nop
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	08009114 	.word	0x08009114

08004798 <_ZNSt6vectorIfSaIfEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
      }
 80047ac:	4618      	mov	r0, r3
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <_ZSt18__do_alloc_on_copyISaIfEEvRT_RKS1_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	713a      	strb	r2, [r7, #4]
    { }
 80047c4:	bf00      	nop
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80047d0:	b5b0      	push	{r4, r5, r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f7ff fbad 	bl	8003f3c <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80047e2:	4604      	mov	r4, r0
 80047e4:	68b8      	ldr	r0, [r7, #8]
 80047e6:	f7ff fba9 	bl	8003f3c <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80047ea:	4605      	mov	r5, r0
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f850 	bl	8004892 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80047f2:	4603      	mov	r3, r0
 80047f4:	461a      	mov	r2, r3
 80047f6:	4629      	mov	r1, r5
 80047f8:	4620      	mov	r0, r4
 80047fa:	f7ff fbb8 	bl	8003f6e <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 80047fe:	4603      	mov	r3, r0
 8004800:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 8004802:	f107 0214 	add.w	r2, r7, #20
 8004806:	f107 0310 	add.w	r3, r7, #16
 800480a:	4611      	mov	r1, r2
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff f8f9 	bl	8003a04 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8004812:	693b      	ldr	r3, [r7, #16]
    }
 8004814:	4618      	mov	r0, r3
 8004816:	3718      	adds	r7, #24
 8004818:	46bd      	mov	sp, r7
 800481a:	bdb0      	pop	{r4, r5, r7, pc}

0800481c <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8004826:	6839      	ldr	r1, [r7, #0]
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f840 	bl	80048ae <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>
    }
 800482e:	bf00      	nop
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004836:	b5b0      	push	{r4, r5, r7, lr}
 8004838:	b084      	sub	sp, #16
 800483a:	af00      	add	r7, sp, #0
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	60b9      	str	r1, [r7, #8]
 8004840:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f7ff fb88 	bl	8003f58 <_ZSt12__niter_baseIPfET_S1_>
 8004848:	4604      	mov	r4, r0
 800484a:	68b8      	ldr	r0, [r7, #8]
 800484c:	f7ff fb84 	bl	8003f58 <_ZSt12__niter_baseIPfET_S1_>
 8004850:	4605      	mov	r5, r0
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7ff fb80 	bl	8003f58 <_ZSt12__niter_baseIPfET_S1_>
 8004858:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 800485a:	461a      	mov	r2, r3
 800485c:	4629      	mov	r1, r5
 800485e:	4620      	mov	r0, r4
 8004860:	f000 f830 	bl	80048c4 <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>
 8004864:	4603      	mov	r3, r0
    }
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bdb0      	pop	{r4, r5, r7, pc}

0800486e <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800486e:	b580      	push	{r7, lr}
 8004870:	b086      	sub	sp, #24
 8004872:	af00      	add	r7, sp, #0
 8004874:	60f8      	str	r0, [r7, #12]
 8004876:	60b9      	str	r1, [r7, #8]
 8004878:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800487a:	2301      	movs	r3, #1
 800487c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	68b9      	ldr	r1, [r7, #8]
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f000 f830 	bl	80048e8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>
 8004888:	4603      	mov	r3, r0
    }
 800488a:	4618      	mov	r0, r3
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8004892:	b580      	push	{r7, lr}
 8004894:	b082      	sub	sp, #8
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800489a:	1d3b      	adds	r3, r7, #4
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff f943 	bl	8003b28 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 80048a2:	4603      	mov	r3, r0
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
 80048b6:	6039      	str	r1, [r7, #0]
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 80048d0:	2301      	movs	r3, #1
 80048d2:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	68b9      	ldr	r1, [r7, #8]
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f7ff fb92 	bl	8004002 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 80048de:	4603      	mov	r3, r0
    }
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	68b9      	ldr	r1, [r7, #8]
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f7ff ff04 	bl	8004706 <_ZSt4copyIPfS0_ET0_T_S2_S1_>
 80048fe:	4603      	mov	r3, r0
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <LL_TIM_EnableCounter>:
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f043 0201 	orr.w	r2, r3, #1
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	601a      	str	r2, [r3, #0]
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <LL_TIM_CC_EnableChannel>:
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1a      	ldr	r2, [r3, #32]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	621a      	str	r2, [r3, #32]
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <LL_TIM_EnableAllOutputs>:
{
 800494a:	b480      	push	{r7}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004956:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	645a      	str	r2, [r3, #68]	; 0x44
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <_ZN3PWM6setTIMEP11TIM_TypeDef>:

#include "PWM.hpp"
#include "stm32f4xx_hal.h"
#include "tim.h"

void PWM::setTIM(TIM_TypeDef* pTIMx){
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
 8004972:	6039      	str	r1, [r7, #0]
	mTIMx = pTIMx;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	601a      	str	r2, [r3, #0]
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <_ZN3PWM5setCHEi>:

//void PWM::setCH(__IO uint32_t pCCR);

void PWM::setCH(int pCH){
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
 800498e:	6039      	str	r1, [r7, #0]
	mCH = pCH;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	605a      	str	r2, [r3, #4]
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <_ZN3PWM5fInitEi>:
	LL_TIM_EnableAllOutputs(mTIMx);// need
	//PWM TIM Init end

}

void PWM::fInit(int pTimReload){
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b082      	sub	sp, #8
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
 80049aa:	6039      	str	r1, [r7, #0]

	mTimReload = pTimReload;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	609a      	str	r2, [r3, #8]

	if(mCH==0){//error check
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d100      	bne.n	80049bc <_ZN3PWM5fInitEi+0x1a>
		while(1){}
 80049ba:	e7fe      	b.n	80049ba <_ZN3PWM5fInitEi+0x18>
	}

	//mREG Init
	if (mCH == 1){
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d105      	bne.n	80049d0 <_ZN3PWM5fInitEi+0x2e>
		mREG=&(mTIMx->CCR1);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 2){
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d105      	bne.n	80049e4 <_ZN3PWM5fInitEi+0x42>
		mREG=&(mTIMx->CCR2);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 3){
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d105      	bne.n	80049f8 <_ZN3PWM5fInitEi+0x56>
		mREG=&(mTIMx->CCR3);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 4){
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d105      	bne.n	8004a0c <_ZN3PWM5fInitEi+0x6a>
		mREG=&(mTIMx->CCR4);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	60da      	str	r2, [r3, #12]
	}

	if(mREG==NULL){//error check
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d100      	bne.n	8004a16 <_ZN3PWM5fInitEi+0x74>
		while(1){}
 8004a14:	e7fe      	b.n	8004a14 <_ZN3PWM5fInitEi+0x72>
	}
	//mREG Init end

	//PWM Channel Init
	if(mTIMx==NULL){//error check
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d100      	bne.n	8004a20 <_ZN3PWM5fInitEi+0x7e>
		while(1){}
 8004a1e:	e7fe      	b.n	8004a1e <_ZN3PWM5fInitEi+0x7c>
	}
	if (mCH == 1){
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d105      	bne.n	8004a34 <_ZN3PWM5fInitEi+0x92>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH1);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7ff ff7a 	bl	8004928 <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 2){
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d105      	bne.n	8004a48 <_ZN3PWM5fInitEi+0xa6>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH2);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2110      	movs	r1, #16
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7ff ff70 	bl	8004928 <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 3){
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	2b03      	cmp	r3, #3
 8004a4e:	d106      	bne.n	8004a5e <_ZN3PWM5fInitEi+0xbc>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH3);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7ff ff65 	bl	8004928 <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 4){
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d106      	bne.n	8004a74 <_ZN3PWM5fInitEi+0xd2>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH4);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7ff ff5a 	bl	8004928 <LL_TIM_CC_EnableChannel>
	}
	//PWM Channel Init end

	//PWM TIM Init
	LL_TIM_EnableCounter(mTIMx);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7ff ff45 	bl	8004908 <LL_TIM_EnableCounter>
	//LL_TIM_GenerateEvent_UPDATE(TIM1);//
	LL_TIM_EnableAllOutputs(mTIMx);// need
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7ff ff61 	bl	800494a <LL_TIM_EnableAllOutputs>
	//PWM TIM Init end

}
 8004a88:	bf00      	nop
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <_ZN3PWM6f2DutyEf>:
void PWM::fDuty(float pfDuty){
	int pDuty = pfDuty * (float)mTimReload;
	WRITE_REG(*mREG, pDuty);
}

void PWM::f2Duty(float pfDuty){
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	ed87 0a00 	vstr	s0, [r7]
	int pDuty = (pfDuty + 1)/2 * (float)mTimReload;
 8004a9c:	edd7 7a00 	vldr	s15, [r7]
 8004aa0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004aa4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004aa8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004aac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	ee07 3a90 	vmov	s15, r3
 8004ab8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ac4:	ee17 3a90 	vmov	r3, s15
 8004ac8:	60fb      	str	r3, [r7, #12]
	WRITE_REG(*mREG, pDuty);
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	601a      	str	r2, [r3, #0]
}
 8004ad2:	bf00      	nop
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
	...

08004ae0 <__NVIC_GetPriorityGrouping>:
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ae4:	4b04      	ldr	r3, [pc, #16]	; (8004af8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	0a1b      	lsrs	r3, r3, #8
 8004aea:	f003 0307 	and.w	r3, r3, #7
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	e000ed00 	.word	0xe000ed00

08004afc <__NVIC_EnableIRQ>:
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	4603      	mov	r3, r0
 8004b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	db0b      	blt.n	8004b26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b0e:	79fb      	ldrb	r3, [r7, #7]
 8004b10:	f003 021f 	and.w	r2, r3, #31
 8004b14:	4907      	ldr	r1, [pc, #28]	; (8004b34 <__NVIC_EnableIRQ+0x38>)
 8004b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b1a:	095b      	lsrs	r3, r3, #5
 8004b1c:	2001      	movs	r0, #1
 8004b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8004b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	e000e100 	.word	0xe000e100

08004b38 <__NVIC_SetPriority>:
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	4603      	mov	r3, r0
 8004b40:	6039      	str	r1, [r7, #0]
 8004b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	db0a      	blt.n	8004b62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	490c      	ldr	r1, [pc, #48]	; (8004b84 <__NVIC_SetPriority+0x4c>)
 8004b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b56:	0112      	lsls	r2, r2, #4
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	440b      	add	r3, r1
 8004b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004b60:	e00a      	b.n	8004b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	4908      	ldr	r1, [pc, #32]	; (8004b88 <__NVIC_SetPriority+0x50>)
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	3b04      	subs	r3, #4
 8004b70:	0112      	lsls	r2, r2, #4
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	440b      	add	r3, r1
 8004b76:	761a      	strb	r2, [r3, #24]
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	e000e100 	.word	0xe000e100
 8004b88:	e000ed00 	.word	0xe000ed00

08004b8c <NVIC_EncodePriority>:
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b089      	sub	sp, #36	; 0x24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	f1c3 0307 	rsb	r3, r3, #7
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	bf28      	it	cs
 8004baa:	2304      	movcs	r3, #4
 8004bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	2b06      	cmp	r3, #6
 8004bb4:	d902      	bls.n	8004bbc <NVIC_EncodePriority+0x30>
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	3b03      	subs	r3, #3
 8004bba:	e000      	b.n	8004bbe <NVIC_EncodePriority+0x32>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bca:	43da      	mvns	r2, r3
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	401a      	ands	r2, r3
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	fa01 f303 	lsl.w	r3, r1, r3
 8004bde:	43d9      	mvns	r1, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004be4:	4313      	orrs	r3, r2
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3724      	adds	r7, #36	; 0x24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <LL_ADC_REG_SetSequencerRanks>:
{
 8004bf2:	b490      	push	{r4, r7}
 8004bf4:	b086      	sub	sp, #24
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	332c      	adds	r3, #44	; 0x2c
 8004c02:	4619      	mov	r1, r3
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c0a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004c0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	fa92 f2a2 	rbit	r2, r2
 8004c16:	613a      	str	r2, [r7, #16]
  return result;
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	fab2 f282 	clz	r2, r2
 8004c1e:	b2d2      	uxtb	r2, r2
 8004c20:	40d3      	lsrs	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8004c28:	6822      	ldr	r2, [r4, #0]
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	f003 031f 	and.w	r3, r3, #31
 8004c30:	211f      	movs	r1, #31
 8004c32:	fa01 f303 	lsl.w	r3, r1, r3
 8004c36:	43db      	mvns	r3, r3
 8004c38:	401a      	ands	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f003 011f 	and.w	r1, r3, #31
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f003 031f 	and.w	r3, r3, #31
 8004c46:	fa01 f303 	lsl.w	r3, r1, r3
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	6023      	str	r3, [r4, #0]
}
 8004c4e:	bf00      	nop
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bc90      	pop	{r4, r7}
 8004c56:	4770      	bx	lr

08004c58 <LL_ADC_REG_SetFlagEndOfConversion>:
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	609a      	str	r2, [r3, #8]
}
 8004c72:	bf00      	nop
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <LL_ADC_INJ_SetSequencerRanks>:
{
 8004c7e:	b490      	push	{r4, r7}
 8004c80:	b084      	sub	sp, #16
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	60f8      	str	r0, [r7, #12]
 8004c86:	60b9      	str	r1, [r7, #8]
 8004c88:	607a      	str	r2, [r7, #4]
  register uint32_t tmpreg1 = (READ_BIT(ADCx->JSQR, ADC_JSQR_JL) >> ADC_JSQR_JL_Pos) + 1U;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8e:	0d1b      	lsrs	r3, r3, #20
 8004c90:	f003 0303 	and.w	r3, r3, #3
 8004c94:	1c5c      	adds	r4, r3, #1
  MODIFY_REG(ADCx->JSQR,
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	b2d9      	uxtb	r1, r3
 8004c9e:	b2e3      	uxtb	r3, r4
 8004ca0:	1acb      	subs	r3, r1, r3
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	3303      	adds	r3, #3
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	4619      	mov	r1, r3
 8004caa:	460b      	mov	r3, r1
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	440b      	add	r3, r1
 8004cb0:	211f      	movs	r1, #31
 8004cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb6:	43db      	mvns	r3, r3
 8004cb8:	401a      	ands	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f003 011f 	and.w	r1, r3, #31
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	b2d8      	uxtb	r0, r3
 8004cc4:	b2e3      	uxtb	r3, r4
 8004cc6:	1ac3      	subs	r3, r0, r3
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	3303      	adds	r3, #3
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	4618      	mov	r0, r3
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4403      	add	r3, r0
 8004cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004ce0:	bf00      	nop
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bc90      	pop	{r4, r7}
 8004ce8:	4770      	bx	lr

08004cea <LL_ADC_INJ_SetOffset>:
{
 8004cea:	b490      	push	{r4, r7}
 8004cec:	b086      	sub	sp, #24
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	60f8      	str	r0, [r7, #12]
 8004cf2:	60b9      	str	r1, [r7, #8]
 8004cf4:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JOFR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JOFRX_REGOFFSET_MASK));
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	3314      	adds	r3, #20
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004d02:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004d06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	fa92 f2a2 	rbit	r2, r2
 8004d0e:	613a      	str	r2, [r7, #16]
  return result;
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	fab2 f282 	clz	r2, r2
 8004d16:	b2d2      	uxtb	r2, r2
 8004d18:	40d3      	lsrs	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8004d20:	6823      	ldr	r3, [r4, #0]
 8004d22:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004d26:	f023 030f 	bic.w	r3, r3, #15
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	6023      	str	r3, [r4, #0]
}
 8004d30:	bf00      	nop
 8004d32:	3718      	adds	r7, #24
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bc90      	pop	{r4, r7}
 8004d38:	4770      	bx	lr

08004d3a <LL_ADC_SetChannelSamplingTime>:
{
 8004d3a:	b490      	push	{r4, r7}
 8004d3c:	b08a      	sub	sp, #40	; 0x28
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	60f8      	str	r0, [r7, #12]
 8004d42:	60b9      	str	r1, [r7, #8]
 8004d44:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	330c      	adds	r3, #12
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	fa92 f2a2 	rbit	r2, r2
 8004d5e:	613a      	str	r2, [r7, #16]
  return result;
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	fab2 f282 	clz	r2, r2
 8004d66:	b2d2      	uxtb	r2, r2
 8004d68:	40d3      	lsrs	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	440b      	add	r3, r1
 8004d6e:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8004d70:	6822      	ldr	r2, [r4, #0]
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8004d78:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8004d7c:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7e:	69f9      	ldr	r1, [r7, #28]
 8004d80:	fa91 f1a1 	rbit	r1, r1
 8004d84:	61b9      	str	r1, [r7, #24]
  return result;
 8004d86:	69b9      	ldr	r1, [r7, #24]
 8004d88:	fab1 f181 	clz	r1, r1
 8004d8c:	b2c9      	uxtb	r1, r1
 8004d8e:	40cb      	lsrs	r3, r1
 8004d90:	2107      	movs	r1, #7
 8004d92:	fa01 f303 	lsl.w	r3, r1, r3
 8004d96:	43db      	mvns	r3, r3
 8004d98:	401a      	ands	r2, r3
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8004da0:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8004da4:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004da8:	fa91 f1a1 	rbit	r1, r1
 8004dac:	6239      	str	r1, [r7, #32]
  return result;
 8004dae:	6a39      	ldr	r1, [r7, #32]
 8004db0:	fab1 f181 	clz	r1, r1
 8004db4:	b2c9      	uxtb	r1, r1
 8004db6:	40cb      	lsrs	r3, r1
 8004db8:	6879      	ldr	r1, [r7, #4]
 8004dba:	fa01 f303 	lsl.w	r3, r1, r3
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	6023      	str	r3, [r4, #0]
}
 8004dc2:	bf00      	nop
 8004dc4:	3728      	adds	r7, #40	; 0x28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bc90      	pop	{r4, r7}
 8004dca:	4770      	bx	lr

08004dcc <LL_ADC_INJ_StartConversionExtTrig>:
  *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISINGFALLING
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StartConversionExtTrig(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689a      	ldr	r2, [r3, #8]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	609a      	str	r2, [r3, #8]
}
 8004de2:	bf00      	nop
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <LL_ADC_DisableIT_EOCS>:
  * @rmtoll CR1      EOCIE          LL_ADC_DisableIT_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
 8004dee:	b480      	push	{r7}
 8004df0:	b083      	sub	sp, #12
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f023 0220 	bic.w	r2, r3, #32
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	605a      	str	r2, [r3, #4]
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <LL_ADC_DisableIT_JEOS>:
  * @rmtoll CR1      JEOCIE         LL_ADC_EnableIT_JEOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOS(ADC_TypeDef *ADCx)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	605a      	str	r2, [r3, #4]
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
	...

08004e30 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004e38:	4b08      	ldr	r3, [pc, #32]	; (8004e5c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004e3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e3c:	4907      	ldr	r1, [pc, #28]	; (8004e5c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004e44:	4b05      	ldr	r3, [pc, #20]	; (8004e5c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004e46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
}
 8004e50:	bf00      	nop
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	40023800 	.word	0x40023800

08004e60 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004e68:	4b08      	ldr	r3, [pc, #32]	; (8004e8c <LL_APB2_GRP1_EnableClock+0x2c>)
 8004e6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e6c:	4907      	ldr	r1, [pc, #28]	; (8004e8c <LL_APB2_GRP1_EnableClock+0x2c>)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004e74:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <LL_APB2_GRP1_EnableClock+0x2c>)
 8004e76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
}
 8004e80:	bf00      	nop
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	40023800 	.word	0x40023800

08004e90 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b096      	sub	sp, #88	; 0x58
 8004e94:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8004e96:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	605a      	str	r2, [r3, #4]
 8004ea0:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8004ea2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	605a      	str	r2, [r3, #4]
 8004eac:	609a      	str	r2, [r3, #8]
 8004eae:	60da      	str	r2, [r3, #12]
 8004eb0:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8004eb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	605a      	str	r2, [r3, #4]
 8004ebc:	609a      	str	r2, [r3, #8]
 8004ebe:	60da      	str	r2, [r3, #12]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 8004ec0:	f107 0318 	add.w	r3, r7, #24
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	605a      	str	r2, [r3, #4]
 8004eca:	609a      	str	r2, [r3, #8]
 8004ecc:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ece:	463b      	mov	r3, r7
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	605a      	str	r2, [r3, #4]
 8004ed6:	609a      	str	r2, [r3, #8]
 8004ed8:	60da      	str	r2, [r3, #12]
 8004eda:	611a      	str	r2, [r3, #16]
 8004edc:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8004ede:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004ee2:	f7ff ffbd 	bl	8004e60 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8004ee6:	2004      	movs	r0, #4
 8004ee8:	f7ff ffa2 	bl	8004e30 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004eec:	2001      	movs	r0, #1
 8004eee:	f7ff ff9f 	bl	8004e30 <LL_AHB1_GRP1_EnableClock>
  PC1   ------> ADC1_IN11
  PC2   ------> ADC1_IN12
  PA0-WKUP   ------> ADC1_IN0
  PA1   ------> ADC1_IN1 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 8004ef2:	2307      	movs	r3, #7
 8004ef4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004efa:	2300      	movs	r3, #0
 8004efc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004efe:	463b      	mov	r3, r7
 8004f00:	4619      	mov	r1, r3
 8004f02:	4869      	ldr	r0, [pc, #420]	; (80050a8 <MX_ADC1_Init+0x218>)
 8004f04:	f7fd fdff 	bl	8002b06 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004f10:	2300      	movs	r3, #0
 8004f12:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f14:	463b      	mov	r3, r7
 8004f16:	4619      	mov	r1, r3
 8004f18:	4864      	ldr	r0, [pc, #400]	; (80050ac <MX_ADC1_Init+0x21c>)
 8004f1a:	f7fd fdf4 	bl	8002b06 <LL_GPIO_Init>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8004f1e:	f7ff fddf 	bl	8004ae0 <__NVIC_GetPriorityGrouping>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2200      	movs	r2, #0
 8004f26:	2102      	movs	r1, #2
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7ff fe2f 	bl	8004b8c <NVIC_EncodePriority>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	4619      	mov	r1, r3
 8004f32:	2012      	movs	r0, #18
 8004f34:	f7ff fe00 	bl	8004b38 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 8004f38:	2012      	movs	r0, #18
 8004f3a:	f7ff fddf 	bl	8004afc <__NVIC_EnableIRQ>

  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	64fb      	str	r3, [r7, #76]	; 0x4c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8004f42:	2300      	movs	r3, #0
 8004f44:	653b      	str	r3, [r7, #80]	; 0x50
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8004f46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f4a:	657b      	str	r3, [r7, #84]	; 0x54
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8004f4c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004f50:	4619      	mov	r1, r3
 8004f52:	4857      	ldr	r0, [pc, #348]	; (80050b0 <MX_ADC1_Init+0x220>)
 8004f54:	f7fd fb0a 	bl	800256c <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8004f5c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004f60:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8004f62:	2300      	movs	r3, #0
 8004f64:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8004f66:	2300      	movs	r3, #0
 8004f68:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8004f6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f6e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8004f70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004f74:	4619      	mov	r1, r3
 8004f76:	484e      	ldr	r0, [pc, #312]	; (80050b0 <MX_ADC1_Init+0x220>)
 8004f78:	f7fd fb24 	bl	80025c4 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8004f7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f80:	484b      	ldr	r0, [pc, #300]	; (80050b0 <MX_ADC1_Init+0x220>)
 8004f82:	f7ff fe69 	bl	8004c58 <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC1);
 8004f86:	484a      	ldr	r0, [pc, #296]	; (80050b0 <MX_ADC1_Init+0x220>)
 8004f88:	f7ff ff31 	bl	8004dee <LL_ADC_DisableIT_EOCS>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8004f8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f90:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8004f92:	2300      	movs	r3, #0
 8004f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8004f96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	4845      	ldr	r0, [pc, #276]	; (80050b4 <MX_ADC1_Init+0x224>)
 8004f9e:	f7fd fa9d 	bl	80024dc <LL_ADC_CommonInit>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8004fa2:	4a45      	ldr	r2, [pc, #276]	; (80050b8 <MX_ADC1_Init+0x228>)
 8004fa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004fa8:	4841      	ldr	r0, [pc, #260]	; (80050b0 <MX_ADC1_Init+0x220>)
 8004faa:	f7ff fe22 	bl	8004bf2 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_28CYCLES);
 8004fae:	2202      	movs	r2, #2
 8004fb0:	4941      	ldr	r1, [pc, #260]	; (80050b8 <MX_ADC1_Init+0x228>)
 8004fb2:	483f      	ldr	r0, [pc, #252]	; (80050b0 <MX_ADC1_Init+0x220>)
 8004fb4:	f7ff fec1 	bl	8004d3a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_12);
 8004fb8:	4a40      	ldr	r2, [pc, #256]	; (80050bc <MX_ADC1_Init+0x22c>)
 8004fba:	f240 2105 	movw	r1, #517	; 0x205
 8004fbe:	483c      	ldr	r0, [pc, #240]	; (80050b0 <MX_ADC1_Init+0x220>)
 8004fc0:	f7ff fe17 	bl	8004bf2 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_28CYCLES);
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	493d      	ldr	r1, [pc, #244]	; (80050bc <MX_ADC1_Init+0x22c>)
 8004fc8:	4839      	ldr	r0, [pc, #228]	; (80050b0 <MX_ADC1_Init+0x220>)
 8004fca:	f7ff feb6 	bl	8004d3a <LL_ADC_SetChannelSamplingTime>
  /** Configure Injected Channel 
  */
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8004fce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004fd2:	61bb      	str	r3, [r7, #24]
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 8004fd4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004fd8:	61fb      	str	r3, [r7, #28]
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_1RANK;
 8004fda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fde:	623b      	str	r3, [r7, #32]
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8004fe4:	f107 0318 	add.w	r3, r7, #24
 8004fe8:	4619      	mov	r1, r3
 8004fea:	4831      	ldr	r0, [pc, #196]	; (80050b0 <MX_ADC1_Init+0x220>)
 8004fec:	f7fd fb32 	bl	8002654 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 8004ff0:	482f      	ldr	r0, [pc, #188]	; (80050b0 <MX_ADC1_Init+0x220>)
 8004ff2:	f7ff ff0c 	bl	8004e0e <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_0);
 8004ff6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	482c      	ldr	r0, [pc, #176]	; (80050b0 <MX_ADC1_Init+0x220>)
 8004ffe:	f7ff fe3e 	bl	8004c7e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 8005002:	2200      	movs	r2, #0
 8005004:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005008:	4829      	ldr	r0, [pc, #164]	; (80050b0 <MX_ADC1_Init+0x220>)
 800500a:	f7ff fe96 	bl	8004d3a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_1, 0);
 800500e:	2200      	movs	r2, #0
 8005010:	2101      	movs	r1, #1
 8005012:	4827      	ldr	r0, [pc, #156]	; (80050b0 <MX_ADC1_Init+0x220>)
 8005014:	f7ff fe69 	bl	8004cea <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8005018:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800501c:	4824      	ldr	r0, [pc, #144]	; (80050b0 <MX_ADC1_Init+0x220>)
 800501e:	f7ff fed5 	bl	8004dcc <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8005022:	f107 0318 	add.w	r3, r7, #24
 8005026:	4619      	mov	r1, r3
 8005028:	4821      	ldr	r0, [pc, #132]	; (80050b0 <MX_ADC1_Init+0x220>)
 800502a:	f7fd fb13 	bl	8002654 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 800502e:	4820      	ldr	r0, [pc, #128]	; (80050b0 <MX_ADC1_Init+0x220>)
 8005030:	f7ff feed 	bl	8004e0e <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_11);
 8005034:	4a22      	ldr	r2, [pc, #136]	; (80050c0 <MX_ADC1_Init+0x230>)
 8005036:	f241 1102 	movw	r1, #4354	; 0x1102
 800503a:	481d      	ldr	r0, [pc, #116]	; (80050b0 <MX_ADC1_Init+0x220>)
 800503c:	f7ff fe1f 	bl	8004c7e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 8005040:	2200      	movs	r2, #0
 8005042:	491f      	ldr	r1, [pc, #124]	; (80050c0 <MX_ADC1_Init+0x230>)
 8005044:	481a      	ldr	r0, [pc, #104]	; (80050b0 <MX_ADC1_Init+0x220>)
 8005046:	f7ff fe78 	bl	8004d3a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_2, 0);
 800504a:	2200      	movs	r2, #0
 800504c:	f241 1102 	movw	r1, #4354	; 0x1102
 8005050:	4817      	ldr	r0, [pc, #92]	; (80050b0 <MX_ADC1_Init+0x220>)
 8005052:	f7ff fe4a 	bl	8004cea <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8005056:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800505a:	4815      	ldr	r0, [pc, #84]	; (80050b0 <MX_ADC1_Init+0x220>)
 800505c:	f7ff feb6 	bl	8004dcc <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8005060:	f107 0318 	add.w	r3, r7, #24
 8005064:	4619      	mov	r1, r3
 8005066:	4812      	ldr	r0, [pc, #72]	; (80050b0 <MX_ADC1_Init+0x220>)
 8005068:	f7fd faf4 	bl	8002654 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 800506c:	4810      	ldr	r0, [pc, #64]	; (80050b0 <MX_ADC1_Init+0x220>)
 800506e:	f7ff fece 	bl	8004e0e <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_10);
 8005072:	220a      	movs	r2, #10
 8005074:	f242 2103 	movw	r1, #8707	; 0x2203
 8005078:	480d      	ldr	r0, [pc, #52]	; (80050b0 <MX_ADC1_Init+0x220>)
 800507a:	f7ff fe00 	bl	8004c7e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_3CYCLES);
 800507e:	2200      	movs	r2, #0
 8005080:	210a      	movs	r1, #10
 8005082:	480b      	ldr	r0, [pc, #44]	; (80050b0 <MX_ADC1_Init+0x220>)
 8005084:	f7ff fe59 	bl	8004d3a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_3, 0);
 8005088:	2200      	movs	r2, #0
 800508a:	f242 2103 	movw	r1, #8707	; 0x2203
 800508e:	4808      	ldr	r0, [pc, #32]	; (80050b0 <MX_ADC1_Init+0x220>)
 8005090:	f7ff fe2b 	bl	8004cea <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8005094:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8005098:	4805      	ldr	r0, [pc, #20]	; (80050b0 <MX_ADC1_Init+0x220>)
 800509a:	f7ff fe97 	bl	8004dcc <LL_ADC_INJ_StartConversionExtTrig>

}
 800509e:	bf00      	nop
 80050a0:	3758      	adds	r7, #88	; 0x58
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	40020800 	.word	0x40020800
 80050ac:	40020000 	.word	0x40020000
 80050b0:	40012000 	.word	0x40012000
 80050b4:	40012300 	.word	0x40012300
 80050b8:	02300001 	.word	0x02300001
 80050bc:	0060000c 	.word	0x0060000c
 80050c0:	0030000b 	.word	0x0030000b

080050c4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b092      	sub	sp, #72	; 0x48
 80050c8:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80050ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80050ce:	2200      	movs	r2, #0
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	605a      	str	r2, [r3, #4]
 80050d4:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80050d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]
 80050de:	605a      	str	r2, [r3, #4]
 80050e0:	609a      	str	r2, [r3, #8]
 80050e2:	60da      	str	r2, [r3, #12]
 80050e4:	611a      	str	r2, [r3, #16]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 80050e6:	f107 0318 	add.w	r3, r7, #24
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	605a      	str	r2, [r3, #4]
 80050f0:	609a      	str	r2, [r3, #8]
 80050f2:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050f4:	463b      	mov	r3, r7
 80050f6:	2200      	movs	r2, #0
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	605a      	str	r2, [r3, #4]
 80050fc:	609a      	str	r2, [r3, #8]
 80050fe:	60da      	str	r2, [r3, #12]
 8005100:	611a      	str	r2, [r3, #16]
 8005102:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC2);
 8005104:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005108:	f7ff feaa 	bl	8004e60 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800510c:	2004      	movs	r0, #4
 800510e:	f7ff fe8f 	bl	8004e30 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005112:	2001      	movs	r0, #1
 8005114:	f7ff fe8c 	bl	8004e30 <LL_AHB1_GRP1_EnableClock>
  /**ADC2 GPIO Configuration  
  PC0   ------> ADC2_IN10
  PC1   ------> ADC2_IN11
  PA0-WKUP   ------> ADC2_IN0 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8005118:	2303      	movs	r3, #3
 800511a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800511c:	2303      	movs	r3, #3
 800511e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005120:	2300      	movs	r3, #0
 8005122:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005124:	463b      	mov	r3, r7
 8005126:	4619      	mov	r1, r3
 8005128:	485e      	ldr	r0, [pc, #376]	; (80052a4 <MX_ADC2_Init+0x1e0>)
 800512a:	f7fd fcec 	bl	8002b06 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800512e:	2301      	movs	r3, #1
 8005130:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8005132:	2303      	movs	r3, #3
 8005134:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005136:	2300      	movs	r3, #0
 8005138:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800513a:	463b      	mov	r3, r7
 800513c:	4619      	mov	r1, r3
 800513e:	485a      	ldr	r0, [pc, #360]	; (80052a8 <MX_ADC2_Init+0x1e4>)
 8005140:	f7fd fce1 	bl	8002b06 <LL_GPIO_Init>

  /* ADC2 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8005144:	f7ff fccc 	bl	8004ae0 <__NVIC_GetPriorityGrouping>
 8005148:	4603      	mov	r3, r0
 800514a:	2200      	movs	r2, #0
 800514c:	2102      	movs	r1, #2
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff fd1c 	bl	8004b8c <NVIC_EncodePriority>
 8005154:	4603      	mov	r3, r0
 8005156:	4619      	mov	r1, r3
 8005158:	2012      	movs	r0, #18
 800515a:	f7ff fced 	bl	8004b38 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 800515e:	2012      	movs	r0, #18
 8005160:	f7ff fccc 	bl	8004afc <__NVIC_EnableIRQ>

  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8005164:	2300      	movs	r3, #0
 8005166:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8005168:	2300      	movs	r3, #0
 800516a:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 800516c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005170:	647b      	str	r3, [r7, #68]	; 0x44
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8005172:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005176:	4619      	mov	r1, r3
 8005178:	484c      	ldr	r0, [pc, #304]	; (80052ac <MX_ADC2_Init+0x1e8>)
 800517a:	f7fd f9f7 	bl	800256c <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800517e:	2300      	movs	r3, #0
 8005180:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8005182:	2300      	movs	r3, #0
 8005184:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8005186:	2300      	movs	r3, #0
 8005188:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 800518a:	2300      	movs	r3, #0
 800518c:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 800518e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005192:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8005194:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005198:	4619      	mov	r1, r3
 800519a:	4844      	ldr	r0, [pc, #272]	; (80052ac <MX_ADC2_Init+0x1e8>)
 800519c:	f7fd fa12 	bl	80025c4 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC2, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 80051a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80051a4:	4841      	ldr	r0, [pc, #260]	; (80052ac <MX_ADC2_Init+0x1e8>)
 80051a6:	f7ff fd57 	bl	8004c58 <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC2);
 80051aa:	4840      	ldr	r0, [pc, #256]	; (80052ac <MX_ADC2_Init+0x1e8>)
 80051ac:	f7ff fe1f 	bl	8004dee <LL_ADC_DisableIT_EOCS>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 80051b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051b8:	483c      	ldr	r0, [pc, #240]	; (80052ac <MX_ADC2_Init+0x1e8>)
 80051ba:	f7ff fd1a 	bl	8004bf2 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 80051be:	2200      	movs	r2, #0
 80051c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80051c4:	4839      	ldr	r0, [pc, #228]	; (80052ac <MX_ADC2_Init+0x1e8>)
 80051c6:	f7ff fdb8 	bl	8004d3a <LL_ADC_SetChannelSamplingTime>
  /** Configure Injected Channel 
  */
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 80051ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80051ce:	61bb      	str	r3, [r7, #24]
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 80051d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80051d4:	61fb      	str	r3, [r7, #28]
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_1RANK;
 80051d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051da:	623b      	str	r3, [r7, #32]
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 80051dc:	2300      	movs	r3, #0
 80051de:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 80051e0:	f107 0318 	add.w	r3, r7, #24
 80051e4:	4619      	mov	r1, r3
 80051e6:	4831      	ldr	r0, [pc, #196]	; (80052ac <MX_ADC2_Init+0x1e8>)
 80051e8:	f7fd fa34 	bl	8002654 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 80051ec:	482f      	ldr	r0, [pc, #188]	; (80052ac <MX_ADC2_Init+0x1e8>)
 80051ee:	f7ff fe0e 	bl	8004e0e <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_0);
 80051f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051f6:	2101      	movs	r1, #1
 80051f8:	482c      	ldr	r0, [pc, #176]	; (80052ac <MX_ADC2_Init+0x1e8>)
 80051fa:	f7ff fd40 	bl	8004c7e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 80051fe:	2200      	movs	r2, #0
 8005200:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005204:	4829      	ldr	r0, [pc, #164]	; (80052ac <MX_ADC2_Init+0x1e8>)
 8005206:	f7ff fd98 	bl	8004d3a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_1, 0);
 800520a:	2200      	movs	r2, #0
 800520c:	2101      	movs	r1, #1
 800520e:	4827      	ldr	r0, [pc, #156]	; (80052ac <MX_ADC2_Init+0x1e8>)
 8005210:	f7ff fd6b 	bl	8004cea <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 8005214:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8005218:	4824      	ldr	r0, [pc, #144]	; (80052ac <MX_ADC2_Init+0x1e8>)
 800521a:	f7ff fdd7 	bl	8004dcc <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 800521e:	f107 0318 	add.w	r3, r7, #24
 8005222:	4619      	mov	r1, r3
 8005224:	4821      	ldr	r0, [pc, #132]	; (80052ac <MX_ADC2_Init+0x1e8>)
 8005226:	f7fd fa15 	bl	8002654 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 800522a:	4820      	ldr	r0, [pc, #128]	; (80052ac <MX_ADC2_Init+0x1e8>)
 800522c:	f7ff fdef 	bl	8004e0e <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_11);
 8005230:	4a1f      	ldr	r2, [pc, #124]	; (80052b0 <MX_ADC2_Init+0x1ec>)
 8005232:	f241 1102 	movw	r1, #4354	; 0x1102
 8005236:	481d      	ldr	r0, [pc, #116]	; (80052ac <MX_ADC2_Init+0x1e8>)
 8005238:	f7ff fd21 	bl	8004c7e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 800523c:	2200      	movs	r2, #0
 800523e:	491c      	ldr	r1, [pc, #112]	; (80052b0 <MX_ADC2_Init+0x1ec>)
 8005240:	481a      	ldr	r0, [pc, #104]	; (80052ac <MX_ADC2_Init+0x1e8>)
 8005242:	f7ff fd7a 	bl	8004d3a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_2, 0);
 8005246:	2200      	movs	r2, #0
 8005248:	f241 1102 	movw	r1, #4354	; 0x1102
 800524c:	4817      	ldr	r0, [pc, #92]	; (80052ac <MX_ADC2_Init+0x1e8>)
 800524e:	f7ff fd4c 	bl	8004cea <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 8005252:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8005256:	4815      	ldr	r0, [pc, #84]	; (80052ac <MX_ADC2_Init+0x1e8>)
 8005258:	f7ff fdb8 	bl	8004dcc <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 800525c:	f107 0318 	add.w	r3, r7, #24
 8005260:	4619      	mov	r1, r3
 8005262:	4812      	ldr	r0, [pc, #72]	; (80052ac <MX_ADC2_Init+0x1e8>)
 8005264:	f7fd f9f6 	bl	8002654 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 8005268:	4810      	ldr	r0, [pc, #64]	; (80052ac <MX_ADC2_Init+0x1e8>)
 800526a:	f7ff fdd0 	bl	8004e0e <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_10);
 800526e:	220a      	movs	r2, #10
 8005270:	f242 2103 	movw	r1, #8707	; 0x2203
 8005274:	480d      	ldr	r0, [pc, #52]	; (80052ac <MX_ADC2_Init+0x1e8>)
 8005276:	f7ff fd02 	bl	8004c7e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_3CYCLES);
 800527a:	2200      	movs	r2, #0
 800527c:	210a      	movs	r1, #10
 800527e:	480b      	ldr	r0, [pc, #44]	; (80052ac <MX_ADC2_Init+0x1e8>)
 8005280:	f7ff fd5b 	bl	8004d3a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_3, 0);
 8005284:	2200      	movs	r2, #0
 8005286:	f242 2103 	movw	r1, #8707	; 0x2203
 800528a:	4808      	ldr	r0, [pc, #32]	; (80052ac <MX_ADC2_Init+0x1e8>)
 800528c:	f7ff fd2d 	bl	8004cea <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 8005290:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8005294:	4805      	ldr	r0, [pc, #20]	; (80052ac <MX_ADC2_Init+0x1e8>)
 8005296:	f7ff fd99 	bl	8004dcc <LL_ADC_INJ_StartConversionExtTrig>

}
 800529a:	bf00      	nop
 800529c:	3748      	adds	r7, #72	; 0x48
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	40020800 	.word	0x40020800
 80052a8:	40020000 	.word	0x40020000
 80052ac:	40012100 	.word	0x40012100
 80052b0:	0030000b 	.word	0x0030000b

080052b4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80052be:	4a13      	ldr	r2, [pc, #76]	; (800530c <LL_SYSCFG_SetEXTISource+0x58>)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	3302      	adds	r3, #2
 80052c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	0c1b      	lsrs	r3, r3, #16
 80052ce:	43db      	mvns	r3, r3
 80052d0:	ea02 0103 	and.w	r1, r2, r3
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	0c1b      	lsrs	r3, r3, #16
 80052d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	fa93 f3a3 	rbit	r3, r3
 80052e0:	60bb      	str	r3, [r7, #8]
  return result;
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	fab3 f383 	clz	r3, r3
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	461a      	mov	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	fa03 f202 	lsl.w	r2, r3, r2
 80052f2:	4806      	ldr	r0, [pc, #24]	; (800530c <LL_SYSCFG_SetEXTISource+0x58>)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	430a      	orrs	r2, r1
 80052fa:	3302      	adds	r3, #2
 80052fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8005300:	bf00      	nop
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	40013800 	.word	0x40013800

08005310 <LL_GPIO_SetPinMode>:
{
 8005310:	b480      	push	{r7}
 8005312:	b089      	sub	sp, #36	; 0x24
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	fa93 f3a3 	rbit	r3, r3
 800532a:	613b      	str	r3, [r7, #16]
  return result;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	fab3 f383 	clz	r3, r3
 8005332:	b2db      	uxtb	r3, r3
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	2103      	movs	r1, #3
 8005338:	fa01 f303 	lsl.w	r3, r1, r3
 800533c:	43db      	mvns	r3, r3
 800533e:	401a      	ands	r2, r3
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	fa93 f3a3 	rbit	r3, r3
 800534a:	61bb      	str	r3, [r7, #24]
  return result;
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	fab3 f383 	clz	r3, r3
 8005352:	b2db      	uxtb	r3, r3
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	6879      	ldr	r1, [r7, #4]
 8005358:	fa01 f303 	lsl.w	r3, r1, r3
 800535c:	431a      	orrs	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	601a      	str	r2, [r3, #0]
}
 8005362:	bf00      	nop
 8005364:	3724      	adds	r7, #36	; 0x24
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <LL_GPIO_SetPinPull>:
{
 800536e:	b480      	push	{r7}
 8005370:	b089      	sub	sp, #36	; 0x24
 8005372:	af00      	add	r7, sp, #0
 8005374:	60f8      	str	r0, [r7, #12]
 8005376:	60b9      	str	r1, [r7, #8]
 8005378:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	68da      	ldr	r2, [r3, #12]
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	fa93 f3a3 	rbit	r3, r3
 8005388:	613b      	str	r3, [r7, #16]
  return result;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	fab3 f383 	clz	r3, r3
 8005390:	b2db      	uxtb	r3, r3
 8005392:	005b      	lsls	r3, r3, #1
 8005394:	2103      	movs	r1, #3
 8005396:	fa01 f303 	lsl.w	r3, r1, r3
 800539a:	43db      	mvns	r3, r3
 800539c:	401a      	ands	r2, r3
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	fa93 f3a3 	rbit	r3, r3
 80053a8:	61bb      	str	r3, [r7, #24]
  return result;
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	fab3 f383 	clz	r3, r3
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	6879      	ldr	r1, [r7, #4]
 80053b6:	fa01 f303 	lsl.w	r3, r1, r3
 80053ba:	431a      	orrs	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	60da      	str	r2, [r3, #12]
}
 80053c0:	bf00      	nop
 80053c2:	3724      	adds	r7, #36	; 0x24
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	041a      	lsls	r2, r3, #16
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	619a      	str	r2, [r3, #24]
}
 80053de:	bf00      	nop
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
	...

080053ec <LL_AHB1_GRP1_EnableClock>:
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80053f4:	4b08      	ldr	r3, [pc, #32]	; (8005418 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80053f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053f8:	4907      	ldr	r1, [pc, #28]	; (8005418 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005400:	4b05      	ldr	r3, [pc, #20]	; (8005418 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4013      	ands	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800540a:	68fb      	ldr	r3, [r7, #12]
}
 800540c:	bf00      	nop
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	40023800 	.word	0x40023800

0800541c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b088      	sub	sp, #32
 8005420:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8005422:	f107 0318 	add.w	r3, r7, #24
 8005426:	2200      	movs	r2, #0
 8005428:	601a      	str	r2, [r3, #0]
 800542a:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800542c:	463b      	mov	r3, r7
 800542e:	2200      	movs	r2, #0
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	605a      	str	r2, [r3, #4]
 8005434:	609a      	str	r2, [r3, #8]
 8005436:	60da      	str	r2, [r3, #12]
 8005438:	611a      	str	r2, [r3, #16]
 800543a:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800543c:	2004      	movs	r0, #4
 800543e:	f7ff ffd5 	bl	80053ec <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8005442:	2080      	movs	r0, #128	; 0x80
 8005444:	f7ff ffd2 	bl	80053ec <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005448:	2001      	movs	r0, #1
 800544a:	f7ff ffcf 	bl	80053ec <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800544e:	2002      	movs	r0, #2
 8005450:	f7ff ffcc 	bl	80053ec <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8005454:	2120      	movs	r1, #32
 8005456:	481a      	ldr	r0, [pc, #104]	; (80054c0 <MX_GPIO_Init+0xa4>)
 8005458:	f7ff ffb8 	bl	80053cc <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 800545c:	4919      	ldr	r1, [pc, #100]	; (80054c4 <MX_GPIO_Init+0xa8>)
 800545e:	2002      	movs	r0, #2
 8005460:	f7ff ff28 	bl	80052b4 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8005464:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005468:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800546a:	2301      	movs	r3, #1
 800546c:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800546e:	2300      	movs	r3, #0
 8005470:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8005472:	2302      	movs	r3, #2
 8005474:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8005476:	f107 0318 	add.w	r3, r7, #24
 800547a:	4618      	mov	r0, r3
 800547c:	f7fd f9c2 	bl	8002804 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8005480:	2200      	movs	r2, #0
 8005482:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005486:	4810      	ldr	r0, [pc, #64]	; (80054c8 <MX_GPIO_Init+0xac>)
 8005488:	f7ff ff71 	bl	800536e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 800548c:	2200      	movs	r2, #0
 800548e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005492:	480d      	ldr	r0, [pc, #52]	; (80054c8 <MX_GPIO_Init+0xac>)
 8005494:	f7ff ff3c 	bl	8005310 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8005498:	2320      	movs	r3, #32
 800549a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800549c:	2301      	movs	r3, #1
 800549e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80054a0:	2300      	movs	r3, #0
 80054a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80054a4:	2300      	movs	r3, #0
 80054a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80054a8:	2300      	movs	r3, #0
 80054aa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80054ac:	463b      	mov	r3, r7
 80054ae:	4619      	mov	r1, r3
 80054b0:	4803      	ldr	r0, [pc, #12]	; (80054c0 <MX_GPIO_Init+0xa4>)
 80054b2:	f7fd fb28 	bl	8002b06 <LL_GPIO_Init>

}
 80054b6:	bf00      	nop
 80054b8:	3720      	adds	r7, #32
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	40020000 	.word	0x40020000
 80054c4:	00f00003 	.word	0x00f00003
 80054c8:	40020800 	.word	0x40020800

080054cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80054d0:	f7fb fd06 	bl	8000ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80054d4:	f000 f80e 	bl	80054f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80054d8:	f7ff ffa0 	bl	800541c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80054dc:	f000 fc48 	bl	8005d70 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80054e0:	f000 fb28 	bl	8005b34 <MX_TIM1_Init>
  MX_ADC1_Init();
 80054e4:	f7ff fcd4 	bl	8004e90 <MX_ADC1_Init>
  MX_ADC2_Init();
 80054e8:	f7ff fdec 	bl	80050c4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  cppwrapper();
 80054ec:	f000 fd4a 	bl	8005f84 <cppwrapper>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80054f0:	e7fe      	b.n	80054f0 <main+0x24>
	...

080054f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b094      	sub	sp, #80	; 0x50
 80054f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80054fa:	f107 031c 	add.w	r3, r7, #28
 80054fe:	2234      	movs	r2, #52	; 0x34
 8005500:	2100      	movs	r1, #0
 8005502:	4618      	mov	r0, r3
 8005504:	f002 f83e 	bl	8007584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005508:	f107 0308 	add.w	r3, r7, #8
 800550c:	2200      	movs	r2, #0
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	605a      	str	r2, [r3, #4]
 8005512:	609a      	str	r2, [r3, #8]
 8005514:	60da      	str	r2, [r3, #12]
 8005516:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005518:	2300      	movs	r3, #0
 800551a:	607b      	str	r3, [r7, #4]
 800551c:	4b2c      	ldr	r3, [pc, #176]	; (80055d0 <SystemClock_Config+0xdc>)
 800551e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005520:	4a2b      	ldr	r2, [pc, #172]	; (80055d0 <SystemClock_Config+0xdc>)
 8005522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005526:	6413      	str	r3, [r2, #64]	; 0x40
 8005528:	4b29      	ldr	r3, [pc, #164]	; (80055d0 <SystemClock_Config+0xdc>)
 800552a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005530:	607b      	str	r3, [r7, #4]
 8005532:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005534:	2300      	movs	r3, #0
 8005536:	603b      	str	r3, [r7, #0]
 8005538:	4b26      	ldr	r3, [pc, #152]	; (80055d4 <SystemClock_Config+0xe0>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a25      	ldr	r2, [pc, #148]	; (80055d4 <SystemClock_Config+0xe0>)
 800553e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	4b23      	ldr	r3, [pc, #140]	; (80055d4 <SystemClock_Config+0xe0>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800554c:	603b      	str	r3, [r7, #0]
 800554e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005550:	2301      	movs	r3, #1
 8005552:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005554:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005558:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800555a:	2302      	movs	r3, #2
 800555c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800555e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005562:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005564:	2304      	movs	r3, #4
 8005566:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005568:	23b4      	movs	r3, #180	; 0xb4
 800556a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800556c:	2302      	movs	r3, #2
 800556e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005570:	2302      	movs	r3, #2
 8005572:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005574:	2302      	movs	r3, #2
 8005576:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005578:	f107 031c 	add.w	r3, r7, #28
 800557c:	4618      	mov	r0, r3
 800557e:	f7fc fac1 	bl	8001b04 <HAL_RCC_OscConfig>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8005588:	f000 f826 	bl	80055d8 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800558c:	f7fb ffb4 	bl	80014f8 <HAL_PWREx_EnableOverDrive>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8005596:	f000 f81f 	bl	80055d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800559a:	230f      	movs	r3, #15
 800559c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800559e:	2302      	movs	r3, #2
 80055a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80055a2:	2300      	movs	r3, #0
 80055a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80055a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80055aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80055ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055b0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80055b2:	f107 0308 	add.w	r3, r7, #8
 80055b6:	2105      	movs	r1, #5
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7fb ffed 	bl	8001598 <HAL_RCC_ClockConfig>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80055c4:	f000 f808 	bl	80055d8 <Error_Handler>
  }
}
 80055c8:	bf00      	nop
 80055ca:	3750      	adds	r7, #80	; 0x50
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	40023800 	.word	0x40023800
 80055d4:	40007000 	.word	0x40007000

080055d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80055d8:	b480      	push	{r7}
 80055da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80055dc:	bf00      	nop
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
	...

080055e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055ee:	2300      	movs	r3, #0
 80055f0:	607b      	str	r3, [r7, #4]
 80055f2:	4b10      	ldr	r3, [pc, #64]	; (8005634 <HAL_MspInit+0x4c>)
 80055f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f6:	4a0f      	ldr	r2, [pc, #60]	; (8005634 <HAL_MspInit+0x4c>)
 80055f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055fc:	6453      	str	r3, [r2, #68]	; 0x44
 80055fe:	4b0d      	ldr	r3, [pc, #52]	; (8005634 <HAL_MspInit+0x4c>)
 8005600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005606:	607b      	str	r3, [r7, #4]
 8005608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800560a:	2300      	movs	r3, #0
 800560c:	603b      	str	r3, [r7, #0]
 800560e:	4b09      	ldr	r3, [pc, #36]	; (8005634 <HAL_MspInit+0x4c>)
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	4a08      	ldr	r2, [pc, #32]	; (8005634 <HAL_MspInit+0x4c>)
 8005614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005618:	6413      	str	r3, [r2, #64]	; 0x40
 800561a:	4b06      	ldr	r3, [pc, #24]	; (8005634 <HAL_MspInit+0x4c>)
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005622:	603b      	str	r3, [r7, #0]
 8005624:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8005626:	2004      	movs	r0, #4
 8005628:	f7fb fda0 	bl	800116c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800562c:	bf00      	nop
 800562e:	3708      	adds	r7, #8
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	40023800 	.word	0x40023800

08005638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005638:	b480      	push	{r7}
 800563a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800563c:	bf00      	nop
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005646:	b480      	push	{r7}
 8005648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800564a:	e7fe      	b.n	800564a <HardFault_Handler+0x4>

0800564c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800564c:	b480      	push	{r7}
 800564e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005650:	e7fe      	b.n	8005650 <MemManage_Handler+0x4>

08005652 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005652:	b480      	push	{r7}
 8005654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005656:	e7fe      	b.n	8005656 <BusFault_Handler+0x4>

08005658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800565c:	e7fe      	b.n	800565c <UsageFault_Handler+0x4>

0800565e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800565e:	b480      	push	{r7}
 8005660:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005662:	bf00      	nop
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800566c:	b480      	push	{r7}
 800566e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005670:	bf00      	nop
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800567a:	b480      	push	{r7}
 800567c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800567e:	bf00      	nop
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800568c:	f7fb fc7a 	bl	8000f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005690:	bf00      	nop
 8005692:	bd80      	pop	{r7, pc}

08005694 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
	HighFreqTask();
 8005698:	f000 fd7e 	bl	8006198 <HighFreqTask>
  /* USER CODE END ADC_IRQn 0 */
  
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800569c:	bf00      	nop
 800569e:	bd80      	pop	{r7, pc}

080056a0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80056a0:	b480      	push	{r7}
 80056a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80056a4:	bf00      	nop
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80056ae:	b480      	push	{r7}
 80056b0:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80056b2:	bf00      	nop
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
	return 1;
 80056c0:	2301      	movs	r3, #1
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <_kill>:

int _kill(int pid, int sig)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80056d6:	f001 fef7 	bl	80074c8 <__errno>
 80056da:	4602      	mov	r2, r0
 80056dc:	2316      	movs	r3, #22
 80056de:	6013      	str	r3, [r2, #0]
	return -1;
 80056e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3708      	adds	r7, #8
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <_exit>:

void _exit (int status)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80056f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7ff ffe7 	bl	80056cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80056fe:	e7fe      	b.n	80056fe <_exit+0x12>

08005700 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005708:	4b11      	ldr	r3, [pc, #68]	; (8005750 <_sbrk+0x50>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d102      	bne.n	8005716 <_sbrk+0x16>
		heap_end = &end;
 8005710:	4b0f      	ldr	r3, [pc, #60]	; (8005750 <_sbrk+0x50>)
 8005712:	4a10      	ldr	r2, [pc, #64]	; (8005754 <_sbrk+0x54>)
 8005714:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005716:	4b0e      	ldr	r3, [pc, #56]	; (8005750 <_sbrk+0x50>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800571c:	4b0c      	ldr	r3, [pc, #48]	; (8005750 <_sbrk+0x50>)
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4413      	add	r3, r2
 8005724:	466a      	mov	r2, sp
 8005726:	4293      	cmp	r3, r2
 8005728:	d907      	bls.n	800573a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800572a:	f001 fecd 	bl	80074c8 <__errno>
 800572e:	4602      	mov	r2, r0
 8005730:	230c      	movs	r3, #12
 8005732:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005738:	e006      	b.n	8005748 <_sbrk+0x48>
	}

	heap_end += incr;
 800573a:	4b05      	ldr	r3, [pc, #20]	; (8005750 <_sbrk+0x50>)
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4413      	add	r3, r2
 8005742:	4a03      	ldr	r2, [pc, #12]	; (8005750 <_sbrk+0x50>)
 8005744:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005746:	68fb      	ldr	r3, [r7, #12]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	200001f8 	.word	0x200001f8
 8005754:	20000258 	.word	0x20000258

08005758 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800575c:	4b16      	ldr	r3, [pc, #88]	; (80057b8 <SystemInit+0x60>)
 800575e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005762:	4a15      	ldr	r2, [pc, #84]	; (80057b8 <SystemInit+0x60>)
 8005764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800576c:	4b13      	ldr	r3, [pc, #76]	; (80057bc <SystemInit+0x64>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a12      	ldr	r2, [pc, #72]	; (80057bc <SystemInit+0x64>)
 8005772:	f043 0301 	orr.w	r3, r3, #1
 8005776:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005778:	4b10      	ldr	r3, [pc, #64]	; (80057bc <SystemInit+0x64>)
 800577a:	2200      	movs	r2, #0
 800577c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800577e:	4b0f      	ldr	r3, [pc, #60]	; (80057bc <SystemInit+0x64>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a0e      	ldr	r2, [pc, #56]	; (80057bc <SystemInit+0x64>)
 8005784:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800578c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800578e:	4b0b      	ldr	r3, [pc, #44]	; (80057bc <SystemInit+0x64>)
 8005790:	4a0b      	ldr	r2, [pc, #44]	; (80057c0 <SystemInit+0x68>)
 8005792:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005794:	4b09      	ldr	r3, [pc, #36]	; (80057bc <SystemInit+0x64>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a08      	ldr	r2, [pc, #32]	; (80057bc <SystemInit+0x64>)
 800579a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800579e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80057a0:	4b06      	ldr	r3, [pc, #24]	; (80057bc <SystemInit+0x64>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80057a6:	4b04      	ldr	r3, [pc, #16]	; (80057b8 <SystemInit+0x60>)
 80057a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80057ac:	609a      	str	r2, [r3, #8]
#endif
}
 80057ae:	bf00      	nop
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	e000ed00 	.word	0xe000ed00
 80057bc:	40023800 	.word	0x40023800
 80057c0:	24003010 	.word	0x24003010

080057c4 <__NVIC_GetPriorityGrouping>:
{
 80057c4:	b480      	push	{r7}
 80057c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057c8:	4b04      	ldr	r3, [pc, #16]	; (80057dc <__NVIC_GetPriorityGrouping+0x18>)
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	0a1b      	lsrs	r3, r3, #8
 80057ce:	f003 0307 	and.w	r3, r3, #7
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	e000ed00 	.word	0xe000ed00

080057e0 <__NVIC_EnableIRQ>:
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	4603      	mov	r3, r0
 80057e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	db0b      	blt.n	800580a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057f2:	79fb      	ldrb	r3, [r7, #7]
 80057f4:	f003 021f 	and.w	r2, r3, #31
 80057f8:	4907      	ldr	r1, [pc, #28]	; (8005818 <__NVIC_EnableIRQ+0x38>)
 80057fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057fe:	095b      	lsrs	r3, r3, #5
 8005800:	2001      	movs	r0, #1
 8005802:	fa00 f202 	lsl.w	r2, r0, r2
 8005806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	e000e100 	.word	0xe000e100

0800581c <__NVIC_SetPriority>:
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	4603      	mov	r3, r0
 8005824:	6039      	str	r1, [r7, #0]
 8005826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800582c:	2b00      	cmp	r3, #0
 800582e:	db0a      	blt.n	8005846 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	b2da      	uxtb	r2, r3
 8005834:	490c      	ldr	r1, [pc, #48]	; (8005868 <__NVIC_SetPriority+0x4c>)
 8005836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800583a:	0112      	lsls	r2, r2, #4
 800583c:	b2d2      	uxtb	r2, r2
 800583e:	440b      	add	r3, r1
 8005840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005844:	e00a      	b.n	800585c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	b2da      	uxtb	r2, r3
 800584a:	4908      	ldr	r1, [pc, #32]	; (800586c <__NVIC_SetPriority+0x50>)
 800584c:	79fb      	ldrb	r3, [r7, #7]
 800584e:	f003 030f 	and.w	r3, r3, #15
 8005852:	3b04      	subs	r3, #4
 8005854:	0112      	lsls	r2, r2, #4
 8005856:	b2d2      	uxtb	r2, r2
 8005858:	440b      	add	r3, r1
 800585a:	761a      	strb	r2, [r3, #24]
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	e000e100 	.word	0xe000e100
 800586c:	e000ed00 	.word	0xe000ed00

08005870 <NVIC_EncodePriority>:
{
 8005870:	b480      	push	{r7}
 8005872:	b089      	sub	sp, #36	; 0x24
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	f1c3 0307 	rsb	r3, r3, #7
 800588a:	2b04      	cmp	r3, #4
 800588c:	bf28      	it	cs
 800588e:	2304      	movcs	r3, #4
 8005890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	3304      	adds	r3, #4
 8005896:	2b06      	cmp	r3, #6
 8005898:	d902      	bls.n	80058a0 <NVIC_EncodePriority+0x30>
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	3b03      	subs	r3, #3
 800589e:	e000      	b.n	80058a2 <NVIC_EncodePriority+0x32>
 80058a0:	2300      	movs	r3, #0
 80058a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	fa02 f303 	lsl.w	r3, r2, r3
 80058ae:	43da      	mvns	r2, r3
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	401a      	ands	r2, r3
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	fa01 f303 	lsl.w	r3, r1, r3
 80058c2:	43d9      	mvns	r1, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058c8:	4313      	orrs	r3, r2
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3724      	adds	r7, #36	; 0x24
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <LL_TIM_DisableARRPreload>:
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	601a      	str	r2, [r3, #0]
}
 80058ea:	bf00      	nop
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
	...

080058f8 <LL_TIM_OC_DisableFast>:
{
 80058f8:	b4b0      	push	{r4, r5, r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d01c      	beq.n	8005942 <LL_TIM_OC_DisableFast+0x4a>
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	2b04      	cmp	r3, #4
 800590c:	d017      	beq.n	800593e <LL_TIM_OC_DisableFast+0x46>
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b10      	cmp	r3, #16
 8005912:	d012      	beq.n	800593a <LL_TIM_OC_DisableFast+0x42>
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	2b40      	cmp	r3, #64	; 0x40
 8005918:	d00d      	beq.n	8005936 <LL_TIM_OC_DisableFast+0x3e>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005920:	d007      	beq.n	8005932 <LL_TIM_OC_DisableFast+0x3a>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005928:	d101      	bne.n	800592e <LL_TIM_OC_DisableFast+0x36>
 800592a:	2305      	movs	r3, #5
 800592c:	e00a      	b.n	8005944 <LL_TIM_OC_DisableFast+0x4c>
 800592e:	2306      	movs	r3, #6
 8005930:	e008      	b.n	8005944 <LL_TIM_OC_DisableFast+0x4c>
 8005932:	2304      	movs	r3, #4
 8005934:	e006      	b.n	8005944 <LL_TIM_OC_DisableFast+0x4c>
 8005936:	2303      	movs	r3, #3
 8005938:	e004      	b.n	8005944 <LL_TIM_OC_DisableFast+0x4c>
 800593a:	2302      	movs	r3, #2
 800593c:	e002      	b.n	8005944 <LL_TIM_OC_DisableFast+0x4c>
 800593e:	2301      	movs	r3, #1
 8005940:	e000      	b.n	8005944 <LL_TIM_OC_DisableFast+0x4c>
 8005942:	2300      	movs	r3, #0
 8005944:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	3318      	adds	r3, #24
 800594a:	461a      	mov	r2, r3
 800594c:	4629      	mov	r1, r5
 800594e:	4b09      	ldr	r3, [pc, #36]	; (8005974 <LL_TIM_OC_DisableFast+0x7c>)
 8005950:	5c5b      	ldrb	r3, [r3, r1]
 8005952:	4413      	add	r3, r2
 8005954:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8005956:	6822      	ldr	r2, [r4, #0]
 8005958:	4629      	mov	r1, r5
 800595a:	4b07      	ldr	r3, [pc, #28]	; (8005978 <LL_TIM_OC_DisableFast+0x80>)
 800595c:	5c5b      	ldrb	r3, [r3, r1]
 800595e:	4619      	mov	r1, r3
 8005960:	2304      	movs	r3, #4
 8005962:	408b      	lsls	r3, r1
 8005964:	43db      	mvns	r3, r3
 8005966:	4013      	ands	r3, r2
 8005968:	6023      	str	r3, [r4, #0]
}
 800596a:	bf00      	nop
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	bcb0      	pop	{r4, r5, r7}
 8005972:	4770      	bx	lr
 8005974:	08009198 	.word	0x08009198
 8005978:	080091a0 	.word	0x080091a0

0800597c <LL_TIM_OC_EnablePreload>:
{
 800597c:	b4b0      	push	{r4, r5, r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d01c      	beq.n	80059c6 <LL_TIM_OC_EnablePreload+0x4a>
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	2b04      	cmp	r3, #4
 8005990:	d017      	beq.n	80059c2 <LL_TIM_OC_EnablePreload+0x46>
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2b10      	cmp	r3, #16
 8005996:	d012      	beq.n	80059be <LL_TIM_OC_EnablePreload+0x42>
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	2b40      	cmp	r3, #64	; 0x40
 800599c:	d00d      	beq.n	80059ba <LL_TIM_OC_EnablePreload+0x3e>
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a4:	d007      	beq.n	80059b6 <LL_TIM_OC_EnablePreload+0x3a>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ac:	d101      	bne.n	80059b2 <LL_TIM_OC_EnablePreload+0x36>
 80059ae:	2305      	movs	r3, #5
 80059b0:	e00a      	b.n	80059c8 <LL_TIM_OC_EnablePreload+0x4c>
 80059b2:	2306      	movs	r3, #6
 80059b4:	e008      	b.n	80059c8 <LL_TIM_OC_EnablePreload+0x4c>
 80059b6:	2304      	movs	r3, #4
 80059b8:	e006      	b.n	80059c8 <LL_TIM_OC_EnablePreload+0x4c>
 80059ba:	2303      	movs	r3, #3
 80059bc:	e004      	b.n	80059c8 <LL_TIM_OC_EnablePreload+0x4c>
 80059be:	2302      	movs	r3, #2
 80059c0:	e002      	b.n	80059c8 <LL_TIM_OC_EnablePreload+0x4c>
 80059c2:	2301      	movs	r3, #1
 80059c4:	e000      	b.n	80059c8 <LL_TIM_OC_EnablePreload+0x4c>
 80059c6:	2300      	movs	r3, #0
 80059c8:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	3318      	adds	r3, #24
 80059ce:	461a      	mov	r2, r3
 80059d0:	4629      	mov	r1, r5
 80059d2:	4b09      	ldr	r3, [pc, #36]	; (80059f8 <LL_TIM_OC_EnablePreload+0x7c>)
 80059d4:	5c5b      	ldrb	r3, [r3, r1]
 80059d6:	4413      	add	r3, r2
 80059d8:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80059da:	6822      	ldr	r2, [r4, #0]
 80059dc:	4629      	mov	r1, r5
 80059de:	4b07      	ldr	r3, [pc, #28]	; (80059fc <LL_TIM_OC_EnablePreload+0x80>)
 80059e0:	5c5b      	ldrb	r3, [r3, r1]
 80059e2:	4619      	mov	r1, r3
 80059e4:	2308      	movs	r3, #8
 80059e6:	408b      	lsls	r3, r1
 80059e8:	4313      	orrs	r3, r2
 80059ea:	6023      	str	r3, [r4, #0]
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bcb0      	pop	{r4, r5, r7}
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	08009198 	.word	0x08009198
 80059fc:	080091a0 	.word	0x080091a0

08005a00 <LL_TIM_SetTriggerOutput>:
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	431a      	orrs	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	605a      	str	r2, [r3, #4]
}
 8005a1a:	bf00      	nop
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <LL_TIM_SetSlaveMode>:
{
 8005a26:	b480      	push	{r7}
 8005a28:	b083      	sub	sp, #12
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
 8005a2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f023 0207 	bic.w	r2, r3, #7
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	609a      	str	r2, [r3, #8]
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <LL_TIM_SetTriggerInput>:
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	431a      	orrs	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	609a      	str	r2, [r3, #8]
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <LL_TIM_DisableMasterSlaveMode>:
{
 8005a72:	b480      	push	{r7}
 8005a74:	b083      	sub	sp, #12
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	609a      	str	r2, [r3, #8]
}
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <LL_TIM_DisableIT_TRIG>:
{
 8005a92:	b480      	push	{r7}
 8005a94:	b083      	sub	sp, #12
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TIE);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	60da      	str	r2, [r3, #12]
}
 8005aa6:	bf00      	nop
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <LL_TIM_DisableDMAReq_TRIG>:
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TDE);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	60da      	str	r2, [r3, #12]
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
	...

08005ad4 <LL_AHB1_GRP1_EnableClock>:
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005adc:	4b08      	ldr	r3, [pc, #32]	; (8005b00 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ae0:	4907      	ldr	r1, [pc, #28]	; (8005b00 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005ae8:	4b05      	ldr	r3, [pc, #20]	; (8005b00 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005aea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4013      	ands	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005af2:	68fb      	ldr	r3, [r7, #12]
}
 8005af4:	bf00      	nop
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	40023800 	.word	0x40023800

08005b04 <LL_APB2_GRP1_EnableClock>:
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005b0c:	4b08      	ldr	r3, [pc, #32]	; (8005b30 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005b0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b10:	4907      	ldr	r1, [pc, #28]	; (8005b30 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005b18:	4b05      	ldr	r3, [pc, #20]	; (8005b30 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005b1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005b22:	68fb      	ldr	r3, [r7, #12]
}
 8005b24:	bf00      	nop
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	40023800 	.word	0x40023800

08005b34 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b09a      	sub	sp, #104	; 0x68
 8005b38:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005b3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005b3e:	2200      	movs	r2, #0
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	605a      	str	r2, [r3, #4]
 8005b44:	609a      	str	r2, [r3, #8]
 8005b46:	60da      	str	r2, [r3, #12]
 8005b48:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8005b4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005b4e:	2220      	movs	r2, #32
 8005b50:	2100      	movs	r1, #0
 8005b52:	4618      	mov	r0, r3
 8005b54:	f001 fd16 	bl	8007584 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8005b58:	f107 031c 	add.w	r3, r7, #28
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	605a      	str	r2, [r3, #4]
 8005b62:	609a      	str	r2, [r3, #8]
 8005b64:	60da      	str	r2, [r3, #12]
 8005b66:	611a      	str	r2, [r3, #16]
 8005b68:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b6a:	1d3b      	adds	r3, r7, #4
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	605a      	str	r2, [r3, #4]
 8005b72:	609a      	str	r2, [r3, #8]
 8005b74:	60da      	str	r2, [r3, #12]
 8005b76:	611a      	str	r2, [r3, #16]
 8005b78:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8005b7a:	2001      	movs	r0, #1
 8005b7c:	f7ff ffc2 	bl	8005b04 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005b80:	2001      	movs	r0, #1
 8005b82:	f7ff ffa7 	bl	8005ad4 <LL_AHB1_GRP1_EnableClock>
  /**TIM1 GPIO Configuration  
  PA6   ------> TIM1_BKIN 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8005b86:	2340      	movs	r3, #64	; 0x40
 8005b88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005b92:	2300      	movs	r3, #0
 8005b94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8005b96:	2302      	movs	r3, #2
 8005b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b9e:	1d3b      	adds	r3, r7, #4
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	4871      	ldr	r0, [pc, #452]	; (8005d68 <MX_TIM1_Init+0x234>)
 8005ba4:	f7fc ffaf 	bl	8002b06 <LL_GPIO_Init>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 1));
 8005ba8:	f7ff fe0c 	bl	80057c4 <__NVIC_GetPriorityGrouping>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2201      	movs	r2, #1
 8005bb0:	2104      	movs	r1, #4
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7ff fe5c 	bl	8005870 <NVIC_EncodePriority>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	4619      	mov	r1, r3
 8005bbc:	2018      	movs	r0, #24
 8005bbe:	f7ff fe2d 	bl	800581c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005bc2:	2018      	movs	r0, #24
 8005bc4:	f7ff fe0c 	bl	80057e0 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005bc8:	f7ff fdfc 	bl	80057c4 <__NVIC_GetPriorityGrouping>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2200      	movs	r2, #0
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7ff fe4c 	bl	8005870 <NVIC_EncodePriority>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	4619      	mov	r1, r3
 8005bdc:	2019      	movs	r0, #25
 8005bde:	f7ff fe1d 	bl	800581c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005be2:	2019      	movs	r0, #25
 8005be4:	f7ff fdfc 	bl	80057e0 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 0;
 8005be8:	2300      	movs	r3, #0
 8005bea:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_UP;
 8005bee:	2320      	movs	r3, #32
 8005bf0:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 65535;
 8005bf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005bf6:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV2;
 8005bf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bfc:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8005c04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4858      	ldr	r0, [pc, #352]	; (8005d6c <MX_TIM1_Init+0x238>)
 8005c0c:	f7fd f86a 	bl	8002ce4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8005c10:	4856      	ldr	r0, [pc, #344]	; (8005d6c <MX_TIM1_Init+0x238>)
 8005c12:	f7ff fe60 	bl	80058d6 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8005c16:	2101      	movs	r1, #1
 8005c18:	4854      	ldr	r0, [pc, #336]	; (8005d6c <MX_TIM1_Init+0x238>)
 8005c1a:	f7ff feaf 	bl	800597c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8005c1e:	2360      	movs	r3, #96	; 0x60
 8005c20:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005c22:	2300      	movs	r3, #0
 8005c24:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005c26:	2300      	movs	r3, #0
 8005c28:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005c32:	2300      	movs	r3, #0
 8005c34:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8005c36:	2300      	movs	r3, #0
 8005c38:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8005c3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005c42:	461a      	mov	r2, r3
 8005c44:	2101      	movs	r1, #1
 8005c46:	4849      	ldr	r0, [pc, #292]	; (8005d6c <MX_TIM1_Init+0x238>)
 8005c48:	f7fd f8e6 	bl	8002e18 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8005c4c:	2101      	movs	r1, #1
 8005c4e:	4847      	ldr	r0, [pc, #284]	; (8005d6c <MX_TIM1_Init+0x238>)
 8005c50:	f7ff fe52 	bl	80058f8 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 8005c54:	2110      	movs	r1, #16
 8005c56:	4845      	ldr	r0, [pc, #276]	; (8005d6c <MX_TIM1_Init+0x238>)
 8005c58:	f7ff fe90 	bl	800597c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005c60:	2300      	movs	r3, #0
 8005c62:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8005c64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005c68:	461a      	mov	r2, r3
 8005c6a:	2110      	movs	r1, #16
 8005c6c:	483f      	ldr	r0, [pc, #252]	; (8005d6c <MX_TIM1_Init+0x238>)
 8005c6e:	f7fd f8d3 	bl	8002e18 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 8005c72:	2110      	movs	r1, #16
 8005c74:	483d      	ldr	r0, [pc, #244]	; (8005d6c <MX_TIM1_Init+0x238>)
 8005c76:	f7ff fe3f 	bl	80058f8 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8005c7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c7e:	483b      	ldr	r0, [pc, #236]	; (8005d6c <MX_TIM1_Init+0x238>)
 8005c80:	f7ff fe7c 	bl	800597c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005c84:	2300      	movs	r3, #0
 8005c86:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8005c8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005c90:	461a      	mov	r2, r3
 8005c92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c96:	4835      	ldr	r0, [pc, #212]	; (8005d6c <MX_TIM1_Init+0x238>)
 8005c98:	f7fd f8be 	bl	8002e18 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8005c9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ca0:	4832      	ldr	r0, [pc, #200]	; (8005d6c <MX_TIM1_Init+0x238>)
 8005ca2:	f7ff fe29 	bl	80058f8 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 8005ca6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005caa:	4830      	ldr	r0, [pc, #192]	; (8005d6c <MX_TIM1_Init+0x238>)
 8005cac:	f7ff fe66 	bl	800597c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 8005cb0:	2370      	movs	r3, #112	; 0x70
 8005cb2:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8005cbc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005cc6:	4829      	ldr	r0, [pc, #164]	; (8005d6c <MX_TIM1_Init+0x238>)
 8005cc8:	f7fd f8a6 	bl	8002e18 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 8005ccc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005cd0:	4826      	ldr	r0, [pc, #152]	; (8005d6c <MX_TIM1_Init+0x238>)
 8005cd2:	f7ff fe11 	bl	80058f8 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerInput(TIM1, LL_TIM_TS_ITR1);
 8005cd6:	2110      	movs	r1, #16
 8005cd8:	4824      	ldr	r0, [pc, #144]	; (8005d6c <MX_TIM1_Init+0x238>)
 8005cda:	f7ff feb7 	bl	8005a4c <LL_TIM_SetTriggerInput>
  LL_TIM_SetSlaveMode(TIM1, LL_TIM_SLAVEMODE_TRIGGER);
 8005cde:	2106      	movs	r1, #6
 8005ce0:	4822      	ldr	r0, [pc, #136]	; (8005d6c <MX_TIM1_Init+0x238>)
 8005ce2:	f7ff fea0 	bl	8005a26 <LL_TIM_SetSlaveMode>
  LL_TIM_DisableIT_TRIG(TIM1);
 8005ce6:	4821      	ldr	r0, [pc, #132]	; (8005d6c <MX_TIM1_Init+0x238>)
 8005ce8:	f7ff fed3 	bl	8005a92 <LL_TIM_DisableIT_TRIG>
  LL_TIM_DisableDMAReq_TRIG(TIM1);
 8005cec:	481f      	ldr	r0, [pc, #124]	; (8005d6c <MX_TIM1_Init+0x238>)
 8005cee:	f7ff fee0 	bl	8005ab2 <LL_TIM_DisableDMAReq_TRIG>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	481d      	ldr	r0, [pc, #116]	; (8005d6c <MX_TIM1_Init+0x238>)
 8005cf6:	f7ff fe83 	bl	8005a00 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8005cfa:	481c      	ldr	r0, [pc, #112]	; (8005d6c <MX_TIM1_Init+0x238>)
 8005cfc:	f7ff feb9 	bl	8005a72 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_ENABLE;
 8005d00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d04:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_ENABLE;
 8005d06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d0a:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_1;
 8005d0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d10:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8005d12:	2300      	movs	r3, #0
 8005d14:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_ENABLE;
 8005d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d1c:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8005d1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8005d24:	2300      	movs	r3, #0
 8005d26:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8005d28:	f107 031c 	add.w	r3, r7, #28
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	480f      	ldr	r0, [pc, #60]	; (8005d6c <MX_TIM1_Init+0x238>)
 8005d30:	f7fd f8aa 	bl	8002e88 <LL_TIM_BDTR_Init>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005d34:	2001      	movs	r0, #1
 8005d36:	f7ff fecd 	bl	8005ad4 <LL_AHB1_GRP1_EnableClock>
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8005d3a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005d3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005d40:	2302      	movs	r3, #2
 8005d42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8005d44:	2302      	movs	r3, #2
 8005d46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8005d50:	2301      	movs	r3, #1
 8005d52:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d54:	1d3b      	adds	r3, r7, #4
 8005d56:	4619      	mov	r1, r3
 8005d58:	4803      	ldr	r0, [pc, #12]	; (8005d68 <MX_TIM1_Init+0x234>)
 8005d5a:	f7fc fed4 	bl	8002b06 <LL_GPIO_Init>

}
 8005d5e:	bf00      	nop
 8005d60:	3768      	adds	r7, #104	; 0x68
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	40020000 	.word	0x40020000
 8005d6c:	40010000 	.word	0x40010000

08005d70 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8005d74:	4b11      	ldr	r3, [pc, #68]	; (8005dbc <MX_USART2_UART_Init+0x4c>)
 8005d76:	4a12      	ldr	r2, [pc, #72]	; (8005dc0 <MX_USART2_UART_Init+0x50>)
 8005d78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005d7a:	4b10      	ldr	r3, [pc, #64]	; (8005dbc <MX_USART2_UART_Init+0x4c>)
 8005d7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005d80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005d82:	4b0e      	ldr	r3, [pc, #56]	; (8005dbc <MX_USART2_UART_Init+0x4c>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005d88:	4b0c      	ldr	r3, [pc, #48]	; (8005dbc <MX_USART2_UART_Init+0x4c>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005d8e:	4b0b      	ldr	r3, [pc, #44]	; (8005dbc <MX_USART2_UART_Init+0x4c>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005d94:	4b09      	ldr	r3, [pc, #36]	; (8005dbc <MX_USART2_UART_Init+0x4c>)
 8005d96:	220c      	movs	r2, #12
 8005d98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d9a:	4b08      	ldr	r3, [pc, #32]	; (8005dbc <MX_USART2_UART_Init+0x4c>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005da0:	4b06      	ldr	r3, [pc, #24]	; (8005dbc <MX_USART2_UART_Init+0x4c>)
 8005da2:	2200      	movs	r2, #0
 8005da4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005da6:	4805      	ldr	r0, [pc, #20]	; (8005dbc <MX_USART2_UART_Init+0x4c>)
 8005da8:	f7fc f906 	bl	8001fb8 <HAL_UART_Init>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d001      	beq.n	8005db6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005db2:	f7ff fc11 	bl	80055d8 <Error_Handler>
  }

}
 8005db6:	bf00      	nop
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	20000214 	.word	0x20000214
 8005dc0:	40004400 	.word	0x40004400

08005dc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08a      	sub	sp, #40	; 0x28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dcc:	f107 0314 	add.w	r3, r7, #20
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	605a      	str	r2, [r3, #4]
 8005dd6:	609a      	str	r2, [r3, #8]
 8005dd8:	60da      	str	r2, [r3, #12]
 8005dda:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a19      	ldr	r2, [pc, #100]	; (8005e48 <HAL_UART_MspInit+0x84>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d12b      	bne.n	8005e3e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005de6:	2300      	movs	r3, #0
 8005de8:	613b      	str	r3, [r7, #16]
 8005dea:	4b18      	ldr	r3, [pc, #96]	; (8005e4c <HAL_UART_MspInit+0x88>)
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	4a17      	ldr	r2, [pc, #92]	; (8005e4c <HAL_UART_MspInit+0x88>)
 8005df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005df4:	6413      	str	r3, [r2, #64]	; 0x40
 8005df6:	4b15      	ldr	r3, [pc, #84]	; (8005e4c <HAL_UART_MspInit+0x88>)
 8005df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfe:	613b      	str	r3, [r7, #16]
 8005e00:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e02:	2300      	movs	r3, #0
 8005e04:	60fb      	str	r3, [r7, #12]
 8005e06:	4b11      	ldr	r3, [pc, #68]	; (8005e4c <HAL_UART_MspInit+0x88>)
 8005e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0a:	4a10      	ldr	r2, [pc, #64]	; (8005e4c <HAL_UART_MspInit+0x88>)
 8005e0c:	f043 0301 	orr.w	r3, r3, #1
 8005e10:	6313      	str	r3, [r2, #48]	; 0x30
 8005e12:	4b0e      	ldr	r3, [pc, #56]	; (8005e4c <HAL_UART_MspInit+0x88>)
 8005e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	60fb      	str	r3, [r7, #12]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005e1e:	230c      	movs	r3, #12
 8005e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e22:	2302      	movs	r3, #2
 8005e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005e26:	2301      	movs	r3, #1
 8005e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005e2e:	2307      	movs	r3, #7
 8005e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e32:	f107 0314 	add.w	r3, r7, #20
 8005e36:	4619      	mov	r1, r3
 8005e38:	4805      	ldr	r0, [pc, #20]	; (8005e50 <HAL_UART_MspInit+0x8c>)
 8005e3a:	f7fb f9cb 	bl	80011d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005e3e:	bf00      	nop
 8005e40:	3728      	adds	r7, #40	; 0x28
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	40004400 	.word	0x40004400
 8005e4c:	40023800 	.word	0x40023800
 8005e50:	40020000 	.word	0x40020000

08005e54 <LL_ADC_Enable>:
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f043 0201 	orr.w	r2, r3, #1
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	609a      	str	r2, [r3, #8]
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <LL_ADC_INJ_ReadConversionData12>:
{
 8005e74:	b490      	push	{r4, r7}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JDRX_REGOFFSET_MASK));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	333c      	adds	r3, #60	; 0x3c
 8005e82:	4619      	mov	r1, r3
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e8a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005e8e:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	fa92 f2a2 	rbit	r2, r2
 8005e96:	60ba      	str	r2, [r7, #8]
  return result;
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	fab2 f282 	clz	r2, r2
 8005e9e:	b2d2      	uxtb	r2, r2
 8005ea0:	40d3      	lsrs	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	440b      	add	r3, r1
 8005ea6:	461c      	mov	r4, r3
  return (uint16_t)(READ_BIT(*preg,
 8005ea8:	6823      	ldr	r3, [r4, #0]
                   );
 8005eaa:	b29b      	uxth	r3, r3
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bc90      	pop	{r4, r7}
 8005eb4:	4770      	bx	lr

08005eb6 <LL_ADC_IsActiveFlag_JEOS>:
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b083      	sub	sp, #12
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0304 	and.w	r3, r3, #4
 8005ec6:	2b04      	cmp	r3, #4
 8005ec8:	bf0c      	ite	eq
 8005eca:	2301      	moveq	r3, #1
 8005ecc:	2300      	movne	r3, #0
 8005ece:	b2db      	uxtb	r3, r3
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <LL_ADC_ClearFlag_JEOS>:
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f06f 0204 	mvn.w	r2, #4
 8005eea:	601a      	str	r2, [r3, #0]
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <LL_ADC_EnableIT_JEOS>:
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	605a      	str	r2, [r3, #4]
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <_ZN7MathLibC1ERKS_>:
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
 8005f22:	4a0e      	ldr	r2, [pc, #56]	; (8005f5c <_ZN7MathLibC1ERKS_+0x44>)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	1d1a      	adds	r2, r3, #4
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	3304      	adds	r3, #4
 8005f30:	4619      	mov	r1, r3
 8005f32:	4610      	mov	r0, r2
 8005f34:	f7fd fb39 	bl	80035aa <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f103 0210 	add.w	r2, r3, #16
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	3310      	adds	r3, #16
 8005f42:	4619      	mov	r1, r3
 8005f44:	4610      	mov	r0, r2
 8005f46:	f7fd fb30 	bl	80035aa <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	69da      	ldr	r2, [r3, #28]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	61da      	str	r2, [r3, #28]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4618      	mov	r0, r3
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	08009168 	.word	0x08009168

08005f60 <_ZN3PWMC1Ev>:


#ifndef PWM_HPP_
#define PWM_HPP_

class PWM {
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	605a      	str	r2, [r3, #4]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	609a      	str	r2, [r3, #8]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4618      	mov	r0, r3
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
	...

08005f84 <cppwrapper>:
void cpploop(void) {
    LedBlink instance;
    instance.toggle();
}

void cppwrapper(void){
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b0e8      	sub	sp, #416	; 0x1a0
 8005f88:	af00      	add	r7, sp, #0
	MathLib mathlibrary;//三角関数を取得
 8005f8a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7fd f974 	bl	800327c <_ZN7MathLibC1Ev>
	int mathlib_size = 256;//ライブラリのサイズを指定
 8005f94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f98:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	mathlibrary.fInit(mathlib_size);
 8005f9c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005fa0:	f8d7 1198 	ldr.w	r1, [r7, #408]	; 0x198
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7fd f9bb 	bl	8003320 <_ZN7MathLib5fInitEi>

	MotorInfo Motor;
 8005faa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7fe f88a 	bl	80040c8 <_ZN9MotorInfoC1Ev>
	Motor.setMathLib(mathlibrary);//モータクラスに算術ライブラリを渡す
 8005fb4:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8005fb8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005fbc:	4611      	mov	r1, r2
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7ff ffaa 	bl	8005f18 <_ZN7MathLibC1ERKS_>
 8005fc4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005fc8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005fcc:	4611      	mov	r1, r2
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fe f8d1 	bl	8004176 <_ZN9MotorInfo10setMathLibE7MathLib>
 8005fd4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7fd f96b 	bl	80032b4 <_ZN7MathLibD1Ev>

	ADC_Init();
 8005fde:	f000 f90f 	bl	8006200 <_Z8ADC_Initv>

	PWM PWM_Object1;
 8005fe2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7ff ffba 	bl	8005f60 <_ZN3PWMC1Ev>
	PWM PWM_Object2;
 8005fec:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7ff ffb5 	bl	8005f60 <_ZN3PWMC1Ev>
	PWM PWM_Object3;
 8005ff6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7ff ffb0 	bl	8005f60 <_ZN3PWMC1Ev>
	PWM PWM_Object4;
 8006000:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006004:	4618      	mov	r0, r3
 8006006:	f7ff ffab 	bl	8005f60 <_ZN3PWMC1Ev>

	PWM_Object1.setTIM(TIM1);
 800600a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800600e:	4960      	ldr	r1, [pc, #384]	; (8006190 <cppwrapper+0x20c>)
 8006010:	4618      	mov	r0, r3
 8006012:	f7fe fcaa 	bl	800496a <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object2.setTIM(TIM1);
 8006016:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800601a:	495d      	ldr	r1, [pc, #372]	; (8006190 <cppwrapper+0x20c>)
 800601c:	4618      	mov	r0, r3
 800601e:	f7fe fca4 	bl	800496a <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object3.setTIM(TIM1);
 8006022:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006026:	495a      	ldr	r1, [pc, #360]	; (8006190 <cppwrapper+0x20c>)
 8006028:	4618      	mov	r0, r3
 800602a:	f7fe fc9e 	bl	800496a <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object4.setTIM(TIM1);
 800602e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006032:	4957      	ldr	r1, [pc, #348]	; (8006190 <cppwrapper+0x20c>)
 8006034:	4618      	mov	r0, r3
 8006036:	f7fe fc98 	bl	800496a <_ZN3PWM6setTIMEP11TIM_TypeDef>

	PWM_Object1.setCH(1);
 800603a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800603e:	2101      	movs	r1, #1
 8006040:	4618      	mov	r0, r3
 8006042:	f7fe fca0 	bl	8004986 <_ZN3PWM5setCHEi>
	PWM_Object2.setCH(2);
 8006046:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800604a:	2102      	movs	r1, #2
 800604c:	4618      	mov	r0, r3
 800604e:	f7fe fc9a 	bl	8004986 <_ZN3PWM5setCHEi>
	PWM_Object3.setCH(3);
 8006052:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006056:	2103      	movs	r1, #3
 8006058:	4618      	mov	r0, r3
 800605a:	f7fe fc94 	bl	8004986 <_ZN3PWM5setCHEi>
	PWM_Object4.setCH(4);
 800605e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006062:	2104      	movs	r1, #4
 8006064:	4618      	mov	r0, r3
 8006066:	f7fe fc8e 	bl	8004986 <_ZN3PWM5setCHEi>

	PWM_Object1.fInit(65535);
 800606a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800606e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006072:	4618      	mov	r0, r3
 8006074:	f7fe fc95 	bl	80049a2 <_ZN3PWM5fInitEi>
	PWM_Object2.fInit(65535);
 8006078:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800607c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006080:	4618      	mov	r0, r3
 8006082:	f7fe fc8e 	bl	80049a2 <_ZN3PWM5fInitEi>
	PWM_Object3.fInit(65535);
 8006086:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800608a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800608e:	4618      	mov	r0, r3
 8006090:	f7fe fc87 	bl	80049a2 <_ZN3PWM5fInitEi>
	PWM_Object4.fInit(65535);
 8006094:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006098:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800609c:	4618      	mov	r0, r3
 800609e:	f7fe fc80 	bl	80049a2 <_ZN3PWM5fInitEi>

	PWM_Object1.f2Duty(0);//50%duty
 80060a2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80060a6:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8006194 <cppwrapper+0x210>
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7fe fcf0 	bl	8004a90 <_ZN3PWM6f2DutyEf>
	PWM_Object2.f2Duty(0);
 80060b0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80060b4:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8006194 <cppwrapper+0x210>
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7fe fce9 	bl	8004a90 <_ZN3PWM6f2DutyEf>
	PWM_Object3.f2Duty(0);
 80060be:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80060c2:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8006194 <cppwrapper+0x210>
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fe fce2 	bl	8004a90 <_ZN3PWM6f2DutyEf>
	PWM_Object4.f2Duty(0);
 80060cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80060d0:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8006194 <cppwrapper+0x210>
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7fe fcdb 	bl	8004a90 <_ZN3PWM6f2DutyEf>
	while(1){

//		for (const auto& e : mathlibrary.getSinList()) {
//		  //std::cout << e << std::endl;
//		}
		for(int i=0;i<mathlib_size;i++){
 80060da:	2300      	movs	r3, #0
 80060dc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80060e0:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80060e4:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80060e8:	429a      	cmp	r2, r3
 80060ea:	daf6      	bge.n	80060da <cppwrapper+0x156>
			Motor.setArg(i);
 80060ec:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80060f0:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7fe f84d 	bl	8004194 <_ZN9MotorInfo6setArgEi>
			Motor.setVd(0);
 80060fa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80060fe:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8006194 <cppwrapper+0x210>
 8006102:	4618      	mov	r0, r3
 8006104:	f7fe f854 	bl	80041b0 <_ZN9MotorInfo5setVdEf>
			Motor.setVq(0.5);
 8006108:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800610c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8006110:	4618      	mov	r0, r3
 8006112:	f7fe f85c 	bl	80041ce <_ZN9MotorInfo5setVqEf>
			Motor.invClarkTransform();
 8006116:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800611a:	4618      	mov	r0, r3
 800611c:	f7fe f866 	bl	80041ec <_ZN9MotorInfo17invClarkTransformEv>
			Motor.invParkTransform();
 8006120:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006124:	4618      	mov	r0, r3
 8006126:	f7fe f8f3 	bl	8004310 <_ZN9MotorInfo16invParkTransformEv>

			PWM_Object1.f2Duty(Motor.getVu());
 800612a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800612e:	4618      	mov	r0, r3
 8006130:	f7fe f936 	bl	80043a0 <_ZN9MotorInfo5getVuEv>
 8006134:	eef0 7a40 	vmov.f32	s15, s0
 8006138:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800613c:	eeb0 0a67 	vmov.f32	s0, s15
 8006140:	4618      	mov	r0, r3
 8006142:	f7fe fca5 	bl	8004a90 <_ZN3PWM6f2DutyEf>
			PWM_Object2.f2Duty(Motor.getVv());
 8006146:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800614a:	4618      	mov	r0, r3
 800614c:	f7fe f937 	bl	80043be <_ZN9MotorInfo5getVvEv>
 8006150:	eef0 7a40 	vmov.f32	s15, s0
 8006154:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006158:	eeb0 0a67 	vmov.f32	s0, s15
 800615c:	4618      	mov	r0, r3
 800615e:	f7fe fc97 	bl	8004a90 <_ZN3PWM6f2DutyEf>
			PWM_Object3.f2Duty(Motor.getVw());
 8006162:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006166:	4618      	mov	r0, r3
 8006168:	f7fe f938 	bl	80043dc <_ZN9MotorInfo5getVwEv>
 800616c:	eef0 7a40 	vmov.f32	s15, s0
 8006170:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006174:	eeb0 0a67 	vmov.f32	s0, s15
 8006178:	4618      	mov	r0, r3
 800617a:	f7fe fc89 	bl	8004a90 <_ZN3PWM6f2DutyEf>
			HAL_Delay(10);
 800617e:	200a      	movs	r0, #10
 8006180:	f7fa ff20 	bl	8000fc4 <HAL_Delay>
		for(int i=0;i<mathlib_size;i++){
 8006184:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006188:	3301      	adds	r3, #1
 800618a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800618e:	e7a7      	b.n	80060e0 <cppwrapper+0x15c>
 8006190:	40010000 	.word	0x40010000
 8006194:	00000000 	.word	0x00000000

08006198 <HighFreqTask>:
			  }*/
		  }
	}
}

void HighFreqTask(void){
 8006198:	b580      	push	{r7, lr}
 800619a:	af00      	add	r7, sp, #0

	if (LL_ADC_IsActiveFlag_JEOS(ADC1) == 1)
 800619c:	4814      	ldr	r0, [pc, #80]	; (80061f0 <HighFreqTask+0x58>)
 800619e:	f7ff fe8a 	bl	8005eb6 <LL_ADC_IsActiveFlag_JEOS>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	bf0c      	ite	eq
 80061a8:	2301      	moveq	r3, #1
 80061aa:	2300      	movne	r3, #0
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d01c      	beq.n	80061ec <HighFreqTask+0x54>
		{
			LL_ADC_ClearFlag_JEOS(ADC1);
 80061b2:	480f      	ldr	r0, [pc, #60]	; (80061f0 <HighFreqTask+0x58>)
 80061b4:	f7ff fe92 	bl	8005edc <LL_ADC_ClearFlag_JEOS>
			adc_data1 = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_1);
 80061b8:	2101      	movs	r1, #1
 80061ba:	480d      	ldr	r0, [pc, #52]	; (80061f0 <HighFreqTask+0x58>)
 80061bc:	f7ff fe5a 	bl	8005e74 <LL_ADC_INJ_ReadConversionData12>
 80061c0:	4603      	mov	r3, r0
 80061c2:	461a      	mov	r2, r3
 80061c4:	4b0b      	ldr	r3, [pc, #44]	; (80061f4 <HighFreqTask+0x5c>)
 80061c6:	801a      	strh	r2, [r3, #0]
			adc_data2 = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_2);
 80061c8:	f241 1102 	movw	r1, #4354	; 0x1102
 80061cc:	4808      	ldr	r0, [pc, #32]	; (80061f0 <HighFreqTask+0x58>)
 80061ce:	f7ff fe51 	bl	8005e74 <LL_ADC_INJ_ReadConversionData12>
 80061d2:	4603      	mov	r3, r0
 80061d4:	461a      	mov	r2, r3
 80061d6:	4b08      	ldr	r3, [pc, #32]	; (80061f8 <HighFreqTask+0x60>)
 80061d8:	801a      	strh	r2, [r3, #0]
			adc_data3 = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_3);
 80061da:	f242 2103 	movw	r1, #8707	; 0x2203
 80061de:	4804      	ldr	r0, [pc, #16]	; (80061f0 <HighFreqTask+0x58>)
 80061e0:	f7ff fe48 	bl	8005e74 <LL_ADC_INJ_ReadConversionData12>
 80061e4:	4603      	mov	r3, r0
 80061e6:	461a      	mov	r2, r3
 80061e8:	4b04      	ldr	r3, [pc, #16]	; (80061fc <HighFreqTask+0x64>)
 80061ea:	801a      	strh	r2, [r3, #0]
		{
			LL_ADC_WriteReg(ADC1,ISR,0);
		}*/


}
 80061ec:	bf00      	nop
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	40012000 	.word	0x40012000
 80061f4:	200001fc 	.word	0x200001fc
 80061f8:	200001fe 	.word	0x200001fe
 80061fc:	20000200 	.word	0x20000200

08006200 <_Z8ADC_Initv>:


void ADC_Init()
{
 8006200:	b580      	push	{r7, lr}
 8006202:	af00      	add	r7, sp, #0
    LL_ADC_Enable( ADC1 );
 8006204:	4805      	ldr	r0, [pc, #20]	; (800621c <_Z8ADC_Initv+0x1c>)
 8006206:	f7ff fe25 	bl	8005e54 <LL_ADC_Enable>
    //LL_ADC_Enable( ADC2 );

    /* ADC1 Injected conversions end interrupt enabling */
    LL_ADC_ClearFlag_JEOS( ADC1 );
 800620a:	4804      	ldr	r0, [pc, #16]	; (800621c <_Z8ADC_Initv+0x1c>)
 800620c:	f7ff fe66 	bl	8005edc <LL_ADC_ClearFlag_JEOS>
    LL_ADC_EnableIT_JEOS( ADC1 );
 8006210:	4802      	ldr	r0, [pc, #8]	; (800621c <_Z8ADC_Initv+0x1c>)
 8006212:	f7ff fe71 	bl	8005ef8 <LL_ADC_EnableIT_JEOS>
}
 8006216:	bf00      	nop
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	40012000 	.word	0x40012000

08006220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006220:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006258 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006224:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006226:	e003      	b.n	8006230 <LoopCopyDataInit>

08006228 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006228:	4b0c      	ldr	r3, [pc, #48]	; (800625c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800622a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800622c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800622e:	3104      	adds	r1, #4

08006230 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006230:	480b      	ldr	r0, [pc, #44]	; (8006260 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006232:	4b0c      	ldr	r3, [pc, #48]	; (8006264 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006234:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006236:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006238:	d3f6      	bcc.n	8006228 <CopyDataInit>
  ldr  r2, =_sbss
 800623a:	4a0b      	ldr	r2, [pc, #44]	; (8006268 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800623c:	e002      	b.n	8006244 <LoopFillZerobss>

0800623e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800623e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006240:	f842 3b04 	str.w	r3, [r2], #4

08006244 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006244:	4b09      	ldr	r3, [pc, #36]	; (800626c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006246:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006248:	d3f9      	bcc.n	800623e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800624a:	f7ff fa85 	bl	8005758 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800624e:	f001 f941 	bl	80074d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006252:	f7ff f93b 	bl	80054cc <main>
  bx  lr    
 8006256:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006258:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 800625c:	08009630 	.word	0x08009630
  ldr  r0, =_sdata
 8006260:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006264:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8006268:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 800626c:	20000258 	.word	0x20000258

08006270 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006270:	e7fe      	b.n	8006270 <CAN1_RX0_IRQHandler>

08006272 <_ZdlPv>:
 8006272:	f001 b95b 	b.w	800752c <free>

08006276 <_ZdlPvj>:
 8006276:	f7ff bffc 	b.w	8006272 <_ZdlPv>

0800627a <_Znwj>:
 800627a:	b510      	push	{r4, lr}
 800627c:	2800      	cmp	r0, #0
 800627e:	bf14      	ite	ne
 8006280:	4604      	movne	r4, r0
 8006282:	2401      	moveq	r4, #1
 8006284:	4620      	mov	r0, r4
 8006286:	f001 f949 	bl	800751c <malloc>
 800628a:	b930      	cbnz	r0, 800629a <_Znwj+0x20>
 800628c:	f000 f8b8 	bl	8006400 <_ZSt15get_new_handlerv>
 8006290:	b908      	cbnz	r0, 8006296 <_Znwj+0x1c>
 8006292:	f001 f912 	bl	80074ba <abort>
 8006296:	4780      	blx	r0
 8006298:	e7f4      	b.n	8006284 <_Znwj+0xa>
 800629a:	bd10      	pop	{r4, pc}

0800629c <_ZSt17__throw_bad_allocv>:
 800629c:	b508      	push	{r3, lr}
 800629e:	f001 f90c 	bl	80074ba <abort>

080062a2 <_ZSt19__throw_logic_errorPKc>:
 80062a2:	b508      	push	{r3, lr}
 80062a4:	f001 f909 	bl	80074ba <abort>

080062a8 <_ZSt20__throw_length_errorPKc>:
 80062a8:	b508      	push	{r3, lr}
 80062aa:	f001 f906 	bl	80074ba <abort>

080062ae <_ZSt24__throw_out_of_range_fmtPKcz>:
 80062ae:	b40f      	push	{r0, r1, r2, r3}
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	f107 0410 	add.w	r4, r7, #16
 80062ba:	f854 5b04 	ldr.w	r5, [r4], #4
 80062be:	4628      	mov	r0, r5
 80062c0:	f7f9 ffa2 	bl	8000208 <strlen>
 80062c4:	f200 230e 	addw	r3, r0, #526	; 0x20e
 80062c8:	f023 0307 	bic.w	r3, r3, #7
 80062cc:	ebad 0d03 	sub.w	sp, sp, r3
 80062d0:	f500 7100 	add.w	r1, r0, #512	; 0x200
 80062d4:	4623      	mov	r3, r4
 80062d6:	462a      	mov	r2, r5
 80062d8:	4668      	mov	r0, sp
 80062da:	607c      	str	r4, [r7, #4]
 80062dc:	f000 f850 	bl	8006380 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 80062e0:	f001 f8eb 	bl	80074ba <abort>

080062e4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b09c      	sub	sp, #112	; 0x70
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	1a0e      	subs	r6, r1, r0
 80062ec:	4680      	mov	r8, r0
 80062ee:	2269      	movs	r2, #105	; 0x69
 80062f0:	490e      	ldr	r1, [pc, #56]	; (800632c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 80062f2:	1d38      	adds	r0, r7, #4
 80062f4:	f001 f922 	bl	800753c <memcpy>
 80062f8:	f106 0377 	add.w	r3, r6, #119	; 0x77
 80062fc:	f023 0307 	bic.w	r3, r3, #7
 8006300:	ebad 0d03 	sub.w	sp, sp, r3
 8006304:	466c      	mov	r4, sp
 8006306:	2268      	movs	r2, #104	; 0x68
 8006308:	1d39      	adds	r1, r7, #4
 800630a:	1c75      	adds	r5, r6, #1
 800630c:	4620      	mov	r0, r4
 800630e:	f001 f915 	bl	800753c <memcpy>
 8006312:	4425      	add	r5, r4
 8006314:	4632      	mov	r2, r6
 8006316:	4641      	mov	r1, r8
 8006318:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800631c:	f001 f90e 	bl	800753c <memcpy>
 8006320:	2300      	movs	r3, #0
 8006322:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 8006326:	4620      	mov	r0, r4
 8006328:	f7ff ffbb 	bl	80062a2 <_ZSt19__throw_logic_errorPKc>
 800632c:	080091b2 	.word	0x080091b2

08006330 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8006330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006332:	af00      	add	r7, sp, #0
 8006334:	b086      	sub	sp, #24
 8006336:	466d      	mov	r5, sp
 8006338:	f105 040c 	add.w	r4, r5, #12
 800633c:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800637c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8006340:	4623      	mov	r3, r4
 8006342:	f04f 0c0a 	mov.w	ip, #10
 8006346:	fbb2 f6fc 	udiv	r6, r2, ip
 800634a:	fb0c 2216 	mls	r2, ip, r6, r2
 800634e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8006352:	f803 2d01 	strb.w	r2, [r3, #-1]!
 8006356:	4632      	mov	r2, r6
 8006358:	2e00      	cmp	r6, #0
 800635a:	d1f4      	bne.n	8006346 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 800635c:	1ae4      	subs	r4, r4, r3
 800635e:	428c      	cmp	r4, r1
 8006360:	d808      	bhi.n	8006374 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 8006362:	f1c4 010c 	rsb	r1, r4, #12
 8006366:	4622      	mov	r2, r4
 8006368:	4429      	add	r1, r5
 800636a:	f001 f8e7 	bl	800753c <memcpy>
 800636e:	4620      	mov	r0, r4
 8006370:	46bd      	mov	sp, r7
 8006372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006374:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006378:	e7f9      	b.n	800636e <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 800637a:	bf00      	nop
 800637c:	080091a7 	.word	0x080091a7

08006380 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8006380:	3901      	subs	r1, #1
 8006382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006386:	4606      	mov	r6, r0
 8006388:	4615      	mov	r5, r2
 800638a:	1847      	adds	r7, r0, r1
 800638c:	4604      	mov	r4, r0
 800638e:	782a      	ldrb	r2, [r5, #0]
 8006390:	b392      	cbz	r2, 80063f8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x78>
 8006392:	42bc      	cmp	r4, r7
 8006394:	d22c      	bcs.n	80063f0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 8006396:	2a25      	cmp	r2, #37	; 0x25
 8006398:	d107      	bne.n	80063aa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 800639a:	786a      	ldrb	r2, [r5, #1]
 800639c:	2a73      	cmp	r2, #115	; 0x73
 800639e:	d009      	beq.n	80063b4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x34>
 80063a0:	2a7a      	cmp	r2, #122	; 0x7a
 80063a2:	d012      	beq.n	80063ca <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4a>
 80063a4:	2a25      	cmp	r2, #37	; 0x25
 80063a6:	d100      	bne.n	80063aa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 80063a8:	3501      	adds	r5, #1
 80063aa:	782a      	ldrb	r2, [r5, #0]
 80063ac:	7022      	strb	r2, [r4, #0]
 80063ae:	3501      	adds	r5, #1
 80063b0:	3401      	adds	r4, #1
 80063b2:	e7ec      	b.n	800638e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80063b4:	1d19      	adds	r1, r3, #4
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	3b01      	subs	r3, #1
 80063ba:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80063be:	b1a2      	cbz	r2, 80063ea <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6a>
 80063c0:	42bc      	cmp	r4, r7
 80063c2:	d015      	beq.n	80063f0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 80063c4:	f804 2b01 	strb.w	r2, [r4], #1
 80063c8:	e7f7      	b.n	80063ba <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3a>
 80063ca:	78aa      	ldrb	r2, [r5, #2]
 80063cc:	2a75      	cmp	r2, #117	; 0x75
 80063ce:	d1ec      	bne.n	80063aa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	1b39      	subs	r1, r7, r4
 80063d4:	4620      	mov	r0, r4
 80063d6:	f103 0804 	add.w	r8, r3, #4
 80063da:	f7ff ffa9 	bl	8006330 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 80063de:	2800      	cmp	r0, #0
 80063e0:	dd06      	ble.n	80063f0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 80063e2:	4404      	add	r4, r0
 80063e4:	3503      	adds	r5, #3
 80063e6:	4643      	mov	r3, r8
 80063e8:	e7d1      	b.n	800638e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80063ea:	3502      	adds	r5, #2
 80063ec:	460b      	mov	r3, r1
 80063ee:	e7ce      	b.n	800638e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80063f0:	4621      	mov	r1, r4
 80063f2:	4630      	mov	r0, r6
 80063f4:	f7ff ff76 	bl	80062e4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 80063f8:	7022      	strb	r2, [r4, #0]
 80063fa:	1ba0      	subs	r0, r4, r6
 80063fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006400 <_ZSt15get_new_handlerv>:
 8006400:	4b02      	ldr	r3, [pc, #8]	; (800640c <_ZSt15get_new_handlerv+0xc>)
 8006402:	6818      	ldr	r0, [r3, #0]
 8006404:	f3bf 8f5b 	dmb	ish
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	20000204 	.word	0x20000204

08006410 <cos>:
 8006410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006412:	ec51 0b10 	vmov	r0, r1, d0
 8006416:	4a1e      	ldr	r2, [pc, #120]	; (8006490 <cos+0x80>)
 8006418:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800641c:	4293      	cmp	r3, r2
 800641e:	dc06      	bgt.n	800642e <cos+0x1e>
 8006420:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8006488 <cos+0x78>
 8006424:	f000 fa74 	bl	8006910 <__kernel_cos>
 8006428:	ec51 0b10 	vmov	r0, r1, d0
 800642c:	e007      	b.n	800643e <cos+0x2e>
 800642e:	4a19      	ldr	r2, [pc, #100]	; (8006494 <cos+0x84>)
 8006430:	4293      	cmp	r3, r2
 8006432:	dd09      	ble.n	8006448 <cos+0x38>
 8006434:	ee10 2a10 	vmov	r2, s0
 8006438:	460b      	mov	r3, r1
 800643a:	f7f9 fef1 	bl	8000220 <__aeabi_dsub>
 800643e:	ec41 0b10 	vmov	d0, r0, r1
 8006442:	b005      	add	sp, #20
 8006444:	f85d fb04 	ldr.w	pc, [sp], #4
 8006448:	4668      	mov	r0, sp
 800644a:	f000 f86d 	bl	8006528 <__ieee754_rem_pio2>
 800644e:	f000 0003 	and.w	r0, r0, #3
 8006452:	2801      	cmp	r0, #1
 8006454:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006458:	ed9d 0b00 	vldr	d0, [sp]
 800645c:	d007      	beq.n	800646e <cos+0x5e>
 800645e:	2802      	cmp	r0, #2
 8006460:	d00e      	beq.n	8006480 <cos+0x70>
 8006462:	2800      	cmp	r0, #0
 8006464:	d0de      	beq.n	8006424 <cos+0x14>
 8006466:	2001      	movs	r0, #1
 8006468:	f000 fe5a 	bl	8007120 <__kernel_sin>
 800646c:	e7dc      	b.n	8006428 <cos+0x18>
 800646e:	f000 fe57 	bl	8007120 <__kernel_sin>
 8006472:	ec53 2b10 	vmov	r2, r3, d0
 8006476:	ee10 0a10 	vmov	r0, s0
 800647a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800647e:	e7de      	b.n	800643e <cos+0x2e>
 8006480:	f000 fa46 	bl	8006910 <__kernel_cos>
 8006484:	e7f5      	b.n	8006472 <cos+0x62>
 8006486:	bf00      	nop
	...
 8006490:	3fe921fb 	.word	0x3fe921fb
 8006494:	7fefffff 	.word	0x7fefffff

08006498 <sin>:
 8006498:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800649a:	ec51 0b10 	vmov	r0, r1, d0
 800649e:	4a20      	ldr	r2, [pc, #128]	; (8006520 <sin+0x88>)
 80064a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80064a4:	4293      	cmp	r3, r2
 80064a6:	dc07      	bgt.n	80064b8 <sin+0x20>
 80064a8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8006518 <sin+0x80>
 80064ac:	2000      	movs	r0, #0
 80064ae:	f000 fe37 	bl	8007120 <__kernel_sin>
 80064b2:	ec51 0b10 	vmov	r0, r1, d0
 80064b6:	e007      	b.n	80064c8 <sin+0x30>
 80064b8:	4a1a      	ldr	r2, [pc, #104]	; (8006524 <sin+0x8c>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	dd09      	ble.n	80064d2 <sin+0x3a>
 80064be:	ee10 2a10 	vmov	r2, s0
 80064c2:	460b      	mov	r3, r1
 80064c4:	f7f9 feac 	bl	8000220 <__aeabi_dsub>
 80064c8:	ec41 0b10 	vmov	d0, r0, r1
 80064cc:	b005      	add	sp, #20
 80064ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80064d2:	4668      	mov	r0, sp
 80064d4:	f000 f828 	bl	8006528 <__ieee754_rem_pio2>
 80064d8:	f000 0003 	and.w	r0, r0, #3
 80064dc:	2801      	cmp	r0, #1
 80064de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80064e2:	ed9d 0b00 	vldr	d0, [sp]
 80064e6:	d004      	beq.n	80064f2 <sin+0x5a>
 80064e8:	2802      	cmp	r0, #2
 80064ea:	d005      	beq.n	80064f8 <sin+0x60>
 80064ec:	b970      	cbnz	r0, 800650c <sin+0x74>
 80064ee:	2001      	movs	r0, #1
 80064f0:	e7dd      	b.n	80064ae <sin+0x16>
 80064f2:	f000 fa0d 	bl	8006910 <__kernel_cos>
 80064f6:	e7dc      	b.n	80064b2 <sin+0x1a>
 80064f8:	2001      	movs	r0, #1
 80064fa:	f000 fe11 	bl	8007120 <__kernel_sin>
 80064fe:	ec53 2b10 	vmov	r2, r3, d0
 8006502:	ee10 0a10 	vmov	r0, s0
 8006506:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800650a:	e7dd      	b.n	80064c8 <sin+0x30>
 800650c:	f000 fa00 	bl	8006910 <__kernel_cos>
 8006510:	e7f5      	b.n	80064fe <sin+0x66>
 8006512:	bf00      	nop
 8006514:	f3af 8000 	nop.w
	...
 8006520:	3fe921fb 	.word	0x3fe921fb
 8006524:	7fefffff 	.word	0x7fefffff

08006528 <__ieee754_rem_pio2>:
 8006528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652c:	ec57 6b10 	vmov	r6, r7, d0
 8006530:	4bc3      	ldr	r3, [pc, #780]	; (8006840 <__ieee754_rem_pio2+0x318>)
 8006532:	b08d      	sub	sp, #52	; 0x34
 8006534:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006538:	4598      	cmp	r8, r3
 800653a:	4604      	mov	r4, r0
 800653c:	9704      	str	r7, [sp, #16]
 800653e:	dc07      	bgt.n	8006550 <__ieee754_rem_pio2+0x28>
 8006540:	2200      	movs	r2, #0
 8006542:	2300      	movs	r3, #0
 8006544:	ed84 0b00 	vstr	d0, [r4]
 8006548:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800654c:	2500      	movs	r5, #0
 800654e:	e027      	b.n	80065a0 <__ieee754_rem_pio2+0x78>
 8006550:	4bbc      	ldr	r3, [pc, #752]	; (8006844 <__ieee754_rem_pio2+0x31c>)
 8006552:	4598      	cmp	r8, r3
 8006554:	dc75      	bgt.n	8006642 <__ieee754_rem_pio2+0x11a>
 8006556:	9b04      	ldr	r3, [sp, #16]
 8006558:	4dbb      	ldr	r5, [pc, #748]	; (8006848 <__ieee754_rem_pio2+0x320>)
 800655a:	2b00      	cmp	r3, #0
 800655c:	ee10 0a10 	vmov	r0, s0
 8006560:	a3a9      	add	r3, pc, #676	; (adr r3, 8006808 <__ieee754_rem_pio2+0x2e0>)
 8006562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006566:	4639      	mov	r1, r7
 8006568:	dd36      	ble.n	80065d8 <__ieee754_rem_pio2+0xb0>
 800656a:	f7f9 fe59 	bl	8000220 <__aeabi_dsub>
 800656e:	45a8      	cmp	r8, r5
 8006570:	4606      	mov	r6, r0
 8006572:	460f      	mov	r7, r1
 8006574:	d018      	beq.n	80065a8 <__ieee754_rem_pio2+0x80>
 8006576:	a3a6      	add	r3, pc, #664	; (adr r3, 8006810 <__ieee754_rem_pio2+0x2e8>)
 8006578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657c:	f7f9 fe50 	bl	8000220 <__aeabi_dsub>
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	e9c4 2300 	strd	r2, r3, [r4]
 8006588:	4630      	mov	r0, r6
 800658a:	4639      	mov	r1, r7
 800658c:	f7f9 fe48 	bl	8000220 <__aeabi_dsub>
 8006590:	a39f      	add	r3, pc, #636	; (adr r3, 8006810 <__ieee754_rem_pio2+0x2e8>)
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	f7f9 fe43 	bl	8000220 <__aeabi_dsub>
 800659a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800659e:	2501      	movs	r5, #1
 80065a0:	4628      	mov	r0, r5
 80065a2:	b00d      	add	sp, #52	; 0x34
 80065a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a8:	a39b      	add	r3, pc, #620	; (adr r3, 8006818 <__ieee754_rem_pio2+0x2f0>)
 80065aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ae:	f7f9 fe37 	bl	8000220 <__aeabi_dsub>
 80065b2:	a39b      	add	r3, pc, #620	; (adr r3, 8006820 <__ieee754_rem_pio2+0x2f8>)
 80065b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b8:	4606      	mov	r6, r0
 80065ba:	460f      	mov	r7, r1
 80065bc:	f7f9 fe30 	bl	8000220 <__aeabi_dsub>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	e9c4 2300 	strd	r2, r3, [r4]
 80065c8:	4630      	mov	r0, r6
 80065ca:	4639      	mov	r1, r7
 80065cc:	f7f9 fe28 	bl	8000220 <__aeabi_dsub>
 80065d0:	a393      	add	r3, pc, #588	; (adr r3, 8006820 <__ieee754_rem_pio2+0x2f8>)
 80065d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d6:	e7de      	b.n	8006596 <__ieee754_rem_pio2+0x6e>
 80065d8:	f7f9 fe24 	bl	8000224 <__adddf3>
 80065dc:	45a8      	cmp	r8, r5
 80065de:	4606      	mov	r6, r0
 80065e0:	460f      	mov	r7, r1
 80065e2:	d016      	beq.n	8006612 <__ieee754_rem_pio2+0xea>
 80065e4:	a38a      	add	r3, pc, #552	; (adr r3, 8006810 <__ieee754_rem_pio2+0x2e8>)
 80065e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ea:	f7f9 fe1b 	bl	8000224 <__adddf3>
 80065ee:	4602      	mov	r2, r0
 80065f0:	460b      	mov	r3, r1
 80065f2:	e9c4 2300 	strd	r2, r3, [r4]
 80065f6:	4630      	mov	r0, r6
 80065f8:	4639      	mov	r1, r7
 80065fa:	f7f9 fe11 	bl	8000220 <__aeabi_dsub>
 80065fe:	a384      	add	r3, pc, #528	; (adr r3, 8006810 <__ieee754_rem_pio2+0x2e8>)
 8006600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006604:	f7f9 fe0e 	bl	8000224 <__adddf3>
 8006608:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800660c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006610:	e7c6      	b.n	80065a0 <__ieee754_rem_pio2+0x78>
 8006612:	a381      	add	r3, pc, #516	; (adr r3, 8006818 <__ieee754_rem_pio2+0x2f0>)
 8006614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006618:	f7f9 fe04 	bl	8000224 <__adddf3>
 800661c:	a380      	add	r3, pc, #512	; (adr r3, 8006820 <__ieee754_rem_pio2+0x2f8>)
 800661e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006622:	4606      	mov	r6, r0
 8006624:	460f      	mov	r7, r1
 8006626:	f7f9 fdfd 	bl	8000224 <__adddf3>
 800662a:	4602      	mov	r2, r0
 800662c:	460b      	mov	r3, r1
 800662e:	e9c4 2300 	strd	r2, r3, [r4]
 8006632:	4630      	mov	r0, r6
 8006634:	4639      	mov	r1, r7
 8006636:	f7f9 fdf3 	bl	8000220 <__aeabi_dsub>
 800663a:	a379      	add	r3, pc, #484	; (adr r3, 8006820 <__ieee754_rem_pio2+0x2f8>)
 800663c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006640:	e7e0      	b.n	8006604 <__ieee754_rem_pio2+0xdc>
 8006642:	4b82      	ldr	r3, [pc, #520]	; (800684c <__ieee754_rem_pio2+0x324>)
 8006644:	4598      	cmp	r8, r3
 8006646:	f300 80d0 	bgt.w	80067ea <__ieee754_rem_pio2+0x2c2>
 800664a:	f000 fe23 	bl	8007294 <fabs>
 800664e:	ec57 6b10 	vmov	r6, r7, d0
 8006652:	ee10 0a10 	vmov	r0, s0
 8006656:	a374      	add	r3, pc, #464	; (adr r3, 8006828 <__ieee754_rem_pio2+0x300>)
 8006658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665c:	4639      	mov	r1, r7
 800665e:	f7f9 ff97 	bl	8000590 <__aeabi_dmul>
 8006662:	2200      	movs	r2, #0
 8006664:	4b7a      	ldr	r3, [pc, #488]	; (8006850 <__ieee754_rem_pio2+0x328>)
 8006666:	f7f9 fddd 	bl	8000224 <__adddf3>
 800666a:	f7fa fa41 	bl	8000af0 <__aeabi_d2iz>
 800666e:	4605      	mov	r5, r0
 8006670:	f7f9 ff24 	bl	80004bc <__aeabi_i2d>
 8006674:	a364      	add	r3, pc, #400	; (adr r3, 8006808 <__ieee754_rem_pio2+0x2e0>)
 8006676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800667e:	f7f9 ff87 	bl	8000590 <__aeabi_dmul>
 8006682:	4602      	mov	r2, r0
 8006684:	460b      	mov	r3, r1
 8006686:	4630      	mov	r0, r6
 8006688:	4639      	mov	r1, r7
 800668a:	f7f9 fdc9 	bl	8000220 <__aeabi_dsub>
 800668e:	a360      	add	r3, pc, #384	; (adr r3, 8006810 <__ieee754_rem_pio2+0x2e8>)
 8006690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006694:	4682      	mov	sl, r0
 8006696:	468b      	mov	fp, r1
 8006698:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800669c:	f7f9 ff78 	bl	8000590 <__aeabi_dmul>
 80066a0:	2d1f      	cmp	r5, #31
 80066a2:	4606      	mov	r6, r0
 80066a4:	460f      	mov	r7, r1
 80066a6:	dc0c      	bgt.n	80066c2 <__ieee754_rem_pio2+0x19a>
 80066a8:	1e6a      	subs	r2, r5, #1
 80066aa:	4b6a      	ldr	r3, [pc, #424]	; (8006854 <__ieee754_rem_pio2+0x32c>)
 80066ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066b0:	4543      	cmp	r3, r8
 80066b2:	d006      	beq.n	80066c2 <__ieee754_rem_pio2+0x19a>
 80066b4:	4632      	mov	r2, r6
 80066b6:	463b      	mov	r3, r7
 80066b8:	4650      	mov	r0, sl
 80066ba:	4659      	mov	r1, fp
 80066bc:	f7f9 fdb0 	bl	8000220 <__aeabi_dsub>
 80066c0:	e00e      	b.n	80066e0 <__ieee754_rem_pio2+0x1b8>
 80066c2:	4632      	mov	r2, r6
 80066c4:	463b      	mov	r3, r7
 80066c6:	4650      	mov	r0, sl
 80066c8:	4659      	mov	r1, fp
 80066ca:	f7f9 fda9 	bl	8000220 <__aeabi_dsub>
 80066ce:	ea4f 5328 	mov.w	r3, r8, asr #20
 80066d2:	9305      	str	r3, [sp, #20]
 80066d4:	9a05      	ldr	r2, [sp, #20]
 80066d6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	2b10      	cmp	r3, #16
 80066de:	dc02      	bgt.n	80066e6 <__ieee754_rem_pio2+0x1be>
 80066e0:	e9c4 0100 	strd	r0, r1, [r4]
 80066e4:	e039      	b.n	800675a <__ieee754_rem_pio2+0x232>
 80066e6:	a34c      	add	r3, pc, #304	; (adr r3, 8006818 <__ieee754_rem_pio2+0x2f0>)
 80066e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066f0:	f7f9 ff4e 	bl	8000590 <__aeabi_dmul>
 80066f4:	4606      	mov	r6, r0
 80066f6:	460f      	mov	r7, r1
 80066f8:	4602      	mov	r2, r0
 80066fa:	460b      	mov	r3, r1
 80066fc:	4650      	mov	r0, sl
 80066fe:	4659      	mov	r1, fp
 8006700:	f7f9 fd8e 	bl	8000220 <__aeabi_dsub>
 8006704:	4602      	mov	r2, r0
 8006706:	460b      	mov	r3, r1
 8006708:	4680      	mov	r8, r0
 800670a:	4689      	mov	r9, r1
 800670c:	4650      	mov	r0, sl
 800670e:	4659      	mov	r1, fp
 8006710:	f7f9 fd86 	bl	8000220 <__aeabi_dsub>
 8006714:	4632      	mov	r2, r6
 8006716:	463b      	mov	r3, r7
 8006718:	f7f9 fd82 	bl	8000220 <__aeabi_dsub>
 800671c:	a340      	add	r3, pc, #256	; (adr r3, 8006820 <__ieee754_rem_pio2+0x2f8>)
 800671e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006722:	4606      	mov	r6, r0
 8006724:	460f      	mov	r7, r1
 8006726:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800672a:	f7f9 ff31 	bl	8000590 <__aeabi_dmul>
 800672e:	4632      	mov	r2, r6
 8006730:	463b      	mov	r3, r7
 8006732:	f7f9 fd75 	bl	8000220 <__aeabi_dsub>
 8006736:	4602      	mov	r2, r0
 8006738:	460b      	mov	r3, r1
 800673a:	4606      	mov	r6, r0
 800673c:	460f      	mov	r7, r1
 800673e:	4640      	mov	r0, r8
 8006740:	4649      	mov	r1, r9
 8006742:	f7f9 fd6d 	bl	8000220 <__aeabi_dsub>
 8006746:	9a05      	ldr	r2, [sp, #20]
 8006748:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	2b31      	cmp	r3, #49	; 0x31
 8006750:	dc20      	bgt.n	8006794 <__ieee754_rem_pio2+0x26c>
 8006752:	e9c4 0100 	strd	r0, r1, [r4]
 8006756:	46c2      	mov	sl, r8
 8006758:	46cb      	mov	fp, r9
 800675a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800675e:	4650      	mov	r0, sl
 8006760:	4642      	mov	r2, r8
 8006762:	464b      	mov	r3, r9
 8006764:	4659      	mov	r1, fp
 8006766:	f7f9 fd5b 	bl	8000220 <__aeabi_dsub>
 800676a:	463b      	mov	r3, r7
 800676c:	4632      	mov	r2, r6
 800676e:	f7f9 fd57 	bl	8000220 <__aeabi_dsub>
 8006772:	9b04      	ldr	r3, [sp, #16]
 8006774:	2b00      	cmp	r3, #0
 8006776:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800677a:	f6bf af11 	bge.w	80065a0 <__ieee754_rem_pio2+0x78>
 800677e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006782:	6063      	str	r3, [r4, #4]
 8006784:	f8c4 8000 	str.w	r8, [r4]
 8006788:	60a0      	str	r0, [r4, #8]
 800678a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800678e:	60e3      	str	r3, [r4, #12]
 8006790:	426d      	negs	r5, r5
 8006792:	e705      	b.n	80065a0 <__ieee754_rem_pio2+0x78>
 8006794:	a326      	add	r3, pc, #152	; (adr r3, 8006830 <__ieee754_rem_pio2+0x308>)
 8006796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800679e:	f7f9 fef7 	bl	8000590 <__aeabi_dmul>
 80067a2:	4606      	mov	r6, r0
 80067a4:	460f      	mov	r7, r1
 80067a6:	4602      	mov	r2, r0
 80067a8:	460b      	mov	r3, r1
 80067aa:	4640      	mov	r0, r8
 80067ac:	4649      	mov	r1, r9
 80067ae:	f7f9 fd37 	bl	8000220 <__aeabi_dsub>
 80067b2:	4602      	mov	r2, r0
 80067b4:	460b      	mov	r3, r1
 80067b6:	4682      	mov	sl, r0
 80067b8:	468b      	mov	fp, r1
 80067ba:	4640      	mov	r0, r8
 80067bc:	4649      	mov	r1, r9
 80067be:	f7f9 fd2f 	bl	8000220 <__aeabi_dsub>
 80067c2:	4632      	mov	r2, r6
 80067c4:	463b      	mov	r3, r7
 80067c6:	f7f9 fd2b 	bl	8000220 <__aeabi_dsub>
 80067ca:	a31b      	add	r3, pc, #108	; (adr r3, 8006838 <__ieee754_rem_pio2+0x310>)
 80067cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d0:	4606      	mov	r6, r0
 80067d2:	460f      	mov	r7, r1
 80067d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067d8:	f7f9 feda 	bl	8000590 <__aeabi_dmul>
 80067dc:	4632      	mov	r2, r6
 80067de:	463b      	mov	r3, r7
 80067e0:	f7f9 fd1e 	bl	8000220 <__aeabi_dsub>
 80067e4:	4606      	mov	r6, r0
 80067e6:	460f      	mov	r7, r1
 80067e8:	e764      	b.n	80066b4 <__ieee754_rem_pio2+0x18c>
 80067ea:	4b1b      	ldr	r3, [pc, #108]	; (8006858 <__ieee754_rem_pio2+0x330>)
 80067ec:	4598      	cmp	r8, r3
 80067ee:	dd35      	ble.n	800685c <__ieee754_rem_pio2+0x334>
 80067f0:	ee10 2a10 	vmov	r2, s0
 80067f4:	463b      	mov	r3, r7
 80067f6:	4630      	mov	r0, r6
 80067f8:	4639      	mov	r1, r7
 80067fa:	f7f9 fd11 	bl	8000220 <__aeabi_dsub>
 80067fe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006802:	e9c4 0100 	strd	r0, r1, [r4]
 8006806:	e6a1      	b.n	800654c <__ieee754_rem_pio2+0x24>
 8006808:	54400000 	.word	0x54400000
 800680c:	3ff921fb 	.word	0x3ff921fb
 8006810:	1a626331 	.word	0x1a626331
 8006814:	3dd0b461 	.word	0x3dd0b461
 8006818:	1a600000 	.word	0x1a600000
 800681c:	3dd0b461 	.word	0x3dd0b461
 8006820:	2e037073 	.word	0x2e037073
 8006824:	3ba3198a 	.word	0x3ba3198a
 8006828:	6dc9c883 	.word	0x6dc9c883
 800682c:	3fe45f30 	.word	0x3fe45f30
 8006830:	2e000000 	.word	0x2e000000
 8006834:	3ba3198a 	.word	0x3ba3198a
 8006838:	252049c1 	.word	0x252049c1
 800683c:	397b839a 	.word	0x397b839a
 8006840:	3fe921fb 	.word	0x3fe921fb
 8006844:	4002d97b 	.word	0x4002d97b
 8006848:	3ff921fb 	.word	0x3ff921fb
 800684c:	413921fb 	.word	0x413921fb
 8006850:	3fe00000 	.word	0x3fe00000
 8006854:	0800921c 	.word	0x0800921c
 8006858:	7fefffff 	.word	0x7fefffff
 800685c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006860:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8006864:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006868:	4630      	mov	r0, r6
 800686a:	460f      	mov	r7, r1
 800686c:	f7fa f940 	bl	8000af0 <__aeabi_d2iz>
 8006870:	f7f9 fe24 	bl	80004bc <__aeabi_i2d>
 8006874:	4602      	mov	r2, r0
 8006876:	460b      	mov	r3, r1
 8006878:	4630      	mov	r0, r6
 800687a:	4639      	mov	r1, r7
 800687c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006880:	f7f9 fcce 	bl	8000220 <__aeabi_dsub>
 8006884:	2200      	movs	r2, #0
 8006886:	4b1f      	ldr	r3, [pc, #124]	; (8006904 <__ieee754_rem_pio2+0x3dc>)
 8006888:	f7f9 fe82 	bl	8000590 <__aeabi_dmul>
 800688c:	460f      	mov	r7, r1
 800688e:	4606      	mov	r6, r0
 8006890:	f7fa f92e 	bl	8000af0 <__aeabi_d2iz>
 8006894:	f7f9 fe12 	bl	80004bc <__aeabi_i2d>
 8006898:	4602      	mov	r2, r0
 800689a:	460b      	mov	r3, r1
 800689c:	4630      	mov	r0, r6
 800689e:	4639      	mov	r1, r7
 80068a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80068a4:	f7f9 fcbc 	bl	8000220 <__aeabi_dsub>
 80068a8:	2200      	movs	r2, #0
 80068aa:	4b16      	ldr	r3, [pc, #88]	; (8006904 <__ieee754_rem_pio2+0x3dc>)
 80068ac:	f7f9 fe70 	bl	8000590 <__aeabi_dmul>
 80068b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80068b4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80068b8:	f04f 0803 	mov.w	r8, #3
 80068bc:	2600      	movs	r6, #0
 80068be:	2700      	movs	r7, #0
 80068c0:	4632      	mov	r2, r6
 80068c2:	463b      	mov	r3, r7
 80068c4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80068c8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80068cc:	f7fa f8c8 	bl	8000a60 <__aeabi_dcmpeq>
 80068d0:	b9b0      	cbnz	r0, 8006900 <__ieee754_rem_pio2+0x3d8>
 80068d2:	4b0d      	ldr	r3, [pc, #52]	; (8006908 <__ieee754_rem_pio2+0x3e0>)
 80068d4:	9301      	str	r3, [sp, #4]
 80068d6:	2302      	movs	r3, #2
 80068d8:	9300      	str	r3, [sp, #0]
 80068da:	462a      	mov	r2, r5
 80068dc:	4643      	mov	r3, r8
 80068de:	4621      	mov	r1, r4
 80068e0:	a806      	add	r0, sp, #24
 80068e2:	f000 f8dd 	bl	8006aa0 <__kernel_rem_pio2>
 80068e6:	9b04      	ldr	r3, [sp, #16]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	4605      	mov	r5, r0
 80068ec:	f6bf ae58 	bge.w	80065a0 <__ieee754_rem_pio2+0x78>
 80068f0:	6863      	ldr	r3, [r4, #4]
 80068f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80068f6:	6063      	str	r3, [r4, #4]
 80068f8:	68e3      	ldr	r3, [r4, #12]
 80068fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80068fe:	e746      	b.n	800678e <__ieee754_rem_pio2+0x266>
 8006900:	46d0      	mov	r8, sl
 8006902:	e7dd      	b.n	80068c0 <__ieee754_rem_pio2+0x398>
 8006904:	41700000 	.word	0x41700000
 8006908:	0800929c 	.word	0x0800929c
 800690c:	00000000 	.word	0x00000000

08006910 <__kernel_cos>:
 8006910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006914:	ec59 8b10 	vmov	r8, r9, d0
 8006918:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800691c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8006920:	ed2d 8b02 	vpush	{d8}
 8006924:	eeb0 8a41 	vmov.f32	s16, s2
 8006928:	eef0 8a61 	vmov.f32	s17, s3
 800692c:	da07      	bge.n	800693e <__kernel_cos+0x2e>
 800692e:	ee10 0a10 	vmov	r0, s0
 8006932:	4649      	mov	r1, r9
 8006934:	f7fa f8dc 	bl	8000af0 <__aeabi_d2iz>
 8006938:	2800      	cmp	r0, #0
 800693a:	f000 8089 	beq.w	8006a50 <__kernel_cos+0x140>
 800693e:	4642      	mov	r2, r8
 8006940:	464b      	mov	r3, r9
 8006942:	4640      	mov	r0, r8
 8006944:	4649      	mov	r1, r9
 8006946:	f7f9 fe23 	bl	8000590 <__aeabi_dmul>
 800694a:	2200      	movs	r2, #0
 800694c:	4b4e      	ldr	r3, [pc, #312]	; (8006a88 <__kernel_cos+0x178>)
 800694e:	4604      	mov	r4, r0
 8006950:	460d      	mov	r5, r1
 8006952:	f7f9 fe1d 	bl	8000590 <__aeabi_dmul>
 8006956:	a340      	add	r3, pc, #256	; (adr r3, 8006a58 <__kernel_cos+0x148>)
 8006958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695c:	4682      	mov	sl, r0
 800695e:	468b      	mov	fp, r1
 8006960:	4620      	mov	r0, r4
 8006962:	4629      	mov	r1, r5
 8006964:	f7f9 fe14 	bl	8000590 <__aeabi_dmul>
 8006968:	a33d      	add	r3, pc, #244	; (adr r3, 8006a60 <__kernel_cos+0x150>)
 800696a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696e:	f7f9 fc59 	bl	8000224 <__adddf3>
 8006972:	4622      	mov	r2, r4
 8006974:	462b      	mov	r3, r5
 8006976:	f7f9 fe0b 	bl	8000590 <__aeabi_dmul>
 800697a:	a33b      	add	r3, pc, #236	; (adr r3, 8006a68 <__kernel_cos+0x158>)
 800697c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006980:	f7f9 fc4e 	bl	8000220 <__aeabi_dsub>
 8006984:	4622      	mov	r2, r4
 8006986:	462b      	mov	r3, r5
 8006988:	f7f9 fe02 	bl	8000590 <__aeabi_dmul>
 800698c:	a338      	add	r3, pc, #224	; (adr r3, 8006a70 <__kernel_cos+0x160>)
 800698e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006992:	f7f9 fc47 	bl	8000224 <__adddf3>
 8006996:	4622      	mov	r2, r4
 8006998:	462b      	mov	r3, r5
 800699a:	f7f9 fdf9 	bl	8000590 <__aeabi_dmul>
 800699e:	a336      	add	r3, pc, #216	; (adr r3, 8006a78 <__kernel_cos+0x168>)
 80069a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a4:	f7f9 fc3c 	bl	8000220 <__aeabi_dsub>
 80069a8:	4622      	mov	r2, r4
 80069aa:	462b      	mov	r3, r5
 80069ac:	f7f9 fdf0 	bl	8000590 <__aeabi_dmul>
 80069b0:	a333      	add	r3, pc, #204	; (adr r3, 8006a80 <__kernel_cos+0x170>)
 80069b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b6:	f7f9 fc35 	bl	8000224 <__adddf3>
 80069ba:	4622      	mov	r2, r4
 80069bc:	462b      	mov	r3, r5
 80069be:	f7f9 fde7 	bl	8000590 <__aeabi_dmul>
 80069c2:	4622      	mov	r2, r4
 80069c4:	462b      	mov	r3, r5
 80069c6:	f7f9 fde3 	bl	8000590 <__aeabi_dmul>
 80069ca:	ec53 2b18 	vmov	r2, r3, d8
 80069ce:	4604      	mov	r4, r0
 80069d0:	460d      	mov	r5, r1
 80069d2:	4640      	mov	r0, r8
 80069d4:	4649      	mov	r1, r9
 80069d6:	f7f9 fddb 	bl	8000590 <__aeabi_dmul>
 80069da:	460b      	mov	r3, r1
 80069dc:	4602      	mov	r2, r0
 80069de:	4629      	mov	r1, r5
 80069e0:	4620      	mov	r0, r4
 80069e2:	f7f9 fc1d 	bl	8000220 <__aeabi_dsub>
 80069e6:	4b29      	ldr	r3, [pc, #164]	; (8006a8c <__kernel_cos+0x17c>)
 80069e8:	429e      	cmp	r6, r3
 80069ea:	4680      	mov	r8, r0
 80069ec:	4689      	mov	r9, r1
 80069ee:	dc11      	bgt.n	8006a14 <__kernel_cos+0x104>
 80069f0:	4602      	mov	r2, r0
 80069f2:	460b      	mov	r3, r1
 80069f4:	4650      	mov	r0, sl
 80069f6:	4659      	mov	r1, fp
 80069f8:	f7f9 fc12 	bl	8000220 <__aeabi_dsub>
 80069fc:	460b      	mov	r3, r1
 80069fe:	4924      	ldr	r1, [pc, #144]	; (8006a90 <__kernel_cos+0x180>)
 8006a00:	4602      	mov	r2, r0
 8006a02:	2000      	movs	r0, #0
 8006a04:	f7f9 fc0c 	bl	8000220 <__aeabi_dsub>
 8006a08:	ecbd 8b02 	vpop	{d8}
 8006a0c:	ec41 0b10 	vmov	d0, r0, r1
 8006a10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a14:	4b1f      	ldr	r3, [pc, #124]	; (8006a94 <__kernel_cos+0x184>)
 8006a16:	491e      	ldr	r1, [pc, #120]	; (8006a90 <__kernel_cos+0x180>)
 8006a18:	429e      	cmp	r6, r3
 8006a1a:	bfcc      	ite	gt
 8006a1c:	4d1e      	ldrgt	r5, [pc, #120]	; (8006a98 <__kernel_cos+0x188>)
 8006a1e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8006a22:	2400      	movs	r4, #0
 8006a24:	4622      	mov	r2, r4
 8006a26:	462b      	mov	r3, r5
 8006a28:	2000      	movs	r0, #0
 8006a2a:	f7f9 fbf9 	bl	8000220 <__aeabi_dsub>
 8006a2e:	4622      	mov	r2, r4
 8006a30:	4606      	mov	r6, r0
 8006a32:	460f      	mov	r7, r1
 8006a34:	462b      	mov	r3, r5
 8006a36:	4650      	mov	r0, sl
 8006a38:	4659      	mov	r1, fp
 8006a3a:	f7f9 fbf1 	bl	8000220 <__aeabi_dsub>
 8006a3e:	4642      	mov	r2, r8
 8006a40:	464b      	mov	r3, r9
 8006a42:	f7f9 fbed 	bl	8000220 <__aeabi_dsub>
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	4630      	mov	r0, r6
 8006a4c:	4639      	mov	r1, r7
 8006a4e:	e7d9      	b.n	8006a04 <__kernel_cos+0xf4>
 8006a50:	2000      	movs	r0, #0
 8006a52:	490f      	ldr	r1, [pc, #60]	; (8006a90 <__kernel_cos+0x180>)
 8006a54:	e7d8      	b.n	8006a08 <__kernel_cos+0xf8>
 8006a56:	bf00      	nop
 8006a58:	be8838d4 	.word	0xbe8838d4
 8006a5c:	bda8fae9 	.word	0xbda8fae9
 8006a60:	bdb4b1c4 	.word	0xbdb4b1c4
 8006a64:	3e21ee9e 	.word	0x3e21ee9e
 8006a68:	809c52ad 	.word	0x809c52ad
 8006a6c:	3e927e4f 	.word	0x3e927e4f
 8006a70:	19cb1590 	.word	0x19cb1590
 8006a74:	3efa01a0 	.word	0x3efa01a0
 8006a78:	16c15177 	.word	0x16c15177
 8006a7c:	3f56c16c 	.word	0x3f56c16c
 8006a80:	5555554c 	.word	0x5555554c
 8006a84:	3fa55555 	.word	0x3fa55555
 8006a88:	3fe00000 	.word	0x3fe00000
 8006a8c:	3fd33332 	.word	0x3fd33332
 8006a90:	3ff00000 	.word	0x3ff00000
 8006a94:	3fe90000 	.word	0x3fe90000
 8006a98:	3fd20000 	.word	0x3fd20000
 8006a9c:	00000000 	.word	0x00000000

08006aa0 <__kernel_rem_pio2>:
 8006aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa4:	ed2d 8b02 	vpush	{d8}
 8006aa8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006aac:	1ed4      	subs	r4, r2, #3
 8006aae:	9308      	str	r3, [sp, #32]
 8006ab0:	9101      	str	r1, [sp, #4]
 8006ab2:	4bc5      	ldr	r3, [pc, #788]	; (8006dc8 <__kernel_rem_pio2+0x328>)
 8006ab4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8006ab6:	9009      	str	r0, [sp, #36]	; 0x24
 8006ab8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006abc:	9304      	str	r3, [sp, #16]
 8006abe:	9b08      	ldr	r3, [sp, #32]
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	9307      	str	r3, [sp, #28]
 8006ac4:	2318      	movs	r3, #24
 8006ac6:	fb94 f4f3 	sdiv	r4, r4, r3
 8006aca:	f06f 0317 	mvn.w	r3, #23
 8006ace:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8006ad2:	fb04 3303 	mla	r3, r4, r3, r3
 8006ad6:	eb03 0a02 	add.w	sl, r3, r2
 8006ada:	9b04      	ldr	r3, [sp, #16]
 8006adc:	9a07      	ldr	r2, [sp, #28]
 8006ade:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8006db8 <__kernel_rem_pio2+0x318>
 8006ae2:	eb03 0802 	add.w	r8, r3, r2
 8006ae6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006ae8:	1aa7      	subs	r7, r4, r2
 8006aea:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006aee:	ae22      	add	r6, sp, #136	; 0x88
 8006af0:	2500      	movs	r5, #0
 8006af2:	4545      	cmp	r5, r8
 8006af4:	dd13      	ble.n	8006b1e <__kernel_rem_pio2+0x7e>
 8006af6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8006db8 <__kernel_rem_pio2+0x318>
 8006afa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8006afe:	2600      	movs	r6, #0
 8006b00:	9b04      	ldr	r3, [sp, #16]
 8006b02:	429e      	cmp	r6, r3
 8006b04:	dc32      	bgt.n	8006b6c <__kernel_rem_pio2+0xcc>
 8006b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b08:	9302      	str	r3, [sp, #8]
 8006b0a:	9b08      	ldr	r3, [sp, #32]
 8006b0c:	199d      	adds	r5, r3, r6
 8006b0e:	ab22      	add	r3, sp, #136	; 0x88
 8006b10:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006b14:	9306      	str	r3, [sp, #24]
 8006b16:	ec59 8b18 	vmov	r8, r9, d8
 8006b1a:	2700      	movs	r7, #0
 8006b1c:	e01f      	b.n	8006b5e <__kernel_rem_pio2+0xbe>
 8006b1e:	42ef      	cmn	r7, r5
 8006b20:	d407      	bmi.n	8006b32 <__kernel_rem_pio2+0x92>
 8006b22:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006b26:	f7f9 fcc9 	bl	80004bc <__aeabi_i2d>
 8006b2a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006b2e:	3501      	adds	r5, #1
 8006b30:	e7df      	b.n	8006af2 <__kernel_rem_pio2+0x52>
 8006b32:	ec51 0b18 	vmov	r0, r1, d8
 8006b36:	e7f8      	b.n	8006b2a <__kernel_rem_pio2+0x8a>
 8006b38:	9906      	ldr	r1, [sp, #24]
 8006b3a:	9d02      	ldr	r5, [sp, #8]
 8006b3c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8006b40:	9106      	str	r1, [sp, #24]
 8006b42:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8006b46:	9502      	str	r5, [sp, #8]
 8006b48:	f7f9 fd22 	bl	8000590 <__aeabi_dmul>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	460b      	mov	r3, r1
 8006b50:	4640      	mov	r0, r8
 8006b52:	4649      	mov	r1, r9
 8006b54:	f7f9 fb66 	bl	8000224 <__adddf3>
 8006b58:	3701      	adds	r7, #1
 8006b5a:	4680      	mov	r8, r0
 8006b5c:	4689      	mov	r9, r1
 8006b5e:	9b07      	ldr	r3, [sp, #28]
 8006b60:	429f      	cmp	r7, r3
 8006b62:	dde9      	ble.n	8006b38 <__kernel_rem_pio2+0x98>
 8006b64:	e8eb 8902 	strd	r8, r9, [fp], #8
 8006b68:	3601      	adds	r6, #1
 8006b6a:	e7c9      	b.n	8006b00 <__kernel_rem_pio2+0x60>
 8006b6c:	9b04      	ldr	r3, [sp, #16]
 8006b6e:	aa0e      	add	r2, sp, #56	; 0x38
 8006b70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006b74:	930c      	str	r3, [sp, #48]	; 0x30
 8006b76:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006b78:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006b7c:	9c04      	ldr	r4, [sp, #16]
 8006b7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b80:	ab9a      	add	r3, sp, #616	; 0x268
 8006b82:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8006b86:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b8a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006b8e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8006b92:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8006b96:	ab9a      	add	r3, sp, #616	; 0x268
 8006b98:	445b      	add	r3, fp
 8006b9a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8006b9e:	2500      	movs	r5, #0
 8006ba0:	1b63      	subs	r3, r4, r5
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	dc78      	bgt.n	8006c98 <__kernel_rem_pio2+0x1f8>
 8006ba6:	4650      	mov	r0, sl
 8006ba8:	ec49 8b10 	vmov	d0, r8, r9
 8006bac:	f000 fc00 	bl	80073b0 <scalbn>
 8006bb0:	ec57 6b10 	vmov	r6, r7, d0
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006bba:	ee10 0a10 	vmov	r0, s0
 8006bbe:	4639      	mov	r1, r7
 8006bc0:	f7f9 fce6 	bl	8000590 <__aeabi_dmul>
 8006bc4:	ec41 0b10 	vmov	d0, r0, r1
 8006bc8:	f000 fb6e 	bl	80072a8 <floor>
 8006bcc:	2200      	movs	r2, #0
 8006bce:	ec51 0b10 	vmov	r0, r1, d0
 8006bd2:	4b7e      	ldr	r3, [pc, #504]	; (8006dcc <__kernel_rem_pio2+0x32c>)
 8006bd4:	f7f9 fcdc 	bl	8000590 <__aeabi_dmul>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	460b      	mov	r3, r1
 8006bdc:	4630      	mov	r0, r6
 8006bde:	4639      	mov	r1, r7
 8006be0:	f7f9 fb1e 	bl	8000220 <__aeabi_dsub>
 8006be4:	460f      	mov	r7, r1
 8006be6:	4606      	mov	r6, r0
 8006be8:	f7f9 ff82 	bl	8000af0 <__aeabi_d2iz>
 8006bec:	9006      	str	r0, [sp, #24]
 8006bee:	f7f9 fc65 	bl	80004bc <__aeabi_i2d>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	4630      	mov	r0, r6
 8006bf8:	4639      	mov	r1, r7
 8006bfa:	f7f9 fb11 	bl	8000220 <__aeabi_dsub>
 8006bfe:	f1ba 0f00 	cmp.w	sl, #0
 8006c02:	4606      	mov	r6, r0
 8006c04:	460f      	mov	r7, r1
 8006c06:	dd6c      	ble.n	8006ce2 <__kernel_rem_pio2+0x242>
 8006c08:	1e62      	subs	r2, r4, #1
 8006c0a:	ab0e      	add	r3, sp, #56	; 0x38
 8006c0c:	f1ca 0118 	rsb	r1, sl, #24
 8006c10:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006c14:	9d06      	ldr	r5, [sp, #24]
 8006c16:	fa40 f301 	asr.w	r3, r0, r1
 8006c1a:	441d      	add	r5, r3
 8006c1c:	408b      	lsls	r3, r1
 8006c1e:	1ac0      	subs	r0, r0, r3
 8006c20:	ab0e      	add	r3, sp, #56	; 0x38
 8006c22:	9506      	str	r5, [sp, #24]
 8006c24:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006c28:	f1ca 0317 	rsb	r3, sl, #23
 8006c2c:	fa40 f303 	asr.w	r3, r0, r3
 8006c30:	9302      	str	r3, [sp, #8]
 8006c32:	9b02      	ldr	r3, [sp, #8]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	dd62      	ble.n	8006cfe <__kernel_rem_pio2+0x25e>
 8006c38:	9b06      	ldr	r3, [sp, #24]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	9306      	str	r3, [sp, #24]
 8006c40:	4615      	mov	r5, r2
 8006c42:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006c46:	4294      	cmp	r4, r2
 8006c48:	f300 8095 	bgt.w	8006d76 <__kernel_rem_pio2+0x2d6>
 8006c4c:	f1ba 0f00 	cmp.w	sl, #0
 8006c50:	dd07      	ble.n	8006c62 <__kernel_rem_pio2+0x1c2>
 8006c52:	f1ba 0f01 	cmp.w	sl, #1
 8006c56:	f000 80a2 	beq.w	8006d9e <__kernel_rem_pio2+0x2fe>
 8006c5a:	f1ba 0f02 	cmp.w	sl, #2
 8006c5e:	f000 80c1 	beq.w	8006de4 <__kernel_rem_pio2+0x344>
 8006c62:	9b02      	ldr	r3, [sp, #8]
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d14a      	bne.n	8006cfe <__kernel_rem_pio2+0x25e>
 8006c68:	4632      	mov	r2, r6
 8006c6a:	463b      	mov	r3, r7
 8006c6c:	2000      	movs	r0, #0
 8006c6e:	4958      	ldr	r1, [pc, #352]	; (8006dd0 <__kernel_rem_pio2+0x330>)
 8006c70:	f7f9 fad6 	bl	8000220 <__aeabi_dsub>
 8006c74:	4606      	mov	r6, r0
 8006c76:	460f      	mov	r7, r1
 8006c78:	2d00      	cmp	r5, #0
 8006c7a:	d040      	beq.n	8006cfe <__kernel_rem_pio2+0x25e>
 8006c7c:	4650      	mov	r0, sl
 8006c7e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8006dc0 <__kernel_rem_pio2+0x320>
 8006c82:	f000 fb95 	bl	80073b0 <scalbn>
 8006c86:	4630      	mov	r0, r6
 8006c88:	4639      	mov	r1, r7
 8006c8a:	ec53 2b10 	vmov	r2, r3, d0
 8006c8e:	f7f9 fac7 	bl	8000220 <__aeabi_dsub>
 8006c92:	4606      	mov	r6, r0
 8006c94:	460f      	mov	r7, r1
 8006c96:	e032      	b.n	8006cfe <__kernel_rem_pio2+0x25e>
 8006c98:	2200      	movs	r2, #0
 8006c9a:	4b4e      	ldr	r3, [pc, #312]	; (8006dd4 <__kernel_rem_pio2+0x334>)
 8006c9c:	4640      	mov	r0, r8
 8006c9e:	4649      	mov	r1, r9
 8006ca0:	f7f9 fc76 	bl	8000590 <__aeabi_dmul>
 8006ca4:	f7f9 ff24 	bl	8000af0 <__aeabi_d2iz>
 8006ca8:	f7f9 fc08 	bl	80004bc <__aeabi_i2d>
 8006cac:	2200      	movs	r2, #0
 8006cae:	4b4a      	ldr	r3, [pc, #296]	; (8006dd8 <__kernel_rem_pio2+0x338>)
 8006cb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cb4:	f7f9 fc6c 	bl	8000590 <__aeabi_dmul>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	460b      	mov	r3, r1
 8006cbc:	4640      	mov	r0, r8
 8006cbe:	4649      	mov	r1, r9
 8006cc0:	f7f9 faae 	bl	8000220 <__aeabi_dsub>
 8006cc4:	f7f9 ff14 	bl	8000af0 <__aeabi_d2iz>
 8006cc8:	ab0e      	add	r3, sp, #56	; 0x38
 8006cca:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8006cce:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006cd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cd6:	f7f9 faa5 	bl	8000224 <__adddf3>
 8006cda:	3501      	adds	r5, #1
 8006cdc:	4680      	mov	r8, r0
 8006cde:	4689      	mov	r9, r1
 8006ce0:	e75e      	b.n	8006ba0 <__kernel_rem_pio2+0x100>
 8006ce2:	d105      	bne.n	8006cf0 <__kernel_rem_pio2+0x250>
 8006ce4:	1e63      	subs	r3, r4, #1
 8006ce6:	aa0e      	add	r2, sp, #56	; 0x38
 8006ce8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006cec:	15c3      	asrs	r3, r0, #23
 8006cee:	e79f      	b.n	8006c30 <__kernel_rem_pio2+0x190>
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	4b3a      	ldr	r3, [pc, #232]	; (8006ddc <__kernel_rem_pio2+0x33c>)
 8006cf4:	f7f9 fed2 	bl	8000a9c <__aeabi_dcmpge>
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	d139      	bne.n	8006d70 <__kernel_rem_pio2+0x2d0>
 8006cfc:	9002      	str	r0, [sp, #8]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	2300      	movs	r3, #0
 8006d02:	4630      	mov	r0, r6
 8006d04:	4639      	mov	r1, r7
 8006d06:	f7f9 feab 	bl	8000a60 <__aeabi_dcmpeq>
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	f000 80c7 	beq.w	8006e9e <__kernel_rem_pio2+0x3fe>
 8006d10:	1e65      	subs	r5, r4, #1
 8006d12:	462b      	mov	r3, r5
 8006d14:	2200      	movs	r2, #0
 8006d16:	9904      	ldr	r1, [sp, #16]
 8006d18:	428b      	cmp	r3, r1
 8006d1a:	da6a      	bge.n	8006df2 <__kernel_rem_pio2+0x352>
 8006d1c:	2a00      	cmp	r2, #0
 8006d1e:	f000 8088 	beq.w	8006e32 <__kernel_rem_pio2+0x392>
 8006d22:	ab0e      	add	r3, sp, #56	; 0x38
 8006d24:	f1aa 0a18 	sub.w	sl, sl, #24
 8006d28:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f000 80b4 	beq.w	8006e9a <__kernel_rem_pio2+0x3fa>
 8006d32:	4650      	mov	r0, sl
 8006d34:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8006dc0 <__kernel_rem_pio2+0x320>
 8006d38:	f000 fb3a 	bl	80073b0 <scalbn>
 8006d3c:	00ec      	lsls	r4, r5, #3
 8006d3e:	ab72      	add	r3, sp, #456	; 0x1c8
 8006d40:	191e      	adds	r6, r3, r4
 8006d42:	ec59 8b10 	vmov	r8, r9, d0
 8006d46:	f106 0a08 	add.w	sl, r6, #8
 8006d4a:	462f      	mov	r7, r5
 8006d4c:	2f00      	cmp	r7, #0
 8006d4e:	f280 80df 	bge.w	8006f10 <__kernel_rem_pio2+0x470>
 8006d52:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8006db8 <__kernel_rem_pio2+0x318>
 8006d56:	f04f 0a00 	mov.w	sl, #0
 8006d5a:	eba5 030a 	sub.w	r3, r5, sl
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f2c0 810a 	blt.w	8006f78 <__kernel_rem_pio2+0x4d8>
 8006d64:	f8df b078 	ldr.w	fp, [pc, #120]	; 8006de0 <__kernel_rem_pio2+0x340>
 8006d68:	ec59 8b18 	vmov	r8, r9, d8
 8006d6c:	2700      	movs	r7, #0
 8006d6e:	e0f5      	b.n	8006f5c <__kernel_rem_pio2+0x4bc>
 8006d70:	2302      	movs	r3, #2
 8006d72:	9302      	str	r3, [sp, #8]
 8006d74:	e760      	b.n	8006c38 <__kernel_rem_pio2+0x198>
 8006d76:	ab0e      	add	r3, sp, #56	; 0x38
 8006d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d7c:	b94d      	cbnz	r5, 8006d92 <__kernel_rem_pio2+0x2f2>
 8006d7e:	b12b      	cbz	r3, 8006d8c <__kernel_rem_pio2+0x2ec>
 8006d80:	a80e      	add	r0, sp, #56	; 0x38
 8006d82:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006d86:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	3201      	adds	r2, #1
 8006d8e:	461d      	mov	r5, r3
 8006d90:	e759      	b.n	8006c46 <__kernel_rem_pio2+0x1a6>
 8006d92:	a80e      	add	r0, sp, #56	; 0x38
 8006d94:	1acb      	subs	r3, r1, r3
 8006d96:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006d9a:	462b      	mov	r3, r5
 8006d9c:	e7f6      	b.n	8006d8c <__kernel_rem_pio2+0x2ec>
 8006d9e:	1e62      	subs	r2, r4, #1
 8006da0:	ab0e      	add	r3, sp, #56	; 0x38
 8006da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006daa:	a90e      	add	r1, sp, #56	; 0x38
 8006dac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006db0:	e757      	b.n	8006c62 <__kernel_rem_pio2+0x1c2>
 8006db2:	bf00      	nop
 8006db4:	f3af 8000 	nop.w
	...
 8006dc4:	3ff00000 	.word	0x3ff00000
 8006dc8:	080093e8 	.word	0x080093e8
 8006dcc:	40200000 	.word	0x40200000
 8006dd0:	3ff00000 	.word	0x3ff00000
 8006dd4:	3e700000 	.word	0x3e700000
 8006dd8:	41700000 	.word	0x41700000
 8006ddc:	3fe00000 	.word	0x3fe00000
 8006de0:	080093a8 	.word	0x080093a8
 8006de4:	1e62      	subs	r2, r4, #1
 8006de6:	ab0e      	add	r3, sp, #56	; 0x38
 8006de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dec:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006df0:	e7db      	b.n	8006daa <__kernel_rem_pio2+0x30a>
 8006df2:	a90e      	add	r1, sp, #56	; 0x38
 8006df4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	e78b      	b.n	8006d16 <__kernel_rem_pio2+0x276>
 8006dfe:	3301      	adds	r3, #1
 8006e00:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006e04:	2900      	cmp	r1, #0
 8006e06:	d0fa      	beq.n	8006dfe <__kernel_rem_pio2+0x35e>
 8006e08:	9a08      	ldr	r2, [sp, #32]
 8006e0a:	4422      	add	r2, r4
 8006e0c:	00d2      	lsls	r2, r2, #3
 8006e0e:	a922      	add	r1, sp, #136	; 0x88
 8006e10:	18e3      	adds	r3, r4, r3
 8006e12:	9206      	str	r2, [sp, #24]
 8006e14:	440a      	add	r2, r1
 8006e16:	9302      	str	r3, [sp, #8]
 8006e18:	f10b 0108 	add.w	r1, fp, #8
 8006e1c:	f102 0308 	add.w	r3, r2, #8
 8006e20:	1c66      	adds	r6, r4, #1
 8006e22:	910a      	str	r1, [sp, #40]	; 0x28
 8006e24:	2500      	movs	r5, #0
 8006e26:	930d      	str	r3, [sp, #52]	; 0x34
 8006e28:	9b02      	ldr	r3, [sp, #8]
 8006e2a:	42b3      	cmp	r3, r6
 8006e2c:	da04      	bge.n	8006e38 <__kernel_rem_pio2+0x398>
 8006e2e:	461c      	mov	r4, r3
 8006e30:	e6a6      	b.n	8006b80 <__kernel_rem_pio2+0xe0>
 8006e32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e34:	2301      	movs	r3, #1
 8006e36:	e7e3      	b.n	8006e00 <__kernel_rem_pio2+0x360>
 8006e38:	9b06      	ldr	r3, [sp, #24]
 8006e3a:	18ef      	adds	r7, r5, r3
 8006e3c:	ab22      	add	r3, sp, #136	; 0x88
 8006e3e:	441f      	add	r7, r3
 8006e40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e42:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006e46:	f7f9 fb39 	bl	80004bc <__aeabi_i2d>
 8006e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e4c:	461c      	mov	r4, r3
 8006e4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e50:	e9c7 0100 	strd	r0, r1, [r7]
 8006e54:	eb03 0b05 	add.w	fp, r3, r5
 8006e58:	2700      	movs	r7, #0
 8006e5a:	f04f 0800 	mov.w	r8, #0
 8006e5e:	f04f 0900 	mov.w	r9, #0
 8006e62:	9b07      	ldr	r3, [sp, #28]
 8006e64:	429f      	cmp	r7, r3
 8006e66:	dd08      	ble.n	8006e7a <__kernel_rem_pio2+0x3da>
 8006e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e6a:	aa72      	add	r2, sp, #456	; 0x1c8
 8006e6c:	18eb      	adds	r3, r5, r3
 8006e6e:	4413      	add	r3, r2
 8006e70:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8006e74:	3601      	adds	r6, #1
 8006e76:	3508      	adds	r5, #8
 8006e78:	e7d6      	b.n	8006e28 <__kernel_rem_pio2+0x388>
 8006e7a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006e7e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006e82:	f7f9 fb85 	bl	8000590 <__aeabi_dmul>
 8006e86:	4602      	mov	r2, r0
 8006e88:	460b      	mov	r3, r1
 8006e8a:	4640      	mov	r0, r8
 8006e8c:	4649      	mov	r1, r9
 8006e8e:	f7f9 f9c9 	bl	8000224 <__adddf3>
 8006e92:	3701      	adds	r7, #1
 8006e94:	4680      	mov	r8, r0
 8006e96:	4689      	mov	r9, r1
 8006e98:	e7e3      	b.n	8006e62 <__kernel_rem_pio2+0x3c2>
 8006e9a:	3d01      	subs	r5, #1
 8006e9c:	e741      	b.n	8006d22 <__kernel_rem_pio2+0x282>
 8006e9e:	f1ca 0000 	rsb	r0, sl, #0
 8006ea2:	ec47 6b10 	vmov	d0, r6, r7
 8006ea6:	f000 fa83 	bl	80073b0 <scalbn>
 8006eaa:	ec57 6b10 	vmov	r6, r7, d0
 8006eae:	2200      	movs	r2, #0
 8006eb0:	4b99      	ldr	r3, [pc, #612]	; (8007118 <__kernel_rem_pio2+0x678>)
 8006eb2:	ee10 0a10 	vmov	r0, s0
 8006eb6:	4639      	mov	r1, r7
 8006eb8:	f7f9 fdf0 	bl	8000a9c <__aeabi_dcmpge>
 8006ebc:	b1f8      	cbz	r0, 8006efe <__kernel_rem_pio2+0x45e>
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	4b96      	ldr	r3, [pc, #600]	; (800711c <__kernel_rem_pio2+0x67c>)
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	4639      	mov	r1, r7
 8006ec6:	f7f9 fb63 	bl	8000590 <__aeabi_dmul>
 8006eca:	f7f9 fe11 	bl	8000af0 <__aeabi_d2iz>
 8006ece:	4680      	mov	r8, r0
 8006ed0:	f7f9 faf4 	bl	80004bc <__aeabi_i2d>
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	4b90      	ldr	r3, [pc, #576]	; (8007118 <__kernel_rem_pio2+0x678>)
 8006ed8:	f7f9 fb5a 	bl	8000590 <__aeabi_dmul>
 8006edc:	460b      	mov	r3, r1
 8006ede:	4602      	mov	r2, r0
 8006ee0:	4639      	mov	r1, r7
 8006ee2:	4630      	mov	r0, r6
 8006ee4:	f7f9 f99c 	bl	8000220 <__aeabi_dsub>
 8006ee8:	f7f9 fe02 	bl	8000af0 <__aeabi_d2iz>
 8006eec:	1c65      	adds	r5, r4, #1
 8006eee:	ab0e      	add	r3, sp, #56	; 0x38
 8006ef0:	f10a 0a18 	add.w	sl, sl, #24
 8006ef4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006ef8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006efc:	e719      	b.n	8006d32 <__kernel_rem_pio2+0x292>
 8006efe:	4630      	mov	r0, r6
 8006f00:	4639      	mov	r1, r7
 8006f02:	f7f9 fdf5 	bl	8000af0 <__aeabi_d2iz>
 8006f06:	ab0e      	add	r3, sp, #56	; 0x38
 8006f08:	4625      	mov	r5, r4
 8006f0a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006f0e:	e710      	b.n	8006d32 <__kernel_rem_pio2+0x292>
 8006f10:	ab0e      	add	r3, sp, #56	; 0x38
 8006f12:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8006f16:	f7f9 fad1 	bl	80004bc <__aeabi_i2d>
 8006f1a:	4642      	mov	r2, r8
 8006f1c:	464b      	mov	r3, r9
 8006f1e:	f7f9 fb37 	bl	8000590 <__aeabi_dmul>
 8006f22:	2200      	movs	r2, #0
 8006f24:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8006f28:	4b7c      	ldr	r3, [pc, #496]	; (800711c <__kernel_rem_pio2+0x67c>)
 8006f2a:	4640      	mov	r0, r8
 8006f2c:	4649      	mov	r1, r9
 8006f2e:	f7f9 fb2f 	bl	8000590 <__aeabi_dmul>
 8006f32:	3f01      	subs	r7, #1
 8006f34:	4680      	mov	r8, r0
 8006f36:	4689      	mov	r9, r1
 8006f38:	e708      	b.n	8006d4c <__kernel_rem_pio2+0x2ac>
 8006f3a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8006f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f42:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8006f46:	f7f9 fb23 	bl	8000590 <__aeabi_dmul>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	4640      	mov	r0, r8
 8006f50:	4649      	mov	r1, r9
 8006f52:	f7f9 f967 	bl	8000224 <__adddf3>
 8006f56:	3701      	adds	r7, #1
 8006f58:	4680      	mov	r8, r0
 8006f5a:	4689      	mov	r9, r1
 8006f5c:	9b04      	ldr	r3, [sp, #16]
 8006f5e:	429f      	cmp	r7, r3
 8006f60:	dc01      	bgt.n	8006f66 <__kernel_rem_pio2+0x4c6>
 8006f62:	45ba      	cmp	sl, r7
 8006f64:	dae9      	bge.n	8006f3a <__kernel_rem_pio2+0x49a>
 8006f66:	ab4a      	add	r3, sp, #296	; 0x128
 8006f68:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006f6c:	e9c3 8900 	strd	r8, r9, [r3]
 8006f70:	f10a 0a01 	add.w	sl, sl, #1
 8006f74:	3e08      	subs	r6, #8
 8006f76:	e6f0      	b.n	8006d5a <__kernel_rem_pio2+0x2ba>
 8006f78:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006f7a:	2b03      	cmp	r3, #3
 8006f7c:	d85b      	bhi.n	8007036 <__kernel_rem_pio2+0x596>
 8006f7e:	e8df f003 	tbb	[pc, r3]
 8006f82:	264a      	.short	0x264a
 8006f84:	0226      	.short	0x0226
 8006f86:	ab9a      	add	r3, sp, #616	; 0x268
 8006f88:	441c      	add	r4, r3
 8006f8a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8006f8e:	46a2      	mov	sl, r4
 8006f90:	46ab      	mov	fp, r5
 8006f92:	f1bb 0f00 	cmp.w	fp, #0
 8006f96:	dc6c      	bgt.n	8007072 <__kernel_rem_pio2+0x5d2>
 8006f98:	46a2      	mov	sl, r4
 8006f9a:	46ab      	mov	fp, r5
 8006f9c:	f1bb 0f01 	cmp.w	fp, #1
 8006fa0:	f300 8086 	bgt.w	80070b0 <__kernel_rem_pio2+0x610>
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	2d01      	cmp	r5, #1
 8006faa:	f300 80a0 	bgt.w	80070ee <__kernel_rem_pio2+0x64e>
 8006fae:	9b02      	ldr	r3, [sp, #8]
 8006fb0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8006fb4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f040 809e 	bne.w	80070fa <__kernel_rem_pio2+0x65a>
 8006fbe:	9b01      	ldr	r3, [sp, #4]
 8006fc0:	e9c3 7800 	strd	r7, r8, [r3]
 8006fc4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006fc8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006fcc:	e033      	b.n	8007036 <__kernel_rem_pio2+0x596>
 8006fce:	3408      	adds	r4, #8
 8006fd0:	ab4a      	add	r3, sp, #296	; 0x128
 8006fd2:	441c      	add	r4, r3
 8006fd4:	462e      	mov	r6, r5
 8006fd6:	2000      	movs	r0, #0
 8006fd8:	2100      	movs	r1, #0
 8006fda:	2e00      	cmp	r6, #0
 8006fdc:	da3a      	bge.n	8007054 <__kernel_rem_pio2+0x5b4>
 8006fde:	9b02      	ldr	r3, [sp, #8]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d03d      	beq.n	8007060 <__kernel_rem_pio2+0x5c0>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fea:	9c01      	ldr	r4, [sp, #4]
 8006fec:	e9c4 2300 	strd	r2, r3, [r4]
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8006ff8:	f7f9 f912 	bl	8000220 <__aeabi_dsub>
 8006ffc:	ae4c      	add	r6, sp, #304	; 0x130
 8006ffe:	2401      	movs	r4, #1
 8007000:	42a5      	cmp	r5, r4
 8007002:	da30      	bge.n	8007066 <__kernel_rem_pio2+0x5c6>
 8007004:	9b02      	ldr	r3, [sp, #8]
 8007006:	b113      	cbz	r3, 800700e <__kernel_rem_pio2+0x56e>
 8007008:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800700c:	4619      	mov	r1, r3
 800700e:	9b01      	ldr	r3, [sp, #4]
 8007010:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007014:	e00f      	b.n	8007036 <__kernel_rem_pio2+0x596>
 8007016:	ab9a      	add	r3, sp, #616	; 0x268
 8007018:	441c      	add	r4, r3
 800701a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800701e:	2000      	movs	r0, #0
 8007020:	2100      	movs	r1, #0
 8007022:	2d00      	cmp	r5, #0
 8007024:	da10      	bge.n	8007048 <__kernel_rem_pio2+0x5a8>
 8007026:	9b02      	ldr	r3, [sp, #8]
 8007028:	b113      	cbz	r3, 8007030 <__kernel_rem_pio2+0x590>
 800702a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800702e:	4619      	mov	r1, r3
 8007030:	9b01      	ldr	r3, [sp, #4]
 8007032:	e9c3 0100 	strd	r0, r1, [r3]
 8007036:	9b06      	ldr	r3, [sp, #24]
 8007038:	f003 0007 	and.w	r0, r3, #7
 800703c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007040:	ecbd 8b02 	vpop	{d8}
 8007044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007048:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800704c:	f7f9 f8ea 	bl	8000224 <__adddf3>
 8007050:	3d01      	subs	r5, #1
 8007052:	e7e6      	b.n	8007022 <__kernel_rem_pio2+0x582>
 8007054:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007058:	f7f9 f8e4 	bl	8000224 <__adddf3>
 800705c:	3e01      	subs	r6, #1
 800705e:	e7bc      	b.n	8006fda <__kernel_rem_pio2+0x53a>
 8007060:	4602      	mov	r2, r0
 8007062:	460b      	mov	r3, r1
 8007064:	e7c1      	b.n	8006fea <__kernel_rem_pio2+0x54a>
 8007066:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800706a:	f7f9 f8db 	bl	8000224 <__adddf3>
 800706e:	3401      	adds	r4, #1
 8007070:	e7c6      	b.n	8007000 <__kernel_rem_pio2+0x560>
 8007072:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8007076:	ed3a 7b02 	vldmdb	sl!, {d7}
 800707a:	4640      	mov	r0, r8
 800707c:	ec53 2b17 	vmov	r2, r3, d7
 8007080:	4649      	mov	r1, r9
 8007082:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007086:	f7f9 f8cd 	bl	8000224 <__adddf3>
 800708a:	4602      	mov	r2, r0
 800708c:	460b      	mov	r3, r1
 800708e:	4606      	mov	r6, r0
 8007090:	460f      	mov	r7, r1
 8007092:	4640      	mov	r0, r8
 8007094:	4649      	mov	r1, r9
 8007096:	f7f9 f8c3 	bl	8000220 <__aeabi_dsub>
 800709a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800709e:	f7f9 f8c1 	bl	8000224 <__adddf3>
 80070a2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80070a6:	e9ca 0100 	strd	r0, r1, [sl]
 80070aa:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80070ae:	e770      	b.n	8006f92 <__kernel_rem_pio2+0x4f2>
 80070b0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80070b4:	ed3a 7b02 	vldmdb	sl!, {d7}
 80070b8:	4630      	mov	r0, r6
 80070ba:	ec53 2b17 	vmov	r2, r3, d7
 80070be:	4639      	mov	r1, r7
 80070c0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80070c4:	f7f9 f8ae 	bl	8000224 <__adddf3>
 80070c8:	4602      	mov	r2, r0
 80070ca:	460b      	mov	r3, r1
 80070cc:	4680      	mov	r8, r0
 80070ce:	4689      	mov	r9, r1
 80070d0:	4630      	mov	r0, r6
 80070d2:	4639      	mov	r1, r7
 80070d4:	f7f9 f8a4 	bl	8000220 <__aeabi_dsub>
 80070d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070dc:	f7f9 f8a2 	bl	8000224 <__adddf3>
 80070e0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80070e4:	e9ca 0100 	strd	r0, r1, [sl]
 80070e8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80070ec:	e756      	b.n	8006f9c <__kernel_rem_pio2+0x4fc>
 80070ee:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80070f2:	f7f9 f897 	bl	8000224 <__adddf3>
 80070f6:	3d01      	subs	r5, #1
 80070f8:	e756      	b.n	8006fa8 <__kernel_rem_pio2+0x508>
 80070fa:	9b01      	ldr	r3, [sp, #4]
 80070fc:	9a01      	ldr	r2, [sp, #4]
 80070fe:	601f      	str	r7, [r3, #0]
 8007100:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8007104:	605c      	str	r4, [r3, #4]
 8007106:	609d      	str	r5, [r3, #8]
 8007108:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800710c:	60d3      	str	r3, [r2, #12]
 800710e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007112:	6110      	str	r0, [r2, #16]
 8007114:	6153      	str	r3, [r2, #20]
 8007116:	e78e      	b.n	8007036 <__kernel_rem_pio2+0x596>
 8007118:	41700000 	.word	0x41700000
 800711c:	3e700000 	.word	0x3e700000

08007120 <__kernel_sin>:
 8007120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007124:	ec55 4b10 	vmov	r4, r5, d0
 8007128:	b085      	sub	sp, #20
 800712a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800712e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007132:	ed8d 1b00 	vstr	d1, [sp]
 8007136:	9002      	str	r0, [sp, #8]
 8007138:	da06      	bge.n	8007148 <__kernel_sin+0x28>
 800713a:	ee10 0a10 	vmov	r0, s0
 800713e:	4629      	mov	r1, r5
 8007140:	f7f9 fcd6 	bl	8000af0 <__aeabi_d2iz>
 8007144:	2800      	cmp	r0, #0
 8007146:	d051      	beq.n	80071ec <__kernel_sin+0xcc>
 8007148:	4622      	mov	r2, r4
 800714a:	462b      	mov	r3, r5
 800714c:	4620      	mov	r0, r4
 800714e:	4629      	mov	r1, r5
 8007150:	f7f9 fa1e 	bl	8000590 <__aeabi_dmul>
 8007154:	4682      	mov	sl, r0
 8007156:	468b      	mov	fp, r1
 8007158:	4602      	mov	r2, r0
 800715a:	460b      	mov	r3, r1
 800715c:	4620      	mov	r0, r4
 800715e:	4629      	mov	r1, r5
 8007160:	f7f9 fa16 	bl	8000590 <__aeabi_dmul>
 8007164:	a341      	add	r3, pc, #260	; (adr r3, 800726c <__kernel_sin+0x14c>)
 8007166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716a:	4680      	mov	r8, r0
 800716c:	4689      	mov	r9, r1
 800716e:	4650      	mov	r0, sl
 8007170:	4659      	mov	r1, fp
 8007172:	f7f9 fa0d 	bl	8000590 <__aeabi_dmul>
 8007176:	a33f      	add	r3, pc, #252	; (adr r3, 8007274 <__kernel_sin+0x154>)
 8007178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717c:	f7f9 f850 	bl	8000220 <__aeabi_dsub>
 8007180:	4652      	mov	r2, sl
 8007182:	465b      	mov	r3, fp
 8007184:	f7f9 fa04 	bl	8000590 <__aeabi_dmul>
 8007188:	a33c      	add	r3, pc, #240	; (adr r3, 800727c <__kernel_sin+0x15c>)
 800718a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718e:	f7f9 f849 	bl	8000224 <__adddf3>
 8007192:	4652      	mov	r2, sl
 8007194:	465b      	mov	r3, fp
 8007196:	f7f9 f9fb 	bl	8000590 <__aeabi_dmul>
 800719a:	a33a      	add	r3, pc, #232	; (adr r3, 8007284 <__kernel_sin+0x164>)
 800719c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a0:	f7f9 f83e 	bl	8000220 <__aeabi_dsub>
 80071a4:	4652      	mov	r2, sl
 80071a6:	465b      	mov	r3, fp
 80071a8:	f7f9 f9f2 	bl	8000590 <__aeabi_dmul>
 80071ac:	a337      	add	r3, pc, #220	; (adr r3, 800728c <__kernel_sin+0x16c>)
 80071ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b2:	f7f9 f837 	bl	8000224 <__adddf3>
 80071b6:	9b02      	ldr	r3, [sp, #8]
 80071b8:	4606      	mov	r6, r0
 80071ba:	460f      	mov	r7, r1
 80071bc:	b9db      	cbnz	r3, 80071f6 <__kernel_sin+0xd6>
 80071be:	4602      	mov	r2, r0
 80071c0:	460b      	mov	r3, r1
 80071c2:	4650      	mov	r0, sl
 80071c4:	4659      	mov	r1, fp
 80071c6:	f7f9 f9e3 	bl	8000590 <__aeabi_dmul>
 80071ca:	a325      	add	r3, pc, #148	; (adr r3, 8007260 <__kernel_sin+0x140>)
 80071cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d0:	f7f9 f826 	bl	8000220 <__aeabi_dsub>
 80071d4:	4642      	mov	r2, r8
 80071d6:	464b      	mov	r3, r9
 80071d8:	f7f9 f9da 	bl	8000590 <__aeabi_dmul>
 80071dc:	4602      	mov	r2, r0
 80071de:	460b      	mov	r3, r1
 80071e0:	4620      	mov	r0, r4
 80071e2:	4629      	mov	r1, r5
 80071e4:	f7f9 f81e 	bl	8000224 <__adddf3>
 80071e8:	4604      	mov	r4, r0
 80071ea:	460d      	mov	r5, r1
 80071ec:	ec45 4b10 	vmov	d0, r4, r5
 80071f0:	b005      	add	sp, #20
 80071f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f6:	2200      	movs	r2, #0
 80071f8:	4b1b      	ldr	r3, [pc, #108]	; (8007268 <__kernel_sin+0x148>)
 80071fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071fe:	f7f9 f9c7 	bl	8000590 <__aeabi_dmul>
 8007202:	4632      	mov	r2, r6
 8007204:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007208:	463b      	mov	r3, r7
 800720a:	4640      	mov	r0, r8
 800720c:	4649      	mov	r1, r9
 800720e:	f7f9 f9bf 	bl	8000590 <__aeabi_dmul>
 8007212:	4602      	mov	r2, r0
 8007214:	460b      	mov	r3, r1
 8007216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800721a:	f7f9 f801 	bl	8000220 <__aeabi_dsub>
 800721e:	4652      	mov	r2, sl
 8007220:	465b      	mov	r3, fp
 8007222:	f7f9 f9b5 	bl	8000590 <__aeabi_dmul>
 8007226:	e9dd 2300 	ldrd	r2, r3, [sp]
 800722a:	f7f8 fff9 	bl	8000220 <__aeabi_dsub>
 800722e:	a30c      	add	r3, pc, #48	; (adr r3, 8007260 <__kernel_sin+0x140>)
 8007230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007234:	4606      	mov	r6, r0
 8007236:	460f      	mov	r7, r1
 8007238:	4640      	mov	r0, r8
 800723a:	4649      	mov	r1, r9
 800723c:	f7f9 f9a8 	bl	8000590 <__aeabi_dmul>
 8007240:	4602      	mov	r2, r0
 8007242:	460b      	mov	r3, r1
 8007244:	4630      	mov	r0, r6
 8007246:	4639      	mov	r1, r7
 8007248:	f7f8 ffec 	bl	8000224 <__adddf3>
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	4620      	mov	r0, r4
 8007252:	4629      	mov	r1, r5
 8007254:	f7f8 ffe4 	bl	8000220 <__aeabi_dsub>
 8007258:	e7c6      	b.n	80071e8 <__kernel_sin+0xc8>
 800725a:	bf00      	nop
 800725c:	f3af 8000 	nop.w
 8007260:	55555549 	.word	0x55555549
 8007264:	3fc55555 	.word	0x3fc55555
 8007268:	3fe00000 	.word	0x3fe00000
 800726c:	5acfd57c 	.word	0x5acfd57c
 8007270:	3de5d93a 	.word	0x3de5d93a
 8007274:	8a2b9ceb 	.word	0x8a2b9ceb
 8007278:	3e5ae5e6 	.word	0x3e5ae5e6
 800727c:	57b1fe7d 	.word	0x57b1fe7d
 8007280:	3ec71de3 	.word	0x3ec71de3
 8007284:	19c161d5 	.word	0x19c161d5
 8007288:	3f2a01a0 	.word	0x3f2a01a0
 800728c:	1110f8a6 	.word	0x1110f8a6
 8007290:	3f811111 	.word	0x3f811111

08007294 <fabs>:
 8007294:	ec51 0b10 	vmov	r0, r1, d0
 8007298:	ee10 2a10 	vmov	r2, s0
 800729c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80072a0:	ec43 2b10 	vmov	d0, r2, r3
 80072a4:	4770      	bx	lr
	...

080072a8 <floor>:
 80072a8:	ec51 0b10 	vmov	r0, r1, d0
 80072ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072b0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80072b4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80072b8:	2e13      	cmp	r6, #19
 80072ba:	460c      	mov	r4, r1
 80072bc:	ee10 5a10 	vmov	r5, s0
 80072c0:	4680      	mov	r8, r0
 80072c2:	dc34      	bgt.n	800732e <floor+0x86>
 80072c4:	2e00      	cmp	r6, #0
 80072c6:	da16      	bge.n	80072f6 <floor+0x4e>
 80072c8:	a335      	add	r3, pc, #212	; (adr r3, 80073a0 <floor+0xf8>)
 80072ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ce:	f7f8 ffa9 	bl	8000224 <__adddf3>
 80072d2:	2200      	movs	r2, #0
 80072d4:	2300      	movs	r3, #0
 80072d6:	f7f9 fbeb 	bl	8000ab0 <__aeabi_dcmpgt>
 80072da:	b148      	cbz	r0, 80072f0 <floor+0x48>
 80072dc:	2c00      	cmp	r4, #0
 80072de:	da59      	bge.n	8007394 <floor+0xec>
 80072e0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80072e4:	4a30      	ldr	r2, [pc, #192]	; (80073a8 <floor+0x100>)
 80072e6:	432b      	orrs	r3, r5
 80072e8:	2500      	movs	r5, #0
 80072ea:	42ab      	cmp	r3, r5
 80072ec:	bf18      	it	ne
 80072ee:	4614      	movne	r4, r2
 80072f0:	4621      	mov	r1, r4
 80072f2:	4628      	mov	r0, r5
 80072f4:	e025      	b.n	8007342 <floor+0x9a>
 80072f6:	4f2d      	ldr	r7, [pc, #180]	; (80073ac <floor+0x104>)
 80072f8:	4137      	asrs	r7, r6
 80072fa:	ea01 0307 	and.w	r3, r1, r7
 80072fe:	4303      	orrs	r3, r0
 8007300:	d01f      	beq.n	8007342 <floor+0x9a>
 8007302:	a327      	add	r3, pc, #156	; (adr r3, 80073a0 <floor+0xf8>)
 8007304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007308:	f7f8 ff8c 	bl	8000224 <__adddf3>
 800730c:	2200      	movs	r2, #0
 800730e:	2300      	movs	r3, #0
 8007310:	f7f9 fbce 	bl	8000ab0 <__aeabi_dcmpgt>
 8007314:	2800      	cmp	r0, #0
 8007316:	d0eb      	beq.n	80072f0 <floor+0x48>
 8007318:	2c00      	cmp	r4, #0
 800731a:	bfbe      	ittt	lt
 800731c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007320:	fa43 f606 	asrlt.w	r6, r3, r6
 8007324:	19a4      	addlt	r4, r4, r6
 8007326:	ea24 0407 	bic.w	r4, r4, r7
 800732a:	2500      	movs	r5, #0
 800732c:	e7e0      	b.n	80072f0 <floor+0x48>
 800732e:	2e33      	cmp	r6, #51	; 0x33
 8007330:	dd0b      	ble.n	800734a <floor+0xa2>
 8007332:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007336:	d104      	bne.n	8007342 <floor+0x9a>
 8007338:	ee10 2a10 	vmov	r2, s0
 800733c:	460b      	mov	r3, r1
 800733e:	f7f8 ff71 	bl	8000224 <__adddf3>
 8007342:	ec41 0b10 	vmov	d0, r0, r1
 8007346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800734a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800734e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007352:	fa23 f707 	lsr.w	r7, r3, r7
 8007356:	4207      	tst	r7, r0
 8007358:	d0f3      	beq.n	8007342 <floor+0x9a>
 800735a:	a311      	add	r3, pc, #68	; (adr r3, 80073a0 <floor+0xf8>)
 800735c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007360:	f7f8 ff60 	bl	8000224 <__adddf3>
 8007364:	2200      	movs	r2, #0
 8007366:	2300      	movs	r3, #0
 8007368:	f7f9 fba2 	bl	8000ab0 <__aeabi_dcmpgt>
 800736c:	2800      	cmp	r0, #0
 800736e:	d0bf      	beq.n	80072f0 <floor+0x48>
 8007370:	2c00      	cmp	r4, #0
 8007372:	da02      	bge.n	800737a <floor+0xd2>
 8007374:	2e14      	cmp	r6, #20
 8007376:	d103      	bne.n	8007380 <floor+0xd8>
 8007378:	3401      	adds	r4, #1
 800737a:	ea25 0507 	bic.w	r5, r5, r7
 800737e:	e7b7      	b.n	80072f0 <floor+0x48>
 8007380:	2301      	movs	r3, #1
 8007382:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007386:	fa03 f606 	lsl.w	r6, r3, r6
 800738a:	4435      	add	r5, r6
 800738c:	4545      	cmp	r5, r8
 800738e:	bf38      	it	cc
 8007390:	18e4      	addcc	r4, r4, r3
 8007392:	e7f2      	b.n	800737a <floor+0xd2>
 8007394:	2500      	movs	r5, #0
 8007396:	462c      	mov	r4, r5
 8007398:	e7aa      	b.n	80072f0 <floor+0x48>
 800739a:	bf00      	nop
 800739c:	f3af 8000 	nop.w
 80073a0:	8800759c 	.word	0x8800759c
 80073a4:	7e37e43c 	.word	0x7e37e43c
 80073a8:	bff00000 	.word	0xbff00000
 80073ac:	000fffff 	.word	0x000fffff

080073b0 <scalbn>:
 80073b0:	b570      	push	{r4, r5, r6, lr}
 80073b2:	ec55 4b10 	vmov	r4, r5, d0
 80073b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80073ba:	4606      	mov	r6, r0
 80073bc:	462b      	mov	r3, r5
 80073be:	b9aa      	cbnz	r2, 80073ec <scalbn+0x3c>
 80073c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80073c4:	4323      	orrs	r3, r4
 80073c6:	d03b      	beq.n	8007440 <scalbn+0x90>
 80073c8:	4b31      	ldr	r3, [pc, #196]	; (8007490 <scalbn+0xe0>)
 80073ca:	4629      	mov	r1, r5
 80073cc:	2200      	movs	r2, #0
 80073ce:	ee10 0a10 	vmov	r0, s0
 80073d2:	f7f9 f8dd 	bl	8000590 <__aeabi_dmul>
 80073d6:	4b2f      	ldr	r3, [pc, #188]	; (8007494 <scalbn+0xe4>)
 80073d8:	429e      	cmp	r6, r3
 80073da:	4604      	mov	r4, r0
 80073dc:	460d      	mov	r5, r1
 80073de:	da12      	bge.n	8007406 <scalbn+0x56>
 80073e0:	a327      	add	r3, pc, #156	; (adr r3, 8007480 <scalbn+0xd0>)
 80073e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e6:	f7f9 f8d3 	bl	8000590 <__aeabi_dmul>
 80073ea:	e009      	b.n	8007400 <scalbn+0x50>
 80073ec:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80073f0:	428a      	cmp	r2, r1
 80073f2:	d10c      	bne.n	800740e <scalbn+0x5e>
 80073f4:	ee10 2a10 	vmov	r2, s0
 80073f8:	4620      	mov	r0, r4
 80073fa:	4629      	mov	r1, r5
 80073fc:	f7f8 ff12 	bl	8000224 <__adddf3>
 8007400:	4604      	mov	r4, r0
 8007402:	460d      	mov	r5, r1
 8007404:	e01c      	b.n	8007440 <scalbn+0x90>
 8007406:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800740a:	460b      	mov	r3, r1
 800740c:	3a36      	subs	r2, #54	; 0x36
 800740e:	4432      	add	r2, r6
 8007410:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007414:	428a      	cmp	r2, r1
 8007416:	dd0b      	ble.n	8007430 <scalbn+0x80>
 8007418:	ec45 4b11 	vmov	d1, r4, r5
 800741c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007488 <scalbn+0xd8>
 8007420:	f000 f83c 	bl	800749c <copysign>
 8007424:	a318      	add	r3, pc, #96	; (adr r3, 8007488 <scalbn+0xd8>)
 8007426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742a:	ec51 0b10 	vmov	r0, r1, d0
 800742e:	e7da      	b.n	80073e6 <scalbn+0x36>
 8007430:	2a00      	cmp	r2, #0
 8007432:	dd08      	ble.n	8007446 <scalbn+0x96>
 8007434:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007438:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800743c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007440:	ec45 4b10 	vmov	d0, r4, r5
 8007444:	bd70      	pop	{r4, r5, r6, pc}
 8007446:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800744a:	da0d      	bge.n	8007468 <scalbn+0xb8>
 800744c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007450:	429e      	cmp	r6, r3
 8007452:	ec45 4b11 	vmov	d1, r4, r5
 8007456:	dce1      	bgt.n	800741c <scalbn+0x6c>
 8007458:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007480 <scalbn+0xd0>
 800745c:	f000 f81e 	bl	800749c <copysign>
 8007460:	a307      	add	r3, pc, #28	; (adr r3, 8007480 <scalbn+0xd0>)
 8007462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007466:	e7e0      	b.n	800742a <scalbn+0x7a>
 8007468:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800746c:	3236      	adds	r2, #54	; 0x36
 800746e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007472:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007476:	4620      	mov	r0, r4
 8007478:	4629      	mov	r1, r5
 800747a:	2200      	movs	r2, #0
 800747c:	4b06      	ldr	r3, [pc, #24]	; (8007498 <scalbn+0xe8>)
 800747e:	e7b2      	b.n	80073e6 <scalbn+0x36>
 8007480:	c2f8f359 	.word	0xc2f8f359
 8007484:	01a56e1f 	.word	0x01a56e1f
 8007488:	8800759c 	.word	0x8800759c
 800748c:	7e37e43c 	.word	0x7e37e43c
 8007490:	43500000 	.word	0x43500000
 8007494:	ffff3cb0 	.word	0xffff3cb0
 8007498:	3c900000 	.word	0x3c900000

0800749c <copysign>:
 800749c:	ec51 0b10 	vmov	r0, r1, d0
 80074a0:	ee11 0a90 	vmov	r0, s3
 80074a4:	ee10 2a10 	vmov	r2, s0
 80074a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80074ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80074b0:	ea41 0300 	orr.w	r3, r1, r0
 80074b4:	ec43 2b10 	vmov	d0, r2, r3
 80074b8:	4770      	bx	lr

080074ba <abort>:
 80074ba:	b508      	push	{r3, lr}
 80074bc:	2006      	movs	r0, #6
 80074be:	f000 fc93 	bl	8007de8 <raise>
 80074c2:	2001      	movs	r0, #1
 80074c4:	f7fe f912 	bl	80056ec <_exit>

080074c8 <__errno>:
 80074c8:	4b01      	ldr	r3, [pc, #4]	; (80074d0 <__errno+0x8>)
 80074ca:	6818      	ldr	r0, [r3, #0]
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	2000000c 	.word	0x2000000c

080074d4 <__libc_init_array>:
 80074d4:	b570      	push	{r4, r5, r6, lr}
 80074d6:	4e0d      	ldr	r6, [pc, #52]	; (800750c <__libc_init_array+0x38>)
 80074d8:	4c0d      	ldr	r4, [pc, #52]	; (8007510 <__libc_init_array+0x3c>)
 80074da:	1ba4      	subs	r4, r4, r6
 80074dc:	10a4      	asrs	r4, r4, #2
 80074de:	2500      	movs	r5, #0
 80074e0:	42a5      	cmp	r5, r4
 80074e2:	d109      	bne.n	80074f8 <__libc_init_array+0x24>
 80074e4:	4e0b      	ldr	r6, [pc, #44]	; (8007514 <__libc_init_array+0x40>)
 80074e6:	4c0c      	ldr	r4, [pc, #48]	; (8007518 <__libc_init_array+0x44>)
 80074e8:	f001 fdf8 	bl	80090dc <_init>
 80074ec:	1ba4      	subs	r4, r4, r6
 80074ee:	10a4      	asrs	r4, r4, #2
 80074f0:	2500      	movs	r5, #0
 80074f2:	42a5      	cmp	r5, r4
 80074f4:	d105      	bne.n	8007502 <__libc_init_array+0x2e>
 80074f6:	bd70      	pop	{r4, r5, r6, pc}
 80074f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074fc:	4798      	blx	r3
 80074fe:	3501      	adds	r5, #1
 8007500:	e7ee      	b.n	80074e0 <__libc_init_array+0xc>
 8007502:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007506:	4798      	blx	r3
 8007508:	3501      	adds	r5, #1
 800750a:	e7f2      	b.n	80074f2 <__libc_init_array+0x1e>
 800750c:	08009628 	.word	0x08009628
 8007510:	08009628 	.word	0x08009628
 8007514:	08009628 	.word	0x08009628
 8007518:	0800962c 	.word	0x0800962c

0800751c <malloc>:
 800751c:	4b02      	ldr	r3, [pc, #8]	; (8007528 <malloc+0xc>)
 800751e:	4601      	mov	r1, r0
 8007520:	6818      	ldr	r0, [r3, #0]
 8007522:	f000 b885 	b.w	8007630 <_malloc_r>
 8007526:	bf00      	nop
 8007528:	2000000c 	.word	0x2000000c

0800752c <free>:
 800752c:	4b02      	ldr	r3, [pc, #8]	; (8007538 <free+0xc>)
 800752e:	4601      	mov	r1, r0
 8007530:	6818      	ldr	r0, [r3, #0]
 8007532:	f000 b82f 	b.w	8007594 <_free_r>
 8007536:	bf00      	nop
 8007538:	2000000c 	.word	0x2000000c

0800753c <memcpy>:
 800753c:	b510      	push	{r4, lr}
 800753e:	1e43      	subs	r3, r0, #1
 8007540:	440a      	add	r2, r1
 8007542:	4291      	cmp	r1, r2
 8007544:	d100      	bne.n	8007548 <memcpy+0xc>
 8007546:	bd10      	pop	{r4, pc}
 8007548:	f811 4b01 	ldrb.w	r4, [r1], #1
 800754c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007550:	e7f7      	b.n	8007542 <memcpy+0x6>

08007552 <memmove>:
 8007552:	4288      	cmp	r0, r1
 8007554:	b510      	push	{r4, lr}
 8007556:	eb01 0302 	add.w	r3, r1, r2
 800755a:	d807      	bhi.n	800756c <memmove+0x1a>
 800755c:	1e42      	subs	r2, r0, #1
 800755e:	4299      	cmp	r1, r3
 8007560:	d00a      	beq.n	8007578 <memmove+0x26>
 8007562:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007566:	f802 4f01 	strb.w	r4, [r2, #1]!
 800756a:	e7f8      	b.n	800755e <memmove+0xc>
 800756c:	4283      	cmp	r3, r0
 800756e:	d9f5      	bls.n	800755c <memmove+0xa>
 8007570:	1881      	adds	r1, r0, r2
 8007572:	1ad2      	subs	r2, r2, r3
 8007574:	42d3      	cmn	r3, r2
 8007576:	d100      	bne.n	800757a <memmove+0x28>
 8007578:	bd10      	pop	{r4, pc}
 800757a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800757e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007582:	e7f7      	b.n	8007574 <memmove+0x22>

08007584 <memset>:
 8007584:	4402      	add	r2, r0
 8007586:	4603      	mov	r3, r0
 8007588:	4293      	cmp	r3, r2
 800758a:	d100      	bne.n	800758e <memset+0xa>
 800758c:	4770      	bx	lr
 800758e:	f803 1b01 	strb.w	r1, [r3], #1
 8007592:	e7f9      	b.n	8007588 <memset+0x4>

08007594 <_free_r>:
 8007594:	b538      	push	{r3, r4, r5, lr}
 8007596:	4605      	mov	r5, r0
 8007598:	2900      	cmp	r1, #0
 800759a:	d045      	beq.n	8007628 <_free_r+0x94>
 800759c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075a0:	1f0c      	subs	r4, r1, #4
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	bfb8      	it	lt
 80075a6:	18e4      	addlt	r4, r4, r3
 80075a8:	f001 fa8c 	bl	8008ac4 <__malloc_lock>
 80075ac:	4a1f      	ldr	r2, [pc, #124]	; (800762c <_free_r+0x98>)
 80075ae:	6813      	ldr	r3, [r2, #0]
 80075b0:	4610      	mov	r0, r2
 80075b2:	b933      	cbnz	r3, 80075c2 <_free_r+0x2e>
 80075b4:	6063      	str	r3, [r4, #4]
 80075b6:	6014      	str	r4, [r2, #0]
 80075b8:	4628      	mov	r0, r5
 80075ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075be:	f001 ba82 	b.w	8008ac6 <__malloc_unlock>
 80075c2:	42a3      	cmp	r3, r4
 80075c4:	d90c      	bls.n	80075e0 <_free_r+0x4c>
 80075c6:	6821      	ldr	r1, [r4, #0]
 80075c8:	1862      	adds	r2, r4, r1
 80075ca:	4293      	cmp	r3, r2
 80075cc:	bf04      	itt	eq
 80075ce:	681a      	ldreq	r2, [r3, #0]
 80075d0:	685b      	ldreq	r3, [r3, #4]
 80075d2:	6063      	str	r3, [r4, #4]
 80075d4:	bf04      	itt	eq
 80075d6:	1852      	addeq	r2, r2, r1
 80075d8:	6022      	streq	r2, [r4, #0]
 80075da:	6004      	str	r4, [r0, #0]
 80075dc:	e7ec      	b.n	80075b8 <_free_r+0x24>
 80075de:	4613      	mov	r3, r2
 80075e0:	685a      	ldr	r2, [r3, #4]
 80075e2:	b10a      	cbz	r2, 80075e8 <_free_r+0x54>
 80075e4:	42a2      	cmp	r2, r4
 80075e6:	d9fa      	bls.n	80075de <_free_r+0x4a>
 80075e8:	6819      	ldr	r1, [r3, #0]
 80075ea:	1858      	adds	r0, r3, r1
 80075ec:	42a0      	cmp	r0, r4
 80075ee:	d10b      	bne.n	8007608 <_free_r+0x74>
 80075f0:	6820      	ldr	r0, [r4, #0]
 80075f2:	4401      	add	r1, r0
 80075f4:	1858      	adds	r0, r3, r1
 80075f6:	4282      	cmp	r2, r0
 80075f8:	6019      	str	r1, [r3, #0]
 80075fa:	d1dd      	bne.n	80075b8 <_free_r+0x24>
 80075fc:	6810      	ldr	r0, [r2, #0]
 80075fe:	6852      	ldr	r2, [r2, #4]
 8007600:	605a      	str	r2, [r3, #4]
 8007602:	4401      	add	r1, r0
 8007604:	6019      	str	r1, [r3, #0]
 8007606:	e7d7      	b.n	80075b8 <_free_r+0x24>
 8007608:	d902      	bls.n	8007610 <_free_r+0x7c>
 800760a:	230c      	movs	r3, #12
 800760c:	602b      	str	r3, [r5, #0]
 800760e:	e7d3      	b.n	80075b8 <_free_r+0x24>
 8007610:	6820      	ldr	r0, [r4, #0]
 8007612:	1821      	adds	r1, r4, r0
 8007614:	428a      	cmp	r2, r1
 8007616:	bf04      	itt	eq
 8007618:	6811      	ldreq	r1, [r2, #0]
 800761a:	6852      	ldreq	r2, [r2, #4]
 800761c:	6062      	str	r2, [r4, #4]
 800761e:	bf04      	itt	eq
 8007620:	1809      	addeq	r1, r1, r0
 8007622:	6021      	streq	r1, [r4, #0]
 8007624:	605c      	str	r4, [r3, #4]
 8007626:	e7c7      	b.n	80075b8 <_free_r+0x24>
 8007628:	bd38      	pop	{r3, r4, r5, pc}
 800762a:	bf00      	nop
 800762c:	20000208 	.word	0x20000208

08007630 <_malloc_r>:
 8007630:	b570      	push	{r4, r5, r6, lr}
 8007632:	1ccd      	adds	r5, r1, #3
 8007634:	f025 0503 	bic.w	r5, r5, #3
 8007638:	3508      	adds	r5, #8
 800763a:	2d0c      	cmp	r5, #12
 800763c:	bf38      	it	cc
 800763e:	250c      	movcc	r5, #12
 8007640:	2d00      	cmp	r5, #0
 8007642:	4606      	mov	r6, r0
 8007644:	db01      	blt.n	800764a <_malloc_r+0x1a>
 8007646:	42a9      	cmp	r1, r5
 8007648:	d903      	bls.n	8007652 <_malloc_r+0x22>
 800764a:	230c      	movs	r3, #12
 800764c:	6033      	str	r3, [r6, #0]
 800764e:	2000      	movs	r0, #0
 8007650:	bd70      	pop	{r4, r5, r6, pc}
 8007652:	f001 fa37 	bl	8008ac4 <__malloc_lock>
 8007656:	4a21      	ldr	r2, [pc, #132]	; (80076dc <_malloc_r+0xac>)
 8007658:	6814      	ldr	r4, [r2, #0]
 800765a:	4621      	mov	r1, r4
 800765c:	b991      	cbnz	r1, 8007684 <_malloc_r+0x54>
 800765e:	4c20      	ldr	r4, [pc, #128]	; (80076e0 <_malloc_r+0xb0>)
 8007660:	6823      	ldr	r3, [r4, #0]
 8007662:	b91b      	cbnz	r3, 800766c <_malloc_r+0x3c>
 8007664:	4630      	mov	r0, r6
 8007666:	f000 fb87 	bl	8007d78 <_sbrk_r>
 800766a:	6020      	str	r0, [r4, #0]
 800766c:	4629      	mov	r1, r5
 800766e:	4630      	mov	r0, r6
 8007670:	f000 fb82 	bl	8007d78 <_sbrk_r>
 8007674:	1c43      	adds	r3, r0, #1
 8007676:	d124      	bne.n	80076c2 <_malloc_r+0x92>
 8007678:	230c      	movs	r3, #12
 800767a:	6033      	str	r3, [r6, #0]
 800767c:	4630      	mov	r0, r6
 800767e:	f001 fa22 	bl	8008ac6 <__malloc_unlock>
 8007682:	e7e4      	b.n	800764e <_malloc_r+0x1e>
 8007684:	680b      	ldr	r3, [r1, #0]
 8007686:	1b5b      	subs	r3, r3, r5
 8007688:	d418      	bmi.n	80076bc <_malloc_r+0x8c>
 800768a:	2b0b      	cmp	r3, #11
 800768c:	d90f      	bls.n	80076ae <_malloc_r+0x7e>
 800768e:	600b      	str	r3, [r1, #0]
 8007690:	50cd      	str	r5, [r1, r3]
 8007692:	18cc      	adds	r4, r1, r3
 8007694:	4630      	mov	r0, r6
 8007696:	f001 fa16 	bl	8008ac6 <__malloc_unlock>
 800769a:	f104 000b 	add.w	r0, r4, #11
 800769e:	1d23      	adds	r3, r4, #4
 80076a0:	f020 0007 	bic.w	r0, r0, #7
 80076a4:	1ac3      	subs	r3, r0, r3
 80076a6:	d0d3      	beq.n	8007650 <_malloc_r+0x20>
 80076a8:	425a      	negs	r2, r3
 80076aa:	50e2      	str	r2, [r4, r3]
 80076ac:	e7d0      	b.n	8007650 <_malloc_r+0x20>
 80076ae:	428c      	cmp	r4, r1
 80076b0:	684b      	ldr	r3, [r1, #4]
 80076b2:	bf16      	itet	ne
 80076b4:	6063      	strne	r3, [r4, #4]
 80076b6:	6013      	streq	r3, [r2, #0]
 80076b8:	460c      	movne	r4, r1
 80076ba:	e7eb      	b.n	8007694 <_malloc_r+0x64>
 80076bc:	460c      	mov	r4, r1
 80076be:	6849      	ldr	r1, [r1, #4]
 80076c0:	e7cc      	b.n	800765c <_malloc_r+0x2c>
 80076c2:	1cc4      	adds	r4, r0, #3
 80076c4:	f024 0403 	bic.w	r4, r4, #3
 80076c8:	42a0      	cmp	r0, r4
 80076ca:	d005      	beq.n	80076d8 <_malloc_r+0xa8>
 80076cc:	1a21      	subs	r1, r4, r0
 80076ce:	4630      	mov	r0, r6
 80076d0:	f000 fb52 	bl	8007d78 <_sbrk_r>
 80076d4:	3001      	adds	r0, #1
 80076d6:	d0cf      	beq.n	8007678 <_malloc_r+0x48>
 80076d8:	6025      	str	r5, [r4, #0]
 80076da:	e7db      	b.n	8007694 <_malloc_r+0x64>
 80076dc:	20000208 	.word	0x20000208
 80076e0:	2000020c 	.word	0x2000020c

080076e4 <__cvt>:
 80076e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076e8:	ec55 4b10 	vmov	r4, r5, d0
 80076ec:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80076ee:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80076f2:	2d00      	cmp	r5, #0
 80076f4:	460e      	mov	r6, r1
 80076f6:	4691      	mov	r9, r2
 80076f8:	4619      	mov	r1, r3
 80076fa:	bfb8      	it	lt
 80076fc:	4622      	movlt	r2, r4
 80076fe:	462b      	mov	r3, r5
 8007700:	f027 0720 	bic.w	r7, r7, #32
 8007704:	bfbb      	ittet	lt
 8007706:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800770a:	461d      	movlt	r5, r3
 800770c:	2300      	movge	r3, #0
 800770e:	232d      	movlt	r3, #45	; 0x2d
 8007710:	bfb8      	it	lt
 8007712:	4614      	movlt	r4, r2
 8007714:	2f46      	cmp	r7, #70	; 0x46
 8007716:	700b      	strb	r3, [r1, #0]
 8007718:	d004      	beq.n	8007724 <__cvt+0x40>
 800771a:	2f45      	cmp	r7, #69	; 0x45
 800771c:	d100      	bne.n	8007720 <__cvt+0x3c>
 800771e:	3601      	adds	r6, #1
 8007720:	2102      	movs	r1, #2
 8007722:	e000      	b.n	8007726 <__cvt+0x42>
 8007724:	2103      	movs	r1, #3
 8007726:	ab03      	add	r3, sp, #12
 8007728:	9301      	str	r3, [sp, #4]
 800772a:	ab02      	add	r3, sp, #8
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	4632      	mov	r2, r6
 8007730:	4653      	mov	r3, sl
 8007732:	ec45 4b10 	vmov	d0, r4, r5
 8007736:	f000 fbff 	bl	8007f38 <_dtoa_r>
 800773a:	2f47      	cmp	r7, #71	; 0x47
 800773c:	4680      	mov	r8, r0
 800773e:	d102      	bne.n	8007746 <__cvt+0x62>
 8007740:	f019 0f01 	tst.w	r9, #1
 8007744:	d026      	beq.n	8007794 <__cvt+0xb0>
 8007746:	2f46      	cmp	r7, #70	; 0x46
 8007748:	eb08 0906 	add.w	r9, r8, r6
 800774c:	d111      	bne.n	8007772 <__cvt+0x8e>
 800774e:	f898 3000 	ldrb.w	r3, [r8]
 8007752:	2b30      	cmp	r3, #48	; 0x30
 8007754:	d10a      	bne.n	800776c <__cvt+0x88>
 8007756:	2200      	movs	r2, #0
 8007758:	2300      	movs	r3, #0
 800775a:	4620      	mov	r0, r4
 800775c:	4629      	mov	r1, r5
 800775e:	f7f9 f97f 	bl	8000a60 <__aeabi_dcmpeq>
 8007762:	b918      	cbnz	r0, 800776c <__cvt+0x88>
 8007764:	f1c6 0601 	rsb	r6, r6, #1
 8007768:	f8ca 6000 	str.w	r6, [sl]
 800776c:	f8da 3000 	ldr.w	r3, [sl]
 8007770:	4499      	add	r9, r3
 8007772:	2200      	movs	r2, #0
 8007774:	2300      	movs	r3, #0
 8007776:	4620      	mov	r0, r4
 8007778:	4629      	mov	r1, r5
 800777a:	f7f9 f971 	bl	8000a60 <__aeabi_dcmpeq>
 800777e:	b938      	cbnz	r0, 8007790 <__cvt+0xac>
 8007780:	2230      	movs	r2, #48	; 0x30
 8007782:	9b03      	ldr	r3, [sp, #12]
 8007784:	454b      	cmp	r3, r9
 8007786:	d205      	bcs.n	8007794 <__cvt+0xb0>
 8007788:	1c59      	adds	r1, r3, #1
 800778a:	9103      	str	r1, [sp, #12]
 800778c:	701a      	strb	r2, [r3, #0]
 800778e:	e7f8      	b.n	8007782 <__cvt+0x9e>
 8007790:	f8cd 900c 	str.w	r9, [sp, #12]
 8007794:	9b03      	ldr	r3, [sp, #12]
 8007796:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007798:	eba3 0308 	sub.w	r3, r3, r8
 800779c:	4640      	mov	r0, r8
 800779e:	6013      	str	r3, [r2, #0]
 80077a0:	b004      	add	sp, #16
 80077a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080077a6 <__exponent>:
 80077a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077a8:	2900      	cmp	r1, #0
 80077aa:	4604      	mov	r4, r0
 80077ac:	bfba      	itte	lt
 80077ae:	4249      	neglt	r1, r1
 80077b0:	232d      	movlt	r3, #45	; 0x2d
 80077b2:	232b      	movge	r3, #43	; 0x2b
 80077b4:	2909      	cmp	r1, #9
 80077b6:	f804 2b02 	strb.w	r2, [r4], #2
 80077ba:	7043      	strb	r3, [r0, #1]
 80077bc:	dd20      	ble.n	8007800 <__exponent+0x5a>
 80077be:	f10d 0307 	add.w	r3, sp, #7
 80077c2:	461f      	mov	r7, r3
 80077c4:	260a      	movs	r6, #10
 80077c6:	fb91 f5f6 	sdiv	r5, r1, r6
 80077ca:	fb06 1115 	mls	r1, r6, r5, r1
 80077ce:	3130      	adds	r1, #48	; 0x30
 80077d0:	2d09      	cmp	r5, #9
 80077d2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80077d6:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80077da:	4629      	mov	r1, r5
 80077dc:	dc09      	bgt.n	80077f2 <__exponent+0x4c>
 80077de:	3130      	adds	r1, #48	; 0x30
 80077e0:	3b02      	subs	r3, #2
 80077e2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80077e6:	42bb      	cmp	r3, r7
 80077e8:	4622      	mov	r2, r4
 80077ea:	d304      	bcc.n	80077f6 <__exponent+0x50>
 80077ec:	1a10      	subs	r0, r2, r0
 80077ee:	b003      	add	sp, #12
 80077f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077f2:	4613      	mov	r3, r2
 80077f4:	e7e7      	b.n	80077c6 <__exponent+0x20>
 80077f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077fa:	f804 2b01 	strb.w	r2, [r4], #1
 80077fe:	e7f2      	b.n	80077e6 <__exponent+0x40>
 8007800:	2330      	movs	r3, #48	; 0x30
 8007802:	4419      	add	r1, r3
 8007804:	7083      	strb	r3, [r0, #2]
 8007806:	1d02      	adds	r2, r0, #4
 8007808:	70c1      	strb	r1, [r0, #3]
 800780a:	e7ef      	b.n	80077ec <__exponent+0x46>

0800780c <_printf_float>:
 800780c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007810:	b08d      	sub	sp, #52	; 0x34
 8007812:	460c      	mov	r4, r1
 8007814:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007818:	4616      	mov	r6, r2
 800781a:	461f      	mov	r7, r3
 800781c:	4605      	mov	r5, r0
 800781e:	f001 f943 	bl	8008aa8 <_localeconv_r>
 8007822:	6803      	ldr	r3, [r0, #0]
 8007824:	9304      	str	r3, [sp, #16]
 8007826:	4618      	mov	r0, r3
 8007828:	f7f8 fcee 	bl	8000208 <strlen>
 800782c:	2300      	movs	r3, #0
 800782e:	930a      	str	r3, [sp, #40]	; 0x28
 8007830:	f8d8 3000 	ldr.w	r3, [r8]
 8007834:	9005      	str	r0, [sp, #20]
 8007836:	3307      	adds	r3, #7
 8007838:	f023 0307 	bic.w	r3, r3, #7
 800783c:	f103 0208 	add.w	r2, r3, #8
 8007840:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007844:	f8d4 b000 	ldr.w	fp, [r4]
 8007848:	f8c8 2000 	str.w	r2, [r8]
 800784c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007850:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007854:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007858:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800785c:	9307      	str	r3, [sp, #28]
 800785e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007862:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007866:	4ba7      	ldr	r3, [pc, #668]	; (8007b04 <_printf_float+0x2f8>)
 8007868:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800786c:	f7f9 f92a 	bl	8000ac4 <__aeabi_dcmpun>
 8007870:	bb70      	cbnz	r0, 80078d0 <_printf_float+0xc4>
 8007872:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007876:	4ba3      	ldr	r3, [pc, #652]	; (8007b04 <_printf_float+0x2f8>)
 8007878:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800787c:	f7f9 f904 	bl	8000a88 <__aeabi_dcmple>
 8007880:	bb30      	cbnz	r0, 80078d0 <_printf_float+0xc4>
 8007882:	2200      	movs	r2, #0
 8007884:	2300      	movs	r3, #0
 8007886:	4640      	mov	r0, r8
 8007888:	4649      	mov	r1, r9
 800788a:	f7f9 f8f3 	bl	8000a74 <__aeabi_dcmplt>
 800788e:	b110      	cbz	r0, 8007896 <_printf_float+0x8a>
 8007890:	232d      	movs	r3, #45	; 0x2d
 8007892:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007896:	4a9c      	ldr	r2, [pc, #624]	; (8007b08 <_printf_float+0x2fc>)
 8007898:	4b9c      	ldr	r3, [pc, #624]	; (8007b0c <_printf_float+0x300>)
 800789a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800789e:	bf8c      	ite	hi
 80078a0:	4690      	movhi	r8, r2
 80078a2:	4698      	movls	r8, r3
 80078a4:	2303      	movs	r3, #3
 80078a6:	f02b 0204 	bic.w	r2, fp, #4
 80078aa:	6123      	str	r3, [r4, #16]
 80078ac:	6022      	str	r2, [r4, #0]
 80078ae:	f04f 0900 	mov.w	r9, #0
 80078b2:	9700      	str	r7, [sp, #0]
 80078b4:	4633      	mov	r3, r6
 80078b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80078b8:	4621      	mov	r1, r4
 80078ba:	4628      	mov	r0, r5
 80078bc:	f000 f9e6 	bl	8007c8c <_printf_common>
 80078c0:	3001      	adds	r0, #1
 80078c2:	f040 808d 	bne.w	80079e0 <_printf_float+0x1d4>
 80078c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078ca:	b00d      	add	sp, #52	; 0x34
 80078cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d0:	4642      	mov	r2, r8
 80078d2:	464b      	mov	r3, r9
 80078d4:	4640      	mov	r0, r8
 80078d6:	4649      	mov	r1, r9
 80078d8:	f7f9 f8f4 	bl	8000ac4 <__aeabi_dcmpun>
 80078dc:	b110      	cbz	r0, 80078e4 <_printf_float+0xd8>
 80078de:	4a8c      	ldr	r2, [pc, #560]	; (8007b10 <_printf_float+0x304>)
 80078e0:	4b8c      	ldr	r3, [pc, #560]	; (8007b14 <_printf_float+0x308>)
 80078e2:	e7da      	b.n	800789a <_printf_float+0x8e>
 80078e4:	6861      	ldr	r1, [r4, #4]
 80078e6:	1c4b      	adds	r3, r1, #1
 80078e8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80078ec:	a80a      	add	r0, sp, #40	; 0x28
 80078ee:	d13e      	bne.n	800796e <_printf_float+0x162>
 80078f0:	2306      	movs	r3, #6
 80078f2:	6063      	str	r3, [r4, #4]
 80078f4:	2300      	movs	r3, #0
 80078f6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80078fa:	ab09      	add	r3, sp, #36	; 0x24
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	ec49 8b10 	vmov	d0, r8, r9
 8007902:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007906:	6022      	str	r2, [r4, #0]
 8007908:	f8cd a004 	str.w	sl, [sp, #4]
 800790c:	6861      	ldr	r1, [r4, #4]
 800790e:	4628      	mov	r0, r5
 8007910:	f7ff fee8 	bl	80076e4 <__cvt>
 8007914:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007918:	2b47      	cmp	r3, #71	; 0x47
 800791a:	4680      	mov	r8, r0
 800791c:	d109      	bne.n	8007932 <_printf_float+0x126>
 800791e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007920:	1cd8      	adds	r0, r3, #3
 8007922:	db02      	blt.n	800792a <_printf_float+0x11e>
 8007924:	6862      	ldr	r2, [r4, #4]
 8007926:	4293      	cmp	r3, r2
 8007928:	dd47      	ble.n	80079ba <_printf_float+0x1ae>
 800792a:	f1aa 0a02 	sub.w	sl, sl, #2
 800792e:	fa5f fa8a 	uxtb.w	sl, sl
 8007932:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007936:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007938:	d824      	bhi.n	8007984 <_printf_float+0x178>
 800793a:	3901      	subs	r1, #1
 800793c:	4652      	mov	r2, sl
 800793e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007942:	9109      	str	r1, [sp, #36]	; 0x24
 8007944:	f7ff ff2f 	bl	80077a6 <__exponent>
 8007948:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800794a:	1813      	adds	r3, r2, r0
 800794c:	2a01      	cmp	r2, #1
 800794e:	4681      	mov	r9, r0
 8007950:	6123      	str	r3, [r4, #16]
 8007952:	dc02      	bgt.n	800795a <_printf_float+0x14e>
 8007954:	6822      	ldr	r2, [r4, #0]
 8007956:	07d1      	lsls	r1, r2, #31
 8007958:	d501      	bpl.n	800795e <_printf_float+0x152>
 800795a:	3301      	adds	r3, #1
 800795c:	6123      	str	r3, [r4, #16]
 800795e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007962:	2b00      	cmp	r3, #0
 8007964:	d0a5      	beq.n	80078b2 <_printf_float+0xa6>
 8007966:	232d      	movs	r3, #45	; 0x2d
 8007968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800796c:	e7a1      	b.n	80078b2 <_printf_float+0xa6>
 800796e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007972:	f000 8177 	beq.w	8007c64 <_printf_float+0x458>
 8007976:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800797a:	d1bb      	bne.n	80078f4 <_printf_float+0xe8>
 800797c:	2900      	cmp	r1, #0
 800797e:	d1b9      	bne.n	80078f4 <_printf_float+0xe8>
 8007980:	2301      	movs	r3, #1
 8007982:	e7b6      	b.n	80078f2 <_printf_float+0xe6>
 8007984:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007988:	d119      	bne.n	80079be <_printf_float+0x1b2>
 800798a:	2900      	cmp	r1, #0
 800798c:	6863      	ldr	r3, [r4, #4]
 800798e:	dd0c      	ble.n	80079aa <_printf_float+0x19e>
 8007990:	6121      	str	r1, [r4, #16]
 8007992:	b913      	cbnz	r3, 800799a <_printf_float+0x18e>
 8007994:	6822      	ldr	r2, [r4, #0]
 8007996:	07d2      	lsls	r2, r2, #31
 8007998:	d502      	bpl.n	80079a0 <_printf_float+0x194>
 800799a:	3301      	adds	r3, #1
 800799c:	440b      	add	r3, r1
 800799e:	6123      	str	r3, [r4, #16]
 80079a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079a2:	65a3      	str	r3, [r4, #88]	; 0x58
 80079a4:	f04f 0900 	mov.w	r9, #0
 80079a8:	e7d9      	b.n	800795e <_printf_float+0x152>
 80079aa:	b913      	cbnz	r3, 80079b2 <_printf_float+0x1a6>
 80079ac:	6822      	ldr	r2, [r4, #0]
 80079ae:	07d0      	lsls	r0, r2, #31
 80079b0:	d501      	bpl.n	80079b6 <_printf_float+0x1aa>
 80079b2:	3302      	adds	r3, #2
 80079b4:	e7f3      	b.n	800799e <_printf_float+0x192>
 80079b6:	2301      	movs	r3, #1
 80079b8:	e7f1      	b.n	800799e <_printf_float+0x192>
 80079ba:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80079be:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80079c2:	4293      	cmp	r3, r2
 80079c4:	db05      	blt.n	80079d2 <_printf_float+0x1c6>
 80079c6:	6822      	ldr	r2, [r4, #0]
 80079c8:	6123      	str	r3, [r4, #16]
 80079ca:	07d1      	lsls	r1, r2, #31
 80079cc:	d5e8      	bpl.n	80079a0 <_printf_float+0x194>
 80079ce:	3301      	adds	r3, #1
 80079d0:	e7e5      	b.n	800799e <_printf_float+0x192>
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	bfd4      	ite	le
 80079d6:	f1c3 0302 	rsble	r3, r3, #2
 80079da:	2301      	movgt	r3, #1
 80079dc:	4413      	add	r3, r2
 80079de:	e7de      	b.n	800799e <_printf_float+0x192>
 80079e0:	6823      	ldr	r3, [r4, #0]
 80079e2:	055a      	lsls	r2, r3, #21
 80079e4:	d407      	bmi.n	80079f6 <_printf_float+0x1ea>
 80079e6:	6923      	ldr	r3, [r4, #16]
 80079e8:	4642      	mov	r2, r8
 80079ea:	4631      	mov	r1, r6
 80079ec:	4628      	mov	r0, r5
 80079ee:	47b8      	blx	r7
 80079f0:	3001      	adds	r0, #1
 80079f2:	d12b      	bne.n	8007a4c <_printf_float+0x240>
 80079f4:	e767      	b.n	80078c6 <_printf_float+0xba>
 80079f6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80079fa:	f240 80dc 	bls.w	8007bb6 <_printf_float+0x3aa>
 80079fe:	2200      	movs	r2, #0
 8007a00:	2300      	movs	r3, #0
 8007a02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a06:	f7f9 f82b 	bl	8000a60 <__aeabi_dcmpeq>
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	d033      	beq.n	8007a76 <_printf_float+0x26a>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	4a41      	ldr	r2, [pc, #260]	; (8007b18 <_printf_float+0x30c>)
 8007a12:	4631      	mov	r1, r6
 8007a14:	4628      	mov	r0, r5
 8007a16:	47b8      	blx	r7
 8007a18:	3001      	adds	r0, #1
 8007a1a:	f43f af54 	beq.w	80078c6 <_printf_float+0xba>
 8007a1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a22:	429a      	cmp	r2, r3
 8007a24:	db02      	blt.n	8007a2c <_printf_float+0x220>
 8007a26:	6823      	ldr	r3, [r4, #0]
 8007a28:	07d8      	lsls	r0, r3, #31
 8007a2a:	d50f      	bpl.n	8007a4c <_printf_float+0x240>
 8007a2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a30:	4631      	mov	r1, r6
 8007a32:	4628      	mov	r0, r5
 8007a34:	47b8      	blx	r7
 8007a36:	3001      	adds	r0, #1
 8007a38:	f43f af45 	beq.w	80078c6 <_printf_float+0xba>
 8007a3c:	f04f 0800 	mov.w	r8, #0
 8007a40:	f104 091a 	add.w	r9, r4, #26
 8007a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a46:	3b01      	subs	r3, #1
 8007a48:	4543      	cmp	r3, r8
 8007a4a:	dc09      	bgt.n	8007a60 <_printf_float+0x254>
 8007a4c:	6823      	ldr	r3, [r4, #0]
 8007a4e:	079b      	lsls	r3, r3, #30
 8007a50:	f100 8103 	bmi.w	8007c5a <_printf_float+0x44e>
 8007a54:	68e0      	ldr	r0, [r4, #12]
 8007a56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a58:	4298      	cmp	r0, r3
 8007a5a:	bfb8      	it	lt
 8007a5c:	4618      	movlt	r0, r3
 8007a5e:	e734      	b.n	80078ca <_printf_float+0xbe>
 8007a60:	2301      	movs	r3, #1
 8007a62:	464a      	mov	r2, r9
 8007a64:	4631      	mov	r1, r6
 8007a66:	4628      	mov	r0, r5
 8007a68:	47b8      	blx	r7
 8007a6a:	3001      	adds	r0, #1
 8007a6c:	f43f af2b 	beq.w	80078c6 <_printf_float+0xba>
 8007a70:	f108 0801 	add.w	r8, r8, #1
 8007a74:	e7e6      	b.n	8007a44 <_printf_float+0x238>
 8007a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	dc2b      	bgt.n	8007ad4 <_printf_float+0x2c8>
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	4a26      	ldr	r2, [pc, #152]	; (8007b18 <_printf_float+0x30c>)
 8007a80:	4631      	mov	r1, r6
 8007a82:	4628      	mov	r0, r5
 8007a84:	47b8      	blx	r7
 8007a86:	3001      	adds	r0, #1
 8007a88:	f43f af1d 	beq.w	80078c6 <_printf_float+0xba>
 8007a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a8e:	b923      	cbnz	r3, 8007a9a <_printf_float+0x28e>
 8007a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a92:	b913      	cbnz	r3, 8007a9a <_printf_float+0x28e>
 8007a94:	6823      	ldr	r3, [r4, #0]
 8007a96:	07d9      	lsls	r1, r3, #31
 8007a98:	d5d8      	bpl.n	8007a4c <_printf_float+0x240>
 8007a9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a9e:	4631      	mov	r1, r6
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	47b8      	blx	r7
 8007aa4:	3001      	adds	r0, #1
 8007aa6:	f43f af0e 	beq.w	80078c6 <_printf_float+0xba>
 8007aaa:	f04f 0900 	mov.w	r9, #0
 8007aae:	f104 0a1a 	add.w	sl, r4, #26
 8007ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ab4:	425b      	negs	r3, r3
 8007ab6:	454b      	cmp	r3, r9
 8007ab8:	dc01      	bgt.n	8007abe <_printf_float+0x2b2>
 8007aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007abc:	e794      	b.n	80079e8 <_printf_float+0x1dc>
 8007abe:	2301      	movs	r3, #1
 8007ac0:	4652      	mov	r2, sl
 8007ac2:	4631      	mov	r1, r6
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	47b8      	blx	r7
 8007ac8:	3001      	adds	r0, #1
 8007aca:	f43f aefc 	beq.w	80078c6 <_printf_float+0xba>
 8007ace:	f109 0901 	add.w	r9, r9, #1
 8007ad2:	e7ee      	b.n	8007ab2 <_printf_float+0x2a6>
 8007ad4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ad6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	bfa8      	it	ge
 8007adc:	461a      	movge	r2, r3
 8007ade:	2a00      	cmp	r2, #0
 8007ae0:	4691      	mov	r9, r2
 8007ae2:	dd07      	ble.n	8007af4 <_printf_float+0x2e8>
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	4631      	mov	r1, r6
 8007ae8:	4642      	mov	r2, r8
 8007aea:	4628      	mov	r0, r5
 8007aec:	47b8      	blx	r7
 8007aee:	3001      	adds	r0, #1
 8007af0:	f43f aee9 	beq.w	80078c6 <_printf_float+0xba>
 8007af4:	f104 031a 	add.w	r3, r4, #26
 8007af8:	f04f 0b00 	mov.w	fp, #0
 8007afc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b00:	9306      	str	r3, [sp, #24]
 8007b02:	e015      	b.n	8007b30 <_printf_float+0x324>
 8007b04:	7fefffff 	.word	0x7fefffff
 8007b08:	080093fc 	.word	0x080093fc
 8007b0c:	080093f8 	.word	0x080093f8
 8007b10:	08009404 	.word	0x08009404
 8007b14:	08009400 	.word	0x08009400
 8007b18:	08009408 	.word	0x08009408
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	9a06      	ldr	r2, [sp, #24]
 8007b20:	4631      	mov	r1, r6
 8007b22:	4628      	mov	r0, r5
 8007b24:	47b8      	blx	r7
 8007b26:	3001      	adds	r0, #1
 8007b28:	f43f aecd 	beq.w	80078c6 <_printf_float+0xba>
 8007b2c:	f10b 0b01 	add.w	fp, fp, #1
 8007b30:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007b34:	ebaa 0309 	sub.w	r3, sl, r9
 8007b38:	455b      	cmp	r3, fp
 8007b3a:	dcef      	bgt.n	8007b1c <_printf_float+0x310>
 8007b3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b40:	429a      	cmp	r2, r3
 8007b42:	44d0      	add	r8, sl
 8007b44:	db15      	blt.n	8007b72 <_printf_float+0x366>
 8007b46:	6823      	ldr	r3, [r4, #0]
 8007b48:	07da      	lsls	r2, r3, #31
 8007b4a:	d412      	bmi.n	8007b72 <_printf_float+0x366>
 8007b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b50:	eba3 020a 	sub.w	r2, r3, sl
 8007b54:	eba3 0a01 	sub.w	sl, r3, r1
 8007b58:	4592      	cmp	sl, r2
 8007b5a:	bfa8      	it	ge
 8007b5c:	4692      	movge	sl, r2
 8007b5e:	f1ba 0f00 	cmp.w	sl, #0
 8007b62:	dc0e      	bgt.n	8007b82 <_printf_float+0x376>
 8007b64:	f04f 0800 	mov.w	r8, #0
 8007b68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b6c:	f104 091a 	add.w	r9, r4, #26
 8007b70:	e019      	b.n	8007ba6 <_printf_float+0x39a>
 8007b72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b76:	4631      	mov	r1, r6
 8007b78:	4628      	mov	r0, r5
 8007b7a:	47b8      	blx	r7
 8007b7c:	3001      	adds	r0, #1
 8007b7e:	d1e5      	bne.n	8007b4c <_printf_float+0x340>
 8007b80:	e6a1      	b.n	80078c6 <_printf_float+0xba>
 8007b82:	4653      	mov	r3, sl
 8007b84:	4642      	mov	r2, r8
 8007b86:	4631      	mov	r1, r6
 8007b88:	4628      	mov	r0, r5
 8007b8a:	47b8      	blx	r7
 8007b8c:	3001      	adds	r0, #1
 8007b8e:	d1e9      	bne.n	8007b64 <_printf_float+0x358>
 8007b90:	e699      	b.n	80078c6 <_printf_float+0xba>
 8007b92:	2301      	movs	r3, #1
 8007b94:	464a      	mov	r2, r9
 8007b96:	4631      	mov	r1, r6
 8007b98:	4628      	mov	r0, r5
 8007b9a:	47b8      	blx	r7
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	f43f ae92 	beq.w	80078c6 <_printf_float+0xba>
 8007ba2:	f108 0801 	add.w	r8, r8, #1
 8007ba6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007baa:	1a9b      	subs	r3, r3, r2
 8007bac:	eba3 030a 	sub.w	r3, r3, sl
 8007bb0:	4543      	cmp	r3, r8
 8007bb2:	dcee      	bgt.n	8007b92 <_printf_float+0x386>
 8007bb4:	e74a      	b.n	8007a4c <_printf_float+0x240>
 8007bb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bb8:	2a01      	cmp	r2, #1
 8007bba:	dc01      	bgt.n	8007bc0 <_printf_float+0x3b4>
 8007bbc:	07db      	lsls	r3, r3, #31
 8007bbe:	d53a      	bpl.n	8007c36 <_printf_float+0x42a>
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	4642      	mov	r2, r8
 8007bc4:	4631      	mov	r1, r6
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	47b8      	blx	r7
 8007bca:	3001      	adds	r0, #1
 8007bcc:	f43f ae7b 	beq.w	80078c6 <_printf_float+0xba>
 8007bd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bd4:	4631      	mov	r1, r6
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	47b8      	blx	r7
 8007bda:	3001      	adds	r0, #1
 8007bdc:	f108 0801 	add.w	r8, r8, #1
 8007be0:	f43f ae71 	beq.w	80078c6 <_printf_float+0xba>
 8007be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007be6:	2200      	movs	r2, #0
 8007be8:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8007bec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	f7f8 ff35 	bl	8000a60 <__aeabi_dcmpeq>
 8007bf6:	b9c8      	cbnz	r0, 8007c2c <_printf_float+0x420>
 8007bf8:	4653      	mov	r3, sl
 8007bfa:	4642      	mov	r2, r8
 8007bfc:	4631      	mov	r1, r6
 8007bfe:	4628      	mov	r0, r5
 8007c00:	47b8      	blx	r7
 8007c02:	3001      	adds	r0, #1
 8007c04:	d10e      	bne.n	8007c24 <_printf_float+0x418>
 8007c06:	e65e      	b.n	80078c6 <_printf_float+0xba>
 8007c08:	2301      	movs	r3, #1
 8007c0a:	4652      	mov	r2, sl
 8007c0c:	4631      	mov	r1, r6
 8007c0e:	4628      	mov	r0, r5
 8007c10:	47b8      	blx	r7
 8007c12:	3001      	adds	r0, #1
 8007c14:	f43f ae57 	beq.w	80078c6 <_printf_float+0xba>
 8007c18:	f108 0801 	add.w	r8, r8, #1
 8007c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	4543      	cmp	r3, r8
 8007c22:	dcf1      	bgt.n	8007c08 <_printf_float+0x3fc>
 8007c24:	464b      	mov	r3, r9
 8007c26:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c2a:	e6de      	b.n	80079ea <_printf_float+0x1de>
 8007c2c:	f04f 0800 	mov.w	r8, #0
 8007c30:	f104 0a1a 	add.w	sl, r4, #26
 8007c34:	e7f2      	b.n	8007c1c <_printf_float+0x410>
 8007c36:	2301      	movs	r3, #1
 8007c38:	e7df      	b.n	8007bfa <_printf_float+0x3ee>
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	464a      	mov	r2, r9
 8007c3e:	4631      	mov	r1, r6
 8007c40:	4628      	mov	r0, r5
 8007c42:	47b8      	blx	r7
 8007c44:	3001      	adds	r0, #1
 8007c46:	f43f ae3e 	beq.w	80078c6 <_printf_float+0xba>
 8007c4a:	f108 0801 	add.w	r8, r8, #1
 8007c4e:	68e3      	ldr	r3, [r4, #12]
 8007c50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c52:	1a9b      	subs	r3, r3, r2
 8007c54:	4543      	cmp	r3, r8
 8007c56:	dcf0      	bgt.n	8007c3a <_printf_float+0x42e>
 8007c58:	e6fc      	b.n	8007a54 <_printf_float+0x248>
 8007c5a:	f04f 0800 	mov.w	r8, #0
 8007c5e:	f104 0919 	add.w	r9, r4, #25
 8007c62:	e7f4      	b.n	8007c4e <_printf_float+0x442>
 8007c64:	2900      	cmp	r1, #0
 8007c66:	f43f ae8b 	beq.w	8007980 <_printf_float+0x174>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007c70:	ab09      	add	r3, sp, #36	; 0x24
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	ec49 8b10 	vmov	d0, r8, r9
 8007c78:	6022      	str	r2, [r4, #0]
 8007c7a:	f8cd a004 	str.w	sl, [sp, #4]
 8007c7e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007c82:	4628      	mov	r0, r5
 8007c84:	f7ff fd2e 	bl	80076e4 <__cvt>
 8007c88:	4680      	mov	r8, r0
 8007c8a:	e648      	b.n	800791e <_printf_float+0x112>

08007c8c <_printf_common>:
 8007c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c90:	4691      	mov	r9, r2
 8007c92:	461f      	mov	r7, r3
 8007c94:	688a      	ldr	r2, [r1, #8]
 8007c96:	690b      	ldr	r3, [r1, #16]
 8007c98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	bfb8      	it	lt
 8007ca0:	4613      	movlt	r3, r2
 8007ca2:	f8c9 3000 	str.w	r3, [r9]
 8007ca6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007caa:	4606      	mov	r6, r0
 8007cac:	460c      	mov	r4, r1
 8007cae:	b112      	cbz	r2, 8007cb6 <_printf_common+0x2a>
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	f8c9 3000 	str.w	r3, [r9]
 8007cb6:	6823      	ldr	r3, [r4, #0]
 8007cb8:	0699      	lsls	r1, r3, #26
 8007cba:	bf42      	ittt	mi
 8007cbc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007cc0:	3302      	addmi	r3, #2
 8007cc2:	f8c9 3000 	strmi.w	r3, [r9]
 8007cc6:	6825      	ldr	r5, [r4, #0]
 8007cc8:	f015 0506 	ands.w	r5, r5, #6
 8007ccc:	d107      	bne.n	8007cde <_printf_common+0x52>
 8007cce:	f104 0a19 	add.w	sl, r4, #25
 8007cd2:	68e3      	ldr	r3, [r4, #12]
 8007cd4:	f8d9 2000 	ldr.w	r2, [r9]
 8007cd8:	1a9b      	subs	r3, r3, r2
 8007cda:	42ab      	cmp	r3, r5
 8007cdc:	dc28      	bgt.n	8007d30 <_printf_common+0xa4>
 8007cde:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007ce2:	6822      	ldr	r2, [r4, #0]
 8007ce4:	3300      	adds	r3, #0
 8007ce6:	bf18      	it	ne
 8007ce8:	2301      	movne	r3, #1
 8007cea:	0692      	lsls	r2, r2, #26
 8007cec:	d42d      	bmi.n	8007d4a <_printf_common+0xbe>
 8007cee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cf2:	4639      	mov	r1, r7
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	47c0      	blx	r8
 8007cf8:	3001      	adds	r0, #1
 8007cfa:	d020      	beq.n	8007d3e <_printf_common+0xb2>
 8007cfc:	6823      	ldr	r3, [r4, #0]
 8007cfe:	68e5      	ldr	r5, [r4, #12]
 8007d00:	f8d9 2000 	ldr.w	r2, [r9]
 8007d04:	f003 0306 	and.w	r3, r3, #6
 8007d08:	2b04      	cmp	r3, #4
 8007d0a:	bf08      	it	eq
 8007d0c:	1aad      	subeq	r5, r5, r2
 8007d0e:	68a3      	ldr	r3, [r4, #8]
 8007d10:	6922      	ldr	r2, [r4, #16]
 8007d12:	bf0c      	ite	eq
 8007d14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d18:	2500      	movne	r5, #0
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	bfc4      	itt	gt
 8007d1e:	1a9b      	subgt	r3, r3, r2
 8007d20:	18ed      	addgt	r5, r5, r3
 8007d22:	f04f 0900 	mov.w	r9, #0
 8007d26:	341a      	adds	r4, #26
 8007d28:	454d      	cmp	r5, r9
 8007d2a:	d11a      	bne.n	8007d62 <_printf_common+0xd6>
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	e008      	b.n	8007d42 <_printf_common+0xb6>
 8007d30:	2301      	movs	r3, #1
 8007d32:	4652      	mov	r2, sl
 8007d34:	4639      	mov	r1, r7
 8007d36:	4630      	mov	r0, r6
 8007d38:	47c0      	blx	r8
 8007d3a:	3001      	adds	r0, #1
 8007d3c:	d103      	bne.n	8007d46 <_printf_common+0xba>
 8007d3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d46:	3501      	adds	r5, #1
 8007d48:	e7c3      	b.n	8007cd2 <_printf_common+0x46>
 8007d4a:	18e1      	adds	r1, r4, r3
 8007d4c:	1c5a      	adds	r2, r3, #1
 8007d4e:	2030      	movs	r0, #48	; 0x30
 8007d50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d54:	4422      	add	r2, r4
 8007d56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d5e:	3302      	adds	r3, #2
 8007d60:	e7c5      	b.n	8007cee <_printf_common+0x62>
 8007d62:	2301      	movs	r3, #1
 8007d64:	4622      	mov	r2, r4
 8007d66:	4639      	mov	r1, r7
 8007d68:	4630      	mov	r0, r6
 8007d6a:	47c0      	blx	r8
 8007d6c:	3001      	adds	r0, #1
 8007d6e:	d0e6      	beq.n	8007d3e <_printf_common+0xb2>
 8007d70:	f109 0901 	add.w	r9, r9, #1
 8007d74:	e7d8      	b.n	8007d28 <_printf_common+0x9c>
	...

08007d78 <_sbrk_r>:
 8007d78:	b538      	push	{r3, r4, r5, lr}
 8007d7a:	4c06      	ldr	r4, [pc, #24]	; (8007d94 <_sbrk_r+0x1c>)
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	4605      	mov	r5, r0
 8007d80:	4608      	mov	r0, r1
 8007d82:	6023      	str	r3, [r4, #0]
 8007d84:	f7fd fcbc 	bl	8005700 <_sbrk>
 8007d88:	1c43      	adds	r3, r0, #1
 8007d8a:	d102      	bne.n	8007d92 <_sbrk_r+0x1a>
 8007d8c:	6823      	ldr	r3, [r4, #0]
 8007d8e:	b103      	cbz	r3, 8007d92 <_sbrk_r+0x1a>
 8007d90:	602b      	str	r3, [r5, #0]
 8007d92:	bd38      	pop	{r3, r4, r5, pc}
 8007d94:	20000254 	.word	0x20000254

08007d98 <_raise_r>:
 8007d98:	291f      	cmp	r1, #31
 8007d9a:	b538      	push	{r3, r4, r5, lr}
 8007d9c:	4604      	mov	r4, r0
 8007d9e:	460d      	mov	r5, r1
 8007da0:	d904      	bls.n	8007dac <_raise_r+0x14>
 8007da2:	2316      	movs	r3, #22
 8007da4:	6003      	str	r3, [r0, #0]
 8007da6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007daa:	bd38      	pop	{r3, r4, r5, pc}
 8007dac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007dae:	b112      	cbz	r2, 8007db6 <_raise_r+0x1e>
 8007db0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007db4:	b94b      	cbnz	r3, 8007dca <_raise_r+0x32>
 8007db6:	4620      	mov	r0, r4
 8007db8:	f000 f830 	bl	8007e1c <_getpid_r>
 8007dbc:	462a      	mov	r2, r5
 8007dbe:	4601      	mov	r1, r0
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dc6:	f000 b817 	b.w	8007df8 <_kill_r>
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d00a      	beq.n	8007de4 <_raise_r+0x4c>
 8007dce:	1c59      	adds	r1, r3, #1
 8007dd0:	d103      	bne.n	8007dda <_raise_r+0x42>
 8007dd2:	2316      	movs	r3, #22
 8007dd4:	6003      	str	r3, [r0, #0]
 8007dd6:	2001      	movs	r0, #1
 8007dd8:	e7e7      	b.n	8007daa <_raise_r+0x12>
 8007dda:	2400      	movs	r4, #0
 8007ddc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007de0:	4628      	mov	r0, r5
 8007de2:	4798      	blx	r3
 8007de4:	2000      	movs	r0, #0
 8007de6:	e7e0      	b.n	8007daa <_raise_r+0x12>

08007de8 <raise>:
 8007de8:	4b02      	ldr	r3, [pc, #8]	; (8007df4 <raise+0xc>)
 8007dea:	4601      	mov	r1, r0
 8007dec:	6818      	ldr	r0, [r3, #0]
 8007dee:	f7ff bfd3 	b.w	8007d98 <_raise_r>
 8007df2:	bf00      	nop
 8007df4:	2000000c 	.word	0x2000000c

08007df8 <_kill_r>:
 8007df8:	b538      	push	{r3, r4, r5, lr}
 8007dfa:	4c07      	ldr	r4, [pc, #28]	; (8007e18 <_kill_r+0x20>)
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	4605      	mov	r5, r0
 8007e00:	4608      	mov	r0, r1
 8007e02:	4611      	mov	r1, r2
 8007e04:	6023      	str	r3, [r4, #0]
 8007e06:	f7fd fc61 	bl	80056cc <_kill>
 8007e0a:	1c43      	adds	r3, r0, #1
 8007e0c:	d102      	bne.n	8007e14 <_kill_r+0x1c>
 8007e0e:	6823      	ldr	r3, [r4, #0]
 8007e10:	b103      	cbz	r3, 8007e14 <_kill_r+0x1c>
 8007e12:	602b      	str	r3, [r5, #0]
 8007e14:	bd38      	pop	{r3, r4, r5, pc}
 8007e16:	bf00      	nop
 8007e18:	20000254 	.word	0x20000254

08007e1c <_getpid_r>:
 8007e1c:	f7fd bc4e 	b.w	80056bc <_getpid>

08007e20 <quorem>:
 8007e20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e24:	6903      	ldr	r3, [r0, #16]
 8007e26:	690c      	ldr	r4, [r1, #16]
 8007e28:	42a3      	cmp	r3, r4
 8007e2a:	4680      	mov	r8, r0
 8007e2c:	f2c0 8082 	blt.w	8007f34 <quorem+0x114>
 8007e30:	3c01      	subs	r4, #1
 8007e32:	f101 0714 	add.w	r7, r1, #20
 8007e36:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007e3a:	f100 0614 	add.w	r6, r0, #20
 8007e3e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007e42:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007e46:	eb06 030c 	add.w	r3, r6, ip
 8007e4a:	3501      	adds	r5, #1
 8007e4c:	eb07 090c 	add.w	r9, r7, ip
 8007e50:	9301      	str	r3, [sp, #4]
 8007e52:	fbb0 f5f5 	udiv	r5, r0, r5
 8007e56:	b395      	cbz	r5, 8007ebe <quorem+0x9e>
 8007e58:	f04f 0a00 	mov.w	sl, #0
 8007e5c:	4638      	mov	r0, r7
 8007e5e:	46b6      	mov	lr, r6
 8007e60:	46d3      	mov	fp, sl
 8007e62:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e66:	b293      	uxth	r3, r2
 8007e68:	fb05 a303 	mla	r3, r5, r3, sl
 8007e6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	ebab 0303 	sub.w	r3, fp, r3
 8007e76:	0c12      	lsrs	r2, r2, #16
 8007e78:	f8de b000 	ldr.w	fp, [lr]
 8007e7c:	fb05 a202 	mla	r2, r5, r2, sl
 8007e80:	fa13 f38b 	uxtah	r3, r3, fp
 8007e84:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007e88:	fa1f fb82 	uxth.w	fp, r2
 8007e8c:	f8de 2000 	ldr.w	r2, [lr]
 8007e90:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007e94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e9e:	4581      	cmp	r9, r0
 8007ea0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007ea4:	f84e 3b04 	str.w	r3, [lr], #4
 8007ea8:	d2db      	bcs.n	8007e62 <quorem+0x42>
 8007eaa:	f856 300c 	ldr.w	r3, [r6, ip]
 8007eae:	b933      	cbnz	r3, 8007ebe <quorem+0x9e>
 8007eb0:	9b01      	ldr	r3, [sp, #4]
 8007eb2:	3b04      	subs	r3, #4
 8007eb4:	429e      	cmp	r6, r3
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	d330      	bcc.n	8007f1c <quorem+0xfc>
 8007eba:	f8c8 4010 	str.w	r4, [r8, #16]
 8007ebe:	4640      	mov	r0, r8
 8007ec0:	f001 f818 	bl	8008ef4 <__mcmp>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	db25      	blt.n	8007f14 <quorem+0xf4>
 8007ec8:	3501      	adds	r5, #1
 8007eca:	4630      	mov	r0, r6
 8007ecc:	f04f 0c00 	mov.w	ip, #0
 8007ed0:	f857 2b04 	ldr.w	r2, [r7], #4
 8007ed4:	f8d0 e000 	ldr.w	lr, [r0]
 8007ed8:	b293      	uxth	r3, r2
 8007eda:	ebac 0303 	sub.w	r3, ip, r3
 8007ede:	0c12      	lsrs	r2, r2, #16
 8007ee0:	fa13 f38e 	uxtah	r3, r3, lr
 8007ee4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ee8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ef2:	45b9      	cmp	r9, r7
 8007ef4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ef8:	f840 3b04 	str.w	r3, [r0], #4
 8007efc:	d2e8      	bcs.n	8007ed0 <quorem+0xb0>
 8007efe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007f02:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007f06:	b92a      	cbnz	r2, 8007f14 <quorem+0xf4>
 8007f08:	3b04      	subs	r3, #4
 8007f0a:	429e      	cmp	r6, r3
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	d30b      	bcc.n	8007f28 <quorem+0x108>
 8007f10:	f8c8 4010 	str.w	r4, [r8, #16]
 8007f14:	4628      	mov	r0, r5
 8007f16:	b003      	add	sp, #12
 8007f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f1c:	6812      	ldr	r2, [r2, #0]
 8007f1e:	3b04      	subs	r3, #4
 8007f20:	2a00      	cmp	r2, #0
 8007f22:	d1ca      	bne.n	8007eba <quorem+0x9a>
 8007f24:	3c01      	subs	r4, #1
 8007f26:	e7c5      	b.n	8007eb4 <quorem+0x94>
 8007f28:	6812      	ldr	r2, [r2, #0]
 8007f2a:	3b04      	subs	r3, #4
 8007f2c:	2a00      	cmp	r2, #0
 8007f2e:	d1ef      	bne.n	8007f10 <quorem+0xf0>
 8007f30:	3c01      	subs	r4, #1
 8007f32:	e7ea      	b.n	8007f0a <quorem+0xea>
 8007f34:	2000      	movs	r0, #0
 8007f36:	e7ee      	b.n	8007f16 <quorem+0xf6>

08007f38 <_dtoa_r>:
 8007f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f3c:	ec57 6b10 	vmov	r6, r7, d0
 8007f40:	b097      	sub	sp, #92	; 0x5c
 8007f42:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f44:	9106      	str	r1, [sp, #24]
 8007f46:	4604      	mov	r4, r0
 8007f48:	920b      	str	r2, [sp, #44]	; 0x2c
 8007f4a:	9312      	str	r3, [sp, #72]	; 0x48
 8007f4c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f50:	e9cd 6700 	strd	r6, r7, [sp]
 8007f54:	b93d      	cbnz	r5, 8007f66 <_dtoa_r+0x2e>
 8007f56:	2010      	movs	r0, #16
 8007f58:	f7ff fae0 	bl	800751c <malloc>
 8007f5c:	6260      	str	r0, [r4, #36]	; 0x24
 8007f5e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f62:	6005      	str	r5, [r0, #0]
 8007f64:	60c5      	str	r5, [r0, #12]
 8007f66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f68:	6819      	ldr	r1, [r3, #0]
 8007f6a:	b151      	cbz	r1, 8007f82 <_dtoa_r+0x4a>
 8007f6c:	685a      	ldr	r2, [r3, #4]
 8007f6e:	604a      	str	r2, [r1, #4]
 8007f70:	2301      	movs	r3, #1
 8007f72:	4093      	lsls	r3, r2
 8007f74:	608b      	str	r3, [r1, #8]
 8007f76:	4620      	mov	r0, r4
 8007f78:	f000 fdda 	bl	8008b30 <_Bfree>
 8007f7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f7e:	2200      	movs	r2, #0
 8007f80:	601a      	str	r2, [r3, #0]
 8007f82:	1e3b      	subs	r3, r7, #0
 8007f84:	bfbb      	ittet	lt
 8007f86:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007f8a:	9301      	strlt	r3, [sp, #4]
 8007f8c:	2300      	movge	r3, #0
 8007f8e:	2201      	movlt	r2, #1
 8007f90:	bfac      	ite	ge
 8007f92:	f8c8 3000 	strge.w	r3, [r8]
 8007f96:	f8c8 2000 	strlt.w	r2, [r8]
 8007f9a:	4baf      	ldr	r3, [pc, #700]	; (8008258 <_dtoa_r+0x320>)
 8007f9c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007fa0:	ea33 0308 	bics.w	r3, r3, r8
 8007fa4:	d114      	bne.n	8007fd0 <_dtoa_r+0x98>
 8007fa6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007fa8:	f242 730f 	movw	r3, #9999	; 0x270f
 8007fac:	6013      	str	r3, [r2, #0]
 8007fae:	9b00      	ldr	r3, [sp, #0]
 8007fb0:	b923      	cbnz	r3, 8007fbc <_dtoa_r+0x84>
 8007fb2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	f000 8542 	beq.w	8008a40 <_dtoa_r+0xb08>
 8007fbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fbe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800826c <_dtoa_r+0x334>
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f000 8544 	beq.w	8008a50 <_dtoa_r+0xb18>
 8007fc8:	f10b 0303 	add.w	r3, fp, #3
 8007fcc:	f000 bd3e 	b.w	8008a4c <_dtoa_r+0xb14>
 8007fd0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	4630      	mov	r0, r6
 8007fda:	4639      	mov	r1, r7
 8007fdc:	f7f8 fd40 	bl	8000a60 <__aeabi_dcmpeq>
 8007fe0:	4681      	mov	r9, r0
 8007fe2:	b168      	cbz	r0, 8008000 <_dtoa_r+0xc8>
 8007fe4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	6013      	str	r3, [r2, #0]
 8007fea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f000 8524 	beq.w	8008a3a <_dtoa_r+0xb02>
 8007ff2:	4b9a      	ldr	r3, [pc, #616]	; (800825c <_dtoa_r+0x324>)
 8007ff4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ff6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8007ffa:	6013      	str	r3, [r2, #0]
 8007ffc:	f000 bd28 	b.w	8008a50 <_dtoa_r+0xb18>
 8008000:	aa14      	add	r2, sp, #80	; 0x50
 8008002:	a915      	add	r1, sp, #84	; 0x54
 8008004:	ec47 6b10 	vmov	d0, r6, r7
 8008008:	4620      	mov	r0, r4
 800800a:	f000 ffea 	bl	8008fe2 <__d2b>
 800800e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008012:	9004      	str	r0, [sp, #16]
 8008014:	2d00      	cmp	r5, #0
 8008016:	d07c      	beq.n	8008112 <_dtoa_r+0x1da>
 8008018:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800801c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008020:	46b2      	mov	sl, r6
 8008022:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008026:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800802a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800802e:	2200      	movs	r2, #0
 8008030:	4b8b      	ldr	r3, [pc, #556]	; (8008260 <_dtoa_r+0x328>)
 8008032:	4650      	mov	r0, sl
 8008034:	4659      	mov	r1, fp
 8008036:	f7f8 f8f3 	bl	8000220 <__aeabi_dsub>
 800803a:	a381      	add	r3, pc, #516	; (adr r3, 8008240 <_dtoa_r+0x308>)
 800803c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008040:	f7f8 faa6 	bl	8000590 <__aeabi_dmul>
 8008044:	a380      	add	r3, pc, #512	; (adr r3, 8008248 <_dtoa_r+0x310>)
 8008046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804a:	f7f8 f8eb 	bl	8000224 <__adddf3>
 800804e:	4606      	mov	r6, r0
 8008050:	4628      	mov	r0, r5
 8008052:	460f      	mov	r7, r1
 8008054:	f7f8 fa32 	bl	80004bc <__aeabi_i2d>
 8008058:	a37d      	add	r3, pc, #500	; (adr r3, 8008250 <_dtoa_r+0x318>)
 800805a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805e:	f7f8 fa97 	bl	8000590 <__aeabi_dmul>
 8008062:	4602      	mov	r2, r0
 8008064:	460b      	mov	r3, r1
 8008066:	4630      	mov	r0, r6
 8008068:	4639      	mov	r1, r7
 800806a:	f7f8 f8db 	bl	8000224 <__adddf3>
 800806e:	4606      	mov	r6, r0
 8008070:	460f      	mov	r7, r1
 8008072:	f7f8 fd3d 	bl	8000af0 <__aeabi_d2iz>
 8008076:	2200      	movs	r2, #0
 8008078:	4682      	mov	sl, r0
 800807a:	2300      	movs	r3, #0
 800807c:	4630      	mov	r0, r6
 800807e:	4639      	mov	r1, r7
 8008080:	f7f8 fcf8 	bl	8000a74 <__aeabi_dcmplt>
 8008084:	b148      	cbz	r0, 800809a <_dtoa_r+0x162>
 8008086:	4650      	mov	r0, sl
 8008088:	f7f8 fa18 	bl	80004bc <__aeabi_i2d>
 800808c:	4632      	mov	r2, r6
 800808e:	463b      	mov	r3, r7
 8008090:	f7f8 fce6 	bl	8000a60 <__aeabi_dcmpeq>
 8008094:	b908      	cbnz	r0, 800809a <_dtoa_r+0x162>
 8008096:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800809a:	f1ba 0f16 	cmp.w	sl, #22
 800809e:	d859      	bhi.n	8008154 <_dtoa_r+0x21c>
 80080a0:	4970      	ldr	r1, [pc, #448]	; (8008264 <_dtoa_r+0x32c>)
 80080a2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80080a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080ae:	f7f8 fcff 	bl	8000ab0 <__aeabi_dcmpgt>
 80080b2:	2800      	cmp	r0, #0
 80080b4:	d050      	beq.n	8008158 <_dtoa_r+0x220>
 80080b6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80080ba:	2300      	movs	r3, #0
 80080bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80080be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80080c0:	1b5d      	subs	r5, r3, r5
 80080c2:	f1b5 0801 	subs.w	r8, r5, #1
 80080c6:	bf49      	itett	mi
 80080c8:	f1c5 0301 	rsbmi	r3, r5, #1
 80080cc:	2300      	movpl	r3, #0
 80080ce:	9305      	strmi	r3, [sp, #20]
 80080d0:	f04f 0800 	movmi.w	r8, #0
 80080d4:	bf58      	it	pl
 80080d6:	9305      	strpl	r3, [sp, #20]
 80080d8:	f1ba 0f00 	cmp.w	sl, #0
 80080dc:	db3e      	blt.n	800815c <_dtoa_r+0x224>
 80080de:	2300      	movs	r3, #0
 80080e0:	44d0      	add	r8, sl
 80080e2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80080e6:	9307      	str	r3, [sp, #28]
 80080e8:	9b06      	ldr	r3, [sp, #24]
 80080ea:	2b09      	cmp	r3, #9
 80080ec:	f200 8090 	bhi.w	8008210 <_dtoa_r+0x2d8>
 80080f0:	2b05      	cmp	r3, #5
 80080f2:	bfc4      	itt	gt
 80080f4:	3b04      	subgt	r3, #4
 80080f6:	9306      	strgt	r3, [sp, #24]
 80080f8:	9b06      	ldr	r3, [sp, #24]
 80080fa:	f1a3 0302 	sub.w	r3, r3, #2
 80080fe:	bfcc      	ite	gt
 8008100:	2500      	movgt	r5, #0
 8008102:	2501      	movle	r5, #1
 8008104:	2b03      	cmp	r3, #3
 8008106:	f200 808f 	bhi.w	8008228 <_dtoa_r+0x2f0>
 800810a:	e8df f003 	tbb	[pc, r3]
 800810e:	7f7d      	.short	0x7f7d
 8008110:	7131      	.short	0x7131
 8008112:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008116:	441d      	add	r5, r3
 8008118:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800811c:	2820      	cmp	r0, #32
 800811e:	dd13      	ble.n	8008148 <_dtoa_r+0x210>
 8008120:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008124:	9b00      	ldr	r3, [sp, #0]
 8008126:	fa08 f800 	lsl.w	r8, r8, r0
 800812a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800812e:	fa23 f000 	lsr.w	r0, r3, r0
 8008132:	ea48 0000 	orr.w	r0, r8, r0
 8008136:	f7f8 f9b1 	bl	800049c <__aeabi_ui2d>
 800813a:	2301      	movs	r3, #1
 800813c:	4682      	mov	sl, r0
 800813e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008142:	3d01      	subs	r5, #1
 8008144:	9313      	str	r3, [sp, #76]	; 0x4c
 8008146:	e772      	b.n	800802e <_dtoa_r+0xf6>
 8008148:	9b00      	ldr	r3, [sp, #0]
 800814a:	f1c0 0020 	rsb	r0, r0, #32
 800814e:	fa03 f000 	lsl.w	r0, r3, r0
 8008152:	e7f0      	b.n	8008136 <_dtoa_r+0x1fe>
 8008154:	2301      	movs	r3, #1
 8008156:	e7b1      	b.n	80080bc <_dtoa_r+0x184>
 8008158:	900f      	str	r0, [sp, #60]	; 0x3c
 800815a:	e7b0      	b.n	80080be <_dtoa_r+0x186>
 800815c:	9b05      	ldr	r3, [sp, #20]
 800815e:	eba3 030a 	sub.w	r3, r3, sl
 8008162:	9305      	str	r3, [sp, #20]
 8008164:	f1ca 0300 	rsb	r3, sl, #0
 8008168:	9307      	str	r3, [sp, #28]
 800816a:	2300      	movs	r3, #0
 800816c:	930e      	str	r3, [sp, #56]	; 0x38
 800816e:	e7bb      	b.n	80080e8 <_dtoa_r+0x1b0>
 8008170:	2301      	movs	r3, #1
 8008172:	930a      	str	r3, [sp, #40]	; 0x28
 8008174:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008176:	2b00      	cmp	r3, #0
 8008178:	dd59      	ble.n	800822e <_dtoa_r+0x2f6>
 800817a:	9302      	str	r3, [sp, #8]
 800817c:	4699      	mov	r9, r3
 800817e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008180:	2200      	movs	r2, #0
 8008182:	6072      	str	r2, [r6, #4]
 8008184:	2204      	movs	r2, #4
 8008186:	f102 0014 	add.w	r0, r2, #20
 800818a:	4298      	cmp	r0, r3
 800818c:	6871      	ldr	r1, [r6, #4]
 800818e:	d953      	bls.n	8008238 <_dtoa_r+0x300>
 8008190:	4620      	mov	r0, r4
 8008192:	f000 fc99 	bl	8008ac8 <_Balloc>
 8008196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008198:	6030      	str	r0, [r6, #0]
 800819a:	f1b9 0f0e 	cmp.w	r9, #14
 800819e:	f8d3 b000 	ldr.w	fp, [r3]
 80081a2:	f200 80e6 	bhi.w	8008372 <_dtoa_r+0x43a>
 80081a6:	2d00      	cmp	r5, #0
 80081a8:	f000 80e3 	beq.w	8008372 <_dtoa_r+0x43a>
 80081ac:	ed9d 7b00 	vldr	d7, [sp]
 80081b0:	f1ba 0f00 	cmp.w	sl, #0
 80081b4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80081b8:	dd74      	ble.n	80082a4 <_dtoa_r+0x36c>
 80081ba:	4a2a      	ldr	r2, [pc, #168]	; (8008264 <_dtoa_r+0x32c>)
 80081bc:	f00a 030f 	and.w	r3, sl, #15
 80081c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80081c4:	ed93 7b00 	vldr	d7, [r3]
 80081c8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80081cc:	06f0      	lsls	r0, r6, #27
 80081ce:	ed8d 7b08 	vstr	d7, [sp, #32]
 80081d2:	d565      	bpl.n	80082a0 <_dtoa_r+0x368>
 80081d4:	4b24      	ldr	r3, [pc, #144]	; (8008268 <_dtoa_r+0x330>)
 80081d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80081da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80081de:	f7f8 fb01 	bl	80007e4 <__aeabi_ddiv>
 80081e2:	e9cd 0100 	strd	r0, r1, [sp]
 80081e6:	f006 060f 	and.w	r6, r6, #15
 80081ea:	2503      	movs	r5, #3
 80081ec:	4f1e      	ldr	r7, [pc, #120]	; (8008268 <_dtoa_r+0x330>)
 80081ee:	e04c      	b.n	800828a <_dtoa_r+0x352>
 80081f0:	2301      	movs	r3, #1
 80081f2:	930a      	str	r3, [sp, #40]	; 0x28
 80081f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081f6:	4453      	add	r3, sl
 80081f8:	f103 0901 	add.w	r9, r3, #1
 80081fc:	9302      	str	r3, [sp, #8]
 80081fe:	464b      	mov	r3, r9
 8008200:	2b01      	cmp	r3, #1
 8008202:	bfb8      	it	lt
 8008204:	2301      	movlt	r3, #1
 8008206:	e7ba      	b.n	800817e <_dtoa_r+0x246>
 8008208:	2300      	movs	r3, #0
 800820a:	e7b2      	b.n	8008172 <_dtoa_r+0x23a>
 800820c:	2300      	movs	r3, #0
 800820e:	e7f0      	b.n	80081f2 <_dtoa_r+0x2ba>
 8008210:	2501      	movs	r5, #1
 8008212:	2300      	movs	r3, #0
 8008214:	9306      	str	r3, [sp, #24]
 8008216:	950a      	str	r5, [sp, #40]	; 0x28
 8008218:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800821c:	9302      	str	r3, [sp, #8]
 800821e:	4699      	mov	r9, r3
 8008220:	2200      	movs	r2, #0
 8008222:	2312      	movs	r3, #18
 8008224:	920b      	str	r2, [sp, #44]	; 0x2c
 8008226:	e7aa      	b.n	800817e <_dtoa_r+0x246>
 8008228:	2301      	movs	r3, #1
 800822a:	930a      	str	r3, [sp, #40]	; 0x28
 800822c:	e7f4      	b.n	8008218 <_dtoa_r+0x2e0>
 800822e:	2301      	movs	r3, #1
 8008230:	9302      	str	r3, [sp, #8]
 8008232:	4699      	mov	r9, r3
 8008234:	461a      	mov	r2, r3
 8008236:	e7f5      	b.n	8008224 <_dtoa_r+0x2ec>
 8008238:	3101      	adds	r1, #1
 800823a:	6071      	str	r1, [r6, #4]
 800823c:	0052      	lsls	r2, r2, #1
 800823e:	e7a2      	b.n	8008186 <_dtoa_r+0x24e>
 8008240:	636f4361 	.word	0x636f4361
 8008244:	3fd287a7 	.word	0x3fd287a7
 8008248:	8b60c8b3 	.word	0x8b60c8b3
 800824c:	3fc68a28 	.word	0x3fc68a28
 8008250:	509f79fb 	.word	0x509f79fb
 8008254:	3fd34413 	.word	0x3fd34413
 8008258:	7ff00000 	.word	0x7ff00000
 800825c:	08009409 	.word	0x08009409
 8008260:	3ff80000 	.word	0x3ff80000
 8008264:	08009440 	.word	0x08009440
 8008268:	08009418 	.word	0x08009418
 800826c:	08009413 	.word	0x08009413
 8008270:	07f1      	lsls	r1, r6, #31
 8008272:	d508      	bpl.n	8008286 <_dtoa_r+0x34e>
 8008274:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800827c:	f7f8 f988 	bl	8000590 <__aeabi_dmul>
 8008280:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008284:	3501      	adds	r5, #1
 8008286:	1076      	asrs	r6, r6, #1
 8008288:	3708      	adds	r7, #8
 800828a:	2e00      	cmp	r6, #0
 800828c:	d1f0      	bne.n	8008270 <_dtoa_r+0x338>
 800828e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008292:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008296:	f7f8 faa5 	bl	80007e4 <__aeabi_ddiv>
 800829a:	e9cd 0100 	strd	r0, r1, [sp]
 800829e:	e01a      	b.n	80082d6 <_dtoa_r+0x39e>
 80082a0:	2502      	movs	r5, #2
 80082a2:	e7a3      	b.n	80081ec <_dtoa_r+0x2b4>
 80082a4:	f000 80a0 	beq.w	80083e8 <_dtoa_r+0x4b0>
 80082a8:	f1ca 0600 	rsb	r6, sl, #0
 80082ac:	4b9f      	ldr	r3, [pc, #636]	; (800852c <_dtoa_r+0x5f4>)
 80082ae:	4fa0      	ldr	r7, [pc, #640]	; (8008530 <_dtoa_r+0x5f8>)
 80082b0:	f006 020f 	and.w	r2, r6, #15
 80082b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80082c0:	f7f8 f966 	bl	8000590 <__aeabi_dmul>
 80082c4:	e9cd 0100 	strd	r0, r1, [sp]
 80082c8:	1136      	asrs	r6, r6, #4
 80082ca:	2300      	movs	r3, #0
 80082cc:	2502      	movs	r5, #2
 80082ce:	2e00      	cmp	r6, #0
 80082d0:	d17f      	bne.n	80083d2 <_dtoa_r+0x49a>
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1e1      	bne.n	800829a <_dtoa_r+0x362>
 80082d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f000 8087 	beq.w	80083ec <_dtoa_r+0x4b4>
 80082de:	e9dd 6700 	ldrd	r6, r7, [sp]
 80082e2:	2200      	movs	r2, #0
 80082e4:	4b93      	ldr	r3, [pc, #588]	; (8008534 <_dtoa_r+0x5fc>)
 80082e6:	4630      	mov	r0, r6
 80082e8:	4639      	mov	r1, r7
 80082ea:	f7f8 fbc3 	bl	8000a74 <__aeabi_dcmplt>
 80082ee:	2800      	cmp	r0, #0
 80082f0:	d07c      	beq.n	80083ec <_dtoa_r+0x4b4>
 80082f2:	f1b9 0f00 	cmp.w	r9, #0
 80082f6:	d079      	beq.n	80083ec <_dtoa_r+0x4b4>
 80082f8:	9b02      	ldr	r3, [sp, #8]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	dd35      	ble.n	800836a <_dtoa_r+0x432>
 80082fe:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008302:	9308      	str	r3, [sp, #32]
 8008304:	4639      	mov	r1, r7
 8008306:	2200      	movs	r2, #0
 8008308:	4b8b      	ldr	r3, [pc, #556]	; (8008538 <_dtoa_r+0x600>)
 800830a:	4630      	mov	r0, r6
 800830c:	f7f8 f940 	bl	8000590 <__aeabi_dmul>
 8008310:	e9cd 0100 	strd	r0, r1, [sp]
 8008314:	9f02      	ldr	r7, [sp, #8]
 8008316:	3501      	adds	r5, #1
 8008318:	4628      	mov	r0, r5
 800831a:	f7f8 f8cf 	bl	80004bc <__aeabi_i2d>
 800831e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008322:	f7f8 f935 	bl	8000590 <__aeabi_dmul>
 8008326:	2200      	movs	r2, #0
 8008328:	4b84      	ldr	r3, [pc, #528]	; (800853c <_dtoa_r+0x604>)
 800832a:	f7f7 ff7b 	bl	8000224 <__adddf3>
 800832e:	4605      	mov	r5, r0
 8008330:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008334:	2f00      	cmp	r7, #0
 8008336:	d15d      	bne.n	80083f4 <_dtoa_r+0x4bc>
 8008338:	2200      	movs	r2, #0
 800833a:	4b81      	ldr	r3, [pc, #516]	; (8008540 <_dtoa_r+0x608>)
 800833c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008340:	f7f7 ff6e 	bl	8000220 <__aeabi_dsub>
 8008344:	462a      	mov	r2, r5
 8008346:	4633      	mov	r3, r6
 8008348:	e9cd 0100 	strd	r0, r1, [sp]
 800834c:	f7f8 fbb0 	bl	8000ab0 <__aeabi_dcmpgt>
 8008350:	2800      	cmp	r0, #0
 8008352:	f040 8288 	bne.w	8008866 <_dtoa_r+0x92e>
 8008356:	462a      	mov	r2, r5
 8008358:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800835c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008360:	f7f8 fb88 	bl	8000a74 <__aeabi_dcmplt>
 8008364:	2800      	cmp	r0, #0
 8008366:	f040 827c 	bne.w	8008862 <_dtoa_r+0x92a>
 800836a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800836e:	e9cd 2300 	strd	r2, r3, [sp]
 8008372:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008374:	2b00      	cmp	r3, #0
 8008376:	f2c0 8150 	blt.w	800861a <_dtoa_r+0x6e2>
 800837a:	f1ba 0f0e 	cmp.w	sl, #14
 800837e:	f300 814c 	bgt.w	800861a <_dtoa_r+0x6e2>
 8008382:	4b6a      	ldr	r3, [pc, #424]	; (800852c <_dtoa_r+0x5f4>)
 8008384:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008388:	ed93 7b00 	vldr	d7, [r3]
 800838c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800838e:	2b00      	cmp	r3, #0
 8008390:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008394:	f280 80d8 	bge.w	8008548 <_dtoa_r+0x610>
 8008398:	f1b9 0f00 	cmp.w	r9, #0
 800839c:	f300 80d4 	bgt.w	8008548 <_dtoa_r+0x610>
 80083a0:	f040 825e 	bne.w	8008860 <_dtoa_r+0x928>
 80083a4:	2200      	movs	r2, #0
 80083a6:	4b66      	ldr	r3, [pc, #408]	; (8008540 <_dtoa_r+0x608>)
 80083a8:	ec51 0b17 	vmov	r0, r1, d7
 80083ac:	f7f8 f8f0 	bl	8000590 <__aeabi_dmul>
 80083b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083b4:	f7f8 fb72 	bl	8000a9c <__aeabi_dcmpge>
 80083b8:	464f      	mov	r7, r9
 80083ba:	464e      	mov	r6, r9
 80083bc:	2800      	cmp	r0, #0
 80083be:	f040 8234 	bne.w	800882a <_dtoa_r+0x8f2>
 80083c2:	2331      	movs	r3, #49	; 0x31
 80083c4:	f10b 0501 	add.w	r5, fp, #1
 80083c8:	f88b 3000 	strb.w	r3, [fp]
 80083cc:	f10a 0a01 	add.w	sl, sl, #1
 80083d0:	e22f      	b.n	8008832 <_dtoa_r+0x8fa>
 80083d2:	07f2      	lsls	r2, r6, #31
 80083d4:	d505      	bpl.n	80083e2 <_dtoa_r+0x4aa>
 80083d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083da:	f7f8 f8d9 	bl	8000590 <__aeabi_dmul>
 80083de:	3501      	adds	r5, #1
 80083e0:	2301      	movs	r3, #1
 80083e2:	1076      	asrs	r6, r6, #1
 80083e4:	3708      	adds	r7, #8
 80083e6:	e772      	b.n	80082ce <_dtoa_r+0x396>
 80083e8:	2502      	movs	r5, #2
 80083ea:	e774      	b.n	80082d6 <_dtoa_r+0x39e>
 80083ec:	f8cd a020 	str.w	sl, [sp, #32]
 80083f0:	464f      	mov	r7, r9
 80083f2:	e791      	b.n	8008318 <_dtoa_r+0x3e0>
 80083f4:	4b4d      	ldr	r3, [pc, #308]	; (800852c <_dtoa_r+0x5f4>)
 80083f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80083fa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80083fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008400:	2b00      	cmp	r3, #0
 8008402:	d047      	beq.n	8008494 <_dtoa_r+0x55c>
 8008404:	4602      	mov	r2, r0
 8008406:	460b      	mov	r3, r1
 8008408:	2000      	movs	r0, #0
 800840a:	494e      	ldr	r1, [pc, #312]	; (8008544 <_dtoa_r+0x60c>)
 800840c:	f7f8 f9ea 	bl	80007e4 <__aeabi_ddiv>
 8008410:	462a      	mov	r2, r5
 8008412:	4633      	mov	r3, r6
 8008414:	f7f7 ff04 	bl	8000220 <__aeabi_dsub>
 8008418:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800841c:	465d      	mov	r5, fp
 800841e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008422:	f7f8 fb65 	bl	8000af0 <__aeabi_d2iz>
 8008426:	4606      	mov	r6, r0
 8008428:	f7f8 f848 	bl	80004bc <__aeabi_i2d>
 800842c:	4602      	mov	r2, r0
 800842e:	460b      	mov	r3, r1
 8008430:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008434:	f7f7 fef4 	bl	8000220 <__aeabi_dsub>
 8008438:	3630      	adds	r6, #48	; 0x30
 800843a:	f805 6b01 	strb.w	r6, [r5], #1
 800843e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008442:	e9cd 0100 	strd	r0, r1, [sp]
 8008446:	f7f8 fb15 	bl	8000a74 <__aeabi_dcmplt>
 800844a:	2800      	cmp	r0, #0
 800844c:	d163      	bne.n	8008516 <_dtoa_r+0x5de>
 800844e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008452:	2000      	movs	r0, #0
 8008454:	4937      	ldr	r1, [pc, #220]	; (8008534 <_dtoa_r+0x5fc>)
 8008456:	f7f7 fee3 	bl	8000220 <__aeabi_dsub>
 800845a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800845e:	f7f8 fb09 	bl	8000a74 <__aeabi_dcmplt>
 8008462:	2800      	cmp	r0, #0
 8008464:	f040 80b7 	bne.w	80085d6 <_dtoa_r+0x69e>
 8008468:	eba5 030b 	sub.w	r3, r5, fp
 800846c:	429f      	cmp	r7, r3
 800846e:	f77f af7c 	ble.w	800836a <_dtoa_r+0x432>
 8008472:	2200      	movs	r2, #0
 8008474:	4b30      	ldr	r3, [pc, #192]	; (8008538 <_dtoa_r+0x600>)
 8008476:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800847a:	f7f8 f889 	bl	8000590 <__aeabi_dmul>
 800847e:	2200      	movs	r2, #0
 8008480:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008484:	4b2c      	ldr	r3, [pc, #176]	; (8008538 <_dtoa_r+0x600>)
 8008486:	e9dd 0100 	ldrd	r0, r1, [sp]
 800848a:	f7f8 f881 	bl	8000590 <__aeabi_dmul>
 800848e:	e9cd 0100 	strd	r0, r1, [sp]
 8008492:	e7c4      	b.n	800841e <_dtoa_r+0x4e6>
 8008494:	462a      	mov	r2, r5
 8008496:	4633      	mov	r3, r6
 8008498:	f7f8 f87a 	bl	8000590 <__aeabi_dmul>
 800849c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80084a0:	eb0b 0507 	add.w	r5, fp, r7
 80084a4:	465e      	mov	r6, fp
 80084a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084aa:	f7f8 fb21 	bl	8000af0 <__aeabi_d2iz>
 80084ae:	4607      	mov	r7, r0
 80084b0:	f7f8 f804 	bl	80004bc <__aeabi_i2d>
 80084b4:	3730      	adds	r7, #48	; 0x30
 80084b6:	4602      	mov	r2, r0
 80084b8:	460b      	mov	r3, r1
 80084ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084be:	f7f7 feaf 	bl	8000220 <__aeabi_dsub>
 80084c2:	f806 7b01 	strb.w	r7, [r6], #1
 80084c6:	42ae      	cmp	r6, r5
 80084c8:	e9cd 0100 	strd	r0, r1, [sp]
 80084cc:	f04f 0200 	mov.w	r2, #0
 80084d0:	d126      	bne.n	8008520 <_dtoa_r+0x5e8>
 80084d2:	4b1c      	ldr	r3, [pc, #112]	; (8008544 <_dtoa_r+0x60c>)
 80084d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084d8:	f7f7 fea4 	bl	8000224 <__adddf3>
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084e4:	f7f8 fae4 	bl	8000ab0 <__aeabi_dcmpgt>
 80084e8:	2800      	cmp	r0, #0
 80084ea:	d174      	bne.n	80085d6 <_dtoa_r+0x69e>
 80084ec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80084f0:	2000      	movs	r0, #0
 80084f2:	4914      	ldr	r1, [pc, #80]	; (8008544 <_dtoa_r+0x60c>)
 80084f4:	f7f7 fe94 	bl	8000220 <__aeabi_dsub>
 80084f8:	4602      	mov	r2, r0
 80084fa:	460b      	mov	r3, r1
 80084fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008500:	f7f8 fab8 	bl	8000a74 <__aeabi_dcmplt>
 8008504:	2800      	cmp	r0, #0
 8008506:	f43f af30 	beq.w	800836a <_dtoa_r+0x432>
 800850a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800850e:	2b30      	cmp	r3, #48	; 0x30
 8008510:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008514:	d002      	beq.n	800851c <_dtoa_r+0x5e4>
 8008516:	f8dd a020 	ldr.w	sl, [sp, #32]
 800851a:	e04a      	b.n	80085b2 <_dtoa_r+0x67a>
 800851c:	4615      	mov	r5, r2
 800851e:	e7f4      	b.n	800850a <_dtoa_r+0x5d2>
 8008520:	4b05      	ldr	r3, [pc, #20]	; (8008538 <_dtoa_r+0x600>)
 8008522:	f7f8 f835 	bl	8000590 <__aeabi_dmul>
 8008526:	e9cd 0100 	strd	r0, r1, [sp]
 800852a:	e7bc      	b.n	80084a6 <_dtoa_r+0x56e>
 800852c:	08009440 	.word	0x08009440
 8008530:	08009418 	.word	0x08009418
 8008534:	3ff00000 	.word	0x3ff00000
 8008538:	40240000 	.word	0x40240000
 800853c:	401c0000 	.word	0x401c0000
 8008540:	40140000 	.word	0x40140000
 8008544:	3fe00000 	.word	0x3fe00000
 8008548:	e9dd 6700 	ldrd	r6, r7, [sp]
 800854c:	465d      	mov	r5, fp
 800854e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008552:	4630      	mov	r0, r6
 8008554:	4639      	mov	r1, r7
 8008556:	f7f8 f945 	bl	80007e4 <__aeabi_ddiv>
 800855a:	f7f8 fac9 	bl	8000af0 <__aeabi_d2iz>
 800855e:	4680      	mov	r8, r0
 8008560:	f7f7 ffac 	bl	80004bc <__aeabi_i2d>
 8008564:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008568:	f7f8 f812 	bl	8000590 <__aeabi_dmul>
 800856c:	4602      	mov	r2, r0
 800856e:	460b      	mov	r3, r1
 8008570:	4630      	mov	r0, r6
 8008572:	4639      	mov	r1, r7
 8008574:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008578:	f7f7 fe52 	bl	8000220 <__aeabi_dsub>
 800857c:	f805 6b01 	strb.w	r6, [r5], #1
 8008580:	eba5 060b 	sub.w	r6, r5, fp
 8008584:	45b1      	cmp	r9, r6
 8008586:	4602      	mov	r2, r0
 8008588:	460b      	mov	r3, r1
 800858a:	d139      	bne.n	8008600 <_dtoa_r+0x6c8>
 800858c:	f7f7 fe4a 	bl	8000224 <__adddf3>
 8008590:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008594:	4606      	mov	r6, r0
 8008596:	460f      	mov	r7, r1
 8008598:	f7f8 fa8a 	bl	8000ab0 <__aeabi_dcmpgt>
 800859c:	b9c8      	cbnz	r0, 80085d2 <_dtoa_r+0x69a>
 800859e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085a2:	4630      	mov	r0, r6
 80085a4:	4639      	mov	r1, r7
 80085a6:	f7f8 fa5b 	bl	8000a60 <__aeabi_dcmpeq>
 80085aa:	b110      	cbz	r0, 80085b2 <_dtoa_r+0x67a>
 80085ac:	f018 0f01 	tst.w	r8, #1
 80085b0:	d10f      	bne.n	80085d2 <_dtoa_r+0x69a>
 80085b2:	9904      	ldr	r1, [sp, #16]
 80085b4:	4620      	mov	r0, r4
 80085b6:	f000 fabb 	bl	8008b30 <_Bfree>
 80085ba:	2300      	movs	r3, #0
 80085bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80085be:	702b      	strb	r3, [r5, #0]
 80085c0:	f10a 0301 	add.w	r3, sl, #1
 80085c4:	6013      	str	r3, [r2, #0]
 80085c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f000 8241 	beq.w	8008a50 <_dtoa_r+0xb18>
 80085ce:	601d      	str	r5, [r3, #0]
 80085d0:	e23e      	b.n	8008a50 <_dtoa_r+0xb18>
 80085d2:	f8cd a020 	str.w	sl, [sp, #32]
 80085d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80085da:	2a39      	cmp	r2, #57	; 0x39
 80085dc:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80085e0:	d108      	bne.n	80085f4 <_dtoa_r+0x6bc>
 80085e2:	459b      	cmp	fp, r3
 80085e4:	d10a      	bne.n	80085fc <_dtoa_r+0x6c4>
 80085e6:	9b08      	ldr	r3, [sp, #32]
 80085e8:	3301      	adds	r3, #1
 80085ea:	9308      	str	r3, [sp, #32]
 80085ec:	2330      	movs	r3, #48	; 0x30
 80085ee:	f88b 3000 	strb.w	r3, [fp]
 80085f2:	465b      	mov	r3, fp
 80085f4:	781a      	ldrb	r2, [r3, #0]
 80085f6:	3201      	adds	r2, #1
 80085f8:	701a      	strb	r2, [r3, #0]
 80085fa:	e78c      	b.n	8008516 <_dtoa_r+0x5de>
 80085fc:	461d      	mov	r5, r3
 80085fe:	e7ea      	b.n	80085d6 <_dtoa_r+0x69e>
 8008600:	2200      	movs	r2, #0
 8008602:	4b9b      	ldr	r3, [pc, #620]	; (8008870 <_dtoa_r+0x938>)
 8008604:	f7f7 ffc4 	bl	8000590 <__aeabi_dmul>
 8008608:	2200      	movs	r2, #0
 800860a:	2300      	movs	r3, #0
 800860c:	4606      	mov	r6, r0
 800860e:	460f      	mov	r7, r1
 8008610:	f7f8 fa26 	bl	8000a60 <__aeabi_dcmpeq>
 8008614:	2800      	cmp	r0, #0
 8008616:	d09a      	beq.n	800854e <_dtoa_r+0x616>
 8008618:	e7cb      	b.n	80085b2 <_dtoa_r+0x67a>
 800861a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800861c:	2a00      	cmp	r2, #0
 800861e:	f000 808b 	beq.w	8008738 <_dtoa_r+0x800>
 8008622:	9a06      	ldr	r2, [sp, #24]
 8008624:	2a01      	cmp	r2, #1
 8008626:	dc6e      	bgt.n	8008706 <_dtoa_r+0x7ce>
 8008628:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800862a:	2a00      	cmp	r2, #0
 800862c:	d067      	beq.n	80086fe <_dtoa_r+0x7c6>
 800862e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008632:	9f07      	ldr	r7, [sp, #28]
 8008634:	9d05      	ldr	r5, [sp, #20]
 8008636:	9a05      	ldr	r2, [sp, #20]
 8008638:	2101      	movs	r1, #1
 800863a:	441a      	add	r2, r3
 800863c:	4620      	mov	r0, r4
 800863e:	9205      	str	r2, [sp, #20]
 8008640:	4498      	add	r8, r3
 8008642:	f000 fb15 	bl	8008c70 <__i2b>
 8008646:	4606      	mov	r6, r0
 8008648:	2d00      	cmp	r5, #0
 800864a:	dd0c      	ble.n	8008666 <_dtoa_r+0x72e>
 800864c:	f1b8 0f00 	cmp.w	r8, #0
 8008650:	dd09      	ble.n	8008666 <_dtoa_r+0x72e>
 8008652:	4545      	cmp	r5, r8
 8008654:	9a05      	ldr	r2, [sp, #20]
 8008656:	462b      	mov	r3, r5
 8008658:	bfa8      	it	ge
 800865a:	4643      	movge	r3, r8
 800865c:	1ad2      	subs	r2, r2, r3
 800865e:	9205      	str	r2, [sp, #20]
 8008660:	1aed      	subs	r5, r5, r3
 8008662:	eba8 0803 	sub.w	r8, r8, r3
 8008666:	9b07      	ldr	r3, [sp, #28]
 8008668:	b1eb      	cbz	r3, 80086a6 <_dtoa_r+0x76e>
 800866a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800866c:	2b00      	cmp	r3, #0
 800866e:	d067      	beq.n	8008740 <_dtoa_r+0x808>
 8008670:	b18f      	cbz	r7, 8008696 <_dtoa_r+0x75e>
 8008672:	4631      	mov	r1, r6
 8008674:	463a      	mov	r2, r7
 8008676:	4620      	mov	r0, r4
 8008678:	f000 fb9a 	bl	8008db0 <__pow5mult>
 800867c:	9a04      	ldr	r2, [sp, #16]
 800867e:	4601      	mov	r1, r0
 8008680:	4606      	mov	r6, r0
 8008682:	4620      	mov	r0, r4
 8008684:	f000 fafd 	bl	8008c82 <__multiply>
 8008688:	9904      	ldr	r1, [sp, #16]
 800868a:	9008      	str	r0, [sp, #32]
 800868c:	4620      	mov	r0, r4
 800868e:	f000 fa4f 	bl	8008b30 <_Bfree>
 8008692:	9b08      	ldr	r3, [sp, #32]
 8008694:	9304      	str	r3, [sp, #16]
 8008696:	9b07      	ldr	r3, [sp, #28]
 8008698:	1bda      	subs	r2, r3, r7
 800869a:	d004      	beq.n	80086a6 <_dtoa_r+0x76e>
 800869c:	9904      	ldr	r1, [sp, #16]
 800869e:	4620      	mov	r0, r4
 80086a0:	f000 fb86 	bl	8008db0 <__pow5mult>
 80086a4:	9004      	str	r0, [sp, #16]
 80086a6:	2101      	movs	r1, #1
 80086a8:	4620      	mov	r0, r4
 80086aa:	f000 fae1 	bl	8008c70 <__i2b>
 80086ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086b0:	4607      	mov	r7, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f000 81d0 	beq.w	8008a58 <_dtoa_r+0xb20>
 80086b8:	461a      	mov	r2, r3
 80086ba:	4601      	mov	r1, r0
 80086bc:	4620      	mov	r0, r4
 80086be:	f000 fb77 	bl	8008db0 <__pow5mult>
 80086c2:	9b06      	ldr	r3, [sp, #24]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	4607      	mov	r7, r0
 80086c8:	dc40      	bgt.n	800874c <_dtoa_r+0x814>
 80086ca:	9b00      	ldr	r3, [sp, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d139      	bne.n	8008744 <_dtoa_r+0x80c>
 80086d0:	9b01      	ldr	r3, [sp, #4]
 80086d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d136      	bne.n	8008748 <_dtoa_r+0x810>
 80086da:	9b01      	ldr	r3, [sp, #4]
 80086dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086e0:	0d1b      	lsrs	r3, r3, #20
 80086e2:	051b      	lsls	r3, r3, #20
 80086e4:	b12b      	cbz	r3, 80086f2 <_dtoa_r+0x7ba>
 80086e6:	9b05      	ldr	r3, [sp, #20]
 80086e8:	3301      	adds	r3, #1
 80086ea:	9305      	str	r3, [sp, #20]
 80086ec:	f108 0801 	add.w	r8, r8, #1
 80086f0:	2301      	movs	r3, #1
 80086f2:	9307      	str	r3, [sp, #28]
 80086f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d12a      	bne.n	8008750 <_dtoa_r+0x818>
 80086fa:	2001      	movs	r0, #1
 80086fc:	e030      	b.n	8008760 <_dtoa_r+0x828>
 80086fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008700:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008704:	e795      	b.n	8008632 <_dtoa_r+0x6fa>
 8008706:	9b07      	ldr	r3, [sp, #28]
 8008708:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800870c:	42bb      	cmp	r3, r7
 800870e:	bfbf      	itttt	lt
 8008710:	9b07      	ldrlt	r3, [sp, #28]
 8008712:	9707      	strlt	r7, [sp, #28]
 8008714:	1afa      	sublt	r2, r7, r3
 8008716:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008718:	bfbb      	ittet	lt
 800871a:	189b      	addlt	r3, r3, r2
 800871c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800871e:	1bdf      	subge	r7, r3, r7
 8008720:	2700      	movlt	r7, #0
 8008722:	f1b9 0f00 	cmp.w	r9, #0
 8008726:	bfb5      	itete	lt
 8008728:	9b05      	ldrlt	r3, [sp, #20]
 800872a:	9d05      	ldrge	r5, [sp, #20]
 800872c:	eba3 0509 	sublt.w	r5, r3, r9
 8008730:	464b      	movge	r3, r9
 8008732:	bfb8      	it	lt
 8008734:	2300      	movlt	r3, #0
 8008736:	e77e      	b.n	8008636 <_dtoa_r+0x6fe>
 8008738:	9f07      	ldr	r7, [sp, #28]
 800873a:	9d05      	ldr	r5, [sp, #20]
 800873c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800873e:	e783      	b.n	8008648 <_dtoa_r+0x710>
 8008740:	9a07      	ldr	r2, [sp, #28]
 8008742:	e7ab      	b.n	800869c <_dtoa_r+0x764>
 8008744:	2300      	movs	r3, #0
 8008746:	e7d4      	b.n	80086f2 <_dtoa_r+0x7ba>
 8008748:	9b00      	ldr	r3, [sp, #0]
 800874a:	e7d2      	b.n	80086f2 <_dtoa_r+0x7ba>
 800874c:	2300      	movs	r3, #0
 800874e:	9307      	str	r3, [sp, #28]
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008756:	6918      	ldr	r0, [r3, #16]
 8008758:	f000 fa3c 	bl	8008bd4 <__hi0bits>
 800875c:	f1c0 0020 	rsb	r0, r0, #32
 8008760:	4440      	add	r0, r8
 8008762:	f010 001f 	ands.w	r0, r0, #31
 8008766:	d047      	beq.n	80087f8 <_dtoa_r+0x8c0>
 8008768:	f1c0 0320 	rsb	r3, r0, #32
 800876c:	2b04      	cmp	r3, #4
 800876e:	dd3b      	ble.n	80087e8 <_dtoa_r+0x8b0>
 8008770:	9b05      	ldr	r3, [sp, #20]
 8008772:	f1c0 001c 	rsb	r0, r0, #28
 8008776:	4403      	add	r3, r0
 8008778:	9305      	str	r3, [sp, #20]
 800877a:	4405      	add	r5, r0
 800877c:	4480      	add	r8, r0
 800877e:	9b05      	ldr	r3, [sp, #20]
 8008780:	2b00      	cmp	r3, #0
 8008782:	dd05      	ble.n	8008790 <_dtoa_r+0x858>
 8008784:	461a      	mov	r2, r3
 8008786:	9904      	ldr	r1, [sp, #16]
 8008788:	4620      	mov	r0, r4
 800878a:	f000 fb5f 	bl	8008e4c <__lshift>
 800878e:	9004      	str	r0, [sp, #16]
 8008790:	f1b8 0f00 	cmp.w	r8, #0
 8008794:	dd05      	ble.n	80087a2 <_dtoa_r+0x86a>
 8008796:	4639      	mov	r1, r7
 8008798:	4642      	mov	r2, r8
 800879a:	4620      	mov	r0, r4
 800879c:	f000 fb56 	bl	8008e4c <__lshift>
 80087a0:	4607      	mov	r7, r0
 80087a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087a4:	b353      	cbz	r3, 80087fc <_dtoa_r+0x8c4>
 80087a6:	4639      	mov	r1, r7
 80087a8:	9804      	ldr	r0, [sp, #16]
 80087aa:	f000 fba3 	bl	8008ef4 <__mcmp>
 80087ae:	2800      	cmp	r0, #0
 80087b0:	da24      	bge.n	80087fc <_dtoa_r+0x8c4>
 80087b2:	2300      	movs	r3, #0
 80087b4:	220a      	movs	r2, #10
 80087b6:	9904      	ldr	r1, [sp, #16]
 80087b8:	4620      	mov	r0, r4
 80087ba:	f000 f9d0 	bl	8008b5e <__multadd>
 80087be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087c0:	9004      	str	r0, [sp, #16]
 80087c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f000 814d 	beq.w	8008a66 <_dtoa_r+0xb2e>
 80087cc:	2300      	movs	r3, #0
 80087ce:	4631      	mov	r1, r6
 80087d0:	220a      	movs	r2, #10
 80087d2:	4620      	mov	r0, r4
 80087d4:	f000 f9c3 	bl	8008b5e <__multadd>
 80087d8:	9b02      	ldr	r3, [sp, #8]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	4606      	mov	r6, r0
 80087de:	dc4f      	bgt.n	8008880 <_dtoa_r+0x948>
 80087e0:	9b06      	ldr	r3, [sp, #24]
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	dd4c      	ble.n	8008880 <_dtoa_r+0x948>
 80087e6:	e011      	b.n	800880c <_dtoa_r+0x8d4>
 80087e8:	d0c9      	beq.n	800877e <_dtoa_r+0x846>
 80087ea:	9a05      	ldr	r2, [sp, #20]
 80087ec:	331c      	adds	r3, #28
 80087ee:	441a      	add	r2, r3
 80087f0:	9205      	str	r2, [sp, #20]
 80087f2:	441d      	add	r5, r3
 80087f4:	4498      	add	r8, r3
 80087f6:	e7c2      	b.n	800877e <_dtoa_r+0x846>
 80087f8:	4603      	mov	r3, r0
 80087fa:	e7f6      	b.n	80087ea <_dtoa_r+0x8b2>
 80087fc:	f1b9 0f00 	cmp.w	r9, #0
 8008800:	dc38      	bgt.n	8008874 <_dtoa_r+0x93c>
 8008802:	9b06      	ldr	r3, [sp, #24]
 8008804:	2b02      	cmp	r3, #2
 8008806:	dd35      	ble.n	8008874 <_dtoa_r+0x93c>
 8008808:	f8cd 9008 	str.w	r9, [sp, #8]
 800880c:	9b02      	ldr	r3, [sp, #8]
 800880e:	b963      	cbnz	r3, 800882a <_dtoa_r+0x8f2>
 8008810:	4639      	mov	r1, r7
 8008812:	2205      	movs	r2, #5
 8008814:	4620      	mov	r0, r4
 8008816:	f000 f9a2 	bl	8008b5e <__multadd>
 800881a:	4601      	mov	r1, r0
 800881c:	4607      	mov	r7, r0
 800881e:	9804      	ldr	r0, [sp, #16]
 8008820:	f000 fb68 	bl	8008ef4 <__mcmp>
 8008824:	2800      	cmp	r0, #0
 8008826:	f73f adcc 	bgt.w	80083c2 <_dtoa_r+0x48a>
 800882a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800882c:	465d      	mov	r5, fp
 800882e:	ea6f 0a03 	mvn.w	sl, r3
 8008832:	f04f 0900 	mov.w	r9, #0
 8008836:	4639      	mov	r1, r7
 8008838:	4620      	mov	r0, r4
 800883a:	f000 f979 	bl	8008b30 <_Bfree>
 800883e:	2e00      	cmp	r6, #0
 8008840:	f43f aeb7 	beq.w	80085b2 <_dtoa_r+0x67a>
 8008844:	f1b9 0f00 	cmp.w	r9, #0
 8008848:	d005      	beq.n	8008856 <_dtoa_r+0x91e>
 800884a:	45b1      	cmp	r9, r6
 800884c:	d003      	beq.n	8008856 <_dtoa_r+0x91e>
 800884e:	4649      	mov	r1, r9
 8008850:	4620      	mov	r0, r4
 8008852:	f000 f96d 	bl	8008b30 <_Bfree>
 8008856:	4631      	mov	r1, r6
 8008858:	4620      	mov	r0, r4
 800885a:	f000 f969 	bl	8008b30 <_Bfree>
 800885e:	e6a8      	b.n	80085b2 <_dtoa_r+0x67a>
 8008860:	2700      	movs	r7, #0
 8008862:	463e      	mov	r6, r7
 8008864:	e7e1      	b.n	800882a <_dtoa_r+0x8f2>
 8008866:	f8dd a020 	ldr.w	sl, [sp, #32]
 800886a:	463e      	mov	r6, r7
 800886c:	e5a9      	b.n	80083c2 <_dtoa_r+0x48a>
 800886e:	bf00      	nop
 8008870:	40240000 	.word	0x40240000
 8008874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008876:	f8cd 9008 	str.w	r9, [sp, #8]
 800887a:	2b00      	cmp	r3, #0
 800887c:	f000 80fa 	beq.w	8008a74 <_dtoa_r+0xb3c>
 8008880:	2d00      	cmp	r5, #0
 8008882:	dd05      	ble.n	8008890 <_dtoa_r+0x958>
 8008884:	4631      	mov	r1, r6
 8008886:	462a      	mov	r2, r5
 8008888:	4620      	mov	r0, r4
 800888a:	f000 fadf 	bl	8008e4c <__lshift>
 800888e:	4606      	mov	r6, r0
 8008890:	9b07      	ldr	r3, [sp, #28]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d04c      	beq.n	8008930 <_dtoa_r+0x9f8>
 8008896:	6871      	ldr	r1, [r6, #4]
 8008898:	4620      	mov	r0, r4
 800889a:	f000 f915 	bl	8008ac8 <_Balloc>
 800889e:	6932      	ldr	r2, [r6, #16]
 80088a0:	3202      	adds	r2, #2
 80088a2:	4605      	mov	r5, r0
 80088a4:	0092      	lsls	r2, r2, #2
 80088a6:	f106 010c 	add.w	r1, r6, #12
 80088aa:	300c      	adds	r0, #12
 80088ac:	f7fe fe46 	bl	800753c <memcpy>
 80088b0:	2201      	movs	r2, #1
 80088b2:	4629      	mov	r1, r5
 80088b4:	4620      	mov	r0, r4
 80088b6:	f000 fac9 	bl	8008e4c <__lshift>
 80088ba:	9b00      	ldr	r3, [sp, #0]
 80088bc:	f8cd b014 	str.w	fp, [sp, #20]
 80088c0:	f003 0301 	and.w	r3, r3, #1
 80088c4:	46b1      	mov	r9, r6
 80088c6:	9307      	str	r3, [sp, #28]
 80088c8:	4606      	mov	r6, r0
 80088ca:	4639      	mov	r1, r7
 80088cc:	9804      	ldr	r0, [sp, #16]
 80088ce:	f7ff faa7 	bl	8007e20 <quorem>
 80088d2:	4649      	mov	r1, r9
 80088d4:	4605      	mov	r5, r0
 80088d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80088da:	9804      	ldr	r0, [sp, #16]
 80088dc:	f000 fb0a 	bl	8008ef4 <__mcmp>
 80088e0:	4632      	mov	r2, r6
 80088e2:	9000      	str	r0, [sp, #0]
 80088e4:	4639      	mov	r1, r7
 80088e6:	4620      	mov	r0, r4
 80088e8:	f000 fb1e 	bl	8008f28 <__mdiff>
 80088ec:	68c3      	ldr	r3, [r0, #12]
 80088ee:	4602      	mov	r2, r0
 80088f0:	bb03      	cbnz	r3, 8008934 <_dtoa_r+0x9fc>
 80088f2:	4601      	mov	r1, r0
 80088f4:	9008      	str	r0, [sp, #32]
 80088f6:	9804      	ldr	r0, [sp, #16]
 80088f8:	f000 fafc 	bl	8008ef4 <__mcmp>
 80088fc:	9a08      	ldr	r2, [sp, #32]
 80088fe:	4603      	mov	r3, r0
 8008900:	4611      	mov	r1, r2
 8008902:	4620      	mov	r0, r4
 8008904:	9308      	str	r3, [sp, #32]
 8008906:	f000 f913 	bl	8008b30 <_Bfree>
 800890a:	9b08      	ldr	r3, [sp, #32]
 800890c:	b9a3      	cbnz	r3, 8008938 <_dtoa_r+0xa00>
 800890e:	9a06      	ldr	r2, [sp, #24]
 8008910:	b992      	cbnz	r2, 8008938 <_dtoa_r+0xa00>
 8008912:	9a07      	ldr	r2, [sp, #28]
 8008914:	b982      	cbnz	r2, 8008938 <_dtoa_r+0xa00>
 8008916:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800891a:	d029      	beq.n	8008970 <_dtoa_r+0xa38>
 800891c:	9b00      	ldr	r3, [sp, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	dd01      	ble.n	8008926 <_dtoa_r+0x9ee>
 8008922:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008926:	9b05      	ldr	r3, [sp, #20]
 8008928:	1c5d      	adds	r5, r3, #1
 800892a:	f883 8000 	strb.w	r8, [r3]
 800892e:	e782      	b.n	8008836 <_dtoa_r+0x8fe>
 8008930:	4630      	mov	r0, r6
 8008932:	e7c2      	b.n	80088ba <_dtoa_r+0x982>
 8008934:	2301      	movs	r3, #1
 8008936:	e7e3      	b.n	8008900 <_dtoa_r+0x9c8>
 8008938:	9a00      	ldr	r2, [sp, #0]
 800893a:	2a00      	cmp	r2, #0
 800893c:	db04      	blt.n	8008948 <_dtoa_r+0xa10>
 800893e:	d125      	bne.n	800898c <_dtoa_r+0xa54>
 8008940:	9a06      	ldr	r2, [sp, #24]
 8008942:	bb1a      	cbnz	r2, 800898c <_dtoa_r+0xa54>
 8008944:	9a07      	ldr	r2, [sp, #28]
 8008946:	bb0a      	cbnz	r2, 800898c <_dtoa_r+0xa54>
 8008948:	2b00      	cmp	r3, #0
 800894a:	ddec      	ble.n	8008926 <_dtoa_r+0x9ee>
 800894c:	2201      	movs	r2, #1
 800894e:	9904      	ldr	r1, [sp, #16]
 8008950:	4620      	mov	r0, r4
 8008952:	f000 fa7b 	bl	8008e4c <__lshift>
 8008956:	4639      	mov	r1, r7
 8008958:	9004      	str	r0, [sp, #16]
 800895a:	f000 facb 	bl	8008ef4 <__mcmp>
 800895e:	2800      	cmp	r0, #0
 8008960:	dc03      	bgt.n	800896a <_dtoa_r+0xa32>
 8008962:	d1e0      	bne.n	8008926 <_dtoa_r+0x9ee>
 8008964:	f018 0f01 	tst.w	r8, #1
 8008968:	d0dd      	beq.n	8008926 <_dtoa_r+0x9ee>
 800896a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800896e:	d1d8      	bne.n	8008922 <_dtoa_r+0x9ea>
 8008970:	9b05      	ldr	r3, [sp, #20]
 8008972:	9a05      	ldr	r2, [sp, #20]
 8008974:	1c5d      	adds	r5, r3, #1
 8008976:	2339      	movs	r3, #57	; 0x39
 8008978:	7013      	strb	r3, [r2, #0]
 800897a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800897e:	2b39      	cmp	r3, #57	; 0x39
 8008980:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008984:	d04f      	beq.n	8008a26 <_dtoa_r+0xaee>
 8008986:	3301      	adds	r3, #1
 8008988:	7013      	strb	r3, [r2, #0]
 800898a:	e754      	b.n	8008836 <_dtoa_r+0x8fe>
 800898c:	9a05      	ldr	r2, [sp, #20]
 800898e:	2b00      	cmp	r3, #0
 8008990:	f102 0501 	add.w	r5, r2, #1
 8008994:	dd06      	ble.n	80089a4 <_dtoa_r+0xa6c>
 8008996:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800899a:	d0e9      	beq.n	8008970 <_dtoa_r+0xa38>
 800899c:	f108 0801 	add.w	r8, r8, #1
 80089a0:	9b05      	ldr	r3, [sp, #20]
 80089a2:	e7c2      	b.n	800892a <_dtoa_r+0x9f2>
 80089a4:	9a02      	ldr	r2, [sp, #8]
 80089a6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80089aa:	eba5 030b 	sub.w	r3, r5, fp
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d021      	beq.n	80089f6 <_dtoa_r+0xabe>
 80089b2:	2300      	movs	r3, #0
 80089b4:	220a      	movs	r2, #10
 80089b6:	9904      	ldr	r1, [sp, #16]
 80089b8:	4620      	mov	r0, r4
 80089ba:	f000 f8d0 	bl	8008b5e <__multadd>
 80089be:	45b1      	cmp	r9, r6
 80089c0:	9004      	str	r0, [sp, #16]
 80089c2:	f04f 0300 	mov.w	r3, #0
 80089c6:	f04f 020a 	mov.w	r2, #10
 80089ca:	4649      	mov	r1, r9
 80089cc:	4620      	mov	r0, r4
 80089ce:	d105      	bne.n	80089dc <_dtoa_r+0xaa4>
 80089d0:	f000 f8c5 	bl	8008b5e <__multadd>
 80089d4:	4681      	mov	r9, r0
 80089d6:	4606      	mov	r6, r0
 80089d8:	9505      	str	r5, [sp, #20]
 80089da:	e776      	b.n	80088ca <_dtoa_r+0x992>
 80089dc:	f000 f8bf 	bl	8008b5e <__multadd>
 80089e0:	4631      	mov	r1, r6
 80089e2:	4681      	mov	r9, r0
 80089e4:	2300      	movs	r3, #0
 80089e6:	220a      	movs	r2, #10
 80089e8:	4620      	mov	r0, r4
 80089ea:	f000 f8b8 	bl	8008b5e <__multadd>
 80089ee:	4606      	mov	r6, r0
 80089f0:	e7f2      	b.n	80089d8 <_dtoa_r+0xaa0>
 80089f2:	f04f 0900 	mov.w	r9, #0
 80089f6:	2201      	movs	r2, #1
 80089f8:	9904      	ldr	r1, [sp, #16]
 80089fa:	4620      	mov	r0, r4
 80089fc:	f000 fa26 	bl	8008e4c <__lshift>
 8008a00:	4639      	mov	r1, r7
 8008a02:	9004      	str	r0, [sp, #16]
 8008a04:	f000 fa76 	bl	8008ef4 <__mcmp>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	dcb6      	bgt.n	800897a <_dtoa_r+0xa42>
 8008a0c:	d102      	bne.n	8008a14 <_dtoa_r+0xadc>
 8008a0e:	f018 0f01 	tst.w	r8, #1
 8008a12:	d1b2      	bne.n	800897a <_dtoa_r+0xa42>
 8008a14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a18:	2b30      	cmp	r3, #48	; 0x30
 8008a1a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008a1e:	f47f af0a 	bne.w	8008836 <_dtoa_r+0x8fe>
 8008a22:	4615      	mov	r5, r2
 8008a24:	e7f6      	b.n	8008a14 <_dtoa_r+0xadc>
 8008a26:	4593      	cmp	fp, r2
 8008a28:	d105      	bne.n	8008a36 <_dtoa_r+0xafe>
 8008a2a:	2331      	movs	r3, #49	; 0x31
 8008a2c:	f10a 0a01 	add.w	sl, sl, #1
 8008a30:	f88b 3000 	strb.w	r3, [fp]
 8008a34:	e6ff      	b.n	8008836 <_dtoa_r+0x8fe>
 8008a36:	4615      	mov	r5, r2
 8008a38:	e79f      	b.n	800897a <_dtoa_r+0xa42>
 8008a3a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008aa0 <_dtoa_r+0xb68>
 8008a3e:	e007      	b.n	8008a50 <_dtoa_r+0xb18>
 8008a40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a42:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008aa4 <_dtoa_r+0xb6c>
 8008a46:	b11b      	cbz	r3, 8008a50 <_dtoa_r+0xb18>
 8008a48:	f10b 0308 	add.w	r3, fp, #8
 8008a4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a4e:	6013      	str	r3, [r2, #0]
 8008a50:	4658      	mov	r0, fp
 8008a52:	b017      	add	sp, #92	; 0x5c
 8008a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a58:	9b06      	ldr	r3, [sp, #24]
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	f77f ae35 	ble.w	80086ca <_dtoa_r+0x792>
 8008a60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a62:	9307      	str	r3, [sp, #28]
 8008a64:	e649      	b.n	80086fa <_dtoa_r+0x7c2>
 8008a66:	9b02      	ldr	r3, [sp, #8]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	dc03      	bgt.n	8008a74 <_dtoa_r+0xb3c>
 8008a6c:	9b06      	ldr	r3, [sp, #24]
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	f73f aecc 	bgt.w	800880c <_dtoa_r+0x8d4>
 8008a74:	465d      	mov	r5, fp
 8008a76:	4639      	mov	r1, r7
 8008a78:	9804      	ldr	r0, [sp, #16]
 8008a7a:	f7ff f9d1 	bl	8007e20 <quorem>
 8008a7e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008a82:	f805 8b01 	strb.w	r8, [r5], #1
 8008a86:	9a02      	ldr	r2, [sp, #8]
 8008a88:	eba5 030b 	sub.w	r3, r5, fp
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	ddb0      	ble.n	80089f2 <_dtoa_r+0xaba>
 8008a90:	2300      	movs	r3, #0
 8008a92:	220a      	movs	r2, #10
 8008a94:	9904      	ldr	r1, [sp, #16]
 8008a96:	4620      	mov	r0, r4
 8008a98:	f000 f861 	bl	8008b5e <__multadd>
 8008a9c:	9004      	str	r0, [sp, #16]
 8008a9e:	e7ea      	b.n	8008a76 <_dtoa_r+0xb3e>
 8008aa0:	08009408 	.word	0x08009408
 8008aa4:	0800940a 	.word	0x0800940a

08008aa8 <_localeconv_r>:
 8008aa8:	4b04      	ldr	r3, [pc, #16]	; (8008abc <_localeconv_r+0x14>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	6a18      	ldr	r0, [r3, #32]
 8008aae:	4b04      	ldr	r3, [pc, #16]	; (8008ac0 <_localeconv_r+0x18>)
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	bf08      	it	eq
 8008ab4:	4618      	moveq	r0, r3
 8008ab6:	30f0      	adds	r0, #240	; 0xf0
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	2000000c 	.word	0x2000000c
 8008ac0:	20000070 	.word	0x20000070

08008ac4 <__malloc_lock>:
 8008ac4:	4770      	bx	lr

08008ac6 <__malloc_unlock>:
 8008ac6:	4770      	bx	lr

08008ac8 <_Balloc>:
 8008ac8:	b570      	push	{r4, r5, r6, lr}
 8008aca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008acc:	4604      	mov	r4, r0
 8008ace:	460e      	mov	r6, r1
 8008ad0:	b93d      	cbnz	r5, 8008ae2 <_Balloc+0x1a>
 8008ad2:	2010      	movs	r0, #16
 8008ad4:	f7fe fd22 	bl	800751c <malloc>
 8008ad8:	6260      	str	r0, [r4, #36]	; 0x24
 8008ada:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008ade:	6005      	str	r5, [r0, #0]
 8008ae0:	60c5      	str	r5, [r0, #12]
 8008ae2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008ae4:	68eb      	ldr	r3, [r5, #12]
 8008ae6:	b183      	cbz	r3, 8008b0a <_Balloc+0x42>
 8008ae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008af0:	b9b8      	cbnz	r0, 8008b22 <_Balloc+0x5a>
 8008af2:	2101      	movs	r1, #1
 8008af4:	fa01 f506 	lsl.w	r5, r1, r6
 8008af8:	1d6a      	adds	r2, r5, #5
 8008afa:	0092      	lsls	r2, r2, #2
 8008afc:	4620      	mov	r0, r4
 8008afe:	f000 fabf 	bl	8009080 <_calloc_r>
 8008b02:	b160      	cbz	r0, 8008b1e <_Balloc+0x56>
 8008b04:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008b08:	e00e      	b.n	8008b28 <_Balloc+0x60>
 8008b0a:	2221      	movs	r2, #33	; 0x21
 8008b0c:	2104      	movs	r1, #4
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f000 fab6 	bl	8009080 <_calloc_r>
 8008b14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b16:	60e8      	str	r0, [r5, #12]
 8008b18:	68db      	ldr	r3, [r3, #12]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1e4      	bne.n	8008ae8 <_Balloc+0x20>
 8008b1e:	2000      	movs	r0, #0
 8008b20:	bd70      	pop	{r4, r5, r6, pc}
 8008b22:	6802      	ldr	r2, [r0, #0]
 8008b24:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008b28:	2300      	movs	r3, #0
 8008b2a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b2e:	e7f7      	b.n	8008b20 <_Balloc+0x58>

08008b30 <_Bfree>:
 8008b30:	b570      	push	{r4, r5, r6, lr}
 8008b32:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008b34:	4606      	mov	r6, r0
 8008b36:	460d      	mov	r5, r1
 8008b38:	b93c      	cbnz	r4, 8008b4a <_Bfree+0x1a>
 8008b3a:	2010      	movs	r0, #16
 8008b3c:	f7fe fcee 	bl	800751c <malloc>
 8008b40:	6270      	str	r0, [r6, #36]	; 0x24
 8008b42:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b46:	6004      	str	r4, [r0, #0]
 8008b48:	60c4      	str	r4, [r0, #12]
 8008b4a:	b13d      	cbz	r5, 8008b5c <_Bfree+0x2c>
 8008b4c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008b4e:	686a      	ldr	r2, [r5, #4]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b56:	6029      	str	r1, [r5, #0]
 8008b58:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008b5c:	bd70      	pop	{r4, r5, r6, pc}

08008b5e <__multadd>:
 8008b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b62:	690d      	ldr	r5, [r1, #16]
 8008b64:	461f      	mov	r7, r3
 8008b66:	4606      	mov	r6, r0
 8008b68:	460c      	mov	r4, r1
 8008b6a:	f101 0c14 	add.w	ip, r1, #20
 8008b6e:	2300      	movs	r3, #0
 8008b70:	f8dc 0000 	ldr.w	r0, [ip]
 8008b74:	b281      	uxth	r1, r0
 8008b76:	fb02 7101 	mla	r1, r2, r1, r7
 8008b7a:	0c0f      	lsrs	r7, r1, #16
 8008b7c:	0c00      	lsrs	r0, r0, #16
 8008b7e:	fb02 7000 	mla	r0, r2, r0, r7
 8008b82:	b289      	uxth	r1, r1
 8008b84:	3301      	adds	r3, #1
 8008b86:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008b8a:	429d      	cmp	r5, r3
 8008b8c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008b90:	f84c 1b04 	str.w	r1, [ip], #4
 8008b94:	dcec      	bgt.n	8008b70 <__multadd+0x12>
 8008b96:	b1d7      	cbz	r7, 8008bce <__multadd+0x70>
 8008b98:	68a3      	ldr	r3, [r4, #8]
 8008b9a:	42ab      	cmp	r3, r5
 8008b9c:	dc12      	bgt.n	8008bc4 <__multadd+0x66>
 8008b9e:	6861      	ldr	r1, [r4, #4]
 8008ba0:	4630      	mov	r0, r6
 8008ba2:	3101      	adds	r1, #1
 8008ba4:	f7ff ff90 	bl	8008ac8 <_Balloc>
 8008ba8:	6922      	ldr	r2, [r4, #16]
 8008baa:	3202      	adds	r2, #2
 8008bac:	f104 010c 	add.w	r1, r4, #12
 8008bb0:	4680      	mov	r8, r0
 8008bb2:	0092      	lsls	r2, r2, #2
 8008bb4:	300c      	adds	r0, #12
 8008bb6:	f7fe fcc1 	bl	800753c <memcpy>
 8008bba:	4621      	mov	r1, r4
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	f7ff ffb7 	bl	8008b30 <_Bfree>
 8008bc2:	4644      	mov	r4, r8
 8008bc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008bc8:	3501      	adds	r5, #1
 8008bca:	615f      	str	r7, [r3, #20]
 8008bcc:	6125      	str	r5, [r4, #16]
 8008bce:	4620      	mov	r0, r4
 8008bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008bd4 <__hi0bits>:
 8008bd4:	0c02      	lsrs	r2, r0, #16
 8008bd6:	0412      	lsls	r2, r2, #16
 8008bd8:	4603      	mov	r3, r0
 8008bda:	b9b2      	cbnz	r2, 8008c0a <__hi0bits+0x36>
 8008bdc:	0403      	lsls	r3, r0, #16
 8008bde:	2010      	movs	r0, #16
 8008be0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008be4:	bf04      	itt	eq
 8008be6:	021b      	lsleq	r3, r3, #8
 8008be8:	3008      	addeq	r0, #8
 8008bea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008bee:	bf04      	itt	eq
 8008bf0:	011b      	lsleq	r3, r3, #4
 8008bf2:	3004      	addeq	r0, #4
 8008bf4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008bf8:	bf04      	itt	eq
 8008bfa:	009b      	lsleq	r3, r3, #2
 8008bfc:	3002      	addeq	r0, #2
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	db06      	blt.n	8008c10 <__hi0bits+0x3c>
 8008c02:	005b      	lsls	r3, r3, #1
 8008c04:	d503      	bpl.n	8008c0e <__hi0bits+0x3a>
 8008c06:	3001      	adds	r0, #1
 8008c08:	4770      	bx	lr
 8008c0a:	2000      	movs	r0, #0
 8008c0c:	e7e8      	b.n	8008be0 <__hi0bits+0xc>
 8008c0e:	2020      	movs	r0, #32
 8008c10:	4770      	bx	lr

08008c12 <__lo0bits>:
 8008c12:	6803      	ldr	r3, [r0, #0]
 8008c14:	f013 0207 	ands.w	r2, r3, #7
 8008c18:	4601      	mov	r1, r0
 8008c1a:	d00b      	beq.n	8008c34 <__lo0bits+0x22>
 8008c1c:	07da      	lsls	r2, r3, #31
 8008c1e:	d423      	bmi.n	8008c68 <__lo0bits+0x56>
 8008c20:	0798      	lsls	r0, r3, #30
 8008c22:	bf49      	itett	mi
 8008c24:	085b      	lsrmi	r3, r3, #1
 8008c26:	089b      	lsrpl	r3, r3, #2
 8008c28:	2001      	movmi	r0, #1
 8008c2a:	600b      	strmi	r3, [r1, #0]
 8008c2c:	bf5c      	itt	pl
 8008c2e:	600b      	strpl	r3, [r1, #0]
 8008c30:	2002      	movpl	r0, #2
 8008c32:	4770      	bx	lr
 8008c34:	b298      	uxth	r0, r3
 8008c36:	b9a8      	cbnz	r0, 8008c64 <__lo0bits+0x52>
 8008c38:	0c1b      	lsrs	r3, r3, #16
 8008c3a:	2010      	movs	r0, #16
 8008c3c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008c40:	bf04      	itt	eq
 8008c42:	0a1b      	lsreq	r3, r3, #8
 8008c44:	3008      	addeq	r0, #8
 8008c46:	071a      	lsls	r2, r3, #28
 8008c48:	bf04      	itt	eq
 8008c4a:	091b      	lsreq	r3, r3, #4
 8008c4c:	3004      	addeq	r0, #4
 8008c4e:	079a      	lsls	r2, r3, #30
 8008c50:	bf04      	itt	eq
 8008c52:	089b      	lsreq	r3, r3, #2
 8008c54:	3002      	addeq	r0, #2
 8008c56:	07da      	lsls	r2, r3, #31
 8008c58:	d402      	bmi.n	8008c60 <__lo0bits+0x4e>
 8008c5a:	085b      	lsrs	r3, r3, #1
 8008c5c:	d006      	beq.n	8008c6c <__lo0bits+0x5a>
 8008c5e:	3001      	adds	r0, #1
 8008c60:	600b      	str	r3, [r1, #0]
 8008c62:	4770      	bx	lr
 8008c64:	4610      	mov	r0, r2
 8008c66:	e7e9      	b.n	8008c3c <__lo0bits+0x2a>
 8008c68:	2000      	movs	r0, #0
 8008c6a:	4770      	bx	lr
 8008c6c:	2020      	movs	r0, #32
 8008c6e:	4770      	bx	lr

08008c70 <__i2b>:
 8008c70:	b510      	push	{r4, lr}
 8008c72:	460c      	mov	r4, r1
 8008c74:	2101      	movs	r1, #1
 8008c76:	f7ff ff27 	bl	8008ac8 <_Balloc>
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	6144      	str	r4, [r0, #20]
 8008c7e:	6102      	str	r2, [r0, #16]
 8008c80:	bd10      	pop	{r4, pc}

08008c82 <__multiply>:
 8008c82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c86:	4614      	mov	r4, r2
 8008c88:	690a      	ldr	r2, [r1, #16]
 8008c8a:	6923      	ldr	r3, [r4, #16]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	bfb8      	it	lt
 8008c90:	460b      	movlt	r3, r1
 8008c92:	4688      	mov	r8, r1
 8008c94:	bfbc      	itt	lt
 8008c96:	46a0      	movlt	r8, r4
 8008c98:	461c      	movlt	r4, r3
 8008c9a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008c9e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008ca2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ca6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008caa:	eb07 0609 	add.w	r6, r7, r9
 8008cae:	42b3      	cmp	r3, r6
 8008cb0:	bfb8      	it	lt
 8008cb2:	3101      	addlt	r1, #1
 8008cb4:	f7ff ff08 	bl	8008ac8 <_Balloc>
 8008cb8:	f100 0514 	add.w	r5, r0, #20
 8008cbc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008cc0:	462b      	mov	r3, r5
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	4573      	cmp	r3, lr
 8008cc6:	d316      	bcc.n	8008cf6 <__multiply+0x74>
 8008cc8:	f104 0214 	add.w	r2, r4, #20
 8008ccc:	f108 0114 	add.w	r1, r8, #20
 8008cd0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008cd4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	9b00      	ldr	r3, [sp, #0]
 8008cdc:	9201      	str	r2, [sp, #4]
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d80c      	bhi.n	8008cfc <__multiply+0x7a>
 8008ce2:	2e00      	cmp	r6, #0
 8008ce4:	dd03      	ble.n	8008cee <__multiply+0x6c>
 8008ce6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d05d      	beq.n	8008daa <__multiply+0x128>
 8008cee:	6106      	str	r6, [r0, #16]
 8008cf0:	b003      	add	sp, #12
 8008cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cf6:	f843 2b04 	str.w	r2, [r3], #4
 8008cfa:	e7e3      	b.n	8008cc4 <__multiply+0x42>
 8008cfc:	f8b2 b000 	ldrh.w	fp, [r2]
 8008d00:	f1bb 0f00 	cmp.w	fp, #0
 8008d04:	d023      	beq.n	8008d4e <__multiply+0xcc>
 8008d06:	4689      	mov	r9, r1
 8008d08:	46ac      	mov	ip, r5
 8008d0a:	f04f 0800 	mov.w	r8, #0
 8008d0e:	f859 4b04 	ldr.w	r4, [r9], #4
 8008d12:	f8dc a000 	ldr.w	sl, [ip]
 8008d16:	b2a3      	uxth	r3, r4
 8008d18:	fa1f fa8a 	uxth.w	sl, sl
 8008d1c:	fb0b a303 	mla	r3, fp, r3, sl
 8008d20:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008d24:	f8dc 4000 	ldr.w	r4, [ip]
 8008d28:	4443      	add	r3, r8
 8008d2a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008d2e:	fb0b 840a 	mla	r4, fp, sl, r8
 8008d32:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008d36:	46e2      	mov	sl, ip
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008d3e:	454f      	cmp	r7, r9
 8008d40:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008d44:	f84a 3b04 	str.w	r3, [sl], #4
 8008d48:	d82b      	bhi.n	8008da2 <__multiply+0x120>
 8008d4a:	f8cc 8004 	str.w	r8, [ip, #4]
 8008d4e:	9b01      	ldr	r3, [sp, #4]
 8008d50:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008d54:	3204      	adds	r2, #4
 8008d56:	f1ba 0f00 	cmp.w	sl, #0
 8008d5a:	d020      	beq.n	8008d9e <__multiply+0x11c>
 8008d5c:	682b      	ldr	r3, [r5, #0]
 8008d5e:	4689      	mov	r9, r1
 8008d60:	46a8      	mov	r8, r5
 8008d62:	f04f 0b00 	mov.w	fp, #0
 8008d66:	f8b9 c000 	ldrh.w	ip, [r9]
 8008d6a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008d6e:	fb0a 440c 	mla	r4, sl, ip, r4
 8008d72:	445c      	add	r4, fp
 8008d74:	46c4      	mov	ip, r8
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008d7c:	f84c 3b04 	str.w	r3, [ip], #4
 8008d80:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d84:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008d88:	0c1b      	lsrs	r3, r3, #16
 8008d8a:	fb0a b303 	mla	r3, sl, r3, fp
 8008d8e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008d92:	454f      	cmp	r7, r9
 8008d94:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008d98:	d805      	bhi.n	8008da6 <__multiply+0x124>
 8008d9a:	f8c8 3004 	str.w	r3, [r8, #4]
 8008d9e:	3504      	adds	r5, #4
 8008da0:	e79b      	b.n	8008cda <__multiply+0x58>
 8008da2:	46d4      	mov	ip, sl
 8008da4:	e7b3      	b.n	8008d0e <__multiply+0x8c>
 8008da6:	46e0      	mov	r8, ip
 8008da8:	e7dd      	b.n	8008d66 <__multiply+0xe4>
 8008daa:	3e01      	subs	r6, #1
 8008dac:	e799      	b.n	8008ce2 <__multiply+0x60>
	...

08008db0 <__pow5mult>:
 8008db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008db4:	4615      	mov	r5, r2
 8008db6:	f012 0203 	ands.w	r2, r2, #3
 8008dba:	4606      	mov	r6, r0
 8008dbc:	460f      	mov	r7, r1
 8008dbe:	d007      	beq.n	8008dd0 <__pow5mult+0x20>
 8008dc0:	3a01      	subs	r2, #1
 8008dc2:	4c21      	ldr	r4, [pc, #132]	; (8008e48 <__pow5mult+0x98>)
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008dca:	f7ff fec8 	bl	8008b5e <__multadd>
 8008dce:	4607      	mov	r7, r0
 8008dd0:	10ad      	asrs	r5, r5, #2
 8008dd2:	d035      	beq.n	8008e40 <__pow5mult+0x90>
 8008dd4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008dd6:	b93c      	cbnz	r4, 8008de8 <__pow5mult+0x38>
 8008dd8:	2010      	movs	r0, #16
 8008dda:	f7fe fb9f 	bl	800751c <malloc>
 8008dde:	6270      	str	r0, [r6, #36]	; 0x24
 8008de0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008de4:	6004      	str	r4, [r0, #0]
 8008de6:	60c4      	str	r4, [r0, #12]
 8008de8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008dec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008df0:	b94c      	cbnz	r4, 8008e06 <__pow5mult+0x56>
 8008df2:	f240 2171 	movw	r1, #625	; 0x271
 8008df6:	4630      	mov	r0, r6
 8008df8:	f7ff ff3a 	bl	8008c70 <__i2b>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e02:	4604      	mov	r4, r0
 8008e04:	6003      	str	r3, [r0, #0]
 8008e06:	f04f 0800 	mov.w	r8, #0
 8008e0a:	07eb      	lsls	r3, r5, #31
 8008e0c:	d50a      	bpl.n	8008e24 <__pow5mult+0x74>
 8008e0e:	4639      	mov	r1, r7
 8008e10:	4622      	mov	r2, r4
 8008e12:	4630      	mov	r0, r6
 8008e14:	f7ff ff35 	bl	8008c82 <__multiply>
 8008e18:	4639      	mov	r1, r7
 8008e1a:	4681      	mov	r9, r0
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	f7ff fe87 	bl	8008b30 <_Bfree>
 8008e22:	464f      	mov	r7, r9
 8008e24:	106d      	asrs	r5, r5, #1
 8008e26:	d00b      	beq.n	8008e40 <__pow5mult+0x90>
 8008e28:	6820      	ldr	r0, [r4, #0]
 8008e2a:	b938      	cbnz	r0, 8008e3c <__pow5mult+0x8c>
 8008e2c:	4622      	mov	r2, r4
 8008e2e:	4621      	mov	r1, r4
 8008e30:	4630      	mov	r0, r6
 8008e32:	f7ff ff26 	bl	8008c82 <__multiply>
 8008e36:	6020      	str	r0, [r4, #0]
 8008e38:	f8c0 8000 	str.w	r8, [r0]
 8008e3c:	4604      	mov	r4, r0
 8008e3e:	e7e4      	b.n	8008e0a <__pow5mult+0x5a>
 8008e40:	4638      	mov	r0, r7
 8008e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e46:	bf00      	nop
 8008e48:	08009508 	.word	0x08009508

08008e4c <__lshift>:
 8008e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e50:	460c      	mov	r4, r1
 8008e52:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e56:	6923      	ldr	r3, [r4, #16]
 8008e58:	6849      	ldr	r1, [r1, #4]
 8008e5a:	eb0a 0903 	add.w	r9, sl, r3
 8008e5e:	68a3      	ldr	r3, [r4, #8]
 8008e60:	4607      	mov	r7, r0
 8008e62:	4616      	mov	r6, r2
 8008e64:	f109 0501 	add.w	r5, r9, #1
 8008e68:	42ab      	cmp	r3, r5
 8008e6a:	db32      	blt.n	8008ed2 <__lshift+0x86>
 8008e6c:	4638      	mov	r0, r7
 8008e6e:	f7ff fe2b 	bl	8008ac8 <_Balloc>
 8008e72:	2300      	movs	r3, #0
 8008e74:	4680      	mov	r8, r0
 8008e76:	f100 0114 	add.w	r1, r0, #20
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	4553      	cmp	r3, sl
 8008e7e:	db2b      	blt.n	8008ed8 <__lshift+0x8c>
 8008e80:	6920      	ldr	r0, [r4, #16]
 8008e82:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e86:	f104 0314 	add.w	r3, r4, #20
 8008e8a:	f016 021f 	ands.w	r2, r6, #31
 8008e8e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e92:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e96:	d025      	beq.n	8008ee4 <__lshift+0x98>
 8008e98:	f1c2 0e20 	rsb	lr, r2, #32
 8008e9c:	2000      	movs	r0, #0
 8008e9e:	681e      	ldr	r6, [r3, #0]
 8008ea0:	468a      	mov	sl, r1
 8008ea2:	4096      	lsls	r6, r2
 8008ea4:	4330      	orrs	r0, r6
 8008ea6:	f84a 0b04 	str.w	r0, [sl], #4
 8008eaa:	f853 0b04 	ldr.w	r0, [r3], #4
 8008eae:	459c      	cmp	ip, r3
 8008eb0:	fa20 f00e 	lsr.w	r0, r0, lr
 8008eb4:	d814      	bhi.n	8008ee0 <__lshift+0x94>
 8008eb6:	6048      	str	r0, [r1, #4]
 8008eb8:	b108      	cbz	r0, 8008ebe <__lshift+0x72>
 8008eba:	f109 0502 	add.w	r5, r9, #2
 8008ebe:	3d01      	subs	r5, #1
 8008ec0:	4638      	mov	r0, r7
 8008ec2:	f8c8 5010 	str.w	r5, [r8, #16]
 8008ec6:	4621      	mov	r1, r4
 8008ec8:	f7ff fe32 	bl	8008b30 <_Bfree>
 8008ecc:	4640      	mov	r0, r8
 8008ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ed2:	3101      	adds	r1, #1
 8008ed4:	005b      	lsls	r3, r3, #1
 8008ed6:	e7c7      	b.n	8008e68 <__lshift+0x1c>
 8008ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008edc:	3301      	adds	r3, #1
 8008ede:	e7cd      	b.n	8008e7c <__lshift+0x30>
 8008ee0:	4651      	mov	r1, sl
 8008ee2:	e7dc      	b.n	8008e9e <__lshift+0x52>
 8008ee4:	3904      	subs	r1, #4
 8008ee6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eea:	f841 2f04 	str.w	r2, [r1, #4]!
 8008eee:	459c      	cmp	ip, r3
 8008ef0:	d8f9      	bhi.n	8008ee6 <__lshift+0x9a>
 8008ef2:	e7e4      	b.n	8008ebe <__lshift+0x72>

08008ef4 <__mcmp>:
 8008ef4:	6903      	ldr	r3, [r0, #16]
 8008ef6:	690a      	ldr	r2, [r1, #16]
 8008ef8:	1a9b      	subs	r3, r3, r2
 8008efa:	b530      	push	{r4, r5, lr}
 8008efc:	d10c      	bne.n	8008f18 <__mcmp+0x24>
 8008efe:	0092      	lsls	r2, r2, #2
 8008f00:	3014      	adds	r0, #20
 8008f02:	3114      	adds	r1, #20
 8008f04:	1884      	adds	r4, r0, r2
 8008f06:	4411      	add	r1, r2
 8008f08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008f0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008f10:	4295      	cmp	r5, r2
 8008f12:	d003      	beq.n	8008f1c <__mcmp+0x28>
 8008f14:	d305      	bcc.n	8008f22 <__mcmp+0x2e>
 8008f16:	2301      	movs	r3, #1
 8008f18:	4618      	mov	r0, r3
 8008f1a:	bd30      	pop	{r4, r5, pc}
 8008f1c:	42a0      	cmp	r0, r4
 8008f1e:	d3f3      	bcc.n	8008f08 <__mcmp+0x14>
 8008f20:	e7fa      	b.n	8008f18 <__mcmp+0x24>
 8008f22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f26:	e7f7      	b.n	8008f18 <__mcmp+0x24>

08008f28 <__mdiff>:
 8008f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f2c:	460d      	mov	r5, r1
 8008f2e:	4607      	mov	r7, r0
 8008f30:	4611      	mov	r1, r2
 8008f32:	4628      	mov	r0, r5
 8008f34:	4614      	mov	r4, r2
 8008f36:	f7ff ffdd 	bl	8008ef4 <__mcmp>
 8008f3a:	1e06      	subs	r6, r0, #0
 8008f3c:	d108      	bne.n	8008f50 <__mdiff+0x28>
 8008f3e:	4631      	mov	r1, r6
 8008f40:	4638      	mov	r0, r7
 8008f42:	f7ff fdc1 	bl	8008ac8 <_Balloc>
 8008f46:	2301      	movs	r3, #1
 8008f48:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f50:	bfa4      	itt	ge
 8008f52:	4623      	movge	r3, r4
 8008f54:	462c      	movge	r4, r5
 8008f56:	4638      	mov	r0, r7
 8008f58:	6861      	ldr	r1, [r4, #4]
 8008f5a:	bfa6      	itte	ge
 8008f5c:	461d      	movge	r5, r3
 8008f5e:	2600      	movge	r6, #0
 8008f60:	2601      	movlt	r6, #1
 8008f62:	f7ff fdb1 	bl	8008ac8 <_Balloc>
 8008f66:	692b      	ldr	r3, [r5, #16]
 8008f68:	60c6      	str	r6, [r0, #12]
 8008f6a:	6926      	ldr	r6, [r4, #16]
 8008f6c:	f105 0914 	add.w	r9, r5, #20
 8008f70:	f104 0214 	add.w	r2, r4, #20
 8008f74:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008f78:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008f7c:	f100 0514 	add.w	r5, r0, #20
 8008f80:	f04f 0e00 	mov.w	lr, #0
 8008f84:	f852 ab04 	ldr.w	sl, [r2], #4
 8008f88:	f859 4b04 	ldr.w	r4, [r9], #4
 8008f8c:	fa1e f18a 	uxtah	r1, lr, sl
 8008f90:	b2a3      	uxth	r3, r4
 8008f92:	1ac9      	subs	r1, r1, r3
 8008f94:	0c23      	lsrs	r3, r4, #16
 8008f96:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008f9a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008f9e:	b289      	uxth	r1, r1
 8008fa0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008fa4:	45c8      	cmp	r8, r9
 8008fa6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008faa:	4694      	mov	ip, r2
 8008fac:	f845 3b04 	str.w	r3, [r5], #4
 8008fb0:	d8e8      	bhi.n	8008f84 <__mdiff+0x5c>
 8008fb2:	45bc      	cmp	ip, r7
 8008fb4:	d304      	bcc.n	8008fc0 <__mdiff+0x98>
 8008fb6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008fba:	b183      	cbz	r3, 8008fde <__mdiff+0xb6>
 8008fbc:	6106      	str	r6, [r0, #16]
 8008fbe:	e7c5      	b.n	8008f4c <__mdiff+0x24>
 8008fc0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008fc4:	fa1e f381 	uxtah	r3, lr, r1
 8008fc8:	141a      	asrs	r2, r3, #16
 8008fca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008fd4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008fd8:	f845 3b04 	str.w	r3, [r5], #4
 8008fdc:	e7e9      	b.n	8008fb2 <__mdiff+0x8a>
 8008fde:	3e01      	subs	r6, #1
 8008fe0:	e7e9      	b.n	8008fb6 <__mdiff+0x8e>

08008fe2 <__d2b>:
 8008fe2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008fe6:	460e      	mov	r6, r1
 8008fe8:	2101      	movs	r1, #1
 8008fea:	ec59 8b10 	vmov	r8, r9, d0
 8008fee:	4615      	mov	r5, r2
 8008ff0:	f7ff fd6a 	bl	8008ac8 <_Balloc>
 8008ff4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008ff8:	4607      	mov	r7, r0
 8008ffa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ffe:	bb34      	cbnz	r4, 800904e <__d2b+0x6c>
 8009000:	9301      	str	r3, [sp, #4]
 8009002:	f1b8 0300 	subs.w	r3, r8, #0
 8009006:	d027      	beq.n	8009058 <__d2b+0x76>
 8009008:	a802      	add	r0, sp, #8
 800900a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800900e:	f7ff fe00 	bl	8008c12 <__lo0bits>
 8009012:	9900      	ldr	r1, [sp, #0]
 8009014:	b1f0      	cbz	r0, 8009054 <__d2b+0x72>
 8009016:	9a01      	ldr	r2, [sp, #4]
 8009018:	f1c0 0320 	rsb	r3, r0, #32
 800901c:	fa02 f303 	lsl.w	r3, r2, r3
 8009020:	430b      	orrs	r3, r1
 8009022:	40c2      	lsrs	r2, r0
 8009024:	617b      	str	r3, [r7, #20]
 8009026:	9201      	str	r2, [sp, #4]
 8009028:	9b01      	ldr	r3, [sp, #4]
 800902a:	61bb      	str	r3, [r7, #24]
 800902c:	2b00      	cmp	r3, #0
 800902e:	bf14      	ite	ne
 8009030:	2102      	movne	r1, #2
 8009032:	2101      	moveq	r1, #1
 8009034:	6139      	str	r1, [r7, #16]
 8009036:	b1c4      	cbz	r4, 800906a <__d2b+0x88>
 8009038:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800903c:	4404      	add	r4, r0
 800903e:	6034      	str	r4, [r6, #0]
 8009040:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009044:	6028      	str	r0, [r5, #0]
 8009046:	4638      	mov	r0, r7
 8009048:	b003      	add	sp, #12
 800904a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800904e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009052:	e7d5      	b.n	8009000 <__d2b+0x1e>
 8009054:	6179      	str	r1, [r7, #20]
 8009056:	e7e7      	b.n	8009028 <__d2b+0x46>
 8009058:	a801      	add	r0, sp, #4
 800905a:	f7ff fdda 	bl	8008c12 <__lo0bits>
 800905e:	9b01      	ldr	r3, [sp, #4]
 8009060:	617b      	str	r3, [r7, #20]
 8009062:	2101      	movs	r1, #1
 8009064:	6139      	str	r1, [r7, #16]
 8009066:	3020      	adds	r0, #32
 8009068:	e7e5      	b.n	8009036 <__d2b+0x54>
 800906a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800906e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009072:	6030      	str	r0, [r6, #0]
 8009074:	6918      	ldr	r0, [r3, #16]
 8009076:	f7ff fdad 	bl	8008bd4 <__hi0bits>
 800907a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800907e:	e7e1      	b.n	8009044 <__d2b+0x62>

08009080 <_calloc_r>:
 8009080:	b538      	push	{r3, r4, r5, lr}
 8009082:	fb02 f401 	mul.w	r4, r2, r1
 8009086:	4621      	mov	r1, r4
 8009088:	f7fe fad2 	bl	8007630 <_malloc_r>
 800908c:	4605      	mov	r5, r0
 800908e:	b118      	cbz	r0, 8009098 <_calloc_r+0x18>
 8009090:	4622      	mov	r2, r4
 8009092:	2100      	movs	r1, #0
 8009094:	f7fe fa76 	bl	8007584 <memset>
 8009098:	4628      	mov	r0, r5
 800909a:	bd38      	pop	{r3, r4, r5, pc}

0800909c <__ascii_mbtowc>:
 800909c:	b082      	sub	sp, #8
 800909e:	b901      	cbnz	r1, 80090a2 <__ascii_mbtowc+0x6>
 80090a0:	a901      	add	r1, sp, #4
 80090a2:	b142      	cbz	r2, 80090b6 <__ascii_mbtowc+0x1a>
 80090a4:	b14b      	cbz	r3, 80090ba <__ascii_mbtowc+0x1e>
 80090a6:	7813      	ldrb	r3, [r2, #0]
 80090a8:	600b      	str	r3, [r1, #0]
 80090aa:	7812      	ldrb	r2, [r2, #0]
 80090ac:	1c10      	adds	r0, r2, #0
 80090ae:	bf18      	it	ne
 80090b0:	2001      	movne	r0, #1
 80090b2:	b002      	add	sp, #8
 80090b4:	4770      	bx	lr
 80090b6:	4610      	mov	r0, r2
 80090b8:	e7fb      	b.n	80090b2 <__ascii_mbtowc+0x16>
 80090ba:	f06f 0001 	mvn.w	r0, #1
 80090be:	e7f8      	b.n	80090b2 <__ascii_mbtowc+0x16>

080090c0 <__ascii_wctomb>:
 80090c0:	b149      	cbz	r1, 80090d6 <__ascii_wctomb+0x16>
 80090c2:	2aff      	cmp	r2, #255	; 0xff
 80090c4:	bf85      	ittet	hi
 80090c6:	238a      	movhi	r3, #138	; 0x8a
 80090c8:	6003      	strhi	r3, [r0, #0]
 80090ca:	700a      	strbls	r2, [r1, #0]
 80090cc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80090d0:	bf98      	it	ls
 80090d2:	2001      	movls	r0, #1
 80090d4:	4770      	bx	lr
 80090d6:	4608      	mov	r0, r1
 80090d8:	4770      	bx	lr
	...

080090dc <_init>:
 80090dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090de:	bf00      	nop
 80090e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090e2:	bc08      	pop	{r3}
 80090e4:	469e      	mov	lr, r3
 80090e6:	4770      	bx	lr

080090e8 <_fini>:
 80090e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ea:	bf00      	nop
 80090ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ee:	bc08      	pop	{r3}
 80090f0:	469e      	mov	lr, r3
 80090f2:	4770      	bx	lr
