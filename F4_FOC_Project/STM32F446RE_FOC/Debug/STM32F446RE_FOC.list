
STM32F446RE_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090f4  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  080092c0  080092c0  000192c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097f8  080097f8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080097f8  080097f8  000197f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009800  08009800  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009800  08009800  00019800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08009808  08009808  00019808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  200001dc  080099ec  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  080099ec  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020ec2  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004107  00000000  00000000  000410ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001468  00000000  00000000  000451d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012c0  00000000  00000000  00046640  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026a5c  00000000  00000000  00047900  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000100f6  00000000  00000000  0006e35c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f87a9  00000000  00000000  0007e452  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00176bfb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006474  00000000  00000000  00176c78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001dc 	.word	0x200001dc
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080092a4 	.word	0x080092a4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001e0 	.word	0x200001e0
 8000204:	080092a4 	.word	0x080092a4

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bf4:	f000 b972 	b.w	8000edc <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9e08      	ldr	r6, [sp, #32]
 8000c16:	4604      	mov	r4, r0
 8000c18:	4688      	mov	r8, r1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d14b      	bne.n	8000cb6 <__udivmoddi4+0xa6>
 8000c1e:	428a      	cmp	r2, r1
 8000c20:	4615      	mov	r5, r2
 8000c22:	d967      	bls.n	8000cf4 <__udivmoddi4+0xe4>
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	b14a      	cbz	r2, 8000c3e <__udivmoddi4+0x2e>
 8000c2a:	f1c2 0720 	rsb	r7, r2, #32
 8000c2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c32:	fa20 f707 	lsr.w	r7, r0, r7
 8000c36:	4095      	lsls	r5, r2
 8000c38:	ea47 0803 	orr.w	r8, r7, r3
 8000c3c:	4094      	lsls	r4, r2
 8000c3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c42:	0c23      	lsrs	r3, r4, #16
 8000c44:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c48:	fa1f fc85 	uxth.w	ip, r5
 8000c4c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c50:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c54:	fb07 f10c 	mul.w	r1, r7, ip
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	d909      	bls.n	8000c70 <__udivmoddi4+0x60>
 8000c5c:	18eb      	adds	r3, r5, r3
 8000c5e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c62:	f080 811b 	bcs.w	8000e9c <__udivmoddi4+0x28c>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 8118 	bls.w	8000e9c <__udivmoddi4+0x28c>
 8000c6c:	3f02      	subs	r7, #2
 8000c6e:	442b      	add	r3, r5
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c84:	45a4      	cmp	ip, r4
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x8c>
 8000c88:	192c      	adds	r4, r5, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8e:	f080 8107 	bcs.w	8000ea0 <__udivmoddi4+0x290>
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	f240 8104 	bls.w	8000ea0 <__udivmoddi4+0x290>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	442c      	add	r4, r5
 8000c9c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca0:	eba4 040c 	sub.w	r4, r4, ip
 8000ca4:	2700      	movs	r7, #0
 8000ca6:	b11e      	cbz	r6, 8000cb0 <__udivmoddi4+0xa0>
 8000ca8:	40d4      	lsrs	r4, r2
 8000caa:	2300      	movs	r3, #0
 8000cac:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d909      	bls.n	8000cce <__udivmoddi4+0xbe>
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	f000 80eb 	beq.w	8000e96 <__udivmoddi4+0x286>
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	e9c6 0100 	strd	r0, r1, [r6]
 8000cc6:	4638      	mov	r0, r7
 8000cc8:	4639      	mov	r1, r7
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	fab3 f783 	clz	r7, r3
 8000cd2:	2f00      	cmp	r7, #0
 8000cd4:	d147      	bne.n	8000d66 <__udivmoddi4+0x156>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xd0>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 80fa 	bhi.w	8000ed4 <__udivmoddi4+0x2c4>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4698      	mov	r8, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d0e0      	beq.n	8000cb0 <__udivmoddi4+0xa0>
 8000cee:	e9c6 4800 	strd	r4, r8, [r6]
 8000cf2:	e7dd      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000cf4:	b902      	cbnz	r2, 8000cf8 <__udivmoddi4+0xe8>
 8000cf6:	deff      	udf	#255	; 0xff
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	2a00      	cmp	r2, #0
 8000cfe:	f040 808f 	bne.w	8000e20 <__udivmoddi4+0x210>
 8000d02:	1b49      	subs	r1, r1, r5
 8000d04:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d08:	fa1f f885 	uxth.w	r8, r5
 8000d0c:	2701      	movs	r7, #1
 8000d0e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d12:	0c23      	lsrs	r3, r4, #16
 8000d14:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb08 f10c 	mul.w	r1, r8, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x124>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x122>
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2bc>
 8000d32:	4684      	mov	ip, r0
 8000d34:	1a59      	subs	r1, r3, r1
 8000d36:	b2a3      	uxth	r3, r4
 8000d38:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d3c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d44:	fb08 f800 	mul.w	r8, r8, r0
 8000d48:	45a0      	cmp	r8, r4
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x14c>
 8000d4c:	192c      	adds	r4, r5, r4
 8000d4e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x14a>
 8000d54:	45a0      	cmp	r8, r4
 8000d56:	f200 80b6 	bhi.w	8000ec6 <__udivmoddi4+0x2b6>
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	eba4 0408 	sub.w	r4, r4, r8
 8000d60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d64:	e79f      	b.n	8000ca6 <__udivmoddi4+0x96>
 8000d66:	f1c7 0c20 	rsb	ip, r7, #32
 8000d6a:	40bb      	lsls	r3, r7
 8000d6c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d70:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d74:	fa01 f407 	lsl.w	r4, r1, r7
 8000d78:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d7c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d80:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d84:	4325      	orrs	r5, r4
 8000d86:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d8a:	0c2c      	lsrs	r4, r5, #16
 8000d8c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d90:	fa1f fa8e 	uxth.w	sl, lr
 8000d94:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d98:	fb09 f40a 	mul.w	r4, r9, sl
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	fa02 f207 	lsl.w	r2, r2, r7
 8000da2:	fa00 f107 	lsl.w	r1, r0, r7
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b0>
 8000da8:	eb1e 0303 	adds.w	r3, lr, r3
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000db0:	f080 8087 	bcs.w	8000ec2 <__udivmoddi4+0x2b2>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f240 8084 	bls.w	8000ec2 <__udivmoddi4+0x2b2>
 8000dba:	f1a9 0902 	sub.w	r9, r9, #2
 8000dbe:	4473      	add	r3, lr
 8000dc0:	1b1b      	subs	r3, r3, r4
 8000dc2:	b2ad      	uxth	r5, r5
 8000dc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000dcc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dd4:	45a2      	cmp	sl, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1da>
 8000dd8:	eb1e 0404 	adds.w	r4, lr, r4
 8000ddc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de0:	d26b      	bcs.n	8000eba <__udivmoddi4+0x2aa>
 8000de2:	45a2      	cmp	sl, r4
 8000de4:	d969      	bls.n	8000eba <__udivmoddi4+0x2aa>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4474      	add	r4, lr
 8000dea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	eba4 040a 	sub.w	r4, r4, sl
 8000df6:	454c      	cmp	r4, r9
 8000df8:	46c2      	mov	sl, r8
 8000dfa:	464b      	mov	r3, r9
 8000dfc:	d354      	bcc.n	8000ea8 <__udivmoddi4+0x298>
 8000dfe:	d051      	beq.n	8000ea4 <__udivmoddi4+0x294>
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d069      	beq.n	8000ed8 <__udivmoddi4+0x2c8>
 8000e04:	ebb1 050a 	subs.w	r5, r1, sl
 8000e08:	eb64 0403 	sbc.w	r4, r4, r3
 8000e0c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e10:	40fd      	lsrs	r5, r7
 8000e12:	40fc      	lsrs	r4, r7
 8000e14:	ea4c 0505 	orr.w	r5, ip, r5
 8000e18:	e9c6 5400 	strd	r5, r4, [r6]
 8000e1c:	2700      	movs	r7, #0
 8000e1e:	e747      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e20:	f1c2 0320 	rsb	r3, r2, #32
 8000e24:	fa20 f703 	lsr.w	r7, r0, r3
 8000e28:	4095      	lsls	r5, r2
 8000e2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e36:	4338      	orrs	r0, r7
 8000e38:	0c01      	lsrs	r1, r0, #16
 8000e3a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e3e:	fa1f f885 	uxth.w	r8, r5
 8000e42:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4a:	fb07 f308 	mul.w	r3, r7, r8
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x256>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e5c:	d22f      	bcs.n	8000ebe <__udivmoddi4+0x2ae>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d92d      	bls.n	8000ebe <__udivmoddi4+0x2ae>
 8000e62:	3f02      	subs	r7, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1acb      	subs	r3, r1, r3
 8000e68:	b281      	uxth	r1, r0
 8000e6a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e76:	fb00 f308 	mul.w	r3, r0, r8
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x27e>
 8000e7e:	1869      	adds	r1, r5, r1
 8000e80:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e84:	d217      	bcs.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d915      	bls.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	4429      	add	r1, r5
 8000e8e:	1ac9      	subs	r1, r1, r3
 8000e90:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e94:	e73b      	b.n	8000d0e <__udivmoddi4+0xfe>
 8000e96:	4637      	mov	r7, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e709      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e9c:	4607      	mov	r7, r0
 8000e9e:	e6e7      	b.n	8000c70 <__udivmoddi4+0x60>
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	e6fb      	b.n	8000c9c <__udivmoddi4+0x8c>
 8000ea4:	4541      	cmp	r1, r8
 8000ea6:	d2ab      	bcs.n	8000e00 <__udivmoddi4+0x1f0>
 8000ea8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eac:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb0:	3801      	subs	r0, #1
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	e7a4      	b.n	8000e00 <__udivmoddi4+0x1f0>
 8000eb6:	4660      	mov	r0, ip
 8000eb8:	e7e9      	b.n	8000e8e <__udivmoddi4+0x27e>
 8000eba:	4618      	mov	r0, r3
 8000ebc:	e795      	b.n	8000dea <__udivmoddi4+0x1da>
 8000ebe:	4667      	mov	r7, ip
 8000ec0:	e7d1      	b.n	8000e66 <__udivmoddi4+0x256>
 8000ec2:	4681      	mov	r9, r0
 8000ec4:	e77c      	b.n	8000dc0 <__udivmoddi4+0x1b0>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	442c      	add	r4, r5
 8000eca:	e747      	b.n	8000d5c <__udivmoddi4+0x14c>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	442b      	add	r3, r5
 8000ed2:	e72f      	b.n	8000d34 <__udivmoddi4+0x124>
 8000ed4:	4638      	mov	r0, r7
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xda>
 8000ed8:	4637      	mov	r7, r6
 8000eda:	e6e9      	b.n	8000cb0 <__udivmoddi4+0xa0>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	; (8000f20 <HAL_Init+0x40>)
 8000eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <HAL_Init+0x40>)
 8000ef6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <HAL_Init+0x40>)
 8000f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f000 f90d 	bl	8001128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0e:	2004      	movs	r0, #4
 8000f10:	f000 f808 	bl	8000f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f14:	f004 fc1a 	bl	800574c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40023c00 	.word	0x40023c00

08000f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_InitTick+0x54>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_InitTick+0x58>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 f917 	bl	8001176 <HAL_SYSTICK_Config>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00e      	b.n	8000f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d80a      	bhi.n	8000f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f60:	f000 f8ed 	bl	800113e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f64:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <HAL_InitTick+0x5c>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	20000004 	.word	0x20000004
 8000f80:	20000000 	.word	0x20000000

08000f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_IncTick+0x20>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000004 	.word	0x20000004
 8000fa8:	200002bc 	.word	0x200002bc

08000fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <HAL_GetTick+0x14>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	200002bc 	.word	0x200002bc

08000fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff6:	4a04      	ldr	r2, [pc, #16]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	60d3      	str	r3, [r2, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <__NVIC_GetPriorityGrouping+0x18>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	f003 0307 	and.w	r3, r3, #7
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	6039      	str	r1, [r7, #0]
 8001032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001038:	2b00      	cmp	r3, #0
 800103a:	db0a      	blt.n	8001052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	b2da      	uxtb	r2, r3
 8001040:	490c      	ldr	r1, [pc, #48]	; (8001074 <__NVIC_SetPriority+0x4c>)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	0112      	lsls	r2, r2, #4
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	440b      	add	r3, r1
 800104c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001050:	e00a      	b.n	8001068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4908      	ldr	r1, [pc, #32]	; (8001078 <__NVIC_SetPriority+0x50>)
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 030f 	and.w	r3, r3, #15
 800105e:	3b04      	subs	r3, #4
 8001060:	0112      	lsls	r2, r2, #4
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	440b      	add	r3, r1
 8001066:	761a      	strb	r2, [r3, #24]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000e100 	.word	0xe000e100
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800107c:	b480      	push	{r7}
 800107e:	b089      	sub	sp, #36	; 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f1c3 0307 	rsb	r3, r3, #7
 8001096:	2b04      	cmp	r3, #4
 8001098:	bf28      	it	cs
 800109a:	2304      	movcs	r3, #4
 800109c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3304      	adds	r3, #4
 80010a2:	2b06      	cmp	r3, #6
 80010a4:	d902      	bls.n	80010ac <NVIC_EncodePriority+0x30>
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3b03      	subs	r3, #3
 80010aa:	e000      	b.n	80010ae <NVIC_EncodePriority+0x32>
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43da      	mvns	r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	401a      	ands	r2, r3
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	fa01 f303 	lsl.w	r3, r1, r3
 80010ce:	43d9      	mvns	r1, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	4313      	orrs	r3, r2
         );
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3724      	adds	r7, #36	; 0x24
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010f4:	d301      	bcc.n	80010fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010f6:	2301      	movs	r3, #1
 80010f8:	e00f      	b.n	800111a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <SysTick_Config+0x40>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001102:	210f      	movs	r1, #15
 8001104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001108:	f7ff ff8e 	bl	8001028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <SysTick_Config+0x40>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001112:	4b04      	ldr	r3, [pc, #16]	; (8001124 <SysTick_Config+0x40>)
 8001114:	2207      	movs	r2, #7
 8001116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	e000e010 	.word	0xe000e010

08001128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ff47 	bl	8000fc4 <__NVIC_SetPriorityGrouping>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800113e:	b580      	push	{r7, lr}
 8001140:	b086      	sub	sp, #24
 8001142:	af00      	add	r7, sp, #0
 8001144:	4603      	mov	r3, r0
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	607a      	str	r2, [r7, #4]
 800114a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001150:	f7ff ff5c 	bl	800100c <__NVIC_GetPriorityGrouping>
 8001154:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	68b9      	ldr	r1, [r7, #8]
 800115a:	6978      	ldr	r0, [r7, #20]
 800115c:	f7ff ff8e 	bl	800107c <NVIC_EncodePriority>
 8001160:	4602      	mov	r2, r0
 8001162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff5d 	bl	8001028 <__NVIC_SetPriority>
}
 800116e:	bf00      	nop
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ffb0 	bl	80010e4 <SysTick_Config>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	; 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
 80011aa:	e165      	b.n	8001478 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011ac:	2201      	movs	r2, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	f040 8154 	bne.w	8001472 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x4a>
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b12      	cmp	r3, #18
 80011d8:	d123      	bne.n	8001222 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	08da      	lsrs	r2, r3, #3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3208      	adds	r2, #8
 80011e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	220f      	movs	r2, #15
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	691a      	ldr	r2, [r3, #16]
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	08da      	lsrs	r2, r3, #3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3208      	adds	r2, #8
 800121c:	69b9      	ldr	r1, [r7, #24]
 800121e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	2203      	movs	r2, #3
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 0203 	and.w	r2, r3, #3
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d00b      	beq.n	8001276 <HAL_GPIO_Init+0xe6>
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d007      	beq.n	8001276 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800126a:	2b11      	cmp	r3, #17
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b12      	cmp	r3, #18
 8001274:	d130      	bne.n	80012d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	2203      	movs	r2, #3
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	68da      	ldr	r2, [r3, #12]
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012ac:	2201      	movs	r2, #1
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	091b      	lsrs	r3, r3, #4
 80012c2:	f003 0201 	and.w	r2, r3, #1
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	2203      	movs	r2, #3
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80ae 	beq.w	8001472 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b5c      	ldr	r3, [pc, #368]	; (800148c <HAL_GPIO_Init+0x2fc>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	4a5b      	ldr	r2, [pc, #364]	; (800148c <HAL_GPIO_Init+0x2fc>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001324:	6453      	str	r3, [r2, #68]	; 0x44
 8001326:	4b59      	ldr	r3, [pc, #356]	; (800148c <HAL_GPIO_Init+0x2fc>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001332:	4a57      	ldr	r2, [pc, #348]	; (8001490 <HAL_GPIO_Init+0x300>)
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	220f      	movs	r2, #15
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4e      	ldr	r2, [pc, #312]	; (8001494 <HAL_GPIO_Init+0x304>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d025      	beq.n	80013aa <HAL_GPIO_Init+0x21a>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a4d      	ldr	r2, [pc, #308]	; (8001498 <HAL_GPIO_Init+0x308>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d01f      	beq.n	80013a6 <HAL_GPIO_Init+0x216>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4c      	ldr	r2, [pc, #304]	; (800149c <HAL_GPIO_Init+0x30c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d019      	beq.n	80013a2 <HAL_GPIO_Init+0x212>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4b      	ldr	r2, [pc, #300]	; (80014a0 <HAL_GPIO_Init+0x310>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d013      	beq.n	800139e <HAL_GPIO_Init+0x20e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4a      	ldr	r2, [pc, #296]	; (80014a4 <HAL_GPIO_Init+0x314>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d00d      	beq.n	800139a <HAL_GPIO_Init+0x20a>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a49      	ldr	r2, [pc, #292]	; (80014a8 <HAL_GPIO_Init+0x318>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d007      	beq.n	8001396 <HAL_GPIO_Init+0x206>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a48      	ldr	r2, [pc, #288]	; (80014ac <HAL_GPIO_Init+0x31c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d101      	bne.n	8001392 <HAL_GPIO_Init+0x202>
 800138e:	2306      	movs	r3, #6
 8001390:	e00c      	b.n	80013ac <HAL_GPIO_Init+0x21c>
 8001392:	2307      	movs	r3, #7
 8001394:	e00a      	b.n	80013ac <HAL_GPIO_Init+0x21c>
 8001396:	2305      	movs	r3, #5
 8001398:	e008      	b.n	80013ac <HAL_GPIO_Init+0x21c>
 800139a:	2304      	movs	r3, #4
 800139c:	e006      	b.n	80013ac <HAL_GPIO_Init+0x21c>
 800139e:	2303      	movs	r3, #3
 80013a0:	e004      	b.n	80013ac <HAL_GPIO_Init+0x21c>
 80013a2:	2302      	movs	r3, #2
 80013a4:	e002      	b.n	80013ac <HAL_GPIO_Init+0x21c>
 80013a6:	2301      	movs	r3, #1
 80013a8:	e000      	b.n	80013ac <HAL_GPIO_Init+0x21c>
 80013aa:	2300      	movs	r3, #0
 80013ac:	69fa      	ldr	r2, [r7, #28]
 80013ae:	f002 0203 	and.w	r2, r2, #3
 80013b2:	0092      	lsls	r2, r2, #2
 80013b4:	4093      	lsls	r3, r2
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013bc:	4934      	ldr	r1, [pc, #208]	; (8001490 <HAL_GPIO_Init+0x300>)
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	089b      	lsrs	r3, r3, #2
 80013c2:	3302      	adds	r3, #2
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ca:	4b39      	ldr	r3, [pc, #228]	; (80014b0 <HAL_GPIO_Init+0x320>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ee:	4a30      	ldr	r2, [pc, #192]	; (80014b0 <HAL_GPIO_Init+0x320>)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013f4:	4b2e      	ldr	r3, [pc, #184]	; (80014b0 <HAL_GPIO_Init+0x320>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001418:	4a25      	ldr	r2, [pc, #148]	; (80014b0 <HAL_GPIO_Init+0x320>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800141e:	4b24      	ldr	r3, [pc, #144]	; (80014b0 <HAL_GPIO_Init+0x320>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001442:	4a1b      	ldr	r2, [pc, #108]	; (80014b0 <HAL_GPIO_Init+0x320>)
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001448:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <HAL_GPIO_Init+0x320>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800146c:	4a10      	ldr	r2, [pc, #64]	; (80014b0 <HAL_GPIO_Init+0x320>)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3301      	adds	r3, #1
 8001476:	61fb      	str	r3, [r7, #28]
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	2b0f      	cmp	r3, #15
 800147c:	f67f ae96 	bls.w	80011ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001480:	bf00      	nop
 8001482:	3724      	adds	r7, #36	; 0x24
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	40023800 	.word	0x40023800
 8001490:	40013800 	.word	0x40013800
 8001494:	40020000 	.word	0x40020000
 8001498:	40020400 	.word	0x40020400
 800149c:	40020800 	.word	0x40020800
 80014a0:	40020c00 	.word	0x40020c00
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40021400 	.word	0x40021400
 80014ac:	40021800 	.word	0x40021800
 80014b0:	40013c00 	.word	0x40013c00

080014b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	603b      	str	r3, [r7, #0]
 80014c2:	4b20      	ldr	r3, [pc, #128]	; (8001544 <HAL_PWREx_EnableOverDrive+0x90>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	4a1f      	ldr	r2, [pc, #124]	; (8001544 <HAL_PWREx_EnableOverDrive+0x90>)
 80014c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014cc:	6413      	str	r3, [r2, #64]	; 0x40
 80014ce:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <HAL_PWREx_EnableOverDrive+0x90>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80014da:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <HAL_PWREx_EnableOverDrive+0x94>)
 80014dc:	2201      	movs	r2, #1
 80014de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014e0:	f7ff fd64 	bl	8000fac <HAL_GetTick>
 80014e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014e6:	e009      	b.n	80014fc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014e8:	f7ff fd60 	bl	8000fac <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014f6:	d901      	bls.n	80014fc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e01f      	b.n	800153c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014fc:	4b13      	ldr	r3, [pc, #76]	; (800154c <HAL_PWREx_EnableOverDrive+0x98>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001508:	d1ee      	bne.n	80014e8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <HAL_PWREx_EnableOverDrive+0x9c>)
 800150c:	2201      	movs	r2, #1
 800150e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001510:	f7ff fd4c 	bl	8000fac <HAL_GetTick>
 8001514:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001516:	e009      	b.n	800152c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001518:	f7ff fd48 	bl	8000fac <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001526:	d901      	bls.n	800152c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e007      	b.n	800153c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <HAL_PWREx_EnableOverDrive+0x98>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001534:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001538:	d1ee      	bne.n	8001518 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40023800 	.word	0x40023800
 8001548:	420e0040 	.word	0x420e0040
 800154c:	40007000 	.word	0x40007000
 8001550:	420e0044 	.word	0x420e0044

08001554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e0ca      	b.n	80016fe <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001568:	4b67      	ldr	r3, [pc, #412]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 030f 	and.w	r3, r3, #15
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	d90c      	bls.n	8001590 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001576:	4b64      	ldr	r3, [pc, #400]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800157e:	4b62      	ldr	r3, [pc, #392]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d001      	beq.n	8001590 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e0b6      	b.n	80016fe <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d020      	beq.n	80015de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015a8:	4b58      	ldr	r3, [pc, #352]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	4a57      	ldr	r2, [pc, #348]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80015ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0308 	and.w	r3, r3, #8
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015c0:	4b52      	ldr	r3, [pc, #328]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	4a51      	ldr	r2, [pc, #324]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80015c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015cc:	4b4f      	ldr	r3, [pc, #316]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	494c      	ldr	r1, [pc, #304]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d044      	beq.n	8001674 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d107      	bne.n	8001602 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f2:	4b46      	ldr	r3, [pc, #280]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d119      	bne.n	8001632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e07d      	b.n	80016fe <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b02      	cmp	r3, #2
 8001608:	d003      	beq.n	8001612 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800160e:	2b03      	cmp	r3, #3
 8001610:	d107      	bne.n	8001622 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001612:	4b3e      	ldr	r3, [pc, #248]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d109      	bne.n	8001632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e06d      	b.n	80016fe <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001622:	4b3a      	ldr	r3, [pc, #232]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e065      	b.n	80016fe <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001632:	4b36      	ldr	r3, [pc, #216]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f023 0203 	bic.w	r2, r3, #3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	4933      	ldr	r1, [pc, #204]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 8001640:	4313      	orrs	r3, r2
 8001642:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001644:	f7ff fcb2 	bl	8000fac <HAL_GetTick>
 8001648:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164a:	e00a      	b.n	8001662 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800164c:	f7ff fcae 	bl	8000fac <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	f241 3288 	movw	r2, #5000	; 0x1388
 800165a:	4293      	cmp	r3, r2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e04d      	b.n	80016fe <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001662:	4b2a      	ldr	r3, [pc, #168]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 020c 	and.w	r2, r3, #12
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	429a      	cmp	r2, r3
 8001672:	d1eb      	bne.n	800164c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001674:	4b24      	ldr	r3, [pc, #144]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 030f 	and.w	r3, r3, #15
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	d20c      	bcs.n	800169c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001682:	4b21      	ldr	r3, [pc, #132]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800168a:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d001      	beq.n	800169c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e030      	b.n	80016fe <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016a8:	4b18      	ldr	r3, [pc, #96]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	4915      	ldr	r1, [pc, #84]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0308 	and.w	r3, r3, #8
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d009      	beq.n	80016da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	490d      	ldr	r1, [pc, #52]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016da:	f000 f851 	bl	8001780 <HAL_RCC_GetSysClockFreq>
 80016de:	4601      	mov	r1, r0
 80016e0:	4b0a      	ldr	r3, [pc, #40]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	091b      	lsrs	r3, r3, #4
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	4a09      	ldr	r2, [pc, #36]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80016ec:	5cd3      	ldrb	r3, [r2, r3]
 80016ee:	fa21 f303 	lsr.w	r3, r1, r3
 80016f2:	4a08      	ldr	r2, [pc, #32]	; (8001714 <HAL_RCC_ClockConfig+0x1c0>)
 80016f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80016f6:	2004      	movs	r0, #4
 80016f8:	f7ff fc14 	bl	8000f24 <HAL_InitTick>

  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40023c00 	.word	0x40023c00
 800170c:	40023800 	.word	0x40023800
 8001710:	08009358 	.word	0x08009358
 8001714:	20000008 	.word	0x20000008

08001718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800171c:	4b03      	ldr	r3, [pc, #12]	; (800172c <HAL_RCC_GetHCLKFreq+0x14>)
 800171e:	681b      	ldr	r3, [r3, #0]
}
 8001720:	4618      	mov	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20000008 	.word	0x20000008

08001730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001734:	f7ff fff0 	bl	8001718 <HAL_RCC_GetHCLKFreq>
 8001738:	4601      	mov	r1, r0
 800173a:	4b05      	ldr	r3, [pc, #20]	; (8001750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	0a9b      	lsrs	r3, r3, #10
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	4a03      	ldr	r2, [pc, #12]	; (8001754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001746:	5cd3      	ldrb	r3, [r2, r3]
 8001748:	fa21 f303 	lsr.w	r3, r1, r3
}
 800174c:	4618      	mov	r0, r3
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40023800 	.word	0x40023800
 8001754:	08009368 	.word	0x08009368

08001758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800175c:	f7ff ffdc 	bl	8001718 <HAL_RCC_GetHCLKFreq>
 8001760:	4601      	mov	r1, r0
 8001762:	4b05      	ldr	r3, [pc, #20]	; (8001778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	0b5b      	lsrs	r3, r3, #13
 8001768:	f003 0307 	and.w	r3, r3, #7
 800176c:	4a03      	ldr	r2, [pc, #12]	; (800177c <HAL_RCC_GetPCLK2Freq+0x24>)
 800176e:	5cd3      	ldrb	r3, [r2, r3]
 8001770:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001774:	4618      	mov	r0, r3
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40023800 	.word	0x40023800
 800177c:	08009368 	.word	0x08009368

08001780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001782:	b087      	sub	sp, #28
 8001784:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001792:	2300      	movs	r3, #0
 8001794:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800179a:	4bc6      	ldr	r3, [pc, #792]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 030c 	and.w	r3, r3, #12
 80017a2:	2b0c      	cmp	r3, #12
 80017a4:	f200 817e 	bhi.w	8001aa4 <HAL_RCC_GetSysClockFreq+0x324>
 80017a8:	a201      	add	r2, pc, #4	; (adr r2, 80017b0 <HAL_RCC_GetSysClockFreq+0x30>)
 80017aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ae:	bf00      	nop
 80017b0:	080017e5 	.word	0x080017e5
 80017b4:	08001aa5 	.word	0x08001aa5
 80017b8:	08001aa5 	.word	0x08001aa5
 80017bc:	08001aa5 	.word	0x08001aa5
 80017c0:	080017eb 	.word	0x080017eb
 80017c4:	08001aa5 	.word	0x08001aa5
 80017c8:	08001aa5 	.word	0x08001aa5
 80017cc:	08001aa5 	.word	0x08001aa5
 80017d0:	080017f1 	.word	0x080017f1
 80017d4:	08001aa5 	.word	0x08001aa5
 80017d8:	08001aa5 	.word	0x08001aa5
 80017dc:	08001aa5 	.word	0x08001aa5
 80017e0:	0800194d 	.word	0x0800194d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017e4:	4bb4      	ldr	r3, [pc, #720]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x338>)
 80017e6:	613b      	str	r3, [r7, #16]
       break;
 80017e8:	e15f      	b.n	8001aaa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017ea:	4bb4      	ldr	r3, [pc, #720]	; (8001abc <HAL_RCC_GetSysClockFreq+0x33c>)
 80017ec:	613b      	str	r3, [r7, #16]
      break;
 80017ee:	e15c      	b.n	8001aaa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017f0:	4bb0      	ldr	r3, [pc, #704]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017f8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017fa:	4bae      	ldr	r3, [pc, #696]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d04a      	beq.n	800189c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001806:	4bab      	ldr	r3, [pc, #684]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	099b      	lsrs	r3, r3, #6
 800180c:	f04f 0400 	mov.w	r4, #0
 8001810:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	ea03 0501 	and.w	r5, r3, r1
 800181c:	ea04 0602 	and.w	r6, r4, r2
 8001820:	4629      	mov	r1, r5
 8001822:	4632      	mov	r2, r6
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	f04f 0400 	mov.w	r4, #0
 800182c:	0154      	lsls	r4, r2, #5
 800182e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001832:	014b      	lsls	r3, r1, #5
 8001834:	4619      	mov	r1, r3
 8001836:	4622      	mov	r2, r4
 8001838:	1b49      	subs	r1, r1, r5
 800183a:	eb62 0206 	sbc.w	r2, r2, r6
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	f04f 0400 	mov.w	r4, #0
 8001846:	0194      	lsls	r4, r2, #6
 8001848:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800184c:	018b      	lsls	r3, r1, #6
 800184e:	1a5b      	subs	r3, r3, r1
 8001850:	eb64 0402 	sbc.w	r4, r4, r2
 8001854:	f04f 0100 	mov.w	r1, #0
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	00e2      	lsls	r2, r4, #3
 800185e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001862:	00d9      	lsls	r1, r3, #3
 8001864:	460b      	mov	r3, r1
 8001866:	4614      	mov	r4, r2
 8001868:	195b      	adds	r3, r3, r5
 800186a:	eb44 0406 	adc.w	r4, r4, r6
 800186e:	f04f 0100 	mov.w	r1, #0
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	0262      	lsls	r2, r4, #9
 8001878:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800187c:	0259      	lsls	r1, r3, #9
 800187e:	460b      	mov	r3, r1
 8001880:	4614      	mov	r4, r2
 8001882:	4618      	mov	r0, r3
 8001884:	4621      	mov	r1, r4
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f04f 0400 	mov.w	r4, #0
 800188c:	461a      	mov	r2, r3
 800188e:	4623      	mov	r3, r4
 8001890:	f7ff f9a6 	bl	8000be0 <__aeabi_uldivmod>
 8001894:	4603      	mov	r3, r0
 8001896:	460c      	mov	r4, r1
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	e049      	b.n	8001930 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800189c:	4b85      	ldr	r3, [pc, #532]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	099b      	lsrs	r3, r3, #6
 80018a2:	f04f 0400 	mov.w	r4, #0
 80018a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	ea03 0501 	and.w	r5, r3, r1
 80018b2:	ea04 0602 	and.w	r6, r4, r2
 80018b6:	4629      	mov	r1, r5
 80018b8:	4632      	mov	r2, r6
 80018ba:	f04f 0300 	mov.w	r3, #0
 80018be:	f04f 0400 	mov.w	r4, #0
 80018c2:	0154      	lsls	r4, r2, #5
 80018c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018c8:	014b      	lsls	r3, r1, #5
 80018ca:	4619      	mov	r1, r3
 80018cc:	4622      	mov	r2, r4
 80018ce:	1b49      	subs	r1, r1, r5
 80018d0:	eb62 0206 	sbc.w	r2, r2, r6
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	f04f 0400 	mov.w	r4, #0
 80018dc:	0194      	lsls	r4, r2, #6
 80018de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018e2:	018b      	lsls	r3, r1, #6
 80018e4:	1a5b      	subs	r3, r3, r1
 80018e6:	eb64 0402 	sbc.w	r4, r4, r2
 80018ea:	f04f 0100 	mov.w	r1, #0
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	00e2      	lsls	r2, r4, #3
 80018f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018f8:	00d9      	lsls	r1, r3, #3
 80018fa:	460b      	mov	r3, r1
 80018fc:	4614      	mov	r4, r2
 80018fe:	195b      	adds	r3, r3, r5
 8001900:	eb44 0406 	adc.w	r4, r4, r6
 8001904:	f04f 0100 	mov.w	r1, #0
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	02a2      	lsls	r2, r4, #10
 800190e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001912:	0299      	lsls	r1, r3, #10
 8001914:	460b      	mov	r3, r1
 8001916:	4614      	mov	r4, r2
 8001918:	4618      	mov	r0, r3
 800191a:	4621      	mov	r1, r4
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f04f 0400 	mov.w	r4, #0
 8001922:	461a      	mov	r2, r3
 8001924:	4623      	mov	r3, r4
 8001926:	f7ff f95b 	bl	8000be0 <__aeabi_uldivmod>
 800192a:	4603      	mov	r3, r0
 800192c:	460c      	mov	r4, r1
 800192e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001930:	4b60      	ldr	r3, [pc, #384]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	0c1b      	lsrs	r3, r3, #16
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	3301      	adds	r3, #1
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	fbb2 f3f3 	udiv	r3, r2, r3
 8001948:	613b      	str	r3, [r7, #16]
      break;
 800194a:	e0ae      	b.n	8001aaa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800194c:	4b59      	ldr	r3, [pc, #356]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001954:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001956:	4b57      	ldr	r3, [pc, #348]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d04a      	beq.n	80019f8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001962:	4b54      	ldr	r3, [pc, #336]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	099b      	lsrs	r3, r3, #6
 8001968:	f04f 0400 	mov.w	r4, #0
 800196c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	ea03 0501 	and.w	r5, r3, r1
 8001978:	ea04 0602 	and.w	r6, r4, r2
 800197c:	4629      	mov	r1, r5
 800197e:	4632      	mov	r2, r6
 8001980:	f04f 0300 	mov.w	r3, #0
 8001984:	f04f 0400 	mov.w	r4, #0
 8001988:	0154      	lsls	r4, r2, #5
 800198a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800198e:	014b      	lsls	r3, r1, #5
 8001990:	4619      	mov	r1, r3
 8001992:	4622      	mov	r2, r4
 8001994:	1b49      	subs	r1, r1, r5
 8001996:	eb62 0206 	sbc.w	r2, r2, r6
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	f04f 0400 	mov.w	r4, #0
 80019a2:	0194      	lsls	r4, r2, #6
 80019a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019a8:	018b      	lsls	r3, r1, #6
 80019aa:	1a5b      	subs	r3, r3, r1
 80019ac:	eb64 0402 	sbc.w	r4, r4, r2
 80019b0:	f04f 0100 	mov.w	r1, #0
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	00e2      	lsls	r2, r4, #3
 80019ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019be:	00d9      	lsls	r1, r3, #3
 80019c0:	460b      	mov	r3, r1
 80019c2:	4614      	mov	r4, r2
 80019c4:	195b      	adds	r3, r3, r5
 80019c6:	eb44 0406 	adc.w	r4, r4, r6
 80019ca:	f04f 0100 	mov.w	r1, #0
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	0262      	lsls	r2, r4, #9
 80019d4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80019d8:	0259      	lsls	r1, r3, #9
 80019da:	460b      	mov	r3, r1
 80019dc:	4614      	mov	r4, r2
 80019de:	4618      	mov	r0, r3
 80019e0:	4621      	mov	r1, r4
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f04f 0400 	mov.w	r4, #0
 80019e8:	461a      	mov	r2, r3
 80019ea:	4623      	mov	r3, r4
 80019ec:	f7ff f8f8 	bl	8000be0 <__aeabi_uldivmod>
 80019f0:	4603      	mov	r3, r0
 80019f2:	460c      	mov	r4, r1
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	e049      	b.n	8001a8c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f8:	4b2e      	ldr	r3, [pc, #184]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	099b      	lsrs	r3, r3, #6
 80019fe:	f04f 0400 	mov.w	r4, #0
 8001a02:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	ea03 0501 	and.w	r5, r3, r1
 8001a0e:	ea04 0602 	and.w	r6, r4, r2
 8001a12:	4629      	mov	r1, r5
 8001a14:	4632      	mov	r2, r6
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	f04f 0400 	mov.w	r4, #0
 8001a1e:	0154      	lsls	r4, r2, #5
 8001a20:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a24:	014b      	lsls	r3, r1, #5
 8001a26:	4619      	mov	r1, r3
 8001a28:	4622      	mov	r2, r4
 8001a2a:	1b49      	subs	r1, r1, r5
 8001a2c:	eb62 0206 	sbc.w	r2, r2, r6
 8001a30:	f04f 0300 	mov.w	r3, #0
 8001a34:	f04f 0400 	mov.w	r4, #0
 8001a38:	0194      	lsls	r4, r2, #6
 8001a3a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a3e:	018b      	lsls	r3, r1, #6
 8001a40:	1a5b      	subs	r3, r3, r1
 8001a42:	eb64 0402 	sbc.w	r4, r4, r2
 8001a46:	f04f 0100 	mov.w	r1, #0
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	00e2      	lsls	r2, r4, #3
 8001a50:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a54:	00d9      	lsls	r1, r3, #3
 8001a56:	460b      	mov	r3, r1
 8001a58:	4614      	mov	r4, r2
 8001a5a:	195b      	adds	r3, r3, r5
 8001a5c:	eb44 0406 	adc.w	r4, r4, r6
 8001a60:	f04f 0100 	mov.w	r1, #0
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	02a2      	lsls	r2, r4, #10
 8001a6a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a6e:	0299      	lsls	r1, r3, #10
 8001a70:	460b      	mov	r3, r1
 8001a72:	4614      	mov	r4, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	4621      	mov	r1, r4
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f04f 0400 	mov.w	r4, #0
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4623      	mov	r3, r4
 8001a82:	f7ff f8ad 	bl	8000be0 <__aeabi_uldivmod>
 8001a86:	4603      	mov	r3, r0
 8001a88:	460c      	mov	r4, r1
 8001a8a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a8c:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	0f1b      	lsrs	r3, r3, #28
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa0:	613b      	str	r3, [r7, #16]
      break;
 8001aa2:	e002      	b.n	8001aaa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aa4:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x338>)
 8001aa6:	613b      	str	r3, [r7, #16]
      break;
 8001aa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aaa:	693b      	ldr	r3, [r7, #16]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	371c      	adds	r7, #28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	00f42400 	.word	0x00f42400
 8001abc:	007a1200 	.word	0x007a1200

08001ac0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 8083 	beq.w	8001be0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ada:	4b95      	ldr	r3, [pc, #596]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 030c 	and.w	r3, r3, #12
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d019      	beq.n	8001b1a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ae6:	4b92      	ldr	r3, [pc, #584]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d106      	bne.n	8001b00 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001af2:	4b8f      	ldr	r3, [pc, #572]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001afe:	d00c      	beq.n	8001b1a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b00:	4b8b      	ldr	r3, [pc, #556]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b08:	2b0c      	cmp	r3, #12
 8001b0a:	d112      	bne.n	8001b32 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b0c:	4b88      	ldr	r3, [pc, #544]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b18:	d10b      	bne.n	8001b32 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b1a:	4b85      	ldr	r3, [pc, #532]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d05b      	beq.n	8001bde <HAL_RCC_OscConfig+0x11e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d157      	bne.n	8001bde <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e216      	b.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b3a:	d106      	bne.n	8001b4a <HAL_RCC_OscConfig+0x8a>
 8001b3c:	4b7c      	ldr	r3, [pc, #496]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a7b      	ldr	r2, [pc, #492]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	e01d      	b.n	8001b86 <HAL_RCC_OscConfig+0xc6>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b52:	d10c      	bne.n	8001b6e <HAL_RCC_OscConfig+0xae>
 8001b54:	4b76      	ldr	r3, [pc, #472]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a75      	ldr	r2, [pc, #468]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b73      	ldr	r3, [pc, #460]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a72      	ldr	r2, [pc, #456]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	e00b      	b.n	8001b86 <HAL_RCC_OscConfig+0xc6>
 8001b6e:	4b70      	ldr	r3, [pc, #448]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a6f      	ldr	r2, [pc, #444]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	4b6d      	ldr	r3, [pc, #436]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a6c      	ldr	r2, [pc, #432]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b84:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d013      	beq.n	8001bb6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8e:	f7ff fa0d 	bl	8000fac <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b96:	f7ff fa09 	bl	8000fac <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b64      	cmp	r3, #100	; 0x64
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e1db      	b.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba8:	4b61      	ldr	r3, [pc, #388]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0f0      	beq.n	8001b96 <HAL_RCC_OscConfig+0xd6>
 8001bb4:	e014      	b.n	8001be0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb6:	f7ff f9f9 	bl	8000fac <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bbe:	f7ff f9f5 	bl	8000fac <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b64      	cmp	r3, #100	; 0x64
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e1c7      	b.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd0:	4b57      	ldr	r3, [pc, #348]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1f0      	bne.n	8001bbe <HAL_RCC_OscConfig+0xfe>
 8001bdc:	e000      	b.n	8001be0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bde:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d06f      	beq.n	8001ccc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001bec:	4b50      	ldr	r3, [pc, #320]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d017      	beq.n	8001c28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bf8:	4b4d      	ldr	r3, [pc, #308]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d105      	bne.n	8001c10 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c04:	4b4a      	ldr	r3, [pc, #296]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00b      	beq.n	8001c28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c10:	4b47      	ldr	r3, [pc, #284]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c18:	2b0c      	cmp	r3, #12
 8001c1a:	d11c      	bne.n	8001c56 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c1c:	4b44      	ldr	r3, [pc, #272]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d116      	bne.n	8001c56 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c28:	4b41      	ldr	r3, [pc, #260]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <HAL_RCC_OscConfig+0x180>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d001      	beq.n	8001c40 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e18f      	b.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c40:	4b3b      	ldr	r3, [pc, #236]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	4938      	ldr	r1, [pc, #224]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c54:	e03a      	b.n	8001ccc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d020      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c5e:	4b35      	ldr	r3, [pc, #212]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c64:	f7ff f9a2 	bl	8000fac <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c6c:	f7ff f99e 	bl	8000fac <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e170      	b.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7e:	4b2c      	ldr	r3, [pc, #176]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8a:	4b29      	ldr	r3, [pc, #164]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	4925      	ldr	r1, [pc, #148]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]
 8001c9e:	e015      	b.n	8001ccc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ca0:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca6:	f7ff f981 	bl	8000fac <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cae:	f7ff f97d 	bl	8000fac <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e14f      	b.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc0:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1f0      	bne.n	8001cae <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d037      	beq.n	8001d48 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d016      	beq.n	8001d0e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce0:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <HAL_RCC_OscConfig+0x278>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce6:	f7ff f961 	bl	8000fac <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cee:	f7ff f95d 	bl	8000fac <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e12f      	b.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d00:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0f0      	beq.n	8001cee <HAL_RCC_OscConfig+0x22e>
 8001d0c:	e01c      	b.n	8001d48 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <HAL_RCC_OscConfig+0x278>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d14:	f7ff f94a 	bl	8000fac <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d1a:	e00f      	b.n	8001d3c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d1c:	f7ff f946 	bl	8000fac <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d908      	bls.n	8001d3c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e118      	b.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800
 8001d34:	42470000 	.word	0x42470000
 8001d38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d3c:	4b8a      	ldr	r3, [pc, #552]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1e9      	bne.n	8001d1c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 8097 	beq.w	8001e84 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d56:	2300      	movs	r3, #0
 8001d58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d5a:	4b83      	ldr	r3, [pc, #524]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10f      	bne.n	8001d86 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	4b7f      	ldr	r3, [pc, #508]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	4a7e      	ldr	r2, [pc, #504]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d74:	6413      	str	r3, [r2, #64]	; 0x40
 8001d76:	4b7c      	ldr	r3, [pc, #496]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d82:	2301      	movs	r3, #1
 8001d84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d86:	4b79      	ldr	r3, [pc, #484]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d118      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d92:	4b76      	ldr	r3, [pc, #472]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a75      	ldr	r2, [pc, #468]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d9e:	f7ff f905 	bl	8000fac <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da6:	f7ff f901 	bl	8000fac <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e0d3      	b.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db8:	4b6c      	ldr	r3, [pc, #432]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d106      	bne.n	8001dda <HAL_RCC_OscConfig+0x31a>
 8001dcc:	4b66      	ldr	r3, [pc, #408]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd0:	4a65      	ldr	r2, [pc, #404]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd8:	e01c      	b.n	8001e14 <HAL_RCC_OscConfig+0x354>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b05      	cmp	r3, #5
 8001de0:	d10c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x33c>
 8001de2:	4b61      	ldr	r3, [pc, #388]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de6:	4a60      	ldr	r2, [pc, #384]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001de8:	f043 0304 	orr.w	r3, r3, #4
 8001dec:	6713      	str	r3, [r2, #112]	; 0x70
 8001dee:	4b5e      	ldr	r3, [pc, #376]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df2:	4a5d      	ldr	r2, [pc, #372]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dfa:	e00b      	b.n	8001e14 <HAL_RCC_OscConfig+0x354>
 8001dfc:	4b5a      	ldr	r3, [pc, #360]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e00:	4a59      	ldr	r2, [pc, #356]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001e02:	f023 0301 	bic.w	r3, r3, #1
 8001e06:	6713      	str	r3, [r2, #112]	; 0x70
 8001e08:	4b57      	ldr	r3, [pc, #348]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0c:	4a56      	ldr	r2, [pc, #344]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001e0e:	f023 0304 	bic.w	r3, r3, #4
 8001e12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d015      	beq.n	8001e48 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1c:	f7ff f8c6 	bl	8000fac <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e22:	e00a      	b.n	8001e3a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e24:	f7ff f8c2 	bl	8000fac <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e092      	b.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3a:	4b4b      	ldr	r3, [pc, #300]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0ee      	beq.n	8001e24 <HAL_RCC_OscConfig+0x364>
 8001e46:	e014      	b.n	8001e72 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e48:	f7ff f8b0 	bl	8000fac <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4e:	e00a      	b.n	8001e66 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e50:	f7ff f8ac 	bl	8000fac <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e07c      	b.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e66:	4b40      	ldr	r3, [pc, #256]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1ee      	bne.n	8001e50 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e72:	7dfb      	ldrb	r3, [r7, #23]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d105      	bne.n	8001e84 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e78:	4b3b      	ldr	r3, [pc, #236]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	4a3a      	ldr	r2, [pc, #232]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001e7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d068      	beq.n	8001f5e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e8c:	4b36      	ldr	r3, [pc, #216]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 030c 	and.w	r3, r3, #12
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d060      	beq.n	8001f5a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d145      	bne.n	8001f2c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea0:	4b33      	ldr	r3, [pc, #204]	; (8001f70 <HAL_RCC_OscConfig+0x4b0>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea6:	f7ff f881 	bl	8000fac <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eae:	f7ff f87d 	bl	8000fac <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e04f      	b.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec0:	4b29      	ldr	r3, [pc, #164]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1f0      	bne.n	8001eae <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69da      	ldr	r2, [r3, #28]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	019b      	lsls	r3, r3, #6
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee2:	085b      	lsrs	r3, r3, #1
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	041b      	lsls	r3, r3, #16
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eee:	061b      	lsls	r3, r3, #24
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	071b      	lsls	r3, r3, #28
 8001ef8:	491b      	ldr	r1, [pc, #108]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001efe:	4b1c      	ldr	r3, [pc, #112]	; (8001f70 <HAL_RCC_OscConfig+0x4b0>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7ff f852 	bl	8000fac <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f0c:	f7ff f84e 	bl	8000fac <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e020      	b.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1e:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0x44c>
 8001f2a:	e018      	b.n	8001f5e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2c:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <HAL_RCC_OscConfig+0x4b0>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f32:	f7ff f83b 	bl	8000fac <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f3a:	f7ff f837 	bl	8000fac <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e009      	b.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_RCC_OscConfig+0x4a8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1f0      	bne.n	8001f3a <HAL_RCC_OscConfig+0x47a>
 8001f58:	e001      	b.n	8001f5e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40007000 	.word	0x40007000
 8001f70:	42470060 	.word	0x42470060

08001f74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e03f      	b.n	8002006 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d106      	bne.n	8001fa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f003 ffc4 	bl	8005f28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2224      	movs	r2, #36	; 0x24
 8001fa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f829 	bl	8002010 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	695a      	ldr	r2, [r3, #20]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68da      	ldr	r2, [r3, #12]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2220      	movs	r2, #32
 8002000:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002010:	b5b0      	push	{r4, r5, r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	4313      	orrs	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002050:	f023 030c 	bic.w	r3, r3, #12
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	68f9      	ldr	r1, [r7, #12]
 800205a:	430b      	orrs	r3, r1
 800205c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	699a      	ldr	r2, [r3, #24]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800207c:	f040 80e4 	bne.w	8002248 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4aab      	ldr	r2, [pc, #684]	; (8002334 <UART_SetConfig+0x324>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d004      	beq.n	8002094 <UART_SetConfig+0x84>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4aaa      	ldr	r2, [pc, #680]	; (8002338 <UART_SetConfig+0x328>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d16c      	bne.n	800216e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002094:	f7ff fb60 	bl	8001758 <HAL_RCC_GetPCLK2Freq>
 8002098:	4602      	mov	r2, r0
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	009a      	lsls	r2, r3, #2
 80020a2:	441a      	add	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ae:	4aa3      	ldr	r2, [pc, #652]	; (800233c <UART_SetConfig+0x32c>)
 80020b0:	fba2 2303 	umull	r2, r3, r2, r3
 80020b4:	095b      	lsrs	r3, r3, #5
 80020b6:	011c      	lsls	r4, r3, #4
 80020b8:	f7ff fb4e 	bl	8001758 <HAL_RCC_GetPCLK2Freq>
 80020bc:	4602      	mov	r2, r0
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	009a      	lsls	r2, r3, #2
 80020c6:	441a      	add	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	fbb2 f5f3 	udiv	r5, r2, r3
 80020d2:	f7ff fb41 	bl	8001758 <HAL_RCC_GetPCLK2Freq>
 80020d6:	4602      	mov	r2, r0
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	009a      	lsls	r2, r3, #2
 80020e0:	441a      	add	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ec:	4a93      	ldr	r2, [pc, #588]	; (800233c <UART_SetConfig+0x32c>)
 80020ee:	fba2 2303 	umull	r2, r3, r2, r3
 80020f2:	095b      	lsrs	r3, r3, #5
 80020f4:	2264      	movs	r2, #100	; 0x64
 80020f6:	fb02 f303 	mul.w	r3, r2, r3
 80020fa:	1aeb      	subs	r3, r5, r3
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	3332      	adds	r3, #50	; 0x32
 8002100:	4a8e      	ldr	r2, [pc, #568]	; (800233c <UART_SetConfig+0x32c>)
 8002102:	fba2 2303 	umull	r2, r3, r2, r3
 8002106:	095b      	lsrs	r3, r3, #5
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800210e:	441c      	add	r4, r3
 8002110:	f7ff fb22 	bl	8001758 <HAL_RCC_GetPCLK2Freq>
 8002114:	4602      	mov	r2, r0
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	009a      	lsls	r2, r3, #2
 800211e:	441a      	add	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	fbb2 f5f3 	udiv	r5, r2, r3
 800212a:	f7ff fb15 	bl	8001758 <HAL_RCC_GetPCLK2Freq>
 800212e:	4602      	mov	r2, r0
 8002130:	4613      	mov	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	009a      	lsls	r2, r3, #2
 8002138:	441a      	add	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	fbb2 f3f3 	udiv	r3, r2, r3
 8002144:	4a7d      	ldr	r2, [pc, #500]	; (800233c <UART_SetConfig+0x32c>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	095b      	lsrs	r3, r3, #5
 800214c:	2264      	movs	r2, #100	; 0x64
 800214e:	fb02 f303 	mul.w	r3, r2, r3
 8002152:	1aeb      	subs	r3, r5, r3
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	3332      	adds	r3, #50	; 0x32
 8002158:	4a78      	ldr	r2, [pc, #480]	; (800233c <UART_SetConfig+0x32c>)
 800215a:	fba2 2303 	umull	r2, r3, r2, r3
 800215e:	095b      	lsrs	r3, r3, #5
 8002160:	f003 0207 	and.w	r2, r3, #7
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4422      	add	r2, r4
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	e154      	b.n	8002418 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800216e:	f7ff fadf 	bl	8001730 <HAL_RCC_GetPCLK1Freq>
 8002172:	4602      	mov	r2, r0
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	009a      	lsls	r2, r3, #2
 800217c:	441a      	add	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	fbb2 f3f3 	udiv	r3, r2, r3
 8002188:	4a6c      	ldr	r2, [pc, #432]	; (800233c <UART_SetConfig+0x32c>)
 800218a:	fba2 2303 	umull	r2, r3, r2, r3
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	011c      	lsls	r4, r3, #4
 8002192:	f7ff facd 	bl	8001730 <HAL_RCC_GetPCLK1Freq>
 8002196:	4602      	mov	r2, r0
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	009a      	lsls	r2, r3, #2
 80021a0:	441a      	add	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fbb2 f5f3 	udiv	r5, r2, r3
 80021ac:	f7ff fac0 	bl	8001730 <HAL_RCC_GetPCLK1Freq>
 80021b0:	4602      	mov	r2, r0
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	009a      	lsls	r2, r3, #2
 80021ba:	441a      	add	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c6:	4a5d      	ldr	r2, [pc, #372]	; (800233c <UART_SetConfig+0x32c>)
 80021c8:	fba2 2303 	umull	r2, r3, r2, r3
 80021cc:	095b      	lsrs	r3, r3, #5
 80021ce:	2264      	movs	r2, #100	; 0x64
 80021d0:	fb02 f303 	mul.w	r3, r2, r3
 80021d4:	1aeb      	subs	r3, r5, r3
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	3332      	adds	r3, #50	; 0x32
 80021da:	4a58      	ldr	r2, [pc, #352]	; (800233c <UART_SetConfig+0x32c>)
 80021dc:	fba2 2303 	umull	r2, r3, r2, r3
 80021e0:	095b      	lsrs	r3, r3, #5
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021e8:	441c      	add	r4, r3
 80021ea:	f7ff faa1 	bl	8001730 <HAL_RCC_GetPCLK1Freq>
 80021ee:	4602      	mov	r2, r0
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	009a      	lsls	r2, r3, #2
 80021f8:	441a      	add	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	fbb2 f5f3 	udiv	r5, r2, r3
 8002204:	f7ff fa94 	bl	8001730 <HAL_RCC_GetPCLK1Freq>
 8002208:	4602      	mov	r2, r0
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	009a      	lsls	r2, r3, #2
 8002212:	441a      	add	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	fbb2 f3f3 	udiv	r3, r2, r3
 800221e:	4a47      	ldr	r2, [pc, #284]	; (800233c <UART_SetConfig+0x32c>)
 8002220:	fba2 2303 	umull	r2, r3, r2, r3
 8002224:	095b      	lsrs	r3, r3, #5
 8002226:	2264      	movs	r2, #100	; 0x64
 8002228:	fb02 f303 	mul.w	r3, r2, r3
 800222c:	1aeb      	subs	r3, r5, r3
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	3332      	adds	r3, #50	; 0x32
 8002232:	4a42      	ldr	r2, [pc, #264]	; (800233c <UART_SetConfig+0x32c>)
 8002234:	fba2 2303 	umull	r2, r3, r2, r3
 8002238:	095b      	lsrs	r3, r3, #5
 800223a:	f003 0207 	and.w	r2, r3, #7
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4422      	add	r2, r4
 8002244:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002246:	e0e7      	b.n	8002418 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a39      	ldr	r2, [pc, #228]	; (8002334 <UART_SetConfig+0x324>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d004      	beq.n	800225c <UART_SetConfig+0x24c>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a38      	ldr	r2, [pc, #224]	; (8002338 <UART_SetConfig+0x328>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d171      	bne.n	8002340 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800225c:	f7ff fa7c 	bl	8001758 <HAL_RCC_GetPCLK2Freq>
 8002260:	4602      	mov	r2, r0
 8002262:	4613      	mov	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	009a      	lsls	r2, r3, #2
 800226a:	441a      	add	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	fbb2 f3f3 	udiv	r3, r2, r3
 8002276:	4a31      	ldr	r2, [pc, #196]	; (800233c <UART_SetConfig+0x32c>)
 8002278:	fba2 2303 	umull	r2, r3, r2, r3
 800227c:	095b      	lsrs	r3, r3, #5
 800227e:	011c      	lsls	r4, r3, #4
 8002280:	f7ff fa6a 	bl	8001758 <HAL_RCC_GetPCLK2Freq>
 8002284:	4602      	mov	r2, r0
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	009a      	lsls	r2, r3, #2
 800228e:	441a      	add	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	fbb2 f5f3 	udiv	r5, r2, r3
 800229a:	f7ff fa5d 	bl	8001758 <HAL_RCC_GetPCLK2Freq>
 800229e:	4602      	mov	r2, r0
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	009a      	lsls	r2, r3, #2
 80022a8:	441a      	add	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b4:	4a21      	ldr	r2, [pc, #132]	; (800233c <UART_SetConfig+0x32c>)
 80022b6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	2264      	movs	r2, #100	; 0x64
 80022be:	fb02 f303 	mul.w	r3, r2, r3
 80022c2:	1aeb      	subs	r3, r5, r3
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	3332      	adds	r3, #50	; 0x32
 80022c8:	4a1c      	ldr	r2, [pc, #112]	; (800233c <UART_SetConfig+0x32c>)
 80022ca:	fba2 2303 	umull	r2, r3, r2, r3
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022d4:	441c      	add	r4, r3
 80022d6:	f7ff fa3f 	bl	8001758 <HAL_RCC_GetPCLK2Freq>
 80022da:	4602      	mov	r2, r0
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	009a      	lsls	r2, r3, #2
 80022e4:	441a      	add	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	fbb2 f5f3 	udiv	r5, r2, r3
 80022f0:	f7ff fa32 	bl	8001758 <HAL_RCC_GetPCLK2Freq>
 80022f4:	4602      	mov	r2, r0
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	009a      	lsls	r2, r3, #2
 80022fe:	441a      	add	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	fbb2 f3f3 	udiv	r3, r2, r3
 800230a:	4a0c      	ldr	r2, [pc, #48]	; (800233c <UART_SetConfig+0x32c>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	095b      	lsrs	r3, r3, #5
 8002312:	2264      	movs	r2, #100	; 0x64
 8002314:	fb02 f303 	mul.w	r3, r2, r3
 8002318:	1aeb      	subs	r3, r5, r3
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	3332      	adds	r3, #50	; 0x32
 800231e:	4a07      	ldr	r2, [pc, #28]	; (800233c <UART_SetConfig+0x32c>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	095b      	lsrs	r3, r3, #5
 8002326:	f003 020f 	and.w	r2, r3, #15
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4422      	add	r2, r4
 8002330:	609a      	str	r2, [r3, #8]
 8002332:	e071      	b.n	8002418 <UART_SetConfig+0x408>
 8002334:	40011000 	.word	0x40011000
 8002338:	40011400 	.word	0x40011400
 800233c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002340:	f7ff f9f6 	bl	8001730 <HAL_RCC_GetPCLK1Freq>
 8002344:	4602      	mov	r2, r0
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	009a      	lsls	r2, r3, #2
 800234e:	441a      	add	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	fbb2 f3f3 	udiv	r3, r2, r3
 800235a:	4a31      	ldr	r2, [pc, #196]	; (8002420 <UART_SetConfig+0x410>)
 800235c:	fba2 2303 	umull	r2, r3, r2, r3
 8002360:	095b      	lsrs	r3, r3, #5
 8002362:	011c      	lsls	r4, r3, #4
 8002364:	f7ff f9e4 	bl	8001730 <HAL_RCC_GetPCLK1Freq>
 8002368:	4602      	mov	r2, r0
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	009a      	lsls	r2, r3, #2
 8002372:	441a      	add	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	fbb2 f5f3 	udiv	r5, r2, r3
 800237e:	f7ff f9d7 	bl	8001730 <HAL_RCC_GetPCLK1Freq>
 8002382:	4602      	mov	r2, r0
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	009a      	lsls	r2, r3, #2
 800238c:	441a      	add	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	4a21      	ldr	r2, [pc, #132]	; (8002420 <UART_SetConfig+0x410>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	095b      	lsrs	r3, r3, #5
 80023a0:	2264      	movs	r2, #100	; 0x64
 80023a2:	fb02 f303 	mul.w	r3, r2, r3
 80023a6:	1aeb      	subs	r3, r5, r3
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	3332      	adds	r3, #50	; 0x32
 80023ac:	4a1c      	ldr	r2, [pc, #112]	; (8002420 <UART_SetConfig+0x410>)
 80023ae:	fba2 2303 	umull	r2, r3, r2, r3
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023b8:	441c      	add	r4, r3
 80023ba:	f7ff f9b9 	bl	8001730 <HAL_RCC_GetPCLK1Freq>
 80023be:	4602      	mov	r2, r0
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	009a      	lsls	r2, r3, #2
 80023c8:	441a      	add	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	fbb2 f5f3 	udiv	r5, r2, r3
 80023d4:	f7ff f9ac 	bl	8001730 <HAL_RCC_GetPCLK1Freq>
 80023d8:	4602      	mov	r2, r0
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	009a      	lsls	r2, r3, #2
 80023e2:	441a      	add	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ee:	4a0c      	ldr	r2, [pc, #48]	; (8002420 <UART_SetConfig+0x410>)
 80023f0:	fba2 2303 	umull	r2, r3, r2, r3
 80023f4:	095b      	lsrs	r3, r3, #5
 80023f6:	2264      	movs	r2, #100	; 0x64
 80023f8:	fb02 f303 	mul.w	r3, r2, r3
 80023fc:	1aeb      	subs	r3, r5, r3
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	3332      	adds	r3, #50	; 0x32
 8002402:	4a07      	ldr	r2, [pc, #28]	; (8002420 <UART_SetConfig+0x410>)
 8002404:	fba2 2303 	umull	r2, r3, r2, r3
 8002408:	095b      	lsrs	r3, r3, #5
 800240a:	f003 020f 	and.w	r2, r3, #15
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4422      	add	r2, r4
 8002414:	609a      	str	r2, [r3, #8]
}
 8002416:	e7ff      	b.n	8002418 <UART_SetConfig+0x408>
 8002418:	bf00      	nop
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bdb0      	pop	{r4, r5, r7, pc}
 8002420:	51eb851f 	.word	0x51eb851f

08002424 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002432:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <LL_ADC_INJ_SetSequencerLength>:
  *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
  *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002458:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b01      	cmp	r3, #1
 8002482:	bf0c      	ite	eq
 8002484:	2301      	moveq	r3, #1
 8002486:	2300      	movne	r3, #0
 8002488:	b2db      	uxtb	r3, r3
}
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8002498:	b590      	push	{r4, r7, lr}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80024a2:	2300      	movs	r3, #0
 80024a4:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 80024a6:	481c      	ldr	r0, [pc, #112]	; (8002518 <LL_ADC_CommonInit+0x80>)
 80024a8:	f7ff ffe2 	bl	8002470 <LL_ADC_IsEnabled>
 80024ac:	4604      	mov	r4, r0
 80024ae:	481b      	ldr	r0, [pc, #108]	; (800251c <LL_ADC_CommonInit+0x84>)
 80024b0:	f7ff ffde 	bl	8002470 <LL_ADC_IsEnabled>
 80024b4:	4603      	mov	r3, r0
 80024b6:	431c      	orrs	r4, r3
 80024b8:	4819      	ldr	r0, [pc, #100]	; (8002520 <LL_ADC_CommonInit+0x88>)
 80024ba:	f7ff ffd9 	bl	8002470 <LL_ADC_IsEnabled>
 80024be:	4603      	mov	r3, r0
 80024c0:	4323      	orrs	r3, r4
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d120      	bne.n	8002508 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d012      	beq.n	80024f4 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	4b14      	ldr	r3, [pc, #80]	; (8002524 <LL_ADC_CommonInit+0x8c>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	6811      	ldr	r1, [r2, #0]
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	6852      	ldr	r2, [r2, #4]
 80024de:	4311      	orrs	r1, r2
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	6892      	ldr	r2, [r2, #8]
 80024e4:	4311      	orrs	r1, r2
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	68d2      	ldr	r2, [r2, #12]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	431a      	orrs	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	e00b      	b.n	800250c <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <LL_ADC_CommonInit+0x8c>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	431a      	orrs	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	e001      	b.n	800250c <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800250c:	7bfb      	ldrb	r3, [r7, #15]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	bd90      	pop	{r4, r7, pc}
 8002516:	bf00      	nop
 8002518:	40012000 	.word	0x40012000
 800251c:	40012100 	.word	0x40012100
 8002520:	40012200 	.word	0x40012200
 8002524:	fffc10e0 	.word	0xfffc10e0

08002528 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002532:	2300      	movs	r3, #0
 8002534:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff ff9a 	bl	8002470 <LL_ADC_IsEnabled>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d117      	bne.n	8002572 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800254a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	6811      	ldr	r1, [r2, #0]
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	6892      	ldr	r2, [r2, #8]
 8002556:	430a      	orrs	r2, r1
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	e001      	b.n	8002576 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002576:	7bfb      	ldrb	r3, [r7, #15]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800258a:	2300      	movs	r3, #0
 800258c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff ff6e 	bl	8002470 <LL_ADC_IsEnabled>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d131      	bne.n	80025fe <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00c      	beq.n	80025bc <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	6859      	ldr	r1, [r3, #4]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	430b      	orrs	r3, r1
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	e008      	b.n	80025ce <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	4b0e      	ldr	r3, [pc, #56]	; (800260c <LL_ADC_REG_Init+0x8c>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	68d2      	ldr	r2, [r2, #12]
 80025e2:	4311      	orrs	r1, r2
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	6912      	ldr	r2, [r2, #16]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	4619      	mov	r1, r3
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff ff14 	bl	8002424 <LL_ADC_REG_SetSequencerLength>
 80025fc:	e001      	b.n	8002602 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002602:	7bfb      	ldrb	r3, [r7, #15]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	c0fffcfd 	.word	0xc0fffcfd

08002610 <LL_ADC_INJ_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_INJ_Init(ADC_TypeDef *ADCx, LL_ADC_INJ_InitTypeDef *ADC_INJ_InitStruct)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800261a:	2300      	movs	r3, #0
 800261c:	73fb      	strb	r3, [r7, #15]
  }
  assert_param(IS_LL_ADC_INJ_TRIG_AUTO(ADC_INJ_InitStruct->TrigAuto));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff ff26 	bl	8002470 <LL_ADC_IsEnabled>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d12b      	bne.n	8002682 <LL_ADC_INJ_Init+0x72>
    /*    - Set ADC group injected conversion trigger: independent or         */
    /*      from ADC group regular                                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_INJ_StartConversionExtTrig().      */
    if(ADC_INJ_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00c      	beq.n	800264c <LL_ADC_INJ_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f423 52a0 	bic.w	r2, r3, #5120	; 0x1400
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	6899      	ldr	r1, [r3, #8]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	430b      	orrs	r3, r1
 8002644:	431a      	orrs	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	e008      	b.n	800265e <LL_ADC_INJ_Init+0x4e>
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f423 52a0 	bic.w	r2, r3, #5120	; 0x1400
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	431a      	orrs	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	605a      	str	r2, [r3, #4]
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_INJ_SetSequencerLength(ADCx, ADC_INJ_InitStruct->SequencerLength);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4619      	mov	r1, r3
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff fee5 	bl	800244a <LL_ADC_INJ_SetSequencerLength>
 8002680:	e001      	b.n	8002686 <LL_ADC_INJ_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002686:	7bfb      	ldrb	r3, [r7, #15]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002698:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <LL_EXTI_EnableIT_0_31+0x20>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4904      	ldr	r1, [pc, #16]	; (80026b0 <LL_EXTI_EnableIT_0_31+0x20>)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	600b      	str	r3, [r1, #0]
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	40013c00 	.word	0x40013c00

080026b4 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80026bc:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <LL_EXTI_DisableIT_0_31+0x24>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	43db      	mvns	r3, r3
 80026c4:	4904      	ldr	r1, [pc, #16]	; (80026d8 <LL_EXTI_DisableIT_0_31+0x24>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	40013c00 	.word	0x40013c00

080026dc <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <LL_EXTI_EnableEvent_0_31+0x20>)
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	4904      	ldr	r1, [pc, #16]	; (80026fc <LL_EXTI_EnableEvent_0_31+0x20>)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	604b      	str	r3, [r1, #4]

}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	40013c00 	.word	0x40013c00

08002700 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <LL_EXTI_DisableEvent_0_31+0x24>)
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	43db      	mvns	r3, r3
 8002710:	4904      	ldr	r1, [pc, #16]	; (8002724 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002712:	4013      	ands	r3, r2
 8002714:	604b      	str	r3, [r1, #4]
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40013c00 	.word	0x40013c00

08002728 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002730:	4b05      	ldr	r3, [pc, #20]	; (8002748 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	4904      	ldr	r1, [pc, #16]	; (8002748 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4313      	orrs	r3, r2
 800273a:	608b      	str	r3, [r1, #8]

}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	40013c00 	.word	0x40013c00

0800274c <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	43db      	mvns	r3, r3
 800275c:	4904      	ldr	r1, [pc, #16]	; (8002770 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800275e:	4013      	ands	r3, r2
 8002760:	608b      	str	r3, [r1, #8]

}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40013c00 	.word	0x40013c00

08002774 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800277c:	4b05      	ldr	r3, [pc, #20]	; (8002794 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	4904      	ldr	r1, [pc, #16]	; (8002794 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4313      	orrs	r3, r2
 8002786:	60cb      	str	r3, [r1, #12]
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	40013c00 	.word	0x40013c00

08002798 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80027a0:	4b06      	ldr	r3, [pc, #24]	; (80027bc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	43db      	mvns	r3, r3
 80027a8:	4904      	ldr	r1, [pc, #16]	; (80027bc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80027aa:	4013      	ands	r3, r2
 80027ac:	60cb      	str	r3, [r1, #12]
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40013c00 	.word	0x40013c00

080027c0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80027c8:	2300      	movs	r3, #0
 80027ca:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	791b      	ldrb	r3, [r3, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d060      	beq.n	8002896 <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d067      	beq.n	80028ac <LL_EXTI_Init+0xec>
    {
      switch (EXTI_InitStruct->Mode)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	795b      	ldrb	r3, [r3, #5]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d00e      	beq.n	8002802 <LL_EXTI_Init+0x42>
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d017      	beq.n	8002818 <LL_EXTI_Init+0x58>
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d120      	bne.n	800282e <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff85 	bl	8002700 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff ff48 	bl	8002690 <LL_EXTI_EnableIT_0_31>
          break;
 8002800:	e018      	b.n	8002834 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff ff54 	bl	80026b4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff63 	bl	80026dc <LL_EXTI_EnableEvent_0_31>
          break;
 8002816:	e00d      	b.n	8002834 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff ff37 	bl	8002690 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff ff58 	bl	80026dc <LL_EXTI_EnableEvent_0_31>
          break;
 800282c:	e002      	b.n	8002834 <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	73fb      	strb	r3, [r7, #15]
          break;
 8002832:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	799b      	ldrb	r3, [r3, #6]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d037      	beq.n	80028ac <LL_EXTI_Init+0xec>
      {
        switch (EXTI_InitStruct->Trigger)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	799b      	ldrb	r3, [r3, #6]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d00e      	beq.n	8002862 <LL_EXTI_Init+0xa2>
 8002844:	2b03      	cmp	r3, #3
 8002846:	d017      	beq.n	8002878 <LL_EXTI_Init+0xb8>
 8002848:	2b01      	cmp	r3, #1
 800284a:	d120      	bne.n	800288e <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff ffa1 	bl	8002798 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff ff64 	bl	8002728 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002860:	e025      	b.n	80028ae <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff ff70 	bl	800274c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ff7f 	bl	8002774 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002876:	e01a      	b.n	80028ae <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff ff53 	bl	8002728 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ff74 	bl	8002774 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800288c:	e00f      	b.n	80028ae <LL_EXTI_Init+0xee>
          default:
            status = ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	73fb      	strb	r3, [r7, #15]
            break;
 8002892:	bf00      	nop
 8002894:	e00b      	b.n	80028ae <LL_EXTI_Init+0xee>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff ff0a 	bl	80026b4 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff ff2b 	bl	8002700 <LL_EXTI_DisableEvent_0_31>
 80028aa:	e000      	b.n	80028ae <LL_EXTI_Init+0xee>
      }
 80028ac:	bf00      	nop
  }
  return status;
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b089      	sub	sp, #36	; 0x24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fa93 f3a3 	rbit	r3, r3
 80028d2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	fab3 f383 	clz	r3, r3
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	2103      	movs	r1, #3
 80028e0:	fa01 f303 	lsl.w	r3, r1, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	401a      	ands	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	fa93 f3a3 	rbit	r3, r3
 80028f2:	61bb      	str	r3, [r7, #24]
  return result;
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	fab3 f383 	clz	r3, r3
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	fa01 f303 	lsl.w	r3, r1, r3
 8002904:	431a      	orrs	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	601a      	str	r2, [r3, #0]
}
 800290a:	bf00      	nop
 800290c:	3724      	adds	r7, #36	; 0x24
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002916:	b480      	push	{r7}
 8002918:	b085      	sub	sp, #20
 800291a:	af00      	add	r7, sp, #0
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	43db      	mvns	r3, r3
 800292a:	401a      	ands	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	fb01 f303 	mul.w	r3, r1, r3
 8002934:	431a      	orrs	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	605a      	str	r2, [r3, #4]
}
 800293a:	bf00      	nop
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002946:	b480      	push	{r7}
 8002948:	b089      	sub	sp, #36	; 0x24
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	fa93 f3a3 	rbit	r3, r3
 8002960:	613b      	str	r3, [r7, #16]
  return result;
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	fab3 f383 	clz	r3, r3
 8002968:	b2db      	uxtb	r3, r3
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	2103      	movs	r1, #3
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	43db      	mvns	r3, r3
 8002974:	401a      	ands	r2, r3
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	fa93 f3a3 	rbit	r3, r3
 8002980:	61bb      	str	r3, [r7, #24]
  return result;
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	fab3 f383 	clz	r3, r3
 8002988:	b2db      	uxtb	r3, r3
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	fa01 f303 	lsl.w	r3, r1, r3
 8002992:	431a      	orrs	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002998:	bf00      	nop
 800299a:	3724      	adds	r7, #36	; 0x24
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b089      	sub	sp, #36	; 0x24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	fa93 f3a3 	rbit	r3, r3
 80029be:	613b      	str	r3, [r7, #16]
  return result;
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	2103      	movs	r1, #3
 80029cc:	fa01 f303 	lsl.w	r3, r1, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	401a      	ands	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	fa93 f3a3 	rbit	r3, r3
 80029de:	61bb      	str	r3, [r7, #24]
  return result;
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	fab3 f383 	clz	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	fa01 f303 	lsl.w	r3, r1, r3
 80029f0:	431a      	orrs	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	60da      	str	r2, [r3, #12]
}
 80029f6:	bf00      	nop
 80029f8:	3724      	adds	r7, #36	; 0x24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b089      	sub	sp, #36	; 0x24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a1a      	ldr	r2, [r3, #32]
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	fa93 f3a3 	rbit	r3, r3
 8002a1c:	613b      	str	r3, [r7, #16]
  return result;
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	fab3 f383 	clz	r3, r3
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	210f      	movs	r1, #15
 8002a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	401a      	ands	r2, r3
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	fa93 f3a3 	rbit	r3, r3
 8002a3c:	61bb      	str	r3, [r7, #24]
  return result;
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	fab3 f383 	clz	r3, r3
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002a54:	bf00      	nop
 8002a56:	3724      	adds	r7, #36	; 0x24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b089      	sub	sp, #36	; 0x24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	0a1b      	lsrs	r3, r3, #8
 8002a74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	613b      	str	r3, [r7, #16]
  return result;
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	fab3 f383 	clz	r3, r3
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	210f      	movs	r1, #15
 8002a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	401a      	ands	r2, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	0a1b      	lsrs	r3, r3, #8
 8002a96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	fa93 f3a3 	rbit	r3, r3
 8002a9e:	61bb      	str	r3, [r7, #24]
  return result;
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	fab3 f383 	clz	r3, r3
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002ab6:	bf00      	nop
 8002ab8:	3724      	adds	r7, #36	; 0x24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b088      	sub	sp, #32
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	fa93 f3a3 	rbit	r3, r3
 8002ae0:	613b      	str	r3, [r7, #16]
  return result;
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	fab3 f383 	clz	r3, r3
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002aec:	e049      	b.n	8002b82 <LL_GPIO_Init+0xc0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	2101      	movs	r1, #1
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	fa01 f303 	lsl.w	r3, r1, r3
 8002afa:	4013      	ands	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d03b      	beq.n	8002b7c <LL_GPIO_Init+0xba>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	69b9      	ldr	r1, [r7, #24]
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7ff fed3 	bl	80028b8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d003      	beq.n	8002b22 <LL_GPIO_Init+0x60>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d106      	bne.n	8002b30 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	461a      	mov	r2, r3
 8002b28:	69b9      	ldr	r1, [r7, #24]
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff ff0b 	bl	8002946 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	461a      	mov	r2, r3
 8002b36:	69b9      	ldr	r1, [r7, #24]
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7ff ff33 	bl	80029a4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d11a      	bne.n	8002b7c <LL_GPIO_Init+0xba>
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	fa93 f3a3 	rbit	r3, r3
 8002b50:	60bb      	str	r3, [r7, #8]
  return result;
 8002b52:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002b54:	fab3 f383 	clz	r3, r3
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b07      	cmp	r3, #7
 8002b5c:	d807      	bhi.n	8002b6e <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	461a      	mov	r2, r3
 8002b64:	69b9      	ldr	r1, [r7, #24]
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff ff4b 	bl	8002a02 <LL_GPIO_SetAFPin_0_7>
 8002b6c:	e006      	b.n	8002b7c <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	461a      	mov	r2, r3
 8002b74:	69b9      	ldr	r1, [r7, #24]
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7ff ff72 	bl	8002a60 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1ae      	bne.n	8002aee <LL_GPIO_Init+0x2c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d003      	beq.n	8002ba0 <LL_GPIO_Init+0xde>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d107      	bne.n	8002bb0 <LL_GPIO_Init+0xee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	6819      	ldr	r1, [r3, #0]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7ff feb3 	bl	8002916 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3720      	adds	r7, #32
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
 8002bde:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	f043 0201 	orr.w	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	615a      	str	r2, [r3, #20]
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
	...

08002ca0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a3d      	ldr	r2, [pc, #244]	; (8002da8 <LL_TIM_Init+0x108>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d013      	beq.n	8002ce0 <LL_TIM_Init+0x40>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cbe:	d00f      	beq.n	8002ce0 <LL_TIM_Init+0x40>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a3a      	ldr	r2, [pc, #232]	; (8002dac <LL_TIM_Init+0x10c>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d00b      	beq.n	8002ce0 <LL_TIM_Init+0x40>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a39      	ldr	r2, [pc, #228]	; (8002db0 <LL_TIM_Init+0x110>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d007      	beq.n	8002ce0 <LL_TIM_Init+0x40>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a38      	ldr	r2, [pc, #224]	; (8002db4 <LL_TIM_Init+0x114>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d003      	beq.n	8002ce0 <LL_TIM_Init+0x40>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a37      	ldr	r2, [pc, #220]	; (8002db8 <LL_TIM_Init+0x118>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d106      	bne.n	8002cee <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a2d      	ldr	r2, [pc, #180]	; (8002da8 <LL_TIM_Init+0x108>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d02b      	beq.n	8002d4e <LL_TIM_Init+0xae>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cfc:	d027      	beq.n	8002d4e <LL_TIM_Init+0xae>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a2a      	ldr	r2, [pc, #168]	; (8002dac <LL_TIM_Init+0x10c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d023      	beq.n	8002d4e <LL_TIM_Init+0xae>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a29      	ldr	r2, [pc, #164]	; (8002db0 <LL_TIM_Init+0x110>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d01f      	beq.n	8002d4e <LL_TIM_Init+0xae>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a28      	ldr	r2, [pc, #160]	; (8002db4 <LL_TIM_Init+0x114>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d01b      	beq.n	8002d4e <LL_TIM_Init+0xae>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a27      	ldr	r2, [pc, #156]	; (8002db8 <LL_TIM_Init+0x118>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d017      	beq.n	8002d4e <LL_TIM_Init+0xae>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a26      	ldr	r2, [pc, #152]	; (8002dbc <LL_TIM_Init+0x11c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d013      	beq.n	8002d4e <LL_TIM_Init+0xae>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a25      	ldr	r2, [pc, #148]	; (8002dc0 <LL_TIM_Init+0x120>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d00f      	beq.n	8002d4e <LL_TIM_Init+0xae>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a24      	ldr	r2, [pc, #144]	; (8002dc4 <LL_TIM_Init+0x124>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00b      	beq.n	8002d4e <LL_TIM_Init+0xae>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a23      	ldr	r2, [pc, #140]	; (8002dc8 <LL_TIM_Init+0x128>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d007      	beq.n	8002d4e <LL_TIM_Init+0xae>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a22      	ldr	r2, [pc, #136]	; (8002dcc <LL_TIM_Init+0x12c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d003      	beq.n	8002d4e <LL_TIM_Init+0xae>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a21      	ldr	r2, [pc, #132]	; (8002dd0 <LL_TIM_Init+0x130>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d106      	bne.n	8002d5c <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	4619      	mov	r1, r3
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff ff34 	bl	8002bd6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	881b      	ldrh	r3, [r3, #0]
 8002d72:	4619      	mov	r1, r3
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7ff ff20 	bl	8002bba <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a0a      	ldr	r2, [pc, #40]	; (8002da8 <LL_TIM_Init+0x108>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d003      	beq.n	8002d8a <LL_TIM_Init+0xea>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a0c      	ldr	r2, [pc, #48]	; (8002db8 <LL_TIM_Init+0x118>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d105      	bne.n	8002d96 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	7c1b      	ldrb	r3, [r3, #16]
 8002d8e:	4619      	mov	r1, r3
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7ff ff2e 	bl	8002bf2 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7ff ff71 	bl	8002c7e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40010000 	.word	0x40010000
 8002dac:	40000400 	.word	0x40000400
 8002db0:	40000800 	.word	0x40000800
 8002db4:	40000c00 	.word	0x40000c00
 8002db8:	40010400 	.word	0x40010400
 8002dbc:	40014000 	.word	0x40014000
 8002dc0:	40014400 	.word	0x40014400
 8002dc4:	40014800 	.word	0x40014800
 8002dc8:	40001800 	.word	0x40001800
 8002dcc:	40001c00 	.word	0x40001c00
 8002dd0:	40002000 	.word	0x40002000

08002dd4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2b10      	cmp	r3, #16
 8002de8:	d012      	beq.n	8002e10 <LL_TIM_OC_Init+0x3c>
 8002dea:	2b10      	cmp	r3, #16
 8002dec:	d802      	bhi.n	8002df4 <LL_TIM_OC_Init+0x20>
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d007      	beq.n	8002e02 <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002df2:	e022      	b.n	8002e3a <LL_TIM_OC_Init+0x66>
  switch (Channel)
 8002df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002df8:	d011      	beq.n	8002e1e <LL_TIM_OC_Init+0x4a>
 8002dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dfe:	d015      	beq.n	8002e2c <LL_TIM_OC_Init+0x58>
      break;
 8002e00:	e01b      	b.n	8002e3a <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 f867 	bl	8002ed8 <OC1Config>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	75fb      	strb	r3, [r7, #23]
      break;
 8002e0e:	e014      	b.n	8002e3a <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f8cc 	bl	8002fb0 <OC2Config>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e1c:	e00d      	b.n	8002e3a <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 f935 	bl	8003090 <OC3Config>
 8002e26:	4603      	mov	r3, r0
 8002e28:	75fb      	strb	r3, [r7, #23]
      break;
 8002e2a:	e006      	b.n	8002e3a <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 f99e 	bl	8003170 <OC4Config>
 8002e34:	4603      	mov	r3, r0
 8002e36:	75fb      	strb	r3, [r7, #23]
      break;
 8002e38:	bf00      	nop
  }

  return result;
 8002e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	7b12      	ldrb	r2, [r2, #12]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	89d2      	ldrh	r2, [r2, #14]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
	...

08002ed8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	f023 0201 	bic.w	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f023 0303 	bic.w	r3, r3, #3
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f023 0202 	bic.w	r2, r3, #2
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f023 0201 	bic.w	r2, r3, #1
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a1c      	ldr	r2, [pc, #112]	; (8002fa8 <OC1Config+0xd0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d003      	beq.n	8002f42 <OC1Config+0x6a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a1b      	ldr	r2, [pc, #108]	; (8002fac <OC1Config+0xd4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d11e      	bne.n	8002f80 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f023 0208 	bic.w	r2, r3, #8
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f023 0204 	bic.w	r2, r3, #4
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	4619      	mov	r1, r3
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7ff fe3b 	bl	8002c0e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40010000 	.word	0x40010000
 8002fac:	40010400 	.word	0x40010400

08002fb0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	f023 0210 	bic.w	r2, r3, #16
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	021b      	lsls	r3, r3, #8
 8002fec:	4313      	orrs	r3, r2
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f023 0220 	bic.w	r2, r3, #32
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f023 0210 	bic.w	r2, r3, #16
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	4313      	orrs	r3, r2
 800300e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a1d      	ldr	r2, [pc, #116]	; (8003088 <OC2Config+0xd8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d003      	beq.n	8003020 <OC2Config+0x70>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a1c      	ldr	r2, [pc, #112]	; (800308c <OC2Config+0xdc>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d11f      	bne.n	8003060 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	019b      	lsls	r3, r3, #6
 800302c:	4313      	orrs	r3, r2
 800302e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	019b      	lsls	r3, r3, #6
 800303c:	4313      	orrs	r3, r2
 800303e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4313      	orrs	r3, r2
 800304e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	4313      	orrs	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	4619      	mov	r1, r3
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7ff fdd9 	bl	8002c2a <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40010000 	.word	0x40010000
 800308c:	40010400 	.word	0x40010400

08003090 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f023 0303 	bic.w	r3, r3, #3
 80030be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	021b      	lsls	r3, r3, #8
 80030da:	4313      	orrs	r3, r2
 80030dc:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	021b      	lsls	r3, r3, #8
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a1d      	ldr	r2, [pc, #116]	; (8003168 <OC3Config+0xd8>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d003      	beq.n	80030fe <OC3Config+0x6e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a1c      	ldr	r2, [pc, #112]	; (800316c <OC3Config+0xdc>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d11f      	bne.n	800313e <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	029b      	lsls	r3, r3, #10
 800310a:	4313      	orrs	r3, r2
 800310c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	029b      	lsls	r3, r3, #10
 800311a:	4313      	orrs	r3, r2
 800311c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	4313      	orrs	r3, r2
 800312c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	015b      	lsls	r3, r3, #5
 800313a:	4313      	orrs	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	4619      	mov	r1, r3
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff fd78 	bl	8002c46 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40010000 	.word	0x40010000
 800316c:	40010400 	.word	0x40010400

08003170 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800319e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	021b      	lsls	r3, r3, #8
 80031ac:	4313      	orrs	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	031b      	lsls	r3, r3, #12
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	031b      	lsls	r3, r3, #12
 80031cc:	4313      	orrs	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a11      	ldr	r2, [pc, #68]	; (8003218 <OC4Config+0xa8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d003      	beq.n	80031e0 <OC4Config+0x70>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a10      	ldr	r2, [pc, #64]	; (800321c <OC4Config+0xac>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d107      	bne.n	80031f0 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	019b      	lsls	r3, r3, #6
 80031ec:	4313      	orrs	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4619      	mov	r1, r3
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff fd2d 	bl	8002c62 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40010000 	.word	0x40010000
 800321c:	40010400 	.word	0x40010400

08003220 <_ZN9ArgSensorC1Ev>:
 *      Author: watashi
 */

#include "ArgSensor.hpp"

ArgSensor::ArgSensor() {
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	4a06      	ldr	r2, [pc, #24]	; (8003244 <_ZN9ArgSensorC1Ev+0x24>)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	mArg = 0;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	605a      	str	r2, [r3, #4]
}
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4618      	mov	r0, r3
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	08009330 	.word	0x08009330

08003248 <_ZN9ArgSensorD1Ev>:

ArgSensor::~ArgSensor() {
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	4a04      	ldr	r2, [pc, #16]	; (8003264 <_ZN9ArgSensorD1Ev+0x1c>)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4618      	mov	r0, r3
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	08009330 	.word	0x08009330

08003268 <_ZN9ArgSensorD0Ev>:
ArgSensor::~ArgSensor() {
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
}
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7ff ffe9 	bl	8003248 <_ZN9ArgSensorD1Ev>
 8003276:	2108      	movs	r1, #8
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f003 f8e0 	bl	800643e <_ZdlPvj>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4618      	mov	r0, r3
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <_ZN9ArgSensor9incrementEf>:

void ArgSensor::Init(void) {
	mArg = 0;
}

void ArgSensor::increment(float pArg){
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	ed87 0a00 	vstr	s0, [r7]
	mArg = mArg + pArg;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	ed93 7a01 	vldr	s14, [r3, #4]
 800329a:	edd7 7a00 	vldr	s15, [r7]
 800329e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <_ZN9ArgSensor6getArgEv>:

void ArgSensor::decrement(float pArg){
	mArg = mArg - pArg;
}

float ArgSensor::getArg(void){
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
	return mArg;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	ee07 3a90 	vmov	s15, r3
}
 80032c4:	eeb0 0a67 	vmov.f32	s0, s15
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	6039      	str	r1, [r7, #0]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
	...

080032ec <_ZN7MathLibC1Ev>:

#include "MathLib.hpp"
#include <vector>
#include "math.h"

MathLib::MathLib() {
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	4a0a      	ldr	r2, [pc, #40]	; (8003320 <_ZN7MathLibC1Ev+0x34>)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3304      	adds	r3, #4
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 f96f 	bl	80035e2 <_ZNSt6vectorIfSaIfEEC1Ev>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3310      	adds	r3, #16
 8003308:	4618      	mov	r0, r3
 800330a:	f000 f96a 	bl	80035e2 <_ZNSt6vectorIfSaIfEEC1Ev>
	mSize = 0;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	61da      	str	r2, [r3, #28]
}
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	08009340 	.word	0x08009340

08003324 <_ZN7MathLibD1Ev>:

MathLib::~MathLib() {
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	4a0f      	ldr	r2, [pc, #60]	; (800336c <_ZN7MathLibD1Ev+0x48>)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	601a      	str	r2, [r3, #0]
	mSize = 0;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	61da      	str	r2, [r3, #28]
	mSinList.clear();
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3304      	adds	r3, #4
 800333c:	4618      	mov	r0, r3
 800333e:	f000 f978 	bl	8003632 <_ZNSt6vectorIfSaIfEE5clearEv>
	mCosList.clear();
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3310      	adds	r3, #16
 8003346:	4618      	mov	r0, r3
 8003348:	f000 f973 	bl	8003632 <_ZNSt6vectorIfSaIfEE5clearEv>
MathLib::~MathLib() {
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3310      	adds	r3, #16
 8003350:	4618      	mov	r0, r3
 8003352:	f000 f953 	bl	80035fc <_ZNSt6vectorIfSaIfEED1Ev>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3304      	adds	r3, #4
 800335a:	4618      	mov	r0, r3
 800335c:	f000 f94e 	bl	80035fc <_ZNSt6vectorIfSaIfEED1Ev>
}
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4618      	mov	r0, r3
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	08009340 	.word	0x08009340

08003370 <_ZN7MathLibD0Ev>:
MathLib::~MathLib() {
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
}
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff ffd3 	bl	8003324 <_ZN7MathLibD1Ev>
 800337e:	2124      	movs	r1, #36	; 0x24
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f003 f85c 	bl	800643e <_ZdlPvj>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4618      	mov	r0, r3
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <_ZN7MathLib10setLibSizeEi>:

void MathLib::setLibSize(int pSize){
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
	mSize = pSize;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	61da      	str	r2, [r3, #28]
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	0000      	movs	r0, r0
	...

080033b0 <_ZN7MathLib5fInitEi>:

void MathLib::fInit(int pSize){
 80033b0:	b590      	push	{r4, r7, lr}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
	setLibSize(pSize);
 80033ba:	6839      	ldr	r1, [r7, #0]
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7ff ffe7 	bl	8003390 <_ZN7MathLib10setLibSizeEi>
	if(mSize == 0){
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d100      	bne.n	80033cc <_ZN7MathLib5fInitEi+0x1c>
		while(1){}//error check
 80033ca:	e7fe      	b.n	80033ca <_ZN7MathLib5fInitEi+0x1a>
	}
	mRadvsSize = mSize / 2*M_PI;//サイズと1radianの比
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	0fda      	lsrs	r2, r3, #31
 80033d2:	4413      	add	r3, r2
 80033d4:	105b      	asrs	r3, r3, #1
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fd f870 	bl	80004bc <__aeabi_i2d>
 80033dc:	a30e      	add	r3, pc, #56	; (adr r3, 8003418 <_ZN7MathLib5fInitEi+0x68>)
 80033de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e2:	f7fd f8d5 	bl	8000590 <__aeabi_dmul>
 80033e6:	4603      	mov	r3, r0
 80033e8:	460c      	mov	r4, r1
 80033ea:	4618      	mov	r0, r3
 80033ec:	4621      	mov	r1, r4
 80033ee:	f7fd fba7 	bl	8000b40 <__aeabi_d2f>
 80033f2:	4602      	mov	r2, r0
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	621a      	str	r2, [r3, #32]

	fSinVectorInit(&mSinList);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3304      	adds	r3, #4
 80033fc:	4619      	mov	r1, r3
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f81a 	bl	8003438 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE>
	fCosVectorInit(&mCosList);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3310      	adds	r3, #16
 8003408:	4619      	mov	r1, r3
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f864 	bl	80034d8 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE>
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	bd90      	pop	{r4, r7, pc}
 8003418:	54442d18 	.word	0x54442d18
 800341c:	400921fb 	.word	0x400921fb

08003420 <_ZN7MathLib10getLibSizeEv>:

int MathLib::getLibSize(void){return mSize;}
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	4618      	mov	r0, r3
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE>:

void MathLib::fSinVectorInit(std::vector<float> *pVector){
 8003438:	b5b0      	push	{r4, r5, r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
	for(int i=0;i<mSize;i++){
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	429a      	cmp	r2, r3
 800344e:	da39      	bge.n	80034c4 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE+0x8c>
		float fsinval = sin(i*2*M_PI/(float)mSize);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	4618      	mov	r0, r3
 8003456:	f7fd f831 	bl	80004bc <__aeabi_i2d>
 800345a:	a31d      	add	r3, pc, #116	; (adr r3, 80034d0 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE+0x98>)
 800345c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003460:	f7fd f896 	bl	8000590 <__aeabi_dmul>
 8003464:	4603      	mov	r3, r0
 8003466:	460c      	mov	r4, r1
 8003468:	4625      	mov	r5, r4
 800346a:	461c      	mov	r4, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	ee07 3a90 	vmov	s15, r3
 8003474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003478:	ee17 0a90 	vmov	r0, s15
 800347c:	f7fd f830 	bl	80004e0 <__aeabi_f2d>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4620      	mov	r0, r4
 8003486:	4629      	mov	r1, r5
 8003488:	f7fd f9ac 	bl	80007e4 <__aeabi_ddiv>
 800348c:	4603      	mov	r3, r0
 800348e:	460c      	mov	r4, r1
 8003490:	ec44 3b17 	vmov	d7, r3, r4
 8003494:	eeb0 0a47 	vmov.f32	s0, s14
 8003498:	eef0 0a67 	vmov.f32	s1, s15
 800349c:	f003 f8e0 	bl	8006660 <sin>
 80034a0:	ec54 3b10 	vmov	r3, r4, d0
 80034a4:	4618      	mov	r0, r3
 80034a6:	4621      	mov	r1, r4
 80034a8:	f7fd fb4a 	bl	8000b40 <__aeabi_d2f>
 80034ac:	4603      	mov	r3, r0
 80034ae:	60bb      	str	r3, [r7, #8]
		pVector->push_back(fsinval);
 80034b0:	f107 0308 	add.w	r3, r7, #8
 80034b4:	4619      	mov	r1, r3
 80034b6:	6838      	ldr	r0, [r7, #0]
 80034b8:	f000 f8c9 	bl	800364e <_ZNSt6vectorIfSaIfEE9push_backERKf>
	for(int i=0;i<mSize;i++){
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	3301      	adds	r3, #1
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	e7c0      	b.n	8003446 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE+0xe>
	}
}
 80034c4:	bf00      	nop
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bdb0      	pop	{r4, r5, r7, pc}
 80034cc:	f3af 8000 	nop.w
 80034d0:	54442d18 	.word	0x54442d18
 80034d4:	400921fb 	.word	0x400921fb

080034d8 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE>:

void MathLib::fCosVectorInit(std::vector<float> *pVector){
 80034d8:	b5b0      	push	{r4, r5, r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
	for(int i=0;i<mSize;i++){
 80034e2:	2300      	movs	r3, #0
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	da39      	bge.n	8003564 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE+0x8c>
		float fcosval = cos(i*2*M_PI/(float)mSize);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fc ffe1 	bl	80004bc <__aeabi_i2d>
 80034fa:	a31d      	add	r3, pc, #116	; (adr r3, 8003570 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE+0x98>)
 80034fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003500:	f7fd f846 	bl	8000590 <__aeabi_dmul>
 8003504:	4603      	mov	r3, r0
 8003506:	460c      	mov	r4, r1
 8003508:	4625      	mov	r5, r4
 800350a:	461c      	mov	r4, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	ee07 3a90 	vmov	s15, r3
 8003514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003518:	ee17 0a90 	vmov	r0, s15
 800351c:	f7fc ffe0 	bl	80004e0 <__aeabi_f2d>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4620      	mov	r0, r4
 8003526:	4629      	mov	r1, r5
 8003528:	f7fd f95c 	bl	80007e4 <__aeabi_ddiv>
 800352c:	4603      	mov	r3, r0
 800352e:	460c      	mov	r4, r1
 8003530:	ec44 3b17 	vmov	d7, r3, r4
 8003534:	eeb0 0a47 	vmov.f32	s0, s14
 8003538:	eef0 0a67 	vmov.f32	s1, s15
 800353c:	f003 f84c 	bl	80065d8 <cos>
 8003540:	ec54 3b10 	vmov	r3, r4, d0
 8003544:	4618      	mov	r0, r3
 8003546:	4621      	mov	r1, r4
 8003548:	f7fd fafa 	bl	8000b40 <__aeabi_d2f>
 800354c:	4603      	mov	r3, r0
 800354e:	60bb      	str	r3, [r7, #8]
		pVector->push_back(fcosval);
 8003550:	f107 0308 	add.w	r3, r7, #8
 8003554:	4619      	mov	r1, r3
 8003556:	6838      	ldr	r0, [r7, #0]
 8003558:	f000 f879 	bl	800364e <_ZNSt6vectorIfSaIfEE9push_backERKf>
	for(int i=0;i<mSize;i++){
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	3301      	adds	r3, #1
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	e7c0      	b.n	80034e6 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE+0xe>
	}
}
 8003564:	bf00      	nop
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bdb0      	pop	{r4, r5, r7, pc}
 800356c:	f3af 8000 	nop.w
 8003570:	54442d18 	.word	0x54442d18
 8003574:	400921fb 	.word	0x400921fb

08003578 <_ZN7MathLib10getSinListEv>:

std::vector<float> MathLib::getSinList(void){
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
	return mSinList;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	3304      	adds	r3, #4
 8003586:	4619      	mov	r1, r3
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f885 	bl	8003698 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
}
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <_ZN7MathLib10getCosListEv>:

std::vector<float> MathLib::getCosList(void){
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
 800359e:	6039      	str	r1, [r7, #0]
	return mCosList;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	3310      	adds	r3, #16
 80035a4:	4619      	mov	r1, r3
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f876 	bl	8003698 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
}
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <_ZN7MathLib14radToSizeCountEf>:

int MathLib::radToSizeCount(float pradian){
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	ed87 0a00 	vstr	s0, [r7]
	return pradian * mRadvsSize;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	ed93 7a08 	vldr	s14, [r3, #32]
 80035c6:	edd7 7a00 	vldr	s15, [r7]
 80035ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035d2:	ee17 3a90 	vmov	r3, s15
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <_ZNSt6vectorIfSaIfEEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b082      	sub	sp, #8
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 f89c 	bl	800372a <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4618      	mov	r0, r3
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <_ZNSt6vectorIfSaIfEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80035fc:	b5b0      	push	{r4, r5, r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681c      	ldr	r4, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4618      	mov	r0, r3
 8003610:	f000 f8b2 	bl	8003778 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003614:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003616:	461a      	mov	r2, r3
 8003618:	4629      	mov	r1, r5
 800361a:	4620      	mov	r0, r4
 800361c:	f000 f8b7 	bl	800378e <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4618      	mov	r0, r3
 8003624:	f000 f88e 	bl	8003744 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bdb0      	pop	{r4, r5, r7, pc}

08003632 <_ZNSt6vectorIfSaIfEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8003632:	b580      	push	{r7, lr}
 8003634:	b082      	sub	sp, #8
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4619      	mov	r1, r3
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f8b2 	bl	80037aa <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>
 8003646:	bf00      	nop
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <_ZNSt6vectorIfSaIfEE9push_backERKf>:
      push_back(const value_type& __x)
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	429a      	cmp	r2, r3
 8003662:	d00c      	beq.n	800367e <_ZNSt6vectorIfSaIfEE9push_backERKf+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	4619      	mov	r1, r3
 800366e:	f000 f8bf 	bl	80037f0 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	1d1a      	adds	r2, r3, #4
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	605a      	str	r2, [r3, #4]
      }
 800367c:	e008      	b.n	8003690 <_ZNSt6vectorIfSaIfEE9push_backERKf+0x42>
	  _M_realloc_insert(end(), __x);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f8c9 	bl	8003816 <_ZNSt6vectorIfSaIfEE3endEv>
 8003684:	4603      	mov	r3, r0
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	4619      	mov	r1, r3
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f8d4 	bl	8003838 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>
      }
 8003690:	bf00      	nop
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 8003698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 80036a2:	687c      	ldr	r4, [r7, #4]
 80036a4:	6838      	ldr	r0, [r7, #0]
 80036a6:	f000 f953 	bl	8003950 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80036aa:	4605      	mov	r5, r0
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 f96d 	bl	800398e <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80036b4:	4602      	mov	r2, r0
 80036b6:	f107 030c 	add.w	r3, r7, #12
 80036ba:	4611      	mov	r1, r2
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 f958 	bl	8003972 <_ZN9__gnu_cxx14__alloc_traitsISaIfEE17_S_select_on_copyERKS1_>
 80036c2:	f107 030c 	add.w	r3, r7, #12
 80036c6:	461a      	mov	r2, r3
 80036c8:	4629      	mov	r1, r5
 80036ca:	4620      	mov	r0, r4
 80036cc:	f000 f976 	bl	80039bc <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 80036d0:	f107 030c 	add.w	r3, r7, #12
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 f965 	bl	80039a4 <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80036da:	6838      	ldr	r0, [r7, #0]
 80036dc:	f000 f982 	bl	80039e4 <_ZNKSt6vectorIfSaIfEE5beginEv>
 80036e0:	4605      	mov	r5, r0
 80036e2:	6838      	ldr	r0, [r7, #0]
 80036e4:	f000 f992 	bl	8003a0c <_ZNKSt6vectorIfSaIfEE3endEv>
 80036e8:	4606      	mov	r6, r0
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 f841 	bl	8003778 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80036f6:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80036f8:	4622      	mov	r2, r4
 80036fa:	4631      	mov	r1, r6
 80036fc:	4628      	mov	r0, r5
 80036fe:	f000 f999 	bl	8003a34 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 8003702:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	605a      	str	r2, [r3, #4]
      }
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4618      	mov	r0, r3
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003712 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8003712:	b580      	push	{r7, lr}
 8003714:	b082      	sub	sp, #8
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f942 	bl	80039a4 <_ZNSaIfED1Ev>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      _Vector_base()
 800372a:	b580      	push	{r7, lr}
 800372c:	b082      	sub	sp, #8
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4618      	mov	r0, r3
 8003736:	f000 f98e 	bl	8003a56 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4618      	mov	r0, r3
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6819      	ldr	r1, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8003754:	461a      	mov	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800375e:	461a      	mov	r2, r3
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f98d 	bl	8003a80 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
		      - this->_M_impl._M_start); }
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff ffd2 	bl	8003712 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4618      	mov	r0, r3
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4618      	mov	r0, r3
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800378e:	b580      	push	{r7, lr}
 8003790:	b084      	sub	sp, #16
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800379a:	68b9      	ldr	r1, [r7, #8]
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 f982 	bl	8003aa6 <_ZSt8_DestroyIPfEvT_S1_>
    }
 80037a2:	bf00      	nop
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 80037aa:	b590      	push	{r4, r7, lr}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
 80037b2:	6039      	str	r1, [r7, #0]
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685c      	ldr	r4, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff ffdc 	bl	8003778 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80037c0:	4603      	mov	r3, r0
 80037c2:	461a      	mov	r2, r3
 80037c4:	4621      	mov	r1, r4
 80037c6:	6838      	ldr	r0, [r7, #0]
 80037c8:	f7ff ffe1 	bl	800378e <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	605a      	str	r2, [r3, #4]
      }
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd90      	pop	{r4, r7, pc}

080037da <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4618      	mov	r0, r3
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7ff ffec 	bl	80037da <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8003802:	4603      	mov	r3, r0
 8003804:	461a      	mov	r2, r3
 8003806:	68b9      	ldr	r1, [r7, #8]
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 f959 	bl	8003ac0 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_>
 800380e:	bf00      	nop
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <_ZNSt6vectorIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003816:	b580      	push	{r7, lr}
 8003818:	b084      	sub	sp, #16
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	1d1a      	adds	r2, r3, #4
 8003822:	f107 030c 	add.w	r3, r7, #12
 8003826:	4611      	mov	r1, r2
 8003828:	4618      	mov	r0, r3
 800382a:	f000 f961 	bl	8003af0 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8003838:	b5b0      	push	{r4, r5, r7, lr}
 800383a:	b08a      	sub	sp, #40	; 0x28
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8003844:	4a41      	ldr	r2, [pc, #260]	; (800394c <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x114>)
 8003846:	2101      	movs	r1, #1
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 f961 	bl	8003b10 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 800384e:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 f9a5 	bl	8003ba0 <_ZNSt6vectorIfSaIfEE5beginEv>
 8003856:	4603      	mov	r3, r0
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	f107 0214 	add.w	r2, r7, #20
 800385e:	f107 0308 	add.w	r3, r7, #8
 8003862:	4611      	mov	r1, r2
 8003864:	4618      	mov	r0, r3
 8003866:	f000 f9ab 	bl	8003bc0 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800386a:	4603      	mov	r3, r0
 800386c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003872:	4618      	mov	r0, r3
 8003874:	f000 f9ba 	bl	8003bec <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8003878:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800387e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8003884:	69fa      	ldr	r2, [r7, #28]
 8003886:	18d5      	adds	r5, r2, r3
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff ffa6 	bl	80037da <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800388e:	4603      	mov	r3, r0
 8003890:	461a      	mov	r2, r3
 8003892:	4629      	mov	r1, r5
 8003894:	4620      	mov	r0, r4
 8003896:	f7ff ffab 	bl	80037f0 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800389a:	2300      	movs	r3, #0
 800389c:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681c      	ldr	r4, [r3, #0]
 80038a2:	f107 0308 	add.w	r3, r7, #8
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 f9b4 	bl	8003c14 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 80038ac:	4603      	mov	r3, r0
 80038ae:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7ff ff60 	bl	8003778 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80038b8:	4603      	mov	r3, r0
	  __new_finish
 80038ba:	69fa      	ldr	r2, [r7, #28]
 80038bc:	4629      	mov	r1, r5
 80038be:	4620      	mov	r0, r4
 80038c0:	f000 f9b3 	bl	8003c2a <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 80038c4:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	3304      	adds	r3, #4
 80038ca:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 80038cc:	f107 0308 	add.w	r3, r7, #8
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 f99f 	bl	8003c14 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 80038d6:	4603      	mov	r3, r0
 80038d8:	681c      	ldr	r4, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff ff49 	bl	8003778 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80038e6:	4603      	mov	r3, r0
	  __new_finish
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	4629      	mov	r1, r5
 80038ec:	4620      	mov	r0, r4
 80038ee:	f000 f99c 	bl	8003c2a <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 80038f2:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681c      	ldr	r4, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff ff3a 	bl	8003778 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003904:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003906:	461a      	mov	r2, r3
 8003908:	4629      	mov	r1, r5
 800390a:	4620      	mov	r0, r4
 800390c:	f7ff ff3f 	bl	800378e <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 800391a:	461a      	mov	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 8003924:	461a      	mov	r2, r3
 8003926:	f000 f8ab 	bl	8003a80 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	69fa      	ldr	r2, [r7, #28]
 800392e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	69fa      	ldr	r2, [r7, #28]
 800393c:	441a      	add	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	609a      	str	r2, [r3, #8]
    }
 8003942:	bf00      	nop
 8003944:	3728      	adds	r7, #40	; 0x28
 8003946:	46bd      	mov	sp, r7
 8003948:	bdb0      	pop	{r4, r5, r7, pc}
 800394a:	bf00      	nop
 800394c:	080092c0 	.word	0x080092c0

08003950 <_ZNKSt6vectorIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	461a      	mov	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	109b      	asrs	r3, r3, #2
 8003966:	4618      	mov	r0, r3
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <_ZN9__gnu_cxx14__alloc_traitsISaIfEE17_S_select_on_copyERKS1_>:
    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::addressof(*__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
 8003972:	b580      	push	{r7, lr}
 8003974:	b082      	sub	sp, #8
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
 800397a:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6839      	ldr	r1, [r7, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f000 f96b 	bl	8003c5c <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4618      	mov	r0, r3
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <_ZNSaIfED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f970 	bl	8003c92 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4618      	mov	r0, r3
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 f96b 	bl	8003ca8 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 80039d2:	68b9      	ldr	r1, [r7, #8]
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 f97e 	bl	8003cd6 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4618      	mov	r0, r3
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	f107 020c 	add.w	r2, r7, #12
 80039f6:	f107 0308 	add.w	r3, r7, #8
 80039fa:	4611      	mov	r1, r2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 f985 	bl	8003d0c <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	f107 020c 	add.w	r2, r7, #12
 8003a1e:	f107 0308 	add.w	r3, r7, #8
 8003a22:	4611      	mov	r1, r2
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 f971 	bl	8003d0c <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	68b9      	ldr	r1, [r7, #8]
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 f970 	bl	8003d2c <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl()
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f976 	bl	8003d50 <_ZNSaIfEC1Ev>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	605a      	str	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	609a      	str	r2, [r3, #8]
	{ }
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
	if (__p)
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d005      	beq.n	8003a9e <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	68b9      	ldr	r1, [r7, #8]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 f965 	bl	8003d68 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 8003a9e:	bf00      	nop
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <_ZSt8_DestroyIPfEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b082      	sub	sp, #8
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8003ab0:	6839      	ldr	r1, [r7, #0]
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f967 	bl	8003d86 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 8003ab8:	bf00      	nop
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8003ac0:	b590      	push	{r4, r7, lr}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff fe84 	bl	80037da <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	681c      	ldr	r4, [r3, #0]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	4619      	mov	r1, r3
 8003ada:	2004      	movs	r0, #4
 8003adc:	f7ff fbf9 	bl	80032d2 <_ZnwjPv>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d000      	beq.n	8003ae8 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_+0x28>
 8003ae6:	601c      	str	r4, [r3, #0]
 8003ae8:	bf00      	nop
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd90      	pop	{r4, r7, pc}

08003af0 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4618      	mov	r0, r3
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8003b10:	b590      	push	{r4, r7, lr}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 f93d 	bl	8003d9c <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8003b22:	4604      	mov	r4, r0
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f7ff ff13 	bl	8003950 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	1ae2      	subs	r2, r4, r3
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	bf34      	ite	cc
 8003b34:	2301      	movcc	r3, #1
 8003b36:	2300      	movcs	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f002 fc95 	bl	8006470 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f7ff ff02 	bl	8003950 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003b4c:	4604      	mov	r4, r0
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f7ff fefe 	bl	8003950 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003b54:	4603      	mov	r3, r0
 8003b56:	613b      	str	r3, [r7, #16]
 8003b58:	f107 0208 	add.w	r2, r7, #8
 8003b5c:	f107 0310 	add.w	r3, r7, #16
 8003b60:	4611      	mov	r1, r2
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 f92b 	bl	8003dbe <_ZSt3maxIjERKT_S2_S2_>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4423      	add	r3, r4
 8003b6e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f7ff feed 	bl	8003950 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003b76:	4602      	mov	r2, r0
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d306      	bcc.n	8003b8c <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x7c>
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 f90c 	bl	8003d9c <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8003b84:	4602      	mov	r2, r0
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d904      	bls.n	8003b96 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x86>
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 f905 	bl	8003d9c <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8003b92:	4603      	mov	r3, r0
 8003b94:	e000      	b.n	8003b98 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x88>
 8003b96:	697b      	ldr	r3, [r7, #20]
      }
 8003b98:	4618      	mov	r0, r3
 8003b9a:	371c      	adds	r7, #28
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd90      	pop	{r4, r7, pc}

08003ba0 <_ZNSt6vectorIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	f107 030c 	add.w	r3, r7, #12
 8003bae:	4611      	mov	r1, r2
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff ff9d 	bl	8003af0 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003bc0:	b590      	push	{r4, r7, lr}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f822 	bl	8003c14 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	461c      	mov	r4, r3
 8003bd6:	6838      	ldr	r0, [r7, #0]
 8003bd8:	f000 f81c 	bl	8003c14 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	1ae3      	subs	r3, r4, r3
 8003be2:	109b      	asrs	r3, r3, #2
 8003be4:	4618      	mov	r0, r3
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd90      	pop	{r4, r7, pc}

08003bec <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d006      	beq.n	8003c0a <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6839      	ldr	r1, [r7, #0]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 f8f0 	bl	8003de6 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8003c06:	4603      	mov	r3, r0
 8003c08:	e000      	b.n	8003c0c <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 8003c0a:	2300      	movs	r3, #0
      }
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8003c2a:	b590      	push	{r4, r7, lr}
 8003c2c:	b085      	sub	sp, #20
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	607a      	str	r2, [r7, #4]
 8003c36:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 f8e3 	bl	8003e04 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 8003c3e:	4604      	mov	r4, r0
 8003c40:	68b8      	ldr	r0, [r7, #8]
 8003c42:	f000 f8df 	bl	8003e04 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 8003c46:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	4620      	mov	r0, r4
 8003c4e:	f000 f8e8 	bl	8003e22 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>
 8003c52:	4603      	mov	r3, r0
    }
 8003c54:	4618      	mov	r0, r3
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd90      	pop	{r4, r7, pc}

08003c5c <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8003c66:	6839      	ldr	r1, [r7, #0]
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f804 	bl	8003c76 <_ZNSaIfEC1ERKS_>
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) throw()
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b082      	sub	sp, #8
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8003c80:	6839      	ldr	r1, [r7, #0]
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f8de 	bl	8003e44 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 8003cb2:	6839      	ldr	r1, [r7, #0]
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7ff ffde 	bl	8003c76 <_ZNSaIfEC1ERKS_>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	605a      	str	r2, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	609a      	str	r2, [r3, #8]
	{ }
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b082      	sub	sp, #8
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
 8003cde:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8003ce0:	6839      	ldr	r1, [r7, #0]
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7ff ff82 	bl	8003bec <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	441a      	add	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	609a      	str	r2, [r3, #8]
      }
 8003d04:	bf00      	nop
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4618      	mov	r0, r3
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	68b9      	ldr	r1, [r7, #8]
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 f88b 	bl	8003e5c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 8003d46:	4603      	mov	r3, r0
    }
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3718      	adds	r7, #24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <_ZNSaIfEC1Ev>:
      allocator() throw() { }
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f88f 	bl	8003e7c <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4618      	mov	r0, r3
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	68b9      	ldr	r1, [r7, #8]
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 f88a 	bl	8003e92 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
 8003d7e:	bf00      	nop
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	6039      	str	r1, [r7, #0]
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <_ZNKSt6vectorIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff fdf1 	bl	800398e <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003dac:	4603      	mov	r3, r0
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 f87c 	bl	8003eac <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 8003db4:	4603      	mov	r3, r0
 8003db6:	4618      	mov	r0, r3
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d201      	bcs.n	8003dd8 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	e000      	b.n	8003dda <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8003dd8:	687b      	ldr	r3, [r7, #4]
    }
 8003dda:	4618      	mov	r0, r3
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b082      	sub	sp, #8
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003df0:	2200      	movs	r2, #0
 8003df2:	6839      	ldr	r1, [r7, #0]
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f865 	bl	8003ec4 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8003e0c:	f107 030c 	add.w	r3, r7, #12
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 f874 	bl	8003f00 <_ZNSt13move_iteratorIPfEC1ES0_>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b084      	sub	sp, #16
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	60f8      	str	r0, [r7, #12]
 8003e2a:	60b9      	str	r1, [r7, #8]
 8003e2c:	607a      	str	r2, [r7, #4]
 8003e2e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	68b9      	ldr	r1, [r7, #8]
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 f872 	bl	8003f1e <_ZSt18uninitialized_copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4618      	mov	r0, r3
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	68b9      	ldr	r1, [r7, #8]
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 f868 	bl	8003f42 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8003e72:	4603      	mov	r3, r0
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4618      	mov	r0, r3
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
      deallocate(pointer __p, size_type)
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b084      	sub	sp, #16
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	60f8      	str	r0, [r7, #12]
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8003e9e:	68b8      	ldr	r0, [r7, #8]
 8003ea0:	f002 facb 	bl	800643a <_ZdlPv>
      }
 8003ea4:	bf00      	nop
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f85c 	bl	8003f72 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 f84e 	bl	8003f72 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	4293      	cmp	r3, r2
 8003edc:	bf8c      	ite	hi
 8003ede:	2301      	movhi	r3, #1
 8003ee0:	2300      	movls	r3, #0
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003ee8:	f002 fabc 	bl	8006464 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f002 faa6 	bl	8006442 <_Znwj>
 8003ef6:	4603      	mov	r3, r0
      }
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <_ZNSt13move_iteratorIPfEC1ES0_>:
      move_iterator(iterator_type __i)
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4618      	mov	r0, r3
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <_ZSt18uninitialized_copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b086      	sub	sp, #24
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	60f8      	str	r0, [r7, #12]
 8003f26:	60b9      	str	r1, [r7, #8]
 8003f28:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	68b9      	ldr	r1, [r7, #8]
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 f829 	bl	8003f8a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPfES3_EET0_T_S6_S5_>
 8003f38:	4603      	mov	r3, r0
    }
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3718      	adds	r7, #24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8003f42:	b590      	push	{r4, r7, lr}
 8003f44:	b085      	sub	sp, #20
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	60f8      	str	r0, [r7, #12]
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 f82b 	bl	8003faa <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8003f54:	4604      	mov	r4, r0
 8003f56:	68b8      	ldr	r0, [r7, #8]
 8003f58:	f000 f827 	bl	8003faa <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8003f5c:	4603      	mov	r3, r0
	       __result));
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	4619      	mov	r1, r3
 8003f62:	4620      	mov	r0, r4
 8003f64:	f000 f82c 	bl	8003fc0 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 8003f68:	4603      	mov	r3, r0
    }
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd90      	pop	{r4, r7, pc}

08003f72 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8003f7a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003f7e:	4618      	mov	r0, r3
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPfES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b084      	sub	sp, #16
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	60f8      	str	r0, [r7, #12]
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	68b9      	ldr	r1, [r7, #8]
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 f82c 	bl	8003ff8 <_ZSt4copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003fc0:	b5b0      	push	{r4, r5, r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 f82b 	bl	8004028 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003fd2:	4604      	mov	r4, r0
 8003fd4:	68b8      	ldr	r0, [r7, #8]
 8003fd6:	f000 f827 	bl	8004028 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003fda:	4605      	mov	r5, r0
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f831 	bl	8004044 <_ZSt12__niter_baseIPfET_S1_>
 8003fe2:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	4629      	mov	r1, r5
 8003fe8:	4620      	mov	r0, r4
 8003fea:	f000 f836 	bl	800405a <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 8003fee:	4603      	mov	r3, r0
    }
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bdb0      	pop	{r4, r5, r7, pc}

08003ff8 <_ZSt4copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8003ff8:	b590      	push	{r4, r7, lr}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 f83a 	bl	800407e <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800400a:	4604      	mov	r4, r0
 800400c:	68b8      	ldr	r0, [r7, #8]
 800400e:	f000 f836 	bl	800407e <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8004012:	4603      	mov	r3, r0
	       __result));
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	4619      	mov	r1, r3
 8004018:	4620      	mov	r0, r4
 800401a:	f000 f841 	bl	80040a0 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>
 800401e:	4603      	mov	r3, r0
    }
 8004020:	4618      	mov	r0, r3
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	bd90      	pop	{r4, r7, pc}

08004028 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8004030:	1d3b      	adds	r3, r7, #4
 8004032:	4618      	mov	r0, r3
 8004034:	f000 f850 	bl	80040d8 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 8004038:	4603      	mov	r3, r0
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4618      	mov	r0, r3
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800405a:	b580      	push	{r7, lr}
 800405c:	b086      	sub	sp, #24
 800405e:	af00      	add	r7, sp, #0
 8004060:	60f8      	str	r0, [r7, #12]
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8004066:	2301      	movs	r3, #1
 8004068:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	68b9      	ldr	r1, [r7, #8]
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 f83d 	bl	80040ee <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8004074:	4603      	mov	r3, r0
    }
 8004076:	4618      	mov	r0, r3
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 800407e:	b580      	push	{r7, lr}
 8004080:	b082      	sub	sp, #8
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8004086:	1d3b      	adds	r3, r7, #4
 8004088:	4618      	mov	r0, r3
 800408a:	f000 f84d 	bl	8004128 <_ZNKSt13move_iteratorIPfE4baseEv>
 800408e:	4603      	mov	r3, r0
 8004090:	4618      	mov	r0, r3
 8004092:	f000 f855 	bl	8004140 <_ZSt12__miter_baseIPfET_S1_>
 8004096:	4603      	mov	r3, r0
 8004098:	4618      	mov	r0, r3
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80040a0:	b5b0      	push	{r4, r5, r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f7ff ffc9 	bl	8004044 <_ZSt12__niter_baseIPfET_S1_>
 80040b2:	4604      	mov	r4, r0
 80040b4:	68b8      	ldr	r0, [r7, #8]
 80040b6:	f7ff ffc5 	bl	8004044 <_ZSt12__niter_baseIPfET_S1_>
 80040ba:	4605      	mov	r5, r0
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7ff ffc1 	bl	8004044 <_ZSt12__niter_baseIPfET_S1_>
 80040c2:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 80040c4:	461a      	mov	r2, r3
 80040c6:	4629      	mov	r1, r5
 80040c8:	4620      	mov	r0, r4
 80040ca:	f000 f844 	bl	8004156 <_ZSt13__copy_move_aILb1EPfS0_ET1_T0_S2_S1_>
 80040ce:	4603      	mov	r3, r0
    }
 80040d0:	4618      	mov	r0, r3
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bdb0      	pop	{r4, r5, r7, pc}

080040d8 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4618      	mov	r0, r3
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b086      	sub	sp, #24
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	60f8      	str	r0, [r7, #12]
 80040f6:	60b9      	str	r1, [r7, #8]
 80040f8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	109b      	asrs	r3, r3, #2
 8004102:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d006      	beq.n	8004118 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	461a      	mov	r2, r3
 8004110:	68f9      	ldr	r1, [r7, #12]
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f003 fb01 	bl	800771a <memmove>
	  return __result + _Num;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	4413      	add	r3, r2
	}
 8004120:	4618      	mov	r0, r3
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <_ZNKSt13move_iteratorIPfE4baseEv>:
      base() const
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4618      	mov	r0, r3
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <_ZSt12__miter_baseIPfET_S1_>:
    __miter_base(_Iterator __it)
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4618      	mov	r0, r3
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <_ZSt13__copy_move_aILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004156:	b580      	push	{r7, lr}
 8004158:	b086      	sub	sp, #24
 800415a:	af00      	add	r7, sp, #0
 800415c:	60f8      	str	r0, [r7, #12]
 800415e:	60b9      	str	r1, [r7, #8]
 8004160:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8004162:	2301      	movs	r3, #1
 8004164:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	68b9      	ldr	r1, [r7, #8]
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 f805 	bl	800417a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8004170:	4603      	mov	r3, r0
    }
 8004172:	4618      	mov	r0, r3
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800417a:	b580      	push	{r7, lr}
 800417c:	b086      	sub	sp, #24
 800417e:	af00      	add	r7, sp, #0
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	109b      	asrs	r3, r3, #2
 800418e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d006      	beq.n	80041a4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	461a      	mov	r2, r3
 800419c:	68f9      	ldr	r1, [r7, #12]
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f003 fabb 	bl	800771a <memmove>
	  return __result + _Num;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	4413      	add	r3, r2
	}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3718      	adds	r7, #24
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <_ZN9MotorInfoC1Ev>:


#include "MotorInfo.hpp"
#include "Mathlib.hpp"

MotorInfo::MotorInfo() {
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	4a06      	ldr	r2, [pc, #24]	; (80041d8 <_ZN9MotorInfoC1Ev+0x24>)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	333c      	adds	r3, #60	; 0x3c
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7ff f890 	bl	80032ec <_ZN7MathLibC1Ev>
	// TODO Auto-generated constructor stub

}
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	08009350 	.word	0x08009350

080041dc <_ZN9MotorInfoD1Ev>:

MotorInfo::~MotorInfo() {
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	4a06      	ldr	r2, [pc, #24]	; (8004200 <_ZN9MotorInfoD1Ev+0x24>)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	333c      	adds	r3, #60	; 0x3c
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff f898 	bl	8003324 <_ZN7MathLibD1Ev>
	// TODO Auto-generated destructor stub
}
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4618      	mov	r0, r3
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	08009350 	.word	0x08009350

08004204 <_ZN9MotorInfoD0Ev>:
MotorInfo::~MotorInfo() {
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
}
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f7ff ffe5 	bl	80041dc <_ZN9MotorInfoD1Ev>
 8004212:	2164      	movs	r1, #100	; 0x64
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f002 f912 	bl	800643e <_ZdlPvj>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4618      	mov	r0, r3
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <_ZN7MathLibaSERKS_>:
#ifndef MATHLIB_HPP_
#define MATHLIB_HPP_

#include <vector>

class MathLib {
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	1d1a      	adds	r2, r3, #4
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	3304      	adds	r3, #4
 8004236:	4619      	mov	r1, r3
 8004238:	4610      	mov	r0, r2
 800423a:	f000 f9a0 	bl	800457e <_ZNSt6vectorIfSaIfEEaSERKS1_>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f103 0210 	add.w	r2, r3, #16
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	3310      	adds	r3, #16
 8004248:	4619      	mov	r1, r3
 800424a:	4610      	mov	r0, r2
 800424c:	f000 f997 	bl	800457e <_ZNSt6vectorIfSaIfEEaSERKS1_>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	69da      	ldr	r2, [r3, #28]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	61da      	str	r2, [r3, #28]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	6a1a      	ldr	r2, [r3, #32]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	621a      	str	r2, [r3, #32]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4618      	mov	r0, r3
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <_ZN9MotorInfo10setMathLibE7MathLib>:

void MotorInfo::setMathLib(MathLib pLib){
 800426a:	b580      	push	{r7, lr}
 800426c:	b082      	sub	sp, #8
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	6039      	str	r1, [r7, #0]
	mLib = pLib;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	333c      	adds	r3, #60	; 0x3c
 8004278:	6839      	ldr	r1, [r7, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff ffd2 	bl	8004224 <_ZN7MathLibaSERKS_>
}
 8004280:	bf00      	nop
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <_ZN7MathLibC1ERKS_>:
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
 8004292:	4a10      	ldr	r2, [pc, #64]	; (80042d4 <_ZN7MathLibC1ERKS_+0x4c>)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	1d1a      	adds	r2, r3, #4
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	3304      	adds	r3, #4
 80042a0:	4619      	mov	r1, r3
 80042a2:	4610      	mov	r0, r2
 80042a4:	f7ff f9f8 	bl	8003698 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f103 0210 	add.w	r2, r3, #16
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	3310      	adds	r3, #16
 80042b2:	4619      	mov	r1, r3
 80042b4:	4610      	mov	r0, r2
 80042b6:	f7ff f9ef 	bl	8003698 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	69da      	ldr	r2, [r3, #28]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	61da      	str	r2, [r3, #28]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	6a1a      	ldr	r2, [r3, #32]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	621a      	str	r2, [r3, #32]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4618      	mov	r0, r3
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	08009340 	.word	0x08009340

080042d8 <_ZN9MotorInfo10getMathLibEv>:

MathLib MotorInfo::getMathLib(void){return mLib;}
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	333c      	adds	r3, #60	; 0x3c
 80042e6:	4619      	mov	r1, r3
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7ff ffcd 	bl	8004288 <_ZN7MathLibC1ERKS_>
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <_ZN9MotorInfo6setArgEi>:

void MotorInfo::setVu(float pVu){mVu=pVu;};
void MotorInfo::setVv(float pVv){mVv=pVv;};
void MotorInfo::setVw(float pVw){mVw=pVw;};

void MotorInfo::setArg(int parg){
 80042f6:	b480      	push	{r7}
 80042f8:	b083      	sub	sp, #12
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
 80042fe:	6039      	str	r1, [r7, #0]
	marg = parg;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <_ZN9MotorInfo5setVdEf>:
	mIq = -mLib.getSinList().at(marg) * mIalpha + mLib.getCosList().at(marg) * mIbeta;
};

void MotorInfo::PID(void){}

void MotorInfo::setVd(float pVd){mVd = pVd;}
 8004312:	b480      	push	{r7}
 8004314:	b083      	sub	sp, #12
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
 800431a:	ed87 0a00 	vstr	s0, [r7]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	635a      	str	r2, [r3, #52]	; 0x34
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <_ZN9MotorInfo5setVqEf>:
void MotorInfo::setVq(float pVq){mVq = pVq;}
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	ed87 0a00 	vstr	s0, [r7]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	639a      	str	r2, [r3, #56]	; 0x38
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <_ZN9MotorInfo17invClarkTransformEv>:

void MotorInfo::invClarkTransform(void){
 800434e:	b580      	push	{r7, lr}
 8004350:	ed2d 8b02 	vpush	{d8}
 8004354:	b08e      	sub	sp, #56	; 0x38
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
	mValpha = mLib.getCosList().at(marg) * mVd - mLib.getSinList().at(marg) * mVq;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004360:	f107 0308 	add.w	r3, r7, #8
 8004364:	4611      	mov	r1, r2
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff f915 	bl	8003596 <_ZN7MathLib10getCosListEv>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004370:	461a      	mov	r2, r3
 8004372:	f107 0308 	add.w	r3, r7, #8
 8004376:	4611      	mov	r1, r2
 8004378:	4618      	mov	r0, r3
 800437a:	f000 f9f7 	bl	800476c <_ZNSt6vectorIfSaIfEE2atEj>
 800437e:	4603      	mov	r3, r0
 8004380:	ed93 7a00 	vldr	s14, [r3]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800438a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004394:	f107 0314 	add.w	r3, r7, #20
 8004398:	4611      	mov	r1, r2
 800439a:	4618      	mov	r0, r3
 800439c:	f7ff f8ec 	bl	8003578 <_ZN7MathLib10getSinListEv>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a4:	461a      	mov	r2, r3
 80043a6:	f107 0314 	add.w	r3, r7, #20
 80043aa:	4611      	mov	r1, r2
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 f9dd 	bl	800476c <_ZNSt6vectorIfSaIfEE2atEj>
 80043b2:	4603      	mov	r3, r0
 80043b4:	ed93 7a00 	vldr	s14, [r3]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80043be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c2:	ee78 7a67 	vsub.f32	s15, s16, s15
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 80043cc:	f107 0314 	add.w	r3, r7, #20
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff f913 	bl	80035fc <_ZNSt6vectorIfSaIfEED1Ev>
 80043d6:	f107 0308 	add.w	r3, r7, #8
 80043da:	4618      	mov	r0, r3
 80043dc:	f7ff f90e 	bl	80035fc <_ZNSt6vectorIfSaIfEED1Ev>
	mVbeta  = mLib.getSinList().at(marg) * mVd + mLib.getCosList().at(marg) * mVq;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80043e6:	f107 0320 	add.w	r3, r7, #32
 80043ea:	4611      	mov	r1, r2
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff f8c3 	bl	8003578 <_ZN7MathLib10getSinListEv>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043f6:	461a      	mov	r2, r3
 80043f8:	f107 0320 	add.w	r3, r7, #32
 80043fc:	4611      	mov	r1, r2
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 f9b4 	bl	800476c <_ZNSt6vectorIfSaIfEE2atEj>
 8004404:	4603      	mov	r3, r0
 8004406:	ed93 7a00 	vldr	s14, [r3]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004410:	ee27 8a27 	vmul.f32	s16, s14, s15
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800441a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800441e:	4611      	mov	r1, r2
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff f8b8 	bl	8003596 <_ZN7MathLib10getCosListEv>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800442a:	461a      	mov	r2, r3
 800442c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004430:	4611      	mov	r1, r2
 8004432:	4618      	mov	r0, r3
 8004434:	f000 f99a 	bl	800476c <_ZNSt6vectorIfSaIfEE2atEj>
 8004438:	4603      	mov	r3, r0
 800443a:	ed93 7a00 	vldr	s14, [r3]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004448:	ee78 7a27 	vadd.f32	s15, s16, s15
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
 8004452:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004456:	4618      	mov	r0, r3
 8004458:	f7ff f8d0 	bl	80035fc <_ZNSt6vectorIfSaIfEED1Ev>
 800445c:	f107 0320 	add.w	r3, r7, #32
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff f8cb 	bl	80035fc <_ZNSt6vectorIfSaIfEED1Ev>
};
 8004466:	bf00      	nop
 8004468:	3738      	adds	r7, #56	; 0x38
 800446a:	46bd      	mov	sp, r7
 800446c:	ecbd 8b02 	vpop	{d8}
 8004470:	bd80      	pop	{r7, pc}
	...

08004474 <_ZN9MotorInfo16invParkTransformEv>:

void MotorInfo::invParkTransform(void){
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
	mVu = 0.75f * mValpha;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004482:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8004486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	edc3 7a08 	vstr	s15, [r3, #32]
	mVv = -0.75f * mValpha + mValpha / 3 + mVbeta / 1.7320508f;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004496:	eebe 7a08 	vmov.f32	s14, #232	; 0xbf400000 -0.750
 800449a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80044a4:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 80044a8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80044ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80044b6:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8004500 <_ZN9MotorInfo16invParkTransformEv+0x8c>
 80044ba:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80044be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	mVw = - mValpha / 3 - mVbeta / 1.7320508f;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80044ce:	eef1 7a67 	vneg.f32	s15, s15
 80044d2:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80044d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80044e0:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8004500 <_ZN9MotorInfo16invParkTransformEv+0x8c>
 80044e4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80044e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
//	Iu + Iv - Iw = -2*Iw;
//	Ialpha * 2/3 + Ibeta * 2/sqrt(3) = -2 Iw;
//
//
//	Iv = -Iu - Iw;
};
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	3fddb3d7 	.word	0x3fddb3d7

08004504 <_ZN9MotorInfo5getVuEv>:
float MotorInfo::getVq(void){return mVq;};

float MotorInfo::getValpha(void){return mValpha;};
float MotorInfo::getVbeta(void){return mVbeta;};

float MotorInfo::getVu(void){return mVu;};
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	ee07 3a90 	vmov	s15, r3
 8004514:	eeb0 0a67 	vmov.f32	s0, s15
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <_ZN9MotorInfo5getVvEv>:
float MotorInfo::getVv(void){return mVv;};
 8004522:	b480      	push	{r7}
 8004524:	b083      	sub	sp, #12
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	ee07 3a90 	vmov	s15, r3
 8004532:	eeb0 0a67 	vmov.f32	s0, s15
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <_ZN9MotorInfo5getVwEv>:
float MotorInfo::getVw(void){return mVw;};
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454c:	ee07 3a90 	vmov	s15, r3
 8004550:	eeb0 0a67 	vmov.f32	s0, s15
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <_ZN9__gnu_cxx14__alloc_traitsISaIfEE27_S_propagate_on_copy_assignEv>:

    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
 800455e:	b480      	push	{r7}
 8004560:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 8004562:	2300      	movs	r3, #0
 8004564:	4618      	mov	r0, r3
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <_ZN9__gnu_cxx14__alloc_traitsISaIfEE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 800456e:	b480      	push	{r7}
 8004570:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 8004572:	2301      	movs	r3, #1
 8004574:	4618      	mov	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <_ZNSt6vectorIfSaIfEEaSERKS1_>:
    vector<_Tp, _Alloc>::
 800457e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004580:	b085      	sub	sp, #20
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	6039      	str	r1, [r7, #0]
      if (&__x != this)
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	429a      	cmp	r2, r3
 800458e:	f000 80e8 	beq.w	8004762 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1e4>
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 8004592:	f7ff ffe4 	bl	800455e <_ZN9__gnu_cxx14__alloc_traitsISaIfEE27_S_propagate_on_copy_assignEv>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d044      	beq.n	8004626 <_ZNSt6vectorIfSaIfEEaSERKS1_+0xa8>
	      if (!_Alloc_traits::_S_always_equal()
 800459c:	f7ff ffe7 	bl	800456e <_ZN9__gnu_cxx14__alloc_traitsISaIfEE15_S_always_equalEv>
 80045a0:	4603      	mov	r3, r0
 80045a2:	f083 0301 	eor.w	r3, r3, #1
 80045a6:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d012      	beq.n	80045d2 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x54>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff f8e2 	bl	8003778 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80045b4:	4604      	mov	r4, r0
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff f9e8 	bl	800398e <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80045be:	4603      	mov	r3, r0
 80045c0:	4619      	mov	r1, r3
 80045c2:	4620      	mov	r0, r4
 80045c4:	f000 f8e4 	bl	8004790 <_ZStneIfEbRKSaIT_ES3_>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x54>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x56>
 80045d2:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d018      	beq.n	800460a <_ZNSt6vectorIfSaIfEEaSERKS1_+0x8c>
		  this->clear();
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7ff f82a 	bl	8003632 <_ZNSt6vectorIfSaIfEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
				- this->_M_impl._M_start);
 80045e8:	461a      	mov	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	109b      	asrs	r3, r3, #2
		  _M_deallocate(this->_M_impl._M_start,
 80045f2:	461a      	mov	r2, r3
 80045f4:	f7ff fa44 	bl	8003a80 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
		  this->_M_impl._M_start = nullptr;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	609a      	str	r2, [r3, #8]
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff f8b3 	bl	8003778 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8004612:	4604      	mov	r4, r0
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	4618      	mov	r0, r3
 8004618:	f7ff f9b9 	bl	800398e <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800461c:	4603      	mov	r3, r0
 800461e:	4619      	mov	r1, r3
 8004620:	4620      	mov	r0, r4
 8004622:	f000 f8c1 	bl	80047a8 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>
	  const size_type __xlen = __x.size();
 8004626:	6838      	ldr	r0, [r7, #0]
 8004628:	f7ff f992 	bl	8003950 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800462c:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f8c8 	bl	80047c4 <_ZNKSt6vectorIfSaIfEE8capacityEv>
 8004634:	4602      	mov	r2, r0
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4293      	cmp	r3, r2
 800463a:	bf8c      	ite	hi
 800463c:	2301      	movhi	r3, #1
 800463e:	2300      	movls	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d033      	beq.n	80046ae <_ZNSt6vectorIfSaIfEEaSERKS1_+0x130>
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 8004646:	6838      	ldr	r0, [r7, #0]
 8004648:	f7ff f9cc 	bl	80039e4 <_ZNKSt6vectorIfSaIfEE5beginEv>
 800464c:	4604      	mov	r4, r0
 800464e:	6838      	ldr	r0, [r7, #0]
 8004650:	f7ff f9dc 	bl	8003a0c <_ZNKSt6vectorIfSaIfEE3endEv>
 8004654:	4603      	mov	r3, r0
 8004656:	4622      	mov	r2, r4
 8004658:	68f9      	ldr	r1, [r7, #12]
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f8c3 	bl	80047e6 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>
 8004660:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681c      	ldr	r4, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff f883 	bl	8003778 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8004672:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004674:	461a      	mov	r2, r3
 8004676:	4629      	mov	r1, r5
 8004678:	4620      	mov	r0, r4
 800467a:	f7ff f888 	bl	800378e <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
			    - this->_M_impl._M_start);
 8004688:	461a      	mov	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 8004692:	461a      	mov	r2, r3
 8004694:	f7ff f9f4 	bl	8003a80 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
	      this->_M_impl._M_start = __tmp;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	441a      	add	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	609a      	str	r2, [r3, #8]
 80046ac:	e052      	b.n	8004754 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d6>
	  else if (size() >= __xlen)
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7ff f94e 	bl	8003950 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80046b4:	4602      	mov	r2, r0
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4293      	cmp	r3, r2
 80046ba:	bf94      	ite	ls
 80046bc:	2301      	movls	r3, #1
 80046be:	2300      	movhi	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d020      	beq.n	8004708 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x18a>
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 80046c6:	6838      	ldr	r0, [r7, #0]
 80046c8:	f7ff f98c 	bl	80039e4 <_ZNKSt6vectorIfSaIfEE5beginEv>
 80046cc:	4604      	mov	r4, r0
 80046ce:	6838      	ldr	r0, [r7, #0]
 80046d0:	f7ff f99c 	bl	8003a0c <_ZNKSt6vectorIfSaIfEE3endEv>
 80046d4:	4605      	mov	r5, r0
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7ff fa62 	bl	8003ba0 <_ZNSt6vectorIfSaIfEE5beginEv>
 80046dc:	4603      	mov	r3, r0
 80046de:	461a      	mov	r2, r3
 80046e0:	4629      	mov	r1, r5
 80046e2:	4620      	mov	r0, r4
 80046e4:	f000 f89b 	bl	800481e <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>
 80046e8:	4604      	mov	r4, r0
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7ff f893 	bl	8003816 <_ZNSt6vectorIfSaIfEE3endEv>
 80046f0:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff f83f 	bl	8003778 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80046fa:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 80046fc:	461a      	mov	r2, r3
 80046fe:	4629      	mov	r1, r5
 8004700:	4620      	mov	r0, r4
 8004702:	f000 f8a4 	bl	800484e <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>
 8004706:	e025      	b.n	8004754 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d6>
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681d      	ldr	r5, [r3, #0]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681c      	ldr	r4, [r3, #0]
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff f91d 	bl	8003950 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004716:	4603      	mov	r3, r0
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	18e1      	adds	r1, r4, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	461a      	mov	r2, r3
 8004722:	4628      	mov	r0, r5
 8004724:	f000 f8a1 	bl	800486a <_ZSt4copyIPfS0_ET0_T_S2_S1_>
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681c      	ldr	r4, [r3, #0]
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7ff f90f 	bl	8003950 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004732:	4603      	mov	r3, r0
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685e      	ldr	r6, [r3, #4]
					  _M_get_Tp_allocator());
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4618      	mov	r0, r3
 8004744:	f7ff f818 	bl	8003778 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8004748:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800474a:	4632      	mov	r2, r6
 800474c:	4629      	mov	r1, r5
 800474e:	4620      	mov	r0, r4
 8004750:	f000 f8a3 	bl	800489a <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	441a      	add	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	605a      	str	r2, [r3, #4]
      return *this;
 8004762:	687b      	ldr	r3, [r7, #4]
    }
 8004764:	4618      	mov	r0, r3
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800476c <_ZNSt6vectorIfSaIfEE2atEj>:
      at(size_type __n)
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
	_M_range_check(__n);
 8004776:	6839      	ldr	r1, [r7, #0]
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f89f 	bl	80048bc <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj>
	return (*this)[__n];
 800477e:	6839      	ldr	r1, [r7, #0]
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f8bb 	bl	80048fc <_ZNSt6vectorIfSaIfEEixEj>
 8004786:	4603      	mov	r3, r0
      }
 8004788:	4618      	mov	r0, r3
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <_ZStneIfEbRKSaIT_ES3_>:
    _GLIBCXX_USE_NOEXCEPT
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
    _GLIBCXX_USE_NOEXCEPT
    { return false; }
 800479a:	2300      	movs	r3, #0
 800479c:	4618      	mov	r0, r3
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>:
    inline void
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_copy_assignment __pocca;
      __do_alloc_on_copy(__one, __two, __pocca());
 80047b2:	461a      	mov	r2, r3
 80047b4:	6839      	ldr	r1, [r7, #0]
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f8b0 	bl	800491c <_ZSt18__do_alloc_on_copyISaIfEEvRT_RKS1_St17integral_constantIbLb0EE>
    }
 80047bc:	bf00      	nop
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <_ZNKSt6vectorIfSaIfEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
			 - this->_M_impl._M_start); }
 80047d0:	461a      	mov	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	109b      	asrs	r3, r3, #2
 80047da:	4618      	mov	r0, r3
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>:
	_M_allocate_and_copy(size_type __n,
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b086      	sub	sp, #24
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	60f8      	str	r0, [r7, #12]
 80047ee:	60b9      	str	r1, [r7, #8]
 80047f0:	607a      	str	r2, [r7, #4]
 80047f2:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	68b9      	ldr	r1, [r7, #8]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7ff f9f7 	bl	8003bec <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 80047fe:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4618      	mov	r0, r3
 8004804:	f7fe ffb8 	bl	8003778 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8004808:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	6839      	ldr	r1, [r7, #0]
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7ff f910 	bl	8003a34 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
	      return __result;
 8004814:	697b      	ldr	r3, [r7, #20]
	}
 8004816:	4618      	mov	r0, r3
 8004818:	3718      	adds	r7, #24
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 800481e:	b590      	push	{r4, r7, lr}
 8004820:	b085      	sub	sp, #20
 8004822:	af00      	add	r7, sp, #0
 8004824:	60f8      	str	r0, [r7, #12]
 8004826:	60b9      	str	r1, [r7, #8]
 8004828:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f7ff fbbd 	bl	8003faa <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8004830:	4604      	mov	r4, r0
 8004832:	68b8      	ldr	r0, [r7, #8]
 8004834:	f7ff fbb9 	bl	8003faa <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8004838:	4603      	mov	r3, r0
	       __result));
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	4619      	mov	r1, r3
 800483e:	4620      	mov	r0, r4
 8004840:	f000 f878 	bl	8004934 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>
 8004844:	4603      	mov	r3, r0
    }
 8004846:	4618      	mov	r0, r3
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	bd90      	pop	{r4, r7, pc}

0800484e <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800484e:	b580      	push	{r7, lr}
 8004850:	b084      	sub	sp, #16
 8004852:	af00      	add	r7, sp, #0
 8004854:	60f8      	str	r0, [r7, #12]
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800485a:	68b9      	ldr	r1, [r7, #8]
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f000 f88f 	bl	8004980 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>
    }
 8004862:	bf00      	nop
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <_ZSt4copyIPfS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 800486a:	b590      	push	{r4, r7, lr}
 800486c:	b085      	sub	sp, #20
 800486e:	af00      	add	r7, sp, #0
 8004870:	60f8      	str	r0, [r7, #12]
 8004872:	60b9      	str	r1, [r7, #8]
 8004874:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f7ff fc62 	bl	8004140 <_ZSt12__miter_baseIPfET_S1_>
 800487c:	4604      	mov	r4, r0
 800487e:	68b8      	ldr	r0, [r7, #8]
 8004880:	f7ff fc5e 	bl	8004140 <_ZSt12__miter_baseIPfET_S1_>
 8004884:	4603      	mov	r3, r0
	       __result));
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	4619      	mov	r1, r3
 800488a:	4620      	mov	r0, r4
 800488c:	f000 f885 	bl	800499a <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>
 8004890:	4603      	mov	r3, r0
    }
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	bd90      	pop	{r4, r7, pc}

0800489a <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800489a:	b580      	push	{r7, lr}
 800489c:	b084      	sub	sp, #16
 800489e:	af00      	add	r7, sp, #0
 80048a0:	60f8      	str	r0, [r7, #12]
 80048a2:	60b9      	str	r1, [r7, #8]
 80048a4:	607a      	str	r2, [r7, #4]
 80048a6:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	68b9      	ldr	r1, [r7, #8]
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f000 f890 	bl	80049d2 <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>
 80048b2:	4603      	mov	r3, r0
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj>:
      _M_range_check(size_type __n) const
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
	if (__n >= this->size())
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7ff f842 	bl	8003950 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80048cc:	4602      	mov	r2, r0
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	4293      	cmp	r3, r2
 80048d2:	bf2c      	ite	cs
 80048d4:	2301      	movcs	r3, #1
 80048d6:	2300      	movcc	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d008      	beq.n	80048f0 <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj+0x34>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7ff f836 	bl	8003950 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80048e4:	4603      	mov	r3, r0
 80048e6:	461a      	mov	r2, r3
 80048e8:	6839      	ldr	r1, [r7, #0]
 80048ea:	4803      	ldr	r0, [pc, #12]	; (80048f8 <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj+0x3c>)
 80048ec:	f001 fdc3 	bl	8006476 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 80048f0:	bf00      	nop
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	080092dc 	.word	0x080092dc

080048fc <_ZNSt6vectorIfSaIfEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
      }
 8004910:	4618      	mov	r0, r3
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <_ZSt18__do_alloc_on_copyISaIfEEvRT_RKS1_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	713a      	strb	r2, [r7, #4]
    { }
 8004928:	bf00      	nop
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004934:	b5b0      	push	{r4, r5, r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f7ff fb71 	bl	8004028 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8004946:	4604      	mov	r4, r0
 8004948:	68b8      	ldr	r0, [r7, #8]
 800494a:	f7ff fb6d 	bl	8004028 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800494e:	4605      	mov	r5, r0
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f850 	bl	80049f6 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8004956:	4603      	mov	r3, r0
 8004958:	461a      	mov	r2, r3
 800495a:	4629      	mov	r1, r5
 800495c:	4620      	mov	r0, r4
 800495e:	f7ff fb7c 	bl	800405a <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 8004962:	4603      	mov	r3, r0
 8004964:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 8004966:	f107 0214 	add.w	r2, r7, #20
 800496a:	f107 0310 	add.w	r3, r7, #16
 800496e:	4611      	mov	r1, r2
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff f8bd 	bl	8003af0 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8004976:	693b      	ldr	r3, [r7, #16]
    }
 8004978:	4618      	mov	r0, r3
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bdb0      	pop	{r4, r5, r7, pc}

08004980 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800498a:	6839      	ldr	r1, [r7, #0]
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f840 	bl	8004a12 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>
    }
 8004992:	bf00      	nop
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800499a:	b5b0      	push	{r4, r5, r7, lr}
 800499c:	b084      	sub	sp, #16
 800499e:	af00      	add	r7, sp, #0
 80049a0:	60f8      	str	r0, [r7, #12]
 80049a2:	60b9      	str	r1, [r7, #8]
 80049a4:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f7ff fb4c 	bl	8004044 <_ZSt12__niter_baseIPfET_S1_>
 80049ac:	4604      	mov	r4, r0
 80049ae:	68b8      	ldr	r0, [r7, #8]
 80049b0:	f7ff fb48 	bl	8004044 <_ZSt12__niter_baseIPfET_S1_>
 80049b4:	4605      	mov	r5, r0
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7ff fb44 	bl	8004044 <_ZSt12__niter_baseIPfET_S1_>
 80049bc:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 80049be:	461a      	mov	r2, r3
 80049c0:	4629      	mov	r1, r5
 80049c2:	4620      	mov	r0, r4
 80049c4:	f000 f830 	bl	8004a28 <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>
 80049c8:	4603      	mov	r3, r0
    }
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bdb0      	pop	{r4, r5, r7, pc}

080049d2 <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b086      	sub	sp, #24
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	60f8      	str	r0, [r7, #12]
 80049da:	60b9      	str	r1, [r7, #8]
 80049dc:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80049de:	2301      	movs	r3, #1
 80049e0:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	68b9      	ldr	r1, [r7, #8]
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 f830 	bl	8004a4c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>
 80049ec:	4603      	mov	r3, r0
    }
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b082      	sub	sp, #8
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 80049fe:	1d3b      	adds	r3, r7, #4
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7ff f907 	bl	8003c14 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8004a06:	4603      	mov	r3, r0
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	6039      	str	r1, [r7, #0]
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8004a34:	2301      	movs	r3, #1
 8004a36:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	68b9      	ldr	r1, [r7, #8]
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f7ff fb56 	bl	80040ee <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8004a42:	4603      	mov	r3, r0
    }
 8004a44:	4618      	mov	r0, r3
 8004a46:	3718      	adds	r7, #24
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	68b9      	ldr	r1, [r7, #8]
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f7ff ff04 	bl	800486a <_ZSt4copyIPfS0_ET0_T_S2_S1_>
 8004a62:	4603      	mov	r3, r0
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <LL_TIM_EnableCounter>:
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f043 0201 	orr.w	r2, r3, #1
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	601a      	str	r2, [r3, #0]
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <LL_TIM_CC_EnableChannel>:
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1a      	ldr	r2, [r3, #32]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	621a      	str	r2, [r3, #32]
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <LL_TIM_EnableAllOutputs>:
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aba:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <_ZN3PWM6setTIMEP11TIM_TypeDef>:

#include "PWM.hpp"
#include "stm32f4xx_hal.h"
#include "tim.h"

void PWM::setTIM(TIM_TypeDef* pTIMx){
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	6039      	str	r1, [r7, #0]
	mTIMx = pTIMx;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	601a      	str	r2, [r3, #0]
}
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <_ZN3PWM5setCHEi>:

//void PWM::setCH(__IO uint32_t pCCR);

void PWM::setCH(int pCH){
 8004aea:	b480      	push	{r7}
 8004aec:	b083      	sub	sp, #12
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	6039      	str	r1, [r7, #0]
	mCH = pCH;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	605a      	str	r2, [r3, #4]
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <_ZN3PWM5fInitEi>:
	LL_TIM_EnableAllOutputs(mTIMx);// need
	//PWM TIM Init end

}

void PWM::fInit(int pTimReload){
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b082      	sub	sp, #8
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	6039      	str	r1, [r7, #0]

	mTimReload = pTimReload;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	609a      	str	r2, [r3, #8]

	if(mCH==0){//error check
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d100      	bne.n	8004b20 <_ZN3PWM5fInitEi+0x1a>
		while(1){}
 8004b1e:	e7fe      	b.n	8004b1e <_ZN3PWM5fInitEi+0x18>
	}

	//mREG Init
	if (mCH == 1){
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d105      	bne.n	8004b34 <_ZN3PWM5fInitEi+0x2e>
		mREG=&(mTIMx->CCR1);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 2){
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d105      	bne.n	8004b48 <_ZN3PWM5fInitEi+0x42>
		mREG=&(mTIMx->CCR2);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 3){
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2b03      	cmp	r3, #3
 8004b4e:	d105      	bne.n	8004b5c <_ZN3PWM5fInitEi+0x56>
		mREG=&(mTIMx->CCR3);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 4){
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d105      	bne.n	8004b70 <_ZN3PWM5fInitEi+0x6a>
		mREG=&(mTIMx->CCR4);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	60da      	str	r2, [r3, #12]
	}

	if(mREG==NULL){//error check
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d100      	bne.n	8004b7a <_ZN3PWM5fInitEi+0x74>
		while(1){}
 8004b78:	e7fe      	b.n	8004b78 <_ZN3PWM5fInitEi+0x72>
	}
	//mREG Init end

	//PWM Channel Init
	if(mTIMx==NULL){//error check
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d100      	bne.n	8004b84 <_ZN3PWM5fInitEi+0x7e>
		while(1){}
 8004b82:	e7fe      	b.n	8004b82 <_ZN3PWM5fInitEi+0x7c>
	}
	if (mCH == 1){
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d105      	bne.n	8004b98 <_ZN3PWM5fInitEi+0x92>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH1);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2101      	movs	r1, #1
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7ff ff7a 	bl	8004a8c <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 2){
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d105      	bne.n	8004bac <_ZN3PWM5fInitEi+0xa6>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH2);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2110      	movs	r1, #16
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7ff ff70 	bl	8004a8c <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 3){
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	2b03      	cmp	r3, #3
 8004bb2:	d106      	bne.n	8004bc2 <_ZN3PWM5fInitEi+0xbc>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH3);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7ff ff65 	bl	8004a8c <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 4){
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d106      	bne.n	8004bd8 <_ZN3PWM5fInitEi+0xd2>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH4);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff ff5a 	bl	8004a8c <LL_TIM_CC_EnableChannel>
	}
	//PWM Channel Init end

	//PWM TIM Init
	LL_TIM_EnableCounter(mTIMx);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7ff ff45 	bl	8004a6c <LL_TIM_EnableCounter>
	//LL_TIM_GenerateEvent_UPDATE(TIM1);//
	LL_TIM_EnableAllOutputs(mTIMx);// need
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff ff61 	bl	8004aae <LL_TIM_EnableAllOutputs>
	//PWM TIM Init end

}
 8004bec:	bf00      	nop
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <_ZN3PWM6f2DutyEf>:
void PWM::fDuty(float pfDuty){
	int pDuty = pfDuty * (float)mTimReload;
	WRITE_REG(*mREG, pDuty);
}

void PWM::f2Duty(float pfDuty){
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	ed87 0a00 	vstr	s0, [r7]
	int pDuty = (pfDuty + 1)/2 * (float)mTimReload;
 8004c00:	edd7 7a00 	vldr	s15, [r7]
 8004c04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c0c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004c10:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	ee07 3a90 	vmov	s15, r3
 8004c1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c28:	ee17 3a90 	vmov	r3, s15
 8004c2c:	60fb      	str	r3, [r7, #12]
	WRITE_REG(*mREG, pDuty);
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	601a      	str	r2, [r3, #0]
}
 8004c36:	bf00      	nop
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
	...

08004c44 <__NVIC_GetPriorityGrouping>:
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c48:	4b04      	ldr	r3, [pc, #16]	; (8004c5c <__NVIC_GetPriorityGrouping+0x18>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	0a1b      	lsrs	r3, r3, #8
 8004c4e:	f003 0307 	and.w	r3, r3, #7
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	e000ed00 	.word	0xe000ed00

08004c60 <__NVIC_EnableIRQ>:
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	4603      	mov	r3, r0
 8004c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	db0b      	blt.n	8004c8a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c72:	79fb      	ldrb	r3, [r7, #7]
 8004c74:	f003 021f 	and.w	r2, r3, #31
 8004c78:	4907      	ldr	r1, [pc, #28]	; (8004c98 <__NVIC_EnableIRQ+0x38>)
 8004c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c7e:	095b      	lsrs	r3, r3, #5
 8004c80:	2001      	movs	r0, #1
 8004c82:	fa00 f202 	lsl.w	r2, r0, r2
 8004c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	e000e100 	.word	0xe000e100

08004c9c <__NVIC_SetPriority>:
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	6039      	str	r1, [r7, #0]
 8004ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	db0a      	blt.n	8004cc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	490c      	ldr	r1, [pc, #48]	; (8004ce8 <__NVIC_SetPriority+0x4c>)
 8004cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cba:	0112      	lsls	r2, r2, #4
 8004cbc:	b2d2      	uxtb	r2, r2
 8004cbe:	440b      	add	r3, r1
 8004cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004cc4:	e00a      	b.n	8004cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	4908      	ldr	r1, [pc, #32]	; (8004cec <__NVIC_SetPriority+0x50>)
 8004ccc:	79fb      	ldrb	r3, [r7, #7]
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	3b04      	subs	r3, #4
 8004cd4:	0112      	lsls	r2, r2, #4
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	440b      	add	r3, r1
 8004cda:	761a      	strb	r2, [r3, #24]
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	e000e100 	.word	0xe000e100
 8004cec:	e000ed00 	.word	0xe000ed00

08004cf0 <NVIC_EncodePriority>:
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b089      	sub	sp, #36	; 0x24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f003 0307 	and.w	r3, r3, #7
 8004d02:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	f1c3 0307 	rsb	r3, r3, #7
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	bf28      	it	cs
 8004d0e:	2304      	movcs	r3, #4
 8004d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	3304      	adds	r3, #4
 8004d16:	2b06      	cmp	r3, #6
 8004d18:	d902      	bls.n	8004d20 <NVIC_EncodePriority+0x30>
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	3b03      	subs	r3, #3
 8004d1e:	e000      	b.n	8004d22 <NVIC_EncodePriority+0x32>
 8004d20:	2300      	movs	r3, #0
 8004d22:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2e:	43da      	mvns	r2, r3
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	401a      	ands	r2, r3
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d42:	43d9      	mvns	r1, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d48:	4313      	orrs	r3, r2
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3724      	adds	r7, #36	; 0x24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <LL_ADC_REG_SetSequencerRanks>:
{
 8004d56:	b490      	push	{r4, r7}
 8004d58:	b086      	sub	sp, #24
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	60f8      	str	r0, [r7, #12]
 8004d5e:	60b9      	str	r1, [r7, #8]
 8004d60:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	332c      	adds	r3, #44	; 0x2c
 8004d66:	4619      	mov	r1, r3
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d6e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004d72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	fa92 f2a2 	rbit	r2, r2
 8004d7a:	613a      	str	r2, [r7, #16]
  return result;
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	fab2 f282 	clz	r2, r2
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	40d3      	lsrs	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	440b      	add	r3, r1
 8004d8a:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8004d8c:	6822      	ldr	r2, [r4, #0]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f003 031f 	and.w	r3, r3, #31
 8004d94:	211f      	movs	r1, #31
 8004d96:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9a:	43db      	mvns	r3, r3
 8004d9c:	401a      	ands	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f003 011f 	and.w	r1, r3, #31
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f003 031f 	and.w	r3, r3, #31
 8004daa:	fa01 f303 	lsl.w	r3, r1, r3
 8004dae:	4313      	orrs	r3, r2
 8004db0:	6023      	str	r3, [r4, #0]
}
 8004db2:	bf00      	nop
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bc90      	pop	{r4, r7}
 8004dba:	4770      	bx	lr

08004dbc <LL_ADC_REG_SetFlagEndOfConversion>:
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	609a      	str	r2, [r3, #8]
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <LL_ADC_INJ_SetSequencerRanks>:
{
 8004de2:	b490      	push	{r4, r7}
 8004de4:	b084      	sub	sp, #16
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	60f8      	str	r0, [r7, #12]
 8004dea:	60b9      	str	r1, [r7, #8]
 8004dec:	607a      	str	r2, [r7, #4]
  register uint32_t tmpreg1 = (READ_BIT(ADCx->JSQR, ADC_JSQR_JL) >> ADC_JSQR_JL_Pos) + 1U;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df2:	0d1b      	lsrs	r3, r3, #20
 8004df4:	f003 0303 	and.w	r3, r3, #3
 8004df8:	1c5c      	adds	r4, r3, #1
  MODIFY_REG(ADCx->JSQR,
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	b2d9      	uxtb	r1, r3
 8004e02:	b2e3      	uxtb	r3, r4
 8004e04:	1acb      	subs	r3, r1, r3
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	3303      	adds	r3, #3
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	460b      	mov	r3, r1
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	440b      	add	r3, r1
 8004e14:	211f      	movs	r1, #31
 8004e16:	fa01 f303 	lsl.w	r3, r1, r3
 8004e1a:	43db      	mvns	r3, r3
 8004e1c:	401a      	ands	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f003 011f 	and.w	r1, r3, #31
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	b2d8      	uxtb	r0, r3
 8004e28:	b2e3      	uxtb	r3, r4
 8004e2a:	1ac3      	subs	r3, r0, r3
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	3303      	adds	r3, #3
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	4618      	mov	r0, r3
 8004e34:	4603      	mov	r3, r0
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4403      	add	r3, r0
 8004e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004e44:	bf00      	nop
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bc90      	pop	{r4, r7}
 8004e4c:	4770      	bx	lr

08004e4e <LL_ADC_INJ_SetOffset>:
{
 8004e4e:	b490      	push	{r4, r7}
 8004e50:	b086      	sub	sp, #24
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	60f8      	str	r0, [r7, #12]
 8004e56:	60b9      	str	r1, [r7, #8]
 8004e58:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JOFR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JOFRX_REGOFFSET_MASK));
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	3314      	adds	r3, #20
 8004e5e:	4619      	mov	r1, r3
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004e66:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004e6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	fa92 f2a2 	rbit	r2, r2
 8004e72:	613a      	str	r2, [r7, #16]
  return result;
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	fab2 f282 	clz	r2, r2
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	40d3      	lsrs	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	440b      	add	r3, r1
 8004e82:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8004e84:	6823      	ldr	r3, [r4, #0]
 8004e86:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004e8a:	f023 030f 	bic.w	r3, r3, #15
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	6023      	str	r3, [r4, #0]
}
 8004e94:	bf00      	nop
 8004e96:	3718      	adds	r7, #24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bc90      	pop	{r4, r7}
 8004e9c:	4770      	bx	lr

08004e9e <LL_ADC_SetChannelSamplingTime>:
{
 8004e9e:	b490      	push	{r4, r7}
 8004ea0:	b08a      	sub	sp, #40	; 0x28
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	60f8      	str	r0, [r7, #12]
 8004ea6:	60b9      	str	r1, [r7, #8]
 8004ea8:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	330c      	adds	r3, #12
 8004eae:	4619      	mov	r1, r3
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004eba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	fa92 f2a2 	rbit	r2, r2
 8004ec2:	613a      	str	r2, [r7, #16]
  return result;
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	fab2 f282 	clz	r2, r2
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	40d3      	lsrs	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	440b      	add	r3, r1
 8004ed2:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8004ed4:	6822      	ldr	r2, [r4, #0]
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8004edc:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8004ee0:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee2:	69f9      	ldr	r1, [r7, #28]
 8004ee4:	fa91 f1a1 	rbit	r1, r1
 8004ee8:	61b9      	str	r1, [r7, #24]
  return result;
 8004eea:	69b9      	ldr	r1, [r7, #24]
 8004eec:	fab1 f181 	clz	r1, r1
 8004ef0:	b2c9      	uxtb	r1, r1
 8004ef2:	40cb      	lsrs	r3, r1
 8004ef4:	2107      	movs	r1, #7
 8004ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8004efa:	43db      	mvns	r3, r3
 8004efc:	401a      	ands	r2, r3
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8004f04:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8004f08:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f0c:	fa91 f1a1 	rbit	r1, r1
 8004f10:	6239      	str	r1, [r7, #32]
  return result;
 8004f12:	6a39      	ldr	r1, [r7, #32]
 8004f14:	fab1 f181 	clz	r1, r1
 8004f18:	b2c9      	uxtb	r1, r1
 8004f1a:	40cb      	lsrs	r3, r1
 8004f1c:	6879      	ldr	r1, [r7, #4]
 8004f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f22:	4313      	orrs	r3, r2
 8004f24:	6023      	str	r3, [r4, #0]
}
 8004f26:	bf00      	nop
 8004f28:	3728      	adds	r7, #40	; 0x28
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bc90      	pop	{r4, r7}
 8004f2e:	4770      	bx	lr

08004f30 <LL_ADC_INJ_StartConversionExtTrig>:
  *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISINGFALLING
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StartConversionExtTrig(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689a      	ldr	r2, [r3, #8]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	431a      	orrs	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	609a      	str	r2, [r3, #8]
}
 8004f46:	bf00      	nop
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <LL_ADC_DisableIT_EOCS>:
  * @rmtoll CR1      EOCIE          LL_ADC_DisableIT_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f023 0220 	bic.w	r2, r3, #32
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	605a      	str	r2, [r3, #4]
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <LL_ADC_DisableIT_JEOS>:
  * @rmtoll CR1      JEOCIE         LL_ADC_EnableIT_JEOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOS(ADC_TypeDef *ADCx)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	605a      	str	r2, [r3, #4]
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
	...

08004f94 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004f9c:	4b08      	ldr	r3, [pc, #32]	; (8004fc0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004f9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fa0:	4907      	ldr	r1, [pc, #28]	; (8004fc0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004fa8:	4b05      	ldr	r3, [pc, #20]	; (8004fc0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
}
 8004fb4:	bf00      	nop
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	40023800 	.word	0x40023800

08004fc4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004fcc:	4b08      	ldr	r3, [pc, #32]	; (8004ff0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004fce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fd0:	4907      	ldr	r1, [pc, #28]	; (8004ff0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004fd8:	4b05      	ldr	r3, [pc, #20]	; (8004ff0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004fda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
}
 8004fe4:	bf00      	nop
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	40023800 	.word	0x40023800

08004ff4 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b096      	sub	sp, #88	; 0x58
 8004ff8:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8004ffa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004ffe:	2200      	movs	r2, #0
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	605a      	str	r2, [r3, #4]
 8005004:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8005006:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800500a:	2200      	movs	r2, #0
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	605a      	str	r2, [r3, #4]
 8005010:	609a      	str	r2, [r3, #8]
 8005012:	60da      	str	r2, [r3, #12]
 8005014:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8005016:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800501a:	2200      	movs	r2, #0
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	605a      	str	r2, [r3, #4]
 8005020:	609a      	str	r2, [r3, #8]
 8005022:	60da      	str	r2, [r3, #12]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 8005024:	f107 0318 	add.w	r3, r7, #24
 8005028:	2200      	movs	r2, #0
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	605a      	str	r2, [r3, #4]
 800502e:	609a      	str	r2, [r3, #8]
 8005030:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005032:	463b      	mov	r3, r7
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	605a      	str	r2, [r3, #4]
 800503a:	609a      	str	r2, [r3, #8]
 800503c:	60da      	str	r2, [r3, #12]
 800503e:	611a      	str	r2, [r3, #16]
 8005040:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8005042:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005046:	f7ff ffbd 	bl	8004fc4 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800504a:	2004      	movs	r0, #4
 800504c:	f7ff ffa2 	bl	8004f94 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005050:	2001      	movs	r0, #1
 8005052:	f7ff ff9f 	bl	8004f94 <LL_AHB1_GRP1_EnableClock>
  PC1   ------> ADC1_IN11
  PC2   ------> ADC1_IN12
  PA0-WKUP   ------> ADC1_IN0
  PA1   ------> ADC1_IN1 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 8005056:	2307      	movs	r3, #7
 8005058:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800505a:	2303      	movs	r3, #3
 800505c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800505e:	2300      	movs	r3, #0
 8005060:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005062:	463b      	mov	r3, r7
 8005064:	4619      	mov	r1, r3
 8005066:	4869      	ldr	r0, [pc, #420]	; (800520c <MX_ADC1_Init+0x218>)
 8005068:	f7fd fd2b 	bl	8002ac2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 800506c:	2303      	movs	r3, #3
 800506e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8005070:	2303      	movs	r3, #3
 8005072:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005074:	2300      	movs	r3, #0
 8005076:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005078:	463b      	mov	r3, r7
 800507a:	4619      	mov	r1, r3
 800507c:	4864      	ldr	r0, [pc, #400]	; (8005210 <MX_ADC1_Init+0x21c>)
 800507e:	f7fd fd20 	bl	8002ac2 <LL_GPIO_Init>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8005082:	f7ff fddf 	bl	8004c44 <__NVIC_GetPriorityGrouping>
 8005086:	4603      	mov	r3, r0
 8005088:	2200      	movs	r2, #0
 800508a:	2102      	movs	r1, #2
 800508c:	4618      	mov	r0, r3
 800508e:	f7ff fe2f 	bl	8004cf0 <NVIC_EncodePriority>
 8005092:	4603      	mov	r3, r0
 8005094:	4619      	mov	r1, r3
 8005096:	2012      	movs	r0, #18
 8005098:	f7ff fe00 	bl	8004c9c <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 800509c:	2012      	movs	r0, #18
 800509e:	f7ff fddf 	bl	8004c60 <__NVIC_EnableIRQ>

  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80050a2:	2300      	movs	r3, #0
 80050a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80050a6:	2300      	movs	r3, #0
 80050a8:	653b      	str	r3, [r7, #80]	; 0x50
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 80050aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050ae:	657b      	str	r3, [r7, #84]	; 0x54
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80050b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80050b4:	4619      	mov	r1, r3
 80050b6:	4857      	ldr	r0, [pc, #348]	; (8005214 <MX_ADC1_Init+0x220>)
 80050b8:	f7fd fa36 	bl	8002528 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80050bc:	2300      	movs	r3, #0
 80050be:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 80050c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80050c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80050c6:	2300      	movs	r3, #0
 80050c8:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80050ca:	2300      	movs	r3, #0
 80050cc:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 80050ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050d2:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80050d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80050d8:	4619      	mov	r1, r3
 80050da:	484e      	ldr	r0, [pc, #312]	; (8005214 <MX_ADC1_Init+0x220>)
 80050dc:	f7fd fa50 	bl	8002580 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 80050e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80050e4:	484b      	ldr	r0, [pc, #300]	; (8005214 <MX_ADC1_Init+0x220>)
 80050e6:	f7ff fe69 	bl	8004dbc <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC1);
 80050ea:	484a      	ldr	r0, [pc, #296]	; (8005214 <MX_ADC1_Init+0x220>)
 80050ec:	f7ff ff31 	bl	8004f52 <LL_ADC_DisableIT_EOCS>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 80050f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050f4:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80050f6:	2300      	movs	r3, #0
 80050f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80050fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050fe:	4619      	mov	r1, r3
 8005100:	4845      	ldr	r0, [pc, #276]	; (8005218 <MX_ADC1_Init+0x224>)
 8005102:	f7fd f9c9 	bl	8002498 <LL_ADC_CommonInit>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8005106:	4a45      	ldr	r2, [pc, #276]	; (800521c <MX_ADC1_Init+0x228>)
 8005108:	f44f 7100 	mov.w	r1, #512	; 0x200
 800510c:	4841      	ldr	r0, [pc, #260]	; (8005214 <MX_ADC1_Init+0x220>)
 800510e:	f7ff fe22 	bl	8004d56 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_28CYCLES);
 8005112:	2202      	movs	r2, #2
 8005114:	4941      	ldr	r1, [pc, #260]	; (800521c <MX_ADC1_Init+0x228>)
 8005116:	483f      	ldr	r0, [pc, #252]	; (8005214 <MX_ADC1_Init+0x220>)
 8005118:	f7ff fec1 	bl	8004e9e <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_12);
 800511c:	4a40      	ldr	r2, [pc, #256]	; (8005220 <MX_ADC1_Init+0x22c>)
 800511e:	f240 2105 	movw	r1, #517	; 0x205
 8005122:	483c      	ldr	r0, [pc, #240]	; (8005214 <MX_ADC1_Init+0x220>)
 8005124:	f7ff fe17 	bl	8004d56 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_28CYCLES);
 8005128:	2202      	movs	r2, #2
 800512a:	493d      	ldr	r1, [pc, #244]	; (8005220 <MX_ADC1_Init+0x22c>)
 800512c:	4839      	ldr	r0, [pc, #228]	; (8005214 <MX_ADC1_Init+0x220>)
 800512e:	f7ff feb6 	bl	8004e9e <LL_ADC_SetChannelSamplingTime>
  /** Configure Injected Channel 
  */
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8005132:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005136:	61bb      	str	r3, [r7, #24]
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 8005138:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800513c:	61fb      	str	r3, [r7, #28]
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_1RANK;
 800513e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005142:	623b      	str	r3, [r7, #32]
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 8005144:	2300      	movs	r3, #0
 8005146:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8005148:	f107 0318 	add.w	r3, r7, #24
 800514c:	4619      	mov	r1, r3
 800514e:	4831      	ldr	r0, [pc, #196]	; (8005214 <MX_ADC1_Init+0x220>)
 8005150:	f7fd fa5e 	bl	8002610 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 8005154:	482f      	ldr	r0, [pc, #188]	; (8005214 <MX_ADC1_Init+0x220>)
 8005156:	f7ff ff0c 	bl	8004f72 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_0);
 800515a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800515e:	2101      	movs	r1, #1
 8005160:	482c      	ldr	r0, [pc, #176]	; (8005214 <MX_ADC1_Init+0x220>)
 8005162:	f7ff fe3e 	bl	8004de2 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 8005166:	2200      	movs	r2, #0
 8005168:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800516c:	4829      	ldr	r0, [pc, #164]	; (8005214 <MX_ADC1_Init+0x220>)
 800516e:	f7ff fe96 	bl	8004e9e <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_1, 0);
 8005172:	2200      	movs	r2, #0
 8005174:	2101      	movs	r1, #1
 8005176:	4827      	ldr	r0, [pc, #156]	; (8005214 <MX_ADC1_Init+0x220>)
 8005178:	f7ff fe69 	bl	8004e4e <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 800517c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8005180:	4824      	ldr	r0, [pc, #144]	; (8005214 <MX_ADC1_Init+0x220>)
 8005182:	f7ff fed5 	bl	8004f30 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8005186:	f107 0318 	add.w	r3, r7, #24
 800518a:	4619      	mov	r1, r3
 800518c:	4821      	ldr	r0, [pc, #132]	; (8005214 <MX_ADC1_Init+0x220>)
 800518e:	f7fd fa3f 	bl	8002610 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 8005192:	4820      	ldr	r0, [pc, #128]	; (8005214 <MX_ADC1_Init+0x220>)
 8005194:	f7ff feed 	bl	8004f72 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_11);
 8005198:	4a22      	ldr	r2, [pc, #136]	; (8005224 <MX_ADC1_Init+0x230>)
 800519a:	f241 1102 	movw	r1, #4354	; 0x1102
 800519e:	481d      	ldr	r0, [pc, #116]	; (8005214 <MX_ADC1_Init+0x220>)
 80051a0:	f7ff fe1f 	bl	8004de2 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 80051a4:	2200      	movs	r2, #0
 80051a6:	491f      	ldr	r1, [pc, #124]	; (8005224 <MX_ADC1_Init+0x230>)
 80051a8:	481a      	ldr	r0, [pc, #104]	; (8005214 <MX_ADC1_Init+0x220>)
 80051aa:	f7ff fe78 	bl	8004e9e <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_2, 0);
 80051ae:	2200      	movs	r2, #0
 80051b0:	f241 1102 	movw	r1, #4354	; 0x1102
 80051b4:	4817      	ldr	r0, [pc, #92]	; (8005214 <MX_ADC1_Init+0x220>)
 80051b6:	f7ff fe4a 	bl	8004e4e <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 80051ba:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80051be:	4815      	ldr	r0, [pc, #84]	; (8005214 <MX_ADC1_Init+0x220>)
 80051c0:	f7ff feb6 	bl	8004f30 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 80051c4:	f107 0318 	add.w	r3, r7, #24
 80051c8:	4619      	mov	r1, r3
 80051ca:	4812      	ldr	r0, [pc, #72]	; (8005214 <MX_ADC1_Init+0x220>)
 80051cc:	f7fd fa20 	bl	8002610 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 80051d0:	4810      	ldr	r0, [pc, #64]	; (8005214 <MX_ADC1_Init+0x220>)
 80051d2:	f7ff fece 	bl	8004f72 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_10);
 80051d6:	220a      	movs	r2, #10
 80051d8:	f242 2103 	movw	r1, #8707	; 0x2203
 80051dc:	480d      	ldr	r0, [pc, #52]	; (8005214 <MX_ADC1_Init+0x220>)
 80051de:	f7ff fe00 	bl	8004de2 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_3CYCLES);
 80051e2:	2200      	movs	r2, #0
 80051e4:	210a      	movs	r1, #10
 80051e6:	480b      	ldr	r0, [pc, #44]	; (8005214 <MX_ADC1_Init+0x220>)
 80051e8:	f7ff fe59 	bl	8004e9e <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_3, 0);
 80051ec:	2200      	movs	r2, #0
 80051ee:	f242 2103 	movw	r1, #8707	; 0x2203
 80051f2:	4808      	ldr	r0, [pc, #32]	; (8005214 <MX_ADC1_Init+0x220>)
 80051f4:	f7ff fe2b 	bl	8004e4e <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 80051f8:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80051fc:	4805      	ldr	r0, [pc, #20]	; (8005214 <MX_ADC1_Init+0x220>)
 80051fe:	f7ff fe97 	bl	8004f30 <LL_ADC_INJ_StartConversionExtTrig>

}
 8005202:	bf00      	nop
 8005204:	3758      	adds	r7, #88	; 0x58
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	40020800 	.word	0x40020800
 8005210:	40020000 	.word	0x40020000
 8005214:	40012000 	.word	0x40012000
 8005218:	40012300 	.word	0x40012300
 800521c:	02300001 	.word	0x02300001
 8005220:	0060000c 	.word	0x0060000c
 8005224:	0030000b 	.word	0x0030000b

08005228 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b092      	sub	sp, #72	; 0x48
 800522c:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800522e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	605a      	str	r2, [r3, #4]
 8005238:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800523a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	605a      	str	r2, [r3, #4]
 8005244:	609a      	str	r2, [r3, #8]
 8005246:	60da      	str	r2, [r3, #12]
 8005248:	611a      	str	r2, [r3, #16]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 800524a:	f107 0318 	add.w	r3, r7, #24
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	605a      	str	r2, [r3, #4]
 8005254:	609a      	str	r2, [r3, #8]
 8005256:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005258:	463b      	mov	r3, r7
 800525a:	2200      	movs	r2, #0
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	605a      	str	r2, [r3, #4]
 8005260:	609a      	str	r2, [r3, #8]
 8005262:	60da      	str	r2, [r3, #12]
 8005264:	611a      	str	r2, [r3, #16]
 8005266:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC2);
 8005268:	f44f 7000 	mov.w	r0, #512	; 0x200
 800526c:	f7ff feaa 	bl	8004fc4 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8005270:	2004      	movs	r0, #4
 8005272:	f7ff fe8f 	bl	8004f94 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005276:	2001      	movs	r0, #1
 8005278:	f7ff fe8c 	bl	8004f94 <LL_AHB1_GRP1_EnableClock>
  /**ADC2 GPIO Configuration  
  PC0   ------> ADC2_IN10
  PC1   ------> ADC2_IN11
  PA0-WKUP   ------> ADC2_IN0 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 800527c:	2303      	movs	r3, #3
 800527e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8005280:	2303      	movs	r3, #3
 8005282:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005284:	2300      	movs	r3, #0
 8005286:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005288:	463b      	mov	r3, r7
 800528a:	4619      	mov	r1, r3
 800528c:	485e      	ldr	r0, [pc, #376]	; (8005408 <MX_ADC2_Init+0x1e0>)
 800528e:	f7fd fc18 	bl	8002ac2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8005292:	2301      	movs	r3, #1
 8005294:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8005296:	2303      	movs	r3, #3
 8005298:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800529a:	2300      	movs	r3, #0
 800529c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800529e:	463b      	mov	r3, r7
 80052a0:	4619      	mov	r1, r3
 80052a2:	485a      	ldr	r0, [pc, #360]	; (800540c <MX_ADC2_Init+0x1e4>)
 80052a4:	f7fd fc0d 	bl	8002ac2 <LL_GPIO_Init>

  /* ADC2 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 80052a8:	f7ff fccc 	bl	8004c44 <__NVIC_GetPriorityGrouping>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2200      	movs	r2, #0
 80052b0:	2102      	movs	r1, #2
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7ff fd1c 	bl	8004cf0 <NVIC_EncodePriority>
 80052b8:	4603      	mov	r3, r0
 80052ba:	4619      	mov	r1, r3
 80052bc:	2012      	movs	r0, #18
 80052be:	f7ff fced 	bl	8004c9c <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 80052c2:	2012      	movs	r0, #18
 80052c4:	f7ff fccc 	bl	8004c60 <__NVIC_EnableIRQ>

  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80052c8:	2300      	movs	r3, #0
 80052ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80052cc:	2300      	movs	r3, #0
 80052ce:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 80052d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052d4:	647b      	str	r3, [r7, #68]	; 0x44
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 80052d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80052da:	4619      	mov	r1, r3
 80052dc:	484c      	ldr	r0, [pc, #304]	; (8005410 <MX_ADC2_Init+0x1e8>)
 80052de:	f7fd f923 	bl	8002528 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80052e2:	2300      	movs	r3, #0
 80052e4:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80052e6:	2300      	movs	r3, #0
 80052e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80052ea:	2300      	movs	r3, #0
 80052ec:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80052ee:	2300      	movs	r3, #0
 80052f0:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 80052f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052f6:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 80052f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052fc:	4619      	mov	r1, r3
 80052fe:	4844      	ldr	r0, [pc, #272]	; (8005410 <MX_ADC2_Init+0x1e8>)
 8005300:	f7fd f93e 	bl	8002580 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC2, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8005304:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005308:	4841      	ldr	r0, [pc, #260]	; (8005410 <MX_ADC2_Init+0x1e8>)
 800530a:	f7ff fd57 	bl	8004dbc <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC2);
 800530e:	4840      	ldr	r0, [pc, #256]	; (8005410 <MX_ADC2_Init+0x1e8>)
 8005310:	f7ff fe1f 	bl	8004f52 <LL_ADC_DisableIT_EOCS>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 8005314:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005318:	f44f 7100 	mov.w	r1, #512	; 0x200
 800531c:	483c      	ldr	r0, [pc, #240]	; (8005410 <MX_ADC2_Init+0x1e8>)
 800531e:	f7ff fd1a 	bl	8004d56 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 8005322:	2200      	movs	r2, #0
 8005324:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005328:	4839      	ldr	r0, [pc, #228]	; (8005410 <MX_ADC2_Init+0x1e8>)
 800532a:	f7ff fdb8 	bl	8004e9e <LL_ADC_SetChannelSamplingTime>
  /** Configure Injected Channel 
  */
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 800532e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005332:	61bb      	str	r3, [r7, #24]
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 8005334:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005338:	61fb      	str	r3, [r7, #28]
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_1RANK;
 800533a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800533e:	623b      	str	r3, [r7, #32]
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 8005340:	2300      	movs	r3, #0
 8005342:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 8005344:	f107 0318 	add.w	r3, r7, #24
 8005348:	4619      	mov	r1, r3
 800534a:	4831      	ldr	r0, [pc, #196]	; (8005410 <MX_ADC2_Init+0x1e8>)
 800534c:	f7fd f960 	bl	8002610 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 8005350:	482f      	ldr	r0, [pc, #188]	; (8005410 <MX_ADC2_Init+0x1e8>)
 8005352:	f7ff fe0e 	bl	8004f72 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_0);
 8005356:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800535a:	2101      	movs	r1, #1
 800535c:	482c      	ldr	r0, [pc, #176]	; (8005410 <MX_ADC2_Init+0x1e8>)
 800535e:	f7ff fd40 	bl	8004de2 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 8005362:	2200      	movs	r2, #0
 8005364:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005368:	4829      	ldr	r0, [pc, #164]	; (8005410 <MX_ADC2_Init+0x1e8>)
 800536a:	f7ff fd98 	bl	8004e9e <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_1, 0);
 800536e:	2200      	movs	r2, #0
 8005370:	2101      	movs	r1, #1
 8005372:	4827      	ldr	r0, [pc, #156]	; (8005410 <MX_ADC2_Init+0x1e8>)
 8005374:	f7ff fd6b 	bl	8004e4e <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 8005378:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800537c:	4824      	ldr	r0, [pc, #144]	; (8005410 <MX_ADC2_Init+0x1e8>)
 800537e:	f7ff fdd7 	bl	8004f30 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 8005382:	f107 0318 	add.w	r3, r7, #24
 8005386:	4619      	mov	r1, r3
 8005388:	4821      	ldr	r0, [pc, #132]	; (8005410 <MX_ADC2_Init+0x1e8>)
 800538a:	f7fd f941 	bl	8002610 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 800538e:	4820      	ldr	r0, [pc, #128]	; (8005410 <MX_ADC2_Init+0x1e8>)
 8005390:	f7ff fdef 	bl	8004f72 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_11);
 8005394:	4a1f      	ldr	r2, [pc, #124]	; (8005414 <MX_ADC2_Init+0x1ec>)
 8005396:	f241 1102 	movw	r1, #4354	; 0x1102
 800539a:	481d      	ldr	r0, [pc, #116]	; (8005410 <MX_ADC2_Init+0x1e8>)
 800539c:	f7ff fd21 	bl	8004de2 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 80053a0:	2200      	movs	r2, #0
 80053a2:	491c      	ldr	r1, [pc, #112]	; (8005414 <MX_ADC2_Init+0x1ec>)
 80053a4:	481a      	ldr	r0, [pc, #104]	; (8005410 <MX_ADC2_Init+0x1e8>)
 80053a6:	f7ff fd7a 	bl	8004e9e <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_2, 0);
 80053aa:	2200      	movs	r2, #0
 80053ac:	f241 1102 	movw	r1, #4354	; 0x1102
 80053b0:	4817      	ldr	r0, [pc, #92]	; (8005410 <MX_ADC2_Init+0x1e8>)
 80053b2:	f7ff fd4c 	bl	8004e4e <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 80053b6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80053ba:	4815      	ldr	r0, [pc, #84]	; (8005410 <MX_ADC2_Init+0x1e8>)
 80053bc:	f7ff fdb8 	bl	8004f30 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 80053c0:	f107 0318 	add.w	r3, r7, #24
 80053c4:	4619      	mov	r1, r3
 80053c6:	4812      	ldr	r0, [pc, #72]	; (8005410 <MX_ADC2_Init+0x1e8>)
 80053c8:	f7fd f922 	bl	8002610 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 80053cc:	4810      	ldr	r0, [pc, #64]	; (8005410 <MX_ADC2_Init+0x1e8>)
 80053ce:	f7ff fdd0 	bl	8004f72 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_10);
 80053d2:	220a      	movs	r2, #10
 80053d4:	f242 2103 	movw	r1, #8707	; 0x2203
 80053d8:	480d      	ldr	r0, [pc, #52]	; (8005410 <MX_ADC2_Init+0x1e8>)
 80053da:	f7ff fd02 	bl	8004de2 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_3CYCLES);
 80053de:	2200      	movs	r2, #0
 80053e0:	210a      	movs	r1, #10
 80053e2:	480b      	ldr	r0, [pc, #44]	; (8005410 <MX_ADC2_Init+0x1e8>)
 80053e4:	f7ff fd5b 	bl	8004e9e <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_3, 0);
 80053e8:	2200      	movs	r2, #0
 80053ea:	f242 2103 	movw	r1, #8707	; 0x2203
 80053ee:	4808      	ldr	r0, [pc, #32]	; (8005410 <MX_ADC2_Init+0x1e8>)
 80053f0:	f7ff fd2d 	bl	8004e4e <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 80053f4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80053f8:	4805      	ldr	r0, [pc, #20]	; (8005410 <MX_ADC2_Init+0x1e8>)
 80053fa:	f7ff fd99 	bl	8004f30 <LL_ADC_INJ_StartConversionExtTrig>

}
 80053fe:	bf00      	nop
 8005400:	3748      	adds	r7, #72	; 0x48
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	40020800 	.word	0x40020800
 800540c:	40020000 	.word	0x40020000
 8005410:	40012100 	.word	0x40012100
 8005414:	0030000b 	.word	0x0030000b

08005418 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8005422:	4a13      	ldr	r2, [pc, #76]	; (8005470 <LL_SYSCFG_SetEXTISource+0x58>)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	b2db      	uxtb	r3, r3
 8005428:	3302      	adds	r3, #2
 800542a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	0c1b      	lsrs	r3, r3, #16
 8005432:	43db      	mvns	r3, r3
 8005434:	ea02 0103 	and.w	r1, r2, r3
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	0c1b      	lsrs	r3, r3, #16
 800543c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	fa93 f3a3 	rbit	r3, r3
 8005444:	60bb      	str	r3, [r7, #8]
  return result;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	fab3 f383 	clz	r3, r3
 800544c:	b2db      	uxtb	r3, r3
 800544e:	461a      	mov	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	fa03 f202 	lsl.w	r2, r3, r2
 8005456:	4806      	ldr	r0, [pc, #24]	; (8005470 <LL_SYSCFG_SetEXTISource+0x58>)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	b2db      	uxtb	r3, r3
 800545c:	430a      	orrs	r2, r1
 800545e:	3302      	adds	r3, #2
 8005460:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8005464:	bf00      	nop
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	40013800 	.word	0x40013800

08005474 <LL_GPIO_SetPinMode>:
{
 8005474:	b480      	push	{r7}
 8005476:	b089      	sub	sp, #36	; 0x24
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	fa93 f3a3 	rbit	r3, r3
 800548e:	613b      	str	r3, [r7, #16]
  return result;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	fab3 f383 	clz	r3, r3
 8005496:	b2db      	uxtb	r3, r3
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	2103      	movs	r1, #3
 800549c:	fa01 f303 	lsl.w	r3, r1, r3
 80054a0:	43db      	mvns	r3, r3
 80054a2:	401a      	ands	r2, r3
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	fa93 f3a3 	rbit	r3, r3
 80054ae:	61bb      	str	r3, [r7, #24]
  return result;
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	fab3 f383 	clz	r3, r3
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	6879      	ldr	r1, [r7, #4]
 80054bc:	fa01 f303 	lsl.w	r3, r1, r3
 80054c0:	431a      	orrs	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	601a      	str	r2, [r3, #0]
}
 80054c6:	bf00      	nop
 80054c8:	3724      	adds	r7, #36	; 0x24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <LL_GPIO_SetPinPull>:
{
 80054d2:	b480      	push	{r7}
 80054d4:	b089      	sub	sp, #36	; 0x24
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	60f8      	str	r0, [r7, #12]
 80054da:	60b9      	str	r1, [r7, #8]
 80054dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	68da      	ldr	r2, [r3, #12]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	fa93 f3a3 	rbit	r3, r3
 80054ec:	613b      	str	r3, [r7, #16]
  return result;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	fab3 f383 	clz	r3, r3
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	005b      	lsls	r3, r3, #1
 80054f8:	2103      	movs	r1, #3
 80054fa:	fa01 f303 	lsl.w	r3, r1, r3
 80054fe:	43db      	mvns	r3, r3
 8005500:	401a      	ands	r2, r3
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	fa93 f3a3 	rbit	r3, r3
 800550c:	61bb      	str	r3, [r7, #24]
  return result;
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	fab3 f383 	clz	r3, r3
 8005514:	b2db      	uxtb	r3, r3
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	6879      	ldr	r1, [r7, #4]
 800551a:	fa01 f303 	lsl.w	r3, r1, r3
 800551e:	431a      	orrs	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	60da      	str	r2, [r3, #12]
}
 8005524:	bf00      	nop
 8005526:	3724      	adds	r7, #36	; 0x24
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	041a      	lsls	r2, r3, #16
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	619a      	str	r2, [r3, #24]
}
 8005542:	bf00      	nop
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
	...

08005550 <LL_AHB1_GRP1_EnableClock>:
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005558:	4b08      	ldr	r3, [pc, #32]	; (800557c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800555a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800555c:	4907      	ldr	r1, [pc, #28]	; (800557c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4313      	orrs	r3, r2
 8005562:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005564:	4b05      	ldr	r3, [pc, #20]	; (800557c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4013      	ands	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800556e:	68fb      	ldr	r3, [r7, #12]
}
 8005570:	bf00      	nop
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	40023800 	.word	0x40023800

08005580 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b088      	sub	sp, #32
 8005584:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8005586:	f107 0318 	add.w	r3, r7, #24
 800558a:	2200      	movs	r2, #0
 800558c:	601a      	str	r2, [r3, #0]
 800558e:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005590:	463b      	mov	r3, r7
 8005592:	2200      	movs	r2, #0
 8005594:	601a      	str	r2, [r3, #0]
 8005596:	605a      	str	r2, [r3, #4]
 8005598:	609a      	str	r2, [r3, #8]
 800559a:	60da      	str	r2, [r3, #12]
 800559c:	611a      	str	r2, [r3, #16]
 800559e:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80055a0:	2004      	movs	r0, #4
 80055a2:	f7ff ffd5 	bl	8005550 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80055a6:	2080      	movs	r0, #128	; 0x80
 80055a8:	f7ff ffd2 	bl	8005550 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80055ac:	2001      	movs	r0, #1
 80055ae:	f7ff ffcf 	bl	8005550 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80055b2:	2002      	movs	r0, #2
 80055b4:	f7ff ffcc 	bl	8005550 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 80055b8:	2120      	movs	r1, #32
 80055ba:	481a      	ldr	r0, [pc, #104]	; (8005624 <MX_GPIO_Init+0xa4>)
 80055bc:	f7ff ffb8 	bl	8005530 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80055c0:	4919      	ldr	r1, [pc, #100]	; (8005628 <MX_GPIO_Init+0xa8>)
 80055c2:	2002      	movs	r0, #2
 80055c4:	f7ff ff28 	bl	8005418 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80055c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80055cc:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80055ce:	2301      	movs	r3, #1
 80055d0:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80055d2:	2300      	movs	r3, #0
 80055d4:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80055d6:	2302      	movs	r3, #2
 80055d8:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80055da:	f107 0318 	add.w	r3, r7, #24
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fd f8ee 	bl	80027c0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 80055e4:	2200      	movs	r2, #0
 80055e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80055ea:	4810      	ldr	r0, [pc, #64]	; (800562c <MX_GPIO_Init+0xac>)
 80055ec:	f7ff ff71 	bl	80054d2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 80055f0:	2200      	movs	r2, #0
 80055f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80055f6:	480d      	ldr	r0, [pc, #52]	; (800562c <MX_GPIO_Init+0xac>)
 80055f8:	f7ff ff3c 	bl	8005474 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 80055fc:	2320      	movs	r3, #32
 80055fe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005600:	2301      	movs	r3, #1
 8005602:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005604:	2300      	movs	r3, #0
 8005606:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005608:	2300      	movs	r3, #0
 800560a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800560c:	2300      	movs	r3, #0
 800560e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8005610:	463b      	mov	r3, r7
 8005612:	4619      	mov	r1, r3
 8005614:	4803      	ldr	r0, [pc, #12]	; (8005624 <MX_GPIO_Init+0xa4>)
 8005616:	f7fd fa54 	bl	8002ac2 <LL_GPIO_Init>

}
 800561a:	bf00      	nop
 800561c:	3720      	adds	r7, #32
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	40020000 	.word	0x40020000
 8005628:	00f00003 	.word	0x00f00003
 800562c:	40020800 	.word	0x40020800

08005630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005634:	f7fb fc54 	bl	8000ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005638:	f000 f80e 	bl	8005658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800563c:	f7ff ffa0 	bl	8005580 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8005640:	f000 fc48 	bl	8005ed4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8005644:	f000 fb28 	bl	8005c98 <MX_TIM1_Init>
  MX_ADC1_Init();
 8005648:	f7ff fcd4 	bl	8004ff4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800564c:	f7ff fdec 	bl	8005228 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  cppwrapper();
 8005650:	f000 fd26 	bl	80060a0 <cppwrapper>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005654:	e7fe      	b.n	8005654 <main+0x24>
	...

08005658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b094      	sub	sp, #80	; 0x50
 800565c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800565e:	f107 031c 	add.w	r3, r7, #28
 8005662:	2234      	movs	r2, #52	; 0x34
 8005664:	2100      	movs	r1, #0
 8005666:	4618      	mov	r0, r3
 8005668:	f002 f870 	bl	800774c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800566c:	f107 0308 	add.w	r3, r7, #8
 8005670:	2200      	movs	r2, #0
 8005672:	601a      	str	r2, [r3, #0]
 8005674:	605a      	str	r2, [r3, #4]
 8005676:	609a      	str	r2, [r3, #8]
 8005678:	60da      	str	r2, [r3, #12]
 800567a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800567c:	2300      	movs	r3, #0
 800567e:	607b      	str	r3, [r7, #4]
 8005680:	4b2c      	ldr	r3, [pc, #176]	; (8005734 <SystemClock_Config+0xdc>)
 8005682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005684:	4a2b      	ldr	r2, [pc, #172]	; (8005734 <SystemClock_Config+0xdc>)
 8005686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800568a:	6413      	str	r3, [r2, #64]	; 0x40
 800568c:	4b29      	ldr	r3, [pc, #164]	; (8005734 <SystemClock_Config+0xdc>)
 800568e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005694:	607b      	str	r3, [r7, #4]
 8005696:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005698:	2300      	movs	r3, #0
 800569a:	603b      	str	r3, [r7, #0]
 800569c:	4b26      	ldr	r3, [pc, #152]	; (8005738 <SystemClock_Config+0xe0>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a25      	ldr	r2, [pc, #148]	; (8005738 <SystemClock_Config+0xe0>)
 80056a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056a6:	6013      	str	r3, [r2, #0]
 80056a8:	4b23      	ldr	r3, [pc, #140]	; (8005738 <SystemClock_Config+0xe0>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80056b0:	603b      	str	r3, [r7, #0]
 80056b2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80056b4:	2301      	movs	r3, #1
 80056b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80056b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80056be:	2302      	movs	r3, #2
 80056c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80056c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80056c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80056c8:	2304      	movs	r3, #4
 80056ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80056cc:	23b4      	movs	r3, #180	; 0xb4
 80056ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80056d0:	2302      	movs	r3, #2
 80056d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80056d4:	2302      	movs	r3, #2
 80056d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80056d8:	2302      	movs	r3, #2
 80056da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80056dc:	f107 031c 	add.w	r3, r7, #28
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7fc f9ed 	bl	8001ac0 <HAL_RCC_OscConfig>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d001      	beq.n	80056f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80056ec:	f000 f826 	bl	800573c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80056f0:	f7fb fee0 	bl	80014b4 <HAL_PWREx_EnableOverDrive>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80056fa:	f000 f81f 	bl	800573c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80056fe:	230f      	movs	r3, #15
 8005700:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005702:	2302      	movs	r3, #2
 8005704:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005706:	2300      	movs	r3, #0
 8005708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800570a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800570e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005714:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005716:	f107 0308 	add.w	r3, r7, #8
 800571a:	2105      	movs	r1, #5
 800571c:	4618      	mov	r0, r3
 800571e:	f7fb ff19 	bl	8001554 <HAL_RCC_ClockConfig>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8005728:	f000 f808 	bl	800573c <Error_Handler>
  }
}
 800572c:	bf00      	nop
 800572e:	3750      	adds	r7, #80	; 0x50
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	40023800 	.word	0x40023800
 8005738:	40007000 	.word	0x40007000

0800573c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005740:	bf00      	nop
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
	...

0800574c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005752:	2300      	movs	r3, #0
 8005754:	607b      	str	r3, [r7, #4]
 8005756:	4b10      	ldr	r3, [pc, #64]	; (8005798 <HAL_MspInit+0x4c>)
 8005758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800575a:	4a0f      	ldr	r2, [pc, #60]	; (8005798 <HAL_MspInit+0x4c>)
 800575c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005760:	6453      	str	r3, [r2, #68]	; 0x44
 8005762:	4b0d      	ldr	r3, [pc, #52]	; (8005798 <HAL_MspInit+0x4c>)
 8005764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800576a:	607b      	str	r3, [r7, #4]
 800576c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800576e:	2300      	movs	r3, #0
 8005770:	603b      	str	r3, [r7, #0]
 8005772:	4b09      	ldr	r3, [pc, #36]	; (8005798 <HAL_MspInit+0x4c>)
 8005774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005776:	4a08      	ldr	r2, [pc, #32]	; (8005798 <HAL_MspInit+0x4c>)
 8005778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800577c:	6413      	str	r3, [r2, #64]	; 0x40
 800577e:	4b06      	ldr	r3, [pc, #24]	; (8005798 <HAL_MspInit+0x4c>)
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005786:	603b      	str	r3, [r7, #0]
 8005788:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800578a:	2004      	movs	r0, #4
 800578c:	f7fb fccc 	bl	8001128 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005790:	bf00      	nop
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	40023800 	.word	0x40023800

0800579c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80057a0:	bf00      	nop
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80057aa:	b480      	push	{r7}
 80057ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80057ae:	e7fe      	b.n	80057ae <HardFault_Handler+0x4>

080057b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80057b0:	b480      	push	{r7}
 80057b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80057b4:	e7fe      	b.n	80057b4 <MemManage_Handler+0x4>

080057b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80057b6:	b480      	push	{r7}
 80057b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80057ba:	e7fe      	b.n	80057ba <BusFault_Handler+0x4>

080057bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80057bc:	b480      	push	{r7}
 80057be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80057c0:	e7fe      	b.n	80057c0 <UsageFault_Handler+0x4>

080057c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80057c2:	b480      	push	{r7}
 80057c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80057c6:	bf00      	nop
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80057d0:	b480      	push	{r7}
 80057d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80057d4:	bf00      	nop
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80057de:	b480      	push	{r7}
 80057e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80057e2:	bf00      	nop
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80057f0:	f7fb fbc8 	bl	8000f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80057f4:	bf00      	nop
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
	HighFreqTask();
 80057fc:	f000 fd10 	bl	8006220 <HighFreqTask>
  /* USER CODE END ADC_IRQn 0 */
  
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8005800:	bf00      	nop
 8005802:	bd80      	pop	{r7, pc}

08005804 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8005808:	bf00      	nop
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005812:	b480      	push	{r7}
 8005814:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005816:	bf00      	nop
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
	return 1;
 8005824:	2301      	movs	r3, #1
}
 8005826:	4618      	mov	r0, r3
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <_kill>:

int _kill(int pid, int sig)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800583a:	f001 ff29 	bl	8007690 <__errno>
 800583e:	4602      	mov	r2, r0
 8005840:	2316      	movs	r3, #22
 8005842:	6013      	str	r3, [r2, #0]
	return -1;
 8005844:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005848:	4618      	mov	r0, r3
 800584a:	3708      	adds	r7, #8
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <_exit>:

void _exit (int status)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005858:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7ff ffe7 	bl	8005830 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005862:	e7fe      	b.n	8005862 <_exit+0x12>

08005864 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800586c:	4b11      	ldr	r3, [pc, #68]	; (80058b4 <_sbrk+0x50>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d102      	bne.n	800587a <_sbrk+0x16>
		heap_end = &end;
 8005874:	4b0f      	ldr	r3, [pc, #60]	; (80058b4 <_sbrk+0x50>)
 8005876:	4a10      	ldr	r2, [pc, #64]	; (80058b8 <_sbrk+0x54>)
 8005878:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800587a:	4b0e      	ldr	r3, [pc, #56]	; (80058b4 <_sbrk+0x50>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005880:	4b0c      	ldr	r3, [pc, #48]	; (80058b4 <_sbrk+0x50>)
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4413      	add	r3, r2
 8005888:	466a      	mov	r2, sp
 800588a:	4293      	cmp	r3, r2
 800588c:	d907      	bls.n	800589e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800588e:	f001 feff 	bl	8007690 <__errno>
 8005892:	4602      	mov	r2, r0
 8005894:	230c      	movs	r3, #12
 8005896:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800589c:	e006      	b.n	80058ac <_sbrk+0x48>
	}

	heap_end += incr;
 800589e:	4b05      	ldr	r3, [pc, #20]	; (80058b4 <_sbrk+0x50>)
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4413      	add	r3, r2
 80058a6:	4a03      	ldr	r2, [pc, #12]	; (80058b4 <_sbrk+0x50>)
 80058a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80058aa:	68fb      	ldr	r3, [r7, #12]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	200001f8 	.word	0x200001f8
 80058b8:	20000308 	.word	0x20000308

080058bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80058bc:	b480      	push	{r7}
 80058be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80058c0:	4b16      	ldr	r3, [pc, #88]	; (800591c <SystemInit+0x60>)
 80058c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c6:	4a15      	ldr	r2, [pc, #84]	; (800591c <SystemInit+0x60>)
 80058c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80058d0:	4b13      	ldr	r3, [pc, #76]	; (8005920 <SystemInit+0x64>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a12      	ldr	r2, [pc, #72]	; (8005920 <SystemInit+0x64>)
 80058d6:	f043 0301 	orr.w	r3, r3, #1
 80058da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80058dc:	4b10      	ldr	r3, [pc, #64]	; (8005920 <SystemInit+0x64>)
 80058de:	2200      	movs	r2, #0
 80058e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80058e2:	4b0f      	ldr	r3, [pc, #60]	; (8005920 <SystemInit+0x64>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a0e      	ldr	r2, [pc, #56]	; (8005920 <SystemInit+0x64>)
 80058e8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80058ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058f0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80058f2:	4b0b      	ldr	r3, [pc, #44]	; (8005920 <SystemInit+0x64>)
 80058f4:	4a0b      	ldr	r2, [pc, #44]	; (8005924 <SystemInit+0x68>)
 80058f6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80058f8:	4b09      	ldr	r3, [pc, #36]	; (8005920 <SystemInit+0x64>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a08      	ldr	r2, [pc, #32]	; (8005920 <SystemInit+0x64>)
 80058fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005902:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005904:	4b06      	ldr	r3, [pc, #24]	; (8005920 <SystemInit+0x64>)
 8005906:	2200      	movs	r2, #0
 8005908:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800590a:	4b04      	ldr	r3, [pc, #16]	; (800591c <SystemInit+0x60>)
 800590c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005910:	609a      	str	r2, [r3, #8]
#endif
}
 8005912:	bf00      	nop
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	e000ed00 	.word	0xe000ed00
 8005920:	40023800 	.word	0x40023800
 8005924:	24003010 	.word	0x24003010

08005928 <__NVIC_GetPriorityGrouping>:
{
 8005928:	b480      	push	{r7}
 800592a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800592c:	4b04      	ldr	r3, [pc, #16]	; (8005940 <__NVIC_GetPriorityGrouping+0x18>)
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	0a1b      	lsrs	r3, r3, #8
 8005932:	f003 0307 	and.w	r3, r3, #7
}
 8005936:	4618      	mov	r0, r3
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	e000ed00 	.word	0xe000ed00

08005944 <__NVIC_EnableIRQ>:
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	4603      	mov	r3, r0
 800594c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800594e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005952:	2b00      	cmp	r3, #0
 8005954:	db0b      	blt.n	800596e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005956:	79fb      	ldrb	r3, [r7, #7]
 8005958:	f003 021f 	and.w	r2, r3, #31
 800595c:	4907      	ldr	r1, [pc, #28]	; (800597c <__NVIC_EnableIRQ+0x38>)
 800595e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005962:	095b      	lsrs	r3, r3, #5
 8005964:	2001      	movs	r0, #1
 8005966:	fa00 f202 	lsl.w	r2, r0, r2
 800596a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800596e:	bf00      	nop
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	e000e100 	.word	0xe000e100

08005980 <__NVIC_SetPriority>:
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	4603      	mov	r3, r0
 8005988:	6039      	str	r1, [r7, #0]
 800598a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800598c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005990:	2b00      	cmp	r3, #0
 8005992:	db0a      	blt.n	80059aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	b2da      	uxtb	r2, r3
 8005998:	490c      	ldr	r1, [pc, #48]	; (80059cc <__NVIC_SetPriority+0x4c>)
 800599a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800599e:	0112      	lsls	r2, r2, #4
 80059a0:	b2d2      	uxtb	r2, r2
 80059a2:	440b      	add	r3, r1
 80059a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80059a8:	e00a      	b.n	80059c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	b2da      	uxtb	r2, r3
 80059ae:	4908      	ldr	r1, [pc, #32]	; (80059d0 <__NVIC_SetPriority+0x50>)
 80059b0:	79fb      	ldrb	r3, [r7, #7]
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	3b04      	subs	r3, #4
 80059b8:	0112      	lsls	r2, r2, #4
 80059ba:	b2d2      	uxtb	r2, r2
 80059bc:	440b      	add	r3, r1
 80059be:	761a      	strb	r2, [r3, #24]
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	e000e100 	.word	0xe000e100
 80059d0:	e000ed00 	.word	0xe000ed00

080059d4 <NVIC_EncodePriority>:
{
 80059d4:	b480      	push	{r7}
 80059d6:	b089      	sub	sp, #36	; 0x24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f003 0307 	and.w	r3, r3, #7
 80059e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	f1c3 0307 	rsb	r3, r3, #7
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	bf28      	it	cs
 80059f2:	2304      	movcs	r3, #4
 80059f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	3304      	adds	r3, #4
 80059fa:	2b06      	cmp	r3, #6
 80059fc:	d902      	bls.n	8005a04 <NVIC_EncodePriority+0x30>
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	3b03      	subs	r3, #3
 8005a02:	e000      	b.n	8005a06 <NVIC_EncodePriority+0x32>
 8005a04:	2300      	movs	r3, #0
 8005a06:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a12:	43da      	mvns	r2, r3
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	401a      	ands	r2, r3
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	fa01 f303 	lsl.w	r3, r1, r3
 8005a26:	43d9      	mvns	r1, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a2c:	4313      	orrs	r3, r2
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3724      	adds	r7, #36	; 0x24
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <LL_TIM_DisableARRPreload>:
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	601a      	str	r2, [r3, #0]
}
 8005a4e:	bf00      	nop
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
	...

08005a5c <LL_TIM_OC_DisableFast>:
{
 8005a5c:	b4b0      	push	{r4, r5, r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d01c      	beq.n	8005aa6 <LL_TIM_OC_DisableFast+0x4a>
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	2b04      	cmp	r3, #4
 8005a70:	d017      	beq.n	8005aa2 <LL_TIM_OC_DisableFast+0x46>
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b10      	cmp	r3, #16
 8005a76:	d012      	beq.n	8005a9e <LL_TIM_OC_DisableFast+0x42>
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2b40      	cmp	r3, #64	; 0x40
 8005a7c:	d00d      	beq.n	8005a9a <LL_TIM_OC_DisableFast+0x3e>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a84:	d007      	beq.n	8005a96 <LL_TIM_OC_DisableFast+0x3a>
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a8c:	d101      	bne.n	8005a92 <LL_TIM_OC_DisableFast+0x36>
 8005a8e:	2305      	movs	r3, #5
 8005a90:	e00a      	b.n	8005aa8 <LL_TIM_OC_DisableFast+0x4c>
 8005a92:	2306      	movs	r3, #6
 8005a94:	e008      	b.n	8005aa8 <LL_TIM_OC_DisableFast+0x4c>
 8005a96:	2304      	movs	r3, #4
 8005a98:	e006      	b.n	8005aa8 <LL_TIM_OC_DisableFast+0x4c>
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e004      	b.n	8005aa8 <LL_TIM_OC_DisableFast+0x4c>
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	e002      	b.n	8005aa8 <LL_TIM_OC_DisableFast+0x4c>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e000      	b.n	8005aa8 <LL_TIM_OC_DisableFast+0x4c>
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	3318      	adds	r3, #24
 8005aae:	461a      	mov	r2, r3
 8005ab0:	4629      	mov	r1, r5
 8005ab2:	4b09      	ldr	r3, [pc, #36]	; (8005ad8 <LL_TIM_OC_DisableFast+0x7c>)
 8005ab4:	5c5b      	ldrb	r3, [r3, r1]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8005aba:	6822      	ldr	r2, [r4, #0]
 8005abc:	4629      	mov	r1, r5
 8005abe:	4b07      	ldr	r3, [pc, #28]	; (8005adc <LL_TIM_OC_DisableFast+0x80>)
 8005ac0:	5c5b      	ldrb	r3, [r3, r1]
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	2304      	movs	r3, #4
 8005ac6:	408b      	lsls	r3, r1
 8005ac8:	43db      	mvns	r3, r3
 8005aca:	4013      	ands	r3, r2
 8005acc:	6023      	str	r3, [r4, #0]
}
 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bcb0      	pop	{r4, r5, r7}
 8005ad6:	4770      	bx	lr
 8005ad8:	08009370 	.word	0x08009370
 8005adc:	08009378 	.word	0x08009378

08005ae0 <LL_TIM_OC_EnablePreload>:
{
 8005ae0:	b4b0      	push	{r4, r5, r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d01c      	beq.n	8005b2a <LL_TIM_OC_EnablePreload+0x4a>
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d017      	beq.n	8005b26 <LL_TIM_OC_EnablePreload+0x46>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b10      	cmp	r3, #16
 8005afa:	d012      	beq.n	8005b22 <LL_TIM_OC_EnablePreload+0x42>
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	2b40      	cmp	r3, #64	; 0x40
 8005b00:	d00d      	beq.n	8005b1e <LL_TIM_OC_EnablePreload+0x3e>
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b08:	d007      	beq.n	8005b1a <LL_TIM_OC_EnablePreload+0x3a>
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b10:	d101      	bne.n	8005b16 <LL_TIM_OC_EnablePreload+0x36>
 8005b12:	2305      	movs	r3, #5
 8005b14:	e00a      	b.n	8005b2c <LL_TIM_OC_EnablePreload+0x4c>
 8005b16:	2306      	movs	r3, #6
 8005b18:	e008      	b.n	8005b2c <LL_TIM_OC_EnablePreload+0x4c>
 8005b1a:	2304      	movs	r3, #4
 8005b1c:	e006      	b.n	8005b2c <LL_TIM_OC_EnablePreload+0x4c>
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e004      	b.n	8005b2c <LL_TIM_OC_EnablePreload+0x4c>
 8005b22:	2302      	movs	r3, #2
 8005b24:	e002      	b.n	8005b2c <LL_TIM_OC_EnablePreload+0x4c>
 8005b26:	2301      	movs	r3, #1
 8005b28:	e000      	b.n	8005b2c <LL_TIM_OC_EnablePreload+0x4c>
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	3318      	adds	r3, #24
 8005b32:	461a      	mov	r2, r3
 8005b34:	4629      	mov	r1, r5
 8005b36:	4b09      	ldr	r3, [pc, #36]	; (8005b5c <LL_TIM_OC_EnablePreload+0x7c>)
 8005b38:	5c5b      	ldrb	r3, [r3, r1]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8005b3e:	6822      	ldr	r2, [r4, #0]
 8005b40:	4629      	mov	r1, r5
 8005b42:	4b07      	ldr	r3, [pc, #28]	; (8005b60 <LL_TIM_OC_EnablePreload+0x80>)
 8005b44:	5c5b      	ldrb	r3, [r3, r1]
 8005b46:	4619      	mov	r1, r3
 8005b48:	2308      	movs	r3, #8
 8005b4a:	408b      	lsls	r3, r1
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	6023      	str	r3, [r4, #0]
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bcb0      	pop	{r4, r5, r7}
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	08009370 	.word	0x08009370
 8005b60:	08009378 	.word	0x08009378

08005b64 <LL_TIM_SetTriggerOutput>:
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	605a      	str	r2, [r3, #4]
}
 8005b7e:	bf00      	nop
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <LL_TIM_SetSlaveMode>:
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f023 0207 	bic.w	r2, r3, #7
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	431a      	orrs	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	609a      	str	r2, [r3, #8]
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <LL_TIM_SetTriggerInput>:
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	431a      	orrs	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	609a      	str	r2, [r3, #8]
}
 8005bca:	bf00      	nop
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <LL_TIM_DisableMasterSlaveMode>:
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	609a      	str	r2, [r3, #8]
}
 8005bea:	bf00      	nop
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <LL_TIM_DisableIT_TRIG>:
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b083      	sub	sp, #12
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TIE);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	60da      	str	r2, [r3, #12]
}
 8005c0a:	bf00      	nop
 8005c0c:	370c      	adds	r7, #12
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr

08005c16 <LL_TIM_DisableDMAReq_TRIG>:
{
 8005c16:	b480      	push	{r7}
 8005c18:	b083      	sub	sp, #12
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TDE);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	60da      	str	r2, [r3, #12]
}
 8005c2a:	bf00      	nop
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
	...

08005c38 <LL_AHB1_GRP1_EnableClock>:
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005c40:	4b08      	ldr	r3, [pc, #32]	; (8005c64 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005c42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c44:	4907      	ldr	r1, [pc, #28]	; (8005c64 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005c4c:	4b05      	ldr	r3, [pc, #20]	; (8005c64 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4013      	ands	r3, r2
 8005c54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005c56:	68fb      	ldr	r3, [r7, #12]
}
 8005c58:	bf00      	nop
 8005c5a:	3714      	adds	r7, #20
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	40023800 	.word	0x40023800

08005c68 <LL_APB2_GRP1_EnableClock>:
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005c70:	4b08      	ldr	r3, [pc, #32]	; (8005c94 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005c72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c74:	4907      	ldr	r1, [pc, #28]	; (8005c94 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005c7c:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005c7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4013      	ands	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005c86:	68fb      	ldr	r3, [r7, #12]
}
 8005c88:	bf00      	nop
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	40023800 	.word	0x40023800

08005c98 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b09a      	sub	sp, #104	; 0x68
 8005c9c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005c9e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	605a      	str	r2, [r3, #4]
 8005ca8:	609a      	str	r2, [r3, #8]
 8005caa:	60da      	str	r2, [r3, #12]
 8005cac:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8005cae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f001 fd48 	bl	800774c <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8005cbc:	f107 031c 	add.w	r3, r7, #28
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	605a      	str	r2, [r3, #4]
 8005cc6:	609a      	str	r2, [r3, #8]
 8005cc8:	60da      	str	r2, [r3, #12]
 8005cca:	611a      	str	r2, [r3, #16]
 8005ccc:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cce:	1d3b      	adds	r3, r7, #4
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	605a      	str	r2, [r3, #4]
 8005cd6:	609a      	str	r2, [r3, #8]
 8005cd8:	60da      	str	r2, [r3, #12]
 8005cda:	611a      	str	r2, [r3, #16]
 8005cdc:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8005cde:	2001      	movs	r0, #1
 8005ce0:	f7ff ffc2 	bl	8005c68 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005ce4:	2001      	movs	r0, #1
 8005ce6:	f7ff ffa7 	bl	8005c38 <LL_AHB1_GRP1_EnableClock>
  /**TIM1 GPIO Configuration  
  PA6   ------> TIM1_BKIN 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8005cea:	2340      	movs	r3, #64	; 0x40
 8005cec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005cee:	2302      	movs	r3, #2
 8005cf0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d02:	1d3b      	adds	r3, r7, #4
 8005d04:	4619      	mov	r1, r3
 8005d06:	4871      	ldr	r0, [pc, #452]	; (8005ecc <MX_TIM1_Init+0x234>)
 8005d08:	f7fc fedb 	bl	8002ac2 <LL_GPIO_Init>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 1));
 8005d0c:	f7ff fe0c 	bl	8005928 <__NVIC_GetPriorityGrouping>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2201      	movs	r2, #1
 8005d14:	2104      	movs	r1, #4
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7ff fe5c 	bl	80059d4 <NVIC_EncodePriority>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	4619      	mov	r1, r3
 8005d20:	2018      	movs	r0, #24
 8005d22:	f7ff fe2d 	bl	8005980 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005d26:	2018      	movs	r0, #24
 8005d28:	f7ff fe0c 	bl	8005944 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005d2c:	f7ff fdfc 	bl	8005928 <__NVIC_GetPriorityGrouping>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2200      	movs	r2, #0
 8005d34:	2100      	movs	r1, #0
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7ff fe4c 	bl	80059d4 <NVIC_EncodePriority>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	4619      	mov	r1, r3
 8005d40:	2019      	movs	r0, #25
 8005d42:	f7ff fe1d 	bl	8005980 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005d46:	2019      	movs	r0, #25
 8005d48:	f7ff fdfc 	bl	8005944 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 0;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_UP;
 8005d52:	2320      	movs	r3, #32
 8005d54:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 65535;
 8005d56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d5a:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV2;
 8005d5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d60:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 8005d62:	2300      	movs	r3, #0
 8005d64:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8005d68:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	4858      	ldr	r0, [pc, #352]	; (8005ed0 <MX_TIM1_Init+0x238>)
 8005d70:	f7fc ff96 	bl	8002ca0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8005d74:	4856      	ldr	r0, [pc, #344]	; (8005ed0 <MX_TIM1_Init+0x238>)
 8005d76:	f7ff fe60 	bl	8005a3a <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8005d7a:	2101      	movs	r1, #1
 8005d7c:	4854      	ldr	r0, [pc, #336]	; (8005ed0 <MX_TIM1_Init+0x238>)
 8005d7e:	f7ff feaf 	bl	8005ae0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8005d82:	2360      	movs	r3, #96	; 0x60
 8005d84:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005d86:	2300      	movs	r3, #0
 8005d88:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005d92:	2300      	movs	r3, #0
 8005d94:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005d96:	2300      	movs	r3, #0
 8005d98:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8005da2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005da6:	461a      	mov	r2, r3
 8005da8:	2101      	movs	r1, #1
 8005daa:	4849      	ldr	r0, [pc, #292]	; (8005ed0 <MX_TIM1_Init+0x238>)
 8005dac:	f7fd f812 	bl	8002dd4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8005db0:	2101      	movs	r1, #1
 8005db2:	4847      	ldr	r0, [pc, #284]	; (8005ed0 <MX_TIM1_Init+0x238>)
 8005db4:	f7ff fe52 	bl	8005a5c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 8005db8:	2110      	movs	r1, #16
 8005dba:	4845      	ldr	r0, [pc, #276]	; (8005ed0 <MX_TIM1_Init+0x238>)
 8005dbc:	f7ff fe90 	bl	8005ae0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8005dc8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005dcc:	461a      	mov	r2, r3
 8005dce:	2110      	movs	r1, #16
 8005dd0:	483f      	ldr	r0, [pc, #252]	; (8005ed0 <MX_TIM1_Init+0x238>)
 8005dd2:	f7fc ffff 	bl	8002dd4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 8005dd6:	2110      	movs	r1, #16
 8005dd8:	483d      	ldr	r0, [pc, #244]	; (8005ed0 <MX_TIM1_Init+0x238>)
 8005dda:	f7ff fe3f 	bl	8005a5c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8005dde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005de2:	483b      	ldr	r0, [pc, #236]	; (8005ed0 <MX_TIM1_Init+0x238>)
 8005de4:	f7ff fe7c 	bl	8005ae0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005de8:	2300      	movs	r3, #0
 8005dea:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005dec:	2300      	movs	r3, #0
 8005dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8005df0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005df4:	461a      	mov	r2, r3
 8005df6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005dfa:	4835      	ldr	r0, [pc, #212]	; (8005ed0 <MX_TIM1_Init+0x238>)
 8005dfc:	f7fc ffea 	bl	8002dd4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8005e00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e04:	4832      	ldr	r0, [pc, #200]	; (8005ed0 <MX_TIM1_Init+0x238>)
 8005e06:	f7ff fe29 	bl	8005a5c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 8005e0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e0e:	4830      	ldr	r0, [pc, #192]	; (8005ed0 <MX_TIM1_Init+0x238>)
 8005e10:	f7ff fe66 	bl	8005ae0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 8005e14:	2370      	movs	r3, #112	; 0x70
 8005e16:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8005e20:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005e24:	461a      	mov	r2, r3
 8005e26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e2a:	4829      	ldr	r0, [pc, #164]	; (8005ed0 <MX_TIM1_Init+0x238>)
 8005e2c:	f7fc ffd2 	bl	8002dd4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 8005e30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e34:	4826      	ldr	r0, [pc, #152]	; (8005ed0 <MX_TIM1_Init+0x238>)
 8005e36:	f7ff fe11 	bl	8005a5c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerInput(TIM1, LL_TIM_TS_ITR1);
 8005e3a:	2110      	movs	r1, #16
 8005e3c:	4824      	ldr	r0, [pc, #144]	; (8005ed0 <MX_TIM1_Init+0x238>)
 8005e3e:	f7ff feb7 	bl	8005bb0 <LL_TIM_SetTriggerInput>
  LL_TIM_SetSlaveMode(TIM1, LL_TIM_SLAVEMODE_TRIGGER);
 8005e42:	2106      	movs	r1, #6
 8005e44:	4822      	ldr	r0, [pc, #136]	; (8005ed0 <MX_TIM1_Init+0x238>)
 8005e46:	f7ff fea0 	bl	8005b8a <LL_TIM_SetSlaveMode>
  LL_TIM_DisableIT_TRIG(TIM1);
 8005e4a:	4821      	ldr	r0, [pc, #132]	; (8005ed0 <MX_TIM1_Init+0x238>)
 8005e4c:	f7ff fed3 	bl	8005bf6 <LL_TIM_DisableIT_TRIG>
  LL_TIM_DisableDMAReq_TRIG(TIM1);
 8005e50:	481f      	ldr	r0, [pc, #124]	; (8005ed0 <MX_TIM1_Init+0x238>)
 8005e52:	f7ff fee0 	bl	8005c16 <LL_TIM_DisableDMAReq_TRIG>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8005e56:	2100      	movs	r1, #0
 8005e58:	481d      	ldr	r0, [pc, #116]	; (8005ed0 <MX_TIM1_Init+0x238>)
 8005e5a:	f7ff fe83 	bl	8005b64 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8005e5e:	481c      	ldr	r0, [pc, #112]	; (8005ed0 <MX_TIM1_Init+0x238>)
 8005e60:	f7ff feb9 	bl	8005bd6 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_ENABLE;
 8005e64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e68:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_ENABLE;
 8005e6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e6e:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_1;
 8005e70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e74:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8005e76:	2300      	movs	r3, #0
 8005e78:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_ENABLE;
 8005e7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e80:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8005e82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8005e8c:	f107 031c 	add.w	r3, r7, #28
 8005e90:	4619      	mov	r1, r3
 8005e92:	480f      	ldr	r0, [pc, #60]	; (8005ed0 <MX_TIM1_Init+0x238>)
 8005e94:	f7fc ffd6 	bl	8002e44 <LL_TIM_BDTR_Init>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005e98:	2001      	movs	r0, #1
 8005e9a:	f7ff fecd 	bl	8005c38 <LL_AHB1_GRP1_EnableClock>
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8005e9e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005ea2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005eac:	2300      	movs	r3, #0
 8005eae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005eb8:	1d3b      	adds	r3, r7, #4
 8005eba:	4619      	mov	r1, r3
 8005ebc:	4803      	ldr	r0, [pc, #12]	; (8005ecc <MX_TIM1_Init+0x234>)
 8005ebe:	f7fc fe00 	bl	8002ac2 <LL_GPIO_Init>

}
 8005ec2:	bf00      	nop
 8005ec4:	3768      	adds	r7, #104	; 0x68
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	40020000 	.word	0x40020000
 8005ed0:	40010000 	.word	0x40010000

08005ed4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8005ed8:	4b11      	ldr	r3, [pc, #68]	; (8005f20 <MX_USART2_UART_Init+0x4c>)
 8005eda:	4a12      	ldr	r2, [pc, #72]	; (8005f24 <MX_USART2_UART_Init+0x50>)
 8005edc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005ede:	4b10      	ldr	r3, [pc, #64]	; (8005f20 <MX_USART2_UART_Init+0x4c>)
 8005ee0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005ee4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005ee6:	4b0e      	ldr	r3, [pc, #56]	; (8005f20 <MX_USART2_UART_Init+0x4c>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005eec:	4b0c      	ldr	r3, [pc, #48]	; (8005f20 <MX_USART2_UART_Init+0x4c>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005ef2:	4b0b      	ldr	r3, [pc, #44]	; (8005f20 <MX_USART2_UART_Init+0x4c>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005ef8:	4b09      	ldr	r3, [pc, #36]	; (8005f20 <MX_USART2_UART_Init+0x4c>)
 8005efa:	220c      	movs	r2, #12
 8005efc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005efe:	4b08      	ldr	r3, [pc, #32]	; (8005f20 <MX_USART2_UART_Init+0x4c>)
 8005f00:	2200      	movs	r2, #0
 8005f02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f04:	4b06      	ldr	r3, [pc, #24]	; (8005f20 <MX_USART2_UART_Init+0x4c>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005f0a:	4805      	ldr	r0, [pc, #20]	; (8005f20 <MX_USART2_UART_Init+0x4c>)
 8005f0c:	f7fc f832 	bl	8001f74 <HAL_UART_Init>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005f16:	f7ff fc11 	bl	800573c <Error_Handler>
  }

}
 8005f1a:	bf00      	nop
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	200002c0 	.word	0x200002c0
 8005f24:	40004400 	.word	0x40004400

08005f28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b08a      	sub	sp, #40	; 0x28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f30:	f107 0314 	add.w	r3, r7, #20
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]
 8005f38:	605a      	str	r2, [r3, #4]
 8005f3a:	609a      	str	r2, [r3, #8]
 8005f3c:	60da      	str	r2, [r3, #12]
 8005f3e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a19      	ldr	r2, [pc, #100]	; (8005fac <HAL_UART_MspInit+0x84>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d12b      	bne.n	8005fa2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	613b      	str	r3, [r7, #16]
 8005f4e:	4b18      	ldr	r3, [pc, #96]	; (8005fb0 <HAL_UART_MspInit+0x88>)
 8005f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f52:	4a17      	ldr	r2, [pc, #92]	; (8005fb0 <HAL_UART_MspInit+0x88>)
 8005f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f58:	6413      	str	r3, [r2, #64]	; 0x40
 8005f5a:	4b15      	ldr	r3, [pc, #84]	; (8005fb0 <HAL_UART_MspInit+0x88>)
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f62:	613b      	str	r3, [r7, #16]
 8005f64:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f66:	2300      	movs	r3, #0
 8005f68:	60fb      	str	r3, [r7, #12]
 8005f6a:	4b11      	ldr	r3, [pc, #68]	; (8005fb0 <HAL_UART_MspInit+0x88>)
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6e:	4a10      	ldr	r2, [pc, #64]	; (8005fb0 <HAL_UART_MspInit+0x88>)
 8005f70:	f043 0301 	orr.w	r3, r3, #1
 8005f74:	6313      	str	r3, [r2, #48]	; 0x30
 8005f76:	4b0e      	ldr	r3, [pc, #56]	; (8005fb0 <HAL_UART_MspInit+0x88>)
 8005f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005f82:	230c      	movs	r3, #12
 8005f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f86:	2302      	movs	r3, #2
 8005f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005f92:	2307      	movs	r3, #7
 8005f94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f96:	f107 0314 	add.w	r3, r7, #20
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	4805      	ldr	r0, [pc, #20]	; (8005fb4 <HAL_UART_MspInit+0x8c>)
 8005f9e:	f7fb f8f7 	bl	8001190 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005fa2:	bf00      	nop
 8005fa4:	3728      	adds	r7, #40	; 0x28
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	40004400 	.word	0x40004400
 8005fb0:	40023800 	.word	0x40023800
 8005fb4:	40020000 	.word	0x40020000

08005fb8 <LL_ADC_Enable>:
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f043 0201 	orr.w	r2, r3, #1
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	609a      	str	r2, [r3, #8]
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <LL_ADC_INJ_ReadConversionData12>:
{
 8005fd8:	b490      	push	{r4, r7}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JDRX_REGOFFSET_MASK));
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	333c      	adds	r3, #60	; 0x3c
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fee:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005ff2:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	fa92 f2a2 	rbit	r2, r2
 8005ffa:	60ba      	str	r2, [r7, #8]
  return result;
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	fab2 f282 	clz	r2, r2
 8006002:	b2d2      	uxtb	r2, r2
 8006004:	40d3      	lsrs	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	440b      	add	r3, r1
 800600a:	461c      	mov	r4, r3
  return (uint16_t)(READ_BIT(*preg,
 800600c:	6823      	ldr	r3, [r4, #0]
                   );
 800600e:	b29b      	uxth	r3, r3
}
 8006010:	4618      	mov	r0, r3
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bc90      	pop	{r4, r7}
 8006018:	4770      	bx	lr

0800601a <LL_ADC_IsActiveFlag_JEOS>:
{
 800601a:	b480      	push	{r7}
 800601c:	b083      	sub	sp, #12
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0304 	and.w	r3, r3, #4
 800602a:	2b04      	cmp	r3, #4
 800602c:	bf0c      	ite	eq
 800602e:	2301      	moveq	r3, #1
 8006030:	2300      	movne	r3, #0
 8006032:	b2db      	uxtb	r3, r3
}
 8006034:	4618      	mov	r0, r3
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <LL_ADC_ClearFlag_JEOS>:
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f06f 0204 	mvn.w	r2, #4
 800604e:	601a      	str	r2, [r3, #0]
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <LL_ADC_EnableIT_JEOS>:
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	605a      	str	r2, [r3, #4]
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <_ZN3PWMC1Ev>:


#ifndef PWM_HPP_
#define PWM_HPP_

class PWM {
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	605a      	str	r2, [r3, #4]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	609a      	str	r2, [r3, #8]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4618      	mov	r0, r3
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
	...

080060a0 <cppwrapper>:
PWM PWM_Object3;
PWM PWM_Object4;

ArgSensor sensor;

void cppwrapper(void){
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b094      	sub	sp, #80	; 0x50
 80060a4:	af00      	add	r7, sp, #0
	MathLib mathlibrary;//三角関数を取得
 80060a6:	1d3b      	adds	r3, r7, #4
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7fd f91f 	bl	80032ec <_ZN7MathLibC1Ev>
	int mathlib_size = 256;//ライブラリのサイズを指定
 80060ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060b2:	64fb      	str	r3, [r7, #76]	; 0x4c
	mathlibrary.fInit(mathlib_size);
 80060b4:	1d3b      	adds	r3, r7, #4
 80060b6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7fd f979 	bl	80033b0 <_ZN7MathLib5fInitEi>

	Motor.setMathLib(mathlibrary);//モータクラスに算術ライブラリを渡す
 80060be:	1d3a      	adds	r2, r7, #4
 80060c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060c4:	4611      	mov	r1, r2
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fe f8de 	bl	8004288 <_ZN7MathLibC1ERKS_>
 80060cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060d0:	4619      	mov	r1, r3
 80060d2:	4829      	ldr	r0, [pc, #164]	; (8006178 <cppwrapper+0xd8>)
 80060d4:	f7fe f8c9 	bl	800426a <_ZN9MotorInfo10setMathLibE7MathLib>
 80060d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060dc:	4618      	mov	r0, r3
 80060de:	f7fd f921 	bl	8003324 <_ZN7MathLibD1Ev>

	PWM_Object1.setTIM(TIM1);
 80060e2:	4926      	ldr	r1, [pc, #152]	; (800617c <cppwrapper+0xdc>)
 80060e4:	4826      	ldr	r0, [pc, #152]	; (8006180 <cppwrapper+0xe0>)
 80060e6:	f7fe fcf2 	bl	8004ace <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object2.setTIM(TIM1);
 80060ea:	4924      	ldr	r1, [pc, #144]	; (800617c <cppwrapper+0xdc>)
 80060ec:	4825      	ldr	r0, [pc, #148]	; (8006184 <cppwrapper+0xe4>)
 80060ee:	f7fe fcee 	bl	8004ace <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object3.setTIM(TIM1);
 80060f2:	4922      	ldr	r1, [pc, #136]	; (800617c <cppwrapper+0xdc>)
 80060f4:	4824      	ldr	r0, [pc, #144]	; (8006188 <cppwrapper+0xe8>)
 80060f6:	f7fe fcea 	bl	8004ace <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object4.setTIM(TIM1);
 80060fa:	4920      	ldr	r1, [pc, #128]	; (800617c <cppwrapper+0xdc>)
 80060fc:	4823      	ldr	r0, [pc, #140]	; (800618c <cppwrapper+0xec>)
 80060fe:	f7fe fce6 	bl	8004ace <_ZN3PWM6setTIMEP11TIM_TypeDef>

	PWM_Object1.setCH(1);
 8006102:	2101      	movs	r1, #1
 8006104:	481e      	ldr	r0, [pc, #120]	; (8006180 <cppwrapper+0xe0>)
 8006106:	f7fe fcf0 	bl	8004aea <_ZN3PWM5setCHEi>
	PWM_Object2.setCH(2);
 800610a:	2102      	movs	r1, #2
 800610c:	481d      	ldr	r0, [pc, #116]	; (8006184 <cppwrapper+0xe4>)
 800610e:	f7fe fcec 	bl	8004aea <_ZN3PWM5setCHEi>
	PWM_Object3.setCH(3);
 8006112:	2103      	movs	r1, #3
 8006114:	481c      	ldr	r0, [pc, #112]	; (8006188 <cppwrapper+0xe8>)
 8006116:	f7fe fce8 	bl	8004aea <_ZN3PWM5setCHEi>
	PWM_Object4.setCH(4);
 800611a:	2104      	movs	r1, #4
 800611c:	481b      	ldr	r0, [pc, #108]	; (800618c <cppwrapper+0xec>)
 800611e:	f7fe fce4 	bl	8004aea <_ZN3PWM5setCHEi>

	PWM_Object1.fInit(65535);
 8006122:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006126:	4816      	ldr	r0, [pc, #88]	; (8006180 <cppwrapper+0xe0>)
 8006128:	f7fe fced 	bl	8004b06 <_ZN3PWM5fInitEi>
	PWM_Object2.fInit(65535);
 800612c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006130:	4814      	ldr	r0, [pc, #80]	; (8006184 <cppwrapper+0xe4>)
 8006132:	f7fe fce8 	bl	8004b06 <_ZN3PWM5fInitEi>
	PWM_Object3.fInit(65535);
 8006136:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800613a:	4813      	ldr	r0, [pc, #76]	; (8006188 <cppwrapper+0xe8>)
 800613c:	f7fe fce3 	bl	8004b06 <_ZN3PWM5fInitEi>
	PWM_Object4.fInit(65535);
 8006140:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006144:	4811      	ldr	r0, [pc, #68]	; (800618c <cppwrapper+0xec>)
 8006146:	f7fe fcde 	bl	8004b06 <_ZN3PWM5fInitEi>

	PWM_Object1.f2Duty(0);//50%duty
 800614a:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8006190 <cppwrapper+0xf0>
 800614e:	480c      	ldr	r0, [pc, #48]	; (8006180 <cppwrapper+0xe0>)
 8006150:	f7fe fd50 	bl	8004bf4 <_ZN3PWM6f2DutyEf>
	PWM_Object2.f2Duty(0);
 8006154:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8006190 <cppwrapper+0xf0>
 8006158:	480a      	ldr	r0, [pc, #40]	; (8006184 <cppwrapper+0xe4>)
 800615a:	f7fe fd4b 	bl	8004bf4 <_ZN3PWM6f2DutyEf>
	PWM_Object3.f2Duty(0);
 800615e:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8006190 <cppwrapper+0xf0>
 8006162:	4809      	ldr	r0, [pc, #36]	; (8006188 <cppwrapper+0xe8>)
 8006164:	f7fe fd46 	bl	8004bf4 <_ZN3PWM6f2DutyEf>
	PWM_Object4.f2Duty(0);
 8006168:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8006190 <cppwrapper+0xf0>
 800616c:	4807      	ldr	r0, [pc, #28]	; (800618c <cppwrapper+0xec>)
 800616e:	f7fe fd41 	bl	8004bf4 <_ZN3PWM6f2DutyEf>

	ADC_Init();
 8006172:	f000 f8db 	bl	800632c <_Z8ADC_Initv>

	while(1){
 8006176:	e7fe      	b.n	8006176 <cppwrapper+0xd6>
 8006178:	20000204 	.word	0x20000204
 800617c:	40010000 	.word	0x40010000
 8006180:	20000268 	.word	0x20000268
 8006184:	20000278 	.word	0x20000278
 8006188:	20000288 	.word	0x20000288
 800618c:	20000298 	.word	0x20000298
 8006190:	00000000 	.word	0x00000000

08006194 <_Z12MotorPWMTaskiff>:
//			HAL_Delay(10);
//		}
	}
}

void MotorPWMTask(int pArg, float pVd, float pVq){//パラメータの物理量は将来的に変える
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	ed87 0a02 	vstr	s0, [r7, #8]
 80061a0:	edc7 0a01 	vstr	s1, [r7, #4]
	//int mathlib_size = Motor.getMathLib().getLibSize();
	Motor.setArg(pArg);
 80061a4:	68f9      	ldr	r1, [r7, #12]
 80061a6:	481a      	ldr	r0, [pc, #104]	; (8006210 <_Z12MotorPWMTaskiff+0x7c>)
 80061a8:	f7fe f8a5 	bl	80042f6 <_ZN9MotorInfo6setArgEi>
	Motor.setVd(pVd);
 80061ac:	ed97 0a02 	vldr	s0, [r7, #8]
 80061b0:	4817      	ldr	r0, [pc, #92]	; (8006210 <_Z12MotorPWMTaskiff+0x7c>)
 80061b2:	f7fe f8ae 	bl	8004312 <_ZN9MotorInfo5setVdEf>
	Motor.setVq(pVq);
 80061b6:	ed97 0a01 	vldr	s0, [r7, #4]
 80061ba:	4815      	ldr	r0, [pc, #84]	; (8006210 <_Z12MotorPWMTaskiff+0x7c>)
 80061bc:	f7fe f8b8 	bl	8004330 <_ZN9MotorInfo5setVqEf>
	Motor.invClarkTransform();
 80061c0:	4813      	ldr	r0, [pc, #76]	; (8006210 <_Z12MotorPWMTaskiff+0x7c>)
 80061c2:	f7fe f8c4 	bl	800434e <_ZN9MotorInfo17invClarkTransformEv>
	Motor.invParkTransform();
 80061c6:	4812      	ldr	r0, [pc, #72]	; (8006210 <_Z12MotorPWMTaskiff+0x7c>)
 80061c8:	f7fe f954 	bl	8004474 <_ZN9MotorInfo16invParkTransformEv>

	PWM_Object1.f2Duty(Motor.getVu());
 80061cc:	4810      	ldr	r0, [pc, #64]	; (8006210 <_Z12MotorPWMTaskiff+0x7c>)
 80061ce:	f7fe f999 	bl	8004504 <_ZN9MotorInfo5getVuEv>
 80061d2:	eef0 7a40 	vmov.f32	s15, s0
 80061d6:	eeb0 0a67 	vmov.f32	s0, s15
 80061da:	480e      	ldr	r0, [pc, #56]	; (8006214 <_Z12MotorPWMTaskiff+0x80>)
 80061dc:	f7fe fd0a 	bl	8004bf4 <_ZN3PWM6f2DutyEf>
	PWM_Object2.f2Duty(Motor.getVv());
 80061e0:	480b      	ldr	r0, [pc, #44]	; (8006210 <_Z12MotorPWMTaskiff+0x7c>)
 80061e2:	f7fe f99e 	bl	8004522 <_ZN9MotorInfo5getVvEv>
 80061e6:	eef0 7a40 	vmov.f32	s15, s0
 80061ea:	eeb0 0a67 	vmov.f32	s0, s15
 80061ee:	480a      	ldr	r0, [pc, #40]	; (8006218 <_Z12MotorPWMTaskiff+0x84>)
 80061f0:	f7fe fd00 	bl	8004bf4 <_ZN3PWM6f2DutyEf>
	PWM_Object3.f2Duty(Motor.getVw());
 80061f4:	4806      	ldr	r0, [pc, #24]	; (8006210 <_Z12MotorPWMTaskiff+0x7c>)
 80061f6:	f7fe f9a3 	bl	8004540 <_ZN9MotorInfo5getVwEv>
 80061fa:	eef0 7a40 	vmov.f32	s15, s0
 80061fe:	eeb0 0a67 	vmov.f32	s0, s15
 8006202:	4806      	ldr	r0, [pc, #24]	; (800621c <_Z12MotorPWMTaskiff+0x88>)
 8006204:	f7fe fcf6 	bl	8004bf4 <_ZN3PWM6f2DutyEf>
}
 8006208:	bf00      	nop
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	20000204 	.word	0x20000204
 8006214:	20000268 	.word	0x20000268
 8006218:	20000278 	.word	0x20000278
 800621c:	20000288 	.word	0x20000288

08006220 <HighFreqTask>:



int argnum = 0;
void HighFreqTask(void){
 8006220:	b590      	push	{r4, r7, lr}
 8006222:	b093      	sub	sp, #76	; 0x4c
 8006224:	af00      	add	r7, sp, #0

	if (LL_ADC_IsActiveFlag_JEOS(ADC1) == 1)
 8006226:	483a      	ldr	r0, [pc, #232]	; (8006310 <HighFreqTask+0xf0>)
 8006228:	f7ff fef7 	bl	800601a <LL_ADC_IsActiveFlag_JEOS>
 800622c:	4603      	mov	r3, r0
 800622e:	2b01      	cmp	r3, #1
 8006230:	bf0c      	ite	eq
 8006232:	2301      	moveq	r3, #1
 8006234:	2300      	movne	r3, #0
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b00      	cmp	r3, #0
 800623a:	d061      	beq.n	8006300 <HighFreqTask+0xe0>
		{
			LL_ADC_ClearFlag_JEOS(ADC1);
 800623c:	4834      	ldr	r0, [pc, #208]	; (8006310 <HighFreqTask+0xf0>)
 800623e:	f7ff feff 	bl	8006040 <LL_ADC_ClearFlag_JEOS>
			adc_data1 = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_1);
 8006242:	2101      	movs	r1, #1
 8006244:	4832      	ldr	r0, [pc, #200]	; (8006310 <HighFreqTask+0xf0>)
 8006246:	f7ff fec7 	bl	8005fd8 <LL_ADC_INJ_ReadConversionData12>
 800624a:	4603      	mov	r3, r0
 800624c:	461a      	mov	r2, r3
 800624e:	4b31      	ldr	r3, [pc, #196]	; (8006314 <HighFreqTask+0xf4>)
 8006250:	801a      	strh	r2, [r3, #0]
			adc_data2 = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_2);
 8006252:	f241 1102 	movw	r1, #4354	; 0x1102
 8006256:	482e      	ldr	r0, [pc, #184]	; (8006310 <HighFreqTask+0xf0>)
 8006258:	f7ff febe 	bl	8005fd8 <LL_ADC_INJ_ReadConversionData12>
 800625c:	4603      	mov	r3, r0
 800625e:	461a      	mov	r2, r3
 8006260:	4b2d      	ldr	r3, [pc, #180]	; (8006318 <HighFreqTask+0xf8>)
 8006262:	801a      	strh	r2, [r3, #0]
			adc_data3 = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_3);
 8006264:	f242 2103 	movw	r1, #8707	; 0x2203
 8006268:	4829      	ldr	r0, [pc, #164]	; (8006310 <HighFreqTask+0xf0>)
 800626a:	f7ff feb5 	bl	8005fd8 <LL_ADC_INJ_ReadConversionData12>
 800626e:	4603      	mov	r3, r0
 8006270:	461a      	mov	r2, r3
 8006272:	4b2a      	ldr	r3, [pc, #168]	; (800631c <HighFreqTask+0xfc>)
 8006274:	801a      	strh	r2, [r3, #0]


			//位置センサを叩くTask
			sensor.increment((float)2*M_PI / Motor.getMathLib().getLibSize());
 8006276:	463b      	mov	r3, r7
 8006278:	4929      	ldr	r1, [pc, #164]	; (8006320 <HighFreqTask+0x100>)
 800627a:	4618      	mov	r0, r3
 800627c:	f7fe f82c 	bl	80042d8 <_ZN9MotorInfo10getMathLibEv>
 8006280:	463b      	mov	r3, r7
 8006282:	4618      	mov	r0, r3
 8006284:	f7fd f8cc 	bl	8003420 <_ZN7MathLib10getLibSizeEv>
 8006288:	4603      	mov	r3, r0
 800628a:	4618      	mov	r0, r3
 800628c:	f7fa f916 	bl	80004bc <__aeabi_i2d>
 8006290:	4603      	mov	r3, r0
 8006292:	460c      	mov	r4, r1
 8006294:	461a      	mov	r2, r3
 8006296:	4623      	mov	r3, r4
 8006298:	a11b      	add	r1, pc, #108	; (adr r1, 8006308 <HighFreqTask+0xe8>)
 800629a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800629e:	f7fa faa1 	bl	80007e4 <__aeabi_ddiv>
 80062a2:	4603      	mov	r3, r0
 80062a4:	460c      	mov	r4, r1
 80062a6:	4618      	mov	r0, r3
 80062a8:	4621      	mov	r1, r4
 80062aa:	f7fa fc49 	bl	8000b40 <__aeabi_d2f>
 80062ae:	4603      	mov	r3, r0
 80062b0:	ee00 3a10 	vmov	s0, r3
 80062b4:	481b      	ldr	r0, [pc, #108]	; (8006324 <HighFreqTask+0x104>)
 80062b6:	f7fc ffe7 	bl	8003288 <_ZN9ArgSensor9incrementEf>
 80062ba:	463b      	mov	r3, r7
 80062bc:	4618      	mov	r0, r3
 80062be:	f7fd f831 	bl	8003324 <_ZN7MathLibD1Ev>
			//float arg = sensor.getArg();

			MotorPWMTask(Motor.getMathLib().radToSizeCount(sensor.getArg()), 0, 0.5f);//暫定で作った関数
 80062c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062c6:	4916      	ldr	r1, [pc, #88]	; (8006320 <HighFreqTask+0x100>)
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7fe f805 	bl	80042d8 <_ZN9MotorInfo10getMathLibEv>
 80062ce:	4815      	ldr	r0, [pc, #84]	; (8006324 <HighFreqTask+0x104>)
 80062d0:	f7fc fff0 	bl	80032b4 <_ZN9ArgSensor6getArgEv>
 80062d4:	eef0 7a40 	vmov.f32	s15, s0
 80062d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062dc:	eeb0 0a67 	vmov.f32	s0, s15
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fd f967 	bl	80035b4 <_ZN7MathLib14radToSizeCountEf>
 80062e6:	4603      	mov	r3, r0
 80062e8:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80062ec:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8006328 <HighFreqTask+0x108>
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7ff ff4f 	bl	8006194 <_Z12MotorPWMTaskiff>
 80062f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fd f812 	bl	8003324 <_ZN7MathLibD1Ev>
		{
			LL_ADC_WriteReg(ADC1,ISR,0);
		}*/


}
 8006300:	bf00      	nop
 8006302:	374c      	adds	r7, #76	; 0x4c
 8006304:	46bd      	mov	sp, r7
 8006306:	bd90      	pop	{r4, r7, pc}
 8006308:	54442d18 	.word	0x54442d18
 800630c:	401921fb 	.word	0x401921fb
 8006310:	40012000 	.word	0x40012000
 8006314:	200001fc 	.word	0x200001fc
 8006318:	200001fe 	.word	0x200001fe
 800631c:	20000200 	.word	0x20000200
 8006320:	20000204 	.word	0x20000204
 8006324:	200002a8 	.word	0x200002a8
 8006328:	00000000 	.word	0x00000000

0800632c <_Z8ADC_Initv>:


void ADC_Init()
{
 800632c:	b580      	push	{r7, lr}
 800632e:	af00      	add	r7, sp, #0
    LL_ADC_Enable( ADC1 );
 8006330:	4805      	ldr	r0, [pc, #20]	; (8006348 <_Z8ADC_Initv+0x1c>)
 8006332:	f7ff fe41 	bl	8005fb8 <LL_ADC_Enable>
    //LL_ADC_Enable( ADC2 );

    /* ADC1 Injected conversions end interrupt enabling */
    LL_ADC_ClearFlag_JEOS( ADC1 );
 8006336:	4804      	ldr	r0, [pc, #16]	; (8006348 <_Z8ADC_Initv+0x1c>)
 8006338:	f7ff fe82 	bl	8006040 <LL_ADC_ClearFlag_JEOS>
    LL_ADC_EnableIT_JEOS( ADC1 );
 800633c:	4802      	ldr	r0, [pc, #8]	; (8006348 <_Z8ADC_Initv+0x1c>)
 800633e:	f7ff fe8d 	bl	800605c <LL_ADC_EnableIT_JEOS>
}
 8006342:	bf00      	nop
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	40012000 	.word	0x40012000

0800634c <_Z41__static_initialization_and_destruction_0ii>:
	//Str.push_back(buf2);
	UART uartob;
	uartob.setString(Str);
	uartob.Transmit();
	//HAL_UART_Transmit(huart, pData, Size, Timeout);
}
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d116      	bne.n	800638a <_Z41__static_initialization_and_destruction_0ii+0x3e>
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006362:	4293      	cmp	r3, r2
 8006364:	d111      	bne.n	800638a <_Z41__static_initialization_and_destruction_0ii+0x3e>
MotorInfo Motor;
 8006366:	4812      	ldr	r0, [pc, #72]	; (80063b0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8006368:	f7fd ff24 	bl	80041b4 <_ZN9MotorInfoC1Ev>
PWM PWM_Object1;
 800636c:	4811      	ldr	r0, [pc, #68]	; (80063b4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800636e:	f7ff fe85 	bl	800607c <_ZN3PWMC1Ev>
PWM PWM_Object2;
 8006372:	4811      	ldr	r0, [pc, #68]	; (80063b8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8006374:	f7ff fe82 	bl	800607c <_ZN3PWMC1Ev>
PWM PWM_Object3;
 8006378:	4810      	ldr	r0, [pc, #64]	; (80063bc <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800637a:	f7ff fe7f 	bl	800607c <_ZN3PWMC1Ev>
PWM PWM_Object4;
 800637e:	4810      	ldr	r0, [pc, #64]	; (80063c0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8006380:	f7ff fe7c 	bl	800607c <_ZN3PWMC1Ev>
ArgSensor sensor;
 8006384:	480f      	ldr	r0, [pc, #60]	; (80063c4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8006386:	f7fc ff4b 	bl	8003220 <_ZN9ArgSensorC1Ev>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10a      	bne.n	80063a6 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006396:	4293      	cmp	r3, r2
 8006398:	d105      	bne.n	80063a6 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 800639a:	480a      	ldr	r0, [pc, #40]	; (80063c4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800639c:	f7fc ff54 	bl	8003248 <_ZN9ArgSensorD1Ev>
MotorInfo Motor;
 80063a0:	4803      	ldr	r0, [pc, #12]	; (80063b0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80063a2:	f7fd ff1b 	bl	80041dc <_ZN9MotorInfoD1Ev>
}
 80063a6:	bf00      	nop
 80063a8:	3708      	adds	r7, #8
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	20000204 	.word	0x20000204
 80063b4:	20000268 	.word	0x20000268
 80063b8:	20000278 	.word	0x20000278
 80063bc:	20000288 	.word	0x20000288
 80063c0:	20000298 	.word	0x20000298
 80063c4:	200002a8 	.word	0x200002a8

080063c8 <_GLOBAL__sub_I_adc_data1>:
 80063c8:	b580      	push	{r7, lr}
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80063d0:	2001      	movs	r0, #1
 80063d2:	f7ff ffbb 	bl	800634c <_Z41__static_initialization_and_destruction_0ii>
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <_GLOBAL__sub_D_adc_data1>:
 80063d8:	b580      	push	{r7, lr}
 80063da:	af00      	add	r7, sp, #0
 80063dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80063e0:	2000      	movs	r0, #0
 80063e2:	f7ff ffb3 	bl	800634c <_Z41__static_initialization_and_destruction_0ii>
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80063e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006420 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80063ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80063ee:	e003      	b.n	80063f8 <LoopCopyDataInit>

080063f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80063f0:	4b0c      	ldr	r3, [pc, #48]	; (8006424 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80063f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80063f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80063f6:	3104      	adds	r1, #4

080063f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80063f8:	480b      	ldr	r0, [pc, #44]	; (8006428 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80063fa:	4b0c      	ldr	r3, [pc, #48]	; (800642c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80063fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80063fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006400:	d3f6      	bcc.n	80063f0 <CopyDataInit>
  ldr  r2, =_sbss
 8006402:	4a0b      	ldr	r2, [pc, #44]	; (8006430 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006404:	e002      	b.n	800640c <LoopFillZerobss>

08006406 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006406:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006408:	f842 3b04 	str.w	r3, [r2], #4

0800640c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800640c:	4b09      	ldr	r3, [pc, #36]	; (8006434 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800640e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006410:	d3f9      	bcc.n	8006406 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006412:	f7ff fa53 	bl	80058bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006416:	f001 f941 	bl	800769c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800641a:	f7ff f909 	bl	8005630 <main>
  bx  lr    
 800641e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006420:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 8006424:	08009810 	.word	0x08009810
  ldr  r0, =_sdata
 8006428:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800642c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8006430:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8006434:	20000304 	.word	0x20000304

08006438 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006438:	e7fe      	b.n	8006438 <CAN1_RX0_IRQHandler>

0800643a <_ZdlPv>:
 800643a:	f001 b95b 	b.w	80076f4 <free>

0800643e <_ZdlPvj>:
 800643e:	f7ff bffc 	b.w	800643a <_ZdlPv>

08006442 <_Znwj>:
 8006442:	b510      	push	{r4, lr}
 8006444:	2800      	cmp	r0, #0
 8006446:	bf14      	ite	ne
 8006448:	4604      	movne	r4, r0
 800644a:	2401      	moveq	r4, #1
 800644c:	4620      	mov	r0, r4
 800644e:	f001 f949 	bl	80076e4 <malloc>
 8006452:	b930      	cbnz	r0, 8006462 <_Znwj+0x20>
 8006454:	f000 f8b8 	bl	80065c8 <_ZSt15get_new_handlerv>
 8006458:	b908      	cbnz	r0, 800645e <_Znwj+0x1c>
 800645a:	f001 f912 	bl	8007682 <abort>
 800645e:	4780      	blx	r0
 8006460:	e7f4      	b.n	800644c <_Znwj+0xa>
 8006462:	bd10      	pop	{r4, pc}

08006464 <_ZSt17__throw_bad_allocv>:
 8006464:	b508      	push	{r3, lr}
 8006466:	f001 f90c 	bl	8007682 <abort>

0800646a <_ZSt19__throw_logic_errorPKc>:
 800646a:	b508      	push	{r3, lr}
 800646c:	f001 f909 	bl	8007682 <abort>

08006470 <_ZSt20__throw_length_errorPKc>:
 8006470:	b508      	push	{r3, lr}
 8006472:	f001 f906 	bl	8007682 <abort>

08006476 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8006476:	b40f      	push	{r0, r1, r2, r3}
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	f107 0410 	add.w	r4, r7, #16
 8006482:	f854 5b04 	ldr.w	r5, [r4], #4
 8006486:	4628      	mov	r0, r5
 8006488:	f7f9 febe 	bl	8000208 <strlen>
 800648c:	f200 230e 	addw	r3, r0, #526	; 0x20e
 8006490:	f023 0307 	bic.w	r3, r3, #7
 8006494:	ebad 0d03 	sub.w	sp, sp, r3
 8006498:	f500 7100 	add.w	r1, r0, #512	; 0x200
 800649c:	4623      	mov	r3, r4
 800649e:	462a      	mov	r2, r5
 80064a0:	4668      	mov	r0, sp
 80064a2:	607c      	str	r4, [r7, #4]
 80064a4:	f000 f850 	bl	8006548 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 80064a8:	f001 f8eb 	bl	8007682 <abort>

080064ac <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b09c      	sub	sp, #112	; 0x70
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	1a0e      	subs	r6, r1, r0
 80064b4:	4680      	mov	r8, r0
 80064b6:	2269      	movs	r2, #105	; 0x69
 80064b8:	490e      	ldr	r1, [pc, #56]	; (80064f4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 80064ba:	1d38      	adds	r0, r7, #4
 80064bc:	f001 f922 	bl	8007704 <memcpy>
 80064c0:	f106 0377 	add.w	r3, r6, #119	; 0x77
 80064c4:	f023 0307 	bic.w	r3, r3, #7
 80064c8:	ebad 0d03 	sub.w	sp, sp, r3
 80064cc:	466c      	mov	r4, sp
 80064ce:	2268      	movs	r2, #104	; 0x68
 80064d0:	1d39      	adds	r1, r7, #4
 80064d2:	1c75      	adds	r5, r6, #1
 80064d4:	4620      	mov	r0, r4
 80064d6:	f001 f915 	bl	8007704 <memcpy>
 80064da:	4425      	add	r5, r4
 80064dc:	4632      	mov	r2, r6
 80064de:	4641      	mov	r1, r8
 80064e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80064e4:	f001 f90e 	bl	8007704 <memcpy>
 80064e8:	2300      	movs	r3, #0
 80064ea:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 80064ee:	4620      	mov	r0, r4
 80064f0:	f7ff ffbb 	bl	800646a <_ZSt19__throw_logic_errorPKc>
 80064f4:	0800938a 	.word	0x0800938a

080064f8 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 80064f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	b086      	sub	sp, #24
 80064fe:	466d      	mov	r5, sp
 8006500:	f105 040c 	add.w	r4, r5, #12
 8006504:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8006544 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8006508:	4623      	mov	r3, r4
 800650a:	f04f 0c0a 	mov.w	ip, #10
 800650e:	fbb2 f6fc 	udiv	r6, r2, ip
 8006512:	fb0c 2216 	mls	r2, ip, r6, r2
 8006516:	f81e 2002 	ldrb.w	r2, [lr, r2]
 800651a:	f803 2d01 	strb.w	r2, [r3, #-1]!
 800651e:	4632      	mov	r2, r6
 8006520:	2e00      	cmp	r6, #0
 8006522:	d1f4      	bne.n	800650e <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 8006524:	1ae4      	subs	r4, r4, r3
 8006526:	428c      	cmp	r4, r1
 8006528:	d808      	bhi.n	800653c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 800652a:	f1c4 010c 	rsb	r1, r4, #12
 800652e:	4622      	mov	r2, r4
 8006530:	4429      	add	r1, r5
 8006532:	f001 f8e7 	bl	8007704 <memcpy>
 8006536:	4620      	mov	r0, r4
 8006538:	46bd      	mov	sp, r7
 800653a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800653c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006540:	e7f9      	b.n	8006536 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 8006542:	bf00      	nop
 8006544:	0800937f 	.word	0x0800937f

08006548 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8006548:	3901      	subs	r1, #1
 800654a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800654e:	4606      	mov	r6, r0
 8006550:	4615      	mov	r5, r2
 8006552:	1847      	adds	r7, r0, r1
 8006554:	4604      	mov	r4, r0
 8006556:	782a      	ldrb	r2, [r5, #0]
 8006558:	b392      	cbz	r2, 80065c0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x78>
 800655a:	42bc      	cmp	r4, r7
 800655c:	d22c      	bcs.n	80065b8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 800655e:	2a25      	cmp	r2, #37	; 0x25
 8006560:	d107      	bne.n	8006572 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8006562:	786a      	ldrb	r2, [r5, #1]
 8006564:	2a73      	cmp	r2, #115	; 0x73
 8006566:	d009      	beq.n	800657c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x34>
 8006568:	2a7a      	cmp	r2, #122	; 0x7a
 800656a:	d012      	beq.n	8006592 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4a>
 800656c:	2a25      	cmp	r2, #37	; 0x25
 800656e:	d100      	bne.n	8006572 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8006570:	3501      	adds	r5, #1
 8006572:	782a      	ldrb	r2, [r5, #0]
 8006574:	7022      	strb	r2, [r4, #0]
 8006576:	3501      	adds	r5, #1
 8006578:	3401      	adds	r4, #1
 800657a:	e7ec      	b.n	8006556 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 800657c:	1d19      	adds	r1, r3, #4
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	3b01      	subs	r3, #1
 8006582:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8006586:	b1a2      	cbz	r2, 80065b2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6a>
 8006588:	42bc      	cmp	r4, r7
 800658a:	d015      	beq.n	80065b8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 800658c:	f804 2b01 	strb.w	r2, [r4], #1
 8006590:	e7f7      	b.n	8006582 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3a>
 8006592:	78aa      	ldrb	r2, [r5, #2]
 8006594:	2a75      	cmp	r2, #117	; 0x75
 8006596:	d1ec      	bne.n	8006572 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	1b39      	subs	r1, r7, r4
 800659c:	4620      	mov	r0, r4
 800659e:	f103 0804 	add.w	r8, r3, #4
 80065a2:	f7ff ffa9 	bl	80064f8 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 80065a6:	2800      	cmp	r0, #0
 80065a8:	dd06      	ble.n	80065b8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 80065aa:	4404      	add	r4, r0
 80065ac:	3503      	adds	r5, #3
 80065ae:	4643      	mov	r3, r8
 80065b0:	e7d1      	b.n	8006556 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80065b2:	3502      	adds	r5, #2
 80065b4:	460b      	mov	r3, r1
 80065b6:	e7ce      	b.n	8006556 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80065b8:	4621      	mov	r1, r4
 80065ba:	4630      	mov	r0, r6
 80065bc:	f7ff ff76 	bl	80064ac <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 80065c0:	7022      	strb	r2, [r4, #0]
 80065c2:	1ba0      	subs	r0, r4, r6
 80065c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080065c8 <_ZSt15get_new_handlerv>:
 80065c8:	4b02      	ldr	r3, [pc, #8]	; (80065d4 <_ZSt15get_new_handlerv+0xc>)
 80065ca:	6818      	ldr	r0, [r3, #0]
 80065cc:	f3bf 8f5b 	dmb	ish
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	200002b0 	.word	0x200002b0

080065d8 <cos>:
 80065d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80065da:	ec51 0b10 	vmov	r0, r1, d0
 80065de:	4a1e      	ldr	r2, [pc, #120]	; (8006658 <cos+0x80>)
 80065e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80065e4:	4293      	cmp	r3, r2
 80065e6:	dc06      	bgt.n	80065f6 <cos+0x1e>
 80065e8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8006650 <cos+0x78>
 80065ec:	f000 fa74 	bl	8006ad8 <__kernel_cos>
 80065f0:	ec51 0b10 	vmov	r0, r1, d0
 80065f4:	e007      	b.n	8006606 <cos+0x2e>
 80065f6:	4a19      	ldr	r2, [pc, #100]	; (800665c <cos+0x84>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	dd09      	ble.n	8006610 <cos+0x38>
 80065fc:	ee10 2a10 	vmov	r2, s0
 8006600:	460b      	mov	r3, r1
 8006602:	f7f9 fe0d 	bl	8000220 <__aeabi_dsub>
 8006606:	ec41 0b10 	vmov	d0, r0, r1
 800660a:	b005      	add	sp, #20
 800660c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006610:	4668      	mov	r0, sp
 8006612:	f000 f86d 	bl	80066f0 <__ieee754_rem_pio2>
 8006616:	f000 0003 	and.w	r0, r0, #3
 800661a:	2801      	cmp	r0, #1
 800661c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006620:	ed9d 0b00 	vldr	d0, [sp]
 8006624:	d007      	beq.n	8006636 <cos+0x5e>
 8006626:	2802      	cmp	r0, #2
 8006628:	d00e      	beq.n	8006648 <cos+0x70>
 800662a:	2800      	cmp	r0, #0
 800662c:	d0de      	beq.n	80065ec <cos+0x14>
 800662e:	2001      	movs	r0, #1
 8006630:	f000 fe5a 	bl	80072e8 <__kernel_sin>
 8006634:	e7dc      	b.n	80065f0 <cos+0x18>
 8006636:	f000 fe57 	bl	80072e8 <__kernel_sin>
 800663a:	ec53 2b10 	vmov	r2, r3, d0
 800663e:	ee10 0a10 	vmov	r0, s0
 8006642:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006646:	e7de      	b.n	8006606 <cos+0x2e>
 8006648:	f000 fa46 	bl	8006ad8 <__kernel_cos>
 800664c:	e7f5      	b.n	800663a <cos+0x62>
 800664e:	bf00      	nop
	...
 8006658:	3fe921fb 	.word	0x3fe921fb
 800665c:	7fefffff 	.word	0x7fefffff

08006660 <sin>:
 8006660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006662:	ec51 0b10 	vmov	r0, r1, d0
 8006666:	4a20      	ldr	r2, [pc, #128]	; (80066e8 <sin+0x88>)
 8006668:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800666c:	4293      	cmp	r3, r2
 800666e:	dc07      	bgt.n	8006680 <sin+0x20>
 8006670:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80066e0 <sin+0x80>
 8006674:	2000      	movs	r0, #0
 8006676:	f000 fe37 	bl	80072e8 <__kernel_sin>
 800667a:	ec51 0b10 	vmov	r0, r1, d0
 800667e:	e007      	b.n	8006690 <sin+0x30>
 8006680:	4a1a      	ldr	r2, [pc, #104]	; (80066ec <sin+0x8c>)
 8006682:	4293      	cmp	r3, r2
 8006684:	dd09      	ble.n	800669a <sin+0x3a>
 8006686:	ee10 2a10 	vmov	r2, s0
 800668a:	460b      	mov	r3, r1
 800668c:	f7f9 fdc8 	bl	8000220 <__aeabi_dsub>
 8006690:	ec41 0b10 	vmov	d0, r0, r1
 8006694:	b005      	add	sp, #20
 8006696:	f85d fb04 	ldr.w	pc, [sp], #4
 800669a:	4668      	mov	r0, sp
 800669c:	f000 f828 	bl	80066f0 <__ieee754_rem_pio2>
 80066a0:	f000 0003 	and.w	r0, r0, #3
 80066a4:	2801      	cmp	r0, #1
 80066a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80066aa:	ed9d 0b00 	vldr	d0, [sp]
 80066ae:	d004      	beq.n	80066ba <sin+0x5a>
 80066b0:	2802      	cmp	r0, #2
 80066b2:	d005      	beq.n	80066c0 <sin+0x60>
 80066b4:	b970      	cbnz	r0, 80066d4 <sin+0x74>
 80066b6:	2001      	movs	r0, #1
 80066b8:	e7dd      	b.n	8006676 <sin+0x16>
 80066ba:	f000 fa0d 	bl	8006ad8 <__kernel_cos>
 80066be:	e7dc      	b.n	800667a <sin+0x1a>
 80066c0:	2001      	movs	r0, #1
 80066c2:	f000 fe11 	bl	80072e8 <__kernel_sin>
 80066c6:	ec53 2b10 	vmov	r2, r3, d0
 80066ca:	ee10 0a10 	vmov	r0, s0
 80066ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80066d2:	e7dd      	b.n	8006690 <sin+0x30>
 80066d4:	f000 fa00 	bl	8006ad8 <__kernel_cos>
 80066d8:	e7f5      	b.n	80066c6 <sin+0x66>
 80066da:	bf00      	nop
 80066dc:	f3af 8000 	nop.w
	...
 80066e8:	3fe921fb 	.word	0x3fe921fb
 80066ec:	7fefffff 	.word	0x7fefffff

080066f0 <__ieee754_rem_pio2>:
 80066f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f4:	ec57 6b10 	vmov	r6, r7, d0
 80066f8:	4bc3      	ldr	r3, [pc, #780]	; (8006a08 <__ieee754_rem_pio2+0x318>)
 80066fa:	b08d      	sub	sp, #52	; 0x34
 80066fc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006700:	4598      	cmp	r8, r3
 8006702:	4604      	mov	r4, r0
 8006704:	9704      	str	r7, [sp, #16]
 8006706:	dc07      	bgt.n	8006718 <__ieee754_rem_pio2+0x28>
 8006708:	2200      	movs	r2, #0
 800670a:	2300      	movs	r3, #0
 800670c:	ed84 0b00 	vstr	d0, [r4]
 8006710:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006714:	2500      	movs	r5, #0
 8006716:	e027      	b.n	8006768 <__ieee754_rem_pio2+0x78>
 8006718:	4bbc      	ldr	r3, [pc, #752]	; (8006a0c <__ieee754_rem_pio2+0x31c>)
 800671a:	4598      	cmp	r8, r3
 800671c:	dc75      	bgt.n	800680a <__ieee754_rem_pio2+0x11a>
 800671e:	9b04      	ldr	r3, [sp, #16]
 8006720:	4dbb      	ldr	r5, [pc, #748]	; (8006a10 <__ieee754_rem_pio2+0x320>)
 8006722:	2b00      	cmp	r3, #0
 8006724:	ee10 0a10 	vmov	r0, s0
 8006728:	a3a9      	add	r3, pc, #676	; (adr r3, 80069d0 <__ieee754_rem_pio2+0x2e0>)
 800672a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672e:	4639      	mov	r1, r7
 8006730:	dd36      	ble.n	80067a0 <__ieee754_rem_pio2+0xb0>
 8006732:	f7f9 fd75 	bl	8000220 <__aeabi_dsub>
 8006736:	45a8      	cmp	r8, r5
 8006738:	4606      	mov	r6, r0
 800673a:	460f      	mov	r7, r1
 800673c:	d018      	beq.n	8006770 <__ieee754_rem_pio2+0x80>
 800673e:	a3a6      	add	r3, pc, #664	; (adr r3, 80069d8 <__ieee754_rem_pio2+0x2e8>)
 8006740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006744:	f7f9 fd6c 	bl	8000220 <__aeabi_dsub>
 8006748:	4602      	mov	r2, r0
 800674a:	460b      	mov	r3, r1
 800674c:	e9c4 2300 	strd	r2, r3, [r4]
 8006750:	4630      	mov	r0, r6
 8006752:	4639      	mov	r1, r7
 8006754:	f7f9 fd64 	bl	8000220 <__aeabi_dsub>
 8006758:	a39f      	add	r3, pc, #636	; (adr r3, 80069d8 <__ieee754_rem_pio2+0x2e8>)
 800675a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675e:	f7f9 fd5f 	bl	8000220 <__aeabi_dsub>
 8006762:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006766:	2501      	movs	r5, #1
 8006768:	4628      	mov	r0, r5
 800676a:	b00d      	add	sp, #52	; 0x34
 800676c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006770:	a39b      	add	r3, pc, #620	; (adr r3, 80069e0 <__ieee754_rem_pio2+0x2f0>)
 8006772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006776:	f7f9 fd53 	bl	8000220 <__aeabi_dsub>
 800677a:	a39b      	add	r3, pc, #620	; (adr r3, 80069e8 <__ieee754_rem_pio2+0x2f8>)
 800677c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006780:	4606      	mov	r6, r0
 8006782:	460f      	mov	r7, r1
 8006784:	f7f9 fd4c 	bl	8000220 <__aeabi_dsub>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	e9c4 2300 	strd	r2, r3, [r4]
 8006790:	4630      	mov	r0, r6
 8006792:	4639      	mov	r1, r7
 8006794:	f7f9 fd44 	bl	8000220 <__aeabi_dsub>
 8006798:	a393      	add	r3, pc, #588	; (adr r3, 80069e8 <__ieee754_rem_pio2+0x2f8>)
 800679a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679e:	e7de      	b.n	800675e <__ieee754_rem_pio2+0x6e>
 80067a0:	f7f9 fd40 	bl	8000224 <__adddf3>
 80067a4:	45a8      	cmp	r8, r5
 80067a6:	4606      	mov	r6, r0
 80067a8:	460f      	mov	r7, r1
 80067aa:	d016      	beq.n	80067da <__ieee754_rem_pio2+0xea>
 80067ac:	a38a      	add	r3, pc, #552	; (adr r3, 80069d8 <__ieee754_rem_pio2+0x2e8>)
 80067ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b2:	f7f9 fd37 	bl	8000224 <__adddf3>
 80067b6:	4602      	mov	r2, r0
 80067b8:	460b      	mov	r3, r1
 80067ba:	e9c4 2300 	strd	r2, r3, [r4]
 80067be:	4630      	mov	r0, r6
 80067c0:	4639      	mov	r1, r7
 80067c2:	f7f9 fd2d 	bl	8000220 <__aeabi_dsub>
 80067c6:	a384      	add	r3, pc, #528	; (adr r3, 80069d8 <__ieee754_rem_pio2+0x2e8>)
 80067c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067cc:	f7f9 fd2a 	bl	8000224 <__adddf3>
 80067d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80067d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80067d8:	e7c6      	b.n	8006768 <__ieee754_rem_pio2+0x78>
 80067da:	a381      	add	r3, pc, #516	; (adr r3, 80069e0 <__ieee754_rem_pio2+0x2f0>)
 80067dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e0:	f7f9 fd20 	bl	8000224 <__adddf3>
 80067e4:	a380      	add	r3, pc, #512	; (adr r3, 80069e8 <__ieee754_rem_pio2+0x2f8>)
 80067e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ea:	4606      	mov	r6, r0
 80067ec:	460f      	mov	r7, r1
 80067ee:	f7f9 fd19 	bl	8000224 <__adddf3>
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	e9c4 2300 	strd	r2, r3, [r4]
 80067fa:	4630      	mov	r0, r6
 80067fc:	4639      	mov	r1, r7
 80067fe:	f7f9 fd0f 	bl	8000220 <__aeabi_dsub>
 8006802:	a379      	add	r3, pc, #484	; (adr r3, 80069e8 <__ieee754_rem_pio2+0x2f8>)
 8006804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006808:	e7e0      	b.n	80067cc <__ieee754_rem_pio2+0xdc>
 800680a:	4b82      	ldr	r3, [pc, #520]	; (8006a14 <__ieee754_rem_pio2+0x324>)
 800680c:	4598      	cmp	r8, r3
 800680e:	f300 80d0 	bgt.w	80069b2 <__ieee754_rem_pio2+0x2c2>
 8006812:	f000 fe23 	bl	800745c <fabs>
 8006816:	ec57 6b10 	vmov	r6, r7, d0
 800681a:	ee10 0a10 	vmov	r0, s0
 800681e:	a374      	add	r3, pc, #464	; (adr r3, 80069f0 <__ieee754_rem_pio2+0x300>)
 8006820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006824:	4639      	mov	r1, r7
 8006826:	f7f9 feb3 	bl	8000590 <__aeabi_dmul>
 800682a:	2200      	movs	r2, #0
 800682c:	4b7a      	ldr	r3, [pc, #488]	; (8006a18 <__ieee754_rem_pio2+0x328>)
 800682e:	f7f9 fcf9 	bl	8000224 <__adddf3>
 8006832:	f7fa f95d 	bl	8000af0 <__aeabi_d2iz>
 8006836:	4605      	mov	r5, r0
 8006838:	f7f9 fe40 	bl	80004bc <__aeabi_i2d>
 800683c:	a364      	add	r3, pc, #400	; (adr r3, 80069d0 <__ieee754_rem_pio2+0x2e0>)
 800683e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006842:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006846:	f7f9 fea3 	bl	8000590 <__aeabi_dmul>
 800684a:	4602      	mov	r2, r0
 800684c:	460b      	mov	r3, r1
 800684e:	4630      	mov	r0, r6
 8006850:	4639      	mov	r1, r7
 8006852:	f7f9 fce5 	bl	8000220 <__aeabi_dsub>
 8006856:	a360      	add	r3, pc, #384	; (adr r3, 80069d8 <__ieee754_rem_pio2+0x2e8>)
 8006858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685c:	4682      	mov	sl, r0
 800685e:	468b      	mov	fp, r1
 8006860:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006864:	f7f9 fe94 	bl	8000590 <__aeabi_dmul>
 8006868:	2d1f      	cmp	r5, #31
 800686a:	4606      	mov	r6, r0
 800686c:	460f      	mov	r7, r1
 800686e:	dc0c      	bgt.n	800688a <__ieee754_rem_pio2+0x19a>
 8006870:	1e6a      	subs	r2, r5, #1
 8006872:	4b6a      	ldr	r3, [pc, #424]	; (8006a1c <__ieee754_rem_pio2+0x32c>)
 8006874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006878:	4543      	cmp	r3, r8
 800687a:	d006      	beq.n	800688a <__ieee754_rem_pio2+0x19a>
 800687c:	4632      	mov	r2, r6
 800687e:	463b      	mov	r3, r7
 8006880:	4650      	mov	r0, sl
 8006882:	4659      	mov	r1, fp
 8006884:	f7f9 fccc 	bl	8000220 <__aeabi_dsub>
 8006888:	e00e      	b.n	80068a8 <__ieee754_rem_pio2+0x1b8>
 800688a:	4632      	mov	r2, r6
 800688c:	463b      	mov	r3, r7
 800688e:	4650      	mov	r0, sl
 8006890:	4659      	mov	r1, fp
 8006892:	f7f9 fcc5 	bl	8000220 <__aeabi_dsub>
 8006896:	ea4f 5328 	mov.w	r3, r8, asr #20
 800689a:	9305      	str	r3, [sp, #20]
 800689c:	9a05      	ldr	r2, [sp, #20]
 800689e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	2b10      	cmp	r3, #16
 80068a6:	dc02      	bgt.n	80068ae <__ieee754_rem_pio2+0x1be>
 80068a8:	e9c4 0100 	strd	r0, r1, [r4]
 80068ac:	e039      	b.n	8006922 <__ieee754_rem_pio2+0x232>
 80068ae:	a34c      	add	r3, pc, #304	; (adr r3, 80069e0 <__ieee754_rem_pio2+0x2f0>)
 80068b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068b8:	f7f9 fe6a 	bl	8000590 <__aeabi_dmul>
 80068bc:	4606      	mov	r6, r0
 80068be:	460f      	mov	r7, r1
 80068c0:	4602      	mov	r2, r0
 80068c2:	460b      	mov	r3, r1
 80068c4:	4650      	mov	r0, sl
 80068c6:	4659      	mov	r1, fp
 80068c8:	f7f9 fcaa 	bl	8000220 <__aeabi_dsub>
 80068cc:	4602      	mov	r2, r0
 80068ce:	460b      	mov	r3, r1
 80068d0:	4680      	mov	r8, r0
 80068d2:	4689      	mov	r9, r1
 80068d4:	4650      	mov	r0, sl
 80068d6:	4659      	mov	r1, fp
 80068d8:	f7f9 fca2 	bl	8000220 <__aeabi_dsub>
 80068dc:	4632      	mov	r2, r6
 80068de:	463b      	mov	r3, r7
 80068e0:	f7f9 fc9e 	bl	8000220 <__aeabi_dsub>
 80068e4:	a340      	add	r3, pc, #256	; (adr r3, 80069e8 <__ieee754_rem_pio2+0x2f8>)
 80068e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ea:	4606      	mov	r6, r0
 80068ec:	460f      	mov	r7, r1
 80068ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068f2:	f7f9 fe4d 	bl	8000590 <__aeabi_dmul>
 80068f6:	4632      	mov	r2, r6
 80068f8:	463b      	mov	r3, r7
 80068fa:	f7f9 fc91 	bl	8000220 <__aeabi_dsub>
 80068fe:	4602      	mov	r2, r0
 8006900:	460b      	mov	r3, r1
 8006902:	4606      	mov	r6, r0
 8006904:	460f      	mov	r7, r1
 8006906:	4640      	mov	r0, r8
 8006908:	4649      	mov	r1, r9
 800690a:	f7f9 fc89 	bl	8000220 <__aeabi_dsub>
 800690e:	9a05      	ldr	r2, [sp, #20]
 8006910:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	2b31      	cmp	r3, #49	; 0x31
 8006918:	dc20      	bgt.n	800695c <__ieee754_rem_pio2+0x26c>
 800691a:	e9c4 0100 	strd	r0, r1, [r4]
 800691e:	46c2      	mov	sl, r8
 8006920:	46cb      	mov	fp, r9
 8006922:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006926:	4650      	mov	r0, sl
 8006928:	4642      	mov	r2, r8
 800692a:	464b      	mov	r3, r9
 800692c:	4659      	mov	r1, fp
 800692e:	f7f9 fc77 	bl	8000220 <__aeabi_dsub>
 8006932:	463b      	mov	r3, r7
 8006934:	4632      	mov	r2, r6
 8006936:	f7f9 fc73 	bl	8000220 <__aeabi_dsub>
 800693a:	9b04      	ldr	r3, [sp, #16]
 800693c:	2b00      	cmp	r3, #0
 800693e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006942:	f6bf af11 	bge.w	8006768 <__ieee754_rem_pio2+0x78>
 8006946:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800694a:	6063      	str	r3, [r4, #4]
 800694c:	f8c4 8000 	str.w	r8, [r4]
 8006950:	60a0      	str	r0, [r4, #8]
 8006952:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006956:	60e3      	str	r3, [r4, #12]
 8006958:	426d      	negs	r5, r5
 800695a:	e705      	b.n	8006768 <__ieee754_rem_pio2+0x78>
 800695c:	a326      	add	r3, pc, #152	; (adr r3, 80069f8 <__ieee754_rem_pio2+0x308>)
 800695e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006962:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006966:	f7f9 fe13 	bl	8000590 <__aeabi_dmul>
 800696a:	4606      	mov	r6, r0
 800696c:	460f      	mov	r7, r1
 800696e:	4602      	mov	r2, r0
 8006970:	460b      	mov	r3, r1
 8006972:	4640      	mov	r0, r8
 8006974:	4649      	mov	r1, r9
 8006976:	f7f9 fc53 	bl	8000220 <__aeabi_dsub>
 800697a:	4602      	mov	r2, r0
 800697c:	460b      	mov	r3, r1
 800697e:	4682      	mov	sl, r0
 8006980:	468b      	mov	fp, r1
 8006982:	4640      	mov	r0, r8
 8006984:	4649      	mov	r1, r9
 8006986:	f7f9 fc4b 	bl	8000220 <__aeabi_dsub>
 800698a:	4632      	mov	r2, r6
 800698c:	463b      	mov	r3, r7
 800698e:	f7f9 fc47 	bl	8000220 <__aeabi_dsub>
 8006992:	a31b      	add	r3, pc, #108	; (adr r3, 8006a00 <__ieee754_rem_pio2+0x310>)
 8006994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006998:	4606      	mov	r6, r0
 800699a:	460f      	mov	r7, r1
 800699c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069a0:	f7f9 fdf6 	bl	8000590 <__aeabi_dmul>
 80069a4:	4632      	mov	r2, r6
 80069a6:	463b      	mov	r3, r7
 80069a8:	f7f9 fc3a 	bl	8000220 <__aeabi_dsub>
 80069ac:	4606      	mov	r6, r0
 80069ae:	460f      	mov	r7, r1
 80069b0:	e764      	b.n	800687c <__ieee754_rem_pio2+0x18c>
 80069b2:	4b1b      	ldr	r3, [pc, #108]	; (8006a20 <__ieee754_rem_pio2+0x330>)
 80069b4:	4598      	cmp	r8, r3
 80069b6:	dd35      	ble.n	8006a24 <__ieee754_rem_pio2+0x334>
 80069b8:	ee10 2a10 	vmov	r2, s0
 80069bc:	463b      	mov	r3, r7
 80069be:	4630      	mov	r0, r6
 80069c0:	4639      	mov	r1, r7
 80069c2:	f7f9 fc2d 	bl	8000220 <__aeabi_dsub>
 80069c6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80069ca:	e9c4 0100 	strd	r0, r1, [r4]
 80069ce:	e6a1      	b.n	8006714 <__ieee754_rem_pio2+0x24>
 80069d0:	54400000 	.word	0x54400000
 80069d4:	3ff921fb 	.word	0x3ff921fb
 80069d8:	1a626331 	.word	0x1a626331
 80069dc:	3dd0b461 	.word	0x3dd0b461
 80069e0:	1a600000 	.word	0x1a600000
 80069e4:	3dd0b461 	.word	0x3dd0b461
 80069e8:	2e037073 	.word	0x2e037073
 80069ec:	3ba3198a 	.word	0x3ba3198a
 80069f0:	6dc9c883 	.word	0x6dc9c883
 80069f4:	3fe45f30 	.word	0x3fe45f30
 80069f8:	2e000000 	.word	0x2e000000
 80069fc:	3ba3198a 	.word	0x3ba3198a
 8006a00:	252049c1 	.word	0x252049c1
 8006a04:	397b839a 	.word	0x397b839a
 8006a08:	3fe921fb 	.word	0x3fe921fb
 8006a0c:	4002d97b 	.word	0x4002d97b
 8006a10:	3ff921fb 	.word	0x3ff921fb
 8006a14:	413921fb 	.word	0x413921fb
 8006a18:	3fe00000 	.word	0x3fe00000
 8006a1c:	080093f4 	.word	0x080093f4
 8006a20:	7fefffff 	.word	0x7fefffff
 8006a24:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006a28:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8006a2c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006a30:	4630      	mov	r0, r6
 8006a32:	460f      	mov	r7, r1
 8006a34:	f7fa f85c 	bl	8000af0 <__aeabi_d2iz>
 8006a38:	f7f9 fd40 	bl	80004bc <__aeabi_i2d>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4630      	mov	r0, r6
 8006a42:	4639      	mov	r1, r7
 8006a44:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a48:	f7f9 fbea 	bl	8000220 <__aeabi_dsub>
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	4b1f      	ldr	r3, [pc, #124]	; (8006acc <__ieee754_rem_pio2+0x3dc>)
 8006a50:	f7f9 fd9e 	bl	8000590 <__aeabi_dmul>
 8006a54:	460f      	mov	r7, r1
 8006a56:	4606      	mov	r6, r0
 8006a58:	f7fa f84a 	bl	8000af0 <__aeabi_d2iz>
 8006a5c:	f7f9 fd2e 	bl	80004bc <__aeabi_i2d>
 8006a60:	4602      	mov	r2, r0
 8006a62:	460b      	mov	r3, r1
 8006a64:	4630      	mov	r0, r6
 8006a66:	4639      	mov	r1, r7
 8006a68:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006a6c:	f7f9 fbd8 	bl	8000220 <__aeabi_dsub>
 8006a70:	2200      	movs	r2, #0
 8006a72:	4b16      	ldr	r3, [pc, #88]	; (8006acc <__ieee754_rem_pio2+0x3dc>)
 8006a74:	f7f9 fd8c 	bl	8000590 <__aeabi_dmul>
 8006a78:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006a7c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8006a80:	f04f 0803 	mov.w	r8, #3
 8006a84:	2600      	movs	r6, #0
 8006a86:	2700      	movs	r7, #0
 8006a88:	4632      	mov	r2, r6
 8006a8a:	463b      	mov	r3, r7
 8006a8c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006a90:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8006a94:	f7f9 ffe4 	bl	8000a60 <__aeabi_dcmpeq>
 8006a98:	b9b0      	cbnz	r0, 8006ac8 <__ieee754_rem_pio2+0x3d8>
 8006a9a:	4b0d      	ldr	r3, [pc, #52]	; (8006ad0 <__ieee754_rem_pio2+0x3e0>)
 8006a9c:	9301      	str	r3, [sp, #4]
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	462a      	mov	r2, r5
 8006aa4:	4643      	mov	r3, r8
 8006aa6:	4621      	mov	r1, r4
 8006aa8:	a806      	add	r0, sp, #24
 8006aaa:	f000 f8dd 	bl	8006c68 <__kernel_rem_pio2>
 8006aae:	9b04      	ldr	r3, [sp, #16]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	4605      	mov	r5, r0
 8006ab4:	f6bf ae58 	bge.w	8006768 <__ieee754_rem_pio2+0x78>
 8006ab8:	6863      	ldr	r3, [r4, #4]
 8006aba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006abe:	6063      	str	r3, [r4, #4]
 8006ac0:	68e3      	ldr	r3, [r4, #12]
 8006ac2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006ac6:	e746      	b.n	8006956 <__ieee754_rem_pio2+0x266>
 8006ac8:	46d0      	mov	r8, sl
 8006aca:	e7dd      	b.n	8006a88 <__ieee754_rem_pio2+0x398>
 8006acc:	41700000 	.word	0x41700000
 8006ad0:	08009474 	.word	0x08009474
 8006ad4:	00000000 	.word	0x00000000

08006ad8 <__kernel_cos>:
 8006ad8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006adc:	ec59 8b10 	vmov	r8, r9, d0
 8006ae0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8006ae4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8006ae8:	ed2d 8b02 	vpush	{d8}
 8006aec:	eeb0 8a41 	vmov.f32	s16, s2
 8006af0:	eef0 8a61 	vmov.f32	s17, s3
 8006af4:	da07      	bge.n	8006b06 <__kernel_cos+0x2e>
 8006af6:	ee10 0a10 	vmov	r0, s0
 8006afa:	4649      	mov	r1, r9
 8006afc:	f7f9 fff8 	bl	8000af0 <__aeabi_d2iz>
 8006b00:	2800      	cmp	r0, #0
 8006b02:	f000 8089 	beq.w	8006c18 <__kernel_cos+0x140>
 8006b06:	4642      	mov	r2, r8
 8006b08:	464b      	mov	r3, r9
 8006b0a:	4640      	mov	r0, r8
 8006b0c:	4649      	mov	r1, r9
 8006b0e:	f7f9 fd3f 	bl	8000590 <__aeabi_dmul>
 8006b12:	2200      	movs	r2, #0
 8006b14:	4b4e      	ldr	r3, [pc, #312]	; (8006c50 <__kernel_cos+0x178>)
 8006b16:	4604      	mov	r4, r0
 8006b18:	460d      	mov	r5, r1
 8006b1a:	f7f9 fd39 	bl	8000590 <__aeabi_dmul>
 8006b1e:	a340      	add	r3, pc, #256	; (adr r3, 8006c20 <__kernel_cos+0x148>)
 8006b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b24:	4682      	mov	sl, r0
 8006b26:	468b      	mov	fp, r1
 8006b28:	4620      	mov	r0, r4
 8006b2a:	4629      	mov	r1, r5
 8006b2c:	f7f9 fd30 	bl	8000590 <__aeabi_dmul>
 8006b30:	a33d      	add	r3, pc, #244	; (adr r3, 8006c28 <__kernel_cos+0x150>)
 8006b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b36:	f7f9 fb75 	bl	8000224 <__adddf3>
 8006b3a:	4622      	mov	r2, r4
 8006b3c:	462b      	mov	r3, r5
 8006b3e:	f7f9 fd27 	bl	8000590 <__aeabi_dmul>
 8006b42:	a33b      	add	r3, pc, #236	; (adr r3, 8006c30 <__kernel_cos+0x158>)
 8006b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b48:	f7f9 fb6a 	bl	8000220 <__aeabi_dsub>
 8006b4c:	4622      	mov	r2, r4
 8006b4e:	462b      	mov	r3, r5
 8006b50:	f7f9 fd1e 	bl	8000590 <__aeabi_dmul>
 8006b54:	a338      	add	r3, pc, #224	; (adr r3, 8006c38 <__kernel_cos+0x160>)
 8006b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5a:	f7f9 fb63 	bl	8000224 <__adddf3>
 8006b5e:	4622      	mov	r2, r4
 8006b60:	462b      	mov	r3, r5
 8006b62:	f7f9 fd15 	bl	8000590 <__aeabi_dmul>
 8006b66:	a336      	add	r3, pc, #216	; (adr r3, 8006c40 <__kernel_cos+0x168>)
 8006b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6c:	f7f9 fb58 	bl	8000220 <__aeabi_dsub>
 8006b70:	4622      	mov	r2, r4
 8006b72:	462b      	mov	r3, r5
 8006b74:	f7f9 fd0c 	bl	8000590 <__aeabi_dmul>
 8006b78:	a333      	add	r3, pc, #204	; (adr r3, 8006c48 <__kernel_cos+0x170>)
 8006b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7e:	f7f9 fb51 	bl	8000224 <__adddf3>
 8006b82:	4622      	mov	r2, r4
 8006b84:	462b      	mov	r3, r5
 8006b86:	f7f9 fd03 	bl	8000590 <__aeabi_dmul>
 8006b8a:	4622      	mov	r2, r4
 8006b8c:	462b      	mov	r3, r5
 8006b8e:	f7f9 fcff 	bl	8000590 <__aeabi_dmul>
 8006b92:	ec53 2b18 	vmov	r2, r3, d8
 8006b96:	4604      	mov	r4, r0
 8006b98:	460d      	mov	r5, r1
 8006b9a:	4640      	mov	r0, r8
 8006b9c:	4649      	mov	r1, r9
 8006b9e:	f7f9 fcf7 	bl	8000590 <__aeabi_dmul>
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	4629      	mov	r1, r5
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f7f9 fb39 	bl	8000220 <__aeabi_dsub>
 8006bae:	4b29      	ldr	r3, [pc, #164]	; (8006c54 <__kernel_cos+0x17c>)
 8006bb0:	429e      	cmp	r6, r3
 8006bb2:	4680      	mov	r8, r0
 8006bb4:	4689      	mov	r9, r1
 8006bb6:	dc11      	bgt.n	8006bdc <__kernel_cos+0x104>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	460b      	mov	r3, r1
 8006bbc:	4650      	mov	r0, sl
 8006bbe:	4659      	mov	r1, fp
 8006bc0:	f7f9 fb2e 	bl	8000220 <__aeabi_dsub>
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	4924      	ldr	r1, [pc, #144]	; (8006c58 <__kernel_cos+0x180>)
 8006bc8:	4602      	mov	r2, r0
 8006bca:	2000      	movs	r0, #0
 8006bcc:	f7f9 fb28 	bl	8000220 <__aeabi_dsub>
 8006bd0:	ecbd 8b02 	vpop	{d8}
 8006bd4:	ec41 0b10 	vmov	d0, r0, r1
 8006bd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bdc:	4b1f      	ldr	r3, [pc, #124]	; (8006c5c <__kernel_cos+0x184>)
 8006bde:	491e      	ldr	r1, [pc, #120]	; (8006c58 <__kernel_cos+0x180>)
 8006be0:	429e      	cmp	r6, r3
 8006be2:	bfcc      	ite	gt
 8006be4:	4d1e      	ldrgt	r5, [pc, #120]	; (8006c60 <__kernel_cos+0x188>)
 8006be6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8006bea:	2400      	movs	r4, #0
 8006bec:	4622      	mov	r2, r4
 8006bee:	462b      	mov	r3, r5
 8006bf0:	2000      	movs	r0, #0
 8006bf2:	f7f9 fb15 	bl	8000220 <__aeabi_dsub>
 8006bf6:	4622      	mov	r2, r4
 8006bf8:	4606      	mov	r6, r0
 8006bfa:	460f      	mov	r7, r1
 8006bfc:	462b      	mov	r3, r5
 8006bfe:	4650      	mov	r0, sl
 8006c00:	4659      	mov	r1, fp
 8006c02:	f7f9 fb0d 	bl	8000220 <__aeabi_dsub>
 8006c06:	4642      	mov	r2, r8
 8006c08:	464b      	mov	r3, r9
 8006c0a:	f7f9 fb09 	bl	8000220 <__aeabi_dsub>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	460b      	mov	r3, r1
 8006c12:	4630      	mov	r0, r6
 8006c14:	4639      	mov	r1, r7
 8006c16:	e7d9      	b.n	8006bcc <__kernel_cos+0xf4>
 8006c18:	2000      	movs	r0, #0
 8006c1a:	490f      	ldr	r1, [pc, #60]	; (8006c58 <__kernel_cos+0x180>)
 8006c1c:	e7d8      	b.n	8006bd0 <__kernel_cos+0xf8>
 8006c1e:	bf00      	nop
 8006c20:	be8838d4 	.word	0xbe8838d4
 8006c24:	bda8fae9 	.word	0xbda8fae9
 8006c28:	bdb4b1c4 	.word	0xbdb4b1c4
 8006c2c:	3e21ee9e 	.word	0x3e21ee9e
 8006c30:	809c52ad 	.word	0x809c52ad
 8006c34:	3e927e4f 	.word	0x3e927e4f
 8006c38:	19cb1590 	.word	0x19cb1590
 8006c3c:	3efa01a0 	.word	0x3efa01a0
 8006c40:	16c15177 	.word	0x16c15177
 8006c44:	3f56c16c 	.word	0x3f56c16c
 8006c48:	5555554c 	.word	0x5555554c
 8006c4c:	3fa55555 	.word	0x3fa55555
 8006c50:	3fe00000 	.word	0x3fe00000
 8006c54:	3fd33332 	.word	0x3fd33332
 8006c58:	3ff00000 	.word	0x3ff00000
 8006c5c:	3fe90000 	.word	0x3fe90000
 8006c60:	3fd20000 	.word	0x3fd20000
 8006c64:	00000000 	.word	0x00000000

08006c68 <__kernel_rem_pio2>:
 8006c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c6c:	ed2d 8b02 	vpush	{d8}
 8006c70:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006c74:	1ed4      	subs	r4, r2, #3
 8006c76:	9308      	str	r3, [sp, #32]
 8006c78:	9101      	str	r1, [sp, #4]
 8006c7a:	4bc5      	ldr	r3, [pc, #788]	; (8006f90 <__kernel_rem_pio2+0x328>)
 8006c7c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8006c7e:	9009      	str	r0, [sp, #36]	; 0x24
 8006c80:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c84:	9304      	str	r3, [sp, #16]
 8006c86:	9b08      	ldr	r3, [sp, #32]
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	9307      	str	r3, [sp, #28]
 8006c8c:	2318      	movs	r3, #24
 8006c8e:	fb94 f4f3 	sdiv	r4, r4, r3
 8006c92:	f06f 0317 	mvn.w	r3, #23
 8006c96:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8006c9a:	fb04 3303 	mla	r3, r4, r3, r3
 8006c9e:	eb03 0a02 	add.w	sl, r3, r2
 8006ca2:	9b04      	ldr	r3, [sp, #16]
 8006ca4:	9a07      	ldr	r2, [sp, #28]
 8006ca6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8006f80 <__kernel_rem_pio2+0x318>
 8006caa:	eb03 0802 	add.w	r8, r3, r2
 8006cae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006cb0:	1aa7      	subs	r7, r4, r2
 8006cb2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006cb6:	ae22      	add	r6, sp, #136	; 0x88
 8006cb8:	2500      	movs	r5, #0
 8006cba:	4545      	cmp	r5, r8
 8006cbc:	dd13      	ble.n	8006ce6 <__kernel_rem_pio2+0x7e>
 8006cbe:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8006f80 <__kernel_rem_pio2+0x318>
 8006cc2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8006cc6:	2600      	movs	r6, #0
 8006cc8:	9b04      	ldr	r3, [sp, #16]
 8006cca:	429e      	cmp	r6, r3
 8006ccc:	dc32      	bgt.n	8006d34 <__kernel_rem_pio2+0xcc>
 8006cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cd0:	9302      	str	r3, [sp, #8]
 8006cd2:	9b08      	ldr	r3, [sp, #32]
 8006cd4:	199d      	adds	r5, r3, r6
 8006cd6:	ab22      	add	r3, sp, #136	; 0x88
 8006cd8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006cdc:	9306      	str	r3, [sp, #24]
 8006cde:	ec59 8b18 	vmov	r8, r9, d8
 8006ce2:	2700      	movs	r7, #0
 8006ce4:	e01f      	b.n	8006d26 <__kernel_rem_pio2+0xbe>
 8006ce6:	42ef      	cmn	r7, r5
 8006ce8:	d407      	bmi.n	8006cfa <__kernel_rem_pio2+0x92>
 8006cea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006cee:	f7f9 fbe5 	bl	80004bc <__aeabi_i2d>
 8006cf2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006cf6:	3501      	adds	r5, #1
 8006cf8:	e7df      	b.n	8006cba <__kernel_rem_pio2+0x52>
 8006cfa:	ec51 0b18 	vmov	r0, r1, d8
 8006cfe:	e7f8      	b.n	8006cf2 <__kernel_rem_pio2+0x8a>
 8006d00:	9906      	ldr	r1, [sp, #24]
 8006d02:	9d02      	ldr	r5, [sp, #8]
 8006d04:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8006d08:	9106      	str	r1, [sp, #24]
 8006d0a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8006d0e:	9502      	str	r5, [sp, #8]
 8006d10:	f7f9 fc3e 	bl	8000590 <__aeabi_dmul>
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	4640      	mov	r0, r8
 8006d1a:	4649      	mov	r1, r9
 8006d1c:	f7f9 fa82 	bl	8000224 <__adddf3>
 8006d20:	3701      	adds	r7, #1
 8006d22:	4680      	mov	r8, r0
 8006d24:	4689      	mov	r9, r1
 8006d26:	9b07      	ldr	r3, [sp, #28]
 8006d28:	429f      	cmp	r7, r3
 8006d2a:	dde9      	ble.n	8006d00 <__kernel_rem_pio2+0x98>
 8006d2c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8006d30:	3601      	adds	r6, #1
 8006d32:	e7c9      	b.n	8006cc8 <__kernel_rem_pio2+0x60>
 8006d34:	9b04      	ldr	r3, [sp, #16]
 8006d36:	aa0e      	add	r2, sp, #56	; 0x38
 8006d38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006d3c:	930c      	str	r3, [sp, #48]	; 0x30
 8006d3e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006d40:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006d44:	9c04      	ldr	r4, [sp, #16]
 8006d46:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d48:	ab9a      	add	r3, sp, #616	; 0x268
 8006d4a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8006d4e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d52:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006d56:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8006d5a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8006d5e:	ab9a      	add	r3, sp, #616	; 0x268
 8006d60:	445b      	add	r3, fp
 8006d62:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8006d66:	2500      	movs	r5, #0
 8006d68:	1b63      	subs	r3, r4, r5
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	dc78      	bgt.n	8006e60 <__kernel_rem_pio2+0x1f8>
 8006d6e:	4650      	mov	r0, sl
 8006d70:	ec49 8b10 	vmov	d0, r8, r9
 8006d74:	f000 fc00 	bl	8007578 <scalbn>
 8006d78:	ec57 6b10 	vmov	r6, r7, d0
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006d82:	ee10 0a10 	vmov	r0, s0
 8006d86:	4639      	mov	r1, r7
 8006d88:	f7f9 fc02 	bl	8000590 <__aeabi_dmul>
 8006d8c:	ec41 0b10 	vmov	d0, r0, r1
 8006d90:	f000 fb6e 	bl	8007470 <floor>
 8006d94:	2200      	movs	r2, #0
 8006d96:	ec51 0b10 	vmov	r0, r1, d0
 8006d9a:	4b7e      	ldr	r3, [pc, #504]	; (8006f94 <__kernel_rem_pio2+0x32c>)
 8006d9c:	f7f9 fbf8 	bl	8000590 <__aeabi_dmul>
 8006da0:	4602      	mov	r2, r0
 8006da2:	460b      	mov	r3, r1
 8006da4:	4630      	mov	r0, r6
 8006da6:	4639      	mov	r1, r7
 8006da8:	f7f9 fa3a 	bl	8000220 <__aeabi_dsub>
 8006dac:	460f      	mov	r7, r1
 8006dae:	4606      	mov	r6, r0
 8006db0:	f7f9 fe9e 	bl	8000af0 <__aeabi_d2iz>
 8006db4:	9006      	str	r0, [sp, #24]
 8006db6:	f7f9 fb81 	bl	80004bc <__aeabi_i2d>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	4639      	mov	r1, r7
 8006dc2:	f7f9 fa2d 	bl	8000220 <__aeabi_dsub>
 8006dc6:	f1ba 0f00 	cmp.w	sl, #0
 8006dca:	4606      	mov	r6, r0
 8006dcc:	460f      	mov	r7, r1
 8006dce:	dd6c      	ble.n	8006eaa <__kernel_rem_pio2+0x242>
 8006dd0:	1e62      	subs	r2, r4, #1
 8006dd2:	ab0e      	add	r3, sp, #56	; 0x38
 8006dd4:	f1ca 0118 	rsb	r1, sl, #24
 8006dd8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006ddc:	9d06      	ldr	r5, [sp, #24]
 8006dde:	fa40 f301 	asr.w	r3, r0, r1
 8006de2:	441d      	add	r5, r3
 8006de4:	408b      	lsls	r3, r1
 8006de6:	1ac0      	subs	r0, r0, r3
 8006de8:	ab0e      	add	r3, sp, #56	; 0x38
 8006dea:	9506      	str	r5, [sp, #24]
 8006dec:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006df0:	f1ca 0317 	rsb	r3, sl, #23
 8006df4:	fa40 f303 	asr.w	r3, r0, r3
 8006df8:	9302      	str	r3, [sp, #8]
 8006dfa:	9b02      	ldr	r3, [sp, #8]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	dd62      	ble.n	8006ec6 <__kernel_rem_pio2+0x25e>
 8006e00:	9b06      	ldr	r3, [sp, #24]
 8006e02:	2200      	movs	r2, #0
 8006e04:	3301      	adds	r3, #1
 8006e06:	9306      	str	r3, [sp, #24]
 8006e08:	4615      	mov	r5, r2
 8006e0a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006e0e:	4294      	cmp	r4, r2
 8006e10:	f300 8095 	bgt.w	8006f3e <__kernel_rem_pio2+0x2d6>
 8006e14:	f1ba 0f00 	cmp.w	sl, #0
 8006e18:	dd07      	ble.n	8006e2a <__kernel_rem_pio2+0x1c2>
 8006e1a:	f1ba 0f01 	cmp.w	sl, #1
 8006e1e:	f000 80a2 	beq.w	8006f66 <__kernel_rem_pio2+0x2fe>
 8006e22:	f1ba 0f02 	cmp.w	sl, #2
 8006e26:	f000 80c1 	beq.w	8006fac <__kernel_rem_pio2+0x344>
 8006e2a:	9b02      	ldr	r3, [sp, #8]
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d14a      	bne.n	8006ec6 <__kernel_rem_pio2+0x25e>
 8006e30:	4632      	mov	r2, r6
 8006e32:	463b      	mov	r3, r7
 8006e34:	2000      	movs	r0, #0
 8006e36:	4958      	ldr	r1, [pc, #352]	; (8006f98 <__kernel_rem_pio2+0x330>)
 8006e38:	f7f9 f9f2 	bl	8000220 <__aeabi_dsub>
 8006e3c:	4606      	mov	r6, r0
 8006e3e:	460f      	mov	r7, r1
 8006e40:	2d00      	cmp	r5, #0
 8006e42:	d040      	beq.n	8006ec6 <__kernel_rem_pio2+0x25e>
 8006e44:	4650      	mov	r0, sl
 8006e46:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8006f88 <__kernel_rem_pio2+0x320>
 8006e4a:	f000 fb95 	bl	8007578 <scalbn>
 8006e4e:	4630      	mov	r0, r6
 8006e50:	4639      	mov	r1, r7
 8006e52:	ec53 2b10 	vmov	r2, r3, d0
 8006e56:	f7f9 f9e3 	bl	8000220 <__aeabi_dsub>
 8006e5a:	4606      	mov	r6, r0
 8006e5c:	460f      	mov	r7, r1
 8006e5e:	e032      	b.n	8006ec6 <__kernel_rem_pio2+0x25e>
 8006e60:	2200      	movs	r2, #0
 8006e62:	4b4e      	ldr	r3, [pc, #312]	; (8006f9c <__kernel_rem_pio2+0x334>)
 8006e64:	4640      	mov	r0, r8
 8006e66:	4649      	mov	r1, r9
 8006e68:	f7f9 fb92 	bl	8000590 <__aeabi_dmul>
 8006e6c:	f7f9 fe40 	bl	8000af0 <__aeabi_d2iz>
 8006e70:	f7f9 fb24 	bl	80004bc <__aeabi_i2d>
 8006e74:	2200      	movs	r2, #0
 8006e76:	4b4a      	ldr	r3, [pc, #296]	; (8006fa0 <__kernel_rem_pio2+0x338>)
 8006e78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e7c:	f7f9 fb88 	bl	8000590 <__aeabi_dmul>
 8006e80:	4602      	mov	r2, r0
 8006e82:	460b      	mov	r3, r1
 8006e84:	4640      	mov	r0, r8
 8006e86:	4649      	mov	r1, r9
 8006e88:	f7f9 f9ca 	bl	8000220 <__aeabi_dsub>
 8006e8c:	f7f9 fe30 	bl	8000af0 <__aeabi_d2iz>
 8006e90:	ab0e      	add	r3, sp, #56	; 0x38
 8006e92:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8006e96:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006e9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e9e:	f7f9 f9c1 	bl	8000224 <__adddf3>
 8006ea2:	3501      	adds	r5, #1
 8006ea4:	4680      	mov	r8, r0
 8006ea6:	4689      	mov	r9, r1
 8006ea8:	e75e      	b.n	8006d68 <__kernel_rem_pio2+0x100>
 8006eaa:	d105      	bne.n	8006eb8 <__kernel_rem_pio2+0x250>
 8006eac:	1e63      	subs	r3, r4, #1
 8006eae:	aa0e      	add	r2, sp, #56	; 0x38
 8006eb0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006eb4:	15c3      	asrs	r3, r0, #23
 8006eb6:	e79f      	b.n	8006df8 <__kernel_rem_pio2+0x190>
 8006eb8:	2200      	movs	r2, #0
 8006eba:	4b3a      	ldr	r3, [pc, #232]	; (8006fa4 <__kernel_rem_pio2+0x33c>)
 8006ebc:	f7f9 fdee 	bl	8000a9c <__aeabi_dcmpge>
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	d139      	bne.n	8006f38 <__kernel_rem_pio2+0x2d0>
 8006ec4:	9002      	str	r0, [sp, #8]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	2300      	movs	r3, #0
 8006eca:	4630      	mov	r0, r6
 8006ecc:	4639      	mov	r1, r7
 8006ece:	f7f9 fdc7 	bl	8000a60 <__aeabi_dcmpeq>
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	f000 80c7 	beq.w	8007066 <__kernel_rem_pio2+0x3fe>
 8006ed8:	1e65      	subs	r5, r4, #1
 8006eda:	462b      	mov	r3, r5
 8006edc:	2200      	movs	r2, #0
 8006ede:	9904      	ldr	r1, [sp, #16]
 8006ee0:	428b      	cmp	r3, r1
 8006ee2:	da6a      	bge.n	8006fba <__kernel_rem_pio2+0x352>
 8006ee4:	2a00      	cmp	r2, #0
 8006ee6:	f000 8088 	beq.w	8006ffa <__kernel_rem_pio2+0x392>
 8006eea:	ab0e      	add	r3, sp, #56	; 0x38
 8006eec:	f1aa 0a18 	sub.w	sl, sl, #24
 8006ef0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f000 80b4 	beq.w	8007062 <__kernel_rem_pio2+0x3fa>
 8006efa:	4650      	mov	r0, sl
 8006efc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8006f88 <__kernel_rem_pio2+0x320>
 8006f00:	f000 fb3a 	bl	8007578 <scalbn>
 8006f04:	00ec      	lsls	r4, r5, #3
 8006f06:	ab72      	add	r3, sp, #456	; 0x1c8
 8006f08:	191e      	adds	r6, r3, r4
 8006f0a:	ec59 8b10 	vmov	r8, r9, d0
 8006f0e:	f106 0a08 	add.w	sl, r6, #8
 8006f12:	462f      	mov	r7, r5
 8006f14:	2f00      	cmp	r7, #0
 8006f16:	f280 80df 	bge.w	80070d8 <__kernel_rem_pio2+0x470>
 8006f1a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8006f80 <__kernel_rem_pio2+0x318>
 8006f1e:	f04f 0a00 	mov.w	sl, #0
 8006f22:	eba5 030a 	sub.w	r3, r5, sl
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f2c0 810a 	blt.w	8007140 <__kernel_rem_pio2+0x4d8>
 8006f2c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8006fa8 <__kernel_rem_pio2+0x340>
 8006f30:	ec59 8b18 	vmov	r8, r9, d8
 8006f34:	2700      	movs	r7, #0
 8006f36:	e0f5      	b.n	8007124 <__kernel_rem_pio2+0x4bc>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	9302      	str	r3, [sp, #8]
 8006f3c:	e760      	b.n	8006e00 <__kernel_rem_pio2+0x198>
 8006f3e:	ab0e      	add	r3, sp, #56	; 0x38
 8006f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f44:	b94d      	cbnz	r5, 8006f5a <__kernel_rem_pio2+0x2f2>
 8006f46:	b12b      	cbz	r3, 8006f54 <__kernel_rem_pio2+0x2ec>
 8006f48:	a80e      	add	r0, sp, #56	; 0x38
 8006f4a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006f4e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006f52:	2301      	movs	r3, #1
 8006f54:	3201      	adds	r2, #1
 8006f56:	461d      	mov	r5, r3
 8006f58:	e759      	b.n	8006e0e <__kernel_rem_pio2+0x1a6>
 8006f5a:	a80e      	add	r0, sp, #56	; 0x38
 8006f5c:	1acb      	subs	r3, r1, r3
 8006f5e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006f62:	462b      	mov	r3, r5
 8006f64:	e7f6      	b.n	8006f54 <__kernel_rem_pio2+0x2ec>
 8006f66:	1e62      	subs	r2, r4, #1
 8006f68:	ab0e      	add	r3, sp, #56	; 0x38
 8006f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f6e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006f72:	a90e      	add	r1, sp, #56	; 0x38
 8006f74:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006f78:	e757      	b.n	8006e2a <__kernel_rem_pio2+0x1c2>
 8006f7a:	bf00      	nop
 8006f7c:	f3af 8000 	nop.w
	...
 8006f8c:	3ff00000 	.word	0x3ff00000
 8006f90:	080095c0 	.word	0x080095c0
 8006f94:	40200000 	.word	0x40200000
 8006f98:	3ff00000 	.word	0x3ff00000
 8006f9c:	3e700000 	.word	0x3e700000
 8006fa0:	41700000 	.word	0x41700000
 8006fa4:	3fe00000 	.word	0x3fe00000
 8006fa8:	08009580 	.word	0x08009580
 8006fac:	1e62      	subs	r2, r4, #1
 8006fae:	ab0e      	add	r3, sp, #56	; 0x38
 8006fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006fb8:	e7db      	b.n	8006f72 <__kernel_rem_pio2+0x30a>
 8006fba:	a90e      	add	r1, sp, #56	; 0x38
 8006fbc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	e78b      	b.n	8006ede <__kernel_rem_pio2+0x276>
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006fcc:	2900      	cmp	r1, #0
 8006fce:	d0fa      	beq.n	8006fc6 <__kernel_rem_pio2+0x35e>
 8006fd0:	9a08      	ldr	r2, [sp, #32]
 8006fd2:	4422      	add	r2, r4
 8006fd4:	00d2      	lsls	r2, r2, #3
 8006fd6:	a922      	add	r1, sp, #136	; 0x88
 8006fd8:	18e3      	adds	r3, r4, r3
 8006fda:	9206      	str	r2, [sp, #24]
 8006fdc:	440a      	add	r2, r1
 8006fde:	9302      	str	r3, [sp, #8]
 8006fe0:	f10b 0108 	add.w	r1, fp, #8
 8006fe4:	f102 0308 	add.w	r3, r2, #8
 8006fe8:	1c66      	adds	r6, r4, #1
 8006fea:	910a      	str	r1, [sp, #40]	; 0x28
 8006fec:	2500      	movs	r5, #0
 8006fee:	930d      	str	r3, [sp, #52]	; 0x34
 8006ff0:	9b02      	ldr	r3, [sp, #8]
 8006ff2:	42b3      	cmp	r3, r6
 8006ff4:	da04      	bge.n	8007000 <__kernel_rem_pio2+0x398>
 8006ff6:	461c      	mov	r4, r3
 8006ff8:	e6a6      	b.n	8006d48 <__kernel_rem_pio2+0xe0>
 8006ffa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e7e3      	b.n	8006fc8 <__kernel_rem_pio2+0x360>
 8007000:	9b06      	ldr	r3, [sp, #24]
 8007002:	18ef      	adds	r7, r5, r3
 8007004:	ab22      	add	r3, sp, #136	; 0x88
 8007006:	441f      	add	r7, r3
 8007008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800700a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800700e:	f7f9 fa55 	bl	80004bc <__aeabi_i2d>
 8007012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007014:	461c      	mov	r4, r3
 8007016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007018:	e9c7 0100 	strd	r0, r1, [r7]
 800701c:	eb03 0b05 	add.w	fp, r3, r5
 8007020:	2700      	movs	r7, #0
 8007022:	f04f 0800 	mov.w	r8, #0
 8007026:	f04f 0900 	mov.w	r9, #0
 800702a:	9b07      	ldr	r3, [sp, #28]
 800702c:	429f      	cmp	r7, r3
 800702e:	dd08      	ble.n	8007042 <__kernel_rem_pio2+0x3da>
 8007030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007032:	aa72      	add	r2, sp, #456	; 0x1c8
 8007034:	18eb      	adds	r3, r5, r3
 8007036:	4413      	add	r3, r2
 8007038:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800703c:	3601      	adds	r6, #1
 800703e:	3508      	adds	r5, #8
 8007040:	e7d6      	b.n	8006ff0 <__kernel_rem_pio2+0x388>
 8007042:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007046:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800704a:	f7f9 faa1 	bl	8000590 <__aeabi_dmul>
 800704e:	4602      	mov	r2, r0
 8007050:	460b      	mov	r3, r1
 8007052:	4640      	mov	r0, r8
 8007054:	4649      	mov	r1, r9
 8007056:	f7f9 f8e5 	bl	8000224 <__adddf3>
 800705a:	3701      	adds	r7, #1
 800705c:	4680      	mov	r8, r0
 800705e:	4689      	mov	r9, r1
 8007060:	e7e3      	b.n	800702a <__kernel_rem_pio2+0x3c2>
 8007062:	3d01      	subs	r5, #1
 8007064:	e741      	b.n	8006eea <__kernel_rem_pio2+0x282>
 8007066:	f1ca 0000 	rsb	r0, sl, #0
 800706a:	ec47 6b10 	vmov	d0, r6, r7
 800706e:	f000 fa83 	bl	8007578 <scalbn>
 8007072:	ec57 6b10 	vmov	r6, r7, d0
 8007076:	2200      	movs	r2, #0
 8007078:	4b99      	ldr	r3, [pc, #612]	; (80072e0 <__kernel_rem_pio2+0x678>)
 800707a:	ee10 0a10 	vmov	r0, s0
 800707e:	4639      	mov	r1, r7
 8007080:	f7f9 fd0c 	bl	8000a9c <__aeabi_dcmpge>
 8007084:	b1f8      	cbz	r0, 80070c6 <__kernel_rem_pio2+0x45e>
 8007086:	2200      	movs	r2, #0
 8007088:	4b96      	ldr	r3, [pc, #600]	; (80072e4 <__kernel_rem_pio2+0x67c>)
 800708a:	4630      	mov	r0, r6
 800708c:	4639      	mov	r1, r7
 800708e:	f7f9 fa7f 	bl	8000590 <__aeabi_dmul>
 8007092:	f7f9 fd2d 	bl	8000af0 <__aeabi_d2iz>
 8007096:	4680      	mov	r8, r0
 8007098:	f7f9 fa10 	bl	80004bc <__aeabi_i2d>
 800709c:	2200      	movs	r2, #0
 800709e:	4b90      	ldr	r3, [pc, #576]	; (80072e0 <__kernel_rem_pio2+0x678>)
 80070a0:	f7f9 fa76 	bl	8000590 <__aeabi_dmul>
 80070a4:	460b      	mov	r3, r1
 80070a6:	4602      	mov	r2, r0
 80070a8:	4639      	mov	r1, r7
 80070aa:	4630      	mov	r0, r6
 80070ac:	f7f9 f8b8 	bl	8000220 <__aeabi_dsub>
 80070b0:	f7f9 fd1e 	bl	8000af0 <__aeabi_d2iz>
 80070b4:	1c65      	adds	r5, r4, #1
 80070b6:	ab0e      	add	r3, sp, #56	; 0x38
 80070b8:	f10a 0a18 	add.w	sl, sl, #24
 80070bc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80070c0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80070c4:	e719      	b.n	8006efa <__kernel_rem_pio2+0x292>
 80070c6:	4630      	mov	r0, r6
 80070c8:	4639      	mov	r1, r7
 80070ca:	f7f9 fd11 	bl	8000af0 <__aeabi_d2iz>
 80070ce:	ab0e      	add	r3, sp, #56	; 0x38
 80070d0:	4625      	mov	r5, r4
 80070d2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80070d6:	e710      	b.n	8006efa <__kernel_rem_pio2+0x292>
 80070d8:	ab0e      	add	r3, sp, #56	; 0x38
 80070da:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80070de:	f7f9 f9ed 	bl	80004bc <__aeabi_i2d>
 80070e2:	4642      	mov	r2, r8
 80070e4:	464b      	mov	r3, r9
 80070e6:	f7f9 fa53 	bl	8000590 <__aeabi_dmul>
 80070ea:	2200      	movs	r2, #0
 80070ec:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80070f0:	4b7c      	ldr	r3, [pc, #496]	; (80072e4 <__kernel_rem_pio2+0x67c>)
 80070f2:	4640      	mov	r0, r8
 80070f4:	4649      	mov	r1, r9
 80070f6:	f7f9 fa4b 	bl	8000590 <__aeabi_dmul>
 80070fa:	3f01      	subs	r7, #1
 80070fc:	4680      	mov	r8, r0
 80070fe:	4689      	mov	r9, r1
 8007100:	e708      	b.n	8006f14 <__kernel_rem_pio2+0x2ac>
 8007102:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8007106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800710e:	f7f9 fa3f 	bl	8000590 <__aeabi_dmul>
 8007112:	4602      	mov	r2, r0
 8007114:	460b      	mov	r3, r1
 8007116:	4640      	mov	r0, r8
 8007118:	4649      	mov	r1, r9
 800711a:	f7f9 f883 	bl	8000224 <__adddf3>
 800711e:	3701      	adds	r7, #1
 8007120:	4680      	mov	r8, r0
 8007122:	4689      	mov	r9, r1
 8007124:	9b04      	ldr	r3, [sp, #16]
 8007126:	429f      	cmp	r7, r3
 8007128:	dc01      	bgt.n	800712e <__kernel_rem_pio2+0x4c6>
 800712a:	45ba      	cmp	sl, r7
 800712c:	dae9      	bge.n	8007102 <__kernel_rem_pio2+0x49a>
 800712e:	ab4a      	add	r3, sp, #296	; 0x128
 8007130:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007134:	e9c3 8900 	strd	r8, r9, [r3]
 8007138:	f10a 0a01 	add.w	sl, sl, #1
 800713c:	3e08      	subs	r6, #8
 800713e:	e6f0      	b.n	8006f22 <__kernel_rem_pio2+0x2ba>
 8007140:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007142:	2b03      	cmp	r3, #3
 8007144:	d85b      	bhi.n	80071fe <__kernel_rem_pio2+0x596>
 8007146:	e8df f003 	tbb	[pc, r3]
 800714a:	264a      	.short	0x264a
 800714c:	0226      	.short	0x0226
 800714e:	ab9a      	add	r3, sp, #616	; 0x268
 8007150:	441c      	add	r4, r3
 8007152:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007156:	46a2      	mov	sl, r4
 8007158:	46ab      	mov	fp, r5
 800715a:	f1bb 0f00 	cmp.w	fp, #0
 800715e:	dc6c      	bgt.n	800723a <__kernel_rem_pio2+0x5d2>
 8007160:	46a2      	mov	sl, r4
 8007162:	46ab      	mov	fp, r5
 8007164:	f1bb 0f01 	cmp.w	fp, #1
 8007168:	f300 8086 	bgt.w	8007278 <__kernel_rem_pio2+0x610>
 800716c:	2000      	movs	r0, #0
 800716e:	2100      	movs	r1, #0
 8007170:	2d01      	cmp	r5, #1
 8007172:	f300 80a0 	bgt.w	80072b6 <__kernel_rem_pio2+0x64e>
 8007176:	9b02      	ldr	r3, [sp, #8]
 8007178:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800717c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8007180:	2b00      	cmp	r3, #0
 8007182:	f040 809e 	bne.w	80072c2 <__kernel_rem_pio2+0x65a>
 8007186:	9b01      	ldr	r3, [sp, #4]
 8007188:	e9c3 7800 	strd	r7, r8, [r3]
 800718c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007190:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007194:	e033      	b.n	80071fe <__kernel_rem_pio2+0x596>
 8007196:	3408      	adds	r4, #8
 8007198:	ab4a      	add	r3, sp, #296	; 0x128
 800719a:	441c      	add	r4, r3
 800719c:	462e      	mov	r6, r5
 800719e:	2000      	movs	r0, #0
 80071a0:	2100      	movs	r1, #0
 80071a2:	2e00      	cmp	r6, #0
 80071a4:	da3a      	bge.n	800721c <__kernel_rem_pio2+0x5b4>
 80071a6:	9b02      	ldr	r3, [sp, #8]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d03d      	beq.n	8007228 <__kernel_rem_pio2+0x5c0>
 80071ac:	4602      	mov	r2, r0
 80071ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071b2:	9c01      	ldr	r4, [sp, #4]
 80071b4:	e9c4 2300 	strd	r2, r3, [r4]
 80071b8:	4602      	mov	r2, r0
 80071ba:	460b      	mov	r3, r1
 80071bc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80071c0:	f7f9 f82e 	bl	8000220 <__aeabi_dsub>
 80071c4:	ae4c      	add	r6, sp, #304	; 0x130
 80071c6:	2401      	movs	r4, #1
 80071c8:	42a5      	cmp	r5, r4
 80071ca:	da30      	bge.n	800722e <__kernel_rem_pio2+0x5c6>
 80071cc:	9b02      	ldr	r3, [sp, #8]
 80071ce:	b113      	cbz	r3, 80071d6 <__kernel_rem_pio2+0x56e>
 80071d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071d4:	4619      	mov	r1, r3
 80071d6:	9b01      	ldr	r3, [sp, #4]
 80071d8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80071dc:	e00f      	b.n	80071fe <__kernel_rem_pio2+0x596>
 80071de:	ab9a      	add	r3, sp, #616	; 0x268
 80071e0:	441c      	add	r4, r3
 80071e2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80071e6:	2000      	movs	r0, #0
 80071e8:	2100      	movs	r1, #0
 80071ea:	2d00      	cmp	r5, #0
 80071ec:	da10      	bge.n	8007210 <__kernel_rem_pio2+0x5a8>
 80071ee:	9b02      	ldr	r3, [sp, #8]
 80071f0:	b113      	cbz	r3, 80071f8 <__kernel_rem_pio2+0x590>
 80071f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071f6:	4619      	mov	r1, r3
 80071f8:	9b01      	ldr	r3, [sp, #4]
 80071fa:	e9c3 0100 	strd	r0, r1, [r3]
 80071fe:	9b06      	ldr	r3, [sp, #24]
 8007200:	f003 0007 	and.w	r0, r3, #7
 8007204:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007208:	ecbd 8b02 	vpop	{d8}
 800720c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007210:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007214:	f7f9 f806 	bl	8000224 <__adddf3>
 8007218:	3d01      	subs	r5, #1
 800721a:	e7e6      	b.n	80071ea <__kernel_rem_pio2+0x582>
 800721c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007220:	f7f9 f800 	bl	8000224 <__adddf3>
 8007224:	3e01      	subs	r6, #1
 8007226:	e7bc      	b.n	80071a2 <__kernel_rem_pio2+0x53a>
 8007228:	4602      	mov	r2, r0
 800722a:	460b      	mov	r3, r1
 800722c:	e7c1      	b.n	80071b2 <__kernel_rem_pio2+0x54a>
 800722e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007232:	f7f8 fff7 	bl	8000224 <__adddf3>
 8007236:	3401      	adds	r4, #1
 8007238:	e7c6      	b.n	80071c8 <__kernel_rem_pio2+0x560>
 800723a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800723e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8007242:	4640      	mov	r0, r8
 8007244:	ec53 2b17 	vmov	r2, r3, d7
 8007248:	4649      	mov	r1, r9
 800724a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800724e:	f7f8 ffe9 	bl	8000224 <__adddf3>
 8007252:	4602      	mov	r2, r0
 8007254:	460b      	mov	r3, r1
 8007256:	4606      	mov	r6, r0
 8007258:	460f      	mov	r7, r1
 800725a:	4640      	mov	r0, r8
 800725c:	4649      	mov	r1, r9
 800725e:	f7f8 ffdf 	bl	8000220 <__aeabi_dsub>
 8007262:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007266:	f7f8 ffdd 	bl	8000224 <__adddf3>
 800726a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800726e:	e9ca 0100 	strd	r0, r1, [sl]
 8007272:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8007276:	e770      	b.n	800715a <__kernel_rem_pio2+0x4f2>
 8007278:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800727c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8007280:	4630      	mov	r0, r6
 8007282:	ec53 2b17 	vmov	r2, r3, d7
 8007286:	4639      	mov	r1, r7
 8007288:	ed8d 7b04 	vstr	d7, [sp, #16]
 800728c:	f7f8 ffca 	bl	8000224 <__adddf3>
 8007290:	4602      	mov	r2, r0
 8007292:	460b      	mov	r3, r1
 8007294:	4680      	mov	r8, r0
 8007296:	4689      	mov	r9, r1
 8007298:	4630      	mov	r0, r6
 800729a:	4639      	mov	r1, r7
 800729c:	f7f8 ffc0 	bl	8000220 <__aeabi_dsub>
 80072a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072a4:	f7f8 ffbe 	bl	8000224 <__adddf3>
 80072a8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80072ac:	e9ca 0100 	strd	r0, r1, [sl]
 80072b0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80072b4:	e756      	b.n	8007164 <__kernel_rem_pio2+0x4fc>
 80072b6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80072ba:	f7f8 ffb3 	bl	8000224 <__adddf3>
 80072be:	3d01      	subs	r5, #1
 80072c0:	e756      	b.n	8007170 <__kernel_rem_pio2+0x508>
 80072c2:	9b01      	ldr	r3, [sp, #4]
 80072c4:	9a01      	ldr	r2, [sp, #4]
 80072c6:	601f      	str	r7, [r3, #0]
 80072c8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80072cc:	605c      	str	r4, [r3, #4]
 80072ce:	609d      	str	r5, [r3, #8]
 80072d0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80072d4:	60d3      	str	r3, [r2, #12]
 80072d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072da:	6110      	str	r0, [r2, #16]
 80072dc:	6153      	str	r3, [r2, #20]
 80072de:	e78e      	b.n	80071fe <__kernel_rem_pio2+0x596>
 80072e0:	41700000 	.word	0x41700000
 80072e4:	3e700000 	.word	0x3e700000

080072e8 <__kernel_sin>:
 80072e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ec:	ec55 4b10 	vmov	r4, r5, d0
 80072f0:	b085      	sub	sp, #20
 80072f2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80072f6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80072fa:	ed8d 1b00 	vstr	d1, [sp]
 80072fe:	9002      	str	r0, [sp, #8]
 8007300:	da06      	bge.n	8007310 <__kernel_sin+0x28>
 8007302:	ee10 0a10 	vmov	r0, s0
 8007306:	4629      	mov	r1, r5
 8007308:	f7f9 fbf2 	bl	8000af0 <__aeabi_d2iz>
 800730c:	2800      	cmp	r0, #0
 800730e:	d051      	beq.n	80073b4 <__kernel_sin+0xcc>
 8007310:	4622      	mov	r2, r4
 8007312:	462b      	mov	r3, r5
 8007314:	4620      	mov	r0, r4
 8007316:	4629      	mov	r1, r5
 8007318:	f7f9 f93a 	bl	8000590 <__aeabi_dmul>
 800731c:	4682      	mov	sl, r0
 800731e:	468b      	mov	fp, r1
 8007320:	4602      	mov	r2, r0
 8007322:	460b      	mov	r3, r1
 8007324:	4620      	mov	r0, r4
 8007326:	4629      	mov	r1, r5
 8007328:	f7f9 f932 	bl	8000590 <__aeabi_dmul>
 800732c:	a341      	add	r3, pc, #260	; (adr r3, 8007434 <__kernel_sin+0x14c>)
 800732e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007332:	4680      	mov	r8, r0
 8007334:	4689      	mov	r9, r1
 8007336:	4650      	mov	r0, sl
 8007338:	4659      	mov	r1, fp
 800733a:	f7f9 f929 	bl	8000590 <__aeabi_dmul>
 800733e:	a33f      	add	r3, pc, #252	; (adr r3, 800743c <__kernel_sin+0x154>)
 8007340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007344:	f7f8 ff6c 	bl	8000220 <__aeabi_dsub>
 8007348:	4652      	mov	r2, sl
 800734a:	465b      	mov	r3, fp
 800734c:	f7f9 f920 	bl	8000590 <__aeabi_dmul>
 8007350:	a33c      	add	r3, pc, #240	; (adr r3, 8007444 <__kernel_sin+0x15c>)
 8007352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007356:	f7f8 ff65 	bl	8000224 <__adddf3>
 800735a:	4652      	mov	r2, sl
 800735c:	465b      	mov	r3, fp
 800735e:	f7f9 f917 	bl	8000590 <__aeabi_dmul>
 8007362:	a33a      	add	r3, pc, #232	; (adr r3, 800744c <__kernel_sin+0x164>)
 8007364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007368:	f7f8 ff5a 	bl	8000220 <__aeabi_dsub>
 800736c:	4652      	mov	r2, sl
 800736e:	465b      	mov	r3, fp
 8007370:	f7f9 f90e 	bl	8000590 <__aeabi_dmul>
 8007374:	a337      	add	r3, pc, #220	; (adr r3, 8007454 <__kernel_sin+0x16c>)
 8007376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737a:	f7f8 ff53 	bl	8000224 <__adddf3>
 800737e:	9b02      	ldr	r3, [sp, #8]
 8007380:	4606      	mov	r6, r0
 8007382:	460f      	mov	r7, r1
 8007384:	b9db      	cbnz	r3, 80073be <__kernel_sin+0xd6>
 8007386:	4602      	mov	r2, r0
 8007388:	460b      	mov	r3, r1
 800738a:	4650      	mov	r0, sl
 800738c:	4659      	mov	r1, fp
 800738e:	f7f9 f8ff 	bl	8000590 <__aeabi_dmul>
 8007392:	a325      	add	r3, pc, #148	; (adr r3, 8007428 <__kernel_sin+0x140>)
 8007394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007398:	f7f8 ff42 	bl	8000220 <__aeabi_dsub>
 800739c:	4642      	mov	r2, r8
 800739e:	464b      	mov	r3, r9
 80073a0:	f7f9 f8f6 	bl	8000590 <__aeabi_dmul>
 80073a4:	4602      	mov	r2, r0
 80073a6:	460b      	mov	r3, r1
 80073a8:	4620      	mov	r0, r4
 80073aa:	4629      	mov	r1, r5
 80073ac:	f7f8 ff3a 	bl	8000224 <__adddf3>
 80073b0:	4604      	mov	r4, r0
 80073b2:	460d      	mov	r5, r1
 80073b4:	ec45 4b10 	vmov	d0, r4, r5
 80073b8:	b005      	add	sp, #20
 80073ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073be:	2200      	movs	r2, #0
 80073c0:	4b1b      	ldr	r3, [pc, #108]	; (8007430 <__kernel_sin+0x148>)
 80073c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073c6:	f7f9 f8e3 	bl	8000590 <__aeabi_dmul>
 80073ca:	4632      	mov	r2, r6
 80073cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073d0:	463b      	mov	r3, r7
 80073d2:	4640      	mov	r0, r8
 80073d4:	4649      	mov	r1, r9
 80073d6:	f7f9 f8db 	bl	8000590 <__aeabi_dmul>
 80073da:	4602      	mov	r2, r0
 80073dc:	460b      	mov	r3, r1
 80073de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073e2:	f7f8 ff1d 	bl	8000220 <__aeabi_dsub>
 80073e6:	4652      	mov	r2, sl
 80073e8:	465b      	mov	r3, fp
 80073ea:	f7f9 f8d1 	bl	8000590 <__aeabi_dmul>
 80073ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073f2:	f7f8 ff15 	bl	8000220 <__aeabi_dsub>
 80073f6:	a30c      	add	r3, pc, #48	; (adr r3, 8007428 <__kernel_sin+0x140>)
 80073f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fc:	4606      	mov	r6, r0
 80073fe:	460f      	mov	r7, r1
 8007400:	4640      	mov	r0, r8
 8007402:	4649      	mov	r1, r9
 8007404:	f7f9 f8c4 	bl	8000590 <__aeabi_dmul>
 8007408:	4602      	mov	r2, r0
 800740a:	460b      	mov	r3, r1
 800740c:	4630      	mov	r0, r6
 800740e:	4639      	mov	r1, r7
 8007410:	f7f8 ff08 	bl	8000224 <__adddf3>
 8007414:	4602      	mov	r2, r0
 8007416:	460b      	mov	r3, r1
 8007418:	4620      	mov	r0, r4
 800741a:	4629      	mov	r1, r5
 800741c:	f7f8 ff00 	bl	8000220 <__aeabi_dsub>
 8007420:	e7c6      	b.n	80073b0 <__kernel_sin+0xc8>
 8007422:	bf00      	nop
 8007424:	f3af 8000 	nop.w
 8007428:	55555549 	.word	0x55555549
 800742c:	3fc55555 	.word	0x3fc55555
 8007430:	3fe00000 	.word	0x3fe00000
 8007434:	5acfd57c 	.word	0x5acfd57c
 8007438:	3de5d93a 	.word	0x3de5d93a
 800743c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007440:	3e5ae5e6 	.word	0x3e5ae5e6
 8007444:	57b1fe7d 	.word	0x57b1fe7d
 8007448:	3ec71de3 	.word	0x3ec71de3
 800744c:	19c161d5 	.word	0x19c161d5
 8007450:	3f2a01a0 	.word	0x3f2a01a0
 8007454:	1110f8a6 	.word	0x1110f8a6
 8007458:	3f811111 	.word	0x3f811111

0800745c <fabs>:
 800745c:	ec51 0b10 	vmov	r0, r1, d0
 8007460:	ee10 2a10 	vmov	r2, s0
 8007464:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007468:	ec43 2b10 	vmov	d0, r2, r3
 800746c:	4770      	bx	lr
	...

08007470 <floor>:
 8007470:	ec51 0b10 	vmov	r0, r1, d0
 8007474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007478:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800747c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007480:	2e13      	cmp	r6, #19
 8007482:	460c      	mov	r4, r1
 8007484:	ee10 5a10 	vmov	r5, s0
 8007488:	4680      	mov	r8, r0
 800748a:	dc34      	bgt.n	80074f6 <floor+0x86>
 800748c:	2e00      	cmp	r6, #0
 800748e:	da16      	bge.n	80074be <floor+0x4e>
 8007490:	a335      	add	r3, pc, #212	; (adr r3, 8007568 <floor+0xf8>)
 8007492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007496:	f7f8 fec5 	bl	8000224 <__adddf3>
 800749a:	2200      	movs	r2, #0
 800749c:	2300      	movs	r3, #0
 800749e:	f7f9 fb07 	bl	8000ab0 <__aeabi_dcmpgt>
 80074a2:	b148      	cbz	r0, 80074b8 <floor+0x48>
 80074a4:	2c00      	cmp	r4, #0
 80074a6:	da59      	bge.n	800755c <floor+0xec>
 80074a8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80074ac:	4a30      	ldr	r2, [pc, #192]	; (8007570 <floor+0x100>)
 80074ae:	432b      	orrs	r3, r5
 80074b0:	2500      	movs	r5, #0
 80074b2:	42ab      	cmp	r3, r5
 80074b4:	bf18      	it	ne
 80074b6:	4614      	movne	r4, r2
 80074b8:	4621      	mov	r1, r4
 80074ba:	4628      	mov	r0, r5
 80074bc:	e025      	b.n	800750a <floor+0x9a>
 80074be:	4f2d      	ldr	r7, [pc, #180]	; (8007574 <floor+0x104>)
 80074c0:	4137      	asrs	r7, r6
 80074c2:	ea01 0307 	and.w	r3, r1, r7
 80074c6:	4303      	orrs	r3, r0
 80074c8:	d01f      	beq.n	800750a <floor+0x9a>
 80074ca:	a327      	add	r3, pc, #156	; (adr r3, 8007568 <floor+0xf8>)
 80074cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d0:	f7f8 fea8 	bl	8000224 <__adddf3>
 80074d4:	2200      	movs	r2, #0
 80074d6:	2300      	movs	r3, #0
 80074d8:	f7f9 faea 	bl	8000ab0 <__aeabi_dcmpgt>
 80074dc:	2800      	cmp	r0, #0
 80074de:	d0eb      	beq.n	80074b8 <floor+0x48>
 80074e0:	2c00      	cmp	r4, #0
 80074e2:	bfbe      	ittt	lt
 80074e4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80074e8:	fa43 f606 	asrlt.w	r6, r3, r6
 80074ec:	19a4      	addlt	r4, r4, r6
 80074ee:	ea24 0407 	bic.w	r4, r4, r7
 80074f2:	2500      	movs	r5, #0
 80074f4:	e7e0      	b.n	80074b8 <floor+0x48>
 80074f6:	2e33      	cmp	r6, #51	; 0x33
 80074f8:	dd0b      	ble.n	8007512 <floor+0xa2>
 80074fa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80074fe:	d104      	bne.n	800750a <floor+0x9a>
 8007500:	ee10 2a10 	vmov	r2, s0
 8007504:	460b      	mov	r3, r1
 8007506:	f7f8 fe8d 	bl	8000224 <__adddf3>
 800750a:	ec41 0b10 	vmov	d0, r0, r1
 800750e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007512:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800751a:	fa23 f707 	lsr.w	r7, r3, r7
 800751e:	4207      	tst	r7, r0
 8007520:	d0f3      	beq.n	800750a <floor+0x9a>
 8007522:	a311      	add	r3, pc, #68	; (adr r3, 8007568 <floor+0xf8>)
 8007524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007528:	f7f8 fe7c 	bl	8000224 <__adddf3>
 800752c:	2200      	movs	r2, #0
 800752e:	2300      	movs	r3, #0
 8007530:	f7f9 fabe 	bl	8000ab0 <__aeabi_dcmpgt>
 8007534:	2800      	cmp	r0, #0
 8007536:	d0bf      	beq.n	80074b8 <floor+0x48>
 8007538:	2c00      	cmp	r4, #0
 800753a:	da02      	bge.n	8007542 <floor+0xd2>
 800753c:	2e14      	cmp	r6, #20
 800753e:	d103      	bne.n	8007548 <floor+0xd8>
 8007540:	3401      	adds	r4, #1
 8007542:	ea25 0507 	bic.w	r5, r5, r7
 8007546:	e7b7      	b.n	80074b8 <floor+0x48>
 8007548:	2301      	movs	r3, #1
 800754a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800754e:	fa03 f606 	lsl.w	r6, r3, r6
 8007552:	4435      	add	r5, r6
 8007554:	4545      	cmp	r5, r8
 8007556:	bf38      	it	cc
 8007558:	18e4      	addcc	r4, r4, r3
 800755a:	e7f2      	b.n	8007542 <floor+0xd2>
 800755c:	2500      	movs	r5, #0
 800755e:	462c      	mov	r4, r5
 8007560:	e7aa      	b.n	80074b8 <floor+0x48>
 8007562:	bf00      	nop
 8007564:	f3af 8000 	nop.w
 8007568:	8800759c 	.word	0x8800759c
 800756c:	7e37e43c 	.word	0x7e37e43c
 8007570:	bff00000 	.word	0xbff00000
 8007574:	000fffff 	.word	0x000fffff

08007578 <scalbn>:
 8007578:	b570      	push	{r4, r5, r6, lr}
 800757a:	ec55 4b10 	vmov	r4, r5, d0
 800757e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007582:	4606      	mov	r6, r0
 8007584:	462b      	mov	r3, r5
 8007586:	b9aa      	cbnz	r2, 80075b4 <scalbn+0x3c>
 8007588:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800758c:	4323      	orrs	r3, r4
 800758e:	d03b      	beq.n	8007608 <scalbn+0x90>
 8007590:	4b31      	ldr	r3, [pc, #196]	; (8007658 <scalbn+0xe0>)
 8007592:	4629      	mov	r1, r5
 8007594:	2200      	movs	r2, #0
 8007596:	ee10 0a10 	vmov	r0, s0
 800759a:	f7f8 fff9 	bl	8000590 <__aeabi_dmul>
 800759e:	4b2f      	ldr	r3, [pc, #188]	; (800765c <scalbn+0xe4>)
 80075a0:	429e      	cmp	r6, r3
 80075a2:	4604      	mov	r4, r0
 80075a4:	460d      	mov	r5, r1
 80075a6:	da12      	bge.n	80075ce <scalbn+0x56>
 80075a8:	a327      	add	r3, pc, #156	; (adr r3, 8007648 <scalbn+0xd0>)
 80075aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ae:	f7f8 ffef 	bl	8000590 <__aeabi_dmul>
 80075b2:	e009      	b.n	80075c8 <scalbn+0x50>
 80075b4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80075b8:	428a      	cmp	r2, r1
 80075ba:	d10c      	bne.n	80075d6 <scalbn+0x5e>
 80075bc:	ee10 2a10 	vmov	r2, s0
 80075c0:	4620      	mov	r0, r4
 80075c2:	4629      	mov	r1, r5
 80075c4:	f7f8 fe2e 	bl	8000224 <__adddf3>
 80075c8:	4604      	mov	r4, r0
 80075ca:	460d      	mov	r5, r1
 80075cc:	e01c      	b.n	8007608 <scalbn+0x90>
 80075ce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80075d2:	460b      	mov	r3, r1
 80075d4:	3a36      	subs	r2, #54	; 0x36
 80075d6:	4432      	add	r2, r6
 80075d8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80075dc:	428a      	cmp	r2, r1
 80075de:	dd0b      	ble.n	80075f8 <scalbn+0x80>
 80075e0:	ec45 4b11 	vmov	d1, r4, r5
 80075e4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007650 <scalbn+0xd8>
 80075e8:	f000 f83c 	bl	8007664 <copysign>
 80075ec:	a318      	add	r3, pc, #96	; (adr r3, 8007650 <scalbn+0xd8>)
 80075ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f2:	ec51 0b10 	vmov	r0, r1, d0
 80075f6:	e7da      	b.n	80075ae <scalbn+0x36>
 80075f8:	2a00      	cmp	r2, #0
 80075fa:	dd08      	ble.n	800760e <scalbn+0x96>
 80075fc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007600:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007604:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007608:	ec45 4b10 	vmov	d0, r4, r5
 800760c:	bd70      	pop	{r4, r5, r6, pc}
 800760e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007612:	da0d      	bge.n	8007630 <scalbn+0xb8>
 8007614:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007618:	429e      	cmp	r6, r3
 800761a:	ec45 4b11 	vmov	d1, r4, r5
 800761e:	dce1      	bgt.n	80075e4 <scalbn+0x6c>
 8007620:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007648 <scalbn+0xd0>
 8007624:	f000 f81e 	bl	8007664 <copysign>
 8007628:	a307      	add	r3, pc, #28	; (adr r3, 8007648 <scalbn+0xd0>)
 800762a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762e:	e7e0      	b.n	80075f2 <scalbn+0x7a>
 8007630:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007634:	3236      	adds	r2, #54	; 0x36
 8007636:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800763a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800763e:	4620      	mov	r0, r4
 8007640:	4629      	mov	r1, r5
 8007642:	2200      	movs	r2, #0
 8007644:	4b06      	ldr	r3, [pc, #24]	; (8007660 <scalbn+0xe8>)
 8007646:	e7b2      	b.n	80075ae <scalbn+0x36>
 8007648:	c2f8f359 	.word	0xc2f8f359
 800764c:	01a56e1f 	.word	0x01a56e1f
 8007650:	8800759c 	.word	0x8800759c
 8007654:	7e37e43c 	.word	0x7e37e43c
 8007658:	43500000 	.word	0x43500000
 800765c:	ffff3cb0 	.word	0xffff3cb0
 8007660:	3c900000 	.word	0x3c900000

08007664 <copysign>:
 8007664:	ec51 0b10 	vmov	r0, r1, d0
 8007668:	ee11 0a90 	vmov	r0, s3
 800766c:	ee10 2a10 	vmov	r2, s0
 8007670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007674:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007678:	ea41 0300 	orr.w	r3, r1, r0
 800767c:	ec43 2b10 	vmov	d0, r2, r3
 8007680:	4770      	bx	lr

08007682 <abort>:
 8007682:	b508      	push	{r3, lr}
 8007684:	2006      	movs	r0, #6
 8007686:	f000 fc93 	bl	8007fb0 <raise>
 800768a:	2001      	movs	r0, #1
 800768c:	f7fe f8e0 	bl	8005850 <_exit>

08007690 <__errno>:
 8007690:	4b01      	ldr	r3, [pc, #4]	; (8007698 <__errno+0x8>)
 8007692:	6818      	ldr	r0, [r3, #0]
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	2000000c 	.word	0x2000000c

0800769c <__libc_init_array>:
 800769c:	b570      	push	{r4, r5, r6, lr}
 800769e:	4e0d      	ldr	r6, [pc, #52]	; (80076d4 <__libc_init_array+0x38>)
 80076a0:	4c0d      	ldr	r4, [pc, #52]	; (80076d8 <__libc_init_array+0x3c>)
 80076a2:	1ba4      	subs	r4, r4, r6
 80076a4:	10a4      	asrs	r4, r4, #2
 80076a6:	2500      	movs	r5, #0
 80076a8:	42a5      	cmp	r5, r4
 80076aa:	d109      	bne.n	80076c0 <__libc_init_array+0x24>
 80076ac:	4e0b      	ldr	r6, [pc, #44]	; (80076dc <__libc_init_array+0x40>)
 80076ae:	4c0c      	ldr	r4, [pc, #48]	; (80076e0 <__libc_init_array+0x44>)
 80076b0:	f001 fdf8 	bl	80092a4 <_init>
 80076b4:	1ba4      	subs	r4, r4, r6
 80076b6:	10a4      	asrs	r4, r4, #2
 80076b8:	2500      	movs	r5, #0
 80076ba:	42a5      	cmp	r5, r4
 80076bc:	d105      	bne.n	80076ca <__libc_init_array+0x2e>
 80076be:	bd70      	pop	{r4, r5, r6, pc}
 80076c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076c4:	4798      	blx	r3
 80076c6:	3501      	adds	r5, #1
 80076c8:	e7ee      	b.n	80076a8 <__libc_init_array+0xc>
 80076ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076ce:	4798      	blx	r3
 80076d0:	3501      	adds	r5, #1
 80076d2:	e7f2      	b.n	80076ba <__libc_init_array+0x1e>
 80076d4:	08009800 	.word	0x08009800
 80076d8:	08009800 	.word	0x08009800
 80076dc:	08009800 	.word	0x08009800
 80076e0:	08009808 	.word	0x08009808

080076e4 <malloc>:
 80076e4:	4b02      	ldr	r3, [pc, #8]	; (80076f0 <malloc+0xc>)
 80076e6:	4601      	mov	r1, r0
 80076e8:	6818      	ldr	r0, [r3, #0]
 80076ea:	f000 b885 	b.w	80077f8 <_malloc_r>
 80076ee:	bf00      	nop
 80076f0:	2000000c 	.word	0x2000000c

080076f4 <free>:
 80076f4:	4b02      	ldr	r3, [pc, #8]	; (8007700 <free+0xc>)
 80076f6:	4601      	mov	r1, r0
 80076f8:	6818      	ldr	r0, [r3, #0]
 80076fa:	f000 b82f 	b.w	800775c <_free_r>
 80076fe:	bf00      	nop
 8007700:	2000000c 	.word	0x2000000c

08007704 <memcpy>:
 8007704:	b510      	push	{r4, lr}
 8007706:	1e43      	subs	r3, r0, #1
 8007708:	440a      	add	r2, r1
 800770a:	4291      	cmp	r1, r2
 800770c:	d100      	bne.n	8007710 <memcpy+0xc>
 800770e:	bd10      	pop	{r4, pc}
 8007710:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007714:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007718:	e7f7      	b.n	800770a <memcpy+0x6>

0800771a <memmove>:
 800771a:	4288      	cmp	r0, r1
 800771c:	b510      	push	{r4, lr}
 800771e:	eb01 0302 	add.w	r3, r1, r2
 8007722:	d807      	bhi.n	8007734 <memmove+0x1a>
 8007724:	1e42      	subs	r2, r0, #1
 8007726:	4299      	cmp	r1, r3
 8007728:	d00a      	beq.n	8007740 <memmove+0x26>
 800772a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800772e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007732:	e7f8      	b.n	8007726 <memmove+0xc>
 8007734:	4283      	cmp	r3, r0
 8007736:	d9f5      	bls.n	8007724 <memmove+0xa>
 8007738:	1881      	adds	r1, r0, r2
 800773a:	1ad2      	subs	r2, r2, r3
 800773c:	42d3      	cmn	r3, r2
 800773e:	d100      	bne.n	8007742 <memmove+0x28>
 8007740:	bd10      	pop	{r4, pc}
 8007742:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007746:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800774a:	e7f7      	b.n	800773c <memmove+0x22>

0800774c <memset>:
 800774c:	4402      	add	r2, r0
 800774e:	4603      	mov	r3, r0
 8007750:	4293      	cmp	r3, r2
 8007752:	d100      	bne.n	8007756 <memset+0xa>
 8007754:	4770      	bx	lr
 8007756:	f803 1b01 	strb.w	r1, [r3], #1
 800775a:	e7f9      	b.n	8007750 <memset+0x4>

0800775c <_free_r>:
 800775c:	b538      	push	{r3, r4, r5, lr}
 800775e:	4605      	mov	r5, r0
 8007760:	2900      	cmp	r1, #0
 8007762:	d045      	beq.n	80077f0 <_free_r+0x94>
 8007764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007768:	1f0c      	subs	r4, r1, #4
 800776a:	2b00      	cmp	r3, #0
 800776c:	bfb8      	it	lt
 800776e:	18e4      	addlt	r4, r4, r3
 8007770:	f001 fa8c 	bl	8008c8c <__malloc_lock>
 8007774:	4a1f      	ldr	r2, [pc, #124]	; (80077f4 <_free_r+0x98>)
 8007776:	6813      	ldr	r3, [r2, #0]
 8007778:	4610      	mov	r0, r2
 800777a:	b933      	cbnz	r3, 800778a <_free_r+0x2e>
 800777c:	6063      	str	r3, [r4, #4]
 800777e:	6014      	str	r4, [r2, #0]
 8007780:	4628      	mov	r0, r5
 8007782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007786:	f001 ba82 	b.w	8008c8e <__malloc_unlock>
 800778a:	42a3      	cmp	r3, r4
 800778c:	d90c      	bls.n	80077a8 <_free_r+0x4c>
 800778e:	6821      	ldr	r1, [r4, #0]
 8007790:	1862      	adds	r2, r4, r1
 8007792:	4293      	cmp	r3, r2
 8007794:	bf04      	itt	eq
 8007796:	681a      	ldreq	r2, [r3, #0]
 8007798:	685b      	ldreq	r3, [r3, #4]
 800779a:	6063      	str	r3, [r4, #4]
 800779c:	bf04      	itt	eq
 800779e:	1852      	addeq	r2, r2, r1
 80077a0:	6022      	streq	r2, [r4, #0]
 80077a2:	6004      	str	r4, [r0, #0]
 80077a4:	e7ec      	b.n	8007780 <_free_r+0x24>
 80077a6:	4613      	mov	r3, r2
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	b10a      	cbz	r2, 80077b0 <_free_r+0x54>
 80077ac:	42a2      	cmp	r2, r4
 80077ae:	d9fa      	bls.n	80077a6 <_free_r+0x4a>
 80077b0:	6819      	ldr	r1, [r3, #0]
 80077b2:	1858      	adds	r0, r3, r1
 80077b4:	42a0      	cmp	r0, r4
 80077b6:	d10b      	bne.n	80077d0 <_free_r+0x74>
 80077b8:	6820      	ldr	r0, [r4, #0]
 80077ba:	4401      	add	r1, r0
 80077bc:	1858      	adds	r0, r3, r1
 80077be:	4282      	cmp	r2, r0
 80077c0:	6019      	str	r1, [r3, #0]
 80077c2:	d1dd      	bne.n	8007780 <_free_r+0x24>
 80077c4:	6810      	ldr	r0, [r2, #0]
 80077c6:	6852      	ldr	r2, [r2, #4]
 80077c8:	605a      	str	r2, [r3, #4]
 80077ca:	4401      	add	r1, r0
 80077cc:	6019      	str	r1, [r3, #0]
 80077ce:	e7d7      	b.n	8007780 <_free_r+0x24>
 80077d0:	d902      	bls.n	80077d8 <_free_r+0x7c>
 80077d2:	230c      	movs	r3, #12
 80077d4:	602b      	str	r3, [r5, #0]
 80077d6:	e7d3      	b.n	8007780 <_free_r+0x24>
 80077d8:	6820      	ldr	r0, [r4, #0]
 80077da:	1821      	adds	r1, r4, r0
 80077dc:	428a      	cmp	r2, r1
 80077de:	bf04      	itt	eq
 80077e0:	6811      	ldreq	r1, [r2, #0]
 80077e2:	6852      	ldreq	r2, [r2, #4]
 80077e4:	6062      	str	r2, [r4, #4]
 80077e6:	bf04      	itt	eq
 80077e8:	1809      	addeq	r1, r1, r0
 80077ea:	6021      	streq	r1, [r4, #0]
 80077ec:	605c      	str	r4, [r3, #4]
 80077ee:	e7c7      	b.n	8007780 <_free_r+0x24>
 80077f0:	bd38      	pop	{r3, r4, r5, pc}
 80077f2:	bf00      	nop
 80077f4:	200002b4 	.word	0x200002b4

080077f8 <_malloc_r>:
 80077f8:	b570      	push	{r4, r5, r6, lr}
 80077fa:	1ccd      	adds	r5, r1, #3
 80077fc:	f025 0503 	bic.w	r5, r5, #3
 8007800:	3508      	adds	r5, #8
 8007802:	2d0c      	cmp	r5, #12
 8007804:	bf38      	it	cc
 8007806:	250c      	movcc	r5, #12
 8007808:	2d00      	cmp	r5, #0
 800780a:	4606      	mov	r6, r0
 800780c:	db01      	blt.n	8007812 <_malloc_r+0x1a>
 800780e:	42a9      	cmp	r1, r5
 8007810:	d903      	bls.n	800781a <_malloc_r+0x22>
 8007812:	230c      	movs	r3, #12
 8007814:	6033      	str	r3, [r6, #0]
 8007816:	2000      	movs	r0, #0
 8007818:	bd70      	pop	{r4, r5, r6, pc}
 800781a:	f001 fa37 	bl	8008c8c <__malloc_lock>
 800781e:	4a21      	ldr	r2, [pc, #132]	; (80078a4 <_malloc_r+0xac>)
 8007820:	6814      	ldr	r4, [r2, #0]
 8007822:	4621      	mov	r1, r4
 8007824:	b991      	cbnz	r1, 800784c <_malloc_r+0x54>
 8007826:	4c20      	ldr	r4, [pc, #128]	; (80078a8 <_malloc_r+0xb0>)
 8007828:	6823      	ldr	r3, [r4, #0]
 800782a:	b91b      	cbnz	r3, 8007834 <_malloc_r+0x3c>
 800782c:	4630      	mov	r0, r6
 800782e:	f000 fb87 	bl	8007f40 <_sbrk_r>
 8007832:	6020      	str	r0, [r4, #0]
 8007834:	4629      	mov	r1, r5
 8007836:	4630      	mov	r0, r6
 8007838:	f000 fb82 	bl	8007f40 <_sbrk_r>
 800783c:	1c43      	adds	r3, r0, #1
 800783e:	d124      	bne.n	800788a <_malloc_r+0x92>
 8007840:	230c      	movs	r3, #12
 8007842:	6033      	str	r3, [r6, #0]
 8007844:	4630      	mov	r0, r6
 8007846:	f001 fa22 	bl	8008c8e <__malloc_unlock>
 800784a:	e7e4      	b.n	8007816 <_malloc_r+0x1e>
 800784c:	680b      	ldr	r3, [r1, #0]
 800784e:	1b5b      	subs	r3, r3, r5
 8007850:	d418      	bmi.n	8007884 <_malloc_r+0x8c>
 8007852:	2b0b      	cmp	r3, #11
 8007854:	d90f      	bls.n	8007876 <_malloc_r+0x7e>
 8007856:	600b      	str	r3, [r1, #0]
 8007858:	50cd      	str	r5, [r1, r3]
 800785a:	18cc      	adds	r4, r1, r3
 800785c:	4630      	mov	r0, r6
 800785e:	f001 fa16 	bl	8008c8e <__malloc_unlock>
 8007862:	f104 000b 	add.w	r0, r4, #11
 8007866:	1d23      	adds	r3, r4, #4
 8007868:	f020 0007 	bic.w	r0, r0, #7
 800786c:	1ac3      	subs	r3, r0, r3
 800786e:	d0d3      	beq.n	8007818 <_malloc_r+0x20>
 8007870:	425a      	negs	r2, r3
 8007872:	50e2      	str	r2, [r4, r3]
 8007874:	e7d0      	b.n	8007818 <_malloc_r+0x20>
 8007876:	428c      	cmp	r4, r1
 8007878:	684b      	ldr	r3, [r1, #4]
 800787a:	bf16      	itet	ne
 800787c:	6063      	strne	r3, [r4, #4]
 800787e:	6013      	streq	r3, [r2, #0]
 8007880:	460c      	movne	r4, r1
 8007882:	e7eb      	b.n	800785c <_malloc_r+0x64>
 8007884:	460c      	mov	r4, r1
 8007886:	6849      	ldr	r1, [r1, #4]
 8007888:	e7cc      	b.n	8007824 <_malloc_r+0x2c>
 800788a:	1cc4      	adds	r4, r0, #3
 800788c:	f024 0403 	bic.w	r4, r4, #3
 8007890:	42a0      	cmp	r0, r4
 8007892:	d005      	beq.n	80078a0 <_malloc_r+0xa8>
 8007894:	1a21      	subs	r1, r4, r0
 8007896:	4630      	mov	r0, r6
 8007898:	f000 fb52 	bl	8007f40 <_sbrk_r>
 800789c:	3001      	adds	r0, #1
 800789e:	d0cf      	beq.n	8007840 <_malloc_r+0x48>
 80078a0:	6025      	str	r5, [r4, #0]
 80078a2:	e7db      	b.n	800785c <_malloc_r+0x64>
 80078a4:	200002b4 	.word	0x200002b4
 80078a8:	200002b8 	.word	0x200002b8

080078ac <__cvt>:
 80078ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078b0:	ec55 4b10 	vmov	r4, r5, d0
 80078b4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80078b6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80078ba:	2d00      	cmp	r5, #0
 80078bc:	460e      	mov	r6, r1
 80078be:	4691      	mov	r9, r2
 80078c0:	4619      	mov	r1, r3
 80078c2:	bfb8      	it	lt
 80078c4:	4622      	movlt	r2, r4
 80078c6:	462b      	mov	r3, r5
 80078c8:	f027 0720 	bic.w	r7, r7, #32
 80078cc:	bfbb      	ittet	lt
 80078ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80078d2:	461d      	movlt	r5, r3
 80078d4:	2300      	movge	r3, #0
 80078d6:	232d      	movlt	r3, #45	; 0x2d
 80078d8:	bfb8      	it	lt
 80078da:	4614      	movlt	r4, r2
 80078dc:	2f46      	cmp	r7, #70	; 0x46
 80078de:	700b      	strb	r3, [r1, #0]
 80078e0:	d004      	beq.n	80078ec <__cvt+0x40>
 80078e2:	2f45      	cmp	r7, #69	; 0x45
 80078e4:	d100      	bne.n	80078e8 <__cvt+0x3c>
 80078e6:	3601      	adds	r6, #1
 80078e8:	2102      	movs	r1, #2
 80078ea:	e000      	b.n	80078ee <__cvt+0x42>
 80078ec:	2103      	movs	r1, #3
 80078ee:	ab03      	add	r3, sp, #12
 80078f0:	9301      	str	r3, [sp, #4]
 80078f2:	ab02      	add	r3, sp, #8
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	4632      	mov	r2, r6
 80078f8:	4653      	mov	r3, sl
 80078fa:	ec45 4b10 	vmov	d0, r4, r5
 80078fe:	f000 fbff 	bl	8008100 <_dtoa_r>
 8007902:	2f47      	cmp	r7, #71	; 0x47
 8007904:	4680      	mov	r8, r0
 8007906:	d102      	bne.n	800790e <__cvt+0x62>
 8007908:	f019 0f01 	tst.w	r9, #1
 800790c:	d026      	beq.n	800795c <__cvt+0xb0>
 800790e:	2f46      	cmp	r7, #70	; 0x46
 8007910:	eb08 0906 	add.w	r9, r8, r6
 8007914:	d111      	bne.n	800793a <__cvt+0x8e>
 8007916:	f898 3000 	ldrb.w	r3, [r8]
 800791a:	2b30      	cmp	r3, #48	; 0x30
 800791c:	d10a      	bne.n	8007934 <__cvt+0x88>
 800791e:	2200      	movs	r2, #0
 8007920:	2300      	movs	r3, #0
 8007922:	4620      	mov	r0, r4
 8007924:	4629      	mov	r1, r5
 8007926:	f7f9 f89b 	bl	8000a60 <__aeabi_dcmpeq>
 800792a:	b918      	cbnz	r0, 8007934 <__cvt+0x88>
 800792c:	f1c6 0601 	rsb	r6, r6, #1
 8007930:	f8ca 6000 	str.w	r6, [sl]
 8007934:	f8da 3000 	ldr.w	r3, [sl]
 8007938:	4499      	add	r9, r3
 800793a:	2200      	movs	r2, #0
 800793c:	2300      	movs	r3, #0
 800793e:	4620      	mov	r0, r4
 8007940:	4629      	mov	r1, r5
 8007942:	f7f9 f88d 	bl	8000a60 <__aeabi_dcmpeq>
 8007946:	b938      	cbnz	r0, 8007958 <__cvt+0xac>
 8007948:	2230      	movs	r2, #48	; 0x30
 800794a:	9b03      	ldr	r3, [sp, #12]
 800794c:	454b      	cmp	r3, r9
 800794e:	d205      	bcs.n	800795c <__cvt+0xb0>
 8007950:	1c59      	adds	r1, r3, #1
 8007952:	9103      	str	r1, [sp, #12]
 8007954:	701a      	strb	r2, [r3, #0]
 8007956:	e7f8      	b.n	800794a <__cvt+0x9e>
 8007958:	f8cd 900c 	str.w	r9, [sp, #12]
 800795c:	9b03      	ldr	r3, [sp, #12]
 800795e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007960:	eba3 0308 	sub.w	r3, r3, r8
 8007964:	4640      	mov	r0, r8
 8007966:	6013      	str	r3, [r2, #0]
 8007968:	b004      	add	sp, #16
 800796a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800796e <__exponent>:
 800796e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007970:	2900      	cmp	r1, #0
 8007972:	4604      	mov	r4, r0
 8007974:	bfba      	itte	lt
 8007976:	4249      	neglt	r1, r1
 8007978:	232d      	movlt	r3, #45	; 0x2d
 800797a:	232b      	movge	r3, #43	; 0x2b
 800797c:	2909      	cmp	r1, #9
 800797e:	f804 2b02 	strb.w	r2, [r4], #2
 8007982:	7043      	strb	r3, [r0, #1]
 8007984:	dd20      	ble.n	80079c8 <__exponent+0x5a>
 8007986:	f10d 0307 	add.w	r3, sp, #7
 800798a:	461f      	mov	r7, r3
 800798c:	260a      	movs	r6, #10
 800798e:	fb91 f5f6 	sdiv	r5, r1, r6
 8007992:	fb06 1115 	mls	r1, r6, r5, r1
 8007996:	3130      	adds	r1, #48	; 0x30
 8007998:	2d09      	cmp	r5, #9
 800799a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800799e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80079a2:	4629      	mov	r1, r5
 80079a4:	dc09      	bgt.n	80079ba <__exponent+0x4c>
 80079a6:	3130      	adds	r1, #48	; 0x30
 80079a8:	3b02      	subs	r3, #2
 80079aa:	f802 1c01 	strb.w	r1, [r2, #-1]
 80079ae:	42bb      	cmp	r3, r7
 80079b0:	4622      	mov	r2, r4
 80079b2:	d304      	bcc.n	80079be <__exponent+0x50>
 80079b4:	1a10      	subs	r0, r2, r0
 80079b6:	b003      	add	sp, #12
 80079b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079ba:	4613      	mov	r3, r2
 80079bc:	e7e7      	b.n	800798e <__exponent+0x20>
 80079be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079c2:	f804 2b01 	strb.w	r2, [r4], #1
 80079c6:	e7f2      	b.n	80079ae <__exponent+0x40>
 80079c8:	2330      	movs	r3, #48	; 0x30
 80079ca:	4419      	add	r1, r3
 80079cc:	7083      	strb	r3, [r0, #2]
 80079ce:	1d02      	adds	r2, r0, #4
 80079d0:	70c1      	strb	r1, [r0, #3]
 80079d2:	e7ef      	b.n	80079b4 <__exponent+0x46>

080079d4 <_printf_float>:
 80079d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d8:	b08d      	sub	sp, #52	; 0x34
 80079da:	460c      	mov	r4, r1
 80079dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80079e0:	4616      	mov	r6, r2
 80079e2:	461f      	mov	r7, r3
 80079e4:	4605      	mov	r5, r0
 80079e6:	f001 f943 	bl	8008c70 <_localeconv_r>
 80079ea:	6803      	ldr	r3, [r0, #0]
 80079ec:	9304      	str	r3, [sp, #16]
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7f8 fc0a 	bl	8000208 <strlen>
 80079f4:	2300      	movs	r3, #0
 80079f6:	930a      	str	r3, [sp, #40]	; 0x28
 80079f8:	f8d8 3000 	ldr.w	r3, [r8]
 80079fc:	9005      	str	r0, [sp, #20]
 80079fe:	3307      	adds	r3, #7
 8007a00:	f023 0307 	bic.w	r3, r3, #7
 8007a04:	f103 0208 	add.w	r2, r3, #8
 8007a08:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007a0c:	f8d4 b000 	ldr.w	fp, [r4]
 8007a10:	f8c8 2000 	str.w	r2, [r8]
 8007a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a18:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007a1c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007a20:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a24:	9307      	str	r3, [sp, #28]
 8007a26:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a2e:	4ba7      	ldr	r3, [pc, #668]	; (8007ccc <_printf_float+0x2f8>)
 8007a30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a34:	f7f9 f846 	bl	8000ac4 <__aeabi_dcmpun>
 8007a38:	bb70      	cbnz	r0, 8007a98 <_printf_float+0xc4>
 8007a3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a3e:	4ba3      	ldr	r3, [pc, #652]	; (8007ccc <_printf_float+0x2f8>)
 8007a40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a44:	f7f9 f820 	bl	8000a88 <__aeabi_dcmple>
 8007a48:	bb30      	cbnz	r0, 8007a98 <_printf_float+0xc4>
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	4640      	mov	r0, r8
 8007a50:	4649      	mov	r1, r9
 8007a52:	f7f9 f80f 	bl	8000a74 <__aeabi_dcmplt>
 8007a56:	b110      	cbz	r0, 8007a5e <_printf_float+0x8a>
 8007a58:	232d      	movs	r3, #45	; 0x2d
 8007a5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a5e:	4a9c      	ldr	r2, [pc, #624]	; (8007cd0 <_printf_float+0x2fc>)
 8007a60:	4b9c      	ldr	r3, [pc, #624]	; (8007cd4 <_printf_float+0x300>)
 8007a62:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007a66:	bf8c      	ite	hi
 8007a68:	4690      	movhi	r8, r2
 8007a6a:	4698      	movls	r8, r3
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	f02b 0204 	bic.w	r2, fp, #4
 8007a72:	6123      	str	r3, [r4, #16]
 8007a74:	6022      	str	r2, [r4, #0]
 8007a76:	f04f 0900 	mov.w	r9, #0
 8007a7a:	9700      	str	r7, [sp, #0]
 8007a7c:	4633      	mov	r3, r6
 8007a7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007a80:	4621      	mov	r1, r4
 8007a82:	4628      	mov	r0, r5
 8007a84:	f000 f9e6 	bl	8007e54 <_printf_common>
 8007a88:	3001      	adds	r0, #1
 8007a8a:	f040 808d 	bne.w	8007ba8 <_printf_float+0x1d4>
 8007a8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a92:	b00d      	add	sp, #52	; 0x34
 8007a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a98:	4642      	mov	r2, r8
 8007a9a:	464b      	mov	r3, r9
 8007a9c:	4640      	mov	r0, r8
 8007a9e:	4649      	mov	r1, r9
 8007aa0:	f7f9 f810 	bl	8000ac4 <__aeabi_dcmpun>
 8007aa4:	b110      	cbz	r0, 8007aac <_printf_float+0xd8>
 8007aa6:	4a8c      	ldr	r2, [pc, #560]	; (8007cd8 <_printf_float+0x304>)
 8007aa8:	4b8c      	ldr	r3, [pc, #560]	; (8007cdc <_printf_float+0x308>)
 8007aaa:	e7da      	b.n	8007a62 <_printf_float+0x8e>
 8007aac:	6861      	ldr	r1, [r4, #4]
 8007aae:	1c4b      	adds	r3, r1, #1
 8007ab0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007ab4:	a80a      	add	r0, sp, #40	; 0x28
 8007ab6:	d13e      	bne.n	8007b36 <_printf_float+0x162>
 8007ab8:	2306      	movs	r3, #6
 8007aba:	6063      	str	r3, [r4, #4]
 8007abc:	2300      	movs	r3, #0
 8007abe:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007ac2:	ab09      	add	r3, sp, #36	; 0x24
 8007ac4:	9300      	str	r3, [sp, #0]
 8007ac6:	ec49 8b10 	vmov	d0, r8, r9
 8007aca:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007ace:	6022      	str	r2, [r4, #0]
 8007ad0:	f8cd a004 	str.w	sl, [sp, #4]
 8007ad4:	6861      	ldr	r1, [r4, #4]
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	f7ff fee8 	bl	80078ac <__cvt>
 8007adc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007ae0:	2b47      	cmp	r3, #71	; 0x47
 8007ae2:	4680      	mov	r8, r0
 8007ae4:	d109      	bne.n	8007afa <_printf_float+0x126>
 8007ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ae8:	1cd8      	adds	r0, r3, #3
 8007aea:	db02      	blt.n	8007af2 <_printf_float+0x11e>
 8007aec:	6862      	ldr	r2, [r4, #4]
 8007aee:	4293      	cmp	r3, r2
 8007af0:	dd47      	ble.n	8007b82 <_printf_float+0x1ae>
 8007af2:	f1aa 0a02 	sub.w	sl, sl, #2
 8007af6:	fa5f fa8a 	uxtb.w	sl, sl
 8007afa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007afe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b00:	d824      	bhi.n	8007b4c <_printf_float+0x178>
 8007b02:	3901      	subs	r1, #1
 8007b04:	4652      	mov	r2, sl
 8007b06:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007b0a:	9109      	str	r1, [sp, #36]	; 0x24
 8007b0c:	f7ff ff2f 	bl	800796e <__exponent>
 8007b10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b12:	1813      	adds	r3, r2, r0
 8007b14:	2a01      	cmp	r2, #1
 8007b16:	4681      	mov	r9, r0
 8007b18:	6123      	str	r3, [r4, #16]
 8007b1a:	dc02      	bgt.n	8007b22 <_printf_float+0x14e>
 8007b1c:	6822      	ldr	r2, [r4, #0]
 8007b1e:	07d1      	lsls	r1, r2, #31
 8007b20:	d501      	bpl.n	8007b26 <_printf_float+0x152>
 8007b22:	3301      	adds	r3, #1
 8007b24:	6123      	str	r3, [r4, #16]
 8007b26:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d0a5      	beq.n	8007a7a <_printf_float+0xa6>
 8007b2e:	232d      	movs	r3, #45	; 0x2d
 8007b30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b34:	e7a1      	b.n	8007a7a <_printf_float+0xa6>
 8007b36:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007b3a:	f000 8177 	beq.w	8007e2c <_printf_float+0x458>
 8007b3e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007b42:	d1bb      	bne.n	8007abc <_printf_float+0xe8>
 8007b44:	2900      	cmp	r1, #0
 8007b46:	d1b9      	bne.n	8007abc <_printf_float+0xe8>
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e7b6      	b.n	8007aba <_printf_float+0xe6>
 8007b4c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007b50:	d119      	bne.n	8007b86 <_printf_float+0x1b2>
 8007b52:	2900      	cmp	r1, #0
 8007b54:	6863      	ldr	r3, [r4, #4]
 8007b56:	dd0c      	ble.n	8007b72 <_printf_float+0x19e>
 8007b58:	6121      	str	r1, [r4, #16]
 8007b5a:	b913      	cbnz	r3, 8007b62 <_printf_float+0x18e>
 8007b5c:	6822      	ldr	r2, [r4, #0]
 8007b5e:	07d2      	lsls	r2, r2, #31
 8007b60:	d502      	bpl.n	8007b68 <_printf_float+0x194>
 8007b62:	3301      	adds	r3, #1
 8007b64:	440b      	add	r3, r1
 8007b66:	6123      	str	r3, [r4, #16]
 8007b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b6a:	65a3      	str	r3, [r4, #88]	; 0x58
 8007b6c:	f04f 0900 	mov.w	r9, #0
 8007b70:	e7d9      	b.n	8007b26 <_printf_float+0x152>
 8007b72:	b913      	cbnz	r3, 8007b7a <_printf_float+0x1a6>
 8007b74:	6822      	ldr	r2, [r4, #0]
 8007b76:	07d0      	lsls	r0, r2, #31
 8007b78:	d501      	bpl.n	8007b7e <_printf_float+0x1aa>
 8007b7a:	3302      	adds	r3, #2
 8007b7c:	e7f3      	b.n	8007b66 <_printf_float+0x192>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e7f1      	b.n	8007b66 <_printf_float+0x192>
 8007b82:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007b86:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	db05      	blt.n	8007b9a <_printf_float+0x1c6>
 8007b8e:	6822      	ldr	r2, [r4, #0]
 8007b90:	6123      	str	r3, [r4, #16]
 8007b92:	07d1      	lsls	r1, r2, #31
 8007b94:	d5e8      	bpl.n	8007b68 <_printf_float+0x194>
 8007b96:	3301      	adds	r3, #1
 8007b98:	e7e5      	b.n	8007b66 <_printf_float+0x192>
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	bfd4      	ite	le
 8007b9e:	f1c3 0302 	rsble	r3, r3, #2
 8007ba2:	2301      	movgt	r3, #1
 8007ba4:	4413      	add	r3, r2
 8007ba6:	e7de      	b.n	8007b66 <_printf_float+0x192>
 8007ba8:	6823      	ldr	r3, [r4, #0]
 8007baa:	055a      	lsls	r2, r3, #21
 8007bac:	d407      	bmi.n	8007bbe <_printf_float+0x1ea>
 8007bae:	6923      	ldr	r3, [r4, #16]
 8007bb0:	4642      	mov	r2, r8
 8007bb2:	4631      	mov	r1, r6
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	47b8      	blx	r7
 8007bb8:	3001      	adds	r0, #1
 8007bba:	d12b      	bne.n	8007c14 <_printf_float+0x240>
 8007bbc:	e767      	b.n	8007a8e <_printf_float+0xba>
 8007bbe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007bc2:	f240 80dc 	bls.w	8007d7e <_printf_float+0x3aa>
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	2300      	movs	r3, #0
 8007bca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007bce:	f7f8 ff47 	bl	8000a60 <__aeabi_dcmpeq>
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	d033      	beq.n	8007c3e <_printf_float+0x26a>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	4a41      	ldr	r2, [pc, #260]	; (8007ce0 <_printf_float+0x30c>)
 8007bda:	4631      	mov	r1, r6
 8007bdc:	4628      	mov	r0, r5
 8007bde:	47b8      	blx	r7
 8007be0:	3001      	adds	r0, #1
 8007be2:	f43f af54 	beq.w	8007a8e <_printf_float+0xba>
 8007be6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bea:	429a      	cmp	r2, r3
 8007bec:	db02      	blt.n	8007bf4 <_printf_float+0x220>
 8007bee:	6823      	ldr	r3, [r4, #0]
 8007bf0:	07d8      	lsls	r0, r3, #31
 8007bf2:	d50f      	bpl.n	8007c14 <_printf_float+0x240>
 8007bf4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bf8:	4631      	mov	r1, r6
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	47b8      	blx	r7
 8007bfe:	3001      	adds	r0, #1
 8007c00:	f43f af45 	beq.w	8007a8e <_printf_float+0xba>
 8007c04:	f04f 0800 	mov.w	r8, #0
 8007c08:	f104 091a 	add.w	r9, r4, #26
 8007c0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	4543      	cmp	r3, r8
 8007c12:	dc09      	bgt.n	8007c28 <_printf_float+0x254>
 8007c14:	6823      	ldr	r3, [r4, #0]
 8007c16:	079b      	lsls	r3, r3, #30
 8007c18:	f100 8103 	bmi.w	8007e22 <_printf_float+0x44e>
 8007c1c:	68e0      	ldr	r0, [r4, #12]
 8007c1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c20:	4298      	cmp	r0, r3
 8007c22:	bfb8      	it	lt
 8007c24:	4618      	movlt	r0, r3
 8007c26:	e734      	b.n	8007a92 <_printf_float+0xbe>
 8007c28:	2301      	movs	r3, #1
 8007c2a:	464a      	mov	r2, r9
 8007c2c:	4631      	mov	r1, r6
 8007c2e:	4628      	mov	r0, r5
 8007c30:	47b8      	blx	r7
 8007c32:	3001      	adds	r0, #1
 8007c34:	f43f af2b 	beq.w	8007a8e <_printf_float+0xba>
 8007c38:	f108 0801 	add.w	r8, r8, #1
 8007c3c:	e7e6      	b.n	8007c0c <_printf_float+0x238>
 8007c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	dc2b      	bgt.n	8007c9c <_printf_float+0x2c8>
 8007c44:	2301      	movs	r3, #1
 8007c46:	4a26      	ldr	r2, [pc, #152]	; (8007ce0 <_printf_float+0x30c>)
 8007c48:	4631      	mov	r1, r6
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	47b8      	blx	r7
 8007c4e:	3001      	adds	r0, #1
 8007c50:	f43f af1d 	beq.w	8007a8e <_printf_float+0xba>
 8007c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c56:	b923      	cbnz	r3, 8007c62 <_printf_float+0x28e>
 8007c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c5a:	b913      	cbnz	r3, 8007c62 <_printf_float+0x28e>
 8007c5c:	6823      	ldr	r3, [r4, #0]
 8007c5e:	07d9      	lsls	r1, r3, #31
 8007c60:	d5d8      	bpl.n	8007c14 <_printf_float+0x240>
 8007c62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c66:	4631      	mov	r1, r6
 8007c68:	4628      	mov	r0, r5
 8007c6a:	47b8      	blx	r7
 8007c6c:	3001      	adds	r0, #1
 8007c6e:	f43f af0e 	beq.w	8007a8e <_printf_float+0xba>
 8007c72:	f04f 0900 	mov.w	r9, #0
 8007c76:	f104 0a1a 	add.w	sl, r4, #26
 8007c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c7c:	425b      	negs	r3, r3
 8007c7e:	454b      	cmp	r3, r9
 8007c80:	dc01      	bgt.n	8007c86 <_printf_float+0x2b2>
 8007c82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c84:	e794      	b.n	8007bb0 <_printf_float+0x1dc>
 8007c86:	2301      	movs	r3, #1
 8007c88:	4652      	mov	r2, sl
 8007c8a:	4631      	mov	r1, r6
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	47b8      	blx	r7
 8007c90:	3001      	adds	r0, #1
 8007c92:	f43f aefc 	beq.w	8007a8e <_printf_float+0xba>
 8007c96:	f109 0901 	add.w	r9, r9, #1
 8007c9a:	e7ee      	b.n	8007c7a <_printf_float+0x2a6>
 8007c9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	bfa8      	it	ge
 8007ca4:	461a      	movge	r2, r3
 8007ca6:	2a00      	cmp	r2, #0
 8007ca8:	4691      	mov	r9, r2
 8007caa:	dd07      	ble.n	8007cbc <_printf_float+0x2e8>
 8007cac:	4613      	mov	r3, r2
 8007cae:	4631      	mov	r1, r6
 8007cb0:	4642      	mov	r2, r8
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	47b8      	blx	r7
 8007cb6:	3001      	adds	r0, #1
 8007cb8:	f43f aee9 	beq.w	8007a8e <_printf_float+0xba>
 8007cbc:	f104 031a 	add.w	r3, r4, #26
 8007cc0:	f04f 0b00 	mov.w	fp, #0
 8007cc4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007cc8:	9306      	str	r3, [sp, #24]
 8007cca:	e015      	b.n	8007cf8 <_printf_float+0x324>
 8007ccc:	7fefffff 	.word	0x7fefffff
 8007cd0:	080095d4 	.word	0x080095d4
 8007cd4:	080095d0 	.word	0x080095d0
 8007cd8:	080095dc 	.word	0x080095dc
 8007cdc:	080095d8 	.word	0x080095d8
 8007ce0:	080095e0 	.word	0x080095e0
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	9a06      	ldr	r2, [sp, #24]
 8007ce8:	4631      	mov	r1, r6
 8007cea:	4628      	mov	r0, r5
 8007cec:	47b8      	blx	r7
 8007cee:	3001      	adds	r0, #1
 8007cf0:	f43f aecd 	beq.w	8007a8e <_printf_float+0xba>
 8007cf4:	f10b 0b01 	add.w	fp, fp, #1
 8007cf8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007cfc:	ebaa 0309 	sub.w	r3, sl, r9
 8007d00:	455b      	cmp	r3, fp
 8007d02:	dcef      	bgt.n	8007ce4 <_printf_float+0x310>
 8007d04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	44d0      	add	r8, sl
 8007d0c:	db15      	blt.n	8007d3a <_printf_float+0x366>
 8007d0e:	6823      	ldr	r3, [r4, #0]
 8007d10:	07da      	lsls	r2, r3, #31
 8007d12:	d412      	bmi.n	8007d3a <_printf_float+0x366>
 8007d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d18:	eba3 020a 	sub.w	r2, r3, sl
 8007d1c:	eba3 0a01 	sub.w	sl, r3, r1
 8007d20:	4592      	cmp	sl, r2
 8007d22:	bfa8      	it	ge
 8007d24:	4692      	movge	sl, r2
 8007d26:	f1ba 0f00 	cmp.w	sl, #0
 8007d2a:	dc0e      	bgt.n	8007d4a <_printf_float+0x376>
 8007d2c:	f04f 0800 	mov.w	r8, #0
 8007d30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d34:	f104 091a 	add.w	r9, r4, #26
 8007d38:	e019      	b.n	8007d6e <_printf_float+0x39a>
 8007d3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d3e:	4631      	mov	r1, r6
 8007d40:	4628      	mov	r0, r5
 8007d42:	47b8      	blx	r7
 8007d44:	3001      	adds	r0, #1
 8007d46:	d1e5      	bne.n	8007d14 <_printf_float+0x340>
 8007d48:	e6a1      	b.n	8007a8e <_printf_float+0xba>
 8007d4a:	4653      	mov	r3, sl
 8007d4c:	4642      	mov	r2, r8
 8007d4e:	4631      	mov	r1, r6
 8007d50:	4628      	mov	r0, r5
 8007d52:	47b8      	blx	r7
 8007d54:	3001      	adds	r0, #1
 8007d56:	d1e9      	bne.n	8007d2c <_printf_float+0x358>
 8007d58:	e699      	b.n	8007a8e <_printf_float+0xba>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	464a      	mov	r2, r9
 8007d5e:	4631      	mov	r1, r6
 8007d60:	4628      	mov	r0, r5
 8007d62:	47b8      	blx	r7
 8007d64:	3001      	adds	r0, #1
 8007d66:	f43f ae92 	beq.w	8007a8e <_printf_float+0xba>
 8007d6a:	f108 0801 	add.w	r8, r8, #1
 8007d6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d72:	1a9b      	subs	r3, r3, r2
 8007d74:	eba3 030a 	sub.w	r3, r3, sl
 8007d78:	4543      	cmp	r3, r8
 8007d7a:	dcee      	bgt.n	8007d5a <_printf_float+0x386>
 8007d7c:	e74a      	b.n	8007c14 <_printf_float+0x240>
 8007d7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d80:	2a01      	cmp	r2, #1
 8007d82:	dc01      	bgt.n	8007d88 <_printf_float+0x3b4>
 8007d84:	07db      	lsls	r3, r3, #31
 8007d86:	d53a      	bpl.n	8007dfe <_printf_float+0x42a>
 8007d88:	2301      	movs	r3, #1
 8007d8a:	4642      	mov	r2, r8
 8007d8c:	4631      	mov	r1, r6
 8007d8e:	4628      	mov	r0, r5
 8007d90:	47b8      	blx	r7
 8007d92:	3001      	adds	r0, #1
 8007d94:	f43f ae7b 	beq.w	8007a8e <_printf_float+0xba>
 8007d98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d9c:	4631      	mov	r1, r6
 8007d9e:	4628      	mov	r0, r5
 8007da0:	47b8      	blx	r7
 8007da2:	3001      	adds	r0, #1
 8007da4:	f108 0801 	add.w	r8, r8, #1
 8007da8:	f43f ae71 	beq.w	8007a8e <_printf_float+0xba>
 8007dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dae:	2200      	movs	r2, #0
 8007db0:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8007db4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007db8:	2300      	movs	r3, #0
 8007dba:	f7f8 fe51 	bl	8000a60 <__aeabi_dcmpeq>
 8007dbe:	b9c8      	cbnz	r0, 8007df4 <_printf_float+0x420>
 8007dc0:	4653      	mov	r3, sl
 8007dc2:	4642      	mov	r2, r8
 8007dc4:	4631      	mov	r1, r6
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	47b8      	blx	r7
 8007dca:	3001      	adds	r0, #1
 8007dcc:	d10e      	bne.n	8007dec <_printf_float+0x418>
 8007dce:	e65e      	b.n	8007a8e <_printf_float+0xba>
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	4652      	mov	r2, sl
 8007dd4:	4631      	mov	r1, r6
 8007dd6:	4628      	mov	r0, r5
 8007dd8:	47b8      	blx	r7
 8007dda:	3001      	adds	r0, #1
 8007ddc:	f43f ae57 	beq.w	8007a8e <_printf_float+0xba>
 8007de0:	f108 0801 	add.w	r8, r8, #1
 8007de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007de6:	3b01      	subs	r3, #1
 8007de8:	4543      	cmp	r3, r8
 8007dea:	dcf1      	bgt.n	8007dd0 <_printf_float+0x3fc>
 8007dec:	464b      	mov	r3, r9
 8007dee:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007df2:	e6de      	b.n	8007bb2 <_printf_float+0x1de>
 8007df4:	f04f 0800 	mov.w	r8, #0
 8007df8:	f104 0a1a 	add.w	sl, r4, #26
 8007dfc:	e7f2      	b.n	8007de4 <_printf_float+0x410>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e7df      	b.n	8007dc2 <_printf_float+0x3ee>
 8007e02:	2301      	movs	r3, #1
 8007e04:	464a      	mov	r2, r9
 8007e06:	4631      	mov	r1, r6
 8007e08:	4628      	mov	r0, r5
 8007e0a:	47b8      	blx	r7
 8007e0c:	3001      	adds	r0, #1
 8007e0e:	f43f ae3e 	beq.w	8007a8e <_printf_float+0xba>
 8007e12:	f108 0801 	add.w	r8, r8, #1
 8007e16:	68e3      	ldr	r3, [r4, #12]
 8007e18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e1a:	1a9b      	subs	r3, r3, r2
 8007e1c:	4543      	cmp	r3, r8
 8007e1e:	dcf0      	bgt.n	8007e02 <_printf_float+0x42e>
 8007e20:	e6fc      	b.n	8007c1c <_printf_float+0x248>
 8007e22:	f04f 0800 	mov.w	r8, #0
 8007e26:	f104 0919 	add.w	r9, r4, #25
 8007e2a:	e7f4      	b.n	8007e16 <_printf_float+0x442>
 8007e2c:	2900      	cmp	r1, #0
 8007e2e:	f43f ae8b 	beq.w	8007b48 <_printf_float+0x174>
 8007e32:	2300      	movs	r3, #0
 8007e34:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007e38:	ab09      	add	r3, sp, #36	; 0x24
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	ec49 8b10 	vmov	d0, r8, r9
 8007e40:	6022      	str	r2, [r4, #0]
 8007e42:	f8cd a004 	str.w	sl, [sp, #4]
 8007e46:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	f7ff fd2e 	bl	80078ac <__cvt>
 8007e50:	4680      	mov	r8, r0
 8007e52:	e648      	b.n	8007ae6 <_printf_float+0x112>

08007e54 <_printf_common>:
 8007e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e58:	4691      	mov	r9, r2
 8007e5a:	461f      	mov	r7, r3
 8007e5c:	688a      	ldr	r2, [r1, #8]
 8007e5e:	690b      	ldr	r3, [r1, #16]
 8007e60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e64:	4293      	cmp	r3, r2
 8007e66:	bfb8      	it	lt
 8007e68:	4613      	movlt	r3, r2
 8007e6a:	f8c9 3000 	str.w	r3, [r9]
 8007e6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e72:	4606      	mov	r6, r0
 8007e74:	460c      	mov	r4, r1
 8007e76:	b112      	cbz	r2, 8007e7e <_printf_common+0x2a>
 8007e78:	3301      	adds	r3, #1
 8007e7a:	f8c9 3000 	str.w	r3, [r9]
 8007e7e:	6823      	ldr	r3, [r4, #0]
 8007e80:	0699      	lsls	r1, r3, #26
 8007e82:	bf42      	ittt	mi
 8007e84:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007e88:	3302      	addmi	r3, #2
 8007e8a:	f8c9 3000 	strmi.w	r3, [r9]
 8007e8e:	6825      	ldr	r5, [r4, #0]
 8007e90:	f015 0506 	ands.w	r5, r5, #6
 8007e94:	d107      	bne.n	8007ea6 <_printf_common+0x52>
 8007e96:	f104 0a19 	add.w	sl, r4, #25
 8007e9a:	68e3      	ldr	r3, [r4, #12]
 8007e9c:	f8d9 2000 	ldr.w	r2, [r9]
 8007ea0:	1a9b      	subs	r3, r3, r2
 8007ea2:	42ab      	cmp	r3, r5
 8007ea4:	dc28      	bgt.n	8007ef8 <_printf_common+0xa4>
 8007ea6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007eaa:	6822      	ldr	r2, [r4, #0]
 8007eac:	3300      	adds	r3, #0
 8007eae:	bf18      	it	ne
 8007eb0:	2301      	movne	r3, #1
 8007eb2:	0692      	lsls	r2, r2, #26
 8007eb4:	d42d      	bmi.n	8007f12 <_printf_common+0xbe>
 8007eb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007eba:	4639      	mov	r1, r7
 8007ebc:	4630      	mov	r0, r6
 8007ebe:	47c0      	blx	r8
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	d020      	beq.n	8007f06 <_printf_common+0xb2>
 8007ec4:	6823      	ldr	r3, [r4, #0]
 8007ec6:	68e5      	ldr	r5, [r4, #12]
 8007ec8:	f8d9 2000 	ldr.w	r2, [r9]
 8007ecc:	f003 0306 	and.w	r3, r3, #6
 8007ed0:	2b04      	cmp	r3, #4
 8007ed2:	bf08      	it	eq
 8007ed4:	1aad      	subeq	r5, r5, r2
 8007ed6:	68a3      	ldr	r3, [r4, #8]
 8007ed8:	6922      	ldr	r2, [r4, #16]
 8007eda:	bf0c      	ite	eq
 8007edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ee0:	2500      	movne	r5, #0
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	bfc4      	itt	gt
 8007ee6:	1a9b      	subgt	r3, r3, r2
 8007ee8:	18ed      	addgt	r5, r5, r3
 8007eea:	f04f 0900 	mov.w	r9, #0
 8007eee:	341a      	adds	r4, #26
 8007ef0:	454d      	cmp	r5, r9
 8007ef2:	d11a      	bne.n	8007f2a <_printf_common+0xd6>
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	e008      	b.n	8007f0a <_printf_common+0xb6>
 8007ef8:	2301      	movs	r3, #1
 8007efa:	4652      	mov	r2, sl
 8007efc:	4639      	mov	r1, r7
 8007efe:	4630      	mov	r0, r6
 8007f00:	47c0      	blx	r8
 8007f02:	3001      	adds	r0, #1
 8007f04:	d103      	bne.n	8007f0e <_printf_common+0xba>
 8007f06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f0e:	3501      	adds	r5, #1
 8007f10:	e7c3      	b.n	8007e9a <_printf_common+0x46>
 8007f12:	18e1      	adds	r1, r4, r3
 8007f14:	1c5a      	adds	r2, r3, #1
 8007f16:	2030      	movs	r0, #48	; 0x30
 8007f18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f1c:	4422      	add	r2, r4
 8007f1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f26:	3302      	adds	r3, #2
 8007f28:	e7c5      	b.n	8007eb6 <_printf_common+0x62>
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	4622      	mov	r2, r4
 8007f2e:	4639      	mov	r1, r7
 8007f30:	4630      	mov	r0, r6
 8007f32:	47c0      	blx	r8
 8007f34:	3001      	adds	r0, #1
 8007f36:	d0e6      	beq.n	8007f06 <_printf_common+0xb2>
 8007f38:	f109 0901 	add.w	r9, r9, #1
 8007f3c:	e7d8      	b.n	8007ef0 <_printf_common+0x9c>
	...

08007f40 <_sbrk_r>:
 8007f40:	b538      	push	{r3, r4, r5, lr}
 8007f42:	4c06      	ldr	r4, [pc, #24]	; (8007f5c <_sbrk_r+0x1c>)
 8007f44:	2300      	movs	r3, #0
 8007f46:	4605      	mov	r5, r0
 8007f48:	4608      	mov	r0, r1
 8007f4a:	6023      	str	r3, [r4, #0]
 8007f4c:	f7fd fc8a 	bl	8005864 <_sbrk>
 8007f50:	1c43      	adds	r3, r0, #1
 8007f52:	d102      	bne.n	8007f5a <_sbrk_r+0x1a>
 8007f54:	6823      	ldr	r3, [r4, #0]
 8007f56:	b103      	cbz	r3, 8007f5a <_sbrk_r+0x1a>
 8007f58:	602b      	str	r3, [r5, #0]
 8007f5a:	bd38      	pop	{r3, r4, r5, pc}
 8007f5c:	20000300 	.word	0x20000300

08007f60 <_raise_r>:
 8007f60:	291f      	cmp	r1, #31
 8007f62:	b538      	push	{r3, r4, r5, lr}
 8007f64:	4604      	mov	r4, r0
 8007f66:	460d      	mov	r5, r1
 8007f68:	d904      	bls.n	8007f74 <_raise_r+0x14>
 8007f6a:	2316      	movs	r3, #22
 8007f6c:	6003      	str	r3, [r0, #0]
 8007f6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f72:	bd38      	pop	{r3, r4, r5, pc}
 8007f74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007f76:	b112      	cbz	r2, 8007f7e <_raise_r+0x1e>
 8007f78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f7c:	b94b      	cbnz	r3, 8007f92 <_raise_r+0x32>
 8007f7e:	4620      	mov	r0, r4
 8007f80:	f000 f830 	bl	8007fe4 <_getpid_r>
 8007f84:	462a      	mov	r2, r5
 8007f86:	4601      	mov	r1, r0
 8007f88:	4620      	mov	r0, r4
 8007f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f8e:	f000 b817 	b.w	8007fc0 <_kill_r>
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d00a      	beq.n	8007fac <_raise_r+0x4c>
 8007f96:	1c59      	adds	r1, r3, #1
 8007f98:	d103      	bne.n	8007fa2 <_raise_r+0x42>
 8007f9a:	2316      	movs	r3, #22
 8007f9c:	6003      	str	r3, [r0, #0]
 8007f9e:	2001      	movs	r0, #1
 8007fa0:	e7e7      	b.n	8007f72 <_raise_r+0x12>
 8007fa2:	2400      	movs	r4, #0
 8007fa4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007fa8:	4628      	mov	r0, r5
 8007faa:	4798      	blx	r3
 8007fac:	2000      	movs	r0, #0
 8007fae:	e7e0      	b.n	8007f72 <_raise_r+0x12>

08007fb0 <raise>:
 8007fb0:	4b02      	ldr	r3, [pc, #8]	; (8007fbc <raise+0xc>)
 8007fb2:	4601      	mov	r1, r0
 8007fb4:	6818      	ldr	r0, [r3, #0]
 8007fb6:	f7ff bfd3 	b.w	8007f60 <_raise_r>
 8007fba:	bf00      	nop
 8007fbc:	2000000c 	.word	0x2000000c

08007fc0 <_kill_r>:
 8007fc0:	b538      	push	{r3, r4, r5, lr}
 8007fc2:	4c07      	ldr	r4, [pc, #28]	; (8007fe0 <_kill_r+0x20>)
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	4605      	mov	r5, r0
 8007fc8:	4608      	mov	r0, r1
 8007fca:	4611      	mov	r1, r2
 8007fcc:	6023      	str	r3, [r4, #0]
 8007fce:	f7fd fc2f 	bl	8005830 <_kill>
 8007fd2:	1c43      	adds	r3, r0, #1
 8007fd4:	d102      	bne.n	8007fdc <_kill_r+0x1c>
 8007fd6:	6823      	ldr	r3, [r4, #0]
 8007fd8:	b103      	cbz	r3, 8007fdc <_kill_r+0x1c>
 8007fda:	602b      	str	r3, [r5, #0]
 8007fdc:	bd38      	pop	{r3, r4, r5, pc}
 8007fde:	bf00      	nop
 8007fe0:	20000300 	.word	0x20000300

08007fe4 <_getpid_r>:
 8007fe4:	f7fd bc1c 	b.w	8005820 <_getpid>

08007fe8 <quorem>:
 8007fe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fec:	6903      	ldr	r3, [r0, #16]
 8007fee:	690c      	ldr	r4, [r1, #16]
 8007ff0:	42a3      	cmp	r3, r4
 8007ff2:	4680      	mov	r8, r0
 8007ff4:	f2c0 8082 	blt.w	80080fc <quorem+0x114>
 8007ff8:	3c01      	subs	r4, #1
 8007ffa:	f101 0714 	add.w	r7, r1, #20
 8007ffe:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008002:	f100 0614 	add.w	r6, r0, #20
 8008006:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800800a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800800e:	eb06 030c 	add.w	r3, r6, ip
 8008012:	3501      	adds	r5, #1
 8008014:	eb07 090c 	add.w	r9, r7, ip
 8008018:	9301      	str	r3, [sp, #4]
 800801a:	fbb0 f5f5 	udiv	r5, r0, r5
 800801e:	b395      	cbz	r5, 8008086 <quorem+0x9e>
 8008020:	f04f 0a00 	mov.w	sl, #0
 8008024:	4638      	mov	r0, r7
 8008026:	46b6      	mov	lr, r6
 8008028:	46d3      	mov	fp, sl
 800802a:	f850 2b04 	ldr.w	r2, [r0], #4
 800802e:	b293      	uxth	r3, r2
 8008030:	fb05 a303 	mla	r3, r5, r3, sl
 8008034:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008038:	b29b      	uxth	r3, r3
 800803a:	ebab 0303 	sub.w	r3, fp, r3
 800803e:	0c12      	lsrs	r2, r2, #16
 8008040:	f8de b000 	ldr.w	fp, [lr]
 8008044:	fb05 a202 	mla	r2, r5, r2, sl
 8008048:	fa13 f38b 	uxtah	r3, r3, fp
 800804c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008050:	fa1f fb82 	uxth.w	fp, r2
 8008054:	f8de 2000 	ldr.w	r2, [lr]
 8008058:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800805c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008060:	b29b      	uxth	r3, r3
 8008062:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008066:	4581      	cmp	r9, r0
 8008068:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800806c:	f84e 3b04 	str.w	r3, [lr], #4
 8008070:	d2db      	bcs.n	800802a <quorem+0x42>
 8008072:	f856 300c 	ldr.w	r3, [r6, ip]
 8008076:	b933      	cbnz	r3, 8008086 <quorem+0x9e>
 8008078:	9b01      	ldr	r3, [sp, #4]
 800807a:	3b04      	subs	r3, #4
 800807c:	429e      	cmp	r6, r3
 800807e:	461a      	mov	r2, r3
 8008080:	d330      	bcc.n	80080e4 <quorem+0xfc>
 8008082:	f8c8 4010 	str.w	r4, [r8, #16]
 8008086:	4640      	mov	r0, r8
 8008088:	f001 f818 	bl	80090bc <__mcmp>
 800808c:	2800      	cmp	r0, #0
 800808e:	db25      	blt.n	80080dc <quorem+0xf4>
 8008090:	3501      	adds	r5, #1
 8008092:	4630      	mov	r0, r6
 8008094:	f04f 0c00 	mov.w	ip, #0
 8008098:	f857 2b04 	ldr.w	r2, [r7], #4
 800809c:	f8d0 e000 	ldr.w	lr, [r0]
 80080a0:	b293      	uxth	r3, r2
 80080a2:	ebac 0303 	sub.w	r3, ip, r3
 80080a6:	0c12      	lsrs	r2, r2, #16
 80080a8:	fa13 f38e 	uxtah	r3, r3, lr
 80080ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80080b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080ba:	45b9      	cmp	r9, r7
 80080bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80080c0:	f840 3b04 	str.w	r3, [r0], #4
 80080c4:	d2e8      	bcs.n	8008098 <quorem+0xb0>
 80080c6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80080ca:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80080ce:	b92a      	cbnz	r2, 80080dc <quorem+0xf4>
 80080d0:	3b04      	subs	r3, #4
 80080d2:	429e      	cmp	r6, r3
 80080d4:	461a      	mov	r2, r3
 80080d6:	d30b      	bcc.n	80080f0 <quorem+0x108>
 80080d8:	f8c8 4010 	str.w	r4, [r8, #16]
 80080dc:	4628      	mov	r0, r5
 80080de:	b003      	add	sp, #12
 80080e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080e4:	6812      	ldr	r2, [r2, #0]
 80080e6:	3b04      	subs	r3, #4
 80080e8:	2a00      	cmp	r2, #0
 80080ea:	d1ca      	bne.n	8008082 <quorem+0x9a>
 80080ec:	3c01      	subs	r4, #1
 80080ee:	e7c5      	b.n	800807c <quorem+0x94>
 80080f0:	6812      	ldr	r2, [r2, #0]
 80080f2:	3b04      	subs	r3, #4
 80080f4:	2a00      	cmp	r2, #0
 80080f6:	d1ef      	bne.n	80080d8 <quorem+0xf0>
 80080f8:	3c01      	subs	r4, #1
 80080fa:	e7ea      	b.n	80080d2 <quorem+0xea>
 80080fc:	2000      	movs	r0, #0
 80080fe:	e7ee      	b.n	80080de <quorem+0xf6>

08008100 <_dtoa_r>:
 8008100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008104:	ec57 6b10 	vmov	r6, r7, d0
 8008108:	b097      	sub	sp, #92	; 0x5c
 800810a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800810c:	9106      	str	r1, [sp, #24]
 800810e:	4604      	mov	r4, r0
 8008110:	920b      	str	r2, [sp, #44]	; 0x2c
 8008112:	9312      	str	r3, [sp, #72]	; 0x48
 8008114:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008118:	e9cd 6700 	strd	r6, r7, [sp]
 800811c:	b93d      	cbnz	r5, 800812e <_dtoa_r+0x2e>
 800811e:	2010      	movs	r0, #16
 8008120:	f7ff fae0 	bl	80076e4 <malloc>
 8008124:	6260      	str	r0, [r4, #36]	; 0x24
 8008126:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800812a:	6005      	str	r5, [r0, #0]
 800812c:	60c5      	str	r5, [r0, #12]
 800812e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008130:	6819      	ldr	r1, [r3, #0]
 8008132:	b151      	cbz	r1, 800814a <_dtoa_r+0x4a>
 8008134:	685a      	ldr	r2, [r3, #4]
 8008136:	604a      	str	r2, [r1, #4]
 8008138:	2301      	movs	r3, #1
 800813a:	4093      	lsls	r3, r2
 800813c:	608b      	str	r3, [r1, #8]
 800813e:	4620      	mov	r0, r4
 8008140:	f000 fdda 	bl	8008cf8 <_Bfree>
 8008144:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008146:	2200      	movs	r2, #0
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	1e3b      	subs	r3, r7, #0
 800814c:	bfbb      	ittet	lt
 800814e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008152:	9301      	strlt	r3, [sp, #4]
 8008154:	2300      	movge	r3, #0
 8008156:	2201      	movlt	r2, #1
 8008158:	bfac      	ite	ge
 800815a:	f8c8 3000 	strge.w	r3, [r8]
 800815e:	f8c8 2000 	strlt.w	r2, [r8]
 8008162:	4baf      	ldr	r3, [pc, #700]	; (8008420 <_dtoa_r+0x320>)
 8008164:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008168:	ea33 0308 	bics.w	r3, r3, r8
 800816c:	d114      	bne.n	8008198 <_dtoa_r+0x98>
 800816e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008170:	f242 730f 	movw	r3, #9999	; 0x270f
 8008174:	6013      	str	r3, [r2, #0]
 8008176:	9b00      	ldr	r3, [sp, #0]
 8008178:	b923      	cbnz	r3, 8008184 <_dtoa_r+0x84>
 800817a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800817e:	2800      	cmp	r0, #0
 8008180:	f000 8542 	beq.w	8008c08 <_dtoa_r+0xb08>
 8008184:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008186:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008434 <_dtoa_r+0x334>
 800818a:	2b00      	cmp	r3, #0
 800818c:	f000 8544 	beq.w	8008c18 <_dtoa_r+0xb18>
 8008190:	f10b 0303 	add.w	r3, fp, #3
 8008194:	f000 bd3e 	b.w	8008c14 <_dtoa_r+0xb14>
 8008198:	e9dd 6700 	ldrd	r6, r7, [sp]
 800819c:	2200      	movs	r2, #0
 800819e:	2300      	movs	r3, #0
 80081a0:	4630      	mov	r0, r6
 80081a2:	4639      	mov	r1, r7
 80081a4:	f7f8 fc5c 	bl	8000a60 <__aeabi_dcmpeq>
 80081a8:	4681      	mov	r9, r0
 80081aa:	b168      	cbz	r0, 80081c8 <_dtoa_r+0xc8>
 80081ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081ae:	2301      	movs	r3, #1
 80081b0:	6013      	str	r3, [r2, #0]
 80081b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f000 8524 	beq.w	8008c02 <_dtoa_r+0xb02>
 80081ba:	4b9a      	ldr	r3, [pc, #616]	; (8008424 <_dtoa_r+0x324>)
 80081bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80081be:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80081c2:	6013      	str	r3, [r2, #0]
 80081c4:	f000 bd28 	b.w	8008c18 <_dtoa_r+0xb18>
 80081c8:	aa14      	add	r2, sp, #80	; 0x50
 80081ca:	a915      	add	r1, sp, #84	; 0x54
 80081cc:	ec47 6b10 	vmov	d0, r6, r7
 80081d0:	4620      	mov	r0, r4
 80081d2:	f000 ffea 	bl	80091aa <__d2b>
 80081d6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80081da:	9004      	str	r0, [sp, #16]
 80081dc:	2d00      	cmp	r5, #0
 80081de:	d07c      	beq.n	80082da <_dtoa_r+0x1da>
 80081e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80081e4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80081e8:	46b2      	mov	sl, r6
 80081ea:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80081ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80081f2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80081f6:	2200      	movs	r2, #0
 80081f8:	4b8b      	ldr	r3, [pc, #556]	; (8008428 <_dtoa_r+0x328>)
 80081fa:	4650      	mov	r0, sl
 80081fc:	4659      	mov	r1, fp
 80081fe:	f7f8 f80f 	bl	8000220 <__aeabi_dsub>
 8008202:	a381      	add	r3, pc, #516	; (adr r3, 8008408 <_dtoa_r+0x308>)
 8008204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008208:	f7f8 f9c2 	bl	8000590 <__aeabi_dmul>
 800820c:	a380      	add	r3, pc, #512	; (adr r3, 8008410 <_dtoa_r+0x310>)
 800820e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008212:	f7f8 f807 	bl	8000224 <__adddf3>
 8008216:	4606      	mov	r6, r0
 8008218:	4628      	mov	r0, r5
 800821a:	460f      	mov	r7, r1
 800821c:	f7f8 f94e 	bl	80004bc <__aeabi_i2d>
 8008220:	a37d      	add	r3, pc, #500	; (adr r3, 8008418 <_dtoa_r+0x318>)
 8008222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008226:	f7f8 f9b3 	bl	8000590 <__aeabi_dmul>
 800822a:	4602      	mov	r2, r0
 800822c:	460b      	mov	r3, r1
 800822e:	4630      	mov	r0, r6
 8008230:	4639      	mov	r1, r7
 8008232:	f7f7 fff7 	bl	8000224 <__adddf3>
 8008236:	4606      	mov	r6, r0
 8008238:	460f      	mov	r7, r1
 800823a:	f7f8 fc59 	bl	8000af0 <__aeabi_d2iz>
 800823e:	2200      	movs	r2, #0
 8008240:	4682      	mov	sl, r0
 8008242:	2300      	movs	r3, #0
 8008244:	4630      	mov	r0, r6
 8008246:	4639      	mov	r1, r7
 8008248:	f7f8 fc14 	bl	8000a74 <__aeabi_dcmplt>
 800824c:	b148      	cbz	r0, 8008262 <_dtoa_r+0x162>
 800824e:	4650      	mov	r0, sl
 8008250:	f7f8 f934 	bl	80004bc <__aeabi_i2d>
 8008254:	4632      	mov	r2, r6
 8008256:	463b      	mov	r3, r7
 8008258:	f7f8 fc02 	bl	8000a60 <__aeabi_dcmpeq>
 800825c:	b908      	cbnz	r0, 8008262 <_dtoa_r+0x162>
 800825e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008262:	f1ba 0f16 	cmp.w	sl, #22
 8008266:	d859      	bhi.n	800831c <_dtoa_r+0x21c>
 8008268:	4970      	ldr	r1, [pc, #448]	; (800842c <_dtoa_r+0x32c>)
 800826a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800826e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008272:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008276:	f7f8 fc1b 	bl	8000ab0 <__aeabi_dcmpgt>
 800827a:	2800      	cmp	r0, #0
 800827c:	d050      	beq.n	8008320 <_dtoa_r+0x220>
 800827e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008282:	2300      	movs	r3, #0
 8008284:	930f      	str	r3, [sp, #60]	; 0x3c
 8008286:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008288:	1b5d      	subs	r5, r3, r5
 800828a:	f1b5 0801 	subs.w	r8, r5, #1
 800828e:	bf49      	itett	mi
 8008290:	f1c5 0301 	rsbmi	r3, r5, #1
 8008294:	2300      	movpl	r3, #0
 8008296:	9305      	strmi	r3, [sp, #20]
 8008298:	f04f 0800 	movmi.w	r8, #0
 800829c:	bf58      	it	pl
 800829e:	9305      	strpl	r3, [sp, #20]
 80082a0:	f1ba 0f00 	cmp.w	sl, #0
 80082a4:	db3e      	blt.n	8008324 <_dtoa_r+0x224>
 80082a6:	2300      	movs	r3, #0
 80082a8:	44d0      	add	r8, sl
 80082aa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80082ae:	9307      	str	r3, [sp, #28]
 80082b0:	9b06      	ldr	r3, [sp, #24]
 80082b2:	2b09      	cmp	r3, #9
 80082b4:	f200 8090 	bhi.w	80083d8 <_dtoa_r+0x2d8>
 80082b8:	2b05      	cmp	r3, #5
 80082ba:	bfc4      	itt	gt
 80082bc:	3b04      	subgt	r3, #4
 80082be:	9306      	strgt	r3, [sp, #24]
 80082c0:	9b06      	ldr	r3, [sp, #24]
 80082c2:	f1a3 0302 	sub.w	r3, r3, #2
 80082c6:	bfcc      	ite	gt
 80082c8:	2500      	movgt	r5, #0
 80082ca:	2501      	movle	r5, #1
 80082cc:	2b03      	cmp	r3, #3
 80082ce:	f200 808f 	bhi.w	80083f0 <_dtoa_r+0x2f0>
 80082d2:	e8df f003 	tbb	[pc, r3]
 80082d6:	7f7d      	.short	0x7f7d
 80082d8:	7131      	.short	0x7131
 80082da:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80082de:	441d      	add	r5, r3
 80082e0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80082e4:	2820      	cmp	r0, #32
 80082e6:	dd13      	ble.n	8008310 <_dtoa_r+0x210>
 80082e8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80082ec:	9b00      	ldr	r3, [sp, #0]
 80082ee:	fa08 f800 	lsl.w	r8, r8, r0
 80082f2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80082f6:	fa23 f000 	lsr.w	r0, r3, r0
 80082fa:	ea48 0000 	orr.w	r0, r8, r0
 80082fe:	f7f8 f8cd 	bl	800049c <__aeabi_ui2d>
 8008302:	2301      	movs	r3, #1
 8008304:	4682      	mov	sl, r0
 8008306:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800830a:	3d01      	subs	r5, #1
 800830c:	9313      	str	r3, [sp, #76]	; 0x4c
 800830e:	e772      	b.n	80081f6 <_dtoa_r+0xf6>
 8008310:	9b00      	ldr	r3, [sp, #0]
 8008312:	f1c0 0020 	rsb	r0, r0, #32
 8008316:	fa03 f000 	lsl.w	r0, r3, r0
 800831a:	e7f0      	b.n	80082fe <_dtoa_r+0x1fe>
 800831c:	2301      	movs	r3, #1
 800831e:	e7b1      	b.n	8008284 <_dtoa_r+0x184>
 8008320:	900f      	str	r0, [sp, #60]	; 0x3c
 8008322:	e7b0      	b.n	8008286 <_dtoa_r+0x186>
 8008324:	9b05      	ldr	r3, [sp, #20]
 8008326:	eba3 030a 	sub.w	r3, r3, sl
 800832a:	9305      	str	r3, [sp, #20]
 800832c:	f1ca 0300 	rsb	r3, sl, #0
 8008330:	9307      	str	r3, [sp, #28]
 8008332:	2300      	movs	r3, #0
 8008334:	930e      	str	r3, [sp, #56]	; 0x38
 8008336:	e7bb      	b.n	80082b0 <_dtoa_r+0x1b0>
 8008338:	2301      	movs	r3, #1
 800833a:	930a      	str	r3, [sp, #40]	; 0x28
 800833c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800833e:	2b00      	cmp	r3, #0
 8008340:	dd59      	ble.n	80083f6 <_dtoa_r+0x2f6>
 8008342:	9302      	str	r3, [sp, #8]
 8008344:	4699      	mov	r9, r3
 8008346:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008348:	2200      	movs	r2, #0
 800834a:	6072      	str	r2, [r6, #4]
 800834c:	2204      	movs	r2, #4
 800834e:	f102 0014 	add.w	r0, r2, #20
 8008352:	4298      	cmp	r0, r3
 8008354:	6871      	ldr	r1, [r6, #4]
 8008356:	d953      	bls.n	8008400 <_dtoa_r+0x300>
 8008358:	4620      	mov	r0, r4
 800835a:	f000 fc99 	bl	8008c90 <_Balloc>
 800835e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008360:	6030      	str	r0, [r6, #0]
 8008362:	f1b9 0f0e 	cmp.w	r9, #14
 8008366:	f8d3 b000 	ldr.w	fp, [r3]
 800836a:	f200 80e6 	bhi.w	800853a <_dtoa_r+0x43a>
 800836e:	2d00      	cmp	r5, #0
 8008370:	f000 80e3 	beq.w	800853a <_dtoa_r+0x43a>
 8008374:	ed9d 7b00 	vldr	d7, [sp]
 8008378:	f1ba 0f00 	cmp.w	sl, #0
 800837c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008380:	dd74      	ble.n	800846c <_dtoa_r+0x36c>
 8008382:	4a2a      	ldr	r2, [pc, #168]	; (800842c <_dtoa_r+0x32c>)
 8008384:	f00a 030f 	and.w	r3, sl, #15
 8008388:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800838c:	ed93 7b00 	vldr	d7, [r3]
 8008390:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008394:	06f0      	lsls	r0, r6, #27
 8008396:	ed8d 7b08 	vstr	d7, [sp, #32]
 800839a:	d565      	bpl.n	8008468 <_dtoa_r+0x368>
 800839c:	4b24      	ldr	r3, [pc, #144]	; (8008430 <_dtoa_r+0x330>)
 800839e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80083a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80083a6:	f7f8 fa1d 	bl	80007e4 <__aeabi_ddiv>
 80083aa:	e9cd 0100 	strd	r0, r1, [sp]
 80083ae:	f006 060f 	and.w	r6, r6, #15
 80083b2:	2503      	movs	r5, #3
 80083b4:	4f1e      	ldr	r7, [pc, #120]	; (8008430 <_dtoa_r+0x330>)
 80083b6:	e04c      	b.n	8008452 <_dtoa_r+0x352>
 80083b8:	2301      	movs	r3, #1
 80083ba:	930a      	str	r3, [sp, #40]	; 0x28
 80083bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083be:	4453      	add	r3, sl
 80083c0:	f103 0901 	add.w	r9, r3, #1
 80083c4:	9302      	str	r3, [sp, #8]
 80083c6:	464b      	mov	r3, r9
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	bfb8      	it	lt
 80083cc:	2301      	movlt	r3, #1
 80083ce:	e7ba      	b.n	8008346 <_dtoa_r+0x246>
 80083d0:	2300      	movs	r3, #0
 80083d2:	e7b2      	b.n	800833a <_dtoa_r+0x23a>
 80083d4:	2300      	movs	r3, #0
 80083d6:	e7f0      	b.n	80083ba <_dtoa_r+0x2ba>
 80083d8:	2501      	movs	r5, #1
 80083da:	2300      	movs	r3, #0
 80083dc:	9306      	str	r3, [sp, #24]
 80083de:	950a      	str	r5, [sp, #40]	; 0x28
 80083e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083e4:	9302      	str	r3, [sp, #8]
 80083e6:	4699      	mov	r9, r3
 80083e8:	2200      	movs	r2, #0
 80083ea:	2312      	movs	r3, #18
 80083ec:	920b      	str	r2, [sp, #44]	; 0x2c
 80083ee:	e7aa      	b.n	8008346 <_dtoa_r+0x246>
 80083f0:	2301      	movs	r3, #1
 80083f2:	930a      	str	r3, [sp, #40]	; 0x28
 80083f4:	e7f4      	b.n	80083e0 <_dtoa_r+0x2e0>
 80083f6:	2301      	movs	r3, #1
 80083f8:	9302      	str	r3, [sp, #8]
 80083fa:	4699      	mov	r9, r3
 80083fc:	461a      	mov	r2, r3
 80083fe:	e7f5      	b.n	80083ec <_dtoa_r+0x2ec>
 8008400:	3101      	adds	r1, #1
 8008402:	6071      	str	r1, [r6, #4]
 8008404:	0052      	lsls	r2, r2, #1
 8008406:	e7a2      	b.n	800834e <_dtoa_r+0x24e>
 8008408:	636f4361 	.word	0x636f4361
 800840c:	3fd287a7 	.word	0x3fd287a7
 8008410:	8b60c8b3 	.word	0x8b60c8b3
 8008414:	3fc68a28 	.word	0x3fc68a28
 8008418:	509f79fb 	.word	0x509f79fb
 800841c:	3fd34413 	.word	0x3fd34413
 8008420:	7ff00000 	.word	0x7ff00000
 8008424:	080095e1 	.word	0x080095e1
 8008428:	3ff80000 	.word	0x3ff80000
 800842c:	08009618 	.word	0x08009618
 8008430:	080095f0 	.word	0x080095f0
 8008434:	080095eb 	.word	0x080095eb
 8008438:	07f1      	lsls	r1, r6, #31
 800843a:	d508      	bpl.n	800844e <_dtoa_r+0x34e>
 800843c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008440:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008444:	f7f8 f8a4 	bl	8000590 <__aeabi_dmul>
 8008448:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800844c:	3501      	adds	r5, #1
 800844e:	1076      	asrs	r6, r6, #1
 8008450:	3708      	adds	r7, #8
 8008452:	2e00      	cmp	r6, #0
 8008454:	d1f0      	bne.n	8008438 <_dtoa_r+0x338>
 8008456:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800845a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800845e:	f7f8 f9c1 	bl	80007e4 <__aeabi_ddiv>
 8008462:	e9cd 0100 	strd	r0, r1, [sp]
 8008466:	e01a      	b.n	800849e <_dtoa_r+0x39e>
 8008468:	2502      	movs	r5, #2
 800846a:	e7a3      	b.n	80083b4 <_dtoa_r+0x2b4>
 800846c:	f000 80a0 	beq.w	80085b0 <_dtoa_r+0x4b0>
 8008470:	f1ca 0600 	rsb	r6, sl, #0
 8008474:	4b9f      	ldr	r3, [pc, #636]	; (80086f4 <_dtoa_r+0x5f4>)
 8008476:	4fa0      	ldr	r7, [pc, #640]	; (80086f8 <_dtoa_r+0x5f8>)
 8008478:	f006 020f 	and.w	r2, r6, #15
 800847c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008484:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008488:	f7f8 f882 	bl	8000590 <__aeabi_dmul>
 800848c:	e9cd 0100 	strd	r0, r1, [sp]
 8008490:	1136      	asrs	r6, r6, #4
 8008492:	2300      	movs	r3, #0
 8008494:	2502      	movs	r5, #2
 8008496:	2e00      	cmp	r6, #0
 8008498:	d17f      	bne.n	800859a <_dtoa_r+0x49a>
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1e1      	bne.n	8008462 <_dtoa_r+0x362>
 800849e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f000 8087 	beq.w	80085b4 <_dtoa_r+0x4b4>
 80084a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80084aa:	2200      	movs	r2, #0
 80084ac:	4b93      	ldr	r3, [pc, #588]	; (80086fc <_dtoa_r+0x5fc>)
 80084ae:	4630      	mov	r0, r6
 80084b0:	4639      	mov	r1, r7
 80084b2:	f7f8 fadf 	bl	8000a74 <__aeabi_dcmplt>
 80084b6:	2800      	cmp	r0, #0
 80084b8:	d07c      	beq.n	80085b4 <_dtoa_r+0x4b4>
 80084ba:	f1b9 0f00 	cmp.w	r9, #0
 80084be:	d079      	beq.n	80085b4 <_dtoa_r+0x4b4>
 80084c0:	9b02      	ldr	r3, [sp, #8]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	dd35      	ble.n	8008532 <_dtoa_r+0x432>
 80084c6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80084ca:	9308      	str	r3, [sp, #32]
 80084cc:	4639      	mov	r1, r7
 80084ce:	2200      	movs	r2, #0
 80084d0:	4b8b      	ldr	r3, [pc, #556]	; (8008700 <_dtoa_r+0x600>)
 80084d2:	4630      	mov	r0, r6
 80084d4:	f7f8 f85c 	bl	8000590 <__aeabi_dmul>
 80084d8:	e9cd 0100 	strd	r0, r1, [sp]
 80084dc:	9f02      	ldr	r7, [sp, #8]
 80084de:	3501      	adds	r5, #1
 80084e0:	4628      	mov	r0, r5
 80084e2:	f7f7 ffeb 	bl	80004bc <__aeabi_i2d>
 80084e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084ea:	f7f8 f851 	bl	8000590 <__aeabi_dmul>
 80084ee:	2200      	movs	r2, #0
 80084f0:	4b84      	ldr	r3, [pc, #528]	; (8008704 <_dtoa_r+0x604>)
 80084f2:	f7f7 fe97 	bl	8000224 <__adddf3>
 80084f6:	4605      	mov	r5, r0
 80084f8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80084fc:	2f00      	cmp	r7, #0
 80084fe:	d15d      	bne.n	80085bc <_dtoa_r+0x4bc>
 8008500:	2200      	movs	r2, #0
 8008502:	4b81      	ldr	r3, [pc, #516]	; (8008708 <_dtoa_r+0x608>)
 8008504:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008508:	f7f7 fe8a 	bl	8000220 <__aeabi_dsub>
 800850c:	462a      	mov	r2, r5
 800850e:	4633      	mov	r3, r6
 8008510:	e9cd 0100 	strd	r0, r1, [sp]
 8008514:	f7f8 facc 	bl	8000ab0 <__aeabi_dcmpgt>
 8008518:	2800      	cmp	r0, #0
 800851a:	f040 8288 	bne.w	8008a2e <_dtoa_r+0x92e>
 800851e:	462a      	mov	r2, r5
 8008520:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008524:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008528:	f7f8 faa4 	bl	8000a74 <__aeabi_dcmplt>
 800852c:	2800      	cmp	r0, #0
 800852e:	f040 827c 	bne.w	8008a2a <_dtoa_r+0x92a>
 8008532:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008536:	e9cd 2300 	strd	r2, r3, [sp]
 800853a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800853c:	2b00      	cmp	r3, #0
 800853e:	f2c0 8150 	blt.w	80087e2 <_dtoa_r+0x6e2>
 8008542:	f1ba 0f0e 	cmp.w	sl, #14
 8008546:	f300 814c 	bgt.w	80087e2 <_dtoa_r+0x6e2>
 800854a:	4b6a      	ldr	r3, [pc, #424]	; (80086f4 <_dtoa_r+0x5f4>)
 800854c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008550:	ed93 7b00 	vldr	d7, [r3]
 8008554:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008556:	2b00      	cmp	r3, #0
 8008558:	ed8d 7b02 	vstr	d7, [sp, #8]
 800855c:	f280 80d8 	bge.w	8008710 <_dtoa_r+0x610>
 8008560:	f1b9 0f00 	cmp.w	r9, #0
 8008564:	f300 80d4 	bgt.w	8008710 <_dtoa_r+0x610>
 8008568:	f040 825e 	bne.w	8008a28 <_dtoa_r+0x928>
 800856c:	2200      	movs	r2, #0
 800856e:	4b66      	ldr	r3, [pc, #408]	; (8008708 <_dtoa_r+0x608>)
 8008570:	ec51 0b17 	vmov	r0, r1, d7
 8008574:	f7f8 f80c 	bl	8000590 <__aeabi_dmul>
 8008578:	e9dd 2300 	ldrd	r2, r3, [sp]
 800857c:	f7f8 fa8e 	bl	8000a9c <__aeabi_dcmpge>
 8008580:	464f      	mov	r7, r9
 8008582:	464e      	mov	r6, r9
 8008584:	2800      	cmp	r0, #0
 8008586:	f040 8234 	bne.w	80089f2 <_dtoa_r+0x8f2>
 800858a:	2331      	movs	r3, #49	; 0x31
 800858c:	f10b 0501 	add.w	r5, fp, #1
 8008590:	f88b 3000 	strb.w	r3, [fp]
 8008594:	f10a 0a01 	add.w	sl, sl, #1
 8008598:	e22f      	b.n	80089fa <_dtoa_r+0x8fa>
 800859a:	07f2      	lsls	r2, r6, #31
 800859c:	d505      	bpl.n	80085aa <_dtoa_r+0x4aa>
 800859e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085a2:	f7f7 fff5 	bl	8000590 <__aeabi_dmul>
 80085a6:	3501      	adds	r5, #1
 80085a8:	2301      	movs	r3, #1
 80085aa:	1076      	asrs	r6, r6, #1
 80085ac:	3708      	adds	r7, #8
 80085ae:	e772      	b.n	8008496 <_dtoa_r+0x396>
 80085b0:	2502      	movs	r5, #2
 80085b2:	e774      	b.n	800849e <_dtoa_r+0x39e>
 80085b4:	f8cd a020 	str.w	sl, [sp, #32]
 80085b8:	464f      	mov	r7, r9
 80085ba:	e791      	b.n	80084e0 <_dtoa_r+0x3e0>
 80085bc:	4b4d      	ldr	r3, [pc, #308]	; (80086f4 <_dtoa_r+0x5f4>)
 80085be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80085c2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80085c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d047      	beq.n	800865c <_dtoa_r+0x55c>
 80085cc:	4602      	mov	r2, r0
 80085ce:	460b      	mov	r3, r1
 80085d0:	2000      	movs	r0, #0
 80085d2:	494e      	ldr	r1, [pc, #312]	; (800870c <_dtoa_r+0x60c>)
 80085d4:	f7f8 f906 	bl	80007e4 <__aeabi_ddiv>
 80085d8:	462a      	mov	r2, r5
 80085da:	4633      	mov	r3, r6
 80085dc:	f7f7 fe20 	bl	8000220 <__aeabi_dsub>
 80085e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80085e4:	465d      	mov	r5, fp
 80085e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085ea:	f7f8 fa81 	bl	8000af0 <__aeabi_d2iz>
 80085ee:	4606      	mov	r6, r0
 80085f0:	f7f7 ff64 	bl	80004bc <__aeabi_i2d>
 80085f4:	4602      	mov	r2, r0
 80085f6:	460b      	mov	r3, r1
 80085f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085fc:	f7f7 fe10 	bl	8000220 <__aeabi_dsub>
 8008600:	3630      	adds	r6, #48	; 0x30
 8008602:	f805 6b01 	strb.w	r6, [r5], #1
 8008606:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800860a:	e9cd 0100 	strd	r0, r1, [sp]
 800860e:	f7f8 fa31 	bl	8000a74 <__aeabi_dcmplt>
 8008612:	2800      	cmp	r0, #0
 8008614:	d163      	bne.n	80086de <_dtoa_r+0x5de>
 8008616:	e9dd 2300 	ldrd	r2, r3, [sp]
 800861a:	2000      	movs	r0, #0
 800861c:	4937      	ldr	r1, [pc, #220]	; (80086fc <_dtoa_r+0x5fc>)
 800861e:	f7f7 fdff 	bl	8000220 <__aeabi_dsub>
 8008622:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008626:	f7f8 fa25 	bl	8000a74 <__aeabi_dcmplt>
 800862a:	2800      	cmp	r0, #0
 800862c:	f040 80b7 	bne.w	800879e <_dtoa_r+0x69e>
 8008630:	eba5 030b 	sub.w	r3, r5, fp
 8008634:	429f      	cmp	r7, r3
 8008636:	f77f af7c 	ble.w	8008532 <_dtoa_r+0x432>
 800863a:	2200      	movs	r2, #0
 800863c:	4b30      	ldr	r3, [pc, #192]	; (8008700 <_dtoa_r+0x600>)
 800863e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008642:	f7f7 ffa5 	bl	8000590 <__aeabi_dmul>
 8008646:	2200      	movs	r2, #0
 8008648:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800864c:	4b2c      	ldr	r3, [pc, #176]	; (8008700 <_dtoa_r+0x600>)
 800864e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008652:	f7f7 ff9d 	bl	8000590 <__aeabi_dmul>
 8008656:	e9cd 0100 	strd	r0, r1, [sp]
 800865a:	e7c4      	b.n	80085e6 <_dtoa_r+0x4e6>
 800865c:	462a      	mov	r2, r5
 800865e:	4633      	mov	r3, r6
 8008660:	f7f7 ff96 	bl	8000590 <__aeabi_dmul>
 8008664:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008668:	eb0b 0507 	add.w	r5, fp, r7
 800866c:	465e      	mov	r6, fp
 800866e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008672:	f7f8 fa3d 	bl	8000af0 <__aeabi_d2iz>
 8008676:	4607      	mov	r7, r0
 8008678:	f7f7 ff20 	bl	80004bc <__aeabi_i2d>
 800867c:	3730      	adds	r7, #48	; 0x30
 800867e:	4602      	mov	r2, r0
 8008680:	460b      	mov	r3, r1
 8008682:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008686:	f7f7 fdcb 	bl	8000220 <__aeabi_dsub>
 800868a:	f806 7b01 	strb.w	r7, [r6], #1
 800868e:	42ae      	cmp	r6, r5
 8008690:	e9cd 0100 	strd	r0, r1, [sp]
 8008694:	f04f 0200 	mov.w	r2, #0
 8008698:	d126      	bne.n	80086e8 <_dtoa_r+0x5e8>
 800869a:	4b1c      	ldr	r3, [pc, #112]	; (800870c <_dtoa_r+0x60c>)
 800869c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80086a0:	f7f7 fdc0 	bl	8000224 <__adddf3>
 80086a4:	4602      	mov	r2, r0
 80086a6:	460b      	mov	r3, r1
 80086a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086ac:	f7f8 fa00 	bl	8000ab0 <__aeabi_dcmpgt>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	d174      	bne.n	800879e <_dtoa_r+0x69e>
 80086b4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80086b8:	2000      	movs	r0, #0
 80086ba:	4914      	ldr	r1, [pc, #80]	; (800870c <_dtoa_r+0x60c>)
 80086bc:	f7f7 fdb0 	bl	8000220 <__aeabi_dsub>
 80086c0:	4602      	mov	r2, r0
 80086c2:	460b      	mov	r3, r1
 80086c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086c8:	f7f8 f9d4 	bl	8000a74 <__aeabi_dcmplt>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	f43f af30 	beq.w	8008532 <_dtoa_r+0x432>
 80086d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80086d6:	2b30      	cmp	r3, #48	; 0x30
 80086d8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80086dc:	d002      	beq.n	80086e4 <_dtoa_r+0x5e4>
 80086de:	f8dd a020 	ldr.w	sl, [sp, #32]
 80086e2:	e04a      	b.n	800877a <_dtoa_r+0x67a>
 80086e4:	4615      	mov	r5, r2
 80086e6:	e7f4      	b.n	80086d2 <_dtoa_r+0x5d2>
 80086e8:	4b05      	ldr	r3, [pc, #20]	; (8008700 <_dtoa_r+0x600>)
 80086ea:	f7f7 ff51 	bl	8000590 <__aeabi_dmul>
 80086ee:	e9cd 0100 	strd	r0, r1, [sp]
 80086f2:	e7bc      	b.n	800866e <_dtoa_r+0x56e>
 80086f4:	08009618 	.word	0x08009618
 80086f8:	080095f0 	.word	0x080095f0
 80086fc:	3ff00000 	.word	0x3ff00000
 8008700:	40240000 	.word	0x40240000
 8008704:	401c0000 	.word	0x401c0000
 8008708:	40140000 	.word	0x40140000
 800870c:	3fe00000 	.word	0x3fe00000
 8008710:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008714:	465d      	mov	r5, fp
 8008716:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800871a:	4630      	mov	r0, r6
 800871c:	4639      	mov	r1, r7
 800871e:	f7f8 f861 	bl	80007e4 <__aeabi_ddiv>
 8008722:	f7f8 f9e5 	bl	8000af0 <__aeabi_d2iz>
 8008726:	4680      	mov	r8, r0
 8008728:	f7f7 fec8 	bl	80004bc <__aeabi_i2d>
 800872c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008730:	f7f7 ff2e 	bl	8000590 <__aeabi_dmul>
 8008734:	4602      	mov	r2, r0
 8008736:	460b      	mov	r3, r1
 8008738:	4630      	mov	r0, r6
 800873a:	4639      	mov	r1, r7
 800873c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008740:	f7f7 fd6e 	bl	8000220 <__aeabi_dsub>
 8008744:	f805 6b01 	strb.w	r6, [r5], #1
 8008748:	eba5 060b 	sub.w	r6, r5, fp
 800874c:	45b1      	cmp	r9, r6
 800874e:	4602      	mov	r2, r0
 8008750:	460b      	mov	r3, r1
 8008752:	d139      	bne.n	80087c8 <_dtoa_r+0x6c8>
 8008754:	f7f7 fd66 	bl	8000224 <__adddf3>
 8008758:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800875c:	4606      	mov	r6, r0
 800875e:	460f      	mov	r7, r1
 8008760:	f7f8 f9a6 	bl	8000ab0 <__aeabi_dcmpgt>
 8008764:	b9c8      	cbnz	r0, 800879a <_dtoa_r+0x69a>
 8008766:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800876a:	4630      	mov	r0, r6
 800876c:	4639      	mov	r1, r7
 800876e:	f7f8 f977 	bl	8000a60 <__aeabi_dcmpeq>
 8008772:	b110      	cbz	r0, 800877a <_dtoa_r+0x67a>
 8008774:	f018 0f01 	tst.w	r8, #1
 8008778:	d10f      	bne.n	800879a <_dtoa_r+0x69a>
 800877a:	9904      	ldr	r1, [sp, #16]
 800877c:	4620      	mov	r0, r4
 800877e:	f000 fabb 	bl	8008cf8 <_Bfree>
 8008782:	2300      	movs	r3, #0
 8008784:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008786:	702b      	strb	r3, [r5, #0]
 8008788:	f10a 0301 	add.w	r3, sl, #1
 800878c:	6013      	str	r3, [r2, #0]
 800878e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008790:	2b00      	cmp	r3, #0
 8008792:	f000 8241 	beq.w	8008c18 <_dtoa_r+0xb18>
 8008796:	601d      	str	r5, [r3, #0]
 8008798:	e23e      	b.n	8008c18 <_dtoa_r+0xb18>
 800879a:	f8cd a020 	str.w	sl, [sp, #32]
 800879e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80087a2:	2a39      	cmp	r2, #57	; 0x39
 80087a4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80087a8:	d108      	bne.n	80087bc <_dtoa_r+0x6bc>
 80087aa:	459b      	cmp	fp, r3
 80087ac:	d10a      	bne.n	80087c4 <_dtoa_r+0x6c4>
 80087ae:	9b08      	ldr	r3, [sp, #32]
 80087b0:	3301      	adds	r3, #1
 80087b2:	9308      	str	r3, [sp, #32]
 80087b4:	2330      	movs	r3, #48	; 0x30
 80087b6:	f88b 3000 	strb.w	r3, [fp]
 80087ba:	465b      	mov	r3, fp
 80087bc:	781a      	ldrb	r2, [r3, #0]
 80087be:	3201      	adds	r2, #1
 80087c0:	701a      	strb	r2, [r3, #0]
 80087c2:	e78c      	b.n	80086de <_dtoa_r+0x5de>
 80087c4:	461d      	mov	r5, r3
 80087c6:	e7ea      	b.n	800879e <_dtoa_r+0x69e>
 80087c8:	2200      	movs	r2, #0
 80087ca:	4b9b      	ldr	r3, [pc, #620]	; (8008a38 <_dtoa_r+0x938>)
 80087cc:	f7f7 fee0 	bl	8000590 <__aeabi_dmul>
 80087d0:	2200      	movs	r2, #0
 80087d2:	2300      	movs	r3, #0
 80087d4:	4606      	mov	r6, r0
 80087d6:	460f      	mov	r7, r1
 80087d8:	f7f8 f942 	bl	8000a60 <__aeabi_dcmpeq>
 80087dc:	2800      	cmp	r0, #0
 80087de:	d09a      	beq.n	8008716 <_dtoa_r+0x616>
 80087e0:	e7cb      	b.n	800877a <_dtoa_r+0x67a>
 80087e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087e4:	2a00      	cmp	r2, #0
 80087e6:	f000 808b 	beq.w	8008900 <_dtoa_r+0x800>
 80087ea:	9a06      	ldr	r2, [sp, #24]
 80087ec:	2a01      	cmp	r2, #1
 80087ee:	dc6e      	bgt.n	80088ce <_dtoa_r+0x7ce>
 80087f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80087f2:	2a00      	cmp	r2, #0
 80087f4:	d067      	beq.n	80088c6 <_dtoa_r+0x7c6>
 80087f6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80087fa:	9f07      	ldr	r7, [sp, #28]
 80087fc:	9d05      	ldr	r5, [sp, #20]
 80087fe:	9a05      	ldr	r2, [sp, #20]
 8008800:	2101      	movs	r1, #1
 8008802:	441a      	add	r2, r3
 8008804:	4620      	mov	r0, r4
 8008806:	9205      	str	r2, [sp, #20]
 8008808:	4498      	add	r8, r3
 800880a:	f000 fb15 	bl	8008e38 <__i2b>
 800880e:	4606      	mov	r6, r0
 8008810:	2d00      	cmp	r5, #0
 8008812:	dd0c      	ble.n	800882e <_dtoa_r+0x72e>
 8008814:	f1b8 0f00 	cmp.w	r8, #0
 8008818:	dd09      	ble.n	800882e <_dtoa_r+0x72e>
 800881a:	4545      	cmp	r5, r8
 800881c:	9a05      	ldr	r2, [sp, #20]
 800881e:	462b      	mov	r3, r5
 8008820:	bfa8      	it	ge
 8008822:	4643      	movge	r3, r8
 8008824:	1ad2      	subs	r2, r2, r3
 8008826:	9205      	str	r2, [sp, #20]
 8008828:	1aed      	subs	r5, r5, r3
 800882a:	eba8 0803 	sub.w	r8, r8, r3
 800882e:	9b07      	ldr	r3, [sp, #28]
 8008830:	b1eb      	cbz	r3, 800886e <_dtoa_r+0x76e>
 8008832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008834:	2b00      	cmp	r3, #0
 8008836:	d067      	beq.n	8008908 <_dtoa_r+0x808>
 8008838:	b18f      	cbz	r7, 800885e <_dtoa_r+0x75e>
 800883a:	4631      	mov	r1, r6
 800883c:	463a      	mov	r2, r7
 800883e:	4620      	mov	r0, r4
 8008840:	f000 fb9a 	bl	8008f78 <__pow5mult>
 8008844:	9a04      	ldr	r2, [sp, #16]
 8008846:	4601      	mov	r1, r0
 8008848:	4606      	mov	r6, r0
 800884a:	4620      	mov	r0, r4
 800884c:	f000 fafd 	bl	8008e4a <__multiply>
 8008850:	9904      	ldr	r1, [sp, #16]
 8008852:	9008      	str	r0, [sp, #32]
 8008854:	4620      	mov	r0, r4
 8008856:	f000 fa4f 	bl	8008cf8 <_Bfree>
 800885a:	9b08      	ldr	r3, [sp, #32]
 800885c:	9304      	str	r3, [sp, #16]
 800885e:	9b07      	ldr	r3, [sp, #28]
 8008860:	1bda      	subs	r2, r3, r7
 8008862:	d004      	beq.n	800886e <_dtoa_r+0x76e>
 8008864:	9904      	ldr	r1, [sp, #16]
 8008866:	4620      	mov	r0, r4
 8008868:	f000 fb86 	bl	8008f78 <__pow5mult>
 800886c:	9004      	str	r0, [sp, #16]
 800886e:	2101      	movs	r1, #1
 8008870:	4620      	mov	r0, r4
 8008872:	f000 fae1 	bl	8008e38 <__i2b>
 8008876:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008878:	4607      	mov	r7, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	f000 81d0 	beq.w	8008c20 <_dtoa_r+0xb20>
 8008880:	461a      	mov	r2, r3
 8008882:	4601      	mov	r1, r0
 8008884:	4620      	mov	r0, r4
 8008886:	f000 fb77 	bl	8008f78 <__pow5mult>
 800888a:	9b06      	ldr	r3, [sp, #24]
 800888c:	2b01      	cmp	r3, #1
 800888e:	4607      	mov	r7, r0
 8008890:	dc40      	bgt.n	8008914 <_dtoa_r+0x814>
 8008892:	9b00      	ldr	r3, [sp, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d139      	bne.n	800890c <_dtoa_r+0x80c>
 8008898:	9b01      	ldr	r3, [sp, #4]
 800889a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d136      	bne.n	8008910 <_dtoa_r+0x810>
 80088a2:	9b01      	ldr	r3, [sp, #4]
 80088a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088a8:	0d1b      	lsrs	r3, r3, #20
 80088aa:	051b      	lsls	r3, r3, #20
 80088ac:	b12b      	cbz	r3, 80088ba <_dtoa_r+0x7ba>
 80088ae:	9b05      	ldr	r3, [sp, #20]
 80088b0:	3301      	adds	r3, #1
 80088b2:	9305      	str	r3, [sp, #20]
 80088b4:	f108 0801 	add.w	r8, r8, #1
 80088b8:	2301      	movs	r3, #1
 80088ba:	9307      	str	r3, [sp, #28]
 80088bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d12a      	bne.n	8008918 <_dtoa_r+0x818>
 80088c2:	2001      	movs	r0, #1
 80088c4:	e030      	b.n	8008928 <_dtoa_r+0x828>
 80088c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088c8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80088cc:	e795      	b.n	80087fa <_dtoa_r+0x6fa>
 80088ce:	9b07      	ldr	r3, [sp, #28]
 80088d0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80088d4:	42bb      	cmp	r3, r7
 80088d6:	bfbf      	itttt	lt
 80088d8:	9b07      	ldrlt	r3, [sp, #28]
 80088da:	9707      	strlt	r7, [sp, #28]
 80088dc:	1afa      	sublt	r2, r7, r3
 80088de:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80088e0:	bfbb      	ittet	lt
 80088e2:	189b      	addlt	r3, r3, r2
 80088e4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80088e6:	1bdf      	subge	r7, r3, r7
 80088e8:	2700      	movlt	r7, #0
 80088ea:	f1b9 0f00 	cmp.w	r9, #0
 80088ee:	bfb5      	itete	lt
 80088f0:	9b05      	ldrlt	r3, [sp, #20]
 80088f2:	9d05      	ldrge	r5, [sp, #20]
 80088f4:	eba3 0509 	sublt.w	r5, r3, r9
 80088f8:	464b      	movge	r3, r9
 80088fa:	bfb8      	it	lt
 80088fc:	2300      	movlt	r3, #0
 80088fe:	e77e      	b.n	80087fe <_dtoa_r+0x6fe>
 8008900:	9f07      	ldr	r7, [sp, #28]
 8008902:	9d05      	ldr	r5, [sp, #20]
 8008904:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008906:	e783      	b.n	8008810 <_dtoa_r+0x710>
 8008908:	9a07      	ldr	r2, [sp, #28]
 800890a:	e7ab      	b.n	8008864 <_dtoa_r+0x764>
 800890c:	2300      	movs	r3, #0
 800890e:	e7d4      	b.n	80088ba <_dtoa_r+0x7ba>
 8008910:	9b00      	ldr	r3, [sp, #0]
 8008912:	e7d2      	b.n	80088ba <_dtoa_r+0x7ba>
 8008914:	2300      	movs	r3, #0
 8008916:	9307      	str	r3, [sp, #28]
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800891e:	6918      	ldr	r0, [r3, #16]
 8008920:	f000 fa3c 	bl	8008d9c <__hi0bits>
 8008924:	f1c0 0020 	rsb	r0, r0, #32
 8008928:	4440      	add	r0, r8
 800892a:	f010 001f 	ands.w	r0, r0, #31
 800892e:	d047      	beq.n	80089c0 <_dtoa_r+0x8c0>
 8008930:	f1c0 0320 	rsb	r3, r0, #32
 8008934:	2b04      	cmp	r3, #4
 8008936:	dd3b      	ble.n	80089b0 <_dtoa_r+0x8b0>
 8008938:	9b05      	ldr	r3, [sp, #20]
 800893a:	f1c0 001c 	rsb	r0, r0, #28
 800893e:	4403      	add	r3, r0
 8008940:	9305      	str	r3, [sp, #20]
 8008942:	4405      	add	r5, r0
 8008944:	4480      	add	r8, r0
 8008946:	9b05      	ldr	r3, [sp, #20]
 8008948:	2b00      	cmp	r3, #0
 800894a:	dd05      	ble.n	8008958 <_dtoa_r+0x858>
 800894c:	461a      	mov	r2, r3
 800894e:	9904      	ldr	r1, [sp, #16]
 8008950:	4620      	mov	r0, r4
 8008952:	f000 fb5f 	bl	8009014 <__lshift>
 8008956:	9004      	str	r0, [sp, #16]
 8008958:	f1b8 0f00 	cmp.w	r8, #0
 800895c:	dd05      	ble.n	800896a <_dtoa_r+0x86a>
 800895e:	4639      	mov	r1, r7
 8008960:	4642      	mov	r2, r8
 8008962:	4620      	mov	r0, r4
 8008964:	f000 fb56 	bl	8009014 <__lshift>
 8008968:	4607      	mov	r7, r0
 800896a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800896c:	b353      	cbz	r3, 80089c4 <_dtoa_r+0x8c4>
 800896e:	4639      	mov	r1, r7
 8008970:	9804      	ldr	r0, [sp, #16]
 8008972:	f000 fba3 	bl	80090bc <__mcmp>
 8008976:	2800      	cmp	r0, #0
 8008978:	da24      	bge.n	80089c4 <_dtoa_r+0x8c4>
 800897a:	2300      	movs	r3, #0
 800897c:	220a      	movs	r2, #10
 800897e:	9904      	ldr	r1, [sp, #16]
 8008980:	4620      	mov	r0, r4
 8008982:	f000 f9d0 	bl	8008d26 <__multadd>
 8008986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008988:	9004      	str	r0, [sp, #16]
 800898a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800898e:	2b00      	cmp	r3, #0
 8008990:	f000 814d 	beq.w	8008c2e <_dtoa_r+0xb2e>
 8008994:	2300      	movs	r3, #0
 8008996:	4631      	mov	r1, r6
 8008998:	220a      	movs	r2, #10
 800899a:	4620      	mov	r0, r4
 800899c:	f000 f9c3 	bl	8008d26 <__multadd>
 80089a0:	9b02      	ldr	r3, [sp, #8]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	4606      	mov	r6, r0
 80089a6:	dc4f      	bgt.n	8008a48 <_dtoa_r+0x948>
 80089a8:	9b06      	ldr	r3, [sp, #24]
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	dd4c      	ble.n	8008a48 <_dtoa_r+0x948>
 80089ae:	e011      	b.n	80089d4 <_dtoa_r+0x8d4>
 80089b0:	d0c9      	beq.n	8008946 <_dtoa_r+0x846>
 80089b2:	9a05      	ldr	r2, [sp, #20]
 80089b4:	331c      	adds	r3, #28
 80089b6:	441a      	add	r2, r3
 80089b8:	9205      	str	r2, [sp, #20]
 80089ba:	441d      	add	r5, r3
 80089bc:	4498      	add	r8, r3
 80089be:	e7c2      	b.n	8008946 <_dtoa_r+0x846>
 80089c0:	4603      	mov	r3, r0
 80089c2:	e7f6      	b.n	80089b2 <_dtoa_r+0x8b2>
 80089c4:	f1b9 0f00 	cmp.w	r9, #0
 80089c8:	dc38      	bgt.n	8008a3c <_dtoa_r+0x93c>
 80089ca:	9b06      	ldr	r3, [sp, #24]
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	dd35      	ble.n	8008a3c <_dtoa_r+0x93c>
 80089d0:	f8cd 9008 	str.w	r9, [sp, #8]
 80089d4:	9b02      	ldr	r3, [sp, #8]
 80089d6:	b963      	cbnz	r3, 80089f2 <_dtoa_r+0x8f2>
 80089d8:	4639      	mov	r1, r7
 80089da:	2205      	movs	r2, #5
 80089dc:	4620      	mov	r0, r4
 80089de:	f000 f9a2 	bl	8008d26 <__multadd>
 80089e2:	4601      	mov	r1, r0
 80089e4:	4607      	mov	r7, r0
 80089e6:	9804      	ldr	r0, [sp, #16]
 80089e8:	f000 fb68 	bl	80090bc <__mcmp>
 80089ec:	2800      	cmp	r0, #0
 80089ee:	f73f adcc 	bgt.w	800858a <_dtoa_r+0x48a>
 80089f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089f4:	465d      	mov	r5, fp
 80089f6:	ea6f 0a03 	mvn.w	sl, r3
 80089fa:	f04f 0900 	mov.w	r9, #0
 80089fe:	4639      	mov	r1, r7
 8008a00:	4620      	mov	r0, r4
 8008a02:	f000 f979 	bl	8008cf8 <_Bfree>
 8008a06:	2e00      	cmp	r6, #0
 8008a08:	f43f aeb7 	beq.w	800877a <_dtoa_r+0x67a>
 8008a0c:	f1b9 0f00 	cmp.w	r9, #0
 8008a10:	d005      	beq.n	8008a1e <_dtoa_r+0x91e>
 8008a12:	45b1      	cmp	r9, r6
 8008a14:	d003      	beq.n	8008a1e <_dtoa_r+0x91e>
 8008a16:	4649      	mov	r1, r9
 8008a18:	4620      	mov	r0, r4
 8008a1a:	f000 f96d 	bl	8008cf8 <_Bfree>
 8008a1e:	4631      	mov	r1, r6
 8008a20:	4620      	mov	r0, r4
 8008a22:	f000 f969 	bl	8008cf8 <_Bfree>
 8008a26:	e6a8      	b.n	800877a <_dtoa_r+0x67a>
 8008a28:	2700      	movs	r7, #0
 8008a2a:	463e      	mov	r6, r7
 8008a2c:	e7e1      	b.n	80089f2 <_dtoa_r+0x8f2>
 8008a2e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008a32:	463e      	mov	r6, r7
 8008a34:	e5a9      	b.n	800858a <_dtoa_r+0x48a>
 8008a36:	bf00      	nop
 8008a38:	40240000 	.word	0x40240000
 8008a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a3e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f000 80fa 	beq.w	8008c3c <_dtoa_r+0xb3c>
 8008a48:	2d00      	cmp	r5, #0
 8008a4a:	dd05      	ble.n	8008a58 <_dtoa_r+0x958>
 8008a4c:	4631      	mov	r1, r6
 8008a4e:	462a      	mov	r2, r5
 8008a50:	4620      	mov	r0, r4
 8008a52:	f000 fadf 	bl	8009014 <__lshift>
 8008a56:	4606      	mov	r6, r0
 8008a58:	9b07      	ldr	r3, [sp, #28]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d04c      	beq.n	8008af8 <_dtoa_r+0x9f8>
 8008a5e:	6871      	ldr	r1, [r6, #4]
 8008a60:	4620      	mov	r0, r4
 8008a62:	f000 f915 	bl	8008c90 <_Balloc>
 8008a66:	6932      	ldr	r2, [r6, #16]
 8008a68:	3202      	adds	r2, #2
 8008a6a:	4605      	mov	r5, r0
 8008a6c:	0092      	lsls	r2, r2, #2
 8008a6e:	f106 010c 	add.w	r1, r6, #12
 8008a72:	300c      	adds	r0, #12
 8008a74:	f7fe fe46 	bl	8007704 <memcpy>
 8008a78:	2201      	movs	r2, #1
 8008a7a:	4629      	mov	r1, r5
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f000 fac9 	bl	8009014 <__lshift>
 8008a82:	9b00      	ldr	r3, [sp, #0]
 8008a84:	f8cd b014 	str.w	fp, [sp, #20]
 8008a88:	f003 0301 	and.w	r3, r3, #1
 8008a8c:	46b1      	mov	r9, r6
 8008a8e:	9307      	str	r3, [sp, #28]
 8008a90:	4606      	mov	r6, r0
 8008a92:	4639      	mov	r1, r7
 8008a94:	9804      	ldr	r0, [sp, #16]
 8008a96:	f7ff faa7 	bl	8007fe8 <quorem>
 8008a9a:	4649      	mov	r1, r9
 8008a9c:	4605      	mov	r5, r0
 8008a9e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008aa2:	9804      	ldr	r0, [sp, #16]
 8008aa4:	f000 fb0a 	bl	80090bc <__mcmp>
 8008aa8:	4632      	mov	r2, r6
 8008aaa:	9000      	str	r0, [sp, #0]
 8008aac:	4639      	mov	r1, r7
 8008aae:	4620      	mov	r0, r4
 8008ab0:	f000 fb1e 	bl	80090f0 <__mdiff>
 8008ab4:	68c3      	ldr	r3, [r0, #12]
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	bb03      	cbnz	r3, 8008afc <_dtoa_r+0x9fc>
 8008aba:	4601      	mov	r1, r0
 8008abc:	9008      	str	r0, [sp, #32]
 8008abe:	9804      	ldr	r0, [sp, #16]
 8008ac0:	f000 fafc 	bl	80090bc <__mcmp>
 8008ac4:	9a08      	ldr	r2, [sp, #32]
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	4611      	mov	r1, r2
 8008aca:	4620      	mov	r0, r4
 8008acc:	9308      	str	r3, [sp, #32]
 8008ace:	f000 f913 	bl	8008cf8 <_Bfree>
 8008ad2:	9b08      	ldr	r3, [sp, #32]
 8008ad4:	b9a3      	cbnz	r3, 8008b00 <_dtoa_r+0xa00>
 8008ad6:	9a06      	ldr	r2, [sp, #24]
 8008ad8:	b992      	cbnz	r2, 8008b00 <_dtoa_r+0xa00>
 8008ada:	9a07      	ldr	r2, [sp, #28]
 8008adc:	b982      	cbnz	r2, 8008b00 <_dtoa_r+0xa00>
 8008ade:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008ae2:	d029      	beq.n	8008b38 <_dtoa_r+0xa38>
 8008ae4:	9b00      	ldr	r3, [sp, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	dd01      	ble.n	8008aee <_dtoa_r+0x9ee>
 8008aea:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008aee:	9b05      	ldr	r3, [sp, #20]
 8008af0:	1c5d      	adds	r5, r3, #1
 8008af2:	f883 8000 	strb.w	r8, [r3]
 8008af6:	e782      	b.n	80089fe <_dtoa_r+0x8fe>
 8008af8:	4630      	mov	r0, r6
 8008afa:	e7c2      	b.n	8008a82 <_dtoa_r+0x982>
 8008afc:	2301      	movs	r3, #1
 8008afe:	e7e3      	b.n	8008ac8 <_dtoa_r+0x9c8>
 8008b00:	9a00      	ldr	r2, [sp, #0]
 8008b02:	2a00      	cmp	r2, #0
 8008b04:	db04      	blt.n	8008b10 <_dtoa_r+0xa10>
 8008b06:	d125      	bne.n	8008b54 <_dtoa_r+0xa54>
 8008b08:	9a06      	ldr	r2, [sp, #24]
 8008b0a:	bb1a      	cbnz	r2, 8008b54 <_dtoa_r+0xa54>
 8008b0c:	9a07      	ldr	r2, [sp, #28]
 8008b0e:	bb0a      	cbnz	r2, 8008b54 <_dtoa_r+0xa54>
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	ddec      	ble.n	8008aee <_dtoa_r+0x9ee>
 8008b14:	2201      	movs	r2, #1
 8008b16:	9904      	ldr	r1, [sp, #16]
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f000 fa7b 	bl	8009014 <__lshift>
 8008b1e:	4639      	mov	r1, r7
 8008b20:	9004      	str	r0, [sp, #16]
 8008b22:	f000 facb 	bl	80090bc <__mcmp>
 8008b26:	2800      	cmp	r0, #0
 8008b28:	dc03      	bgt.n	8008b32 <_dtoa_r+0xa32>
 8008b2a:	d1e0      	bne.n	8008aee <_dtoa_r+0x9ee>
 8008b2c:	f018 0f01 	tst.w	r8, #1
 8008b30:	d0dd      	beq.n	8008aee <_dtoa_r+0x9ee>
 8008b32:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008b36:	d1d8      	bne.n	8008aea <_dtoa_r+0x9ea>
 8008b38:	9b05      	ldr	r3, [sp, #20]
 8008b3a:	9a05      	ldr	r2, [sp, #20]
 8008b3c:	1c5d      	adds	r5, r3, #1
 8008b3e:	2339      	movs	r3, #57	; 0x39
 8008b40:	7013      	strb	r3, [r2, #0]
 8008b42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008b46:	2b39      	cmp	r3, #57	; 0x39
 8008b48:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008b4c:	d04f      	beq.n	8008bee <_dtoa_r+0xaee>
 8008b4e:	3301      	adds	r3, #1
 8008b50:	7013      	strb	r3, [r2, #0]
 8008b52:	e754      	b.n	80089fe <_dtoa_r+0x8fe>
 8008b54:	9a05      	ldr	r2, [sp, #20]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	f102 0501 	add.w	r5, r2, #1
 8008b5c:	dd06      	ble.n	8008b6c <_dtoa_r+0xa6c>
 8008b5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008b62:	d0e9      	beq.n	8008b38 <_dtoa_r+0xa38>
 8008b64:	f108 0801 	add.w	r8, r8, #1
 8008b68:	9b05      	ldr	r3, [sp, #20]
 8008b6a:	e7c2      	b.n	8008af2 <_dtoa_r+0x9f2>
 8008b6c:	9a02      	ldr	r2, [sp, #8]
 8008b6e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008b72:	eba5 030b 	sub.w	r3, r5, fp
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d021      	beq.n	8008bbe <_dtoa_r+0xabe>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	220a      	movs	r2, #10
 8008b7e:	9904      	ldr	r1, [sp, #16]
 8008b80:	4620      	mov	r0, r4
 8008b82:	f000 f8d0 	bl	8008d26 <__multadd>
 8008b86:	45b1      	cmp	r9, r6
 8008b88:	9004      	str	r0, [sp, #16]
 8008b8a:	f04f 0300 	mov.w	r3, #0
 8008b8e:	f04f 020a 	mov.w	r2, #10
 8008b92:	4649      	mov	r1, r9
 8008b94:	4620      	mov	r0, r4
 8008b96:	d105      	bne.n	8008ba4 <_dtoa_r+0xaa4>
 8008b98:	f000 f8c5 	bl	8008d26 <__multadd>
 8008b9c:	4681      	mov	r9, r0
 8008b9e:	4606      	mov	r6, r0
 8008ba0:	9505      	str	r5, [sp, #20]
 8008ba2:	e776      	b.n	8008a92 <_dtoa_r+0x992>
 8008ba4:	f000 f8bf 	bl	8008d26 <__multadd>
 8008ba8:	4631      	mov	r1, r6
 8008baa:	4681      	mov	r9, r0
 8008bac:	2300      	movs	r3, #0
 8008bae:	220a      	movs	r2, #10
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f000 f8b8 	bl	8008d26 <__multadd>
 8008bb6:	4606      	mov	r6, r0
 8008bb8:	e7f2      	b.n	8008ba0 <_dtoa_r+0xaa0>
 8008bba:	f04f 0900 	mov.w	r9, #0
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	9904      	ldr	r1, [sp, #16]
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	f000 fa26 	bl	8009014 <__lshift>
 8008bc8:	4639      	mov	r1, r7
 8008bca:	9004      	str	r0, [sp, #16]
 8008bcc:	f000 fa76 	bl	80090bc <__mcmp>
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	dcb6      	bgt.n	8008b42 <_dtoa_r+0xa42>
 8008bd4:	d102      	bne.n	8008bdc <_dtoa_r+0xadc>
 8008bd6:	f018 0f01 	tst.w	r8, #1
 8008bda:	d1b2      	bne.n	8008b42 <_dtoa_r+0xa42>
 8008bdc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008be0:	2b30      	cmp	r3, #48	; 0x30
 8008be2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008be6:	f47f af0a 	bne.w	80089fe <_dtoa_r+0x8fe>
 8008bea:	4615      	mov	r5, r2
 8008bec:	e7f6      	b.n	8008bdc <_dtoa_r+0xadc>
 8008bee:	4593      	cmp	fp, r2
 8008bf0:	d105      	bne.n	8008bfe <_dtoa_r+0xafe>
 8008bf2:	2331      	movs	r3, #49	; 0x31
 8008bf4:	f10a 0a01 	add.w	sl, sl, #1
 8008bf8:	f88b 3000 	strb.w	r3, [fp]
 8008bfc:	e6ff      	b.n	80089fe <_dtoa_r+0x8fe>
 8008bfe:	4615      	mov	r5, r2
 8008c00:	e79f      	b.n	8008b42 <_dtoa_r+0xa42>
 8008c02:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008c68 <_dtoa_r+0xb68>
 8008c06:	e007      	b.n	8008c18 <_dtoa_r+0xb18>
 8008c08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c0a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008c6c <_dtoa_r+0xb6c>
 8008c0e:	b11b      	cbz	r3, 8008c18 <_dtoa_r+0xb18>
 8008c10:	f10b 0308 	add.w	r3, fp, #8
 8008c14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c16:	6013      	str	r3, [r2, #0]
 8008c18:	4658      	mov	r0, fp
 8008c1a:	b017      	add	sp, #92	; 0x5c
 8008c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c20:	9b06      	ldr	r3, [sp, #24]
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	f77f ae35 	ble.w	8008892 <_dtoa_r+0x792>
 8008c28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c2a:	9307      	str	r3, [sp, #28]
 8008c2c:	e649      	b.n	80088c2 <_dtoa_r+0x7c2>
 8008c2e:	9b02      	ldr	r3, [sp, #8]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	dc03      	bgt.n	8008c3c <_dtoa_r+0xb3c>
 8008c34:	9b06      	ldr	r3, [sp, #24]
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	f73f aecc 	bgt.w	80089d4 <_dtoa_r+0x8d4>
 8008c3c:	465d      	mov	r5, fp
 8008c3e:	4639      	mov	r1, r7
 8008c40:	9804      	ldr	r0, [sp, #16]
 8008c42:	f7ff f9d1 	bl	8007fe8 <quorem>
 8008c46:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008c4a:	f805 8b01 	strb.w	r8, [r5], #1
 8008c4e:	9a02      	ldr	r2, [sp, #8]
 8008c50:	eba5 030b 	sub.w	r3, r5, fp
 8008c54:	429a      	cmp	r2, r3
 8008c56:	ddb0      	ble.n	8008bba <_dtoa_r+0xaba>
 8008c58:	2300      	movs	r3, #0
 8008c5a:	220a      	movs	r2, #10
 8008c5c:	9904      	ldr	r1, [sp, #16]
 8008c5e:	4620      	mov	r0, r4
 8008c60:	f000 f861 	bl	8008d26 <__multadd>
 8008c64:	9004      	str	r0, [sp, #16]
 8008c66:	e7ea      	b.n	8008c3e <_dtoa_r+0xb3e>
 8008c68:	080095e0 	.word	0x080095e0
 8008c6c:	080095e2 	.word	0x080095e2

08008c70 <_localeconv_r>:
 8008c70:	4b04      	ldr	r3, [pc, #16]	; (8008c84 <_localeconv_r+0x14>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	6a18      	ldr	r0, [r3, #32]
 8008c76:	4b04      	ldr	r3, [pc, #16]	; (8008c88 <_localeconv_r+0x18>)
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	bf08      	it	eq
 8008c7c:	4618      	moveq	r0, r3
 8008c7e:	30f0      	adds	r0, #240	; 0xf0
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	2000000c 	.word	0x2000000c
 8008c88:	20000070 	.word	0x20000070

08008c8c <__malloc_lock>:
 8008c8c:	4770      	bx	lr

08008c8e <__malloc_unlock>:
 8008c8e:	4770      	bx	lr

08008c90 <_Balloc>:
 8008c90:	b570      	push	{r4, r5, r6, lr}
 8008c92:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c94:	4604      	mov	r4, r0
 8008c96:	460e      	mov	r6, r1
 8008c98:	b93d      	cbnz	r5, 8008caa <_Balloc+0x1a>
 8008c9a:	2010      	movs	r0, #16
 8008c9c:	f7fe fd22 	bl	80076e4 <malloc>
 8008ca0:	6260      	str	r0, [r4, #36]	; 0x24
 8008ca2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008ca6:	6005      	str	r5, [r0, #0]
 8008ca8:	60c5      	str	r5, [r0, #12]
 8008caa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008cac:	68eb      	ldr	r3, [r5, #12]
 8008cae:	b183      	cbz	r3, 8008cd2 <_Balloc+0x42>
 8008cb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008cb8:	b9b8      	cbnz	r0, 8008cea <_Balloc+0x5a>
 8008cba:	2101      	movs	r1, #1
 8008cbc:	fa01 f506 	lsl.w	r5, r1, r6
 8008cc0:	1d6a      	adds	r2, r5, #5
 8008cc2:	0092      	lsls	r2, r2, #2
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	f000 fabf 	bl	8009248 <_calloc_r>
 8008cca:	b160      	cbz	r0, 8008ce6 <_Balloc+0x56>
 8008ccc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008cd0:	e00e      	b.n	8008cf0 <_Balloc+0x60>
 8008cd2:	2221      	movs	r2, #33	; 0x21
 8008cd4:	2104      	movs	r1, #4
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	f000 fab6 	bl	8009248 <_calloc_r>
 8008cdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cde:	60e8      	str	r0, [r5, #12]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d1e4      	bne.n	8008cb0 <_Balloc+0x20>
 8008ce6:	2000      	movs	r0, #0
 8008ce8:	bd70      	pop	{r4, r5, r6, pc}
 8008cea:	6802      	ldr	r2, [r0, #0]
 8008cec:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008cf6:	e7f7      	b.n	8008ce8 <_Balloc+0x58>

08008cf8 <_Bfree>:
 8008cf8:	b570      	push	{r4, r5, r6, lr}
 8008cfa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008cfc:	4606      	mov	r6, r0
 8008cfe:	460d      	mov	r5, r1
 8008d00:	b93c      	cbnz	r4, 8008d12 <_Bfree+0x1a>
 8008d02:	2010      	movs	r0, #16
 8008d04:	f7fe fcee 	bl	80076e4 <malloc>
 8008d08:	6270      	str	r0, [r6, #36]	; 0x24
 8008d0a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d0e:	6004      	str	r4, [r0, #0]
 8008d10:	60c4      	str	r4, [r0, #12]
 8008d12:	b13d      	cbz	r5, 8008d24 <_Bfree+0x2c>
 8008d14:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008d16:	686a      	ldr	r2, [r5, #4]
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d1e:	6029      	str	r1, [r5, #0]
 8008d20:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008d24:	bd70      	pop	{r4, r5, r6, pc}

08008d26 <__multadd>:
 8008d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d2a:	690d      	ldr	r5, [r1, #16]
 8008d2c:	461f      	mov	r7, r3
 8008d2e:	4606      	mov	r6, r0
 8008d30:	460c      	mov	r4, r1
 8008d32:	f101 0c14 	add.w	ip, r1, #20
 8008d36:	2300      	movs	r3, #0
 8008d38:	f8dc 0000 	ldr.w	r0, [ip]
 8008d3c:	b281      	uxth	r1, r0
 8008d3e:	fb02 7101 	mla	r1, r2, r1, r7
 8008d42:	0c0f      	lsrs	r7, r1, #16
 8008d44:	0c00      	lsrs	r0, r0, #16
 8008d46:	fb02 7000 	mla	r0, r2, r0, r7
 8008d4a:	b289      	uxth	r1, r1
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008d52:	429d      	cmp	r5, r3
 8008d54:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008d58:	f84c 1b04 	str.w	r1, [ip], #4
 8008d5c:	dcec      	bgt.n	8008d38 <__multadd+0x12>
 8008d5e:	b1d7      	cbz	r7, 8008d96 <__multadd+0x70>
 8008d60:	68a3      	ldr	r3, [r4, #8]
 8008d62:	42ab      	cmp	r3, r5
 8008d64:	dc12      	bgt.n	8008d8c <__multadd+0x66>
 8008d66:	6861      	ldr	r1, [r4, #4]
 8008d68:	4630      	mov	r0, r6
 8008d6a:	3101      	adds	r1, #1
 8008d6c:	f7ff ff90 	bl	8008c90 <_Balloc>
 8008d70:	6922      	ldr	r2, [r4, #16]
 8008d72:	3202      	adds	r2, #2
 8008d74:	f104 010c 	add.w	r1, r4, #12
 8008d78:	4680      	mov	r8, r0
 8008d7a:	0092      	lsls	r2, r2, #2
 8008d7c:	300c      	adds	r0, #12
 8008d7e:	f7fe fcc1 	bl	8007704 <memcpy>
 8008d82:	4621      	mov	r1, r4
 8008d84:	4630      	mov	r0, r6
 8008d86:	f7ff ffb7 	bl	8008cf8 <_Bfree>
 8008d8a:	4644      	mov	r4, r8
 8008d8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d90:	3501      	adds	r5, #1
 8008d92:	615f      	str	r7, [r3, #20]
 8008d94:	6125      	str	r5, [r4, #16]
 8008d96:	4620      	mov	r0, r4
 8008d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008d9c <__hi0bits>:
 8008d9c:	0c02      	lsrs	r2, r0, #16
 8008d9e:	0412      	lsls	r2, r2, #16
 8008da0:	4603      	mov	r3, r0
 8008da2:	b9b2      	cbnz	r2, 8008dd2 <__hi0bits+0x36>
 8008da4:	0403      	lsls	r3, r0, #16
 8008da6:	2010      	movs	r0, #16
 8008da8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008dac:	bf04      	itt	eq
 8008dae:	021b      	lsleq	r3, r3, #8
 8008db0:	3008      	addeq	r0, #8
 8008db2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008db6:	bf04      	itt	eq
 8008db8:	011b      	lsleq	r3, r3, #4
 8008dba:	3004      	addeq	r0, #4
 8008dbc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008dc0:	bf04      	itt	eq
 8008dc2:	009b      	lsleq	r3, r3, #2
 8008dc4:	3002      	addeq	r0, #2
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	db06      	blt.n	8008dd8 <__hi0bits+0x3c>
 8008dca:	005b      	lsls	r3, r3, #1
 8008dcc:	d503      	bpl.n	8008dd6 <__hi0bits+0x3a>
 8008dce:	3001      	adds	r0, #1
 8008dd0:	4770      	bx	lr
 8008dd2:	2000      	movs	r0, #0
 8008dd4:	e7e8      	b.n	8008da8 <__hi0bits+0xc>
 8008dd6:	2020      	movs	r0, #32
 8008dd8:	4770      	bx	lr

08008dda <__lo0bits>:
 8008dda:	6803      	ldr	r3, [r0, #0]
 8008ddc:	f013 0207 	ands.w	r2, r3, #7
 8008de0:	4601      	mov	r1, r0
 8008de2:	d00b      	beq.n	8008dfc <__lo0bits+0x22>
 8008de4:	07da      	lsls	r2, r3, #31
 8008de6:	d423      	bmi.n	8008e30 <__lo0bits+0x56>
 8008de8:	0798      	lsls	r0, r3, #30
 8008dea:	bf49      	itett	mi
 8008dec:	085b      	lsrmi	r3, r3, #1
 8008dee:	089b      	lsrpl	r3, r3, #2
 8008df0:	2001      	movmi	r0, #1
 8008df2:	600b      	strmi	r3, [r1, #0]
 8008df4:	bf5c      	itt	pl
 8008df6:	600b      	strpl	r3, [r1, #0]
 8008df8:	2002      	movpl	r0, #2
 8008dfa:	4770      	bx	lr
 8008dfc:	b298      	uxth	r0, r3
 8008dfe:	b9a8      	cbnz	r0, 8008e2c <__lo0bits+0x52>
 8008e00:	0c1b      	lsrs	r3, r3, #16
 8008e02:	2010      	movs	r0, #16
 8008e04:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008e08:	bf04      	itt	eq
 8008e0a:	0a1b      	lsreq	r3, r3, #8
 8008e0c:	3008      	addeq	r0, #8
 8008e0e:	071a      	lsls	r2, r3, #28
 8008e10:	bf04      	itt	eq
 8008e12:	091b      	lsreq	r3, r3, #4
 8008e14:	3004      	addeq	r0, #4
 8008e16:	079a      	lsls	r2, r3, #30
 8008e18:	bf04      	itt	eq
 8008e1a:	089b      	lsreq	r3, r3, #2
 8008e1c:	3002      	addeq	r0, #2
 8008e1e:	07da      	lsls	r2, r3, #31
 8008e20:	d402      	bmi.n	8008e28 <__lo0bits+0x4e>
 8008e22:	085b      	lsrs	r3, r3, #1
 8008e24:	d006      	beq.n	8008e34 <__lo0bits+0x5a>
 8008e26:	3001      	adds	r0, #1
 8008e28:	600b      	str	r3, [r1, #0]
 8008e2a:	4770      	bx	lr
 8008e2c:	4610      	mov	r0, r2
 8008e2e:	e7e9      	b.n	8008e04 <__lo0bits+0x2a>
 8008e30:	2000      	movs	r0, #0
 8008e32:	4770      	bx	lr
 8008e34:	2020      	movs	r0, #32
 8008e36:	4770      	bx	lr

08008e38 <__i2b>:
 8008e38:	b510      	push	{r4, lr}
 8008e3a:	460c      	mov	r4, r1
 8008e3c:	2101      	movs	r1, #1
 8008e3e:	f7ff ff27 	bl	8008c90 <_Balloc>
 8008e42:	2201      	movs	r2, #1
 8008e44:	6144      	str	r4, [r0, #20]
 8008e46:	6102      	str	r2, [r0, #16]
 8008e48:	bd10      	pop	{r4, pc}

08008e4a <__multiply>:
 8008e4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e4e:	4614      	mov	r4, r2
 8008e50:	690a      	ldr	r2, [r1, #16]
 8008e52:	6923      	ldr	r3, [r4, #16]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	bfb8      	it	lt
 8008e58:	460b      	movlt	r3, r1
 8008e5a:	4688      	mov	r8, r1
 8008e5c:	bfbc      	itt	lt
 8008e5e:	46a0      	movlt	r8, r4
 8008e60:	461c      	movlt	r4, r3
 8008e62:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008e66:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008e6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e6e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008e72:	eb07 0609 	add.w	r6, r7, r9
 8008e76:	42b3      	cmp	r3, r6
 8008e78:	bfb8      	it	lt
 8008e7a:	3101      	addlt	r1, #1
 8008e7c:	f7ff ff08 	bl	8008c90 <_Balloc>
 8008e80:	f100 0514 	add.w	r5, r0, #20
 8008e84:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008e88:	462b      	mov	r3, r5
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	4573      	cmp	r3, lr
 8008e8e:	d316      	bcc.n	8008ebe <__multiply+0x74>
 8008e90:	f104 0214 	add.w	r2, r4, #20
 8008e94:	f108 0114 	add.w	r1, r8, #20
 8008e98:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008e9c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	9b00      	ldr	r3, [sp, #0]
 8008ea4:	9201      	str	r2, [sp, #4]
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d80c      	bhi.n	8008ec4 <__multiply+0x7a>
 8008eaa:	2e00      	cmp	r6, #0
 8008eac:	dd03      	ble.n	8008eb6 <__multiply+0x6c>
 8008eae:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d05d      	beq.n	8008f72 <__multiply+0x128>
 8008eb6:	6106      	str	r6, [r0, #16]
 8008eb8:	b003      	add	sp, #12
 8008eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ebe:	f843 2b04 	str.w	r2, [r3], #4
 8008ec2:	e7e3      	b.n	8008e8c <__multiply+0x42>
 8008ec4:	f8b2 b000 	ldrh.w	fp, [r2]
 8008ec8:	f1bb 0f00 	cmp.w	fp, #0
 8008ecc:	d023      	beq.n	8008f16 <__multiply+0xcc>
 8008ece:	4689      	mov	r9, r1
 8008ed0:	46ac      	mov	ip, r5
 8008ed2:	f04f 0800 	mov.w	r8, #0
 8008ed6:	f859 4b04 	ldr.w	r4, [r9], #4
 8008eda:	f8dc a000 	ldr.w	sl, [ip]
 8008ede:	b2a3      	uxth	r3, r4
 8008ee0:	fa1f fa8a 	uxth.w	sl, sl
 8008ee4:	fb0b a303 	mla	r3, fp, r3, sl
 8008ee8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008eec:	f8dc 4000 	ldr.w	r4, [ip]
 8008ef0:	4443      	add	r3, r8
 8008ef2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008ef6:	fb0b 840a 	mla	r4, fp, sl, r8
 8008efa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008efe:	46e2      	mov	sl, ip
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008f06:	454f      	cmp	r7, r9
 8008f08:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008f0c:	f84a 3b04 	str.w	r3, [sl], #4
 8008f10:	d82b      	bhi.n	8008f6a <__multiply+0x120>
 8008f12:	f8cc 8004 	str.w	r8, [ip, #4]
 8008f16:	9b01      	ldr	r3, [sp, #4]
 8008f18:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008f1c:	3204      	adds	r2, #4
 8008f1e:	f1ba 0f00 	cmp.w	sl, #0
 8008f22:	d020      	beq.n	8008f66 <__multiply+0x11c>
 8008f24:	682b      	ldr	r3, [r5, #0]
 8008f26:	4689      	mov	r9, r1
 8008f28:	46a8      	mov	r8, r5
 8008f2a:	f04f 0b00 	mov.w	fp, #0
 8008f2e:	f8b9 c000 	ldrh.w	ip, [r9]
 8008f32:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008f36:	fb0a 440c 	mla	r4, sl, ip, r4
 8008f3a:	445c      	add	r4, fp
 8008f3c:	46c4      	mov	ip, r8
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008f44:	f84c 3b04 	str.w	r3, [ip], #4
 8008f48:	f859 3b04 	ldr.w	r3, [r9], #4
 8008f4c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008f50:	0c1b      	lsrs	r3, r3, #16
 8008f52:	fb0a b303 	mla	r3, sl, r3, fp
 8008f56:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008f5a:	454f      	cmp	r7, r9
 8008f5c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008f60:	d805      	bhi.n	8008f6e <__multiply+0x124>
 8008f62:	f8c8 3004 	str.w	r3, [r8, #4]
 8008f66:	3504      	adds	r5, #4
 8008f68:	e79b      	b.n	8008ea2 <__multiply+0x58>
 8008f6a:	46d4      	mov	ip, sl
 8008f6c:	e7b3      	b.n	8008ed6 <__multiply+0x8c>
 8008f6e:	46e0      	mov	r8, ip
 8008f70:	e7dd      	b.n	8008f2e <__multiply+0xe4>
 8008f72:	3e01      	subs	r6, #1
 8008f74:	e799      	b.n	8008eaa <__multiply+0x60>
	...

08008f78 <__pow5mult>:
 8008f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f7c:	4615      	mov	r5, r2
 8008f7e:	f012 0203 	ands.w	r2, r2, #3
 8008f82:	4606      	mov	r6, r0
 8008f84:	460f      	mov	r7, r1
 8008f86:	d007      	beq.n	8008f98 <__pow5mult+0x20>
 8008f88:	3a01      	subs	r2, #1
 8008f8a:	4c21      	ldr	r4, [pc, #132]	; (8009010 <__pow5mult+0x98>)
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f92:	f7ff fec8 	bl	8008d26 <__multadd>
 8008f96:	4607      	mov	r7, r0
 8008f98:	10ad      	asrs	r5, r5, #2
 8008f9a:	d035      	beq.n	8009008 <__pow5mult+0x90>
 8008f9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008f9e:	b93c      	cbnz	r4, 8008fb0 <__pow5mult+0x38>
 8008fa0:	2010      	movs	r0, #16
 8008fa2:	f7fe fb9f 	bl	80076e4 <malloc>
 8008fa6:	6270      	str	r0, [r6, #36]	; 0x24
 8008fa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fac:	6004      	str	r4, [r0, #0]
 8008fae:	60c4      	str	r4, [r0, #12]
 8008fb0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008fb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008fb8:	b94c      	cbnz	r4, 8008fce <__pow5mult+0x56>
 8008fba:	f240 2171 	movw	r1, #625	; 0x271
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	f7ff ff3a 	bl	8008e38 <__i2b>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008fca:	4604      	mov	r4, r0
 8008fcc:	6003      	str	r3, [r0, #0]
 8008fce:	f04f 0800 	mov.w	r8, #0
 8008fd2:	07eb      	lsls	r3, r5, #31
 8008fd4:	d50a      	bpl.n	8008fec <__pow5mult+0x74>
 8008fd6:	4639      	mov	r1, r7
 8008fd8:	4622      	mov	r2, r4
 8008fda:	4630      	mov	r0, r6
 8008fdc:	f7ff ff35 	bl	8008e4a <__multiply>
 8008fe0:	4639      	mov	r1, r7
 8008fe2:	4681      	mov	r9, r0
 8008fe4:	4630      	mov	r0, r6
 8008fe6:	f7ff fe87 	bl	8008cf8 <_Bfree>
 8008fea:	464f      	mov	r7, r9
 8008fec:	106d      	asrs	r5, r5, #1
 8008fee:	d00b      	beq.n	8009008 <__pow5mult+0x90>
 8008ff0:	6820      	ldr	r0, [r4, #0]
 8008ff2:	b938      	cbnz	r0, 8009004 <__pow5mult+0x8c>
 8008ff4:	4622      	mov	r2, r4
 8008ff6:	4621      	mov	r1, r4
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	f7ff ff26 	bl	8008e4a <__multiply>
 8008ffe:	6020      	str	r0, [r4, #0]
 8009000:	f8c0 8000 	str.w	r8, [r0]
 8009004:	4604      	mov	r4, r0
 8009006:	e7e4      	b.n	8008fd2 <__pow5mult+0x5a>
 8009008:	4638      	mov	r0, r7
 800900a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800900e:	bf00      	nop
 8009010:	080096e0 	.word	0x080096e0

08009014 <__lshift>:
 8009014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009018:	460c      	mov	r4, r1
 800901a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800901e:	6923      	ldr	r3, [r4, #16]
 8009020:	6849      	ldr	r1, [r1, #4]
 8009022:	eb0a 0903 	add.w	r9, sl, r3
 8009026:	68a3      	ldr	r3, [r4, #8]
 8009028:	4607      	mov	r7, r0
 800902a:	4616      	mov	r6, r2
 800902c:	f109 0501 	add.w	r5, r9, #1
 8009030:	42ab      	cmp	r3, r5
 8009032:	db32      	blt.n	800909a <__lshift+0x86>
 8009034:	4638      	mov	r0, r7
 8009036:	f7ff fe2b 	bl	8008c90 <_Balloc>
 800903a:	2300      	movs	r3, #0
 800903c:	4680      	mov	r8, r0
 800903e:	f100 0114 	add.w	r1, r0, #20
 8009042:	461a      	mov	r2, r3
 8009044:	4553      	cmp	r3, sl
 8009046:	db2b      	blt.n	80090a0 <__lshift+0x8c>
 8009048:	6920      	ldr	r0, [r4, #16]
 800904a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800904e:	f104 0314 	add.w	r3, r4, #20
 8009052:	f016 021f 	ands.w	r2, r6, #31
 8009056:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800905a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800905e:	d025      	beq.n	80090ac <__lshift+0x98>
 8009060:	f1c2 0e20 	rsb	lr, r2, #32
 8009064:	2000      	movs	r0, #0
 8009066:	681e      	ldr	r6, [r3, #0]
 8009068:	468a      	mov	sl, r1
 800906a:	4096      	lsls	r6, r2
 800906c:	4330      	orrs	r0, r6
 800906e:	f84a 0b04 	str.w	r0, [sl], #4
 8009072:	f853 0b04 	ldr.w	r0, [r3], #4
 8009076:	459c      	cmp	ip, r3
 8009078:	fa20 f00e 	lsr.w	r0, r0, lr
 800907c:	d814      	bhi.n	80090a8 <__lshift+0x94>
 800907e:	6048      	str	r0, [r1, #4]
 8009080:	b108      	cbz	r0, 8009086 <__lshift+0x72>
 8009082:	f109 0502 	add.w	r5, r9, #2
 8009086:	3d01      	subs	r5, #1
 8009088:	4638      	mov	r0, r7
 800908a:	f8c8 5010 	str.w	r5, [r8, #16]
 800908e:	4621      	mov	r1, r4
 8009090:	f7ff fe32 	bl	8008cf8 <_Bfree>
 8009094:	4640      	mov	r0, r8
 8009096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800909a:	3101      	adds	r1, #1
 800909c:	005b      	lsls	r3, r3, #1
 800909e:	e7c7      	b.n	8009030 <__lshift+0x1c>
 80090a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80090a4:	3301      	adds	r3, #1
 80090a6:	e7cd      	b.n	8009044 <__lshift+0x30>
 80090a8:	4651      	mov	r1, sl
 80090aa:	e7dc      	b.n	8009066 <__lshift+0x52>
 80090ac:	3904      	subs	r1, #4
 80090ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80090b2:	f841 2f04 	str.w	r2, [r1, #4]!
 80090b6:	459c      	cmp	ip, r3
 80090b8:	d8f9      	bhi.n	80090ae <__lshift+0x9a>
 80090ba:	e7e4      	b.n	8009086 <__lshift+0x72>

080090bc <__mcmp>:
 80090bc:	6903      	ldr	r3, [r0, #16]
 80090be:	690a      	ldr	r2, [r1, #16]
 80090c0:	1a9b      	subs	r3, r3, r2
 80090c2:	b530      	push	{r4, r5, lr}
 80090c4:	d10c      	bne.n	80090e0 <__mcmp+0x24>
 80090c6:	0092      	lsls	r2, r2, #2
 80090c8:	3014      	adds	r0, #20
 80090ca:	3114      	adds	r1, #20
 80090cc:	1884      	adds	r4, r0, r2
 80090ce:	4411      	add	r1, r2
 80090d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80090d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80090d8:	4295      	cmp	r5, r2
 80090da:	d003      	beq.n	80090e4 <__mcmp+0x28>
 80090dc:	d305      	bcc.n	80090ea <__mcmp+0x2e>
 80090de:	2301      	movs	r3, #1
 80090e0:	4618      	mov	r0, r3
 80090e2:	bd30      	pop	{r4, r5, pc}
 80090e4:	42a0      	cmp	r0, r4
 80090e6:	d3f3      	bcc.n	80090d0 <__mcmp+0x14>
 80090e8:	e7fa      	b.n	80090e0 <__mcmp+0x24>
 80090ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80090ee:	e7f7      	b.n	80090e0 <__mcmp+0x24>

080090f0 <__mdiff>:
 80090f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090f4:	460d      	mov	r5, r1
 80090f6:	4607      	mov	r7, r0
 80090f8:	4611      	mov	r1, r2
 80090fa:	4628      	mov	r0, r5
 80090fc:	4614      	mov	r4, r2
 80090fe:	f7ff ffdd 	bl	80090bc <__mcmp>
 8009102:	1e06      	subs	r6, r0, #0
 8009104:	d108      	bne.n	8009118 <__mdiff+0x28>
 8009106:	4631      	mov	r1, r6
 8009108:	4638      	mov	r0, r7
 800910a:	f7ff fdc1 	bl	8008c90 <_Balloc>
 800910e:	2301      	movs	r3, #1
 8009110:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009118:	bfa4      	itt	ge
 800911a:	4623      	movge	r3, r4
 800911c:	462c      	movge	r4, r5
 800911e:	4638      	mov	r0, r7
 8009120:	6861      	ldr	r1, [r4, #4]
 8009122:	bfa6      	itte	ge
 8009124:	461d      	movge	r5, r3
 8009126:	2600      	movge	r6, #0
 8009128:	2601      	movlt	r6, #1
 800912a:	f7ff fdb1 	bl	8008c90 <_Balloc>
 800912e:	692b      	ldr	r3, [r5, #16]
 8009130:	60c6      	str	r6, [r0, #12]
 8009132:	6926      	ldr	r6, [r4, #16]
 8009134:	f105 0914 	add.w	r9, r5, #20
 8009138:	f104 0214 	add.w	r2, r4, #20
 800913c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009140:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009144:	f100 0514 	add.w	r5, r0, #20
 8009148:	f04f 0e00 	mov.w	lr, #0
 800914c:	f852 ab04 	ldr.w	sl, [r2], #4
 8009150:	f859 4b04 	ldr.w	r4, [r9], #4
 8009154:	fa1e f18a 	uxtah	r1, lr, sl
 8009158:	b2a3      	uxth	r3, r4
 800915a:	1ac9      	subs	r1, r1, r3
 800915c:	0c23      	lsrs	r3, r4, #16
 800915e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009162:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009166:	b289      	uxth	r1, r1
 8009168:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800916c:	45c8      	cmp	r8, r9
 800916e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009172:	4694      	mov	ip, r2
 8009174:	f845 3b04 	str.w	r3, [r5], #4
 8009178:	d8e8      	bhi.n	800914c <__mdiff+0x5c>
 800917a:	45bc      	cmp	ip, r7
 800917c:	d304      	bcc.n	8009188 <__mdiff+0x98>
 800917e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009182:	b183      	cbz	r3, 80091a6 <__mdiff+0xb6>
 8009184:	6106      	str	r6, [r0, #16]
 8009186:	e7c5      	b.n	8009114 <__mdiff+0x24>
 8009188:	f85c 1b04 	ldr.w	r1, [ip], #4
 800918c:	fa1e f381 	uxtah	r3, lr, r1
 8009190:	141a      	asrs	r2, r3, #16
 8009192:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009196:	b29b      	uxth	r3, r3
 8009198:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800919c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80091a0:	f845 3b04 	str.w	r3, [r5], #4
 80091a4:	e7e9      	b.n	800917a <__mdiff+0x8a>
 80091a6:	3e01      	subs	r6, #1
 80091a8:	e7e9      	b.n	800917e <__mdiff+0x8e>

080091aa <__d2b>:
 80091aa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80091ae:	460e      	mov	r6, r1
 80091b0:	2101      	movs	r1, #1
 80091b2:	ec59 8b10 	vmov	r8, r9, d0
 80091b6:	4615      	mov	r5, r2
 80091b8:	f7ff fd6a 	bl	8008c90 <_Balloc>
 80091bc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80091c0:	4607      	mov	r7, r0
 80091c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80091c6:	bb34      	cbnz	r4, 8009216 <__d2b+0x6c>
 80091c8:	9301      	str	r3, [sp, #4]
 80091ca:	f1b8 0300 	subs.w	r3, r8, #0
 80091ce:	d027      	beq.n	8009220 <__d2b+0x76>
 80091d0:	a802      	add	r0, sp, #8
 80091d2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80091d6:	f7ff fe00 	bl	8008dda <__lo0bits>
 80091da:	9900      	ldr	r1, [sp, #0]
 80091dc:	b1f0      	cbz	r0, 800921c <__d2b+0x72>
 80091de:	9a01      	ldr	r2, [sp, #4]
 80091e0:	f1c0 0320 	rsb	r3, r0, #32
 80091e4:	fa02 f303 	lsl.w	r3, r2, r3
 80091e8:	430b      	orrs	r3, r1
 80091ea:	40c2      	lsrs	r2, r0
 80091ec:	617b      	str	r3, [r7, #20]
 80091ee:	9201      	str	r2, [sp, #4]
 80091f0:	9b01      	ldr	r3, [sp, #4]
 80091f2:	61bb      	str	r3, [r7, #24]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	bf14      	ite	ne
 80091f8:	2102      	movne	r1, #2
 80091fa:	2101      	moveq	r1, #1
 80091fc:	6139      	str	r1, [r7, #16]
 80091fe:	b1c4      	cbz	r4, 8009232 <__d2b+0x88>
 8009200:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009204:	4404      	add	r4, r0
 8009206:	6034      	str	r4, [r6, #0]
 8009208:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800920c:	6028      	str	r0, [r5, #0]
 800920e:	4638      	mov	r0, r7
 8009210:	b003      	add	sp, #12
 8009212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009216:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800921a:	e7d5      	b.n	80091c8 <__d2b+0x1e>
 800921c:	6179      	str	r1, [r7, #20]
 800921e:	e7e7      	b.n	80091f0 <__d2b+0x46>
 8009220:	a801      	add	r0, sp, #4
 8009222:	f7ff fdda 	bl	8008dda <__lo0bits>
 8009226:	9b01      	ldr	r3, [sp, #4]
 8009228:	617b      	str	r3, [r7, #20]
 800922a:	2101      	movs	r1, #1
 800922c:	6139      	str	r1, [r7, #16]
 800922e:	3020      	adds	r0, #32
 8009230:	e7e5      	b.n	80091fe <__d2b+0x54>
 8009232:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009236:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800923a:	6030      	str	r0, [r6, #0]
 800923c:	6918      	ldr	r0, [r3, #16]
 800923e:	f7ff fdad 	bl	8008d9c <__hi0bits>
 8009242:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009246:	e7e1      	b.n	800920c <__d2b+0x62>

08009248 <_calloc_r>:
 8009248:	b538      	push	{r3, r4, r5, lr}
 800924a:	fb02 f401 	mul.w	r4, r2, r1
 800924e:	4621      	mov	r1, r4
 8009250:	f7fe fad2 	bl	80077f8 <_malloc_r>
 8009254:	4605      	mov	r5, r0
 8009256:	b118      	cbz	r0, 8009260 <_calloc_r+0x18>
 8009258:	4622      	mov	r2, r4
 800925a:	2100      	movs	r1, #0
 800925c:	f7fe fa76 	bl	800774c <memset>
 8009260:	4628      	mov	r0, r5
 8009262:	bd38      	pop	{r3, r4, r5, pc}

08009264 <__ascii_mbtowc>:
 8009264:	b082      	sub	sp, #8
 8009266:	b901      	cbnz	r1, 800926a <__ascii_mbtowc+0x6>
 8009268:	a901      	add	r1, sp, #4
 800926a:	b142      	cbz	r2, 800927e <__ascii_mbtowc+0x1a>
 800926c:	b14b      	cbz	r3, 8009282 <__ascii_mbtowc+0x1e>
 800926e:	7813      	ldrb	r3, [r2, #0]
 8009270:	600b      	str	r3, [r1, #0]
 8009272:	7812      	ldrb	r2, [r2, #0]
 8009274:	1c10      	adds	r0, r2, #0
 8009276:	bf18      	it	ne
 8009278:	2001      	movne	r0, #1
 800927a:	b002      	add	sp, #8
 800927c:	4770      	bx	lr
 800927e:	4610      	mov	r0, r2
 8009280:	e7fb      	b.n	800927a <__ascii_mbtowc+0x16>
 8009282:	f06f 0001 	mvn.w	r0, #1
 8009286:	e7f8      	b.n	800927a <__ascii_mbtowc+0x16>

08009288 <__ascii_wctomb>:
 8009288:	b149      	cbz	r1, 800929e <__ascii_wctomb+0x16>
 800928a:	2aff      	cmp	r2, #255	; 0xff
 800928c:	bf85      	ittet	hi
 800928e:	238a      	movhi	r3, #138	; 0x8a
 8009290:	6003      	strhi	r3, [r0, #0]
 8009292:	700a      	strbls	r2, [r1, #0]
 8009294:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009298:	bf98      	it	ls
 800929a:	2001      	movls	r0, #1
 800929c:	4770      	bx	lr
 800929e:	4608      	mov	r0, r1
 80092a0:	4770      	bx	lr
	...

080092a4 <_init>:
 80092a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a6:	bf00      	nop
 80092a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092aa:	bc08      	pop	{r3}
 80092ac:	469e      	mov	lr, r3
 80092ae:	4770      	bx	lr

080092b0 <_fini>:
 80092b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b2:	bf00      	nop
 80092b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092b6:	bc08      	pop	{r3}
 80092b8:	469e      	mov	lr, r3
 80092ba:	4770      	bx	lr
