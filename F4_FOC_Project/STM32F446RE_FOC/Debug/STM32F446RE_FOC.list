
STM32F446RE_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092bc  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  08009488  08009488  00019488  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099d0  080099d0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080099d0  080099d0  000199d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099d8  080099d8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080099d8  080099d8  000199d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080099e0  080099e0  000199e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080099e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  200001e0  08009bc8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08009bc8  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000211a6  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000041dc  00000000  00000000  000413b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014e8  00000000  00000000  00045598  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001340  00000000  00000000  00046a80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028718  00000000  00000000  00047dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001053c  00000000  00000000  000704d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f80df  00000000  00000000  00080a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00178af3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000688c  00000000  00000000  00178b70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001e0 	.word	0x200001e0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800946c 	.word	0x0800946c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001e4 	.word	0x200001e4
 8000204:	0800946c 	.word	0x0800946c

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bf4:	f000 b972 	b.w	8000edc <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9e08      	ldr	r6, [sp, #32]
 8000c16:	4604      	mov	r4, r0
 8000c18:	4688      	mov	r8, r1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d14b      	bne.n	8000cb6 <__udivmoddi4+0xa6>
 8000c1e:	428a      	cmp	r2, r1
 8000c20:	4615      	mov	r5, r2
 8000c22:	d967      	bls.n	8000cf4 <__udivmoddi4+0xe4>
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	b14a      	cbz	r2, 8000c3e <__udivmoddi4+0x2e>
 8000c2a:	f1c2 0720 	rsb	r7, r2, #32
 8000c2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c32:	fa20 f707 	lsr.w	r7, r0, r7
 8000c36:	4095      	lsls	r5, r2
 8000c38:	ea47 0803 	orr.w	r8, r7, r3
 8000c3c:	4094      	lsls	r4, r2
 8000c3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c42:	0c23      	lsrs	r3, r4, #16
 8000c44:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c48:	fa1f fc85 	uxth.w	ip, r5
 8000c4c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c50:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c54:	fb07 f10c 	mul.w	r1, r7, ip
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	d909      	bls.n	8000c70 <__udivmoddi4+0x60>
 8000c5c:	18eb      	adds	r3, r5, r3
 8000c5e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c62:	f080 811b 	bcs.w	8000e9c <__udivmoddi4+0x28c>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 8118 	bls.w	8000e9c <__udivmoddi4+0x28c>
 8000c6c:	3f02      	subs	r7, #2
 8000c6e:	442b      	add	r3, r5
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c84:	45a4      	cmp	ip, r4
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x8c>
 8000c88:	192c      	adds	r4, r5, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8e:	f080 8107 	bcs.w	8000ea0 <__udivmoddi4+0x290>
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	f240 8104 	bls.w	8000ea0 <__udivmoddi4+0x290>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	442c      	add	r4, r5
 8000c9c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca0:	eba4 040c 	sub.w	r4, r4, ip
 8000ca4:	2700      	movs	r7, #0
 8000ca6:	b11e      	cbz	r6, 8000cb0 <__udivmoddi4+0xa0>
 8000ca8:	40d4      	lsrs	r4, r2
 8000caa:	2300      	movs	r3, #0
 8000cac:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d909      	bls.n	8000cce <__udivmoddi4+0xbe>
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	f000 80eb 	beq.w	8000e96 <__udivmoddi4+0x286>
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	e9c6 0100 	strd	r0, r1, [r6]
 8000cc6:	4638      	mov	r0, r7
 8000cc8:	4639      	mov	r1, r7
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	fab3 f783 	clz	r7, r3
 8000cd2:	2f00      	cmp	r7, #0
 8000cd4:	d147      	bne.n	8000d66 <__udivmoddi4+0x156>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xd0>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 80fa 	bhi.w	8000ed4 <__udivmoddi4+0x2c4>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4698      	mov	r8, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d0e0      	beq.n	8000cb0 <__udivmoddi4+0xa0>
 8000cee:	e9c6 4800 	strd	r4, r8, [r6]
 8000cf2:	e7dd      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000cf4:	b902      	cbnz	r2, 8000cf8 <__udivmoddi4+0xe8>
 8000cf6:	deff      	udf	#255	; 0xff
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	2a00      	cmp	r2, #0
 8000cfe:	f040 808f 	bne.w	8000e20 <__udivmoddi4+0x210>
 8000d02:	1b49      	subs	r1, r1, r5
 8000d04:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d08:	fa1f f885 	uxth.w	r8, r5
 8000d0c:	2701      	movs	r7, #1
 8000d0e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d12:	0c23      	lsrs	r3, r4, #16
 8000d14:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb08 f10c 	mul.w	r1, r8, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x124>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x122>
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2bc>
 8000d32:	4684      	mov	ip, r0
 8000d34:	1a59      	subs	r1, r3, r1
 8000d36:	b2a3      	uxth	r3, r4
 8000d38:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d3c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d44:	fb08 f800 	mul.w	r8, r8, r0
 8000d48:	45a0      	cmp	r8, r4
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x14c>
 8000d4c:	192c      	adds	r4, r5, r4
 8000d4e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x14a>
 8000d54:	45a0      	cmp	r8, r4
 8000d56:	f200 80b6 	bhi.w	8000ec6 <__udivmoddi4+0x2b6>
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	eba4 0408 	sub.w	r4, r4, r8
 8000d60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d64:	e79f      	b.n	8000ca6 <__udivmoddi4+0x96>
 8000d66:	f1c7 0c20 	rsb	ip, r7, #32
 8000d6a:	40bb      	lsls	r3, r7
 8000d6c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d70:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d74:	fa01 f407 	lsl.w	r4, r1, r7
 8000d78:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d7c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d80:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d84:	4325      	orrs	r5, r4
 8000d86:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d8a:	0c2c      	lsrs	r4, r5, #16
 8000d8c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d90:	fa1f fa8e 	uxth.w	sl, lr
 8000d94:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d98:	fb09 f40a 	mul.w	r4, r9, sl
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	fa02 f207 	lsl.w	r2, r2, r7
 8000da2:	fa00 f107 	lsl.w	r1, r0, r7
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b0>
 8000da8:	eb1e 0303 	adds.w	r3, lr, r3
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000db0:	f080 8087 	bcs.w	8000ec2 <__udivmoddi4+0x2b2>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f240 8084 	bls.w	8000ec2 <__udivmoddi4+0x2b2>
 8000dba:	f1a9 0902 	sub.w	r9, r9, #2
 8000dbe:	4473      	add	r3, lr
 8000dc0:	1b1b      	subs	r3, r3, r4
 8000dc2:	b2ad      	uxth	r5, r5
 8000dc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000dcc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dd4:	45a2      	cmp	sl, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1da>
 8000dd8:	eb1e 0404 	adds.w	r4, lr, r4
 8000ddc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de0:	d26b      	bcs.n	8000eba <__udivmoddi4+0x2aa>
 8000de2:	45a2      	cmp	sl, r4
 8000de4:	d969      	bls.n	8000eba <__udivmoddi4+0x2aa>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4474      	add	r4, lr
 8000dea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	eba4 040a 	sub.w	r4, r4, sl
 8000df6:	454c      	cmp	r4, r9
 8000df8:	46c2      	mov	sl, r8
 8000dfa:	464b      	mov	r3, r9
 8000dfc:	d354      	bcc.n	8000ea8 <__udivmoddi4+0x298>
 8000dfe:	d051      	beq.n	8000ea4 <__udivmoddi4+0x294>
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d069      	beq.n	8000ed8 <__udivmoddi4+0x2c8>
 8000e04:	ebb1 050a 	subs.w	r5, r1, sl
 8000e08:	eb64 0403 	sbc.w	r4, r4, r3
 8000e0c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e10:	40fd      	lsrs	r5, r7
 8000e12:	40fc      	lsrs	r4, r7
 8000e14:	ea4c 0505 	orr.w	r5, ip, r5
 8000e18:	e9c6 5400 	strd	r5, r4, [r6]
 8000e1c:	2700      	movs	r7, #0
 8000e1e:	e747      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e20:	f1c2 0320 	rsb	r3, r2, #32
 8000e24:	fa20 f703 	lsr.w	r7, r0, r3
 8000e28:	4095      	lsls	r5, r2
 8000e2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e36:	4338      	orrs	r0, r7
 8000e38:	0c01      	lsrs	r1, r0, #16
 8000e3a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e3e:	fa1f f885 	uxth.w	r8, r5
 8000e42:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4a:	fb07 f308 	mul.w	r3, r7, r8
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x256>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e5c:	d22f      	bcs.n	8000ebe <__udivmoddi4+0x2ae>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d92d      	bls.n	8000ebe <__udivmoddi4+0x2ae>
 8000e62:	3f02      	subs	r7, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1acb      	subs	r3, r1, r3
 8000e68:	b281      	uxth	r1, r0
 8000e6a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e76:	fb00 f308 	mul.w	r3, r0, r8
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x27e>
 8000e7e:	1869      	adds	r1, r5, r1
 8000e80:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e84:	d217      	bcs.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d915      	bls.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	4429      	add	r1, r5
 8000e8e:	1ac9      	subs	r1, r1, r3
 8000e90:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e94:	e73b      	b.n	8000d0e <__udivmoddi4+0xfe>
 8000e96:	4637      	mov	r7, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e709      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e9c:	4607      	mov	r7, r0
 8000e9e:	e6e7      	b.n	8000c70 <__udivmoddi4+0x60>
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	e6fb      	b.n	8000c9c <__udivmoddi4+0x8c>
 8000ea4:	4541      	cmp	r1, r8
 8000ea6:	d2ab      	bcs.n	8000e00 <__udivmoddi4+0x1f0>
 8000ea8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eac:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb0:	3801      	subs	r0, #1
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	e7a4      	b.n	8000e00 <__udivmoddi4+0x1f0>
 8000eb6:	4660      	mov	r0, ip
 8000eb8:	e7e9      	b.n	8000e8e <__udivmoddi4+0x27e>
 8000eba:	4618      	mov	r0, r3
 8000ebc:	e795      	b.n	8000dea <__udivmoddi4+0x1da>
 8000ebe:	4667      	mov	r7, ip
 8000ec0:	e7d1      	b.n	8000e66 <__udivmoddi4+0x256>
 8000ec2:	4681      	mov	r9, r0
 8000ec4:	e77c      	b.n	8000dc0 <__udivmoddi4+0x1b0>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	442c      	add	r4, r5
 8000eca:	e747      	b.n	8000d5c <__udivmoddi4+0x14c>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	442b      	add	r3, r5
 8000ed2:	e72f      	b.n	8000d34 <__udivmoddi4+0x124>
 8000ed4:	4638      	mov	r0, r7
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xda>
 8000ed8:	4637      	mov	r7, r6
 8000eda:	e6e9      	b.n	8000cb0 <__udivmoddi4+0xa0>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	; (8000f20 <HAL_Init+0x40>)
 8000eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <HAL_Init+0x40>)
 8000ef6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <HAL_Init+0x40>)
 8000f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f000 f90d 	bl	8001128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0e:	2004      	movs	r0, #4
 8000f10:	f000 f808 	bl	8000f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f14:	f004 fb0a 	bl	800552c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40023c00 	.word	0x40023c00

08000f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_InitTick+0x54>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_InitTick+0x58>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 f917 	bl	8001176 <HAL_SYSTICK_Config>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00e      	b.n	8000f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d80a      	bhi.n	8000f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f60:	f000 f8ed 	bl	800113e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f64:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <HAL_InitTick+0x5c>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	20000004 	.word	0x20000004
 8000f80:	20000000 	.word	0x20000000

08000f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_IncTick+0x20>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000004 	.word	0x20000004
 8000fa8:	200002c0 	.word	0x200002c0

08000fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <HAL_GetTick+0x14>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	200002c0 	.word	0x200002c0

08000fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff6:	4a04      	ldr	r2, [pc, #16]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	60d3      	str	r3, [r2, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <__NVIC_GetPriorityGrouping+0x18>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	f003 0307 	and.w	r3, r3, #7
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	6039      	str	r1, [r7, #0]
 8001032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001038:	2b00      	cmp	r3, #0
 800103a:	db0a      	blt.n	8001052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	b2da      	uxtb	r2, r3
 8001040:	490c      	ldr	r1, [pc, #48]	; (8001074 <__NVIC_SetPriority+0x4c>)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	0112      	lsls	r2, r2, #4
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	440b      	add	r3, r1
 800104c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001050:	e00a      	b.n	8001068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4908      	ldr	r1, [pc, #32]	; (8001078 <__NVIC_SetPriority+0x50>)
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 030f 	and.w	r3, r3, #15
 800105e:	3b04      	subs	r3, #4
 8001060:	0112      	lsls	r2, r2, #4
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	440b      	add	r3, r1
 8001066:	761a      	strb	r2, [r3, #24]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000e100 	.word	0xe000e100
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800107c:	b480      	push	{r7}
 800107e:	b089      	sub	sp, #36	; 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f1c3 0307 	rsb	r3, r3, #7
 8001096:	2b04      	cmp	r3, #4
 8001098:	bf28      	it	cs
 800109a:	2304      	movcs	r3, #4
 800109c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3304      	adds	r3, #4
 80010a2:	2b06      	cmp	r3, #6
 80010a4:	d902      	bls.n	80010ac <NVIC_EncodePriority+0x30>
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3b03      	subs	r3, #3
 80010aa:	e000      	b.n	80010ae <NVIC_EncodePriority+0x32>
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43da      	mvns	r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	401a      	ands	r2, r3
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	fa01 f303 	lsl.w	r3, r1, r3
 80010ce:	43d9      	mvns	r1, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	4313      	orrs	r3, r2
         );
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3724      	adds	r7, #36	; 0x24
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010f4:	d301      	bcc.n	80010fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010f6:	2301      	movs	r3, #1
 80010f8:	e00f      	b.n	800111a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <SysTick_Config+0x40>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001102:	210f      	movs	r1, #15
 8001104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001108:	f7ff ff8e 	bl	8001028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <SysTick_Config+0x40>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001112:	4b04      	ldr	r3, [pc, #16]	; (8001124 <SysTick_Config+0x40>)
 8001114:	2207      	movs	r2, #7
 8001116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	e000e010 	.word	0xe000e010

08001128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ff47 	bl	8000fc4 <__NVIC_SetPriorityGrouping>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800113e:	b580      	push	{r7, lr}
 8001140:	b086      	sub	sp, #24
 8001142:	af00      	add	r7, sp, #0
 8001144:	4603      	mov	r3, r0
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	607a      	str	r2, [r7, #4]
 800114a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001150:	f7ff ff5c 	bl	800100c <__NVIC_GetPriorityGrouping>
 8001154:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	68b9      	ldr	r1, [r7, #8]
 800115a:	6978      	ldr	r0, [r7, #20]
 800115c:	f7ff ff8e 	bl	800107c <NVIC_EncodePriority>
 8001160:	4602      	mov	r2, r0
 8001162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff5d 	bl	8001028 <__NVIC_SetPriority>
}
 800116e:	bf00      	nop
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ffb0 	bl	80010e4 <SysTick_Config>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	4b20      	ldr	r3, [pc, #128]	; (8001220 <HAL_PWREx_EnableOverDrive+0x90>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	4a1f      	ldr	r2, [pc, #124]	; (8001220 <HAL_PWREx_EnableOverDrive+0x90>)
 80011a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a8:	6413      	str	r3, [r2, #64]	; 0x40
 80011aa:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <HAL_PWREx_EnableOverDrive+0x90>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80011b6:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <HAL_PWREx_EnableOverDrive+0x94>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011bc:	f7ff fef6 	bl	8000fac <HAL_GetTick>
 80011c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011c2:	e009      	b.n	80011d8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011c4:	f7ff fef2 	bl	8000fac <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011d2:	d901      	bls.n	80011d8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e01f      	b.n	8001218 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <HAL_PWREx_EnableOverDrive+0x98>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e4:	d1ee      	bne.n	80011c4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <HAL_PWREx_EnableOverDrive+0x9c>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011ec:	f7ff fede 	bl	8000fac <HAL_GetTick>
 80011f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011f2:	e009      	b.n	8001208 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011f4:	f7ff feda 	bl	8000fac <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001202:	d901      	bls.n	8001208 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e007      	b.n	8001218 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <HAL_PWREx_EnableOverDrive+0x98>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001210:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001214:	d1ee      	bne.n	80011f4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40023800 	.word	0x40023800
 8001224:	420e0040 	.word	0x420e0040
 8001228:	40007000 	.word	0x40007000
 800122c:	420e0044 	.word	0x420e0044

08001230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d101      	bne.n	8001244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e0ca      	b.n	80013da <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001244:	4b67      	ldr	r3, [pc, #412]	; (80013e4 <HAL_RCC_ClockConfig+0x1b4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 030f 	and.w	r3, r3, #15
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	429a      	cmp	r2, r3
 8001250:	d90c      	bls.n	800126c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001252:	4b64      	ldr	r3, [pc, #400]	; (80013e4 <HAL_RCC_ClockConfig+0x1b4>)
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800125a:	4b62      	ldr	r3, [pc, #392]	; (80013e4 <HAL_RCC_ClockConfig+0x1b4>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	429a      	cmp	r2, r3
 8001266:	d001      	beq.n	800126c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e0b6      	b.n	80013da <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d020      	beq.n	80012ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	2b00      	cmp	r3, #0
 8001282:	d005      	beq.n	8001290 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001284:	4b58      	ldr	r3, [pc, #352]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	4a57      	ldr	r2, [pc, #348]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 800128a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800128e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	2b00      	cmp	r3, #0
 800129a:	d005      	beq.n	80012a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800129c:	4b52      	ldr	r3, [pc, #328]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	4a51      	ldr	r2, [pc, #324]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 80012a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012a8:	4b4f      	ldr	r3, [pc, #316]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	494c      	ldr	r1, [pc, #304]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d044      	beq.n	8001350 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d107      	bne.n	80012de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ce:	4b46      	ldr	r3, [pc, #280]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d119      	bne.n	800130e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e07d      	b.n	80013da <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d003      	beq.n	80012ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012ea:	2b03      	cmp	r3, #3
 80012ec:	d107      	bne.n	80012fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ee:	4b3e      	ldr	r3, [pc, #248]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d109      	bne.n	800130e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e06d      	b.n	80013da <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012fe:	4b3a      	ldr	r3, [pc, #232]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e065      	b.n	80013da <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800130e:	4b36      	ldr	r3, [pc, #216]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f023 0203 	bic.w	r2, r3, #3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	4933      	ldr	r1, [pc, #204]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 800131c:	4313      	orrs	r3, r2
 800131e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001320:	f7ff fe44 	bl	8000fac <HAL_GetTick>
 8001324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001326:	e00a      	b.n	800133e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001328:	f7ff fe40 	bl	8000fac <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	f241 3288 	movw	r2, #5000	; 0x1388
 8001336:	4293      	cmp	r3, r2
 8001338:	d901      	bls.n	800133e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e04d      	b.n	80013da <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800133e:	4b2a      	ldr	r3, [pc, #168]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 020c 	and.w	r2, r3, #12
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	429a      	cmp	r2, r3
 800134e:	d1eb      	bne.n	8001328 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001350:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <HAL_RCC_ClockConfig+0x1b4>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 030f 	and.w	r3, r3, #15
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	429a      	cmp	r2, r3
 800135c:	d20c      	bcs.n	8001378 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800135e:	4b21      	ldr	r3, [pc, #132]	; (80013e4 <HAL_RCC_ClockConfig+0x1b4>)
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001366:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <HAL_RCC_ClockConfig+0x1b4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	429a      	cmp	r2, r3
 8001372:	d001      	beq.n	8001378 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e030      	b.n	80013da <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	2b00      	cmp	r3, #0
 8001382:	d008      	beq.n	8001396 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001384:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	4915      	ldr	r1, [pc, #84]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001392:	4313      	orrs	r3, r2
 8001394:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d009      	beq.n	80013b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	490d      	ldr	r1, [pc, #52]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013b6:	f000 f81d 	bl	80013f4 <HAL_RCC_GetSysClockFreq>
 80013ba:	4601      	mov	r1, r0
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	091b      	lsrs	r3, r3, #4
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	4a09      	ldr	r2, [pc, #36]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80013c8:	5cd3      	ldrb	r3, [r2, r3]
 80013ca:	fa21 f303 	lsr.w	r3, r1, r3
 80013ce:	4a08      	ldr	r2, [pc, #32]	; (80013f0 <HAL_RCC_ClockConfig+0x1c0>)
 80013d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80013d2:	2004      	movs	r0, #4
 80013d4:	f7ff fda6 	bl	8000f24 <HAL_InitTick>

  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40023c00 	.word	0x40023c00
 80013e8:	40023800 	.word	0x40023800
 80013ec:	08009520 	.word	0x08009520
 80013f0:	20000008 	.word	0x20000008

080013f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f6:	b087      	sub	sp, #28
 80013f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800140e:	4bc6      	ldr	r3, [pc, #792]	; (8001728 <HAL_RCC_GetSysClockFreq+0x334>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 030c 	and.w	r3, r3, #12
 8001416:	2b0c      	cmp	r3, #12
 8001418:	f200 817e 	bhi.w	8001718 <HAL_RCC_GetSysClockFreq+0x324>
 800141c:	a201      	add	r2, pc, #4	; (adr r2, 8001424 <HAL_RCC_GetSysClockFreq+0x30>)
 800141e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001422:	bf00      	nop
 8001424:	08001459 	.word	0x08001459
 8001428:	08001719 	.word	0x08001719
 800142c:	08001719 	.word	0x08001719
 8001430:	08001719 	.word	0x08001719
 8001434:	0800145f 	.word	0x0800145f
 8001438:	08001719 	.word	0x08001719
 800143c:	08001719 	.word	0x08001719
 8001440:	08001719 	.word	0x08001719
 8001444:	08001465 	.word	0x08001465
 8001448:	08001719 	.word	0x08001719
 800144c:	08001719 	.word	0x08001719
 8001450:	08001719 	.word	0x08001719
 8001454:	080015c1 	.word	0x080015c1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001458:	4bb4      	ldr	r3, [pc, #720]	; (800172c <HAL_RCC_GetSysClockFreq+0x338>)
 800145a:	613b      	str	r3, [r7, #16]
       break;
 800145c:	e15f      	b.n	800171e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800145e:	4bb4      	ldr	r3, [pc, #720]	; (8001730 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001460:	613b      	str	r3, [r7, #16]
      break;
 8001462:	e15c      	b.n	800171e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001464:	4bb0      	ldr	r3, [pc, #704]	; (8001728 <HAL_RCC_GetSysClockFreq+0x334>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800146c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800146e:	4bae      	ldr	r3, [pc, #696]	; (8001728 <HAL_RCC_GetSysClockFreq+0x334>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d04a      	beq.n	8001510 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800147a:	4bab      	ldr	r3, [pc, #684]	; (8001728 <HAL_RCC_GetSysClockFreq+0x334>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	099b      	lsrs	r3, r3, #6
 8001480:	f04f 0400 	mov.w	r4, #0
 8001484:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	ea03 0501 	and.w	r5, r3, r1
 8001490:	ea04 0602 	and.w	r6, r4, r2
 8001494:	4629      	mov	r1, r5
 8001496:	4632      	mov	r2, r6
 8001498:	f04f 0300 	mov.w	r3, #0
 800149c:	f04f 0400 	mov.w	r4, #0
 80014a0:	0154      	lsls	r4, r2, #5
 80014a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80014a6:	014b      	lsls	r3, r1, #5
 80014a8:	4619      	mov	r1, r3
 80014aa:	4622      	mov	r2, r4
 80014ac:	1b49      	subs	r1, r1, r5
 80014ae:	eb62 0206 	sbc.w	r2, r2, r6
 80014b2:	f04f 0300 	mov.w	r3, #0
 80014b6:	f04f 0400 	mov.w	r4, #0
 80014ba:	0194      	lsls	r4, r2, #6
 80014bc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80014c0:	018b      	lsls	r3, r1, #6
 80014c2:	1a5b      	subs	r3, r3, r1
 80014c4:	eb64 0402 	sbc.w	r4, r4, r2
 80014c8:	f04f 0100 	mov.w	r1, #0
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	00e2      	lsls	r2, r4, #3
 80014d2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80014d6:	00d9      	lsls	r1, r3, #3
 80014d8:	460b      	mov	r3, r1
 80014da:	4614      	mov	r4, r2
 80014dc:	195b      	adds	r3, r3, r5
 80014de:	eb44 0406 	adc.w	r4, r4, r6
 80014e2:	f04f 0100 	mov.w	r1, #0
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	0262      	lsls	r2, r4, #9
 80014ec:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80014f0:	0259      	lsls	r1, r3, #9
 80014f2:	460b      	mov	r3, r1
 80014f4:	4614      	mov	r4, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	4621      	mov	r1, r4
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f04f 0400 	mov.w	r4, #0
 8001500:	461a      	mov	r2, r3
 8001502:	4623      	mov	r3, r4
 8001504:	f7ff fb6c 	bl	8000be0 <__aeabi_uldivmod>
 8001508:	4603      	mov	r3, r0
 800150a:	460c      	mov	r4, r1
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	e049      	b.n	80015a4 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001510:	4b85      	ldr	r3, [pc, #532]	; (8001728 <HAL_RCC_GetSysClockFreq+0x334>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	099b      	lsrs	r3, r3, #6
 8001516:	f04f 0400 	mov.w	r4, #0
 800151a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	ea03 0501 	and.w	r5, r3, r1
 8001526:	ea04 0602 	and.w	r6, r4, r2
 800152a:	4629      	mov	r1, r5
 800152c:	4632      	mov	r2, r6
 800152e:	f04f 0300 	mov.w	r3, #0
 8001532:	f04f 0400 	mov.w	r4, #0
 8001536:	0154      	lsls	r4, r2, #5
 8001538:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800153c:	014b      	lsls	r3, r1, #5
 800153e:	4619      	mov	r1, r3
 8001540:	4622      	mov	r2, r4
 8001542:	1b49      	subs	r1, r1, r5
 8001544:	eb62 0206 	sbc.w	r2, r2, r6
 8001548:	f04f 0300 	mov.w	r3, #0
 800154c:	f04f 0400 	mov.w	r4, #0
 8001550:	0194      	lsls	r4, r2, #6
 8001552:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001556:	018b      	lsls	r3, r1, #6
 8001558:	1a5b      	subs	r3, r3, r1
 800155a:	eb64 0402 	sbc.w	r4, r4, r2
 800155e:	f04f 0100 	mov.w	r1, #0
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	00e2      	lsls	r2, r4, #3
 8001568:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800156c:	00d9      	lsls	r1, r3, #3
 800156e:	460b      	mov	r3, r1
 8001570:	4614      	mov	r4, r2
 8001572:	195b      	adds	r3, r3, r5
 8001574:	eb44 0406 	adc.w	r4, r4, r6
 8001578:	f04f 0100 	mov.w	r1, #0
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	02a2      	lsls	r2, r4, #10
 8001582:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001586:	0299      	lsls	r1, r3, #10
 8001588:	460b      	mov	r3, r1
 800158a:	4614      	mov	r4, r2
 800158c:	4618      	mov	r0, r3
 800158e:	4621      	mov	r1, r4
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f04f 0400 	mov.w	r4, #0
 8001596:	461a      	mov	r2, r3
 8001598:	4623      	mov	r3, r4
 800159a:	f7ff fb21 	bl	8000be0 <__aeabi_uldivmod>
 800159e:	4603      	mov	r3, r0
 80015a0:	460c      	mov	r4, r1
 80015a2:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015a4:	4b60      	ldr	r3, [pc, #384]	; (8001728 <HAL_RCC_GetSysClockFreq+0x334>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	0c1b      	lsrs	r3, r3, #16
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	3301      	adds	r3, #1
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015bc:	613b      	str	r3, [r7, #16]
      break;
 80015be:	e0ae      	b.n	800171e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015c0:	4b59      	ldr	r3, [pc, #356]	; (8001728 <HAL_RCC_GetSysClockFreq+0x334>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015c8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015ca:	4b57      	ldr	r3, [pc, #348]	; (8001728 <HAL_RCC_GetSysClockFreq+0x334>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d04a      	beq.n	800166c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d6:	4b54      	ldr	r3, [pc, #336]	; (8001728 <HAL_RCC_GetSysClockFreq+0x334>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	099b      	lsrs	r3, r3, #6
 80015dc:	f04f 0400 	mov.w	r4, #0
 80015e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015e4:	f04f 0200 	mov.w	r2, #0
 80015e8:	ea03 0501 	and.w	r5, r3, r1
 80015ec:	ea04 0602 	and.w	r6, r4, r2
 80015f0:	4629      	mov	r1, r5
 80015f2:	4632      	mov	r2, r6
 80015f4:	f04f 0300 	mov.w	r3, #0
 80015f8:	f04f 0400 	mov.w	r4, #0
 80015fc:	0154      	lsls	r4, r2, #5
 80015fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001602:	014b      	lsls	r3, r1, #5
 8001604:	4619      	mov	r1, r3
 8001606:	4622      	mov	r2, r4
 8001608:	1b49      	subs	r1, r1, r5
 800160a:	eb62 0206 	sbc.w	r2, r2, r6
 800160e:	f04f 0300 	mov.w	r3, #0
 8001612:	f04f 0400 	mov.w	r4, #0
 8001616:	0194      	lsls	r4, r2, #6
 8001618:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800161c:	018b      	lsls	r3, r1, #6
 800161e:	1a5b      	subs	r3, r3, r1
 8001620:	eb64 0402 	sbc.w	r4, r4, r2
 8001624:	f04f 0100 	mov.w	r1, #0
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	00e2      	lsls	r2, r4, #3
 800162e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001632:	00d9      	lsls	r1, r3, #3
 8001634:	460b      	mov	r3, r1
 8001636:	4614      	mov	r4, r2
 8001638:	195b      	adds	r3, r3, r5
 800163a:	eb44 0406 	adc.w	r4, r4, r6
 800163e:	f04f 0100 	mov.w	r1, #0
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	0262      	lsls	r2, r4, #9
 8001648:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800164c:	0259      	lsls	r1, r3, #9
 800164e:	460b      	mov	r3, r1
 8001650:	4614      	mov	r4, r2
 8001652:	4618      	mov	r0, r3
 8001654:	4621      	mov	r1, r4
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f04f 0400 	mov.w	r4, #0
 800165c:	461a      	mov	r2, r3
 800165e:	4623      	mov	r3, r4
 8001660:	f7ff fabe 	bl	8000be0 <__aeabi_uldivmod>
 8001664:	4603      	mov	r3, r0
 8001666:	460c      	mov	r4, r1
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	e049      	b.n	8001700 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800166c:	4b2e      	ldr	r3, [pc, #184]	; (8001728 <HAL_RCC_GetSysClockFreq+0x334>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	099b      	lsrs	r3, r3, #6
 8001672:	f04f 0400 	mov.w	r4, #0
 8001676:	f240 11ff 	movw	r1, #511	; 0x1ff
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	ea03 0501 	and.w	r5, r3, r1
 8001682:	ea04 0602 	and.w	r6, r4, r2
 8001686:	4629      	mov	r1, r5
 8001688:	4632      	mov	r2, r6
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	f04f 0400 	mov.w	r4, #0
 8001692:	0154      	lsls	r4, r2, #5
 8001694:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001698:	014b      	lsls	r3, r1, #5
 800169a:	4619      	mov	r1, r3
 800169c:	4622      	mov	r2, r4
 800169e:	1b49      	subs	r1, r1, r5
 80016a0:	eb62 0206 	sbc.w	r2, r2, r6
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	f04f 0400 	mov.w	r4, #0
 80016ac:	0194      	lsls	r4, r2, #6
 80016ae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80016b2:	018b      	lsls	r3, r1, #6
 80016b4:	1a5b      	subs	r3, r3, r1
 80016b6:	eb64 0402 	sbc.w	r4, r4, r2
 80016ba:	f04f 0100 	mov.w	r1, #0
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	00e2      	lsls	r2, r4, #3
 80016c4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016c8:	00d9      	lsls	r1, r3, #3
 80016ca:	460b      	mov	r3, r1
 80016cc:	4614      	mov	r4, r2
 80016ce:	195b      	adds	r3, r3, r5
 80016d0:	eb44 0406 	adc.w	r4, r4, r6
 80016d4:	f04f 0100 	mov.w	r1, #0
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	02a2      	lsls	r2, r4, #10
 80016de:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80016e2:	0299      	lsls	r1, r3, #10
 80016e4:	460b      	mov	r3, r1
 80016e6:	4614      	mov	r4, r2
 80016e8:	4618      	mov	r0, r3
 80016ea:	4621      	mov	r1, r4
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f04f 0400 	mov.w	r4, #0
 80016f2:	461a      	mov	r2, r3
 80016f4:	4623      	mov	r3, r4
 80016f6:	f7ff fa73 	bl	8000be0 <__aeabi_uldivmod>
 80016fa:	4603      	mov	r3, r0
 80016fc:	460c      	mov	r4, r1
 80016fe:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001700:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_RCC_GetSysClockFreq+0x334>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	0f1b      	lsrs	r3, r3, #28
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	fbb2 f3f3 	udiv	r3, r2, r3
 8001714:	613b      	str	r3, [r7, #16]
      break;
 8001716:	e002      	b.n	800171e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <HAL_RCC_GetSysClockFreq+0x338>)
 800171a:	613b      	str	r3, [r7, #16]
      break;
 800171c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800171e:	693b      	ldr	r3, [r7, #16]
}
 8001720:	4618      	mov	r0, r3
 8001722:	371c      	adds	r7, #28
 8001724:	46bd      	mov	sp, r7
 8001726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001728:	40023800 	.word	0x40023800
 800172c:	00f42400 	.word	0x00f42400
 8001730:	007a1200 	.word	0x007a1200

08001734 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 8083 	beq.w	8001854 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800174e:	4b95      	ldr	r3, [pc, #596]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 030c 	and.w	r3, r3, #12
 8001756:	2b04      	cmp	r3, #4
 8001758:	d019      	beq.n	800178e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800175a:	4b92      	ldr	r3, [pc, #584]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001762:	2b08      	cmp	r3, #8
 8001764:	d106      	bne.n	8001774 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001766:	4b8f      	ldr	r3, [pc, #572]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800176e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001772:	d00c      	beq.n	800178e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001774:	4b8b      	ldr	r3, [pc, #556]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800177c:	2b0c      	cmp	r3, #12
 800177e:	d112      	bne.n	80017a6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001780:	4b88      	ldr	r3, [pc, #544]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001788:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800178c:	d10b      	bne.n	80017a6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178e:	4b85      	ldr	r3, [pc, #532]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d05b      	beq.n	8001852 <HAL_RCC_OscConfig+0x11e>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d157      	bne.n	8001852 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e216      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ae:	d106      	bne.n	80017be <HAL_RCC_OscConfig+0x8a>
 80017b0:	4b7c      	ldr	r3, [pc, #496]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a7b      	ldr	r2, [pc, #492]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 80017b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	e01d      	b.n	80017fa <HAL_RCC_OscConfig+0xc6>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017c6:	d10c      	bne.n	80017e2 <HAL_RCC_OscConfig+0xae>
 80017c8:	4b76      	ldr	r3, [pc, #472]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a75      	ldr	r2, [pc, #468]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 80017ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	4b73      	ldr	r3, [pc, #460]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a72      	ldr	r2, [pc, #456]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 80017da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	e00b      	b.n	80017fa <HAL_RCC_OscConfig+0xc6>
 80017e2:	4b70      	ldr	r3, [pc, #448]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a6f      	ldr	r2, [pc, #444]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 80017e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	4b6d      	ldr	r3, [pc, #436]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a6c      	ldr	r2, [pc, #432]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 80017f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d013      	beq.n	800182a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001802:	f7ff fbd3 	bl	8000fac <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800180a:	f7ff fbcf 	bl	8000fac <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b64      	cmp	r3, #100	; 0x64
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e1db      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181c:	4b61      	ldr	r3, [pc, #388]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0f0      	beq.n	800180a <HAL_RCC_OscConfig+0xd6>
 8001828:	e014      	b.n	8001854 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182a:	f7ff fbbf 	bl	8000fac <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001832:	f7ff fbbb 	bl	8000fac <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b64      	cmp	r3, #100	; 0x64
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e1c7      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001844:	4b57      	ldr	r3, [pc, #348]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1f0      	bne.n	8001832 <HAL_RCC_OscConfig+0xfe>
 8001850:	e000      	b.n	8001854 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001852:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d06f      	beq.n	8001940 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001860:	4b50      	ldr	r3, [pc, #320]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 030c 	and.w	r3, r3, #12
 8001868:	2b00      	cmp	r3, #0
 800186a:	d017      	beq.n	800189c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800186c:	4b4d      	ldr	r3, [pc, #308]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001874:	2b08      	cmp	r3, #8
 8001876:	d105      	bne.n	8001884 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001878:	4b4a      	ldr	r3, [pc, #296]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00b      	beq.n	800189c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001884:	4b47      	ldr	r3, [pc, #284]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800188c:	2b0c      	cmp	r3, #12
 800188e:	d11c      	bne.n	80018ca <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001890:	4b44      	ldr	r3, [pc, #272]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d116      	bne.n	80018ca <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800189c:	4b41      	ldr	r3, [pc, #260]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d005      	beq.n	80018b4 <HAL_RCC_OscConfig+0x180>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d001      	beq.n	80018b4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e18f      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b4:	4b3b      	ldr	r3, [pc, #236]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	4938      	ldr	r1, [pc, #224]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c8:	e03a      	b.n	8001940 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d020      	beq.n	8001914 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018d2:	4b35      	ldr	r3, [pc, #212]	; (80019a8 <HAL_RCC_OscConfig+0x274>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff fb68 	bl	8000fac <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e0:	f7ff fb64 	bl	8000fac <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e170      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f2:	4b2c      	ldr	r3, [pc, #176]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fe:	4b29      	ldr	r3, [pc, #164]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4925      	ldr	r1, [pc, #148]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 800190e:	4313      	orrs	r3, r2
 8001910:	600b      	str	r3, [r1, #0]
 8001912:	e015      	b.n	8001940 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001914:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <HAL_RCC_OscConfig+0x274>)
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191a:	f7ff fb47 	bl	8000fac <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001922:	f7ff fb43 	bl	8000fac <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e14f      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001934:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1f0      	bne.n	8001922 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0308 	and.w	r3, r3, #8
 8001948:	2b00      	cmp	r3, #0
 800194a:	d037      	beq.n	80019bc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d016      	beq.n	8001982 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001954:	4b15      	ldr	r3, [pc, #84]	; (80019ac <HAL_RCC_OscConfig+0x278>)
 8001956:	2201      	movs	r2, #1
 8001958:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195a:	f7ff fb27 	bl	8000fac <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001962:	f7ff fb23 	bl	8000fac <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e12f      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 8001976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x22e>
 8001980:	e01c      	b.n	80019bc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001982:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <HAL_RCC_OscConfig+0x278>)
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001988:	f7ff fb10 	bl	8000fac <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800198e:	e00f      	b.n	80019b0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001990:	f7ff fb0c 	bl	8000fac <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d908      	bls.n	80019b0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e118      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4a0>
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800
 80019a8:	42470000 	.word	0x42470000
 80019ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b0:	4b8a      	ldr	r3, [pc, #552]	; (8001bdc <HAL_RCC_OscConfig+0x4a8>)
 80019b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1e9      	bne.n	8001990 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 8097 	beq.w	8001af8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ca:	2300      	movs	r3, #0
 80019cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ce:	4b83      	ldr	r3, [pc, #524]	; (8001bdc <HAL_RCC_OscConfig+0x4a8>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10f      	bne.n	80019fa <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	4b7f      	ldr	r3, [pc, #508]	; (8001bdc <HAL_RCC_OscConfig+0x4a8>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	4a7e      	ldr	r2, [pc, #504]	; (8001bdc <HAL_RCC_OscConfig+0x4a8>)
 80019e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ea:	4b7c      	ldr	r3, [pc, #496]	; (8001bdc <HAL_RCC_OscConfig+0x4a8>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019f6:	2301      	movs	r3, #1
 80019f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fa:	4b79      	ldr	r3, [pc, #484]	; (8001be0 <HAL_RCC_OscConfig+0x4ac>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d118      	bne.n	8001a38 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a06:	4b76      	ldr	r3, [pc, #472]	; (8001be0 <HAL_RCC_OscConfig+0x4ac>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a75      	ldr	r2, [pc, #468]	; (8001be0 <HAL_RCC_OscConfig+0x4ac>)
 8001a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a12:	f7ff facb 	bl	8000fac <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a1a:	f7ff fac7 	bl	8000fac <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e0d3      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2c:	4b6c      	ldr	r3, [pc, #432]	; (8001be0 <HAL_RCC_OscConfig+0x4ac>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0f0      	beq.n	8001a1a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d106      	bne.n	8001a4e <HAL_RCC_OscConfig+0x31a>
 8001a40:	4b66      	ldr	r3, [pc, #408]	; (8001bdc <HAL_RCC_OscConfig+0x4a8>)
 8001a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a44:	4a65      	ldr	r2, [pc, #404]	; (8001bdc <HAL_RCC_OscConfig+0x4a8>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a4c:	e01c      	b.n	8001a88 <HAL_RCC_OscConfig+0x354>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	2b05      	cmp	r3, #5
 8001a54:	d10c      	bne.n	8001a70 <HAL_RCC_OscConfig+0x33c>
 8001a56:	4b61      	ldr	r3, [pc, #388]	; (8001bdc <HAL_RCC_OscConfig+0x4a8>)
 8001a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5a:	4a60      	ldr	r2, [pc, #384]	; (8001bdc <HAL_RCC_OscConfig+0x4a8>)
 8001a5c:	f043 0304 	orr.w	r3, r3, #4
 8001a60:	6713      	str	r3, [r2, #112]	; 0x70
 8001a62:	4b5e      	ldr	r3, [pc, #376]	; (8001bdc <HAL_RCC_OscConfig+0x4a8>)
 8001a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a66:	4a5d      	ldr	r2, [pc, #372]	; (8001bdc <HAL_RCC_OscConfig+0x4a8>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a6e:	e00b      	b.n	8001a88 <HAL_RCC_OscConfig+0x354>
 8001a70:	4b5a      	ldr	r3, [pc, #360]	; (8001bdc <HAL_RCC_OscConfig+0x4a8>)
 8001a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a74:	4a59      	ldr	r2, [pc, #356]	; (8001bdc <HAL_RCC_OscConfig+0x4a8>)
 8001a76:	f023 0301 	bic.w	r3, r3, #1
 8001a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a7c:	4b57      	ldr	r3, [pc, #348]	; (8001bdc <HAL_RCC_OscConfig+0x4a8>)
 8001a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a80:	4a56      	ldr	r2, [pc, #344]	; (8001bdc <HAL_RCC_OscConfig+0x4a8>)
 8001a82:	f023 0304 	bic.w	r3, r3, #4
 8001a86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d015      	beq.n	8001abc <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a90:	f7ff fa8c 	bl	8000fac <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a96:	e00a      	b.n	8001aae <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a98:	f7ff fa88 	bl	8000fac <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e092      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aae:	4b4b      	ldr	r3, [pc, #300]	; (8001bdc <HAL_RCC_OscConfig+0x4a8>)
 8001ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0ee      	beq.n	8001a98 <HAL_RCC_OscConfig+0x364>
 8001aba:	e014      	b.n	8001ae6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001abc:	f7ff fa76 	bl	8000fac <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac2:	e00a      	b.n	8001ada <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac4:	f7ff fa72 	bl	8000fac <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e07c      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ada:	4b40      	ldr	r3, [pc, #256]	; (8001bdc <HAL_RCC_OscConfig+0x4a8>)
 8001adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1ee      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ae6:	7dfb      	ldrb	r3, [r7, #23]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d105      	bne.n	8001af8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aec:	4b3b      	ldr	r3, [pc, #236]	; (8001bdc <HAL_RCC_OscConfig+0x4a8>)
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	4a3a      	ldr	r2, [pc, #232]	; (8001bdc <HAL_RCC_OscConfig+0x4a8>)
 8001af2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001af6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d068      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b00:	4b36      	ldr	r3, [pc, #216]	; (8001bdc <HAL_RCC_OscConfig+0x4a8>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	d060      	beq.n	8001bce <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d145      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b14:	4b33      	ldr	r3, [pc, #204]	; (8001be4 <HAL_RCC_OscConfig+0x4b0>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1a:	f7ff fa47 	bl	8000fac <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b22:	f7ff fa43 	bl	8000fac <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e04f      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b34:	4b29      	ldr	r3, [pc, #164]	; (8001bdc <HAL_RCC_OscConfig+0x4a8>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f0      	bne.n	8001b22 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	69da      	ldr	r2, [r3, #28]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4e:	019b      	lsls	r3, r3, #6
 8001b50:	431a      	orrs	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b56:	085b      	lsrs	r3, r3, #1
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	041b      	lsls	r3, r3, #16
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b62:	061b      	lsls	r3, r3, #24
 8001b64:	431a      	orrs	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	071b      	lsls	r3, r3, #28
 8001b6c:	491b      	ldr	r1, [pc, #108]	; (8001bdc <HAL_RCC_OscConfig+0x4a8>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b72:	4b1c      	ldr	r3, [pc, #112]	; (8001be4 <HAL_RCC_OscConfig+0x4b0>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b78:	f7ff fa18 	bl	8000fac <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b80:	f7ff fa14 	bl	8000fac <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e020      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_RCC_OscConfig+0x4a8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f0      	beq.n	8001b80 <HAL_RCC_OscConfig+0x44c>
 8001b9e:	e018      	b.n	8001bd2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba0:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <HAL_RCC_OscConfig+0x4b0>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba6:	f7ff fa01 	bl	8000fac <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bae:	f7ff f9fd 	bl	8000fac <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e009      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_RCC_OscConfig+0x4a8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1f0      	bne.n	8001bae <HAL_RCC_OscConfig+0x47a>
 8001bcc:	e001      	b.n	8001bd2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40007000 	.word	0x40007000
 8001be4:	42470060 	.word	0x42470060

08001be8 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <LL_ADC_INJ_SetSequencerLength>:
  *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
  *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	bf0c      	ite	eq
 8001c48:	2301      	moveq	r3, #1
 8001c4a:	2300      	movne	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
	...

08001c5c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8001c5c:	b590      	push	{r4, r7, lr}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001c66:	2300      	movs	r3, #0
 8001c68:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8001c6a:	481c      	ldr	r0, [pc, #112]	; (8001cdc <LL_ADC_CommonInit+0x80>)
 8001c6c:	f7ff ffe2 	bl	8001c34 <LL_ADC_IsEnabled>
 8001c70:	4604      	mov	r4, r0
 8001c72:	481b      	ldr	r0, [pc, #108]	; (8001ce0 <LL_ADC_CommonInit+0x84>)
 8001c74:	f7ff ffde 	bl	8001c34 <LL_ADC_IsEnabled>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	431c      	orrs	r4, r3
 8001c7c:	4819      	ldr	r0, [pc, #100]	; (8001ce4 <LL_ADC_CommonInit+0x88>)
 8001c7e:	f7ff ffd9 	bl	8001c34 <LL_ADC_IsEnabled>
 8001c82:	4603      	mov	r3, r0
 8001c84:	4323      	orrs	r3, r4
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d120      	bne.n	8001ccc <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d012      	beq.n	8001cb8 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <LL_ADC_CommonInit+0x8c>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	6811      	ldr	r1, [r2, #0]
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	6852      	ldr	r2, [r2, #4]
 8001ca2:	4311      	orrs	r1, r2
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	6892      	ldr	r2, [r2, #8]
 8001ca8:	4311      	orrs	r1, r2
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	68d2      	ldr	r2, [r2, #12]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	e00b      	b.n	8001cd0 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <LL_ADC_CommonInit+0x8c>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	e001      	b.n	8001cd0 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd90      	pop	{r4, r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40012000 	.word	0x40012000
 8001ce0:	40012100 	.word	0x40012100
 8001ce4:	40012200 	.word	0x40012200
 8001ce8:	fffc10e0 	.word	0xfffc10e0

08001cec <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff ff9a 	bl	8001c34 <LL_ADC_IsEnabled>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d117      	bne.n	8001d36 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001d0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	6811      	ldr	r1, [r2, #0]
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	6892      	ldr	r2, [r2, #8]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	e001      	b.n	8001d3a <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff ff6e 	bl	8001c34 <LL_ADC_IsEnabled>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d131      	bne.n	8001dc2 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00c      	beq.n	8001d80 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	6859      	ldr	r1, [r3, #4]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	430b      	orrs	r3, r1
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	e008      	b.n	8001d92 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <LL_ADC_REG_Init+0x8c>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	68d2      	ldr	r2, [r2, #12]
 8001da6:	4311      	orrs	r1, r2
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	6912      	ldr	r2, [r2, #16]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	4619      	mov	r1, r3
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff ff14 	bl	8001be8 <LL_ADC_REG_SetSequencerLength>
 8001dc0:	e001      	b.n	8001dc6 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	c0fffcfd 	.word	0xc0fffcfd

08001dd4 <LL_ADC_INJ_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_INJ_Init(ADC_TypeDef *ADCx, LL_ADC_INJ_InitTypeDef *ADC_INJ_InitStruct)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001dde:	2300      	movs	r3, #0
 8001de0:	73fb      	strb	r3, [r7, #15]
  }
  assert_param(IS_LL_ADC_INJ_TRIG_AUTO(ADC_INJ_InitStruct->TrigAuto));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff ff26 	bl	8001c34 <LL_ADC_IsEnabled>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d12b      	bne.n	8001e46 <LL_ADC_INJ_Init+0x72>
    /*    - Set ADC group injected conversion trigger: independent or         */
    /*      from ADC group regular                                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_INJ_StartConversionExtTrig().      */
    if(ADC_INJ_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00c      	beq.n	8001e10 <LL_ADC_INJ_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f423 52a0 	bic.w	r2, r3, #5120	; 0x1400
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	6899      	ldr	r1, [r3, #8]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	430b      	orrs	r3, r1
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	e008      	b.n	8001e22 <LL_ADC_INJ_Init+0x4e>
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f423 52a0 	bic.w	r2, r3, #5120	; 0x1400
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	605a      	str	r2, [r3, #4]
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_INJ_SetSequencerLength(ADCx, ADC_INJ_InitStruct->SequencerLength);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff fee5 	bl	8001c0e <LL_ADC_INJ_SetSequencerLength>
 8001e44:	e001      	b.n	8001e4a <LL_ADC_INJ_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <LL_EXTI_EnableIT_0_31+0x20>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4904      	ldr	r1, [pc, #16]	; (8001e74 <LL_EXTI_EnableIT_0_31+0x20>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	600b      	str	r3, [r1, #0]
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	40013c00 	.word	0x40013c00

08001e78 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <LL_EXTI_DisableIT_0_31+0x24>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	4904      	ldr	r1, [pc, #16]	; (8001e9c <LL_EXTI_DisableIT_0_31+0x24>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40013c00 	.word	0x40013c00

08001ea0 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	4904      	ldr	r1, [pc, #16]	; (8001ec0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	604b      	str	r3, [r1, #4]

}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	40013c00 	.word	0x40013c00

08001ec4 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	4904      	ldr	r1, [pc, #16]	; (8001ee8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	604b      	str	r3, [r1, #4]
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40013c00 	.word	0x40013c00

08001eec <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	4904      	ldr	r1, [pc, #16]	; (8001f0c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	608b      	str	r3, [r1, #8]

}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	40013c00 	.word	0x40013c00

08001f10 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	4904      	ldr	r1, [pc, #16]	; (8001f34 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]

}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40013c00 	.word	0x40013c00

08001f38 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	4904      	ldr	r1, [pc, #16]	; (8001f58 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	60cb      	str	r3, [r1, #12]
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	40013c00 	.word	0x40013c00

08001f5c <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	4904      	ldr	r1, [pc, #16]	; (8001f80 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001f6e:	4013      	ands	r3, r2
 8001f70:	60cb      	str	r3, [r1, #12]
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40013c00 	.word	0x40013c00

08001f84 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	791b      	ldrb	r3, [r3, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d060      	beq.n	800205a <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d067      	beq.n	8002070 <LL_EXTI_Init+0xec>
    {
      switch (EXTI_InitStruct->Mode)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	795b      	ldrb	r3, [r3, #5]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d00e      	beq.n	8001fc6 <LL_EXTI_Init+0x42>
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d017      	beq.n	8001fdc <LL_EXTI_Init+0x58>
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d120      	bne.n	8001ff2 <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff85 	bl	8001ec4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff ff48 	bl	8001e54 <LL_EXTI_EnableIT_0_31>
          break;
 8001fc4:	e018      	b.n	8001ff8 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff ff54 	bl	8001e78 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff63 	bl	8001ea0 <LL_EXTI_EnableEvent_0_31>
          break;
 8001fda:	e00d      	b.n	8001ff8 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff ff37 	bl	8001e54 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff ff58 	bl	8001ea0 <LL_EXTI_EnableEvent_0_31>
          break;
 8001ff0:	e002      	b.n	8001ff8 <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	73fb      	strb	r3, [r7, #15]
          break;
 8001ff6:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	799b      	ldrb	r3, [r3, #6]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d037      	beq.n	8002070 <LL_EXTI_Init+0xec>
      {
        switch (EXTI_InitStruct->Trigger)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	799b      	ldrb	r3, [r3, #6]
 8002004:	2b02      	cmp	r3, #2
 8002006:	d00e      	beq.n	8002026 <LL_EXTI_Init+0xa2>
 8002008:	2b03      	cmp	r3, #3
 800200a:	d017      	beq.n	800203c <LL_EXTI_Init+0xb8>
 800200c:	2b01      	cmp	r3, #1
 800200e:	d120      	bne.n	8002052 <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ffa1 	bl	8001f5c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff ff64 	bl	8001eec <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002024:	e025      	b.n	8002072 <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff ff70 	bl	8001f10 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff7f 	bl	8001f38 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800203a:	e01a      	b.n	8002072 <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ff53 	bl	8001eec <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ff74 	bl	8001f38 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002050:	e00f      	b.n	8002072 <LL_EXTI_Init+0xee>
          default:
            status = ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	73fb      	strb	r3, [r7, #15]
            break;
 8002056:	bf00      	nop
 8002058:	e00b      	b.n	8002072 <LL_EXTI_Init+0xee>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff ff0a 	bl	8001e78 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff2b 	bl	8001ec4 <LL_EXTI_DisableEvent_0_31>
 800206e:	e000      	b.n	8002072 <LL_EXTI_Init+0xee>
      }
 8002070:	bf00      	nop
  }
  return status;
 8002072:	7bfb      	ldrb	r3, [r7, #15]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800207c:	b480      	push	{r7}
 800207e:	b089      	sub	sp, #36	; 0x24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	fa93 f3a3 	rbit	r3, r3
 8002096:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	fab3 f383 	clz	r3, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	2103      	movs	r1, #3
 80020a4:	fa01 f303 	lsl.w	r3, r1, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	401a      	ands	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	61bb      	str	r3, [r7, #24]
  return result;
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	fab3 f383 	clz	r3, r3
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	fa01 f303 	lsl.w	r3, r1, r3
 80020c8:	431a      	orrs	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	601a      	str	r2, [r3, #0]
}
 80020ce:	bf00      	nop
 80020d0:	3724      	adds	r7, #36	; 0x24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80020da:	b480      	push	{r7}
 80020dc:	b085      	sub	sp, #20
 80020de:	af00      	add	r7, sp, #0
 80020e0:	60f8      	str	r0, [r7, #12]
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	401a      	ands	r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	fb01 f303 	mul.w	r3, r1, r3
 80020f8:	431a      	orrs	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	605a      	str	r2, [r3, #4]
}
 80020fe:	bf00      	nop
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800210a:	b480      	push	{r7}
 800210c:	b089      	sub	sp, #36	; 0x24
 800210e:	af00      	add	r7, sp, #0
 8002110:	60f8      	str	r0, [r7, #12]
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	fa93 f3a3 	rbit	r3, r3
 8002124:	613b      	str	r3, [r7, #16]
  return result;
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	fab3 f383 	clz	r3, r3
 800212c:	b2db      	uxtb	r3, r3
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	2103      	movs	r1, #3
 8002132:	fa01 f303 	lsl.w	r3, r1, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	401a      	ands	r2, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	fa93 f3a3 	rbit	r3, r3
 8002144:	61bb      	str	r3, [r7, #24]
  return result;
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	fab3 f383 	clz	r3, r3
 800214c:	b2db      	uxtb	r3, r3
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	431a      	orrs	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800215c:	bf00      	nop
 800215e:	3724      	adds	r7, #36	; 0x24
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002168:	b480      	push	{r7}
 800216a:	b089      	sub	sp, #36	; 0x24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	fa93 f3a3 	rbit	r3, r3
 8002182:	613b      	str	r3, [r7, #16]
  return result;
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	fab3 f383 	clz	r3, r3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	2103      	movs	r1, #3
 8002190:	fa01 f303 	lsl.w	r3, r1, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	401a      	ands	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	fa93 f3a3 	rbit	r3, r3
 80021a2:	61bb      	str	r3, [r7, #24]
  return result;
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	fab3 f383 	clz	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	fa01 f303 	lsl.w	r3, r1, r3
 80021b4:	431a      	orrs	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	60da      	str	r2, [r3, #12]
}
 80021ba:	bf00      	nop
 80021bc:	3724      	adds	r7, #36	; 0x24
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b089      	sub	sp, #36	; 0x24
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	60f8      	str	r0, [r7, #12]
 80021ce:	60b9      	str	r1, [r7, #8]
 80021d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6a1a      	ldr	r2, [r3, #32]
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	fa93 f3a3 	rbit	r3, r3
 80021e0:	613b      	str	r3, [r7, #16]
  return result;
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	fab3 f383 	clz	r3, r3
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	210f      	movs	r1, #15
 80021ee:	fa01 f303 	lsl.w	r3, r1, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	401a      	ands	r2, r3
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa93 f3a3 	rbit	r3, r3
 8002200:	61bb      	str	r3, [r7, #24]
  return result;
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	fab3 f383 	clz	r3, r3
 8002208:	b2db      	uxtb	r3, r3
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	fa01 f303 	lsl.w	r3, r1, r3
 8002212:	431a      	orrs	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002218:	bf00      	nop
 800221a:	3724      	adds	r7, #36	; 0x24
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002224:	b480      	push	{r7}
 8002226:	b089      	sub	sp, #36	; 0x24
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	0a1b      	lsrs	r3, r3, #8
 8002238:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	fa93 f3a3 	rbit	r3, r3
 8002240:	613b      	str	r3, [r7, #16]
  return result;
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	fab3 f383 	clz	r3, r3
 8002248:	b2db      	uxtb	r3, r3
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	210f      	movs	r1, #15
 800224e:	fa01 f303 	lsl.w	r3, r1, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	401a      	ands	r2, r3
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	0a1b      	lsrs	r3, r3, #8
 800225a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	fa93 f3a3 	rbit	r3, r3
 8002262:	61bb      	str	r3, [r7, #24]
  return result;
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	fab3 f383 	clz	r3, r3
 800226a:	b2db      	uxtb	r3, r3
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	fa01 f303 	lsl.w	r3, r1, r3
 8002274:	431a      	orrs	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800227a:	bf00      	nop
 800227c:	3724      	adds	r7, #36	; 0x24
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b088      	sub	sp, #32
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002290:	2300      	movs	r3, #0
 8002292:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002294:	2300      	movs	r3, #0
 8002296:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	fa93 f3a3 	rbit	r3, r3
 80022a4:	613b      	str	r3, [r7, #16]
  return result;
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	fab3 f383 	clz	r3, r3
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80022b0:	e049      	b.n	8002346 <LL_GPIO_Init+0xc0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	2101      	movs	r1, #1
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	fa01 f303 	lsl.w	r3, r1, r3
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d03b      	beq.n	8002340 <LL_GPIO_Init+0xba>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	461a      	mov	r2, r3
 80022ce:	69b9      	ldr	r1, [r7, #24]
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff fed3 	bl	800207c <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d003      	beq.n	80022e6 <LL_GPIO_Init+0x60>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d106      	bne.n	80022f4 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	461a      	mov	r2, r3
 80022ec:	69b9      	ldr	r1, [r7, #24]
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff ff0b 	bl	800210a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	461a      	mov	r2, r3
 80022fa:	69b9      	ldr	r1, [r7, #24]
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff ff33 	bl	8002168 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d11a      	bne.n	8002340 <LL_GPIO_Init+0xba>
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	fa93 f3a3 	rbit	r3, r3
 8002314:	60bb      	str	r3, [r7, #8]
  return result;
 8002316:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002318:	fab3 f383 	clz	r3, r3
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b07      	cmp	r3, #7
 8002320:	d807      	bhi.n	8002332 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	461a      	mov	r2, r3
 8002328:	69b9      	ldr	r1, [r7, #24]
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff ff4b 	bl	80021c6 <LL_GPIO_SetAFPin_0_7>
 8002330:	e006      	b.n	8002340 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	461a      	mov	r2, r3
 8002338:	69b9      	ldr	r1, [r7, #24]
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff ff72 	bl	8002224 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	3301      	adds	r3, #1
 8002344:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	fa22 f303 	lsr.w	r3, r2, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1ae      	bne.n	80022b2 <LL_GPIO_Init+0x2c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d003      	beq.n	8002364 <LL_GPIO_Init+0xde>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b02      	cmp	r3, #2
 8002362:	d107      	bne.n	8002374 <LL_GPIO_Init+0xee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	6819      	ldr	r1, [r3, #0]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	461a      	mov	r2, r3
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff feb3 	bl	80020da <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3720      	adds	r7, #32
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002384:	4b04      	ldr	r3, [pc, #16]	; (8002398 <LL_RCC_GetSysClkSource+0x18>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 030c 	and.w	r3, r3, #12
}
 800238c:	4618      	mov	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40023800 	.word	0x40023800

0800239c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80023a0:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <LL_RCC_GetAHBPrescaler+0x18>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40023800 	.word	0x40023800

080023b8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80023bc:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <LL_RCC_GetAPB1Prescaler+0x18>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40023800 	.word	0x40023800

080023d4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80023d8:	4b04      	ldr	r3, [pc, #16]	; (80023ec <LL_RCC_GetAPB2Prescaler+0x18>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800

080023f0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80023f4:	4b04      	ldr	r3, [pc, #16]	; (8002408 <LL_RCC_PLL_GetMainSource+0x18>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800

0800240c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002410:	4b04      	ldr	r3, [pc, #16]	; (8002424 <LL_RCC_PLL_GetN+0x18>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	099b      	lsrs	r3, r3, #6
 8002416:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800241a:	4618      	mov	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	40023800 	.word	0x40023800

08002428 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800242c:	4b04      	ldr	r3, [pc, #16]	; (8002440 <LL_RCC_PLL_GetP+0x18>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002434:	4618      	mov	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800

08002444 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <LL_RCC_PLL_GetR+0x18>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	40023800 	.word	0x40023800

08002460 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002464:	4b04      	ldr	r3, [pc, #16]	; (8002478 <LL_RCC_PLL_GetDivider+0x18>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800246c:	4618      	mov	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	40023800 	.word	0x40023800

0800247c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002484:	f000 f820 	bl	80024c8 <RCC_GetSystemClockFreq>
 8002488:	4602      	mov	r2, r0
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f000 f85c 	bl	8002550 <RCC_GetHCLKClockFreq>
 8002498:	4602      	mov	r2, r0
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 f86a 	bl	800257c <RCC_GetPCLK1ClockFreq>
 80024a8:	4602      	mov	r2, r0
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 f876 	bl	80025a4 <RCC_GetPCLK2ClockFreq>
 80024b8:	4602      	mov	r2, r0
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	60da      	str	r2, [r3, #12]
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80024d2:	f7ff ff55 	bl	8002380 <LL_RCC_GetSysClkSource>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b0c      	cmp	r3, #12
 80024da:	d82d      	bhi.n	8002538 <RCC_GetSystemClockFreq+0x70>
 80024dc:	a201      	add	r2, pc, #4	; (adr r2, 80024e4 <RCC_GetSystemClockFreq+0x1c>)
 80024de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e2:	bf00      	nop
 80024e4:	08002519 	.word	0x08002519
 80024e8:	08002539 	.word	0x08002539
 80024ec:	08002539 	.word	0x08002539
 80024f0:	08002539 	.word	0x08002539
 80024f4:	0800251f 	.word	0x0800251f
 80024f8:	08002539 	.word	0x08002539
 80024fc:	08002539 	.word	0x08002539
 8002500:	08002539 	.word	0x08002539
 8002504:	08002525 	.word	0x08002525
 8002508:	08002539 	.word	0x08002539
 800250c:	08002539 	.word	0x08002539
 8002510:	08002539 	.word	0x08002539
 8002514:	0800252f 	.word	0x0800252f
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <RCC_GetSystemClockFreq+0x80>)
 800251a:	607b      	str	r3, [r7, #4]
      break;
 800251c:	e00f      	b.n	800253e <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800251e:	4b0b      	ldr	r3, [pc, #44]	; (800254c <RCC_GetSystemClockFreq+0x84>)
 8002520:	607b      	str	r3, [r7, #4]
      break;
 8002522:	e00c      	b.n	800253e <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002524:	2008      	movs	r0, #8
 8002526:	f000 f851 	bl	80025cc <RCC_PLL_GetFreqDomain_SYS>
 800252a:	6078      	str	r0, [r7, #4]
      break;
 800252c:	e007      	b.n	800253e <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 800252e:	200c      	movs	r0, #12
 8002530:	f000 f84c 	bl	80025cc <RCC_PLL_GetFreqDomain_SYS>
 8002534:	6078      	str	r0, [r7, #4]
      break;
 8002536:	e002      	b.n	800253e <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002538:	4b03      	ldr	r3, [pc, #12]	; (8002548 <RCC_GetSystemClockFreq+0x80>)
 800253a:	607b      	str	r3, [r7, #4]
      break;
 800253c:	bf00      	nop
  }

  return frequency;
 800253e:	687b      	ldr	r3, [r7, #4]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	00f42400 	.word	0x00f42400
 800254c:	007a1200 	.word	0x007a1200

08002550 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002558:	f7ff ff20 	bl	800239c <LL_RCC_GetAHBPrescaler>
 800255c:	4603      	mov	r3, r0
 800255e:	091b      	lsrs	r3, r3, #4
 8002560:	f003 030f 	and.w	r3, r3, #15
 8002564:	4a04      	ldr	r2, [pc, #16]	; (8002578 <RCC_GetHCLKClockFreq+0x28>)
 8002566:	5cd3      	ldrb	r3, [r2, r3]
 8002568:	461a      	mov	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	40d3      	lsrs	r3, r2
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	08009520 	.word	0x08009520

0800257c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002584:	f7ff ff18 	bl	80023b8 <LL_RCC_GetAPB1Prescaler>
 8002588:	4603      	mov	r3, r0
 800258a:	0a9b      	lsrs	r3, r3, #10
 800258c:	4a04      	ldr	r2, [pc, #16]	; (80025a0 <RCC_GetPCLK1ClockFreq+0x24>)
 800258e:	5cd3      	ldrb	r3, [r2, r3]
 8002590:	461a      	mov	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	40d3      	lsrs	r3, r2
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	08009530 	.word	0x08009530

080025a4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80025ac:	f7ff ff12 	bl	80023d4 <LL_RCC_GetAPB2Prescaler>
 80025b0:	4603      	mov	r3, r0
 80025b2:	0b5b      	lsrs	r3, r3, #13
 80025b4:	4a04      	ldr	r2, [pc, #16]	; (80025c8 <RCC_GetPCLK2ClockFreq+0x24>)
 80025b6:	5cd3      	ldrb	r3, [r2, r3]
 80025b8:	461a      	mov	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	40d3      	lsrs	r3, r2
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	08009530 	.word	0x08009530

080025cc <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80025cc:	b590      	push	{r4, r7, lr}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	2300      	movs	r3, #0
 80025de:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80025e0:	f7ff ff06 	bl	80023f0 <LL_RCC_PLL_GetMainSource>
 80025e4:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <RCC_PLL_GetFreqDomain_SYS+0x28>
 80025ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025f0:	d003      	beq.n	80025fa <RCC_PLL_GetFreqDomain_SYS+0x2e>
 80025f2:	e005      	b.n	8002600 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80025f4:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <RCC_PLL_GetFreqDomain_SYS+0x98>)
 80025f6:	617b      	str	r3, [r7, #20]
      break;
 80025f8:	e005      	b.n	8002606 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80025fa:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 80025fc:	617b      	str	r3, [r7, #20]
      break;
 80025fe:	e002      	b.n	8002606 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 8002600:	4b18      	ldr	r3, [pc, #96]	; (8002664 <RCC_PLL_GetFreqDomain_SYS+0x98>)
 8002602:	617b      	str	r3, [r7, #20]
      break;
 8002604:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b08      	cmp	r3, #8
 800260a:	d114      	bne.n	8002636 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800260c:	f7ff ff28 	bl	8002460 <LL_RCC_PLL_GetDivider>
 8002610:	4602      	mov	r2, r0
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	fbb3 f4f2 	udiv	r4, r3, r2
 8002618:	f7ff fef8 	bl	800240c <LL_RCC_PLL_GetN>
 800261c:	4603      	mov	r3, r0
 800261e:	fb03 f404 	mul.w	r4, r3, r4
 8002622:	f7ff ff01 	bl	8002428 <LL_RCC_PLL_GetP>
 8002626:	4603      	mov	r3, r0
 8002628:	0c1b      	lsrs	r3, r3, #16
 800262a:	3301      	adds	r3, #1
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	fbb4 f3f3 	udiv	r3, r4, r3
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	e011      	b.n	800265a <RCC_PLL_GetFreqDomain_SYS+0x8e>
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002636:	f7ff ff13 	bl	8002460 <LL_RCC_PLL_GetDivider>
 800263a:	4602      	mov	r2, r0
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	fbb3 f4f2 	udiv	r4, r3, r2
 8002642:	f7ff fee3 	bl	800240c <LL_RCC_PLL_GetN>
 8002646:	4603      	mov	r3, r0
 8002648:	fb03 f404 	mul.w	r4, r3, r4
 800264c:	f7ff fefa 	bl	8002444 <LL_RCC_PLL_GetR>
 8002650:	4603      	mov	r3, r0
 8002652:	0f1b      	lsrs	r3, r3, #28
 8002654:	fbb4 f3f3 	udiv	r3, r4, r3
 8002658:	613b      	str	r3, [r7, #16]
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800265a:	693b      	ldr	r3, [r7, #16]
}
 800265c:	4618      	mov	r0, r3
 800265e:	371c      	adds	r7, #28
 8002660:	46bd      	mov	sp, r7
 8002662:	bd90      	pop	{r4, r7, pc}
 8002664:	00f42400 	.word	0x00f42400
 8002668:	007a1200 	.word	0x007a1200

0800266c <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	635a      	str	r2, [r3, #52]	; 0x34
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	639a      	str	r2, [r3, #56]	; 0x38
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	f043 0201 	orr.w	r2, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	615a      	str	r2, [r3, #20]
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a3d      	ldr	r2, [pc, #244]	; (8002858 <LL_TIM_Init+0x108>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d013      	beq.n	8002790 <LL_TIM_Init+0x40>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800276e:	d00f      	beq.n	8002790 <LL_TIM_Init+0x40>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a3a      	ldr	r2, [pc, #232]	; (800285c <LL_TIM_Init+0x10c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d00b      	beq.n	8002790 <LL_TIM_Init+0x40>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a39      	ldr	r2, [pc, #228]	; (8002860 <LL_TIM_Init+0x110>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d007      	beq.n	8002790 <LL_TIM_Init+0x40>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a38      	ldr	r2, [pc, #224]	; (8002864 <LL_TIM_Init+0x114>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d003      	beq.n	8002790 <LL_TIM_Init+0x40>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a37      	ldr	r2, [pc, #220]	; (8002868 <LL_TIM_Init+0x118>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d106      	bne.n	800279e <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	4313      	orrs	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a2d      	ldr	r2, [pc, #180]	; (8002858 <LL_TIM_Init+0x108>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d02b      	beq.n	80027fe <LL_TIM_Init+0xae>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ac:	d027      	beq.n	80027fe <LL_TIM_Init+0xae>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a2a      	ldr	r2, [pc, #168]	; (800285c <LL_TIM_Init+0x10c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d023      	beq.n	80027fe <LL_TIM_Init+0xae>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a29      	ldr	r2, [pc, #164]	; (8002860 <LL_TIM_Init+0x110>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d01f      	beq.n	80027fe <LL_TIM_Init+0xae>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a28      	ldr	r2, [pc, #160]	; (8002864 <LL_TIM_Init+0x114>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d01b      	beq.n	80027fe <LL_TIM_Init+0xae>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a27      	ldr	r2, [pc, #156]	; (8002868 <LL_TIM_Init+0x118>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d017      	beq.n	80027fe <LL_TIM_Init+0xae>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a26      	ldr	r2, [pc, #152]	; (800286c <LL_TIM_Init+0x11c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d013      	beq.n	80027fe <LL_TIM_Init+0xae>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a25      	ldr	r2, [pc, #148]	; (8002870 <LL_TIM_Init+0x120>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d00f      	beq.n	80027fe <LL_TIM_Init+0xae>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a24      	ldr	r2, [pc, #144]	; (8002874 <LL_TIM_Init+0x124>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d00b      	beq.n	80027fe <LL_TIM_Init+0xae>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a23      	ldr	r2, [pc, #140]	; (8002878 <LL_TIM_Init+0x128>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d007      	beq.n	80027fe <LL_TIM_Init+0xae>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a22      	ldr	r2, [pc, #136]	; (800287c <LL_TIM_Init+0x12c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d003      	beq.n	80027fe <LL_TIM_Init+0xae>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a21      	ldr	r2, [pc, #132]	; (8002880 <LL_TIM_Init+0x130>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d106      	bne.n	800280c <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	4619      	mov	r1, r3
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff ff35 	bl	8002688 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	4619      	mov	r1, r3
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7ff ff21 	bl	800266c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <LL_TIM_Init+0x108>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d003      	beq.n	800283a <LL_TIM_Init+0xea>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a0c      	ldr	r2, [pc, #48]	; (8002868 <LL_TIM_Init+0x118>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d105      	bne.n	8002846 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	7c1b      	ldrb	r3, [r3, #16]
 800283e:	4619      	mov	r1, r3
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f7ff ff2f 	bl	80026a4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff ff72 	bl	8002730 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40010000 	.word	0x40010000
 800285c:	40000400 	.word	0x40000400
 8002860:	40000800 	.word	0x40000800
 8002864:	40000c00 	.word	0x40000c00
 8002868:	40010400 	.word	0x40010400
 800286c:	40014000 	.word	0x40014000
 8002870:	40014400 	.word	0x40014400
 8002874:	40014800 	.word	0x40014800
 8002878:	40001800 	.word	0x40001800
 800287c:	40001c00 	.word	0x40001c00
 8002880:	40002000 	.word	0x40002000

08002884 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b10      	cmp	r3, #16
 8002898:	d012      	beq.n	80028c0 <LL_TIM_OC_Init+0x3c>
 800289a:	2b10      	cmp	r3, #16
 800289c:	d802      	bhi.n	80028a4 <LL_TIM_OC_Init+0x20>
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d007      	beq.n	80028b2 <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80028a2:	e022      	b.n	80028ea <LL_TIM_OC_Init+0x66>
  switch (Channel)
 80028a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028a8:	d011      	beq.n	80028ce <LL_TIM_OC_Init+0x4a>
 80028aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ae:	d015      	beq.n	80028dc <LL_TIM_OC_Init+0x58>
      break;
 80028b0:	e01b      	b.n	80028ea <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 f867 	bl	8002988 <OC1Config>
 80028ba:	4603      	mov	r3, r0
 80028bc:	75fb      	strb	r3, [r7, #23]
      break;
 80028be:	e014      	b.n	80028ea <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 f8cc 	bl	8002a60 <OC2Config>
 80028c8:	4603      	mov	r3, r0
 80028ca:	75fb      	strb	r3, [r7, #23]
      break;
 80028cc:	e00d      	b.n	80028ea <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 f935 	bl	8002b40 <OC3Config>
 80028d6:	4603      	mov	r3, r0
 80028d8:	75fb      	strb	r3, [r7, #23]
      break;
 80028da:	e006      	b.n	80028ea <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 f99e 	bl	8002c20 <OC4Config>
 80028e4:	4603      	mov	r3, r0
 80028e6:	75fb      	strb	r3, [r7, #23]
      break;
 80028e8:	bf00      	nop
  }

  return result;
 80028ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	7b12      	ldrb	r2, [r2, #12]
 800290c:	4313      	orrs	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	4313      	orrs	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	4313      	orrs	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4313      	orrs	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	89d2      	ldrh	r2, [r2, #14]
 8002944:	4313      	orrs	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	4313      	orrs	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	4313      	orrs	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	f023 0201 	bic.w	r2, r3, #1
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f023 0303 	bic.w	r3, r3, #3
 80029b6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f023 0202 	bic.w	r2, r3, #2
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f023 0201 	bic.w	r2, r3, #1
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	4313      	orrs	r3, r2
 80029e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a1c      	ldr	r2, [pc, #112]	; (8002a58 <OC1Config+0xd0>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d003      	beq.n	80029f2 <OC1Config+0x6a>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a1b      	ldr	r2, [pc, #108]	; (8002a5c <OC1Config+0xd4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d11e      	bne.n	8002a30 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f023 0208 	bic.w	r2, r3, #8
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4313      	orrs	r3, r2
 8002a00:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f023 0204 	bic.w	r2, r3, #4
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	4619      	mov	r1, r3
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7ff fe3c 	bl	80026c0 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40010000 	.word	0x40010000
 8002a5c:	40010400 	.word	0x40010400

08002a60 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	f023 0210 	bic.w	r2, r3, #16
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	021b      	lsls	r3, r3, #8
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f023 0220 	bic.w	r2, r3, #32
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	011b      	lsls	r3, r3, #4
 8002aac:	4313      	orrs	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f023 0210 	bic.w	r2, r3, #16
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a1d      	ldr	r2, [pc, #116]	; (8002b38 <OC2Config+0xd8>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d003      	beq.n	8002ad0 <OC2Config+0x70>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a1c      	ldr	r2, [pc, #112]	; (8002b3c <OC2Config+0xdc>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d11f      	bne.n	8002b10 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	019b      	lsls	r3, r3, #6
 8002adc:	4313      	orrs	r3, r2
 8002ade:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	019b      	lsls	r3, r3, #6
 8002aec:	4313      	orrs	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4313      	orrs	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4619      	mov	r1, r3
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff fdda 	bl	80026dc <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40010000 	.word	0x40010000
 8002b3c:	40010400 	.word	0x40010400

08002b40 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f023 0303 	bic.w	r3, r3, #3
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	021b      	lsls	r3, r3, #8
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	021b      	lsls	r3, r3, #8
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a1d      	ldr	r2, [pc, #116]	; (8002c18 <OC3Config+0xd8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d003      	beq.n	8002bae <OC3Config+0x6e>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a1c      	ldr	r2, [pc, #112]	; (8002c1c <OC3Config+0xdc>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d11f      	bne.n	8002bee <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	029b      	lsls	r3, r3, #10
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	029b      	lsls	r3, r3, #10
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	011b      	lsls	r3, r3, #4
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	015b      	lsls	r3, r3, #5
 8002bea:	4313      	orrs	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	4619      	mov	r1, r3
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff fd79 	bl	80026f8 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40010000 	.word	0x40010000
 8002c1c:	40010400 	.word	0x40010400

08002c20 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	021b      	lsls	r3, r3, #8
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	031b      	lsls	r3, r3, #12
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	031b      	lsls	r3, r3, #12
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a11      	ldr	r2, [pc, #68]	; (8002cc8 <OC4Config+0xa8>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d003      	beq.n	8002c90 <OC4Config+0x70>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a10      	ldr	r2, [pc, #64]	; (8002ccc <OC4Config+0xac>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d107      	bne.n	8002ca0 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	019b      	lsls	r3, r3, #6
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff fd2e 	bl	8002714 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40010000 	.word	0x40010000
 8002ccc:	40010400 	.word	0x40010400

08002cd0 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ce0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ce4:	bf0c      	ite	eq
 8002ce6:	2301      	moveq	r3, #1
 8002ce8:	2300      	movne	r3, #0
 8002cea:	b2db      	uxtb	r3, r3
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	611a      	str	r2, [r3, #16]
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	615a      	str	r2, [r3, #20]
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
 8002d50:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d58:	d152      	bne.n	8002e00 <LL_USART_SetBaudRate+0xbc>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	009a      	lsls	r2, r3, #2
 8002d64:	441a      	add	r2, r3
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6e:	4a4f      	ldr	r2, [pc, #316]	; (8002eac <LL_USART_SetBaudRate+0x168>)
 8002d70:	fba2 2303 	umull	r2, r3, r2, r3
 8002d74:	095b      	lsrs	r3, r3, #5
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	b299      	uxth	r1, r3
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	009a      	lsls	r2, r3, #2
 8002d86:	441a      	add	r2, r3
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d90:	4b46      	ldr	r3, [pc, #280]	; (8002eac <LL_USART_SetBaudRate+0x168>)
 8002d92:	fba3 0302 	umull	r0, r3, r3, r2
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	2064      	movs	r0, #100	; 0x64
 8002d9a:	fb00 f303 	mul.w	r3, r0, r3
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	3332      	adds	r3, #50	; 0x32
 8002da4:	4a41      	ldr	r2, [pc, #260]	; (8002eac <LL_USART_SetBaudRate+0x168>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	095b      	lsrs	r3, r3, #5
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	440b      	add	r3, r1
 8002dba:	b299      	uxth	r1, r3
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	009a      	lsls	r2, r3, #2
 8002dc6:	441a      	add	r2, r3
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dd0:	4b36      	ldr	r3, [pc, #216]	; (8002eac <LL_USART_SetBaudRate+0x168>)
 8002dd2:	fba3 0302 	umull	r0, r3, r3, r2
 8002dd6:	095b      	lsrs	r3, r3, #5
 8002dd8:	2064      	movs	r0, #100	; 0x64
 8002dda:	fb00 f303 	mul.w	r3, r0, r3
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	3332      	adds	r3, #50	; 0x32
 8002de4:	4a31      	ldr	r2, [pc, #196]	; (8002eac <LL_USART_SetBaudRate+0x168>)
 8002de6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dea:	095b      	lsrs	r3, r3, #5
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	440b      	add	r3, r1
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8002dfe:	e04f      	b.n	8002ea0 <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	009a      	lsls	r2, r3, #2
 8002e0a:	441a      	add	r2, r3
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e14:	4a25      	ldr	r2, [pc, #148]	; (8002eac <LL_USART_SetBaudRate+0x168>)
 8002e16:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	b299      	uxth	r1, r3
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	009a      	lsls	r2, r3, #2
 8002e2c:	441a      	add	r2, r3
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e36:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <LL_USART_SetBaudRate+0x168>)
 8002e38:	fba3 0302 	umull	r0, r3, r3, r2
 8002e3c:	095b      	lsrs	r3, r3, #5
 8002e3e:	2064      	movs	r0, #100	; 0x64
 8002e40:	fb00 f303 	mul.w	r3, r0, r3
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	3332      	adds	r3, #50	; 0x32
 8002e4a:	4a18      	ldr	r2, [pc, #96]	; (8002eac <LL_USART_SetBaudRate+0x168>)
 8002e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e50:	095b      	lsrs	r3, r3, #5
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	440b      	add	r3, r1
 8002e5c:	b299      	uxth	r1, r3
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	009a      	lsls	r2, r3, #2
 8002e68:	441a      	add	r2, r3
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e72:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <LL_USART_SetBaudRate+0x168>)
 8002e74:	fba3 0302 	umull	r0, r3, r3, r2
 8002e78:	095b      	lsrs	r3, r3, #5
 8002e7a:	2064      	movs	r0, #100	; 0x64
 8002e7c:	fb00 f303 	mul.w	r3, r0, r3
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	3332      	adds	r3, #50	; 0x32
 8002e86:	4a09      	ldr	r2, [pc, #36]	; (8002eac <LL_USART_SetBaudRate+0x168>)
 8002e88:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8c:	095b      	lsrs	r3, r3, #5
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	f003 030f 	and.w	r3, r3, #15
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	440b      	add	r3, r1
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	609a      	str	r2, [r3, #8]
}
 8002ea0:	bf00      	nop
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	51eb851f 	.word	0x51eb851f

08002eb0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff ff04 	bl	8002cd0 <LL_USART_IsEnabled>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d15e      	bne.n	8002f8c <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002ed6:	f023 030c 	bic.w	r3, r3, #12
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	6851      	ldr	r1, [r2, #4]
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	68d2      	ldr	r2, [r2, #12]
 8002ee2:	4311      	orrs	r1, r2
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	6912      	ldr	r2, [r2, #16]
 8002ee8:	4311      	orrs	r1, r2
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	6992      	ldr	r2, [r2, #24]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	4619      	mov	r1, r3
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7ff fefb 	bl	8002cf8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	4619      	mov	r1, r3
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff ff08 	bl	8002d1e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002f0e:	f107 0308 	add.w	r3, r7, #8
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff fab2 	bl	800247c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a1f      	ldr	r2, [pc, #124]	; (8002f98 <LL_USART_Init+0xe8>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d102      	bne.n	8002f26 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	61bb      	str	r3, [r7, #24]
 8002f24:	e021      	b.n	8002f6a <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a1c      	ldr	r2, [pc, #112]	; (8002f9c <LL_USART_Init+0xec>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d102      	bne.n	8002f34 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	61bb      	str	r3, [r7, #24]
 8002f32:	e01a      	b.n	8002f6a <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a1a      	ldr	r2, [pc, #104]	; (8002fa0 <LL_USART_Init+0xf0>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d102      	bne.n	8002f42 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	61bb      	str	r3, [r7, #24]
 8002f40:	e013      	b.n	8002f6a <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a17      	ldr	r2, [pc, #92]	; (8002fa4 <LL_USART_Init+0xf4>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d102      	bne.n	8002f50 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	61bb      	str	r3, [r7, #24]
 8002f4e:	e00c      	b.n	8002f6a <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a15      	ldr	r2, [pc, #84]	; (8002fa8 <LL_USART_Init+0xf8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d102      	bne.n	8002f5e <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	61bb      	str	r3, [r7, #24]
 8002f5c:	e005      	b.n	8002f6a <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a12      	ldr	r2, [pc, #72]	; (8002fac <LL_USART_Init+0xfc>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d101      	bne.n	8002f6a <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00d      	beq.n	8002f8c <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d009      	beq.n	8002f8c <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	699a      	ldr	r2, [r3, #24]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	69b9      	ldr	r1, [r7, #24]
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7ff fedc 	bl	8002d44 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002f8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3720      	adds	r7, #32
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40011000 	.word	0x40011000
 8002f9c:	40004400 	.word	0x40004400
 8002fa0:	40004800 	.word	0x40004800
 8002fa4:	40011400 	.word	0x40011400
 8002fa8:	40004c00 	.word	0x40004c00
 8002fac:	40005000 	.word	0x40005000

08002fb0 <_ZN9ArgSensorC1Ev>:
 */

#include "ArgSensor.hpp"
#include "math.h"

ArgSensor::ArgSensor() {
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	4a06      	ldr	r2, [pc, #24]	; (8002fd4 <_ZN9ArgSensorC1Ev+0x24>)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	mArg = 0;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	605a      	str	r2, [r3, #4]
}
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	080094f8 	.word	0x080094f8

08002fd8 <_ZN9ArgSensorD1Ev>:

ArgSensor::~ArgSensor() {
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	4a04      	ldr	r2, [pc, #16]	; (8002ff4 <_ZN9ArgSensorD1Ev+0x1c>)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	080094f8 	.word	0x080094f8

08002ff8 <_ZN9ArgSensorD0Ev>:
ArgSensor::~ArgSensor() {
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
}
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f7ff ffe9 	bl	8002fd8 <_ZN9ArgSensorD1Ev>
 8003006:	2108      	movs	r1, #8
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f003 f97a 	bl	8006302 <_ZdlPvj>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4618      	mov	r0, r3
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <_ZN9ArgSensor9incrementEf>:

void ArgSensor::Init(void) {
	mArg = 0;
}

void ArgSensor::increment(float pArg){
 8003018:	b590      	push	{r4, r7, lr}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	ed87 0a00 	vstr	s0, [r7]
	mArg = mArg + pArg;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	ed93 7a01 	vldr	s14, [r3, #4]
 800302a:	edd7 7a00 	vldr	s15, [r7]
 800302e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	edc3 7a01 	vstr	s15, [r3, #4]
	mArg = fmodl(mArg, (2*M_PI));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	4618      	mov	r0, r3
 800303e:	f7fd fa4f 	bl	80004e0 <__aeabi_f2d>
 8003042:	4603      	mov	r3, r0
 8003044:	460c      	mov	r4, r1
 8003046:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 8003070 <_ZN9ArgSensor9incrementEf+0x58>
 800304a:	ec44 3b10 	vmov	d0, r3, r4
 800304e:	f003 f96b 	bl	8006328 <fmodl>
 8003052:	ec54 3b10 	vmov	r3, r4, d0
 8003056:	4618      	mov	r0, r3
 8003058:	4621      	mov	r1, r4
 800305a:	f7fd fd71 	bl	8000b40 <__aeabi_d2f>
 800305e:	4602      	mov	r2, r0
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	605a      	str	r2, [r3, #4]
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	bd90      	pop	{r4, r7, pc}
 800306c:	f3af 8000 	nop.w
 8003070:	54442d18 	.word	0x54442d18
 8003074:	401921fb 	.word	0x401921fb

08003078 <_ZN9ArgSensor6getArgEv>:
void ArgSensor::decrement(float pArg){
	mArg = mArg - pArg;
	mArg = fmodl(mArg, (2*M_PI));
}

float ArgSensor::getArg(void){
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
	return mArg;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	ee07 3a90 	vmov	s15, r3
}
 8003088:	eeb0 0a67 	vmov.f32	s0, s15
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	6039      	str	r1, [r7, #0]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
	...

080030b0 <_ZN7MathLibC1Ev>:

#include "MathLib.hpp"
#include <vector>
#include "math.h"

MathLib::MathLib() {
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	4a0a      	ldr	r2, [pc, #40]	; (80030e4 <_ZN7MathLibC1Ev+0x34>)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3304      	adds	r3, #4
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 f96d 	bl	80033a2 <_ZNSt6vectorIfSaIfEEC1Ev>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3310      	adds	r3, #16
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 f968 	bl	80033a2 <_ZNSt6vectorIfSaIfEEC1Ev>
	mSize = 0;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	61da      	str	r2, [r3, #28]
}
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	08009508 	.word	0x08009508

080030e8 <_ZN7MathLibD1Ev>:

MathLib::~MathLib() {
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	4a0f      	ldr	r2, [pc, #60]	; (8003130 <_ZN7MathLibD1Ev+0x48>)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	601a      	str	r2, [r3, #0]
	mSize = 0;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	61da      	str	r2, [r3, #28]
	mSinList.clear();
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3304      	adds	r3, #4
 8003100:	4618      	mov	r0, r3
 8003102:	f000 f976 	bl	80033f2 <_ZNSt6vectorIfSaIfEE5clearEv>
	mCosList.clear();
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	3310      	adds	r3, #16
 800310a:	4618      	mov	r0, r3
 800310c:	f000 f971 	bl	80033f2 <_ZNSt6vectorIfSaIfEE5clearEv>
MathLib::~MathLib() {
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3310      	adds	r3, #16
 8003114:	4618      	mov	r0, r3
 8003116:	f000 f951 	bl	80033bc <_ZNSt6vectorIfSaIfEED1Ev>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3304      	adds	r3, #4
 800311e:	4618      	mov	r0, r3
 8003120:	f000 f94c 	bl	80033bc <_ZNSt6vectorIfSaIfEED1Ev>
}
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	08009508 	.word	0x08009508

08003134 <_ZN7MathLibD0Ev>:
MathLib::~MathLib() {
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
}
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7ff ffd3 	bl	80030e8 <_ZN7MathLibD1Ev>
 8003142:	2124      	movs	r1, #36	; 0x24
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f003 f8dc 	bl	8006302 <_ZdlPvj>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <_ZN7MathLib10setLibSizeEi>:

void MathLib::setLibSize(int pSize){
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
	mSize = pSize;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	61da      	str	r2, [r3, #28]
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <_ZN7MathLib5fInitEi>:

void MathLib::fInit(int pSize){
 8003170:	b590      	push	{r4, r7, lr}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
	setLibSize(pSize);
 800317a:	6839      	ldr	r1, [r7, #0]
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7ff ffe9 	bl	8003154 <_ZN7MathLib10setLibSizeEi>
	if(mSize == 0){
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d100      	bne.n	800318c <_ZN7MathLib5fInitEi+0x1c>
		while(1){}//error check
 800318a:	e7fe      	b.n	800318a <_ZN7MathLib5fInitEi+0x1a>
	}
	mRadvsSize = mSize / (2*M_PI);//サイズと1radianの比
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	4618      	mov	r0, r3
 8003192:	f7fd f993 	bl	80004bc <__aeabi_i2d>
 8003196:	a310      	add	r3, pc, #64	; (adr r3, 80031d8 <_ZN7MathLib5fInitEi+0x68>)
 8003198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319c:	f7fd fb22 	bl	80007e4 <__aeabi_ddiv>
 80031a0:	4603      	mov	r3, r0
 80031a2:	460c      	mov	r4, r1
 80031a4:	4618      	mov	r0, r3
 80031a6:	4621      	mov	r1, r4
 80031a8:	f7fd fcca 	bl	8000b40 <__aeabi_d2f>
 80031ac:	4602      	mov	r2, r0
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	621a      	str	r2, [r3, #32]

	fSinVectorInit(&mSinList);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3304      	adds	r3, #4
 80031b6:	4619      	mov	r1, r3
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f81d 	bl	80031f8 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE>
	fCosVectorInit(&mCosList);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3310      	adds	r3, #16
 80031c2:	4619      	mov	r1, r3
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f867 	bl	8003298 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE>
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd90      	pop	{r4, r7, pc}
 80031d2:	bf00      	nop
 80031d4:	f3af 8000 	nop.w
 80031d8:	54442d18 	.word	0x54442d18
 80031dc:	401921fb 	.word	0x401921fb

080031e0 <_ZN7MathLib10getLibSizeEv>:

int MathLib::getLibSize(void){return mSize;}
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	4618      	mov	r0, r3
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE>:

void MathLib::fSinVectorInit(std::vector<float> *pVector){
 80031f8:	b5b0      	push	{r4, r5, r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
	for(int i=0;i<mSize;i++){
 8003202:	2300      	movs	r3, #0
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	429a      	cmp	r2, r3
 800320e:	da39      	bge.n	8003284 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE+0x8c>
		float fsinval = sin(i*2*M_PI/(float)mSize);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	4618      	mov	r0, r3
 8003216:	f7fd f951 	bl	80004bc <__aeabi_i2d>
 800321a:	a31d      	add	r3, pc, #116	; (adr r3, 8003290 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE+0x98>)
 800321c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003220:	f7fd f9b6 	bl	8000590 <__aeabi_dmul>
 8003224:	4603      	mov	r3, r0
 8003226:	460c      	mov	r4, r1
 8003228:	4625      	mov	r5, r4
 800322a:	461c      	mov	r4, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	ee07 3a90 	vmov	s15, r3
 8003234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003238:	ee17 0a90 	vmov	r0, s15
 800323c:	f7fd f950 	bl	80004e0 <__aeabi_f2d>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4620      	mov	r0, r4
 8003246:	4629      	mov	r1, r5
 8003248:	f7fd facc 	bl	80007e4 <__aeabi_ddiv>
 800324c:	4603      	mov	r3, r0
 800324e:	460c      	mov	r4, r1
 8003250:	ec44 3b17 	vmov	d7, r3, r4
 8003254:	eeb0 0a47 	vmov.f32	s0, s14
 8003258:	eef0 0a67 	vmov.f32	s1, s15
 800325c:	f003 fa6c 	bl	8006738 <sin>
 8003260:	ec54 3b10 	vmov	r3, r4, d0
 8003264:	4618      	mov	r0, r3
 8003266:	4621      	mov	r1, r4
 8003268:	f7fd fc6a 	bl	8000b40 <__aeabi_d2f>
 800326c:	4603      	mov	r3, r0
 800326e:	60bb      	str	r3, [r7, #8]
		pVector->push_back(fsinval);
 8003270:	f107 0308 	add.w	r3, r7, #8
 8003274:	4619      	mov	r1, r3
 8003276:	6838      	ldr	r0, [r7, #0]
 8003278:	f000 f8c9 	bl	800340e <_ZNSt6vectorIfSaIfEE9push_backERKf>
	for(int i=0;i<mSize;i++){
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	3301      	adds	r3, #1
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	e7c0      	b.n	8003206 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE+0xe>
	}
}
 8003284:	bf00      	nop
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bdb0      	pop	{r4, r5, r7, pc}
 800328c:	f3af 8000 	nop.w
 8003290:	54442d18 	.word	0x54442d18
 8003294:	400921fb 	.word	0x400921fb

08003298 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE>:

void MathLib::fCosVectorInit(std::vector<float> *pVector){
 8003298:	b5b0      	push	{r4, r5, r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
	for(int i=0;i<mSize;i++){
 80032a2:	2300      	movs	r3, #0
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	da39      	bge.n	8003324 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE+0x8c>
		float fcosval = cos(i*2*M_PI/(float)mSize);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fd f901 	bl	80004bc <__aeabi_i2d>
 80032ba:	a31d      	add	r3, pc, #116	; (adr r3, 8003330 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE+0x98>)
 80032bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c0:	f7fd f966 	bl	8000590 <__aeabi_dmul>
 80032c4:	4603      	mov	r3, r0
 80032c6:	460c      	mov	r4, r1
 80032c8:	4625      	mov	r5, r4
 80032ca:	461c      	mov	r4, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	ee07 3a90 	vmov	s15, r3
 80032d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032d8:	ee17 0a90 	vmov	r0, s15
 80032dc:	f7fd f900 	bl	80004e0 <__aeabi_f2d>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4620      	mov	r0, r4
 80032e6:	4629      	mov	r1, r5
 80032e8:	f7fd fa7c 	bl	80007e4 <__aeabi_ddiv>
 80032ec:	4603      	mov	r3, r0
 80032ee:	460c      	mov	r4, r1
 80032f0:	ec44 3b17 	vmov	d7, r3, r4
 80032f4:	eeb0 0a47 	vmov.f32	s0, s14
 80032f8:	eef0 0a67 	vmov.f32	s1, s15
 80032fc:	f003 f8d0 	bl	80064a0 <cos>
 8003300:	ec54 3b10 	vmov	r3, r4, d0
 8003304:	4618      	mov	r0, r3
 8003306:	4621      	mov	r1, r4
 8003308:	f7fd fc1a 	bl	8000b40 <__aeabi_d2f>
 800330c:	4603      	mov	r3, r0
 800330e:	60bb      	str	r3, [r7, #8]
		pVector->push_back(fcosval);
 8003310:	f107 0308 	add.w	r3, r7, #8
 8003314:	4619      	mov	r1, r3
 8003316:	6838      	ldr	r0, [r7, #0]
 8003318:	f000 f879 	bl	800340e <_ZNSt6vectorIfSaIfEE9push_backERKf>
	for(int i=0;i<mSize;i++){
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	3301      	adds	r3, #1
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	e7c0      	b.n	80032a6 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE+0xe>
	}
}
 8003324:	bf00      	nop
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bdb0      	pop	{r4, r5, r7, pc}
 800332c:	f3af 8000 	nop.w
 8003330:	54442d18 	.word	0x54442d18
 8003334:	400921fb 	.word	0x400921fb

08003338 <_ZN7MathLib10getSinListEv>:

std::vector<float> MathLib::getSinList(void){
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
	return mSinList;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	3304      	adds	r3, #4
 8003346:	4619      	mov	r1, r3
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f885 	bl	8003458 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
}
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <_ZN7MathLib10getCosListEv>:

std::vector<float> MathLib::getCosList(void){
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	6039      	str	r1, [r7, #0]
	return mCosList;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	3310      	adds	r3, #16
 8003364:	4619      	mov	r1, r3
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f876 	bl	8003458 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
}
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <_ZN7MathLib14radToSizeCountEf>:

int MathLib::radToSizeCount(float pradian){
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	ed87 0a00 	vstr	s0, [r7]
	return pradian * mRadvsSize;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	ed93 7a08 	vldr	s14, [r3, #32]
 8003386:	edd7 7a00 	vldr	s15, [r7]
 800338a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800338e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003392:	ee17 3a90 	vmov	r3, s15
}
 8003396:	4618      	mov	r0, r3
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <_ZNSt6vectorIfSaIfEEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b082      	sub	sp, #8
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 f89c 	bl	80034ea <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4618      	mov	r0, r3
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <_ZNSt6vectorIfSaIfEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80033bc:	b5b0      	push	{r4, r5, r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681c      	ldr	r4, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 f8b2 	bl	8003538 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80033d4:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80033d6:	461a      	mov	r2, r3
 80033d8:	4629      	mov	r1, r5
 80033da:	4620      	mov	r0, r4
 80033dc:	f000 f8b7 	bl	800354e <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 f88e 	bl	8003504 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bdb0      	pop	{r4, r5, r7, pc}

080033f2 <_ZNSt6vectorIfSaIfEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4619      	mov	r1, r3
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f8b2 	bl	800356a <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <_ZNSt6vectorIfSaIfEE9push_backERKf>:
      push_back(const value_type& __x)
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	429a      	cmp	r2, r3
 8003422:	d00c      	beq.n	800343e <_ZNSt6vectorIfSaIfEE9push_backERKf+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	4619      	mov	r1, r3
 800342e:	f000 f8bf 	bl	80035b0 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	1d1a      	adds	r2, r3, #4
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	605a      	str	r2, [r3, #4]
      }
 800343c:	e008      	b.n	8003450 <_ZNSt6vectorIfSaIfEE9push_backERKf+0x42>
	  _M_realloc_insert(end(), __x);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f8c9 	bl	80035d6 <_ZNSt6vectorIfSaIfEE3endEv>
 8003444:	4603      	mov	r3, r0
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	4619      	mov	r1, r3
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f8d4 	bl	80035f8 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>
      }
 8003450:	bf00      	nop
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 8003458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8003462:	687c      	ldr	r4, [r7, #4]
 8003464:	6838      	ldr	r0, [r7, #0]
 8003466:	f000 f953 	bl	8003710 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800346a:	4605      	mov	r5, r0
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f000 f96d 	bl	800374e <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003474:	4602      	mov	r2, r0
 8003476:	f107 030c 	add.w	r3, r7, #12
 800347a:	4611      	mov	r1, r2
 800347c:	4618      	mov	r0, r3
 800347e:	f000 f958 	bl	8003732 <_ZN9__gnu_cxx14__alloc_traitsISaIfEE17_S_select_on_copyERKS1_>
 8003482:	f107 030c 	add.w	r3, r7, #12
 8003486:	461a      	mov	r2, r3
 8003488:	4629      	mov	r1, r5
 800348a:	4620      	mov	r0, r4
 800348c:	f000 f976 	bl	800377c <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 8003490:	f107 030c 	add.w	r3, r7, #12
 8003494:	4618      	mov	r0, r3
 8003496:	f000 f965 	bl	8003764 <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800349a:	6838      	ldr	r0, [r7, #0]
 800349c:	f000 f982 	bl	80037a4 <_ZNKSt6vectorIfSaIfEE5beginEv>
 80034a0:	4605      	mov	r5, r0
 80034a2:	6838      	ldr	r0, [r7, #0]
 80034a4:	f000 f992 	bl	80037cc <_ZNKSt6vectorIfSaIfEE3endEv>
 80034a8:	4606      	mov	r6, r0
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 f841 	bl	8003538 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80034b6:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80034b8:	4622      	mov	r2, r4
 80034ba:	4631      	mov	r1, r6
 80034bc:	4628      	mov	r0, r5
 80034be:	f000 f999 	bl	80037f4 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 80034c2:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	605a      	str	r2, [r3, #4]
      }
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4618      	mov	r0, r3
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034d2 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
      struct _Vector_impl
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b082      	sub	sp, #8
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f942 	bl	8003764 <_ZNSaIfED1Ev>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4618      	mov	r0, r3
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      _Vector_base()
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 f98e 	bl	8003816 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4618      	mov	r0, r3
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6819      	ldr	r1, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8003514:	461a      	mov	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800351e:	461a      	mov	r2, r3
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f98d 	bl	8003840 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
		      - this->_M_impl._M_start); }
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff ffd2 	bl	80034d2 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4618      	mov	r0, r3
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800354e:	b580      	push	{r7, lr}
 8003550:	b084      	sub	sp, #16
 8003552:	af00      	add	r7, sp, #0
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800355a:	68b9      	ldr	r1, [r7, #8]
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 f982 	bl	8003866 <_ZSt8_DestroyIPfEvT_S1_>
    }
 8003562:	bf00      	nop
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800356a:	b590      	push	{r4, r7, lr}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	6039      	str	r1, [r7, #0]
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685c      	ldr	r4, [r3, #4]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff ffdc 	bl	8003538 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003580:	4603      	mov	r3, r0
 8003582:	461a      	mov	r2, r3
 8003584:	4621      	mov	r1, r4
 8003586:	6838      	ldr	r0, [r7, #0]
 8003588:	f7ff ffe1 	bl	800354e <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	605a      	str	r2, [r3, #4]
      }
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	bd90      	pop	{r4, r7, pc}

0800359a <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4618      	mov	r0, r3
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7ff ffec 	bl	800359a <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 80035c2:	4603      	mov	r3, r0
 80035c4:	461a      	mov	r2, r3
 80035c6:	68b9      	ldr	r1, [r7, #8]
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 f959 	bl	8003880 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_>
 80035ce:	bf00      	nop
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <_ZNSt6vectorIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	1d1a      	adds	r2, r3, #4
 80035e2:	f107 030c 	add.w	r3, r7, #12
 80035e6:	4611      	mov	r1, r2
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 f961 	bl	80038b0 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80035f8:	b5b0      	push	{r4, r5, r7, lr}
 80035fa:	b08a      	sub	sp, #40	; 0x28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8003604:	4a41      	ldr	r2, [pc, #260]	; (800370c <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x114>)
 8003606:	2101      	movs	r1, #1
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 f961 	bl	80038d0 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 800360e:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 f9a5 	bl	8003960 <_ZNSt6vectorIfSaIfEE5beginEv>
 8003616:	4603      	mov	r3, r0
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	f107 0214 	add.w	r2, r7, #20
 800361e:	f107 0308 	add.w	r3, r7, #8
 8003622:	4611      	mov	r1, r2
 8003624:	4618      	mov	r0, r3
 8003626:	f000 f9ab 	bl	8003980 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800362a:	4603      	mov	r3, r0
 800362c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003632:	4618      	mov	r0, r3
 8003634:	f000 f9ba 	bl	80039ac <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8003638:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800363e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8003644:	69fa      	ldr	r2, [r7, #28]
 8003646:	18d5      	adds	r5, r2, r3
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f7ff ffa6 	bl	800359a <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800364e:	4603      	mov	r3, r0
 8003650:	461a      	mov	r2, r3
 8003652:	4629      	mov	r1, r5
 8003654:	4620      	mov	r0, r4
 8003656:	f7ff ffab 	bl	80035b0 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800365a:	2300      	movs	r3, #0
 800365c:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681c      	ldr	r4, [r3, #0]
 8003662:	f107 0308 	add.w	r3, r7, #8
 8003666:	4618      	mov	r0, r3
 8003668:	f000 f9b4 	bl	80039d4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800366c:	4603      	mov	r3, r0
 800366e:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff ff60 	bl	8003538 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003678:	4603      	mov	r3, r0
	  __new_finish
 800367a:	69fa      	ldr	r2, [r7, #28]
 800367c:	4629      	mov	r1, r5
 800367e:	4620      	mov	r0, r4
 8003680:	f000 f9b3 	bl	80039ea <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 8003684:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	3304      	adds	r3, #4
 800368a:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 800368c:	f107 0308 	add.w	r3, r7, #8
 8003690:	4618      	mov	r0, r3
 8003692:	f000 f99f 	bl	80039d4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8003696:	4603      	mov	r3, r0
 8003698:	681c      	ldr	r4, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff ff49 	bl	8003538 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80036a6:	4603      	mov	r3, r0
	  __new_finish
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4629      	mov	r1, r5
 80036ac:	4620      	mov	r0, r4
 80036ae:	f000 f99c 	bl	80039ea <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 80036b2:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681c      	ldr	r4, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff ff3a 	bl	8003538 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80036c4:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80036c6:	461a      	mov	r2, r3
 80036c8:	4629      	mov	r1, r5
 80036ca:	4620      	mov	r0, r4
 80036cc:	f7ff ff3f 	bl	800354e <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 80036da:	461a      	mov	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 80036e4:	461a      	mov	r2, r3
 80036e6:	f000 f8ab 	bl	8003840 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	69fa      	ldr	r2, [r7, #28]
 80036ee:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80036f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	69fa      	ldr	r2, [r7, #28]
 80036fc:	441a      	add	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	609a      	str	r2, [r3, #8]
    }
 8003702:	bf00      	nop
 8003704:	3728      	adds	r7, #40	; 0x28
 8003706:	46bd      	mov	sp, r7
 8003708:	bdb0      	pop	{r4, r5, r7, pc}
 800370a:	bf00      	nop
 800370c:	08009488 	.word	0x08009488

08003710 <_ZNKSt6vectorIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	461a      	mov	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	109b      	asrs	r3, r3, #2
 8003726:	4618      	mov	r0, r3
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <_ZN9__gnu_cxx14__alloc_traitsISaIfEE17_S_select_on_copyERKS1_>:
    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::addressof(*__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6839      	ldr	r1, [r7, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f000 f96b 	bl	8003a1c <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <_ZNSaIfED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f970 	bl	8003a52 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4618      	mov	r0, r3
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	4618      	mov	r0, r3
 800378e:	f000 f96b 	bl	8003a68 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8003792:	68b9      	ldr	r1, [r7, #8]
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 f97e 	bl	8003a96 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	f107 020c 	add.w	r2, r7, #12
 80037b6:	f107 0308 	add.w	r3, r7, #8
 80037ba:	4611      	mov	r1, r2
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 f985 	bl	8003acc <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	f107 020c 	add.w	r2, r7, #12
 80037de:	f107 0308 	add.w	r3, r7, #8
 80037e2:	4611      	mov	r1, r2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 f971 	bl	8003acc <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
 8003800:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	68b9      	ldr	r1, [r7, #8]
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 f970 	bl	8003aec <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 800380c:	4603      	mov	r3, r0
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl()
 8003816:	b580      	push	{r7, lr}
 8003818:	b082      	sub	sp, #8
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f976 	bl	8003b10 <_ZNSaIfEC1Ev>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	605a      	str	r2, [r3, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	609a      	str	r2, [r3, #8]
	{ }
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4618      	mov	r0, r3
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
	if (__p)
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d005      	beq.n	800385e <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	68b9      	ldr	r1, [r7, #8]
 8003858:	4618      	mov	r0, r3
 800385a:	f000 f965 	bl	8003b28 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 800385e:	bf00      	nop
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <_ZSt8_DestroyIPfEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003866:	b580      	push	{r7, lr}
 8003868:	b082      	sub	sp, #8
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
 800386e:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8003870:	6839      	ldr	r1, [r7, #0]
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f967 	bl	8003b46 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 8003878:	bf00      	nop
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8003880:	b590      	push	{r4, r7, lr}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff fe84 	bl	800359a <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8003892:	4603      	mov	r3, r0
 8003894:	681c      	ldr	r4, [r3, #0]
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	4619      	mov	r1, r3
 800389a:	2004      	movs	r0, #4
 800389c:	f7ff fbfb 	bl	8003096 <_ZnwjPv>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d000      	beq.n	80038a8 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_+0x28>
 80038a6:	601c      	str	r4, [r3, #0]
 80038a8:	bf00      	nop
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd90      	pop	{r4, r7, pc}

080038b0 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4618      	mov	r0, r3
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80038d0:	b590      	push	{r4, r7, lr}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 f93d 	bl	8003b5c <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 80038e2:	4604      	mov	r4, r0
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f7ff ff13 	bl	8003710 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80038ea:	4603      	mov	r3, r0
 80038ec:	1ae2      	subs	r2, r4, r3
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	bf34      	ite	cc
 80038f4:	2301      	movcc	r3, #1
 80038f6:	2300      	movcs	r3, #0
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4618      	mov	r0, r3
 8003902:	f002 fd19 	bl	8006338 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f7ff ff02 	bl	8003710 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800390c:	4604      	mov	r4, r0
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f7ff fefe 	bl	8003710 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003914:	4603      	mov	r3, r0
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	f107 0208 	add.w	r2, r7, #8
 800391c:	f107 0310 	add.w	r3, r7, #16
 8003920:	4611      	mov	r1, r2
 8003922:	4618      	mov	r0, r3
 8003924:	f000 f92b 	bl	8003b7e <_ZSt3maxIjERKT_S2_S2_>
 8003928:	4603      	mov	r3, r0
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4423      	add	r3, r4
 800392e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f7ff feed 	bl	8003710 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003936:	4602      	mov	r2, r0
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	4293      	cmp	r3, r2
 800393c:	d306      	bcc.n	800394c <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x7c>
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f90c 	bl	8003b5c <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8003944:	4602      	mov	r2, r0
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	4293      	cmp	r3, r2
 800394a:	d904      	bls.n	8003956 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x86>
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 f905 	bl	8003b5c <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8003952:	4603      	mov	r3, r0
 8003954:	e000      	b.n	8003958 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x88>
 8003956:	697b      	ldr	r3, [r7, #20]
      }
 8003958:	4618      	mov	r0, r3
 800395a:	371c      	adds	r7, #28
 800395c:	46bd      	mov	sp, r7
 800395e:	bd90      	pop	{r4, r7, pc}

08003960 <_ZNSt6vectorIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	f107 030c 	add.w	r3, r7, #12
 800396e:	4611      	mov	r1, r2
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff ff9d 	bl	80038b0 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003980:	b590      	push	{r4, r7, lr}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f822 	bl	80039d4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8003990:	4603      	mov	r3, r0
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	461c      	mov	r4, r3
 8003996:	6838      	ldr	r0, [r7, #0]
 8003998:	f000 f81c 	bl	80039d4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800399c:	4603      	mov	r3, r0
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	1ae3      	subs	r3, r4, r3
 80039a2:	109b      	asrs	r3, r3, #2
 80039a4:	4618      	mov	r0, r3
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd90      	pop	{r4, r7, pc}

080039ac <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d006      	beq.n	80039ca <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6839      	ldr	r1, [r7, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 f8f0 	bl	8003ba6 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 80039c6:	4603      	mov	r3, r0
 80039c8:	e000      	b.n	80039cc <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 80039ca:	2300      	movs	r3, #0
      }
 80039cc:	4618      	mov	r0, r3
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4618      	mov	r0, r3
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80039ea:	b590      	push	{r4, r7, lr}
 80039ec:	b085      	sub	sp, #20
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	607a      	str	r2, [r7, #4]
 80039f6:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 f8e3 	bl	8003bc4 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 80039fe:	4604      	mov	r4, r0
 8003a00:	68b8      	ldr	r0, [r7, #8]
 8003a02:	f000 f8df 	bl	8003bc4 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 8003a06:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	4620      	mov	r0, r4
 8003a0e:	f000 f8e8 	bl	8003be2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>
 8003a12:	4603      	mov	r3, r0
    }
 8003a14:	4618      	mov	r0, r3
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd90      	pop	{r4, r7, pc}

08003a1c <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8003a26:	6839      	ldr	r1, [r7, #0]
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f804 	bl	8003a36 <_ZNSaIfEC1ERKS_>
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) throw()
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b082      	sub	sp, #8
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
 8003a3e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8003a40:	6839      	ldr	r1, [r7, #0]
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f8de 	bl	8003c04 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 8003a72:	6839      	ldr	r1, [r7, #0]
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff ffde 	bl	8003a36 <_ZNSaIfEC1ERKS_>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	605a      	str	r2, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	609a      	str	r2, [r3, #8]
	{ }
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b082      	sub	sp, #8
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8003aa0:	6839      	ldr	r1, [r7, #0]
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7ff ff82 	bl	80039ac <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	441a      	add	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	609a      	str	r2, [r3, #8]
      }
 8003ac4:	bf00      	nop
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003af8:	2301      	movs	r3, #1
 8003afa:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	68b9      	ldr	r1, [r7, #8]
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 f88b 	bl	8003c1c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 8003b06:	4603      	mov	r3, r0
    }
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <_ZNSaIfEC1Ev>:
      allocator() throw() { }
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f88f 	bl	8003c3c <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4618      	mov	r0, r3
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	68b9      	ldr	r1, [r7, #8]
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 f88a 	bl	8003c52 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
 8003b3e:	bf00      	nop
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
 8003b4e:	6039      	str	r1, [r7, #0]
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <_ZNKSt6vectorIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7ff fdf1 	bl	800374e <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 f87c 	bl	8003c6c <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 8003b74:	4603      	mov	r3, r0
 8003b76:	4618      	mov	r0, r3
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
 8003b86:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d201      	bcs.n	8003b98 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	e000      	b.n	8003b9a <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8003b98:	687b      	ldr	r3, [r7, #4]
    }
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b082      	sub	sp, #8
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	6839      	ldr	r1, [r7, #0]
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f865 	bl	8003c84 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8003bcc:	f107 030c 	add.w	r3, r7, #12
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 f874 	bl	8003cc0 <_ZNSt13move_iteratorIPfEC1ES0_>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b084      	sub	sp, #16
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	607a      	str	r2, [r7, #4]
 8003bee:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	68b9      	ldr	r1, [r7, #8]
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 f872 	bl	8003cde <_ZSt18uninitialized_copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4618      	mov	r0, r3
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	68b9      	ldr	r1, [r7, #8]
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 f868 	bl	8003d02 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8003c32:	4603      	mov	r3, r0
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4618      	mov	r0, r3
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
      deallocate(pointer __p, size_type)
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b084      	sub	sp, #16
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	60f8      	str	r0, [r7, #12]
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8003c5e:	68b8      	ldr	r0, [r7, #8]
 8003c60:	f002 fb4d 	bl	80062fe <_ZdlPv>
      }
 8003c64:	bf00      	nop
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f85c 	bl	8003d32 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3708      	adds	r7, #8
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 f84e 	bl	8003d32 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 8003c96:	4602      	mov	r2, r0
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	bf8c      	ite	hi
 8003c9e:	2301      	movhi	r3, #1
 8003ca0:	2300      	movls	r3, #0
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003ca8:	f002 fb40 	bl	800632c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f002 fb28 	bl	8006306 <_Znwj>
 8003cb6:	4603      	mov	r3, r0
      }
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <_ZNSt13move_iteratorIPfEC1ES0_>:
      move_iterator(iterator_type __i)
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <_ZSt18uninitialized_copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b086      	sub	sp, #24
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003cea:	2301      	movs	r3, #1
 8003cec:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	68b9      	ldr	r1, [r7, #8]
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 f829 	bl	8003d4a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPfES3_EET0_T_S6_S5_>
 8003cf8:	4603      	mov	r3, r0
    }
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8003d02:	b590      	push	{r4, r7, lr}
 8003d04:	b085      	sub	sp, #20
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 f82b 	bl	8003d6a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8003d14:	4604      	mov	r4, r0
 8003d16:	68b8      	ldr	r0, [r7, #8]
 8003d18:	f000 f827 	bl	8003d6a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8003d1c:	4603      	mov	r3, r0
	       __result));
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	4619      	mov	r1, r3
 8003d22:	4620      	mov	r0, r4
 8003d24:	f000 f82c 	bl	8003d80 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 8003d28:	4603      	mov	r3, r0
    }
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd90      	pop	{r4, r7, pc}

08003d32 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8003d3a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003d3e:	4618      	mov	r0, r3
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPfES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b084      	sub	sp, #16
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	60b9      	str	r1, [r7, #8]
 8003d54:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	68b9      	ldr	r1, [r7, #8]
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 f82c 	bl	8003db8 <_ZSt4copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>
 8003d60:	4603      	mov	r3, r0
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4618      	mov	r0, r3
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003d80:	b5b0      	push	{r4, r5, r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 f82b 	bl	8003de8 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003d92:	4604      	mov	r4, r0
 8003d94:	68b8      	ldr	r0, [r7, #8]
 8003d96:	f000 f827 	bl	8003de8 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003d9a:	4605      	mov	r5, r0
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f831 	bl	8003e04 <_ZSt12__niter_baseIPfET_S1_>
 8003da2:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8003da4:	461a      	mov	r2, r3
 8003da6:	4629      	mov	r1, r5
 8003da8:	4620      	mov	r0, r4
 8003daa:	f000 f836 	bl	8003e1a <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 8003dae:	4603      	mov	r3, r0
    }
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bdb0      	pop	{r4, r5, r7, pc}

08003db8 <_ZSt4copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8003db8:	b590      	push	{r4, r7, lr}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 f83a 	bl	8003e3e <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8003dca:	4604      	mov	r4, r0
 8003dcc:	68b8      	ldr	r0, [r7, #8]
 8003dce:	f000 f836 	bl	8003e3e <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8003dd2:	4603      	mov	r3, r0
	       __result));
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	4620      	mov	r0, r4
 8003dda:	f000 f841 	bl	8003e60 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>
 8003dde:	4603      	mov	r3, r0
    }
 8003de0:	4618      	mov	r0, r3
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd90      	pop	{r4, r7, pc}

08003de8 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8003df0:	1d3b      	adds	r3, r7, #4
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 f850 	bl	8003e98 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b086      	sub	sp, #24
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	60f8      	str	r0, [r7, #12]
 8003e22:	60b9      	str	r1, [r7, #8]
 8003e24:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8003e26:	2301      	movs	r3, #1
 8003e28:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	68b9      	ldr	r1, [r7, #8]
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 f83d 	bl	8003eae <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8003e34:	4603      	mov	r3, r0
    }
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b082      	sub	sp, #8
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8003e46:	1d3b      	adds	r3, r7, #4
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 f84d 	bl	8003ee8 <_ZNKSt13move_iteratorIPfE4baseEv>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 f855 	bl	8003f00 <_ZSt12__miter_baseIPfET_S1_>
 8003e56:	4603      	mov	r3, r0
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003e60:	b5b0      	push	{r4, r5, r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f7ff ffc9 	bl	8003e04 <_ZSt12__niter_baseIPfET_S1_>
 8003e72:	4604      	mov	r4, r0
 8003e74:	68b8      	ldr	r0, [r7, #8]
 8003e76:	f7ff ffc5 	bl	8003e04 <_ZSt12__niter_baseIPfET_S1_>
 8003e7a:	4605      	mov	r5, r0
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7ff ffc1 	bl	8003e04 <_ZSt12__niter_baseIPfET_S1_>
 8003e82:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8003e84:	461a      	mov	r2, r3
 8003e86:	4629      	mov	r1, r5
 8003e88:	4620      	mov	r0, r4
 8003e8a:	f000 f844 	bl	8003f16 <_ZSt13__copy_move_aILb1EPfS0_ET1_T0_S2_S1_>
 8003e8e:	4603      	mov	r3, r0
    }
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bdb0      	pop	{r4, r5, r7, pc}

08003e98 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b086      	sub	sp, #24
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	60f8      	str	r0, [r7, #12]
 8003eb6:	60b9      	str	r1, [r7, #8]
 8003eb8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	109b      	asrs	r3, r3, #2
 8003ec2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d006      	beq.n	8003ed8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	461a      	mov	r2, r3
 8003ed0:	68f9      	ldr	r1, [r7, #12]
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f003 fd03 	bl	80078de <memmove>
	  return __result + _Num;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	4413      	add	r3, r2
	}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3718      	adds	r7, #24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <_ZNKSt13move_iteratorIPfE4baseEv>:
      base() const
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <_ZSt12__miter_baseIPfET_S1_>:
    __miter_base(_Iterator __it)
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <_ZSt13__copy_move_aILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b086      	sub	sp, #24
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	60f8      	str	r0, [r7, #12]
 8003f1e:	60b9      	str	r1, [r7, #8]
 8003f20:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8003f22:	2301      	movs	r3, #1
 8003f24:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	68b9      	ldr	r1, [r7, #8]
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 f805 	bl	8003f3a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8003f30:	4603      	mov	r3, r0
    }
 8003f32:	4618      	mov	r0, r3
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b086      	sub	sp, #24
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	60f8      	str	r0, [r7, #12]
 8003f42:	60b9      	str	r1, [r7, #8]
 8003f44:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	109b      	asrs	r3, r3, #2
 8003f4e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d006      	beq.n	8003f64 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	68f9      	ldr	r1, [r7, #12]
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f003 fcbd 	bl	80078de <memmove>
	  return __result + _Num;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	4413      	add	r3, r2
	}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3718      	adds	r7, #24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <_ZN9MotorInfoC1Ev>:


#include "MotorInfo.hpp"
#include "Mathlib.hpp"

MotorInfo::MotorInfo() {
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	4a06      	ldr	r2, [pc, #24]	; (8003f98 <_ZN9MotorInfoC1Ev+0x24>)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	333c      	adds	r3, #60	; 0x3c
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff f892 	bl	80030b0 <_ZN7MathLibC1Ev>
	// TODO Auto-generated constructor stub

}
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	08009518 	.word	0x08009518

08003f9c <_ZN9MotorInfoD1Ev>:

MotorInfo::~MotorInfo() {
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	4a06      	ldr	r2, [pc, #24]	; (8003fc0 <_ZN9MotorInfoD1Ev+0x24>)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	333c      	adds	r3, #60	; 0x3c
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7ff f89a 	bl	80030e8 <_ZN7MathLibD1Ev>
	// TODO Auto-generated destructor stub
}
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	08009518 	.word	0x08009518

08003fc4 <_ZN9MotorInfoD0Ev>:
MotorInfo::~MotorInfo() {
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
}
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7ff ffe5 	bl	8003f9c <_ZN9MotorInfoD1Ev>
 8003fd2:	2164      	movs	r1, #100	; 0x64
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f002 f994 	bl	8006302 <_ZdlPvj>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <_ZN7MathLibaSERKS_>:
#ifndef MATHLIB_HPP_
#define MATHLIB_HPP_

#include <vector>

class MathLib {
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	1d1a      	adds	r2, r3, #4
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	f000 f9a0 	bl	800433e <_ZNSt6vectorIfSaIfEEaSERKS1_>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f103 0210 	add.w	r2, r3, #16
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	3310      	adds	r3, #16
 8004008:	4619      	mov	r1, r3
 800400a:	4610      	mov	r0, r2
 800400c:	f000 f997 	bl	800433e <_ZNSt6vectorIfSaIfEEaSERKS1_>
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	69da      	ldr	r2, [r3, #28]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	61da      	str	r2, [r3, #28]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	6a1a      	ldr	r2, [r3, #32]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	621a      	str	r2, [r3, #32]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <_ZN9MotorInfo10setMathLibE7MathLib>:

void MotorInfo::setMathLib(MathLib pLib){
 800402a:	b580      	push	{r7, lr}
 800402c:	b082      	sub	sp, #8
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
 8004032:	6039      	str	r1, [r7, #0]
	mLib = pLib;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	333c      	adds	r3, #60	; 0x3c
 8004038:	6839      	ldr	r1, [r7, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff ffd2 	bl	8003fe4 <_ZN7MathLibaSERKS_>
}
 8004040:	bf00      	nop
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <_ZN7MathLibC1ERKS_>:
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
 8004052:	4a10      	ldr	r2, [pc, #64]	; (8004094 <_ZN7MathLibC1ERKS_+0x4c>)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	1d1a      	adds	r2, r3, #4
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	3304      	adds	r3, #4
 8004060:	4619      	mov	r1, r3
 8004062:	4610      	mov	r0, r2
 8004064:	f7ff f9f8 	bl	8003458 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f103 0210 	add.w	r2, r3, #16
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	3310      	adds	r3, #16
 8004072:	4619      	mov	r1, r3
 8004074:	4610      	mov	r0, r2
 8004076:	f7ff f9ef 	bl	8003458 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	69da      	ldr	r2, [r3, #28]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	61da      	str	r2, [r3, #28]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	6a1a      	ldr	r2, [r3, #32]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	621a      	str	r2, [r3, #32]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4618      	mov	r0, r3
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	08009508 	.word	0x08009508

08004098 <_ZN9MotorInfo10getMathLibEv>:

MathLib MotorInfo::getMathLib(void){return mLib;}
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	333c      	adds	r3, #60	; 0x3c
 80040a6:	4619      	mov	r1, r3
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7ff ffcd 	bl	8004048 <_ZN7MathLibC1ERKS_>
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <_ZN9MotorInfo6setArgEi>:

void MotorInfo::setVu(float pVu){mVu=pVu;};
void MotorInfo::setVv(float pVv){mVv=pVv;};
void MotorInfo::setVw(float pVw){mVw=pVw;};

void MotorInfo::setArg(int parg){
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	6039      	str	r1, [r7, #0]
	marg = parg;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	661a      	str	r2, [r3, #96]	; 0x60
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <_ZN9MotorInfo5setVdEf>:
	mIq = -mLib.getSinList().at(marg) * mIalpha + mLib.getCosList().at(marg) * mIbeta;
};

void MotorInfo::PID(void){}

void MotorInfo::setVd(float pVd){mVd = pVd;}
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
 80040da:	ed87 0a00 	vstr	s0, [r7]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	635a      	str	r2, [r3, #52]	; 0x34
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <_ZN9MotorInfo5setVqEf>:
void MotorInfo::setVq(float pVq){mVq = pVq;}
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	ed87 0a00 	vstr	s0, [r7]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	639a      	str	r2, [r3, #56]	; 0x38
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <_ZN9MotorInfo17invClarkTransformEv>:

void MotorInfo::invClarkTransform(void){
 800410e:	b580      	push	{r7, lr}
 8004110:	ed2d 8b02 	vpush	{d8}
 8004114:	b08e      	sub	sp, #56	; 0x38
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
	mValpha = mLib.getCosList().at(marg) * mVd - mLib.getSinList().at(marg) * mVq;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004120:	f107 0308 	add.w	r3, r7, #8
 8004124:	4611      	mov	r1, r2
 8004126:	4618      	mov	r0, r3
 8004128:	f7ff f915 	bl	8003356 <_ZN7MathLib10getCosListEv>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004130:	461a      	mov	r2, r3
 8004132:	f107 0308 	add.w	r3, r7, #8
 8004136:	4611      	mov	r1, r2
 8004138:	4618      	mov	r0, r3
 800413a:	f000 f9f7 	bl	800452c <_ZNSt6vectorIfSaIfEE2atEj>
 800413e:	4603      	mov	r3, r0
 8004140:	ed93 7a00 	vldr	s14, [r3]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800414a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004154:	f107 0314 	add.w	r3, r7, #20
 8004158:	4611      	mov	r1, r2
 800415a:	4618      	mov	r0, r3
 800415c:	f7ff f8ec 	bl	8003338 <_ZN7MathLib10getSinListEv>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004164:	461a      	mov	r2, r3
 8004166:	f107 0314 	add.w	r3, r7, #20
 800416a:	4611      	mov	r1, r2
 800416c:	4618      	mov	r0, r3
 800416e:	f000 f9dd 	bl	800452c <_ZNSt6vectorIfSaIfEE2atEj>
 8004172:	4603      	mov	r3, r0
 8004174:	ed93 7a00 	vldr	s14, [r3]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800417e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004182:	ee78 7a67 	vsub.f32	s15, s16, s15
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 800418c:	f107 0314 	add.w	r3, r7, #20
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff f913 	bl	80033bc <_ZNSt6vectorIfSaIfEED1Ev>
 8004196:	f107 0308 	add.w	r3, r7, #8
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff f90e 	bl	80033bc <_ZNSt6vectorIfSaIfEED1Ev>
	mVbeta  = mLib.getSinList().at(marg) * mVd + mLib.getCosList().at(marg) * mVq;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80041a6:	f107 0320 	add.w	r3, r7, #32
 80041aa:	4611      	mov	r1, r2
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7ff f8c3 	bl	8003338 <_ZN7MathLib10getSinListEv>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041b6:	461a      	mov	r2, r3
 80041b8:	f107 0320 	add.w	r3, r7, #32
 80041bc:	4611      	mov	r1, r2
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 f9b4 	bl	800452c <_ZNSt6vectorIfSaIfEE2atEj>
 80041c4:	4603      	mov	r3, r0
 80041c6:	ed93 7a00 	vldr	s14, [r3]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80041d0:	ee27 8a27 	vmul.f32	s16, s14, s15
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80041da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041de:	4611      	mov	r1, r2
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff f8b8 	bl	8003356 <_ZN7MathLib10getCosListEv>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ea:	461a      	mov	r2, r3
 80041ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041f0:	4611      	mov	r1, r2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 f99a 	bl	800452c <_ZNSt6vectorIfSaIfEE2atEj>
 80041f8:	4603      	mov	r3, r0
 80041fa:	ed93 7a00 	vldr	s14, [r3]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004208:	ee78 7a27 	vadd.f32	s15, s16, s15
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
 8004212:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff f8d0 	bl	80033bc <_ZNSt6vectorIfSaIfEED1Ev>
 800421c:	f107 0320 	add.w	r3, r7, #32
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff f8cb 	bl	80033bc <_ZNSt6vectorIfSaIfEED1Ev>
};
 8004226:	bf00      	nop
 8004228:	3738      	adds	r7, #56	; 0x38
 800422a:	46bd      	mov	sp, r7
 800422c:	ecbd 8b02 	vpop	{d8}
 8004230:	bd80      	pop	{r7, pc}
	...

08004234 <_ZN9MotorInfo16invParkTransformEv>:

void MotorInfo::invParkTransform(void){
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
	mVu = 0.75f * mValpha;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004242:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8004246:	ee67 7a87 	vmul.f32	s15, s15, s14
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	edc3 7a08 	vstr	s15, [r3, #32]
	mVv = -0.75f * mValpha + mValpha / 3 + mVbeta / 1.7320508f;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004256:	eebe 7a08 	vmov.f32	s14, #232	; 0xbf400000 -0.750
 800425a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8004264:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8004268:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800426c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8004276:	ed9f 6a12 	vldr	s12, [pc, #72]	; 80042c0 <_ZN9MotorInfo16invParkTransformEv+0x8c>
 800427a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800427e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	mVw = - mValpha / 3 - mVbeta / 1.7320508f;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800428e:	eef1 7a67 	vneg.f32	s15, s15
 8004292:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8004296:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80042a0:	ed9f 6a07 	vldr	s12, [pc, #28]	; 80042c0 <_ZN9MotorInfo16invParkTransformEv+0x8c>
 80042a4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80042a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
//	Iu + Iv - Iw = -2*Iw;
//	Ialpha * 2/3 + Ibeta * 2/sqrt(3) = -2 Iw;
//
//
//	Iv = -Iu - Iw;
};
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	3fddb3d7 	.word	0x3fddb3d7

080042c4 <_ZN9MotorInfo5getVuEv>:
float MotorInfo::getVq(void){return mVq;};

float MotorInfo::getValpha(void){return mValpha;};
float MotorInfo::getVbeta(void){return mVbeta;};

float MotorInfo::getVu(void){return mVu;};
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	ee07 3a90 	vmov	s15, r3
 80042d4:	eeb0 0a67 	vmov.f32	s0, s15
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <_ZN9MotorInfo5getVvEv>:
float MotorInfo::getVv(void){return mVv;};
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	ee07 3a90 	vmov	s15, r3
 80042f2:	eeb0 0a67 	vmov.f32	s0, s15
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <_ZN9MotorInfo5getVwEv>:
float MotorInfo::getVw(void){return mVw;};
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430c:	ee07 3a90 	vmov	s15, r3
 8004310:	eeb0 0a67 	vmov.f32	s0, s15
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <_ZN9__gnu_cxx14__alloc_traitsISaIfEE27_S_propagate_on_copy_assignEv>:

    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
 800431e:	b480      	push	{r7}
 8004320:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 8004322:	2300      	movs	r3, #0
 8004324:	4618      	mov	r0, r3
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <_ZN9__gnu_cxx14__alloc_traitsISaIfEE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 800432e:	b480      	push	{r7}
 8004330:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 8004332:	2301      	movs	r3, #1
 8004334:	4618      	mov	r0, r3
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <_ZNSt6vectorIfSaIfEEaSERKS1_>:
    vector<_Tp, _Alloc>::
 800433e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004340:	b085      	sub	sp, #20
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	6039      	str	r1, [r7, #0]
      if (&__x != this)
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	429a      	cmp	r2, r3
 800434e:	f000 80e8 	beq.w	8004522 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1e4>
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 8004352:	f7ff ffe4 	bl	800431e <_ZN9__gnu_cxx14__alloc_traitsISaIfEE27_S_propagate_on_copy_assignEv>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d044      	beq.n	80043e6 <_ZNSt6vectorIfSaIfEEaSERKS1_+0xa8>
	      if (!_Alloc_traits::_S_always_equal()
 800435c:	f7ff ffe7 	bl	800432e <_ZN9__gnu_cxx14__alloc_traitsISaIfEE15_S_always_equalEv>
 8004360:	4603      	mov	r3, r0
 8004362:	f083 0301 	eor.w	r3, r3, #1
 8004366:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 8004368:	2b00      	cmp	r3, #0
 800436a:	d012      	beq.n	8004392 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x54>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff f8e2 	bl	8003538 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8004374:	4604      	mov	r4, r0
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	4618      	mov	r0, r3
 800437a:	f7ff f9e8 	bl	800374e <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800437e:	4603      	mov	r3, r0
 8004380:	4619      	mov	r1, r3
 8004382:	4620      	mov	r0, r4
 8004384:	f000 f8e4 	bl	8004550 <_ZStneIfEbRKSaIT_ES3_>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x54>
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x56>
 8004392:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 8004394:	2b00      	cmp	r3, #0
 8004396:	d018      	beq.n	80043ca <_ZNSt6vectorIfSaIfEEaSERKS1_+0x8c>
		  this->clear();
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7ff f82a 	bl	80033f2 <_ZNSt6vectorIfSaIfEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
				- this->_M_impl._M_start);
 80043a8:	461a      	mov	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	109b      	asrs	r3, r3, #2
		  _M_deallocate(this->_M_impl._M_start,
 80043b2:	461a      	mov	r2, r3
 80043b4:	f7ff fa44 	bl	8003840 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
		  this->_M_impl._M_start = nullptr;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	609a      	str	r2, [r3, #8]
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff f8b3 	bl	8003538 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80043d2:	4604      	mov	r4, r0
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff f9b9 	bl	800374e <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80043dc:	4603      	mov	r3, r0
 80043de:	4619      	mov	r1, r3
 80043e0:	4620      	mov	r0, r4
 80043e2:	f000 f8c1 	bl	8004568 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>
	  const size_type __xlen = __x.size();
 80043e6:	6838      	ldr	r0, [r7, #0]
 80043e8:	f7ff f992 	bl	8003710 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80043ec:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f8c8 	bl	8004584 <_ZNKSt6vectorIfSaIfEE8capacityEv>
 80043f4:	4602      	mov	r2, r0
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4293      	cmp	r3, r2
 80043fa:	bf8c      	ite	hi
 80043fc:	2301      	movhi	r3, #1
 80043fe:	2300      	movls	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d033      	beq.n	800446e <_ZNSt6vectorIfSaIfEEaSERKS1_+0x130>
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 8004406:	6838      	ldr	r0, [r7, #0]
 8004408:	f7ff f9cc 	bl	80037a4 <_ZNKSt6vectorIfSaIfEE5beginEv>
 800440c:	4604      	mov	r4, r0
 800440e:	6838      	ldr	r0, [r7, #0]
 8004410:	f7ff f9dc 	bl	80037cc <_ZNKSt6vectorIfSaIfEE3endEv>
 8004414:	4603      	mov	r3, r0
 8004416:	4622      	mov	r2, r4
 8004418:	68f9      	ldr	r1, [r7, #12]
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f8c3 	bl	80045a6 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>
 8004420:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681c      	ldr	r4, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff f883 	bl	8003538 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8004432:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004434:	461a      	mov	r2, r3
 8004436:	4629      	mov	r1, r5
 8004438:	4620      	mov	r0, r4
 800443a:	f7ff f888 	bl	800354e <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
			    - this->_M_impl._M_start);
 8004448:	461a      	mov	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 8004452:	461a      	mov	r2, r3
 8004454:	f7ff f9f4 	bl	8003840 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
	      this->_M_impl._M_start = __tmp;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	441a      	add	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	609a      	str	r2, [r3, #8]
 800446c:	e052      	b.n	8004514 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d6>
	  else if (size() >= __xlen)
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7ff f94e 	bl	8003710 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004474:	4602      	mov	r2, r0
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	4293      	cmp	r3, r2
 800447a:	bf94      	ite	ls
 800447c:	2301      	movls	r3, #1
 800447e:	2300      	movhi	r3, #0
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d020      	beq.n	80044c8 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x18a>
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8004486:	6838      	ldr	r0, [r7, #0]
 8004488:	f7ff f98c 	bl	80037a4 <_ZNKSt6vectorIfSaIfEE5beginEv>
 800448c:	4604      	mov	r4, r0
 800448e:	6838      	ldr	r0, [r7, #0]
 8004490:	f7ff f99c 	bl	80037cc <_ZNKSt6vectorIfSaIfEE3endEv>
 8004494:	4605      	mov	r5, r0
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7ff fa62 	bl	8003960 <_ZNSt6vectorIfSaIfEE5beginEv>
 800449c:	4603      	mov	r3, r0
 800449e:	461a      	mov	r2, r3
 80044a0:	4629      	mov	r1, r5
 80044a2:	4620      	mov	r0, r4
 80044a4:	f000 f89b 	bl	80045de <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>
 80044a8:	4604      	mov	r4, r0
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7ff f893 	bl	80035d6 <_ZNSt6vectorIfSaIfEE3endEv>
 80044b0:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff f83f 	bl	8003538 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80044ba:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 80044bc:	461a      	mov	r2, r3
 80044be:	4629      	mov	r1, r5
 80044c0:	4620      	mov	r0, r4
 80044c2:	f000 f8a4 	bl	800460e <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>
 80044c6:	e025      	b.n	8004514 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d6>
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681d      	ldr	r5, [r3, #0]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681c      	ldr	r4, [r3, #0]
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7ff f91d 	bl	8003710 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80044d6:	4603      	mov	r3, r0
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	18e1      	adds	r1, r4, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	461a      	mov	r2, r3
 80044e2:	4628      	mov	r0, r5
 80044e4:	f000 f8a1 	bl	800462a <_ZSt4copyIPfS0_ET0_T_S2_S1_>
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681c      	ldr	r4, [r3, #0]
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7ff f90f 	bl	8003710 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80044f2:	4603      	mov	r3, r0
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685e      	ldr	r6, [r3, #4]
					  _M_get_Tp_allocator());
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff f818 	bl	8003538 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8004508:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800450a:	4632      	mov	r2, r6
 800450c:	4629      	mov	r1, r5
 800450e:	4620      	mov	r0, r4
 8004510:	f000 f8a3 	bl	800465a <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	441a      	add	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	605a      	str	r2, [r3, #4]
      return *this;
 8004522:	687b      	ldr	r3, [r7, #4]
    }
 8004524:	4618      	mov	r0, r3
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800452c <_ZNSt6vectorIfSaIfEE2atEj>:
      at(size_type __n)
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
	_M_range_check(__n);
 8004536:	6839      	ldr	r1, [r7, #0]
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f89f 	bl	800467c <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj>
	return (*this)[__n];
 800453e:	6839      	ldr	r1, [r7, #0]
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f8bb 	bl	80046bc <_ZNSt6vectorIfSaIfEEixEj>
 8004546:	4603      	mov	r3, r0
      }
 8004548:	4618      	mov	r0, r3
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <_ZStneIfEbRKSaIT_ES3_>:
    _GLIBCXX_USE_NOEXCEPT
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
    _GLIBCXX_USE_NOEXCEPT
    { return false; }
 800455a:	2300      	movs	r3, #0
 800455c:	4618      	mov	r0, r3
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>:
    inline void
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_copy_assignment __pocca;
      __do_alloc_on_copy(__one, __two, __pocca());
 8004572:	461a      	mov	r2, r3
 8004574:	6839      	ldr	r1, [r7, #0]
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f8b0 	bl	80046dc <_ZSt18__do_alloc_on_copyISaIfEEvRT_RKS1_St17integral_constantIbLb0EE>
    }
 800457c:	bf00      	nop
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <_ZNKSt6vectorIfSaIfEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
			 - this->_M_impl._M_start); }
 8004590:	461a      	mov	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	109b      	asrs	r3, r3, #2
 800459a:	4618      	mov	r0, r3
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>:
	_M_allocate_and_copy(size_type __n,
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b086      	sub	sp, #24
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	60f8      	str	r0, [r7, #12]
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	607a      	str	r2, [r7, #4]
 80045b2:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	68b9      	ldr	r1, [r7, #8]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff f9f7 	bl	80039ac <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 80045be:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fe ffb8 	bl	8003538 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80045c8:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	6839      	ldr	r1, [r7, #0]
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7ff f910 	bl	80037f4 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
	      return __result;
 80045d4:	697b      	ldr	r3, [r7, #20]
	}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 80045de:	b590      	push	{r4, r7, lr}
 80045e0:	b085      	sub	sp, #20
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	60f8      	str	r0, [r7, #12]
 80045e6:	60b9      	str	r1, [r7, #8]
 80045e8:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f7ff fbbd 	bl	8003d6a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 80045f0:	4604      	mov	r4, r0
 80045f2:	68b8      	ldr	r0, [r7, #8]
 80045f4:	f7ff fbb9 	bl	8003d6a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 80045f8:	4603      	mov	r3, r0
	       __result));
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	4619      	mov	r1, r3
 80045fe:	4620      	mov	r0, r4
 8004600:	f000 f878 	bl	80046f4 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>
 8004604:	4603      	mov	r3, r0
    }
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	bd90      	pop	{r4, r7, pc}

0800460e <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800460e:	b580      	push	{r7, lr}
 8004610:	b084      	sub	sp, #16
 8004612:	af00      	add	r7, sp, #0
 8004614:	60f8      	str	r0, [r7, #12]
 8004616:	60b9      	str	r1, [r7, #8]
 8004618:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800461a:	68b9      	ldr	r1, [r7, #8]
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 f88f 	bl	8004740 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>
    }
 8004622:	bf00      	nop
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <_ZSt4copyIPfS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 800462a:	b590      	push	{r4, r7, lr}
 800462c:	b085      	sub	sp, #20
 800462e:	af00      	add	r7, sp, #0
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f7ff fc62 	bl	8003f00 <_ZSt12__miter_baseIPfET_S1_>
 800463c:	4604      	mov	r4, r0
 800463e:	68b8      	ldr	r0, [r7, #8]
 8004640:	f7ff fc5e 	bl	8003f00 <_ZSt12__miter_baseIPfET_S1_>
 8004644:	4603      	mov	r3, r0
	       __result));
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	4619      	mov	r1, r3
 800464a:	4620      	mov	r0, r4
 800464c:	f000 f885 	bl	800475a <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>
 8004650:	4603      	mov	r3, r0
    }
 8004652:	4618      	mov	r0, r3
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	bd90      	pop	{r4, r7, pc}

0800465a <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800465a:	b580      	push	{r7, lr}
 800465c:	b084      	sub	sp, #16
 800465e:	af00      	add	r7, sp, #0
 8004660:	60f8      	str	r0, [r7, #12]
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	607a      	str	r2, [r7, #4]
 8004666:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	68b9      	ldr	r1, [r7, #8]
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f000 f890 	bl	8004792 <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>
 8004672:	4603      	mov	r3, r0
 8004674:	4618      	mov	r0, r3
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj>:
      _M_range_check(size_type __n) const
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
	if (__n >= this->size())
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7ff f842 	bl	8003710 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800468c:	4602      	mov	r2, r0
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	4293      	cmp	r3, r2
 8004692:	bf2c      	ite	cs
 8004694:	2301      	movcs	r3, #1
 8004696:	2300      	movcc	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d008      	beq.n	80046b0 <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj+0x34>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7ff f836 	bl	8003710 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80046a4:	4603      	mov	r3, r0
 80046a6:	461a      	mov	r2, r3
 80046a8:	6839      	ldr	r1, [r7, #0]
 80046aa:	4803      	ldr	r0, [pc, #12]	; (80046b8 <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj+0x3c>)
 80046ac:	f001 fe47 	bl	800633e <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 80046b0:	bf00      	nop
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	080094a4 	.word	0x080094a4

080046bc <_ZNSt6vectorIfSaIfEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
      }
 80046d0:	4618      	mov	r0, r3
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <_ZSt18__do_alloc_on_copyISaIfEEvRT_RKS1_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	713a      	strb	r2, [r7, #4]
    { }
 80046e8:	bf00      	nop
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80046f4:	b5b0      	push	{r4, r5, r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f7ff fb71 	bl	8003de8 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8004706:	4604      	mov	r4, r0
 8004708:	68b8      	ldr	r0, [r7, #8]
 800470a:	f7ff fb6d 	bl	8003de8 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800470e:	4605      	mov	r5, r0
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f850 	bl	80047b6 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8004716:	4603      	mov	r3, r0
 8004718:	461a      	mov	r2, r3
 800471a:	4629      	mov	r1, r5
 800471c:	4620      	mov	r0, r4
 800471e:	f7ff fb7c 	bl	8003e1a <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 8004722:	4603      	mov	r3, r0
 8004724:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 8004726:	f107 0214 	add.w	r2, r7, #20
 800472a:	f107 0310 	add.w	r3, r7, #16
 800472e:	4611      	mov	r1, r2
 8004730:	4618      	mov	r0, r3
 8004732:	f7ff f8bd 	bl	80038b0 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8004736:	693b      	ldr	r3, [r7, #16]
    }
 8004738:	4618      	mov	r0, r3
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bdb0      	pop	{r4, r5, r7, pc}

08004740 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800474a:	6839      	ldr	r1, [r7, #0]
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f840 	bl	80047d2 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>
    }
 8004752:	bf00      	nop
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800475a:	b5b0      	push	{r4, r5, r7, lr}
 800475c:	b084      	sub	sp, #16
 800475e:	af00      	add	r7, sp, #0
 8004760:	60f8      	str	r0, [r7, #12]
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f7ff fb4c 	bl	8003e04 <_ZSt12__niter_baseIPfET_S1_>
 800476c:	4604      	mov	r4, r0
 800476e:	68b8      	ldr	r0, [r7, #8]
 8004770:	f7ff fb48 	bl	8003e04 <_ZSt12__niter_baseIPfET_S1_>
 8004774:	4605      	mov	r5, r0
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7ff fb44 	bl	8003e04 <_ZSt12__niter_baseIPfET_S1_>
 800477c:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 800477e:	461a      	mov	r2, r3
 8004780:	4629      	mov	r1, r5
 8004782:	4620      	mov	r0, r4
 8004784:	f000 f830 	bl	80047e8 <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>
 8004788:	4603      	mov	r3, r0
    }
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bdb0      	pop	{r4, r5, r7, pc}

08004792 <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8004792:	b580      	push	{r7, lr}
 8004794:	b086      	sub	sp, #24
 8004796:	af00      	add	r7, sp, #0
 8004798:	60f8      	str	r0, [r7, #12]
 800479a:	60b9      	str	r1, [r7, #8]
 800479c:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800479e:	2301      	movs	r3, #1
 80047a0:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	68b9      	ldr	r1, [r7, #8]
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 f830 	bl	800480c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>
 80047ac:	4603      	mov	r3, r0
    }
 80047ae:	4618      	mov	r0, r3
 80047b0:	3718      	adds	r7, #24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b082      	sub	sp, #8
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 80047be:	1d3b      	adds	r3, r7, #4
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7ff f907 	bl	80039d4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 80047c6:	4603      	mov	r3, r0
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
 80047da:	6039      	str	r1, [r7, #0]
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 80047f4:	2301      	movs	r3, #1
 80047f6:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	68b9      	ldr	r1, [r7, #8]
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f7ff fb56 	bl	8003eae <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8004802:	4603      	mov	r3, r0
    }
 8004804:	4618      	mov	r0, r3
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	68b9      	ldr	r1, [r7, #8]
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f7ff ff04 	bl	800462a <_ZSt4copyIPfS0_ET0_T_S2_S1_>
 8004822:	4603      	mov	r3, r0
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <LL_TIM_EnableCounter>:
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f043 0201 	orr.w	r2, r3, #1
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	601a      	str	r2, [r3, #0]
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <LL_TIM_CC_EnableChannel>:
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1a      	ldr	r2, [r3, #32]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	431a      	orrs	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	621a      	str	r2, [r3, #32]
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <LL_TIM_EnableAllOutputs>:
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <_ZN3PWM6setTIMEP11TIM_TypeDef>:

#include "PWM.hpp"
#include "stm32f4xx_hal.h"
#include "tim.h"

void PWM::setTIM(TIM_TypeDef* pTIMx){
 800488e:	b480      	push	{r7}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
 8004896:	6039      	str	r1, [r7, #0]
	mTIMx = pTIMx;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	601a      	str	r2, [r3, #0]
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <_ZN3PWM5setCHEi>:

//void PWM::setCH(__IO uint32_t pCCR);

void PWM::setCH(int pCH){
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	6039      	str	r1, [r7, #0]
	mCH = pCH;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	605a      	str	r2, [r3, #4]
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <_ZN3PWM5fInitEi>:
	LL_TIM_EnableAllOutputs(mTIMx);// need
	//PWM TIM Init end

}

void PWM::fInit(int pTimReload){
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	6039      	str	r1, [r7, #0]

	mTimReload = pTimReload;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	609a      	str	r2, [r3, #8]

	if(mCH==0){//error check
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d100      	bne.n	80048e0 <_ZN3PWM5fInitEi+0x1a>
		while(1){}
 80048de:	e7fe      	b.n	80048de <_ZN3PWM5fInitEi+0x18>
	}

	//mREG Init
	if (mCH == 1){
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d105      	bne.n	80048f4 <_ZN3PWM5fInitEi+0x2e>
		mREG=&(mTIMx->CCR1);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 2){
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d105      	bne.n	8004908 <_ZN3PWM5fInitEi+0x42>
		mREG=&(mTIMx->CCR2);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 3){
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	2b03      	cmp	r3, #3
 800490e:	d105      	bne.n	800491c <_ZN3PWM5fInitEi+0x56>
		mREG=&(mTIMx->CCR3);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 4){
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2b04      	cmp	r3, #4
 8004922:	d105      	bne.n	8004930 <_ZN3PWM5fInitEi+0x6a>
		mREG=&(mTIMx->CCR4);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	60da      	str	r2, [r3, #12]
	}

	if(mREG==NULL){//error check
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d100      	bne.n	800493a <_ZN3PWM5fInitEi+0x74>
		while(1){}
 8004938:	e7fe      	b.n	8004938 <_ZN3PWM5fInitEi+0x72>
	}
	//mREG Init end

	//PWM Channel Init
	if(mTIMx==NULL){//error check
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d100      	bne.n	8004944 <_ZN3PWM5fInitEi+0x7e>
		while(1){}
 8004942:	e7fe      	b.n	8004942 <_ZN3PWM5fInitEi+0x7c>
	}
	if (mCH == 1){
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d105      	bne.n	8004958 <_ZN3PWM5fInitEi+0x92>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH1);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2101      	movs	r1, #1
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff ff7a 	bl	800484c <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 2){
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	2b02      	cmp	r3, #2
 800495e:	d105      	bne.n	800496c <_ZN3PWM5fInitEi+0xa6>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH2);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2110      	movs	r1, #16
 8004966:	4618      	mov	r0, r3
 8004968:	f7ff ff70 	bl	800484c <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 3){
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	2b03      	cmp	r3, #3
 8004972:	d106      	bne.n	8004982 <_ZN3PWM5fInitEi+0xbc>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH3);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f44f 7180 	mov.w	r1, #256	; 0x100
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff ff65 	bl	800484c <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 4){
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2b04      	cmp	r3, #4
 8004988:	d106      	bne.n	8004998 <_ZN3PWM5fInitEi+0xd2>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH4);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004992:	4618      	mov	r0, r3
 8004994:	f7ff ff5a 	bl	800484c <LL_TIM_CC_EnableChannel>
	}
	//PWM Channel Init end

	//PWM TIM Init
	LL_TIM_EnableCounter(mTIMx);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4618      	mov	r0, r3
 800499e:	f7ff ff45 	bl	800482c <LL_TIM_EnableCounter>
	//LL_TIM_GenerateEvent_UPDATE(TIM1);//
	LL_TIM_EnableAllOutputs(mTIMx);// need
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff ff61 	bl	800486e <LL_TIM_EnableAllOutputs>
	//PWM TIM Init end

}
 80049ac:	bf00      	nop
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <_ZN3PWM6f2DutyEf>:
void PWM::fDuty(float pfDuty){
	int pDuty = pfDuty * (float)mTimReload;
	WRITE_REG(*mREG, pDuty);
}

void PWM::f2Duty(float pfDuty){
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	ed87 0a00 	vstr	s0, [r7]
	int pDuty = (pfDuty + 1)/2 * (float)mTimReload;
 80049c0:	edd7 7a00 	vldr	s15, [r7]
 80049c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049cc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80049d0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	ee07 3a90 	vmov	s15, r3
 80049dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049e8:	ee17 3a90 	vmov	r3, s15
 80049ec:	60fb      	str	r3, [r7, #12]
	WRITE_REG(*mREG, pDuty);
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	601a      	str	r2, [r3, #0]
}
 80049f6:	bf00      	nop
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
	...

08004a04 <__NVIC_GetPriorityGrouping>:
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a08:	4b04      	ldr	r3, [pc, #16]	; (8004a1c <__NVIC_GetPriorityGrouping+0x18>)
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	0a1b      	lsrs	r3, r3, #8
 8004a0e:	f003 0307 	and.w	r3, r3, #7
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	e000ed00 	.word	0xe000ed00

08004a20 <__NVIC_EnableIRQ>:
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4603      	mov	r3, r0
 8004a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	db0b      	blt.n	8004a4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	f003 021f 	and.w	r2, r3, #31
 8004a38:	4907      	ldr	r1, [pc, #28]	; (8004a58 <__NVIC_EnableIRQ+0x38>)
 8004a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a3e:	095b      	lsrs	r3, r3, #5
 8004a40:	2001      	movs	r0, #1
 8004a42:	fa00 f202 	lsl.w	r2, r0, r2
 8004a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	e000e100 	.word	0xe000e100

08004a5c <__NVIC_SetPriority>:
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	4603      	mov	r3, r0
 8004a64:	6039      	str	r1, [r7, #0]
 8004a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	db0a      	blt.n	8004a86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	490c      	ldr	r1, [pc, #48]	; (8004aa8 <__NVIC_SetPriority+0x4c>)
 8004a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a7a:	0112      	lsls	r2, r2, #4
 8004a7c:	b2d2      	uxtb	r2, r2
 8004a7e:	440b      	add	r3, r1
 8004a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004a84:	e00a      	b.n	8004a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	4908      	ldr	r1, [pc, #32]	; (8004aac <__NVIC_SetPriority+0x50>)
 8004a8c:	79fb      	ldrb	r3, [r7, #7]
 8004a8e:	f003 030f 	and.w	r3, r3, #15
 8004a92:	3b04      	subs	r3, #4
 8004a94:	0112      	lsls	r2, r2, #4
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	440b      	add	r3, r1
 8004a9a:	761a      	strb	r2, [r3, #24]
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	e000e100 	.word	0xe000e100
 8004aac:	e000ed00 	.word	0xe000ed00

08004ab0 <NVIC_EncodePriority>:
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b089      	sub	sp, #36	; 0x24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f003 0307 	and.w	r3, r3, #7
 8004ac2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	f1c3 0307 	rsb	r3, r3, #7
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	bf28      	it	cs
 8004ace:	2304      	movcs	r3, #4
 8004ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	2b06      	cmp	r3, #6
 8004ad8:	d902      	bls.n	8004ae0 <NVIC_EncodePriority+0x30>
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	3b03      	subs	r3, #3
 8004ade:	e000      	b.n	8004ae2 <NVIC_EncodePriority+0x32>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ae4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	fa02 f303 	lsl.w	r3, r2, r3
 8004aee:	43da      	mvns	r2, r3
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	401a      	ands	r2, r3
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004af8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	fa01 f303 	lsl.w	r3, r1, r3
 8004b02:	43d9      	mvns	r1, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b08:	4313      	orrs	r3, r2
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3724      	adds	r7, #36	; 0x24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <LL_ADC_REG_SetSequencerRanks>:
{
 8004b16:	b490      	push	{r4, r7}
 8004b18:	b086      	sub	sp, #24
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	60f8      	str	r0, [r7, #12]
 8004b1e:	60b9      	str	r1, [r7, #8]
 8004b20:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	332c      	adds	r3, #44	; 0x2c
 8004b26:	4619      	mov	r1, r3
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b2e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004b32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	fa92 f2a2 	rbit	r2, r2
 8004b3a:	613a      	str	r2, [r7, #16]
  return result;
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	fab2 f282 	clz	r2, r2
 8004b42:	b2d2      	uxtb	r2, r2
 8004b44:	40d3      	lsrs	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	440b      	add	r3, r1
 8004b4a:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8004b4c:	6822      	ldr	r2, [r4, #0]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f003 031f 	and.w	r3, r3, #31
 8004b54:	211f      	movs	r1, #31
 8004b56:	fa01 f303 	lsl.w	r3, r1, r3
 8004b5a:	43db      	mvns	r3, r3
 8004b5c:	401a      	ands	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f003 011f 	and.w	r1, r3, #31
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f003 031f 	and.w	r3, r3, #31
 8004b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	6023      	str	r3, [r4, #0]
}
 8004b72:	bf00      	nop
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bc90      	pop	{r4, r7}
 8004b7a:	4770      	bx	lr

08004b7c <LL_ADC_REG_SetFlagEndOfConversion>:
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	431a      	orrs	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	609a      	str	r2, [r3, #8]
}
 8004b96:	bf00      	nop
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <LL_ADC_INJ_SetSequencerRanks>:
{
 8004ba2:	b490      	push	{r4, r7}
 8004ba4:	b084      	sub	sp, #16
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	607a      	str	r2, [r7, #4]
  register uint32_t tmpreg1 = (READ_BIT(ADCx->JSQR, ADC_JSQR_JL) >> ADC_JSQR_JL_Pos) + 1U;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb2:	0d1b      	lsrs	r3, r3, #20
 8004bb4:	f003 0303 	and.w	r3, r3, #3
 8004bb8:	1c5c      	adds	r4, r3, #1
  MODIFY_REG(ADCx->JSQR,
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	b2d9      	uxtb	r1, r3
 8004bc2:	b2e3      	uxtb	r3, r4
 8004bc4:	1acb      	subs	r3, r1, r3
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	3303      	adds	r3, #3
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	4619      	mov	r1, r3
 8004bce:	460b      	mov	r3, r1
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	440b      	add	r3, r1
 8004bd4:	211f      	movs	r1, #31
 8004bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bda:	43db      	mvns	r3, r3
 8004bdc:	401a      	ands	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f003 011f 	and.w	r1, r3, #31
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	b2d8      	uxtb	r0, r3
 8004be8:	b2e3      	uxtb	r3, r4
 8004bea:	1ac3      	subs	r3, r0, r3
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	3303      	adds	r3, #3
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4403      	add	r3, r0
 8004bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004c04:	bf00      	nop
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bc90      	pop	{r4, r7}
 8004c0c:	4770      	bx	lr

08004c0e <LL_ADC_INJ_SetOffset>:
{
 8004c0e:	b490      	push	{r4, r7}
 8004c10:	b086      	sub	sp, #24
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	60f8      	str	r0, [r7, #12]
 8004c16:	60b9      	str	r1, [r7, #8]
 8004c18:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JOFR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JOFRX_REGOFFSET_MASK));
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	3314      	adds	r3, #20
 8004c1e:	4619      	mov	r1, r3
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004c26:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004c2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	fa92 f2a2 	rbit	r2, r2
 8004c32:	613a      	str	r2, [r7, #16]
  return result;
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	fab2 f282 	clz	r2, r2
 8004c3a:	b2d2      	uxtb	r2, r2
 8004c3c:	40d3      	lsrs	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8004c44:	6823      	ldr	r3, [r4, #0]
 8004c46:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004c4a:	f023 030f 	bic.w	r3, r3, #15
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	6023      	str	r3, [r4, #0]
}
 8004c54:	bf00      	nop
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bc90      	pop	{r4, r7}
 8004c5c:	4770      	bx	lr

08004c5e <LL_ADC_SetChannelSamplingTime>:
{
 8004c5e:	b490      	push	{r4, r7}
 8004c60:	b08a      	sub	sp, #40	; 0x28
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	60f8      	str	r0, [r7, #12]
 8004c66:	60b9      	str	r1, [r7, #8]
 8004c68:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	330c      	adds	r3, #12
 8004c6e:	4619      	mov	r1, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	fa92 f2a2 	rbit	r2, r2
 8004c82:	613a      	str	r2, [r7, #16]
  return result;
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	fab2 f282 	clz	r2, r2
 8004c8a:	b2d2      	uxtb	r2, r2
 8004c8c:	40d3      	lsrs	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8004c94:	6822      	ldr	r2, [r4, #0]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8004c9c:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8004ca0:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca2:	69f9      	ldr	r1, [r7, #28]
 8004ca4:	fa91 f1a1 	rbit	r1, r1
 8004ca8:	61b9      	str	r1, [r7, #24]
  return result;
 8004caa:	69b9      	ldr	r1, [r7, #24]
 8004cac:	fab1 f181 	clz	r1, r1
 8004cb0:	b2c9      	uxtb	r1, r1
 8004cb2:	40cb      	lsrs	r3, r1
 8004cb4:	2107      	movs	r1, #7
 8004cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cba:	43db      	mvns	r3, r3
 8004cbc:	401a      	ands	r2, r3
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8004cc4:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8004cc8:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ccc:	fa91 f1a1 	rbit	r1, r1
 8004cd0:	6239      	str	r1, [r7, #32]
  return result;
 8004cd2:	6a39      	ldr	r1, [r7, #32]
 8004cd4:	fab1 f181 	clz	r1, r1
 8004cd8:	b2c9      	uxtb	r1, r1
 8004cda:	40cb      	lsrs	r3, r1
 8004cdc:	6879      	ldr	r1, [r7, #4]
 8004cde:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	6023      	str	r3, [r4, #0]
}
 8004ce6:	bf00      	nop
 8004ce8:	3728      	adds	r7, #40	; 0x28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bc90      	pop	{r4, r7}
 8004cee:	4770      	bx	lr

08004cf0 <LL_ADC_INJ_StartConversionExtTrig>:
  *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISINGFALLING
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StartConversionExtTrig(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	431a      	orrs	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	609a      	str	r2, [r3, #8]
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <LL_ADC_DisableIT_EOCS>:
  * @rmtoll CR1      EOCIE          LL_ADC_DisableIT_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f023 0220 	bic.w	r2, r3, #32
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	605a      	str	r2, [r3, #4]
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <LL_ADC_DisableIT_JEOS>:
  * @rmtoll CR1      JEOCIE         LL_ADC_EnableIT_JEOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOS(ADC_TypeDef *ADCx)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	605a      	str	r2, [r3, #4]
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
	...

08004d54 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004d5c:	4b08      	ldr	r3, [pc, #32]	; (8004d80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004d5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d60:	4907      	ldr	r1, [pc, #28]	; (8004d80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004d68:	4b05      	ldr	r3, [pc, #20]	; (8004d80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004d72:	68fb      	ldr	r3, [r7, #12]
}
 8004d74:	bf00      	nop
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	40023800 	.word	0x40023800

08004d84 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004d8c:	4b08      	ldr	r3, [pc, #32]	; (8004db0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004d8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d90:	4907      	ldr	r1, [pc, #28]	; (8004db0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004d98:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004d9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004da2:	68fb      	ldr	r3, [r7, #12]
}
 8004da4:	bf00      	nop
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	40023800 	.word	0x40023800

08004db4 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b096      	sub	sp, #88	; 0x58
 8004db8:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8004dba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	605a      	str	r2, [r3, #4]
 8004dc4:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8004dc6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004dca:	2200      	movs	r2, #0
 8004dcc:	601a      	str	r2, [r3, #0]
 8004dce:	605a      	str	r2, [r3, #4]
 8004dd0:	609a      	str	r2, [r3, #8]
 8004dd2:	60da      	str	r2, [r3, #12]
 8004dd4:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8004dd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004dda:	2200      	movs	r2, #0
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	605a      	str	r2, [r3, #4]
 8004de0:	609a      	str	r2, [r3, #8]
 8004de2:	60da      	str	r2, [r3, #12]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 8004de4:	f107 0318 	add.w	r3, r7, #24
 8004de8:	2200      	movs	r2, #0
 8004dea:	601a      	str	r2, [r3, #0]
 8004dec:	605a      	str	r2, [r3, #4]
 8004dee:	609a      	str	r2, [r3, #8]
 8004df0:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004df2:	463b      	mov	r3, r7
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	605a      	str	r2, [r3, #4]
 8004dfa:	609a      	str	r2, [r3, #8]
 8004dfc:	60da      	str	r2, [r3, #12]
 8004dfe:	611a      	str	r2, [r3, #16]
 8004e00:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8004e02:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004e06:	f7ff ffbd 	bl	8004d84 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8004e0a:	2004      	movs	r0, #4
 8004e0c:	f7ff ffa2 	bl	8004d54 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004e10:	2001      	movs	r0, #1
 8004e12:	f7ff ff9f 	bl	8004d54 <LL_AHB1_GRP1_EnableClock>
  PC1   ------> ADC1_IN11
  PC2   ------> ADC1_IN12
  PA0-WKUP   ------> ADC1_IN0
  PA1   ------> ADC1_IN1 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 8004e16:	2307      	movs	r3, #7
 8004e18:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e22:	463b      	mov	r3, r7
 8004e24:	4619      	mov	r1, r3
 8004e26:	4869      	ldr	r0, [pc, #420]	; (8004fcc <MX_ADC1_Init+0x218>)
 8004e28:	f7fd fa2d 	bl	8002286 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004e30:	2303      	movs	r3, #3
 8004e32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004e34:	2300      	movs	r3, #0
 8004e36:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e38:	463b      	mov	r3, r7
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	4864      	ldr	r0, [pc, #400]	; (8004fd0 <MX_ADC1_Init+0x21c>)
 8004e3e:	f7fd fa22 	bl	8002286 <LL_GPIO_Init>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8004e42:	f7ff fddf 	bl	8004a04 <__NVIC_GetPriorityGrouping>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2200      	movs	r2, #0
 8004e4a:	2102      	movs	r1, #2
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff fe2f 	bl	8004ab0 <NVIC_EncodePriority>
 8004e52:	4603      	mov	r3, r0
 8004e54:	4619      	mov	r1, r3
 8004e56:	2012      	movs	r0, #18
 8004e58:	f7ff fe00 	bl	8004a5c <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 8004e5c:	2012      	movs	r0, #18
 8004e5e:	f7ff fddf 	bl	8004a20 <__NVIC_EnableIRQ>

  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8004e62:	2300      	movs	r3, #0
 8004e64:	64fb      	str	r3, [r7, #76]	; 0x4c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8004e66:	2300      	movs	r3, #0
 8004e68:	653b      	str	r3, [r7, #80]	; 0x50
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8004e6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e6e:	657b      	str	r3, [r7, #84]	; 0x54
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8004e70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004e74:	4619      	mov	r1, r3
 8004e76:	4857      	ldr	r0, [pc, #348]	; (8004fd4 <MX_ADC1_Init+0x220>)
 8004e78:	f7fc ff38 	bl	8001cec <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8004e80:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004e84:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8004e86:	2300      	movs	r3, #0
 8004e88:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8004e8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e92:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8004e94:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004e98:	4619      	mov	r1, r3
 8004e9a:	484e      	ldr	r0, [pc, #312]	; (8004fd4 <MX_ADC1_Init+0x220>)
 8004e9c:	f7fc ff52 	bl	8001d44 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8004ea0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ea4:	484b      	ldr	r0, [pc, #300]	; (8004fd4 <MX_ADC1_Init+0x220>)
 8004ea6:	f7ff fe69 	bl	8004b7c <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC1);
 8004eaa:	484a      	ldr	r0, [pc, #296]	; (8004fd4 <MX_ADC1_Init+0x220>)
 8004eac:	f7ff ff31 	bl	8004d12 <LL_ADC_DisableIT_EOCS>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8004eb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8004eba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4845      	ldr	r0, [pc, #276]	; (8004fd8 <MX_ADC1_Init+0x224>)
 8004ec2:	f7fc fecb 	bl	8001c5c <LL_ADC_CommonInit>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8004ec6:	4a45      	ldr	r2, [pc, #276]	; (8004fdc <MX_ADC1_Init+0x228>)
 8004ec8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ecc:	4841      	ldr	r0, [pc, #260]	; (8004fd4 <MX_ADC1_Init+0x220>)
 8004ece:	f7ff fe22 	bl	8004b16 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_28CYCLES);
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	4941      	ldr	r1, [pc, #260]	; (8004fdc <MX_ADC1_Init+0x228>)
 8004ed6:	483f      	ldr	r0, [pc, #252]	; (8004fd4 <MX_ADC1_Init+0x220>)
 8004ed8:	f7ff fec1 	bl	8004c5e <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_12);
 8004edc:	4a40      	ldr	r2, [pc, #256]	; (8004fe0 <MX_ADC1_Init+0x22c>)
 8004ede:	f240 2105 	movw	r1, #517	; 0x205
 8004ee2:	483c      	ldr	r0, [pc, #240]	; (8004fd4 <MX_ADC1_Init+0x220>)
 8004ee4:	f7ff fe17 	bl	8004b16 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_28CYCLES);
 8004ee8:	2202      	movs	r2, #2
 8004eea:	493d      	ldr	r1, [pc, #244]	; (8004fe0 <MX_ADC1_Init+0x22c>)
 8004eec:	4839      	ldr	r0, [pc, #228]	; (8004fd4 <MX_ADC1_Init+0x220>)
 8004eee:	f7ff feb6 	bl	8004c5e <LL_ADC_SetChannelSamplingTime>
  /** Configure Injected Channel 
  */
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8004ef2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004ef6:	61bb      	str	r3, [r7, #24]
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 8004ef8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004efc:	61fb      	str	r3, [r7, #28]
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_1RANK;
 8004efe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f02:	623b      	str	r3, [r7, #32]
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 8004f04:	2300      	movs	r3, #0
 8004f06:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8004f08:	f107 0318 	add.w	r3, r7, #24
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4831      	ldr	r0, [pc, #196]	; (8004fd4 <MX_ADC1_Init+0x220>)
 8004f10:	f7fc ff60 	bl	8001dd4 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 8004f14:	482f      	ldr	r0, [pc, #188]	; (8004fd4 <MX_ADC1_Init+0x220>)
 8004f16:	f7ff ff0c 	bl	8004d32 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_0);
 8004f1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f1e:	2101      	movs	r1, #1
 8004f20:	482c      	ldr	r0, [pc, #176]	; (8004fd4 <MX_ADC1_Init+0x220>)
 8004f22:	f7ff fe3e 	bl	8004ba2 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 8004f26:	2200      	movs	r2, #0
 8004f28:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004f2c:	4829      	ldr	r0, [pc, #164]	; (8004fd4 <MX_ADC1_Init+0x220>)
 8004f2e:	f7ff fe96 	bl	8004c5e <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_1, 0);
 8004f32:	2200      	movs	r2, #0
 8004f34:	2101      	movs	r1, #1
 8004f36:	4827      	ldr	r0, [pc, #156]	; (8004fd4 <MX_ADC1_Init+0x220>)
 8004f38:	f7ff fe69 	bl	8004c0e <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8004f3c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8004f40:	4824      	ldr	r0, [pc, #144]	; (8004fd4 <MX_ADC1_Init+0x220>)
 8004f42:	f7ff fed5 	bl	8004cf0 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8004f46:	f107 0318 	add.w	r3, r7, #24
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	4821      	ldr	r0, [pc, #132]	; (8004fd4 <MX_ADC1_Init+0x220>)
 8004f4e:	f7fc ff41 	bl	8001dd4 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 8004f52:	4820      	ldr	r0, [pc, #128]	; (8004fd4 <MX_ADC1_Init+0x220>)
 8004f54:	f7ff feed 	bl	8004d32 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_11);
 8004f58:	4a22      	ldr	r2, [pc, #136]	; (8004fe4 <MX_ADC1_Init+0x230>)
 8004f5a:	f241 1102 	movw	r1, #4354	; 0x1102
 8004f5e:	481d      	ldr	r0, [pc, #116]	; (8004fd4 <MX_ADC1_Init+0x220>)
 8004f60:	f7ff fe1f 	bl	8004ba2 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 8004f64:	2200      	movs	r2, #0
 8004f66:	491f      	ldr	r1, [pc, #124]	; (8004fe4 <MX_ADC1_Init+0x230>)
 8004f68:	481a      	ldr	r0, [pc, #104]	; (8004fd4 <MX_ADC1_Init+0x220>)
 8004f6a:	f7ff fe78 	bl	8004c5e <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_2, 0);
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f241 1102 	movw	r1, #4354	; 0x1102
 8004f74:	4817      	ldr	r0, [pc, #92]	; (8004fd4 <MX_ADC1_Init+0x220>)
 8004f76:	f7ff fe4a 	bl	8004c0e <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8004f7a:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8004f7e:	4815      	ldr	r0, [pc, #84]	; (8004fd4 <MX_ADC1_Init+0x220>)
 8004f80:	f7ff feb6 	bl	8004cf0 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8004f84:	f107 0318 	add.w	r3, r7, #24
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4812      	ldr	r0, [pc, #72]	; (8004fd4 <MX_ADC1_Init+0x220>)
 8004f8c:	f7fc ff22 	bl	8001dd4 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 8004f90:	4810      	ldr	r0, [pc, #64]	; (8004fd4 <MX_ADC1_Init+0x220>)
 8004f92:	f7ff fece 	bl	8004d32 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_10);
 8004f96:	220a      	movs	r2, #10
 8004f98:	f242 2103 	movw	r1, #8707	; 0x2203
 8004f9c:	480d      	ldr	r0, [pc, #52]	; (8004fd4 <MX_ADC1_Init+0x220>)
 8004f9e:	f7ff fe00 	bl	8004ba2 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_3CYCLES);
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	210a      	movs	r1, #10
 8004fa6:	480b      	ldr	r0, [pc, #44]	; (8004fd4 <MX_ADC1_Init+0x220>)
 8004fa8:	f7ff fe59 	bl	8004c5e <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_3, 0);
 8004fac:	2200      	movs	r2, #0
 8004fae:	f242 2103 	movw	r1, #8707	; 0x2203
 8004fb2:	4808      	ldr	r0, [pc, #32]	; (8004fd4 <MX_ADC1_Init+0x220>)
 8004fb4:	f7ff fe2b 	bl	8004c0e <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8004fb8:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8004fbc:	4805      	ldr	r0, [pc, #20]	; (8004fd4 <MX_ADC1_Init+0x220>)
 8004fbe:	f7ff fe97 	bl	8004cf0 <LL_ADC_INJ_StartConversionExtTrig>

}
 8004fc2:	bf00      	nop
 8004fc4:	3758      	adds	r7, #88	; 0x58
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	40020800 	.word	0x40020800
 8004fd0:	40020000 	.word	0x40020000
 8004fd4:	40012000 	.word	0x40012000
 8004fd8:	40012300 	.word	0x40012300
 8004fdc:	02300001 	.word	0x02300001
 8004fe0:	0060000c 	.word	0x0060000c
 8004fe4:	0030000b 	.word	0x0030000b

08004fe8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b092      	sub	sp, #72	; 0x48
 8004fec:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8004fee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	605a      	str	r2, [r3, #4]
 8004ff8:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8004ffa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ffe:	2200      	movs	r2, #0
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	605a      	str	r2, [r3, #4]
 8005004:	609a      	str	r2, [r3, #8]
 8005006:	60da      	str	r2, [r3, #12]
 8005008:	611a      	str	r2, [r3, #16]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 800500a:	f107 0318 	add.w	r3, r7, #24
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	605a      	str	r2, [r3, #4]
 8005014:	609a      	str	r2, [r3, #8]
 8005016:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005018:	463b      	mov	r3, r7
 800501a:	2200      	movs	r2, #0
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	605a      	str	r2, [r3, #4]
 8005020:	609a      	str	r2, [r3, #8]
 8005022:	60da      	str	r2, [r3, #12]
 8005024:	611a      	str	r2, [r3, #16]
 8005026:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC2);
 8005028:	f44f 7000 	mov.w	r0, #512	; 0x200
 800502c:	f7ff feaa 	bl	8004d84 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8005030:	2004      	movs	r0, #4
 8005032:	f7ff fe8f 	bl	8004d54 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005036:	2001      	movs	r0, #1
 8005038:	f7ff fe8c 	bl	8004d54 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800503c:	2002      	movs	r0, #2
 800503e:	f7ff fe89 	bl	8004d54 <LL_AHB1_GRP1_EnableClock>
  PC0   ------> ADC2_IN10
  PC1   ------> ADC2_IN11
  PA0-WKUP   ------> ADC2_IN0
  PB1   ------> ADC2_IN9 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8005042:	2303      	movs	r3, #3
 8005044:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8005046:	2303      	movs	r3, #3
 8005048:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800504a:	2300      	movs	r3, #0
 800504c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800504e:	463b      	mov	r3, r7
 8005050:	4619      	mov	r1, r3
 8005052:	4863      	ldr	r0, [pc, #396]	; (80051e0 <MX_ADC2_Init+0x1f8>)
 8005054:	f7fd f917 	bl	8002286 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8005058:	2301      	movs	r3, #1
 800505a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800505c:	2303      	movs	r3, #3
 800505e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005060:	2300      	movs	r3, #0
 8005062:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005064:	463b      	mov	r3, r7
 8005066:	4619      	mov	r1, r3
 8005068:	485e      	ldr	r0, [pc, #376]	; (80051e4 <MX_ADC2_Init+0x1fc>)
 800506a:	f7fd f90c 	bl	8002286 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800506e:	2302      	movs	r3, #2
 8005070:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8005072:	2303      	movs	r3, #3
 8005074:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005076:	2300      	movs	r3, #0
 8005078:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800507a:	463b      	mov	r3, r7
 800507c:	4619      	mov	r1, r3
 800507e:	485a      	ldr	r0, [pc, #360]	; (80051e8 <MX_ADC2_Init+0x200>)
 8005080:	f7fd f901 	bl	8002286 <LL_GPIO_Init>

  /* ADC2 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8005084:	f7ff fcbe 	bl	8004a04 <__NVIC_GetPriorityGrouping>
 8005088:	4603      	mov	r3, r0
 800508a:	2200      	movs	r2, #0
 800508c:	2102      	movs	r1, #2
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff fd0e 	bl	8004ab0 <NVIC_EncodePriority>
 8005094:	4603      	mov	r3, r0
 8005096:	4619      	mov	r1, r3
 8005098:	2012      	movs	r0, #18
 800509a:	f7ff fcdf 	bl	8004a5c <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 800509e:	2012      	movs	r0, #18
 80050a0:	f7ff fcbe 	bl	8004a20 <__NVIC_EnableIRQ>

  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80050a4:	2300      	movs	r3, #0
 80050a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80050a8:	2300      	movs	r3, #0
 80050aa:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 80050ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050b0:	647b      	str	r3, [r7, #68]	; 0x44
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 80050b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80050b6:	4619      	mov	r1, r3
 80050b8:	484c      	ldr	r0, [pc, #304]	; (80051ec <MX_ADC2_Init+0x204>)
 80050ba:	f7fc fe17 	bl	8001cec <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80050be:	2300      	movs	r3, #0
 80050c0:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80050c2:	2300      	movs	r3, #0
 80050c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80050c6:	2300      	movs	r3, #0
 80050c8:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80050ca:	2300      	movs	r3, #0
 80050cc:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 80050ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050d2:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 80050d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050d8:	4619      	mov	r1, r3
 80050da:	4844      	ldr	r0, [pc, #272]	; (80051ec <MX_ADC2_Init+0x204>)
 80050dc:	f7fc fe32 	bl	8001d44 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC2, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 80050e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80050e4:	4841      	ldr	r0, [pc, #260]	; (80051ec <MX_ADC2_Init+0x204>)
 80050e6:	f7ff fd49 	bl	8004b7c <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC2);
 80050ea:	4840      	ldr	r0, [pc, #256]	; (80051ec <MX_ADC2_Init+0x204>)
 80050ec:	f7ff fe11 	bl	8004d12 <LL_ADC_DisableIT_EOCS>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_9);
 80050f0:	4a3f      	ldr	r2, [pc, #252]	; (80051f0 <MX_ADC2_Init+0x208>)
 80050f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050f6:	483d      	ldr	r0, [pc, #244]	; (80051ec <MX_ADC2_Init+0x204>)
 80050f8:	f7ff fd0d 	bl	8004b16 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_3CYCLES);
 80050fc:	2200      	movs	r2, #0
 80050fe:	493c      	ldr	r1, [pc, #240]	; (80051f0 <MX_ADC2_Init+0x208>)
 8005100:	483a      	ldr	r0, [pc, #232]	; (80051ec <MX_ADC2_Init+0x204>)
 8005102:	f7ff fdac 	bl	8004c5e <LL_ADC_SetChannelSamplingTime>
  /** Configure Injected Channel 
  */
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8005106:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800510a:	61bb      	str	r3, [r7, #24]
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 800510c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005110:	61fb      	str	r3, [r7, #28]
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_1RANK;
 8005112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005116:	623b      	str	r3, [r7, #32]
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 8005118:	2300      	movs	r3, #0
 800511a:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 800511c:	f107 0318 	add.w	r3, r7, #24
 8005120:	4619      	mov	r1, r3
 8005122:	4832      	ldr	r0, [pc, #200]	; (80051ec <MX_ADC2_Init+0x204>)
 8005124:	f7fc fe56 	bl	8001dd4 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 8005128:	4830      	ldr	r0, [pc, #192]	; (80051ec <MX_ADC2_Init+0x204>)
 800512a:	f7ff fe02 	bl	8004d32 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_0);
 800512e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005132:	2101      	movs	r1, #1
 8005134:	482d      	ldr	r0, [pc, #180]	; (80051ec <MX_ADC2_Init+0x204>)
 8005136:	f7ff fd34 	bl	8004ba2 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 800513a:	2200      	movs	r2, #0
 800513c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005140:	482a      	ldr	r0, [pc, #168]	; (80051ec <MX_ADC2_Init+0x204>)
 8005142:	f7ff fd8c 	bl	8004c5e <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_1, 0);
 8005146:	2200      	movs	r2, #0
 8005148:	2101      	movs	r1, #1
 800514a:	4828      	ldr	r0, [pc, #160]	; (80051ec <MX_ADC2_Init+0x204>)
 800514c:	f7ff fd5f 	bl	8004c0e <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 8005150:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8005154:	4825      	ldr	r0, [pc, #148]	; (80051ec <MX_ADC2_Init+0x204>)
 8005156:	f7ff fdcb 	bl	8004cf0 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 800515a:	f107 0318 	add.w	r3, r7, #24
 800515e:	4619      	mov	r1, r3
 8005160:	4822      	ldr	r0, [pc, #136]	; (80051ec <MX_ADC2_Init+0x204>)
 8005162:	f7fc fe37 	bl	8001dd4 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 8005166:	4821      	ldr	r0, [pc, #132]	; (80051ec <MX_ADC2_Init+0x204>)
 8005168:	f7ff fde3 	bl	8004d32 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_11);
 800516c:	4a21      	ldr	r2, [pc, #132]	; (80051f4 <MX_ADC2_Init+0x20c>)
 800516e:	f241 1102 	movw	r1, #4354	; 0x1102
 8005172:	481e      	ldr	r0, [pc, #120]	; (80051ec <MX_ADC2_Init+0x204>)
 8005174:	f7ff fd15 	bl	8004ba2 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 8005178:	2200      	movs	r2, #0
 800517a:	491e      	ldr	r1, [pc, #120]	; (80051f4 <MX_ADC2_Init+0x20c>)
 800517c:	481b      	ldr	r0, [pc, #108]	; (80051ec <MX_ADC2_Init+0x204>)
 800517e:	f7ff fd6e 	bl	8004c5e <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_2, 0);
 8005182:	2200      	movs	r2, #0
 8005184:	f241 1102 	movw	r1, #4354	; 0x1102
 8005188:	4818      	ldr	r0, [pc, #96]	; (80051ec <MX_ADC2_Init+0x204>)
 800518a:	f7ff fd40 	bl	8004c0e <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 800518e:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8005192:	4816      	ldr	r0, [pc, #88]	; (80051ec <MX_ADC2_Init+0x204>)
 8005194:	f7ff fdac 	bl	8004cf0 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 8005198:	f107 0318 	add.w	r3, r7, #24
 800519c:	4619      	mov	r1, r3
 800519e:	4813      	ldr	r0, [pc, #76]	; (80051ec <MX_ADC2_Init+0x204>)
 80051a0:	f7fc fe18 	bl	8001dd4 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 80051a4:	4811      	ldr	r0, [pc, #68]	; (80051ec <MX_ADC2_Init+0x204>)
 80051a6:	f7ff fdc4 	bl	8004d32 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_10);
 80051aa:	220a      	movs	r2, #10
 80051ac:	f242 2103 	movw	r1, #8707	; 0x2203
 80051b0:	480e      	ldr	r0, [pc, #56]	; (80051ec <MX_ADC2_Init+0x204>)
 80051b2:	f7ff fcf6 	bl	8004ba2 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_3CYCLES);
 80051b6:	2200      	movs	r2, #0
 80051b8:	210a      	movs	r1, #10
 80051ba:	480c      	ldr	r0, [pc, #48]	; (80051ec <MX_ADC2_Init+0x204>)
 80051bc:	f7ff fd4f 	bl	8004c5e <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_3, 0);
 80051c0:	2200      	movs	r2, #0
 80051c2:	f242 2103 	movw	r1, #8707	; 0x2203
 80051c6:	4809      	ldr	r0, [pc, #36]	; (80051ec <MX_ADC2_Init+0x204>)
 80051c8:	f7ff fd21 	bl	8004c0e <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 80051cc:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80051d0:	4806      	ldr	r0, [pc, #24]	; (80051ec <MX_ADC2_Init+0x204>)
 80051d2:	f7ff fd8d 	bl	8004cf0 <LL_ADC_INJ_StartConversionExtTrig>

}
 80051d6:	bf00      	nop
 80051d8:	3748      	adds	r7, #72	; 0x48
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	40020800 	.word	0x40020800
 80051e4:	40020000 	.word	0x40020000
 80051e8:	40020400 	.word	0x40020400
 80051ec:	40012100 	.word	0x40012100
 80051f0:	03b00009 	.word	0x03b00009
 80051f4:	0030000b 	.word	0x0030000b

080051f8 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8005202:	4a13      	ldr	r2, [pc, #76]	; (8005250 <LL_SYSCFG_SetEXTISource+0x58>)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	b2db      	uxtb	r3, r3
 8005208:	3302      	adds	r3, #2
 800520a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	0c1b      	lsrs	r3, r3, #16
 8005212:	43db      	mvns	r3, r3
 8005214:	ea02 0103 	and.w	r1, r2, r3
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	0c1b      	lsrs	r3, r3, #16
 800521c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	fa93 f3a3 	rbit	r3, r3
 8005224:	60bb      	str	r3, [r7, #8]
  return result;
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	fab3 f383 	clz	r3, r3
 800522c:	b2db      	uxtb	r3, r3
 800522e:	461a      	mov	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	fa03 f202 	lsl.w	r2, r3, r2
 8005236:	4806      	ldr	r0, [pc, #24]	; (8005250 <LL_SYSCFG_SetEXTISource+0x58>)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	b2db      	uxtb	r3, r3
 800523c:	430a      	orrs	r2, r1
 800523e:	3302      	adds	r3, #2
 8005240:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8005244:	bf00      	nop
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	40013800 	.word	0x40013800

08005254 <LL_GPIO_SetPinMode>:
{
 8005254:	b480      	push	{r7}
 8005256:	b089      	sub	sp, #36	; 0x24
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	fa93 f3a3 	rbit	r3, r3
 800526e:	613b      	str	r3, [r7, #16]
  return result;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	fab3 f383 	clz	r3, r3
 8005276:	b2db      	uxtb	r3, r3
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	2103      	movs	r1, #3
 800527c:	fa01 f303 	lsl.w	r3, r1, r3
 8005280:	43db      	mvns	r3, r3
 8005282:	401a      	ands	r2, r3
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	fa93 f3a3 	rbit	r3, r3
 800528e:	61bb      	str	r3, [r7, #24]
  return result;
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	fab3 f383 	clz	r3, r3
 8005296:	b2db      	uxtb	r3, r3
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	6879      	ldr	r1, [r7, #4]
 800529c:	fa01 f303 	lsl.w	r3, r1, r3
 80052a0:	431a      	orrs	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	601a      	str	r2, [r3, #0]
}
 80052a6:	bf00      	nop
 80052a8:	3724      	adds	r7, #36	; 0x24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <LL_GPIO_SetPinPull>:
{
 80052b2:	b480      	push	{r7}
 80052b4:	b089      	sub	sp, #36	; 0x24
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	60f8      	str	r0, [r7, #12]
 80052ba:	60b9      	str	r1, [r7, #8]
 80052bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	fa93 f3a3 	rbit	r3, r3
 80052cc:	613b      	str	r3, [r7, #16]
  return result;
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	fab3 f383 	clz	r3, r3
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	005b      	lsls	r3, r3, #1
 80052d8:	2103      	movs	r1, #3
 80052da:	fa01 f303 	lsl.w	r3, r1, r3
 80052de:	43db      	mvns	r3, r3
 80052e0:	401a      	ands	r2, r3
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	fa93 f3a3 	rbit	r3, r3
 80052ec:	61bb      	str	r3, [r7, #24]
  return result;
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	fab3 f383 	clz	r3, r3
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	6879      	ldr	r1, [r7, #4]
 80052fa:	fa01 f303 	lsl.w	r3, r1, r3
 80052fe:	431a      	orrs	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	60da      	str	r2, [r3, #12]
}
 8005304:	bf00      	nop
 8005306:	3724      	adds	r7, #36	; 0x24
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	041a      	lsls	r2, r3, #16
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	619a      	str	r2, [r3, #24]
}
 8005322:	bf00      	nop
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
	...

08005330 <LL_AHB1_GRP1_EnableClock>:
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005338:	4b08      	ldr	r3, [pc, #32]	; (800535c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800533a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800533c:	4907      	ldr	r1, [pc, #28]	; (800535c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4313      	orrs	r3, r2
 8005342:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005344:	4b05      	ldr	r3, [pc, #20]	; (800535c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4013      	ands	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800534e:	68fb      	ldr	r3, [r7, #12]
}
 8005350:	bf00      	nop
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	40023800 	.word	0x40023800

08005360 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b088      	sub	sp, #32
 8005364:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8005366:	f107 0318 	add.w	r3, r7, #24
 800536a:	2200      	movs	r2, #0
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005370:	463b      	mov	r3, r7
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	605a      	str	r2, [r3, #4]
 8005378:	609a      	str	r2, [r3, #8]
 800537a:	60da      	str	r2, [r3, #12]
 800537c:	611a      	str	r2, [r3, #16]
 800537e:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8005380:	2004      	movs	r0, #4
 8005382:	f7ff ffd5 	bl	8005330 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8005386:	2080      	movs	r0, #128	; 0x80
 8005388:	f7ff ffd2 	bl	8005330 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800538c:	2001      	movs	r0, #1
 800538e:	f7ff ffcf 	bl	8005330 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8005392:	2002      	movs	r0, #2
 8005394:	f7ff ffcc 	bl	8005330 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8005398:	2120      	movs	r1, #32
 800539a:	481a      	ldr	r0, [pc, #104]	; (8005404 <MX_GPIO_Init+0xa4>)
 800539c:	f7ff ffb8 	bl	8005310 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80053a0:	4919      	ldr	r1, [pc, #100]	; (8005408 <MX_GPIO_Init+0xa8>)
 80053a2:	2002      	movs	r0, #2
 80053a4:	f7ff ff28 	bl	80051f8 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80053a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053ac:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80053ae:	2301      	movs	r3, #1
 80053b0:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80053b2:	2300      	movs	r3, #0
 80053b4:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80053b6:	2302      	movs	r3, #2
 80053b8:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80053ba:	f107 0318 	add.w	r3, r7, #24
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fc fde0 	bl	8001f84 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 80053c4:	2200      	movs	r2, #0
 80053c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80053ca:	4810      	ldr	r0, [pc, #64]	; (800540c <MX_GPIO_Init+0xac>)
 80053cc:	f7ff ff71 	bl	80052b2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 80053d0:	2200      	movs	r2, #0
 80053d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80053d6:	480d      	ldr	r0, [pc, #52]	; (800540c <MX_GPIO_Init+0xac>)
 80053d8:	f7ff ff3c 	bl	8005254 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 80053dc:	2320      	movs	r3, #32
 80053de:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80053e0:	2301      	movs	r3, #1
 80053e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80053e4:	2300      	movs	r3, #0
 80053e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80053e8:	2300      	movs	r3, #0
 80053ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80053ec:	2300      	movs	r3, #0
 80053ee:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80053f0:	463b      	mov	r3, r7
 80053f2:	4619      	mov	r1, r3
 80053f4:	4803      	ldr	r0, [pc, #12]	; (8005404 <MX_GPIO_Init+0xa4>)
 80053f6:	f7fc ff46 	bl	8002286 <LL_GPIO_Init>

}
 80053fa:	bf00      	nop
 80053fc:	3720      	adds	r7, #32
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	40020000 	.word	0x40020000
 8005408:	00f00003 	.word	0x00f00003
 800540c:	40020800 	.word	0x40020800

08005410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005414:	f7fb fd64 	bl	8000ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005418:	f000 f80e 	bl	8005438 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800541c:	f7ff ffa0 	bl	8005360 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8005420:	f000 fc9e 	bl	8005d60 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8005424:	f000 fb28 	bl	8005a78 <MX_TIM1_Init>
  MX_ADC1_Init();
 8005428:	f7ff fcc4 	bl	8004db4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800542c:	f7ff fddc 	bl	8004fe8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  cppwrapper();
 8005430:	f000 fd76 	bl	8005f20 <cppwrapper>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005434:	e7fe      	b.n	8005434 <main+0x24>
	...

08005438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b094      	sub	sp, #80	; 0x50
 800543c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800543e:	f107 031c 	add.w	r3, r7, #28
 8005442:	2234      	movs	r2, #52	; 0x34
 8005444:	2100      	movs	r1, #0
 8005446:	4618      	mov	r0, r3
 8005448:	f002 fa62 	bl	8007910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800544c:	f107 0308 	add.w	r3, r7, #8
 8005450:	2200      	movs	r2, #0
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	605a      	str	r2, [r3, #4]
 8005456:	609a      	str	r2, [r3, #8]
 8005458:	60da      	str	r2, [r3, #12]
 800545a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800545c:	2300      	movs	r3, #0
 800545e:	607b      	str	r3, [r7, #4]
 8005460:	4b2c      	ldr	r3, [pc, #176]	; (8005514 <SystemClock_Config+0xdc>)
 8005462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005464:	4a2b      	ldr	r2, [pc, #172]	; (8005514 <SystemClock_Config+0xdc>)
 8005466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800546a:	6413      	str	r3, [r2, #64]	; 0x40
 800546c:	4b29      	ldr	r3, [pc, #164]	; (8005514 <SystemClock_Config+0xdc>)
 800546e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005474:	607b      	str	r3, [r7, #4]
 8005476:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005478:	2300      	movs	r3, #0
 800547a:	603b      	str	r3, [r7, #0]
 800547c:	4b26      	ldr	r3, [pc, #152]	; (8005518 <SystemClock_Config+0xe0>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a25      	ldr	r2, [pc, #148]	; (8005518 <SystemClock_Config+0xe0>)
 8005482:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005486:	6013      	str	r3, [r2, #0]
 8005488:	4b23      	ldr	r3, [pc, #140]	; (8005518 <SystemClock_Config+0xe0>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005490:	603b      	str	r3, [r7, #0]
 8005492:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005494:	2301      	movs	r3, #1
 8005496:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005498:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800549c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800549e:	2302      	movs	r3, #2
 80054a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80054a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80054a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80054a8:	2304      	movs	r3, #4
 80054aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80054ac:	23b4      	movs	r3, #180	; 0xb4
 80054ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80054b0:	2302      	movs	r3, #2
 80054b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80054b4:	2302      	movs	r3, #2
 80054b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80054b8:	2302      	movs	r3, #2
 80054ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80054bc:	f107 031c 	add.w	r3, r7, #28
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fc f937 	bl	8001734 <HAL_RCC_OscConfig>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d001      	beq.n	80054d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80054cc:	f000 f826 	bl	800551c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80054d0:	f7fb fe5e 	bl	8001190 <HAL_PWREx_EnableOverDrive>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80054da:	f000 f81f 	bl	800551c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80054de:	230f      	movs	r3, #15
 80054e0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80054e2:	2302      	movs	r3, #2
 80054e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80054e6:	2300      	movs	r3, #0
 80054e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80054ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80054ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80054f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054f4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80054f6:	f107 0308 	add.w	r3, r7, #8
 80054fa:	2105      	movs	r1, #5
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7fb fe97 	bl	8001230 <HAL_RCC_ClockConfig>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8005508:	f000 f808 	bl	800551c <Error_Handler>
  }
}
 800550c:	bf00      	nop
 800550e:	3750      	adds	r7, #80	; 0x50
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40023800 	.word	0x40023800
 8005518:	40007000 	.word	0x40007000

0800551c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800551c:	b480      	push	{r7}
 800551e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005520:	bf00      	nop
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
	...

0800552c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005532:	2300      	movs	r3, #0
 8005534:	607b      	str	r3, [r7, #4]
 8005536:	4b10      	ldr	r3, [pc, #64]	; (8005578 <HAL_MspInit+0x4c>)
 8005538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553a:	4a0f      	ldr	r2, [pc, #60]	; (8005578 <HAL_MspInit+0x4c>)
 800553c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005540:	6453      	str	r3, [r2, #68]	; 0x44
 8005542:	4b0d      	ldr	r3, [pc, #52]	; (8005578 <HAL_MspInit+0x4c>)
 8005544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800554a:	607b      	str	r3, [r7, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800554e:	2300      	movs	r3, #0
 8005550:	603b      	str	r3, [r7, #0]
 8005552:	4b09      	ldr	r3, [pc, #36]	; (8005578 <HAL_MspInit+0x4c>)
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	4a08      	ldr	r2, [pc, #32]	; (8005578 <HAL_MspInit+0x4c>)
 8005558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800555c:	6413      	str	r3, [r2, #64]	; 0x40
 800555e:	4b06      	ldr	r3, [pc, #24]	; (8005578 <HAL_MspInit+0x4c>)
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005566:	603b      	str	r3, [r7, #0]
 8005568:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800556a:	2004      	movs	r0, #4
 800556c:	f7fb fddc 	bl	8001128 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005570:	bf00      	nop
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	40023800 	.word	0x40023800

0800557c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005580:	bf00      	nop
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800558a:	b480      	push	{r7}
 800558c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800558e:	e7fe      	b.n	800558e <HardFault_Handler+0x4>

08005590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005590:	b480      	push	{r7}
 8005592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005594:	e7fe      	b.n	8005594 <MemManage_Handler+0x4>

08005596 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005596:	b480      	push	{r7}
 8005598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800559a:	e7fe      	b.n	800559a <BusFault_Handler+0x4>

0800559c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80055a0:	e7fe      	b.n	80055a0 <UsageFault_Handler+0x4>

080055a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80055a2:	b480      	push	{r7}
 80055a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80055a6:	bf00      	nop
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80055b0:	b480      	push	{r7}
 80055b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80055b4:	bf00      	nop
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80055be:	b480      	push	{r7}
 80055c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80055c2:	bf00      	nop
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80055d0:	f7fb fcd8 	bl	8000f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80055d4:	bf00      	nop
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
	HighFreqTask();
 80055dc:	f000 fd60 	bl	80060a0 <HighFreqTask>
  /* USER CODE END ADC_IRQn 0 */
  
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80055e0:	bf00      	nop
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80055e4:	b480      	push	{r7}
 80055e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80055e8:	bf00      	nop
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80055f2:	b480      	push	{r7}
 80055f4:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80055f6:	bf00      	nop
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0
	return 1;
 8005604:	2301      	movs	r3, #1
}
 8005606:	4618      	mov	r0, r3
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <_kill>:

int _kill(int pid, int sig)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800561a:	f002 f91b 	bl	8007854 <__errno>
 800561e:	4602      	mov	r2, r0
 8005620:	2316      	movs	r3, #22
 8005622:	6013      	str	r3, [r2, #0]
	return -1;
 8005624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005628:	4618      	mov	r0, r3
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <_exit>:

void _exit (int status)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005638:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f7ff ffe7 	bl	8005610 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005642:	e7fe      	b.n	8005642 <_exit+0x12>

08005644 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800564c:	4b11      	ldr	r3, [pc, #68]	; (8005694 <_sbrk+0x50>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d102      	bne.n	800565a <_sbrk+0x16>
		heap_end = &end;
 8005654:	4b0f      	ldr	r3, [pc, #60]	; (8005694 <_sbrk+0x50>)
 8005656:	4a10      	ldr	r2, [pc, #64]	; (8005698 <_sbrk+0x54>)
 8005658:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800565a:	4b0e      	ldr	r3, [pc, #56]	; (8005694 <_sbrk+0x50>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005660:	4b0c      	ldr	r3, [pc, #48]	; (8005694 <_sbrk+0x50>)
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4413      	add	r3, r2
 8005668:	466a      	mov	r2, sp
 800566a:	4293      	cmp	r3, r2
 800566c:	d907      	bls.n	800567e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800566e:	f002 f8f1 	bl	8007854 <__errno>
 8005672:	4602      	mov	r2, r0
 8005674:	230c      	movs	r3, #12
 8005676:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800567c:	e006      	b.n	800568c <_sbrk+0x48>
	}

	heap_end += incr;
 800567e:	4b05      	ldr	r3, [pc, #20]	; (8005694 <_sbrk+0x50>)
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4413      	add	r3, r2
 8005686:	4a03      	ldr	r2, [pc, #12]	; (8005694 <_sbrk+0x50>)
 8005688:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800568a:	68fb      	ldr	r3, [r7, #12]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	200001fc 	.word	0x200001fc
 8005698:	200002c8 	.word	0x200002c8

0800569c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800569c:	b480      	push	{r7}
 800569e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80056a0:	4b16      	ldr	r3, [pc, #88]	; (80056fc <SystemInit+0x60>)
 80056a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a6:	4a15      	ldr	r2, [pc, #84]	; (80056fc <SystemInit+0x60>)
 80056a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80056b0:	4b13      	ldr	r3, [pc, #76]	; (8005700 <SystemInit+0x64>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a12      	ldr	r2, [pc, #72]	; (8005700 <SystemInit+0x64>)
 80056b6:	f043 0301 	orr.w	r3, r3, #1
 80056ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80056bc:	4b10      	ldr	r3, [pc, #64]	; (8005700 <SystemInit+0x64>)
 80056be:	2200      	movs	r2, #0
 80056c0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80056c2:	4b0f      	ldr	r3, [pc, #60]	; (8005700 <SystemInit+0x64>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a0e      	ldr	r2, [pc, #56]	; (8005700 <SystemInit+0x64>)
 80056c8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80056cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056d0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80056d2:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <SystemInit+0x64>)
 80056d4:	4a0b      	ldr	r2, [pc, #44]	; (8005704 <SystemInit+0x68>)
 80056d6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80056d8:	4b09      	ldr	r3, [pc, #36]	; (8005700 <SystemInit+0x64>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a08      	ldr	r2, [pc, #32]	; (8005700 <SystemInit+0x64>)
 80056de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80056e4:	4b06      	ldr	r3, [pc, #24]	; (8005700 <SystemInit+0x64>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80056ea:	4b04      	ldr	r3, [pc, #16]	; (80056fc <SystemInit+0x60>)
 80056ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80056f0:	609a      	str	r2, [r3, #8]
#endif
}
 80056f2:	bf00      	nop
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	e000ed00 	.word	0xe000ed00
 8005700:	40023800 	.word	0x40023800
 8005704:	24003010 	.word	0x24003010

08005708 <__NVIC_GetPriorityGrouping>:
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800570c:	4b04      	ldr	r3, [pc, #16]	; (8005720 <__NVIC_GetPriorityGrouping+0x18>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	0a1b      	lsrs	r3, r3, #8
 8005712:	f003 0307 	and.w	r3, r3, #7
}
 8005716:	4618      	mov	r0, r3
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	e000ed00 	.word	0xe000ed00

08005724 <__NVIC_EnableIRQ>:
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	4603      	mov	r3, r0
 800572c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800572e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005732:	2b00      	cmp	r3, #0
 8005734:	db0b      	blt.n	800574e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005736:	79fb      	ldrb	r3, [r7, #7]
 8005738:	f003 021f 	and.w	r2, r3, #31
 800573c:	4907      	ldr	r1, [pc, #28]	; (800575c <__NVIC_EnableIRQ+0x38>)
 800573e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005742:	095b      	lsrs	r3, r3, #5
 8005744:	2001      	movs	r0, #1
 8005746:	fa00 f202 	lsl.w	r2, r0, r2
 800574a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800574e:	bf00      	nop
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	e000e100 	.word	0xe000e100

08005760 <__NVIC_SetPriority>:
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	4603      	mov	r3, r0
 8005768:	6039      	str	r1, [r7, #0]
 800576a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800576c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005770:	2b00      	cmp	r3, #0
 8005772:	db0a      	blt.n	800578a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	b2da      	uxtb	r2, r3
 8005778:	490c      	ldr	r1, [pc, #48]	; (80057ac <__NVIC_SetPriority+0x4c>)
 800577a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800577e:	0112      	lsls	r2, r2, #4
 8005780:	b2d2      	uxtb	r2, r2
 8005782:	440b      	add	r3, r1
 8005784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005788:	e00a      	b.n	80057a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	b2da      	uxtb	r2, r3
 800578e:	4908      	ldr	r1, [pc, #32]	; (80057b0 <__NVIC_SetPriority+0x50>)
 8005790:	79fb      	ldrb	r3, [r7, #7]
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	3b04      	subs	r3, #4
 8005798:	0112      	lsls	r2, r2, #4
 800579a:	b2d2      	uxtb	r2, r2
 800579c:	440b      	add	r3, r1
 800579e:	761a      	strb	r2, [r3, #24]
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	e000e100 	.word	0xe000e100
 80057b0:	e000ed00 	.word	0xe000ed00

080057b4 <NVIC_EncodePriority>:
{
 80057b4:	b480      	push	{r7}
 80057b6:	b089      	sub	sp, #36	; 0x24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	f1c3 0307 	rsb	r3, r3, #7
 80057ce:	2b04      	cmp	r3, #4
 80057d0:	bf28      	it	cs
 80057d2:	2304      	movcs	r3, #4
 80057d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	3304      	adds	r3, #4
 80057da:	2b06      	cmp	r3, #6
 80057dc:	d902      	bls.n	80057e4 <NVIC_EncodePriority+0x30>
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	3b03      	subs	r3, #3
 80057e2:	e000      	b.n	80057e6 <NVIC_EncodePriority+0x32>
 80057e4:	2300      	movs	r3, #0
 80057e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	fa02 f303 	lsl.w	r3, r2, r3
 80057f2:	43da      	mvns	r2, r3
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	401a      	ands	r2, r3
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	fa01 f303 	lsl.w	r3, r1, r3
 8005806:	43d9      	mvns	r1, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800580c:	4313      	orrs	r3, r2
}
 800580e:	4618      	mov	r0, r3
 8005810:	3724      	adds	r7, #36	; 0x24
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <LL_TIM_DisableARRPreload>:
{
 800581a:	b480      	push	{r7}
 800581c:	b083      	sub	sp, #12
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	601a      	str	r2, [r3, #0]
}
 800582e:	bf00      	nop
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
	...

0800583c <LL_TIM_OC_DisableFast>:
{
 800583c:	b4b0      	push	{r4, r5, r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d01c      	beq.n	8005886 <LL_TIM_OC_DisableFast+0x4a>
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	2b04      	cmp	r3, #4
 8005850:	d017      	beq.n	8005882 <LL_TIM_OC_DisableFast+0x46>
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2b10      	cmp	r3, #16
 8005856:	d012      	beq.n	800587e <LL_TIM_OC_DisableFast+0x42>
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	2b40      	cmp	r3, #64	; 0x40
 800585c:	d00d      	beq.n	800587a <LL_TIM_OC_DisableFast+0x3e>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005864:	d007      	beq.n	8005876 <LL_TIM_OC_DisableFast+0x3a>
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800586c:	d101      	bne.n	8005872 <LL_TIM_OC_DisableFast+0x36>
 800586e:	2305      	movs	r3, #5
 8005870:	e00a      	b.n	8005888 <LL_TIM_OC_DisableFast+0x4c>
 8005872:	2306      	movs	r3, #6
 8005874:	e008      	b.n	8005888 <LL_TIM_OC_DisableFast+0x4c>
 8005876:	2304      	movs	r3, #4
 8005878:	e006      	b.n	8005888 <LL_TIM_OC_DisableFast+0x4c>
 800587a:	2303      	movs	r3, #3
 800587c:	e004      	b.n	8005888 <LL_TIM_OC_DisableFast+0x4c>
 800587e:	2302      	movs	r3, #2
 8005880:	e002      	b.n	8005888 <LL_TIM_OC_DisableFast+0x4c>
 8005882:	2301      	movs	r3, #1
 8005884:	e000      	b.n	8005888 <LL_TIM_OC_DisableFast+0x4c>
 8005886:	2300      	movs	r3, #0
 8005888:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	3318      	adds	r3, #24
 800588e:	461a      	mov	r2, r3
 8005890:	4629      	mov	r1, r5
 8005892:	4b09      	ldr	r3, [pc, #36]	; (80058b8 <LL_TIM_OC_DisableFast+0x7c>)
 8005894:	5c5b      	ldrb	r3, [r3, r1]
 8005896:	4413      	add	r3, r2
 8005898:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800589a:	6822      	ldr	r2, [r4, #0]
 800589c:	4629      	mov	r1, r5
 800589e:	4b07      	ldr	r3, [pc, #28]	; (80058bc <LL_TIM_OC_DisableFast+0x80>)
 80058a0:	5c5b      	ldrb	r3, [r3, r1]
 80058a2:	4619      	mov	r1, r3
 80058a4:	2304      	movs	r3, #4
 80058a6:	408b      	lsls	r3, r1
 80058a8:	43db      	mvns	r3, r3
 80058aa:	4013      	ands	r3, r2
 80058ac:	6023      	str	r3, [r4, #0]
}
 80058ae:	bf00      	nop
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bcb0      	pop	{r4, r5, r7}
 80058b6:	4770      	bx	lr
 80058b8:	08009538 	.word	0x08009538
 80058bc:	08009540 	.word	0x08009540

080058c0 <LL_TIM_OC_EnablePreload>:
{
 80058c0:	b4b0      	push	{r4, r5, r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d01c      	beq.n	800590a <LL_TIM_OC_EnablePreload+0x4a>
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	2b04      	cmp	r3, #4
 80058d4:	d017      	beq.n	8005906 <LL_TIM_OC_EnablePreload+0x46>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b10      	cmp	r3, #16
 80058da:	d012      	beq.n	8005902 <LL_TIM_OC_EnablePreload+0x42>
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	2b40      	cmp	r3, #64	; 0x40
 80058e0:	d00d      	beq.n	80058fe <LL_TIM_OC_EnablePreload+0x3e>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058e8:	d007      	beq.n	80058fa <LL_TIM_OC_EnablePreload+0x3a>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058f0:	d101      	bne.n	80058f6 <LL_TIM_OC_EnablePreload+0x36>
 80058f2:	2305      	movs	r3, #5
 80058f4:	e00a      	b.n	800590c <LL_TIM_OC_EnablePreload+0x4c>
 80058f6:	2306      	movs	r3, #6
 80058f8:	e008      	b.n	800590c <LL_TIM_OC_EnablePreload+0x4c>
 80058fa:	2304      	movs	r3, #4
 80058fc:	e006      	b.n	800590c <LL_TIM_OC_EnablePreload+0x4c>
 80058fe:	2303      	movs	r3, #3
 8005900:	e004      	b.n	800590c <LL_TIM_OC_EnablePreload+0x4c>
 8005902:	2302      	movs	r3, #2
 8005904:	e002      	b.n	800590c <LL_TIM_OC_EnablePreload+0x4c>
 8005906:	2301      	movs	r3, #1
 8005908:	e000      	b.n	800590c <LL_TIM_OC_EnablePreload+0x4c>
 800590a:	2300      	movs	r3, #0
 800590c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	3318      	adds	r3, #24
 8005912:	461a      	mov	r2, r3
 8005914:	4629      	mov	r1, r5
 8005916:	4b09      	ldr	r3, [pc, #36]	; (800593c <LL_TIM_OC_EnablePreload+0x7c>)
 8005918:	5c5b      	ldrb	r3, [r3, r1]
 800591a:	4413      	add	r3, r2
 800591c:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800591e:	6822      	ldr	r2, [r4, #0]
 8005920:	4629      	mov	r1, r5
 8005922:	4b07      	ldr	r3, [pc, #28]	; (8005940 <LL_TIM_OC_EnablePreload+0x80>)
 8005924:	5c5b      	ldrb	r3, [r3, r1]
 8005926:	4619      	mov	r1, r3
 8005928:	2308      	movs	r3, #8
 800592a:	408b      	lsls	r3, r1
 800592c:	4313      	orrs	r3, r2
 800592e:	6023      	str	r3, [r4, #0]
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	bcb0      	pop	{r4, r5, r7}
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	08009538 	.word	0x08009538
 8005940:	08009540 	.word	0x08009540

08005944 <LL_TIM_SetTriggerOutput>:
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	431a      	orrs	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	605a      	str	r2, [r3, #4]
}
 800595e:	bf00      	nop
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <LL_TIM_SetSlaveMode>:
{
 800596a:	b480      	push	{r7}
 800596c:	b083      	sub	sp, #12
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
 8005972:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f023 0207 	bic.w	r2, r3, #7
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	431a      	orrs	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	609a      	str	r2, [r3, #8]
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <LL_TIM_SetTriggerInput>:
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	431a      	orrs	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	609a      	str	r2, [r3, #8]
}
 80059aa:	bf00      	nop
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <LL_TIM_DisableMasterSlaveMode>:
{
 80059b6:	b480      	push	{r7}
 80059b8:	b083      	sub	sp, #12
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	609a      	str	r2, [r3, #8]
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <LL_TIM_DisableIT_TRIG>:
{
 80059d6:	b480      	push	{r7}
 80059d8:	b083      	sub	sp, #12
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TIE);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	60da      	str	r2, [r3, #12]
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <LL_TIM_DisableDMAReq_TRIG>:
{
 80059f6:	b480      	push	{r7}
 80059f8:	b083      	sub	sp, #12
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TDE);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	60da      	str	r2, [r3, #12]
}
 8005a0a:	bf00      	nop
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
	...

08005a18 <LL_AHB1_GRP1_EnableClock>:
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005a20:	4b08      	ldr	r3, [pc, #32]	; (8005a44 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005a22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a24:	4907      	ldr	r1, [pc, #28]	; (8005a44 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005a2c:	4b05      	ldr	r3, [pc, #20]	; (8005a44 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005a2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4013      	ands	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005a36:	68fb      	ldr	r3, [r7, #12]
}
 8005a38:	bf00      	nop
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	40023800 	.word	0x40023800

08005a48 <LL_APB2_GRP1_EnableClock>:
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005a50:	4b08      	ldr	r3, [pc, #32]	; (8005a74 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005a52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a54:	4907      	ldr	r1, [pc, #28]	; (8005a74 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005a5c:	4b05      	ldr	r3, [pc, #20]	; (8005a74 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005a5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4013      	ands	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005a66:	68fb      	ldr	r3, [r7, #12]
}
 8005a68:	bf00      	nop
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	40023800 	.word	0x40023800

08005a78 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b09a      	sub	sp, #104	; 0x68
 8005a7c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005a7e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005a82:	2200      	movs	r2, #0
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	605a      	str	r2, [r3, #4]
 8005a88:	609a      	str	r2, [r3, #8]
 8005a8a:	60da      	str	r2, [r3, #12]
 8005a8c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8005a8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005a92:	2220      	movs	r2, #32
 8005a94:	2100      	movs	r1, #0
 8005a96:	4618      	mov	r0, r3
 8005a98:	f001 ff3a 	bl	8007910 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8005a9c:	f107 031c 	add.w	r3, r7, #28
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	605a      	str	r2, [r3, #4]
 8005aa6:	609a      	str	r2, [r3, #8]
 8005aa8:	60da      	str	r2, [r3, #12]
 8005aaa:	611a      	str	r2, [r3, #16]
 8005aac:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005aae:	1d3b      	adds	r3, r7, #4
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	605a      	str	r2, [r3, #4]
 8005ab6:	609a      	str	r2, [r3, #8]
 8005ab8:	60da      	str	r2, [r3, #12]
 8005aba:	611a      	str	r2, [r3, #16]
 8005abc:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8005abe:	2001      	movs	r0, #1
 8005ac0:	f7ff ffc2 	bl	8005a48 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005ac4:	2001      	movs	r0, #1
 8005ac6:	f7ff ffa7 	bl	8005a18 <LL_AHB1_GRP1_EnableClock>
  /**TIM1 GPIO Configuration  
  PA6   ------> TIM1_BKIN 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8005aca:	2340      	movs	r3, #64	; 0x40
 8005acc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005ace:	2302      	movs	r3, #2
 8005ad0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8005ada:	2302      	movs	r3, #2
 8005adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ae2:	1d3b      	adds	r3, r7, #4
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	4871      	ldr	r0, [pc, #452]	; (8005cac <MX_TIM1_Init+0x234>)
 8005ae8:	f7fc fbcd 	bl	8002286 <LL_GPIO_Init>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 1));
 8005aec:	f7ff fe0c 	bl	8005708 <__NVIC_GetPriorityGrouping>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2201      	movs	r2, #1
 8005af4:	2104      	movs	r1, #4
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7ff fe5c 	bl	80057b4 <NVIC_EncodePriority>
 8005afc:	4603      	mov	r3, r0
 8005afe:	4619      	mov	r1, r3
 8005b00:	2018      	movs	r0, #24
 8005b02:	f7ff fe2d 	bl	8005760 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005b06:	2018      	movs	r0, #24
 8005b08:	f7ff fe0c 	bl	8005724 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005b0c:	f7ff fdfc 	bl	8005708 <__NVIC_GetPriorityGrouping>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2200      	movs	r2, #0
 8005b14:	2100      	movs	r1, #0
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7ff fe4c 	bl	80057b4 <NVIC_EncodePriority>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	4619      	mov	r1, r3
 8005b20:	2019      	movs	r0, #25
 8005b22:	f7ff fe1d 	bl	8005760 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005b26:	2019      	movs	r0, #25
 8005b28:	f7ff fdfc 	bl	8005724 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 0;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_UP;
 8005b32:	2320      	movs	r3, #32
 8005b34:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 65535;
 8005b36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b3a:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV2;
 8005b3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b40:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8005b48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	4858      	ldr	r0, [pc, #352]	; (8005cb0 <MX_TIM1_Init+0x238>)
 8005b50:	f7fc fdfe 	bl	8002750 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8005b54:	4856      	ldr	r0, [pc, #344]	; (8005cb0 <MX_TIM1_Init+0x238>)
 8005b56:	f7ff fe60 	bl	800581a <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	4854      	ldr	r0, [pc, #336]	; (8005cb0 <MX_TIM1_Init+0x238>)
 8005b5e:	f7ff feaf 	bl	80058c0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8005b62:	2360      	movs	r3, #96	; 0x60
 8005b64:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005b66:	2300      	movs	r3, #0
 8005b68:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005b72:	2300      	movs	r3, #0
 8005b74:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005b76:	2300      	movs	r3, #0
 8005b78:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8005b82:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005b86:	461a      	mov	r2, r3
 8005b88:	2101      	movs	r1, #1
 8005b8a:	4849      	ldr	r0, [pc, #292]	; (8005cb0 <MX_TIM1_Init+0x238>)
 8005b8c:	f7fc fe7a 	bl	8002884 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8005b90:	2101      	movs	r1, #1
 8005b92:	4847      	ldr	r0, [pc, #284]	; (8005cb0 <MX_TIM1_Init+0x238>)
 8005b94:	f7ff fe52 	bl	800583c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 8005b98:	2110      	movs	r1, #16
 8005b9a:	4845      	ldr	r0, [pc, #276]	; (8005cb0 <MX_TIM1_Init+0x238>)
 8005b9c:	f7ff fe90 	bl	80058c0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8005ba8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005bac:	461a      	mov	r2, r3
 8005bae:	2110      	movs	r1, #16
 8005bb0:	483f      	ldr	r0, [pc, #252]	; (8005cb0 <MX_TIM1_Init+0x238>)
 8005bb2:	f7fc fe67 	bl	8002884 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 8005bb6:	2110      	movs	r1, #16
 8005bb8:	483d      	ldr	r0, [pc, #244]	; (8005cb0 <MX_TIM1_Init+0x238>)
 8005bba:	f7ff fe3f 	bl	800583c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8005bbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005bc2:	483b      	ldr	r0, [pc, #236]	; (8005cb0 <MX_TIM1_Init+0x238>)
 8005bc4:	f7ff fe7c 	bl	80058c0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8005bd0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005bda:	4835      	ldr	r0, [pc, #212]	; (8005cb0 <MX_TIM1_Init+0x238>)
 8005bdc:	f7fc fe52 	bl	8002884 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8005be0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005be4:	4832      	ldr	r0, [pc, #200]	; (8005cb0 <MX_TIM1_Init+0x238>)
 8005be6:	f7ff fe29 	bl	800583c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 8005bea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005bee:	4830      	ldr	r0, [pc, #192]	; (8005cb0 <MX_TIM1_Init+0x238>)
 8005bf0:	f7ff fe66 	bl	80058c0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 8005bf4:	2370      	movs	r3, #112	; 0x70
 8005bf6:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8005c00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005c04:	461a      	mov	r2, r3
 8005c06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005c0a:	4829      	ldr	r0, [pc, #164]	; (8005cb0 <MX_TIM1_Init+0x238>)
 8005c0c:	f7fc fe3a 	bl	8002884 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 8005c10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005c14:	4826      	ldr	r0, [pc, #152]	; (8005cb0 <MX_TIM1_Init+0x238>)
 8005c16:	f7ff fe11 	bl	800583c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerInput(TIM1, LL_TIM_TS_ITR1);
 8005c1a:	2110      	movs	r1, #16
 8005c1c:	4824      	ldr	r0, [pc, #144]	; (8005cb0 <MX_TIM1_Init+0x238>)
 8005c1e:	f7ff feb7 	bl	8005990 <LL_TIM_SetTriggerInput>
  LL_TIM_SetSlaveMode(TIM1, LL_TIM_SLAVEMODE_TRIGGER);
 8005c22:	2106      	movs	r1, #6
 8005c24:	4822      	ldr	r0, [pc, #136]	; (8005cb0 <MX_TIM1_Init+0x238>)
 8005c26:	f7ff fea0 	bl	800596a <LL_TIM_SetSlaveMode>
  LL_TIM_DisableIT_TRIG(TIM1);
 8005c2a:	4821      	ldr	r0, [pc, #132]	; (8005cb0 <MX_TIM1_Init+0x238>)
 8005c2c:	f7ff fed3 	bl	80059d6 <LL_TIM_DisableIT_TRIG>
  LL_TIM_DisableDMAReq_TRIG(TIM1);
 8005c30:	481f      	ldr	r0, [pc, #124]	; (8005cb0 <MX_TIM1_Init+0x238>)
 8005c32:	f7ff fee0 	bl	80059f6 <LL_TIM_DisableDMAReq_TRIG>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8005c36:	2100      	movs	r1, #0
 8005c38:	481d      	ldr	r0, [pc, #116]	; (8005cb0 <MX_TIM1_Init+0x238>)
 8005c3a:	f7ff fe83 	bl	8005944 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8005c3e:	481c      	ldr	r0, [pc, #112]	; (8005cb0 <MX_TIM1_Init+0x238>)
 8005c40:	f7ff feb9 	bl	80059b6 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_ENABLE;
 8005c44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c48:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_ENABLE;
 8005c4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c4e:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_1;
 8005c50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c54:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8005c56:	2300      	movs	r3, #0
 8005c58:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_ENABLE;
 8005c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c60:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8005c62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8005c6c:	f107 031c 	add.w	r3, r7, #28
 8005c70:	4619      	mov	r1, r3
 8005c72:	480f      	ldr	r0, [pc, #60]	; (8005cb0 <MX_TIM1_Init+0x238>)
 8005c74:	f7fc fe3e 	bl	80028f4 <LL_TIM_BDTR_Init>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005c78:	2001      	movs	r0, #1
 8005c7a:	f7ff fecd 	bl	8005a18 <LL_AHB1_GRP1_EnableClock>
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8005c7e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005c82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005c84:	2302      	movs	r3, #2
 8005c86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8005c88:	2302      	movs	r3, #2
 8005c8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8005c90:	2302      	movs	r3, #2
 8005c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8005c94:	2301      	movs	r3, #1
 8005c96:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c98:	1d3b      	adds	r3, r7, #4
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	4803      	ldr	r0, [pc, #12]	; (8005cac <MX_TIM1_Init+0x234>)
 8005c9e:	f7fc faf2 	bl	8002286 <LL_GPIO_Init>

}
 8005ca2:	bf00      	nop
 8005ca4:	3768      	adds	r7, #104	; 0x68
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	40020000 	.word	0x40020000
 8005cb0:	40010000 	.word	0x40010000

08005cb4 <LL_USART_Enable>:
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	60da      	str	r2, [r3, #12]
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	615a      	str	r2, [r3, #20]
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <LL_AHB1_GRP1_EnableClock>:
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005d08:	4b08      	ldr	r3, [pc, #32]	; (8005d2c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d0c:	4907      	ldr	r1, [pc, #28]	; (8005d2c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005d14:	4b05      	ldr	r3, [pc, #20]	; (8005d2c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
}
 8005d20:	bf00      	nop
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	40023800 	.word	0x40023800

08005d30 <LL_APB1_GRP1_EnableClock>:
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8005d38:	4b08      	ldr	r3, [pc, #32]	; (8005d5c <LL_APB1_GRP1_EnableClock+0x2c>)
 8005d3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d3c:	4907      	ldr	r1, [pc, #28]	; (8005d5c <LL_APB1_GRP1_EnableClock+0x2c>)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005d44:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <LL_APB1_GRP1_EnableClock+0x2c>)
 8005d46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
}
 8005d50:	bf00      	nop
 8005d52:	3714      	adds	r7, #20
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	40023800 	.word	0x40023800

08005d60 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b08e      	sub	sp, #56	; 0x38
 8005d64:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8005d66:	f107 031c 	add.w	r3, r7, #28
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	605a      	str	r2, [r3, #4]
 8005d70:	609a      	str	r2, [r3, #8]
 8005d72:	60da      	str	r2, [r3, #12]
 8005d74:	611a      	str	r2, [r3, #16]
 8005d76:	615a      	str	r2, [r3, #20]
 8005d78:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d7a:	1d3b      	adds	r3, r7, #4
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	605a      	str	r2, [r3, #4]
 8005d82:	609a      	str	r2, [r3, #8]
 8005d84:	60da      	str	r2, [r3, #12]
 8005d86:	611a      	str	r2, [r3, #16]
 8005d88:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8005d8a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005d8e:	f7ff ffcf 	bl	8005d30 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005d92:	2001      	movs	r0, #1
 8005d94:	f7ff ffb4 	bl	8005d00 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005d98:	230c      	movs	r3, #12
 8005d9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005da0:	2303      	movs	r3, #3
 8005da2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005da4:	2300      	movs	r3, #0
 8005da6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8005da8:	2301      	movs	r3, #1
 8005daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8005dac:	2307      	movs	r3, #7
 8005dae:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005db0:	1d3b      	adds	r3, r7, #4
 8005db2:	4619      	mov	r1, r3
 8005db4:	4810      	ldr	r0, [pc, #64]	; (8005df8 <MX_USART2_UART_Init+0x98>)
 8005db6:	f7fc fa66 	bl	8002286 <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 8005dba:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005dbe:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8005dcc:	230c      	movs	r3, #12
 8005dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8005dd8:	f107 031c 	add.w	r3, r7, #28
 8005ddc:	4619      	mov	r1, r3
 8005dde:	4807      	ldr	r0, [pc, #28]	; (8005dfc <MX_USART2_UART_Init+0x9c>)
 8005de0:	f7fd f866 	bl	8002eb0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8005de4:	4805      	ldr	r0, [pc, #20]	; (8005dfc <MX_USART2_UART_Init+0x9c>)
 8005de6:	f7ff ff75 	bl	8005cd4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8005dea:	4804      	ldr	r0, [pc, #16]	; (8005dfc <MX_USART2_UART_Init+0x9c>)
 8005dec:	f7ff ff62 	bl	8005cb4 <LL_USART_Enable>

}
 8005df0:	bf00      	nop
 8005df2:	3738      	adds	r7, #56	; 0x38
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	40020000 	.word	0x40020000
 8005dfc:	40004400 	.word	0x40004400

08005e00 <LL_ADC_Enable>:
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f043 0201 	orr.w	r2, r3, #1
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	609a      	str	r2, [r3, #8]
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <LL_ADC_REG_StartConversionSWStart>:
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	609a      	str	r2, [r3, #8]
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <LL_ADC_REG_ReadConversionData12>:
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e4c:	b29b      	uxth	r3, r3
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <LL_ADC_INJ_ReadConversionData12>:
{
 8005e5a:	b490      	push	{r4, r7}
 8005e5c:	b084      	sub	sp, #16
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
 8005e62:	6039      	str	r1, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JDRX_REGOFFSET_MASK));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	333c      	adds	r3, #60	; 0x3c
 8005e68:	4619      	mov	r1, r3
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e70:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005e74:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	fa92 f2a2 	rbit	r2, r2
 8005e7c:	60ba      	str	r2, [r7, #8]
  return result;
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	fab2 f282 	clz	r2, r2
 8005e84:	b2d2      	uxtb	r2, r2
 8005e86:	40d3      	lsrs	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	440b      	add	r3, r1
 8005e8c:	461c      	mov	r4, r3
  return (uint16_t)(READ_BIT(*preg,
 8005e8e:	6823      	ldr	r3, [r4, #0]
                   );
 8005e90:	b29b      	uxth	r3, r3
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bc90      	pop	{r4, r7}
 8005e9a:	4770      	bx	lr

08005e9c <LL_ADC_IsActiveFlag_JEOS>:
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0304 	and.w	r3, r3, #4
 8005eac:	2b04      	cmp	r3, #4
 8005eae:	bf0c      	ite	eq
 8005eb0:	2301      	moveq	r3, #1
 8005eb2:	2300      	movne	r3, #0
 8005eb4:	b2db      	uxtb	r3, r3
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <LL_ADC_ClearFlag_JEOS>:
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b083      	sub	sp, #12
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f06f 0204 	mvn.w	r2, #4
 8005ed0:	601a      	str	r2, [r3, #0]
}
 8005ed2:	bf00      	nop
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <LL_ADC_EnableIT_JEOS>:
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b083      	sub	sp, #12
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	605a      	str	r2, [r3, #4]
}
 8005ef2:	bf00      	nop
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <_ZN3PWMC1Ev>:


#ifndef PWM_HPP_
#define PWM_HPP_

class PWM {
 8005efe:	b480      	push	{r7}
 8005f00:	b083      	sub	sp, #12
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	605a      	str	r2, [r3, #4]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	609a      	str	r2, [r3, #8]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4618      	mov	r0, r3
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <cppwrapper>:
PWM PWM_Object3;
PWM PWM_Object4;

ArgSensor sensor;

void cppwrapper(void){
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b094      	sub	sp, #80	; 0x50
 8005f24:	af00      	add	r7, sp, #0
	MathLib mathlibrary;//三角関数を取得
 8005f26:	1d3b      	adds	r3, r7, #4
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7fd f8c1 	bl	80030b0 <_ZN7MathLibC1Ev>
	int mathlib_size = 256;//ライブラリのサイズを指定
 8005f2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f32:	64fb      	str	r3, [r7, #76]	; 0x4c
	mathlibrary.fInit(mathlib_size);
 8005f34:	1d3b      	adds	r3, r7, #4
 8005f36:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fd f919 	bl	8003170 <_ZN7MathLib5fInitEi>

	Motor.setMathLib(mathlibrary);//モータクラスに算術ライブラリを渡す
 8005f3e:	1d3a      	adds	r2, r7, #4
 8005f40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f44:	4611      	mov	r1, r2
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7fe f87e 	bl	8004048 <_ZN7MathLibC1ERKS_>
 8005f4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f50:	4619      	mov	r1, r3
 8005f52:	4829      	ldr	r0, [pc, #164]	; (8005ff8 <cppwrapper+0xd8>)
 8005f54:	f7fe f869 	bl	800402a <_ZN9MotorInfo10setMathLibE7MathLib>
 8005f58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7fd f8c3 	bl	80030e8 <_ZN7MathLibD1Ev>

	PWM_Object1.setTIM(TIM1);
 8005f62:	4926      	ldr	r1, [pc, #152]	; (8005ffc <cppwrapper+0xdc>)
 8005f64:	4826      	ldr	r0, [pc, #152]	; (8006000 <cppwrapper+0xe0>)
 8005f66:	f7fe fc92 	bl	800488e <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object2.setTIM(TIM1);
 8005f6a:	4924      	ldr	r1, [pc, #144]	; (8005ffc <cppwrapper+0xdc>)
 8005f6c:	4825      	ldr	r0, [pc, #148]	; (8006004 <cppwrapper+0xe4>)
 8005f6e:	f7fe fc8e 	bl	800488e <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object3.setTIM(TIM1);
 8005f72:	4922      	ldr	r1, [pc, #136]	; (8005ffc <cppwrapper+0xdc>)
 8005f74:	4824      	ldr	r0, [pc, #144]	; (8006008 <cppwrapper+0xe8>)
 8005f76:	f7fe fc8a 	bl	800488e <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object4.setTIM(TIM1);
 8005f7a:	4920      	ldr	r1, [pc, #128]	; (8005ffc <cppwrapper+0xdc>)
 8005f7c:	4823      	ldr	r0, [pc, #140]	; (800600c <cppwrapper+0xec>)
 8005f7e:	f7fe fc86 	bl	800488e <_ZN3PWM6setTIMEP11TIM_TypeDef>

	PWM_Object1.setCH(1);
 8005f82:	2101      	movs	r1, #1
 8005f84:	481e      	ldr	r0, [pc, #120]	; (8006000 <cppwrapper+0xe0>)
 8005f86:	f7fe fc90 	bl	80048aa <_ZN3PWM5setCHEi>
	PWM_Object2.setCH(2);
 8005f8a:	2102      	movs	r1, #2
 8005f8c:	481d      	ldr	r0, [pc, #116]	; (8006004 <cppwrapper+0xe4>)
 8005f8e:	f7fe fc8c 	bl	80048aa <_ZN3PWM5setCHEi>
	PWM_Object3.setCH(3);
 8005f92:	2103      	movs	r1, #3
 8005f94:	481c      	ldr	r0, [pc, #112]	; (8006008 <cppwrapper+0xe8>)
 8005f96:	f7fe fc88 	bl	80048aa <_ZN3PWM5setCHEi>
	PWM_Object4.setCH(4);
 8005f9a:	2104      	movs	r1, #4
 8005f9c:	481b      	ldr	r0, [pc, #108]	; (800600c <cppwrapper+0xec>)
 8005f9e:	f7fe fc84 	bl	80048aa <_ZN3PWM5setCHEi>

	PWM_Object1.fInit(65535);
 8005fa2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005fa6:	4816      	ldr	r0, [pc, #88]	; (8006000 <cppwrapper+0xe0>)
 8005fa8:	f7fe fc8d 	bl	80048c6 <_ZN3PWM5fInitEi>
	PWM_Object2.fInit(65535);
 8005fac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005fb0:	4814      	ldr	r0, [pc, #80]	; (8006004 <cppwrapper+0xe4>)
 8005fb2:	f7fe fc88 	bl	80048c6 <_ZN3PWM5fInitEi>
	PWM_Object3.fInit(65535);
 8005fb6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005fba:	4813      	ldr	r0, [pc, #76]	; (8006008 <cppwrapper+0xe8>)
 8005fbc:	f7fe fc83 	bl	80048c6 <_ZN3PWM5fInitEi>
	PWM_Object4.fInit(65535);
 8005fc0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005fc4:	4811      	ldr	r0, [pc, #68]	; (800600c <cppwrapper+0xec>)
 8005fc6:	f7fe fc7e 	bl	80048c6 <_ZN3PWM5fInitEi>

	PWM_Object1.f2Duty(0);//50%duty
 8005fca:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8006010 <cppwrapper+0xf0>
 8005fce:	480c      	ldr	r0, [pc, #48]	; (8006000 <cppwrapper+0xe0>)
 8005fd0:	f7fe fcf0 	bl	80049b4 <_ZN3PWM6f2DutyEf>
	PWM_Object2.f2Duty(0);
 8005fd4:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8006010 <cppwrapper+0xf0>
 8005fd8:	480a      	ldr	r0, [pc, #40]	; (8006004 <cppwrapper+0xe4>)
 8005fda:	f7fe fceb 	bl	80049b4 <_ZN3PWM6f2DutyEf>
	PWM_Object3.f2Duty(0);
 8005fde:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8006010 <cppwrapper+0xf0>
 8005fe2:	4809      	ldr	r0, [pc, #36]	; (8006008 <cppwrapper+0xe8>)
 8005fe4:	f7fe fce6 	bl	80049b4 <_ZN3PWM6f2DutyEf>
	PWM_Object4.f2Duty(0);
 8005fe8:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8006010 <cppwrapper+0xf0>
 8005fec:	4807      	ldr	r0, [pc, #28]	; (800600c <cppwrapper+0xec>)
 8005fee:	f7fe fce1 	bl	80049b4 <_ZN3PWM6f2DutyEf>

	ADC_Init();
 8005ff2:	f000 f8f9 	bl	80061e8 <_Z8ADC_Initv>

	while(1){
 8005ff6:	e7fe      	b.n	8005ff6 <cppwrapper+0xd6>
 8005ff8:	20000208 	.word	0x20000208
 8005ffc:	40010000 	.word	0x40010000
 8006000:	2000026c 	.word	0x2000026c
 8006004:	2000027c 	.word	0x2000027c
 8006008:	2000028c 	.word	0x2000028c
 800600c:	2000029c 	.word	0x2000029c
 8006010:	00000000 	.word	0x00000000

08006014 <_Z12MotorPWMTaskiff>:
//			HAL_Delay(10);
//		}
	}
}

void MotorPWMTask(int pArg, float pVd, float pVq){//パラメータの物理量は将来的に変える
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	ed87 0a02 	vstr	s0, [r7, #8]
 8006020:	edc7 0a01 	vstr	s1, [r7, #4]
	//int mathlib_size = Motor.getMathLib().getLibSize();
	Motor.setArg(pArg);
 8006024:	68f9      	ldr	r1, [r7, #12]
 8006026:	481a      	ldr	r0, [pc, #104]	; (8006090 <_Z12MotorPWMTaskiff+0x7c>)
 8006028:	f7fe f845 	bl	80040b6 <_ZN9MotorInfo6setArgEi>
	Motor.setVd(pVd);
 800602c:	ed97 0a02 	vldr	s0, [r7, #8]
 8006030:	4817      	ldr	r0, [pc, #92]	; (8006090 <_Z12MotorPWMTaskiff+0x7c>)
 8006032:	f7fe f84e 	bl	80040d2 <_ZN9MotorInfo5setVdEf>
	Motor.setVq(pVq);
 8006036:	ed97 0a01 	vldr	s0, [r7, #4]
 800603a:	4815      	ldr	r0, [pc, #84]	; (8006090 <_Z12MotorPWMTaskiff+0x7c>)
 800603c:	f7fe f858 	bl	80040f0 <_ZN9MotorInfo5setVqEf>
	Motor.invClarkTransform();
 8006040:	4813      	ldr	r0, [pc, #76]	; (8006090 <_Z12MotorPWMTaskiff+0x7c>)
 8006042:	f7fe f864 	bl	800410e <_ZN9MotorInfo17invClarkTransformEv>
	Motor.invParkTransform();
 8006046:	4812      	ldr	r0, [pc, #72]	; (8006090 <_Z12MotorPWMTaskiff+0x7c>)
 8006048:	f7fe f8f4 	bl	8004234 <_ZN9MotorInfo16invParkTransformEv>

	PWM_Object1.f2Duty(Motor.getVu());
 800604c:	4810      	ldr	r0, [pc, #64]	; (8006090 <_Z12MotorPWMTaskiff+0x7c>)
 800604e:	f7fe f939 	bl	80042c4 <_ZN9MotorInfo5getVuEv>
 8006052:	eef0 7a40 	vmov.f32	s15, s0
 8006056:	eeb0 0a67 	vmov.f32	s0, s15
 800605a:	480e      	ldr	r0, [pc, #56]	; (8006094 <_Z12MotorPWMTaskiff+0x80>)
 800605c:	f7fe fcaa 	bl	80049b4 <_ZN3PWM6f2DutyEf>
	PWM_Object2.f2Duty(Motor.getVv());
 8006060:	480b      	ldr	r0, [pc, #44]	; (8006090 <_Z12MotorPWMTaskiff+0x7c>)
 8006062:	f7fe f93e 	bl	80042e2 <_ZN9MotorInfo5getVvEv>
 8006066:	eef0 7a40 	vmov.f32	s15, s0
 800606a:	eeb0 0a67 	vmov.f32	s0, s15
 800606e:	480a      	ldr	r0, [pc, #40]	; (8006098 <_Z12MotorPWMTaskiff+0x84>)
 8006070:	f7fe fca0 	bl	80049b4 <_ZN3PWM6f2DutyEf>
	PWM_Object3.f2Duty(Motor.getVw());
 8006074:	4806      	ldr	r0, [pc, #24]	; (8006090 <_Z12MotorPWMTaskiff+0x7c>)
 8006076:	f7fe f943 	bl	8004300 <_ZN9MotorInfo5getVwEv>
 800607a:	eef0 7a40 	vmov.f32	s15, s0
 800607e:	eeb0 0a67 	vmov.f32	s0, s15
 8006082:	4806      	ldr	r0, [pc, #24]	; (800609c <_Z12MotorPWMTaskiff+0x88>)
 8006084:	f7fe fc96 	bl	80049b4 <_ZN3PWM6f2DutyEf>
}
 8006088:	bf00      	nop
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	20000208 	.word	0x20000208
 8006094:	2000026c 	.word	0x2000026c
 8006098:	2000027c 	.word	0x2000027c
 800609c:	2000028c 	.word	0x2000028c

080060a0 <HighFreqTask>:



int argnum = 0;
void HighFreqTask(void){
 80060a0:	b590      	push	{r4, r7, lr}
 80060a2:	b097      	sub	sp, #92	; 0x5c
 80060a4:	af00      	add	r7, sp, #0

	if (LL_ADC_IsActiveFlag_JEOS(ADC1) == 1)
 80060a6:	4848      	ldr	r0, [pc, #288]	; (80061c8 <HighFreqTask+0x128>)
 80060a8:	f7ff fef8 	bl	8005e9c <LL_ADC_IsActiveFlag_JEOS>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	bf0c      	ite	eq
 80060b2:	2301      	moveq	r3, #1
 80060b4:	2300      	movne	r3, #0
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d07b      	beq.n	80061b4 <HighFreqTask+0x114>
		{
			LL_ADC_ClearFlag_JEOS(ADC1);
 80060bc:	4842      	ldr	r0, [pc, #264]	; (80061c8 <HighFreqTask+0x128>)
 80060be:	f7ff ff00 	bl	8005ec2 <LL_ADC_ClearFlag_JEOS>
			adc_data1 = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_1);
 80060c2:	2101      	movs	r1, #1
 80060c4:	4840      	ldr	r0, [pc, #256]	; (80061c8 <HighFreqTask+0x128>)
 80060c6:	f7ff fec8 	bl	8005e5a <LL_ADC_INJ_ReadConversionData12>
 80060ca:	4603      	mov	r3, r0
 80060cc:	461a      	mov	r2, r3
 80060ce:	4b3f      	ldr	r3, [pc, #252]	; (80061cc <HighFreqTask+0x12c>)
 80060d0:	801a      	strh	r2, [r3, #0]
			adc_data2 = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_2);
 80060d2:	f241 1102 	movw	r1, #4354	; 0x1102
 80060d6:	483c      	ldr	r0, [pc, #240]	; (80061c8 <HighFreqTask+0x128>)
 80060d8:	f7ff febf 	bl	8005e5a <LL_ADC_INJ_ReadConversionData12>
 80060dc:	4603      	mov	r3, r0
 80060de:	461a      	mov	r2, r3
 80060e0:	4b3b      	ldr	r3, [pc, #236]	; (80061d0 <HighFreqTask+0x130>)
 80060e2:	801a      	strh	r2, [r3, #0]
			adc_data3 = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_3);
 80060e4:	f242 2103 	movw	r1, #8707	; 0x2203
 80060e8:	4837      	ldr	r0, [pc, #220]	; (80061c8 <HighFreqTask+0x128>)
 80060ea:	f7ff feb6 	bl	8005e5a <LL_ADC_INJ_ReadConversionData12>
 80060ee:	4603      	mov	r3, r0
 80060f0:	461a      	mov	r2, r3
 80060f2:	4b38      	ldr	r3, [pc, #224]	; (80061d4 <HighFreqTask+0x134>)
 80060f4:	801a      	strh	r2, [r3, #0]


			//位置センサを叩くTask
			float one_step = (float)2*M_PI / Motor.getMathLib().getLibSize();
 80060f6:	463b      	mov	r3, r7
 80060f8:	4937      	ldr	r1, [pc, #220]	; (80061d8 <HighFreqTask+0x138>)
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7fd ffcc 	bl	8004098 <_ZN9MotorInfo10getMathLibEv>
 8006100:	463b      	mov	r3, r7
 8006102:	4618      	mov	r0, r3
 8006104:	f7fd f86c 	bl	80031e0 <_ZN7MathLib10getLibSizeEv>
 8006108:	4603      	mov	r3, r0
 800610a:	4618      	mov	r0, r3
 800610c:	f7fa f9d6 	bl	80004bc <__aeabi_i2d>
 8006110:	4603      	mov	r3, r0
 8006112:	460c      	mov	r4, r1
 8006114:	461a      	mov	r2, r3
 8006116:	4623      	mov	r3, r4
 8006118:	a129      	add	r1, pc, #164	; (adr r1, 80061c0 <HighFreqTask+0x120>)
 800611a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800611e:	f7fa fb61 	bl	80007e4 <__aeabi_ddiv>
 8006122:	4603      	mov	r3, r0
 8006124:	460c      	mov	r4, r1
 8006126:	4618      	mov	r0, r3
 8006128:	4621      	mov	r1, r4
 800612a:	f7fa fd09 	bl	8000b40 <__aeabi_d2f>
 800612e:	4603      	mov	r3, r0
 8006130:	657b      	str	r3, [r7, #84]	; 0x54
 8006132:	463b      	mov	r3, r7
 8006134:	4618      	mov	r0, r3
 8006136:	f7fc ffd7 	bl	80030e8 <_ZN7MathLibD1Ev>
			sensor.increment(one_step);
 800613a:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 800613e:	4827      	ldr	r0, [pc, #156]	; (80061dc <HighFreqTask+0x13c>)
 8006140:	f7fc ff6a 	bl	8003018 <_ZN9ArgSensor9incrementEf>
			//float arg = sensor.getArg();

			//LL_ADC_REG_StartConversionExtTrig(ADCx, ExternalTriggerEdge);
			//LL_ADC_REG_IsTriggerSourceSWStart(ADC2);
			LL_ADC_REG_StartConversionSWStart(ADC2);
 8006144:	4826      	ldr	r0, [pc, #152]	; (80061e0 <HighFreqTask+0x140>)
 8006146:	f7ff fe6b 	bl	8005e20 <LL_ADC_REG_StartConversionSWStart>
			float adc_data4 = (float)LL_ADC_REG_ReadConversionData12(ADC2)/4096;
 800614a:	4825      	ldr	r0, [pc, #148]	; (80061e0 <HighFreqTask+0x140>)
 800614c:	f7ff fe78 	bl	8005e40 <LL_ADC_REG_ReadConversionData12>
 8006150:	4603      	mov	r3, r0
 8006152:	ee07 3a90 	vmov	s15, r3
 8006156:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800615a:	eddf 6a22 	vldr	s13, [pc, #136]	; 80061e4 <HighFreqTask+0x144>
 800615e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006162:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

			float Vd_input = 0;
 8006166:	f04f 0300 	mov.w	r3, #0
 800616a:	64fb      	str	r3, [r7, #76]	; 0x4c
			float Vq_input = 0.5f;
 800616c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8006170:	64bb      	str	r3, [r7, #72]	; 0x48

			Vq_input = adc_data4;
 8006172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006174:	64bb      	str	r3, [r7, #72]	; 0x48

			MotorPWMTask(Motor.getMathLib().radToSizeCount(sensor.getArg()), Vd_input, Vq_input);//暫定で作った関数
 8006176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800617a:	4917      	ldr	r1, [pc, #92]	; (80061d8 <HighFreqTask+0x138>)
 800617c:	4618      	mov	r0, r3
 800617e:	f7fd ff8b 	bl	8004098 <_ZN9MotorInfo10getMathLibEv>
 8006182:	4816      	ldr	r0, [pc, #88]	; (80061dc <HighFreqTask+0x13c>)
 8006184:	f7fc ff78 	bl	8003078 <_ZN9ArgSensor6getArgEv>
 8006188:	eef0 7a40 	vmov.f32	s15, s0
 800618c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006190:	eeb0 0a67 	vmov.f32	s0, s15
 8006194:	4618      	mov	r0, r3
 8006196:	f7fd f8ed 	bl	8003374 <_ZN7MathLib14radToSizeCountEf>
 800619a:	4603      	mov	r3, r0
 800619c:	edd7 0a12 	vldr	s1, [r7, #72]	; 0x48
 80061a0:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7ff ff35 	bl	8006014 <_Z12MotorPWMTaskiff>
 80061aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fc ff9a 	bl	80030e8 <_ZN7MathLibD1Ev>
		{
			LL_ADC_WriteReg(ADC1,ISR,0);
		}*/


}
 80061b4:	bf00      	nop
 80061b6:	375c      	adds	r7, #92	; 0x5c
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd90      	pop	{r4, r7, pc}
 80061bc:	f3af 8000 	nop.w
 80061c0:	54442d18 	.word	0x54442d18
 80061c4:	401921fb 	.word	0x401921fb
 80061c8:	40012000 	.word	0x40012000
 80061cc:	20000200 	.word	0x20000200
 80061d0:	20000202 	.word	0x20000202
 80061d4:	20000204 	.word	0x20000204
 80061d8:	20000208 	.word	0x20000208
 80061dc:	200002ac 	.word	0x200002ac
 80061e0:	40012100 	.word	0x40012100
 80061e4:	45800000 	.word	0x45800000

080061e8 <_Z8ADC_Initv>:


void ADC_Init()
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	af00      	add	r7, sp, #0
    LL_ADC_Enable( ADC1 );
 80061ec:	4806      	ldr	r0, [pc, #24]	; (8006208 <_Z8ADC_Initv+0x20>)
 80061ee:	f7ff fe07 	bl	8005e00 <LL_ADC_Enable>
    LL_ADC_Enable( ADC2 );
 80061f2:	4806      	ldr	r0, [pc, #24]	; (800620c <_Z8ADC_Initv+0x24>)
 80061f4:	f7ff fe04 	bl	8005e00 <LL_ADC_Enable>

    /* ADC1 Injected conversions end interrupt enabling */
    LL_ADC_ClearFlag_JEOS( ADC1 );
 80061f8:	4803      	ldr	r0, [pc, #12]	; (8006208 <_Z8ADC_Initv+0x20>)
 80061fa:	f7ff fe62 	bl	8005ec2 <LL_ADC_ClearFlag_JEOS>
    LL_ADC_EnableIT_JEOS( ADC1 );
 80061fe:	4802      	ldr	r0, [pc, #8]	; (8006208 <_Z8ADC_Initv+0x20>)
 8006200:	f7ff fe6d 	bl	8005ede <LL_ADC_EnableIT_JEOS>
}
 8006204:	bf00      	nop
 8006206:	bd80      	pop	{r7, pc}
 8006208:	40012000 	.word	0x40012000
 800620c:	40012100 	.word	0x40012100

08006210 <_Z41__static_initialization_and_destruction_0ii>:
	//Str.push_back(buf2);
	UART uartob;
	uartob.setString(Str);
	uartob.Transmit();
	//HAL_UART_Transmit(huart, pData, Size, Timeout);
}
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d116      	bne.n	800624e <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006226:	4293      	cmp	r3, r2
 8006228:	d111      	bne.n	800624e <_Z41__static_initialization_and_destruction_0ii+0x3e>
MotorInfo Motor;
 800622a:	4812      	ldr	r0, [pc, #72]	; (8006274 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800622c:	f7fd fea2 	bl	8003f74 <_ZN9MotorInfoC1Ev>
PWM PWM_Object1;
 8006230:	4811      	ldr	r0, [pc, #68]	; (8006278 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8006232:	f7ff fe64 	bl	8005efe <_ZN3PWMC1Ev>
PWM PWM_Object2;
 8006236:	4811      	ldr	r0, [pc, #68]	; (800627c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8006238:	f7ff fe61 	bl	8005efe <_ZN3PWMC1Ev>
PWM PWM_Object3;
 800623c:	4810      	ldr	r0, [pc, #64]	; (8006280 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800623e:	f7ff fe5e 	bl	8005efe <_ZN3PWMC1Ev>
PWM PWM_Object4;
 8006242:	4810      	ldr	r0, [pc, #64]	; (8006284 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8006244:	f7ff fe5b 	bl	8005efe <_ZN3PWMC1Ev>
ArgSensor sensor;
 8006248:	480f      	ldr	r0, [pc, #60]	; (8006288 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800624a:	f7fc feb1 	bl	8002fb0 <_ZN9ArgSensorC1Ev>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10a      	bne.n	800626a <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800625a:	4293      	cmp	r3, r2
 800625c:	d105      	bne.n	800626a <_Z41__static_initialization_and_destruction_0ii+0x5a>
 800625e:	480a      	ldr	r0, [pc, #40]	; (8006288 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8006260:	f7fc feba 	bl	8002fd8 <_ZN9ArgSensorD1Ev>
MotorInfo Motor;
 8006264:	4803      	ldr	r0, [pc, #12]	; (8006274 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8006266:	f7fd fe99 	bl	8003f9c <_ZN9MotorInfoD1Ev>
}
 800626a:	bf00      	nop
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	20000208 	.word	0x20000208
 8006278:	2000026c 	.word	0x2000026c
 800627c:	2000027c 	.word	0x2000027c
 8006280:	2000028c 	.word	0x2000028c
 8006284:	2000029c 	.word	0x2000029c
 8006288:	200002ac 	.word	0x200002ac

0800628c <_GLOBAL__sub_I_adc_data1>:
 800628c:	b580      	push	{r7, lr}
 800628e:	af00      	add	r7, sp, #0
 8006290:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006294:	2001      	movs	r0, #1
 8006296:	f7ff ffbb 	bl	8006210 <_Z41__static_initialization_and_destruction_0ii>
 800629a:	bd80      	pop	{r7, pc}

0800629c <_GLOBAL__sub_D_adc_data1>:
 800629c:	b580      	push	{r7, lr}
 800629e:	af00      	add	r7, sp, #0
 80062a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80062a4:	2000      	movs	r0, #0
 80062a6:	f7ff ffb3 	bl	8006210 <_Z41__static_initialization_and_destruction_0ii>
 80062aa:	bd80      	pop	{r7, pc}

080062ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80062ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80062e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80062b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80062b2:	e003      	b.n	80062bc <LoopCopyDataInit>

080062b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80062b4:	4b0c      	ldr	r3, [pc, #48]	; (80062e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80062b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80062b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80062ba:	3104      	adds	r1, #4

080062bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80062bc:	480b      	ldr	r0, [pc, #44]	; (80062ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80062be:	4b0c      	ldr	r3, [pc, #48]	; (80062f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80062c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80062c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80062c4:	d3f6      	bcc.n	80062b4 <CopyDataInit>
  ldr  r2, =_sbss
 80062c6:	4a0b      	ldr	r2, [pc, #44]	; (80062f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80062c8:	e002      	b.n	80062d0 <LoopFillZerobss>

080062ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80062ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80062cc:	f842 3b04 	str.w	r3, [r2], #4

080062d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80062d0:	4b09      	ldr	r3, [pc, #36]	; (80062f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80062d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80062d4:	d3f9      	bcc.n	80062ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80062d6:	f7ff f9e1 	bl	800569c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80062da:	f001 fac1 	bl	8007860 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80062de:	f7ff f897 	bl	8005410 <main>
  bx  lr    
 80062e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80062e4:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 80062e8:	080099e8 	.word	0x080099e8
  ldr  r0, =_sdata
 80062ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80062f0:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 80062f4:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80062f8:	200002c8 	.word	0x200002c8

080062fc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80062fc:	e7fe      	b.n	80062fc <CAN1_RX0_IRQHandler>

080062fe <_ZdlPv>:
 80062fe:	f001 badb 	b.w	80078b8 <free>

08006302 <_ZdlPvj>:
 8006302:	f7ff bffc 	b.w	80062fe <_ZdlPv>

08006306 <_Znwj>:
 8006306:	b510      	push	{r4, lr}
 8006308:	2800      	cmp	r0, #0
 800630a:	bf14      	ite	ne
 800630c:	4604      	movne	r4, r0
 800630e:	2401      	moveq	r4, #1
 8006310:	4620      	mov	r0, r4
 8006312:	f001 fac9 	bl	80078a8 <malloc>
 8006316:	b930      	cbnz	r0, 8006326 <_Znwj+0x20>
 8006318:	f000 f8ba 	bl	8006490 <_ZSt15get_new_handlerv>
 800631c:	b908      	cbnz	r0, 8006322 <_Znwj+0x1c>
 800631e:	f001 fa92 	bl	8007846 <abort>
 8006322:	4780      	blx	r0
 8006324:	e7f4      	b.n	8006310 <_Znwj+0xa>
 8006326:	bd10      	pop	{r4, pc}

08006328 <fmodl>:
 8006328:	f000 ba4e 	b.w	80067c8 <fmod>

0800632c <_ZSt17__throw_bad_allocv>:
 800632c:	b508      	push	{r3, lr}
 800632e:	f001 fa8a 	bl	8007846 <abort>

08006332 <_ZSt19__throw_logic_errorPKc>:
 8006332:	b508      	push	{r3, lr}
 8006334:	f001 fa87 	bl	8007846 <abort>

08006338 <_ZSt20__throw_length_errorPKc>:
 8006338:	b508      	push	{r3, lr}
 800633a:	f001 fa84 	bl	8007846 <abort>

0800633e <_ZSt24__throw_out_of_range_fmtPKcz>:
 800633e:	b40f      	push	{r0, r1, r2, r3}
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	f107 0410 	add.w	r4, r7, #16
 800634a:	f854 5b04 	ldr.w	r5, [r4], #4
 800634e:	4628      	mov	r0, r5
 8006350:	f7f9 ff5a 	bl	8000208 <strlen>
 8006354:	f200 230e 	addw	r3, r0, #526	; 0x20e
 8006358:	f023 0307 	bic.w	r3, r3, #7
 800635c:	ebad 0d03 	sub.w	sp, sp, r3
 8006360:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8006364:	4623      	mov	r3, r4
 8006366:	462a      	mov	r2, r5
 8006368:	4668      	mov	r0, sp
 800636a:	607c      	str	r4, [r7, #4]
 800636c:	f000 f850 	bl	8006410 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8006370:	f001 fa69 	bl	8007846 <abort>

08006374 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8006374:	b580      	push	{r7, lr}
 8006376:	b09c      	sub	sp, #112	; 0x70
 8006378:	af00      	add	r7, sp, #0
 800637a:	1a0e      	subs	r6, r1, r0
 800637c:	4680      	mov	r8, r0
 800637e:	2269      	movs	r2, #105	; 0x69
 8006380:	490e      	ldr	r1, [pc, #56]	; (80063bc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8006382:	1d38      	adds	r0, r7, #4
 8006384:	f001 faa0 	bl	80078c8 <memcpy>
 8006388:	f106 0377 	add.w	r3, r6, #119	; 0x77
 800638c:	f023 0307 	bic.w	r3, r3, #7
 8006390:	ebad 0d03 	sub.w	sp, sp, r3
 8006394:	466c      	mov	r4, sp
 8006396:	2268      	movs	r2, #104	; 0x68
 8006398:	1d39      	adds	r1, r7, #4
 800639a:	1c75      	adds	r5, r6, #1
 800639c:	4620      	mov	r0, r4
 800639e:	f001 fa93 	bl	80078c8 <memcpy>
 80063a2:	4425      	add	r5, r4
 80063a4:	4632      	mov	r2, r6
 80063a6:	4641      	mov	r1, r8
 80063a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80063ac:	f001 fa8c 	bl	80078c8 <memcpy>
 80063b0:	2300      	movs	r3, #0
 80063b2:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 80063b6:	4620      	mov	r0, r4
 80063b8:	f7ff ffbb 	bl	8006332 <_ZSt19__throw_logic_errorPKc>
 80063bc:	08009552 	.word	0x08009552

080063c0 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 80063c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	b086      	sub	sp, #24
 80063c6:	466d      	mov	r5, sp
 80063c8:	f105 040c 	add.w	r4, r5, #12
 80063cc:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800640c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 80063d0:	4623      	mov	r3, r4
 80063d2:	f04f 0c0a 	mov.w	ip, #10
 80063d6:	fbb2 f6fc 	udiv	r6, r2, ip
 80063da:	fb0c 2216 	mls	r2, ip, r6, r2
 80063de:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80063e2:	f803 2d01 	strb.w	r2, [r3, #-1]!
 80063e6:	4632      	mov	r2, r6
 80063e8:	2e00      	cmp	r6, #0
 80063ea:	d1f4      	bne.n	80063d6 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 80063ec:	1ae4      	subs	r4, r4, r3
 80063ee:	428c      	cmp	r4, r1
 80063f0:	d808      	bhi.n	8006404 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 80063f2:	f1c4 010c 	rsb	r1, r4, #12
 80063f6:	4622      	mov	r2, r4
 80063f8:	4429      	add	r1, r5
 80063fa:	f001 fa65 	bl	80078c8 <memcpy>
 80063fe:	4620      	mov	r0, r4
 8006400:	46bd      	mov	sp, r7
 8006402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006404:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006408:	e7f9      	b.n	80063fe <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 800640a:	bf00      	nop
 800640c:	08009547 	.word	0x08009547

08006410 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8006410:	3901      	subs	r1, #1
 8006412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006416:	4606      	mov	r6, r0
 8006418:	4615      	mov	r5, r2
 800641a:	1847      	adds	r7, r0, r1
 800641c:	4604      	mov	r4, r0
 800641e:	782a      	ldrb	r2, [r5, #0]
 8006420:	b392      	cbz	r2, 8006488 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x78>
 8006422:	42bc      	cmp	r4, r7
 8006424:	d22c      	bcs.n	8006480 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 8006426:	2a25      	cmp	r2, #37	; 0x25
 8006428:	d107      	bne.n	800643a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 800642a:	786a      	ldrb	r2, [r5, #1]
 800642c:	2a73      	cmp	r2, #115	; 0x73
 800642e:	d009      	beq.n	8006444 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x34>
 8006430:	2a7a      	cmp	r2, #122	; 0x7a
 8006432:	d012      	beq.n	800645a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4a>
 8006434:	2a25      	cmp	r2, #37	; 0x25
 8006436:	d100      	bne.n	800643a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8006438:	3501      	adds	r5, #1
 800643a:	782a      	ldrb	r2, [r5, #0]
 800643c:	7022      	strb	r2, [r4, #0]
 800643e:	3501      	adds	r5, #1
 8006440:	3401      	adds	r4, #1
 8006442:	e7ec      	b.n	800641e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8006444:	1d19      	adds	r1, r3, #4
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3b01      	subs	r3, #1
 800644a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800644e:	b1a2      	cbz	r2, 800647a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6a>
 8006450:	42bc      	cmp	r4, r7
 8006452:	d015      	beq.n	8006480 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 8006454:	f804 2b01 	strb.w	r2, [r4], #1
 8006458:	e7f7      	b.n	800644a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3a>
 800645a:	78aa      	ldrb	r2, [r5, #2]
 800645c:	2a75      	cmp	r2, #117	; 0x75
 800645e:	d1ec      	bne.n	800643a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	1b39      	subs	r1, r7, r4
 8006464:	4620      	mov	r0, r4
 8006466:	f103 0804 	add.w	r8, r3, #4
 800646a:	f7ff ffa9 	bl	80063c0 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 800646e:	2800      	cmp	r0, #0
 8006470:	dd06      	ble.n	8006480 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 8006472:	4404      	add	r4, r0
 8006474:	3503      	adds	r5, #3
 8006476:	4643      	mov	r3, r8
 8006478:	e7d1      	b.n	800641e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 800647a:	3502      	adds	r5, #2
 800647c:	460b      	mov	r3, r1
 800647e:	e7ce      	b.n	800641e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8006480:	4621      	mov	r1, r4
 8006482:	4630      	mov	r0, r6
 8006484:	f7ff ff76 	bl	8006374 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8006488:	7022      	strb	r2, [r4, #0]
 800648a:	1ba0      	subs	r0, r4, r6
 800648c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006490 <_ZSt15get_new_handlerv>:
 8006490:	4b02      	ldr	r3, [pc, #8]	; (800649c <_ZSt15get_new_handlerv+0xc>)
 8006492:	6818      	ldr	r0, [r3, #0]
 8006494:	f3bf 8f5b 	dmb	ish
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	200002b4 	.word	0x200002b4

080064a0 <cos>:
 80064a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80064a2:	ec51 0b10 	vmov	r0, r1, d0
 80064a6:	4a1e      	ldr	r2, [pc, #120]	; (8006520 <cos+0x80>)
 80064a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80064ac:	4293      	cmp	r3, r2
 80064ae:	dc06      	bgt.n	80064be <cos+0x1e>
 80064b0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8006518 <cos+0x78>
 80064b4:	f000 fcf4 	bl	8006ea0 <__kernel_cos>
 80064b8:	ec51 0b10 	vmov	r0, r1, d0
 80064bc:	e007      	b.n	80064ce <cos+0x2e>
 80064be:	4a19      	ldr	r2, [pc, #100]	; (8006524 <cos+0x84>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	dd09      	ble.n	80064d8 <cos+0x38>
 80064c4:	ee10 2a10 	vmov	r2, s0
 80064c8:	460b      	mov	r3, r1
 80064ca:	f7f9 fea9 	bl	8000220 <__aeabi_dsub>
 80064ce:	ec41 0b10 	vmov	d0, r0, r1
 80064d2:	b005      	add	sp, #20
 80064d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80064d8:	4668      	mov	r0, sp
 80064da:	f000 faed 	bl	8006ab8 <__ieee754_rem_pio2>
 80064de:	f000 0003 	and.w	r0, r0, #3
 80064e2:	2801      	cmp	r0, #1
 80064e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80064e8:	ed9d 0b00 	vldr	d0, [sp]
 80064ec:	d007      	beq.n	80064fe <cos+0x5e>
 80064ee:	2802      	cmp	r0, #2
 80064f0:	d00e      	beq.n	8006510 <cos+0x70>
 80064f2:	2800      	cmp	r0, #0
 80064f4:	d0de      	beq.n	80064b4 <cos+0x14>
 80064f6:	2001      	movs	r0, #1
 80064f8:	f001 f8da 	bl	80076b0 <__kernel_sin>
 80064fc:	e7dc      	b.n	80064b8 <cos+0x18>
 80064fe:	f001 f8d7 	bl	80076b0 <__kernel_sin>
 8006502:	ec53 2b10 	vmov	r2, r3, d0
 8006506:	ee10 0a10 	vmov	r0, s0
 800650a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800650e:	e7de      	b.n	80064ce <cos+0x2e>
 8006510:	f000 fcc6 	bl	8006ea0 <__kernel_cos>
 8006514:	e7f5      	b.n	8006502 <cos+0x62>
 8006516:	bf00      	nop
	...
 8006520:	3fe921fb 	.word	0x3fe921fb
 8006524:	7fefffff 	.word	0x7fefffff

08006528 <fabs>:
 8006528:	ec51 0b10 	vmov	r0, r1, d0
 800652c:	ee10 2a10 	vmov	r2, s0
 8006530:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006534:	ec43 2b10 	vmov	d0, r2, r3
 8006538:	4770      	bx	lr
 800653a:	0000      	movs	r0, r0
 800653c:	0000      	movs	r0, r0
	...

08006540 <floor>:
 8006540:	ec51 0b10 	vmov	r0, r1, d0
 8006544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006548:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800654c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006550:	2e13      	cmp	r6, #19
 8006552:	460c      	mov	r4, r1
 8006554:	ee10 5a10 	vmov	r5, s0
 8006558:	4680      	mov	r8, r0
 800655a:	dc34      	bgt.n	80065c6 <floor+0x86>
 800655c:	2e00      	cmp	r6, #0
 800655e:	da16      	bge.n	800658e <floor+0x4e>
 8006560:	a335      	add	r3, pc, #212	; (adr r3, 8006638 <floor+0xf8>)
 8006562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006566:	f7f9 fe5d 	bl	8000224 <__adddf3>
 800656a:	2200      	movs	r2, #0
 800656c:	2300      	movs	r3, #0
 800656e:	f7fa fa9f 	bl	8000ab0 <__aeabi_dcmpgt>
 8006572:	b148      	cbz	r0, 8006588 <floor+0x48>
 8006574:	2c00      	cmp	r4, #0
 8006576:	da59      	bge.n	800662c <floor+0xec>
 8006578:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800657c:	4a30      	ldr	r2, [pc, #192]	; (8006640 <floor+0x100>)
 800657e:	432b      	orrs	r3, r5
 8006580:	2500      	movs	r5, #0
 8006582:	42ab      	cmp	r3, r5
 8006584:	bf18      	it	ne
 8006586:	4614      	movne	r4, r2
 8006588:	4621      	mov	r1, r4
 800658a:	4628      	mov	r0, r5
 800658c:	e025      	b.n	80065da <floor+0x9a>
 800658e:	4f2d      	ldr	r7, [pc, #180]	; (8006644 <floor+0x104>)
 8006590:	4137      	asrs	r7, r6
 8006592:	ea01 0307 	and.w	r3, r1, r7
 8006596:	4303      	orrs	r3, r0
 8006598:	d01f      	beq.n	80065da <floor+0x9a>
 800659a:	a327      	add	r3, pc, #156	; (adr r3, 8006638 <floor+0xf8>)
 800659c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a0:	f7f9 fe40 	bl	8000224 <__adddf3>
 80065a4:	2200      	movs	r2, #0
 80065a6:	2300      	movs	r3, #0
 80065a8:	f7fa fa82 	bl	8000ab0 <__aeabi_dcmpgt>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	d0eb      	beq.n	8006588 <floor+0x48>
 80065b0:	2c00      	cmp	r4, #0
 80065b2:	bfbe      	ittt	lt
 80065b4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80065b8:	fa43 f606 	asrlt.w	r6, r3, r6
 80065bc:	19a4      	addlt	r4, r4, r6
 80065be:	ea24 0407 	bic.w	r4, r4, r7
 80065c2:	2500      	movs	r5, #0
 80065c4:	e7e0      	b.n	8006588 <floor+0x48>
 80065c6:	2e33      	cmp	r6, #51	; 0x33
 80065c8:	dd0b      	ble.n	80065e2 <floor+0xa2>
 80065ca:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80065ce:	d104      	bne.n	80065da <floor+0x9a>
 80065d0:	ee10 2a10 	vmov	r2, s0
 80065d4:	460b      	mov	r3, r1
 80065d6:	f7f9 fe25 	bl	8000224 <__adddf3>
 80065da:	ec41 0b10 	vmov	d0, r0, r1
 80065de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065e2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80065e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065ea:	fa23 f707 	lsr.w	r7, r3, r7
 80065ee:	4207      	tst	r7, r0
 80065f0:	d0f3      	beq.n	80065da <floor+0x9a>
 80065f2:	a311      	add	r3, pc, #68	; (adr r3, 8006638 <floor+0xf8>)
 80065f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f8:	f7f9 fe14 	bl	8000224 <__adddf3>
 80065fc:	2200      	movs	r2, #0
 80065fe:	2300      	movs	r3, #0
 8006600:	f7fa fa56 	bl	8000ab0 <__aeabi_dcmpgt>
 8006604:	2800      	cmp	r0, #0
 8006606:	d0bf      	beq.n	8006588 <floor+0x48>
 8006608:	2c00      	cmp	r4, #0
 800660a:	da02      	bge.n	8006612 <floor+0xd2>
 800660c:	2e14      	cmp	r6, #20
 800660e:	d103      	bne.n	8006618 <floor+0xd8>
 8006610:	3401      	adds	r4, #1
 8006612:	ea25 0507 	bic.w	r5, r5, r7
 8006616:	e7b7      	b.n	8006588 <floor+0x48>
 8006618:	2301      	movs	r3, #1
 800661a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800661e:	fa03 f606 	lsl.w	r6, r3, r6
 8006622:	4435      	add	r5, r6
 8006624:	4545      	cmp	r5, r8
 8006626:	bf38      	it	cc
 8006628:	18e4      	addcc	r4, r4, r3
 800662a:	e7f2      	b.n	8006612 <floor+0xd2>
 800662c:	2500      	movs	r5, #0
 800662e:	462c      	mov	r4, r5
 8006630:	e7aa      	b.n	8006588 <floor+0x48>
 8006632:	bf00      	nop
 8006634:	f3af 8000 	nop.w
 8006638:	8800759c 	.word	0x8800759c
 800663c:	7e37e43c 	.word	0x7e37e43c
 8006640:	bff00000 	.word	0xbff00000
 8006644:	000fffff 	.word	0x000fffff

08006648 <scalbn>:
 8006648:	b570      	push	{r4, r5, r6, lr}
 800664a:	ec55 4b10 	vmov	r4, r5, d0
 800664e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006652:	4606      	mov	r6, r0
 8006654:	462b      	mov	r3, r5
 8006656:	b9aa      	cbnz	r2, 8006684 <scalbn+0x3c>
 8006658:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800665c:	4323      	orrs	r3, r4
 800665e:	d03b      	beq.n	80066d8 <scalbn+0x90>
 8006660:	4b31      	ldr	r3, [pc, #196]	; (8006728 <scalbn+0xe0>)
 8006662:	4629      	mov	r1, r5
 8006664:	2200      	movs	r2, #0
 8006666:	ee10 0a10 	vmov	r0, s0
 800666a:	f7f9 ff91 	bl	8000590 <__aeabi_dmul>
 800666e:	4b2f      	ldr	r3, [pc, #188]	; (800672c <scalbn+0xe4>)
 8006670:	429e      	cmp	r6, r3
 8006672:	4604      	mov	r4, r0
 8006674:	460d      	mov	r5, r1
 8006676:	da12      	bge.n	800669e <scalbn+0x56>
 8006678:	a327      	add	r3, pc, #156	; (adr r3, 8006718 <scalbn+0xd0>)
 800667a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667e:	f7f9 ff87 	bl	8000590 <__aeabi_dmul>
 8006682:	e009      	b.n	8006698 <scalbn+0x50>
 8006684:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006688:	428a      	cmp	r2, r1
 800668a:	d10c      	bne.n	80066a6 <scalbn+0x5e>
 800668c:	ee10 2a10 	vmov	r2, s0
 8006690:	4620      	mov	r0, r4
 8006692:	4629      	mov	r1, r5
 8006694:	f7f9 fdc6 	bl	8000224 <__adddf3>
 8006698:	4604      	mov	r4, r0
 800669a:	460d      	mov	r5, r1
 800669c:	e01c      	b.n	80066d8 <scalbn+0x90>
 800669e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80066a2:	460b      	mov	r3, r1
 80066a4:	3a36      	subs	r2, #54	; 0x36
 80066a6:	4432      	add	r2, r6
 80066a8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80066ac:	428a      	cmp	r2, r1
 80066ae:	dd0b      	ble.n	80066c8 <scalbn+0x80>
 80066b0:	ec45 4b11 	vmov	d1, r4, r5
 80066b4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006720 <scalbn+0xd8>
 80066b8:	f001 f8b4 	bl	8007824 <copysign>
 80066bc:	a318      	add	r3, pc, #96	; (adr r3, 8006720 <scalbn+0xd8>)
 80066be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c2:	ec51 0b10 	vmov	r0, r1, d0
 80066c6:	e7da      	b.n	800667e <scalbn+0x36>
 80066c8:	2a00      	cmp	r2, #0
 80066ca:	dd08      	ble.n	80066de <scalbn+0x96>
 80066cc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80066d0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80066d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80066d8:	ec45 4b10 	vmov	d0, r4, r5
 80066dc:	bd70      	pop	{r4, r5, r6, pc}
 80066de:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80066e2:	da0d      	bge.n	8006700 <scalbn+0xb8>
 80066e4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80066e8:	429e      	cmp	r6, r3
 80066ea:	ec45 4b11 	vmov	d1, r4, r5
 80066ee:	dce1      	bgt.n	80066b4 <scalbn+0x6c>
 80066f0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006718 <scalbn+0xd0>
 80066f4:	f001 f896 	bl	8007824 <copysign>
 80066f8:	a307      	add	r3, pc, #28	; (adr r3, 8006718 <scalbn+0xd0>)
 80066fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fe:	e7e0      	b.n	80066c2 <scalbn+0x7a>
 8006700:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006704:	3236      	adds	r2, #54	; 0x36
 8006706:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800670a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800670e:	4620      	mov	r0, r4
 8006710:	4629      	mov	r1, r5
 8006712:	2200      	movs	r2, #0
 8006714:	4b06      	ldr	r3, [pc, #24]	; (8006730 <scalbn+0xe8>)
 8006716:	e7b2      	b.n	800667e <scalbn+0x36>
 8006718:	c2f8f359 	.word	0xc2f8f359
 800671c:	01a56e1f 	.word	0x01a56e1f
 8006720:	8800759c 	.word	0x8800759c
 8006724:	7e37e43c 	.word	0x7e37e43c
 8006728:	43500000 	.word	0x43500000
 800672c:	ffff3cb0 	.word	0xffff3cb0
 8006730:	3c900000 	.word	0x3c900000
 8006734:	00000000 	.word	0x00000000

08006738 <sin>:
 8006738:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800673a:	ec51 0b10 	vmov	r0, r1, d0
 800673e:	4a20      	ldr	r2, [pc, #128]	; (80067c0 <sin+0x88>)
 8006740:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006744:	4293      	cmp	r3, r2
 8006746:	dc07      	bgt.n	8006758 <sin+0x20>
 8006748:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80067b8 <sin+0x80>
 800674c:	2000      	movs	r0, #0
 800674e:	f000 ffaf 	bl	80076b0 <__kernel_sin>
 8006752:	ec51 0b10 	vmov	r0, r1, d0
 8006756:	e007      	b.n	8006768 <sin+0x30>
 8006758:	4a1a      	ldr	r2, [pc, #104]	; (80067c4 <sin+0x8c>)
 800675a:	4293      	cmp	r3, r2
 800675c:	dd09      	ble.n	8006772 <sin+0x3a>
 800675e:	ee10 2a10 	vmov	r2, s0
 8006762:	460b      	mov	r3, r1
 8006764:	f7f9 fd5c 	bl	8000220 <__aeabi_dsub>
 8006768:	ec41 0b10 	vmov	d0, r0, r1
 800676c:	b005      	add	sp, #20
 800676e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006772:	4668      	mov	r0, sp
 8006774:	f000 f9a0 	bl	8006ab8 <__ieee754_rem_pio2>
 8006778:	f000 0003 	and.w	r0, r0, #3
 800677c:	2801      	cmp	r0, #1
 800677e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006782:	ed9d 0b00 	vldr	d0, [sp]
 8006786:	d004      	beq.n	8006792 <sin+0x5a>
 8006788:	2802      	cmp	r0, #2
 800678a:	d005      	beq.n	8006798 <sin+0x60>
 800678c:	b970      	cbnz	r0, 80067ac <sin+0x74>
 800678e:	2001      	movs	r0, #1
 8006790:	e7dd      	b.n	800674e <sin+0x16>
 8006792:	f000 fb85 	bl	8006ea0 <__kernel_cos>
 8006796:	e7dc      	b.n	8006752 <sin+0x1a>
 8006798:	2001      	movs	r0, #1
 800679a:	f000 ff89 	bl	80076b0 <__kernel_sin>
 800679e:	ec53 2b10 	vmov	r2, r3, d0
 80067a2:	ee10 0a10 	vmov	r0, s0
 80067a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80067aa:	e7dd      	b.n	8006768 <sin+0x30>
 80067ac:	f000 fb78 	bl	8006ea0 <__kernel_cos>
 80067b0:	e7f5      	b.n	800679e <sin+0x66>
 80067b2:	bf00      	nop
 80067b4:	f3af 8000 	nop.w
	...
 80067c0:	3fe921fb 	.word	0x3fe921fb
 80067c4:	7fefffff 	.word	0x7fefffff

080067c8 <fmod>:
 80067c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067cc:	ed2d 8b02 	vpush	{d8}
 80067d0:	b08b      	sub	sp, #44	; 0x2c
 80067d2:	ec55 4b10 	vmov	r4, r5, d0
 80067d6:	ec57 6b11 	vmov	r6, r7, d1
 80067da:	f000 f859 	bl	8006890 <__ieee754_fmod>
 80067de:	4b2a      	ldr	r3, [pc, #168]	; (8006888 <fmod+0xc0>)
 80067e0:	eeb0 8a40 	vmov.f32	s16, s0
 80067e4:	eef0 8a60 	vmov.f32	s17, s1
 80067e8:	f993 8000 	ldrsb.w	r8, [r3]
 80067ec:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80067f0:	d030      	beq.n	8006854 <fmod+0x8c>
 80067f2:	4632      	mov	r2, r6
 80067f4:	463b      	mov	r3, r7
 80067f6:	4630      	mov	r0, r6
 80067f8:	4639      	mov	r1, r7
 80067fa:	f7fa f963 	bl	8000ac4 <__aeabi_dcmpun>
 80067fe:	bb48      	cbnz	r0, 8006854 <fmod+0x8c>
 8006800:	4622      	mov	r2, r4
 8006802:	462b      	mov	r3, r5
 8006804:	4620      	mov	r0, r4
 8006806:	4629      	mov	r1, r5
 8006808:	f7fa f95c 	bl	8000ac4 <__aeabi_dcmpun>
 800680c:	4681      	mov	r9, r0
 800680e:	bb08      	cbnz	r0, 8006854 <fmod+0x8c>
 8006810:	2200      	movs	r2, #0
 8006812:	2300      	movs	r3, #0
 8006814:	4630      	mov	r0, r6
 8006816:	4639      	mov	r1, r7
 8006818:	f7fa f922 	bl	8000a60 <__aeabi_dcmpeq>
 800681c:	b1d0      	cbz	r0, 8006854 <fmod+0x8c>
 800681e:	2301      	movs	r3, #1
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	4b1a      	ldr	r3, [pc, #104]	; (800688c <fmod+0xc4>)
 8006824:	9301      	str	r3, [sp, #4]
 8006826:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800682a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800682e:	f8cd 9020 	str.w	r9, [sp, #32]
 8006832:	f1b8 0f00 	cmp.w	r8, #0
 8006836:	d116      	bne.n	8006866 <fmod+0x9e>
 8006838:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800683c:	4668      	mov	r0, sp
 800683e:	f001 f800 	bl	8007842 <matherr>
 8006842:	b1d8      	cbz	r0, 800687c <fmod+0xb4>
 8006844:	9b08      	ldr	r3, [sp, #32]
 8006846:	b11b      	cbz	r3, 8006850 <fmod+0x88>
 8006848:	f001 f804 	bl	8007854 <__errno>
 800684c:	9b08      	ldr	r3, [sp, #32]
 800684e:	6003      	str	r3, [r0, #0]
 8006850:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006854:	eeb0 0a48 	vmov.f32	s0, s16
 8006858:	eef0 0a68 	vmov.f32	s1, s17
 800685c:	b00b      	add	sp, #44	; 0x2c
 800685e:	ecbd 8b02 	vpop	{d8}
 8006862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006866:	2200      	movs	r2, #0
 8006868:	2300      	movs	r3, #0
 800686a:	4610      	mov	r0, r2
 800686c:	4619      	mov	r1, r3
 800686e:	f7f9 ffb9 	bl	80007e4 <__aeabi_ddiv>
 8006872:	f1b8 0f02 	cmp.w	r8, #2
 8006876:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800687a:	d1df      	bne.n	800683c <fmod+0x74>
 800687c:	f000 ffea 	bl	8007854 <__errno>
 8006880:	2321      	movs	r3, #33	; 0x21
 8006882:	6003      	str	r3, [r0, #0]
 8006884:	e7de      	b.n	8006844 <fmod+0x7c>
 8006886:	bf00      	nop
 8006888:	2000000c 	.word	0x2000000c
 800688c:	080095bb 	.word	0x080095bb

08006890 <__ieee754_fmod>:
 8006890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006894:	ec53 2b11 	vmov	r2, r3, d1
 8006898:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800689c:	ea5e 0402 	orrs.w	r4, lr, r2
 80068a0:	ec51 0b10 	vmov	r0, r1, d0
 80068a4:	461e      	mov	r6, r3
 80068a6:	ee11 5a10 	vmov	r5, s2
 80068aa:	4694      	mov	ip, r2
 80068ac:	d00c      	beq.n	80068c8 <__ieee754_fmod+0x38>
 80068ae:	4c7a      	ldr	r4, [pc, #488]	; (8006a98 <__ieee754_fmod+0x208>)
 80068b0:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 80068b4:	45a0      	cmp	r8, r4
 80068b6:	4689      	mov	r9, r1
 80068b8:	dc06      	bgt.n	80068c8 <__ieee754_fmod+0x38>
 80068ba:	4254      	negs	r4, r2
 80068bc:	4314      	orrs	r4, r2
 80068be:	4f77      	ldr	r7, [pc, #476]	; (8006a9c <__ieee754_fmod+0x20c>)
 80068c0:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 80068c4:	42bc      	cmp	r4, r7
 80068c6:	d909      	bls.n	80068dc <__ieee754_fmod+0x4c>
 80068c8:	f7f9 fe62 	bl	8000590 <__aeabi_dmul>
 80068cc:	4602      	mov	r2, r0
 80068ce:	460b      	mov	r3, r1
 80068d0:	f7f9 ff88 	bl	80007e4 <__aeabi_ddiv>
 80068d4:	ec41 0b10 	vmov	d0, r0, r1
 80068d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068dc:	45f0      	cmp	r8, lr
 80068de:	ee10 2a10 	vmov	r2, s0
 80068e2:	4607      	mov	r7, r0
 80068e4:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 80068e8:	dc0a      	bgt.n	8006900 <__ieee754_fmod+0x70>
 80068ea:	dbf3      	blt.n	80068d4 <__ieee754_fmod+0x44>
 80068ec:	42a8      	cmp	r0, r5
 80068ee:	d3f1      	bcc.n	80068d4 <__ieee754_fmod+0x44>
 80068f0:	d106      	bne.n	8006900 <__ieee754_fmod+0x70>
 80068f2:	496b      	ldr	r1, [pc, #428]	; (8006aa0 <__ieee754_fmod+0x210>)
 80068f4:	0fe4      	lsrs	r4, r4, #31
 80068f6:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80068fa:	e9d4 0100 	ldrd	r0, r1, [r4]
 80068fe:	e7e9      	b.n	80068d4 <__ieee754_fmod+0x44>
 8006900:	4b68      	ldr	r3, [pc, #416]	; (8006aa4 <__ieee754_fmod+0x214>)
 8006902:	4598      	cmp	r8, r3
 8006904:	dc49      	bgt.n	800699a <__ieee754_fmod+0x10a>
 8006906:	f1b8 0f00 	cmp.w	r8, #0
 800690a:	d13d      	bne.n	8006988 <__ieee754_fmod+0xf8>
 800690c:	4866      	ldr	r0, [pc, #408]	; (8006aa8 <__ieee754_fmod+0x218>)
 800690e:	4611      	mov	r1, r2
 8006910:	2900      	cmp	r1, #0
 8006912:	dc36      	bgt.n	8006982 <__ieee754_fmod+0xf2>
 8006914:	459e      	cmp	lr, r3
 8006916:	dc51      	bgt.n	80069bc <__ieee754_fmod+0x12c>
 8006918:	f1be 0f00 	cmp.w	lr, #0
 800691c:	d145      	bne.n	80069aa <__ieee754_fmod+0x11a>
 800691e:	4b62      	ldr	r3, [pc, #392]	; (8006aa8 <__ieee754_fmod+0x218>)
 8006920:	4629      	mov	r1, r5
 8006922:	2900      	cmp	r1, #0
 8006924:	dc3e      	bgt.n	80069a4 <__ieee754_fmod+0x114>
 8006926:	4961      	ldr	r1, [pc, #388]	; (8006aac <__ieee754_fmod+0x21c>)
 8006928:	4288      	cmp	r0, r1
 800692a:	db4c      	blt.n	80069c6 <__ieee754_fmod+0x136>
 800692c:	f3c9 0113 	ubfx	r1, r9, #0, #20
 8006930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006934:	4a5d      	ldr	r2, [pc, #372]	; (8006aac <__ieee754_fmod+0x21c>)
 8006936:	4293      	cmp	r3, r2
 8006938:	db59      	blt.n	80069ee <__ieee754_fmod+0x15e>
 800693a:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800693e:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8006942:	1ac0      	subs	r0, r0, r3
 8006944:	1b8a      	subs	r2, r1, r6
 8006946:	eba7 050c 	sub.w	r5, r7, ip
 800694a:	2800      	cmp	r0, #0
 800694c:	d166      	bne.n	8006a1c <__ieee754_fmod+0x18c>
 800694e:	4567      	cmp	r7, ip
 8006950:	bf38      	it	cc
 8006952:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 8006956:	2a00      	cmp	r2, #0
 8006958:	bfbc      	itt	lt
 800695a:	463d      	movlt	r5, r7
 800695c:	460a      	movlt	r2, r1
 800695e:	ea52 0105 	orrs.w	r1, r2, r5
 8006962:	d0c6      	beq.n	80068f2 <__ieee754_fmod+0x62>
 8006964:	494f      	ldr	r1, [pc, #316]	; (8006aa4 <__ieee754_fmod+0x214>)
 8006966:	428a      	cmp	r2, r1
 8006968:	dd6d      	ble.n	8006a46 <__ieee754_fmod+0x1b6>
 800696a:	4950      	ldr	r1, [pc, #320]	; (8006aac <__ieee754_fmod+0x21c>)
 800696c:	428b      	cmp	r3, r1
 800696e:	db70      	blt.n	8006a52 <__ieee754_fmod+0x1c2>
 8006970:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8006974:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8006978:	4314      	orrs	r4, r2
 800697a:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 800697e:	4628      	mov	r0, r5
 8006980:	e7a8      	b.n	80068d4 <__ieee754_fmod+0x44>
 8006982:	3801      	subs	r0, #1
 8006984:	0049      	lsls	r1, r1, #1
 8006986:	e7c3      	b.n	8006910 <__ieee754_fmod+0x80>
 8006988:	4848      	ldr	r0, [pc, #288]	; (8006aac <__ieee754_fmod+0x21c>)
 800698a:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 800698e:	0049      	lsls	r1, r1, #1
 8006990:	2900      	cmp	r1, #0
 8006992:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8006996:	dcfa      	bgt.n	800698e <__ieee754_fmod+0xfe>
 8006998:	e7bc      	b.n	8006914 <__ieee754_fmod+0x84>
 800699a:	ea4f 5028 	mov.w	r0, r8, asr #20
 800699e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80069a2:	e7b7      	b.n	8006914 <__ieee754_fmod+0x84>
 80069a4:	3b01      	subs	r3, #1
 80069a6:	0049      	lsls	r1, r1, #1
 80069a8:	e7bb      	b.n	8006922 <__ieee754_fmod+0x92>
 80069aa:	4b40      	ldr	r3, [pc, #256]	; (8006aac <__ieee754_fmod+0x21c>)
 80069ac:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 80069b0:	0049      	lsls	r1, r1, #1
 80069b2:	2900      	cmp	r1, #0
 80069b4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80069b8:	dcfa      	bgt.n	80069b0 <__ieee754_fmod+0x120>
 80069ba:	e7b4      	b.n	8006926 <__ieee754_fmod+0x96>
 80069bc:	ea4f 532e 	mov.w	r3, lr, asr #20
 80069c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80069c4:	e7af      	b.n	8006926 <__ieee754_fmod+0x96>
 80069c6:	1a0f      	subs	r7, r1, r0
 80069c8:	2f1f      	cmp	r7, #31
 80069ca:	dc0a      	bgt.n	80069e2 <__ieee754_fmod+0x152>
 80069cc:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 80069d0:	fa08 f807 	lsl.w	r8, r8, r7
 80069d4:	fa22 f101 	lsr.w	r1, r2, r1
 80069d8:	ea41 0108 	orr.w	r1, r1, r8
 80069dc:	fa02 f707 	lsl.w	r7, r2, r7
 80069e0:	e7a8      	b.n	8006934 <__ieee754_fmod+0xa4>
 80069e2:	4933      	ldr	r1, [pc, #204]	; (8006ab0 <__ieee754_fmod+0x220>)
 80069e4:	1a09      	subs	r1, r1, r0
 80069e6:	fa02 f101 	lsl.w	r1, r2, r1
 80069ea:	2700      	movs	r7, #0
 80069ec:	e7a2      	b.n	8006934 <__ieee754_fmod+0xa4>
 80069ee:	eba2 0c03 	sub.w	ip, r2, r3
 80069f2:	f1bc 0f1f 	cmp.w	ip, #31
 80069f6:	dc0a      	bgt.n	8006a0e <__ieee754_fmod+0x17e>
 80069f8:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 80069fc:	fa0e fe0c 	lsl.w	lr, lr, ip
 8006a00:	fa25 f606 	lsr.w	r6, r5, r6
 8006a04:	ea46 060e 	orr.w	r6, r6, lr
 8006a08:	fa05 fc0c 	lsl.w	ip, r5, ip
 8006a0c:	e799      	b.n	8006942 <__ieee754_fmod+0xb2>
 8006a0e:	4e28      	ldr	r6, [pc, #160]	; (8006ab0 <__ieee754_fmod+0x220>)
 8006a10:	1af6      	subs	r6, r6, r3
 8006a12:	fa05 f606 	lsl.w	r6, r5, r6
 8006a16:	f04f 0c00 	mov.w	ip, #0
 8006a1a:	e792      	b.n	8006942 <__ieee754_fmod+0xb2>
 8006a1c:	4567      	cmp	r7, ip
 8006a1e:	bf38      	it	cc
 8006a20:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 8006a24:	2a00      	cmp	r2, #0
 8006a26:	da05      	bge.n	8006a34 <__ieee754_fmod+0x1a4>
 8006a28:	0ffa      	lsrs	r2, r7, #31
 8006a2a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006a2e:	007f      	lsls	r7, r7, #1
 8006a30:	3801      	subs	r0, #1
 8006a32:	e787      	b.n	8006944 <__ieee754_fmod+0xb4>
 8006a34:	ea52 0105 	orrs.w	r1, r2, r5
 8006a38:	f43f af5b 	beq.w	80068f2 <__ieee754_fmod+0x62>
 8006a3c:	0fe9      	lsrs	r1, r5, #31
 8006a3e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8006a42:	006f      	lsls	r7, r5, #1
 8006a44:	e7f4      	b.n	8006a30 <__ieee754_fmod+0x1a0>
 8006a46:	0fe8      	lsrs	r0, r5, #31
 8006a48:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8006a4c:	006d      	lsls	r5, r5, #1
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	e789      	b.n	8006966 <__ieee754_fmod+0xd6>
 8006a52:	1ac9      	subs	r1, r1, r3
 8006a54:	2914      	cmp	r1, #20
 8006a56:	dc0a      	bgt.n	8006a6e <__ieee754_fmod+0x1de>
 8006a58:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8006a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a60:	40cd      	lsrs	r5, r1
 8006a62:	432b      	orrs	r3, r5
 8006a64:	410a      	asrs	r2, r1
 8006a66:	ea42 0104 	orr.w	r1, r2, r4
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	e732      	b.n	80068d4 <__ieee754_fmod+0x44>
 8006a6e:	291f      	cmp	r1, #31
 8006a70:	dc07      	bgt.n	8006a82 <__ieee754_fmod+0x1f2>
 8006a72:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8006a76:	40cd      	lsrs	r5, r1
 8006a78:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7c:	432b      	orrs	r3, r5
 8006a7e:	4622      	mov	r2, r4
 8006a80:	e7f1      	b.n	8006a66 <__ieee754_fmod+0x1d6>
 8006a82:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8006a86:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8006a8a:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8006a8e:	33e2      	adds	r3, #226	; 0xe2
 8006a90:	fa42 f303 	asr.w	r3, r2, r3
 8006a94:	e7f3      	b.n	8006a7e <__ieee754_fmod+0x1ee>
 8006a96:	bf00      	nop
 8006a98:	7fefffff 	.word	0x7fefffff
 8006a9c:	7ff00000 	.word	0x7ff00000
 8006aa0:	080095c0 	.word	0x080095c0
 8006aa4:	000fffff 	.word	0x000fffff
 8006aa8:	fffffbed 	.word	0xfffffbed
 8006aac:	fffffc02 	.word	0xfffffc02
 8006ab0:	fffffbe2 	.word	0xfffffbe2
 8006ab4:	00000000 	.word	0x00000000

08006ab8 <__ieee754_rem_pio2>:
 8006ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006abc:	ec57 6b10 	vmov	r6, r7, d0
 8006ac0:	4bc3      	ldr	r3, [pc, #780]	; (8006dd0 <__ieee754_rem_pio2+0x318>)
 8006ac2:	b08d      	sub	sp, #52	; 0x34
 8006ac4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006ac8:	4598      	cmp	r8, r3
 8006aca:	4604      	mov	r4, r0
 8006acc:	9704      	str	r7, [sp, #16]
 8006ace:	dc07      	bgt.n	8006ae0 <__ieee754_rem_pio2+0x28>
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	ed84 0b00 	vstr	d0, [r4]
 8006ad8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006adc:	2500      	movs	r5, #0
 8006ade:	e027      	b.n	8006b30 <__ieee754_rem_pio2+0x78>
 8006ae0:	4bbc      	ldr	r3, [pc, #752]	; (8006dd4 <__ieee754_rem_pio2+0x31c>)
 8006ae2:	4598      	cmp	r8, r3
 8006ae4:	dc75      	bgt.n	8006bd2 <__ieee754_rem_pio2+0x11a>
 8006ae6:	9b04      	ldr	r3, [sp, #16]
 8006ae8:	4dbb      	ldr	r5, [pc, #748]	; (8006dd8 <__ieee754_rem_pio2+0x320>)
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	ee10 0a10 	vmov	r0, s0
 8006af0:	a3a9      	add	r3, pc, #676	; (adr r3, 8006d98 <__ieee754_rem_pio2+0x2e0>)
 8006af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af6:	4639      	mov	r1, r7
 8006af8:	dd36      	ble.n	8006b68 <__ieee754_rem_pio2+0xb0>
 8006afa:	f7f9 fb91 	bl	8000220 <__aeabi_dsub>
 8006afe:	45a8      	cmp	r8, r5
 8006b00:	4606      	mov	r6, r0
 8006b02:	460f      	mov	r7, r1
 8006b04:	d018      	beq.n	8006b38 <__ieee754_rem_pio2+0x80>
 8006b06:	a3a6      	add	r3, pc, #664	; (adr r3, 8006da0 <__ieee754_rem_pio2+0x2e8>)
 8006b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0c:	f7f9 fb88 	bl	8000220 <__aeabi_dsub>
 8006b10:	4602      	mov	r2, r0
 8006b12:	460b      	mov	r3, r1
 8006b14:	e9c4 2300 	strd	r2, r3, [r4]
 8006b18:	4630      	mov	r0, r6
 8006b1a:	4639      	mov	r1, r7
 8006b1c:	f7f9 fb80 	bl	8000220 <__aeabi_dsub>
 8006b20:	a39f      	add	r3, pc, #636	; (adr r3, 8006da0 <__ieee754_rem_pio2+0x2e8>)
 8006b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b26:	f7f9 fb7b 	bl	8000220 <__aeabi_dsub>
 8006b2a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006b2e:	2501      	movs	r5, #1
 8006b30:	4628      	mov	r0, r5
 8006b32:	b00d      	add	sp, #52	; 0x34
 8006b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b38:	a39b      	add	r3, pc, #620	; (adr r3, 8006da8 <__ieee754_rem_pio2+0x2f0>)
 8006b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3e:	f7f9 fb6f 	bl	8000220 <__aeabi_dsub>
 8006b42:	a39b      	add	r3, pc, #620	; (adr r3, 8006db0 <__ieee754_rem_pio2+0x2f8>)
 8006b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b48:	4606      	mov	r6, r0
 8006b4a:	460f      	mov	r7, r1
 8006b4c:	f7f9 fb68 	bl	8000220 <__aeabi_dsub>
 8006b50:	4602      	mov	r2, r0
 8006b52:	460b      	mov	r3, r1
 8006b54:	e9c4 2300 	strd	r2, r3, [r4]
 8006b58:	4630      	mov	r0, r6
 8006b5a:	4639      	mov	r1, r7
 8006b5c:	f7f9 fb60 	bl	8000220 <__aeabi_dsub>
 8006b60:	a393      	add	r3, pc, #588	; (adr r3, 8006db0 <__ieee754_rem_pio2+0x2f8>)
 8006b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b66:	e7de      	b.n	8006b26 <__ieee754_rem_pio2+0x6e>
 8006b68:	f7f9 fb5c 	bl	8000224 <__adddf3>
 8006b6c:	45a8      	cmp	r8, r5
 8006b6e:	4606      	mov	r6, r0
 8006b70:	460f      	mov	r7, r1
 8006b72:	d016      	beq.n	8006ba2 <__ieee754_rem_pio2+0xea>
 8006b74:	a38a      	add	r3, pc, #552	; (adr r3, 8006da0 <__ieee754_rem_pio2+0x2e8>)
 8006b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7a:	f7f9 fb53 	bl	8000224 <__adddf3>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	460b      	mov	r3, r1
 8006b82:	e9c4 2300 	strd	r2, r3, [r4]
 8006b86:	4630      	mov	r0, r6
 8006b88:	4639      	mov	r1, r7
 8006b8a:	f7f9 fb49 	bl	8000220 <__aeabi_dsub>
 8006b8e:	a384      	add	r3, pc, #528	; (adr r3, 8006da0 <__ieee754_rem_pio2+0x2e8>)
 8006b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b94:	f7f9 fb46 	bl	8000224 <__adddf3>
 8006b98:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006b9c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006ba0:	e7c6      	b.n	8006b30 <__ieee754_rem_pio2+0x78>
 8006ba2:	a381      	add	r3, pc, #516	; (adr r3, 8006da8 <__ieee754_rem_pio2+0x2f0>)
 8006ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba8:	f7f9 fb3c 	bl	8000224 <__adddf3>
 8006bac:	a380      	add	r3, pc, #512	; (adr r3, 8006db0 <__ieee754_rem_pio2+0x2f8>)
 8006bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb2:	4606      	mov	r6, r0
 8006bb4:	460f      	mov	r7, r1
 8006bb6:	f7f9 fb35 	bl	8000224 <__adddf3>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	e9c4 2300 	strd	r2, r3, [r4]
 8006bc2:	4630      	mov	r0, r6
 8006bc4:	4639      	mov	r1, r7
 8006bc6:	f7f9 fb2b 	bl	8000220 <__aeabi_dsub>
 8006bca:	a379      	add	r3, pc, #484	; (adr r3, 8006db0 <__ieee754_rem_pio2+0x2f8>)
 8006bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd0:	e7e0      	b.n	8006b94 <__ieee754_rem_pio2+0xdc>
 8006bd2:	4b82      	ldr	r3, [pc, #520]	; (8006ddc <__ieee754_rem_pio2+0x324>)
 8006bd4:	4598      	cmp	r8, r3
 8006bd6:	f300 80d0 	bgt.w	8006d7a <__ieee754_rem_pio2+0x2c2>
 8006bda:	f7ff fca5 	bl	8006528 <fabs>
 8006bde:	ec57 6b10 	vmov	r6, r7, d0
 8006be2:	ee10 0a10 	vmov	r0, s0
 8006be6:	a374      	add	r3, pc, #464	; (adr r3, 8006db8 <__ieee754_rem_pio2+0x300>)
 8006be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bec:	4639      	mov	r1, r7
 8006bee:	f7f9 fccf 	bl	8000590 <__aeabi_dmul>
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	4b7a      	ldr	r3, [pc, #488]	; (8006de0 <__ieee754_rem_pio2+0x328>)
 8006bf6:	f7f9 fb15 	bl	8000224 <__adddf3>
 8006bfa:	f7f9 ff79 	bl	8000af0 <__aeabi_d2iz>
 8006bfe:	4605      	mov	r5, r0
 8006c00:	f7f9 fc5c 	bl	80004bc <__aeabi_i2d>
 8006c04:	a364      	add	r3, pc, #400	; (adr r3, 8006d98 <__ieee754_rem_pio2+0x2e0>)
 8006c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c0e:	f7f9 fcbf 	bl	8000590 <__aeabi_dmul>
 8006c12:	4602      	mov	r2, r0
 8006c14:	460b      	mov	r3, r1
 8006c16:	4630      	mov	r0, r6
 8006c18:	4639      	mov	r1, r7
 8006c1a:	f7f9 fb01 	bl	8000220 <__aeabi_dsub>
 8006c1e:	a360      	add	r3, pc, #384	; (adr r3, 8006da0 <__ieee754_rem_pio2+0x2e8>)
 8006c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c24:	4682      	mov	sl, r0
 8006c26:	468b      	mov	fp, r1
 8006c28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c2c:	f7f9 fcb0 	bl	8000590 <__aeabi_dmul>
 8006c30:	2d1f      	cmp	r5, #31
 8006c32:	4606      	mov	r6, r0
 8006c34:	460f      	mov	r7, r1
 8006c36:	dc0c      	bgt.n	8006c52 <__ieee754_rem_pio2+0x19a>
 8006c38:	1e6a      	subs	r2, r5, #1
 8006c3a:	4b6a      	ldr	r3, [pc, #424]	; (8006de4 <__ieee754_rem_pio2+0x32c>)
 8006c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c40:	4543      	cmp	r3, r8
 8006c42:	d006      	beq.n	8006c52 <__ieee754_rem_pio2+0x19a>
 8006c44:	4632      	mov	r2, r6
 8006c46:	463b      	mov	r3, r7
 8006c48:	4650      	mov	r0, sl
 8006c4a:	4659      	mov	r1, fp
 8006c4c:	f7f9 fae8 	bl	8000220 <__aeabi_dsub>
 8006c50:	e00e      	b.n	8006c70 <__ieee754_rem_pio2+0x1b8>
 8006c52:	4632      	mov	r2, r6
 8006c54:	463b      	mov	r3, r7
 8006c56:	4650      	mov	r0, sl
 8006c58:	4659      	mov	r1, fp
 8006c5a:	f7f9 fae1 	bl	8000220 <__aeabi_dsub>
 8006c5e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006c62:	9305      	str	r3, [sp, #20]
 8006c64:	9a05      	ldr	r2, [sp, #20]
 8006c66:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	2b10      	cmp	r3, #16
 8006c6e:	dc02      	bgt.n	8006c76 <__ieee754_rem_pio2+0x1be>
 8006c70:	e9c4 0100 	strd	r0, r1, [r4]
 8006c74:	e039      	b.n	8006cea <__ieee754_rem_pio2+0x232>
 8006c76:	a34c      	add	r3, pc, #304	; (adr r3, 8006da8 <__ieee754_rem_pio2+0x2f0>)
 8006c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c80:	f7f9 fc86 	bl	8000590 <__aeabi_dmul>
 8006c84:	4606      	mov	r6, r0
 8006c86:	460f      	mov	r7, r1
 8006c88:	4602      	mov	r2, r0
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	4650      	mov	r0, sl
 8006c8e:	4659      	mov	r1, fp
 8006c90:	f7f9 fac6 	bl	8000220 <__aeabi_dsub>
 8006c94:	4602      	mov	r2, r0
 8006c96:	460b      	mov	r3, r1
 8006c98:	4680      	mov	r8, r0
 8006c9a:	4689      	mov	r9, r1
 8006c9c:	4650      	mov	r0, sl
 8006c9e:	4659      	mov	r1, fp
 8006ca0:	f7f9 fabe 	bl	8000220 <__aeabi_dsub>
 8006ca4:	4632      	mov	r2, r6
 8006ca6:	463b      	mov	r3, r7
 8006ca8:	f7f9 faba 	bl	8000220 <__aeabi_dsub>
 8006cac:	a340      	add	r3, pc, #256	; (adr r3, 8006db0 <__ieee754_rem_pio2+0x2f8>)
 8006cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb2:	4606      	mov	r6, r0
 8006cb4:	460f      	mov	r7, r1
 8006cb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cba:	f7f9 fc69 	bl	8000590 <__aeabi_dmul>
 8006cbe:	4632      	mov	r2, r6
 8006cc0:	463b      	mov	r3, r7
 8006cc2:	f7f9 faad 	bl	8000220 <__aeabi_dsub>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	460b      	mov	r3, r1
 8006cca:	4606      	mov	r6, r0
 8006ccc:	460f      	mov	r7, r1
 8006cce:	4640      	mov	r0, r8
 8006cd0:	4649      	mov	r1, r9
 8006cd2:	f7f9 faa5 	bl	8000220 <__aeabi_dsub>
 8006cd6:	9a05      	ldr	r2, [sp, #20]
 8006cd8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	2b31      	cmp	r3, #49	; 0x31
 8006ce0:	dc20      	bgt.n	8006d24 <__ieee754_rem_pio2+0x26c>
 8006ce2:	e9c4 0100 	strd	r0, r1, [r4]
 8006ce6:	46c2      	mov	sl, r8
 8006ce8:	46cb      	mov	fp, r9
 8006cea:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006cee:	4650      	mov	r0, sl
 8006cf0:	4642      	mov	r2, r8
 8006cf2:	464b      	mov	r3, r9
 8006cf4:	4659      	mov	r1, fp
 8006cf6:	f7f9 fa93 	bl	8000220 <__aeabi_dsub>
 8006cfa:	463b      	mov	r3, r7
 8006cfc:	4632      	mov	r2, r6
 8006cfe:	f7f9 fa8f 	bl	8000220 <__aeabi_dsub>
 8006d02:	9b04      	ldr	r3, [sp, #16]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006d0a:	f6bf af11 	bge.w	8006b30 <__ieee754_rem_pio2+0x78>
 8006d0e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006d12:	6063      	str	r3, [r4, #4]
 8006d14:	f8c4 8000 	str.w	r8, [r4]
 8006d18:	60a0      	str	r0, [r4, #8]
 8006d1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d1e:	60e3      	str	r3, [r4, #12]
 8006d20:	426d      	negs	r5, r5
 8006d22:	e705      	b.n	8006b30 <__ieee754_rem_pio2+0x78>
 8006d24:	a326      	add	r3, pc, #152	; (adr r3, 8006dc0 <__ieee754_rem_pio2+0x308>)
 8006d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d2e:	f7f9 fc2f 	bl	8000590 <__aeabi_dmul>
 8006d32:	4606      	mov	r6, r0
 8006d34:	460f      	mov	r7, r1
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4640      	mov	r0, r8
 8006d3c:	4649      	mov	r1, r9
 8006d3e:	f7f9 fa6f 	bl	8000220 <__aeabi_dsub>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	4682      	mov	sl, r0
 8006d48:	468b      	mov	fp, r1
 8006d4a:	4640      	mov	r0, r8
 8006d4c:	4649      	mov	r1, r9
 8006d4e:	f7f9 fa67 	bl	8000220 <__aeabi_dsub>
 8006d52:	4632      	mov	r2, r6
 8006d54:	463b      	mov	r3, r7
 8006d56:	f7f9 fa63 	bl	8000220 <__aeabi_dsub>
 8006d5a:	a31b      	add	r3, pc, #108	; (adr r3, 8006dc8 <__ieee754_rem_pio2+0x310>)
 8006d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d60:	4606      	mov	r6, r0
 8006d62:	460f      	mov	r7, r1
 8006d64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d68:	f7f9 fc12 	bl	8000590 <__aeabi_dmul>
 8006d6c:	4632      	mov	r2, r6
 8006d6e:	463b      	mov	r3, r7
 8006d70:	f7f9 fa56 	bl	8000220 <__aeabi_dsub>
 8006d74:	4606      	mov	r6, r0
 8006d76:	460f      	mov	r7, r1
 8006d78:	e764      	b.n	8006c44 <__ieee754_rem_pio2+0x18c>
 8006d7a:	4b1b      	ldr	r3, [pc, #108]	; (8006de8 <__ieee754_rem_pio2+0x330>)
 8006d7c:	4598      	cmp	r8, r3
 8006d7e:	dd35      	ble.n	8006dec <__ieee754_rem_pio2+0x334>
 8006d80:	ee10 2a10 	vmov	r2, s0
 8006d84:	463b      	mov	r3, r7
 8006d86:	4630      	mov	r0, r6
 8006d88:	4639      	mov	r1, r7
 8006d8a:	f7f9 fa49 	bl	8000220 <__aeabi_dsub>
 8006d8e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006d92:	e9c4 0100 	strd	r0, r1, [r4]
 8006d96:	e6a1      	b.n	8006adc <__ieee754_rem_pio2+0x24>
 8006d98:	54400000 	.word	0x54400000
 8006d9c:	3ff921fb 	.word	0x3ff921fb
 8006da0:	1a626331 	.word	0x1a626331
 8006da4:	3dd0b461 	.word	0x3dd0b461
 8006da8:	1a600000 	.word	0x1a600000
 8006dac:	3dd0b461 	.word	0x3dd0b461
 8006db0:	2e037073 	.word	0x2e037073
 8006db4:	3ba3198a 	.word	0x3ba3198a
 8006db8:	6dc9c883 	.word	0x6dc9c883
 8006dbc:	3fe45f30 	.word	0x3fe45f30
 8006dc0:	2e000000 	.word	0x2e000000
 8006dc4:	3ba3198a 	.word	0x3ba3198a
 8006dc8:	252049c1 	.word	0x252049c1
 8006dcc:	397b839a 	.word	0x397b839a
 8006dd0:	3fe921fb 	.word	0x3fe921fb
 8006dd4:	4002d97b 	.word	0x4002d97b
 8006dd8:	3ff921fb 	.word	0x3ff921fb
 8006ddc:	413921fb 	.word	0x413921fb
 8006de0:	3fe00000 	.word	0x3fe00000
 8006de4:	080095d0 	.word	0x080095d0
 8006de8:	7fefffff 	.word	0x7fefffff
 8006dec:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006df0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8006df4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006df8:	4630      	mov	r0, r6
 8006dfa:	460f      	mov	r7, r1
 8006dfc:	f7f9 fe78 	bl	8000af0 <__aeabi_d2iz>
 8006e00:	f7f9 fb5c 	bl	80004bc <__aeabi_i2d>
 8006e04:	4602      	mov	r2, r0
 8006e06:	460b      	mov	r3, r1
 8006e08:	4630      	mov	r0, r6
 8006e0a:	4639      	mov	r1, r7
 8006e0c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006e10:	f7f9 fa06 	bl	8000220 <__aeabi_dsub>
 8006e14:	2200      	movs	r2, #0
 8006e16:	4b1f      	ldr	r3, [pc, #124]	; (8006e94 <__ieee754_rem_pio2+0x3dc>)
 8006e18:	f7f9 fbba 	bl	8000590 <__aeabi_dmul>
 8006e1c:	460f      	mov	r7, r1
 8006e1e:	4606      	mov	r6, r0
 8006e20:	f7f9 fe66 	bl	8000af0 <__aeabi_d2iz>
 8006e24:	f7f9 fb4a 	bl	80004bc <__aeabi_i2d>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	4639      	mov	r1, r7
 8006e30:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006e34:	f7f9 f9f4 	bl	8000220 <__aeabi_dsub>
 8006e38:	2200      	movs	r2, #0
 8006e3a:	4b16      	ldr	r3, [pc, #88]	; (8006e94 <__ieee754_rem_pio2+0x3dc>)
 8006e3c:	f7f9 fba8 	bl	8000590 <__aeabi_dmul>
 8006e40:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006e44:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8006e48:	f04f 0803 	mov.w	r8, #3
 8006e4c:	2600      	movs	r6, #0
 8006e4e:	2700      	movs	r7, #0
 8006e50:	4632      	mov	r2, r6
 8006e52:	463b      	mov	r3, r7
 8006e54:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006e58:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8006e5c:	f7f9 fe00 	bl	8000a60 <__aeabi_dcmpeq>
 8006e60:	b9b0      	cbnz	r0, 8006e90 <__ieee754_rem_pio2+0x3d8>
 8006e62:	4b0d      	ldr	r3, [pc, #52]	; (8006e98 <__ieee754_rem_pio2+0x3e0>)
 8006e64:	9301      	str	r3, [sp, #4]
 8006e66:	2302      	movs	r3, #2
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	462a      	mov	r2, r5
 8006e6c:	4643      	mov	r3, r8
 8006e6e:	4621      	mov	r1, r4
 8006e70:	a806      	add	r0, sp, #24
 8006e72:	f000 f8dd 	bl	8007030 <__kernel_rem_pio2>
 8006e76:	9b04      	ldr	r3, [sp, #16]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	4605      	mov	r5, r0
 8006e7c:	f6bf ae58 	bge.w	8006b30 <__ieee754_rem_pio2+0x78>
 8006e80:	6863      	ldr	r3, [r4, #4]
 8006e82:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006e86:	6063      	str	r3, [r4, #4]
 8006e88:	68e3      	ldr	r3, [r4, #12]
 8006e8a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006e8e:	e746      	b.n	8006d1e <__ieee754_rem_pio2+0x266>
 8006e90:	46d0      	mov	r8, sl
 8006e92:	e7dd      	b.n	8006e50 <__ieee754_rem_pio2+0x398>
 8006e94:	41700000 	.word	0x41700000
 8006e98:	08009650 	.word	0x08009650
 8006e9c:	00000000 	.word	0x00000000

08006ea0 <__kernel_cos>:
 8006ea0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea4:	ec59 8b10 	vmov	r8, r9, d0
 8006ea8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8006eac:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8006eb0:	ed2d 8b02 	vpush	{d8}
 8006eb4:	eeb0 8a41 	vmov.f32	s16, s2
 8006eb8:	eef0 8a61 	vmov.f32	s17, s3
 8006ebc:	da07      	bge.n	8006ece <__kernel_cos+0x2e>
 8006ebe:	ee10 0a10 	vmov	r0, s0
 8006ec2:	4649      	mov	r1, r9
 8006ec4:	f7f9 fe14 	bl	8000af0 <__aeabi_d2iz>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	f000 8089 	beq.w	8006fe0 <__kernel_cos+0x140>
 8006ece:	4642      	mov	r2, r8
 8006ed0:	464b      	mov	r3, r9
 8006ed2:	4640      	mov	r0, r8
 8006ed4:	4649      	mov	r1, r9
 8006ed6:	f7f9 fb5b 	bl	8000590 <__aeabi_dmul>
 8006eda:	2200      	movs	r2, #0
 8006edc:	4b4e      	ldr	r3, [pc, #312]	; (8007018 <__kernel_cos+0x178>)
 8006ede:	4604      	mov	r4, r0
 8006ee0:	460d      	mov	r5, r1
 8006ee2:	f7f9 fb55 	bl	8000590 <__aeabi_dmul>
 8006ee6:	a340      	add	r3, pc, #256	; (adr r3, 8006fe8 <__kernel_cos+0x148>)
 8006ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eec:	4682      	mov	sl, r0
 8006eee:	468b      	mov	fp, r1
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	4629      	mov	r1, r5
 8006ef4:	f7f9 fb4c 	bl	8000590 <__aeabi_dmul>
 8006ef8:	a33d      	add	r3, pc, #244	; (adr r3, 8006ff0 <__kernel_cos+0x150>)
 8006efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efe:	f7f9 f991 	bl	8000224 <__adddf3>
 8006f02:	4622      	mov	r2, r4
 8006f04:	462b      	mov	r3, r5
 8006f06:	f7f9 fb43 	bl	8000590 <__aeabi_dmul>
 8006f0a:	a33b      	add	r3, pc, #236	; (adr r3, 8006ff8 <__kernel_cos+0x158>)
 8006f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f10:	f7f9 f986 	bl	8000220 <__aeabi_dsub>
 8006f14:	4622      	mov	r2, r4
 8006f16:	462b      	mov	r3, r5
 8006f18:	f7f9 fb3a 	bl	8000590 <__aeabi_dmul>
 8006f1c:	a338      	add	r3, pc, #224	; (adr r3, 8007000 <__kernel_cos+0x160>)
 8006f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f22:	f7f9 f97f 	bl	8000224 <__adddf3>
 8006f26:	4622      	mov	r2, r4
 8006f28:	462b      	mov	r3, r5
 8006f2a:	f7f9 fb31 	bl	8000590 <__aeabi_dmul>
 8006f2e:	a336      	add	r3, pc, #216	; (adr r3, 8007008 <__kernel_cos+0x168>)
 8006f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f34:	f7f9 f974 	bl	8000220 <__aeabi_dsub>
 8006f38:	4622      	mov	r2, r4
 8006f3a:	462b      	mov	r3, r5
 8006f3c:	f7f9 fb28 	bl	8000590 <__aeabi_dmul>
 8006f40:	a333      	add	r3, pc, #204	; (adr r3, 8007010 <__kernel_cos+0x170>)
 8006f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f46:	f7f9 f96d 	bl	8000224 <__adddf3>
 8006f4a:	4622      	mov	r2, r4
 8006f4c:	462b      	mov	r3, r5
 8006f4e:	f7f9 fb1f 	bl	8000590 <__aeabi_dmul>
 8006f52:	4622      	mov	r2, r4
 8006f54:	462b      	mov	r3, r5
 8006f56:	f7f9 fb1b 	bl	8000590 <__aeabi_dmul>
 8006f5a:	ec53 2b18 	vmov	r2, r3, d8
 8006f5e:	4604      	mov	r4, r0
 8006f60:	460d      	mov	r5, r1
 8006f62:	4640      	mov	r0, r8
 8006f64:	4649      	mov	r1, r9
 8006f66:	f7f9 fb13 	bl	8000590 <__aeabi_dmul>
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	4629      	mov	r1, r5
 8006f70:	4620      	mov	r0, r4
 8006f72:	f7f9 f955 	bl	8000220 <__aeabi_dsub>
 8006f76:	4b29      	ldr	r3, [pc, #164]	; (800701c <__kernel_cos+0x17c>)
 8006f78:	429e      	cmp	r6, r3
 8006f7a:	4680      	mov	r8, r0
 8006f7c:	4689      	mov	r9, r1
 8006f7e:	dc11      	bgt.n	8006fa4 <__kernel_cos+0x104>
 8006f80:	4602      	mov	r2, r0
 8006f82:	460b      	mov	r3, r1
 8006f84:	4650      	mov	r0, sl
 8006f86:	4659      	mov	r1, fp
 8006f88:	f7f9 f94a 	bl	8000220 <__aeabi_dsub>
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	4924      	ldr	r1, [pc, #144]	; (8007020 <__kernel_cos+0x180>)
 8006f90:	4602      	mov	r2, r0
 8006f92:	2000      	movs	r0, #0
 8006f94:	f7f9 f944 	bl	8000220 <__aeabi_dsub>
 8006f98:	ecbd 8b02 	vpop	{d8}
 8006f9c:	ec41 0b10 	vmov	d0, r0, r1
 8006fa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fa4:	4b1f      	ldr	r3, [pc, #124]	; (8007024 <__kernel_cos+0x184>)
 8006fa6:	491e      	ldr	r1, [pc, #120]	; (8007020 <__kernel_cos+0x180>)
 8006fa8:	429e      	cmp	r6, r3
 8006faa:	bfcc      	ite	gt
 8006fac:	4d1e      	ldrgt	r5, [pc, #120]	; (8007028 <__kernel_cos+0x188>)
 8006fae:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8006fb2:	2400      	movs	r4, #0
 8006fb4:	4622      	mov	r2, r4
 8006fb6:	462b      	mov	r3, r5
 8006fb8:	2000      	movs	r0, #0
 8006fba:	f7f9 f931 	bl	8000220 <__aeabi_dsub>
 8006fbe:	4622      	mov	r2, r4
 8006fc0:	4606      	mov	r6, r0
 8006fc2:	460f      	mov	r7, r1
 8006fc4:	462b      	mov	r3, r5
 8006fc6:	4650      	mov	r0, sl
 8006fc8:	4659      	mov	r1, fp
 8006fca:	f7f9 f929 	bl	8000220 <__aeabi_dsub>
 8006fce:	4642      	mov	r2, r8
 8006fd0:	464b      	mov	r3, r9
 8006fd2:	f7f9 f925 	bl	8000220 <__aeabi_dsub>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	460b      	mov	r3, r1
 8006fda:	4630      	mov	r0, r6
 8006fdc:	4639      	mov	r1, r7
 8006fde:	e7d9      	b.n	8006f94 <__kernel_cos+0xf4>
 8006fe0:	2000      	movs	r0, #0
 8006fe2:	490f      	ldr	r1, [pc, #60]	; (8007020 <__kernel_cos+0x180>)
 8006fe4:	e7d8      	b.n	8006f98 <__kernel_cos+0xf8>
 8006fe6:	bf00      	nop
 8006fe8:	be8838d4 	.word	0xbe8838d4
 8006fec:	bda8fae9 	.word	0xbda8fae9
 8006ff0:	bdb4b1c4 	.word	0xbdb4b1c4
 8006ff4:	3e21ee9e 	.word	0x3e21ee9e
 8006ff8:	809c52ad 	.word	0x809c52ad
 8006ffc:	3e927e4f 	.word	0x3e927e4f
 8007000:	19cb1590 	.word	0x19cb1590
 8007004:	3efa01a0 	.word	0x3efa01a0
 8007008:	16c15177 	.word	0x16c15177
 800700c:	3f56c16c 	.word	0x3f56c16c
 8007010:	5555554c 	.word	0x5555554c
 8007014:	3fa55555 	.word	0x3fa55555
 8007018:	3fe00000 	.word	0x3fe00000
 800701c:	3fd33332 	.word	0x3fd33332
 8007020:	3ff00000 	.word	0x3ff00000
 8007024:	3fe90000 	.word	0x3fe90000
 8007028:	3fd20000 	.word	0x3fd20000
 800702c:	00000000 	.word	0x00000000

08007030 <__kernel_rem_pio2>:
 8007030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007034:	ed2d 8b02 	vpush	{d8}
 8007038:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800703c:	1ed4      	subs	r4, r2, #3
 800703e:	9308      	str	r3, [sp, #32]
 8007040:	9101      	str	r1, [sp, #4]
 8007042:	4bc5      	ldr	r3, [pc, #788]	; (8007358 <__kernel_rem_pio2+0x328>)
 8007044:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8007046:	9009      	str	r0, [sp, #36]	; 0x24
 8007048:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800704c:	9304      	str	r3, [sp, #16]
 800704e:	9b08      	ldr	r3, [sp, #32]
 8007050:	3b01      	subs	r3, #1
 8007052:	9307      	str	r3, [sp, #28]
 8007054:	2318      	movs	r3, #24
 8007056:	fb94 f4f3 	sdiv	r4, r4, r3
 800705a:	f06f 0317 	mvn.w	r3, #23
 800705e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8007062:	fb04 3303 	mla	r3, r4, r3, r3
 8007066:	eb03 0a02 	add.w	sl, r3, r2
 800706a:	9b04      	ldr	r3, [sp, #16]
 800706c:	9a07      	ldr	r2, [sp, #28]
 800706e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007348 <__kernel_rem_pio2+0x318>
 8007072:	eb03 0802 	add.w	r8, r3, r2
 8007076:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007078:	1aa7      	subs	r7, r4, r2
 800707a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800707e:	ae22      	add	r6, sp, #136	; 0x88
 8007080:	2500      	movs	r5, #0
 8007082:	4545      	cmp	r5, r8
 8007084:	dd13      	ble.n	80070ae <__kernel_rem_pio2+0x7e>
 8007086:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8007348 <__kernel_rem_pio2+0x318>
 800708a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800708e:	2600      	movs	r6, #0
 8007090:	9b04      	ldr	r3, [sp, #16]
 8007092:	429e      	cmp	r6, r3
 8007094:	dc32      	bgt.n	80070fc <__kernel_rem_pio2+0xcc>
 8007096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007098:	9302      	str	r3, [sp, #8]
 800709a:	9b08      	ldr	r3, [sp, #32]
 800709c:	199d      	adds	r5, r3, r6
 800709e:	ab22      	add	r3, sp, #136	; 0x88
 80070a0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80070a4:	9306      	str	r3, [sp, #24]
 80070a6:	ec59 8b18 	vmov	r8, r9, d8
 80070aa:	2700      	movs	r7, #0
 80070ac:	e01f      	b.n	80070ee <__kernel_rem_pio2+0xbe>
 80070ae:	42ef      	cmn	r7, r5
 80070b0:	d407      	bmi.n	80070c2 <__kernel_rem_pio2+0x92>
 80070b2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80070b6:	f7f9 fa01 	bl	80004bc <__aeabi_i2d>
 80070ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 80070be:	3501      	adds	r5, #1
 80070c0:	e7df      	b.n	8007082 <__kernel_rem_pio2+0x52>
 80070c2:	ec51 0b18 	vmov	r0, r1, d8
 80070c6:	e7f8      	b.n	80070ba <__kernel_rem_pio2+0x8a>
 80070c8:	9906      	ldr	r1, [sp, #24]
 80070ca:	9d02      	ldr	r5, [sp, #8]
 80070cc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80070d0:	9106      	str	r1, [sp, #24]
 80070d2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80070d6:	9502      	str	r5, [sp, #8]
 80070d8:	f7f9 fa5a 	bl	8000590 <__aeabi_dmul>
 80070dc:	4602      	mov	r2, r0
 80070de:	460b      	mov	r3, r1
 80070e0:	4640      	mov	r0, r8
 80070e2:	4649      	mov	r1, r9
 80070e4:	f7f9 f89e 	bl	8000224 <__adddf3>
 80070e8:	3701      	adds	r7, #1
 80070ea:	4680      	mov	r8, r0
 80070ec:	4689      	mov	r9, r1
 80070ee:	9b07      	ldr	r3, [sp, #28]
 80070f0:	429f      	cmp	r7, r3
 80070f2:	dde9      	ble.n	80070c8 <__kernel_rem_pio2+0x98>
 80070f4:	e8eb 8902 	strd	r8, r9, [fp], #8
 80070f8:	3601      	adds	r6, #1
 80070fa:	e7c9      	b.n	8007090 <__kernel_rem_pio2+0x60>
 80070fc:	9b04      	ldr	r3, [sp, #16]
 80070fe:	aa0e      	add	r2, sp, #56	; 0x38
 8007100:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007104:	930c      	str	r3, [sp, #48]	; 0x30
 8007106:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007108:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800710c:	9c04      	ldr	r4, [sp, #16]
 800710e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007110:	ab9a      	add	r3, sp, #616	; 0x268
 8007112:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8007116:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800711a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800711e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8007122:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8007126:	ab9a      	add	r3, sp, #616	; 0x268
 8007128:	445b      	add	r3, fp
 800712a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800712e:	2500      	movs	r5, #0
 8007130:	1b63      	subs	r3, r4, r5
 8007132:	2b00      	cmp	r3, #0
 8007134:	dc78      	bgt.n	8007228 <__kernel_rem_pio2+0x1f8>
 8007136:	4650      	mov	r0, sl
 8007138:	ec49 8b10 	vmov	d0, r8, r9
 800713c:	f7ff fa84 	bl	8006648 <scalbn>
 8007140:	ec57 6b10 	vmov	r6, r7, d0
 8007144:	2200      	movs	r2, #0
 8007146:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800714a:	ee10 0a10 	vmov	r0, s0
 800714e:	4639      	mov	r1, r7
 8007150:	f7f9 fa1e 	bl	8000590 <__aeabi_dmul>
 8007154:	ec41 0b10 	vmov	d0, r0, r1
 8007158:	f7ff f9f2 	bl	8006540 <floor>
 800715c:	2200      	movs	r2, #0
 800715e:	ec51 0b10 	vmov	r0, r1, d0
 8007162:	4b7e      	ldr	r3, [pc, #504]	; (800735c <__kernel_rem_pio2+0x32c>)
 8007164:	f7f9 fa14 	bl	8000590 <__aeabi_dmul>
 8007168:	4602      	mov	r2, r0
 800716a:	460b      	mov	r3, r1
 800716c:	4630      	mov	r0, r6
 800716e:	4639      	mov	r1, r7
 8007170:	f7f9 f856 	bl	8000220 <__aeabi_dsub>
 8007174:	460f      	mov	r7, r1
 8007176:	4606      	mov	r6, r0
 8007178:	f7f9 fcba 	bl	8000af0 <__aeabi_d2iz>
 800717c:	9006      	str	r0, [sp, #24]
 800717e:	f7f9 f99d 	bl	80004bc <__aeabi_i2d>
 8007182:	4602      	mov	r2, r0
 8007184:	460b      	mov	r3, r1
 8007186:	4630      	mov	r0, r6
 8007188:	4639      	mov	r1, r7
 800718a:	f7f9 f849 	bl	8000220 <__aeabi_dsub>
 800718e:	f1ba 0f00 	cmp.w	sl, #0
 8007192:	4606      	mov	r6, r0
 8007194:	460f      	mov	r7, r1
 8007196:	dd6c      	ble.n	8007272 <__kernel_rem_pio2+0x242>
 8007198:	1e62      	subs	r2, r4, #1
 800719a:	ab0e      	add	r3, sp, #56	; 0x38
 800719c:	f1ca 0118 	rsb	r1, sl, #24
 80071a0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80071a4:	9d06      	ldr	r5, [sp, #24]
 80071a6:	fa40 f301 	asr.w	r3, r0, r1
 80071aa:	441d      	add	r5, r3
 80071ac:	408b      	lsls	r3, r1
 80071ae:	1ac0      	subs	r0, r0, r3
 80071b0:	ab0e      	add	r3, sp, #56	; 0x38
 80071b2:	9506      	str	r5, [sp, #24]
 80071b4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80071b8:	f1ca 0317 	rsb	r3, sl, #23
 80071bc:	fa40 f303 	asr.w	r3, r0, r3
 80071c0:	9302      	str	r3, [sp, #8]
 80071c2:	9b02      	ldr	r3, [sp, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	dd62      	ble.n	800728e <__kernel_rem_pio2+0x25e>
 80071c8:	9b06      	ldr	r3, [sp, #24]
 80071ca:	2200      	movs	r2, #0
 80071cc:	3301      	adds	r3, #1
 80071ce:	9306      	str	r3, [sp, #24]
 80071d0:	4615      	mov	r5, r2
 80071d2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80071d6:	4294      	cmp	r4, r2
 80071d8:	f300 8095 	bgt.w	8007306 <__kernel_rem_pio2+0x2d6>
 80071dc:	f1ba 0f00 	cmp.w	sl, #0
 80071e0:	dd07      	ble.n	80071f2 <__kernel_rem_pio2+0x1c2>
 80071e2:	f1ba 0f01 	cmp.w	sl, #1
 80071e6:	f000 80a2 	beq.w	800732e <__kernel_rem_pio2+0x2fe>
 80071ea:	f1ba 0f02 	cmp.w	sl, #2
 80071ee:	f000 80c1 	beq.w	8007374 <__kernel_rem_pio2+0x344>
 80071f2:	9b02      	ldr	r3, [sp, #8]
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d14a      	bne.n	800728e <__kernel_rem_pio2+0x25e>
 80071f8:	4632      	mov	r2, r6
 80071fa:	463b      	mov	r3, r7
 80071fc:	2000      	movs	r0, #0
 80071fe:	4958      	ldr	r1, [pc, #352]	; (8007360 <__kernel_rem_pio2+0x330>)
 8007200:	f7f9 f80e 	bl	8000220 <__aeabi_dsub>
 8007204:	4606      	mov	r6, r0
 8007206:	460f      	mov	r7, r1
 8007208:	2d00      	cmp	r5, #0
 800720a:	d040      	beq.n	800728e <__kernel_rem_pio2+0x25e>
 800720c:	4650      	mov	r0, sl
 800720e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007350 <__kernel_rem_pio2+0x320>
 8007212:	f7ff fa19 	bl	8006648 <scalbn>
 8007216:	4630      	mov	r0, r6
 8007218:	4639      	mov	r1, r7
 800721a:	ec53 2b10 	vmov	r2, r3, d0
 800721e:	f7f8 ffff 	bl	8000220 <__aeabi_dsub>
 8007222:	4606      	mov	r6, r0
 8007224:	460f      	mov	r7, r1
 8007226:	e032      	b.n	800728e <__kernel_rem_pio2+0x25e>
 8007228:	2200      	movs	r2, #0
 800722a:	4b4e      	ldr	r3, [pc, #312]	; (8007364 <__kernel_rem_pio2+0x334>)
 800722c:	4640      	mov	r0, r8
 800722e:	4649      	mov	r1, r9
 8007230:	f7f9 f9ae 	bl	8000590 <__aeabi_dmul>
 8007234:	f7f9 fc5c 	bl	8000af0 <__aeabi_d2iz>
 8007238:	f7f9 f940 	bl	80004bc <__aeabi_i2d>
 800723c:	2200      	movs	r2, #0
 800723e:	4b4a      	ldr	r3, [pc, #296]	; (8007368 <__kernel_rem_pio2+0x338>)
 8007240:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007244:	f7f9 f9a4 	bl	8000590 <__aeabi_dmul>
 8007248:	4602      	mov	r2, r0
 800724a:	460b      	mov	r3, r1
 800724c:	4640      	mov	r0, r8
 800724e:	4649      	mov	r1, r9
 8007250:	f7f8 ffe6 	bl	8000220 <__aeabi_dsub>
 8007254:	f7f9 fc4c 	bl	8000af0 <__aeabi_d2iz>
 8007258:	ab0e      	add	r3, sp, #56	; 0x38
 800725a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800725e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8007262:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007266:	f7f8 ffdd 	bl	8000224 <__adddf3>
 800726a:	3501      	adds	r5, #1
 800726c:	4680      	mov	r8, r0
 800726e:	4689      	mov	r9, r1
 8007270:	e75e      	b.n	8007130 <__kernel_rem_pio2+0x100>
 8007272:	d105      	bne.n	8007280 <__kernel_rem_pio2+0x250>
 8007274:	1e63      	subs	r3, r4, #1
 8007276:	aa0e      	add	r2, sp, #56	; 0x38
 8007278:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800727c:	15c3      	asrs	r3, r0, #23
 800727e:	e79f      	b.n	80071c0 <__kernel_rem_pio2+0x190>
 8007280:	2200      	movs	r2, #0
 8007282:	4b3a      	ldr	r3, [pc, #232]	; (800736c <__kernel_rem_pio2+0x33c>)
 8007284:	f7f9 fc0a 	bl	8000a9c <__aeabi_dcmpge>
 8007288:	2800      	cmp	r0, #0
 800728a:	d139      	bne.n	8007300 <__kernel_rem_pio2+0x2d0>
 800728c:	9002      	str	r0, [sp, #8]
 800728e:	2200      	movs	r2, #0
 8007290:	2300      	movs	r3, #0
 8007292:	4630      	mov	r0, r6
 8007294:	4639      	mov	r1, r7
 8007296:	f7f9 fbe3 	bl	8000a60 <__aeabi_dcmpeq>
 800729a:	2800      	cmp	r0, #0
 800729c:	f000 80c7 	beq.w	800742e <__kernel_rem_pio2+0x3fe>
 80072a0:	1e65      	subs	r5, r4, #1
 80072a2:	462b      	mov	r3, r5
 80072a4:	2200      	movs	r2, #0
 80072a6:	9904      	ldr	r1, [sp, #16]
 80072a8:	428b      	cmp	r3, r1
 80072aa:	da6a      	bge.n	8007382 <__kernel_rem_pio2+0x352>
 80072ac:	2a00      	cmp	r2, #0
 80072ae:	f000 8088 	beq.w	80073c2 <__kernel_rem_pio2+0x392>
 80072b2:	ab0e      	add	r3, sp, #56	; 0x38
 80072b4:	f1aa 0a18 	sub.w	sl, sl, #24
 80072b8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 80b4 	beq.w	800742a <__kernel_rem_pio2+0x3fa>
 80072c2:	4650      	mov	r0, sl
 80072c4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8007350 <__kernel_rem_pio2+0x320>
 80072c8:	f7ff f9be 	bl	8006648 <scalbn>
 80072cc:	00ec      	lsls	r4, r5, #3
 80072ce:	ab72      	add	r3, sp, #456	; 0x1c8
 80072d0:	191e      	adds	r6, r3, r4
 80072d2:	ec59 8b10 	vmov	r8, r9, d0
 80072d6:	f106 0a08 	add.w	sl, r6, #8
 80072da:	462f      	mov	r7, r5
 80072dc:	2f00      	cmp	r7, #0
 80072de:	f280 80df 	bge.w	80074a0 <__kernel_rem_pio2+0x470>
 80072e2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8007348 <__kernel_rem_pio2+0x318>
 80072e6:	f04f 0a00 	mov.w	sl, #0
 80072ea:	eba5 030a 	sub.w	r3, r5, sl
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	f2c0 810a 	blt.w	8007508 <__kernel_rem_pio2+0x4d8>
 80072f4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8007370 <__kernel_rem_pio2+0x340>
 80072f8:	ec59 8b18 	vmov	r8, r9, d8
 80072fc:	2700      	movs	r7, #0
 80072fe:	e0f5      	b.n	80074ec <__kernel_rem_pio2+0x4bc>
 8007300:	2302      	movs	r3, #2
 8007302:	9302      	str	r3, [sp, #8]
 8007304:	e760      	b.n	80071c8 <__kernel_rem_pio2+0x198>
 8007306:	ab0e      	add	r3, sp, #56	; 0x38
 8007308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800730c:	b94d      	cbnz	r5, 8007322 <__kernel_rem_pio2+0x2f2>
 800730e:	b12b      	cbz	r3, 800731c <__kernel_rem_pio2+0x2ec>
 8007310:	a80e      	add	r0, sp, #56	; 0x38
 8007312:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007316:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800731a:	2301      	movs	r3, #1
 800731c:	3201      	adds	r2, #1
 800731e:	461d      	mov	r5, r3
 8007320:	e759      	b.n	80071d6 <__kernel_rem_pio2+0x1a6>
 8007322:	a80e      	add	r0, sp, #56	; 0x38
 8007324:	1acb      	subs	r3, r1, r3
 8007326:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800732a:	462b      	mov	r3, r5
 800732c:	e7f6      	b.n	800731c <__kernel_rem_pio2+0x2ec>
 800732e:	1e62      	subs	r2, r4, #1
 8007330:	ab0e      	add	r3, sp, #56	; 0x38
 8007332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007336:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800733a:	a90e      	add	r1, sp, #56	; 0x38
 800733c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007340:	e757      	b.n	80071f2 <__kernel_rem_pio2+0x1c2>
 8007342:	bf00      	nop
 8007344:	f3af 8000 	nop.w
	...
 8007354:	3ff00000 	.word	0x3ff00000
 8007358:	08009798 	.word	0x08009798
 800735c:	40200000 	.word	0x40200000
 8007360:	3ff00000 	.word	0x3ff00000
 8007364:	3e700000 	.word	0x3e700000
 8007368:	41700000 	.word	0x41700000
 800736c:	3fe00000 	.word	0x3fe00000
 8007370:	08009758 	.word	0x08009758
 8007374:	1e62      	subs	r2, r4, #1
 8007376:	ab0e      	add	r3, sp, #56	; 0x38
 8007378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800737c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007380:	e7db      	b.n	800733a <__kernel_rem_pio2+0x30a>
 8007382:	a90e      	add	r1, sp, #56	; 0x38
 8007384:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007388:	3b01      	subs	r3, #1
 800738a:	430a      	orrs	r2, r1
 800738c:	e78b      	b.n	80072a6 <__kernel_rem_pio2+0x276>
 800738e:	3301      	adds	r3, #1
 8007390:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007394:	2900      	cmp	r1, #0
 8007396:	d0fa      	beq.n	800738e <__kernel_rem_pio2+0x35e>
 8007398:	9a08      	ldr	r2, [sp, #32]
 800739a:	4422      	add	r2, r4
 800739c:	00d2      	lsls	r2, r2, #3
 800739e:	a922      	add	r1, sp, #136	; 0x88
 80073a0:	18e3      	adds	r3, r4, r3
 80073a2:	9206      	str	r2, [sp, #24]
 80073a4:	440a      	add	r2, r1
 80073a6:	9302      	str	r3, [sp, #8]
 80073a8:	f10b 0108 	add.w	r1, fp, #8
 80073ac:	f102 0308 	add.w	r3, r2, #8
 80073b0:	1c66      	adds	r6, r4, #1
 80073b2:	910a      	str	r1, [sp, #40]	; 0x28
 80073b4:	2500      	movs	r5, #0
 80073b6:	930d      	str	r3, [sp, #52]	; 0x34
 80073b8:	9b02      	ldr	r3, [sp, #8]
 80073ba:	42b3      	cmp	r3, r6
 80073bc:	da04      	bge.n	80073c8 <__kernel_rem_pio2+0x398>
 80073be:	461c      	mov	r4, r3
 80073c0:	e6a6      	b.n	8007110 <__kernel_rem_pio2+0xe0>
 80073c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073c4:	2301      	movs	r3, #1
 80073c6:	e7e3      	b.n	8007390 <__kernel_rem_pio2+0x360>
 80073c8:	9b06      	ldr	r3, [sp, #24]
 80073ca:	18ef      	adds	r7, r5, r3
 80073cc:	ab22      	add	r3, sp, #136	; 0x88
 80073ce:	441f      	add	r7, r3
 80073d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073d2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80073d6:	f7f9 f871 	bl	80004bc <__aeabi_i2d>
 80073da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073dc:	461c      	mov	r4, r3
 80073de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073e0:	e9c7 0100 	strd	r0, r1, [r7]
 80073e4:	eb03 0b05 	add.w	fp, r3, r5
 80073e8:	2700      	movs	r7, #0
 80073ea:	f04f 0800 	mov.w	r8, #0
 80073ee:	f04f 0900 	mov.w	r9, #0
 80073f2:	9b07      	ldr	r3, [sp, #28]
 80073f4:	429f      	cmp	r7, r3
 80073f6:	dd08      	ble.n	800740a <__kernel_rem_pio2+0x3da>
 80073f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073fa:	aa72      	add	r2, sp, #456	; 0x1c8
 80073fc:	18eb      	adds	r3, r5, r3
 80073fe:	4413      	add	r3, r2
 8007400:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8007404:	3601      	adds	r6, #1
 8007406:	3508      	adds	r5, #8
 8007408:	e7d6      	b.n	80073b8 <__kernel_rem_pio2+0x388>
 800740a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800740e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007412:	f7f9 f8bd 	bl	8000590 <__aeabi_dmul>
 8007416:	4602      	mov	r2, r0
 8007418:	460b      	mov	r3, r1
 800741a:	4640      	mov	r0, r8
 800741c:	4649      	mov	r1, r9
 800741e:	f7f8 ff01 	bl	8000224 <__adddf3>
 8007422:	3701      	adds	r7, #1
 8007424:	4680      	mov	r8, r0
 8007426:	4689      	mov	r9, r1
 8007428:	e7e3      	b.n	80073f2 <__kernel_rem_pio2+0x3c2>
 800742a:	3d01      	subs	r5, #1
 800742c:	e741      	b.n	80072b2 <__kernel_rem_pio2+0x282>
 800742e:	f1ca 0000 	rsb	r0, sl, #0
 8007432:	ec47 6b10 	vmov	d0, r6, r7
 8007436:	f7ff f907 	bl	8006648 <scalbn>
 800743a:	ec57 6b10 	vmov	r6, r7, d0
 800743e:	2200      	movs	r2, #0
 8007440:	4b99      	ldr	r3, [pc, #612]	; (80076a8 <__kernel_rem_pio2+0x678>)
 8007442:	ee10 0a10 	vmov	r0, s0
 8007446:	4639      	mov	r1, r7
 8007448:	f7f9 fb28 	bl	8000a9c <__aeabi_dcmpge>
 800744c:	b1f8      	cbz	r0, 800748e <__kernel_rem_pio2+0x45e>
 800744e:	2200      	movs	r2, #0
 8007450:	4b96      	ldr	r3, [pc, #600]	; (80076ac <__kernel_rem_pio2+0x67c>)
 8007452:	4630      	mov	r0, r6
 8007454:	4639      	mov	r1, r7
 8007456:	f7f9 f89b 	bl	8000590 <__aeabi_dmul>
 800745a:	f7f9 fb49 	bl	8000af0 <__aeabi_d2iz>
 800745e:	4680      	mov	r8, r0
 8007460:	f7f9 f82c 	bl	80004bc <__aeabi_i2d>
 8007464:	2200      	movs	r2, #0
 8007466:	4b90      	ldr	r3, [pc, #576]	; (80076a8 <__kernel_rem_pio2+0x678>)
 8007468:	f7f9 f892 	bl	8000590 <__aeabi_dmul>
 800746c:	460b      	mov	r3, r1
 800746e:	4602      	mov	r2, r0
 8007470:	4639      	mov	r1, r7
 8007472:	4630      	mov	r0, r6
 8007474:	f7f8 fed4 	bl	8000220 <__aeabi_dsub>
 8007478:	f7f9 fb3a 	bl	8000af0 <__aeabi_d2iz>
 800747c:	1c65      	adds	r5, r4, #1
 800747e:	ab0e      	add	r3, sp, #56	; 0x38
 8007480:	f10a 0a18 	add.w	sl, sl, #24
 8007484:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007488:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800748c:	e719      	b.n	80072c2 <__kernel_rem_pio2+0x292>
 800748e:	4630      	mov	r0, r6
 8007490:	4639      	mov	r1, r7
 8007492:	f7f9 fb2d 	bl	8000af0 <__aeabi_d2iz>
 8007496:	ab0e      	add	r3, sp, #56	; 0x38
 8007498:	4625      	mov	r5, r4
 800749a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800749e:	e710      	b.n	80072c2 <__kernel_rem_pio2+0x292>
 80074a0:	ab0e      	add	r3, sp, #56	; 0x38
 80074a2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80074a6:	f7f9 f809 	bl	80004bc <__aeabi_i2d>
 80074aa:	4642      	mov	r2, r8
 80074ac:	464b      	mov	r3, r9
 80074ae:	f7f9 f86f 	bl	8000590 <__aeabi_dmul>
 80074b2:	2200      	movs	r2, #0
 80074b4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80074b8:	4b7c      	ldr	r3, [pc, #496]	; (80076ac <__kernel_rem_pio2+0x67c>)
 80074ba:	4640      	mov	r0, r8
 80074bc:	4649      	mov	r1, r9
 80074be:	f7f9 f867 	bl	8000590 <__aeabi_dmul>
 80074c2:	3f01      	subs	r7, #1
 80074c4:	4680      	mov	r8, r0
 80074c6:	4689      	mov	r9, r1
 80074c8:	e708      	b.n	80072dc <__kernel_rem_pio2+0x2ac>
 80074ca:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80074ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80074d6:	f7f9 f85b 	bl	8000590 <__aeabi_dmul>
 80074da:	4602      	mov	r2, r0
 80074dc:	460b      	mov	r3, r1
 80074de:	4640      	mov	r0, r8
 80074e0:	4649      	mov	r1, r9
 80074e2:	f7f8 fe9f 	bl	8000224 <__adddf3>
 80074e6:	3701      	adds	r7, #1
 80074e8:	4680      	mov	r8, r0
 80074ea:	4689      	mov	r9, r1
 80074ec:	9b04      	ldr	r3, [sp, #16]
 80074ee:	429f      	cmp	r7, r3
 80074f0:	dc01      	bgt.n	80074f6 <__kernel_rem_pio2+0x4c6>
 80074f2:	45ba      	cmp	sl, r7
 80074f4:	dae9      	bge.n	80074ca <__kernel_rem_pio2+0x49a>
 80074f6:	ab4a      	add	r3, sp, #296	; 0x128
 80074f8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80074fc:	e9c3 8900 	strd	r8, r9, [r3]
 8007500:	f10a 0a01 	add.w	sl, sl, #1
 8007504:	3e08      	subs	r6, #8
 8007506:	e6f0      	b.n	80072ea <__kernel_rem_pio2+0x2ba>
 8007508:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800750a:	2b03      	cmp	r3, #3
 800750c:	d85b      	bhi.n	80075c6 <__kernel_rem_pio2+0x596>
 800750e:	e8df f003 	tbb	[pc, r3]
 8007512:	264a      	.short	0x264a
 8007514:	0226      	.short	0x0226
 8007516:	ab9a      	add	r3, sp, #616	; 0x268
 8007518:	441c      	add	r4, r3
 800751a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800751e:	46a2      	mov	sl, r4
 8007520:	46ab      	mov	fp, r5
 8007522:	f1bb 0f00 	cmp.w	fp, #0
 8007526:	dc6c      	bgt.n	8007602 <__kernel_rem_pio2+0x5d2>
 8007528:	46a2      	mov	sl, r4
 800752a:	46ab      	mov	fp, r5
 800752c:	f1bb 0f01 	cmp.w	fp, #1
 8007530:	f300 8086 	bgt.w	8007640 <__kernel_rem_pio2+0x610>
 8007534:	2000      	movs	r0, #0
 8007536:	2100      	movs	r1, #0
 8007538:	2d01      	cmp	r5, #1
 800753a:	f300 80a0 	bgt.w	800767e <__kernel_rem_pio2+0x64e>
 800753e:	9b02      	ldr	r3, [sp, #8]
 8007540:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8007544:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8007548:	2b00      	cmp	r3, #0
 800754a:	f040 809e 	bne.w	800768a <__kernel_rem_pio2+0x65a>
 800754e:	9b01      	ldr	r3, [sp, #4]
 8007550:	e9c3 7800 	strd	r7, r8, [r3]
 8007554:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007558:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800755c:	e033      	b.n	80075c6 <__kernel_rem_pio2+0x596>
 800755e:	3408      	adds	r4, #8
 8007560:	ab4a      	add	r3, sp, #296	; 0x128
 8007562:	441c      	add	r4, r3
 8007564:	462e      	mov	r6, r5
 8007566:	2000      	movs	r0, #0
 8007568:	2100      	movs	r1, #0
 800756a:	2e00      	cmp	r6, #0
 800756c:	da3a      	bge.n	80075e4 <__kernel_rem_pio2+0x5b4>
 800756e:	9b02      	ldr	r3, [sp, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d03d      	beq.n	80075f0 <__kernel_rem_pio2+0x5c0>
 8007574:	4602      	mov	r2, r0
 8007576:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800757a:	9c01      	ldr	r4, [sp, #4]
 800757c:	e9c4 2300 	strd	r2, r3, [r4]
 8007580:	4602      	mov	r2, r0
 8007582:	460b      	mov	r3, r1
 8007584:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007588:	f7f8 fe4a 	bl	8000220 <__aeabi_dsub>
 800758c:	ae4c      	add	r6, sp, #304	; 0x130
 800758e:	2401      	movs	r4, #1
 8007590:	42a5      	cmp	r5, r4
 8007592:	da30      	bge.n	80075f6 <__kernel_rem_pio2+0x5c6>
 8007594:	9b02      	ldr	r3, [sp, #8]
 8007596:	b113      	cbz	r3, 800759e <__kernel_rem_pio2+0x56e>
 8007598:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800759c:	4619      	mov	r1, r3
 800759e:	9b01      	ldr	r3, [sp, #4]
 80075a0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80075a4:	e00f      	b.n	80075c6 <__kernel_rem_pio2+0x596>
 80075a6:	ab9a      	add	r3, sp, #616	; 0x268
 80075a8:	441c      	add	r4, r3
 80075aa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80075ae:	2000      	movs	r0, #0
 80075b0:	2100      	movs	r1, #0
 80075b2:	2d00      	cmp	r5, #0
 80075b4:	da10      	bge.n	80075d8 <__kernel_rem_pio2+0x5a8>
 80075b6:	9b02      	ldr	r3, [sp, #8]
 80075b8:	b113      	cbz	r3, 80075c0 <__kernel_rem_pio2+0x590>
 80075ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075be:	4619      	mov	r1, r3
 80075c0:	9b01      	ldr	r3, [sp, #4]
 80075c2:	e9c3 0100 	strd	r0, r1, [r3]
 80075c6:	9b06      	ldr	r3, [sp, #24]
 80075c8:	f003 0007 	and.w	r0, r3, #7
 80075cc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80075d0:	ecbd 8b02 	vpop	{d8}
 80075d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80075dc:	f7f8 fe22 	bl	8000224 <__adddf3>
 80075e0:	3d01      	subs	r5, #1
 80075e2:	e7e6      	b.n	80075b2 <__kernel_rem_pio2+0x582>
 80075e4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80075e8:	f7f8 fe1c 	bl	8000224 <__adddf3>
 80075ec:	3e01      	subs	r6, #1
 80075ee:	e7bc      	b.n	800756a <__kernel_rem_pio2+0x53a>
 80075f0:	4602      	mov	r2, r0
 80075f2:	460b      	mov	r3, r1
 80075f4:	e7c1      	b.n	800757a <__kernel_rem_pio2+0x54a>
 80075f6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80075fa:	f7f8 fe13 	bl	8000224 <__adddf3>
 80075fe:	3401      	adds	r4, #1
 8007600:	e7c6      	b.n	8007590 <__kernel_rem_pio2+0x560>
 8007602:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8007606:	ed3a 7b02 	vldmdb	sl!, {d7}
 800760a:	4640      	mov	r0, r8
 800760c:	ec53 2b17 	vmov	r2, r3, d7
 8007610:	4649      	mov	r1, r9
 8007612:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007616:	f7f8 fe05 	bl	8000224 <__adddf3>
 800761a:	4602      	mov	r2, r0
 800761c:	460b      	mov	r3, r1
 800761e:	4606      	mov	r6, r0
 8007620:	460f      	mov	r7, r1
 8007622:	4640      	mov	r0, r8
 8007624:	4649      	mov	r1, r9
 8007626:	f7f8 fdfb 	bl	8000220 <__aeabi_dsub>
 800762a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800762e:	f7f8 fdf9 	bl	8000224 <__adddf3>
 8007632:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007636:	e9ca 0100 	strd	r0, r1, [sl]
 800763a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800763e:	e770      	b.n	8007522 <__kernel_rem_pio2+0x4f2>
 8007640:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8007644:	ed3a 7b02 	vldmdb	sl!, {d7}
 8007648:	4630      	mov	r0, r6
 800764a:	ec53 2b17 	vmov	r2, r3, d7
 800764e:	4639      	mov	r1, r7
 8007650:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007654:	f7f8 fde6 	bl	8000224 <__adddf3>
 8007658:	4602      	mov	r2, r0
 800765a:	460b      	mov	r3, r1
 800765c:	4680      	mov	r8, r0
 800765e:	4689      	mov	r9, r1
 8007660:	4630      	mov	r0, r6
 8007662:	4639      	mov	r1, r7
 8007664:	f7f8 fddc 	bl	8000220 <__aeabi_dsub>
 8007668:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800766c:	f7f8 fdda 	bl	8000224 <__adddf3>
 8007670:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007674:	e9ca 0100 	strd	r0, r1, [sl]
 8007678:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800767c:	e756      	b.n	800752c <__kernel_rem_pio2+0x4fc>
 800767e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007682:	f7f8 fdcf 	bl	8000224 <__adddf3>
 8007686:	3d01      	subs	r5, #1
 8007688:	e756      	b.n	8007538 <__kernel_rem_pio2+0x508>
 800768a:	9b01      	ldr	r3, [sp, #4]
 800768c:	9a01      	ldr	r2, [sp, #4]
 800768e:	601f      	str	r7, [r3, #0]
 8007690:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8007694:	605c      	str	r4, [r3, #4]
 8007696:	609d      	str	r5, [r3, #8]
 8007698:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800769c:	60d3      	str	r3, [r2, #12]
 800769e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076a2:	6110      	str	r0, [r2, #16]
 80076a4:	6153      	str	r3, [r2, #20]
 80076a6:	e78e      	b.n	80075c6 <__kernel_rem_pio2+0x596>
 80076a8:	41700000 	.word	0x41700000
 80076ac:	3e700000 	.word	0x3e700000

080076b0 <__kernel_sin>:
 80076b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b4:	ec55 4b10 	vmov	r4, r5, d0
 80076b8:	b085      	sub	sp, #20
 80076ba:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80076be:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80076c2:	ed8d 1b00 	vstr	d1, [sp]
 80076c6:	9002      	str	r0, [sp, #8]
 80076c8:	da06      	bge.n	80076d8 <__kernel_sin+0x28>
 80076ca:	ee10 0a10 	vmov	r0, s0
 80076ce:	4629      	mov	r1, r5
 80076d0:	f7f9 fa0e 	bl	8000af0 <__aeabi_d2iz>
 80076d4:	2800      	cmp	r0, #0
 80076d6:	d051      	beq.n	800777c <__kernel_sin+0xcc>
 80076d8:	4622      	mov	r2, r4
 80076da:	462b      	mov	r3, r5
 80076dc:	4620      	mov	r0, r4
 80076de:	4629      	mov	r1, r5
 80076e0:	f7f8 ff56 	bl	8000590 <__aeabi_dmul>
 80076e4:	4682      	mov	sl, r0
 80076e6:	468b      	mov	fp, r1
 80076e8:	4602      	mov	r2, r0
 80076ea:	460b      	mov	r3, r1
 80076ec:	4620      	mov	r0, r4
 80076ee:	4629      	mov	r1, r5
 80076f0:	f7f8 ff4e 	bl	8000590 <__aeabi_dmul>
 80076f4:	a341      	add	r3, pc, #260	; (adr r3, 80077fc <__kernel_sin+0x14c>)
 80076f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fa:	4680      	mov	r8, r0
 80076fc:	4689      	mov	r9, r1
 80076fe:	4650      	mov	r0, sl
 8007700:	4659      	mov	r1, fp
 8007702:	f7f8 ff45 	bl	8000590 <__aeabi_dmul>
 8007706:	a33f      	add	r3, pc, #252	; (adr r3, 8007804 <__kernel_sin+0x154>)
 8007708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770c:	f7f8 fd88 	bl	8000220 <__aeabi_dsub>
 8007710:	4652      	mov	r2, sl
 8007712:	465b      	mov	r3, fp
 8007714:	f7f8 ff3c 	bl	8000590 <__aeabi_dmul>
 8007718:	a33c      	add	r3, pc, #240	; (adr r3, 800780c <__kernel_sin+0x15c>)
 800771a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771e:	f7f8 fd81 	bl	8000224 <__adddf3>
 8007722:	4652      	mov	r2, sl
 8007724:	465b      	mov	r3, fp
 8007726:	f7f8 ff33 	bl	8000590 <__aeabi_dmul>
 800772a:	a33a      	add	r3, pc, #232	; (adr r3, 8007814 <__kernel_sin+0x164>)
 800772c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007730:	f7f8 fd76 	bl	8000220 <__aeabi_dsub>
 8007734:	4652      	mov	r2, sl
 8007736:	465b      	mov	r3, fp
 8007738:	f7f8 ff2a 	bl	8000590 <__aeabi_dmul>
 800773c:	a337      	add	r3, pc, #220	; (adr r3, 800781c <__kernel_sin+0x16c>)
 800773e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007742:	f7f8 fd6f 	bl	8000224 <__adddf3>
 8007746:	9b02      	ldr	r3, [sp, #8]
 8007748:	4606      	mov	r6, r0
 800774a:	460f      	mov	r7, r1
 800774c:	b9db      	cbnz	r3, 8007786 <__kernel_sin+0xd6>
 800774e:	4602      	mov	r2, r0
 8007750:	460b      	mov	r3, r1
 8007752:	4650      	mov	r0, sl
 8007754:	4659      	mov	r1, fp
 8007756:	f7f8 ff1b 	bl	8000590 <__aeabi_dmul>
 800775a:	a325      	add	r3, pc, #148	; (adr r3, 80077f0 <__kernel_sin+0x140>)
 800775c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007760:	f7f8 fd5e 	bl	8000220 <__aeabi_dsub>
 8007764:	4642      	mov	r2, r8
 8007766:	464b      	mov	r3, r9
 8007768:	f7f8 ff12 	bl	8000590 <__aeabi_dmul>
 800776c:	4602      	mov	r2, r0
 800776e:	460b      	mov	r3, r1
 8007770:	4620      	mov	r0, r4
 8007772:	4629      	mov	r1, r5
 8007774:	f7f8 fd56 	bl	8000224 <__adddf3>
 8007778:	4604      	mov	r4, r0
 800777a:	460d      	mov	r5, r1
 800777c:	ec45 4b10 	vmov	d0, r4, r5
 8007780:	b005      	add	sp, #20
 8007782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007786:	2200      	movs	r2, #0
 8007788:	4b1b      	ldr	r3, [pc, #108]	; (80077f8 <__kernel_sin+0x148>)
 800778a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800778e:	f7f8 feff 	bl	8000590 <__aeabi_dmul>
 8007792:	4632      	mov	r2, r6
 8007794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007798:	463b      	mov	r3, r7
 800779a:	4640      	mov	r0, r8
 800779c:	4649      	mov	r1, r9
 800779e:	f7f8 fef7 	bl	8000590 <__aeabi_dmul>
 80077a2:	4602      	mov	r2, r0
 80077a4:	460b      	mov	r3, r1
 80077a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077aa:	f7f8 fd39 	bl	8000220 <__aeabi_dsub>
 80077ae:	4652      	mov	r2, sl
 80077b0:	465b      	mov	r3, fp
 80077b2:	f7f8 feed 	bl	8000590 <__aeabi_dmul>
 80077b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077ba:	f7f8 fd31 	bl	8000220 <__aeabi_dsub>
 80077be:	a30c      	add	r3, pc, #48	; (adr r3, 80077f0 <__kernel_sin+0x140>)
 80077c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c4:	4606      	mov	r6, r0
 80077c6:	460f      	mov	r7, r1
 80077c8:	4640      	mov	r0, r8
 80077ca:	4649      	mov	r1, r9
 80077cc:	f7f8 fee0 	bl	8000590 <__aeabi_dmul>
 80077d0:	4602      	mov	r2, r0
 80077d2:	460b      	mov	r3, r1
 80077d4:	4630      	mov	r0, r6
 80077d6:	4639      	mov	r1, r7
 80077d8:	f7f8 fd24 	bl	8000224 <__adddf3>
 80077dc:	4602      	mov	r2, r0
 80077de:	460b      	mov	r3, r1
 80077e0:	4620      	mov	r0, r4
 80077e2:	4629      	mov	r1, r5
 80077e4:	f7f8 fd1c 	bl	8000220 <__aeabi_dsub>
 80077e8:	e7c6      	b.n	8007778 <__kernel_sin+0xc8>
 80077ea:	bf00      	nop
 80077ec:	f3af 8000 	nop.w
 80077f0:	55555549 	.word	0x55555549
 80077f4:	3fc55555 	.word	0x3fc55555
 80077f8:	3fe00000 	.word	0x3fe00000
 80077fc:	5acfd57c 	.word	0x5acfd57c
 8007800:	3de5d93a 	.word	0x3de5d93a
 8007804:	8a2b9ceb 	.word	0x8a2b9ceb
 8007808:	3e5ae5e6 	.word	0x3e5ae5e6
 800780c:	57b1fe7d 	.word	0x57b1fe7d
 8007810:	3ec71de3 	.word	0x3ec71de3
 8007814:	19c161d5 	.word	0x19c161d5
 8007818:	3f2a01a0 	.word	0x3f2a01a0
 800781c:	1110f8a6 	.word	0x1110f8a6
 8007820:	3f811111 	.word	0x3f811111

08007824 <copysign>:
 8007824:	ec51 0b10 	vmov	r0, r1, d0
 8007828:	ee11 0a90 	vmov	r0, s3
 800782c:	ee10 2a10 	vmov	r2, s0
 8007830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007834:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007838:	ea41 0300 	orr.w	r3, r1, r0
 800783c:	ec43 2b10 	vmov	d0, r2, r3
 8007840:	4770      	bx	lr

08007842 <matherr>:
 8007842:	2000      	movs	r0, #0
 8007844:	4770      	bx	lr

08007846 <abort>:
 8007846:	b508      	push	{r3, lr}
 8007848:	2006      	movs	r0, #6
 800784a:	f000 fc93 	bl	8008174 <raise>
 800784e:	2001      	movs	r0, #1
 8007850:	f7fd feee 	bl	8005630 <_exit>

08007854 <__errno>:
 8007854:	4b01      	ldr	r3, [pc, #4]	; (800785c <__errno+0x8>)
 8007856:	6818      	ldr	r0, [r3, #0]
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	20000010 	.word	0x20000010

08007860 <__libc_init_array>:
 8007860:	b570      	push	{r4, r5, r6, lr}
 8007862:	4e0d      	ldr	r6, [pc, #52]	; (8007898 <__libc_init_array+0x38>)
 8007864:	4c0d      	ldr	r4, [pc, #52]	; (800789c <__libc_init_array+0x3c>)
 8007866:	1ba4      	subs	r4, r4, r6
 8007868:	10a4      	asrs	r4, r4, #2
 800786a:	2500      	movs	r5, #0
 800786c:	42a5      	cmp	r5, r4
 800786e:	d109      	bne.n	8007884 <__libc_init_array+0x24>
 8007870:	4e0b      	ldr	r6, [pc, #44]	; (80078a0 <__libc_init_array+0x40>)
 8007872:	4c0c      	ldr	r4, [pc, #48]	; (80078a4 <__libc_init_array+0x44>)
 8007874:	f001 fdfa 	bl	800946c <_init>
 8007878:	1ba4      	subs	r4, r4, r6
 800787a:	10a4      	asrs	r4, r4, #2
 800787c:	2500      	movs	r5, #0
 800787e:	42a5      	cmp	r5, r4
 8007880:	d105      	bne.n	800788e <__libc_init_array+0x2e>
 8007882:	bd70      	pop	{r4, r5, r6, pc}
 8007884:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007888:	4798      	blx	r3
 800788a:	3501      	adds	r5, #1
 800788c:	e7ee      	b.n	800786c <__libc_init_array+0xc>
 800788e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007892:	4798      	blx	r3
 8007894:	3501      	adds	r5, #1
 8007896:	e7f2      	b.n	800787e <__libc_init_array+0x1e>
 8007898:	080099d8 	.word	0x080099d8
 800789c:	080099d8 	.word	0x080099d8
 80078a0:	080099d8 	.word	0x080099d8
 80078a4:	080099e0 	.word	0x080099e0

080078a8 <malloc>:
 80078a8:	4b02      	ldr	r3, [pc, #8]	; (80078b4 <malloc+0xc>)
 80078aa:	4601      	mov	r1, r0
 80078ac:	6818      	ldr	r0, [r3, #0]
 80078ae:	f000 b885 	b.w	80079bc <_malloc_r>
 80078b2:	bf00      	nop
 80078b4:	20000010 	.word	0x20000010

080078b8 <free>:
 80078b8:	4b02      	ldr	r3, [pc, #8]	; (80078c4 <free+0xc>)
 80078ba:	4601      	mov	r1, r0
 80078bc:	6818      	ldr	r0, [r3, #0]
 80078be:	f000 b82f 	b.w	8007920 <_free_r>
 80078c2:	bf00      	nop
 80078c4:	20000010 	.word	0x20000010

080078c8 <memcpy>:
 80078c8:	b510      	push	{r4, lr}
 80078ca:	1e43      	subs	r3, r0, #1
 80078cc:	440a      	add	r2, r1
 80078ce:	4291      	cmp	r1, r2
 80078d0:	d100      	bne.n	80078d4 <memcpy+0xc>
 80078d2:	bd10      	pop	{r4, pc}
 80078d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078dc:	e7f7      	b.n	80078ce <memcpy+0x6>

080078de <memmove>:
 80078de:	4288      	cmp	r0, r1
 80078e0:	b510      	push	{r4, lr}
 80078e2:	eb01 0302 	add.w	r3, r1, r2
 80078e6:	d807      	bhi.n	80078f8 <memmove+0x1a>
 80078e8:	1e42      	subs	r2, r0, #1
 80078ea:	4299      	cmp	r1, r3
 80078ec:	d00a      	beq.n	8007904 <memmove+0x26>
 80078ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078f2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80078f6:	e7f8      	b.n	80078ea <memmove+0xc>
 80078f8:	4283      	cmp	r3, r0
 80078fa:	d9f5      	bls.n	80078e8 <memmove+0xa>
 80078fc:	1881      	adds	r1, r0, r2
 80078fe:	1ad2      	subs	r2, r2, r3
 8007900:	42d3      	cmn	r3, r2
 8007902:	d100      	bne.n	8007906 <memmove+0x28>
 8007904:	bd10      	pop	{r4, pc}
 8007906:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800790a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800790e:	e7f7      	b.n	8007900 <memmove+0x22>

08007910 <memset>:
 8007910:	4402      	add	r2, r0
 8007912:	4603      	mov	r3, r0
 8007914:	4293      	cmp	r3, r2
 8007916:	d100      	bne.n	800791a <memset+0xa>
 8007918:	4770      	bx	lr
 800791a:	f803 1b01 	strb.w	r1, [r3], #1
 800791e:	e7f9      	b.n	8007914 <memset+0x4>

08007920 <_free_r>:
 8007920:	b538      	push	{r3, r4, r5, lr}
 8007922:	4605      	mov	r5, r0
 8007924:	2900      	cmp	r1, #0
 8007926:	d045      	beq.n	80079b4 <_free_r+0x94>
 8007928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800792c:	1f0c      	subs	r4, r1, #4
 800792e:	2b00      	cmp	r3, #0
 8007930:	bfb8      	it	lt
 8007932:	18e4      	addlt	r4, r4, r3
 8007934:	f001 fa8e 	bl	8008e54 <__malloc_lock>
 8007938:	4a1f      	ldr	r2, [pc, #124]	; (80079b8 <_free_r+0x98>)
 800793a:	6813      	ldr	r3, [r2, #0]
 800793c:	4610      	mov	r0, r2
 800793e:	b933      	cbnz	r3, 800794e <_free_r+0x2e>
 8007940:	6063      	str	r3, [r4, #4]
 8007942:	6014      	str	r4, [r2, #0]
 8007944:	4628      	mov	r0, r5
 8007946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800794a:	f001 ba84 	b.w	8008e56 <__malloc_unlock>
 800794e:	42a3      	cmp	r3, r4
 8007950:	d90c      	bls.n	800796c <_free_r+0x4c>
 8007952:	6821      	ldr	r1, [r4, #0]
 8007954:	1862      	adds	r2, r4, r1
 8007956:	4293      	cmp	r3, r2
 8007958:	bf04      	itt	eq
 800795a:	681a      	ldreq	r2, [r3, #0]
 800795c:	685b      	ldreq	r3, [r3, #4]
 800795e:	6063      	str	r3, [r4, #4]
 8007960:	bf04      	itt	eq
 8007962:	1852      	addeq	r2, r2, r1
 8007964:	6022      	streq	r2, [r4, #0]
 8007966:	6004      	str	r4, [r0, #0]
 8007968:	e7ec      	b.n	8007944 <_free_r+0x24>
 800796a:	4613      	mov	r3, r2
 800796c:	685a      	ldr	r2, [r3, #4]
 800796e:	b10a      	cbz	r2, 8007974 <_free_r+0x54>
 8007970:	42a2      	cmp	r2, r4
 8007972:	d9fa      	bls.n	800796a <_free_r+0x4a>
 8007974:	6819      	ldr	r1, [r3, #0]
 8007976:	1858      	adds	r0, r3, r1
 8007978:	42a0      	cmp	r0, r4
 800797a:	d10b      	bne.n	8007994 <_free_r+0x74>
 800797c:	6820      	ldr	r0, [r4, #0]
 800797e:	4401      	add	r1, r0
 8007980:	1858      	adds	r0, r3, r1
 8007982:	4282      	cmp	r2, r0
 8007984:	6019      	str	r1, [r3, #0]
 8007986:	d1dd      	bne.n	8007944 <_free_r+0x24>
 8007988:	6810      	ldr	r0, [r2, #0]
 800798a:	6852      	ldr	r2, [r2, #4]
 800798c:	605a      	str	r2, [r3, #4]
 800798e:	4401      	add	r1, r0
 8007990:	6019      	str	r1, [r3, #0]
 8007992:	e7d7      	b.n	8007944 <_free_r+0x24>
 8007994:	d902      	bls.n	800799c <_free_r+0x7c>
 8007996:	230c      	movs	r3, #12
 8007998:	602b      	str	r3, [r5, #0]
 800799a:	e7d3      	b.n	8007944 <_free_r+0x24>
 800799c:	6820      	ldr	r0, [r4, #0]
 800799e:	1821      	adds	r1, r4, r0
 80079a0:	428a      	cmp	r2, r1
 80079a2:	bf04      	itt	eq
 80079a4:	6811      	ldreq	r1, [r2, #0]
 80079a6:	6852      	ldreq	r2, [r2, #4]
 80079a8:	6062      	str	r2, [r4, #4]
 80079aa:	bf04      	itt	eq
 80079ac:	1809      	addeq	r1, r1, r0
 80079ae:	6021      	streq	r1, [r4, #0]
 80079b0:	605c      	str	r4, [r3, #4]
 80079b2:	e7c7      	b.n	8007944 <_free_r+0x24>
 80079b4:	bd38      	pop	{r3, r4, r5, pc}
 80079b6:	bf00      	nop
 80079b8:	200002b8 	.word	0x200002b8

080079bc <_malloc_r>:
 80079bc:	b570      	push	{r4, r5, r6, lr}
 80079be:	1ccd      	adds	r5, r1, #3
 80079c0:	f025 0503 	bic.w	r5, r5, #3
 80079c4:	3508      	adds	r5, #8
 80079c6:	2d0c      	cmp	r5, #12
 80079c8:	bf38      	it	cc
 80079ca:	250c      	movcc	r5, #12
 80079cc:	2d00      	cmp	r5, #0
 80079ce:	4606      	mov	r6, r0
 80079d0:	db01      	blt.n	80079d6 <_malloc_r+0x1a>
 80079d2:	42a9      	cmp	r1, r5
 80079d4:	d903      	bls.n	80079de <_malloc_r+0x22>
 80079d6:	230c      	movs	r3, #12
 80079d8:	6033      	str	r3, [r6, #0]
 80079da:	2000      	movs	r0, #0
 80079dc:	bd70      	pop	{r4, r5, r6, pc}
 80079de:	f001 fa39 	bl	8008e54 <__malloc_lock>
 80079e2:	4a21      	ldr	r2, [pc, #132]	; (8007a68 <_malloc_r+0xac>)
 80079e4:	6814      	ldr	r4, [r2, #0]
 80079e6:	4621      	mov	r1, r4
 80079e8:	b991      	cbnz	r1, 8007a10 <_malloc_r+0x54>
 80079ea:	4c20      	ldr	r4, [pc, #128]	; (8007a6c <_malloc_r+0xb0>)
 80079ec:	6823      	ldr	r3, [r4, #0]
 80079ee:	b91b      	cbnz	r3, 80079f8 <_malloc_r+0x3c>
 80079f0:	4630      	mov	r0, r6
 80079f2:	f000 fb87 	bl	8008104 <_sbrk_r>
 80079f6:	6020      	str	r0, [r4, #0]
 80079f8:	4629      	mov	r1, r5
 80079fa:	4630      	mov	r0, r6
 80079fc:	f000 fb82 	bl	8008104 <_sbrk_r>
 8007a00:	1c43      	adds	r3, r0, #1
 8007a02:	d124      	bne.n	8007a4e <_malloc_r+0x92>
 8007a04:	230c      	movs	r3, #12
 8007a06:	6033      	str	r3, [r6, #0]
 8007a08:	4630      	mov	r0, r6
 8007a0a:	f001 fa24 	bl	8008e56 <__malloc_unlock>
 8007a0e:	e7e4      	b.n	80079da <_malloc_r+0x1e>
 8007a10:	680b      	ldr	r3, [r1, #0]
 8007a12:	1b5b      	subs	r3, r3, r5
 8007a14:	d418      	bmi.n	8007a48 <_malloc_r+0x8c>
 8007a16:	2b0b      	cmp	r3, #11
 8007a18:	d90f      	bls.n	8007a3a <_malloc_r+0x7e>
 8007a1a:	600b      	str	r3, [r1, #0]
 8007a1c:	50cd      	str	r5, [r1, r3]
 8007a1e:	18cc      	adds	r4, r1, r3
 8007a20:	4630      	mov	r0, r6
 8007a22:	f001 fa18 	bl	8008e56 <__malloc_unlock>
 8007a26:	f104 000b 	add.w	r0, r4, #11
 8007a2a:	1d23      	adds	r3, r4, #4
 8007a2c:	f020 0007 	bic.w	r0, r0, #7
 8007a30:	1ac3      	subs	r3, r0, r3
 8007a32:	d0d3      	beq.n	80079dc <_malloc_r+0x20>
 8007a34:	425a      	negs	r2, r3
 8007a36:	50e2      	str	r2, [r4, r3]
 8007a38:	e7d0      	b.n	80079dc <_malloc_r+0x20>
 8007a3a:	428c      	cmp	r4, r1
 8007a3c:	684b      	ldr	r3, [r1, #4]
 8007a3e:	bf16      	itet	ne
 8007a40:	6063      	strne	r3, [r4, #4]
 8007a42:	6013      	streq	r3, [r2, #0]
 8007a44:	460c      	movne	r4, r1
 8007a46:	e7eb      	b.n	8007a20 <_malloc_r+0x64>
 8007a48:	460c      	mov	r4, r1
 8007a4a:	6849      	ldr	r1, [r1, #4]
 8007a4c:	e7cc      	b.n	80079e8 <_malloc_r+0x2c>
 8007a4e:	1cc4      	adds	r4, r0, #3
 8007a50:	f024 0403 	bic.w	r4, r4, #3
 8007a54:	42a0      	cmp	r0, r4
 8007a56:	d005      	beq.n	8007a64 <_malloc_r+0xa8>
 8007a58:	1a21      	subs	r1, r4, r0
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	f000 fb52 	bl	8008104 <_sbrk_r>
 8007a60:	3001      	adds	r0, #1
 8007a62:	d0cf      	beq.n	8007a04 <_malloc_r+0x48>
 8007a64:	6025      	str	r5, [r4, #0]
 8007a66:	e7db      	b.n	8007a20 <_malloc_r+0x64>
 8007a68:	200002b8 	.word	0x200002b8
 8007a6c:	200002bc 	.word	0x200002bc

08007a70 <__cvt>:
 8007a70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a74:	ec55 4b10 	vmov	r4, r5, d0
 8007a78:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007a7a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007a7e:	2d00      	cmp	r5, #0
 8007a80:	460e      	mov	r6, r1
 8007a82:	4691      	mov	r9, r2
 8007a84:	4619      	mov	r1, r3
 8007a86:	bfb8      	it	lt
 8007a88:	4622      	movlt	r2, r4
 8007a8a:	462b      	mov	r3, r5
 8007a8c:	f027 0720 	bic.w	r7, r7, #32
 8007a90:	bfbb      	ittet	lt
 8007a92:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007a96:	461d      	movlt	r5, r3
 8007a98:	2300      	movge	r3, #0
 8007a9a:	232d      	movlt	r3, #45	; 0x2d
 8007a9c:	bfb8      	it	lt
 8007a9e:	4614      	movlt	r4, r2
 8007aa0:	2f46      	cmp	r7, #70	; 0x46
 8007aa2:	700b      	strb	r3, [r1, #0]
 8007aa4:	d004      	beq.n	8007ab0 <__cvt+0x40>
 8007aa6:	2f45      	cmp	r7, #69	; 0x45
 8007aa8:	d100      	bne.n	8007aac <__cvt+0x3c>
 8007aaa:	3601      	adds	r6, #1
 8007aac:	2102      	movs	r1, #2
 8007aae:	e000      	b.n	8007ab2 <__cvt+0x42>
 8007ab0:	2103      	movs	r1, #3
 8007ab2:	ab03      	add	r3, sp, #12
 8007ab4:	9301      	str	r3, [sp, #4]
 8007ab6:	ab02      	add	r3, sp, #8
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	4632      	mov	r2, r6
 8007abc:	4653      	mov	r3, sl
 8007abe:	ec45 4b10 	vmov	d0, r4, r5
 8007ac2:	f000 fc01 	bl	80082c8 <_dtoa_r>
 8007ac6:	2f47      	cmp	r7, #71	; 0x47
 8007ac8:	4680      	mov	r8, r0
 8007aca:	d102      	bne.n	8007ad2 <__cvt+0x62>
 8007acc:	f019 0f01 	tst.w	r9, #1
 8007ad0:	d026      	beq.n	8007b20 <__cvt+0xb0>
 8007ad2:	2f46      	cmp	r7, #70	; 0x46
 8007ad4:	eb08 0906 	add.w	r9, r8, r6
 8007ad8:	d111      	bne.n	8007afe <__cvt+0x8e>
 8007ada:	f898 3000 	ldrb.w	r3, [r8]
 8007ade:	2b30      	cmp	r3, #48	; 0x30
 8007ae0:	d10a      	bne.n	8007af8 <__cvt+0x88>
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	4629      	mov	r1, r5
 8007aea:	f7f8 ffb9 	bl	8000a60 <__aeabi_dcmpeq>
 8007aee:	b918      	cbnz	r0, 8007af8 <__cvt+0x88>
 8007af0:	f1c6 0601 	rsb	r6, r6, #1
 8007af4:	f8ca 6000 	str.w	r6, [sl]
 8007af8:	f8da 3000 	ldr.w	r3, [sl]
 8007afc:	4499      	add	r9, r3
 8007afe:	2200      	movs	r2, #0
 8007b00:	2300      	movs	r3, #0
 8007b02:	4620      	mov	r0, r4
 8007b04:	4629      	mov	r1, r5
 8007b06:	f7f8 ffab 	bl	8000a60 <__aeabi_dcmpeq>
 8007b0a:	b938      	cbnz	r0, 8007b1c <__cvt+0xac>
 8007b0c:	2230      	movs	r2, #48	; 0x30
 8007b0e:	9b03      	ldr	r3, [sp, #12]
 8007b10:	454b      	cmp	r3, r9
 8007b12:	d205      	bcs.n	8007b20 <__cvt+0xb0>
 8007b14:	1c59      	adds	r1, r3, #1
 8007b16:	9103      	str	r1, [sp, #12]
 8007b18:	701a      	strb	r2, [r3, #0]
 8007b1a:	e7f8      	b.n	8007b0e <__cvt+0x9e>
 8007b1c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007b20:	9b03      	ldr	r3, [sp, #12]
 8007b22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b24:	eba3 0308 	sub.w	r3, r3, r8
 8007b28:	4640      	mov	r0, r8
 8007b2a:	6013      	str	r3, [r2, #0]
 8007b2c:	b004      	add	sp, #16
 8007b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007b32 <__exponent>:
 8007b32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b34:	2900      	cmp	r1, #0
 8007b36:	4604      	mov	r4, r0
 8007b38:	bfba      	itte	lt
 8007b3a:	4249      	neglt	r1, r1
 8007b3c:	232d      	movlt	r3, #45	; 0x2d
 8007b3e:	232b      	movge	r3, #43	; 0x2b
 8007b40:	2909      	cmp	r1, #9
 8007b42:	f804 2b02 	strb.w	r2, [r4], #2
 8007b46:	7043      	strb	r3, [r0, #1]
 8007b48:	dd20      	ble.n	8007b8c <__exponent+0x5a>
 8007b4a:	f10d 0307 	add.w	r3, sp, #7
 8007b4e:	461f      	mov	r7, r3
 8007b50:	260a      	movs	r6, #10
 8007b52:	fb91 f5f6 	sdiv	r5, r1, r6
 8007b56:	fb06 1115 	mls	r1, r6, r5, r1
 8007b5a:	3130      	adds	r1, #48	; 0x30
 8007b5c:	2d09      	cmp	r5, #9
 8007b5e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007b62:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8007b66:	4629      	mov	r1, r5
 8007b68:	dc09      	bgt.n	8007b7e <__exponent+0x4c>
 8007b6a:	3130      	adds	r1, #48	; 0x30
 8007b6c:	3b02      	subs	r3, #2
 8007b6e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007b72:	42bb      	cmp	r3, r7
 8007b74:	4622      	mov	r2, r4
 8007b76:	d304      	bcc.n	8007b82 <__exponent+0x50>
 8007b78:	1a10      	subs	r0, r2, r0
 8007b7a:	b003      	add	sp, #12
 8007b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b7e:	4613      	mov	r3, r2
 8007b80:	e7e7      	b.n	8007b52 <__exponent+0x20>
 8007b82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b86:	f804 2b01 	strb.w	r2, [r4], #1
 8007b8a:	e7f2      	b.n	8007b72 <__exponent+0x40>
 8007b8c:	2330      	movs	r3, #48	; 0x30
 8007b8e:	4419      	add	r1, r3
 8007b90:	7083      	strb	r3, [r0, #2]
 8007b92:	1d02      	adds	r2, r0, #4
 8007b94:	70c1      	strb	r1, [r0, #3]
 8007b96:	e7ef      	b.n	8007b78 <__exponent+0x46>

08007b98 <_printf_float>:
 8007b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b9c:	b08d      	sub	sp, #52	; 0x34
 8007b9e:	460c      	mov	r4, r1
 8007ba0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007ba4:	4616      	mov	r6, r2
 8007ba6:	461f      	mov	r7, r3
 8007ba8:	4605      	mov	r5, r0
 8007baa:	f001 f945 	bl	8008e38 <_localeconv_r>
 8007bae:	6803      	ldr	r3, [r0, #0]
 8007bb0:	9304      	str	r3, [sp, #16]
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7f8 fb28 	bl	8000208 <strlen>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	930a      	str	r3, [sp, #40]	; 0x28
 8007bbc:	f8d8 3000 	ldr.w	r3, [r8]
 8007bc0:	9005      	str	r0, [sp, #20]
 8007bc2:	3307      	adds	r3, #7
 8007bc4:	f023 0307 	bic.w	r3, r3, #7
 8007bc8:	f103 0208 	add.w	r2, r3, #8
 8007bcc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007bd0:	f8d4 b000 	ldr.w	fp, [r4]
 8007bd4:	f8c8 2000 	str.w	r2, [r8]
 8007bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bdc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007be0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007be4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007be8:	9307      	str	r3, [sp, #28]
 8007bea:	f8cd 8018 	str.w	r8, [sp, #24]
 8007bee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bf2:	4ba7      	ldr	r3, [pc, #668]	; (8007e90 <_printf_float+0x2f8>)
 8007bf4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bf8:	f7f8 ff64 	bl	8000ac4 <__aeabi_dcmpun>
 8007bfc:	bb70      	cbnz	r0, 8007c5c <_printf_float+0xc4>
 8007bfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c02:	4ba3      	ldr	r3, [pc, #652]	; (8007e90 <_printf_float+0x2f8>)
 8007c04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c08:	f7f8 ff3e 	bl	8000a88 <__aeabi_dcmple>
 8007c0c:	bb30      	cbnz	r0, 8007c5c <_printf_float+0xc4>
 8007c0e:	2200      	movs	r2, #0
 8007c10:	2300      	movs	r3, #0
 8007c12:	4640      	mov	r0, r8
 8007c14:	4649      	mov	r1, r9
 8007c16:	f7f8 ff2d 	bl	8000a74 <__aeabi_dcmplt>
 8007c1a:	b110      	cbz	r0, 8007c22 <_printf_float+0x8a>
 8007c1c:	232d      	movs	r3, #45	; 0x2d
 8007c1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c22:	4a9c      	ldr	r2, [pc, #624]	; (8007e94 <_printf_float+0x2fc>)
 8007c24:	4b9c      	ldr	r3, [pc, #624]	; (8007e98 <_printf_float+0x300>)
 8007c26:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007c2a:	bf8c      	ite	hi
 8007c2c:	4690      	movhi	r8, r2
 8007c2e:	4698      	movls	r8, r3
 8007c30:	2303      	movs	r3, #3
 8007c32:	f02b 0204 	bic.w	r2, fp, #4
 8007c36:	6123      	str	r3, [r4, #16]
 8007c38:	6022      	str	r2, [r4, #0]
 8007c3a:	f04f 0900 	mov.w	r9, #0
 8007c3e:	9700      	str	r7, [sp, #0]
 8007c40:	4633      	mov	r3, r6
 8007c42:	aa0b      	add	r2, sp, #44	; 0x2c
 8007c44:	4621      	mov	r1, r4
 8007c46:	4628      	mov	r0, r5
 8007c48:	f000 f9e6 	bl	8008018 <_printf_common>
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	f040 808d 	bne.w	8007d6c <_printf_float+0x1d4>
 8007c52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c56:	b00d      	add	sp, #52	; 0x34
 8007c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5c:	4642      	mov	r2, r8
 8007c5e:	464b      	mov	r3, r9
 8007c60:	4640      	mov	r0, r8
 8007c62:	4649      	mov	r1, r9
 8007c64:	f7f8 ff2e 	bl	8000ac4 <__aeabi_dcmpun>
 8007c68:	b110      	cbz	r0, 8007c70 <_printf_float+0xd8>
 8007c6a:	4a8c      	ldr	r2, [pc, #560]	; (8007e9c <_printf_float+0x304>)
 8007c6c:	4b8c      	ldr	r3, [pc, #560]	; (8007ea0 <_printf_float+0x308>)
 8007c6e:	e7da      	b.n	8007c26 <_printf_float+0x8e>
 8007c70:	6861      	ldr	r1, [r4, #4]
 8007c72:	1c4b      	adds	r3, r1, #1
 8007c74:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007c78:	a80a      	add	r0, sp, #40	; 0x28
 8007c7a:	d13e      	bne.n	8007cfa <_printf_float+0x162>
 8007c7c:	2306      	movs	r3, #6
 8007c7e:	6063      	str	r3, [r4, #4]
 8007c80:	2300      	movs	r3, #0
 8007c82:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007c86:	ab09      	add	r3, sp, #36	; 0x24
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	ec49 8b10 	vmov	d0, r8, r9
 8007c8e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007c92:	6022      	str	r2, [r4, #0]
 8007c94:	f8cd a004 	str.w	sl, [sp, #4]
 8007c98:	6861      	ldr	r1, [r4, #4]
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	f7ff fee8 	bl	8007a70 <__cvt>
 8007ca0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007ca4:	2b47      	cmp	r3, #71	; 0x47
 8007ca6:	4680      	mov	r8, r0
 8007ca8:	d109      	bne.n	8007cbe <_printf_float+0x126>
 8007caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cac:	1cd8      	adds	r0, r3, #3
 8007cae:	db02      	blt.n	8007cb6 <_printf_float+0x11e>
 8007cb0:	6862      	ldr	r2, [r4, #4]
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	dd47      	ble.n	8007d46 <_printf_float+0x1ae>
 8007cb6:	f1aa 0a02 	sub.w	sl, sl, #2
 8007cba:	fa5f fa8a 	uxtb.w	sl, sl
 8007cbe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007cc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cc4:	d824      	bhi.n	8007d10 <_printf_float+0x178>
 8007cc6:	3901      	subs	r1, #1
 8007cc8:	4652      	mov	r2, sl
 8007cca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007cce:	9109      	str	r1, [sp, #36]	; 0x24
 8007cd0:	f7ff ff2f 	bl	8007b32 <__exponent>
 8007cd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cd6:	1813      	adds	r3, r2, r0
 8007cd8:	2a01      	cmp	r2, #1
 8007cda:	4681      	mov	r9, r0
 8007cdc:	6123      	str	r3, [r4, #16]
 8007cde:	dc02      	bgt.n	8007ce6 <_printf_float+0x14e>
 8007ce0:	6822      	ldr	r2, [r4, #0]
 8007ce2:	07d1      	lsls	r1, r2, #31
 8007ce4:	d501      	bpl.n	8007cea <_printf_float+0x152>
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	6123      	str	r3, [r4, #16]
 8007cea:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d0a5      	beq.n	8007c3e <_printf_float+0xa6>
 8007cf2:	232d      	movs	r3, #45	; 0x2d
 8007cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cf8:	e7a1      	b.n	8007c3e <_printf_float+0xa6>
 8007cfa:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007cfe:	f000 8177 	beq.w	8007ff0 <_printf_float+0x458>
 8007d02:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007d06:	d1bb      	bne.n	8007c80 <_printf_float+0xe8>
 8007d08:	2900      	cmp	r1, #0
 8007d0a:	d1b9      	bne.n	8007c80 <_printf_float+0xe8>
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e7b6      	b.n	8007c7e <_printf_float+0xe6>
 8007d10:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007d14:	d119      	bne.n	8007d4a <_printf_float+0x1b2>
 8007d16:	2900      	cmp	r1, #0
 8007d18:	6863      	ldr	r3, [r4, #4]
 8007d1a:	dd0c      	ble.n	8007d36 <_printf_float+0x19e>
 8007d1c:	6121      	str	r1, [r4, #16]
 8007d1e:	b913      	cbnz	r3, 8007d26 <_printf_float+0x18e>
 8007d20:	6822      	ldr	r2, [r4, #0]
 8007d22:	07d2      	lsls	r2, r2, #31
 8007d24:	d502      	bpl.n	8007d2c <_printf_float+0x194>
 8007d26:	3301      	adds	r3, #1
 8007d28:	440b      	add	r3, r1
 8007d2a:	6123      	str	r3, [r4, #16]
 8007d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d2e:	65a3      	str	r3, [r4, #88]	; 0x58
 8007d30:	f04f 0900 	mov.w	r9, #0
 8007d34:	e7d9      	b.n	8007cea <_printf_float+0x152>
 8007d36:	b913      	cbnz	r3, 8007d3e <_printf_float+0x1a6>
 8007d38:	6822      	ldr	r2, [r4, #0]
 8007d3a:	07d0      	lsls	r0, r2, #31
 8007d3c:	d501      	bpl.n	8007d42 <_printf_float+0x1aa>
 8007d3e:	3302      	adds	r3, #2
 8007d40:	e7f3      	b.n	8007d2a <_printf_float+0x192>
 8007d42:	2301      	movs	r3, #1
 8007d44:	e7f1      	b.n	8007d2a <_printf_float+0x192>
 8007d46:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007d4a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	db05      	blt.n	8007d5e <_printf_float+0x1c6>
 8007d52:	6822      	ldr	r2, [r4, #0]
 8007d54:	6123      	str	r3, [r4, #16]
 8007d56:	07d1      	lsls	r1, r2, #31
 8007d58:	d5e8      	bpl.n	8007d2c <_printf_float+0x194>
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	e7e5      	b.n	8007d2a <_printf_float+0x192>
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	bfd4      	ite	le
 8007d62:	f1c3 0302 	rsble	r3, r3, #2
 8007d66:	2301      	movgt	r3, #1
 8007d68:	4413      	add	r3, r2
 8007d6a:	e7de      	b.n	8007d2a <_printf_float+0x192>
 8007d6c:	6823      	ldr	r3, [r4, #0]
 8007d6e:	055a      	lsls	r2, r3, #21
 8007d70:	d407      	bmi.n	8007d82 <_printf_float+0x1ea>
 8007d72:	6923      	ldr	r3, [r4, #16]
 8007d74:	4642      	mov	r2, r8
 8007d76:	4631      	mov	r1, r6
 8007d78:	4628      	mov	r0, r5
 8007d7a:	47b8      	blx	r7
 8007d7c:	3001      	adds	r0, #1
 8007d7e:	d12b      	bne.n	8007dd8 <_printf_float+0x240>
 8007d80:	e767      	b.n	8007c52 <_printf_float+0xba>
 8007d82:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007d86:	f240 80dc 	bls.w	8007f42 <_printf_float+0x3aa>
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d92:	f7f8 fe65 	bl	8000a60 <__aeabi_dcmpeq>
 8007d96:	2800      	cmp	r0, #0
 8007d98:	d033      	beq.n	8007e02 <_printf_float+0x26a>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	4a41      	ldr	r2, [pc, #260]	; (8007ea4 <_printf_float+0x30c>)
 8007d9e:	4631      	mov	r1, r6
 8007da0:	4628      	mov	r0, r5
 8007da2:	47b8      	blx	r7
 8007da4:	3001      	adds	r0, #1
 8007da6:	f43f af54 	beq.w	8007c52 <_printf_float+0xba>
 8007daa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007dae:	429a      	cmp	r2, r3
 8007db0:	db02      	blt.n	8007db8 <_printf_float+0x220>
 8007db2:	6823      	ldr	r3, [r4, #0]
 8007db4:	07d8      	lsls	r0, r3, #31
 8007db6:	d50f      	bpl.n	8007dd8 <_printf_float+0x240>
 8007db8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dbc:	4631      	mov	r1, r6
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	47b8      	blx	r7
 8007dc2:	3001      	adds	r0, #1
 8007dc4:	f43f af45 	beq.w	8007c52 <_printf_float+0xba>
 8007dc8:	f04f 0800 	mov.w	r8, #0
 8007dcc:	f104 091a 	add.w	r9, r4, #26
 8007dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	4543      	cmp	r3, r8
 8007dd6:	dc09      	bgt.n	8007dec <_printf_float+0x254>
 8007dd8:	6823      	ldr	r3, [r4, #0]
 8007dda:	079b      	lsls	r3, r3, #30
 8007ddc:	f100 8103 	bmi.w	8007fe6 <_printf_float+0x44e>
 8007de0:	68e0      	ldr	r0, [r4, #12]
 8007de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007de4:	4298      	cmp	r0, r3
 8007de6:	bfb8      	it	lt
 8007de8:	4618      	movlt	r0, r3
 8007dea:	e734      	b.n	8007c56 <_printf_float+0xbe>
 8007dec:	2301      	movs	r3, #1
 8007dee:	464a      	mov	r2, r9
 8007df0:	4631      	mov	r1, r6
 8007df2:	4628      	mov	r0, r5
 8007df4:	47b8      	blx	r7
 8007df6:	3001      	adds	r0, #1
 8007df8:	f43f af2b 	beq.w	8007c52 <_printf_float+0xba>
 8007dfc:	f108 0801 	add.w	r8, r8, #1
 8007e00:	e7e6      	b.n	8007dd0 <_printf_float+0x238>
 8007e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	dc2b      	bgt.n	8007e60 <_printf_float+0x2c8>
 8007e08:	2301      	movs	r3, #1
 8007e0a:	4a26      	ldr	r2, [pc, #152]	; (8007ea4 <_printf_float+0x30c>)
 8007e0c:	4631      	mov	r1, r6
 8007e0e:	4628      	mov	r0, r5
 8007e10:	47b8      	blx	r7
 8007e12:	3001      	adds	r0, #1
 8007e14:	f43f af1d 	beq.w	8007c52 <_printf_float+0xba>
 8007e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e1a:	b923      	cbnz	r3, 8007e26 <_printf_float+0x28e>
 8007e1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e1e:	b913      	cbnz	r3, 8007e26 <_printf_float+0x28e>
 8007e20:	6823      	ldr	r3, [r4, #0]
 8007e22:	07d9      	lsls	r1, r3, #31
 8007e24:	d5d8      	bpl.n	8007dd8 <_printf_float+0x240>
 8007e26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e2a:	4631      	mov	r1, r6
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	47b8      	blx	r7
 8007e30:	3001      	adds	r0, #1
 8007e32:	f43f af0e 	beq.w	8007c52 <_printf_float+0xba>
 8007e36:	f04f 0900 	mov.w	r9, #0
 8007e3a:	f104 0a1a 	add.w	sl, r4, #26
 8007e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e40:	425b      	negs	r3, r3
 8007e42:	454b      	cmp	r3, r9
 8007e44:	dc01      	bgt.n	8007e4a <_printf_float+0x2b2>
 8007e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e48:	e794      	b.n	8007d74 <_printf_float+0x1dc>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	4652      	mov	r2, sl
 8007e4e:	4631      	mov	r1, r6
 8007e50:	4628      	mov	r0, r5
 8007e52:	47b8      	blx	r7
 8007e54:	3001      	adds	r0, #1
 8007e56:	f43f aefc 	beq.w	8007c52 <_printf_float+0xba>
 8007e5a:	f109 0901 	add.w	r9, r9, #1
 8007e5e:	e7ee      	b.n	8007e3e <_printf_float+0x2a6>
 8007e60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e64:	429a      	cmp	r2, r3
 8007e66:	bfa8      	it	ge
 8007e68:	461a      	movge	r2, r3
 8007e6a:	2a00      	cmp	r2, #0
 8007e6c:	4691      	mov	r9, r2
 8007e6e:	dd07      	ble.n	8007e80 <_printf_float+0x2e8>
 8007e70:	4613      	mov	r3, r2
 8007e72:	4631      	mov	r1, r6
 8007e74:	4642      	mov	r2, r8
 8007e76:	4628      	mov	r0, r5
 8007e78:	47b8      	blx	r7
 8007e7a:	3001      	adds	r0, #1
 8007e7c:	f43f aee9 	beq.w	8007c52 <_printf_float+0xba>
 8007e80:	f104 031a 	add.w	r3, r4, #26
 8007e84:	f04f 0b00 	mov.w	fp, #0
 8007e88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e8c:	9306      	str	r3, [sp, #24]
 8007e8e:	e015      	b.n	8007ebc <_printf_float+0x324>
 8007e90:	7fefffff 	.word	0x7fefffff
 8007e94:	080097ac 	.word	0x080097ac
 8007e98:	080097a8 	.word	0x080097a8
 8007e9c:	080097b4 	.word	0x080097b4
 8007ea0:	080097b0 	.word	0x080097b0
 8007ea4:	080097b8 	.word	0x080097b8
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	9a06      	ldr	r2, [sp, #24]
 8007eac:	4631      	mov	r1, r6
 8007eae:	4628      	mov	r0, r5
 8007eb0:	47b8      	blx	r7
 8007eb2:	3001      	adds	r0, #1
 8007eb4:	f43f aecd 	beq.w	8007c52 <_printf_float+0xba>
 8007eb8:	f10b 0b01 	add.w	fp, fp, #1
 8007ebc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007ec0:	ebaa 0309 	sub.w	r3, sl, r9
 8007ec4:	455b      	cmp	r3, fp
 8007ec6:	dcef      	bgt.n	8007ea8 <_printf_float+0x310>
 8007ec8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	44d0      	add	r8, sl
 8007ed0:	db15      	blt.n	8007efe <_printf_float+0x366>
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	07da      	lsls	r2, r3, #31
 8007ed6:	d412      	bmi.n	8007efe <_printf_float+0x366>
 8007ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eda:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007edc:	eba3 020a 	sub.w	r2, r3, sl
 8007ee0:	eba3 0a01 	sub.w	sl, r3, r1
 8007ee4:	4592      	cmp	sl, r2
 8007ee6:	bfa8      	it	ge
 8007ee8:	4692      	movge	sl, r2
 8007eea:	f1ba 0f00 	cmp.w	sl, #0
 8007eee:	dc0e      	bgt.n	8007f0e <_printf_float+0x376>
 8007ef0:	f04f 0800 	mov.w	r8, #0
 8007ef4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ef8:	f104 091a 	add.w	r9, r4, #26
 8007efc:	e019      	b.n	8007f32 <_printf_float+0x39a>
 8007efe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f02:	4631      	mov	r1, r6
 8007f04:	4628      	mov	r0, r5
 8007f06:	47b8      	blx	r7
 8007f08:	3001      	adds	r0, #1
 8007f0a:	d1e5      	bne.n	8007ed8 <_printf_float+0x340>
 8007f0c:	e6a1      	b.n	8007c52 <_printf_float+0xba>
 8007f0e:	4653      	mov	r3, sl
 8007f10:	4642      	mov	r2, r8
 8007f12:	4631      	mov	r1, r6
 8007f14:	4628      	mov	r0, r5
 8007f16:	47b8      	blx	r7
 8007f18:	3001      	adds	r0, #1
 8007f1a:	d1e9      	bne.n	8007ef0 <_printf_float+0x358>
 8007f1c:	e699      	b.n	8007c52 <_printf_float+0xba>
 8007f1e:	2301      	movs	r3, #1
 8007f20:	464a      	mov	r2, r9
 8007f22:	4631      	mov	r1, r6
 8007f24:	4628      	mov	r0, r5
 8007f26:	47b8      	blx	r7
 8007f28:	3001      	adds	r0, #1
 8007f2a:	f43f ae92 	beq.w	8007c52 <_printf_float+0xba>
 8007f2e:	f108 0801 	add.w	r8, r8, #1
 8007f32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f36:	1a9b      	subs	r3, r3, r2
 8007f38:	eba3 030a 	sub.w	r3, r3, sl
 8007f3c:	4543      	cmp	r3, r8
 8007f3e:	dcee      	bgt.n	8007f1e <_printf_float+0x386>
 8007f40:	e74a      	b.n	8007dd8 <_printf_float+0x240>
 8007f42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f44:	2a01      	cmp	r2, #1
 8007f46:	dc01      	bgt.n	8007f4c <_printf_float+0x3b4>
 8007f48:	07db      	lsls	r3, r3, #31
 8007f4a:	d53a      	bpl.n	8007fc2 <_printf_float+0x42a>
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	4642      	mov	r2, r8
 8007f50:	4631      	mov	r1, r6
 8007f52:	4628      	mov	r0, r5
 8007f54:	47b8      	blx	r7
 8007f56:	3001      	adds	r0, #1
 8007f58:	f43f ae7b 	beq.w	8007c52 <_printf_float+0xba>
 8007f5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f60:	4631      	mov	r1, r6
 8007f62:	4628      	mov	r0, r5
 8007f64:	47b8      	blx	r7
 8007f66:	3001      	adds	r0, #1
 8007f68:	f108 0801 	add.w	r8, r8, #1
 8007f6c:	f43f ae71 	beq.w	8007c52 <_printf_float+0xba>
 8007f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f72:	2200      	movs	r2, #0
 8007f74:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8007f78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	f7f8 fd6f 	bl	8000a60 <__aeabi_dcmpeq>
 8007f82:	b9c8      	cbnz	r0, 8007fb8 <_printf_float+0x420>
 8007f84:	4653      	mov	r3, sl
 8007f86:	4642      	mov	r2, r8
 8007f88:	4631      	mov	r1, r6
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	47b8      	blx	r7
 8007f8e:	3001      	adds	r0, #1
 8007f90:	d10e      	bne.n	8007fb0 <_printf_float+0x418>
 8007f92:	e65e      	b.n	8007c52 <_printf_float+0xba>
 8007f94:	2301      	movs	r3, #1
 8007f96:	4652      	mov	r2, sl
 8007f98:	4631      	mov	r1, r6
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	47b8      	blx	r7
 8007f9e:	3001      	adds	r0, #1
 8007fa0:	f43f ae57 	beq.w	8007c52 <_printf_float+0xba>
 8007fa4:	f108 0801 	add.w	r8, r8, #1
 8007fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007faa:	3b01      	subs	r3, #1
 8007fac:	4543      	cmp	r3, r8
 8007fae:	dcf1      	bgt.n	8007f94 <_printf_float+0x3fc>
 8007fb0:	464b      	mov	r3, r9
 8007fb2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007fb6:	e6de      	b.n	8007d76 <_printf_float+0x1de>
 8007fb8:	f04f 0800 	mov.w	r8, #0
 8007fbc:	f104 0a1a 	add.w	sl, r4, #26
 8007fc0:	e7f2      	b.n	8007fa8 <_printf_float+0x410>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e7df      	b.n	8007f86 <_printf_float+0x3ee>
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	464a      	mov	r2, r9
 8007fca:	4631      	mov	r1, r6
 8007fcc:	4628      	mov	r0, r5
 8007fce:	47b8      	blx	r7
 8007fd0:	3001      	adds	r0, #1
 8007fd2:	f43f ae3e 	beq.w	8007c52 <_printf_float+0xba>
 8007fd6:	f108 0801 	add.w	r8, r8, #1
 8007fda:	68e3      	ldr	r3, [r4, #12]
 8007fdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007fde:	1a9b      	subs	r3, r3, r2
 8007fe0:	4543      	cmp	r3, r8
 8007fe2:	dcf0      	bgt.n	8007fc6 <_printf_float+0x42e>
 8007fe4:	e6fc      	b.n	8007de0 <_printf_float+0x248>
 8007fe6:	f04f 0800 	mov.w	r8, #0
 8007fea:	f104 0919 	add.w	r9, r4, #25
 8007fee:	e7f4      	b.n	8007fda <_printf_float+0x442>
 8007ff0:	2900      	cmp	r1, #0
 8007ff2:	f43f ae8b 	beq.w	8007d0c <_printf_float+0x174>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007ffc:	ab09      	add	r3, sp, #36	; 0x24
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	ec49 8b10 	vmov	d0, r8, r9
 8008004:	6022      	str	r2, [r4, #0]
 8008006:	f8cd a004 	str.w	sl, [sp, #4]
 800800a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800800e:	4628      	mov	r0, r5
 8008010:	f7ff fd2e 	bl	8007a70 <__cvt>
 8008014:	4680      	mov	r8, r0
 8008016:	e648      	b.n	8007caa <_printf_float+0x112>

08008018 <_printf_common>:
 8008018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800801c:	4691      	mov	r9, r2
 800801e:	461f      	mov	r7, r3
 8008020:	688a      	ldr	r2, [r1, #8]
 8008022:	690b      	ldr	r3, [r1, #16]
 8008024:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008028:	4293      	cmp	r3, r2
 800802a:	bfb8      	it	lt
 800802c:	4613      	movlt	r3, r2
 800802e:	f8c9 3000 	str.w	r3, [r9]
 8008032:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008036:	4606      	mov	r6, r0
 8008038:	460c      	mov	r4, r1
 800803a:	b112      	cbz	r2, 8008042 <_printf_common+0x2a>
 800803c:	3301      	adds	r3, #1
 800803e:	f8c9 3000 	str.w	r3, [r9]
 8008042:	6823      	ldr	r3, [r4, #0]
 8008044:	0699      	lsls	r1, r3, #26
 8008046:	bf42      	ittt	mi
 8008048:	f8d9 3000 	ldrmi.w	r3, [r9]
 800804c:	3302      	addmi	r3, #2
 800804e:	f8c9 3000 	strmi.w	r3, [r9]
 8008052:	6825      	ldr	r5, [r4, #0]
 8008054:	f015 0506 	ands.w	r5, r5, #6
 8008058:	d107      	bne.n	800806a <_printf_common+0x52>
 800805a:	f104 0a19 	add.w	sl, r4, #25
 800805e:	68e3      	ldr	r3, [r4, #12]
 8008060:	f8d9 2000 	ldr.w	r2, [r9]
 8008064:	1a9b      	subs	r3, r3, r2
 8008066:	42ab      	cmp	r3, r5
 8008068:	dc28      	bgt.n	80080bc <_printf_common+0xa4>
 800806a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800806e:	6822      	ldr	r2, [r4, #0]
 8008070:	3300      	adds	r3, #0
 8008072:	bf18      	it	ne
 8008074:	2301      	movne	r3, #1
 8008076:	0692      	lsls	r2, r2, #26
 8008078:	d42d      	bmi.n	80080d6 <_printf_common+0xbe>
 800807a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800807e:	4639      	mov	r1, r7
 8008080:	4630      	mov	r0, r6
 8008082:	47c0      	blx	r8
 8008084:	3001      	adds	r0, #1
 8008086:	d020      	beq.n	80080ca <_printf_common+0xb2>
 8008088:	6823      	ldr	r3, [r4, #0]
 800808a:	68e5      	ldr	r5, [r4, #12]
 800808c:	f8d9 2000 	ldr.w	r2, [r9]
 8008090:	f003 0306 	and.w	r3, r3, #6
 8008094:	2b04      	cmp	r3, #4
 8008096:	bf08      	it	eq
 8008098:	1aad      	subeq	r5, r5, r2
 800809a:	68a3      	ldr	r3, [r4, #8]
 800809c:	6922      	ldr	r2, [r4, #16]
 800809e:	bf0c      	ite	eq
 80080a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080a4:	2500      	movne	r5, #0
 80080a6:	4293      	cmp	r3, r2
 80080a8:	bfc4      	itt	gt
 80080aa:	1a9b      	subgt	r3, r3, r2
 80080ac:	18ed      	addgt	r5, r5, r3
 80080ae:	f04f 0900 	mov.w	r9, #0
 80080b2:	341a      	adds	r4, #26
 80080b4:	454d      	cmp	r5, r9
 80080b6:	d11a      	bne.n	80080ee <_printf_common+0xd6>
 80080b8:	2000      	movs	r0, #0
 80080ba:	e008      	b.n	80080ce <_printf_common+0xb6>
 80080bc:	2301      	movs	r3, #1
 80080be:	4652      	mov	r2, sl
 80080c0:	4639      	mov	r1, r7
 80080c2:	4630      	mov	r0, r6
 80080c4:	47c0      	blx	r8
 80080c6:	3001      	adds	r0, #1
 80080c8:	d103      	bne.n	80080d2 <_printf_common+0xba>
 80080ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080d2:	3501      	adds	r5, #1
 80080d4:	e7c3      	b.n	800805e <_printf_common+0x46>
 80080d6:	18e1      	adds	r1, r4, r3
 80080d8:	1c5a      	adds	r2, r3, #1
 80080da:	2030      	movs	r0, #48	; 0x30
 80080dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080e0:	4422      	add	r2, r4
 80080e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080ea:	3302      	adds	r3, #2
 80080ec:	e7c5      	b.n	800807a <_printf_common+0x62>
 80080ee:	2301      	movs	r3, #1
 80080f0:	4622      	mov	r2, r4
 80080f2:	4639      	mov	r1, r7
 80080f4:	4630      	mov	r0, r6
 80080f6:	47c0      	blx	r8
 80080f8:	3001      	adds	r0, #1
 80080fa:	d0e6      	beq.n	80080ca <_printf_common+0xb2>
 80080fc:	f109 0901 	add.w	r9, r9, #1
 8008100:	e7d8      	b.n	80080b4 <_printf_common+0x9c>
	...

08008104 <_sbrk_r>:
 8008104:	b538      	push	{r3, r4, r5, lr}
 8008106:	4c06      	ldr	r4, [pc, #24]	; (8008120 <_sbrk_r+0x1c>)
 8008108:	2300      	movs	r3, #0
 800810a:	4605      	mov	r5, r0
 800810c:	4608      	mov	r0, r1
 800810e:	6023      	str	r3, [r4, #0]
 8008110:	f7fd fa98 	bl	8005644 <_sbrk>
 8008114:	1c43      	adds	r3, r0, #1
 8008116:	d102      	bne.n	800811e <_sbrk_r+0x1a>
 8008118:	6823      	ldr	r3, [r4, #0]
 800811a:	b103      	cbz	r3, 800811e <_sbrk_r+0x1a>
 800811c:	602b      	str	r3, [r5, #0]
 800811e:	bd38      	pop	{r3, r4, r5, pc}
 8008120:	200002c4 	.word	0x200002c4

08008124 <_raise_r>:
 8008124:	291f      	cmp	r1, #31
 8008126:	b538      	push	{r3, r4, r5, lr}
 8008128:	4604      	mov	r4, r0
 800812a:	460d      	mov	r5, r1
 800812c:	d904      	bls.n	8008138 <_raise_r+0x14>
 800812e:	2316      	movs	r3, #22
 8008130:	6003      	str	r3, [r0, #0]
 8008132:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008136:	bd38      	pop	{r3, r4, r5, pc}
 8008138:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800813a:	b112      	cbz	r2, 8008142 <_raise_r+0x1e>
 800813c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008140:	b94b      	cbnz	r3, 8008156 <_raise_r+0x32>
 8008142:	4620      	mov	r0, r4
 8008144:	f000 f830 	bl	80081a8 <_getpid_r>
 8008148:	462a      	mov	r2, r5
 800814a:	4601      	mov	r1, r0
 800814c:	4620      	mov	r0, r4
 800814e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008152:	f000 b817 	b.w	8008184 <_kill_r>
 8008156:	2b01      	cmp	r3, #1
 8008158:	d00a      	beq.n	8008170 <_raise_r+0x4c>
 800815a:	1c59      	adds	r1, r3, #1
 800815c:	d103      	bne.n	8008166 <_raise_r+0x42>
 800815e:	2316      	movs	r3, #22
 8008160:	6003      	str	r3, [r0, #0]
 8008162:	2001      	movs	r0, #1
 8008164:	e7e7      	b.n	8008136 <_raise_r+0x12>
 8008166:	2400      	movs	r4, #0
 8008168:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800816c:	4628      	mov	r0, r5
 800816e:	4798      	blx	r3
 8008170:	2000      	movs	r0, #0
 8008172:	e7e0      	b.n	8008136 <_raise_r+0x12>

08008174 <raise>:
 8008174:	4b02      	ldr	r3, [pc, #8]	; (8008180 <raise+0xc>)
 8008176:	4601      	mov	r1, r0
 8008178:	6818      	ldr	r0, [r3, #0]
 800817a:	f7ff bfd3 	b.w	8008124 <_raise_r>
 800817e:	bf00      	nop
 8008180:	20000010 	.word	0x20000010

08008184 <_kill_r>:
 8008184:	b538      	push	{r3, r4, r5, lr}
 8008186:	4c07      	ldr	r4, [pc, #28]	; (80081a4 <_kill_r+0x20>)
 8008188:	2300      	movs	r3, #0
 800818a:	4605      	mov	r5, r0
 800818c:	4608      	mov	r0, r1
 800818e:	4611      	mov	r1, r2
 8008190:	6023      	str	r3, [r4, #0]
 8008192:	f7fd fa3d 	bl	8005610 <_kill>
 8008196:	1c43      	adds	r3, r0, #1
 8008198:	d102      	bne.n	80081a0 <_kill_r+0x1c>
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	b103      	cbz	r3, 80081a0 <_kill_r+0x1c>
 800819e:	602b      	str	r3, [r5, #0]
 80081a0:	bd38      	pop	{r3, r4, r5, pc}
 80081a2:	bf00      	nop
 80081a4:	200002c4 	.word	0x200002c4

080081a8 <_getpid_r>:
 80081a8:	f7fd ba2a 	b.w	8005600 <_getpid>

080081ac <quorem>:
 80081ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b0:	6903      	ldr	r3, [r0, #16]
 80081b2:	690c      	ldr	r4, [r1, #16]
 80081b4:	42a3      	cmp	r3, r4
 80081b6:	4680      	mov	r8, r0
 80081b8:	f2c0 8082 	blt.w	80082c0 <quorem+0x114>
 80081bc:	3c01      	subs	r4, #1
 80081be:	f101 0714 	add.w	r7, r1, #20
 80081c2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80081c6:	f100 0614 	add.w	r6, r0, #20
 80081ca:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80081ce:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80081d2:	eb06 030c 	add.w	r3, r6, ip
 80081d6:	3501      	adds	r5, #1
 80081d8:	eb07 090c 	add.w	r9, r7, ip
 80081dc:	9301      	str	r3, [sp, #4]
 80081de:	fbb0 f5f5 	udiv	r5, r0, r5
 80081e2:	b395      	cbz	r5, 800824a <quorem+0x9e>
 80081e4:	f04f 0a00 	mov.w	sl, #0
 80081e8:	4638      	mov	r0, r7
 80081ea:	46b6      	mov	lr, r6
 80081ec:	46d3      	mov	fp, sl
 80081ee:	f850 2b04 	ldr.w	r2, [r0], #4
 80081f2:	b293      	uxth	r3, r2
 80081f4:	fb05 a303 	mla	r3, r5, r3, sl
 80081f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	ebab 0303 	sub.w	r3, fp, r3
 8008202:	0c12      	lsrs	r2, r2, #16
 8008204:	f8de b000 	ldr.w	fp, [lr]
 8008208:	fb05 a202 	mla	r2, r5, r2, sl
 800820c:	fa13 f38b 	uxtah	r3, r3, fp
 8008210:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008214:	fa1f fb82 	uxth.w	fp, r2
 8008218:	f8de 2000 	ldr.w	r2, [lr]
 800821c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008220:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008224:	b29b      	uxth	r3, r3
 8008226:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800822a:	4581      	cmp	r9, r0
 800822c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008230:	f84e 3b04 	str.w	r3, [lr], #4
 8008234:	d2db      	bcs.n	80081ee <quorem+0x42>
 8008236:	f856 300c 	ldr.w	r3, [r6, ip]
 800823a:	b933      	cbnz	r3, 800824a <quorem+0x9e>
 800823c:	9b01      	ldr	r3, [sp, #4]
 800823e:	3b04      	subs	r3, #4
 8008240:	429e      	cmp	r6, r3
 8008242:	461a      	mov	r2, r3
 8008244:	d330      	bcc.n	80082a8 <quorem+0xfc>
 8008246:	f8c8 4010 	str.w	r4, [r8, #16]
 800824a:	4640      	mov	r0, r8
 800824c:	f001 f81a 	bl	8009284 <__mcmp>
 8008250:	2800      	cmp	r0, #0
 8008252:	db25      	blt.n	80082a0 <quorem+0xf4>
 8008254:	3501      	adds	r5, #1
 8008256:	4630      	mov	r0, r6
 8008258:	f04f 0c00 	mov.w	ip, #0
 800825c:	f857 2b04 	ldr.w	r2, [r7], #4
 8008260:	f8d0 e000 	ldr.w	lr, [r0]
 8008264:	b293      	uxth	r3, r2
 8008266:	ebac 0303 	sub.w	r3, ip, r3
 800826a:	0c12      	lsrs	r2, r2, #16
 800826c:	fa13 f38e 	uxtah	r3, r3, lr
 8008270:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008274:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008278:	b29b      	uxth	r3, r3
 800827a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800827e:	45b9      	cmp	r9, r7
 8008280:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008284:	f840 3b04 	str.w	r3, [r0], #4
 8008288:	d2e8      	bcs.n	800825c <quorem+0xb0>
 800828a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800828e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008292:	b92a      	cbnz	r2, 80082a0 <quorem+0xf4>
 8008294:	3b04      	subs	r3, #4
 8008296:	429e      	cmp	r6, r3
 8008298:	461a      	mov	r2, r3
 800829a:	d30b      	bcc.n	80082b4 <quorem+0x108>
 800829c:	f8c8 4010 	str.w	r4, [r8, #16]
 80082a0:	4628      	mov	r0, r5
 80082a2:	b003      	add	sp, #12
 80082a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082a8:	6812      	ldr	r2, [r2, #0]
 80082aa:	3b04      	subs	r3, #4
 80082ac:	2a00      	cmp	r2, #0
 80082ae:	d1ca      	bne.n	8008246 <quorem+0x9a>
 80082b0:	3c01      	subs	r4, #1
 80082b2:	e7c5      	b.n	8008240 <quorem+0x94>
 80082b4:	6812      	ldr	r2, [r2, #0]
 80082b6:	3b04      	subs	r3, #4
 80082b8:	2a00      	cmp	r2, #0
 80082ba:	d1ef      	bne.n	800829c <quorem+0xf0>
 80082bc:	3c01      	subs	r4, #1
 80082be:	e7ea      	b.n	8008296 <quorem+0xea>
 80082c0:	2000      	movs	r0, #0
 80082c2:	e7ee      	b.n	80082a2 <quorem+0xf6>
 80082c4:	0000      	movs	r0, r0
	...

080082c8 <_dtoa_r>:
 80082c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082cc:	ec57 6b10 	vmov	r6, r7, d0
 80082d0:	b097      	sub	sp, #92	; 0x5c
 80082d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80082d4:	9106      	str	r1, [sp, #24]
 80082d6:	4604      	mov	r4, r0
 80082d8:	920b      	str	r2, [sp, #44]	; 0x2c
 80082da:	9312      	str	r3, [sp, #72]	; 0x48
 80082dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80082e0:	e9cd 6700 	strd	r6, r7, [sp]
 80082e4:	b93d      	cbnz	r5, 80082f6 <_dtoa_r+0x2e>
 80082e6:	2010      	movs	r0, #16
 80082e8:	f7ff fade 	bl	80078a8 <malloc>
 80082ec:	6260      	str	r0, [r4, #36]	; 0x24
 80082ee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80082f2:	6005      	str	r5, [r0, #0]
 80082f4:	60c5      	str	r5, [r0, #12]
 80082f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082f8:	6819      	ldr	r1, [r3, #0]
 80082fa:	b151      	cbz	r1, 8008312 <_dtoa_r+0x4a>
 80082fc:	685a      	ldr	r2, [r3, #4]
 80082fe:	604a      	str	r2, [r1, #4]
 8008300:	2301      	movs	r3, #1
 8008302:	4093      	lsls	r3, r2
 8008304:	608b      	str	r3, [r1, #8]
 8008306:	4620      	mov	r0, r4
 8008308:	f000 fdda 	bl	8008ec0 <_Bfree>
 800830c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800830e:	2200      	movs	r2, #0
 8008310:	601a      	str	r2, [r3, #0]
 8008312:	1e3b      	subs	r3, r7, #0
 8008314:	bfbb      	ittet	lt
 8008316:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800831a:	9301      	strlt	r3, [sp, #4]
 800831c:	2300      	movge	r3, #0
 800831e:	2201      	movlt	r2, #1
 8008320:	bfac      	ite	ge
 8008322:	f8c8 3000 	strge.w	r3, [r8]
 8008326:	f8c8 2000 	strlt.w	r2, [r8]
 800832a:	4baf      	ldr	r3, [pc, #700]	; (80085e8 <_dtoa_r+0x320>)
 800832c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008330:	ea33 0308 	bics.w	r3, r3, r8
 8008334:	d114      	bne.n	8008360 <_dtoa_r+0x98>
 8008336:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008338:	f242 730f 	movw	r3, #9999	; 0x270f
 800833c:	6013      	str	r3, [r2, #0]
 800833e:	9b00      	ldr	r3, [sp, #0]
 8008340:	b923      	cbnz	r3, 800834c <_dtoa_r+0x84>
 8008342:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008346:	2800      	cmp	r0, #0
 8008348:	f000 8542 	beq.w	8008dd0 <_dtoa_r+0xb08>
 800834c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800834e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80085fc <_dtoa_r+0x334>
 8008352:	2b00      	cmp	r3, #0
 8008354:	f000 8544 	beq.w	8008de0 <_dtoa_r+0xb18>
 8008358:	f10b 0303 	add.w	r3, fp, #3
 800835c:	f000 bd3e 	b.w	8008ddc <_dtoa_r+0xb14>
 8008360:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008364:	2200      	movs	r2, #0
 8008366:	2300      	movs	r3, #0
 8008368:	4630      	mov	r0, r6
 800836a:	4639      	mov	r1, r7
 800836c:	f7f8 fb78 	bl	8000a60 <__aeabi_dcmpeq>
 8008370:	4681      	mov	r9, r0
 8008372:	b168      	cbz	r0, 8008390 <_dtoa_r+0xc8>
 8008374:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008376:	2301      	movs	r3, #1
 8008378:	6013      	str	r3, [r2, #0]
 800837a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800837c:	2b00      	cmp	r3, #0
 800837e:	f000 8524 	beq.w	8008dca <_dtoa_r+0xb02>
 8008382:	4b9a      	ldr	r3, [pc, #616]	; (80085ec <_dtoa_r+0x324>)
 8008384:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008386:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800838a:	6013      	str	r3, [r2, #0]
 800838c:	f000 bd28 	b.w	8008de0 <_dtoa_r+0xb18>
 8008390:	aa14      	add	r2, sp, #80	; 0x50
 8008392:	a915      	add	r1, sp, #84	; 0x54
 8008394:	ec47 6b10 	vmov	d0, r6, r7
 8008398:	4620      	mov	r0, r4
 800839a:	f000 ffea 	bl	8009372 <__d2b>
 800839e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80083a2:	9004      	str	r0, [sp, #16]
 80083a4:	2d00      	cmp	r5, #0
 80083a6:	d07c      	beq.n	80084a2 <_dtoa_r+0x1da>
 80083a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80083ac:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80083b0:	46b2      	mov	sl, r6
 80083b2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80083b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80083ba:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80083be:	2200      	movs	r2, #0
 80083c0:	4b8b      	ldr	r3, [pc, #556]	; (80085f0 <_dtoa_r+0x328>)
 80083c2:	4650      	mov	r0, sl
 80083c4:	4659      	mov	r1, fp
 80083c6:	f7f7 ff2b 	bl	8000220 <__aeabi_dsub>
 80083ca:	a381      	add	r3, pc, #516	; (adr r3, 80085d0 <_dtoa_r+0x308>)
 80083cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d0:	f7f8 f8de 	bl	8000590 <__aeabi_dmul>
 80083d4:	a380      	add	r3, pc, #512	; (adr r3, 80085d8 <_dtoa_r+0x310>)
 80083d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083da:	f7f7 ff23 	bl	8000224 <__adddf3>
 80083de:	4606      	mov	r6, r0
 80083e0:	4628      	mov	r0, r5
 80083e2:	460f      	mov	r7, r1
 80083e4:	f7f8 f86a 	bl	80004bc <__aeabi_i2d>
 80083e8:	a37d      	add	r3, pc, #500	; (adr r3, 80085e0 <_dtoa_r+0x318>)
 80083ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ee:	f7f8 f8cf 	bl	8000590 <__aeabi_dmul>
 80083f2:	4602      	mov	r2, r0
 80083f4:	460b      	mov	r3, r1
 80083f6:	4630      	mov	r0, r6
 80083f8:	4639      	mov	r1, r7
 80083fa:	f7f7 ff13 	bl	8000224 <__adddf3>
 80083fe:	4606      	mov	r6, r0
 8008400:	460f      	mov	r7, r1
 8008402:	f7f8 fb75 	bl	8000af0 <__aeabi_d2iz>
 8008406:	2200      	movs	r2, #0
 8008408:	4682      	mov	sl, r0
 800840a:	2300      	movs	r3, #0
 800840c:	4630      	mov	r0, r6
 800840e:	4639      	mov	r1, r7
 8008410:	f7f8 fb30 	bl	8000a74 <__aeabi_dcmplt>
 8008414:	b148      	cbz	r0, 800842a <_dtoa_r+0x162>
 8008416:	4650      	mov	r0, sl
 8008418:	f7f8 f850 	bl	80004bc <__aeabi_i2d>
 800841c:	4632      	mov	r2, r6
 800841e:	463b      	mov	r3, r7
 8008420:	f7f8 fb1e 	bl	8000a60 <__aeabi_dcmpeq>
 8008424:	b908      	cbnz	r0, 800842a <_dtoa_r+0x162>
 8008426:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800842a:	f1ba 0f16 	cmp.w	sl, #22
 800842e:	d859      	bhi.n	80084e4 <_dtoa_r+0x21c>
 8008430:	4970      	ldr	r1, [pc, #448]	; (80085f4 <_dtoa_r+0x32c>)
 8008432:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008436:	e9dd 2300 	ldrd	r2, r3, [sp]
 800843a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800843e:	f7f8 fb37 	bl	8000ab0 <__aeabi_dcmpgt>
 8008442:	2800      	cmp	r0, #0
 8008444:	d050      	beq.n	80084e8 <_dtoa_r+0x220>
 8008446:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800844a:	2300      	movs	r3, #0
 800844c:	930f      	str	r3, [sp, #60]	; 0x3c
 800844e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008450:	1b5d      	subs	r5, r3, r5
 8008452:	f1b5 0801 	subs.w	r8, r5, #1
 8008456:	bf49      	itett	mi
 8008458:	f1c5 0301 	rsbmi	r3, r5, #1
 800845c:	2300      	movpl	r3, #0
 800845e:	9305      	strmi	r3, [sp, #20]
 8008460:	f04f 0800 	movmi.w	r8, #0
 8008464:	bf58      	it	pl
 8008466:	9305      	strpl	r3, [sp, #20]
 8008468:	f1ba 0f00 	cmp.w	sl, #0
 800846c:	db3e      	blt.n	80084ec <_dtoa_r+0x224>
 800846e:	2300      	movs	r3, #0
 8008470:	44d0      	add	r8, sl
 8008472:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008476:	9307      	str	r3, [sp, #28]
 8008478:	9b06      	ldr	r3, [sp, #24]
 800847a:	2b09      	cmp	r3, #9
 800847c:	f200 8090 	bhi.w	80085a0 <_dtoa_r+0x2d8>
 8008480:	2b05      	cmp	r3, #5
 8008482:	bfc4      	itt	gt
 8008484:	3b04      	subgt	r3, #4
 8008486:	9306      	strgt	r3, [sp, #24]
 8008488:	9b06      	ldr	r3, [sp, #24]
 800848a:	f1a3 0302 	sub.w	r3, r3, #2
 800848e:	bfcc      	ite	gt
 8008490:	2500      	movgt	r5, #0
 8008492:	2501      	movle	r5, #1
 8008494:	2b03      	cmp	r3, #3
 8008496:	f200 808f 	bhi.w	80085b8 <_dtoa_r+0x2f0>
 800849a:	e8df f003 	tbb	[pc, r3]
 800849e:	7f7d      	.short	0x7f7d
 80084a0:	7131      	.short	0x7131
 80084a2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80084a6:	441d      	add	r5, r3
 80084a8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80084ac:	2820      	cmp	r0, #32
 80084ae:	dd13      	ble.n	80084d8 <_dtoa_r+0x210>
 80084b0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80084b4:	9b00      	ldr	r3, [sp, #0]
 80084b6:	fa08 f800 	lsl.w	r8, r8, r0
 80084ba:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80084be:	fa23 f000 	lsr.w	r0, r3, r0
 80084c2:	ea48 0000 	orr.w	r0, r8, r0
 80084c6:	f7f7 ffe9 	bl	800049c <__aeabi_ui2d>
 80084ca:	2301      	movs	r3, #1
 80084cc:	4682      	mov	sl, r0
 80084ce:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80084d2:	3d01      	subs	r5, #1
 80084d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80084d6:	e772      	b.n	80083be <_dtoa_r+0xf6>
 80084d8:	9b00      	ldr	r3, [sp, #0]
 80084da:	f1c0 0020 	rsb	r0, r0, #32
 80084de:	fa03 f000 	lsl.w	r0, r3, r0
 80084e2:	e7f0      	b.n	80084c6 <_dtoa_r+0x1fe>
 80084e4:	2301      	movs	r3, #1
 80084e6:	e7b1      	b.n	800844c <_dtoa_r+0x184>
 80084e8:	900f      	str	r0, [sp, #60]	; 0x3c
 80084ea:	e7b0      	b.n	800844e <_dtoa_r+0x186>
 80084ec:	9b05      	ldr	r3, [sp, #20]
 80084ee:	eba3 030a 	sub.w	r3, r3, sl
 80084f2:	9305      	str	r3, [sp, #20]
 80084f4:	f1ca 0300 	rsb	r3, sl, #0
 80084f8:	9307      	str	r3, [sp, #28]
 80084fa:	2300      	movs	r3, #0
 80084fc:	930e      	str	r3, [sp, #56]	; 0x38
 80084fe:	e7bb      	b.n	8008478 <_dtoa_r+0x1b0>
 8008500:	2301      	movs	r3, #1
 8008502:	930a      	str	r3, [sp, #40]	; 0x28
 8008504:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008506:	2b00      	cmp	r3, #0
 8008508:	dd59      	ble.n	80085be <_dtoa_r+0x2f6>
 800850a:	9302      	str	r3, [sp, #8]
 800850c:	4699      	mov	r9, r3
 800850e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008510:	2200      	movs	r2, #0
 8008512:	6072      	str	r2, [r6, #4]
 8008514:	2204      	movs	r2, #4
 8008516:	f102 0014 	add.w	r0, r2, #20
 800851a:	4298      	cmp	r0, r3
 800851c:	6871      	ldr	r1, [r6, #4]
 800851e:	d953      	bls.n	80085c8 <_dtoa_r+0x300>
 8008520:	4620      	mov	r0, r4
 8008522:	f000 fc99 	bl	8008e58 <_Balloc>
 8008526:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008528:	6030      	str	r0, [r6, #0]
 800852a:	f1b9 0f0e 	cmp.w	r9, #14
 800852e:	f8d3 b000 	ldr.w	fp, [r3]
 8008532:	f200 80e6 	bhi.w	8008702 <_dtoa_r+0x43a>
 8008536:	2d00      	cmp	r5, #0
 8008538:	f000 80e3 	beq.w	8008702 <_dtoa_r+0x43a>
 800853c:	ed9d 7b00 	vldr	d7, [sp]
 8008540:	f1ba 0f00 	cmp.w	sl, #0
 8008544:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008548:	dd74      	ble.n	8008634 <_dtoa_r+0x36c>
 800854a:	4a2a      	ldr	r2, [pc, #168]	; (80085f4 <_dtoa_r+0x32c>)
 800854c:	f00a 030f 	and.w	r3, sl, #15
 8008550:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008554:	ed93 7b00 	vldr	d7, [r3]
 8008558:	ea4f 162a 	mov.w	r6, sl, asr #4
 800855c:	06f0      	lsls	r0, r6, #27
 800855e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008562:	d565      	bpl.n	8008630 <_dtoa_r+0x368>
 8008564:	4b24      	ldr	r3, [pc, #144]	; (80085f8 <_dtoa_r+0x330>)
 8008566:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800856a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800856e:	f7f8 f939 	bl	80007e4 <__aeabi_ddiv>
 8008572:	e9cd 0100 	strd	r0, r1, [sp]
 8008576:	f006 060f 	and.w	r6, r6, #15
 800857a:	2503      	movs	r5, #3
 800857c:	4f1e      	ldr	r7, [pc, #120]	; (80085f8 <_dtoa_r+0x330>)
 800857e:	e04c      	b.n	800861a <_dtoa_r+0x352>
 8008580:	2301      	movs	r3, #1
 8008582:	930a      	str	r3, [sp, #40]	; 0x28
 8008584:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008586:	4453      	add	r3, sl
 8008588:	f103 0901 	add.w	r9, r3, #1
 800858c:	9302      	str	r3, [sp, #8]
 800858e:	464b      	mov	r3, r9
 8008590:	2b01      	cmp	r3, #1
 8008592:	bfb8      	it	lt
 8008594:	2301      	movlt	r3, #1
 8008596:	e7ba      	b.n	800850e <_dtoa_r+0x246>
 8008598:	2300      	movs	r3, #0
 800859a:	e7b2      	b.n	8008502 <_dtoa_r+0x23a>
 800859c:	2300      	movs	r3, #0
 800859e:	e7f0      	b.n	8008582 <_dtoa_r+0x2ba>
 80085a0:	2501      	movs	r5, #1
 80085a2:	2300      	movs	r3, #0
 80085a4:	9306      	str	r3, [sp, #24]
 80085a6:	950a      	str	r5, [sp, #40]	; 0x28
 80085a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085ac:	9302      	str	r3, [sp, #8]
 80085ae:	4699      	mov	r9, r3
 80085b0:	2200      	movs	r2, #0
 80085b2:	2312      	movs	r3, #18
 80085b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80085b6:	e7aa      	b.n	800850e <_dtoa_r+0x246>
 80085b8:	2301      	movs	r3, #1
 80085ba:	930a      	str	r3, [sp, #40]	; 0x28
 80085bc:	e7f4      	b.n	80085a8 <_dtoa_r+0x2e0>
 80085be:	2301      	movs	r3, #1
 80085c0:	9302      	str	r3, [sp, #8]
 80085c2:	4699      	mov	r9, r3
 80085c4:	461a      	mov	r2, r3
 80085c6:	e7f5      	b.n	80085b4 <_dtoa_r+0x2ec>
 80085c8:	3101      	adds	r1, #1
 80085ca:	6071      	str	r1, [r6, #4]
 80085cc:	0052      	lsls	r2, r2, #1
 80085ce:	e7a2      	b.n	8008516 <_dtoa_r+0x24e>
 80085d0:	636f4361 	.word	0x636f4361
 80085d4:	3fd287a7 	.word	0x3fd287a7
 80085d8:	8b60c8b3 	.word	0x8b60c8b3
 80085dc:	3fc68a28 	.word	0x3fc68a28
 80085e0:	509f79fb 	.word	0x509f79fb
 80085e4:	3fd34413 	.word	0x3fd34413
 80085e8:	7ff00000 	.word	0x7ff00000
 80085ec:	080097b9 	.word	0x080097b9
 80085f0:	3ff80000 	.word	0x3ff80000
 80085f4:	080097f0 	.word	0x080097f0
 80085f8:	080097c8 	.word	0x080097c8
 80085fc:	080097c3 	.word	0x080097c3
 8008600:	07f1      	lsls	r1, r6, #31
 8008602:	d508      	bpl.n	8008616 <_dtoa_r+0x34e>
 8008604:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800860c:	f7f7 ffc0 	bl	8000590 <__aeabi_dmul>
 8008610:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008614:	3501      	adds	r5, #1
 8008616:	1076      	asrs	r6, r6, #1
 8008618:	3708      	adds	r7, #8
 800861a:	2e00      	cmp	r6, #0
 800861c:	d1f0      	bne.n	8008600 <_dtoa_r+0x338>
 800861e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008622:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008626:	f7f8 f8dd 	bl	80007e4 <__aeabi_ddiv>
 800862a:	e9cd 0100 	strd	r0, r1, [sp]
 800862e:	e01a      	b.n	8008666 <_dtoa_r+0x39e>
 8008630:	2502      	movs	r5, #2
 8008632:	e7a3      	b.n	800857c <_dtoa_r+0x2b4>
 8008634:	f000 80a0 	beq.w	8008778 <_dtoa_r+0x4b0>
 8008638:	f1ca 0600 	rsb	r6, sl, #0
 800863c:	4b9f      	ldr	r3, [pc, #636]	; (80088bc <_dtoa_r+0x5f4>)
 800863e:	4fa0      	ldr	r7, [pc, #640]	; (80088c0 <_dtoa_r+0x5f8>)
 8008640:	f006 020f 	and.w	r2, r6, #15
 8008644:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008650:	f7f7 ff9e 	bl	8000590 <__aeabi_dmul>
 8008654:	e9cd 0100 	strd	r0, r1, [sp]
 8008658:	1136      	asrs	r6, r6, #4
 800865a:	2300      	movs	r3, #0
 800865c:	2502      	movs	r5, #2
 800865e:	2e00      	cmp	r6, #0
 8008660:	d17f      	bne.n	8008762 <_dtoa_r+0x49a>
 8008662:	2b00      	cmp	r3, #0
 8008664:	d1e1      	bne.n	800862a <_dtoa_r+0x362>
 8008666:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008668:	2b00      	cmp	r3, #0
 800866a:	f000 8087 	beq.w	800877c <_dtoa_r+0x4b4>
 800866e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008672:	2200      	movs	r2, #0
 8008674:	4b93      	ldr	r3, [pc, #588]	; (80088c4 <_dtoa_r+0x5fc>)
 8008676:	4630      	mov	r0, r6
 8008678:	4639      	mov	r1, r7
 800867a:	f7f8 f9fb 	bl	8000a74 <__aeabi_dcmplt>
 800867e:	2800      	cmp	r0, #0
 8008680:	d07c      	beq.n	800877c <_dtoa_r+0x4b4>
 8008682:	f1b9 0f00 	cmp.w	r9, #0
 8008686:	d079      	beq.n	800877c <_dtoa_r+0x4b4>
 8008688:	9b02      	ldr	r3, [sp, #8]
 800868a:	2b00      	cmp	r3, #0
 800868c:	dd35      	ble.n	80086fa <_dtoa_r+0x432>
 800868e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008692:	9308      	str	r3, [sp, #32]
 8008694:	4639      	mov	r1, r7
 8008696:	2200      	movs	r2, #0
 8008698:	4b8b      	ldr	r3, [pc, #556]	; (80088c8 <_dtoa_r+0x600>)
 800869a:	4630      	mov	r0, r6
 800869c:	f7f7 ff78 	bl	8000590 <__aeabi_dmul>
 80086a0:	e9cd 0100 	strd	r0, r1, [sp]
 80086a4:	9f02      	ldr	r7, [sp, #8]
 80086a6:	3501      	adds	r5, #1
 80086a8:	4628      	mov	r0, r5
 80086aa:	f7f7 ff07 	bl	80004bc <__aeabi_i2d>
 80086ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086b2:	f7f7 ff6d 	bl	8000590 <__aeabi_dmul>
 80086b6:	2200      	movs	r2, #0
 80086b8:	4b84      	ldr	r3, [pc, #528]	; (80088cc <_dtoa_r+0x604>)
 80086ba:	f7f7 fdb3 	bl	8000224 <__adddf3>
 80086be:	4605      	mov	r5, r0
 80086c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80086c4:	2f00      	cmp	r7, #0
 80086c6:	d15d      	bne.n	8008784 <_dtoa_r+0x4bc>
 80086c8:	2200      	movs	r2, #0
 80086ca:	4b81      	ldr	r3, [pc, #516]	; (80088d0 <_dtoa_r+0x608>)
 80086cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086d0:	f7f7 fda6 	bl	8000220 <__aeabi_dsub>
 80086d4:	462a      	mov	r2, r5
 80086d6:	4633      	mov	r3, r6
 80086d8:	e9cd 0100 	strd	r0, r1, [sp]
 80086dc:	f7f8 f9e8 	bl	8000ab0 <__aeabi_dcmpgt>
 80086e0:	2800      	cmp	r0, #0
 80086e2:	f040 8288 	bne.w	8008bf6 <_dtoa_r+0x92e>
 80086e6:	462a      	mov	r2, r5
 80086e8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80086ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086f0:	f7f8 f9c0 	bl	8000a74 <__aeabi_dcmplt>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	f040 827c 	bne.w	8008bf2 <_dtoa_r+0x92a>
 80086fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80086fe:	e9cd 2300 	strd	r2, r3, [sp]
 8008702:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008704:	2b00      	cmp	r3, #0
 8008706:	f2c0 8150 	blt.w	80089aa <_dtoa_r+0x6e2>
 800870a:	f1ba 0f0e 	cmp.w	sl, #14
 800870e:	f300 814c 	bgt.w	80089aa <_dtoa_r+0x6e2>
 8008712:	4b6a      	ldr	r3, [pc, #424]	; (80088bc <_dtoa_r+0x5f4>)
 8008714:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008718:	ed93 7b00 	vldr	d7, [r3]
 800871c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800871e:	2b00      	cmp	r3, #0
 8008720:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008724:	f280 80d8 	bge.w	80088d8 <_dtoa_r+0x610>
 8008728:	f1b9 0f00 	cmp.w	r9, #0
 800872c:	f300 80d4 	bgt.w	80088d8 <_dtoa_r+0x610>
 8008730:	f040 825e 	bne.w	8008bf0 <_dtoa_r+0x928>
 8008734:	2200      	movs	r2, #0
 8008736:	4b66      	ldr	r3, [pc, #408]	; (80088d0 <_dtoa_r+0x608>)
 8008738:	ec51 0b17 	vmov	r0, r1, d7
 800873c:	f7f7 ff28 	bl	8000590 <__aeabi_dmul>
 8008740:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008744:	f7f8 f9aa 	bl	8000a9c <__aeabi_dcmpge>
 8008748:	464f      	mov	r7, r9
 800874a:	464e      	mov	r6, r9
 800874c:	2800      	cmp	r0, #0
 800874e:	f040 8234 	bne.w	8008bba <_dtoa_r+0x8f2>
 8008752:	2331      	movs	r3, #49	; 0x31
 8008754:	f10b 0501 	add.w	r5, fp, #1
 8008758:	f88b 3000 	strb.w	r3, [fp]
 800875c:	f10a 0a01 	add.w	sl, sl, #1
 8008760:	e22f      	b.n	8008bc2 <_dtoa_r+0x8fa>
 8008762:	07f2      	lsls	r2, r6, #31
 8008764:	d505      	bpl.n	8008772 <_dtoa_r+0x4aa>
 8008766:	e9d7 2300 	ldrd	r2, r3, [r7]
 800876a:	f7f7 ff11 	bl	8000590 <__aeabi_dmul>
 800876e:	3501      	adds	r5, #1
 8008770:	2301      	movs	r3, #1
 8008772:	1076      	asrs	r6, r6, #1
 8008774:	3708      	adds	r7, #8
 8008776:	e772      	b.n	800865e <_dtoa_r+0x396>
 8008778:	2502      	movs	r5, #2
 800877a:	e774      	b.n	8008666 <_dtoa_r+0x39e>
 800877c:	f8cd a020 	str.w	sl, [sp, #32]
 8008780:	464f      	mov	r7, r9
 8008782:	e791      	b.n	80086a8 <_dtoa_r+0x3e0>
 8008784:	4b4d      	ldr	r3, [pc, #308]	; (80088bc <_dtoa_r+0x5f4>)
 8008786:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800878a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800878e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008790:	2b00      	cmp	r3, #0
 8008792:	d047      	beq.n	8008824 <_dtoa_r+0x55c>
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	2000      	movs	r0, #0
 800879a:	494e      	ldr	r1, [pc, #312]	; (80088d4 <_dtoa_r+0x60c>)
 800879c:	f7f8 f822 	bl	80007e4 <__aeabi_ddiv>
 80087a0:	462a      	mov	r2, r5
 80087a2:	4633      	mov	r3, r6
 80087a4:	f7f7 fd3c 	bl	8000220 <__aeabi_dsub>
 80087a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80087ac:	465d      	mov	r5, fp
 80087ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087b2:	f7f8 f99d 	bl	8000af0 <__aeabi_d2iz>
 80087b6:	4606      	mov	r6, r0
 80087b8:	f7f7 fe80 	bl	80004bc <__aeabi_i2d>
 80087bc:	4602      	mov	r2, r0
 80087be:	460b      	mov	r3, r1
 80087c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087c4:	f7f7 fd2c 	bl	8000220 <__aeabi_dsub>
 80087c8:	3630      	adds	r6, #48	; 0x30
 80087ca:	f805 6b01 	strb.w	r6, [r5], #1
 80087ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80087d2:	e9cd 0100 	strd	r0, r1, [sp]
 80087d6:	f7f8 f94d 	bl	8000a74 <__aeabi_dcmplt>
 80087da:	2800      	cmp	r0, #0
 80087dc:	d163      	bne.n	80088a6 <_dtoa_r+0x5de>
 80087de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087e2:	2000      	movs	r0, #0
 80087e4:	4937      	ldr	r1, [pc, #220]	; (80088c4 <_dtoa_r+0x5fc>)
 80087e6:	f7f7 fd1b 	bl	8000220 <__aeabi_dsub>
 80087ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80087ee:	f7f8 f941 	bl	8000a74 <__aeabi_dcmplt>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	f040 80b7 	bne.w	8008966 <_dtoa_r+0x69e>
 80087f8:	eba5 030b 	sub.w	r3, r5, fp
 80087fc:	429f      	cmp	r7, r3
 80087fe:	f77f af7c 	ble.w	80086fa <_dtoa_r+0x432>
 8008802:	2200      	movs	r2, #0
 8008804:	4b30      	ldr	r3, [pc, #192]	; (80088c8 <_dtoa_r+0x600>)
 8008806:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800880a:	f7f7 fec1 	bl	8000590 <__aeabi_dmul>
 800880e:	2200      	movs	r2, #0
 8008810:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008814:	4b2c      	ldr	r3, [pc, #176]	; (80088c8 <_dtoa_r+0x600>)
 8008816:	e9dd 0100 	ldrd	r0, r1, [sp]
 800881a:	f7f7 feb9 	bl	8000590 <__aeabi_dmul>
 800881e:	e9cd 0100 	strd	r0, r1, [sp]
 8008822:	e7c4      	b.n	80087ae <_dtoa_r+0x4e6>
 8008824:	462a      	mov	r2, r5
 8008826:	4633      	mov	r3, r6
 8008828:	f7f7 feb2 	bl	8000590 <__aeabi_dmul>
 800882c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008830:	eb0b 0507 	add.w	r5, fp, r7
 8008834:	465e      	mov	r6, fp
 8008836:	e9dd 0100 	ldrd	r0, r1, [sp]
 800883a:	f7f8 f959 	bl	8000af0 <__aeabi_d2iz>
 800883e:	4607      	mov	r7, r0
 8008840:	f7f7 fe3c 	bl	80004bc <__aeabi_i2d>
 8008844:	3730      	adds	r7, #48	; 0x30
 8008846:	4602      	mov	r2, r0
 8008848:	460b      	mov	r3, r1
 800884a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800884e:	f7f7 fce7 	bl	8000220 <__aeabi_dsub>
 8008852:	f806 7b01 	strb.w	r7, [r6], #1
 8008856:	42ae      	cmp	r6, r5
 8008858:	e9cd 0100 	strd	r0, r1, [sp]
 800885c:	f04f 0200 	mov.w	r2, #0
 8008860:	d126      	bne.n	80088b0 <_dtoa_r+0x5e8>
 8008862:	4b1c      	ldr	r3, [pc, #112]	; (80088d4 <_dtoa_r+0x60c>)
 8008864:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008868:	f7f7 fcdc 	bl	8000224 <__adddf3>
 800886c:	4602      	mov	r2, r0
 800886e:	460b      	mov	r3, r1
 8008870:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008874:	f7f8 f91c 	bl	8000ab0 <__aeabi_dcmpgt>
 8008878:	2800      	cmp	r0, #0
 800887a:	d174      	bne.n	8008966 <_dtoa_r+0x69e>
 800887c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008880:	2000      	movs	r0, #0
 8008882:	4914      	ldr	r1, [pc, #80]	; (80088d4 <_dtoa_r+0x60c>)
 8008884:	f7f7 fccc 	bl	8000220 <__aeabi_dsub>
 8008888:	4602      	mov	r2, r0
 800888a:	460b      	mov	r3, r1
 800888c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008890:	f7f8 f8f0 	bl	8000a74 <__aeabi_dcmplt>
 8008894:	2800      	cmp	r0, #0
 8008896:	f43f af30 	beq.w	80086fa <_dtoa_r+0x432>
 800889a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800889e:	2b30      	cmp	r3, #48	; 0x30
 80088a0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80088a4:	d002      	beq.n	80088ac <_dtoa_r+0x5e4>
 80088a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80088aa:	e04a      	b.n	8008942 <_dtoa_r+0x67a>
 80088ac:	4615      	mov	r5, r2
 80088ae:	e7f4      	b.n	800889a <_dtoa_r+0x5d2>
 80088b0:	4b05      	ldr	r3, [pc, #20]	; (80088c8 <_dtoa_r+0x600>)
 80088b2:	f7f7 fe6d 	bl	8000590 <__aeabi_dmul>
 80088b6:	e9cd 0100 	strd	r0, r1, [sp]
 80088ba:	e7bc      	b.n	8008836 <_dtoa_r+0x56e>
 80088bc:	080097f0 	.word	0x080097f0
 80088c0:	080097c8 	.word	0x080097c8
 80088c4:	3ff00000 	.word	0x3ff00000
 80088c8:	40240000 	.word	0x40240000
 80088cc:	401c0000 	.word	0x401c0000
 80088d0:	40140000 	.word	0x40140000
 80088d4:	3fe00000 	.word	0x3fe00000
 80088d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80088dc:	465d      	mov	r5, fp
 80088de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088e2:	4630      	mov	r0, r6
 80088e4:	4639      	mov	r1, r7
 80088e6:	f7f7 ff7d 	bl	80007e4 <__aeabi_ddiv>
 80088ea:	f7f8 f901 	bl	8000af0 <__aeabi_d2iz>
 80088ee:	4680      	mov	r8, r0
 80088f0:	f7f7 fde4 	bl	80004bc <__aeabi_i2d>
 80088f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088f8:	f7f7 fe4a 	bl	8000590 <__aeabi_dmul>
 80088fc:	4602      	mov	r2, r0
 80088fe:	460b      	mov	r3, r1
 8008900:	4630      	mov	r0, r6
 8008902:	4639      	mov	r1, r7
 8008904:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008908:	f7f7 fc8a 	bl	8000220 <__aeabi_dsub>
 800890c:	f805 6b01 	strb.w	r6, [r5], #1
 8008910:	eba5 060b 	sub.w	r6, r5, fp
 8008914:	45b1      	cmp	r9, r6
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	d139      	bne.n	8008990 <_dtoa_r+0x6c8>
 800891c:	f7f7 fc82 	bl	8000224 <__adddf3>
 8008920:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008924:	4606      	mov	r6, r0
 8008926:	460f      	mov	r7, r1
 8008928:	f7f8 f8c2 	bl	8000ab0 <__aeabi_dcmpgt>
 800892c:	b9c8      	cbnz	r0, 8008962 <_dtoa_r+0x69a>
 800892e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008932:	4630      	mov	r0, r6
 8008934:	4639      	mov	r1, r7
 8008936:	f7f8 f893 	bl	8000a60 <__aeabi_dcmpeq>
 800893a:	b110      	cbz	r0, 8008942 <_dtoa_r+0x67a>
 800893c:	f018 0f01 	tst.w	r8, #1
 8008940:	d10f      	bne.n	8008962 <_dtoa_r+0x69a>
 8008942:	9904      	ldr	r1, [sp, #16]
 8008944:	4620      	mov	r0, r4
 8008946:	f000 fabb 	bl	8008ec0 <_Bfree>
 800894a:	2300      	movs	r3, #0
 800894c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800894e:	702b      	strb	r3, [r5, #0]
 8008950:	f10a 0301 	add.w	r3, sl, #1
 8008954:	6013      	str	r3, [r2, #0]
 8008956:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008958:	2b00      	cmp	r3, #0
 800895a:	f000 8241 	beq.w	8008de0 <_dtoa_r+0xb18>
 800895e:	601d      	str	r5, [r3, #0]
 8008960:	e23e      	b.n	8008de0 <_dtoa_r+0xb18>
 8008962:	f8cd a020 	str.w	sl, [sp, #32]
 8008966:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800896a:	2a39      	cmp	r2, #57	; 0x39
 800896c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8008970:	d108      	bne.n	8008984 <_dtoa_r+0x6bc>
 8008972:	459b      	cmp	fp, r3
 8008974:	d10a      	bne.n	800898c <_dtoa_r+0x6c4>
 8008976:	9b08      	ldr	r3, [sp, #32]
 8008978:	3301      	adds	r3, #1
 800897a:	9308      	str	r3, [sp, #32]
 800897c:	2330      	movs	r3, #48	; 0x30
 800897e:	f88b 3000 	strb.w	r3, [fp]
 8008982:	465b      	mov	r3, fp
 8008984:	781a      	ldrb	r2, [r3, #0]
 8008986:	3201      	adds	r2, #1
 8008988:	701a      	strb	r2, [r3, #0]
 800898a:	e78c      	b.n	80088a6 <_dtoa_r+0x5de>
 800898c:	461d      	mov	r5, r3
 800898e:	e7ea      	b.n	8008966 <_dtoa_r+0x69e>
 8008990:	2200      	movs	r2, #0
 8008992:	4b9b      	ldr	r3, [pc, #620]	; (8008c00 <_dtoa_r+0x938>)
 8008994:	f7f7 fdfc 	bl	8000590 <__aeabi_dmul>
 8008998:	2200      	movs	r2, #0
 800899a:	2300      	movs	r3, #0
 800899c:	4606      	mov	r6, r0
 800899e:	460f      	mov	r7, r1
 80089a0:	f7f8 f85e 	bl	8000a60 <__aeabi_dcmpeq>
 80089a4:	2800      	cmp	r0, #0
 80089a6:	d09a      	beq.n	80088de <_dtoa_r+0x616>
 80089a8:	e7cb      	b.n	8008942 <_dtoa_r+0x67a>
 80089aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089ac:	2a00      	cmp	r2, #0
 80089ae:	f000 808b 	beq.w	8008ac8 <_dtoa_r+0x800>
 80089b2:	9a06      	ldr	r2, [sp, #24]
 80089b4:	2a01      	cmp	r2, #1
 80089b6:	dc6e      	bgt.n	8008a96 <_dtoa_r+0x7ce>
 80089b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80089ba:	2a00      	cmp	r2, #0
 80089bc:	d067      	beq.n	8008a8e <_dtoa_r+0x7c6>
 80089be:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80089c2:	9f07      	ldr	r7, [sp, #28]
 80089c4:	9d05      	ldr	r5, [sp, #20]
 80089c6:	9a05      	ldr	r2, [sp, #20]
 80089c8:	2101      	movs	r1, #1
 80089ca:	441a      	add	r2, r3
 80089cc:	4620      	mov	r0, r4
 80089ce:	9205      	str	r2, [sp, #20]
 80089d0:	4498      	add	r8, r3
 80089d2:	f000 fb15 	bl	8009000 <__i2b>
 80089d6:	4606      	mov	r6, r0
 80089d8:	2d00      	cmp	r5, #0
 80089da:	dd0c      	ble.n	80089f6 <_dtoa_r+0x72e>
 80089dc:	f1b8 0f00 	cmp.w	r8, #0
 80089e0:	dd09      	ble.n	80089f6 <_dtoa_r+0x72e>
 80089e2:	4545      	cmp	r5, r8
 80089e4:	9a05      	ldr	r2, [sp, #20]
 80089e6:	462b      	mov	r3, r5
 80089e8:	bfa8      	it	ge
 80089ea:	4643      	movge	r3, r8
 80089ec:	1ad2      	subs	r2, r2, r3
 80089ee:	9205      	str	r2, [sp, #20]
 80089f0:	1aed      	subs	r5, r5, r3
 80089f2:	eba8 0803 	sub.w	r8, r8, r3
 80089f6:	9b07      	ldr	r3, [sp, #28]
 80089f8:	b1eb      	cbz	r3, 8008a36 <_dtoa_r+0x76e>
 80089fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d067      	beq.n	8008ad0 <_dtoa_r+0x808>
 8008a00:	b18f      	cbz	r7, 8008a26 <_dtoa_r+0x75e>
 8008a02:	4631      	mov	r1, r6
 8008a04:	463a      	mov	r2, r7
 8008a06:	4620      	mov	r0, r4
 8008a08:	f000 fb9a 	bl	8009140 <__pow5mult>
 8008a0c:	9a04      	ldr	r2, [sp, #16]
 8008a0e:	4601      	mov	r1, r0
 8008a10:	4606      	mov	r6, r0
 8008a12:	4620      	mov	r0, r4
 8008a14:	f000 fafd 	bl	8009012 <__multiply>
 8008a18:	9904      	ldr	r1, [sp, #16]
 8008a1a:	9008      	str	r0, [sp, #32]
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f000 fa4f 	bl	8008ec0 <_Bfree>
 8008a22:	9b08      	ldr	r3, [sp, #32]
 8008a24:	9304      	str	r3, [sp, #16]
 8008a26:	9b07      	ldr	r3, [sp, #28]
 8008a28:	1bda      	subs	r2, r3, r7
 8008a2a:	d004      	beq.n	8008a36 <_dtoa_r+0x76e>
 8008a2c:	9904      	ldr	r1, [sp, #16]
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f000 fb86 	bl	8009140 <__pow5mult>
 8008a34:	9004      	str	r0, [sp, #16]
 8008a36:	2101      	movs	r1, #1
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f000 fae1 	bl	8009000 <__i2b>
 8008a3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a40:	4607      	mov	r7, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f000 81d0 	beq.w	8008de8 <_dtoa_r+0xb20>
 8008a48:	461a      	mov	r2, r3
 8008a4a:	4601      	mov	r1, r0
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	f000 fb77 	bl	8009140 <__pow5mult>
 8008a52:	9b06      	ldr	r3, [sp, #24]
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	4607      	mov	r7, r0
 8008a58:	dc40      	bgt.n	8008adc <_dtoa_r+0x814>
 8008a5a:	9b00      	ldr	r3, [sp, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d139      	bne.n	8008ad4 <_dtoa_r+0x80c>
 8008a60:	9b01      	ldr	r3, [sp, #4]
 8008a62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d136      	bne.n	8008ad8 <_dtoa_r+0x810>
 8008a6a:	9b01      	ldr	r3, [sp, #4]
 8008a6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a70:	0d1b      	lsrs	r3, r3, #20
 8008a72:	051b      	lsls	r3, r3, #20
 8008a74:	b12b      	cbz	r3, 8008a82 <_dtoa_r+0x7ba>
 8008a76:	9b05      	ldr	r3, [sp, #20]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	9305      	str	r3, [sp, #20]
 8008a7c:	f108 0801 	add.w	r8, r8, #1
 8008a80:	2301      	movs	r3, #1
 8008a82:	9307      	str	r3, [sp, #28]
 8008a84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d12a      	bne.n	8008ae0 <_dtoa_r+0x818>
 8008a8a:	2001      	movs	r0, #1
 8008a8c:	e030      	b.n	8008af0 <_dtoa_r+0x828>
 8008a8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a90:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a94:	e795      	b.n	80089c2 <_dtoa_r+0x6fa>
 8008a96:	9b07      	ldr	r3, [sp, #28]
 8008a98:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8008a9c:	42bb      	cmp	r3, r7
 8008a9e:	bfbf      	itttt	lt
 8008aa0:	9b07      	ldrlt	r3, [sp, #28]
 8008aa2:	9707      	strlt	r7, [sp, #28]
 8008aa4:	1afa      	sublt	r2, r7, r3
 8008aa6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008aa8:	bfbb      	ittet	lt
 8008aaa:	189b      	addlt	r3, r3, r2
 8008aac:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008aae:	1bdf      	subge	r7, r3, r7
 8008ab0:	2700      	movlt	r7, #0
 8008ab2:	f1b9 0f00 	cmp.w	r9, #0
 8008ab6:	bfb5      	itete	lt
 8008ab8:	9b05      	ldrlt	r3, [sp, #20]
 8008aba:	9d05      	ldrge	r5, [sp, #20]
 8008abc:	eba3 0509 	sublt.w	r5, r3, r9
 8008ac0:	464b      	movge	r3, r9
 8008ac2:	bfb8      	it	lt
 8008ac4:	2300      	movlt	r3, #0
 8008ac6:	e77e      	b.n	80089c6 <_dtoa_r+0x6fe>
 8008ac8:	9f07      	ldr	r7, [sp, #28]
 8008aca:	9d05      	ldr	r5, [sp, #20]
 8008acc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008ace:	e783      	b.n	80089d8 <_dtoa_r+0x710>
 8008ad0:	9a07      	ldr	r2, [sp, #28]
 8008ad2:	e7ab      	b.n	8008a2c <_dtoa_r+0x764>
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	e7d4      	b.n	8008a82 <_dtoa_r+0x7ba>
 8008ad8:	9b00      	ldr	r3, [sp, #0]
 8008ada:	e7d2      	b.n	8008a82 <_dtoa_r+0x7ba>
 8008adc:	2300      	movs	r3, #0
 8008ade:	9307      	str	r3, [sp, #28]
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008ae6:	6918      	ldr	r0, [r3, #16]
 8008ae8:	f000 fa3c 	bl	8008f64 <__hi0bits>
 8008aec:	f1c0 0020 	rsb	r0, r0, #32
 8008af0:	4440      	add	r0, r8
 8008af2:	f010 001f 	ands.w	r0, r0, #31
 8008af6:	d047      	beq.n	8008b88 <_dtoa_r+0x8c0>
 8008af8:	f1c0 0320 	rsb	r3, r0, #32
 8008afc:	2b04      	cmp	r3, #4
 8008afe:	dd3b      	ble.n	8008b78 <_dtoa_r+0x8b0>
 8008b00:	9b05      	ldr	r3, [sp, #20]
 8008b02:	f1c0 001c 	rsb	r0, r0, #28
 8008b06:	4403      	add	r3, r0
 8008b08:	9305      	str	r3, [sp, #20]
 8008b0a:	4405      	add	r5, r0
 8008b0c:	4480      	add	r8, r0
 8008b0e:	9b05      	ldr	r3, [sp, #20]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	dd05      	ble.n	8008b20 <_dtoa_r+0x858>
 8008b14:	461a      	mov	r2, r3
 8008b16:	9904      	ldr	r1, [sp, #16]
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f000 fb5f 	bl	80091dc <__lshift>
 8008b1e:	9004      	str	r0, [sp, #16]
 8008b20:	f1b8 0f00 	cmp.w	r8, #0
 8008b24:	dd05      	ble.n	8008b32 <_dtoa_r+0x86a>
 8008b26:	4639      	mov	r1, r7
 8008b28:	4642      	mov	r2, r8
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	f000 fb56 	bl	80091dc <__lshift>
 8008b30:	4607      	mov	r7, r0
 8008b32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b34:	b353      	cbz	r3, 8008b8c <_dtoa_r+0x8c4>
 8008b36:	4639      	mov	r1, r7
 8008b38:	9804      	ldr	r0, [sp, #16]
 8008b3a:	f000 fba3 	bl	8009284 <__mcmp>
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	da24      	bge.n	8008b8c <_dtoa_r+0x8c4>
 8008b42:	2300      	movs	r3, #0
 8008b44:	220a      	movs	r2, #10
 8008b46:	9904      	ldr	r1, [sp, #16]
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f000 f9d0 	bl	8008eee <__multadd>
 8008b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b50:	9004      	str	r0, [sp, #16]
 8008b52:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	f000 814d 	beq.w	8008df6 <_dtoa_r+0xb2e>
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	4631      	mov	r1, r6
 8008b60:	220a      	movs	r2, #10
 8008b62:	4620      	mov	r0, r4
 8008b64:	f000 f9c3 	bl	8008eee <__multadd>
 8008b68:	9b02      	ldr	r3, [sp, #8]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	4606      	mov	r6, r0
 8008b6e:	dc4f      	bgt.n	8008c10 <_dtoa_r+0x948>
 8008b70:	9b06      	ldr	r3, [sp, #24]
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	dd4c      	ble.n	8008c10 <_dtoa_r+0x948>
 8008b76:	e011      	b.n	8008b9c <_dtoa_r+0x8d4>
 8008b78:	d0c9      	beq.n	8008b0e <_dtoa_r+0x846>
 8008b7a:	9a05      	ldr	r2, [sp, #20]
 8008b7c:	331c      	adds	r3, #28
 8008b7e:	441a      	add	r2, r3
 8008b80:	9205      	str	r2, [sp, #20]
 8008b82:	441d      	add	r5, r3
 8008b84:	4498      	add	r8, r3
 8008b86:	e7c2      	b.n	8008b0e <_dtoa_r+0x846>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	e7f6      	b.n	8008b7a <_dtoa_r+0x8b2>
 8008b8c:	f1b9 0f00 	cmp.w	r9, #0
 8008b90:	dc38      	bgt.n	8008c04 <_dtoa_r+0x93c>
 8008b92:	9b06      	ldr	r3, [sp, #24]
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	dd35      	ble.n	8008c04 <_dtoa_r+0x93c>
 8008b98:	f8cd 9008 	str.w	r9, [sp, #8]
 8008b9c:	9b02      	ldr	r3, [sp, #8]
 8008b9e:	b963      	cbnz	r3, 8008bba <_dtoa_r+0x8f2>
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	2205      	movs	r2, #5
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	f000 f9a2 	bl	8008eee <__multadd>
 8008baa:	4601      	mov	r1, r0
 8008bac:	4607      	mov	r7, r0
 8008bae:	9804      	ldr	r0, [sp, #16]
 8008bb0:	f000 fb68 	bl	8009284 <__mcmp>
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	f73f adcc 	bgt.w	8008752 <_dtoa_r+0x48a>
 8008bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bbc:	465d      	mov	r5, fp
 8008bbe:	ea6f 0a03 	mvn.w	sl, r3
 8008bc2:	f04f 0900 	mov.w	r9, #0
 8008bc6:	4639      	mov	r1, r7
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f000 f979 	bl	8008ec0 <_Bfree>
 8008bce:	2e00      	cmp	r6, #0
 8008bd0:	f43f aeb7 	beq.w	8008942 <_dtoa_r+0x67a>
 8008bd4:	f1b9 0f00 	cmp.w	r9, #0
 8008bd8:	d005      	beq.n	8008be6 <_dtoa_r+0x91e>
 8008bda:	45b1      	cmp	r9, r6
 8008bdc:	d003      	beq.n	8008be6 <_dtoa_r+0x91e>
 8008bde:	4649      	mov	r1, r9
 8008be0:	4620      	mov	r0, r4
 8008be2:	f000 f96d 	bl	8008ec0 <_Bfree>
 8008be6:	4631      	mov	r1, r6
 8008be8:	4620      	mov	r0, r4
 8008bea:	f000 f969 	bl	8008ec0 <_Bfree>
 8008bee:	e6a8      	b.n	8008942 <_dtoa_r+0x67a>
 8008bf0:	2700      	movs	r7, #0
 8008bf2:	463e      	mov	r6, r7
 8008bf4:	e7e1      	b.n	8008bba <_dtoa_r+0x8f2>
 8008bf6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008bfa:	463e      	mov	r6, r7
 8008bfc:	e5a9      	b.n	8008752 <_dtoa_r+0x48a>
 8008bfe:	bf00      	nop
 8008c00:	40240000 	.word	0x40240000
 8008c04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c06:	f8cd 9008 	str.w	r9, [sp, #8]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	f000 80fa 	beq.w	8008e04 <_dtoa_r+0xb3c>
 8008c10:	2d00      	cmp	r5, #0
 8008c12:	dd05      	ble.n	8008c20 <_dtoa_r+0x958>
 8008c14:	4631      	mov	r1, r6
 8008c16:	462a      	mov	r2, r5
 8008c18:	4620      	mov	r0, r4
 8008c1a:	f000 fadf 	bl	80091dc <__lshift>
 8008c1e:	4606      	mov	r6, r0
 8008c20:	9b07      	ldr	r3, [sp, #28]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d04c      	beq.n	8008cc0 <_dtoa_r+0x9f8>
 8008c26:	6871      	ldr	r1, [r6, #4]
 8008c28:	4620      	mov	r0, r4
 8008c2a:	f000 f915 	bl	8008e58 <_Balloc>
 8008c2e:	6932      	ldr	r2, [r6, #16]
 8008c30:	3202      	adds	r2, #2
 8008c32:	4605      	mov	r5, r0
 8008c34:	0092      	lsls	r2, r2, #2
 8008c36:	f106 010c 	add.w	r1, r6, #12
 8008c3a:	300c      	adds	r0, #12
 8008c3c:	f7fe fe44 	bl	80078c8 <memcpy>
 8008c40:	2201      	movs	r2, #1
 8008c42:	4629      	mov	r1, r5
 8008c44:	4620      	mov	r0, r4
 8008c46:	f000 fac9 	bl	80091dc <__lshift>
 8008c4a:	9b00      	ldr	r3, [sp, #0]
 8008c4c:	f8cd b014 	str.w	fp, [sp, #20]
 8008c50:	f003 0301 	and.w	r3, r3, #1
 8008c54:	46b1      	mov	r9, r6
 8008c56:	9307      	str	r3, [sp, #28]
 8008c58:	4606      	mov	r6, r0
 8008c5a:	4639      	mov	r1, r7
 8008c5c:	9804      	ldr	r0, [sp, #16]
 8008c5e:	f7ff faa5 	bl	80081ac <quorem>
 8008c62:	4649      	mov	r1, r9
 8008c64:	4605      	mov	r5, r0
 8008c66:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008c6a:	9804      	ldr	r0, [sp, #16]
 8008c6c:	f000 fb0a 	bl	8009284 <__mcmp>
 8008c70:	4632      	mov	r2, r6
 8008c72:	9000      	str	r0, [sp, #0]
 8008c74:	4639      	mov	r1, r7
 8008c76:	4620      	mov	r0, r4
 8008c78:	f000 fb1e 	bl	80092b8 <__mdiff>
 8008c7c:	68c3      	ldr	r3, [r0, #12]
 8008c7e:	4602      	mov	r2, r0
 8008c80:	bb03      	cbnz	r3, 8008cc4 <_dtoa_r+0x9fc>
 8008c82:	4601      	mov	r1, r0
 8008c84:	9008      	str	r0, [sp, #32]
 8008c86:	9804      	ldr	r0, [sp, #16]
 8008c88:	f000 fafc 	bl	8009284 <__mcmp>
 8008c8c:	9a08      	ldr	r2, [sp, #32]
 8008c8e:	4603      	mov	r3, r0
 8008c90:	4611      	mov	r1, r2
 8008c92:	4620      	mov	r0, r4
 8008c94:	9308      	str	r3, [sp, #32]
 8008c96:	f000 f913 	bl	8008ec0 <_Bfree>
 8008c9a:	9b08      	ldr	r3, [sp, #32]
 8008c9c:	b9a3      	cbnz	r3, 8008cc8 <_dtoa_r+0xa00>
 8008c9e:	9a06      	ldr	r2, [sp, #24]
 8008ca0:	b992      	cbnz	r2, 8008cc8 <_dtoa_r+0xa00>
 8008ca2:	9a07      	ldr	r2, [sp, #28]
 8008ca4:	b982      	cbnz	r2, 8008cc8 <_dtoa_r+0xa00>
 8008ca6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008caa:	d029      	beq.n	8008d00 <_dtoa_r+0xa38>
 8008cac:	9b00      	ldr	r3, [sp, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	dd01      	ble.n	8008cb6 <_dtoa_r+0x9ee>
 8008cb2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008cb6:	9b05      	ldr	r3, [sp, #20]
 8008cb8:	1c5d      	adds	r5, r3, #1
 8008cba:	f883 8000 	strb.w	r8, [r3]
 8008cbe:	e782      	b.n	8008bc6 <_dtoa_r+0x8fe>
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	e7c2      	b.n	8008c4a <_dtoa_r+0x982>
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e7e3      	b.n	8008c90 <_dtoa_r+0x9c8>
 8008cc8:	9a00      	ldr	r2, [sp, #0]
 8008cca:	2a00      	cmp	r2, #0
 8008ccc:	db04      	blt.n	8008cd8 <_dtoa_r+0xa10>
 8008cce:	d125      	bne.n	8008d1c <_dtoa_r+0xa54>
 8008cd0:	9a06      	ldr	r2, [sp, #24]
 8008cd2:	bb1a      	cbnz	r2, 8008d1c <_dtoa_r+0xa54>
 8008cd4:	9a07      	ldr	r2, [sp, #28]
 8008cd6:	bb0a      	cbnz	r2, 8008d1c <_dtoa_r+0xa54>
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	ddec      	ble.n	8008cb6 <_dtoa_r+0x9ee>
 8008cdc:	2201      	movs	r2, #1
 8008cde:	9904      	ldr	r1, [sp, #16]
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	f000 fa7b 	bl	80091dc <__lshift>
 8008ce6:	4639      	mov	r1, r7
 8008ce8:	9004      	str	r0, [sp, #16]
 8008cea:	f000 facb 	bl	8009284 <__mcmp>
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	dc03      	bgt.n	8008cfa <_dtoa_r+0xa32>
 8008cf2:	d1e0      	bne.n	8008cb6 <_dtoa_r+0x9ee>
 8008cf4:	f018 0f01 	tst.w	r8, #1
 8008cf8:	d0dd      	beq.n	8008cb6 <_dtoa_r+0x9ee>
 8008cfa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008cfe:	d1d8      	bne.n	8008cb2 <_dtoa_r+0x9ea>
 8008d00:	9b05      	ldr	r3, [sp, #20]
 8008d02:	9a05      	ldr	r2, [sp, #20]
 8008d04:	1c5d      	adds	r5, r3, #1
 8008d06:	2339      	movs	r3, #57	; 0x39
 8008d08:	7013      	strb	r3, [r2, #0]
 8008d0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008d0e:	2b39      	cmp	r3, #57	; 0x39
 8008d10:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008d14:	d04f      	beq.n	8008db6 <_dtoa_r+0xaee>
 8008d16:	3301      	adds	r3, #1
 8008d18:	7013      	strb	r3, [r2, #0]
 8008d1a:	e754      	b.n	8008bc6 <_dtoa_r+0x8fe>
 8008d1c:	9a05      	ldr	r2, [sp, #20]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f102 0501 	add.w	r5, r2, #1
 8008d24:	dd06      	ble.n	8008d34 <_dtoa_r+0xa6c>
 8008d26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008d2a:	d0e9      	beq.n	8008d00 <_dtoa_r+0xa38>
 8008d2c:	f108 0801 	add.w	r8, r8, #1
 8008d30:	9b05      	ldr	r3, [sp, #20]
 8008d32:	e7c2      	b.n	8008cba <_dtoa_r+0x9f2>
 8008d34:	9a02      	ldr	r2, [sp, #8]
 8008d36:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008d3a:	eba5 030b 	sub.w	r3, r5, fp
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d021      	beq.n	8008d86 <_dtoa_r+0xabe>
 8008d42:	2300      	movs	r3, #0
 8008d44:	220a      	movs	r2, #10
 8008d46:	9904      	ldr	r1, [sp, #16]
 8008d48:	4620      	mov	r0, r4
 8008d4a:	f000 f8d0 	bl	8008eee <__multadd>
 8008d4e:	45b1      	cmp	r9, r6
 8008d50:	9004      	str	r0, [sp, #16]
 8008d52:	f04f 0300 	mov.w	r3, #0
 8008d56:	f04f 020a 	mov.w	r2, #10
 8008d5a:	4649      	mov	r1, r9
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	d105      	bne.n	8008d6c <_dtoa_r+0xaa4>
 8008d60:	f000 f8c5 	bl	8008eee <__multadd>
 8008d64:	4681      	mov	r9, r0
 8008d66:	4606      	mov	r6, r0
 8008d68:	9505      	str	r5, [sp, #20]
 8008d6a:	e776      	b.n	8008c5a <_dtoa_r+0x992>
 8008d6c:	f000 f8bf 	bl	8008eee <__multadd>
 8008d70:	4631      	mov	r1, r6
 8008d72:	4681      	mov	r9, r0
 8008d74:	2300      	movs	r3, #0
 8008d76:	220a      	movs	r2, #10
 8008d78:	4620      	mov	r0, r4
 8008d7a:	f000 f8b8 	bl	8008eee <__multadd>
 8008d7e:	4606      	mov	r6, r0
 8008d80:	e7f2      	b.n	8008d68 <_dtoa_r+0xaa0>
 8008d82:	f04f 0900 	mov.w	r9, #0
 8008d86:	2201      	movs	r2, #1
 8008d88:	9904      	ldr	r1, [sp, #16]
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f000 fa26 	bl	80091dc <__lshift>
 8008d90:	4639      	mov	r1, r7
 8008d92:	9004      	str	r0, [sp, #16]
 8008d94:	f000 fa76 	bl	8009284 <__mcmp>
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	dcb6      	bgt.n	8008d0a <_dtoa_r+0xa42>
 8008d9c:	d102      	bne.n	8008da4 <_dtoa_r+0xadc>
 8008d9e:	f018 0f01 	tst.w	r8, #1
 8008da2:	d1b2      	bne.n	8008d0a <_dtoa_r+0xa42>
 8008da4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008da8:	2b30      	cmp	r3, #48	; 0x30
 8008daa:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008dae:	f47f af0a 	bne.w	8008bc6 <_dtoa_r+0x8fe>
 8008db2:	4615      	mov	r5, r2
 8008db4:	e7f6      	b.n	8008da4 <_dtoa_r+0xadc>
 8008db6:	4593      	cmp	fp, r2
 8008db8:	d105      	bne.n	8008dc6 <_dtoa_r+0xafe>
 8008dba:	2331      	movs	r3, #49	; 0x31
 8008dbc:	f10a 0a01 	add.w	sl, sl, #1
 8008dc0:	f88b 3000 	strb.w	r3, [fp]
 8008dc4:	e6ff      	b.n	8008bc6 <_dtoa_r+0x8fe>
 8008dc6:	4615      	mov	r5, r2
 8008dc8:	e79f      	b.n	8008d0a <_dtoa_r+0xa42>
 8008dca:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008e30 <_dtoa_r+0xb68>
 8008dce:	e007      	b.n	8008de0 <_dtoa_r+0xb18>
 8008dd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008dd2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008e34 <_dtoa_r+0xb6c>
 8008dd6:	b11b      	cbz	r3, 8008de0 <_dtoa_r+0xb18>
 8008dd8:	f10b 0308 	add.w	r3, fp, #8
 8008ddc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008dde:	6013      	str	r3, [r2, #0]
 8008de0:	4658      	mov	r0, fp
 8008de2:	b017      	add	sp, #92	; 0x5c
 8008de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008de8:	9b06      	ldr	r3, [sp, #24]
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	f77f ae35 	ble.w	8008a5a <_dtoa_r+0x792>
 8008df0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008df2:	9307      	str	r3, [sp, #28]
 8008df4:	e649      	b.n	8008a8a <_dtoa_r+0x7c2>
 8008df6:	9b02      	ldr	r3, [sp, #8]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	dc03      	bgt.n	8008e04 <_dtoa_r+0xb3c>
 8008dfc:	9b06      	ldr	r3, [sp, #24]
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	f73f aecc 	bgt.w	8008b9c <_dtoa_r+0x8d4>
 8008e04:	465d      	mov	r5, fp
 8008e06:	4639      	mov	r1, r7
 8008e08:	9804      	ldr	r0, [sp, #16]
 8008e0a:	f7ff f9cf 	bl	80081ac <quorem>
 8008e0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008e12:	f805 8b01 	strb.w	r8, [r5], #1
 8008e16:	9a02      	ldr	r2, [sp, #8]
 8008e18:	eba5 030b 	sub.w	r3, r5, fp
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	ddb0      	ble.n	8008d82 <_dtoa_r+0xaba>
 8008e20:	2300      	movs	r3, #0
 8008e22:	220a      	movs	r2, #10
 8008e24:	9904      	ldr	r1, [sp, #16]
 8008e26:	4620      	mov	r0, r4
 8008e28:	f000 f861 	bl	8008eee <__multadd>
 8008e2c:	9004      	str	r0, [sp, #16]
 8008e2e:	e7ea      	b.n	8008e06 <_dtoa_r+0xb3e>
 8008e30:	080097b8 	.word	0x080097b8
 8008e34:	080097ba 	.word	0x080097ba

08008e38 <_localeconv_r>:
 8008e38:	4b04      	ldr	r3, [pc, #16]	; (8008e4c <_localeconv_r+0x14>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	6a18      	ldr	r0, [r3, #32]
 8008e3e:	4b04      	ldr	r3, [pc, #16]	; (8008e50 <_localeconv_r+0x18>)
 8008e40:	2800      	cmp	r0, #0
 8008e42:	bf08      	it	eq
 8008e44:	4618      	moveq	r0, r3
 8008e46:	30f0      	adds	r0, #240	; 0xf0
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	20000010 	.word	0x20000010
 8008e50:	20000074 	.word	0x20000074

08008e54 <__malloc_lock>:
 8008e54:	4770      	bx	lr

08008e56 <__malloc_unlock>:
 8008e56:	4770      	bx	lr

08008e58 <_Balloc>:
 8008e58:	b570      	push	{r4, r5, r6, lr}
 8008e5a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008e5c:	4604      	mov	r4, r0
 8008e5e:	460e      	mov	r6, r1
 8008e60:	b93d      	cbnz	r5, 8008e72 <_Balloc+0x1a>
 8008e62:	2010      	movs	r0, #16
 8008e64:	f7fe fd20 	bl	80078a8 <malloc>
 8008e68:	6260      	str	r0, [r4, #36]	; 0x24
 8008e6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008e6e:	6005      	str	r5, [r0, #0]
 8008e70:	60c5      	str	r5, [r0, #12]
 8008e72:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008e74:	68eb      	ldr	r3, [r5, #12]
 8008e76:	b183      	cbz	r3, 8008e9a <_Balloc+0x42>
 8008e78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008e80:	b9b8      	cbnz	r0, 8008eb2 <_Balloc+0x5a>
 8008e82:	2101      	movs	r1, #1
 8008e84:	fa01 f506 	lsl.w	r5, r1, r6
 8008e88:	1d6a      	adds	r2, r5, #5
 8008e8a:	0092      	lsls	r2, r2, #2
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	f000 fabf 	bl	8009410 <_calloc_r>
 8008e92:	b160      	cbz	r0, 8008eae <_Balloc+0x56>
 8008e94:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008e98:	e00e      	b.n	8008eb8 <_Balloc+0x60>
 8008e9a:	2221      	movs	r2, #33	; 0x21
 8008e9c:	2104      	movs	r1, #4
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	f000 fab6 	bl	8009410 <_calloc_r>
 8008ea4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ea6:	60e8      	str	r0, [r5, #12]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d1e4      	bne.n	8008e78 <_Balloc+0x20>
 8008eae:	2000      	movs	r0, #0
 8008eb0:	bd70      	pop	{r4, r5, r6, pc}
 8008eb2:	6802      	ldr	r2, [r0, #0]
 8008eb4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008eb8:	2300      	movs	r3, #0
 8008eba:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ebe:	e7f7      	b.n	8008eb0 <_Balloc+0x58>

08008ec0 <_Bfree>:
 8008ec0:	b570      	push	{r4, r5, r6, lr}
 8008ec2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008ec4:	4606      	mov	r6, r0
 8008ec6:	460d      	mov	r5, r1
 8008ec8:	b93c      	cbnz	r4, 8008eda <_Bfree+0x1a>
 8008eca:	2010      	movs	r0, #16
 8008ecc:	f7fe fcec 	bl	80078a8 <malloc>
 8008ed0:	6270      	str	r0, [r6, #36]	; 0x24
 8008ed2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ed6:	6004      	str	r4, [r0, #0]
 8008ed8:	60c4      	str	r4, [r0, #12]
 8008eda:	b13d      	cbz	r5, 8008eec <_Bfree+0x2c>
 8008edc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008ede:	686a      	ldr	r2, [r5, #4]
 8008ee0:	68db      	ldr	r3, [r3, #12]
 8008ee2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ee6:	6029      	str	r1, [r5, #0]
 8008ee8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008eec:	bd70      	pop	{r4, r5, r6, pc}

08008eee <__multadd>:
 8008eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef2:	690d      	ldr	r5, [r1, #16]
 8008ef4:	461f      	mov	r7, r3
 8008ef6:	4606      	mov	r6, r0
 8008ef8:	460c      	mov	r4, r1
 8008efa:	f101 0c14 	add.w	ip, r1, #20
 8008efe:	2300      	movs	r3, #0
 8008f00:	f8dc 0000 	ldr.w	r0, [ip]
 8008f04:	b281      	uxth	r1, r0
 8008f06:	fb02 7101 	mla	r1, r2, r1, r7
 8008f0a:	0c0f      	lsrs	r7, r1, #16
 8008f0c:	0c00      	lsrs	r0, r0, #16
 8008f0e:	fb02 7000 	mla	r0, r2, r0, r7
 8008f12:	b289      	uxth	r1, r1
 8008f14:	3301      	adds	r3, #1
 8008f16:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008f1a:	429d      	cmp	r5, r3
 8008f1c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008f20:	f84c 1b04 	str.w	r1, [ip], #4
 8008f24:	dcec      	bgt.n	8008f00 <__multadd+0x12>
 8008f26:	b1d7      	cbz	r7, 8008f5e <__multadd+0x70>
 8008f28:	68a3      	ldr	r3, [r4, #8]
 8008f2a:	42ab      	cmp	r3, r5
 8008f2c:	dc12      	bgt.n	8008f54 <__multadd+0x66>
 8008f2e:	6861      	ldr	r1, [r4, #4]
 8008f30:	4630      	mov	r0, r6
 8008f32:	3101      	adds	r1, #1
 8008f34:	f7ff ff90 	bl	8008e58 <_Balloc>
 8008f38:	6922      	ldr	r2, [r4, #16]
 8008f3a:	3202      	adds	r2, #2
 8008f3c:	f104 010c 	add.w	r1, r4, #12
 8008f40:	4680      	mov	r8, r0
 8008f42:	0092      	lsls	r2, r2, #2
 8008f44:	300c      	adds	r0, #12
 8008f46:	f7fe fcbf 	bl	80078c8 <memcpy>
 8008f4a:	4621      	mov	r1, r4
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	f7ff ffb7 	bl	8008ec0 <_Bfree>
 8008f52:	4644      	mov	r4, r8
 8008f54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f58:	3501      	adds	r5, #1
 8008f5a:	615f      	str	r7, [r3, #20]
 8008f5c:	6125      	str	r5, [r4, #16]
 8008f5e:	4620      	mov	r0, r4
 8008f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008f64 <__hi0bits>:
 8008f64:	0c02      	lsrs	r2, r0, #16
 8008f66:	0412      	lsls	r2, r2, #16
 8008f68:	4603      	mov	r3, r0
 8008f6a:	b9b2      	cbnz	r2, 8008f9a <__hi0bits+0x36>
 8008f6c:	0403      	lsls	r3, r0, #16
 8008f6e:	2010      	movs	r0, #16
 8008f70:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008f74:	bf04      	itt	eq
 8008f76:	021b      	lsleq	r3, r3, #8
 8008f78:	3008      	addeq	r0, #8
 8008f7a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008f7e:	bf04      	itt	eq
 8008f80:	011b      	lsleq	r3, r3, #4
 8008f82:	3004      	addeq	r0, #4
 8008f84:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008f88:	bf04      	itt	eq
 8008f8a:	009b      	lsleq	r3, r3, #2
 8008f8c:	3002      	addeq	r0, #2
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	db06      	blt.n	8008fa0 <__hi0bits+0x3c>
 8008f92:	005b      	lsls	r3, r3, #1
 8008f94:	d503      	bpl.n	8008f9e <__hi0bits+0x3a>
 8008f96:	3001      	adds	r0, #1
 8008f98:	4770      	bx	lr
 8008f9a:	2000      	movs	r0, #0
 8008f9c:	e7e8      	b.n	8008f70 <__hi0bits+0xc>
 8008f9e:	2020      	movs	r0, #32
 8008fa0:	4770      	bx	lr

08008fa2 <__lo0bits>:
 8008fa2:	6803      	ldr	r3, [r0, #0]
 8008fa4:	f013 0207 	ands.w	r2, r3, #7
 8008fa8:	4601      	mov	r1, r0
 8008faa:	d00b      	beq.n	8008fc4 <__lo0bits+0x22>
 8008fac:	07da      	lsls	r2, r3, #31
 8008fae:	d423      	bmi.n	8008ff8 <__lo0bits+0x56>
 8008fb0:	0798      	lsls	r0, r3, #30
 8008fb2:	bf49      	itett	mi
 8008fb4:	085b      	lsrmi	r3, r3, #1
 8008fb6:	089b      	lsrpl	r3, r3, #2
 8008fb8:	2001      	movmi	r0, #1
 8008fba:	600b      	strmi	r3, [r1, #0]
 8008fbc:	bf5c      	itt	pl
 8008fbe:	600b      	strpl	r3, [r1, #0]
 8008fc0:	2002      	movpl	r0, #2
 8008fc2:	4770      	bx	lr
 8008fc4:	b298      	uxth	r0, r3
 8008fc6:	b9a8      	cbnz	r0, 8008ff4 <__lo0bits+0x52>
 8008fc8:	0c1b      	lsrs	r3, r3, #16
 8008fca:	2010      	movs	r0, #16
 8008fcc:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008fd0:	bf04      	itt	eq
 8008fd2:	0a1b      	lsreq	r3, r3, #8
 8008fd4:	3008      	addeq	r0, #8
 8008fd6:	071a      	lsls	r2, r3, #28
 8008fd8:	bf04      	itt	eq
 8008fda:	091b      	lsreq	r3, r3, #4
 8008fdc:	3004      	addeq	r0, #4
 8008fde:	079a      	lsls	r2, r3, #30
 8008fe0:	bf04      	itt	eq
 8008fe2:	089b      	lsreq	r3, r3, #2
 8008fe4:	3002      	addeq	r0, #2
 8008fe6:	07da      	lsls	r2, r3, #31
 8008fe8:	d402      	bmi.n	8008ff0 <__lo0bits+0x4e>
 8008fea:	085b      	lsrs	r3, r3, #1
 8008fec:	d006      	beq.n	8008ffc <__lo0bits+0x5a>
 8008fee:	3001      	adds	r0, #1
 8008ff0:	600b      	str	r3, [r1, #0]
 8008ff2:	4770      	bx	lr
 8008ff4:	4610      	mov	r0, r2
 8008ff6:	e7e9      	b.n	8008fcc <__lo0bits+0x2a>
 8008ff8:	2000      	movs	r0, #0
 8008ffa:	4770      	bx	lr
 8008ffc:	2020      	movs	r0, #32
 8008ffe:	4770      	bx	lr

08009000 <__i2b>:
 8009000:	b510      	push	{r4, lr}
 8009002:	460c      	mov	r4, r1
 8009004:	2101      	movs	r1, #1
 8009006:	f7ff ff27 	bl	8008e58 <_Balloc>
 800900a:	2201      	movs	r2, #1
 800900c:	6144      	str	r4, [r0, #20]
 800900e:	6102      	str	r2, [r0, #16]
 8009010:	bd10      	pop	{r4, pc}

08009012 <__multiply>:
 8009012:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009016:	4614      	mov	r4, r2
 8009018:	690a      	ldr	r2, [r1, #16]
 800901a:	6923      	ldr	r3, [r4, #16]
 800901c:	429a      	cmp	r2, r3
 800901e:	bfb8      	it	lt
 8009020:	460b      	movlt	r3, r1
 8009022:	4688      	mov	r8, r1
 8009024:	bfbc      	itt	lt
 8009026:	46a0      	movlt	r8, r4
 8009028:	461c      	movlt	r4, r3
 800902a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800902e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009032:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009036:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800903a:	eb07 0609 	add.w	r6, r7, r9
 800903e:	42b3      	cmp	r3, r6
 8009040:	bfb8      	it	lt
 8009042:	3101      	addlt	r1, #1
 8009044:	f7ff ff08 	bl	8008e58 <_Balloc>
 8009048:	f100 0514 	add.w	r5, r0, #20
 800904c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009050:	462b      	mov	r3, r5
 8009052:	2200      	movs	r2, #0
 8009054:	4573      	cmp	r3, lr
 8009056:	d316      	bcc.n	8009086 <__multiply+0x74>
 8009058:	f104 0214 	add.w	r2, r4, #20
 800905c:	f108 0114 	add.w	r1, r8, #20
 8009060:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009064:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009068:	9300      	str	r3, [sp, #0]
 800906a:	9b00      	ldr	r3, [sp, #0]
 800906c:	9201      	str	r2, [sp, #4]
 800906e:	4293      	cmp	r3, r2
 8009070:	d80c      	bhi.n	800908c <__multiply+0x7a>
 8009072:	2e00      	cmp	r6, #0
 8009074:	dd03      	ble.n	800907e <__multiply+0x6c>
 8009076:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800907a:	2b00      	cmp	r3, #0
 800907c:	d05d      	beq.n	800913a <__multiply+0x128>
 800907e:	6106      	str	r6, [r0, #16]
 8009080:	b003      	add	sp, #12
 8009082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009086:	f843 2b04 	str.w	r2, [r3], #4
 800908a:	e7e3      	b.n	8009054 <__multiply+0x42>
 800908c:	f8b2 b000 	ldrh.w	fp, [r2]
 8009090:	f1bb 0f00 	cmp.w	fp, #0
 8009094:	d023      	beq.n	80090de <__multiply+0xcc>
 8009096:	4689      	mov	r9, r1
 8009098:	46ac      	mov	ip, r5
 800909a:	f04f 0800 	mov.w	r8, #0
 800909e:	f859 4b04 	ldr.w	r4, [r9], #4
 80090a2:	f8dc a000 	ldr.w	sl, [ip]
 80090a6:	b2a3      	uxth	r3, r4
 80090a8:	fa1f fa8a 	uxth.w	sl, sl
 80090ac:	fb0b a303 	mla	r3, fp, r3, sl
 80090b0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80090b4:	f8dc 4000 	ldr.w	r4, [ip]
 80090b8:	4443      	add	r3, r8
 80090ba:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80090be:	fb0b 840a 	mla	r4, fp, sl, r8
 80090c2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80090c6:	46e2      	mov	sl, ip
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80090ce:	454f      	cmp	r7, r9
 80090d0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80090d4:	f84a 3b04 	str.w	r3, [sl], #4
 80090d8:	d82b      	bhi.n	8009132 <__multiply+0x120>
 80090da:	f8cc 8004 	str.w	r8, [ip, #4]
 80090de:	9b01      	ldr	r3, [sp, #4]
 80090e0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80090e4:	3204      	adds	r2, #4
 80090e6:	f1ba 0f00 	cmp.w	sl, #0
 80090ea:	d020      	beq.n	800912e <__multiply+0x11c>
 80090ec:	682b      	ldr	r3, [r5, #0]
 80090ee:	4689      	mov	r9, r1
 80090f0:	46a8      	mov	r8, r5
 80090f2:	f04f 0b00 	mov.w	fp, #0
 80090f6:	f8b9 c000 	ldrh.w	ip, [r9]
 80090fa:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80090fe:	fb0a 440c 	mla	r4, sl, ip, r4
 8009102:	445c      	add	r4, fp
 8009104:	46c4      	mov	ip, r8
 8009106:	b29b      	uxth	r3, r3
 8009108:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800910c:	f84c 3b04 	str.w	r3, [ip], #4
 8009110:	f859 3b04 	ldr.w	r3, [r9], #4
 8009114:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009118:	0c1b      	lsrs	r3, r3, #16
 800911a:	fb0a b303 	mla	r3, sl, r3, fp
 800911e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009122:	454f      	cmp	r7, r9
 8009124:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009128:	d805      	bhi.n	8009136 <__multiply+0x124>
 800912a:	f8c8 3004 	str.w	r3, [r8, #4]
 800912e:	3504      	adds	r5, #4
 8009130:	e79b      	b.n	800906a <__multiply+0x58>
 8009132:	46d4      	mov	ip, sl
 8009134:	e7b3      	b.n	800909e <__multiply+0x8c>
 8009136:	46e0      	mov	r8, ip
 8009138:	e7dd      	b.n	80090f6 <__multiply+0xe4>
 800913a:	3e01      	subs	r6, #1
 800913c:	e799      	b.n	8009072 <__multiply+0x60>
	...

08009140 <__pow5mult>:
 8009140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009144:	4615      	mov	r5, r2
 8009146:	f012 0203 	ands.w	r2, r2, #3
 800914a:	4606      	mov	r6, r0
 800914c:	460f      	mov	r7, r1
 800914e:	d007      	beq.n	8009160 <__pow5mult+0x20>
 8009150:	3a01      	subs	r2, #1
 8009152:	4c21      	ldr	r4, [pc, #132]	; (80091d8 <__pow5mult+0x98>)
 8009154:	2300      	movs	r3, #0
 8009156:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800915a:	f7ff fec8 	bl	8008eee <__multadd>
 800915e:	4607      	mov	r7, r0
 8009160:	10ad      	asrs	r5, r5, #2
 8009162:	d035      	beq.n	80091d0 <__pow5mult+0x90>
 8009164:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009166:	b93c      	cbnz	r4, 8009178 <__pow5mult+0x38>
 8009168:	2010      	movs	r0, #16
 800916a:	f7fe fb9d 	bl	80078a8 <malloc>
 800916e:	6270      	str	r0, [r6, #36]	; 0x24
 8009170:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009174:	6004      	str	r4, [r0, #0]
 8009176:	60c4      	str	r4, [r0, #12]
 8009178:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800917c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009180:	b94c      	cbnz	r4, 8009196 <__pow5mult+0x56>
 8009182:	f240 2171 	movw	r1, #625	; 0x271
 8009186:	4630      	mov	r0, r6
 8009188:	f7ff ff3a 	bl	8009000 <__i2b>
 800918c:	2300      	movs	r3, #0
 800918e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009192:	4604      	mov	r4, r0
 8009194:	6003      	str	r3, [r0, #0]
 8009196:	f04f 0800 	mov.w	r8, #0
 800919a:	07eb      	lsls	r3, r5, #31
 800919c:	d50a      	bpl.n	80091b4 <__pow5mult+0x74>
 800919e:	4639      	mov	r1, r7
 80091a0:	4622      	mov	r2, r4
 80091a2:	4630      	mov	r0, r6
 80091a4:	f7ff ff35 	bl	8009012 <__multiply>
 80091a8:	4639      	mov	r1, r7
 80091aa:	4681      	mov	r9, r0
 80091ac:	4630      	mov	r0, r6
 80091ae:	f7ff fe87 	bl	8008ec0 <_Bfree>
 80091b2:	464f      	mov	r7, r9
 80091b4:	106d      	asrs	r5, r5, #1
 80091b6:	d00b      	beq.n	80091d0 <__pow5mult+0x90>
 80091b8:	6820      	ldr	r0, [r4, #0]
 80091ba:	b938      	cbnz	r0, 80091cc <__pow5mult+0x8c>
 80091bc:	4622      	mov	r2, r4
 80091be:	4621      	mov	r1, r4
 80091c0:	4630      	mov	r0, r6
 80091c2:	f7ff ff26 	bl	8009012 <__multiply>
 80091c6:	6020      	str	r0, [r4, #0]
 80091c8:	f8c0 8000 	str.w	r8, [r0]
 80091cc:	4604      	mov	r4, r0
 80091ce:	e7e4      	b.n	800919a <__pow5mult+0x5a>
 80091d0:	4638      	mov	r0, r7
 80091d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091d6:	bf00      	nop
 80091d8:	080098b8 	.word	0x080098b8

080091dc <__lshift>:
 80091dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091e0:	460c      	mov	r4, r1
 80091e2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80091e6:	6923      	ldr	r3, [r4, #16]
 80091e8:	6849      	ldr	r1, [r1, #4]
 80091ea:	eb0a 0903 	add.w	r9, sl, r3
 80091ee:	68a3      	ldr	r3, [r4, #8]
 80091f0:	4607      	mov	r7, r0
 80091f2:	4616      	mov	r6, r2
 80091f4:	f109 0501 	add.w	r5, r9, #1
 80091f8:	42ab      	cmp	r3, r5
 80091fa:	db32      	blt.n	8009262 <__lshift+0x86>
 80091fc:	4638      	mov	r0, r7
 80091fe:	f7ff fe2b 	bl	8008e58 <_Balloc>
 8009202:	2300      	movs	r3, #0
 8009204:	4680      	mov	r8, r0
 8009206:	f100 0114 	add.w	r1, r0, #20
 800920a:	461a      	mov	r2, r3
 800920c:	4553      	cmp	r3, sl
 800920e:	db2b      	blt.n	8009268 <__lshift+0x8c>
 8009210:	6920      	ldr	r0, [r4, #16]
 8009212:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009216:	f104 0314 	add.w	r3, r4, #20
 800921a:	f016 021f 	ands.w	r2, r6, #31
 800921e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009222:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009226:	d025      	beq.n	8009274 <__lshift+0x98>
 8009228:	f1c2 0e20 	rsb	lr, r2, #32
 800922c:	2000      	movs	r0, #0
 800922e:	681e      	ldr	r6, [r3, #0]
 8009230:	468a      	mov	sl, r1
 8009232:	4096      	lsls	r6, r2
 8009234:	4330      	orrs	r0, r6
 8009236:	f84a 0b04 	str.w	r0, [sl], #4
 800923a:	f853 0b04 	ldr.w	r0, [r3], #4
 800923e:	459c      	cmp	ip, r3
 8009240:	fa20 f00e 	lsr.w	r0, r0, lr
 8009244:	d814      	bhi.n	8009270 <__lshift+0x94>
 8009246:	6048      	str	r0, [r1, #4]
 8009248:	b108      	cbz	r0, 800924e <__lshift+0x72>
 800924a:	f109 0502 	add.w	r5, r9, #2
 800924e:	3d01      	subs	r5, #1
 8009250:	4638      	mov	r0, r7
 8009252:	f8c8 5010 	str.w	r5, [r8, #16]
 8009256:	4621      	mov	r1, r4
 8009258:	f7ff fe32 	bl	8008ec0 <_Bfree>
 800925c:	4640      	mov	r0, r8
 800925e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009262:	3101      	adds	r1, #1
 8009264:	005b      	lsls	r3, r3, #1
 8009266:	e7c7      	b.n	80091f8 <__lshift+0x1c>
 8009268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800926c:	3301      	adds	r3, #1
 800926e:	e7cd      	b.n	800920c <__lshift+0x30>
 8009270:	4651      	mov	r1, sl
 8009272:	e7dc      	b.n	800922e <__lshift+0x52>
 8009274:	3904      	subs	r1, #4
 8009276:	f853 2b04 	ldr.w	r2, [r3], #4
 800927a:	f841 2f04 	str.w	r2, [r1, #4]!
 800927e:	459c      	cmp	ip, r3
 8009280:	d8f9      	bhi.n	8009276 <__lshift+0x9a>
 8009282:	e7e4      	b.n	800924e <__lshift+0x72>

08009284 <__mcmp>:
 8009284:	6903      	ldr	r3, [r0, #16]
 8009286:	690a      	ldr	r2, [r1, #16]
 8009288:	1a9b      	subs	r3, r3, r2
 800928a:	b530      	push	{r4, r5, lr}
 800928c:	d10c      	bne.n	80092a8 <__mcmp+0x24>
 800928e:	0092      	lsls	r2, r2, #2
 8009290:	3014      	adds	r0, #20
 8009292:	3114      	adds	r1, #20
 8009294:	1884      	adds	r4, r0, r2
 8009296:	4411      	add	r1, r2
 8009298:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800929c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80092a0:	4295      	cmp	r5, r2
 80092a2:	d003      	beq.n	80092ac <__mcmp+0x28>
 80092a4:	d305      	bcc.n	80092b2 <__mcmp+0x2e>
 80092a6:	2301      	movs	r3, #1
 80092a8:	4618      	mov	r0, r3
 80092aa:	bd30      	pop	{r4, r5, pc}
 80092ac:	42a0      	cmp	r0, r4
 80092ae:	d3f3      	bcc.n	8009298 <__mcmp+0x14>
 80092b0:	e7fa      	b.n	80092a8 <__mcmp+0x24>
 80092b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092b6:	e7f7      	b.n	80092a8 <__mcmp+0x24>

080092b8 <__mdiff>:
 80092b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092bc:	460d      	mov	r5, r1
 80092be:	4607      	mov	r7, r0
 80092c0:	4611      	mov	r1, r2
 80092c2:	4628      	mov	r0, r5
 80092c4:	4614      	mov	r4, r2
 80092c6:	f7ff ffdd 	bl	8009284 <__mcmp>
 80092ca:	1e06      	subs	r6, r0, #0
 80092cc:	d108      	bne.n	80092e0 <__mdiff+0x28>
 80092ce:	4631      	mov	r1, r6
 80092d0:	4638      	mov	r0, r7
 80092d2:	f7ff fdc1 	bl	8008e58 <_Balloc>
 80092d6:	2301      	movs	r3, #1
 80092d8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80092dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092e0:	bfa4      	itt	ge
 80092e2:	4623      	movge	r3, r4
 80092e4:	462c      	movge	r4, r5
 80092e6:	4638      	mov	r0, r7
 80092e8:	6861      	ldr	r1, [r4, #4]
 80092ea:	bfa6      	itte	ge
 80092ec:	461d      	movge	r5, r3
 80092ee:	2600      	movge	r6, #0
 80092f0:	2601      	movlt	r6, #1
 80092f2:	f7ff fdb1 	bl	8008e58 <_Balloc>
 80092f6:	692b      	ldr	r3, [r5, #16]
 80092f8:	60c6      	str	r6, [r0, #12]
 80092fa:	6926      	ldr	r6, [r4, #16]
 80092fc:	f105 0914 	add.w	r9, r5, #20
 8009300:	f104 0214 	add.w	r2, r4, #20
 8009304:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009308:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800930c:	f100 0514 	add.w	r5, r0, #20
 8009310:	f04f 0e00 	mov.w	lr, #0
 8009314:	f852 ab04 	ldr.w	sl, [r2], #4
 8009318:	f859 4b04 	ldr.w	r4, [r9], #4
 800931c:	fa1e f18a 	uxtah	r1, lr, sl
 8009320:	b2a3      	uxth	r3, r4
 8009322:	1ac9      	subs	r1, r1, r3
 8009324:	0c23      	lsrs	r3, r4, #16
 8009326:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800932a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800932e:	b289      	uxth	r1, r1
 8009330:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009334:	45c8      	cmp	r8, r9
 8009336:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800933a:	4694      	mov	ip, r2
 800933c:	f845 3b04 	str.w	r3, [r5], #4
 8009340:	d8e8      	bhi.n	8009314 <__mdiff+0x5c>
 8009342:	45bc      	cmp	ip, r7
 8009344:	d304      	bcc.n	8009350 <__mdiff+0x98>
 8009346:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800934a:	b183      	cbz	r3, 800936e <__mdiff+0xb6>
 800934c:	6106      	str	r6, [r0, #16]
 800934e:	e7c5      	b.n	80092dc <__mdiff+0x24>
 8009350:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009354:	fa1e f381 	uxtah	r3, lr, r1
 8009358:	141a      	asrs	r2, r3, #16
 800935a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800935e:	b29b      	uxth	r3, r3
 8009360:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009364:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009368:	f845 3b04 	str.w	r3, [r5], #4
 800936c:	e7e9      	b.n	8009342 <__mdiff+0x8a>
 800936e:	3e01      	subs	r6, #1
 8009370:	e7e9      	b.n	8009346 <__mdiff+0x8e>

08009372 <__d2b>:
 8009372:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009376:	460e      	mov	r6, r1
 8009378:	2101      	movs	r1, #1
 800937a:	ec59 8b10 	vmov	r8, r9, d0
 800937e:	4615      	mov	r5, r2
 8009380:	f7ff fd6a 	bl	8008e58 <_Balloc>
 8009384:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009388:	4607      	mov	r7, r0
 800938a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800938e:	bb34      	cbnz	r4, 80093de <__d2b+0x6c>
 8009390:	9301      	str	r3, [sp, #4]
 8009392:	f1b8 0300 	subs.w	r3, r8, #0
 8009396:	d027      	beq.n	80093e8 <__d2b+0x76>
 8009398:	a802      	add	r0, sp, #8
 800939a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800939e:	f7ff fe00 	bl	8008fa2 <__lo0bits>
 80093a2:	9900      	ldr	r1, [sp, #0]
 80093a4:	b1f0      	cbz	r0, 80093e4 <__d2b+0x72>
 80093a6:	9a01      	ldr	r2, [sp, #4]
 80093a8:	f1c0 0320 	rsb	r3, r0, #32
 80093ac:	fa02 f303 	lsl.w	r3, r2, r3
 80093b0:	430b      	orrs	r3, r1
 80093b2:	40c2      	lsrs	r2, r0
 80093b4:	617b      	str	r3, [r7, #20]
 80093b6:	9201      	str	r2, [sp, #4]
 80093b8:	9b01      	ldr	r3, [sp, #4]
 80093ba:	61bb      	str	r3, [r7, #24]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	bf14      	ite	ne
 80093c0:	2102      	movne	r1, #2
 80093c2:	2101      	moveq	r1, #1
 80093c4:	6139      	str	r1, [r7, #16]
 80093c6:	b1c4      	cbz	r4, 80093fa <__d2b+0x88>
 80093c8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80093cc:	4404      	add	r4, r0
 80093ce:	6034      	str	r4, [r6, #0]
 80093d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80093d4:	6028      	str	r0, [r5, #0]
 80093d6:	4638      	mov	r0, r7
 80093d8:	b003      	add	sp, #12
 80093da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093e2:	e7d5      	b.n	8009390 <__d2b+0x1e>
 80093e4:	6179      	str	r1, [r7, #20]
 80093e6:	e7e7      	b.n	80093b8 <__d2b+0x46>
 80093e8:	a801      	add	r0, sp, #4
 80093ea:	f7ff fdda 	bl	8008fa2 <__lo0bits>
 80093ee:	9b01      	ldr	r3, [sp, #4]
 80093f0:	617b      	str	r3, [r7, #20]
 80093f2:	2101      	movs	r1, #1
 80093f4:	6139      	str	r1, [r7, #16]
 80093f6:	3020      	adds	r0, #32
 80093f8:	e7e5      	b.n	80093c6 <__d2b+0x54>
 80093fa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80093fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009402:	6030      	str	r0, [r6, #0]
 8009404:	6918      	ldr	r0, [r3, #16]
 8009406:	f7ff fdad 	bl	8008f64 <__hi0bits>
 800940a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800940e:	e7e1      	b.n	80093d4 <__d2b+0x62>

08009410 <_calloc_r>:
 8009410:	b538      	push	{r3, r4, r5, lr}
 8009412:	fb02 f401 	mul.w	r4, r2, r1
 8009416:	4621      	mov	r1, r4
 8009418:	f7fe fad0 	bl	80079bc <_malloc_r>
 800941c:	4605      	mov	r5, r0
 800941e:	b118      	cbz	r0, 8009428 <_calloc_r+0x18>
 8009420:	4622      	mov	r2, r4
 8009422:	2100      	movs	r1, #0
 8009424:	f7fe fa74 	bl	8007910 <memset>
 8009428:	4628      	mov	r0, r5
 800942a:	bd38      	pop	{r3, r4, r5, pc}

0800942c <__ascii_mbtowc>:
 800942c:	b082      	sub	sp, #8
 800942e:	b901      	cbnz	r1, 8009432 <__ascii_mbtowc+0x6>
 8009430:	a901      	add	r1, sp, #4
 8009432:	b142      	cbz	r2, 8009446 <__ascii_mbtowc+0x1a>
 8009434:	b14b      	cbz	r3, 800944a <__ascii_mbtowc+0x1e>
 8009436:	7813      	ldrb	r3, [r2, #0]
 8009438:	600b      	str	r3, [r1, #0]
 800943a:	7812      	ldrb	r2, [r2, #0]
 800943c:	1c10      	adds	r0, r2, #0
 800943e:	bf18      	it	ne
 8009440:	2001      	movne	r0, #1
 8009442:	b002      	add	sp, #8
 8009444:	4770      	bx	lr
 8009446:	4610      	mov	r0, r2
 8009448:	e7fb      	b.n	8009442 <__ascii_mbtowc+0x16>
 800944a:	f06f 0001 	mvn.w	r0, #1
 800944e:	e7f8      	b.n	8009442 <__ascii_mbtowc+0x16>

08009450 <__ascii_wctomb>:
 8009450:	b149      	cbz	r1, 8009466 <__ascii_wctomb+0x16>
 8009452:	2aff      	cmp	r2, #255	; 0xff
 8009454:	bf85      	ittet	hi
 8009456:	238a      	movhi	r3, #138	; 0x8a
 8009458:	6003      	strhi	r3, [r0, #0]
 800945a:	700a      	strbls	r2, [r1, #0]
 800945c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009460:	bf98      	it	ls
 8009462:	2001      	movls	r0, #1
 8009464:	4770      	bx	lr
 8009466:	4608      	mov	r0, r1
 8009468:	4770      	bx	lr
	...

0800946c <_init>:
 800946c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946e:	bf00      	nop
 8009470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009472:	bc08      	pop	{r3}
 8009474:	469e      	mov	lr, r3
 8009476:	4770      	bx	lr

08009478 <_fini>:
 8009478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800947a:	bf00      	nop
 800947c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800947e:	bc08      	pop	{r3}
 8009480:	469e      	mov	lr, r3
 8009482:	4770      	bx	lr
