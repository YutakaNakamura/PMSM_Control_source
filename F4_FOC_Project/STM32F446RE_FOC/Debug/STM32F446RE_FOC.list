
STM32F446RE_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064b4  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08006680  08006680  00016680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068a0  080068a0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080068a0  080068a0  000168a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068a8  080068a8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068a8  080068a8  000168a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068ac  080068ac  000168ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080068b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000070  08006920  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08006920  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015930  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003783  00000000  00000000  000359d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fe8  00000000  00000000  00039158  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e60  00000000  00000000  0003a140  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026a45  00000000  00000000  0003afa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ea2b  00000000  00000000  000619e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eccd5  00000000  00000000  00070410  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015d0e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049a8  00000000  00000000  0015d160  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006664 	.word	0x08006664

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	08006664 	.word	0x08006664

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bb8:	f000 b972 	b.w	8000ea0 <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9e08      	ldr	r6, [sp, #32]
 8000bda:	4604      	mov	r4, r0
 8000bdc:	4688      	mov	r8, r1
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d14b      	bne.n	8000c7a <__udivmoddi4+0xa6>
 8000be2:	428a      	cmp	r2, r1
 8000be4:	4615      	mov	r5, r2
 8000be6:	d967      	bls.n	8000cb8 <__udivmoddi4+0xe4>
 8000be8:	fab2 f282 	clz	r2, r2
 8000bec:	b14a      	cbz	r2, 8000c02 <__udivmoddi4+0x2e>
 8000bee:	f1c2 0720 	rsb	r7, r2, #32
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfa:	4095      	lsls	r5, r2
 8000bfc:	ea47 0803 	orr.w	r8, r7, r3
 8000c00:	4094      	lsls	r4, r2
 8000c02:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c06:	0c23      	lsrs	r3, r4, #16
 8000c08:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c0c:	fa1f fc85 	uxth.w	ip, r5
 8000c10:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c14:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c18:	fb07 f10c 	mul.w	r1, r7, ip
 8000c1c:	4299      	cmp	r1, r3
 8000c1e:	d909      	bls.n	8000c34 <__udivmoddi4+0x60>
 8000c20:	18eb      	adds	r3, r5, r3
 8000c22:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c26:	f080 811b 	bcs.w	8000e60 <__udivmoddi4+0x28c>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 8118 	bls.w	8000e60 <__udivmoddi4+0x28c>
 8000c30:	3f02      	subs	r7, #2
 8000c32:	442b      	add	r3, r5
 8000c34:	1a5b      	subs	r3, r3, r1
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c44:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c48:	45a4      	cmp	ip, r4
 8000c4a:	d909      	bls.n	8000c60 <__udivmoddi4+0x8c>
 8000c4c:	192c      	adds	r4, r5, r4
 8000c4e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c52:	f080 8107 	bcs.w	8000e64 <__udivmoddi4+0x290>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	f240 8104 	bls.w	8000e64 <__udivmoddi4+0x290>
 8000c5c:	3802      	subs	r0, #2
 8000c5e:	442c      	add	r4, r5
 8000c60:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c64:	eba4 040c 	sub.w	r4, r4, ip
 8000c68:	2700      	movs	r7, #0
 8000c6a:	b11e      	cbz	r6, 8000c74 <__udivmoddi4+0xa0>
 8000c6c:	40d4      	lsrs	r4, r2
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e9c6 4300 	strd	r4, r3, [r6]
 8000c74:	4639      	mov	r1, r7
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d909      	bls.n	8000c92 <__udivmoddi4+0xbe>
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	f000 80eb 	beq.w	8000e5a <__udivmoddi4+0x286>
 8000c84:	2700      	movs	r7, #0
 8000c86:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8a:	4638      	mov	r0, r7
 8000c8c:	4639      	mov	r1, r7
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	fab3 f783 	clz	r7, r3
 8000c96:	2f00      	cmp	r7, #0
 8000c98:	d147      	bne.n	8000d2a <__udivmoddi4+0x156>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xd0>
 8000c9e:	4282      	cmp	r2, r0
 8000ca0:	f200 80fa 	bhi.w	8000e98 <__udivmoddi4+0x2c4>
 8000ca4:	1a84      	subs	r4, r0, r2
 8000ca6:	eb61 0303 	sbc.w	r3, r1, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	4698      	mov	r8, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d0e0      	beq.n	8000c74 <__udivmoddi4+0xa0>
 8000cb2:	e9c6 4800 	strd	r4, r8, [r6]
 8000cb6:	e7dd      	b.n	8000c74 <__udivmoddi4+0xa0>
 8000cb8:	b902      	cbnz	r2, 8000cbc <__udivmoddi4+0xe8>
 8000cba:	deff      	udf	#255	; 0xff
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	2a00      	cmp	r2, #0
 8000cc2:	f040 808f 	bne.w	8000de4 <__udivmoddi4+0x210>
 8000cc6:	1b49      	subs	r1, r1, r5
 8000cc8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ccc:	fa1f f885 	uxth.w	r8, r5
 8000cd0:	2701      	movs	r7, #1
 8000cd2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cd6:	0c23      	lsrs	r3, r4, #16
 8000cd8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0x124>
 8000ce8:	18eb      	adds	r3, r5, r3
 8000cea:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x122>
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	f200 80cd 	bhi.w	8000e90 <__udivmoddi4+0x2bc>
 8000cf6:	4684      	mov	ip, r0
 8000cf8:	1a59      	subs	r1, r3, r1
 8000cfa:	b2a3      	uxth	r3, r4
 8000cfc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d00:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d04:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d08:	fb08 f800 	mul.w	r8, r8, r0
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0x14c>
 8000d10:	192c      	adds	r4, r5, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x14a>
 8000d18:	45a0      	cmp	r8, r4
 8000d1a:	f200 80b6 	bhi.w	8000e8a <__udivmoddi4+0x2b6>
 8000d1e:	4618      	mov	r0, r3
 8000d20:	eba4 0408 	sub.w	r4, r4, r8
 8000d24:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d28:	e79f      	b.n	8000c6a <__udivmoddi4+0x96>
 8000d2a:	f1c7 0c20 	rsb	ip, r7, #32
 8000d2e:	40bb      	lsls	r3, r7
 8000d30:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d34:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d38:	fa01 f407 	lsl.w	r4, r1, r7
 8000d3c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d40:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d44:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d48:	4325      	orrs	r5, r4
 8000d4a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d4e:	0c2c      	lsrs	r4, r5, #16
 8000d50:	fb08 3319 	mls	r3, r8, r9, r3
 8000d54:	fa1f fa8e 	uxth.w	sl, lr
 8000d58:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d5c:	fb09 f40a 	mul.w	r4, r9, sl
 8000d60:	429c      	cmp	r4, r3
 8000d62:	fa02 f207 	lsl.w	r2, r2, r7
 8000d66:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6a:	d90b      	bls.n	8000d84 <__udivmoddi4+0x1b0>
 8000d6c:	eb1e 0303 	adds.w	r3, lr, r3
 8000d70:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d74:	f080 8087 	bcs.w	8000e86 <__udivmoddi4+0x2b2>
 8000d78:	429c      	cmp	r4, r3
 8000d7a:	f240 8084 	bls.w	8000e86 <__udivmoddi4+0x2b2>
 8000d7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d82:	4473      	add	r3, lr
 8000d84:	1b1b      	subs	r3, r3, r4
 8000d86:	b2ad      	uxth	r5, r5
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d94:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d98:	45a2      	cmp	sl, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x1da>
 8000d9c:	eb1e 0404 	adds.w	r4, lr, r4
 8000da0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da4:	d26b      	bcs.n	8000e7e <__udivmoddi4+0x2aa>
 8000da6:	45a2      	cmp	sl, r4
 8000da8:	d969      	bls.n	8000e7e <__udivmoddi4+0x2aa>
 8000daa:	3802      	subs	r0, #2
 8000dac:	4474      	add	r4, lr
 8000dae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db2:	fba0 8902 	umull	r8, r9, r0, r2
 8000db6:	eba4 040a 	sub.w	r4, r4, sl
 8000dba:	454c      	cmp	r4, r9
 8000dbc:	46c2      	mov	sl, r8
 8000dbe:	464b      	mov	r3, r9
 8000dc0:	d354      	bcc.n	8000e6c <__udivmoddi4+0x298>
 8000dc2:	d051      	beq.n	8000e68 <__udivmoddi4+0x294>
 8000dc4:	2e00      	cmp	r6, #0
 8000dc6:	d069      	beq.n	8000e9c <__udivmoddi4+0x2c8>
 8000dc8:	ebb1 050a 	subs.w	r5, r1, sl
 8000dcc:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd4:	40fd      	lsrs	r5, r7
 8000dd6:	40fc      	lsrs	r4, r7
 8000dd8:	ea4c 0505 	orr.w	r5, ip, r5
 8000ddc:	e9c6 5400 	strd	r5, r4, [r6]
 8000de0:	2700      	movs	r7, #0
 8000de2:	e747      	b.n	8000c74 <__udivmoddi4+0xa0>
 8000de4:	f1c2 0320 	rsb	r3, r2, #32
 8000de8:	fa20 f703 	lsr.w	r7, r0, r3
 8000dec:	4095      	lsls	r5, r2
 8000dee:	fa01 f002 	lsl.w	r0, r1, r2
 8000df2:	fa21 f303 	lsr.w	r3, r1, r3
 8000df6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfa:	4338      	orrs	r0, r7
 8000dfc:	0c01      	lsrs	r1, r0, #16
 8000dfe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e02:	fa1f f885 	uxth.w	r8, r5
 8000e06:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0e:	fb07 f308 	mul.w	r3, r7, r8
 8000e12:	428b      	cmp	r3, r1
 8000e14:	fa04 f402 	lsl.w	r4, r4, r2
 8000e18:	d907      	bls.n	8000e2a <__udivmoddi4+0x256>
 8000e1a:	1869      	adds	r1, r5, r1
 8000e1c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e20:	d22f      	bcs.n	8000e82 <__udivmoddi4+0x2ae>
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d92d      	bls.n	8000e82 <__udivmoddi4+0x2ae>
 8000e26:	3f02      	subs	r7, #2
 8000e28:	4429      	add	r1, r5
 8000e2a:	1acb      	subs	r3, r1, r3
 8000e2c:	b281      	uxth	r1, r0
 8000e2e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e32:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e36:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3a:	fb00 f308 	mul.w	r3, r0, r8
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x27e>
 8000e42:	1869      	adds	r1, r5, r1
 8000e44:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e48:	d217      	bcs.n	8000e7a <__udivmoddi4+0x2a6>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d915      	bls.n	8000e7a <__udivmoddi4+0x2a6>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4429      	add	r1, r5
 8000e52:	1ac9      	subs	r1, r1, r3
 8000e54:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e58:	e73b      	b.n	8000cd2 <__udivmoddi4+0xfe>
 8000e5a:	4637      	mov	r7, r6
 8000e5c:	4630      	mov	r0, r6
 8000e5e:	e709      	b.n	8000c74 <__udivmoddi4+0xa0>
 8000e60:	4607      	mov	r7, r0
 8000e62:	e6e7      	b.n	8000c34 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fb      	b.n	8000c60 <__udivmoddi4+0x8c>
 8000e68:	4541      	cmp	r1, r8
 8000e6a:	d2ab      	bcs.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e6c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e70:	eb69 020e 	sbc.w	r2, r9, lr
 8000e74:	3801      	subs	r0, #1
 8000e76:	4613      	mov	r3, r2
 8000e78:	e7a4      	b.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e7a:	4660      	mov	r0, ip
 8000e7c:	e7e9      	b.n	8000e52 <__udivmoddi4+0x27e>
 8000e7e:	4618      	mov	r0, r3
 8000e80:	e795      	b.n	8000dae <__udivmoddi4+0x1da>
 8000e82:	4667      	mov	r7, ip
 8000e84:	e7d1      	b.n	8000e2a <__udivmoddi4+0x256>
 8000e86:	4681      	mov	r9, r0
 8000e88:	e77c      	b.n	8000d84 <__udivmoddi4+0x1b0>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	442c      	add	r4, r5
 8000e8e:	e747      	b.n	8000d20 <__udivmoddi4+0x14c>
 8000e90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e94:	442b      	add	r3, r5
 8000e96:	e72f      	b.n	8000cf8 <__udivmoddi4+0x124>
 8000e98:	4638      	mov	r0, r7
 8000e9a:	e708      	b.n	8000cae <__udivmoddi4+0xda>
 8000e9c:	4637      	mov	r7, r6
 8000e9e:	e6e9      	b.n	8000c74 <__udivmoddi4+0xa0>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <HAL_Init+0x40>)
 8000eae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <HAL_Init+0x40>)
 8000eba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a07      	ldr	r2, [pc, #28]	; (8000ee4 <HAL_Init+0x40>)
 8000ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ecc:	2003      	movs	r0, #3
 8000ece:	f000 f92f 	bl	8001130 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed2:	2004      	movs	r0, #4
 8000ed4:	f000 f808 	bl	8000ee8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed8:	f003 fbc8 	bl	800466c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40023c00 	.word	0x40023c00

08000ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_InitTick+0x54>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_InitTick+0x58>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 f939 	bl	800117e <HAL_SYSTICK_Config>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00e      	b.n	8000f34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b0f      	cmp	r3, #15
 8000f1a:	d80a      	bhi.n	8000f32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f24:	f000 f90f 	bl	8001146 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f28:	4a06      	ldr	r2, [pc, #24]	; (8000f44 <HAL_InitTick+0x5c>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e000      	b.n	8000f34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	20000004 	.word	0x20000004
 8000f44:	20000000 	.word	0x20000000

08000f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_IncTick+0x20>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x24>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4413      	add	r3, r2
 8000f58:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <HAL_IncTick+0x24>)
 8000f5a:	6013      	str	r3, [r2, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20000004 	.word	0x20000004
 8000f6c:	200000a4 	.word	0x200000a4

08000f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return uwTick;
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <HAL_GetTick+0x14>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	200000a4 	.word	0x200000a4

08000f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f90:	f7ff ffee 	bl	8000f70 <HAL_GetTick>
 8000f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fa0:	d005      	beq.n	8000fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <HAL_Delay+0x40>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4413      	add	r3, r2
 8000fac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fae:	bf00      	nop
 8000fb0:	f7ff ffde 	bl	8000f70 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d8f7      	bhi.n	8000fb0 <HAL_Delay+0x28>
  {
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000004 	.word	0x20000004

08000fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <__NVIC_GetPriorityGrouping+0x18>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	f003 0307 	and.w	r3, r3, #7
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	db0a      	blt.n	800105a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	b2da      	uxtb	r2, r3
 8001048:	490c      	ldr	r1, [pc, #48]	; (800107c <__NVIC_SetPriority+0x4c>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	0112      	lsls	r2, r2, #4
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	440b      	add	r3, r1
 8001054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001058:	e00a      	b.n	8001070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4908      	ldr	r1, [pc, #32]	; (8001080 <__NVIC_SetPriority+0x50>)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	3b04      	subs	r3, #4
 8001068:	0112      	lsls	r2, r2, #4
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	440b      	add	r3, r1
 800106e:	761a      	strb	r2, [r3, #24]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000e100 	.word	0xe000e100
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001084:	b480      	push	{r7}
 8001086:	b089      	sub	sp, #36	; 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f1c3 0307 	rsb	r3, r3, #7
 800109e:	2b04      	cmp	r3, #4
 80010a0:	bf28      	it	cs
 80010a2:	2304      	movcs	r3, #4
 80010a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3304      	adds	r3, #4
 80010aa:	2b06      	cmp	r3, #6
 80010ac:	d902      	bls.n	80010b4 <NVIC_EncodePriority+0x30>
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3b03      	subs	r3, #3
 80010b2:	e000      	b.n	80010b6 <NVIC_EncodePriority+0x32>
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43da      	mvns	r2, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	401a      	ands	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	43d9      	mvns	r1, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	4313      	orrs	r3, r2
         );
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3724      	adds	r7, #36	; 0x24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010fc:	d301      	bcc.n	8001102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fe:	2301      	movs	r3, #1
 8001100:	e00f      	b.n	8001122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <SysTick_Config+0x40>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800110a:	210f      	movs	r1, #15
 800110c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001110:	f7ff ff8e 	bl	8001030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <SysTick_Config+0x40>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111a:	4b04      	ldr	r3, [pc, #16]	; (800112c <SysTick_Config+0x40>)
 800111c:	2207      	movs	r2, #7
 800111e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	e000e010 	.word	0xe000e010

08001130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff47 	bl	8000fcc <__NVIC_SetPriorityGrouping>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af00      	add	r7, sp, #0
 800114c:	4603      	mov	r3, r0
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
 8001152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001158:	f7ff ff5c 	bl	8001014 <__NVIC_GetPriorityGrouping>
 800115c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	6978      	ldr	r0, [r7, #20]
 8001164:	f7ff ff8e 	bl	8001084 <NVIC_EncodePriority>
 8001168:	4602      	mov	r2, r0
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff5d 	bl	8001030 <__NVIC_SetPriority>
}
 8001176:	bf00      	nop
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ffb0 	bl	80010ec <SysTick_Config>
 800118c:	4603      	mov	r3, r0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
 80011b2:	e165      	b.n	8001480 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011b4:	2201      	movs	r2, #1
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	f040 8154 	bne.w	800147a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0x4a>
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b12      	cmp	r3, #18
 80011e0:	d123      	bne.n	800122a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	08da      	lsrs	r2, r3, #3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3208      	adds	r2, #8
 80011ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	220f      	movs	r2, #15
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	691a      	ldr	r2, [r3, #16]
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	f003 0307 	and.w	r3, r3, #7
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	08da      	lsrs	r2, r3, #3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3208      	adds	r2, #8
 8001224:	69b9      	ldr	r1, [r7, #24]
 8001226:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	2203      	movs	r2, #3
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0203 	and.w	r2, r3, #3
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d00b      	beq.n	800127e <HAL_GPIO_Init+0xe6>
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b02      	cmp	r3, #2
 800126c:	d007      	beq.n	800127e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001272:	2b11      	cmp	r3, #17
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b12      	cmp	r3, #18
 800127c:	d130      	bne.n	80012e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	2203      	movs	r2, #3
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	68da      	ldr	r2, [r3, #12]
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012b4:	2201      	movs	r2, #1
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	091b      	lsrs	r3, r3, #4
 80012ca:	f003 0201 	and.w	r2, r3, #1
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	2203      	movs	r2, #3
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001318:	2b00      	cmp	r3, #0
 800131a:	f000 80ae 	beq.w	800147a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b5c      	ldr	r3, [pc, #368]	; (8001494 <HAL_GPIO_Init+0x2fc>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	4a5b      	ldr	r2, [pc, #364]	; (8001494 <HAL_GPIO_Init+0x2fc>)
 8001328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800132c:	6453      	str	r3, [r2, #68]	; 0x44
 800132e:	4b59      	ldr	r3, [pc, #356]	; (8001494 <HAL_GPIO_Init+0x2fc>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800133a:	4a57      	ldr	r2, [pc, #348]	; (8001498 <HAL_GPIO_Init+0x300>)
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	089b      	lsrs	r3, r3, #2
 8001340:	3302      	adds	r3, #2
 8001342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	220f      	movs	r2, #15
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a4e      	ldr	r2, [pc, #312]	; (800149c <HAL_GPIO_Init+0x304>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d025      	beq.n	80013b2 <HAL_GPIO_Init+0x21a>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4d      	ldr	r2, [pc, #308]	; (80014a0 <HAL_GPIO_Init+0x308>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d01f      	beq.n	80013ae <HAL_GPIO_Init+0x216>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4c      	ldr	r2, [pc, #304]	; (80014a4 <HAL_GPIO_Init+0x30c>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d019      	beq.n	80013aa <HAL_GPIO_Init+0x212>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4b      	ldr	r2, [pc, #300]	; (80014a8 <HAL_GPIO_Init+0x310>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d013      	beq.n	80013a6 <HAL_GPIO_Init+0x20e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a4a      	ldr	r2, [pc, #296]	; (80014ac <HAL_GPIO_Init+0x314>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d00d      	beq.n	80013a2 <HAL_GPIO_Init+0x20a>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a49      	ldr	r2, [pc, #292]	; (80014b0 <HAL_GPIO_Init+0x318>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d007      	beq.n	800139e <HAL_GPIO_Init+0x206>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a48      	ldr	r2, [pc, #288]	; (80014b4 <HAL_GPIO_Init+0x31c>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d101      	bne.n	800139a <HAL_GPIO_Init+0x202>
 8001396:	2306      	movs	r3, #6
 8001398:	e00c      	b.n	80013b4 <HAL_GPIO_Init+0x21c>
 800139a:	2307      	movs	r3, #7
 800139c:	e00a      	b.n	80013b4 <HAL_GPIO_Init+0x21c>
 800139e:	2305      	movs	r3, #5
 80013a0:	e008      	b.n	80013b4 <HAL_GPIO_Init+0x21c>
 80013a2:	2304      	movs	r3, #4
 80013a4:	e006      	b.n	80013b4 <HAL_GPIO_Init+0x21c>
 80013a6:	2303      	movs	r3, #3
 80013a8:	e004      	b.n	80013b4 <HAL_GPIO_Init+0x21c>
 80013aa:	2302      	movs	r3, #2
 80013ac:	e002      	b.n	80013b4 <HAL_GPIO_Init+0x21c>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <HAL_GPIO_Init+0x21c>
 80013b2:	2300      	movs	r3, #0
 80013b4:	69fa      	ldr	r2, [r7, #28]
 80013b6:	f002 0203 	and.w	r2, r2, #3
 80013ba:	0092      	lsls	r2, r2, #2
 80013bc:	4093      	lsls	r3, r2
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013c4:	4934      	ldr	r1, [pc, #208]	; (8001498 <HAL_GPIO_Init+0x300>)
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	3302      	adds	r3, #2
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d2:	4b39      	ldr	r3, [pc, #228]	; (80014b8 <HAL_GPIO_Init+0x320>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013f6:	4a30      	ldr	r2, [pc, #192]	; (80014b8 <HAL_GPIO_Init+0x320>)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013fc:	4b2e      	ldr	r3, [pc, #184]	; (80014b8 <HAL_GPIO_Init+0x320>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001420:	4a25      	ldr	r2, [pc, #148]	; (80014b8 <HAL_GPIO_Init+0x320>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001426:	4b24      	ldr	r3, [pc, #144]	; (80014b8 <HAL_GPIO_Init+0x320>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800144a:	4a1b      	ldr	r2, [pc, #108]	; (80014b8 <HAL_GPIO_Init+0x320>)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001450:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <HAL_GPIO_Init+0x320>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001474:	4a10      	ldr	r2, [pc, #64]	; (80014b8 <HAL_GPIO_Init+0x320>)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3301      	adds	r3, #1
 800147e:	61fb      	str	r3, [r7, #28]
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	2b0f      	cmp	r3, #15
 8001484:	f67f ae96 	bls.w	80011b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001488:	bf00      	nop
 800148a:	3724      	adds	r7, #36	; 0x24
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	40023800 	.word	0x40023800
 8001498:	40013800 	.word	0x40013800
 800149c:	40020000 	.word	0x40020000
 80014a0:	40020400 	.word	0x40020400
 80014a4:	40020800 	.word	0x40020800
 80014a8:	40020c00 	.word	0x40020c00
 80014ac:	40021000 	.word	0x40021000
 80014b0:	40021400 	.word	0x40021400
 80014b4:	40021800 	.word	0x40021800
 80014b8:	40013c00 	.word	0x40013c00

080014bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	4b20      	ldr	r3, [pc, #128]	; (800154c <HAL_PWREx_EnableOverDrive+0x90>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a1f      	ldr	r2, [pc, #124]	; (800154c <HAL_PWREx_EnableOverDrive+0x90>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <HAL_PWREx_EnableOverDrive+0x90>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80014e2:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <HAL_PWREx_EnableOverDrive+0x94>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014e8:	f7ff fd42 	bl	8000f70 <HAL_GetTick>
 80014ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014ee:	e009      	b.n	8001504 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014f0:	f7ff fd3e 	bl	8000f70 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014fe:	d901      	bls.n	8001504 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e01f      	b.n	8001544 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <HAL_PWREx_EnableOverDrive+0x98>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001510:	d1ee      	bne.n	80014f0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001514:	2201      	movs	r2, #1
 8001516:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001518:	f7ff fd2a 	bl	8000f70 <HAL_GetTick>
 800151c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800151e:	e009      	b.n	8001534 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001520:	f7ff fd26 	bl	8000f70 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800152e:	d901      	bls.n	8001534 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e007      	b.n	8001544 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001534:	4b07      	ldr	r3, [pc, #28]	; (8001554 <HAL_PWREx_EnableOverDrive+0x98>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001540:	d1ee      	bne.n	8001520 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40023800 	.word	0x40023800
 8001550:	420e0040 	.word	0x420e0040
 8001554:	40007000 	.word	0x40007000
 8001558:	420e0044 	.word	0x420e0044

0800155c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e0ca      	b.n	8001706 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001570:	4b67      	ldr	r3, [pc, #412]	; (8001710 <HAL_RCC_ClockConfig+0x1b4>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 030f 	and.w	r3, r3, #15
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d90c      	bls.n	8001598 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157e:	4b64      	ldr	r3, [pc, #400]	; (8001710 <HAL_RCC_ClockConfig+0x1b4>)
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001586:	4b62      	ldr	r3, [pc, #392]	; (8001710 <HAL_RCC_ClockConfig+0x1b4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	d001      	beq.n	8001598 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0b6      	b.n	8001706 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d020      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d005      	beq.n	80015bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015b0:	4b58      	ldr	r3, [pc, #352]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	4a57      	ldr	r2, [pc, #348]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 80015b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d005      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015c8:	4b52      	ldr	r3, [pc, #328]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	4a51      	ldr	r2, [pc, #324]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 80015ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d4:	4b4f      	ldr	r3, [pc, #316]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	494c      	ldr	r1, [pc, #304]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d044      	beq.n	800167c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d107      	bne.n	800160a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fa:	4b46      	ldr	r3, [pc, #280]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d119      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e07d      	b.n	8001706 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b02      	cmp	r3, #2
 8001610:	d003      	beq.n	800161a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001616:	2b03      	cmp	r3, #3
 8001618:	d107      	bne.n	800162a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161a:	4b3e      	ldr	r3, [pc, #248]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d109      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e06d      	b.n	8001706 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162a:	4b3a      	ldr	r3, [pc, #232]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e065      	b.n	8001706 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800163a:	4b36      	ldr	r3, [pc, #216]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f023 0203 	bic.w	r2, r3, #3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	4933      	ldr	r1, [pc, #204]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 8001648:	4313      	orrs	r3, r2
 800164a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800164c:	f7ff fc90 	bl	8000f70 <HAL_GetTick>
 8001650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001652:	e00a      	b.n	800166a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001654:	f7ff fc8c 	bl	8000f70 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001662:	4293      	cmp	r3, r2
 8001664:	d901      	bls.n	800166a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e04d      	b.n	8001706 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166a:	4b2a      	ldr	r3, [pc, #168]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 020c 	and.w	r2, r3, #12
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	429a      	cmp	r2, r3
 800167a:	d1eb      	bne.n	8001654 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800167c:	4b24      	ldr	r3, [pc, #144]	; (8001710 <HAL_RCC_ClockConfig+0x1b4>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 030f 	and.w	r3, r3, #15
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d20c      	bcs.n	80016a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168a:	4b21      	ldr	r3, [pc, #132]	; (8001710 <HAL_RCC_ClockConfig+0x1b4>)
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001692:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <HAL_RCC_ClockConfig+0x1b4>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	d001      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e030      	b.n	8001706 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d008      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016b0:	4b18      	ldr	r3, [pc, #96]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	4915      	ldr	r1, [pc, #84]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d009      	beq.n	80016e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ce:	4b11      	ldr	r3, [pc, #68]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	490d      	ldr	r1, [pc, #52]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016e2:	f000 f851 	bl	8001788 <HAL_RCC_GetSysClockFreq>
 80016e6:	4601      	mov	r1, r0
 80016e8:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	091b      	lsrs	r3, r3, #4
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	4a09      	ldr	r2, [pc, #36]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80016f4:	5cd3      	ldrb	r3, [r2, r3]
 80016f6:	fa21 f303 	lsr.w	r3, r1, r3
 80016fa:	4a08      	ldr	r2, [pc, #32]	; (800171c <HAL_RCC_ClockConfig+0x1c0>)
 80016fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80016fe:	2004      	movs	r0, #4
 8001700:	f7ff fbf2 	bl	8000ee8 <HAL_InitTick>

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40023c00 	.word	0x40023c00
 8001714:	40023800 	.word	0x40023800
 8001718:	0800669c 	.word	0x0800669c
 800171c:	20000008 	.word	0x20000008

08001720 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001724:	4b03      	ldr	r3, [pc, #12]	; (8001734 <HAL_RCC_GetHCLKFreq+0x14>)
 8001726:	681b      	ldr	r3, [r3, #0]
}
 8001728:	4618      	mov	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20000008 	.word	0x20000008

08001738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800173c:	f7ff fff0 	bl	8001720 <HAL_RCC_GetHCLKFreq>
 8001740:	4601      	mov	r1, r0
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	0a9b      	lsrs	r3, r3, #10
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	4a03      	ldr	r2, [pc, #12]	; (800175c <HAL_RCC_GetPCLK1Freq+0x24>)
 800174e:	5cd3      	ldrb	r3, [r2, r3]
 8001750:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001754:	4618      	mov	r0, r3
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40023800 	.word	0x40023800
 800175c:	080066ac 	.word	0x080066ac

08001760 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001764:	f7ff ffdc 	bl	8001720 <HAL_RCC_GetHCLKFreq>
 8001768:	4601      	mov	r1, r0
 800176a:	4b05      	ldr	r3, [pc, #20]	; (8001780 <HAL_RCC_GetPCLK2Freq+0x20>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	0b5b      	lsrs	r3, r3, #13
 8001770:	f003 0307 	and.w	r3, r3, #7
 8001774:	4a03      	ldr	r2, [pc, #12]	; (8001784 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001776:	5cd3      	ldrb	r3, [r2, r3]
 8001778:	fa21 f303 	lsr.w	r3, r1, r3
}
 800177c:	4618      	mov	r0, r3
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40023800 	.word	0x40023800
 8001784:	080066ac 	.word	0x080066ac

08001788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178a:	b087      	sub	sp, #28
 800178c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017a2:	4bc6      	ldr	r3, [pc, #792]	; (8001abc <HAL_RCC_GetSysClockFreq+0x334>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 030c 	and.w	r3, r3, #12
 80017aa:	2b0c      	cmp	r3, #12
 80017ac:	f200 817e 	bhi.w	8001aac <HAL_RCC_GetSysClockFreq+0x324>
 80017b0:	a201      	add	r2, pc, #4	; (adr r2, 80017b8 <HAL_RCC_GetSysClockFreq+0x30>)
 80017b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b6:	bf00      	nop
 80017b8:	080017ed 	.word	0x080017ed
 80017bc:	08001aad 	.word	0x08001aad
 80017c0:	08001aad 	.word	0x08001aad
 80017c4:	08001aad 	.word	0x08001aad
 80017c8:	080017f3 	.word	0x080017f3
 80017cc:	08001aad 	.word	0x08001aad
 80017d0:	08001aad 	.word	0x08001aad
 80017d4:	08001aad 	.word	0x08001aad
 80017d8:	080017f9 	.word	0x080017f9
 80017dc:	08001aad 	.word	0x08001aad
 80017e0:	08001aad 	.word	0x08001aad
 80017e4:	08001aad 	.word	0x08001aad
 80017e8:	08001955 	.word	0x08001955
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017ec:	4bb4      	ldr	r3, [pc, #720]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x338>)
 80017ee:	613b      	str	r3, [r7, #16]
       break;
 80017f0:	e15f      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017f2:	4bb4      	ldr	r3, [pc, #720]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x33c>)
 80017f4:	613b      	str	r3, [r7, #16]
      break;
 80017f6:	e15c      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017f8:	4bb0      	ldr	r3, [pc, #704]	; (8001abc <HAL_RCC_GetSysClockFreq+0x334>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001800:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001802:	4bae      	ldr	r3, [pc, #696]	; (8001abc <HAL_RCC_GetSysClockFreq+0x334>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d04a      	beq.n	80018a4 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800180e:	4bab      	ldr	r3, [pc, #684]	; (8001abc <HAL_RCC_GetSysClockFreq+0x334>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	099b      	lsrs	r3, r3, #6
 8001814:	f04f 0400 	mov.w	r4, #0
 8001818:	f240 11ff 	movw	r1, #511	; 0x1ff
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	ea03 0501 	and.w	r5, r3, r1
 8001824:	ea04 0602 	and.w	r6, r4, r2
 8001828:	4629      	mov	r1, r5
 800182a:	4632      	mov	r2, r6
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	f04f 0400 	mov.w	r4, #0
 8001834:	0154      	lsls	r4, r2, #5
 8001836:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800183a:	014b      	lsls	r3, r1, #5
 800183c:	4619      	mov	r1, r3
 800183e:	4622      	mov	r2, r4
 8001840:	1b49      	subs	r1, r1, r5
 8001842:	eb62 0206 	sbc.w	r2, r2, r6
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	f04f 0400 	mov.w	r4, #0
 800184e:	0194      	lsls	r4, r2, #6
 8001850:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001854:	018b      	lsls	r3, r1, #6
 8001856:	1a5b      	subs	r3, r3, r1
 8001858:	eb64 0402 	sbc.w	r4, r4, r2
 800185c:	f04f 0100 	mov.w	r1, #0
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	00e2      	lsls	r2, r4, #3
 8001866:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800186a:	00d9      	lsls	r1, r3, #3
 800186c:	460b      	mov	r3, r1
 800186e:	4614      	mov	r4, r2
 8001870:	195b      	adds	r3, r3, r5
 8001872:	eb44 0406 	adc.w	r4, r4, r6
 8001876:	f04f 0100 	mov.w	r1, #0
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	0262      	lsls	r2, r4, #9
 8001880:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001884:	0259      	lsls	r1, r3, #9
 8001886:	460b      	mov	r3, r1
 8001888:	4614      	mov	r4, r2
 800188a:	4618      	mov	r0, r3
 800188c:	4621      	mov	r1, r4
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f04f 0400 	mov.w	r4, #0
 8001894:	461a      	mov	r2, r3
 8001896:	4623      	mov	r3, r4
 8001898:	f7ff f984 	bl	8000ba4 <__aeabi_uldivmod>
 800189c:	4603      	mov	r3, r0
 800189e:	460c      	mov	r4, r1
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	e049      	b.n	8001938 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018a4:	4b85      	ldr	r3, [pc, #532]	; (8001abc <HAL_RCC_GetSysClockFreq+0x334>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	099b      	lsrs	r3, r3, #6
 80018aa:	f04f 0400 	mov.w	r4, #0
 80018ae:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	ea03 0501 	and.w	r5, r3, r1
 80018ba:	ea04 0602 	and.w	r6, r4, r2
 80018be:	4629      	mov	r1, r5
 80018c0:	4632      	mov	r2, r6
 80018c2:	f04f 0300 	mov.w	r3, #0
 80018c6:	f04f 0400 	mov.w	r4, #0
 80018ca:	0154      	lsls	r4, r2, #5
 80018cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018d0:	014b      	lsls	r3, r1, #5
 80018d2:	4619      	mov	r1, r3
 80018d4:	4622      	mov	r2, r4
 80018d6:	1b49      	subs	r1, r1, r5
 80018d8:	eb62 0206 	sbc.w	r2, r2, r6
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	f04f 0400 	mov.w	r4, #0
 80018e4:	0194      	lsls	r4, r2, #6
 80018e6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018ea:	018b      	lsls	r3, r1, #6
 80018ec:	1a5b      	subs	r3, r3, r1
 80018ee:	eb64 0402 	sbc.w	r4, r4, r2
 80018f2:	f04f 0100 	mov.w	r1, #0
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	00e2      	lsls	r2, r4, #3
 80018fc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001900:	00d9      	lsls	r1, r3, #3
 8001902:	460b      	mov	r3, r1
 8001904:	4614      	mov	r4, r2
 8001906:	195b      	adds	r3, r3, r5
 8001908:	eb44 0406 	adc.w	r4, r4, r6
 800190c:	f04f 0100 	mov.w	r1, #0
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	02a2      	lsls	r2, r4, #10
 8001916:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800191a:	0299      	lsls	r1, r3, #10
 800191c:	460b      	mov	r3, r1
 800191e:	4614      	mov	r4, r2
 8001920:	4618      	mov	r0, r3
 8001922:	4621      	mov	r1, r4
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f04f 0400 	mov.w	r4, #0
 800192a:	461a      	mov	r2, r3
 800192c:	4623      	mov	r3, r4
 800192e:	f7ff f939 	bl	8000ba4 <__aeabi_uldivmod>
 8001932:	4603      	mov	r3, r0
 8001934:	460c      	mov	r4, r1
 8001936:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001938:	4b60      	ldr	r3, [pc, #384]	; (8001abc <HAL_RCC_GetSysClockFreq+0x334>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	0c1b      	lsrs	r3, r3, #16
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	3301      	adds	r3, #1
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001950:	613b      	str	r3, [r7, #16]
      break;
 8001952:	e0ae      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001954:	4b59      	ldr	r3, [pc, #356]	; (8001abc <HAL_RCC_GetSysClockFreq+0x334>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800195c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800195e:	4b57      	ldr	r3, [pc, #348]	; (8001abc <HAL_RCC_GetSysClockFreq+0x334>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d04a      	beq.n	8001a00 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800196a:	4b54      	ldr	r3, [pc, #336]	; (8001abc <HAL_RCC_GetSysClockFreq+0x334>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	099b      	lsrs	r3, r3, #6
 8001970:	f04f 0400 	mov.w	r4, #0
 8001974:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	ea03 0501 	and.w	r5, r3, r1
 8001980:	ea04 0602 	and.w	r6, r4, r2
 8001984:	4629      	mov	r1, r5
 8001986:	4632      	mov	r2, r6
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	f04f 0400 	mov.w	r4, #0
 8001990:	0154      	lsls	r4, r2, #5
 8001992:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001996:	014b      	lsls	r3, r1, #5
 8001998:	4619      	mov	r1, r3
 800199a:	4622      	mov	r2, r4
 800199c:	1b49      	subs	r1, r1, r5
 800199e:	eb62 0206 	sbc.w	r2, r2, r6
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	f04f 0400 	mov.w	r4, #0
 80019aa:	0194      	lsls	r4, r2, #6
 80019ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019b0:	018b      	lsls	r3, r1, #6
 80019b2:	1a5b      	subs	r3, r3, r1
 80019b4:	eb64 0402 	sbc.w	r4, r4, r2
 80019b8:	f04f 0100 	mov.w	r1, #0
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	00e2      	lsls	r2, r4, #3
 80019c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019c6:	00d9      	lsls	r1, r3, #3
 80019c8:	460b      	mov	r3, r1
 80019ca:	4614      	mov	r4, r2
 80019cc:	195b      	adds	r3, r3, r5
 80019ce:	eb44 0406 	adc.w	r4, r4, r6
 80019d2:	f04f 0100 	mov.w	r1, #0
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	0262      	lsls	r2, r4, #9
 80019dc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80019e0:	0259      	lsls	r1, r3, #9
 80019e2:	460b      	mov	r3, r1
 80019e4:	4614      	mov	r4, r2
 80019e6:	4618      	mov	r0, r3
 80019e8:	4621      	mov	r1, r4
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f04f 0400 	mov.w	r4, #0
 80019f0:	461a      	mov	r2, r3
 80019f2:	4623      	mov	r3, r4
 80019f4:	f7ff f8d6 	bl	8000ba4 <__aeabi_uldivmod>
 80019f8:	4603      	mov	r3, r0
 80019fa:	460c      	mov	r4, r1
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	e049      	b.n	8001a94 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a00:	4b2e      	ldr	r3, [pc, #184]	; (8001abc <HAL_RCC_GetSysClockFreq+0x334>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	099b      	lsrs	r3, r3, #6
 8001a06:	f04f 0400 	mov.w	r4, #0
 8001a0a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	ea03 0501 	and.w	r5, r3, r1
 8001a16:	ea04 0602 	and.w	r6, r4, r2
 8001a1a:	4629      	mov	r1, r5
 8001a1c:	4632      	mov	r2, r6
 8001a1e:	f04f 0300 	mov.w	r3, #0
 8001a22:	f04f 0400 	mov.w	r4, #0
 8001a26:	0154      	lsls	r4, r2, #5
 8001a28:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a2c:	014b      	lsls	r3, r1, #5
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4622      	mov	r2, r4
 8001a32:	1b49      	subs	r1, r1, r5
 8001a34:	eb62 0206 	sbc.w	r2, r2, r6
 8001a38:	f04f 0300 	mov.w	r3, #0
 8001a3c:	f04f 0400 	mov.w	r4, #0
 8001a40:	0194      	lsls	r4, r2, #6
 8001a42:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a46:	018b      	lsls	r3, r1, #6
 8001a48:	1a5b      	subs	r3, r3, r1
 8001a4a:	eb64 0402 	sbc.w	r4, r4, r2
 8001a4e:	f04f 0100 	mov.w	r1, #0
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	00e2      	lsls	r2, r4, #3
 8001a58:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a5c:	00d9      	lsls	r1, r3, #3
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4614      	mov	r4, r2
 8001a62:	195b      	adds	r3, r3, r5
 8001a64:	eb44 0406 	adc.w	r4, r4, r6
 8001a68:	f04f 0100 	mov.w	r1, #0
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	02a2      	lsls	r2, r4, #10
 8001a72:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a76:	0299      	lsls	r1, r3, #10
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4614      	mov	r4, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	4621      	mov	r1, r4
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f04f 0400 	mov.w	r4, #0
 8001a86:	461a      	mov	r2, r3
 8001a88:	4623      	mov	r3, r4
 8001a8a:	f7ff f88b 	bl	8000ba4 <__aeabi_uldivmod>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	460c      	mov	r4, r1
 8001a92:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <HAL_RCC_GetSysClockFreq+0x334>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	0f1b      	lsrs	r3, r3, #28
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa8:	613b      	str	r3, [r7, #16]
      break;
 8001aaa:	e002      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x338>)
 8001aae:	613b      	str	r3, [r7, #16]
      break;
 8001ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ab2:	693b      	ldr	r3, [r7, #16]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	371c      	adds	r7, #28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	00f42400 	.word	0x00f42400
 8001ac4:	007a1200 	.word	0x007a1200

08001ac8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 8083 	beq.w	8001be8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ae2:	4b95      	ldr	r3, [pc, #596]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	d019      	beq.n	8001b22 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001aee:	4b92      	ldr	r3, [pc, #584]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d106      	bne.n	8001b08 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001afa:	4b8f      	ldr	r3, [pc, #572]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b06:	d00c      	beq.n	8001b22 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b08:	4b8b      	ldr	r3, [pc, #556]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b10:	2b0c      	cmp	r3, #12
 8001b12:	d112      	bne.n	8001b3a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b14:	4b88      	ldr	r3, [pc, #544]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b20:	d10b      	bne.n	8001b3a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b22:	4b85      	ldr	r3, [pc, #532]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d05b      	beq.n	8001be6 <HAL_RCC_OscConfig+0x11e>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d157      	bne.n	8001be6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e216      	b.n	8001f68 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b42:	d106      	bne.n	8001b52 <HAL_RCC_OscConfig+0x8a>
 8001b44:	4b7c      	ldr	r3, [pc, #496]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a7b      	ldr	r2, [pc, #492]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	e01d      	b.n	8001b8e <HAL_RCC_OscConfig+0xc6>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b5a:	d10c      	bne.n	8001b76 <HAL_RCC_OscConfig+0xae>
 8001b5c:	4b76      	ldr	r3, [pc, #472]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a75      	ldr	r2, [pc, #468]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001b62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	4b73      	ldr	r3, [pc, #460]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a72      	ldr	r2, [pc, #456]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	e00b      	b.n	8001b8e <HAL_RCC_OscConfig+0xc6>
 8001b76:	4b70      	ldr	r3, [pc, #448]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a6f      	ldr	r2, [pc, #444]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	4b6d      	ldr	r3, [pc, #436]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a6c      	ldr	r2, [pc, #432]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001b88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b8c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d013      	beq.n	8001bbe <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b96:	f7ff f9eb 	bl	8000f70 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b9e:	f7ff f9e7 	bl	8000f70 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b64      	cmp	r3, #100	; 0x64
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e1db      	b.n	8001f68 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb0:	4b61      	ldr	r3, [pc, #388]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0xd6>
 8001bbc:	e014      	b.n	8001be8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbe:	f7ff f9d7 	bl	8000f70 <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc6:	f7ff f9d3 	bl	8000f70 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b64      	cmp	r3, #100	; 0x64
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e1c7      	b.n	8001f68 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd8:	4b57      	ldr	r3, [pc, #348]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1f0      	bne.n	8001bc6 <HAL_RCC_OscConfig+0xfe>
 8001be4:	e000      	b.n	8001be8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d06f      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001bf4:	4b50      	ldr	r3, [pc, #320]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 030c 	and.w	r3, r3, #12
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d017      	beq.n	8001c30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c00:	4b4d      	ldr	r3, [pc, #308]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d105      	bne.n	8001c18 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c0c:	4b4a      	ldr	r3, [pc, #296]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00b      	beq.n	8001c30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c18:	4b47      	ldr	r3, [pc, #284]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c20:	2b0c      	cmp	r3, #12
 8001c22:	d11c      	bne.n	8001c5e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c24:	4b44      	ldr	r3, [pc, #272]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d116      	bne.n	8001c5e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c30:	4b41      	ldr	r3, [pc, #260]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <HAL_RCC_OscConfig+0x180>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e18f      	b.n	8001f68 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c48:	4b3b      	ldr	r3, [pc, #236]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	4938      	ldr	r1, [pc, #224]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5c:	e03a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d020      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c66:	4b35      	ldr	r3, [pc, #212]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6c:	f7ff f980 	bl	8000f70 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c74:	f7ff f97c 	bl	8000f70 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e170      	b.n	8001f68 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c86:	4b2c      	ldr	r3, [pc, #176]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f0      	beq.n	8001c74 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c92:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	4925      	ldr	r1, [pc, #148]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	600b      	str	r3, [r1, #0]
 8001ca6:	e015      	b.n	8001cd4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ca8:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cae:	f7ff f95f 	bl	8000f70 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cb6:	f7ff f95b 	bl	8000f70 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e14f      	b.n	8001f68 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1f0      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d037      	beq.n	8001d50 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d016      	beq.n	8001d16 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce8:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <HAL_RCC_OscConfig+0x278>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cee:	f7ff f93f 	bl	8000f70 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cf6:	f7ff f93b 	bl	8000f70 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e12f      	b.n	8001f68 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f0      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x22e>
 8001d14:	e01c      	b.n	8001d50 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d16:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <HAL_RCC_OscConfig+0x278>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1c:	f7ff f928 	bl	8000f70 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d22:	e00f      	b.n	8001d44 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d24:	f7ff f924 	bl	8000f70 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d908      	bls.n	8001d44 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e118      	b.n	8001f68 <HAL_RCC_OscConfig+0x4a0>
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	42470000 	.word	0x42470000
 8001d40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d44:	4b8a      	ldr	r3, [pc, #552]	; (8001f70 <HAL_RCC_OscConfig+0x4a8>)
 8001d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1e9      	bne.n	8001d24 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 8097 	beq.w	8001e8c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d62:	4b83      	ldr	r3, [pc, #524]	; (8001f70 <HAL_RCC_OscConfig+0x4a8>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10f      	bne.n	8001d8e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	4b7f      	ldr	r3, [pc, #508]	; (8001f70 <HAL_RCC_OscConfig+0x4a8>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	4a7e      	ldr	r2, [pc, #504]	; (8001f70 <HAL_RCC_OscConfig+0x4a8>)
 8001d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7e:	4b7c      	ldr	r3, [pc, #496]	; (8001f70 <HAL_RCC_OscConfig+0x4a8>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8e:	4b79      	ldr	r3, [pc, #484]	; (8001f74 <HAL_RCC_OscConfig+0x4ac>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d118      	bne.n	8001dcc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d9a:	4b76      	ldr	r3, [pc, #472]	; (8001f74 <HAL_RCC_OscConfig+0x4ac>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a75      	ldr	r2, [pc, #468]	; (8001f74 <HAL_RCC_OscConfig+0x4ac>)
 8001da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001da6:	f7ff f8e3 	bl	8000f70 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dae:	f7ff f8df 	bl	8000f70 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e0d3      	b.n	8001f68 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc0:	4b6c      	ldr	r3, [pc, #432]	; (8001f74 <HAL_RCC_OscConfig+0x4ac>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0f0      	beq.n	8001dae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d106      	bne.n	8001de2 <HAL_RCC_OscConfig+0x31a>
 8001dd4:	4b66      	ldr	r3, [pc, #408]	; (8001f70 <HAL_RCC_OscConfig+0x4a8>)
 8001dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd8:	4a65      	ldr	r2, [pc, #404]	; (8001f70 <HAL_RCC_OscConfig+0x4a8>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	6713      	str	r3, [r2, #112]	; 0x70
 8001de0:	e01c      	b.n	8001e1c <HAL_RCC_OscConfig+0x354>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2b05      	cmp	r3, #5
 8001de8:	d10c      	bne.n	8001e04 <HAL_RCC_OscConfig+0x33c>
 8001dea:	4b61      	ldr	r3, [pc, #388]	; (8001f70 <HAL_RCC_OscConfig+0x4a8>)
 8001dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dee:	4a60      	ldr	r2, [pc, #384]	; (8001f70 <HAL_RCC_OscConfig+0x4a8>)
 8001df0:	f043 0304 	orr.w	r3, r3, #4
 8001df4:	6713      	str	r3, [r2, #112]	; 0x70
 8001df6:	4b5e      	ldr	r3, [pc, #376]	; (8001f70 <HAL_RCC_OscConfig+0x4a8>)
 8001df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfa:	4a5d      	ldr	r2, [pc, #372]	; (8001f70 <HAL_RCC_OscConfig+0x4a8>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6713      	str	r3, [r2, #112]	; 0x70
 8001e02:	e00b      	b.n	8001e1c <HAL_RCC_OscConfig+0x354>
 8001e04:	4b5a      	ldr	r3, [pc, #360]	; (8001f70 <HAL_RCC_OscConfig+0x4a8>)
 8001e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e08:	4a59      	ldr	r2, [pc, #356]	; (8001f70 <HAL_RCC_OscConfig+0x4a8>)
 8001e0a:	f023 0301 	bic.w	r3, r3, #1
 8001e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e10:	4b57      	ldr	r3, [pc, #348]	; (8001f70 <HAL_RCC_OscConfig+0x4a8>)
 8001e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e14:	4a56      	ldr	r2, [pc, #344]	; (8001f70 <HAL_RCC_OscConfig+0x4a8>)
 8001e16:	f023 0304 	bic.w	r3, r3, #4
 8001e1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d015      	beq.n	8001e50 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e24:	f7ff f8a4 	bl	8000f70 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2a:	e00a      	b.n	8001e42 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e2c:	f7ff f8a0 	bl	8000f70 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e092      	b.n	8001f68 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e42:	4b4b      	ldr	r3, [pc, #300]	; (8001f70 <HAL_RCC_OscConfig+0x4a8>)
 8001e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0ee      	beq.n	8001e2c <HAL_RCC_OscConfig+0x364>
 8001e4e:	e014      	b.n	8001e7a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e50:	f7ff f88e 	bl	8000f70 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e56:	e00a      	b.n	8001e6e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e58:	f7ff f88a 	bl	8000f70 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e07c      	b.n	8001f68 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e6e:	4b40      	ldr	r3, [pc, #256]	; (8001f70 <HAL_RCC_OscConfig+0x4a8>)
 8001e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1ee      	bne.n	8001e58 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e7a:	7dfb      	ldrb	r3, [r7, #23]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d105      	bne.n	8001e8c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e80:	4b3b      	ldr	r3, [pc, #236]	; (8001f70 <HAL_RCC_OscConfig+0x4a8>)
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	4a3a      	ldr	r2, [pc, #232]	; (8001f70 <HAL_RCC_OscConfig+0x4a8>)
 8001e86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d068      	beq.n	8001f66 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e94:	4b36      	ldr	r3, [pc, #216]	; (8001f70 <HAL_RCC_OscConfig+0x4a8>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 030c 	and.w	r3, r3, #12
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d060      	beq.n	8001f62 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d145      	bne.n	8001f34 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea8:	4b33      	ldr	r3, [pc, #204]	; (8001f78 <HAL_RCC_OscConfig+0x4b0>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eae:	f7ff f85f 	bl	8000f70 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb6:	f7ff f85b 	bl	8000f70 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e04f      	b.n	8001f68 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec8:	4b29      	ldr	r3, [pc, #164]	; (8001f70 <HAL_RCC_OscConfig+0x4a8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1f0      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69da      	ldr	r2, [r3, #28]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	019b      	lsls	r3, r3, #6
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eea:	085b      	lsrs	r3, r3, #1
 8001eec:	3b01      	subs	r3, #1
 8001eee:	041b      	lsls	r3, r3, #16
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef6:	061b      	lsls	r3, r3, #24
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	071b      	lsls	r3, r3, #28
 8001f00:	491b      	ldr	r1, [pc, #108]	; (8001f70 <HAL_RCC_OscConfig+0x4a8>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f06:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <HAL_RCC_OscConfig+0x4b0>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0c:	f7ff f830 	bl	8000f70 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f14:	f7ff f82c 	bl	8000f70 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e020      	b.n	8001f68 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f26:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <HAL_RCC_OscConfig+0x4a8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f0      	beq.n	8001f14 <HAL_RCC_OscConfig+0x44c>
 8001f32:	e018      	b.n	8001f66 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f34:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <HAL_RCC_OscConfig+0x4b0>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3a:	f7ff f819 	bl	8000f70 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f42:	f7ff f815 	bl	8000f70 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e009      	b.n	8001f68 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_RCC_OscConfig+0x4a8>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1f0      	bne.n	8001f42 <HAL_RCC_OscConfig+0x47a>
 8001f60:	e001      	b.n	8001f66 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40007000 	.word	0x40007000
 8001f78:	42470060 	.word	0x42470060

08001f7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e03f      	b.n	800200e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d106      	bne.n	8001fa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f002 ff50 	bl	8004e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2224      	movs	r2, #36	; 0x24
 8001fac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f829 	bl	8002018 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	695a      	ldr	r2, [r3, #20]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fe4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68da      	ldr	r2, [r3, #12]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ff4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2220      	movs	r2, #32
 8002000:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2220      	movs	r2, #32
 8002008:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002018:	b5b0      	push	{r4, r5, r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	431a      	orrs	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	4313      	orrs	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002058:	f023 030c 	bic.w	r3, r3, #12
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6812      	ldr	r2, [r2, #0]
 8002060:	68f9      	ldr	r1, [r7, #12]
 8002062:	430b      	orrs	r3, r1
 8002064:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	699a      	ldr	r2, [r3, #24]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002084:	f040 80e4 	bne.w	8002250 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4aab      	ldr	r2, [pc, #684]	; (800233c <UART_SetConfig+0x324>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d004      	beq.n	800209c <UART_SetConfig+0x84>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4aaa      	ldr	r2, [pc, #680]	; (8002340 <UART_SetConfig+0x328>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d16c      	bne.n	8002176 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800209c:	f7ff fb60 	bl	8001760 <HAL_RCC_GetPCLK2Freq>
 80020a0:	4602      	mov	r2, r0
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	009a      	lsls	r2, r3, #2
 80020aa:	441a      	add	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b6:	4aa3      	ldr	r2, [pc, #652]	; (8002344 <UART_SetConfig+0x32c>)
 80020b8:	fba2 2303 	umull	r2, r3, r2, r3
 80020bc:	095b      	lsrs	r3, r3, #5
 80020be:	011c      	lsls	r4, r3, #4
 80020c0:	f7ff fb4e 	bl	8001760 <HAL_RCC_GetPCLK2Freq>
 80020c4:	4602      	mov	r2, r0
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	009a      	lsls	r2, r3, #2
 80020ce:	441a      	add	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	fbb2 f5f3 	udiv	r5, r2, r3
 80020da:	f7ff fb41 	bl	8001760 <HAL_RCC_GetPCLK2Freq>
 80020de:	4602      	mov	r2, r0
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	009a      	lsls	r2, r3, #2
 80020e8:	441a      	add	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f4:	4a93      	ldr	r2, [pc, #588]	; (8002344 <UART_SetConfig+0x32c>)
 80020f6:	fba2 2303 	umull	r2, r3, r2, r3
 80020fa:	095b      	lsrs	r3, r3, #5
 80020fc:	2264      	movs	r2, #100	; 0x64
 80020fe:	fb02 f303 	mul.w	r3, r2, r3
 8002102:	1aeb      	subs	r3, r5, r3
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	3332      	adds	r3, #50	; 0x32
 8002108:	4a8e      	ldr	r2, [pc, #568]	; (8002344 <UART_SetConfig+0x32c>)
 800210a:	fba2 2303 	umull	r2, r3, r2, r3
 800210e:	095b      	lsrs	r3, r3, #5
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002116:	441c      	add	r4, r3
 8002118:	f7ff fb22 	bl	8001760 <HAL_RCC_GetPCLK2Freq>
 800211c:	4602      	mov	r2, r0
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	009a      	lsls	r2, r3, #2
 8002126:	441a      	add	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	fbb2 f5f3 	udiv	r5, r2, r3
 8002132:	f7ff fb15 	bl	8001760 <HAL_RCC_GetPCLK2Freq>
 8002136:	4602      	mov	r2, r0
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	009a      	lsls	r2, r3, #2
 8002140:	441a      	add	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	fbb2 f3f3 	udiv	r3, r2, r3
 800214c:	4a7d      	ldr	r2, [pc, #500]	; (8002344 <UART_SetConfig+0x32c>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	095b      	lsrs	r3, r3, #5
 8002154:	2264      	movs	r2, #100	; 0x64
 8002156:	fb02 f303 	mul.w	r3, r2, r3
 800215a:	1aeb      	subs	r3, r5, r3
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	3332      	adds	r3, #50	; 0x32
 8002160:	4a78      	ldr	r2, [pc, #480]	; (8002344 <UART_SetConfig+0x32c>)
 8002162:	fba2 2303 	umull	r2, r3, r2, r3
 8002166:	095b      	lsrs	r3, r3, #5
 8002168:	f003 0207 	and.w	r2, r3, #7
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4422      	add	r2, r4
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	e154      	b.n	8002420 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002176:	f7ff fadf 	bl	8001738 <HAL_RCC_GetPCLK1Freq>
 800217a:	4602      	mov	r2, r0
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	009a      	lsls	r2, r3, #2
 8002184:	441a      	add	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002190:	4a6c      	ldr	r2, [pc, #432]	; (8002344 <UART_SetConfig+0x32c>)
 8002192:	fba2 2303 	umull	r2, r3, r2, r3
 8002196:	095b      	lsrs	r3, r3, #5
 8002198:	011c      	lsls	r4, r3, #4
 800219a:	f7ff facd 	bl	8001738 <HAL_RCC_GetPCLK1Freq>
 800219e:	4602      	mov	r2, r0
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	009a      	lsls	r2, r3, #2
 80021a8:	441a      	add	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	fbb2 f5f3 	udiv	r5, r2, r3
 80021b4:	f7ff fac0 	bl	8001738 <HAL_RCC_GetPCLK1Freq>
 80021b8:	4602      	mov	r2, r0
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	009a      	lsls	r2, r3, #2
 80021c2:	441a      	add	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ce:	4a5d      	ldr	r2, [pc, #372]	; (8002344 <UART_SetConfig+0x32c>)
 80021d0:	fba2 2303 	umull	r2, r3, r2, r3
 80021d4:	095b      	lsrs	r3, r3, #5
 80021d6:	2264      	movs	r2, #100	; 0x64
 80021d8:	fb02 f303 	mul.w	r3, r2, r3
 80021dc:	1aeb      	subs	r3, r5, r3
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	3332      	adds	r3, #50	; 0x32
 80021e2:	4a58      	ldr	r2, [pc, #352]	; (8002344 <UART_SetConfig+0x32c>)
 80021e4:	fba2 2303 	umull	r2, r3, r2, r3
 80021e8:	095b      	lsrs	r3, r3, #5
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021f0:	441c      	add	r4, r3
 80021f2:	f7ff faa1 	bl	8001738 <HAL_RCC_GetPCLK1Freq>
 80021f6:	4602      	mov	r2, r0
 80021f8:	4613      	mov	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	009a      	lsls	r2, r3, #2
 8002200:	441a      	add	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	fbb2 f5f3 	udiv	r5, r2, r3
 800220c:	f7ff fa94 	bl	8001738 <HAL_RCC_GetPCLK1Freq>
 8002210:	4602      	mov	r2, r0
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	009a      	lsls	r2, r3, #2
 800221a:	441a      	add	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	fbb2 f3f3 	udiv	r3, r2, r3
 8002226:	4a47      	ldr	r2, [pc, #284]	; (8002344 <UART_SetConfig+0x32c>)
 8002228:	fba2 2303 	umull	r2, r3, r2, r3
 800222c:	095b      	lsrs	r3, r3, #5
 800222e:	2264      	movs	r2, #100	; 0x64
 8002230:	fb02 f303 	mul.w	r3, r2, r3
 8002234:	1aeb      	subs	r3, r5, r3
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	3332      	adds	r3, #50	; 0x32
 800223a:	4a42      	ldr	r2, [pc, #264]	; (8002344 <UART_SetConfig+0x32c>)
 800223c:	fba2 2303 	umull	r2, r3, r2, r3
 8002240:	095b      	lsrs	r3, r3, #5
 8002242:	f003 0207 	and.w	r2, r3, #7
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4422      	add	r2, r4
 800224c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800224e:	e0e7      	b.n	8002420 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a39      	ldr	r2, [pc, #228]	; (800233c <UART_SetConfig+0x324>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d004      	beq.n	8002264 <UART_SetConfig+0x24c>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a38      	ldr	r2, [pc, #224]	; (8002340 <UART_SetConfig+0x328>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d171      	bne.n	8002348 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002264:	f7ff fa7c 	bl	8001760 <HAL_RCC_GetPCLK2Freq>
 8002268:	4602      	mov	r2, r0
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	009a      	lsls	r2, r3, #2
 8002272:	441a      	add	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	fbb2 f3f3 	udiv	r3, r2, r3
 800227e:	4a31      	ldr	r2, [pc, #196]	; (8002344 <UART_SetConfig+0x32c>)
 8002280:	fba2 2303 	umull	r2, r3, r2, r3
 8002284:	095b      	lsrs	r3, r3, #5
 8002286:	011c      	lsls	r4, r3, #4
 8002288:	f7ff fa6a 	bl	8001760 <HAL_RCC_GetPCLK2Freq>
 800228c:	4602      	mov	r2, r0
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	009a      	lsls	r2, r3, #2
 8002296:	441a      	add	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	fbb2 f5f3 	udiv	r5, r2, r3
 80022a2:	f7ff fa5d 	bl	8001760 <HAL_RCC_GetPCLK2Freq>
 80022a6:	4602      	mov	r2, r0
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	009a      	lsls	r2, r3, #2
 80022b0:	441a      	add	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022bc:	4a21      	ldr	r2, [pc, #132]	; (8002344 <UART_SetConfig+0x32c>)
 80022be:	fba2 2303 	umull	r2, r3, r2, r3
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	2264      	movs	r2, #100	; 0x64
 80022c6:	fb02 f303 	mul.w	r3, r2, r3
 80022ca:	1aeb      	subs	r3, r5, r3
 80022cc:	011b      	lsls	r3, r3, #4
 80022ce:	3332      	adds	r3, #50	; 0x32
 80022d0:	4a1c      	ldr	r2, [pc, #112]	; (8002344 <UART_SetConfig+0x32c>)
 80022d2:	fba2 2303 	umull	r2, r3, r2, r3
 80022d6:	095b      	lsrs	r3, r3, #5
 80022d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022dc:	441c      	add	r4, r3
 80022de:	f7ff fa3f 	bl	8001760 <HAL_RCC_GetPCLK2Freq>
 80022e2:	4602      	mov	r2, r0
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	009a      	lsls	r2, r3, #2
 80022ec:	441a      	add	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	fbb2 f5f3 	udiv	r5, r2, r3
 80022f8:	f7ff fa32 	bl	8001760 <HAL_RCC_GetPCLK2Freq>
 80022fc:	4602      	mov	r2, r0
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	009a      	lsls	r2, r3, #2
 8002306:	441a      	add	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002312:	4a0c      	ldr	r2, [pc, #48]	; (8002344 <UART_SetConfig+0x32c>)
 8002314:	fba2 2303 	umull	r2, r3, r2, r3
 8002318:	095b      	lsrs	r3, r3, #5
 800231a:	2264      	movs	r2, #100	; 0x64
 800231c:	fb02 f303 	mul.w	r3, r2, r3
 8002320:	1aeb      	subs	r3, r5, r3
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	3332      	adds	r3, #50	; 0x32
 8002326:	4a07      	ldr	r2, [pc, #28]	; (8002344 <UART_SetConfig+0x32c>)
 8002328:	fba2 2303 	umull	r2, r3, r2, r3
 800232c:	095b      	lsrs	r3, r3, #5
 800232e:	f003 020f 	and.w	r2, r3, #15
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4422      	add	r2, r4
 8002338:	609a      	str	r2, [r3, #8]
 800233a:	e071      	b.n	8002420 <UART_SetConfig+0x408>
 800233c:	40011000 	.word	0x40011000
 8002340:	40011400 	.word	0x40011400
 8002344:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002348:	f7ff f9f6 	bl	8001738 <HAL_RCC_GetPCLK1Freq>
 800234c:	4602      	mov	r2, r0
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	009a      	lsls	r2, r3, #2
 8002356:	441a      	add	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002362:	4a31      	ldr	r2, [pc, #196]	; (8002428 <UART_SetConfig+0x410>)
 8002364:	fba2 2303 	umull	r2, r3, r2, r3
 8002368:	095b      	lsrs	r3, r3, #5
 800236a:	011c      	lsls	r4, r3, #4
 800236c:	f7ff f9e4 	bl	8001738 <HAL_RCC_GetPCLK1Freq>
 8002370:	4602      	mov	r2, r0
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	009a      	lsls	r2, r3, #2
 800237a:	441a      	add	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	fbb2 f5f3 	udiv	r5, r2, r3
 8002386:	f7ff f9d7 	bl	8001738 <HAL_RCC_GetPCLK1Freq>
 800238a:	4602      	mov	r2, r0
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	009a      	lsls	r2, r3, #2
 8002394:	441a      	add	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a0:	4a21      	ldr	r2, [pc, #132]	; (8002428 <UART_SetConfig+0x410>)
 80023a2:	fba2 2303 	umull	r2, r3, r2, r3
 80023a6:	095b      	lsrs	r3, r3, #5
 80023a8:	2264      	movs	r2, #100	; 0x64
 80023aa:	fb02 f303 	mul.w	r3, r2, r3
 80023ae:	1aeb      	subs	r3, r5, r3
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	3332      	adds	r3, #50	; 0x32
 80023b4:	4a1c      	ldr	r2, [pc, #112]	; (8002428 <UART_SetConfig+0x410>)
 80023b6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023c0:	441c      	add	r4, r3
 80023c2:	f7ff f9b9 	bl	8001738 <HAL_RCC_GetPCLK1Freq>
 80023c6:	4602      	mov	r2, r0
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	009a      	lsls	r2, r3, #2
 80023d0:	441a      	add	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	fbb2 f5f3 	udiv	r5, r2, r3
 80023dc:	f7ff f9ac 	bl	8001738 <HAL_RCC_GetPCLK1Freq>
 80023e0:	4602      	mov	r2, r0
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	009a      	lsls	r2, r3, #2
 80023ea:	441a      	add	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f6:	4a0c      	ldr	r2, [pc, #48]	; (8002428 <UART_SetConfig+0x410>)
 80023f8:	fba2 2303 	umull	r2, r3, r2, r3
 80023fc:	095b      	lsrs	r3, r3, #5
 80023fe:	2264      	movs	r2, #100	; 0x64
 8002400:	fb02 f303 	mul.w	r3, r2, r3
 8002404:	1aeb      	subs	r3, r5, r3
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	3332      	adds	r3, #50	; 0x32
 800240a:	4a07      	ldr	r2, [pc, #28]	; (8002428 <UART_SetConfig+0x410>)
 800240c:	fba2 2303 	umull	r2, r3, r2, r3
 8002410:	095b      	lsrs	r3, r3, #5
 8002412:	f003 020f 	and.w	r2, r3, #15
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4422      	add	r2, r4
 800241c:	609a      	str	r2, [r3, #8]
}
 800241e:	e7ff      	b.n	8002420 <UART_SetConfig+0x408>
 8002420:	bf00      	nop
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bdb0      	pop	{r4, r5, r7, pc}
 8002428:	51eb851f 	.word	0x51eb851f

0800242c <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	431a      	orrs	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <LL_ADC_INJ_SetSequencerLength>:
  *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
  *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002460:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b01      	cmp	r3, #1
 800248a:	bf0c      	ite	eq
 800248c:	2301      	moveq	r3, #1
 800248e:	2300      	movne	r3, #0
 8002490:	b2db      	uxtb	r3, r3
}
 8002492:	4618      	mov	r0, r3
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 80024ae:	481c      	ldr	r0, [pc, #112]	; (8002520 <LL_ADC_CommonInit+0x80>)
 80024b0:	f7ff ffe2 	bl	8002478 <LL_ADC_IsEnabled>
 80024b4:	4604      	mov	r4, r0
 80024b6:	481b      	ldr	r0, [pc, #108]	; (8002524 <LL_ADC_CommonInit+0x84>)
 80024b8:	f7ff ffde 	bl	8002478 <LL_ADC_IsEnabled>
 80024bc:	4603      	mov	r3, r0
 80024be:	431c      	orrs	r4, r3
 80024c0:	4819      	ldr	r0, [pc, #100]	; (8002528 <LL_ADC_CommonInit+0x88>)
 80024c2:	f7ff ffd9 	bl	8002478 <LL_ADC_IsEnabled>
 80024c6:	4603      	mov	r3, r0
 80024c8:	4323      	orrs	r3, r4
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d120      	bne.n	8002510 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d012      	beq.n	80024fc <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	4b14      	ldr	r3, [pc, #80]	; (800252c <LL_ADC_CommonInit+0x8c>)
 80024dc:	4013      	ands	r3, r2
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	6811      	ldr	r1, [r2, #0]
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	6852      	ldr	r2, [r2, #4]
 80024e6:	4311      	orrs	r1, r2
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	6892      	ldr	r2, [r2, #8]
 80024ec:	4311      	orrs	r1, r2
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	68d2      	ldr	r2, [r2, #12]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	e00b      	b.n	8002514 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	4b0a      	ldr	r3, [pc, #40]	; (800252c <LL_ADC_CommonInit+0x8c>)
 8002502:	4013      	ands	r3, r2
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	6812      	ldr	r2, [r2, #0]
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	e001      	b.n	8002514 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8002514:	7bfb      	ldrb	r3, [r7, #15]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	bd90      	pop	{r4, r7, pc}
 800251e:	bf00      	nop
 8002520:	40012000 	.word	0x40012000
 8002524:	40012100 	.word	0x40012100
 8002528:	40012200 	.word	0x40012200
 800252c:	fffc10e0 	.word	0xfffc10e0

08002530 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800253a:	2300      	movs	r3, #0
 800253c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ff9a 	bl	8002478 <LL_ADC_IsEnabled>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d117      	bne.n	800257a <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002552:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	6811      	ldr	r1, [r2, #0]
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	6892      	ldr	r2, [r2, #8]
 800255e:	430a      	orrs	r2, r1
 8002560:	431a      	orrs	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	e001      	b.n	800257e <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800257e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002592:	2300      	movs	r3, #0
 8002594:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff ff6e 	bl	8002478 <LL_ADC_IsEnabled>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d131      	bne.n	8002606 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00c      	beq.n	80025c4 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	6859      	ldr	r1, [r3, #4]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	430b      	orrs	r3, r1
 80025bc:	431a      	orrs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	e008      	b.n	80025d6 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	431a      	orrs	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <LL_ADC_REG_Init+0x8c>)
 80025dc:	4013      	ands	r3, r2
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	6812      	ldr	r2, [r2, #0]
 80025e2:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	68d2      	ldr	r2, [r2, #12]
 80025ea:	4311      	orrs	r1, r2
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	6912      	ldr	r2, [r2, #16]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	4619      	mov	r1, r3
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff ff14 	bl	800242c <LL_ADC_REG_SetSequencerLength>
 8002604:	e001      	b.n	800260a <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800260a:	7bfb      	ldrb	r3, [r7, #15]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	c0fffcfd 	.word	0xc0fffcfd

08002618 <LL_ADC_INJ_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_INJ_Init(ADC_TypeDef *ADCx, LL_ADC_INJ_InitTypeDef *ADC_INJ_InitStruct)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002622:	2300      	movs	r3, #0
 8002624:	73fb      	strb	r3, [r7, #15]
  }
  assert_param(IS_LL_ADC_INJ_TRIG_AUTO(ADC_INJ_InitStruct->TrigAuto));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff ff26 	bl	8002478 <LL_ADC_IsEnabled>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d12b      	bne.n	800268a <LL_ADC_INJ_Init+0x72>
    /*    - Set ADC group injected conversion trigger: independent or         */
    /*      from ADC group regular                                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_INJ_StartConversionExtTrig().      */
    if(ADC_INJ_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00c      	beq.n	8002654 <LL_ADC_INJ_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f423 52a0 	bic.w	r2, r3, #5120	; 0x1400
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6899      	ldr	r1, [r3, #8]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	430b      	orrs	r3, r1
 800264c:	431a      	orrs	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	e008      	b.n	8002666 <LL_ADC_INJ_Init+0x4e>
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f423 52a0 	bic.w	r2, r3, #5120	; 0x1400
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	431a      	orrs	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	605a      	str	r2, [r3, #4]
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_INJ_SetSequencerLength(ADCx, ADC_INJ_InitStruct->SequencerLength);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	4619      	mov	r1, r3
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff fee5 	bl	8002452 <LL_ADC_INJ_SetSequencerLength>
 8002688:	e001      	b.n	800268e <LL_ADC_INJ_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800268e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80026a0:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <LL_EXTI_EnableIT_0_31+0x20>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4904      	ldr	r1, [pc, #16]	; (80026b8 <LL_EXTI_EnableIT_0_31+0x20>)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	600b      	str	r3, [r1, #0]
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	40013c00 	.word	0x40013c00

080026bc <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80026c4:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <LL_EXTI_DisableIT_0_31+0x24>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	4904      	ldr	r1, [pc, #16]	; (80026e0 <LL_EXTI_DisableIT_0_31+0x24>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	600b      	str	r3, [r1, #0]
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40013c00 	.word	0x40013c00

080026e4 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <LL_EXTI_EnableEvent_0_31+0x20>)
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	4904      	ldr	r1, [pc, #16]	; (8002704 <LL_EXTI_EnableEvent_0_31+0x20>)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]

}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	40013c00 	.word	0x40013c00

08002708 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <LL_EXTI_DisableEvent_0_31+0x24>)
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	43db      	mvns	r3, r3
 8002718:	4904      	ldr	r1, [pc, #16]	; (800272c <LL_EXTI_DisableEvent_0_31+0x24>)
 800271a:	4013      	ands	r3, r2
 800271c:	604b      	str	r3, [r1, #4]
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40013c00 	.word	0x40013c00

08002730 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002738:	4b05      	ldr	r3, [pc, #20]	; (8002750 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	4904      	ldr	r1, [pc, #16]	; (8002750 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4313      	orrs	r3, r2
 8002742:	608b      	str	r3, [r1, #8]

}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	40013c00 	.word	0x40013c00

08002754 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800275c:	4b06      	ldr	r3, [pc, #24]	; (8002778 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	43db      	mvns	r3, r3
 8002764:	4904      	ldr	r1, [pc, #16]	; (8002778 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002766:	4013      	ands	r3, r2
 8002768:	608b      	str	r3, [r1, #8]

}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40013c00 	.word	0x40013c00

0800277c <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	4904      	ldr	r1, [pc, #16]	; (800279c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4313      	orrs	r3, r2
 800278e:	60cb      	str	r3, [r1, #12]
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	40013c00 	.word	0x40013c00

080027a0 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80027a8:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	4904      	ldr	r1, [pc, #16]	; (80027c4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80027b2:	4013      	ands	r3, r2
 80027b4:	60cb      	str	r3, [r1, #12]
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40013c00 	.word	0x40013c00

080027c8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80027d0:	2300      	movs	r3, #0
 80027d2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	791b      	ldrb	r3, [r3, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d060      	beq.n	800289e <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d067      	beq.n	80028b4 <LL_EXTI_Init+0xec>
    {
      switch (EXTI_InitStruct->Mode)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	795b      	ldrb	r3, [r3, #5]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d00e      	beq.n	800280a <LL_EXTI_Init+0x42>
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d017      	beq.n	8002820 <LL_EXTI_Init+0x58>
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d120      	bne.n	8002836 <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff ff85 	bl	8002708 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff ff48 	bl	8002698 <LL_EXTI_EnableIT_0_31>
          break;
 8002808:	e018      	b.n	800283c <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff ff54 	bl	80026bc <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ff63 	bl	80026e4 <LL_EXTI_EnableEvent_0_31>
          break;
 800281e:	e00d      	b.n	800283c <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff ff37 	bl	8002698 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff ff58 	bl	80026e4 <LL_EXTI_EnableEvent_0_31>
          break;
 8002834:	e002      	b.n	800283c <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	73fb      	strb	r3, [r7, #15]
          break;
 800283a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	799b      	ldrb	r3, [r3, #6]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d037      	beq.n	80028b4 <LL_EXTI_Init+0xec>
      {
        switch (EXTI_InitStruct->Trigger)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	799b      	ldrb	r3, [r3, #6]
 8002848:	2b02      	cmp	r3, #2
 800284a:	d00e      	beq.n	800286a <LL_EXTI_Init+0xa2>
 800284c:	2b03      	cmp	r3, #3
 800284e:	d017      	beq.n	8002880 <LL_EXTI_Init+0xb8>
 8002850:	2b01      	cmp	r3, #1
 8002852:	d120      	bne.n	8002896 <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ffa1 	bl	80027a0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff ff64 	bl	8002730 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002868:	e025      	b.n	80028b6 <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff ff70 	bl	8002754 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff ff7f 	bl	800277c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800287e:	e01a      	b.n	80028b6 <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ff53 	bl	8002730 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff ff74 	bl	800277c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002894:	e00f      	b.n	80028b6 <LL_EXTI_Init+0xee>
          default:
            status = ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	73fb      	strb	r3, [r7, #15]
            break;
 800289a:	bf00      	nop
 800289c:	e00b      	b.n	80028b6 <LL_EXTI_Init+0xee>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff ff0a 	bl	80026bc <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff ff2b 	bl	8002708 <LL_EXTI_DisableEvent_0_31>
 80028b2:	e000      	b.n	80028b6 <LL_EXTI_Init+0xee>
      }
 80028b4:	bf00      	nop
  }
  return status;
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b089      	sub	sp, #36	; 0x24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	fa93 f3a3 	rbit	r3, r3
 80028da:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	fab3 f383 	clz	r3, r3
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	2103      	movs	r1, #3
 80028e8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	401a      	ands	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	fa93 f3a3 	rbit	r3, r3
 80028fa:	61bb      	str	r3, [r7, #24]
  return result;
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	fab3 f383 	clz	r3, r3
 8002902:	b2db      	uxtb	r3, r3
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	fa01 f303 	lsl.w	r3, r1, r3
 800290c:	431a      	orrs	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	601a      	str	r2, [r3, #0]
}
 8002912:	bf00      	nop
 8002914:	3724      	adds	r7, #36	; 0x24
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800291e:	b480      	push	{r7}
 8002920:	b085      	sub	sp, #20
 8002922:	af00      	add	r7, sp, #0
 8002924:	60f8      	str	r0, [r7, #12]
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	43db      	mvns	r3, r3
 8002932:	401a      	ands	r2, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	fb01 f303 	mul.w	r3, r1, r3
 800293c:	431a      	orrs	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	605a      	str	r2, [r3, #4]
}
 8002942:	bf00      	nop
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800294e:	b480      	push	{r7}
 8002950:	b089      	sub	sp, #36	; 0x24
 8002952:	af00      	add	r7, sp, #0
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	fa93 f3a3 	rbit	r3, r3
 8002968:	613b      	str	r3, [r7, #16]
  return result;
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	fab3 f383 	clz	r3, r3
 8002970:	b2db      	uxtb	r3, r3
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	2103      	movs	r1, #3
 8002976:	fa01 f303 	lsl.w	r3, r1, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	401a      	ands	r2, r3
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	fa93 f3a3 	rbit	r3, r3
 8002988:	61bb      	str	r3, [r7, #24]
  return result;
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	fab3 f383 	clz	r3, r3
 8002990:	b2db      	uxtb	r3, r3
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	fa01 f303 	lsl.w	r3, r1, r3
 800299a:	431a      	orrs	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80029a0:	bf00      	nop
 80029a2:	3724      	adds	r7, #36	; 0x24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b089      	sub	sp, #36	; 0x24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	fa93 f3a3 	rbit	r3, r3
 80029c6:	613b      	str	r3, [r7, #16]
  return result;
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	fab3 f383 	clz	r3, r3
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	2103      	movs	r1, #3
 80029d4:	fa01 f303 	lsl.w	r3, r1, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	401a      	ands	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	fa93 f3a3 	rbit	r3, r3
 80029e6:	61bb      	str	r3, [r7, #24]
  return result;
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	fab3 f383 	clz	r3, r3
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	fa01 f303 	lsl.w	r3, r1, r3
 80029f8:	431a      	orrs	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	60da      	str	r2, [r3, #12]
}
 80029fe:	bf00      	nop
 8002a00:	3724      	adds	r7, #36	; 0x24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b089      	sub	sp, #36	; 0x24
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6a1a      	ldr	r2, [r3, #32]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	fa93 f3a3 	rbit	r3, r3
 8002a24:	613b      	str	r3, [r7, #16]
  return result;
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	fab3 f383 	clz	r3, r3
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	210f      	movs	r1, #15
 8002a32:	fa01 f303 	lsl.w	r3, r1, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	401a      	ands	r2, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	fa93 f3a3 	rbit	r3, r3
 8002a44:	61bb      	str	r3, [r7, #24]
  return result;
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	fab3 f383 	clz	r3, r3
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	fa01 f303 	lsl.w	r3, r1, r3
 8002a56:	431a      	orrs	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002a5c:	bf00      	nop
 8002a5e:	3724      	adds	r7, #36	; 0x24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b089      	sub	sp, #36	; 0x24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	0a1b      	lsrs	r3, r3, #8
 8002a7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	fa93 f3a3 	rbit	r3, r3
 8002a84:	613b      	str	r3, [r7, #16]
  return result;
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	fab3 f383 	clz	r3, r3
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	210f      	movs	r1, #15
 8002a92:	fa01 f303 	lsl.w	r3, r1, r3
 8002a96:	43db      	mvns	r3, r3
 8002a98:	401a      	ands	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	0a1b      	lsrs	r3, r3, #8
 8002a9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	fa93 f3a3 	rbit	r3, r3
 8002aa6:	61bb      	str	r3, [r7, #24]
  return result;
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	fab3 f383 	clz	r3, r3
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002abe:	bf00      	nop
 8002ac0:	3724      	adds	r7, #36	; 0x24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b088      	sub	sp, #32
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	fa93 f3a3 	rbit	r3, r3
 8002ae8:	613b      	str	r3, [r7, #16]
  return result;
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	fab3 f383 	clz	r3, r3
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002af4:	e049      	b.n	8002b8a <LL_GPIO_Init+0xc0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	2101      	movs	r1, #1
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	fa01 f303 	lsl.w	r3, r1, r3
 8002b02:	4013      	ands	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d03b      	beq.n	8002b84 <LL_GPIO_Init+0xba>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	461a      	mov	r2, r3
 8002b12:	69b9      	ldr	r1, [r7, #24]
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7ff fed3 	bl	80028c0 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d003      	beq.n	8002b2a <LL_GPIO_Init+0x60>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d106      	bne.n	8002b38 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	69b9      	ldr	r1, [r7, #24]
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff ff0b 	bl	800294e <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	69b9      	ldr	r1, [r7, #24]
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7ff ff33 	bl	80029ac <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d11a      	bne.n	8002b84 <LL_GPIO_Init+0xba>
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	fa93 f3a3 	rbit	r3, r3
 8002b58:	60bb      	str	r3, [r7, #8]
  return result;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002b5c:	fab3 f383 	clz	r3, r3
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b07      	cmp	r3, #7
 8002b64:	d807      	bhi.n	8002b76 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	69b9      	ldr	r1, [r7, #24]
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7ff ff4b 	bl	8002a0a <LL_GPIO_SetAFPin_0_7>
 8002b74:	e006      	b.n	8002b84 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	69b9      	ldr	r1, [r7, #24]
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7ff ff72 	bl	8002a68 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	3301      	adds	r3, #1
 8002b88:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	fa22 f303 	lsr.w	r3, r2, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1ae      	bne.n	8002af6 <LL_GPIO_Init+0x2c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d003      	beq.n	8002ba8 <LL_GPIO_Init+0xde>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d107      	bne.n	8002bb8 <LL_GPIO_Init+0xee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	6819      	ldr	r1, [r3, #0]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7ff feb3 	bl	800291e <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3720      	adds	r7, #32
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
 8002bca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
 8002c56:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	f043 0201 	orr.w	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	615a      	str	r2, [r3, #20]
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
	...

08002ca8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a3d      	ldr	r2, [pc, #244]	; (8002db0 <LL_TIM_Init+0x108>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d013      	beq.n	8002ce8 <LL_TIM_Init+0x40>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc6:	d00f      	beq.n	8002ce8 <LL_TIM_Init+0x40>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a3a      	ldr	r2, [pc, #232]	; (8002db4 <LL_TIM_Init+0x10c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d00b      	beq.n	8002ce8 <LL_TIM_Init+0x40>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a39      	ldr	r2, [pc, #228]	; (8002db8 <LL_TIM_Init+0x110>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d007      	beq.n	8002ce8 <LL_TIM_Init+0x40>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a38      	ldr	r2, [pc, #224]	; (8002dbc <LL_TIM_Init+0x114>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d003      	beq.n	8002ce8 <LL_TIM_Init+0x40>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a37      	ldr	r2, [pc, #220]	; (8002dc0 <LL_TIM_Init+0x118>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d106      	bne.n	8002cf6 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a2d      	ldr	r2, [pc, #180]	; (8002db0 <LL_TIM_Init+0x108>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d02b      	beq.n	8002d56 <LL_TIM_Init+0xae>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d04:	d027      	beq.n	8002d56 <LL_TIM_Init+0xae>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a2a      	ldr	r2, [pc, #168]	; (8002db4 <LL_TIM_Init+0x10c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d023      	beq.n	8002d56 <LL_TIM_Init+0xae>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a29      	ldr	r2, [pc, #164]	; (8002db8 <LL_TIM_Init+0x110>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d01f      	beq.n	8002d56 <LL_TIM_Init+0xae>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a28      	ldr	r2, [pc, #160]	; (8002dbc <LL_TIM_Init+0x114>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d01b      	beq.n	8002d56 <LL_TIM_Init+0xae>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a27      	ldr	r2, [pc, #156]	; (8002dc0 <LL_TIM_Init+0x118>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d017      	beq.n	8002d56 <LL_TIM_Init+0xae>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a26      	ldr	r2, [pc, #152]	; (8002dc4 <LL_TIM_Init+0x11c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d013      	beq.n	8002d56 <LL_TIM_Init+0xae>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a25      	ldr	r2, [pc, #148]	; (8002dc8 <LL_TIM_Init+0x120>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00f      	beq.n	8002d56 <LL_TIM_Init+0xae>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a24      	ldr	r2, [pc, #144]	; (8002dcc <LL_TIM_Init+0x124>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d00b      	beq.n	8002d56 <LL_TIM_Init+0xae>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a23      	ldr	r2, [pc, #140]	; (8002dd0 <LL_TIM_Init+0x128>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d007      	beq.n	8002d56 <LL_TIM_Init+0xae>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a22      	ldr	r2, [pc, #136]	; (8002dd4 <LL_TIM_Init+0x12c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d003      	beq.n	8002d56 <LL_TIM_Init+0xae>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a21      	ldr	r2, [pc, #132]	; (8002dd8 <LL_TIM_Init+0x130>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d106      	bne.n	8002d64 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	4619      	mov	r1, r3
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff ff34 	bl	8002bde <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7ff ff20 	bl	8002bc2 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a0a      	ldr	r2, [pc, #40]	; (8002db0 <LL_TIM_Init+0x108>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d003      	beq.n	8002d92 <LL_TIM_Init+0xea>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a0c      	ldr	r2, [pc, #48]	; (8002dc0 <LL_TIM_Init+0x118>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d105      	bne.n	8002d9e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	7c1b      	ldrb	r3, [r3, #16]
 8002d96:	4619      	mov	r1, r3
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff ff2e 	bl	8002bfa <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7ff ff71 	bl	8002c86 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40010000 	.word	0x40010000
 8002db4:	40000400 	.word	0x40000400
 8002db8:	40000800 	.word	0x40000800
 8002dbc:	40000c00 	.word	0x40000c00
 8002dc0:	40010400 	.word	0x40010400
 8002dc4:	40014000 	.word	0x40014000
 8002dc8:	40014400 	.word	0x40014400
 8002dcc:	40014800 	.word	0x40014800
 8002dd0:	40001800 	.word	0x40001800
 8002dd4:	40001c00 	.word	0x40001c00
 8002dd8:	40002000 	.word	0x40002000

08002ddc <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2b10      	cmp	r3, #16
 8002df0:	d012      	beq.n	8002e18 <LL_TIM_OC_Init+0x3c>
 8002df2:	2b10      	cmp	r3, #16
 8002df4:	d802      	bhi.n	8002dfc <LL_TIM_OC_Init+0x20>
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d007      	beq.n	8002e0a <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002dfa:	e022      	b.n	8002e42 <LL_TIM_OC_Init+0x66>
  switch (Channel)
 8002dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e00:	d011      	beq.n	8002e26 <LL_TIM_OC_Init+0x4a>
 8002e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e06:	d015      	beq.n	8002e34 <LL_TIM_OC_Init+0x58>
      break;
 8002e08:	e01b      	b.n	8002e42 <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 f867 	bl	8002ee0 <OC1Config>
 8002e12:	4603      	mov	r3, r0
 8002e14:	75fb      	strb	r3, [r7, #23]
      break;
 8002e16:	e014      	b.n	8002e42 <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 f8cc 	bl	8002fb8 <OC2Config>
 8002e20:	4603      	mov	r3, r0
 8002e22:	75fb      	strb	r3, [r7, #23]
      break;
 8002e24:	e00d      	b.n	8002e42 <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 f935 	bl	8003098 <OC3Config>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	75fb      	strb	r3, [r7, #23]
      break;
 8002e32:	e006      	b.n	8002e42 <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 f99e 	bl	8003178 <OC4Config>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8002e40:	bf00      	nop
  }

  return result;
 8002e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	7b12      	ldrb	r2, [r2, #12]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	89d2      	ldrh	r2, [r2, #14]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
	...

08002ee0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	f023 0201 	bic.w	r2, r3, #1
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f023 0303 	bic.w	r3, r3, #3
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f023 0202 	bic.w	r2, r3, #2
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f023 0201 	bic.w	r2, r3, #1
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a1c      	ldr	r2, [pc, #112]	; (8002fb0 <OC1Config+0xd0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d003      	beq.n	8002f4a <OC1Config+0x6a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a1b      	ldr	r2, [pc, #108]	; (8002fb4 <OC1Config+0xd4>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d11e      	bne.n	8002f88 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f023 0208 	bic.w	r2, r3, #8
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4313      	orrs	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f023 0204 	bic.w	r2, r3, #4
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4313      	orrs	r3, r2
 8002f68:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	4313      	orrs	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	4619      	mov	r1, r3
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7ff fe3b 	bl	8002c16 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40010000 	.word	0x40010000
 8002fb4:	40010400 	.word	0x40010400

08002fb8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	f023 0210 	bic.w	r2, r3, #16
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	021b      	lsls	r3, r3, #8
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f023 0220 	bic.w	r2, r3, #32
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	011b      	lsls	r3, r3, #4
 8003004:	4313      	orrs	r3, r2
 8003006:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f023 0210 	bic.w	r2, r3, #16
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	4313      	orrs	r3, r2
 8003016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a1d      	ldr	r2, [pc, #116]	; (8003090 <OC2Config+0xd8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d003      	beq.n	8003028 <OC2Config+0x70>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a1c      	ldr	r2, [pc, #112]	; (8003094 <OC2Config+0xdc>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d11f      	bne.n	8003068 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	019b      	lsls	r3, r3, #6
 8003034:	4313      	orrs	r3, r2
 8003036:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	019b      	lsls	r3, r3, #6
 8003044:	4313      	orrs	r3, r2
 8003046:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4313      	orrs	r3, r2
 8003056:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4313      	orrs	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4619      	mov	r1, r3
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff fdd9 	bl	8002c32 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40010000 	.word	0x40010000
 8003094:	40010400 	.word	0x40010400

08003098 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 0303 	bic.w	r3, r3, #3
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	021b      	lsls	r3, r3, #8
 80030e2:	4313      	orrs	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	021b      	lsls	r3, r3, #8
 80030f2:	4313      	orrs	r3, r2
 80030f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a1d      	ldr	r2, [pc, #116]	; (8003170 <OC3Config+0xd8>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d003      	beq.n	8003106 <OC3Config+0x6e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a1c      	ldr	r2, [pc, #112]	; (8003174 <OC3Config+0xdc>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d11f      	bne.n	8003146 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	029b      	lsls	r3, r3, #10
 8003112:	4313      	orrs	r3, r2
 8003114:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	029b      	lsls	r3, r3, #10
 8003122:	4313      	orrs	r3, r2
 8003124:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	015b      	lsls	r3, r3, #5
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	4619      	mov	r1, r3
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7ff fd78 	bl	8002c4e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40010000 	.word	0x40010000
 8003174:	40010400 	.word	0x40010400

08003178 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	021b      	lsls	r3, r3, #8
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	031b      	lsls	r3, r3, #12
 80031c4:	4313      	orrs	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	031b      	lsls	r3, r3, #12
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a11      	ldr	r2, [pc, #68]	; (8003220 <OC4Config+0xa8>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d003      	beq.n	80031e8 <OC4Config+0x70>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a10      	ldr	r2, [pc, #64]	; (8003224 <OC4Config+0xac>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d107      	bne.n	80031f8 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	019b      	lsls	r3, r3, #6
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	4619      	mov	r1, r3
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff fd2d 	bl	8002c6a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40010000 	.word	0x40010000
 8003224:	40010400 	.word	0x40010400

08003228 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <_ZNSt6vectorIiSaIiEEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4618      	mov	r0, r3
 800324c:	f000 f82a 	bl	80032a4 <_ZNSt12_Vector_baseIiSaIiEEC1Ev>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <_ZNSt6vectorIiSaIiEE9push_backERKi>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	429a      	cmp	r2, r3
 800326e:	d00c      	beq.n	800328a <_ZNSt6vectorIiSaIiEE9push_backERKi+0x30>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	4619      	mov	r1, r3
 800327a:	f000 f844 	bl	8003306 <_ZNSt16allocator_traitsISaIiEE9constructIiJRKiEEEvRS0_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	1d1a      	adds	r2, r3, #4
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	605a      	str	r2, [r3, #4]
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8003288:	e008      	b.n	800329c <_ZNSt6vectorIiSaIiEE9push_backERKi+0x42>
	  _M_realloc_insert(end(), __x);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f84e 	bl	800332c <_ZNSt6vectorIiSaIiEE3endEv>
 8003290:	4603      	mov	r3, r0
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	4619      	mov	r1, r3
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f85a 	bl	8003350 <_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_>
      }
 800329c:	bf00      	nop
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <_ZNSt12_Vector_baseIiSaIiEEC1Ev>:
      _Vector_base()
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 f8da 	bl	8003468 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1Ev>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4618      	mov	r0, r3
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4618      	mov	r0, r3
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80032e0:	68b9      	ldr	r1, [r7, #8]
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 f8e8 	bl	80034b8 <_ZSt8_DestroyIPiEvT_S1_>
    }
 80032e8:	bf00      	nop
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4618      	mov	r0, r3
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <_ZNSt16allocator_traitsISaIiEE9constructIiJRKiEEEvRS0_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8003306:	b580      	push	{r7, lr}
 8003308:	b084      	sub	sp, #16
 800330a:	af00      	add	r7, sp, #0
 800330c:	60f8      	str	r0, [r7, #12]
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7ff ffec 	bl	80032f0 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 8003318:	4603      	mov	r3, r0
 800331a:	461a      	mov	r2, r3
 800331c:	68b9      	ldr	r1, [r7, #8]
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f8d7 	bl	80034d2 <_ZN9__gnu_cxx13new_allocatorIiE9constructIiJRKiEEEvPT_DpOT0_>
 8003324:	bf00      	nop
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <_ZNSt6vectorIiSaIiEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	1d1a      	adds	r2, r3, #4
 8003338:	f107 030c 	add.w	r3, r7, #12
 800333c:	4611      	mov	r1, r2
 800333e:	4618      	mov	r0, r3
 8003340:	f000 f8df 	bl	8003502 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8003350:	b5b0      	push	{r4, r5, r7, lr}
 8003352:	b08a      	sub	sp, #40	; 0x28
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 800335c:	4a41      	ldr	r2, [pc, #260]	; (8003464 <_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_+0x114>)
 800335e:	2101      	movs	r1, #1
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 f8de 	bl	8003522 <_ZNKSt6vectorIiSaIiEE12_M_check_lenEjPKc>
 8003366:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 f922 	bl	80035b2 <_ZNSt6vectorIiSaIiEE5beginEv>
 800336e:	4603      	mov	r3, r0
 8003370:	617b      	str	r3, [r7, #20]
 8003372:	f107 0214 	add.w	r2, r7, #20
 8003376:	f107 0308 	add.w	r3, r7, #8
 800337a:	4611      	mov	r1, r2
 800337c:	4618      	mov	r0, r3
 800337e:	f000 f928 	bl	80035d2 <_ZN9__gnu_cxxmiIPiSt6vectorIiSaIiEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8003382:	4603      	mov	r3, r0
 8003384:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800338a:	4618      	mov	r0, r3
 800338c:	f000 f937 	bl	80035fe <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>
 8003390:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8003396:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800339c:	69fa      	ldr	r2, [r7, #28]
 800339e:	18d5      	adds	r5, r2, r3
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7ff ffa5 	bl	80032f0 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 80033a6:	4603      	mov	r3, r0
 80033a8:	461a      	mov	r2, r3
 80033aa:	4629      	mov	r1, r5
 80033ac:	4620      	mov	r0, r4
 80033ae:	f7ff ffaa 	bl	8003306 <_ZNSt16allocator_traitsISaIiEE9constructIiJRKiEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80033b2:	2300      	movs	r3, #0
 80033b4:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681c      	ldr	r4, [r3, #0]
 80033ba:	f107 0308 	add.w	r3, r7, #8
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 f931 	bl	8003626 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
 80033c4:	4603      	mov	r3, r0
 80033c6:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff ff77 	bl	80032be <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 80033d0:	4603      	mov	r3, r0
	  __new_finish
 80033d2:	69fa      	ldr	r2, [r7, #28]
 80033d4:	4629      	mov	r1, r5
 80033d6:	4620      	mov	r0, r4
 80033d8:	f000 f930 	bl	800363c <_ZSt34__uninitialized_move_if_noexcept_aIPiS0_SaIiEET0_T_S3_S2_RT1_>
 80033dc:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	3304      	adds	r3, #4
 80033e2:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 80033e4:	f107 0308 	add.w	r3, r7, #8
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 f91c 	bl	8003626 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
 80033ee:	4603      	mov	r3, r0
 80033f0:	681c      	ldr	r4, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ff60 	bl	80032be <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 80033fe:	4603      	mov	r3, r0
	  __new_finish
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4629      	mov	r1, r5
 8003404:	4620      	mov	r0, r4
 8003406:	f000 f919 	bl	800363c <_ZSt34__uninitialized_move_if_noexcept_aIPiS0_SaIiEET0_T_S3_S2_RT1_>
 800340a:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681c      	ldr	r4, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff ff51 	bl	80032be <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 800341c:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800341e:	461a      	mov	r2, r3
 8003420:	4629      	mov	r1, r5
 8003422:	4620      	mov	r0, r4
 8003424:	f7ff ff56 	bl	80032d4 <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8003432:	461a      	mov	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 800343c:	461a      	mov	r2, r3
 800343e:	f000 f828 	bl	8003492 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>
      this->_M_impl._M_start = __new_start;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	69fa      	ldr	r2, [r7, #28]
 8003446:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	69fa      	ldr	r2, [r7, #28]
 8003454:	441a      	add	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	609a      	str	r2, [r3, #8]
    }
 800345a:	bf00      	nop
 800345c:	3728      	adds	r7, #40	; 0x28
 800345e:	46bd      	mov	sp, r7
 8003460:	bdb0      	pop	{r4, r5, r7, pc}
 8003462:	bf00      	nop
 8003464:	08006680 	.word	0x08006680

08003468 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1Ev>:
	_Vector_impl()
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f8fc 	bl	800366e <_ZNSaIiEC1Ev>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	609a      	str	r2, [r3, #8]
	{ }
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4618      	mov	r0, r3
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>:
      _M_deallocate(pointer __p, size_t __n)
 8003492:	b580      	push	{r7, lr}
 8003494:	b084      	sub	sp, #16
 8003496:	af00      	add	r7, sp, #0
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	607a      	str	r2, [r7, #4]
	if (__p)
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 f8eb 	bl	8003686 <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>
      }
 80034b0:	bf00      	nop
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <_ZSt8_DestroyIPiEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80034c2:	6839      	ldr	r1, [r7, #0]
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 f8ed 	bl	80036a4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_>
    }
 80034ca:	bf00      	nop
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <_ZN9__gnu_cxx13new_allocatorIiE9constructIiJRKiEEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80034d2:	b590      	push	{r4, r7, lr}
 80034d4:	b085      	sub	sp, #20
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7ff ff06 	bl	80032f0 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 80034e4:	4603      	mov	r3, r0
 80034e6:	681c      	ldr	r4, [r3, #0]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4619      	mov	r1, r3
 80034ec:	2004      	movs	r0, #4
 80034ee:	f7ff fe9b 	bl	8003228 <_ZnwjPv>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d000      	beq.n	80034fa <_ZN9__gnu_cxx13new_allocatorIiE9constructIiJRKiEEEvPT_DpOT0_+0x28>
 80034f8:	601c      	str	r4, [r3, #0]
 80034fa:	bf00      	nop
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd90      	pop	{r4, r7, pc}

08003502 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4618      	mov	r0, r3
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <_ZNKSt6vectorIiSaIiEE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8003522:	b590      	push	{r4, r7, lr}
 8003524:	b087      	sub	sp, #28
 8003526:	af00      	add	r7, sp, #0
 8003528:	60f8      	str	r0, [r7, #12]
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 f8c3 	bl	80036ba <_ZNKSt6vectorIiSaIiEE8max_sizeEv>
 8003534:	4604      	mov	r4, r0
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 f8d0 	bl	80036dc <_ZNKSt6vectorIiSaIiEE4sizeEv>
 800353c:	4603      	mov	r3, r0
 800353e:	1ae2      	subs	r2, r4, r3
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	429a      	cmp	r2, r3
 8003544:	bf34      	ite	cc
 8003546:	2301      	movcc	r3, #1
 8003548:	2300      	movcs	r3, #0
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <_ZNKSt6vectorIiSaIiEE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4618      	mov	r0, r3
 8003554:	f001 ff07 	bl	8005366 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + std::max(size(), __n);
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 f8bf 	bl	80036dc <_ZNKSt6vectorIiSaIiEE4sizeEv>
 800355e:	4604      	mov	r4, r0
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 f8bb 	bl	80036dc <_ZNKSt6vectorIiSaIiEE4sizeEv>
 8003566:	4603      	mov	r3, r0
 8003568:	613b      	str	r3, [r7, #16]
 800356a:	f107 0208 	add.w	r2, r7, #8
 800356e:	f107 0310 	add.w	r3, r7, #16
 8003572:	4611      	mov	r1, r2
 8003574:	4618      	mov	r0, r3
 8003576:	f000 f8c2 	bl	80036fe <_ZSt3maxIjERKT_S2_S2_>
 800357a:	4603      	mov	r3, r0
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4423      	add	r3, r4
 8003580:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 f8aa 	bl	80036dc <_ZNKSt6vectorIiSaIiEE4sizeEv>
 8003588:	4602      	mov	r2, r0
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	4293      	cmp	r3, r2
 800358e:	d306      	bcc.n	800359e <_ZNKSt6vectorIiSaIiEE12_M_check_lenEjPKc+0x7c>
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 f892 	bl	80036ba <_ZNKSt6vectorIiSaIiEE8max_sizeEv>
 8003596:	4602      	mov	r2, r0
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	4293      	cmp	r3, r2
 800359c:	d904      	bls.n	80035a8 <_ZNKSt6vectorIiSaIiEE12_M_check_lenEjPKc+0x86>
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 f88b 	bl	80036ba <_ZNKSt6vectorIiSaIiEE8max_sizeEv>
 80035a4:	4603      	mov	r3, r0
 80035a6:	e000      	b.n	80035aa <_ZNKSt6vectorIiSaIiEE12_M_check_lenEjPKc+0x88>
 80035a8:	697b      	ldr	r3, [r7, #20]
      }
 80035aa:	4618      	mov	r0, r3
 80035ac:	371c      	adds	r7, #28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd90      	pop	{r4, r7, pc}

080035b2 <_ZNSt6vectorIiSaIiEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b084      	sub	sp, #16
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	f107 030c 	add.w	r3, r7, #12
 80035c0:	4611      	mov	r1, r2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff ff9d 	bl	8003502 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <_ZN9__gnu_cxxmiIPiSt6vectorIiSaIiEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80035d2:	b590      	push	{r4, r7, lr}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
 80035da:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f822 	bl	8003626 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
 80035e2:	4603      	mov	r3, r0
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	461c      	mov	r4, r3
 80035e8:	6838      	ldr	r0, [r7, #0]
 80035ea:	f000 f81c 	bl	8003626 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
 80035ee:	4603      	mov	r3, r0
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	1ae3      	subs	r3, r4, r3
 80035f4:	109b      	asrs	r3, r3, #2
 80035f6:	4618      	mov	r0, r3
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd90      	pop	{r4, r7, pc}

080035fe <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80035fe:	b580      	push	{r7, lr}
 8003600:	b082      	sub	sp, #8
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
 8003606:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d006      	beq.n	800361c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj+0x1e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6839      	ldr	r1, [r7, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f000 f887 	bl	8003726 <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>
 8003618:	4603      	mov	r3, r0
 800361a:	e000      	b.n	800361e <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj+0x20>
 800361c:	2300      	movs	r3, #0
      }
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4618      	mov	r0, r3
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <_ZSt34__uninitialized_move_if_noexcept_aIPiS0_SaIiEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800363c:	b590      	push	{r4, r7, lr}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 f87a 	bl	8003744 <_ZSt32__make_move_if_noexcept_iteratorIiSt13move_iteratorIPiEET0_PT_>
 8003650:	4604      	mov	r4, r0
 8003652:	68b8      	ldr	r0, [r7, #8]
 8003654:	f000 f876 	bl	8003744 <_ZSt32__make_move_if_noexcept_iteratorIiSt13move_iteratorIPiEET0_PT_>
 8003658:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	4620      	mov	r0, r4
 8003660:	f000 f87f 	bl	8003762 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPiES1_iET0_T_S4_S3_RSaIT1_E>
 8003664:	4603      	mov	r3, r0
    }
 8003666:	4618      	mov	r0, r3
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	bd90      	pop	{r4, r7, pc}

0800366e <_ZNSaIiEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 800366e:	b580      	push	{r7, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f884 	bl	8003784 <_ZN9__gnu_cxx13new_allocatorIiEC1Ev>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4618      	mov	r0, r3
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003686:	b580      	push	{r7, lr}
 8003688:	b084      	sub	sp, #16
 800368a:	af00      	add	r7, sp, #0
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	68b9      	ldr	r1, [r7, #8]
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f000 f87f 	bl	800379a <_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPij>
 800369c:	bf00      	nop
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <_ZNKSt6vectorIiSaIiEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b082      	sub	sp, #8
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 f881 	bl	80037cc <_ZNKSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 80036ca:	4603      	mov	r3, r0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 f871 	bl	80037b4 <_ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_>
 80036d2:	4603      	mov	r3, r0
 80036d4:	4618      	mov	r0, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <_ZNKSt6vectorIiSaIiEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	461a      	mov	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	109b      	asrs	r3, r3, #2
 80036f2:	4618      	mov	r0, r3
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d201      	bcs.n	8003718 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	e000      	b.n	800371a <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8003718:	687b      	ldr	r3, [r7, #4]
    }
 800371a:	4618      	mov	r0, r3
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003730:	2200      	movs	r2, #0
 8003732:	6839      	ldr	r1, [r7, #0]
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f854 	bl	80037e2 <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv>
 800373a:	4603      	mov	r3, r0
 800373c:	4618      	mov	r0, r3
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <_ZSt32__make_move_if_noexcept_iteratorIiSt13move_iteratorIPiEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800374c:	f107 030c 	add.w	r3, r7, #12
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	4618      	mov	r0, r3
 8003754:	f000 f863 	bl	800381e <_ZNSt13move_iteratorIPiEC1ES0_>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPiES1_iET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003762:	b580      	push	{r7, lr}
 8003764:	b084      	sub	sp, #16
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	607a      	str	r2, [r7, #4]
 800376e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	68b9      	ldr	r1, [r7, #8]
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 f861 	bl	800383c <_ZSt18uninitialized_copyISt13move_iteratorIPiES1_ET0_T_S4_S3_>
 800377a:	4603      	mov	r3, r0
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <_ZN9__gnu_cxx13new_allocatorIiEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4618      	mov	r0, r3
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPij>:
      deallocate(pointer __p, size_type)
 800379a:	b580      	push	{r7, lr}
 800379c:	b084      	sub	sp, #16
 800379e:	af00      	add	r7, sp, #0
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80037a6:	68b8      	ldr	r0, [r7, #8]
 80037a8:	f001 fdc7 	bl	800533a <_ZdlPv>
      }
 80037ac:	bf00      	nop
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <_ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f84f 	bl	8003860 <_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv>
 80037c2:	4603      	mov	r3, r0
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <_ZNKSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4618      	mov	r0, r3
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b084      	sub	sp, #16
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 f836 	bl	8003860 <_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv>
 80037f4:	4602      	mov	r2, r0
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	4293      	cmp	r3, r2
 80037fa:	bf8c      	ite	hi
 80037fc:	2301      	movhi	r3, #1
 80037fe:	2300      	movls	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003806:	f001 fdab 	bl	8005360 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4618      	mov	r0, r3
 8003810:	f001 fd95 	bl	800533e <_Znwj>
 8003814:	4603      	mov	r3, r0
      }
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <_ZNSt13move_iteratorIPiEC1ES0_>:
      move_iterator(iterator_type __i)
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4618      	mov	r0, r3
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <_ZSt18uninitialized_copyISt13move_iteratorIPiES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003848:	2301      	movs	r3, #1
 800384a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	68b9      	ldr	r1, [r7, #8]
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 f811 	bl	8003878 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPiES3_EET0_T_S6_S5_>
 8003856:	4603      	mov	r3, r0
    }
 8003858:	4618      	mov	r0, r3
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8003868:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800386c:	4618      	mov	r0, r3
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPiES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	68b9      	ldr	r1, [r7, #8]
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 f805 	bl	8003898 <_ZSt4copyISt13move_iteratorIPiES1_ET0_T_S4_S3_>
 800388e:	4603      	mov	r3, r0
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <_ZSt4copyISt13move_iteratorIPiES1_ET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8003898:	b590      	push	{r4, r7, lr}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 f80f 	bl	80038c8 <_ZSt12__miter_baseIPiEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80038aa:	4604      	mov	r4, r0
 80038ac:	68b8      	ldr	r0, [r7, #8]
 80038ae:	f000 f80b 	bl	80038c8 <_ZSt12__miter_baseIPiEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80038b2:	4603      	mov	r3, r0
	       __result));
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	4619      	mov	r1, r3
 80038b8:	4620      	mov	r0, r4
 80038ba:	f000 f816 	bl	80038ea <_ZSt14__copy_move_a2ILb1EPiS0_ET1_T0_S2_S1_>
 80038be:	4603      	mov	r3, r0
    }
 80038c0:	4618      	mov	r0, r3
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd90      	pop	{r4, r7, pc}

080038c8 <_ZSt12__miter_baseIPiEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 80038d0:	1d3b      	adds	r3, r7, #4
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 f825 	bl	8003922 <_ZNKSt13move_iteratorIPiE4baseEv>
 80038d8:	4603      	mov	r3, r0
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 f82d 	bl	800393a <_ZSt12__miter_baseIPiET_S1_>
 80038e0:	4603      	mov	r3, r0
 80038e2:	4618      	mov	r0, r3
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <_ZSt14__copy_move_a2ILb1EPiS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80038ea:	b5b0      	push	{r4, r5, r7, lr}
 80038ec:	b084      	sub	sp, #16
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	60f8      	str	r0, [r7, #12]
 80038f2:	60b9      	str	r1, [r7, #8]
 80038f4:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 f82a 	bl	8003950 <_ZSt12__niter_baseIPiET_S1_>
 80038fc:	4604      	mov	r4, r0
 80038fe:	68b8      	ldr	r0, [r7, #8]
 8003900:	f000 f826 	bl	8003950 <_ZSt12__niter_baseIPiET_S1_>
 8003904:	4605      	mov	r5, r0
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f822 	bl	8003950 <_ZSt12__niter_baseIPiET_S1_>
 800390c:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 800390e:	461a      	mov	r2, r3
 8003910:	4629      	mov	r1, r5
 8003912:	4620      	mov	r0, r4
 8003914:	f000 f827 	bl	8003966 <_ZSt13__copy_move_aILb1EPiS0_ET1_T0_S2_S1_>
 8003918:	4603      	mov	r3, r0
    }
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bdb0      	pop	{r4, r5, r7, pc}

08003922 <_ZNKSt13move_iteratorIPiE4baseEv>:
      base() const
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <_ZSt12__miter_baseIPiET_S1_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4618      	mov	r0, r3
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <_ZSt12__niter_baseIPiET_S1_>:
    __niter_base(_Iterator __it)
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4618      	mov	r0, r3
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <_ZSt13__copy_move_aILb1EPiS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003966:	b580      	push	{r7, lr}
 8003968:	b086      	sub	sp, #24
 800396a:	af00      	add	r7, sp, #0
 800396c:	60f8      	str	r0, [r7, #12]
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8003972:	2301      	movs	r3, #1
 8003974:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 f805 	bl	800398a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
 8003980:	4603      	mov	r3, r0
    }
 8003982:	4618      	mov	r0, r3
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800398a:	b580      	push	{r7, lr}
 800398c:	b086      	sub	sp, #24
 800398e:	af00      	add	r7, sp, #0
 8003990:	60f8      	str	r0, [r7, #12]
 8003992:	60b9      	str	r1, [r7, #8]
 8003994:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	109b      	asrs	r3, r3, #2
 800399e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d006      	beq.n	80039b4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	461a      	mov	r2, r3
 80039ac:	68f9      	ldr	r1, [r7, #12]
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f002 fd38 	bl	8006424 <memmove>
	  return __result + _Num;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	4413      	add	r3, r2
	}
 80039bc:	4618      	mov	r0, r3
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <LL_TIM_EnableCounter>:
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f043 0201 	orr.w	r2, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	601a      	str	r2, [r3, #0]
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <LL_TIM_CC_EnableChannel>:
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1a      	ldr	r2, [r3, #32]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	621a      	str	r2, [r3, #32]
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <LL_TIM_EnableAllOutputs>:
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a12:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <_ZN3PWM6setTIMEP11TIM_TypeDef>:

#include "PWM.hpp"
#include "stm32f4xx_hal.h"
#include "tim.h"

void PWM::setTIM(TIM_TypeDef* pTIMx){
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	6039      	str	r1, [r7, #0]
	mTIMx = pTIMx;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	601a      	str	r2, [r3, #0]
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <_ZN3PWM5setCHEi>:

//void PWM::setCH(__IO uint32_t pCCR);

void PWM::setCH(int pCH){
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	6039      	str	r1, [r7, #0]
	mCH = pCH;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	605a      	str	r2, [r3, #4]
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <_ZN3PWM4InitEv>:

void PWM::Init(){
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b082      	sub	sp, #8
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]

	if(mCH==0){//error check
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d100      	bne.n	8003a70 <_ZN3PWM4InitEv+0x12>
		while(1){}
 8003a6e:	e7fe      	b.n	8003a6e <_ZN3PWM4InitEv+0x10>
	}

	//mREG Init
	if (mCH == 1){
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d105      	bne.n	8003a84 <_ZN3PWM4InitEv+0x26>
		mREG=&(mTIMx->CCR1);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	609a      	str	r2, [r3, #8]
	}
	if (mCH == 2){
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d105      	bne.n	8003a98 <_ZN3PWM4InitEv+0x3a>
		mREG=&(mTIMx->CCR2);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	609a      	str	r2, [r3, #8]
	}
	if (mCH == 3){
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d105      	bne.n	8003aac <_ZN3PWM4InitEv+0x4e>
		mREG=&(mTIMx->CCR3);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	609a      	str	r2, [r3, #8]
	}
	if (mCH == 4){
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d105      	bne.n	8003ac0 <_ZN3PWM4InitEv+0x62>
		mREG=&(mTIMx->CCR3);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	609a      	str	r2, [r3, #8]
	}

	if(mREG==NULL){//error check
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d100      	bne.n	8003aca <_ZN3PWM4InitEv+0x6c>
		while(1){}
 8003ac8:	e7fe      	b.n	8003ac8 <_ZN3PWM4InitEv+0x6a>
	}
	//mREG Init end

	//PWM Channel Init
	if(mTIMx==NULL){//error check
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d100      	bne.n	8003ad4 <_ZN3PWM4InitEv+0x76>
		while(1){}
 8003ad2:	e7fe      	b.n	8003ad2 <_ZN3PWM4InitEv+0x74>
	}
	if (mCH == 1){
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d105      	bne.n	8003ae8 <_ZN3PWM4InitEv+0x8a>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH1);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7ff ff7e 	bl	80039e4 <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 2){
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d105      	bne.n	8003afc <_ZN3PWM4InitEv+0x9e>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH2);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2110      	movs	r1, #16
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff ff74 	bl	80039e4 <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 3){
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d106      	bne.n	8003b12 <_ZN3PWM4InitEv+0xb4>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH3);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff ff69 	bl	80039e4 <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 4){
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d106      	bne.n	8003b28 <_ZN3PWM4InitEv+0xca>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH4);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff ff5e 	bl	80039e4 <LL_TIM_CC_EnableChannel>
	}
	//PWM Channel Init end

	//PWM TIM Init
	LL_TIM_EnableCounter(mTIMx);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff ff49 	bl	80039c4 <LL_TIM_EnableCounter>
	//LL_TIM_GenerateEvent_UPDATE(TIM1);//
	LL_TIM_EnableAllOutputs(mTIMx);// need
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff ff65 	bl	8003a06 <LL_TIM_EnableAllOutputs>
	//PWM TIM Init end

}
 8003b3c:	bf00      	nop
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <_ZN3PWM4DutyEi>:

void PWM::Duty(int pDuty){
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
	WRITE_REG(*mREG, pDuty);
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	601a      	str	r2, [r3, #0]
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
	...

08003b64 <__NVIC_GetPriorityGrouping>:
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b68:	4b04      	ldr	r3, [pc, #16]	; (8003b7c <__NVIC_GetPriorityGrouping+0x18>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	0a1b      	lsrs	r3, r3, #8
 8003b6e:	f003 0307 	and.w	r3, r3, #7
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	e000ed00 	.word	0xe000ed00

08003b80 <__NVIC_EnableIRQ>:
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	db0b      	blt.n	8003baa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	f003 021f 	and.w	r2, r3, #31
 8003b98:	4907      	ldr	r1, [pc, #28]	; (8003bb8 <__NVIC_EnableIRQ+0x38>)
 8003b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9e:	095b      	lsrs	r3, r3, #5
 8003ba0:	2001      	movs	r0, #1
 8003ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	e000e100 	.word	0xe000e100

08003bbc <__NVIC_SetPriority>:
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	6039      	str	r1, [r7, #0]
 8003bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	db0a      	blt.n	8003be6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	490c      	ldr	r1, [pc, #48]	; (8003c08 <__NVIC_SetPriority+0x4c>)
 8003bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bda:	0112      	lsls	r2, r2, #4
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	440b      	add	r3, r1
 8003be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003be4:	e00a      	b.n	8003bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	4908      	ldr	r1, [pc, #32]	; (8003c0c <__NVIC_SetPriority+0x50>)
 8003bec:	79fb      	ldrb	r3, [r7, #7]
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	3b04      	subs	r3, #4
 8003bf4:	0112      	lsls	r2, r2, #4
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	761a      	strb	r2, [r3, #24]
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	e000e100 	.word	0xe000e100
 8003c0c:	e000ed00 	.word	0xe000ed00

08003c10 <NVIC_EncodePriority>:
{
 8003c10:	b480      	push	{r7}
 8003c12:	b089      	sub	sp, #36	; 0x24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f003 0307 	and.w	r3, r3, #7
 8003c22:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f1c3 0307 	rsb	r3, r3, #7
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	bf28      	it	cs
 8003c2e:	2304      	movcs	r3, #4
 8003c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	3304      	adds	r3, #4
 8003c36:	2b06      	cmp	r3, #6
 8003c38:	d902      	bls.n	8003c40 <NVIC_EncodePriority+0x30>
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	3b03      	subs	r3, #3
 8003c3e:	e000      	b.n	8003c42 <NVIC_EncodePriority+0x32>
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	43da      	mvns	r2, r3
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	401a      	ands	r2, r3
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c62:	43d9      	mvns	r1, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c68:	4313      	orrs	r3, r2
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3724      	adds	r7, #36	; 0x24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <LL_ADC_REG_SetSequencerRanks>:
{
 8003c76:	b490      	push	{r4, r7}
 8003c78:	b086      	sub	sp, #24
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	60f8      	str	r0, [r7, #12]
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	332c      	adds	r3, #44	; 0x2c
 8003c86:	4619      	mov	r1, r3
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c8e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003c92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	fa92 f2a2 	rbit	r2, r2
 8003c9a:	613a      	str	r2, [r7, #16]
  return result;
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	fab2 f282 	clz	r2, r2
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	40d3      	lsrs	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8003cac:	6822      	ldr	r2, [r4, #0]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f003 031f 	and.w	r3, r3, #31
 8003cb4:	211f      	movs	r1, #31
 8003cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	401a      	ands	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f003 011f 	and.w	r1, r3, #31
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f003 031f 	and.w	r3, r3, #31
 8003cca:	fa01 f303 	lsl.w	r3, r1, r3
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	6023      	str	r3, [r4, #0]
}
 8003cd2:	bf00      	nop
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc90      	pop	{r4, r7}
 8003cda:	4770      	bx	lr

08003cdc <LL_ADC_REG_SetFlagEndOfConversion>:
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	609a      	str	r2, [r3, #8]
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <LL_ADC_INJ_SetSequencerRanks>:
{
 8003d02:	b490      	push	{r4, r7}
 8003d04:	b084      	sub	sp, #16
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	607a      	str	r2, [r7, #4]
  register uint32_t tmpreg1 = (READ_BIT(ADCx->JSQR, ADC_JSQR_JL) >> ADC_JSQR_JL_Pos) + 1U;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d12:	0d1b      	lsrs	r3, r3, #20
 8003d14:	f003 0303 	and.w	r3, r3, #3
 8003d18:	1c5c      	adds	r4, r3, #1
  MODIFY_REG(ADCx->JSQR,
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	b2d9      	uxtb	r1, r3
 8003d22:	b2e3      	uxtb	r3, r4
 8003d24:	1acb      	subs	r3, r1, r3
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	3303      	adds	r3, #3
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	460b      	mov	r3, r1
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	211f      	movs	r1, #31
 8003d36:	fa01 f303 	lsl.w	r3, r1, r3
 8003d3a:	43db      	mvns	r3, r3
 8003d3c:	401a      	ands	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f003 011f 	and.w	r1, r3, #31
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	b2d8      	uxtb	r0, r3
 8003d48:	b2e3      	uxtb	r3, r4
 8003d4a:	1ac3      	subs	r3, r0, r3
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	3303      	adds	r3, #3
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	4618      	mov	r0, r3
 8003d54:	4603      	mov	r3, r0
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4403      	add	r3, r0
 8003d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003d64:	bf00      	nop
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bc90      	pop	{r4, r7}
 8003d6c:	4770      	bx	lr

08003d6e <LL_ADC_INJ_SetOffset>:
{
 8003d6e:	b490      	push	{r4, r7}
 8003d70:	b086      	sub	sp, #24
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JOFR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JOFRX_REGOFFSET_MASK));
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	3314      	adds	r3, #20
 8003d7e:	4619      	mov	r1, r3
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003d86:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003d8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	fa92 f2a2 	rbit	r2, r2
 8003d92:	613a      	str	r2, [r7, #16]
  return result;
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	fab2 f282 	clz	r2, r2
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	40d3      	lsrs	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8003da4:	6823      	ldr	r3, [r4, #0]
 8003da6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003daa:	f023 030f 	bic.w	r3, r3, #15
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	6023      	str	r3, [r4, #0]
}
 8003db4:	bf00      	nop
 8003db6:	3718      	adds	r7, #24
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bc90      	pop	{r4, r7}
 8003dbc:	4770      	bx	lr

08003dbe <LL_ADC_SetChannelSamplingTime>:
{
 8003dbe:	b490      	push	{r4, r7}
 8003dc0:	b08a      	sub	sp, #40	; 0x28
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	60f8      	str	r0, [r7, #12]
 8003dc6:	60b9      	str	r1, [r7, #8]
 8003dc8:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	330c      	adds	r3, #12
 8003dce:	4619      	mov	r1, r3
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	fa92 f2a2 	rbit	r2, r2
 8003de2:	613a      	str	r2, [r7, #16]
  return result;
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	fab2 f282 	clz	r2, r2
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	40d3      	lsrs	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8003df4:	6822      	ldr	r2, [r4, #0]
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8003dfc:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8003e00:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e02:	69f9      	ldr	r1, [r7, #28]
 8003e04:	fa91 f1a1 	rbit	r1, r1
 8003e08:	61b9      	str	r1, [r7, #24]
  return result;
 8003e0a:	69b9      	ldr	r1, [r7, #24]
 8003e0c:	fab1 f181 	clz	r1, r1
 8003e10:	b2c9      	uxtb	r1, r1
 8003e12:	40cb      	lsrs	r3, r1
 8003e14:	2107      	movs	r1, #7
 8003e16:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	401a      	ands	r2, r3
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8003e24:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8003e28:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e2c:	fa91 f1a1 	rbit	r1, r1
 8003e30:	6239      	str	r1, [r7, #32]
  return result;
 8003e32:	6a39      	ldr	r1, [r7, #32]
 8003e34:	fab1 f181 	clz	r1, r1
 8003e38:	b2c9      	uxtb	r1, r1
 8003e3a:	40cb      	lsrs	r3, r1
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e42:	4313      	orrs	r3, r2
 8003e44:	6023      	str	r3, [r4, #0]
}
 8003e46:	bf00      	nop
 8003e48:	3728      	adds	r7, #40	; 0x28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc90      	pop	{r4, r7}
 8003e4e:	4770      	bx	lr

08003e50 <LL_ADC_INJ_StartConversionExtTrig>:
  *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISINGFALLING
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StartConversionExtTrig(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689a      	ldr	r2, [r3, #8]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	431a      	orrs	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	609a      	str	r2, [r3, #8]
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <LL_ADC_DisableIT_EOCS>:
  * @rmtoll CR1      EOCIE          LL_ADC_DisableIT_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f023 0220 	bic.w	r2, r3, #32
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	605a      	str	r2, [r3, #4]
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <LL_ADC_DisableIT_JEOS>:
  * @rmtoll CR1      JEOCIE         LL_ADC_EnableIT_JEOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOS(ADC_TypeDef *ADCx)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	605a      	str	r2, [r3, #4]
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
	...

08003eb4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003ebc:	4b08      	ldr	r3, [pc, #32]	; (8003ee0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003ebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ec0:	4907      	ldr	r1, [pc, #28]	; (8003ee0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003ec8:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
}
 8003ed4:	bf00      	nop
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	40023800 	.word	0x40023800

08003ee4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003eec:	4b08      	ldr	r3, [pc, #32]	; (8003f10 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003eee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ef0:	4907      	ldr	r1, [pc, #28]	; (8003f10 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003ef8:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003efa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4013      	ands	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003f02:	68fb      	ldr	r3, [r7, #12]
}
 8003f04:	bf00      	nop
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	40023800 	.word	0x40023800

08003f14 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b096      	sub	sp, #88	; 0x58
 8003f18:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8003f1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	605a      	str	r2, [r3, #4]
 8003f24:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8003f26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	605a      	str	r2, [r3, #4]
 8003f30:	609a      	str	r2, [r3, #8]
 8003f32:	60da      	str	r2, [r3, #12]
 8003f34:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8003f36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	605a      	str	r2, [r3, #4]
 8003f40:	609a      	str	r2, [r3, #8]
 8003f42:	60da      	str	r2, [r3, #12]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 8003f44:	f107 0318 	add.w	r3, r7, #24
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	605a      	str	r2, [r3, #4]
 8003f4e:	609a      	str	r2, [r3, #8]
 8003f50:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f52:	463b      	mov	r3, r7
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	605a      	str	r2, [r3, #4]
 8003f5a:	609a      	str	r2, [r3, #8]
 8003f5c:	60da      	str	r2, [r3, #12]
 8003f5e:	611a      	str	r2, [r3, #16]
 8003f60:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8003f62:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003f66:	f7ff ffbd 	bl	8003ee4 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003f6a:	2004      	movs	r0, #4
 8003f6c:	f7ff ffa2 	bl	8003eb4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003f70:	2001      	movs	r0, #1
 8003f72:	f7ff ff9f 	bl	8003eb4 <LL_AHB1_GRP1_EnableClock>
  PC1   ------> ADC1_IN11
  PC2   ------> ADC1_IN12
  PA0-WKUP   ------> ADC1_IN0
  PA1   ------> ADC1_IN1 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 8003f76:	2307      	movs	r3, #7
 8003f78:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f82:	463b      	mov	r3, r7
 8003f84:	4619      	mov	r1, r3
 8003f86:	4869      	ldr	r0, [pc, #420]	; (800412c <MX_ADC1_Init+0x218>)
 8003f88:	f7fe fd9f 	bl	8002aca <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003f90:	2303      	movs	r3, #3
 8003f92:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003f94:	2300      	movs	r3, #0
 8003f96:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f98:	463b      	mov	r3, r7
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4864      	ldr	r0, [pc, #400]	; (8004130 <MX_ADC1_Init+0x21c>)
 8003f9e:	f7fe fd94 	bl	8002aca <LL_GPIO_Init>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8003fa2:	f7ff fddf 	bl	8003b64 <__NVIC_GetPriorityGrouping>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2200      	movs	r2, #0
 8003faa:	2102      	movs	r1, #2
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff fe2f 	bl	8003c10 <NVIC_EncodePriority>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	2012      	movs	r0, #18
 8003fb8:	f7ff fe00 	bl	8003bbc <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 8003fbc:	2012      	movs	r0, #18
 8003fbe:	f7ff fddf 	bl	8003b80 <__NVIC_EnableIRQ>

  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	653b      	str	r3, [r7, #80]	; 0x50
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8003fca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fce:	657b      	str	r3, [r7, #84]	; 0x54
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8003fd0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4857      	ldr	r0, [pc, #348]	; (8004134 <MX_ADC1_Init+0x220>)
 8003fd8:	f7fe faaa 	bl	8002530 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8003fe0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8003fea:	2300      	movs	r3, #0
 8003fec:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8003fee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ff2:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8003ff4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	484e      	ldr	r0, [pc, #312]	; (8004134 <MX_ADC1_Init+0x220>)
 8003ffc:	f7fe fac4 	bl	8002588 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8004000:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004004:	484b      	ldr	r0, [pc, #300]	; (8004134 <MX_ADC1_Init+0x220>)
 8004006:	f7ff fe69 	bl	8003cdc <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC1);
 800400a:	484a      	ldr	r0, [pc, #296]	; (8004134 <MX_ADC1_Init+0x220>)
 800400c:	f7ff ff31 	bl	8003e72 <LL_ADC_DisableIT_EOCS>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8004010:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004014:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8004016:	2300      	movs	r3, #0
 8004018:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800401a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800401e:	4619      	mov	r1, r3
 8004020:	4845      	ldr	r0, [pc, #276]	; (8004138 <MX_ADC1_Init+0x224>)
 8004022:	f7fe fa3d 	bl	80024a0 <LL_ADC_CommonInit>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8004026:	4a45      	ldr	r2, [pc, #276]	; (800413c <MX_ADC1_Init+0x228>)
 8004028:	f44f 7100 	mov.w	r1, #512	; 0x200
 800402c:	4841      	ldr	r0, [pc, #260]	; (8004134 <MX_ADC1_Init+0x220>)
 800402e:	f7ff fe22 	bl	8003c76 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_28CYCLES);
 8004032:	2202      	movs	r2, #2
 8004034:	4941      	ldr	r1, [pc, #260]	; (800413c <MX_ADC1_Init+0x228>)
 8004036:	483f      	ldr	r0, [pc, #252]	; (8004134 <MX_ADC1_Init+0x220>)
 8004038:	f7ff fec1 	bl	8003dbe <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_12);
 800403c:	4a40      	ldr	r2, [pc, #256]	; (8004140 <MX_ADC1_Init+0x22c>)
 800403e:	f240 2105 	movw	r1, #517	; 0x205
 8004042:	483c      	ldr	r0, [pc, #240]	; (8004134 <MX_ADC1_Init+0x220>)
 8004044:	f7ff fe17 	bl	8003c76 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_28CYCLES);
 8004048:	2202      	movs	r2, #2
 800404a:	493d      	ldr	r1, [pc, #244]	; (8004140 <MX_ADC1_Init+0x22c>)
 800404c:	4839      	ldr	r0, [pc, #228]	; (8004134 <MX_ADC1_Init+0x220>)
 800404e:	f7ff feb6 	bl	8003dbe <LL_ADC_SetChannelSamplingTime>
  /** Configure Injected Channel 
  */
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8004052:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004056:	61bb      	str	r3, [r7, #24]
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 8004058:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800405c:	61fb      	str	r3, [r7, #28]
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_1RANK;
 800405e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004062:	623b      	str	r3, [r7, #32]
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 8004064:	2300      	movs	r3, #0
 8004066:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8004068:	f107 0318 	add.w	r3, r7, #24
 800406c:	4619      	mov	r1, r3
 800406e:	4831      	ldr	r0, [pc, #196]	; (8004134 <MX_ADC1_Init+0x220>)
 8004070:	f7fe fad2 	bl	8002618 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 8004074:	482f      	ldr	r0, [pc, #188]	; (8004134 <MX_ADC1_Init+0x220>)
 8004076:	f7ff ff0c 	bl	8003e92 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_0);
 800407a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800407e:	2101      	movs	r1, #1
 8004080:	482c      	ldr	r0, [pc, #176]	; (8004134 <MX_ADC1_Init+0x220>)
 8004082:	f7ff fe3e 	bl	8003d02 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 8004086:	2200      	movs	r2, #0
 8004088:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800408c:	4829      	ldr	r0, [pc, #164]	; (8004134 <MX_ADC1_Init+0x220>)
 800408e:	f7ff fe96 	bl	8003dbe <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_1, 0);
 8004092:	2200      	movs	r2, #0
 8004094:	2101      	movs	r1, #1
 8004096:	4827      	ldr	r0, [pc, #156]	; (8004134 <MX_ADC1_Init+0x220>)
 8004098:	f7ff fe69 	bl	8003d6e <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 800409c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80040a0:	4824      	ldr	r0, [pc, #144]	; (8004134 <MX_ADC1_Init+0x220>)
 80040a2:	f7ff fed5 	bl	8003e50 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 80040a6:	f107 0318 	add.w	r3, r7, #24
 80040aa:	4619      	mov	r1, r3
 80040ac:	4821      	ldr	r0, [pc, #132]	; (8004134 <MX_ADC1_Init+0x220>)
 80040ae:	f7fe fab3 	bl	8002618 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 80040b2:	4820      	ldr	r0, [pc, #128]	; (8004134 <MX_ADC1_Init+0x220>)
 80040b4:	f7ff feed 	bl	8003e92 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_11);
 80040b8:	4a22      	ldr	r2, [pc, #136]	; (8004144 <MX_ADC1_Init+0x230>)
 80040ba:	f241 1102 	movw	r1, #4354	; 0x1102
 80040be:	481d      	ldr	r0, [pc, #116]	; (8004134 <MX_ADC1_Init+0x220>)
 80040c0:	f7ff fe1f 	bl	8003d02 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 80040c4:	2200      	movs	r2, #0
 80040c6:	491f      	ldr	r1, [pc, #124]	; (8004144 <MX_ADC1_Init+0x230>)
 80040c8:	481a      	ldr	r0, [pc, #104]	; (8004134 <MX_ADC1_Init+0x220>)
 80040ca:	f7ff fe78 	bl	8003dbe <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_2, 0);
 80040ce:	2200      	movs	r2, #0
 80040d0:	f241 1102 	movw	r1, #4354	; 0x1102
 80040d4:	4817      	ldr	r0, [pc, #92]	; (8004134 <MX_ADC1_Init+0x220>)
 80040d6:	f7ff fe4a 	bl	8003d6e <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 80040da:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80040de:	4815      	ldr	r0, [pc, #84]	; (8004134 <MX_ADC1_Init+0x220>)
 80040e0:	f7ff feb6 	bl	8003e50 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 80040e4:	f107 0318 	add.w	r3, r7, #24
 80040e8:	4619      	mov	r1, r3
 80040ea:	4812      	ldr	r0, [pc, #72]	; (8004134 <MX_ADC1_Init+0x220>)
 80040ec:	f7fe fa94 	bl	8002618 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 80040f0:	4810      	ldr	r0, [pc, #64]	; (8004134 <MX_ADC1_Init+0x220>)
 80040f2:	f7ff fece 	bl	8003e92 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_10);
 80040f6:	220a      	movs	r2, #10
 80040f8:	f242 2103 	movw	r1, #8707	; 0x2203
 80040fc:	480d      	ldr	r0, [pc, #52]	; (8004134 <MX_ADC1_Init+0x220>)
 80040fe:	f7ff fe00 	bl	8003d02 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_3CYCLES);
 8004102:	2200      	movs	r2, #0
 8004104:	210a      	movs	r1, #10
 8004106:	480b      	ldr	r0, [pc, #44]	; (8004134 <MX_ADC1_Init+0x220>)
 8004108:	f7ff fe59 	bl	8003dbe <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_3, 0);
 800410c:	2200      	movs	r2, #0
 800410e:	f242 2103 	movw	r1, #8707	; 0x2203
 8004112:	4808      	ldr	r0, [pc, #32]	; (8004134 <MX_ADC1_Init+0x220>)
 8004114:	f7ff fe2b 	bl	8003d6e <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8004118:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800411c:	4805      	ldr	r0, [pc, #20]	; (8004134 <MX_ADC1_Init+0x220>)
 800411e:	f7ff fe97 	bl	8003e50 <LL_ADC_INJ_StartConversionExtTrig>

}
 8004122:	bf00      	nop
 8004124:	3758      	adds	r7, #88	; 0x58
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40020800 	.word	0x40020800
 8004130:	40020000 	.word	0x40020000
 8004134:	40012000 	.word	0x40012000
 8004138:	40012300 	.word	0x40012300
 800413c:	02300001 	.word	0x02300001
 8004140:	0060000c 	.word	0x0060000c
 8004144:	0030000b 	.word	0x0030000b

08004148 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b092      	sub	sp, #72	; 0x48
 800414c:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800414e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	605a      	str	r2, [r3, #4]
 8004158:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800415a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	605a      	str	r2, [r3, #4]
 8004164:	609a      	str	r2, [r3, #8]
 8004166:	60da      	str	r2, [r3, #12]
 8004168:	611a      	str	r2, [r3, #16]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 800416a:	f107 0318 	add.w	r3, r7, #24
 800416e:	2200      	movs	r2, #0
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	605a      	str	r2, [r3, #4]
 8004174:	609a      	str	r2, [r3, #8]
 8004176:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004178:	463b      	mov	r3, r7
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	605a      	str	r2, [r3, #4]
 8004180:	609a      	str	r2, [r3, #8]
 8004182:	60da      	str	r2, [r3, #12]
 8004184:	611a      	str	r2, [r3, #16]
 8004186:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC2);
 8004188:	f44f 7000 	mov.w	r0, #512	; 0x200
 800418c:	f7ff feaa 	bl	8003ee4 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8004190:	2004      	movs	r0, #4
 8004192:	f7ff fe8f 	bl	8003eb4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004196:	2001      	movs	r0, #1
 8004198:	f7ff fe8c 	bl	8003eb4 <LL_AHB1_GRP1_EnableClock>
  /**ADC2 GPIO Configuration  
  PC0   ------> ADC2_IN10
  PC1   ------> ADC2_IN11
  PA0-WKUP   ------> ADC2_IN0 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 800419c:	2303      	movs	r3, #3
 800419e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80041a0:	2303      	movs	r3, #3
 80041a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80041a4:	2300      	movs	r3, #0
 80041a6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041a8:	463b      	mov	r3, r7
 80041aa:	4619      	mov	r1, r3
 80041ac:	485e      	ldr	r0, [pc, #376]	; (8004328 <MX_ADC2_Init+0x1e0>)
 80041ae:	f7fe fc8c 	bl	8002aca <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80041b2:	2301      	movs	r3, #1
 80041b4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80041b6:	2303      	movs	r3, #3
 80041b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80041ba:	2300      	movs	r3, #0
 80041bc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041be:	463b      	mov	r3, r7
 80041c0:	4619      	mov	r1, r3
 80041c2:	485a      	ldr	r0, [pc, #360]	; (800432c <MX_ADC2_Init+0x1e4>)
 80041c4:	f7fe fc81 	bl	8002aca <LL_GPIO_Init>

  /* ADC2 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 80041c8:	f7ff fccc 	bl	8003b64 <__NVIC_GetPriorityGrouping>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2200      	movs	r2, #0
 80041d0:	2102      	movs	r1, #2
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff fd1c 	bl	8003c10 <NVIC_EncodePriority>
 80041d8:	4603      	mov	r3, r0
 80041da:	4619      	mov	r1, r3
 80041dc:	2012      	movs	r0, #18
 80041de:	f7ff fced 	bl	8003bbc <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 80041e2:	2012      	movs	r0, #18
 80041e4:	f7ff fccc 	bl	8003b80 <__NVIC_EnableIRQ>

  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80041e8:	2300      	movs	r3, #0
 80041ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80041ec:	2300      	movs	r3, #0
 80041ee:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 80041f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041f4:	647b      	str	r3, [r7, #68]	; 0x44
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 80041f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80041fa:	4619      	mov	r1, r3
 80041fc:	484c      	ldr	r0, [pc, #304]	; (8004330 <MX_ADC2_Init+0x1e8>)
 80041fe:	f7fe f997 	bl	8002530 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8004202:	2300      	movs	r3, #0
 8004204:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8004206:	2300      	movs	r3, #0
 8004208:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800420a:	2300      	movs	r3, #0
 800420c:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 800420e:	2300      	movs	r3, #0
 8004210:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8004212:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004216:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8004218:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800421c:	4619      	mov	r1, r3
 800421e:	4844      	ldr	r0, [pc, #272]	; (8004330 <MX_ADC2_Init+0x1e8>)
 8004220:	f7fe f9b2 	bl	8002588 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC2, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8004224:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004228:	4841      	ldr	r0, [pc, #260]	; (8004330 <MX_ADC2_Init+0x1e8>)
 800422a:	f7ff fd57 	bl	8003cdc <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC2);
 800422e:	4840      	ldr	r0, [pc, #256]	; (8004330 <MX_ADC2_Init+0x1e8>)
 8004230:	f7ff fe1f 	bl	8003e72 <LL_ADC_DisableIT_EOCS>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 8004234:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004238:	f44f 7100 	mov.w	r1, #512	; 0x200
 800423c:	483c      	ldr	r0, [pc, #240]	; (8004330 <MX_ADC2_Init+0x1e8>)
 800423e:	f7ff fd1a 	bl	8003c76 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 8004242:	2200      	movs	r2, #0
 8004244:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004248:	4839      	ldr	r0, [pc, #228]	; (8004330 <MX_ADC2_Init+0x1e8>)
 800424a:	f7ff fdb8 	bl	8003dbe <LL_ADC_SetChannelSamplingTime>
  /** Configure Injected Channel 
  */
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 800424e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004252:	61bb      	str	r3, [r7, #24]
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 8004254:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004258:	61fb      	str	r3, [r7, #28]
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_1RANK;
 800425a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800425e:	623b      	str	r3, [r7, #32]
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 8004260:	2300      	movs	r3, #0
 8004262:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 8004264:	f107 0318 	add.w	r3, r7, #24
 8004268:	4619      	mov	r1, r3
 800426a:	4831      	ldr	r0, [pc, #196]	; (8004330 <MX_ADC2_Init+0x1e8>)
 800426c:	f7fe f9d4 	bl	8002618 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 8004270:	482f      	ldr	r0, [pc, #188]	; (8004330 <MX_ADC2_Init+0x1e8>)
 8004272:	f7ff fe0e 	bl	8003e92 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_0);
 8004276:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800427a:	2101      	movs	r1, #1
 800427c:	482c      	ldr	r0, [pc, #176]	; (8004330 <MX_ADC2_Init+0x1e8>)
 800427e:	f7ff fd40 	bl	8003d02 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 8004282:	2200      	movs	r2, #0
 8004284:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004288:	4829      	ldr	r0, [pc, #164]	; (8004330 <MX_ADC2_Init+0x1e8>)
 800428a:	f7ff fd98 	bl	8003dbe <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_1, 0);
 800428e:	2200      	movs	r2, #0
 8004290:	2101      	movs	r1, #1
 8004292:	4827      	ldr	r0, [pc, #156]	; (8004330 <MX_ADC2_Init+0x1e8>)
 8004294:	f7ff fd6b 	bl	8003d6e <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 8004298:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800429c:	4824      	ldr	r0, [pc, #144]	; (8004330 <MX_ADC2_Init+0x1e8>)
 800429e:	f7ff fdd7 	bl	8003e50 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 80042a2:	f107 0318 	add.w	r3, r7, #24
 80042a6:	4619      	mov	r1, r3
 80042a8:	4821      	ldr	r0, [pc, #132]	; (8004330 <MX_ADC2_Init+0x1e8>)
 80042aa:	f7fe f9b5 	bl	8002618 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 80042ae:	4820      	ldr	r0, [pc, #128]	; (8004330 <MX_ADC2_Init+0x1e8>)
 80042b0:	f7ff fdef 	bl	8003e92 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_11);
 80042b4:	4a1f      	ldr	r2, [pc, #124]	; (8004334 <MX_ADC2_Init+0x1ec>)
 80042b6:	f241 1102 	movw	r1, #4354	; 0x1102
 80042ba:	481d      	ldr	r0, [pc, #116]	; (8004330 <MX_ADC2_Init+0x1e8>)
 80042bc:	f7ff fd21 	bl	8003d02 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 80042c0:	2200      	movs	r2, #0
 80042c2:	491c      	ldr	r1, [pc, #112]	; (8004334 <MX_ADC2_Init+0x1ec>)
 80042c4:	481a      	ldr	r0, [pc, #104]	; (8004330 <MX_ADC2_Init+0x1e8>)
 80042c6:	f7ff fd7a 	bl	8003dbe <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_2, 0);
 80042ca:	2200      	movs	r2, #0
 80042cc:	f241 1102 	movw	r1, #4354	; 0x1102
 80042d0:	4817      	ldr	r0, [pc, #92]	; (8004330 <MX_ADC2_Init+0x1e8>)
 80042d2:	f7ff fd4c 	bl	8003d6e <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 80042d6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80042da:	4815      	ldr	r0, [pc, #84]	; (8004330 <MX_ADC2_Init+0x1e8>)
 80042dc:	f7ff fdb8 	bl	8003e50 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 80042e0:	f107 0318 	add.w	r3, r7, #24
 80042e4:	4619      	mov	r1, r3
 80042e6:	4812      	ldr	r0, [pc, #72]	; (8004330 <MX_ADC2_Init+0x1e8>)
 80042e8:	f7fe f996 	bl	8002618 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 80042ec:	4810      	ldr	r0, [pc, #64]	; (8004330 <MX_ADC2_Init+0x1e8>)
 80042ee:	f7ff fdd0 	bl	8003e92 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_10);
 80042f2:	220a      	movs	r2, #10
 80042f4:	f242 2103 	movw	r1, #8707	; 0x2203
 80042f8:	480d      	ldr	r0, [pc, #52]	; (8004330 <MX_ADC2_Init+0x1e8>)
 80042fa:	f7ff fd02 	bl	8003d02 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_3CYCLES);
 80042fe:	2200      	movs	r2, #0
 8004300:	210a      	movs	r1, #10
 8004302:	480b      	ldr	r0, [pc, #44]	; (8004330 <MX_ADC2_Init+0x1e8>)
 8004304:	f7ff fd5b 	bl	8003dbe <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_3, 0);
 8004308:	2200      	movs	r2, #0
 800430a:	f242 2103 	movw	r1, #8707	; 0x2203
 800430e:	4808      	ldr	r0, [pc, #32]	; (8004330 <MX_ADC2_Init+0x1e8>)
 8004310:	f7ff fd2d 	bl	8003d6e <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 8004314:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8004318:	4805      	ldr	r0, [pc, #20]	; (8004330 <MX_ADC2_Init+0x1e8>)
 800431a:	f7ff fd99 	bl	8003e50 <LL_ADC_INJ_StartConversionExtTrig>

}
 800431e:	bf00      	nop
 8004320:	3748      	adds	r7, #72	; 0x48
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	40020800 	.word	0x40020800
 800432c:	40020000 	.word	0x40020000
 8004330:	40012100 	.word	0x40012100
 8004334:	0030000b 	.word	0x0030000b

08004338 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8004342:	4a13      	ldr	r2, [pc, #76]	; (8004390 <LL_SYSCFG_SetEXTISource+0x58>)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	b2db      	uxtb	r3, r3
 8004348:	3302      	adds	r3, #2
 800434a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	0c1b      	lsrs	r3, r3, #16
 8004352:	43db      	mvns	r3, r3
 8004354:	ea02 0103 	and.w	r1, r2, r3
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	0c1b      	lsrs	r3, r3, #16
 800435c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	fa93 f3a3 	rbit	r3, r3
 8004364:	60bb      	str	r3, [r7, #8]
  return result;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	fab3 f383 	clz	r3, r3
 800436c:	b2db      	uxtb	r3, r3
 800436e:	461a      	mov	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	fa03 f202 	lsl.w	r2, r3, r2
 8004376:	4806      	ldr	r0, [pc, #24]	; (8004390 <LL_SYSCFG_SetEXTISource+0x58>)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	b2db      	uxtb	r3, r3
 800437c:	430a      	orrs	r2, r1
 800437e:	3302      	adds	r3, #2
 8004380:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8004384:	bf00      	nop
 8004386:	3714      	adds	r7, #20
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	40013800 	.word	0x40013800

08004394 <LL_GPIO_SetPinMode>:
{
 8004394:	b480      	push	{r7}
 8004396:	b089      	sub	sp, #36	; 0x24
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	fa93 f3a3 	rbit	r3, r3
 80043ae:	613b      	str	r3, [r7, #16]
  return result;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	fab3 f383 	clz	r3, r3
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	2103      	movs	r1, #3
 80043bc:	fa01 f303 	lsl.w	r3, r1, r3
 80043c0:	43db      	mvns	r3, r3
 80043c2:	401a      	ands	r2, r3
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	fa93 f3a3 	rbit	r3, r3
 80043ce:	61bb      	str	r3, [r7, #24]
  return result;
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	fab3 f383 	clz	r3, r3
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	fa01 f303 	lsl.w	r3, r1, r3
 80043e0:	431a      	orrs	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	601a      	str	r2, [r3, #0]
}
 80043e6:	bf00      	nop
 80043e8:	3724      	adds	r7, #36	; 0x24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <LL_GPIO_SetPinPull>:
{
 80043f2:	b480      	push	{r7}
 80043f4:	b089      	sub	sp, #36	; 0x24
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	60f8      	str	r0, [r7, #12]
 80043fa:	60b9      	str	r1, [r7, #8]
 80043fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	fa93 f3a3 	rbit	r3, r3
 800440c:	613b      	str	r3, [r7, #16]
  return result;
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	fab3 f383 	clz	r3, r3
 8004414:	b2db      	uxtb	r3, r3
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	2103      	movs	r1, #3
 800441a:	fa01 f303 	lsl.w	r3, r1, r3
 800441e:	43db      	mvns	r3, r3
 8004420:	401a      	ands	r2, r3
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	fa93 f3a3 	rbit	r3, r3
 800442c:	61bb      	str	r3, [r7, #24]
  return result;
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	fab3 f383 	clz	r3, r3
 8004434:	b2db      	uxtb	r3, r3
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	6879      	ldr	r1, [r7, #4]
 800443a:	fa01 f303 	lsl.w	r3, r1, r3
 800443e:	431a      	orrs	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	60da      	str	r2, [r3, #12]
}
 8004444:	bf00      	nop
 8004446:	3724      	adds	r7, #36	; 0x24
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	041a      	lsls	r2, r3, #16
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	619a      	str	r2, [r3, #24]
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
	...

08004470 <LL_AHB1_GRP1_EnableClock>:
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004478:	4b08      	ldr	r3, [pc, #32]	; (800449c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800447a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800447c:	4907      	ldr	r1, [pc, #28]	; (800449c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4313      	orrs	r3, r2
 8004482:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004484:	4b05      	ldr	r3, [pc, #20]	; (800449c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4013      	ands	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800448e:	68fb      	ldr	r3, [r7, #12]
}
 8004490:	bf00      	nop
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	40023800 	.word	0x40023800

080044a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b088      	sub	sp, #32
 80044a4:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80044a6:	f107 0318 	add.w	r3, r7, #24
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044b0:	463b      	mov	r3, r7
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	605a      	str	r2, [r3, #4]
 80044b8:	609a      	str	r2, [r3, #8]
 80044ba:	60da      	str	r2, [r3, #12]
 80044bc:	611a      	str	r2, [r3, #16]
 80044be:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80044c0:	2004      	movs	r0, #4
 80044c2:	f7ff ffd5 	bl	8004470 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80044c6:	2080      	movs	r0, #128	; 0x80
 80044c8:	f7ff ffd2 	bl	8004470 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80044cc:	2001      	movs	r0, #1
 80044ce:	f7ff ffcf 	bl	8004470 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80044d2:	2002      	movs	r0, #2
 80044d4:	f7ff ffcc 	bl	8004470 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 80044d8:	2120      	movs	r1, #32
 80044da:	481a      	ldr	r0, [pc, #104]	; (8004544 <MX_GPIO_Init+0xa4>)
 80044dc:	f7ff ffb8 	bl	8004450 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80044e0:	4919      	ldr	r1, [pc, #100]	; (8004548 <MX_GPIO_Init+0xa8>)
 80044e2:	2002      	movs	r0, #2
 80044e4:	f7ff ff28 	bl	8004338 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80044e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044ec:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80044ee:	2301      	movs	r3, #1
 80044f0:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80044f2:	2300      	movs	r3, #0
 80044f4:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80044f6:	2302      	movs	r3, #2
 80044f8:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80044fa:	f107 0318 	add.w	r3, r7, #24
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fe f962 	bl	80027c8 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8004504:	2200      	movs	r2, #0
 8004506:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800450a:	4810      	ldr	r0, [pc, #64]	; (800454c <MX_GPIO_Init+0xac>)
 800450c:	f7ff ff71 	bl	80043f2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8004510:	2200      	movs	r2, #0
 8004512:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004516:	480d      	ldr	r0, [pc, #52]	; (800454c <MX_GPIO_Init+0xac>)
 8004518:	f7ff ff3c 	bl	8004394 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 800451c:	2320      	movs	r3, #32
 800451e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004520:	2301      	movs	r3, #1
 8004522:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004524:	2300      	movs	r3, #0
 8004526:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004528:	2300      	movs	r3, #0
 800452a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800452c:	2300      	movs	r3, #0
 800452e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004530:	463b      	mov	r3, r7
 8004532:	4619      	mov	r1, r3
 8004534:	4803      	ldr	r0, [pc, #12]	; (8004544 <MX_GPIO_Init+0xa4>)
 8004536:	f7fe fac8 	bl	8002aca <LL_GPIO_Init>

}
 800453a:	bf00      	nop
 800453c:	3720      	adds	r7, #32
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	40020000 	.word	0x40020000
 8004548:	00f00003 	.word	0x00f00003
 800454c:	40020800 	.word	0x40020800

08004550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004554:	f7fc fca6 	bl	8000ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004558:	f000 f80e 	bl	8004578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800455c:	f7ff ffa0 	bl	80044a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004560:	f000 fc48 	bl	8004df4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8004564:	f000 fb28 	bl	8004bb8 <MX_TIM1_Init>
  MX_ADC1_Init();
 8004568:	f7ff fcd4 	bl	8003f14 <MX_ADC1_Init>
  MX_ADC2_Init();
 800456c:	f7ff fdec 	bl	8004148 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  cppwrapper();
 8004570:	f000 fd22 	bl	8004fb8 <cppwrapper>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004574:	e7fe      	b.n	8004574 <main+0x24>
	...

08004578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b094      	sub	sp, #80	; 0x50
 800457c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800457e:	f107 031c 	add.w	r3, r7, #28
 8004582:	2234      	movs	r2, #52	; 0x34
 8004584:	2100      	movs	r1, #0
 8004586:	4618      	mov	r0, r3
 8004588:	f001 ff65 	bl	8006456 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800458c:	f107 0308 	add.w	r3, r7, #8
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	605a      	str	r2, [r3, #4]
 8004596:	609a      	str	r2, [r3, #8]
 8004598:	60da      	str	r2, [r3, #12]
 800459a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800459c:	2300      	movs	r3, #0
 800459e:	607b      	str	r3, [r7, #4]
 80045a0:	4b2c      	ldr	r3, [pc, #176]	; (8004654 <SystemClock_Config+0xdc>)
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	4a2b      	ldr	r2, [pc, #172]	; (8004654 <SystemClock_Config+0xdc>)
 80045a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045aa:	6413      	str	r3, [r2, #64]	; 0x40
 80045ac:	4b29      	ldr	r3, [pc, #164]	; (8004654 <SystemClock_Config+0xdc>)
 80045ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b4:	607b      	str	r3, [r7, #4]
 80045b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80045b8:	2300      	movs	r3, #0
 80045ba:	603b      	str	r3, [r7, #0]
 80045bc:	4b26      	ldr	r3, [pc, #152]	; (8004658 <SystemClock_Config+0xe0>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a25      	ldr	r2, [pc, #148]	; (8004658 <SystemClock_Config+0xe0>)
 80045c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	4b23      	ldr	r3, [pc, #140]	; (8004658 <SystemClock_Config+0xe0>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80045d0:	603b      	str	r3, [r7, #0]
 80045d2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80045d4:	2301      	movs	r3, #1
 80045d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80045d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045de:	2302      	movs	r3, #2
 80045e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80045e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80045e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80045e8:	2304      	movs	r3, #4
 80045ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80045ec:	23b4      	movs	r3, #180	; 0xb4
 80045ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80045f0:	2302      	movs	r3, #2
 80045f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80045f4:	2302      	movs	r3, #2
 80045f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80045f8:	2302      	movs	r3, #2
 80045fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045fc:	f107 031c 	add.w	r3, r7, #28
 8004600:	4618      	mov	r0, r3
 8004602:	f7fd fa61 	bl	8001ac8 <HAL_RCC_OscConfig>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800460c:	f000 f826 	bl	800465c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004610:	f7fc ff54 	bl	80014bc <HAL_PWREx_EnableOverDrive>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800461a:	f000 f81f 	bl	800465c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800461e:	230f      	movs	r3, #15
 8004620:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004622:	2302      	movs	r3, #2
 8004624:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004626:	2300      	movs	r3, #0
 8004628:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800462a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800462e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004634:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004636:	f107 0308 	add.w	r3, r7, #8
 800463a:	2105      	movs	r1, #5
 800463c:	4618      	mov	r0, r3
 800463e:	f7fc ff8d 	bl	800155c <HAL_RCC_ClockConfig>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8004648:	f000 f808 	bl	800465c <Error_Handler>
  }
}
 800464c:	bf00      	nop
 800464e:	3750      	adds	r7, #80	; 0x50
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40023800 	.word	0x40023800
 8004658:	40007000 	.word	0x40007000

0800465c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004660:	bf00      	nop
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
	...

0800466c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004672:	2300      	movs	r3, #0
 8004674:	607b      	str	r3, [r7, #4]
 8004676:	4b10      	ldr	r3, [pc, #64]	; (80046b8 <HAL_MspInit+0x4c>)
 8004678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467a:	4a0f      	ldr	r2, [pc, #60]	; (80046b8 <HAL_MspInit+0x4c>)
 800467c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004680:	6453      	str	r3, [r2, #68]	; 0x44
 8004682:	4b0d      	ldr	r3, [pc, #52]	; (80046b8 <HAL_MspInit+0x4c>)
 8004684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800468a:	607b      	str	r3, [r7, #4]
 800468c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800468e:	2300      	movs	r3, #0
 8004690:	603b      	str	r3, [r7, #0]
 8004692:	4b09      	ldr	r3, [pc, #36]	; (80046b8 <HAL_MspInit+0x4c>)
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	4a08      	ldr	r2, [pc, #32]	; (80046b8 <HAL_MspInit+0x4c>)
 8004698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800469c:	6413      	str	r3, [r2, #64]	; 0x40
 800469e:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <HAL_MspInit+0x4c>)
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a6:	603b      	str	r3, [r7, #0]
 80046a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80046aa:	2004      	movs	r0, #4
 80046ac:	f7fc fd40 	bl	8001130 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046b0:	bf00      	nop
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	40023800 	.word	0x40023800

080046bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80046c0:	bf00      	nop
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046ca:	b480      	push	{r7}
 80046cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046ce:	e7fe      	b.n	80046ce <HardFault_Handler+0x4>

080046d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046d4:	e7fe      	b.n	80046d4 <MemManage_Handler+0x4>

080046d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80046d6:	b480      	push	{r7}
 80046d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046da:	e7fe      	b.n	80046da <BusFault_Handler+0x4>

080046dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046e0:	e7fe      	b.n	80046e0 <UsageFault_Handler+0x4>

080046e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80046e2:	b480      	push	{r7}
 80046e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80046e6:	bf00      	nop
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046f4:	bf00      	nop
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046fe:	b480      	push	{r7}
 8004700:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004702:	bf00      	nop
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004710:	f7fc fc1a 	bl	8000f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004714:	bf00      	nop
 8004716:	bd80      	pop	{r7, pc}

08004718 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
	HighFreqTask();
 800471c:	f000 fd24 	bl	8005168 <HighFreqTask>
  /* USER CODE END ADC_IRQn 0 */
  
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004720:	bf00      	nop
 8004722:	bd80      	pop	{r7, pc}

08004724 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004728:	bf00      	nop
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004732:	b480      	push	{r7}
 8004734:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004736:	bf00      	nop
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
	return 1;
 8004744:	2301      	movs	r3, #1
}
 8004746:	4618      	mov	r0, r3
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <_kill>:

int _kill(int pid, int sig)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800475a:	f001 fe29 	bl	80063b0 <__errno>
 800475e:	4602      	mov	r2, r0
 8004760:	2316      	movs	r3, #22
 8004762:	6013      	str	r3, [r2, #0]
	return -1;
 8004764:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004768:	4618      	mov	r0, r3
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <_exit>:

void _exit (int status)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004778:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7ff ffe7 	bl	8004750 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004782:	e7fe      	b.n	8004782 <_exit+0x12>

08004784 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800478c:	4b11      	ldr	r3, [pc, #68]	; (80047d4 <_sbrk+0x50>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d102      	bne.n	800479a <_sbrk+0x16>
		heap_end = &end;
 8004794:	4b0f      	ldr	r3, [pc, #60]	; (80047d4 <_sbrk+0x50>)
 8004796:	4a10      	ldr	r2, [pc, #64]	; (80047d8 <_sbrk+0x54>)
 8004798:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800479a:	4b0e      	ldr	r3, [pc, #56]	; (80047d4 <_sbrk+0x50>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80047a0:	4b0c      	ldr	r3, [pc, #48]	; (80047d4 <_sbrk+0x50>)
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4413      	add	r3, r2
 80047a8:	466a      	mov	r2, sp
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d907      	bls.n	80047be <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80047ae:	f001 fdff 	bl	80063b0 <__errno>
 80047b2:	4602      	mov	r2, r0
 80047b4:	230c      	movs	r3, #12
 80047b6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80047b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047bc:	e006      	b.n	80047cc <_sbrk+0x48>
	}

	heap_end += incr;
 80047be:	4b05      	ldr	r3, [pc, #20]	; (80047d4 <_sbrk+0x50>)
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4413      	add	r3, r2
 80047c6:	4a03      	ldr	r2, [pc, #12]	; (80047d4 <_sbrk+0x50>)
 80047c8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80047ca:	68fb      	ldr	r3, [r7, #12]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	2000008c 	.word	0x2000008c
 80047d8:	200000f0 	.word	0x200000f0

080047dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047e0:	4b16      	ldr	r3, [pc, #88]	; (800483c <SystemInit+0x60>)
 80047e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e6:	4a15      	ldr	r2, [pc, #84]	; (800483c <SystemInit+0x60>)
 80047e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80047f0:	4b13      	ldr	r3, [pc, #76]	; (8004840 <SystemInit+0x64>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a12      	ldr	r2, [pc, #72]	; (8004840 <SystemInit+0x64>)
 80047f6:	f043 0301 	orr.w	r3, r3, #1
 80047fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80047fc:	4b10      	ldr	r3, [pc, #64]	; (8004840 <SystemInit+0x64>)
 80047fe:	2200      	movs	r2, #0
 8004800:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004802:	4b0f      	ldr	r3, [pc, #60]	; (8004840 <SystemInit+0x64>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a0e      	ldr	r2, [pc, #56]	; (8004840 <SystemInit+0x64>)
 8004808:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800480c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004810:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004812:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <SystemInit+0x64>)
 8004814:	4a0b      	ldr	r2, [pc, #44]	; (8004844 <SystemInit+0x68>)
 8004816:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004818:	4b09      	ldr	r3, [pc, #36]	; (8004840 <SystemInit+0x64>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a08      	ldr	r2, [pc, #32]	; (8004840 <SystemInit+0x64>)
 800481e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004822:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004824:	4b06      	ldr	r3, [pc, #24]	; (8004840 <SystemInit+0x64>)
 8004826:	2200      	movs	r2, #0
 8004828:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800482a:	4b04      	ldr	r3, [pc, #16]	; (800483c <SystemInit+0x60>)
 800482c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004830:	609a      	str	r2, [r3, #8]
#endif
}
 8004832:	bf00      	nop
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	e000ed00 	.word	0xe000ed00
 8004840:	40023800 	.word	0x40023800
 8004844:	24003010 	.word	0x24003010

08004848 <__NVIC_GetPriorityGrouping>:
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800484c:	4b04      	ldr	r3, [pc, #16]	; (8004860 <__NVIC_GetPriorityGrouping+0x18>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	0a1b      	lsrs	r3, r3, #8
 8004852:	f003 0307 	and.w	r3, r3, #7
}
 8004856:	4618      	mov	r0, r3
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	e000ed00 	.word	0xe000ed00

08004864 <__NVIC_EnableIRQ>:
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	4603      	mov	r3, r0
 800486c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800486e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004872:	2b00      	cmp	r3, #0
 8004874:	db0b      	blt.n	800488e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004876:	79fb      	ldrb	r3, [r7, #7]
 8004878:	f003 021f 	and.w	r2, r3, #31
 800487c:	4907      	ldr	r1, [pc, #28]	; (800489c <__NVIC_EnableIRQ+0x38>)
 800487e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004882:	095b      	lsrs	r3, r3, #5
 8004884:	2001      	movs	r0, #1
 8004886:	fa00 f202 	lsl.w	r2, r0, r2
 800488a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	e000e100 	.word	0xe000e100

080048a0 <__NVIC_SetPriority>:
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	4603      	mov	r3, r0
 80048a8:	6039      	str	r1, [r7, #0]
 80048aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	db0a      	blt.n	80048ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	490c      	ldr	r1, [pc, #48]	; (80048ec <__NVIC_SetPriority+0x4c>)
 80048ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048be:	0112      	lsls	r2, r2, #4
 80048c0:	b2d2      	uxtb	r2, r2
 80048c2:	440b      	add	r3, r1
 80048c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80048c8:	e00a      	b.n	80048e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	4908      	ldr	r1, [pc, #32]	; (80048f0 <__NVIC_SetPriority+0x50>)
 80048d0:	79fb      	ldrb	r3, [r7, #7]
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	3b04      	subs	r3, #4
 80048d8:	0112      	lsls	r2, r2, #4
 80048da:	b2d2      	uxtb	r2, r2
 80048dc:	440b      	add	r3, r1
 80048de:	761a      	strb	r2, [r3, #24]
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	e000e100 	.word	0xe000e100
 80048f0:	e000ed00 	.word	0xe000ed00

080048f4 <NVIC_EncodePriority>:
{
 80048f4:	b480      	push	{r7}
 80048f6:	b089      	sub	sp, #36	; 0x24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	f1c3 0307 	rsb	r3, r3, #7
 800490e:	2b04      	cmp	r3, #4
 8004910:	bf28      	it	cs
 8004912:	2304      	movcs	r3, #4
 8004914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	3304      	adds	r3, #4
 800491a:	2b06      	cmp	r3, #6
 800491c:	d902      	bls.n	8004924 <NVIC_EncodePriority+0x30>
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	3b03      	subs	r3, #3
 8004922:	e000      	b.n	8004926 <NVIC_EncodePriority+0x32>
 8004924:	2300      	movs	r3, #0
 8004926:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	43da      	mvns	r2, r3
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	401a      	ands	r2, r3
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800493c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	fa01 f303 	lsl.w	r3, r1, r3
 8004946:	43d9      	mvns	r1, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800494c:	4313      	orrs	r3, r2
}
 800494e:	4618      	mov	r0, r3
 8004950:	3724      	adds	r7, #36	; 0x24
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <LL_TIM_DisableARRPreload>:
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	601a      	str	r2, [r3, #0]
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
	...

0800497c <LL_TIM_OC_DisableFast>:
{
 800497c:	b4b0      	push	{r4, r5, r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d01c      	beq.n	80049c6 <LL_TIM_OC_DisableFast+0x4a>
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	2b04      	cmp	r3, #4
 8004990:	d017      	beq.n	80049c2 <LL_TIM_OC_DisableFast+0x46>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b10      	cmp	r3, #16
 8004996:	d012      	beq.n	80049be <LL_TIM_OC_DisableFast+0x42>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2b40      	cmp	r3, #64	; 0x40
 800499c:	d00d      	beq.n	80049ba <LL_TIM_OC_DisableFast+0x3e>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049a4:	d007      	beq.n	80049b6 <LL_TIM_OC_DisableFast+0x3a>
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049ac:	d101      	bne.n	80049b2 <LL_TIM_OC_DisableFast+0x36>
 80049ae:	2305      	movs	r3, #5
 80049b0:	e00a      	b.n	80049c8 <LL_TIM_OC_DisableFast+0x4c>
 80049b2:	2306      	movs	r3, #6
 80049b4:	e008      	b.n	80049c8 <LL_TIM_OC_DisableFast+0x4c>
 80049b6:	2304      	movs	r3, #4
 80049b8:	e006      	b.n	80049c8 <LL_TIM_OC_DisableFast+0x4c>
 80049ba:	2303      	movs	r3, #3
 80049bc:	e004      	b.n	80049c8 <LL_TIM_OC_DisableFast+0x4c>
 80049be:	2302      	movs	r3, #2
 80049c0:	e002      	b.n	80049c8 <LL_TIM_OC_DisableFast+0x4c>
 80049c2:	2301      	movs	r3, #1
 80049c4:	e000      	b.n	80049c8 <LL_TIM_OC_DisableFast+0x4c>
 80049c6:	2300      	movs	r3, #0
 80049c8:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	3318      	adds	r3, #24
 80049ce:	461a      	mov	r2, r3
 80049d0:	4629      	mov	r1, r5
 80049d2:	4b09      	ldr	r3, [pc, #36]	; (80049f8 <LL_TIM_OC_DisableFast+0x7c>)
 80049d4:	5c5b      	ldrb	r3, [r3, r1]
 80049d6:	4413      	add	r3, r2
 80049d8:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80049da:	6822      	ldr	r2, [r4, #0]
 80049dc:	4629      	mov	r1, r5
 80049de:	4b07      	ldr	r3, [pc, #28]	; (80049fc <LL_TIM_OC_DisableFast+0x80>)
 80049e0:	5c5b      	ldrb	r3, [r3, r1]
 80049e2:	4619      	mov	r1, r3
 80049e4:	2304      	movs	r3, #4
 80049e6:	408b      	lsls	r3, r1
 80049e8:	43db      	mvns	r3, r3
 80049ea:	4013      	ands	r3, r2
 80049ec:	6023      	str	r3, [r4, #0]
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bcb0      	pop	{r4, r5, r7}
 80049f6:	4770      	bx	lr
 80049f8:	080066b4 	.word	0x080066b4
 80049fc:	080066bc 	.word	0x080066bc

08004a00 <LL_TIM_OC_EnablePreload>:
{
 8004a00:	b4b0      	push	{r4, r5, r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d01c      	beq.n	8004a4a <LL_TIM_OC_EnablePreload+0x4a>
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d017      	beq.n	8004a46 <LL_TIM_OC_EnablePreload+0x46>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b10      	cmp	r3, #16
 8004a1a:	d012      	beq.n	8004a42 <LL_TIM_OC_EnablePreload+0x42>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	2b40      	cmp	r3, #64	; 0x40
 8004a20:	d00d      	beq.n	8004a3e <LL_TIM_OC_EnablePreload+0x3e>
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a28:	d007      	beq.n	8004a3a <LL_TIM_OC_EnablePreload+0x3a>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a30:	d101      	bne.n	8004a36 <LL_TIM_OC_EnablePreload+0x36>
 8004a32:	2305      	movs	r3, #5
 8004a34:	e00a      	b.n	8004a4c <LL_TIM_OC_EnablePreload+0x4c>
 8004a36:	2306      	movs	r3, #6
 8004a38:	e008      	b.n	8004a4c <LL_TIM_OC_EnablePreload+0x4c>
 8004a3a:	2304      	movs	r3, #4
 8004a3c:	e006      	b.n	8004a4c <LL_TIM_OC_EnablePreload+0x4c>
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e004      	b.n	8004a4c <LL_TIM_OC_EnablePreload+0x4c>
 8004a42:	2302      	movs	r3, #2
 8004a44:	e002      	b.n	8004a4c <LL_TIM_OC_EnablePreload+0x4c>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e000      	b.n	8004a4c <LL_TIM_OC_EnablePreload+0x4c>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	3318      	adds	r3, #24
 8004a52:	461a      	mov	r2, r3
 8004a54:	4629      	mov	r1, r5
 8004a56:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <LL_TIM_OC_EnablePreload+0x7c>)
 8004a58:	5c5b      	ldrb	r3, [r3, r1]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004a5e:	6822      	ldr	r2, [r4, #0]
 8004a60:	4629      	mov	r1, r5
 8004a62:	4b07      	ldr	r3, [pc, #28]	; (8004a80 <LL_TIM_OC_EnablePreload+0x80>)
 8004a64:	5c5b      	ldrb	r3, [r3, r1]
 8004a66:	4619      	mov	r1, r3
 8004a68:	2308      	movs	r3, #8
 8004a6a:	408b      	lsls	r3, r1
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	6023      	str	r3, [r4, #0]
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bcb0      	pop	{r4, r5, r7}
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	080066b4 	.word	0x080066b4
 8004a80:	080066bc 	.word	0x080066bc

08004a84 <LL_TIM_SetTriggerOutput>:
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	605a      	str	r2, [r3, #4]
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <LL_TIM_SetSlaveMode>:
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f023 0207 	bic.w	r2, r3, #7
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	609a      	str	r2, [r3, #8]
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <LL_TIM_SetTriggerInput>:
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	609a      	str	r2, [r3, #8]
}
 8004aea:	bf00      	nop
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <LL_TIM_DisableMasterSlaveMode>:
{
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	609a      	str	r2, [r3, #8]
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <LL_TIM_DisableIT_TRIG>:
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TIE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	60da      	str	r2, [r3, #12]
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <LL_TIM_DisableDMAReq_TRIG>:
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TDE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	60da      	str	r2, [r3, #12]
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
	...

08004b58 <LL_AHB1_GRP1_EnableClock>:
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004b60:	4b08      	ldr	r3, [pc, #32]	; (8004b84 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004b62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b64:	4907      	ldr	r1, [pc, #28]	; (8004b84 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004b6c:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4013      	ands	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004b76:	68fb      	ldr	r3, [r7, #12]
}
 8004b78:	bf00      	nop
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	40023800 	.word	0x40023800

08004b88 <LL_APB2_GRP1_EnableClock>:
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8004b90:	4b08      	ldr	r3, [pc, #32]	; (8004bb4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004b92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b94:	4907      	ldr	r1, [pc, #28]	; (8004bb4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004b9c:	4b05      	ldr	r3, [pc, #20]	; (8004bb4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004b9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
}
 8004ba8:	bf00      	nop
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	40023800 	.word	0x40023800

08004bb8 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b09a      	sub	sp, #104	; 0x68
 8004bbc:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004bbe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	605a      	str	r2, [r3, #4]
 8004bc8:	609a      	str	r2, [r3, #8]
 8004bca:	60da      	str	r2, [r3, #12]
 8004bcc:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8004bce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f001 fc3d 	bl	8006456 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8004bdc:	f107 031c 	add.w	r3, r7, #28
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	605a      	str	r2, [r3, #4]
 8004be6:	609a      	str	r2, [r3, #8]
 8004be8:	60da      	str	r2, [r3, #12]
 8004bea:	611a      	str	r2, [r3, #16]
 8004bec:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bee:	1d3b      	adds	r3, r7, #4
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	605a      	str	r2, [r3, #4]
 8004bf6:	609a      	str	r2, [r3, #8]
 8004bf8:	60da      	str	r2, [r3, #12]
 8004bfa:	611a      	str	r2, [r3, #16]
 8004bfc:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8004bfe:	2001      	movs	r0, #1
 8004c00:	f7ff ffc2 	bl	8004b88 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004c04:	2001      	movs	r0, #1
 8004c06:	f7ff ffa7 	bl	8004b58 <LL_AHB1_GRP1_EnableClock>
  /**TIM1 GPIO Configuration  
  PA6   ------> TIM1_BKIN 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8004c0a:	2340      	movs	r3, #64	; 0x40
 8004c0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004c0e:	2302      	movs	r3, #2
 8004c10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004c16:	2300      	movs	r3, #0
 8004c18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c22:	1d3b      	adds	r3, r7, #4
 8004c24:	4619      	mov	r1, r3
 8004c26:	4871      	ldr	r0, [pc, #452]	; (8004dec <MX_TIM1_Init+0x234>)
 8004c28:	f7fd ff4f 	bl	8002aca <LL_GPIO_Init>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 1));
 8004c2c:	f7ff fe0c 	bl	8004848 <__NVIC_GetPriorityGrouping>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2201      	movs	r2, #1
 8004c34:	2104      	movs	r1, #4
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7ff fe5c 	bl	80048f4 <NVIC_EncodePriority>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	4619      	mov	r1, r3
 8004c40:	2018      	movs	r0, #24
 8004c42:	f7ff fe2d 	bl	80048a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004c46:	2018      	movs	r0, #24
 8004c48:	f7ff fe0c 	bl	8004864 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004c4c:	f7ff fdfc 	bl	8004848 <__NVIC_GetPriorityGrouping>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2200      	movs	r2, #0
 8004c54:	2100      	movs	r1, #0
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7ff fe4c 	bl	80048f4 <NVIC_EncodePriority>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	4619      	mov	r1, r3
 8004c60:	2019      	movs	r0, #25
 8004c62:	f7ff fe1d 	bl	80048a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004c66:	2019      	movs	r0, #25
 8004c68:	f7ff fdfc 	bl	8004864 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 0;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_UP;
 8004c72:	2320      	movs	r3, #32
 8004c74:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 65535;
 8004c76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV2;
 8004c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c80:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 8004c82:	2300      	movs	r3, #0
 8004c84:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8004c88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4858      	ldr	r0, [pc, #352]	; (8004df0 <MX_TIM1_Init+0x238>)
 8004c90:	f7fe f80a 	bl	8002ca8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8004c94:	4856      	ldr	r0, [pc, #344]	; (8004df0 <MX_TIM1_Init+0x238>)
 8004c96:	f7ff fe60 	bl	800495a <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	4854      	ldr	r0, [pc, #336]	; (8004df0 <MX_TIM1_Init+0x238>)
 8004c9e:	f7ff feaf 	bl	8004a00 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8004ca2:	2360      	movs	r3, #96	; 0x60
 8004ca4:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004caa:	2300      	movs	r3, #0
 8004cac:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8004cc2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	2101      	movs	r1, #1
 8004cca:	4849      	ldr	r0, [pc, #292]	; (8004df0 <MX_TIM1_Init+0x238>)
 8004ccc:	f7fe f886 	bl	8002ddc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	4847      	ldr	r0, [pc, #284]	; (8004df0 <MX_TIM1_Init+0x238>)
 8004cd4:	f7ff fe52 	bl	800497c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 8004cd8:	2110      	movs	r1, #16
 8004cda:	4845      	ldr	r0, [pc, #276]	; (8004df0 <MX_TIM1_Init+0x238>)
 8004cdc:	f7ff fe90 	bl	8004a00 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8004ce8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004cec:	461a      	mov	r2, r3
 8004cee:	2110      	movs	r1, #16
 8004cf0:	483f      	ldr	r0, [pc, #252]	; (8004df0 <MX_TIM1_Init+0x238>)
 8004cf2:	f7fe f873 	bl	8002ddc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 8004cf6:	2110      	movs	r1, #16
 8004cf8:	483d      	ldr	r0, [pc, #244]	; (8004df0 <MX_TIM1_Init+0x238>)
 8004cfa:	f7ff fe3f 	bl	800497c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8004cfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d02:	483b      	ldr	r0, [pc, #236]	; (8004df0 <MX_TIM1_Init+0x238>)
 8004d04:	f7ff fe7c 	bl	8004a00 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8004d10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004d14:	461a      	mov	r2, r3
 8004d16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d1a:	4835      	ldr	r0, [pc, #212]	; (8004df0 <MX_TIM1_Init+0x238>)
 8004d1c:	f7fe f85e 	bl	8002ddc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8004d20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d24:	4832      	ldr	r0, [pc, #200]	; (8004df0 <MX_TIM1_Init+0x238>)
 8004d26:	f7ff fe29 	bl	800497c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 8004d2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d2e:	4830      	ldr	r0, [pc, #192]	; (8004df0 <MX_TIM1_Init+0x238>)
 8004d30:	f7ff fe66 	bl	8004a00 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 8004d34:	2370      	movs	r3, #112	; 0x70
 8004d36:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8004d40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004d44:	461a      	mov	r2, r3
 8004d46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d4a:	4829      	ldr	r0, [pc, #164]	; (8004df0 <MX_TIM1_Init+0x238>)
 8004d4c:	f7fe f846 	bl	8002ddc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 8004d50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d54:	4826      	ldr	r0, [pc, #152]	; (8004df0 <MX_TIM1_Init+0x238>)
 8004d56:	f7ff fe11 	bl	800497c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerInput(TIM1, LL_TIM_TS_ITR1);
 8004d5a:	2110      	movs	r1, #16
 8004d5c:	4824      	ldr	r0, [pc, #144]	; (8004df0 <MX_TIM1_Init+0x238>)
 8004d5e:	f7ff feb7 	bl	8004ad0 <LL_TIM_SetTriggerInput>
  LL_TIM_SetSlaveMode(TIM1, LL_TIM_SLAVEMODE_TRIGGER);
 8004d62:	2106      	movs	r1, #6
 8004d64:	4822      	ldr	r0, [pc, #136]	; (8004df0 <MX_TIM1_Init+0x238>)
 8004d66:	f7ff fea0 	bl	8004aaa <LL_TIM_SetSlaveMode>
  LL_TIM_DisableIT_TRIG(TIM1);
 8004d6a:	4821      	ldr	r0, [pc, #132]	; (8004df0 <MX_TIM1_Init+0x238>)
 8004d6c:	f7ff fed3 	bl	8004b16 <LL_TIM_DisableIT_TRIG>
  LL_TIM_DisableDMAReq_TRIG(TIM1);
 8004d70:	481f      	ldr	r0, [pc, #124]	; (8004df0 <MX_TIM1_Init+0x238>)
 8004d72:	f7ff fee0 	bl	8004b36 <LL_TIM_DisableDMAReq_TRIG>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8004d76:	2100      	movs	r1, #0
 8004d78:	481d      	ldr	r0, [pc, #116]	; (8004df0 <MX_TIM1_Init+0x238>)
 8004d7a:	f7ff fe83 	bl	8004a84 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8004d7e:	481c      	ldr	r0, [pc, #112]	; (8004df0 <MX_TIM1_Init+0x238>)
 8004d80:	f7ff feb9 	bl	8004af6 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_ENABLE;
 8004d84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d88:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_ENABLE;
 8004d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d8e:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_1;
 8004d90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d94:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_ENABLE;
 8004d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004da0:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8004da2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8004da8:	2300      	movs	r3, #0
 8004daa:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8004dac:	f107 031c 	add.w	r3, r7, #28
 8004db0:	4619      	mov	r1, r3
 8004db2:	480f      	ldr	r0, [pc, #60]	; (8004df0 <MX_TIM1_Init+0x238>)
 8004db4:	f7fe f84a 	bl	8002e4c <LL_TIM_BDTR_Init>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004db8:	2001      	movs	r0, #1
 8004dba:	f7ff fecd 	bl	8004b58 <LL_AHB1_GRP1_EnableClock>
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8004dbe:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004dc2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8004dc8:	2302      	movs	r3, #2
 8004dca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dd8:	1d3b      	adds	r3, r7, #4
 8004dda:	4619      	mov	r1, r3
 8004ddc:	4803      	ldr	r0, [pc, #12]	; (8004dec <MX_TIM1_Init+0x234>)
 8004dde:	f7fd fe74 	bl	8002aca <LL_GPIO_Init>

}
 8004de2:	bf00      	nop
 8004de4:	3768      	adds	r7, #104	; 0x68
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	40020000 	.word	0x40020000
 8004df0:	40010000 	.word	0x40010000

08004df4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8004df8:	4b11      	ldr	r3, [pc, #68]	; (8004e40 <MX_USART2_UART_Init+0x4c>)
 8004dfa:	4a12      	ldr	r2, [pc, #72]	; (8004e44 <MX_USART2_UART_Init+0x50>)
 8004dfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004dfe:	4b10      	ldr	r3, [pc, #64]	; (8004e40 <MX_USART2_UART_Init+0x4c>)
 8004e00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004e04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004e06:	4b0e      	ldr	r3, [pc, #56]	; (8004e40 <MX_USART2_UART_Init+0x4c>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004e0c:	4b0c      	ldr	r3, [pc, #48]	; (8004e40 <MX_USART2_UART_Init+0x4c>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004e12:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <MX_USART2_UART_Init+0x4c>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004e18:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <MX_USART2_UART_Init+0x4c>)
 8004e1a:	220c      	movs	r2, #12
 8004e1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e1e:	4b08      	ldr	r3, [pc, #32]	; (8004e40 <MX_USART2_UART_Init+0x4c>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e24:	4b06      	ldr	r3, [pc, #24]	; (8004e40 <MX_USART2_UART_Init+0x4c>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004e2a:	4805      	ldr	r0, [pc, #20]	; (8004e40 <MX_USART2_UART_Init+0x4c>)
 8004e2c:	f7fd f8a6 	bl	8001f7c <HAL_UART_Init>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004e36:	f7ff fc11 	bl	800465c <Error_Handler>
  }

}
 8004e3a:	bf00      	nop
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	200000a8 	.word	0x200000a8
 8004e44:	40004400 	.word	0x40004400

08004e48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b08a      	sub	sp, #40	; 0x28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e50:	f107 0314 	add.w	r3, r7, #20
 8004e54:	2200      	movs	r2, #0
 8004e56:	601a      	str	r2, [r3, #0]
 8004e58:	605a      	str	r2, [r3, #4]
 8004e5a:	609a      	str	r2, [r3, #8]
 8004e5c:	60da      	str	r2, [r3, #12]
 8004e5e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a19      	ldr	r2, [pc, #100]	; (8004ecc <HAL_UART_MspInit+0x84>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d12b      	bne.n	8004ec2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	613b      	str	r3, [r7, #16]
 8004e6e:	4b18      	ldr	r3, [pc, #96]	; (8004ed0 <HAL_UART_MspInit+0x88>)
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	4a17      	ldr	r2, [pc, #92]	; (8004ed0 <HAL_UART_MspInit+0x88>)
 8004e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e78:	6413      	str	r3, [r2, #64]	; 0x40
 8004e7a:	4b15      	ldr	r3, [pc, #84]	; (8004ed0 <HAL_UART_MspInit+0x88>)
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e82:	613b      	str	r3, [r7, #16]
 8004e84:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e86:	2300      	movs	r3, #0
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	4b11      	ldr	r3, [pc, #68]	; (8004ed0 <HAL_UART_MspInit+0x88>)
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	4a10      	ldr	r2, [pc, #64]	; (8004ed0 <HAL_UART_MspInit+0x88>)
 8004e90:	f043 0301 	orr.w	r3, r3, #1
 8004e94:	6313      	str	r3, [r2, #48]	; 0x30
 8004e96:	4b0e      	ldr	r3, [pc, #56]	; (8004ed0 <HAL_UART_MspInit+0x88>)
 8004e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004ea2:	230c      	movs	r3, #12
 8004ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004eb2:	2307      	movs	r3, #7
 8004eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eb6:	f107 0314 	add.w	r3, r7, #20
 8004eba:	4619      	mov	r1, r3
 8004ebc:	4805      	ldr	r0, [pc, #20]	; (8004ed4 <HAL_UART_MspInit+0x8c>)
 8004ebe:	f7fc f96b 	bl	8001198 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004ec2:	bf00      	nop
 8004ec4:	3728      	adds	r7, #40	; 0x28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	40004400 	.word	0x40004400
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	40020000 	.word	0x40020000

08004ed8 <LL_ADC_Enable>:
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f043 0201 	orr.w	r2, r3, #1
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	609a      	str	r2, [r3, #8]
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <LL_ADC_INJ_ReadConversionData12>:
{
 8004ef8:	b490      	push	{r4, r7}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JDRX_REGOFFSET_MASK));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	333c      	adds	r3, #60	; 0x3c
 8004f06:	4619      	mov	r1, r3
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f0e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004f12:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	fa92 f2a2 	rbit	r2, r2
 8004f1a:	60ba      	str	r2, [r7, #8]
  return result;
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	fab2 f282 	clz	r2, r2
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	40d3      	lsrs	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	440b      	add	r3, r1
 8004f2a:	461c      	mov	r4, r3
  return (uint16_t)(READ_BIT(*preg,
 8004f2c:	6823      	ldr	r3, [r4, #0]
                   );
 8004f2e:	b29b      	uxth	r3, r3
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bc90      	pop	{r4, r7}
 8004f38:	4770      	bx	lr

08004f3a <LL_ADC_IsActiveFlag_JEOS>:
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0304 	and.w	r3, r3, #4
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	bf0c      	ite	eq
 8004f4e:	2301      	moveq	r3, #1
 8004f50:	2300      	movne	r3, #0
 8004f52:	b2db      	uxtb	r3, r3
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <LL_ADC_ClearFlag_JEOS>:
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f06f 0204 	mvn.w	r2, #4
 8004f6e:	601a      	str	r2, [r3, #0]
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <LL_ADC_EnableIT_JEOS>:
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	605a      	str	r2, [r3, #4]
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <_ZN3PWMC1Ev>:


#ifndef PWM_HPP_
#define PWM_HPP_

class PWM {
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	605a      	str	r2, [r3, #4]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4618      	mov	r0, r3
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <cppwrapper>:
void cpploop(void) {
    LedBlink instance;
    instance.toggle();
}

void cppwrapper(void){
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b090      	sub	sp, #64	; 0x40
 8004fbc:	af00      	add	r7, sp, #0
	std::vector<int> num;
 8004fbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7fe f93c 	bl	8003240 <_ZNSt6vectorIiSaIiEEC1Ev>
	vectorInit(&num);
 8004fc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 f8ff 	bl	80051d0 <_Z10vectorInitPSt6vectorIiSaIiEE>

    ADC_Init();
 8004fd2:	f000 f969 	bl	80052a8 <_Z8ADC_Initv>

	PWM PWM_Object1;
 8004fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7ff ffde 	bl	8004f9c <_ZN3PWMC1Ev>
	PWM PWM_Object2;
 8004fe0:	f107 0318 	add.w	r3, r7, #24
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7ff ffd9 	bl	8004f9c <_ZN3PWMC1Ev>
	PWM PWM_Object3;
 8004fea:	f107 030c 	add.w	r3, r7, #12
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7ff ffd4 	bl	8004f9c <_ZN3PWMC1Ev>
	PWM PWM_Object4;
 8004ff4:	463b      	mov	r3, r7
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7ff ffd0 	bl	8004f9c <_ZN3PWMC1Ev>

	PWM_Object1.setTIM(TIM1);
 8004ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005000:	4957      	ldr	r1, [pc, #348]	; (8005160 <cppwrapper+0x1a8>)
 8005002:	4618      	mov	r0, r3
 8005004:	f7fe fd0f 	bl	8003a26 <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object2.setTIM(TIM1);
 8005008:	f107 0318 	add.w	r3, r7, #24
 800500c:	4954      	ldr	r1, [pc, #336]	; (8005160 <cppwrapper+0x1a8>)
 800500e:	4618      	mov	r0, r3
 8005010:	f7fe fd09 	bl	8003a26 <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object3.setTIM(TIM1);
 8005014:	f107 030c 	add.w	r3, r7, #12
 8005018:	4951      	ldr	r1, [pc, #324]	; (8005160 <cppwrapper+0x1a8>)
 800501a:	4618      	mov	r0, r3
 800501c:	f7fe fd03 	bl	8003a26 <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object4.setTIM(TIM1);
 8005020:	463b      	mov	r3, r7
 8005022:	494f      	ldr	r1, [pc, #316]	; (8005160 <cppwrapper+0x1a8>)
 8005024:	4618      	mov	r0, r3
 8005026:	f7fe fcfe 	bl	8003a26 <_ZN3PWM6setTIMEP11TIM_TypeDef>

	PWM_Object1.setCH(1);
 800502a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800502e:	2101      	movs	r1, #1
 8005030:	4618      	mov	r0, r3
 8005032:	f7fe fd06 	bl	8003a42 <_ZN3PWM5setCHEi>
	PWM_Object2.setCH(2);
 8005036:	f107 0318 	add.w	r3, r7, #24
 800503a:	2102      	movs	r1, #2
 800503c:	4618      	mov	r0, r3
 800503e:	f7fe fd00 	bl	8003a42 <_ZN3PWM5setCHEi>
	PWM_Object3.setCH(3);
 8005042:	f107 030c 	add.w	r3, r7, #12
 8005046:	2103      	movs	r1, #3
 8005048:	4618      	mov	r0, r3
 800504a:	f7fe fcfa 	bl	8003a42 <_ZN3PWM5setCHEi>
	PWM_Object4.setCH(4);
 800504e:	463b      	mov	r3, r7
 8005050:	2104      	movs	r1, #4
 8005052:	4618      	mov	r0, r3
 8005054:	f7fe fcf5 	bl	8003a42 <_ZN3PWM5setCHEi>

	PWM_Object1.Init();
 8005058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800505c:	4618      	mov	r0, r3
 800505e:	f7fe fcfe 	bl	8003a5e <_ZN3PWM4InitEv>
	PWM_Object2.Init();
 8005062:	f107 0318 	add.w	r3, r7, #24
 8005066:	4618      	mov	r0, r3
 8005068:	f7fe fcf9 	bl	8003a5e <_ZN3PWM4InitEv>
	PWM_Object3.Init();
 800506c:	f107 030c 	add.w	r3, r7, #12
 8005070:	4618      	mov	r0, r3
 8005072:	f7fe fcf4 	bl	8003a5e <_ZN3PWM4InitEv>
	PWM_Object4.Init();
 8005076:	463b      	mov	r3, r7
 8005078:	4618      	mov	r0, r3
 800507a:	f7fe fcf0 	bl	8003a5e <_ZN3PWM4InitEv>


	PWM_Object1.Duty(60000);
 800507e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005082:	f64e 2160 	movw	r1, #60000	; 0xea60
 8005086:	4618      	mov	r0, r3
 8005088:	f7fe fd5c 	bl	8003b44 <_ZN3PWM4DutyEi>
	PWM_Object2.Duty(60000);
 800508c:	f107 0318 	add.w	r3, r7, #24
 8005090:	f64e 2160 	movw	r1, #60000	; 0xea60
 8005094:	4618      	mov	r0, r3
 8005096:	f7fe fd55 	bl	8003b44 <_ZN3PWM4DutyEi>
	PWM_Object3.Duty(60000);
 800509a:	f107 030c 	add.w	r3, r7, #12
 800509e:	f64e 2160 	movw	r1, #60000	; 0xea60
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fe fd4e 	bl	8003b44 <_ZN3PWM4DutyEi>
	PWM_Object4.Duty(60000);
 80050a8:	463b      	mov	r3, r7
 80050aa:	f64e 2160 	movw	r1, #60000	; 0xea60
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fe fd48 	bl	8003b44 <_ZN3PWM4DutyEi>

	while(1){
		  for(int i=0;i<600;i++){
 80050b4:	2300      	movs	r3, #0
 80050b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ba:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80050be:	daf9      	bge.n	80050b4 <cppwrapper+0xfc>
			  HAL_Delay(1);
 80050c0:	2001      	movs	r0, #1
 80050c2:	f7fb ff61 	bl	8000f88 <HAL_Delay>
			  PWM_Object1.Duty(num[i]);
 80050c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050cc:	4611      	mov	r1, r2
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 f8fa 	bl	80052c8 <_ZNSt6vectorIiSaIiEEixEj>
 80050d4:	4603      	mov	r3, r0
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050dc:	4611      	mov	r1, r2
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fe fd30 	bl	8003b44 <_ZN3PWM4DutyEi>
			  PWM_Object2.Duty(num[(i+200)%600]);
 80050e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e6:	33c8      	adds	r3, #200	; 0xc8
 80050e8:	4a1e      	ldr	r2, [pc, #120]	; (8005164 <cppwrapper+0x1ac>)
 80050ea:	fb82 1203 	smull	r1, r2, r2, r3
 80050ee:	1191      	asrs	r1, r2, #6
 80050f0:	17da      	asrs	r2, r3, #31
 80050f2:	1a8a      	subs	r2, r1, r2
 80050f4:	f44f 7116 	mov.w	r1, #600	; 0x258
 80050f8:	fb01 f202 	mul.w	r2, r1, r2
 80050fc:	1a9a      	subs	r2, r3, r2
 80050fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005102:	4611      	mov	r1, r2
 8005104:	4618      	mov	r0, r3
 8005106:	f000 f8df 	bl	80052c8 <_ZNSt6vectorIiSaIiEEixEj>
 800510a:	4603      	mov	r3, r0
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	f107 0318 	add.w	r3, r7, #24
 8005112:	4611      	mov	r1, r2
 8005114:	4618      	mov	r0, r3
 8005116:	f7fe fd15 	bl	8003b44 <_ZN3PWM4DutyEi>
			  PWM_Object3.Duty(num[(i+400)%600]);
 800511a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800511c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8005120:	4a10      	ldr	r2, [pc, #64]	; (8005164 <cppwrapper+0x1ac>)
 8005122:	fb82 1203 	smull	r1, r2, r2, r3
 8005126:	1191      	asrs	r1, r2, #6
 8005128:	17da      	asrs	r2, r3, #31
 800512a:	1a8a      	subs	r2, r1, r2
 800512c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005130:	fb01 f202 	mul.w	r2, r1, r2
 8005134:	1a9a      	subs	r2, r3, r2
 8005136:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800513a:	4611      	mov	r1, r2
 800513c:	4618      	mov	r0, r3
 800513e:	f000 f8c3 	bl	80052c8 <_ZNSt6vectorIiSaIiEEixEj>
 8005142:	4603      	mov	r3, r0
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	f107 030c 	add.w	r3, r7, #12
 800514a:	4611      	mov	r1, r2
 800514c:	4618      	mov	r0, r3
 800514e:	f7fe fcf9 	bl	8003b44 <_ZN3PWM4DutyEi>

			  HAL_Delay(1);//ここにブレークポイント打ってADCの値が見える
 8005152:	2001      	movs	r0, #1
 8005154:	f7fb ff18 	bl	8000f88 <HAL_Delay>
		  for(int i=0;i<600;i++){
 8005158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800515a:	3301      	adds	r3, #1
 800515c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800515e:	e7ab      	b.n	80050b8 <cppwrapper+0x100>
 8005160:	40010000 	.word	0x40010000
 8005164:	1b4e81b5 	.word	0x1b4e81b5

08005168 <HighFreqTask>:
			  }*/
		  }
	}
}

void HighFreqTask(void){
 8005168:	b580      	push	{r7, lr}
 800516a:	af00      	add	r7, sp, #0

	if (LL_ADC_IsActiveFlag_JEOS(ADC1) == 1)
 800516c:	4814      	ldr	r0, [pc, #80]	; (80051c0 <HighFreqTask+0x58>)
 800516e:	f7ff fee4 	bl	8004f3a <LL_ADC_IsActiveFlag_JEOS>
 8005172:	4603      	mov	r3, r0
 8005174:	2b01      	cmp	r3, #1
 8005176:	bf0c      	ite	eq
 8005178:	2301      	moveq	r3, #1
 800517a:	2300      	movne	r3, #0
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d01c      	beq.n	80051bc <HighFreqTask+0x54>
		{
			LL_ADC_ClearFlag_JEOS(ADC1);
 8005182:	480f      	ldr	r0, [pc, #60]	; (80051c0 <HighFreqTask+0x58>)
 8005184:	f7ff feec 	bl	8004f60 <LL_ADC_ClearFlag_JEOS>
			adc_data1 = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_1);
 8005188:	2101      	movs	r1, #1
 800518a:	480d      	ldr	r0, [pc, #52]	; (80051c0 <HighFreqTask+0x58>)
 800518c:	f7ff feb4 	bl	8004ef8 <LL_ADC_INJ_ReadConversionData12>
 8005190:	4603      	mov	r3, r0
 8005192:	461a      	mov	r2, r3
 8005194:	4b0b      	ldr	r3, [pc, #44]	; (80051c4 <HighFreqTask+0x5c>)
 8005196:	801a      	strh	r2, [r3, #0]
			adc_data2 = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_2);
 8005198:	f241 1102 	movw	r1, #4354	; 0x1102
 800519c:	4808      	ldr	r0, [pc, #32]	; (80051c0 <HighFreqTask+0x58>)
 800519e:	f7ff feab 	bl	8004ef8 <LL_ADC_INJ_ReadConversionData12>
 80051a2:	4603      	mov	r3, r0
 80051a4:	461a      	mov	r2, r3
 80051a6:	4b08      	ldr	r3, [pc, #32]	; (80051c8 <HighFreqTask+0x60>)
 80051a8:	801a      	strh	r2, [r3, #0]
			adc_data3 = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_3);
 80051aa:	f242 2103 	movw	r1, #8707	; 0x2203
 80051ae:	4804      	ldr	r0, [pc, #16]	; (80051c0 <HighFreqTask+0x58>)
 80051b0:	f7ff fea2 	bl	8004ef8 <LL_ADC_INJ_ReadConversionData12>
 80051b4:	4603      	mov	r3, r0
 80051b6:	461a      	mov	r2, r3
 80051b8:	4b04      	ldr	r3, [pc, #16]	; (80051cc <HighFreqTask+0x64>)
 80051ba:	801a      	strh	r2, [r3, #0]
		}
/*	else
		{
			LL_ADC_WriteReg(ADC1,ISR,0);
		}*/
}
 80051bc:	bf00      	nop
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	40012000 	.word	0x40012000
 80051c4:	20000090 	.word	0x20000090
 80051c8:	20000092 	.word	0x20000092
 80051cc:	20000094 	.word	0x20000094

080051d0 <_Z10vectorInitPSt6vectorIiSaIiEE>:


void vectorInit(std::vector<int> *pVector){
 80051d0:	b5b0      	push	{r4, r5, r7, lr}
 80051d2:	b088      	sub	sp, #32
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
	int lange;
	lange = 600;
 80051d8:	f44f 7316 	mov.w	r3, #600	; 0x258
 80051dc:	61bb      	str	r3, [r7, #24]
	int count = 65535;
 80051de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051e2:	617b      	str	r3, [r7, #20]
	for(int i=0;i<lange;i++){
 80051e4:	2300      	movs	r3, #0
 80051e6:	61fb      	str	r3, [r7, #28]
 80051e8:	69fa      	ldr	r2, [r7, #28]
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	da53      	bge.n	8005298 <_Z10vectorInitPSt6vectorIiSaIiEE+0xc8>
		float fsinval = sin(i*2*M_PI/(float)lange);
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fb f959 	bl	80004ac <__aeabi_i2d>
 80051fa:	a329      	add	r3, pc, #164	; (adr r3, 80052a0 <_Z10vectorInitPSt6vectorIiSaIiEE+0xd0>)
 80051fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005200:	f7fb f9be 	bl	8000580 <__aeabi_dmul>
 8005204:	4603      	mov	r3, r0
 8005206:	460c      	mov	r4, r1
 8005208:	4625      	mov	r5, r4
 800520a:	461c      	mov	r4, r3
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	ee07 3a90 	vmov	s15, r3
 8005212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005216:	ee17 0a90 	vmov	r0, s15
 800521a:	f7fb f959 	bl	80004d0 <__aeabi_f2d>
 800521e:	4602      	mov	r2, r0
 8005220:	460b      	mov	r3, r1
 8005222:	4620      	mov	r0, r4
 8005224:	4629      	mov	r1, r5
 8005226:	f7fb fad5 	bl	80007d4 <__aeabi_ddiv>
 800522a:	4603      	mov	r3, r0
 800522c:	460c      	mov	r4, r1
 800522e:	ec44 3b17 	vmov	d7, r3, r4
 8005232:	eeb0 0a47 	vmov.f32	s0, s14
 8005236:	eef0 0a67 	vmov.f32	s1, s15
 800523a:	f000 f8a1 	bl	8005380 <sin>
 800523e:	ec54 3b10 	vmov	r3, r4, d0
 8005242:	4618      	mov	r0, r3
 8005244:	4621      	mov	r1, r4
 8005246:	f7fb fc5d 	bl	8000b04 <__aeabi_d2f>
 800524a:	4603      	mov	r3, r0
 800524c:	613b      	str	r3, [r7, #16]
		int val = count/2 * fsinval + count/2;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	0fda      	lsrs	r2, r3, #31
 8005252:	4413      	add	r3, r2
 8005254:	105b      	asrs	r3, r3, #1
 8005256:	ee07 3a90 	vmov	s15, r3
 800525a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800525e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005262:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	0fda      	lsrs	r2, r3, #31
 800526a:	4413      	add	r3, r2
 800526c:	105b      	asrs	r3, r3, #1
 800526e:	ee07 3a90 	vmov	s15, r3
 8005272:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800527a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800527e:	ee17 3a90 	vmov	r3, s15
 8005282:	60fb      	str	r3, [r7, #12]
		pVector->push_back(val);
 8005284:	f107 030c 	add.w	r3, r7, #12
 8005288:	4619      	mov	r1, r3
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7fd ffe5 	bl	800325a <_ZNSt6vectorIiSaIiEE9push_backERKi>
	for(int i=0;i<lange;i++){
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	3301      	adds	r3, #1
 8005294:	61fb      	str	r3, [r7, #28]
 8005296:	e7a7      	b.n	80051e8 <_Z10vectorInitPSt6vectorIiSaIiEE+0x18>
	}
}
 8005298:	bf00      	nop
 800529a:	3720      	adds	r7, #32
 800529c:	46bd      	mov	sp, r7
 800529e:	bdb0      	pop	{r4, r5, r7, pc}
 80052a0:	54442d18 	.word	0x54442d18
 80052a4:	400921fb 	.word	0x400921fb

080052a8 <_Z8ADC_Initv>:


void ADC_Init()
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
    LL_ADC_Enable( ADC1 );
 80052ac:	4805      	ldr	r0, [pc, #20]	; (80052c4 <_Z8ADC_Initv+0x1c>)
 80052ae:	f7ff fe13 	bl	8004ed8 <LL_ADC_Enable>
    //LL_ADC_Enable( ADC2 );

    /* ADC1 Injected conversions end interrupt enabling */
    LL_ADC_ClearFlag_JEOS( ADC1 );
 80052b2:	4804      	ldr	r0, [pc, #16]	; (80052c4 <_Z8ADC_Initv+0x1c>)
 80052b4:	f7ff fe54 	bl	8004f60 <LL_ADC_ClearFlag_JEOS>
    LL_ADC_EnableIT_JEOS( ADC1 );
 80052b8:	4802      	ldr	r0, [pc, #8]	; (80052c4 <_Z8ADC_Initv+0x1c>)
 80052ba:	f7ff fe5f 	bl	8004f7c <LL_ADC_EnableIT_JEOS>
}
 80052be:	bf00      	nop
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	40012000 	.word	0x40012000

080052c8 <_ZNSt6vectorIiSaIiEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4413      	add	r3, r2
      }
 80052dc:	4618      	mov	r0, r3
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80052e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005320 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80052ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80052ee:	e003      	b.n	80052f8 <LoopCopyDataInit>

080052f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80052f0:	4b0c      	ldr	r3, [pc, #48]	; (8005324 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80052f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80052f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80052f6:	3104      	adds	r1, #4

080052f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80052f8:	480b      	ldr	r0, [pc, #44]	; (8005328 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80052fa:	4b0c      	ldr	r3, [pc, #48]	; (800532c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80052fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80052fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005300:	d3f6      	bcc.n	80052f0 <CopyDataInit>
  ldr  r2, =_sbss
 8005302:	4a0b      	ldr	r2, [pc, #44]	; (8005330 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005304:	e002      	b.n	800530c <LoopFillZerobss>

08005306 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005306:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005308:	f842 3b04 	str.w	r3, [r2], #4

0800530c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800530c:	4b09      	ldr	r3, [pc, #36]	; (8005334 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800530e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005310:	d3f9      	bcc.n	8005306 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005312:	f7ff fa63 	bl	80047dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005316:	f001 f851 	bl	80063bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800531a:	f7ff f919 	bl	8004550 <main>
  bx  lr    
 800531e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005320:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 8005324:	080068b0 	.word	0x080068b0
  ldr  r0, =_sdata
 8005328:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800532c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8005330:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8005334:	200000ec 	.word	0x200000ec

08005338 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005338:	e7fe      	b.n	8005338 <CAN1_RX0_IRQHandler>

0800533a <_ZdlPv>:
 800533a:	f001 b86b 	b.w	8006414 <free>

0800533e <_Znwj>:
 800533e:	b510      	push	{r4, lr}
 8005340:	2800      	cmp	r0, #0
 8005342:	bf14      	ite	ne
 8005344:	4604      	movne	r4, r0
 8005346:	2401      	moveq	r4, #1
 8005348:	4620      	mov	r0, r4
 800534a:	f001 f85b 	bl	8006404 <malloc>
 800534e:	b930      	cbnz	r0, 800535e <_Znwj+0x20>
 8005350:	f000 f80c 	bl	800536c <_ZSt15get_new_handlerv>
 8005354:	b908      	cbnz	r0, 800535a <_Znwj+0x1c>
 8005356:	f001 f824 	bl	80063a2 <abort>
 800535a:	4780      	blx	r0
 800535c:	e7f4      	b.n	8005348 <_Znwj+0xa>
 800535e:	bd10      	pop	{r4, pc}

08005360 <_ZSt17__throw_bad_allocv>:
 8005360:	b508      	push	{r3, lr}
 8005362:	f001 f81e 	bl	80063a2 <abort>

08005366 <_ZSt20__throw_length_errorPKc>:
 8005366:	b508      	push	{r3, lr}
 8005368:	f001 f81b 	bl	80063a2 <abort>

0800536c <_ZSt15get_new_handlerv>:
 800536c:	4b02      	ldr	r3, [pc, #8]	; (8005378 <_ZSt15get_new_handlerv+0xc>)
 800536e:	6818      	ldr	r0, [r3, #0]
 8005370:	f3bf 8f5b 	dmb	ish
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	20000098 	.word	0x20000098
 800537c:	00000000 	.word	0x00000000

08005380 <sin>:
 8005380:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005382:	ec51 0b10 	vmov	r0, r1, d0
 8005386:	4a20      	ldr	r2, [pc, #128]	; (8005408 <sin+0x88>)
 8005388:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800538c:	4293      	cmp	r3, r2
 800538e:	dc07      	bgt.n	80053a0 <sin+0x20>
 8005390:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8005400 <sin+0x80>
 8005394:	2000      	movs	r0, #0
 8005396:	f000 fe37 	bl	8006008 <__kernel_sin>
 800539a:	ec51 0b10 	vmov	r0, r1, d0
 800539e:	e007      	b.n	80053b0 <sin+0x30>
 80053a0:	4a1a      	ldr	r2, [pc, #104]	; (800540c <sin+0x8c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	dd09      	ble.n	80053ba <sin+0x3a>
 80053a6:	ee10 2a10 	vmov	r2, s0
 80053aa:	460b      	mov	r3, r1
 80053ac:	f7fa ff30 	bl	8000210 <__aeabi_dsub>
 80053b0:	ec41 0b10 	vmov	d0, r0, r1
 80053b4:	b005      	add	sp, #20
 80053b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80053ba:	4668      	mov	r0, sp
 80053bc:	f000 f828 	bl	8005410 <__ieee754_rem_pio2>
 80053c0:	f000 0003 	and.w	r0, r0, #3
 80053c4:	2801      	cmp	r0, #1
 80053c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80053ca:	ed9d 0b00 	vldr	d0, [sp]
 80053ce:	d004      	beq.n	80053da <sin+0x5a>
 80053d0:	2802      	cmp	r0, #2
 80053d2:	d005      	beq.n	80053e0 <sin+0x60>
 80053d4:	b970      	cbnz	r0, 80053f4 <sin+0x74>
 80053d6:	2001      	movs	r0, #1
 80053d8:	e7dd      	b.n	8005396 <sin+0x16>
 80053da:	f000 fa0d 	bl	80057f8 <__kernel_cos>
 80053de:	e7dc      	b.n	800539a <sin+0x1a>
 80053e0:	2001      	movs	r0, #1
 80053e2:	f000 fe11 	bl	8006008 <__kernel_sin>
 80053e6:	ec53 2b10 	vmov	r2, r3, d0
 80053ea:	ee10 0a10 	vmov	r0, s0
 80053ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80053f2:	e7dd      	b.n	80053b0 <sin+0x30>
 80053f4:	f000 fa00 	bl	80057f8 <__kernel_cos>
 80053f8:	e7f5      	b.n	80053e6 <sin+0x66>
 80053fa:	bf00      	nop
 80053fc:	f3af 8000 	nop.w
	...
 8005408:	3fe921fb 	.word	0x3fe921fb
 800540c:	7fefffff 	.word	0x7fefffff

08005410 <__ieee754_rem_pio2>:
 8005410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005414:	ec57 6b10 	vmov	r6, r7, d0
 8005418:	4bc3      	ldr	r3, [pc, #780]	; (8005728 <__ieee754_rem_pio2+0x318>)
 800541a:	b08d      	sub	sp, #52	; 0x34
 800541c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005420:	4598      	cmp	r8, r3
 8005422:	4604      	mov	r4, r0
 8005424:	9704      	str	r7, [sp, #16]
 8005426:	dc07      	bgt.n	8005438 <__ieee754_rem_pio2+0x28>
 8005428:	2200      	movs	r2, #0
 800542a:	2300      	movs	r3, #0
 800542c:	ed84 0b00 	vstr	d0, [r4]
 8005430:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005434:	2500      	movs	r5, #0
 8005436:	e027      	b.n	8005488 <__ieee754_rem_pio2+0x78>
 8005438:	4bbc      	ldr	r3, [pc, #752]	; (800572c <__ieee754_rem_pio2+0x31c>)
 800543a:	4598      	cmp	r8, r3
 800543c:	dc75      	bgt.n	800552a <__ieee754_rem_pio2+0x11a>
 800543e:	9b04      	ldr	r3, [sp, #16]
 8005440:	4dbb      	ldr	r5, [pc, #748]	; (8005730 <__ieee754_rem_pio2+0x320>)
 8005442:	2b00      	cmp	r3, #0
 8005444:	ee10 0a10 	vmov	r0, s0
 8005448:	a3a9      	add	r3, pc, #676	; (adr r3, 80056f0 <__ieee754_rem_pio2+0x2e0>)
 800544a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544e:	4639      	mov	r1, r7
 8005450:	dd36      	ble.n	80054c0 <__ieee754_rem_pio2+0xb0>
 8005452:	f7fa fedd 	bl	8000210 <__aeabi_dsub>
 8005456:	45a8      	cmp	r8, r5
 8005458:	4606      	mov	r6, r0
 800545a:	460f      	mov	r7, r1
 800545c:	d018      	beq.n	8005490 <__ieee754_rem_pio2+0x80>
 800545e:	a3a6      	add	r3, pc, #664	; (adr r3, 80056f8 <__ieee754_rem_pio2+0x2e8>)
 8005460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005464:	f7fa fed4 	bl	8000210 <__aeabi_dsub>
 8005468:	4602      	mov	r2, r0
 800546a:	460b      	mov	r3, r1
 800546c:	e9c4 2300 	strd	r2, r3, [r4]
 8005470:	4630      	mov	r0, r6
 8005472:	4639      	mov	r1, r7
 8005474:	f7fa fecc 	bl	8000210 <__aeabi_dsub>
 8005478:	a39f      	add	r3, pc, #636	; (adr r3, 80056f8 <__ieee754_rem_pio2+0x2e8>)
 800547a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547e:	f7fa fec7 	bl	8000210 <__aeabi_dsub>
 8005482:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005486:	2501      	movs	r5, #1
 8005488:	4628      	mov	r0, r5
 800548a:	b00d      	add	sp, #52	; 0x34
 800548c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005490:	a39b      	add	r3, pc, #620	; (adr r3, 8005700 <__ieee754_rem_pio2+0x2f0>)
 8005492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005496:	f7fa febb 	bl	8000210 <__aeabi_dsub>
 800549a:	a39b      	add	r3, pc, #620	; (adr r3, 8005708 <__ieee754_rem_pio2+0x2f8>)
 800549c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a0:	4606      	mov	r6, r0
 80054a2:	460f      	mov	r7, r1
 80054a4:	f7fa feb4 	bl	8000210 <__aeabi_dsub>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	e9c4 2300 	strd	r2, r3, [r4]
 80054b0:	4630      	mov	r0, r6
 80054b2:	4639      	mov	r1, r7
 80054b4:	f7fa feac 	bl	8000210 <__aeabi_dsub>
 80054b8:	a393      	add	r3, pc, #588	; (adr r3, 8005708 <__ieee754_rem_pio2+0x2f8>)
 80054ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054be:	e7de      	b.n	800547e <__ieee754_rem_pio2+0x6e>
 80054c0:	f7fa fea8 	bl	8000214 <__adddf3>
 80054c4:	45a8      	cmp	r8, r5
 80054c6:	4606      	mov	r6, r0
 80054c8:	460f      	mov	r7, r1
 80054ca:	d016      	beq.n	80054fa <__ieee754_rem_pio2+0xea>
 80054cc:	a38a      	add	r3, pc, #552	; (adr r3, 80056f8 <__ieee754_rem_pio2+0x2e8>)
 80054ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d2:	f7fa fe9f 	bl	8000214 <__adddf3>
 80054d6:	4602      	mov	r2, r0
 80054d8:	460b      	mov	r3, r1
 80054da:	e9c4 2300 	strd	r2, r3, [r4]
 80054de:	4630      	mov	r0, r6
 80054e0:	4639      	mov	r1, r7
 80054e2:	f7fa fe95 	bl	8000210 <__aeabi_dsub>
 80054e6:	a384      	add	r3, pc, #528	; (adr r3, 80056f8 <__ieee754_rem_pio2+0x2e8>)
 80054e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ec:	f7fa fe92 	bl	8000214 <__adddf3>
 80054f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80054f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80054f8:	e7c6      	b.n	8005488 <__ieee754_rem_pio2+0x78>
 80054fa:	a381      	add	r3, pc, #516	; (adr r3, 8005700 <__ieee754_rem_pio2+0x2f0>)
 80054fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005500:	f7fa fe88 	bl	8000214 <__adddf3>
 8005504:	a380      	add	r3, pc, #512	; (adr r3, 8005708 <__ieee754_rem_pio2+0x2f8>)
 8005506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550a:	4606      	mov	r6, r0
 800550c:	460f      	mov	r7, r1
 800550e:	f7fa fe81 	bl	8000214 <__adddf3>
 8005512:	4602      	mov	r2, r0
 8005514:	460b      	mov	r3, r1
 8005516:	e9c4 2300 	strd	r2, r3, [r4]
 800551a:	4630      	mov	r0, r6
 800551c:	4639      	mov	r1, r7
 800551e:	f7fa fe77 	bl	8000210 <__aeabi_dsub>
 8005522:	a379      	add	r3, pc, #484	; (adr r3, 8005708 <__ieee754_rem_pio2+0x2f8>)
 8005524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005528:	e7e0      	b.n	80054ec <__ieee754_rem_pio2+0xdc>
 800552a:	4b82      	ldr	r3, [pc, #520]	; (8005734 <__ieee754_rem_pio2+0x324>)
 800552c:	4598      	cmp	r8, r3
 800552e:	f300 80d0 	bgt.w	80056d2 <__ieee754_rem_pio2+0x2c2>
 8005532:	f000 fe23 	bl	800617c <fabs>
 8005536:	ec57 6b10 	vmov	r6, r7, d0
 800553a:	ee10 0a10 	vmov	r0, s0
 800553e:	a374      	add	r3, pc, #464	; (adr r3, 8005710 <__ieee754_rem_pio2+0x300>)
 8005540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005544:	4639      	mov	r1, r7
 8005546:	f7fb f81b 	bl	8000580 <__aeabi_dmul>
 800554a:	2200      	movs	r2, #0
 800554c:	4b7a      	ldr	r3, [pc, #488]	; (8005738 <__ieee754_rem_pio2+0x328>)
 800554e:	f7fa fe61 	bl	8000214 <__adddf3>
 8005552:	f7fb faaf 	bl	8000ab4 <__aeabi_d2iz>
 8005556:	4605      	mov	r5, r0
 8005558:	f7fa ffa8 	bl	80004ac <__aeabi_i2d>
 800555c:	a364      	add	r3, pc, #400	; (adr r3, 80056f0 <__ieee754_rem_pio2+0x2e0>)
 800555e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005562:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005566:	f7fb f80b 	bl	8000580 <__aeabi_dmul>
 800556a:	4602      	mov	r2, r0
 800556c:	460b      	mov	r3, r1
 800556e:	4630      	mov	r0, r6
 8005570:	4639      	mov	r1, r7
 8005572:	f7fa fe4d 	bl	8000210 <__aeabi_dsub>
 8005576:	a360      	add	r3, pc, #384	; (adr r3, 80056f8 <__ieee754_rem_pio2+0x2e8>)
 8005578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557c:	4682      	mov	sl, r0
 800557e:	468b      	mov	fp, r1
 8005580:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005584:	f7fa fffc 	bl	8000580 <__aeabi_dmul>
 8005588:	2d1f      	cmp	r5, #31
 800558a:	4606      	mov	r6, r0
 800558c:	460f      	mov	r7, r1
 800558e:	dc0c      	bgt.n	80055aa <__ieee754_rem_pio2+0x19a>
 8005590:	1e6a      	subs	r2, r5, #1
 8005592:	4b6a      	ldr	r3, [pc, #424]	; (800573c <__ieee754_rem_pio2+0x32c>)
 8005594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005598:	4543      	cmp	r3, r8
 800559a:	d006      	beq.n	80055aa <__ieee754_rem_pio2+0x19a>
 800559c:	4632      	mov	r2, r6
 800559e:	463b      	mov	r3, r7
 80055a0:	4650      	mov	r0, sl
 80055a2:	4659      	mov	r1, fp
 80055a4:	f7fa fe34 	bl	8000210 <__aeabi_dsub>
 80055a8:	e00e      	b.n	80055c8 <__ieee754_rem_pio2+0x1b8>
 80055aa:	4632      	mov	r2, r6
 80055ac:	463b      	mov	r3, r7
 80055ae:	4650      	mov	r0, sl
 80055b0:	4659      	mov	r1, fp
 80055b2:	f7fa fe2d 	bl	8000210 <__aeabi_dsub>
 80055b6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80055ba:	9305      	str	r3, [sp, #20]
 80055bc:	9a05      	ldr	r2, [sp, #20]
 80055be:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b10      	cmp	r3, #16
 80055c6:	dc02      	bgt.n	80055ce <__ieee754_rem_pio2+0x1be>
 80055c8:	e9c4 0100 	strd	r0, r1, [r4]
 80055cc:	e039      	b.n	8005642 <__ieee754_rem_pio2+0x232>
 80055ce:	a34c      	add	r3, pc, #304	; (adr r3, 8005700 <__ieee754_rem_pio2+0x2f0>)
 80055d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055d8:	f7fa ffd2 	bl	8000580 <__aeabi_dmul>
 80055dc:	4606      	mov	r6, r0
 80055de:	460f      	mov	r7, r1
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4650      	mov	r0, sl
 80055e6:	4659      	mov	r1, fp
 80055e8:	f7fa fe12 	bl	8000210 <__aeabi_dsub>
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	4680      	mov	r8, r0
 80055f2:	4689      	mov	r9, r1
 80055f4:	4650      	mov	r0, sl
 80055f6:	4659      	mov	r1, fp
 80055f8:	f7fa fe0a 	bl	8000210 <__aeabi_dsub>
 80055fc:	4632      	mov	r2, r6
 80055fe:	463b      	mov	r3, r7
 8005600:	f7fa fe06 	bl	8000210 <__aeabi_dsub>
 8005604:	a340      	add	r3, pc, #256	; (adr r3, 8005708 <__ieee754_rem_pio2+0x2f8>)
 8005606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560a:	4606      	mov	r6, r0
 800560c:	460f      	mov	r7, r1
 800560e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005612:	f7fa ffb5 	bl	8000580 <__aeabi_dmul>
 8005616:	4632      	mov	r2, r6
 8005618:	463b      	mov	r3, r7
 800561a:	f7fa fdf9 	bl	8000210 <__aeabi_dsub>
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	4606      	mov	r6, r0
 8005624:	460f      	mov	r7, r1
 8005626:	4640      	mov	r0, r8
 8005628:	4649      	mov	r1, r9
 800562a:	f7fa fdf1 	bl	8000210 <__aeabi_dsub>
 800562e:	9a05      	ldr	r2, [sp, #20]
 8005630:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b31      	cmp	r3, #49	; 0x31
 8005638:	dc20      	bgt.n	800567c <__ieee754_rem_pio2+0x26c>
 800563a:	e9c4 0100 	strd	r0, r1, [r4]
 800563e:	46c2      	mov	sl, r8
 8005640:	46cb      	mov	fp, r9
 8005642:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005646:	4650      	mov	r0, sl
 8005648:	4642      	mov	r2, r8
 800564a:	464b      	mov	r3, r9
 800564c:	4659      	mov	r1, fp
 800564e:	f7fa fddf 	bl	8000210 <__aeabi_dsub>
 8005652:	463b      	mov	r3, r7
 8005654:	4632      	mov	r2, r6
 8005656:	f7fa fddb 	bl	8000210 <__aeabi_dsub>
 800565a:	9b04      	ldr	r3, [sp, #16]
 800565c:	2b00      	cmp	r3, #0
 800565e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005662:	f6bf af11 	bge.w	8005488 <__ieee754_rem_pio2+0x78>
 8005666:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800566a:	6063      	str	r3, [r4, #4]
 800566c:	f8c4 8000 	str.w	r8, [r4]
 8005670:	60a0      	str	r0, [r4, #8]
 8005672:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005676:	60e3      	str	r3, [r4, #12]
 8005678:	426d      	negs	r5, r5
 800567a:	e705      	b.n	8005488 <__ieee754_rem_pio2+0x78>
 800567c:	a326      	add	r3, pc, #152	; (adr r3, 8005718 <__ieee754_rem_pio2+0x308>)
 800567e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005682:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005686:	f7fa ff7b 	bl	8000580 <__aeabi_dmul>
 800568a:	4606      	mov	r6, r0
 800568c:	460f      	mov	r7, r1
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	4640      	mov	r0, r8
 8005694:	4649      	mov	r1, r9
 8005696:	f7fa fdbb 	bl	8000210 <__aeabi_dsub>
 800569a:	4602      	mov	r2, r0
 800569c:	460b      	mov	r3, r1
 800569e:	4682      	mov	sl, r0
 80056a0:	468b      	mov	fp, r1
 80056a2:	4640      	mov	r0, r8
 80056a4:	4649      	mov	r1, r9
 80056a6:	f7fa fdb3 	bl	8000210 <__aeabi_dsub>
 80056aa:	4632      	mov	r2, r6
 80056ac:	463b      	mov	r3, r7
 80056ae:	f7fa fdaf 	bl	8000210 <__aeabi_dsub>
 80056b2:	a31b      	add	r3, pc, #108	; (adr r3, 8005720 <__ieee754_rem_pio2+0x310>)
 80056b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b8:	4606      	mov	r6, r0
 80056ba:	460f      	mov	r7, r1
 80056bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056c0:	f7fa ff5e 	bl	8000580 <__aeabi_dmul>
 80056c4:	4632      	mov	r2, r6
 80056c6:	463b      	mov	r3, r7
 80056c8:	f7fa fda2 	bl	8000210 <__aeabi_dsub>
 80056cc:	4606      	mov	r6, r0
 80056ce:	460f      	mov	r7, r1
 80056d0:	e764      	b.n	800559c <__ieee754_rem_pio2+0x18c>
 80056d2:	4b1b      	ldr	r3, [pc, #108]	; (8005740 <__ieee754_rem_pio2+0x330>)
 80056d4:	4598      	cmp	r8, r3
 80056d6:	dd35      	ble.n	8005744 <__ieee754_rem_pio2+0x334>
 80056d8:	ee10 2a10 	vmov	r2, s0
 80056dc:	463b      	mov	r3, r7
 80056de:	4630      	mov	r0, r6
 80056e0:	4639      	mov	r1, r7
 80056e2:	f7fa fd95 	bl	8000210 <__aeabi_dsub>
 80056e6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80056ea:	e9c4 0100 	strd	r0, r1, [r4]
 80056ee:	e6a1      	b.n	8005434 <__ieee754_rem_pio2+0x24>
 80056f0:	54400000 	.word	0x54400000
 80056f4:	3ff921fb 	.word	0x3ff921fb
 80056f8:	1a626331 	.word	0x1a626331
 80056fc:	3dd0b461 	.word	0x3dd0b461
 8005700:	1a600000 	.word	0x1a600000
 8005704:	3dd0b461 	.word	0x3dd0b461
 8005708:	2e037073 	.word	0x2e037073
 800570c:	3ba3198a 	.word	0x3ba3198a
 8005710:	6dc9c883 	.word	0x6dc9c883
 8005714:	3fe45f30 	.word	0x3fe45f30
 8005718:	2e000000 	.word	0x2e000000
 800571c:	3ba3198a 	.word	0x3ba3198a
 8005720:	252049c1 	.word	0x252049c1
 8005724:	397b839a 	.word	0x397b839a
 8005728:	3fe921fb 	.word	0x3fe921fb
 800572c:	4002d97b 	.word	0x4002d97b
 8005730:	3ff921fb 	.word	0x3ff921fb
 8005734:	413921fb 	.word	0x413921fb
 8005738:	3fe00000 	.word	0x3fe00000
 800573c:	080066c4 	.word	0x080066c4
 8005740:	7fefffff 	.word	0x7fefffff
 8005744:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005748:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800574c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005750:	4630      	mov	r0, r6
 8005752:	460f      	mov	r7, r1
 8005754:	f7fb f9ae 	bl	8000ab4 <__aeabi_d2iz>
 8005758:	f7fa fea8 	bl	80004ac <__aeabi_i2d>
 800575c:	4602      	mov	r2, r0
 800575e:	460b      	mov	r3, r1
 8005760:	4630      	mov	r0, r6
 8005762:	4639      	mov	r1, r7
 8005764:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005768:	f7fa fd52 	bl	8000210 <__aeabi_dsub>
 800576c:	2200      	movs	r2, #0
 800576e:	4b1f      	ldr	r3, [pc, #124]	; (80057ec <__ieee754_rem_pio2+0x3dc>)
 8005770:	f7fa ff06 	bl	8000580 <__aeabi_dmul>
 8005774:	460f      	mov	r7, r1
 8005776:	4606      	mov	r6, r0
 8005778:	f7fb f99c 	bl	8000ab4 <__aeabi_d2iz>
 800577c:	f7fa fe96 	bl	80004ac <__aeabi_i2d>
 8005780:	4602      	mov	r2, r0
 8005782:	460b      	mov	r3, r1
 8005784:	4630      	mov	r0, r6
 8005786:	4639      	mov	r1, r7
 8005788:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800578c:	f7fa fd40 	bl	8000210 <__aeabi_dsub>
 8005790:	2200      	movs	r2, #0
 8005792:	4b16      	ldr	r3, [pc, #88]	; (80057ec <__ieee754_rem_pio2+0x3dc>)
 8005794:	f7fa fef4 	bl	8000580 <__aeabi_dmul>
 8005798:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800579c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80057a0:	f04f 0803 	mov.w	r8, #3
 80057a4:	2600      	movs	r6, #0
 80057a6:	2700      	movs	r7, #0
 80057a8:	4632      	mov	r2, r6
 80057aa:	463b      	mov	r3, r7
 80057ac:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80057b0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80057b4:	f7fb f94c 	bl	8000a50 <__aeabi_dcmpeq>
 80057b8:	b9b0      	cbnz	r0, 80057e8 <__ieee754_rem_pio2+0x3d8>
 80057ba:	4b0d      	ldr	r3, [pc, #52]	; (80057f0 <__ieee754_rem_pio2+0x3e0>)
 80057bc:	9301      	str	r3, [sp, #4]
 80057be:	2302      	movs	r3, #2
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	462a      	mov	r2, r5
 80057c4:	4643      	mov	r3, r8
 80057c6:	4621      	mov	r1, r4
 80057c8:	a806      	add	r0, sp, #24
 80057ca:	f000 f8dd 	bl	8005988 <__kernel_rem_pio2>
 80057ce:	9b04      	ldr	r3, [sp, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	4605      	mov	r5, r0
 80057d4:	f6bf ae58 	bge.w	8005488 <__ieee754_rem_pio2+0x78>
 80057d8:	6863      	ldr	r3, [r4, #4]
 80057da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80057de:	6063      	str	r3, [r4, #4]
 80057e0:	68e3      	ldr	r3, [r4, #12]
 80057e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80057e6:	e746      	b.n	8005676 <__ieee754_rem_pio2+0x266>
 80057e8:	46d0      	mov	r8, sl
 80057ea:	e7dd      	b.n	80057a8 <__ieee754_rem_pio2+0x398>
 80057ec:	41700000 	.word	0x41700000
 80057f0:	08006744 	.word	0x08006744
 80057f4:	00000000 	.word	0x00000000

080057f8 <__kernel_cos>:
 80057f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fc:	ec59 8b10 	vmov	r8, r9, d0
 8005800:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8005804:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8005808:	ed2d 8b02 	vpush	{d8}
 800580c:	eeb0 8a41 	vmov.f32	s16, s2
 8005810:	eef0 8a61 	vmov.f32	s17, s3
 8005814:	da07      	bge.n	8005826 <__kernel_cos+0x2e>
 8005816:	ee10 0a10 	vmov	r0, s0
 800581a:	4649      	mov	r1, r9
 800581c:	f7fb f94a 	bl	8000ab4 <__aeabi_d2iz>
 8005820:	2800      	cmp	r0, #0
 8005822:	f000 8089 	beq.w	8005938 <__kernel_cos+0x140>
 8005826:	4642      	mov	r2, r8
 8005828:	464b      	mov	r3, r9
 800582a:	4640      	mov	r0, r8
 800582c:	4649      	mov	r1, r9
 800582e:	f7fa fea7 	bl	8000580 <__aeabi_dmul>
 8005832:	2200      	movs	r2, #0
 8005834:	4b4e      	ldr	r3, [pc, #312]	; (8005970 <__kernel_cos+0x178>)
 8005836:	4604      	mov	r4, r0
 8005838:	460d      	mov	r5, r1
 800583a:	f7fa fea1 	bl	8000580 <__aeabi_dmul>
 800583e:	a340      	add	r3, pc, #256	; (adr r3, 8005940 <__kernel_cos+0x148>)
 8005840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005844:	4682      	mov	sl, r0
 8005846:	468b      	mov	fp, r1
 8005848:	4620      	mov	r0, r4
 800584a:	4629      	mov	r1, r5
 800584c:	f7fa fe98 	bl	8000580 <__aeabi_dmul>
 8005850:	a33d      	add	r3, pc, #244	; (adr r3, 8005948 <__kernel_cos+0x150>)
 8005852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005856:	f7fa fcdd 	bl	8000214 <__adddf3>
 800585a:	4622      	mov	r2, r4
 800585c:	462b      	mov	r3, r5
 800585e:	f7fa fe8f 	bl	8000580 <__aeabi_dmul>
 8005862:	a33b      	add	r3, pc, #236	; (adr r3, 8005950 <__kernel_cos+0x158>)
 8005864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005868:	f7fa fcd2 	bl	8000210 <__aeabi_dsub>
 800586c:	4622      	mov	r2, r4
 800586e:	462b      	mov	r3, r5
 8005870:	f7fa fe86 	bl	8000580 <__aeabi_dmul>
 8005874:	a338      	add	r3, pc, #224	; (adr r3, 8005958 <__kernel_cos+0x160>)
 8005876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587a:	f7fa fccb 	bl	8000214 <__adddf3>
 800587e:	4622      	mov	r2, r4
 8005880:	462b      	mov	r3, r5
 8005882:	f7fa fe7d 	bl	8000580 <__aeabi_dmul>
 8005886:	a336      	add	r3, pc, #216	; (adr r3, 8005960 <__kernel_cos+0x168>)
 8005888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588c:	f7fa fcc0 	bl	8000210 <__aeabi_dsub>
 8005890:	4622      	mov	r2, r4
 8005892:	462b      	mov	r3, r5
 8005894:	f7fa fe74 	bl	8000580 <__aeabi_dmul>
 8005898:	a333      	add	r3, pc, #204	; (adr r3, 8005968 <__kernel_cos+0x170>)
 800589a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589e:	f7fa fcb9 	bl	8000214 <__adddf3>
 80058a2:	4622      	mov	r2, r4
 80058a4:	462b      	mov	r3, r5
 80058a6:	f7fa fe6b 	bl	8000580 <__aeabi_dmul>
 80058aa:	4622      	mov	r2, r4
 80058ac:	462b      	mov	r3, r5
 80058ae:	f7fa fe67 	bl	8000580 <__aeabi_dmul>
 80058b2:	ec53 2b18 	vmov	r2, r3, d8
 80058b6:	4604      	mov	r4, r0
 80058b8:	460d      	mov	r5, r1
 80058ba:	4640      	mov	r0, r8
 80058bc:	4649      	mov	r1, r9
 80058be:	f7fa fe5f 	bl	8000580 <__aeabi_dmul>
 80058c2:	460b      	mov	r3, r1
 80058c4:	4602      	mov	r2, r0
 80058c6:	4629      	mov	r1, r5
 80058c8:	4620      	mov	r0, r4
 80058ca:	f7fa fca1 	bl	8000210 <__aeabi_dsub>
 80058ce:	4b29      	ldr	r3, [pc, #164]	; (8005974 <__kernel_cos+0x17c>)
 80058d0:	429e      	cmp	r6, r3
 80058d2:	4680      	mov	r8, r0
 80058d4:	4689      	mov	r9, r1
 80058d6:	dc11      	bgt.n	80058fc <__kernel_cos+0x104>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4650      	mov	r0, sl
 80058de:	4659      	mov	r1, fp
 80058e0:	f7fa fc96 	bl	8000210 <__aeabi_dsub>
 80058e4:	460b      	mov	r3, r1
 80058e6:	4924      	ldr	r1, [pc, #144]	; (8005978 <__kernel_cos+0x180>)
 80058e8:	4602      	mov	r2, r0
 80058ea:	2000      	movs	r0, #0
 80058ec:	f7fa fc90 	bl	8000210 <__aeabi_dsub>
 80058f0:	ecbd 8b02 	vpop	{d8}
 80058f4:	ec41 0b10 	vmov	d0, r0, r1
 80058f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058fc:	4b1f      	ldr	r3, [pc, #124]	; (800597c <__kernel_cos+0x184>)
 80058fe:	491e      	ldr	r1, [pc, #120]	; (8005978 <__kernel_cos+0x180>)
 8005900:	429e      	cmp	r6, r3
 8005902:	bfcc      	ite	gt
 8005904:	4d1e      	ldrgt	r5, [pc, #120]	; (8005980 <__kernel_cos+0x188>)
 8005906:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800590a:	2400      	movs	r4, #0
 800590c:	4622      	mov	r2, r4
 800590e:	462b      	mov	r3, r5
 8005910:	2000      	movs	r0, #0
 8005912:	f7fa fc7d 	bl	8000210 <__aeabi_dsub>
 8005916:	4622      	mov	r2, r4
 8005918:	4606      	mov	r6, r0
 800591a:	460f      	mov	r7, r1
 800591c:	462b      	mov	r3, r5
 800591e:	4650      	mov	r0, sl
 8005920:	4659      	mov	r1, fp
 8005922:	f7fa fc75 	bl	8000210 <__aeabi_dsub>
 8005926:	4642      	mov	r2, r8
 8005928:	464b      	mov	r3, r9
 800592a:	f7fa fc71 	bl	8000210 <__aeabi_dsub>
 800592e:	4602      	mov	r2, r0
 8005930:	460b      	mov	r3, r1
 8005932:	4630      	mov	r0, r6
 8005934:	4639      	mov	r1, r7
 8005936:	e7d9      	b.n	80058ec <__kernel_cos+0xf4>
 8005938:	2000      	movs	r0, #0
 800593a:	490f      	ldr	r1, [pc, #60]	; (8005978 <__kernel_cos+0x180>)
 800593c:	e7d8      	b.n	80058f0 <__kernel_cos+0xf8>
 800593e:	bf00      	nop
 8005940:	be8838d4 	.word	0xbe8838d4
 8005944:	bda8fae9 	.word	0xbda8fae9
 8005948:	bdb4b1c4 	.word	0xbdb4b1c4
 800594c:	3e21ee9e 	.word	0x3e21ee9e
 8005950:	809c52ad 	.word	0x809c52ad
 8005954:	3e927e4f 	.word	0x3e927e4f
 8005958:	19cb1590 	.word	0x19cb1590
 800595c:	3efa01a0 	.word	0x3efa01a0
 8005960:	16c15177 	.word	0x16c15177
 8005964:	3f56c16c 	.word	0x3f56c16c
 8005968:	5555554c 	.word	0x5555554c
 800596c:	3fa55555 	.word	0x3fa55555
 8005970:	3fe00000 	.word	0x3fe00000
 8005974:	3fd33332 	.word	0x3fd33332
 8005978:	3ff00000 	.word	0x3ff00000
 800597c:	3fe90000 	.word	0x3fe90000
 8005980:	3fd20000 	.word	0x3fd20000
 8005984:	00000000 	.word	0x00000000

08005988 <__kernel_rem_pio2>:
 8005988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800598c:	ed2d 8b02 	vpush	{d8}
 8005990:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8005994:	1ed4      	subs	r4, r2, #3
 8005996:	9308      	str	r3, [sp, #32]
 8005998:	9101      	str	r1, [sp, #4]
 800599a:	4bc5      	ldr	r3, [pc, #788]	; (8005cb0 <__kernel_rem_pio2+0x328>)
 800599c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800599e:	9009      	str	r0, [sp, #36]	; 0x24
 80059a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80059a4:	9304      	str	r3, [sp, #16]
 80059a6:	9b08      	ldr	r3, [sp, #32]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	9307      	str	r3, [sp, #28]
 80059ac:	2318      	movs	r3, #24
 80059ae:	fb94 f4f3 	sdiv	r4, r4, r3
 80059b2:	f06f 0317 	mvn.w	r3, #23
 80059b6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80059ba:	fb04 3303 	mla	r3, r4, r3, r3
 80059be:	eb03 0a02 	add.w	sl, r3, r2
 80059c2:	9b04      	ldr	r3, [sp, #16]
 80059c4:	9a07      	ldr	r2, [sp, #28]
 80059c6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005ca0 <__kernel_rem_pio2+0x318>
 80059ca:	eb03 0802 	add.w	r8, r3, r2
 80059ce:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80059d0:	1aa7      	subs	r7, r4, r2
 80059d2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80059d6:	ae22      	add	r6, sp, #136	; 0x88
 80059d8:	2500      	movs	r5, #0
 80059da:	4545      	cmp	r5, r8
 80059dc:	dd13      	ble.n	8005a06 <__kernel_rem_pio2+0x7e>
 80059de:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8005ca0 <__kernel_rem_pio2+0x318>
 80059e2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80059e6:	2600      	movs	r6, #0
 80059e8:	9b04      	ldr	r3, [sp, #16]
 80059ea:	429e      	cmp	r6, r3
 80059ec:	dc32      	bgt.n	8005a54 <__kernel_rem_pio2+0xcc>
 80059ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059f0:	9302      	str	r3, [sp, #8]
 80059f2:	9b08      	ldr	r3, [sp, #32]
 80059f4:	199d      	adds	r5, r3, r6
 80059f6:	ab22      	add	r3, sp, #136	; 0x88
 80059f8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80059fc:	9306      	str	r3, [sp, #24]
 80059fe:	ec59 8b18 	vmov	r8, r9, d8
 8005a02:	2700      	movs	r7, #0
 8005a04:	e01f      	b.n	8005a46 <__kernel_rem_pio2+0xbe>
 8005a06:	42ef      	cmn	r7, r5
 8005a08:	d407      	bmi.n	8005a1a <__kernel_rem_pio2+0x92>
 8005a0a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005a0e:	f7fa fd4d 	bl	80004ac <__aeabi_i2d>
 8005a12:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005a16:	3501      	adds	r5, #1
 8005a18:	e7df      	b.n	80059da <__kernel_rem_pio2+0x52>
 8005a1a:	ec51 0b18 	vmov	r0, r1, d8
 8005a1e:	e7f8      	b.n	8005a12 <__kernel_rem_pio2+0x8a>
 8005a20:	9906      	ldr	r1, [sp, #24]
 8005a22:	9d02      	ldr	r5, [sp, #8]
 8005a24:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8005a28:	9106      	str	r1, [sp, #24]
 8005a2a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8005a2e:	9502      	str	r5, [sp, #8]
 8005a30:	f7fa fda6 	bl	8000580 <__aeabi_dmul>
 8005a34:	4602      	mov	r2, r0
 8005a36:	460b      	mov	r3, r1
 8005a38:	4640      	mov	r0, r8
 8005a3a:	4649      	mov	r1, r9
 8005a3c:	f7fa fbea 	bl	8000214 <__adddf3>
 8005a40:	3701      	adds	r7, #1
 8005a42:	4680      	mov	r8, r0
 8005a44:	4689      	mov	r9, r1
 8005a46:	9b07      	ldr	r3, [sp, #28]
 8005a48:	429f      	cmp	r7, r3
 8005a4a:	dde9      	ble.n	8005a20 <__kernel_rem_pio2+0x98>
 8005a4c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8005a50:	3601      	adds	r6, #1
 8005a52:	e7c9      	b.n	80059e8 <__kernel_rem_pio2+0x60>
 8005a54:	9b04      	ldr	r3, [sp, #16]
 8005a56:	aa0e      	add	r2, sp, #56	; 0x38
 8005a58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005a5c:	930c      	str	r3, [sp, #48]	; 0x30
 8005a5e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005a60:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005a64:	9c04      	ldr	r4, [sp, #16]
 8005a66:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a68:	ab9a      	add	r3, sp, #616	; 0x268
 8005a6a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8005a6e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005a72:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005a76:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8005a7a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8005a7e:	ab9a      	add	r3, sp, #616	; 0x268
 8005a80:	445b      	add	r3, fp
 8005a82:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8005a86:	2500      	movs	r5, #0
 8005a88:	1b63      	subs	r3, r4, r5
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	dc78      	bgt.n	8005b80 <__kernel_rem_pio2+0x1f8>
 8005a8e:	4650      	mov	r0, sl
 8005a90:	ec49 8b10 	vmov	d0, r8, r9
 8005a94:	f000 fc00 	bl	8006298 <scalbn>
 8005a98:	ec57 6b10 	vmov	r6, r7, d0
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005aa2:	ee10 0a10 	vmov	r0, s0
 8005aa6:	4639      	mov	r1, r7
 8005aa8:	f7fa fd6a 	bl	8000580 <__aeabi_dmul>
 8005aac:	ec41 0b10 	vmov	d0, r0, r1
 8005ab0:	f000 fb6e 	bl	8006190 <floor>
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	ec51 0b10 	vmov	r0, r1, d0
 8005aba:	4b7e      	ldr	r3, [pc, #504]	; (8005cb4 <__kernel_rem_pio2+0x32c>)
 8005abc:	f7fa fd60 	bl	8000580 <__aeabi_dmul>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4630      	mov	r0, r6
 8005ac6:	4639      	mov	r1, r7
 8005ac8:	f7fa fba2 	bl	8000210 <__aeabi_dsub>
 8005acc:	460f      	mov	r7, r1
 8005ace:	4606      	mov	r6, r0
 8005ad0:	f7fa fff0 	bl	8000ab4 <__aeabi_d2iz>
 8005ad4:	9006      	str	r0, [sp, #24]
 8005ad6:	f7fa fce9 	bl	80004ac <__aeabi_i2d>
 8005ada:	4602      	mov	r2, r0
 8005adc:	460b      	mov	r3, r1
 8005ade:	4630      	mov	r0, r6
 8005ae0:	4639      	mov	r1, r7
 8005ae2:	f7fa fb95 	bl	8000210 <__aeabi_dsub>
 8005ae6:	f1ba 0f00 	cmp.w	sl, #0
 8005aea:	4606      	mov	r6, r0
 8005aec:	460f      	mov	r7, r1
 8005aee:	dd6c      	ble.n	8005bca <__kernel_rem_pio2+0x242>
 8005af0:	1e62      	subs	r2, r4, #1
 8005af2:	ab0e      	add	r3, sp, #56	; 0x38
 8005af4:	f1ca 0118 	rsb	r1, sl, #24
 8005af8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005afc:	9d06      	ldr	r5, [sp, #24]
 8005afe:	fa40 f301 	asr.w	r3, r0, r1
 8005b02:	441d      	add	r5, r3
 8005b04:	408b      	lsls	r3, r1
 8005b06:	1ac0      	subs	r0, r0, r3
 8005b08:	ab0e      	add	r3, sp, #56	; 0x38
 8005b0a:	9506      	str	r5, [sp, #24]
 8005b0c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005b10:	f1ca 0317 	rsb	r3, sl, #23
 8005b14:	fa40 f303 	asr.w	r3, r0, r3
 8005b18:	9302      	str	r3, [sp, #8]
 8005b1a:	9b02      	ldr	r3, [sp, #8]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	dd62      	ble.n	8005be6 <__kernel_rem_pio2+0x25e>
 8005b20:	9b06      	ldr	r3, [sp, #24]
 8005b22:	2200      	movs	r2, #0
 8005b24:	3301      	adds	r3, #1
 8005b26:	9306      	str	r3, [sp, #24]
 8005b28:	4615      	mov	r5, r2
 8005b2a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005b2e:	4294      	cmp	r4, r2
 8005b30:	f300 8095 	bgt.w	8005c5e <__kernel_rem_pio2+0x2d6>
 8005b34:	f1ba 0f00 	cmp.w	sl, #0
 8005b38:	dd07      	ble.n	8005b4a <__kernel_rem_pio2+0x1c2>
 8005b3a:	f1ba 0f01 	cmp.w	sl, #1
 8005b3e:	f000 80a2 	beq.w	8005c86 <__kernel_rem_pio2+0x2fe>
 8005b42:	f1ba 0f02 	cmp.w	sl, #2
 8005b46:	f000 80c1 	beq.w	8005ccc <__kernel_rem_pio2+0x344>
 8005b4a:	9b02      	ldr	r3, [sp, #8]
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d14a      	bne.n	8005be6 <__kernel_rem_pio2+0x25e>
 8005b50:	4632      	mov	r2, r6
 8005b52:	463b      	mov	r3, r7
 8005b54:	2000      	movs	r0, #0
 8005b56:	4958      	ldr	r1, [pc, #352]	; (8005cb8 <__kernel_rem_pio2+0x330>)
 8005b58:	f7fa fb5a 	bl	8000210 <__aeabi_dsub>
 8005b5c:	4606      	mov	r6, r0
 8005b5e:	460f      	mov	r7, r1
 8005b60:	2d00      	cmp	r5, #0
 8005b62:	d040      	beq.n	8005be6 <__kernel_rem_pio2+0x25e>
 8005b64:	4650      	mov	r0, sl
 8005b66:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005ca8 <__kernel_rem_pio2+0x320>
 8005b6a:	f000 fb95 	bl	8006298 <scalbn>
 8005b6e:	4630      	mov	r0, r6
 8005b70:	4639      	mov	r1, r7
 8005b72:	ec53 2b10 	vmov	r2, r3, d0
 8005b76:	f7fa fb4b 	bl	8000210 <__aeabi_dsub>
 8005b7a:	4606      	mov	r6, r0
 8005b7c:	460f      	mov	r7, r1
 8005b7e:	e032      	b.n	8005be6 <__kernel_rem_pio2+0x25e>
 8005b80:	2200      	movs	r2, #0
 8005b82:	4b4e      	ldr	r3, [pc, #312]	; (8005cbc <__kernel_rem_pio2+0x334>)
 8005b84:	4640      	mov	r0, r8
 8005b86:	4649      	mov	r1, r9
 8005b88:	f7fa fcfa 	bl	8000580 <__aeabi_dmul>
 8005b8c:	f7fa ff92 	bl	8000ab4 <__aeabi_d2iz>
 8005b90:	f7fa fc8c 	bl	80004ac <__aeabi_i2d>
 8005b94:	2200      	movs	r2, #0
 8005b96:	4b4a      	ldr	r3, [pc, #296]	; (8005cc0 <__kernel_rem_pio2+0x338>)
 8005b98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b9c:	f7fa fcf0 	bl	8000580 <__aeabi_dmul>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4640      	mov	r0, r8
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	f7fa fb32 	bl	8000210 <__aeabi_dsub>
 8005bac:	f7fa ff82 	bl	8000ab4 <__aeabi_d2iz>
 8005bb0:	ab0e      	add	r3, sp, #56	; 0x38
 8005bb2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8005bb6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8005bba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bbe:	f7fa fb29 	bl	8000214 <__adddf3>
 8005bc2:	3501      	adds	r5, #1
 8005bc4:	4680      	mov	r8, r0
 8005bc6:	4689      	mov	r9, r1
 8005bc8:	e75e      	b.n	8005a88 <__kernel_rem_pio2+0x100>
 8005bca:	d105      	bne.n	8005bd8 <__kernel_rem_pio2+0x250>
 8005bcc:	1e63      	subs	r3, r4, #1
 8005bce:	aa0e      	add	r2, sp, #56	; 0x38
 8005bd0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005bd4:	15c3      	asrs	r3, r0, #23
 8005bd6:	e79f      	b.n	8005b18 <__kernel_rem_pio2+0x190>
 8005bd8:	2200      	movs	r2, #0
 8005bda:	4b3a      	ldr	r3, [pc, #232]	; (8005cc4 <__kernel_rem_pio2+0x33c>)
 8005bdc:	f7fa ff56 	bl	8000a8c <__aeabi_dcmpge>
 8005be0:	2800      	cmp	r0, #0
 8005be2:	d139      	bne.n	8005c58 <__kernel_rem_pio2+0x2d0>
 8005be4:	9002      	str	r0, [sp, #8]
 8005be6:	2200      	movs	r2, #0
 8005be8:	2300      	movs	r3, #0
 8005bea:	4630      	mov	r0, r6
 8005bec:	4639      	mov	r1, r7
 8005bee:	f7fa ff2f 	bl	8000a50 <__aeabi_dcmpeq>
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	f000 80c7 	beq.w	8005d86 <__kernel_rem_pio2+0x3fe>
 8005bf8:	1e65      	subs	r5, r4, #1
 8005bfa:	462b      	mov	r3, r5
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	9904      	ldr	r1, [sp, #16]
 8005c00:	428b      	cmp	r3, r1
 8005c02:	da6a      	bge.n	8005cda <__kernel_rem_pio2+0x352>
 8005c04:	2a00      	cmp	r2, #0
 8005c06:	f000 8088 	beq.w	8005d1a <__kernel_rem_pio2+0x392>
 8005c0a:	ab0e      	add	r3, sp, #56	; 0x38
 8005c0c:	f1aa 0a18 	sub.w	sl, sl, #24
 8005c10:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f000 80b4 	beq.w	8005d82 <__kernel_rem_pio2+0x3fa>
 8005c1a:	4650      	mov	r0, sl
 8005c1c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8005ca8 <__kernel_rem_pio2+0x320>
 8005c20:	f000 fb3a 	bl	8006298 <scalbn>
 8005c24:	00ec      	lsls	r4, r5, #3
 8005c26:	ab72      	add	r3, sp, #456	; 0x1c8
 8005c28:	191e      	adds	r6, r3, r4
 8005c2a:	ec59 8b10 	vmov	r8, r9, d0
 8005c2e:	f106 0a08 	add.w	sl, r6, #8
 8005c32:	462f      	mov	r7, r5
 8005c34:	2f00      	cmp	r7, #0
 8005c36:	f280 80df 	bge.w	8005df8 <__kernel_rem_pio2+0x470>
 8005c3a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8005ca0 <__kernel_rem_pio2+0x318>
 8005c3e:	f04f 0a00 	mov.w	sl, #0
 8005c42:	eba5 030a 	sub.w	r3, r5, sl
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f2c0 810a 	blt.w	8005e60 <__kernel_rem_pio2+0x4d8>
 8005c4c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8005cc8 <__kernel_rem_pio2+0x340>
 8005c50:	ec59 8b18 	vmov	r8, r9, d8
 8005c54:	2700      	movs	r7, #0
 8005c56:	e0f5      	b.n	8005e44 <__kernel_rem_pio2+0x4bc>
 8005c58:	2302      	movs	r3, #2
 8005c5a:	9302      	str	r3, [sp, #8]
 8005c5c:	e760      	b.n	8005b20 <__kernel_rem_pio2+0x198>
 8005c5e:	ab0e      	add	r3, sp, #56	; 0x38
 8005c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c64:	b94d      	cbnz	r5, 8005c7a <__kernel_rem_pio2+0x2f2>
 8005c66:	b12b      	cbz	r3, 8005c74 <__kernel_rem_pio2+0x2ec>
 8005c68:	a80e      	add	r0, sp, #56	; 0x38
 8005c6a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005c6e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005c72:	2301      	movs	r3, #1
 8005c74:	3201      	adds	r2, #1
 8005c76:	461d      	mov	r5, r3
 8005c78:	e759      	b.n	8005b2e <__kernel_rem_pio2+0x1a6>
 8005c7a:	a80e      	add	r0, sp, #56	; 0x38
 8005c7c:	1acb      	subs	r3, r1, r3
 8005c7e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005c82:	462b      	mov	r3, r5
 8005c84:	e7f6      	b.n	8005c74 <__kernel_rem_pio2+0x2ec>
 8005c86:	1e62      	subs	r2, r4, #1
 8005c88:	ab0e      	add	r3, sp, #56	; 0x38
 8005c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c8e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005c92:	a90e      	add	r1, sp, #56	; 0x38
 8005c94:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005c98:	e757      	b.n	8005b4a <__kernel_rem_pio2+0x1c2>
 8005c9a:	bf00      	nop
 8005c9c:	f3af 8000 	nop.w
	...
 8005cac:	3ff00000 	.word	0x3ff00000
 8005cb0:	08006890 	.word	0x08006890
 8005cb4:	40200000 	.word	0x40200000
 8005cb8:	3ff00000 	.word	0x3ff00000
 8005cbc:	3e700000 	.word	0x3e700000
 8005cc0:	41700000 	.word	0x41700000
 8005cc4:	3fe00000 	.word	0x3fe00000
 8005cc8:	08006850 	.word	0x08006850
 8005ccc:	1e62      	subs	r2, r4, #1
 8005cce:	ab0e      	add	r3, sp, #56	; 0x38
 8005cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cd4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005cd8:	e7db      	b.n	8005c92 <__kernel_rem_pio2+0x30a>
 8005cda:	a90e      	add	r1, sp, #56	; 0x38
 8005cdc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	e78b      	b.n	8005bfe <__kernel_rem_pio2+0x276>
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005cec:	2900      	cmp	r1, #0
 8005cee:	d0fa      	beq.n	8005ce6 <__kernel_rem_pio2+0x35e>
 8005cf0:	9a08      	ldr	r2, [sp, #32]
 8005cf2:	4422      	add	r2, r4
 8005cf4:	00d2      	lsls	r2, r2, #3
 8005cf6:	a922      	add	r1, sp, #136	; 0x88
 8005cf8:	18e3      	adds	r3, r4, r3
 8005cfa:	9206      	str	r2, [sp, #24]
 8005cfc:	440a      	add	r2, r1
 8005cfe:	9302      	str	r3, [sp, #8]
 8005d00:	f10b 0108 	add.w	r1, fp, #8
 8005d04:	f102 0308 	add.w	r3, r2, #8
 8005d08:	1c66      	adds	r6, r4, #1
 8005d0a:	910a      	str	r1, [sp, #40]	; 0x28
 8005d0c:	2500      	movs	r5, #0
 8005d0e:	930d      	str	r3, [sp, #52]	; 0x34
 8005d10:	9b02      	ldr	r3, [sp, #8]
 8005d12:	42b3      	cmp	r3, r6
 8005d14:	da04      	bge.n	8005d20 <__kernel_rem_pio2+0x398>
 8005d16:	461c      	mov	r4, r3
 8005d18:	e6a6      	b.n	8005a68 <__kernel_rem_pio2+0xe0>
 8005d1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e7e3      	b.n	8005ce8 <__kernel_rem_pio2+0x360>
 8005d20:	9b06      	ldr	r3, [sp, #24]
 8005d22:	18ef      	adds	r7, r5, r3
 8005d24:	ab22      	add	r3, sp, #136	; 0x88
 8005d26:	441f      	add	r7, r3
 8005d28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d2a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005d2e:	f7fa fbbd 	bl	80004ac <__aeabi_i2d>
 8005d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d34:	461c      	mov	r4, r3
 8005d36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d38:	e9c7 0100 	strd	r0, r1, [r7]
 8005d3c:	eb03 0b05 	add.w	fp, r3, r5
 8005d40:	2700      	movs	r7, #0
 8005d42:	f04f 0800 	mov.w	r8, #0
 8005d46:	f04f 0900 	mov.w	r9, #0
 8005d4a:	9b07      	ldr	r3, [sp, #28]
 8005d4c:	429f      	cmp	r7, r3
 8005d4e:	dd08      	ble.n	8005d62 <__kernel_rem_pio2+0x3da>
 8005d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d52:	aa72      	add	r2, sp, #456	; 0x1c8
 8005d54:	18eb      	adds	r3, r5, r3
 8005d56:	4413      	add	r3, r2
 8005d58:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8005d5c:	3601      	adds	r6, #1
 8005d5e:	3508      	adds	r5, #8
 8005d60:	e7d6      	b.n	8005d10 <__kernel_rem_pio2+0x388>
 8005d62:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005d66:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005d6a:	f7fa fc09 	bl	8000580 <__aeabi_dmul>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	460b      	mov	r3, r1
 8005d72:	4640      	mov	r0, r8
 8005d74:	4649      	mov	r1, r9
 8005d76:	f7fa fa4d 	bl	8000214 <__adddf3>
 8005d7a:	3701      	adds	r7, #1
 8005d7c:	4680      	mov	r8, r0
 8005d7e:	4689      	mov	r9, r1
 8005d80:	e7e3      	b.n	8005d4a <__kernel_rem_pio2+0x3c2>
 8005d82:	3d01      	subs	r5, #1
 8005d84:	e741      	b.n	8005c0a <__kernel_rem_pio2+0x282>
 8005d86:	f1ca 0000 	rsb	r0, sl, #0
 8005d8a:	ec47 6b10 	vmov	d0, r6, r7
 8005d8e:	f000 fa83 	bl	8006298 <scalbn>
 8005d92:	ec57 6b10 	vmov	r6, r7, d0
 8005d96:	2200      	movs	r2, #0
 8005d98:	4b99      	ldr	r3, [pc, #612]	; (8006000 <__kernel_rem_pio2+0x678>)
 8005d9a:	ee10 0a10 	vmov	r0, s0
 8005d9e:	4639      	mov	r1, r7
 8005da0:	f7fa fe74 	bl	8000a8c <__aeabi_dcmpge>
 8005da4:	b1f8      	cbz	r0, 8005de6 <__kernel_rem_pio2+0x45e>
 8005da6:	2200      	movs	r2, #0
 8005da8:	4b96      	ldr	r3, [pc, #600]	; (8006004 <__kernel_rem_pio2+0x67c>)
 8005daa:	4630      	mov	r0, r6
 8005dac:	4639      	mov	r1, r7
 8005dae:	f7fa fbe7 	bl	8000580 <__aeabi_dmul>
 8005db2:	f7fa fe7f 	bl	8000ab4 <__aeabi_d2iz>
 8005db6:	4680      	mov	r8, r0
 8005db8:	f7fa fb78 	bl	80004ac <__aeabi_i2d>
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	4b90      	ldr	r3, [pc, #576]	; (8006000 <__kernel_rem_pio2+0x678>)
 8005dc0:	f7fa fbde 	bl	8000580 <__aeabi_dmul>
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	4639      	mov	r1, r7
 8005dca:	4630      	mov	r0, r6
 8005dcc:	f7fa fa20 	bl	8000210 <__aeabi_dsub>
 8005dd0:	f7fa fe70 	bl	8000ab4 <__aeabi_d2iz>
 8005dd4:	1c65      	adds	r5, r4, #1
 8005dd6:	ab0e      	add	r3, sp, #56	; 0x38
 8005dd8:	f10a 0a18 	add.w	sl, sl, #24
 8005ddc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005de0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005de4:	e719      	b.n	8005c1a <__kernel_rem_pio2+0x292>
 8005de6:	4630      	mov	r0, r6
 8005de8:	4639      	mov	r1, r7
 8005dea:	f7fa fe63 	bl	8000ab4 <__aeabi_d2iz>
 8005dee:	ab0e      	add	r3, sp, #56	; 0x38
 8005df0:	4625      	mov	r5, r4
 8005df2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005df6:	e710      	b.n	8005c1a <__kernel_rem_pio2+0x292>
 8005df8:	ab0e      	add	r3, sp, #56	; 0x38
 8005dfa:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005dfe:	f7fa fb55 	bl	80004ac <__aeabi_i2d>
 8005e02:	4642      	mov	r2, r8
 8005e04:	464b      	mov	r3, r9
 8005e06:	f7fa fbbb 	bl	8000580 <__aeabi_dmul>
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8005e10:	4b7c      	ldr	r3, [pc, #496]	; (8006004 <__kernel_rem_pio2+0x67c>)
 8005e12:	4640      	mov	r0, r8
 8005e14:	4649      	mov	r1, r9
 8005e16:	f7fa fbb3 	bl	8000580 <__aeabi_dmul>
 8005e1a:	3f01      	subs	r7, #1
 8005e1c:	4680      	mov	r8, r0
 8005e1e:	4689      	mov	r9, r1
 8005e20:	e708      	b.n	8005c34 <__kernel_rem_pio2+0x2ac>
 8005e22:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8005e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8005e2e:	f7fa fba7 	bl	8000580 <__aeabi_dmul>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	4640      	mov	r0, r8
 8005e38:	4649      	mov	r1, r9
 8005e3a:	f7fa f9eb 	bl	8000214 <__adddf3>
 8005e3e:	3701      	adds	r7, #1
 8005e40:	4680      	mov	r8, r0
 8005e42:	4689      	mov	r9, r1
 8005e44:	9b04      	ldr	r3, [sp, #16]
 8005e46:	429f      	cmp	r7, r3
 8005e48:	dc01      	bgt.n	8005e4e <__kernel_rem_pio2+0x4c6>
 8005e4a:	45ba      	cmp	sl, r7
 8005e4c:	dae9      	bge.n	8005e22 <__kernel_rem_pio2+0x49a>
 8005e4e:	ab4a      	add	r3, sp, #296	; 0x128
 8005e50:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005e54:	e9c3 8900 	strd	r8, r9, [r3]
 8005e58:	f10a 0a01 	add.w	sl, sl, #1
 8005e5c:	3e08      	subs	r6, #8
 8005e5e:	e6f0      	b.n	8005c42 <__kernel_rem_pio2+0x2ba>
 8005e60:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005e62:	2b03      	cmp	r3, #3
 8005e64:	d85b      	bhi.n	8005f1e <__kernel_rem_pio2+0x596>
 8005e66:	e8df f003 	tbb	[pc, r3]
 8005e6a:	264a      	.short	0x264a
 8005e6c:	0226      	.short	0x0226
 8005e6e:	ab9a      	add	r3, sp, #616	; 0x268
 8005e70:	441c      	add	r4, r3
 8005e72:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005e76:	46a2      	mov	sl, r4
 8005e78:	46ab      	mov	fp, r5
 8005e7a:	f1bb 0f00 	cmp.w	fp, #0
 8005e7e:	dc6c      	bgt.n	8005f5a <__kernel_rem_pio2+0x5d2>
 8005e80:	46a2      	mov	sl, r4
 8005e82:	46ab      	mov	fp, r5
 8005e84:	f1bb 0f01 	cmp.w	fp, #1
 8005e88:	f300 8086 	bgt.w	8005f98 <__kernel_rem_pio2+0x610>
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	2100      	movs	r1, #0
 8005e90:	2d01      	cmp	r5, #1
 8005e92:	f300 80a0 	bgt.w	8005fd6 <__kernel_rem_pio2+0x64e>
 8005e96:	9b02      	ldr	r3, [sp, #8]
 8005e98:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005e9c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f040 809e 	bne.w	8005fe2 <__kernel_rem_pio2+0x65a>
 8005ea6:	9b01      	ldr	r3, [sp, #4]
 8005ea8:	e9c3 7800 	strd	r7, r8, [r3]
 8005eac:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005eb0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005eb4:	e033      	b.n	8005f1e <__kernel_rem_pio2+0x596>
 8005eb6:	3408      	adds	r4, #8
 8005eb8:	ab4a      	add	r3, sp, #296	; 0x128
 8005eba:	441c      	add	r4, r3
 8005ebc:	462e      	mov	r6, r5
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	2e00      	cmp	r6, #0
 8005ec4:	da3a      	bge.n	8005f3c <__kernel_rem_pio2+0x5b4>
 8005ec6:	9b02      	ldr	r3, [sp, #8]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d03d      	beq.n	8005f48 <__kernel_rem_pio2+0x5c0>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ed2:	9c01      	ldr	r4, [sp, #4]
 8005ed4:	e9c4 2300 	strd	r2, r3, [r4]
 8005ed8:	4602      	mov	r2, r0
 8005eda:	460b      	mov	r3, r1
 8005edc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005ee0:	f7fa f996 	bl	8000210 <__aeabi_dsub>
 8005ee4:	ae4c      	add	r6, sp, #304	; 0x130
 8005ee6:	2401      	movs	r4, #1
 8005ee8:	42a5      	cmp	r5, r4
 8005eea:	da30      	bge.n	8005f4e <__kernel_rem_pio2+0x5c6>
 8005eec:	9b02      	ldr	r3, [sp, #8]
 8005eee:	b113      	cbz	r3, 8005ef6 <__kernel_rem_pio2+0x56e>
 8005ef0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	9b01      	ldr	r3, [sp, #4]
 8005ef8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005efc:	e00f      	b.n	8005f1e <__kernel_rem_pio2+0x596>
 8005efe:	ab9a      	add	r3, sp, #616	; 0x268
 8005f00:	441c      	add	r4, r3
 8005f02:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005f06:	2000      	movs	r0, #0
 8005f08:	2100      	movs	r1, #0
 8005f0a:	2d00      	cmp	r5, #0
 8005f0c:	da10      	bge.n	8005f30 <__kernel_rem_pio2+0x5a8>
 8005f0e:	9b02      	ldr	r3, [sp, #8]
 8005f10:	b113      	cbz	r3, 8005f18 <__kernel_rem_pio2+0x590>
 8005f12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f16:	4619      	mov	r1, r3
 8005f18:	9b01      	ldr	r3, [sp, #4]
 8005f1a:	e9c3 0100 	strd	r0, r1, [r3]
 8005f1e:	9b06      	ldr	r3, [sp, #24]
 8005f20:	f003 0007 	and.w	r0, r3, #7
 8005f24:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005f28:	ecbd 8b02 	vpop	{d8}
 8005f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f30:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005f34:	f7fa f96e 	bl	8000214 <__adddf3>
 8005f38:	3d01      	subs	r5, #1
 8005f3a:	e7e6      	b.n	8005f0a <__kernel_rem_pio2+0x582>
 8005f3c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005f40:	f7fa f968 	bl	8000214 <__adddf3>
 8005f44:	3e01      	subs	r6, #1
 8005f46:	e7bc      	b.n	8005ec2 <__kernel_rem_pio2+0x53a>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	e7c1      	b.n	8005ed2 <__kernel_rem_pio2+0x54a>
 8005f4e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005f52:	f7fa f95f 	bl	8000214 <__adddf3>
 8005f56:	3401      	adds	r4, #1
 8005f58:	e7c6      	b.n	8005ee8 <__kernel_rem_pio2+0x560>
 8005f5a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8005f5e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005f62:	4640      	mov	r0, r8
 8005f64:	ec53 2b17 	vmov	r2, r3, d7
 8005f68:	4649      	mov	r1, r9
 8005f6a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005f6e:	f7fa f951 	bl	8000214 <__adddf3>
 8005f72:	4602      	mov	r2, r0
 8005f74:	460b      	mov	r3, r1
 8005f76:	4606      	mov	r6, r0
 8005f78:	460f      	mov	r7, r1
 8005f7a:	4640      	mov	r0, r8
 8005f7c:	4649      	mov	r1, r9
 8005f7e:	f7fa f947 	bl	8000210 <__aeabi_dsub>
 8005f82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f86:	f7fa f945 	bl	8000214 <__adddf3>
 8005f8a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005f8e:	e9ca 0100 	strd	r0, r1, [sl]
 8005f92:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8005f96:	e770      	b.n	8005e7a <__kernel_rem_pio2+0x4f2>
 8005f98:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8005f9c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	ec53 2b17 	vmov	r2, r3, d7
 8005fa6:	4639      	mov	r1, r7
 8005fa8:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005fac:	f7fa f932 	bl	8000214 <__adddf3>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4680      	mov	r8, r0
 8005fb6:	4689      	mov	r9, r1
 8005fb8:	4630      	mov	r0, r6
 8005fba:	4639      	mov	r1, r7
 8005fbc:	f7fa f928 	bl	8000210 <__aeabi_dsub>
 8005fc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fc4:	f7fa f926 	bl	8000214 <__adddf3>
 8005fc8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005fcc:	e9ca 0100 	strd	r0, r1, [sl]
 8005fd0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8005fd4:	e756      	b.n	8005e84 <__kernel_rem_pio2+0x4fc>
 8005fd6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005fda:	f7fa f91b 	bl	8000214 <__adddf3>
 8005fde:	3d01      	subs	r5, #1
 8005fe0:	e756      	b.n	8005e90 <__kernel_rem_pio2+0x508>
 8005fe2:	9b01      	ldr	r3, [sp, #4]
 8005fe4:	9a01      	ldr	r2, [sp, #4]
 8005fe6:	601f      	str	r7, [r3, #0]
 8005fe8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8005fec:	605c      	str	r4, [r3, #4]
 8005fee:	609d      	str	r5, [r3, #8]
 8005ff0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005ff4:	60d3      	str	r3, [r2, #12]
 8005ff6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ffa:	6110      	str	r0, [r2, #16]
 8005ffc:	6153      	str	r3, [r2, #20]
 8005ffe:	e78e      	b.n	8005f1e <__kernel_rem_pio2+0x596>
 8006000:	41700000 	.word	0x41700000
 8006004:	3e700000 	.word	0x3e700000

08006008 <__kernel_sin>:
 8006008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800600c:	ec55 4b10 	vmov	r4, r5, d0
 8006010:	b085      	sub	sp, #20
 8006012:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006016:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800601a:	ed8d 1b00 	vstr	d1, [sp]
 800601e:	9002      	str	r0, [sp, #8]
 8006020:	da06      	bge.n	8006030 <__kernel_sin+0x28>
 8006022:	ee10 0a10 	vmov	r0, s0
 8006026:	4629      	mov	r1, r5
 8006028:	f7fa fd44 	bl	8000ab4 <__aeabi_d2iz>
 800602c:	2800      	cmp	r0, #0
 800602e:	d051      	beq.n	80060d4 <__kernel_sin+0xcc>
 8006030:	4622      	mov	r2, r4
 8006032:	462b      	mov	r3, r5
 8006034:	4620      	mov	r0, r4
 8006036:	4629      	mov	r1, r5
 8006038:	f7fa faa2 	bl	8000580 <__aeabi_dmul>
 800603c:	4682      	mov	sl, r0
 800603e:	468b      	mov	fp, r1
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	4620      	mov	r0, r4
 8006046:	4629      	mov	r1, r5
 8006048:	f7fa fa9a 	bl	8000580 <__aeabi_dmul>
 800604c:	a341      	add	r3, pc, #260	; (adr r3, 8006154 <__kernel_sin+0x14c>)
 800604e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006052:	4680      	mov	r8, r0
 8006054:	4689      	mov	r9, r1
 8006056:	4650      	mov	r0, sl
 8006058:	4659      	mov	r1, fp
 800605a:	f7fa fa91 	bl	8000580 <__aeabi_dmul>
 800605e:	a33f      	add	r3, pc, #252	; (adr r3, 800615c <__kernel_sin+0x154>)
 8006060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006064:	f7fa f8d4 	bl	8000210 <__aeabi_dsub>
 8006068:	4652      	mov	r2, sl
 800606a:	465b      	mov	r3, fp
 800606c:	f7fa fa88 	bl	8000580 <__aeabi_dmul>
 8006070:	a33c      	add	r3, pc, #240	; (adr r3, 8006164 <__kernel_sin+0x15c>)
 8006072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006076:	f7fa f8cd 	bl	8000214 <__adddf3>
 800607a:	4652      	mov	r2, sl
 800607c:	465b      	mov	r3, fp
 800607e:	f7fa fa7f 	bl	8000580 <__aeabi_dmul>
 8006082:	a33a      	add	r3, pc, #232	; (adr r3, 800616c <__kernel_sin+0x164>)
 8006084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006088:	f7fa f8c2 	bl	8000210 <__aeabi_dsub>
 800608c:	4652      	mov	r2, sl
 800608e:	465b      	mov	r3, fp
 8006090:	f7fa fa76 	bl	8000580 <__aeabi_dmul>
 8006094:	a337      	add	r3, pc, #220	; (adr r3, 8006174 <__kernel_sin+0x16c>)
 8006096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609a:	f7fa f8bb 	bl	8000214 <__adddf3>
 800609e:	9b02      	ldr	r3, [sp, #8]
 80060a0:	4606      	mov	r6, r0
 80060a2:	460f      	mov	r7, r1
 80060a4:	b9db      	cbnz	r3, 80060de <__kernel_sin+0xd6>
 80060a6:	4602      	mov	r2, r0
 80060a8:	460b      	mov	r3, r1
 80060aa:	4650      	mov	r0, sl
 80060ac:	4659      	mov	r1, fp
 80060ae:	f7fa fa67 	bl	8000580 <__aeabi_dmul>
 80060b2:	a325      	add	r3, pc, #148	; (adr r3, 8006148 <__kernel_sin+0x140>)
 80060b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b8:	f7fa f8aa 	bl	8000210 <__aeabi_dsub>
 80060bc:	4642      	mov	r2, r8
 80060be:	464b      	mov	r3, r9
 80060c0:	f7fa fa5e 	bl	8000580 <__aeabi_dmul>
 80060c4:	4602      	mov	r2, r0
 80060c6:	460b      	mov	r3, r1
 80060c8:	4620      	mov	r0, r4
 80060ca:	4629      	mov	r1, r5
 80060cc:	f7fa f8a2 	bl	8000214 <__adddf3>
 80060d0:	4604      	mov	r4, r0
 80060d2:	460d      	mov	r5, r1
 80060d4:	ec45 4b10 	vmov	d0, r4, r5
 80060d8:	b005      	add	sp, #20
 80060da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060de:	2200      	movs	r2, #0
 80060e0:	4b1b      	ldr	r3, [pc, #108]	; (8006150 <__kernel_sin+0x148>)
 80060e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060e6:	f7fa fa4b 	bl	8000580 <__aeabi_dmul>
 80060ea:	4632      	mov	r2, r6
 80060ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060f0:	463b      	mov	r3, r7
 80060f2:	4640      	mov	r0, r8
 80060f4:	4649      	mov	r1, r9
 80060f6:	f7fa fa43 	bl	8000580 <__aeabi_dmul>
 80060fa:	4602      	mov	r2, r0
 80060fc:	460b      	mov	r3, r1
 80060fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006102:	f7fa f885 	bl	8000210 <__aeabi_dsub>
 8006106:	4652      	mov	r2, sl
 8006108:	465b      	mov	r3, fp
 800610a:	f7fa fa39 	bl	8000580 <__aeabi_dmul>
 800610e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006112:	f7fa f87d 	bl	8000210 <__aeabi_dsub>
 8006116:	a30c      	add	r3, pc, #48	; (adr r3, 8006148 <__kernel_sin+0x140>)
 8006118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611c:	4606      	mov	r6, r0
 800611e:	460f      	mov	r7, r1
 8006120:	4640      	mov	r0, r8
 8006122:	4649      	mov	r1, r9
 8006124:	f7fa fa2c 	bl	8000580 <__aeabi_dmul>
 8006128:	4602      	mov	r2, r0
 800612a:	460b      	mov	r3, r1
 800612c:	4630      	mov	r0, r6
 800612e:	4639      	mov	r1, r7
 8006130:	f7fa f870 	bl	8000214 <__adddf3>
 8006134:	4602      	mov	r2, r0
 8006136:	460b      	mov	r3, r1
 8006138:	4620      	mov	r0, r4
 800613a:	4629      	mov	r1, r5
 800613c:	f7fa f868 	bl	8000210 <__aeabi_dsub>
 8006140:	e7c6      	b.n	80060d0 <__kernel_sin+0xc8>
 8006142:	bf00      	nop
 8006144:	f3af 8000 	nop.w
 8006148:	55555549 	.word	0x55555549
 800614c:	3fc55555 	.word	0x3fc55555
 8006150:	3fe00000 	.word	0x3fe00000
 8006154:	5acfd57c 	.word	0x5acfd57c
 8006158:	3de5d93a 	.word	0x3de5d93a
 800615c:	8a2b9ceb 	.word	0x8a2b9ceb
 8006160:	3e5ae5e6 	.word	0x3e5ae5e6
 8006164:	57b1fe7d 	.word	0x57b1fe7d
 8006168:	3ec71de3 	.word	0x3ec71de3
 800616c:	19c161d5 	.word	0x19c161d5
 8006170:	3f2a01a0 	.word	0x3f2a01a0
 8006174:	1110f8a6 	.word	0x1110f8a6
 8006178:	3f811111 	.word	0x3f811111

0800617c <fabs>:
 800617c:	ec51 0b10 	vmov	r0, r1, d0
 8006180:	ee10 2a10 	vmov	r2, s0
 8006184:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006188:	ec43 2b10 	vmov	d0, r2, r3
 800618c:	4770      	bx	lr
	...

08006190 <floor>:
 8006190:	ec51 0b10 	vmov	r0, r1, d0
 8006194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006198:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800619c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80061a0:	2e13      	cmp	r6, #19
 80061a2:	460c      	mov	r4, r1
 80061a4:	ee10 5a10 	vmov	r5, s0
 80061a8:	4680      	mov	r8, r0
 80061aa:	dc34      	bgt.n	8006216 <floor+0x86>
 80061ac:	2e00      	cmp	r6, #0
 80061ae:	da16      	bge.n	80061de <floor+0x4e>
 80061b0:	a335      	add	r3, pc, #212	; (adr r3, 8006288 <floor+0xf8>)
 80061b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b6:	f7fa f82d 	bl	8000214 <__adddf3>
 80061ba:	2200      	movs	r2, #0
 80061bc:	2300      	movs	r3, #0
 80061be:	f7fa fc6f 	bl	8000aa0 <__aeabi_dcmpgt>
 80061c2:	b148      	cbz	r0, 80061d8 <floor+0x48>
 80061c4:	2c00      	cmp	r4, #0
 80061c6:	da59      	bge.n	800627c <floor+0xec>
 80061c8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80061cc:	4a30      	ldr	r2, [pc, #192]	; (8006290 <floor+0x100>)
 80061ce:	432b      	orrs	r3, r5
 80061d0:	2500      	movs	r5, #0
 80061d2:	42ab      	cmp	r3, r5
 80061d4:	bf18      	it	ne
 80061d6:	4614      	movne	r4, r2
 80061d8:	4621      	mov	r1, r4
 80061da:	4628      	mov	r0, r5
 80061dc:	e025      	b.n	800622a <floor+0x9a>
 80061de:	4f2d      	ldr	r7, [pc, #180]	; (8006294 <floor+0x104>)
 80061e0:	4137      	asrs	r7, r6
 80061e2:	ea01 0307 	and.w	r3, r1, r7
 80061e6:	4303      	orrs	r3, r0
 80061e8:	d01f      	beq.n	800622a <floor+0x9a>
 80061ea:	a327      	add	r3, pc, #156	; (adr r3, 8006288 <floor+0xf8>)
 80061ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f0:	f7fa f810 	bl	8000214 <__adddf3>
 80061f4:	2200      	movs	r2, #0
 80061f6:	2300      	movs	r3, #0
 80061f8:	f7fa fc52 	bl	8000aa0 <__aeabi_dcmpgt>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	d0eb      	beq.n	80061d8 <floor+0x48>
 8006200:	2c00      	cmp	r4, #0
 8006202:	bfbe      	ittt	lt
 8006204:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006208:	fa43 f606 	asrlt.w	r6, r3, r6
 800620c:	19a4      	addlt	r4, r4, r6
 800620e:	ea24 0407 	bic.w	r4, r4, r7
 8006212:	2500      	movs	r5, #0
 8006214:	e7e0      	b.n	80061d8 <floor+0x48>
 8006216:	2e33      	cmp	r6, #51	; 0x33
 8006218:	dd0b      	ble.n	8006232 <floor+0xa2>
 800621a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800621e:	d104      	bne.n	800622a <floor+0x9a>
 8006220:	ee10 2a10 	vmov	r2, s0
 8006224:	460b      	mov	r3, r1
 8006226:	f7f9 fff5 	bl	8000214 <__adddf3>
 800622a:	ec41 0b10 	vmov	d0, r0, r1
 800622e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006232:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800623a:	fa23 f707 	lsr.w	r7, r3, r7
 800623e:	4207      	tst	r7, r0
 8006240:	d0f3      	beq.n	800622a <floor+0x9a>
 8006242:	a311      	add	r3, pc, #68	; (adr r3, 8006288 <floor+0xf8>)
 8006244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006248:	f7f9 ffe4 	bl	8000214 <__adddf3>
 800624c:	2200      	movs	r2, #0
 800624e:	2300      	movs	r3, #0
 8006250:	f7fa fc26 	bl	8000aa0 <__aeabi_dcmpgt>
 8006254:	2800      	cmp	r0, #0
 8006256:	d0bf      	beq.n	80061d8 <floor+0x48>
 8006258:	2c00      	cmp	r4, #0
 800625a:	da02      	bge.n	8006262 <floor+0xd2>
 800625c:	2e14      	cmp	r6, #20
 800625e:	d103      	bne.n	8006268 <floor+0xd8>
 8006260:	3401      	adds	r4, #1
 8006262:	ea25 0507 	bic.w	r5, r5, r7
 8006266:	e7b7      	b.n	80061d8 <floor+0x48>
 8006268:	2301      	movs	r3, #1
 800626a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800626e:	fa03 f606 	lsl.w	r6, r3, r6
 8006272:	4435      	add	r5, r6
 8006274:	4545      	cmp	r5, r8
 8006276:	bf38      	it	cc
 8006278:	18e4      	addcc	r4, r4, r3
 800627a:	e7f2      	b.n	8006262 <floor+0xd2>
 800627c:	2500      	movs	r5, #0
 800627e:	462c      	mov	r4, r5
 8006280:	e7aa      	b.n	80061d8 <floor+0x48>
 8006282:	bf00      	nop
 8006284:	f3af 8000 	nop.w
 8006288:	8800759c 	.word	0x8800759c
 800628c:	7e37e43c 	.word	0x7e37e43c
 8006290:	bff00000 	.word	0xbff00000
 8006294:	000fffff 	.word	0x000fffff

08006298 <scalbn>:
 8006298:	b570      	push	{r4, r5, r6, lr}
 800629a:	ec55 4b10 	vmov	r4, r5, d0
 800629e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80062a2:	4606      	mov	r6, r0
 80062a4:	462b      	mov	r3, r5
 80062a6:	b9aa      	cbnz	r2, 80062d4 <scalbn+0x3c>
 80062a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80062ac:	4323      	orrs	r3, r4
 80062ae:	d03b      	beq.n	8006328 <scalbn+0x90>
 80062b0:	4b31      	ldr	r3, [pc, #196]	; (8006378 <scalbn+0xe0>)
 80062b2:	4629      	mov	r1, r5
 80062b4:	2200      	movs	r2, #0
 80062b6:	ee10 0a10 	vmov	r0, s0
 80062ba:	f7fa f961 	bl	8000580 <__aeabi_dmul>
 80062be:	4b2f      	ldr	r3, [pc, #188]	; (800637c <scalbn+0xe4>)
 80062c0:	429e      	cmp	r6, r3
 80062c2:	4604      	mov	r4, r0
 80062c4:	460d      	mov	r5, r1
 80062c6:	da12      	bge.n	80062ee <scalbn+0x56>
 80062c8:	a327      	add	r3, pc, #156	; (adr r3, 8006368 <scalbn+0xd0>)
 80062ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ce:	f7fa f957 	bl	8000580 <__aeabi_dmul>
 80062d2:	e009      	b.n	80062e8 <scalbn+0x50>
 80062d4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80062d8:	428a      	cmp	r2, r1
 80062da:	d10c      	bne.n	80062f6 <scalbn+0x5e>
 80062dc:	ee10 2a10 	vmov	r2, s0
 80062e0:	4620      	mov	r0, r4
 80062e2:	4629      	mov	r1, r5
 80062e4:	f7f9 ff96 	bl	8000214 <__adddf3>
 80062e8:	4604      	mov	r4, r0
 80062ea:	460d      	mov	r5, r1
 80062ec:	e01c      	b.n	8006328 <scalbn+0x90>
 80062ee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80062f2:	460b      	mov	r3, r1
 80062f4:	3a36      	subs	r2, #54	; 0x36
 80062f6:	4432      	add	r2, r6
 80062f8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80062fc:	428a      	cmp	r2, r1
 80062fe:	dd0b      	ble.n	8006318 <scalbn+0x80>
 8006300:	ec45 4b11 	vmov	d1, r4, r5
 8006304:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006370 <scalbn+0xd8>
 8006308:	f000 f83c 	bl	8006384 <copysign>
 800630c:	a318      	add	r3, pc, #96	; (adr r3, 8006370 <scalbn+0xd8>)
 800630e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006312:	ec51 0b10 	vmov	r0, r1, d0
 8006316:	e7da      	b.n	80062ce <scalbn+0x36>
 8006318:	2a00      	cmp	r2, #0
 800631a:	dd08      	ble.n	800632e <scalbn+0x96>
 800631c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006320:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006324:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006328:	ec45 4b10 	vmov	d0, r4, r5
 800632c:	bd70      	pop	{r4, r5, r6, pc}
 800632e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006332:	da0d      	bge.n	8006350 <scalbn+0xb8>
 8006334:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006338:	429e      	cmp	r6, r3
 800633a:	ec45 4b11 	vmov	d1, r4, r5
 800633e:	dce1      	bgt.n	8006304 <scalbn+0x6c>
 8006340:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006368 <scalbn+0xd0>
 8006344:	f000 f81e 	bl	8006384 <copysign>
 8006348:	a307      	add	r3, pc, #28	; (adr r3, 8006368 <scalbn+0xd0>)
 800634a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634e:	e7e0      	b.n	8006312 <scalbn+0x7a>
 8006350:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006354:	3236      	adds	r2, #54	; 0x36
 8006356:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800635a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800635e:	4620      	mov	r0, r4
 8006360:	4629      	mov	r1, r5
 8006362:	2200      	movs	r2, #0
 8006364:	4b06      	ldr	r3, [pc, #24]	; (8006380 <scalbn+0xe8>)
 8006366:	e7b2      	b.n	80062ce <scalbn+0x36>
 8006368:	c2f8f359 	.word	0xc2f8f359
 800636c:	01a56e1f 	.word	0x01a56e1f
 8006370:	8800759c 	.word	0x8800759c
 8006374:	7e37e43c 	.word	0x7e37e43c
 8006378:	43500000 	.word	0x43500000
 800637c:	ffff3cb0 	.word	0xffff3cb0
 8006380:	3c900000 	.word	0x3c900000

08006384 <copysign>:
 8006384:	ec51 0b10 	vmov	r0, r1, d0
 8006388:	ee11 0a90 	vmov	r0, s3
 800638c:	ee10 2a10 	vmov	r2, s0
 8006390:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006394:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006398:	ea41 0300 	orr.w	r3, r1, r0
 800639c:	ec43 2b10 	vmov	d0, r2, r3
 80063a0:	4770      	bx	lr

080063a2 <abort>:
 80063a2:	b508      	push	{r3, lr}
 80063a4:	2006      	movs	r0, #6
 80063a6:	f000 f93f 	bl	8006628 <raise>
 80063aa:	2001      	movs	r0, #1
 80063ac:	f7fe f9e0 	bl	8004770 <_exit>

080063b0 <__errno>:
 80063b0:	4b01      	ldr	r3, [pc, #4]	; (80063b8 <__errno+0x8>)
 80063b2:	6818      	ldr	r0, [r3, #0]
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	2000000c 	.word	0x2000000c

080063bc <__libc_init_array>:
 80063bc:	b570      	push	{r4, r5, r6, lr}
 80063be:	4e0d      	ldr	r6, [pc, #52]	; (80063f4 <__libc_init_array+0x38>)
 80063c0:	4c0d      	ldr	r4, [pc, #52]	; (80063f8 <__libc_init_array+0x3c>)
 80063c2:	1ba4      	subs	r4, r4, r6
 80063c4:	10a4      	asrs	r4, r4, #2
 80063c6:	2500      	movs	r5, #0
 80063c8:	42a5      	cmp	r5, r4
 80063ca:	d109      	bne.n	80063e0 <__libc_init_array+0x24>
 80063cc:	4e0b      	ldr	r6, [pc, #44]	; (80063fc <__libc_init_array+0x40>)
 80063ce:	4c0c      	ldr	r4, [pc, #48]	; (8006400 <__libc_init_array+0x44>)
 80063d0:	f000 f948 	bl	8006664 <_init>
 80063d4:	1ba4      	subs	r4, r4, r6
 80063d6:	10a4      	asrs	r4, r4, #2
 80063d8:	2500      	movs	r5, #0
 80063da:	42a5      	cmp	r5, r4
 80063dc:	d105      	bne.n	80063ea <__libc_init_array+0x2e>
 80063de:	bd70      	pop	{r4, r5, r6, pc}
 80063e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063e4:	4798      	blx	r3
 80063e6:	3501      	adds	r5, #1
 80063e8:	e7ee      	b.n	80063c8 <__libc_init_array+0xc>
 80063ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063ee:	4798      	blx	r3
 80063f0:	3501      	adds	r5, #1
 80063f2:	e7f2      	b.n	80063da <__libc_init_array+0x1e>
 80063f4:	080068a8 	.word	0x080068a8
 80063f8:	080068a8 	.word	0x080068a8
 80063fc:	080068a8 	.word	0x080068a8
 8006400:	080068ac 	.word	0x080068ac

08006404 <malloc>:
 8006404:	4b02      	ldr	r3, [pc, #8]	; (8006410 <malloc+0xc>)
 8006406:	4601      	mov	r1, r0
 8006408:	6818      	ldr	r0, [r3, #0]
 800640a:	f000 b87b 	b.w	8006504 <_malloc_r>
 800640e:	bf00      	nop
 8006410:	2000000c 	.word	0x2000000c

08006414 <free>:
 8006414:	4b02      	ldr	r3, [pc, #8]	; (8006420 <free+0xc>)
 8006416:	4601      	mov	r1, r0
 8006418:	6818      	ldr	r0, [r3, #0]
 800641a:	f000 b825 	b.w	8006468 <_free_r>
 800641e:	bf00      	nop
 8006420:	2000000c 	.word	0x2000000c

08006424 <memmove>:
 8006424:	4288      	cmp	r0, r1
 8006426:	b510      	push	{r4, lr}
 8006428:	eb01 0302 	add.w	r3, r1, r2
 800642c:	d807      	bhi.n	800643e <memmove+0x1a>
 800642e:	1e42      	subs	r2, r0, #1
 8006430:	4299      	cmp	r1, r3
 8006432:	d00a      	beq.n	800644a <memmove+0x26>
 8006434:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006438:	f802 4f01 	strb.w	r4, [r2, #1]!
 800643c:	e7f8      	b.n	8006430 <memmove+0xc>
 800643e:	4283      	cmp	r3, r0
 8006440:	d9f5      	bls.n	800642e <memmove+0xa>
 8006442:	1881      	adds	r1, r0, r2
 8006444:	1ad2      	subs	r2, r2, r3
 8006446:	42d3      	cmn	r3, r2
 8006448:	d100      	bne.n	800644c <memmove+0x28>
 800644a:	bd10      	pop	{r4, pc}
 800644c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006450:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006454:	e7f7      	b.n	8006446 <memmove+0x22>

08006456 <memset>:
 8006456:	4402      	add	r2, r0
 8006458:	4603      	mov	r3, r0
 800645a:	4293      	cmp	r3, r2
 800645c:	d100      	bne.n	8006460 <memset+0xa>
 800645e:	4770      	bx	lr
 8006460:	f803 1b01 	strb.w	r1, [r3], #1
 8006464:	e7f9      	b.n	800645a <memset+0x4>
	...

08006468 <_free_r>:
 8006468:	b538      	push	{r3, r4, r5, lr}
 800646a:	4605      	mov	r5, r0
 800646c:	2900      	cmp	r1, #0
 800646e:	d045      	beq.n	80064fc <_free_r+0x94>
 8006470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006474:	1f0c      	subs	r4, r1, #4
 8006476:	2b00      	cmp	r3, #0
 8006478:	bfb8      	it	lt
 800647a:	18e4      	addlt	r4, r4, r3
 800647c:	f000 f8f0 	bl	8006660 <__malloc_lock>
 8006480:	4a1f      	ldr	r2, [pc, #124]	; (8006500 <_free_r+0x98>)
 8006482:	6813      	ldr	r3, [r2, #0]
 8006484:	4610      	mov	r0, r2
 8006486:	b933      	cbnz	r3, 8006496 <_free_r+0x2e>
 8006488:	6063      	str	r3, [r4, #4]
 800648a:	6014      	str	r4, [r2, #0]
 800648c:	4628      	mov	r0, r5
 800648e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006492:	f000 b8e6 	b.w	8006662 <__malloc_unlock>
 8006496:	42a3      	cmp	r3, r4
 8006498:	d90c      	bls.n	80064b4 <_free_r+0x4c>
 800649a:	6821      	ldr	r1, [r4, #0]
 800649c:	1862      	adds	r2, r4, r1
 800649e:	4293      	cmp	r3, r2
 80064a0:	bf04      	itt	eq
 80064a2:	681a      	ldreq	r2, [r3, #0]
 80064a4:	685b      	ldreq	r3, [r3, #4]
 80064a6:	6063      	str	r3, [r4, #4]
 80064a8:	bf04      	itt	eq
 80064aa:	1852      	addeq	r2, r2, r1
 80064ac:	6022      	streq	r2, [r4, #0]
 80064ae:	6004      	str	r4, [r0, #0]
 80064b0:	e7ec      	b.n	800648c <_free_r+0x24>
 80064b2:	4613      	mov	r3, r2
 80064b4:	685a      	ldr	r2, [r3, #4]
 80064b6:	b10a      	cbz	r2, 80064bc <_free_r+0x54>
 80064b8:	42a2      	cmp	r2, r4
 80064ba:	d9fa      	bls.n	80064b2 <_free_r+0x4a>
 80064bc:	6819      	ldr	r1, [r3, #0]
 80064be:	1858      	adds	r0, r3, r1
 80064c0:	42a0      	cmp	r0, r4
 80064c2:	d10b      	bne.n	80064dc <_free_r+0x74>
 80064c4:	6820      	ldr	r0, [r4, #0]
 80064c6:	4401      	add	r1, r0
 80064c8:	1858      	adds	r0, r3, r1
 80064ca:	4282      	cmp	r2, r0
 80064cc:	6019      	str	r1, [r3, #0]
 80064ce:	d1dd      	bne.n	800648c <_free_r+0x24>
 80064d0:	6810      	ldr	r0, [r2, #0]
 80064d2:	6852      	ldr	r2, [r2, #4]
 80064d4:	605a      	str	r2, [r3, #4]
 80064d6:	4401      	add	r1, r0
 80064d8:	6019      	str	r1, [r3, #0]
 80064da:	e7d7      	b.n	800648c <_free_r+0x24>
 80064dc:	d902      	bls.n	80064e4 <_free_r+0x7c>
 80064de:	230c      	movs	r3, #12
 80064e0:	602b      	str	r3, [r5, #0]
 80064e2:	e7d3      	b.n	800648c <_free_r+0x24>
 80064e4:	6820      	ldr	r0, [r4, #0]
 80064e6:	1821      	adds	r1, r4, r0
 80064e8:	428a      	cmp	r2, r1
 80064ea:	bf04      	itt	eq
 80064ec:	6811      	ldreq	r1, [r2, #0]
 80064ee:	6852      	ldreq	r2, [r2, #4]
 80064f0:	6062      	str	r2, [r4, #4]
 80064f2:	bf04      	itt	eq
 80064f4:	1809      	addeq	r1, r1, r0
 80064f6:	6021      	streq	r1, [r4, #0]
 80064f8:	605c      	str	r4, [r3, #4]
 80064fa:	e7c7      	b.n	800648c <_free_r+0x24>
 80064fc:	bd38      	pop	{r3, r4, r5, pc}
 80064fe:	bf00      	nop
 8006500:	2000009c 	.word	0x2000009c

08006504 <_malloc_r>:
 8006504:	b570      	push	{r4, r5, r6, lr}
 8006506:	1ccd      	adds	r5, r1, #3
 8006508:	f025 0503 	bic.w	r5, r5, #3
 800650c:	3508      	adds	r5, #8
 800650e:	2d0c      	cmp	r5, #12
 8006510:	bf38      	it	cc
 8006512:	250c      	movcc	r5, #12
 8006514:	2d00      	cmp	r5, #0
 8006516:	4606      	mov	r6, r0
 8006518:	db01      	blt.n	800651e <_malloc_r+0x1a>
 800651a:	42a9      	cmp	r1, r5
 800651c:	d903      	bls.n	8006526 <_malloc_r+0x22>
 800651e:	230c      	movs	r3, #12
 8006520:	6033      	str	r3, [r6, #0]
 8006522:	2000      	movs	r0, #0
 8006524:	bd70      	pop	{r4, r5, r6, pc}
 8006526:	f000 f89b 	bl	8006660 <__malloc_lock>
 800652a:	4a21      	ldr	r2, [pc, #132]	; (80065b0 <_malloc_r+0xac>)
 800652c:	6814      	ldr	r4, [r2, #0]
 800652e:	4621      	mov	r1, r4
 8006530:	b991      	cbnz	r1, 8006558 <_malloc_r+0x54>
 8006532:	4c20      	ldr	r4, [pc, #128]	; (80065b4 <_malloc_r+0xb0>)
 8006534:	6823      	ldr	r3, [r4, #0]
 8006536:	b91b      	cbnz	r3, 8006540 <_malloc_r+0x3c>
 8006538:	4630      	mov	r0, r6
 800653a:	f000 f83d 	bl	80065b8 <_sbrk_r>
 800653e:	6020      	str	r0, [r4, #0]
 8006540:	4629      	mov	r1, r5
 8006542:	4630      	mov	r0, r6
 8006544:	f000 f838 	bl	80065b8 <_sbrk_r>
 8006548:	1c43      	adds	r3, r0, #1
 800654a:	d124      	bne.n	8006596 <_malloc_r+0x92>
 800654c:	230c      	movs	r3, #12
 800654e:	6033      	str	r3, [r6, #0]
 8006550:	4630      	mov	r0, r6
 8006552:	f000 f886 	bl	8006662 <__malloc_unlock>
 8006556:	e7e4      	b.n	8006522 <_malloc_r+0x1e>
 8006558:	680b      	ldr	r3, [r1, #0]
 800655a:	1b5b      	subs	r3, r3, r5
 800655c:	d418      	bmi.n	8006590 <_malloc_r+0x8c>
 800655e:	2b0b      	cmp	r3, #11
 8006560:	d90f      	bls.n	8006582 <_malloc_r+0x7e>
 8006562:	600b      	str	r3, [r1, #0]
 8006564:	50cd      	str	r5, [r1, r3]
 8006566:	18cc      	adds	r4, r1, r3
 8006568:	4630      	mov	r0, r6
 800656a:	f000 f87a 	bl	8006662 <__malloc_unlock>
 800656e:	f104 000b 	add.w	r0, r4, #11
 8006572:	1d23      	adds	r3, r4, #4
 8006574:	f020 0007 	bic.w	r0, r0, #7
 8006578:	1ac3      	subs	r3, r0, r3
 800657a:	d0d3      	beq.n	8006524 <_malloc_r+0x20>
 800657c:	425a      	negs	r2, r3
 800657e:	50e2      	str	r2, [r4, r3]
 8006580:	e7d0      	b.n	8006524 <_malloc_r+0x20>
 8006582:	428c      	cmp	r4, r1
 8006584:	684b      	ldr	r3, [r1, #4]
 8006586:	bf16      	itet	ne
 8006588:	6063      	strne	r3, [r4, #4]
 800658a:	6013      	streq	r3, [r2, #0]
 800658c:	460c      	movne	r4, r1
 800658e:	e7eb      	b.n	8006568 <_malloc_r+0x64>
 8006590:	460c      	mov	r4, r1
 8006592:	6849      	ldr	r1, [r1, #4]
 8006594:	e7cc      	b.n	8006530 <_malloc_r+0x2c>
 8006596:	1cc4      	adds	r4, r0, #3
 8006598:	f024 0403 	bic.w	r4, r4, #3
 800659c:	42a0      	cmp	r0, r4
 800659e:	d005      	beq.n	80065ac <_malloc_r+0xa8>
 80065a0:	1a21      	subs	r1, r4, r0
 80065a2:	4630      	mov	r0, r6
 80065a4:	f000 f808 	bl	80065b8 <_sbrk_r>
 80065a8:	3001      	adds	r0, #1
 80065aa:	d0cf      	beq.n	800654c <_malloc_r+0x48>
 80065ac:	6025      	str	r5, [r4, #0]
 80065ae:	e7db      	b.n	8006568 <_malloc_r+0x64>
 80065b0:	2000009c 	.word	0x2000009c
 80065b4:	200000a0 	.word	0x200000a0

080065b8 <_sbrk_r>:
 80065b8:	b538      	push	{r3, r4, r5, lr}
 80065ba:	4c06      	ldr	r4, [pc, #24]	; (80065d4 <_sbrk_r+0x1c>)
 80065bc:	2300      	movs	r3, #0
 80065be:	4605      	mov	r5, r0
 80065c0:	4608      	mov	r0, r1
 80065c2:	6023      	str	r3, [r4, #0]
 80065c4:	f7fe f8de 	bl	8004784 <_sbrk>
 80065c8:	1c43      	adds	r3, r0, #1
 80065ca:	d102      	bne.n	80065d2 <_sbrk_r+0x1a>
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	b103      	cbz	r3, 80065d2 <_sbrk_r+0x1a>
 80065d0:	602b      	str	r3, [r5, #0]
 80065d2:	bd38      	pop	{r3, r4, r5, pc}
 80065d4:	200000e8 	.word	0x200000e8

080065d8 <_raise_r>:
 80065d8:	291f      	cmp	r1, #31
 80065da:	b538      	push	{r3, r4, r5, lr}
 80065dc:	4604      	mov	r4, r0
 80065de:	460d      	mov	r5, r1
 80065e0:	d904      	bls.n	80065ec <_raise_r+0x14>
 80065e2:	2316      	movs	r3, #22
 80065e4:	6003      	str	r3, [r0, #0]
 80065e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065ea:	bd38      	pop	{r3, r4, r5, pc}
 80065ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80065ee:	b112      	cbz	r2, 80065f6 <_raise_r+0x1e>
 80065f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80065f4:	b94b      	cbnz	r3, 800660a <_raise_r+0x32>
 80065f6:	4620      	mov	r0, r4
 80065f8:	f000 f830 	bl	800665c <_getpid_r>
 80065fc:	462a      	mov	r2, r5
 80065fe:	4601      	mov	r1, r0
 8006600:	4620      	mov	r0, r4
 8006602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006606:	f000 b817 	b.w	8006638 <_kill_r>
 800660a:	2b01      	cmp	r3, #1
 800660c:	d00a      	beq.n	8006624 <_raise_r+0x4c>
 800660e:	1c59      	adds	r1, r3, #1
 8006610:	d103      	bne.n	800661a <_raise_r+0x42>
 8006612:	2316      	movs	r3, #22
 8006614:	6003      	str	r3, [r0, #0]
 8006616:	2001      	movs	r0, #1
 8006618:	e7e7      	b.n	80065ea <_raise_r+0x12>
 800661a:	2400      	movs	r4, #0
 800661c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006620:	4628      	mov	r0, r5
 8006622:	4798      	blx	r3
 8006624:	2000      	movs	r0, #0
 8006626:	e7e0      	b.n	80065ea <_raise_r+0x12>

08006628 <raise>:
 8006628:	4b02      	ldr	r3, [pc, #8]	; (8006634 <raise+0xc>)
 800662a:	4601      	mov	r1, r0
 800662c:	6818      	ldr	r0, [r3, #0]
 800662e:	f7ff bfd3 	b.w	80065d8 <_raise_r>
 8006632:	bf00      	nop
 8006634:	2000000c 	.word	0x2000000c

08006638 <_kill_r>:
 8006638:	b538      	push	{r3, r4, r5, lr}
 800663a:	4c07      	ldr	r4, [pc, #28]	; (8006658 <_kill_r+0x20>)
 800663c:	2300      	movs	r3, #0
 800663e:	4605      	mov	r5, r0
 8006640:	4608      	mov	r0, r1
 8006642:	4611      	mov	r1, r2
 8006644:	6023      	str	r3, [r4, #0]
 8006646:	f7fe f883 	bl	8004750 <_kill>
 800664a:	1c43      	adds	r3, r0, #1
 800664c:	d102      	bne.n	8006654 <_kill_r+0x1c>
 800664e:	6823      	ldr	r3, [r4, #0]
 8006650:	b103      	cbz	r3, 8006654 <_kill_r+0x1c>
 8006652:	602b      	str	r3, [r5, #0]
 8006654:	bd38      	pop	{r3, r4, r5, pc}
 8006656:	bf00      	nop
 8006658:	200000e8 	.word	0x200000e8

0800665c <_getpid_r>:
 800665c:	f7fe b870 	b.w	8004740 <_getpid>

08006660 <__malloc_lock>:
 8006660:	4770      	bx	lr

08006662 <__malloc_unlock>:
 8006662:	4770      	bx	lr

08006664 <_init>:
 8006664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006666:	bf00      	nop
 8006668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800666a:	bc08      	pop	{r3}
 800666c:	469e      	mov	lr, r3
 800666e:	4770      	bx	lr

08006670 <_fini>:
 8006670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006672:	bf00      	nop
 8006674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006676:	bc08      	pop	{r3}
 8006678:	469e      	mov	lr, r3
 800667a:	4770      	bx	lr
