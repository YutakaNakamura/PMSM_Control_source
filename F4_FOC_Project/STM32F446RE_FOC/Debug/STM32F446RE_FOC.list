
STM32F446RE_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e13c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  0800e310  0800e310  0001e310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e9c8  0800e9c8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e9c8  0800e9c8  0001e9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e9d0  0800e9d0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e9d0  0800e9d0  0001e9d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800e9d8  0800e9d8  0001e9d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800e9e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  200001e0  0800ebc0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00010400  20000408  0800ebc0  00020408  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004716c  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008477  00000000  00000000  0006737c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002290  00000000  00000000  0006f7f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ff8  00000000  00000000  00071a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002fe6a  00000000  00000000  00073a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d085  00000000  00000000  000a38ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001039cb  00000000  00000000  000c096f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c433a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b748  00000000  00000000  001c43b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e2f4 	.word	0x0800e2f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800e2f4 	.word	0x0800e2f4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <HAL_Init+0x40>)
 8000f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <HAL_Init+0x40>)
 8000f9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <HAL_Init+0x40>)
 8000faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f000 fd27 	bl	8001a04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb6:	2004      	movs	r0, #4
 8000fb8:	f000 f808 	bl	8000fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fbc:	f007 fdfa 	bl	8008bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023c00 	.word	0x40023c00

08000fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_InitTick+0x54>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_InitTick+0x58>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 fd3f 	bl	8001a6e <HAL_SYSTICK_Config>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00e      	b.n	8001018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0f      	cmp	r3, #15
 8000ffe:	d80a      	bhi.n	8001016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001008:	f000 fd07 	bl	8001a1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800100c:	4a06      	ldr	r2, [pc, #24]	; (8001028 <HAL_InitTick+0x5c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	e000      	b.n	8001018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000008 	.word	0x20000008
 8001024:	20000004 	.word	0x20000004
 8001028:	20000000 	.word	0x20000000

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000004 	.word	0x20000004
 8001050:	20000400 	.word	0x20000400

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000400 	.word	0x20000400

0800106c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff ffee 	bl	8001054 <HAL_GetTick>
 8001078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001084:	d005      	beq.n	8001092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_Delay+0x40>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001092:	bf00      	nop
 8001094:	f7ff ffde 	bl	8001054 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d8f7      	bhi.n	8001094 <HAL_Delay+0x28>
  {
  }
}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000004 	.word	0x20000004

080010b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b8:	2300      	movs	r3, #0
 80010ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e033      	b.n	800112e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d109      	bne.n	80010e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f007 fada 	bl	8008688 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f003 0310 	and.w	r3, r3, #16
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d118      	bne.n	8001120 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010f6:	f023 0302 	bic.w	r3, r3, #2
 80010fa:	f043 0202 	orr.w	r2, r3, #2
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f000 faa8 	bl	8001658 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	f023 0303 	bic.w	r3, r3, #3
 8001116:	f043 0201 	orr.w	r2, r3, #1
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	641a      	str	r2, [r3, #64]	; 0x40
 800111e:	e001      	b.n	8001124 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800112c:	7bfb      	ldrb	r3, [r7, #15]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	2b02      	cmp	r3, #2
 8001152:	bf0c      	ite	eq
 8001154:	2301      	moveq	r3, #1
 8001156:	2300      	movne	r3, #0
 8001158:	b2db      	uxtb	r3, r3
 800115a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0320 	and.w	r3, r3, #32
 8001166:	2b20      	cmp	r3, #32
 8001168:	bf0c      	ite	eq
 800116a:	2301      	moveq	r3, #1
 800116c:	2300      	movne	r3, #0
 800116e:	b2db      	uxtb	r3, r3
 8001170:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d049      	beq.n	800120c <HAL_ADC_IRQHandler+0xd6>
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d046      	beq.n	800120c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	2b00      	cmp	r3, #0
 8001188:	d105      	bne.n	8001196 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d12b      	bne.n	80011fc <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d127      	bne.n	80011fc <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d006      	beq.n	80011c8 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d119      	bne.n	80011fc <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 0220 	bic.w	r2, r2, #32
 80011d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d105      	bne.n	80011fc <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	f043 0201 	orr.w	r2, r3, #1
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f000 f8db 	bl	80013b8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f06f 0212 	mvn.w	r2, #18
 800120a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	2b04      	cmp	r3, #4
 8001218:	bf0c      	ite	eq
 800121a:	2301      	moveq	r3, #1
 800121c:	2300      	movne	r3, #0
 800121e:	b2db      	uxtb	r3, r3
 8001220:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800122c:	2b80      	cmp	r3, #128	; 0x80
 800122e:	bf0c      	ite	eq
 8001230:	2301      	moveq	r3, #1
 8001232:	2300      	movne	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d057      	beq.n	80012ee <HAL_ADC_IRQHandler+0x1b8>
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d054      	beq.n	80012ee <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	f003 0310 	and.w	r3, r3, #16
 800124c:	2b00      	cmp	r3, #0
 800124e:	d105      	bne.n	800125c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d139      	bne.n	80012de <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001270:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001274:	2b00      	cmp	r3, #0
 8001276:	d006      	beq.n	8001286 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001282:	2b00      	cmp	r3, #0
 8001284:	d12b      	bne.n	80012de <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001290:	2b00      	cmp	r3, #0
 8001292:	d124      	bne.n	80012de <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d11d      	bne.n	80012de <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d119      	bne.n	80012de <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012b8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d105      	bne.n	80012de <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f043 0201 	orr.w	r2, r3, #1
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 fab6 	bl	8001850 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f06f 020c 	mvn.w	r2, #12
 80012ec:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	bf0c      	ite	eq
 80012fc:	2301      	moveq	r3, #1
 80012fe:	2300      	movne	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800130e:	2b40      	cmp	r3, #64	; 0x40
 8001310:	bf0c      	ite	eq
 8001312:	2301      	moveq	r3, #1
 8001314:	2300      	movne	r3, #0
 8001316:	b2db      	uxtb	r3, r3
 8001318:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d017      	beq.n	8001350 <HAL_ADC_IRQHandler+0x21a>
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d014      	beq.n	8001350 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	2b01      	cmp	r3, #1
 8001332:	d10d      	bne.n	8001350 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 f843 	bl	80013cc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f06f 0201 	mvn.w	r2, #1
 800134e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0320 	and.w	r3, r3, #32
 800135a:	2b20      	cmp	r3, #32
 800135c:	bf0c      	ite	eq
 800135e:	2301      	moveq	r3, #1
 8001360:	2300      	movne	r3, #0
 8001362:	b2db      	uxtb	r3, r3
 8001364:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001370:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001374:	bf0c      	ite	eq
 8001376:	2301      	moveq	r3, #1
 8001378:	2300      	movne	r3, #0
 800137a:	b2db      	uxtb	r3, r3
 800137c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d015      	beq.n	80013b0 <HAL_ADC_IRQHandler+0x27a>
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d012      	beq.n	80013b0 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f043 0202 	orr.w	r2, r3, #2
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f06f 0220 	mvn.w	r2, #32
 800139e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f81d 	bl	80013e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f06f 0220 	mvn.w	r2, #32
 80013ae:	601a      	str	r2, [r3, #0]
  }
}
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001408:	2b01      	cmp	r3, #1
 800140a:	d101      	bne.n	8001410 <HAL_ADC_ConfigChannel+0x1c>
 800140c:	2302      	movs	r3, #2
 800140e:	e113      	b.n	8001638 <HAL_ADC_ConfigChannel+0x244>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2201      	movs	r2, #1
 8001414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b09      	cmp	r3, #9
 800141e:	d925      	bls.n	800146c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68d9      	ldr	r1, [r3, #12]
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	b29b      	uxth	r3, r3
 800142c:	461a      	mov	r2, r3
 800142e:	4613      	mov	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4413      	add	r3, r2
 8001434:	3b1e      	subs	r3, #30
 8001436:	2207      	movs	r2, #7
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43da      	mvns	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	400a      	ands	r2, r1
 8001444:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68d9      	ldr	r1, [r3, #12]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	b29b      	uxth	r3, r3
 8001456:	4618      	mov	r0, r3
 8001458:	4603      	mov	r3, r0
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4403      	add	r3, r0
 800145e:	3b1e      	subs	r3, #30
 8001460:	409a      	lsls	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	e022      	b.n	80014b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6919      	ldr	r1, [r3, #16]
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	b29b      	uxth	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	4613      	mov	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	2207      	movs	r2, #7
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43da      	mvns	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	400a      	ands	r2, r1
 800148e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6919      	ldr	r1, [r3, #16]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	4618      	mov	r0, r3
 80014a2:	4603      	mov	r3, r0
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	4403      	add	r3, r0
 80014a8:	409a      	lsls	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d824      	bhi.n	8001504 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	4613      	mov	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	3b05      	subs	r3, #5
 80014cc:	221f      	movs	r2, #31
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43da      	mvns	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	400a      	ands	r2, r1
 80014da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	4618      	mov	r0, r3
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	3b05      	subs	r3, #5
 80014f6:	fa00 f203 	lsl.w	r2, r0, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	635a      	str	r2, [r3, #52]	; 0x34
 8001502:	e04c      	b.n	800159e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b0c      	cmp	r3, #12
 800150a:	d824      	bhi.n	8001556 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	3b23      	subs	r3, #35	; 0x23
 800151e:	221f      	movs	r2, #31
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43da      	mvns	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	400a      	ands	r2, r1
 800152c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	b29b      	uxth	r3, r3
 800153a:	4618      	mov	r0, r3
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	4613      	mov	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	3b23      	subs	r3, #35	; 0x23
 8001548:	fa00 f203 	lsl.w	r2, r0, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	430a      	orrs	r2, r1
 8001552:	631a      	str	r2, [r3, #48]	; 0x30
 8001554:	e023      	b.n	800159e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	3b41      	subs	r3, #65	; 0x41
 8001568:	221f      	movs	r2, #31
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43da      	mvns	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	400a      	ands	r2, r1
 8001576:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	b29b      	uxth	r3, r3
 8001584:	4618      	mov	r0, r3
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	3b41      	subs	r3, #65	; 0x41
 8001592:	fa00 f203 	lsl.w	r2, r0, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	430a      	orrs	r2, r1
 800159c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800159e:	4b29      	ldr	r3, [pc, #164]	; (8001644 <HAL_ADC_ConfigChannel+0x250>)
 80015a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a28      	ldr	r2, [pc, #160]	; (8001648 <HAL_ADC_ConfigChannel+0x254>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d10f      	bne.n	80015cc <HAL_ADC_ConfigChannel+0x1d8>
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b12      	cmp	r3, #18
 80015b2:	d10b      	bne.n	80015cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a1d      	ldr	r2, [pc, #116]	; (8001648 <HAL_ADC_ConfigChannel+0x254>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d12b      	bne.n	800162e <HAL_ADC_ConfigChannel+0x23a>
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a1c      	ldr	r2, [pc, #112]	; (800164c <HAL_ADC_ConfigChannel+0x258>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d003      	beq.n	80015e8 <HAL_ADC_ConfigChannel+0x1f4>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b11      	cmp	r3, #17
 80015e6:	d122      	bne.n	800162e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a11      	ldr	r2, [pc, #68]	; (800164c <HAL_ADC_ConfigChannel+0x258>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d111      	bne.n	800162e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <HAL_ADC_ConfigChannel+0x25c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a11      	ldr	r2, [pc, #68]	; (8001654 <HAL_ADC_ConfigChannel+0x260>)
 8001610:	fba2 2303 	umull	r2, r3, r2, r3
 8001614:	0c9a      	lsrs	r2, r3, #18
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001620:	e002      	b.n	8001628 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	3b01      	subs	r3, #1
 8001626:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f9      	bne.n	8001622 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	40012300 	.word	0x40012300
 8001648:	40012000 	.word	0x40012000
 800164c:	10000012 	.word	0x10000012
 8001650:	20000008 	.word	0x20000008
 8001654:	431bde83 	.word	0x431bde83

08001658 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001660:	4b79      	ldr	r3, [pc, #484]	; (8001848 <ADC_Init+0x1f0>)
 8001662:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	431a      	orrs	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800168c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6859      	ldr	r1, [r3, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	021a      	lsls	r2, r3, #8
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6859      	ldr	r1, [r3, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6899      	ldr	r1, [r3, #8]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	430a      	orrs	r2, r1
 80016e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ea:	4a58      	ldr	r2, [pc, #352]	; (800184c <ADC_Init+0x1f4>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d022      	beq.n	8001736 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6899      	ldr	r1, [r3, #8]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	430a      	orrs	r2, r1
 8001710:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001720:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6899      	ldr	r1, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	430a      	orrs	r2, r1
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	e00f      	b.n	8001756 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001744:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001754:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 0202 	bic.w	r2, r2, #2
 8001764:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6899      	ldr	r1, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	7e1b      	ldrb	r3, [r3, #24]
 8001770:	005a      	lsls	r2, r3, #1
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	430a      	orrs	r2, r1
 8001778:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d01b      	beq.n	80017bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001792:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6859      	ldr	r1, [r3, #4]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	3b01      	subs	r3, #1
 80017b0:	035a      	lsls	r2, r3, #13
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	e007      	b.n	80017cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	051a      	lsls	r2, r3, #20
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001800:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6899      	ldr	r1, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800180e:	025a      	lsls	r2, r3, #9
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	430a      	orrs	r2, r1
 8001816:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001826:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6899      	ldr	r1, [r3, #8]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	029a      	lsls	r2, r3, #10
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	430a      	orrs	r2, r1
 800183a:	609a      	str	r2, [r3, #8]
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	40012300 	.word	0x40012300
 800184c:	0f000001 	.word	0x0f000001

08001850 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001880:	4013      	ands	r3, r2
 8001882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800188c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001896:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	60d3      	str	r3, [r2, #12]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b0:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <__NVIC_GetPriorityGrouping+0x18>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	0a1b      	lsrs	r3, r3, #8
 80018b6:	f003 0307 	and.w	r3, r3, #7
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	db0b      	blt.n	80018f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	f003 021f 	and.w	r2, r3, #31
 80018e0:	4907      	ldr	r1, [pc, #28]	; (8001900 <__NVIC_EnableIRQ+0x38>)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	095b      	lsrs	r3, r3, #5
 80018e8:	2001      	movs	r0, #1
 80018ea:	fa00 f202 	lsl.w	r2, r0, r2
 80018ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000e100 	.word	0xe000e100

08001904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	6039      	str	r1, [r7, #0]
 800190e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001914:	2b00      	cmp	r3, #0
 8001916:	db0a      	blt.n	800192e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	b2da      	uxtb	r2, r3
 800191c:	490c      	ldr	r1, [pc, #48]	; (8001950 <__NVIC_SetPriority+0x4c>)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	0112      	lsls	r2, r2, #4
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	440b      	add	r3, r1
 8001928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800192c:	e00a      	b.n	8001944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4908      	ldr	r1, [pc, #32]	; (8001954 <__NVIC_SetPriority+0x50>)
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	3b04      	subs	r3, #4
 800193c:	0112      	lsls	r2, r2, #4
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	440b      	add	r3, r1
 8001942:	761a      	strb	r2, [r3, #24]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	e000e100 	.word	0xe000e100
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	; 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f1c3 0307 	rsb	r3, r3, #7
 8001972:	2b04      	cmp	r3, #4
 8001974:	bf28      	it	cs
 8001976:	2304      	movcs	r3, #4
 8001978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3304      	adds	r3, #4
 800197e:	2b06      	cmp	r3, #6
 8001980:	d902      	bls.n	8001988 <NVIC_EncodePriority+0x30>
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3b03      	subs	r3, #3
 8001986:	e000      	b.n	800198a <NVIC_EncodePriority+0x32>
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800198c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43da      	mvns	r2, r3
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	401a      	ands	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	43d9      	mvns	r1, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b0:	4313      	orrs	r3, r2
         );
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3724      	adds	r7, #36	; 0x24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d0:	d301      	bcc.n	80019d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d2:	2301      	movs	r3, #1
 80019d4:	e00f      	b.n	80019f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d6:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <SysTick_Config+0x40>)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019de:	210f      	movs	r1, #15
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019e4:	f7ff ff8e 	bl	8001904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <SysTick_Config+0x40>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ee:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <SysTick_Config+0x40>)
 80019f0:	2207      	movs	r2, #7
 80019f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	e000e010 	.word	0xe000e010

08001a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ff29 	bl	8001864 <__NVIC_SetPriorityGrouping>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b086      	sub	sp, #24
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	4603      	mov	r3, r0
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	607a      	str	r2, [r7, #4]
 8001a26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a2c:	f7ff ff3e 	bl	80018ac <__NVIC_GetPriorityGrouping>
 8001a30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	68b9      	ldr	r1, [r7, #8]
 8001a36:	6978      	ldr	r0, [r7, #20]
 8001a38:	f7ff ff8e 	bl	8001958 <NVIC_EncodePriority>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a42:	4611      	mov	r1, r2
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff5d 	bl	8001904 <__NVIC_SetPriority>
}
 8001a4a:	bf00      	nop
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	4603      	mov	r3, r0
 8001a5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff31 	bl	80018c8 <__NVIC_EnableIRQ>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ffa2 	bl	80019c0 <SysTick_Config>
 8001a7c:	4603      	mov	r3, r0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b089      	sub	sp, #36	; 0x24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	e165      	b.n	8001d70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	f040 8154 	bne.w	8001d6a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0x4a>
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b12      	cmp	r3, #18
 8001ad0:	d123      	bne.n	8001b1a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	08da      	lsrs	r2, r3, #3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3208      	adds	r2, #8
 8001ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	220f      	movs	r2, #15
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	691a      	ldr	r2, [r3, #16]
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	08da      	lsrs	r2, r3, #3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3208      	adds	r2, #8
 8001b14:	69b9      	ldr	r1, [r7, #24]
 8001b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	2203      	movs	r2, #3
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 0203 	and.w	r2, r3, #3
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d00b      	beq.n	8001b6e <HAL_GPIO_Init+0xe6>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d007      	beq.n	8001b6e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b62:	2b11      	cmp	r3, #17
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b12      	cmp	r3, #18
 8001b6c:	d130      	bne.n	8001bd0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	2203      	movs	r2, #3
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	091b      	lsrs	r3, r3, #4
 8001bba:	f003 0201 	and.w	r2, r3, #1
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 80ae 	beq.w	8001d6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	4b5c      	ldr	r3, [pc, #368]	; (8001d84 <HAL_GPIO_Init+0x2fc>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	4a5b      	ldr	r2, [pc, #364]	; (8001d84 <HAL_GPIO_Init+0x2fc>)
 8001c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1e:	4b59      	ldr	r3, [pc, #356]	; (8001d84 <HAL_GPIO_Init+0x2fc>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c2a:	4a57      	ldr	r2, [pc, #348]	; (8001d88 <HAL_GPIO_Init+0x300>)
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	089b      	lsrs	r3, r3, #2
 8001c30:	3302      	adds	r3, #2
 8001c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	220f      	movs	r2, #15
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a4e      	ldr	r2, [pc, #312]	; (8001d8c <HAL_GPIO_Init+0x304>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d025      	beq.n	8001ca2 <HAL_GPIO_Init+0x21a>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a4d      	ldr	r2, [pc, #308]	; (8001d90 <HAL_GPIO_Init+0x308>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d01f      	beq.n	8001c9e <HAL_GPIO_Init+0x216>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a4c      	ldr	r2, [pc, #304]	; (8001d94 <HAL_GPIO_Init+0x30c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d019      	beq.n	8001c9a <HAL_GPIO_Init+0x212>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a4b      	ldr	r2, [pc, #300]	; (8001d98 <HAL_GPIO_Init+0x310>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d013      	beq.n	8001c96 <HAL_GPIO_Init+0x20e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a4a      	ldr	r2, [pc, #296]	; (8001d9c <HAL_GPIO_Init+0x314>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d00d      	beq.n	8001c92 <HAL_GPIO_Init+0x20a>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a49      	ldr	r2, [pc, #292]	; (8001da0 <HAL_GPIO_Init+0x318>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d007      	beq.n	8001c8e <HAL_GPIO_Init+0x206>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a48      	ldr	r2, [pc, #288]	; (8001da4 <HAL_GPIO_Init+0x31c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d101      	bne.n	8001c8a <HAL_GPIO_Init+0x202>
 8001c86:	2306      	movs	r3, #6
 8001c88:	e00c      	b.n	8001ca4 <HAL_GPIO_Init+0x21c>
 8001c8a:	2307      	movs	r3, #7
 8001c8c:	e00a      	b.n	8001ca4 <HAL_GPIO_Init+0x21c>
 8001c8e:	2305      	movs	r3, #5
 8001c90:	e008      	b.n	8001ca4 <HAL_GPIO_Init+0x21c>
 8001c92:	2304      	movs	r3, #4
 8001c94:	e006      	b.n	8001ca4 <HAL_GPIO_Init+0x21c>
 8001c96:	2303      	movs	r3, #3
 8001c98:	e004      	b.n	8001ca4 <HAL_GPIO_Init+0x21c>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e002      	b.n	8001ca4 <HAL_GPIO_Init+0x21c>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <HAL_GPIO_Init+0x21c>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	69fa      	ldr	r2, [r7, #28]
 8001ca6:	f002 0203 	and.w	r2, r2, #3
 8001caa:	0092      	lsls	r2, r2, #2
 8001cac:	4093      	lsls	r3, r2
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb4:	4934      	ldr	r1, [pc, #208]	; (8001d88 <HAL_GPIO_Init+0x300>)
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	089b      	lsrs	r3, r3, #2
 8001cba:	3302      	adds	r3, #2
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cc2:	4b39      	ldr	r3, [pc, #228]	; (8001da8 <HAL_GPIO_Init+0x320>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ce6:	4a30      	ldr	r2, [pc, #192]	; (8001da8 <HAL_GPIO_Init+0x320>)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cec:	4b2e      	ldr	r3, [pc, #184]	; (8001da8 <HAL_GPIO_Init+0x320>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d10:	4a25      	ldr	r2, [pc, #148]	; (8001da8 <HAL_GPIO_Init+0x320>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d16:	4b24      	ldr	r3, [pc, #144]	; (8001da8 <HAL_GPIO_Init+0x320>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d3a:	4a1b      	ldr	r2, [pc, #108]	; (8001da8 <HAL_GPIO_Init+0x320>)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d40:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <HAL_GPIO_Init+0x320>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d64:	4a10      	ldr	r2, [pc, #64]	; (8001da8 <HAL_GPIO_Init+0x320>)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	61fb      	str	r3, [r7, #28]
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	2b0f      	cmp	r3, #15
 8001d74:	f67f ae96 	bls.w	8001aa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d78:	bf00      	nop
 8001d7a:	3724      	adds	r7, #36	; 0x24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40013800 	.word	0x40013800
 8001d8c:	40020000 	.word	0x40020000
 8001d90:	40020400 	.word	0x40020400
 8001d94:	40020800 	.word	0x40020800
 8001d98:	40020c00 	.word	0x40020c00
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40021400 	.word	0x40021400
 8001da4:	40021800 	.word	0x40021800
 8001da8:	40013c00 	.word	0x40013c00

08001dac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	603b      	str	r3, [r7, #0]
 8001dba:	4b20      	ldr	r3, [pc, #128]	; (8001e3c <HAL_PWREx_EnableOverDrive+0x90>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a1f      	ldr	r2, [pc, #124]	; (8001e3c <HAL_PWREx_EnableOverDrive+0x90>)
 8001dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b1d      	ldr	r3, [pc, #116]	; (8001e3c <HAL_PWREx_EnableOverDrive+0x90>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001dd2:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <HAL_PWREx_EnableOverDrive+0x94>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dd8:	f7ff f93c 	bl	8001054 <HAL_GetTick>
 8001ddc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001dde:	e009      	b.n	8001df4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001de0:	f7ff f938 	bl	8001054 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dee:	d901      	bls.n	8001df4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e01f      	b.n	8001e34 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001df4:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <HAL_PWREx_EnableOverDrive+0x98>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e00:	d1ee      	bne.n	8001de0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e02:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e08:	f7ff f924 	bl	8001054 <HAL_GetTick>
 8001e0c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e0e:	e009      	b.n	8001e24 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e10:	f7ff f920 	bl	8001054 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e1e:	d901      	bls.n	8001e24 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e007      	b.n	8001e34 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e24:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e30:	d1ee      	bne.n	8001e10 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	420e0040 	.word	0x420e0040
 8001e44:	40007000 	.word	0x40007000
 8001e48:	420e0044 	.word	0x420e0044

08001e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e0ca      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e60:	4b67      	ldr	r3, [pc, #412]	; (8002000 <HAL_RCC_ClockConfig+0x1b4>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 030f 	and.w	r3, r3, #15
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d90c      	bls.n	8001e88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6e:	4b64      	ldr	r3, [pc, #400]	; (8002000 <HAL_RCC_ClockConfig+0x1b4>)
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e76:	4b62      	ldr	r3, [pc, #392]	; (8002000 <HAL_RCC_ClockConfig+0x1b4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e0b6      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d020      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ea0:	4b58      	ldr	r3, [pc, #352]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	4a57      	ldr	r2, [pc, #348]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001eaa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d005      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eb8:	4b52      	ldr	r3, [pc, #328]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	4a51      	ldr	r2, [pc, #324]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001ebe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ec2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec4:	4b4f      	ldr	r3, [pc, #316]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	494c      	ldr	r1, [pc, #304]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d044      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d107      	bne.n	8001efa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eea:	4b46      	ldr	r3, [pc, #280]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d119      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e07d      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d003      	beq.n	8001f0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d107      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f0a:	4b3e      	ldr	r3, [pc, #248]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d109      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e06d      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1a:	4b3a      	ldr	r3, [pc, #232]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e065      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f2a:	4b36      	ldr	r3, [pc, #216]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f023 0203 	bic.w	r2, r3, #3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	4933      	ldr	r1, [pc, #204]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f3c:	f7ff f88a 	bl	8001054 <HAL_GetTick>
 8001f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f42:	e00a      	b.n	8001f5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f44:	f7ff f886 	bl	8001054 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e04d      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5a:	4b2a      	ldr	r3, [pc, #168]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 020c 	and.w	r2, r3, #12
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d1eb      	bne.n	8001f44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f6c:	4b24      	ldr	r3, [pc, #144]	; (8002000 <HAL_RCC_ClockConfig+0x1b4>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 030f 	and.w	r3, r3, #15
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d20c      	bcs.n	8001f94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7a:	4b21      	ldr	r3, [pc, #132]	; (8002000 <HAL_RCC_ClockConfig+0x1b4>)
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f82:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <HAL_RCC_ClockConfig+0x1b4>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e030      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d008      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fa0:	4b18      	ldr	r3, [pc, #96]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	4915      	ldr	r1, [pc, #84]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d009      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fbe:	4b11      	ldr	r3, [pc, #68]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	490d      	ldr	r1, [pc, #52]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fd2:	f000 f81d 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 8001fd6:	4601      	mov	r1, r0
 8001fd8:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	091b      	lsrs	r3, r3, #4
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	4a09      	ldr	r2, [pc, #36]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe4:	5cd3      	ldrb	r3, [r2, r3]
 8001fe6:	fa21 f303 	lsr.w	r3, r1, r3
 8001fea:	4a08      	ldr	r2, [pc, #32]	; (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001fee:	2004      	movs	r0, #4
 8001ff0:	f7fe ffec 	bl	8000fcc <HAL_InitTick>

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40023c00 	.word	0x40023c00
 8002004:	40023800 	.word	0x40023800
 8002008:	0800e49c 	.word	0x0800e49c
 800200c:	20000008 	.word	0x20000008

08002010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002012:	b087      	sub	sp, #28
 8002014:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800201e:	2300      	movs	r3, #0
 8002020:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002022:	2300      	movs	r3, #0
 8002024:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800202a:	4bc6      	ldr	r3, [pc, #792]	; (8002344 <HAL_RCC_GetSysClockFreq+0x334>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
 8002032:	2b0c      	cmp	r3, #12
 8002034:	f200 817e 	bhi.w	8002334 <HAL_RCC_GetSysClockFreq+0x324>
 8002038:	a201      	add	r2, pc, #4	; (adr r2, 8002040 <HAL_RCC_GetSysClockFreq+0x30>)
 800203a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203e:	bf00      	nop
 8002040:	08002075 	.word	0x08002075
 8002044:	08002335 	.word	0x08002335
 8002048:	08002335 	.word	0x08002335
 800204c:	08002335 	.word	0x08002335
 8002050:	0800207b 	.word	0x0800207b
 8002054:	08002335 	.word	0x08002335
 8002058:	08002335 	.word	0x08002335
 800205c:	08002335 	.word	0x08002335
 8002060:	08002081 	.word	0x08002081
 8002064:	08002335 	.word	0x08002335
 8002068:	08002335 	.word	0x08002335
 800206c:	08002335 	.word	0x08002335
 8002070:	080021dd 	.word	0x080021dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002074:	4bb4      	ldr	r3, [pc, #720]	; (8002348 <HAL_RCC_GetSysClockFreq+0x338>)
 8002076:	613b      	str	r3, [r7, #16]
       break;
 8002078:	e15f      	b.n	800233a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800207a:	4bb4      	ldr	r3, [pc, #720]	; (800234c <HAL_RCC_GetSysClockFreq+0x33c>)
 800207c:	613b      	str	r3, [r7, #16]
      break;
 800207e:	e15c      	b.n	800233a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002080:	4bb0      	ldr	r3, [pc, #704]	; (8002344 <HAL_RCC_GetSysClockFreq+0x334>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002088:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800208a:	4bae      	ldr	r3, [pc, #696]	; (8002344 <HAL_RCC_GetSysClockFreq+0x334>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d04a      	beq.n	800212c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002096:	4bab      	ldr	r3, [pc, #684]	; (8002344 <HAL_RCC_GetSysClockFreq+0x334>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	099b      	lsrs	r3, r3, #6
 800209c:	f04f 0400 	mov.w	r4, #0
 80020a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	ea03 0501 	and.w	r5, r3, r1
 80020ac:	ea04 0602 	and.w	r6, r4, r2
 80020b0:	4629      	mov	r1, r5
 80020b2:	4632      	mov	r2, r6
 80020b4:	f04f 0300 	mov.w	r3, #0
 80020b8:	f04f 0400 	mov.w	r4, #0
 80020bc:	0154      	lsls	r4, r2, #5
 80020be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020c2:	014b      	lsls	r3, r1, #5
 80020c4:	4619      	mov	r1, r3
 80020c6:	4622      	mov	r2, r4
 80020c8:	1b49      	subs	r1, r1, r5
 80020ca:	eb62 0206 	sbc.w	r2, r2, r6
 80020ce:	f04f 0300 	mov.w	r3, #0
 80020d2:	f04f 0400 	mov.w	r4, #0
 80020d6:	0194      	lsls	r4, r2, #6
 80020d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80020dc:	018b      	lsls	r3, r1, #6
 80020de:	1a5b      	subs	r3, r3, r1
 80020e0:	eb64 0402 	sbc.w	r4, r4, r2
 80020e4:	f04f 0100 	mov.w	r1, #0
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	00e2      	lsls	r2, r4, #3
 80020ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020f2:	00d9      	lsls	r1, r3, #3
 80020f4:	460b      	mov	r3, r1
 80020f6:	4614      	mov	r4, r2
 80020f8:	195b      	adds	r3, r3, r5
 80020fa:	eb44 0406 	adc.w	r4, r4, r6
 80020fe:	f04f 0100 	mov.w	r1, #0
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	0262      	lsls	r2, r4, #9
 8002108:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800210c:	0259      	lsls	r1, r3, #9
 800210e:	460b      	mov	r3, r1
 8002110:	4614      	mov	r4, r2
 8002112:	4618      	mov	r0, r3
 8002114:	4621      	mov	r1, r4
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f04f 0400 	mov.w	r4, #0
 800211c:	461a      	mov	r2, r3
 800211e:	4623      	mov	r3, r4
 8002120:	f7fe fdb2 	bl	8000c88 <__aeabi_uldivmod>
 8002124:	4603      	mov	r3, r0
 8002126:	460c      	mov	r4, r1
 8002128:	617b      	str	r3, [r7, #20]
 800212a:	e049      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800212c:	4b85      	ldr	r3, [pc, #532]	; (8002344 <HAL_RCC_GetSysClockFreq+0x334>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	099b      	lsrs	r3, r3, #6
 8002132:	f04f 0400 	mov.w	r4, #0
 8002136:	f240 11ff 	movw	r1, #511	; 0x1ff
 800213a:	f04f 0200 	mov.w	r2, #0
 800213e:	ea03 0501 	and.w	r5, r3, r1
 8002142:	ea04 0602 	and.w	r6, r4, r2
 8002146:	4629      	mov	r1, r5
 8002148:	4632      	mov	r2, r6
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	f04f 0400 	mov.w	r4, #0
 8002152:	0154      	lsls	r4, r2, #5
 8002154:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002158:	014b      	lsls	r3, r1, #5
 800215a:	4619      	mov	r1, r3
 800215c:	4622      	mov	r2, r4
 800215e:	1b49      	subs	r1, r1, r5
 8002160:	eb62 0206 	sbc.w	r2, r2, r6
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	f04f 0400 	mov.w	r4, #0
 800216c:	0194      	lsls	r4, r2, #6
 800216e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002172:	018b      	lsls	r3, r1, #6
 8002174:	1a5b      	subs	r3, r3, r1
 8002176:	eb64 0402 	sbc.w	r4, r4, r2
 800217a:	f04f 0100 	mov.w	r1, #0
 800217e:	f04f 0200 	mov.w	r2, #0
 8002182:	00e2      	lsls	r2, r4, #3
 8002184:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002188:	00d9      	lsls	r1, r3, #3
 800218a:	460b      	mov	r3, r1
 800218c:	4614      	mov	r4, r2
 800218e:	195b      	adds	r3, r3, r5
 8002190:	eb44 0406 	adc.w	r4, r4, r6
 8002194:	f04f 0100 	mov.w	r1, #0
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	02a2      	lsls	r2, r4, #10
 800219e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80021a2:	0299      	lsls	r1, r3, #10
 80021a4:	460b      	mov	r3, r1
 80021a6:	4614      	mov	r4, r2
 80021a8:	4618      	mov	r0, r3
 80021aa:	4621      	mov	r1, r4
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f04f 0400 	mov.w	r4, #0
 80021b2:	461a      	mov	r2, r3
 80021b4:	4623      	mov	r3, r4
 80021b6:	f7fe fd67 	bl	8000c88 <__aeabi_uldivmod>
 80021ba:	4603      	mov	r3, r0
 80021bc:	460c      	mov	r4, r1
 80021be:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021c0:	4b60      	ldr	r3, [pc, #384]	; (8002344 <HAL_RCC_GetSysClockFreq+0x334>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	0c1b      	lsrs	r3, r3, #16
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	3301      	adds	r3, #1
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d8:	613b      	str	r3, [r7, #16]
      break;
 80021da:	e0ae      	b.n	800233a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021dc:	4b59      	ldr	r3, [pc, #356]	; (8002344 <HAL_RCC_GetSysClockFreq+0x334>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021e4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021e6:	4b57      	ldr	r3, [pc, #348]	; (8002344 <HAL_RCC_GetSysClockFreq+0x334>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d04a      	beq.n	8002288 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021f2:	4b54      	ldr	r3, [pc, #336]	; (8002344 <HAL_RCC_GetSysClockFreq+0x334>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	099b      	lsrs	r3, r3, #6
 80021f8:	f04f 0400 	mov.w	r4, #0
 80021fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	ea03 0501 	and.w	r5, r3, r1
 8002208:	ea04 0602 	and.w	r6, r4, r2
 800220c:	4629      	mov	r1, r5
 800220e:	4632      	mov	r2, r6
 8002210:	f04f 0300 	mov.w	r3, #0
 8002214:	f04f 0400 	mov.w	r4, #0
 8002218:	0154      	lsls	r4, r2, #5
 800221a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800221e:	014b      	lsls	r3, r1, #5
 8002220:	4619      	mov	r1, r3
 8002222:	4622      	mov	r2, r4
 8002224:	1b49      	subs	r1, r1, r5
 8002226:	eb62 0206 	sbc.w	r2, r2, r6
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	f04f 0400 	mov.w	r4, #0
 8002232:	0194      	lsls	r4, r2, #6
 8002234:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002238:	018b      	lsls	r3, r1, #6
 800223a:	1a5b      	subs	r3, r3, r1
 800223c:	eb64 0402 	sbc.w	r4, r4, r2
 8002240:	f04f 0100 	mov.w	r1, #0
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	00e2      	lsls	r2, r4, #3
 800224a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800224e:	00d9      	lsls	r1, r3, #3
 8002250:	460b      	mov	r3, r1
 8002252:	4614      	mov	r4, r2
 8002254:	195b      	adds	r3, r3, r5
 8002256:	eb44 0406 	adc.w	r4, r4, r6
 800225a:	f04f 0100 	mov.w	r1, #0
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	0262      	lsls	r2, r4, #9
 8002264:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002268:	0259      	lsls	r1, r3, #9
 800226a:	460b      	mov	r3, r1
 800226c:	4614      	mov	r4, r2
 800226e:	4618      	mov	r0, r3
 8002270:	4621      	mov	r1, r4
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f04f 0400 	mov.w	r4, #0
 8002278:	461a      	mov	r2, r3
 800227a:	4623      	mov	r3, r4
 800227c:	f7fe fd04 	bl	8000c88 <__aeabi_uldivmod>
 8002280:	4603      	mov	r3, r0
 8002282:	460c      	mov	r4, r1
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	e049      	b.n	800231c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002288:	4b2e      	ldr	r3, [pc, #184]	; (8002344 <HAL_RCC_GetSysClockFreq+0x334>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	099b      	lsrs	r3, r3, #6
 800228e:	f04f 0400 	mov.w	r4, #0
 8002292:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	ea03 0501 	and.w	r5, r3, r1
 800229e:	ea04 0602 	and.w	r6, r4, r2
 80022a2:	4629      	mov	r1, r5
 80022a4:	4632      	mov	r2, r6
 80022a6:	f04f 0300 	mov.w	r3, #0
 80022aa:	f04f 0400 	mov.w	r4, #0
 80022ae:	0154      	lsls	r4, r2, #5
 80022b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022b4:	014b      	lsls	r3, r1, #5
 80022b6:	4619      	mov	r1, r3
 80022b8:	4622      	mov	r2, r4
 80022ba:	1b49      	subs	r1, r1, r5
 80022bc:	eb62 0206 	sbc.w	r2, r2, r6
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	f04f 0400 	mov.w	r4, #0
 80022c8:	0194      	lsls	r4, r2, #6
 80022ca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022ce:	018b      	lsls	r3, r1, #6
 80022d0:	1a5b      	subs	r3, r3, r1
 80022d2:	eb64 0402 	sbc.w	r4, r4, r2
 80022d6:	f04f 0100 	mov.w	r1, #0
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	00e2      	lsls	r2, r4, #3
 80022e0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022e4:	00d9      	lsls	r1, r3, #3
 80022e6:	460b      	mov	r3, r1
 80022e8:	4614      	mov	r4, r2
 80022ea:	195b      	adds	r3, r3, r5
 80022ec:	eb44 0406 	adc.w	r4, r4, r6
 80022f0:	f04f 0100 	mov.w	r1, #0
 80022f4:	f04f 0200 	mov.w	r2, #0
 80022f8:	02a2      	lsls	r2, r4, #10
 80022fa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80022fe:	0299      	lsls	r1, r3, #10
 8002300:	460b      	mov	r3, r1
 8002302:	4614      	mov	r4, r2
 8002304:	4618      	mov	r0, r3
 8002306:	4621      	mov	r1, r4
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f04f 0400 	mov.w	r4, #0
 800230e:	461a      	mov	r2, r3
 8002310:	4623      	mov	r3, r4
 8002312:	f7fe fcb9 	bl	8000c88 <__aeabi_uldivmod>
 8002316:	4603      	mov	r3, r0
 8002318:	460c      	mov	r4, r1
 800231a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800231c:	4b09      	ldr	r3, [pc, #36]	; (8002344 <HAL_RCC_GetSysClockFreq+0x334>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	0f1b      	lsrs	r3, r3, #28
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002330:	613b      	str	r3, [r7, #16]
      break;
 8002332:	e002      	b.n	800233a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002334:	4b04      	ldr	r3, [pc, #16]	; (8002348 <HAL_RCC_GetSysClockFreq+0x338>)
 8002336:	613b      	str	r3, [r7, #16]
      break;
 8002338:	bf00      	nop
    }
  }
  return sysclockfreq;
 800233a:	693b      	ldr	r3, [r7, #16]
}
 800233c:	4618      	mov	r0, r3
 800233e:	371c      	adds	r7, #28
 8002340:	46bd      	mov	sp, r7
 8002342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002344:	40023800 	.word	0x40023800
 8002348:	00f42400 	.word	0x00f42400
 800234c:	007a1200 	.word	0x007a1200

08002350 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002358:	2300      	movs	r3, #0
 800235a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 8083 	beq.w	8002470 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800236a:	4b95      	ldr	r3, [pc, #596]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	2b04      	cmp	r3, #4
 8002374:	d019      	beq.n	80023aa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002376:	4b92      	ldr	r3, [pc, #584]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800237e:	2b08      	cmp	r3, #8
 8002380:	d106      	bne.n	8002390 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002382:	4b8f      	ldr	r3, [pc, #572]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800238a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800238e:	d00c      	beq.n	80023aa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002390:	4b8b      	ldr	r3, [pc, #556]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002398:	2b0c      	cmp	r3, #12
 800239a:	d112      	bne.n	80023c2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800239c:	4b88      	ldr	r3, [pc, #544]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023a8:	d10b      	bne.n	80023c2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023aa:	4b85      	ldr	r3, [pc, #532]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d05b      	beq.n	800246e <HAL_RCC_OscConfig+0x11e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d157      	bne.n	800246e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e216      	b.n	80027f0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ca:	d106      	bne.n	80023da <HAL_RCC_OscConfig+0x8a>
 80023cc:	4b7c      	ldr	r3, [pc, #496]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a7b      	ldr	r2, [pc, #492]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80023d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d6:	6013      	str	r3, [r2, #0]
 80023d8:	e01d      	b.n	8002416 <HAL_RCC_OscConfig+0xc6>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023e2:	d10c      	bne.n	80023fe <HAL_RCC_OscConfig+0xae>
 80023e4:	4b76      	ldr	r3, [pc, #472]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a75      	ldr	r2, [pc, #468]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80023ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	4b73      	ldr	r3, [pc, #460]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a72      	ldr	r2, [pc, #456]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80023f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fa:	6013      	str	r3, [r2, #0]
 80023fc:	e00b      	b.n	8002416 <HAL_RCC_OscConfig+0xc6>
 80023fe:	4b70      	ldr	r3, [pc, #448]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a6f      	ldr	r2, [pc, #444]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	4b6d      	ldr	r3, [pc, #436]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a6c      	ldr	r2, [pc, #432]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002410:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002414:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d013      	beq.n	8002446 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241e:	f7fe fe19 	bl	8001054 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002426:	f7fe fe15 	bl	8001054 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b64      	cmp	r3, #100	; 0x64
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e1db      	b.n	80027f0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002438:	4b61      	ldr	r3, [pc, #388]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0f0      	beq.n	8002426 <HAL_RCC_OscConfig+0xd6>
 8002444:	e014      	b.n	8002470 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002446:	f7fe fe05 	bl	8001054 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800244e:	f7fe fe01 	bl	8001054 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b64      	cmp	r3, #100	; 0x64
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e1c7      	b.n	80027f0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002460:	4b57      	ldr	r3, [pc, #348]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1f0      	bne.n	800244e <HAL_RCC_OscConfig+0xfe>
 800246c:	e000      	b.n	8002470 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d06f      	beq.n	800255c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800247c:	4b50      	ldr	r3, [pc, #320]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 030c 	and.w	r3, r3, #12
 8002484:	2b00      	cmp	r3, #0
 8002486:	d017      	beq.n	80024b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002488:	4b4d      	ldr	r3, [pc, #308]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002490:	2b08      	cmp	r3, #8
 8002492:	d105      	bne.n	80024a0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002494:	4b4a      	ldr	r3, [pc, #296]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00b      	beq.n	80024b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024a0:	4b47      	ldr	r3, [pc, #284]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024a8:	2b0c      	cmp	r3, #12
 80024aa:	d11c      	bne.n	80024e6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ac:	4b44      	ldr	r3, [pc, #272]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d116      	bne.n	80024e6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b8:	4b41      	ldr	r3, [pc, #260]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_RCC_OscConfig+0x180>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e18f      	b.n	80027f0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d0:	4b3b      	ldr	r3, [pc, #236]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4938      	ldr	r1, [pc, #224]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024e4:	e03a      	b.n	800255c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d020      	beq.n	8002530 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ee:	4b35      	ldr	r3, [pc, #212]	; (80025c4 <HAL_RCC_OscConfig+0x274>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f4:	f7fe fdae 	bl	8001054 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024fc:	f7fe fdaa 	bl	8001054 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e170      	b.n	80027f0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250e:	4b2c      	ldr	r3, [pc, #176]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251a:	4b29      	ldr	r3, [pc, #164]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	4925      	ldr	r1, [pc, #148]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 800252a:	4313      	orrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]
 800252e:	e015      	b.n	800255c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002530:	4b24      	ldr	r3, [pc, #144]	; (80025c4 <HAL_RCC_OscConfig+0x274>)
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002536:	f7fe fd8d 	bl	8001054 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800253e:	f7fe fd89 	bl	8001054 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e14f      	b.n	80027f0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002550:	4b1b      	ldr	r3, [pc, #108]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f0      	bne.n	800253e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	2b00      	cmp	r3, #0
 8002566:	d037      	beq.n	80025d8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d016      	beq.n	800259e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002570:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <HAL_RCC_OscConfig+0x278>)
 8002572:	2201      	movs	r2, #1
 8002574:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002576:	f7fe fd6d 	bl	8001054 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800257e:	f7fe fd69 	bl	8001054 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e12f      	b.n	80027f0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x22e>
 800259c:	e01c      	b.n	80025d8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800259e:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <HAL_RCC_OscConfig+0x278>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a4:	f7fe fd56 	bl	8001054 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025aa:	e00f      	b.n	80025cc <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ac:	f7fe fd52 	bl	8001054 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d908      	bls.n	80025cc <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e118      	b.n	80027f0 <HAL_RCC_OscConfig+0x4a0>
 80025be:	bf00      	nop
 80025c0:	40023800 	.word	0x40023800
 80025c4:	42470000 	.word	0x42470000
 80025c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025cc:	4b8a      	ldr	r3, [pc, #552]	; (80027f8 <HAL_RCC_OscConfig+0x4a8>)
 80025ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1e9      	bne.n	80025ac <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 8097 	beq.w	8002714 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025e6:	2300      	movs	r3, #0
 80025e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ea:	4b83      	ldr	r3, [pc, #524]	; (80027f8 <HAL_RCC_OscConfig+0x4a8>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10f      	bne.n	8002616 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	4b7f      	ldr	r3, [pc, #508]	; (80027f8 <HAL_RCC_OscConfig+0x4a8>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	4a7e      	ldr	r2, [pc, #504]	; (80027f8 <HAL_RCC_OscConfig+0x4a8>)
 8002600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002604:	6413      	str	r3, [r2, #64]	; 0x40
 8002606:	4b7c      	ldr	r3, [pc, #496]	; (80027f8 <HAL_RCC_OscConfig+0x4a8>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002612:	2301      	movs	r3, #1
 8002614:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002616:	4b79      	ldr	r3, [pc, #484]	; (80027fc <HAL_RCC_OscConfig+0x4ac>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d118      	bne.n	8002654 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002622:	4b76      	ldr	r3, [pc, #472]	; (80027fc <HAL_RCC_OscConfig+0x4ac>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a75      	ldr	r2, [pc, #468]	; (80027fc <HAL_RCC_OscConfig+0x4ac>)
 8002628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800262c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800262e:	f7fe fd11 	bl	8001054 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002636:	f7fe fd0d 	bl	8001054 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e0d3      	b.n	80027f0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002648:	4b6c      	ldr	r3, [pc, #432]	; (80027fc <HAL_RCC_OscConfig+0x4ac>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0f0      	beq.n	8002636 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d106      	bne.n	800266a <HAL_RCC_OscConfig+0x31a>
 800265c:	4b66      	ldr	r3, [pc, #408]	; (80027f8 <HAL_RCC_OscConfig+0x4a8>)
 800265e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002660:	4a65      	ldr	r2, [pc, #404]	; (80027f8 <HAL_RCC_OscConfig+0x4a8>)
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	6713      	str	r3, [r2, #112]	; 0x70
 8002668:	e01c      	b.n	80026a4 <HAL_RCC_OscConfig+0x354>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b05      	cmp	r3, #5
 8002670:	d10c      	bne.n	800268c <HAL_RCC_OscConfig+0x33c>
 8002672:	4b61      	ldr	r3, [pc, #388]	; (80027f8 <HAL_RCC_OscConfig+0x4a8>)
 8002674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002676:	4a60      	ldr	r2, [pc, #384]	; (80027f8 <HAL_RCC_OscConfig+0x4a8>)
 8002678:	f043 0304 	orr.w	r3, r3, #4
 800267c:	6713      	str	r3, [r2, #112]	; 0x70
 800267e:	4b5e      	ldr	r3, [pc, #376]	; (80027f8 <HAL_RCC_OscConfig+0x4a8>)
 8002680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002682:	4a5d      	ldr	r2, [pc, #372]	; (80027f8 <HAL_RCC_OscConfig+0x4a8>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	6713      	str	r3, [r2, #112]	; 0x70
 800268a:	e00b      	b.n	80026a4 <HAL_RCC_OscConfig+0x354>
 800268c:	4b5a      	ldr	r3, [pc, #360]	; (80027f8 <HAL_RCC_OscConfig+0x4a8>)
 800268e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002690:	4a59      	ldr	r2, [pc, #356]	; (80027f8 <HAL_RCC_OscConfig+0x4a8>)
 8002692:	f023 0301 	bic.w	r3, r3, #1
 8002696:	6713      	str	r3, [r2, #112]	; 0x70
 8002698:	4b57      	ldr	r3, [pc, #348]	; (80027f8 <HAL_RCC_OscConfig+0x4a8>)
 800269a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269c:	4a56      	ldr	r2, [pc, #344]	; (80027f8 <HAL_RCC_OscConfig+0x4a8>)
 800269e:	f023 0304 	bic.w	r3, r3, #4
 80026a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d015      	beq.n	80026d8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ac:	f7fe fcd2 	bl	8001054 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b2:	e00a      	b.n	80026ca <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026b4:	f7fe fcce 	bl	8001054 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e092      	b.n	80027f0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ca:	4b4b      	ldr	r3, [pc, #300]	; (80027f8 <HAL_RCC_OscConfig+0x4a8>)
 80026cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0ee      	beq.n	80026b4 <HAL_RCC_OscConfig+0x364>
 80026d6:	e014      	b.n	8002702 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d8:	f7fe fcbc 	bl	8001054 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026de:	e00a      	b.n	80026f6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026e0:	f7fe fcb8 	bl	8001054 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e07c      	b.n	80027f0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f6:	4b40      	ldr	r3, [pc, #256]	; (80027f8 <HAL_RCC_OscConfig+0x4a8>)
 80026f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1ee      	bne.n	80026e0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002702:	7dfb      	ldrb	r3, [r7, #23]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d105      	bne.n	8002714 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002708:	4b3b      	ldr	r3, [pc, #236]	; (80027f8 <HAL_RCC_OscConfig+0x4a8>)
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	4a3a      	ldr	r2, [pc, #232]	; (80027f8 <HAL_RCC_OscConfig+0x4a8>)
 800270e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002712:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d068      	beq.n	80027ee <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800271c:	4b36      	ldr	r3, [pc, #216]	; (80027f8 <HAL_RCC_OscConfig+0x4a8>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 030c 	and.w	r3, r3, #12
 8002724:	2b08      	cmp	r3, #8
 8002726:	d060      	beq.n	80027ea <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	2b02      	cmp	r3, #2
 800272e:	d145      	bne.n	80027bc <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002730:	4b33      	ldr	r3, [pc, #204]	; (8002800 <HAL_RCC_OscConfig+0x4b0>)
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002736:	f7fe fc8d 	bl	8001054 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800273e:	f7fe fc89 	bl	8001054 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e04f      	b.n	80027f0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002750:	4b29      	ldr	r3, [pc, #164]	; (80027f8 <HAL_RCC_OscConfig+0x4a8>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1f0      	bne.n	800273e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69da      	ldr	r2, [r3, #28]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	019b      	lsls	r3, r3, #6
 800276c:	431a      	orrs	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002772:	085b      	lsrs	r3, r3, #1
 8002774:	3b01      	subs	r3, #1
 8002776:	041b      	lsls	r3, r3, #16
 8002778:	431a      	orrs	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277e:	061b      	lsls	r3, r3, #24
 8002780:	431a      	orrs	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	071b      	lsls	r3, r3, #28
 8002788:	491b      	ldr	r1, [pc, #108]	; (80027f8 <HAL_RCC_OscConfig+0x4a8>)
 800278a:	4313      	orrs	r3, r2
 800278c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800278e:	4b1c      	ldr	r3, [pc, #112]	; (8002800 <HAL_RCC_OscConfig+0x4b0>)
 8002790:	2201      	movs	r2, #1
 8002792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7fe fc5e 	bl	8001054 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800279c:	f7fe fc5a 	bl	8001054 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e020      	b.n	80027f0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ae:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <HAL_RCC_OscConfig+0x4a8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0x44c>
 80027ba:	e018      	b.n	80027ee <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027bc:	4b10      	ldr	r3, [pc, #64]	; (8002800 <HAL_RCC_OscConfig+0x4b0>)
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c2:	f7fe fc47 	bl	8001054 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ca:	f7fe fc43 	bl	8001054 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e009      	b.n	80027f0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027dc:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_RCC_OscConfig+0x4a8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f0      	bne.n	80027ca <HAL_RCC_OscConfig+0x47a>
 80027e8:	e001      	b.n	80027ee <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40007000 	.word	0x40007000
 8002800:	42470060 	.word	0x42470060

08002804 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002812:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	431a      	orrs	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <LL_ADC_INJ_SetSequencerLength>:
  *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
  *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002838:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b01      	cmp	r3, #1
 8002862:	bf0c      	ite	eq
 8002864:	2301      	moveq	r3, #1
 8002866:	2300      	movne	r3, #0
 8002868:	b2db      	uxtb	r3, r3
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
	...

08002878 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8002878:	b590      	push	{r4, r7, lr}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002882:	2300      	movs	r3, #0
 8002884:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8002886:	481c      	ldr	r0, [pc, #112]	; (80028f8 <LL_ADC_CommonInit+0x80>)
 8002888:	f7ff ffe2 	bl	8002850 <LL_ADC_IsEnabled>
 800288c:	4604      	mov	r4, r0
 800288e:	481b      	ldr	r0, [pc, #108]	; (80028fc <LL_ADC_CommonInit+0x84>)
 8002890:	f7ff ffde 	bl	8002850 <LL_ADC_IsEnabled>
 8002894:	4603      	mov	r3, r0
 8002896:	431c      	orrs	r4, r3
 8002898:	4819      	ldr	r0, [pc, #100]	; (8002900 <LL_ADC_CommonInit+0x88>)
 800289a:	f7ff ffd9 	bl	8002850 <LL_ADC_IsEnabled>
 800289e:	4603      	mov	r3, r0
 80028a0:	4323      	orrs	r3, r4
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d120      	bne.n	80028e8 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d012      	beq.n	80028d4 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	4b14      	ldr	r3, [pc, #80]	; (8002904 <LL_ADC_CommonInit+0x8c>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	6811      	ldr	r1, [r2, #0]
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	6852      	ldr	r2, [r2, #4]
 80028be:	4311      	orrs	r1, r2
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	6892      	ldr	r2, [r2, #8]
 80028c4:	4311      	orrs	r1, r2
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	68d2      	ldr	r2, [r2, #12]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	431a      	orrs	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	e00b      	b.n	80028ec <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <LL_ADC_CommonInit+0x8c>)
 80028da:	4013      	ands	r3, r2
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	e001      	b.n	80028ec <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd90      	pop	{r4, r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40012000 	.word	0x40012000
 80028fc:	40012100 	.word	0x40012100
 8002900:	40012200 	.word	0x40012200
 8002904:	fffc10e0 	.word	0xfffc10e0

08002908 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002912:	2300      	movs	r3, #0
 8002914:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff ff9a 	bl	8002850 <LL_ADC_IsEnabled>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d117      	bne.n	8002952 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800292a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	6811      	ldr	r1, [r2, #0]
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	6892      	ldr	r2, [r2, #8]
 8002936:	430a      	orrs	r2, r1
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	e001      	b.n	8002956 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002956:	7bfb      	ldrb	r3, [r7, #15]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800296a:	2300      	movs	r3, #0
 800296c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7ff ff6e 	bl	8002850 <LL_ADC_IsEnabled>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d131      	bne.n	80029de <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00c      	beq.n	800299c <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	6859      	ldr	r1, [r3, #4]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	430b      	orrs	r3, r1
 8002994:	431a      	orrs	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	e008      	b.n	80029ae <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	431a      	orrs	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <LL_ADC_REG_Init+0x8c>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	6812      	ldr	r2, [r2, #0]
 80029ba:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	68d2      	ldr	r2, [r2, #12]
 80029c2:	4311      	orrs	r1, r2
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	6912      	ldr	r2, [r2, #16]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	4619      	mov	r1, r3
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7ff ff14 	bl	8002804 <LL_ADC_REG_SetSequencerLength>
 80029dc:	e001      	b.n	80029e2 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	c0fffcfd 	.word	0xc0fffcfd

080029f0 <LL_ADC_INJ_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_INJ_Init(ADC_TypeDef *ADCx, LL_ADC_INJ_InitTypeDef *ADC_INJ_InitStruct)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80029fa:	2300      	movs	r3, #0
 80029fc:	73fb      	strb	r3, [r7, #15]
  }
  assert_param(IS_LL_ADC_INJ_TRIG_AUTO(ADC_INJ_InitStruct->TrigAuto));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7ff ff26 	bl	8002850 <LL_ADC_IsEnabled>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d12b      	bne.n	8002a62 <LL_ADC_INJ_Init+0x72>
    /*    - Set ADC group injected conversion trigger: independent or         */
    /*      from ADC group regular                                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_INJ_StartConversionExtTrig().      */
    if(ADC_INJ_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00c      	beq.n	8002a2c <LL_ADC_INJ_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f423 52a0 	bic.w	r2, r3, #5120	; 0x1400
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6899      	ldr	r1, [r3, #8]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	430b      	orrs	r3, r1
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	e008      	b.n	8002a3e <LL_ADC_INJ_Init+0x4e>
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f423 52a0 	bic.w	r2, r3, #5120	; 0x1400
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	605a      	str	r2, [r3, #4]
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_INJ_SetSequencerLength(ADCx, ADC_INJ_InitStruct->SequencerLength);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff fee5 	bl	800282a <LL_ADC_INJ_SetSequencerLength>
 8002a60:	e001      	b.n	8002a66 <LL_ADC_INJ_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002a78:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <LL_EXTI_EnableIT_0_31+0x20>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	4904      	ldr	r1, [pc, #16]	; (8002a90 <LL_EXTI_EnableIT_0_31+0x20>)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	600b      	str	r3, [r1, #0]
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	40013c00 	.word	0x40013c00

08002a94 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002a9c:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <LL_EXTI_DisableIT_0_31+0x24>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	4904      	ldr	r1, [pc, #16]	; (8002ab8 <LL_EXTI_DisableIT_0_31+0x24>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	600b      	str	r3, [r1, #0]
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40013c00 	.word	0x40013c00

08002abc <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <LL_EXTI_EnableEvent_0_31+0x20>)
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	4904      	ldr	r1, [pc, #16]	; (8002adc <LL_EXTI_EnableEvent_0_31+0x20>)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]

}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	40013c00 	.word	0x40013c00

08002ae0 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	43db      	mvns	r3, r3
 8002af0:	4904      	ldr	r1, [pc, #16]	; (8002b04 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002af2:	4013      	ands	r3, r2
 8002af4:	604b      	str	r3, [r1, #4]
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40013c00 	.word	0x40013c00

08002b08 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002b10:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	4904      	ldr	r1, [pc, #16]	; (8002b28 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	608b      	str	r3, [r1, #8]

}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	40013c00 	.word	0x40013c00

08002b2c <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002b34:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	4904      	ldr	r1, [pc, #16]	; (8002b50 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	608b      	str	r3, [r1, #8]

}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40013c00 	.word	0x40013c00

08002b54 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002b5c:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	4904      	ldr	r1, [pc, #16]	; (8002b74 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	60cb      	str	r3, [r1, #12]
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	40013c00 	.word	0x40013c00

08002b78 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	43db      	mvns	r3, r3
 8002b88:	4904      	ldr	r1, [pc, #16]	; (8002b9c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	60cb      	str	r3, [r1, #12]
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40013c00 	.word	0x40013c00

08002ba0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	791b      	ldrb	r3, [r3, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d060      	beq.n	8002c76 <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d067      	beq.n	8002c8c <LL_EXTI_Init+0xec>
    {
      switch (EXTI_InitStruct->Mode)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	795b      	ldrb	r3, [r3, #5]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d00e      	beq.n	8002be2 <LL_EXTI_Init+0x42>
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d017      	beq.n	8002bf8 <LL_EXTI_Init+0x58>
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d120      	bne.n	8002c0e <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff ff85 	bl	8002ae0 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff ff48 	bl	8002a70 <LL_EXTI_EnableIT_0_31>
          break;
 8002be0:	e018      	b.n	8002c14 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff ff54 	bl	8002a94 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff ff63 	bl	8002abc <LL_EXTI_EnableEvent_0_31>
          break;
 8002bf6:	e00d      	b.n	8002c14 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff ff37 	bl	8002a70 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff ff58 	bl	8002abc <LL_EXTI_EnableEvent_0_31>
          break;
 8002c0c:	e002      	b.n	8002c14 <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	73fb      	strb	r3, [r7, #15]
          break;
 8002c12:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	799b      	ldrb	r3, [r3, #6]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d037      	beq.n	8002c8c <LL_EXTI_Init+0xec>
      {
        switch (EXTI_InitStruct->Trigger)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	799b      	ldrb	r3, [r3, #6]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d00e      	beq.n	8002c42 <LL_EXTI_Init+0xa2>
 8002c24:	2b03      	cmp	r3, #3
 8002c26:	d017      	beq.n	8002c58 <LL_EXTI_Init+0xb8>
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d120      	bne.n	8002c6e <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff ffa1 	bl	8002b78 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff ff64 	bl	8002b08 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002c40:	e025      	b.n	8002c8e <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff ff70 	bl	8002b2c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff ff7f 	bl	8002b54 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002c56:	e01a      	b.n	8002c8e <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff ff53 	bl	8002b08 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff ff74 	bl	8002b54 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002c6c:	e00f      	b.n	8002c8e <LL_EXTI_Init+0xee>
          default:
            status = ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	73fb      	strb	r3, [r7, #15]
            break;
 8002c72:	bf00      	nop
 8002c74:	e00b      	b.n	8002c8e <LL_EXTI_Init+0xee>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff ff0a 	bl	8002a94 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff ff2b 	bl	8002ae0 <LL_EXTI_DisableEvent_0_31>
 8002c8a:	e000      	b.n	8002c8e <LL_EXTI_Init+0xee>
      }
 8002c8c:	bf00      	nop
  }
  return status;
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b089      	sub	sp, #36	; 0x24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	fa93 f3a3 	rbit	r3, r3
 8002cb2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	fab3 f383 	clz	r3, r3
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	2103      	movs	r1, #3
 8002cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	fa93 f3a3 	rbit	r3, r3
 8002cd2:	61bb      	str	r3, [r7, #24]
  return result;
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	601a      	str	r2, [r3, #0]
}
 8002cea:	bf00      	nop
 8002cec:	3724      	adds	r7, #36	; 0x24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b085      	sub	sp, #20
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	431a      	orrs	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	605a      	str	r2, [r3, #4]
}
 8002d1a:	bf00      	nop
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b089      	sub	sp, #36	; 0x24
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	60f8      	str	r0, [r7, #12]
 8002d2e:	60b9      	str	r1, [r7, #8]
 8002d30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	fa93 f3a3 	rbit	r3, r3
 8002d40:	613b      	str	r3, [r7, #16]
  return result;
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	fab3 f383 	clz	r3, r3
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	2103      	movs	r1, #3
 8002d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d52:	43db      	mvns	r3, r3
 8002d54:	401a      	ands	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	fa93 f3a3 	rbit	r3, r3
 8002d60:	61bb      	str	r3, [r7, #24]
  return result;
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	fab3 f383 	clz	r3, r3
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d72:	431a      	orrs	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002d78:	bf00      	nop
 8002d7a:	3724      	adds	r7, #36	; 0x24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b089      	sub	sp, #36	; 0x24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	fa93 f3a3 	rbit	r3, r3
 8002d9e:	613b      	str	r3, [r7, #16]
  return result;
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	2103      	movs	r1, #3
 8002dac:	fa01 f303 	lsl.w	r3, r1, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	401a      	ands	r2, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	fa93 f3a3 	rbit	r3, r3
 8002dbe:	61bb      	str	r3, [r7, #24]
  return result;
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	fab3 f383 	clz	r3, r3
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	60da      	str	r2, [r3, #12]
}
 8002dd6:	bf00      	nop
 8002dd8:	3724      	adds	r7, #36	; 0x24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b089      	sub	sp, #36	; 0x24
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6a1a      	ldr	r2, [r3, #32]
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	fa93 f3a3 	rbit	r3, r3
 8002dfc:	613b      	str	r3, [r7, #16]
  return result;
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	fab3 f383 	clz	r3, r3
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	210f      	movs	r1, #15
 8002e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	401a      	ands	r2, r3
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	fa93 f3a3 	rbit	r3, r3
 8002e1c:	61bb      	str	r3, [r7, #24]
  return result;
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	fab3 f383 	clz	r3, r3
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002e34:	bf00      	nop
 8002e36:	3724      	adds	r7, #36	; 0x24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b089      	sub	sp, #36	; 0x24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	0a1b      	lsrs	r3, r3, #8
 8002e54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	fa93 f3a3 	rbit	r3, r3
 8002e5c:	613b      	str	r3, [r7, #16]
  return result;
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	fab3 f383 	clz	r3, r3
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	210f      	movs	r1, #15
 8002e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	401a      	ands	r2, r3
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	0a1b      	lsrs	r3, r3, #8
 8002e76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	fa93 f3a3 	rbit	r3, r3
 8002e7e:	61bb      	str	r3, [r7, #24]
  return result;
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	fab3 f383 	clz	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e90:	431a      	orrs	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002e96:	bf00      	nop
 8002e98:	3724      	adds	r7, #36	; 0x24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b088      	sub	sp, #32
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
 8002eaa:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	fa93 f3a3 	rbit	r3, r3
 8002ec0:	613b      	str	r3, [r7, #16]
  return result;
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	fab3 f383 	clz	r3, r3
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002ecc:	e049      	b.n	8002f62 <LL_GPIO_Init+0xc0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eda:	4013      	ands	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d03b      	beq.n	8002f5c <LL_GPIO_Init+0xba>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	69b9      	ldr	r1, [r7, #24]
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7ff fed3 	bl	8002c98 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d003      	beq.n	8002f02 <LL_GPIO_Init+0x60>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d106      	bne.n	8002f10 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	461a      	mov	r2, r3
 8002f08:	69b9      	ldr	r1, [r7, #24]
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff ff0b 	bl	8002d26 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	461a      	mov	r2, r3
 8002f16:	69b9      	ldr	r1, [r7, #24]
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7ff ff33 	bl	8002d84 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d11a      	bne.n	8002f5c <LL_GPIO_Init+0xba>
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	60bb      	str	r3, [r7, #8]
  return result;
 8002f32:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002f34:	fab3 f383 	clz	r3, r3
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b07      	cmp	r3, #7
 8002f3c:	d807      	bhi.n	8002f4e <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	461a      	mov	r2, r3
 8002f44:	69b9      	ldr	r1, [r7, #24]
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7ff ff4b 	bl	8002de2 <LL_GPIO_SetAFPin_0_7>
 8002f4c:	e006      	b.n	8002f5c <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	461a      	mov	r2, r3
 8002f54:	69b9      	ldr	r1, [r7, #24]
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff ff72 	bl	8002e40 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1ae      	bne.n	8002ece <LL_GPIO_Init+0x2c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d003      	beq.n	8002f80 <LL_GPIO_Init+0xde>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d107      	bne.n	8002f90 <LL_GPIO_Init+0xee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	6819      	ldr	r1, [r3, #0]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7ff feb3 	bl	8002cf6 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3720      	adds	r7, #32
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002fa0:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <LL_RCC_GetSysClkSource+0x18>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 030c 	and.w	r3, r3, #12
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40023800 	.word	0x40023800

08002fb8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002fbc:	4b04      	ldr	r3, [pc, #16]	; (8002fd0 <LL_RCC_GetAHBPrescaler+0x18>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	40023800 	.word	0x40023800

08002fd4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002fd8:	4b04      	ldr	r3, [pc, #16]	; (8002fec <LL_RCC_GetAPB1Prescaler+0x18>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40023800 	.word	0x40023800

08002ff0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002ff4:	4b04      	ldr	r3, [pc, #16]	; (8003008 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40023800 	.word	0x40023800

0800300c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003010:	4b04      	ldr	r3, [pc, #16]	; (8003024 <LL_RCC_PLL_GetMainSource+0x18>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003018:	4618      	mov	r0, r3
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	40023800 	.word	0x40023800

08003028 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800302c:	4b04      	ldr	r3, [pc, #16]	; (8003040 <LL_RCC_PLL_GetN+0x18>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	099b      	lsrs	r3, r3, #6
 8003032:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003036:	4618      	mov	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	40023800 	.word	0x40023800

08003044 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003048:	4b04      	ldr	r3, [pc, #16]	; (800305c <LL_RCC_PLL_GetP+0x18>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40023800 	.word	0x40023800

08003060 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003064:	4b04      	ldr	r3, [pc, #16]	; (8003078 <LL_RCC_PLL_GetR+0x18>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
}
 800306c:	4618      	mov	r0, r3
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40023800 	.word	0x40023800

0800307c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003080:	4b04      	ldr	r3, [pc, #16]	; (8003094 <LL_RCC_PLL_GetDivider+0x18>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003088:	4618      	mov	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800

08003098 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80030a0:	f000 f820 	bl	80030e4 <RCC_GetSystemClockFreq>
 80030a4:	4602      	mov	r2, r0
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 f85c 	bl	800316c <RCC_GetHCLKClockFreq>
 80030b4:	4602      	mov	r2, r0
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 f86a 	bl	8003198 <RCC_GetPCLK1ClockFreq>
 80030c4:	4602      	mov	r2, r0
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 f876 	bl	80031c0 <RCC_GetPCLK2ClockFreq>
 80030d4:	4602      	mov	r2, r0
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	60da      	str	r2, [r3, #12]
}
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80030ee:	f7ff ff55 	bl	8002f9c <LL_RCC_GetSysClkSource>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b0c      	cmp	r3, #12
 80030f6:	d82d      	bhi.n	8003154 <RCC_GetSystemClockFreq+0x70>
 80030f8:	a201      	add	r2, pc, #4	; (adr r2, 8003100 <RCC_GetSystemClockFreq+0x1c>)
 80030fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fe:	bf00      	nop
 8003100:	08003135 	.word	0x08003135
 8003104:	08003155 	.word	0x08003155
 8003108:	08003155 	.word	0x08003155
 800310c:	08003155 	.word	0x08003155
 8003110:	0800313b 	.word	0x0800313b
 8003114:	08003155 	.word	0x08003155
 8003118:	08003155 	.word	0x08003155
 800311c:	08003155 	.word	0x08003155
 8003120:	08003141 	.word	0x08003141
 8003124:	08003155 	.word	0x08003155
 8003128:	08003155 	.word	0x08003155
 800312c:	08003155 	.word	0x08003155
 8003130:	0800314b 	.word	0x0800314b
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003134:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <RCC_GetSystemClockFreq+0x80>)
 8003136:	607b      	str	r3, [r7, #4]
      break;
 8003138:	e00f      	b.n	800315a <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800313a:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <RCC_GetSystemClockFreq+0x84>)
 800313c:	607b      	str	r3, [r7, #4]
      break;
 800313e:	e00c      	b.n	800315a <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003140:	2008      	movs	r0, #8
 8003142:	f000 f851 	bl	80031e8 <RCC_PLL_GetFreqDomain_SYS>
 8003146:	6078      	str	r0, [r7, #4]
      break;
 8003148:	e007      	b.n	800315a <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 800314a:	200c      	movs	r0, #12
 800314c:	f000 f84c 	bl	80031e8 <RCC_PLL_GetFreqDomain_SYS>
 8003150:	6078      	str	r0, [r7, #4]
      break;
 8003152:	e002      	b.n	800315a <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003154:	4b03      	ldr	r3, [pc, #12]	; (8003164 <RCC_GetSystemClockFreq+0x80>)
 8003156:	607b      	str	r3, [r7, #4]
      break;
 8003158:	bf00      	nop
  }

  return frequency;
 800315a:	687b      	ldr	r3, [r7, #4]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	00f42400 	.word	0x00f42400
 8003168:	007a1200 	.word	0x007a1200

0800316c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003174:	f7ff ff20 	bl	8002fb8 <LL_RCC_GetAHBPrescaler>
 8003178:	4603      	mov	r3, r0
 800317a:	091b      	lsrs	r3, r3, #4
 800317c:	f003 030f 	and.w	r3, r3, #15
 8003180:	4a04      	ldr	r2, [pc, #16]	; (8003194 <RCC_GetHCLKClockFreq+0x28>)
 8003182:	5cd3      	ldrb	r3, [r2, r3]
 8003184:	461a      	mov	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	40d3      	lsrs	r3, r2
}
 800318a:	4618      	mov	r0, r3
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	0800e49c 	.word	0x0800e49c

08003198 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80031a0:	f7ff ff18 	bl	8002fd4 <LL_RCC_GetAPB1Prescaler>
 80031a4:	4603      	mov	r3, r0
 80031a6:	0a9b      	lsrs	r3, r3, #10
 80031a8:	4a04      	ldr	r2, [pc, #16]	; (80031bc <RCC_GetPCLK1ClockFreq+0x24>)
 80031aa:	5cd3      	ldrb	r3, [r2, r3]
 80031ac:	461a      	mov	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	40d3      	lsrs	r3, r2
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	0800e4ac 	.word	0x0800e4ac

080031c0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80031c8:	f7ff ff12 	bl	8002ff0 <LL_RCC_GetAPB2Prescaler>
 80031cc:	4603      	mov	r3, r0
 80031ce:	0b5b      	lsrs	r3, r3, #13
 80031d0:	4a04      	ldr	r2, [pc, #16]	; (80031e4 <RCC_GetPCLK2ClockFreq+0x24>)
 80031d2:	5cd3      	ldrb	r3, [r2, r3]
 80031d4:	461a      	mov	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	40d3      	lsrs	r3, r2
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	0800e4ac 	.word	0x0800e4ac

080031e8 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80031e8:	b590      	push	{r4, r7, lr}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	2300      	movs	r3, #0
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	2300      	movs	r3, #0
 80031fa:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80031fc:	f7ff ff06 	bl	800300c <LL_RCC_PLL_GetMainSource>
 8003200:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8003208:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800320c:	d003      	beq.n	8003216 <RCC_PLL_GetFreqDomain_SYS+0x2e>
 800320e:	e005      	b.n	800321c <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003210:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <RCC_PLL_GetFreqDomain_SYS+0x98>)
 8003212:	617b      	str	r3, [r7, #20]
      break;
 8003214:	e005      	b.n	8003222 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003216:	4b1b      	ldr	r3, [pc, #108]	; (8003284 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8003218:	617b      	str	r3, [r7, #20]
      break;
 800321a:	e002      	b.n	8003222 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 800321c:	4b18      	ldr	r3, [pc, #96]	; (8003280 <RCC_PLL_GetFreqDomain_SYS+0x98>)
 800321e:	617b      	str	r3, [r7, #20]
      break;
 8003220:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b08      	cmp	r3, #8
 8003226:	d114      	bne.n	8003252 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003228:	f7ff ff28 	bl	800307c <LL_RCC_PLL_GetDivider>
 800322c:	4602      	mov	r2, r0
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	fbb3 f4f2 	udiv	r4, r3, r2
 8003234:	f7ff fef8 	bl	8003028 <LL_RCC_PLL_GetN>
 8003238:	4603      	mov	r3, r0
 800323a:	fb03 f404 	mul.w	r4, r3, r4
 800323e:	f7ff ff01 	bl	8003044 <LL_RCC_PLL_GetP>
 8003242:	4603      	mov	r3, r0
 8003244:	0c1b      	lsrs	r3, r3, #16
 8003246:	3301      	adds	r3, #1
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	fbb4 f3f3 	udiv	r3, r4, r3
 800324e:	613b      	str	r3, [r7, #16]
 8003250:	e011      	b.n	8003276 <RCC_PLL_GetFreqDomain_SYS+0x8e>
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003252:	f7ff ff13 	bl	800307c <LL_RCC_PLL_GetDivider>
 8003256:	4602      	mov	r2, r0
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	fbb3 f4f2 	udiv	r4, r3, r2
 800325e:	f7ff fee3 	bl	8003028 <LL_RCC_PLL_GetN>
 8003262:	4603      	mov	r3, r0
 8003264:	fb03 f404 	mul.w	r4, r3, r4
 8003268:	f7ff fefa 	bl	8003060 <LL_RCC_PLL_GetR>
 800326c:	4603      	mov	r3, r0
 800326e:	0f1b      	lsrs	r3, r3, #28
 8003270:	fbb4 f3f3 	udiv	r3, r4, r3
 8003274:	613b      	str	r3, [r7, #16]
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003276:	693b      	ldr	r3, [r7, #16]
}
 8003278:	4618      	mov	r0, r3
 800327a:	371c      	adds	r7, #28
 800327c:	46bd      	mov	sp, r7
 800327e:	bd90      	pop	{r4, r7, pc}
 8003280:	00f42400 	.word	0x00f42400
 8003284:	007a1200 	.word	0x007a1200

08003288 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	631a      	str	r2, [r3, #48]	; 0x30
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	635a      	str	r2, [r3, #52]	; 0x34
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	f043 0201 	orr.w	r2, r3, #1
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	615a      	str	r2, [r3, #20]
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a3d      	ldr	r2, [pc, #244]	; (8003474 <LL_TIM_Init+0x108>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d013      	beq.n	80033ac <LL_TIM_Init+0x40>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800338a:	d00f      	beq.n	80033ac <LL_TIM_Init+0x40>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a3a      	ldr	r2, [pc, #232]	; (8003478 <LL_TIM_Init+0x10c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d00b      	beq.n	80033ac <LL_TIM_Init+0x40>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a39      	ldr	r2, [pc, #228]	; (800347c <LL_TIM_Init+0x110>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d007      	beq.n	80033ac <LL_TIM_Init+0x40>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a38      	ldr	r2, [pc, #224]	; (8003480 <LL_TIM_Init+0x114>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d003      	beq.n	80033ac <LL_TIM_Init+0x40>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a37      	ldr	r2, [pc, #220]	; (8003484 <LL_TIM_Init+0x118>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d106      	bne.n	80033ba <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a2d      	ldr	r2, [pc, #180]	; (8003474 <LL_TIM_Init+0x108>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d02b      	beq.n	800341a <LL_TIM_Init+0xae>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c8:	d027      	beq.n	800341a <LL_TIM_Init+0xae>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a2a      	ldr	r2, [pc, #168]	; (8003478 <LL_TIM_Init+0x10c>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d023      	beq.n	800341a <LL_TIM_Init+0xae>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a29      	ldr	r2, [pc, #164]	; (800347c <LL_TIM_Init+0x110>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d01f      	beq.n	800341a <LL_TIM_Init+0xae>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a28      	ldr	r2, [pc, #160]	; (8003480 <LL_TIM_Init+0x114>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d01b      	beq.n	800341a <LL_TIM_Init+0xae>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a27      	ldr	r2, [pc, #156]	; (8003484 <LL_TIM_Init+0x118>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d017      	beq.n	800341a <LL_TIM_Init+0xae>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a26      	ldr	r2, [pc, #152]	; (8003488 <LL_TIM_Init+0x11c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d013      	beq.n	800341a <LL_TIM_Init+0xae>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a25      	ldr	r2, [pc, #148]	; (800348c <LL_TIM_Init+0x120>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d00f      	beq.n	800341a <LL_TIM_Init+0xae>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a24      	ldr	r2, [pc, #144]	; (8003490 <LL_TIM_Init+0x124>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d00b      	beq.n	800341a <LL_TIM_Init+0xae>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a23      	ldr	r2, [pc, #140]	; (8003494 <LL_TIM_Init+0x128>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d007      	beq.n	800341a <LL_TIM_Init+0xae>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a22      	ldr	r2, [pc, #136]	; (8003498 <LL_TIM_Init+0x12c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d003      	beq.n	800341a <LL_TIM_Init+0xae>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a21      	ldr	r2, [pc, #132]	; (800349c <LL_TIM_Init+0x130>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d106      	bne.n	8003428 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	4313      	orrs	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	4619      	mov	r1, r3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7ff ff35 	bl	80032a4 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	4619      	mov	r1, r3
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7ff ff21 	bl	8003288 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a0a      	ldr	r2, [pc, #40]	; (8003474 <LL_TIM_Init+0x108>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d003      	beq.n	8003456 <LL_TIM_Init+0xea>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a0c      	ldr	r2, [pc, #48]	; (8003484 <LL_TIM_Init+0x118>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d105      	bne.n	8003462 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	7c1b      	ldrb	r3, [r3, #16]
 800345a:	4619      	mov	r1, r3
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7ff ff2f 	bl	80032c0 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7ff ff72 	bl	800334c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40010000 	.word	0x40010000
 8003478:	40000400 	.word	0x40000400
 800347c:	40000800 	.word	0x40000800
 8003480:	40000c00 	.word	0x40000c00
 8003484:	40010400 	.word	0x40010400
 8003488:	40014000 	.word	0x40014000
 800348c:	40014400 	.word	0x40014400
 8003490:	40014800 	.word	0x40014800
 8003494:	40001800 	.word	0x40001800
 8003498:	40001c00 	.word	0x40001c00
 800349c:	40002000 	.word	0x40002000

080034a0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2b10      	cmp	r3, #16
 80034b4:	d012      	beq.n	80034dc <LL_TIM_OC_Init+0x3c>
 80034b6:	2b10      	cmp	r3, #16
 80034b8:	d802      	bhi.n	80034c0 <LL_TIM_OC_Init+0x20>
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d007      	beq.n	80034ce <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80034be:	e022      	b.n	8003506 <LL_TIM_OC_Init+0x66>
  switch (Channel)
 80034c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034c4:	d011      	beq.n	80034ea <LL_TIM_OC_Init+0x4a>
 80034c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ca:	d015      	beq.n	80034f8 <LL_TIM_OC_Init+0x58>
      break;
 80034cc:	e01b      	b.n	8003506 <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f867 	bl	80035a4 <OC1Config>
 80034d6:	4603      	mov	r3, r0
 80034d8:	75fb      	strb	r3, [r7, #23]
      break;
 80034da:	e014      	b.n	8003506 <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 f8cc 	bl	800367c <OC2Config>
 80034e4:	4603      	mov	r3, r0
 80034e6:	75fb      	strb	r3, [r7, #23]
      break;
 80034e8:	e00d      	b.n	8003506 <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 f935 	bl	800375c <OC3Config>
 80034f2:	4603      	mov	r3, r0
 80034f4:	75fb      	strb	r3, [r7, #23]
      break;
 80034f6:	e006      	b.n	8003506 <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 f99e 	bl	800383c <OC4Config>
 8003500:	4603      	mov	r3, r0
 8003502:	75fb      	strb	r3, [r7, #23]
      break;
 8003504:	bf00      	nop
  }

  return result;
 8003506:	7dfb      	ldrb	r3, [r7, #23]
}
 8003508:	4618      	mov	r0, r3
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 800351a:	2300      	movs	r3, #0
 800351c:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	7b12      	ldrb	r2, [r2, #12]
 8003528:	4313      	orrs	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	4313      	orrs	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	4313      	orrs	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4313      	orrs	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	89d2      	ldrh	r2, [r2, #14]
 8003560:	4313      	orrs	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	4313      	orrs	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	4313      	orrs	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
	...

080035a4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	f023 0201 	bic.w	r2, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 0303 	bic.w	r3, r3, #3
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f023 0202 	bic.w	r2, r3, #2
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f023 0201 	bic.w	r2, r3, #1
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a1c      	ldr	r2, [pc, #112]	; (8003674 <OC1Config+0xd0>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d003      	beq.n	800360e <OC1Config+0x6a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a1b      	ldr	r2, [pc, #108]	; (8003678 <OC1Config+0xd4>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d11e      	bne.n	800364c <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f023 0208 	bic.w	r2, r3, #8
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4313      	orrs	r3, r2
 800361c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f023 0204 	bic.w	r2, r3, #4
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4313      	orrs	r3, r2
 800362c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4619      	mov	r1, r3
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7ff fe3c 	bl	80032dc <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40010000 	.word	0x40010000
 8003678:	40010400 	.word	0x40010400

0800367c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	f023 0210 	bic.w	r2, r3, #16
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	021b      	lsls	r3, r3, #8
 80036b8:	4313      	orrs	r3, r2
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f023 0220 	bic.w	r2, r3, #32
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	4313      	orrs	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f023 0210 	bic.w	r2, r3, #16
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	4313      	orrs	r3, r2
 80036da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a1d      	ldr	r2, [pc, #116]	; (8003754 <OC2Config+0xd8>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d003      	beq.n	80036ec <OC2Config+0x70>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a1c      	ldr	r2, [pc, #112]	; (8003758 <OC2Config+0xdc>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d11f      	bne.n	800372c <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	019b      	lsls	r3, r3, #6
 80036f8:	4313      	orrs	r3, r2
 80036fa:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	019b      	lsls	r3, r3, #6
 8003708:	4313      	orrs	r3, r2
 800370a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4313      	orrs	r3, r2
 800371a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4313      	orrs	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	4619      	mov	r1, r3
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff fdda 	bl	80032f8 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40010000 	.word	0x40010000
 8003758:	40010400 	.word	0x40010400

0800375c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 0303 	bic.w	r3, r3, #3
 800378a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	021b      	lsls	r3, r3, #8
 80037a6:	4313      	orrs	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	021b      	lsls	r3, r3, #8
 80037b6:	4313      	orrs	r3, r2
 80037b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a1d      	ldr	r2, [pc, #116]	; (8003834 <OC3Config+0xd8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d003      	beq.n	80037ca <OC3Config+0x6e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a1c      	ldr	r2, [pc, #112]	; (8003838 <OC3Config+0xdc>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d11f      	bne.n	800380a <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	029b      	lsls	r3, r3, #10
 80037d6:	4313      	orrs	r3, r2
 80037d8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	029b      	lsls	r3, r3, #10
 80037e6:	4313      	orrs	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	4313      	orrs	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	015b      	lsls	r3, r3, #5
 8003806:	4313      	orrs	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	4619      	mov	r1, r3
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff fd79 	bl	8003314 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40010000 	.word	0x40010000
 8003838:	40010400 	.word	0x40010400

0800383c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800386a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	021b      	lsls	r3, r3, #8
 8003878:	4313      	orrs	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	031b      	lsls	r3, r3, #12
 8003888:	4313      	orrs	r3, r2
 800388a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	031b      	lsls	r3, r3, #12
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a11      	ldr	r2, [pc, #68]	; (80038e4 <OC4Config+0xa8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d003      	beq.n	80038ac <OC4Config+0x70>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a10      	ldr	r2, [pc, #64]	; (80038e8 <OC4Config+0xac>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d107      	bne.n	80038bc <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	019b      	lsls	r3, r3, #6
 80038b8:	4313      	orrs	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	4619      	mov	r1, r3
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7ff fd2e 	bl	8003330 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3718      	adds	r7, #24
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40010000 	.word	0x40010000
 80038e8:	40010400 	.word	0x40010400

080038ec <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003900:	bf0c      	ite	eq
 8003902:	2301      	moveq	r3, #1
 8003904:	2300      	movne	r3, #0
 8003906:	b2db      	uxtb	r3, r3
}
 8003908:	4618      	mov	r0, r3
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	431a      	orrs	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	611a      	str	r2, [r3, #16]
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
 8003942:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	615a      	str	r2, [r3, #20]
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
 800396c:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003974:	d152      	bne.n	8003a1c <LL_USART_SetBaudRate+0xbc>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	4613      	mov	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	009a      	lsls	r2, r3, #2
 8003980:	441a      	add	r2, r3
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	fbb2 f3f3 	udiv	r3, r2, r3
 800398a:	4a4f      	ldr	r2, [pc, #316]	; (8003ac8 <LL_USART_SetBaudRate+0x168>)
 800398c:	fba2 2303 	umull	r2, r3, r2, r3
 8003990:	095b      	lsrs	r3, r3, #5
 8003992:	b29b      	uxth	r3, r3
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	b299      	uxth	r1, r3
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	4613      	mov	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	009a      	lsls	r2, r3, #2
 80039a2:	441a      	add	r2, r3
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039ac:	4b46      	ldr	r3, [pc, #280]	; (8003ac8 <LL_USART_SetBaudRate+0x168>)
 80039ae:	fba3 0302 	umull	r0, r3, r3, r2
 80039b2:	095b      	lsrs	r3, r3, #5
 80039b4:	2064      	movs	r0, #100	; 0x64
 80039b6:	fb00 f303 	mul.w	r3, r0, r3
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	3332      	adds	r3, #50	; 0x32
 80039c0:	4a41      	ldr	r2, [pc, #260]	; (8003ac8 <LL_USART_SetBaudRate+0x168>)
 80039c2:	fba2 2303 	umull	r2, r3, r2, r3
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	440b      	add	r3, r1
 80039d6:	b299      	uxth	r1, r3
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	4613      	mov	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4413      	add	r3, r2
 80039e0:	009a      	lsls	r2, r3, #2
 80039e2:	441a      	add	r2, r3
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039ec:	4b36      	ldr	r3, [pc, #216]	; (8003ac8 <LL_USART_SetBaudRate+0x168>)
 80039ee:	fba3 0302 	umull	r0, r3, r3, r2
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	2064      	movs	r0, #100	; 0x64
 80039f6:	fb00 f303 	mul.w	r3, r0, r3
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	3332      	adds	r3, #50	; 0x32
 8003a00:	4a31      	ldr	r2, [pc, #196]	; (8003ac8 <LL_USART_SetBaudRate+0x168>)
 8003a02:	fba2 2303 	umull	r2, r3, r2, r3
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	440b      	add	r3, r1
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	461a      	mov	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8003a1a:	e04f      	b.n	8003abc <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	009a      	lsls	r2, r3, #2
 8003a26:	441a      	add	r2, r3
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a30:	4a25      	ldr	r2, [pc, #148]	; (8003ac8 <LL_USART_SetBaudRate+0x168>)
 8003a32:	fba2 2303 	umull	r2, r3, r2, r3
 8003a36:	095b      	lsrs	r3, r3, #5
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	b299      	uxth	r1, r3
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	009a      	lsls	r2, r3, #2
 8003a48:	441a      	add	r2, r3
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a52:	4b1d      	ldr	r3, [pc, #116]	; (8003ac8 <LL_USART_SetBaudRate+0x168>)
 8003a54:	fba3 0302 	umull	r0, r3, r3, r2
 8003a58:	095b      	lsrs	r3, r3, #5
 8003a5a:	2064      	movs	r0, #100	; 0x64
 8003a5c:	fb00 f303 	mul.w	r3, r0, r3
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	3332      	adds	r3, #50	; 0x32
 8003a66:	4a18      	ldr	r2, [pc, #96]	; (8003ac8 <LL_USART_SetBaudRate+0x168>)
 8003a68:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6c:	095b      	lsrs	r3, r3, #5
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	440b      	add	r3, r1
 8003a78:	b299      	uxth	r1, r3
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	009a      	lsls	r2, r3, #2
 8003a84:	441a      	add	r2, r3
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a8e:	4b0e      	ldr	r3, [pc, #56]	; (8003ac8 <LL_USART_SetBaudRate+0x168>)
 8003a90:	fba3 0302 	umull	r0, r3, r3, r2
 8003a94:	095b      	lsrs	r3, r3, #5
 8003a96:	2064      	movs	r0, #100	; 0x64
 8003a98:	fb00 f303 	mul.w	r3, r0, r3
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	3332      	adds	r3, #50	; 0x32
 8003aa2:	4a09      	ldr	r2, [pc, #36]	; (8003ac8 <LL_USART_SetBaudRate+0x168>)
 8003aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa8:	095b      	lsrs	r3, r3, #5
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	f003 030f 	and.w	r3, r3, #15
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	440b      	add	r3, r1
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	609a      	str	r2, [r3, #8]
}
 8003abc:	bf00      	nop
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	51eb851f 	.word	0x51eb851f

08003acc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003ada:	2300      	movs	r3, #0
 8003adc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7ff ff04 	bl	80038ec <LL_USART_IsEnabled>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d15e      	bne.n	8003ba8 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003af2:	f023 030c 	bic.w	r3, r3, #12
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	6851      	ldr	r1, [r2, #4]
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	68d2      	ldr	r2, [r2, #12]
 8003afe:	4311      	orrs	r1, r2
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	6912      	ldr	r2, [r2, #16]
 8003b04:	4311      	orrs	r1, r2
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	6992      	ldr	r2, [r2, #24]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	4619      	mov	r1, r3
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff fefb 	bl	8003914 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	4619      	mov	r1, r3
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f7ff ff08 	bl	800393a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003b2a:	f107 0308 	add.w	r3, r7, #8
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff fab2 	bl	8003098 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a1f      	ldr	r2, [pc, #124]	; (8003bb4 <LL_USART_Init+0xe8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d102      	bne.n	8003b42 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	61bb      	str	r3, [r7, #24]
 8003b40:	e021      	b.n	8003b86 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a1c      	ldr	r2, [pc, #112]	; (8003bb8 <LL_USART_Init+0xec>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d102      	bne.n	8003b50 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	e01a      	b.n	8003b86 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a1a      	ldr	r2, [pc, #104]	; (8003bbc <LL_USART_Init+0xf0>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d102      	bne.n	8003b5e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	61bb      	str	r3, [r7, #24]
 8003b5c:	e013      	b.n	8003b86 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a17      	ldr	r2, [pc, #92]	; (8003bc0 <LL_USART_Init+0xf4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d102      	bne.n	8003b6c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	61bb      	str	r3, [r7, #24]
 8003b6a:	e00c      	b.n	8003b86 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a15      	ldr	r2, [pc, #84]	; (8003bc4 <LL_USART_Init+0xf8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d102      	bne.n	8003b7a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	61bb      	str	r3, [r7, #24]
 8003b78:	e005      	b.n	8003b86 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a12      	ldr	r2, [pc, #72]	; (8003bc8 <LL_USART_Init+0xfc>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d101      	bne.n	8003b86 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00d      	beq.n	8003ba8 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d009      	beq.n	8003ba8 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8003b94:	2300      	movs	r3, #0
 8003b96:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	699a      	ldr	r2, [r3, #24]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	69b9      	ldr	r1, [r7, #24]
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7ff fedc 	bl	8003960 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003ba8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3720      	adds	r7, #32
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40011000 	.word	0x40011000
 8003bb8:	40004400 	.word	0x40004400
 8003bbc:	40004800 	.word	0x40004800
 8003bc0:	40011400 	.word	0x40011400
 8003bc4:	40004c00 	.word	0x40004c00
 8003bc8:	40005000 	.word	0x40005000

08003bcc <_ZN9ArgSensorC1Ev>:
 * ABZエンコーダ等の物理エンコーダもここに実装する。
 */

#include "ArgSensor.hpp"

ArgSensor::ArgSensor() {
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	4a0d      	ldr	r2, [pc, #52]	; (8003c0c <_ZN9ArgSensorC1Ev+0x40>)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	mArg = 0;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	605a      	str	r2, [r3, #4]
	mImArgcount = 0;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	615a      	str	r2, [r3, #20]
	mArg_delta = 0;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	60da      	str	r2, [r3, #12]
	mFCisON = 0;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	741a      	strb	r2, [r3, #16]
	mIsAccelerating = false;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	745a      	strb	r2, [r3, #17]
}
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	0800e414 	.word	0x0800e414

08003c10 <_ZN9ArgSensorD1Ev>:

ArgSensor::~ArgSensor() {
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	4a04      	ldr	r2, [pc, #16]	; (8003c2c <_ZN9ArgSensorD1Ev+0x1c>)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4618      	mov	r0, r3
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	0800e414 	.word	0x0800e414

08003c30 <_ZN9ArgSensorD0Ev>:
ArgSensor::~ArgSensor() {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
}
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7ff ffe9 	bl	8003c10 <_ZN9ArgSensorD1Ev>
 8003c3e:	2118      	movs	r1, #24
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f006 fee9 	bl	800aa18 <_ZdlPvj>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <_ZN9ArgSensor4InitEv>:

void ArgSensor::Init(void) {
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
	mArgOld = 0;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	609a      	str	r2, [r3, #8]
	mArg = 0;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f04f 0200 	mov.w	r2, #0
 8003c66:	605a      	str	r2, [r3, #4]
	mArg_delta = 0;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	60da      	str	r2, [r3, #12]
	mFCisON = 0;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	741a      	strb	r2, [r3, #16]
	mIsAccelerating = false;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	745a      	strb	r2, [r3, #17]
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <_ZN9ArgSensor6getArgEv>:
	mArgOld = mArg;
	mArg = mArg - pArg + (2*M_PI);
	mArg = fmodl(mArg, (2*M_PI));
}

float ArgSensor::getArg(void){
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
	return mArg;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	ee07 3a90 	vmov	s15, r3
}
 8003c98:	eeb0 0a67 	vmov.f32	s0, s15
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <_ZN9ArgSensor9getArgOldEv>:

float ArgSensor::getArgOld(void){
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
	return mArgOld;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	ee07 3a90 	vmov	s15, r3
}
 8003cb6:	eeb0 0a67 	vmov.f32	s0, s15
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <_ZN9ArgSensor12getArg_deltaEv>:

float ArgSensor::getArg_delta(void){
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
	return mArg_delta;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	ee07 3a90 	vmov	s15, r3
}
 8003cd4:	eeb0 0a67 	vmov.f32	s0, s15
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <_ZN9ArgSensor13FC_Start_StopEb>:

void ArgSensor::FC_Start_Stop(bool pIsON){
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	460b      	mov	r3, r1
 8003cec:	70fb      	strb	r3, [r7, #3]
		mFCisON = pIsON;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	78fa      	ldrb	r2, [r7, #3]
 8003cf2:	741a      	strb	r2, [r3, #16]
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <_ZN9ArgSensor11GetArgCountEv>:

bool ArgSensor::GetFCisON(void) {//意味なかった。閾値用
	return mFCisON;
}

int ArgSensor::GetArgCount(void) {
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
	return mImArgcount;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	695b      	ldr	r3, [r3, #20]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <_ZN9ArgSensor11ForceComArgEv>:

void ArgSensor::ForceComArg(void){
 8003d18:	b590      	push	{r4, r7, lr}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
	if(mFCisON){
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	7c1b      	ldrb	r3, [r3, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d060      	beq.n	8003dea <_ZN9ArgSensor11ForceComArgEv+0xd2>
		if(mImArgcount < 25000){
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8003d30:	4293      	cmp	r3, r2
 8003d32:	dc08      	bgt.n	8003d46 <_ZN9ArgSensor11ForceComArgEv+0x2e>
			mImArgcount = mImArgcount + 4;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	1d1a      	adds	r2, r3, #4
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	615a      	str	r2, [r3, #20]
			mIsAccelerating = true;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	745a      	strb	r2, [r3, #17]
 8003d44:	e002      	b.n	8003d4c <_ZN9ArgSensor11ForceComArgEv+0x34>
		} else {
			mIsAccelerating = false;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	745a      	strb	r2, [r3, #17]
		}
		float arg_add;
		arg_add = mImArgcount*0.0000125f*M_PI;//進む差分角
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	ee07 3a90 	vmov	s15, r3
 8003d54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d58:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8003ec0 <_ZN9ArgSensor11ForceComArgEv+0x1a8>
 8003d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d60:	ee17 0a90 	vmov	r0, s15
 8003d64:	f7fc fc10 	bl	8000588 <__aeabi_f2d>
 8003d68:	a351      	add	r3, pc, #324	; (adr r3, 8003eb0 <_ZN9ArgSensor11ForceComArgEv+0x198>)
 8003d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6e:	f7fc fc63 	bl	8000638 <__aeabi_dmul>
 8003d72:	4603      	mov	r3, r0
 8003d74:	460c      	mov	r4, r1
 8003d76:	4618      	mov	r0, r3
 8003d78:	4621      	mov	r1, r4
 8003d7a:	f7fc ff35 	bl	8000be8 <__aeabi_d2f>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	60bb      	str	r3, [r7, #8]
		mArgOld = mArg;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	609a      	str	r2, [r3, #8]
		mArg = mArg + arg_add + (2*M_PI);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003d90:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d98:	ee17 0a90 	vmov	r0, s15
 8003d9c:	f7fc fbf4 	bl	8000588 <__aeabi_f2d>
 8003da0:	a345      	add	r3, pc, #276	; (adr r3, 8003eb8 <_ZN9ArgSensor11ForceComArgEv+0x1a0>)
 8003da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da6:	f7fc fa91 	bl	80002cc <__adddf3>
 8003daa:	4603      	mov	r3, r0
 8003dac:	460c      	mov	r4, r1
 8003dae:	4618      	mov	r0, r3
 8003db0:	4621      	mov	r1, r4
 8003db2:	f7fc ff19 	bl	8000be8 <__aeabi_d2f>
 8003db6:	4602      	mov	r2, r0
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	605a      	str	r2, [r3, #4]
		mArg = fmodl(mArg, (2*M_PI));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fc fbe1 	bl	8000588 <__aeabi_f2d>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	460c      	mov	r4, r1
 8003dca:	ed9f 1b3b 	vldr	d1, [pc, #236]	; 8003eb8 <_ZN9ArgSensor11ForceComArgEv+0x1a0>
 8003dce:	ec44 3b10 	vmov	d0, r3, r4
 8003dd2:	f006 fe36 	bl	800aa42 <fmodl>
 8003dd6:	ec54 3b10 	vmov	r3, r4, d0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	4621      	mov	r1, r4
 8003dde:	f7fc ff03 	bl	8000be8 <__aeabi_d2f>
 8003de2:	4602      	mov	r2, r0
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	605a      	str	r2, [r3, #4]
		arg_add = mImArgcount*0.0000125f*M_PI;
		mArgOld = mArg;
		mArg = mArg + arg_add + (2*M_PI);
		mArg = fmodl(mArg, (2*M_PI));
	}
}
 8003de8:	e05d      	b.n	8003ea6 <_ZN9ArgSensor11ForceComArgEv+0x18e>
		if(mImArgcount > 0){
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	dd08      	ble.n	8003e04 <_ZN9ArgSensor11ForceComArgEv+0xec>
			mImArgcount = mImArgcount - 4;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	1f1a      	subs	r2, r3, #4
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	615a      	str	r2, [r3, #20]
			mIsAccelerating = true;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	745a      	strb	r2, [r3, #17]
 8003e02:	e002      	b.n	8003e0a <_ZN9ArgSensor11ForceComArgEv+0xf2>
			mIsAccelerating = false;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	745a      	strb	r2, [r3, #17]
		arg_add = mImArgcount*0.0000125f*M_PI;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	ee07 3a90 	vmov	s15, r3
 8003e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e16:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003ec0 <_ZN9ArgSensor11ForceComArgEv+0x1a8>
 8003e1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e1e:	ee17 0a90 	vmov	r0, s15
 8003e22:	f7fc fbb1 	bl	8000588 <__aeabi_f2d>
 8003e26:	a322      	add	r3, pc, #136	; (adr r3, 8003eb0 <_ZN9ArgSensor11ForceComArgEv+0x198>)
 8003e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2c:	f7fc fc04 	bl	8000638 <__aeabi_dmul>
 8003e30:	4603      	mov	r3, r0
 8003e32:	460c      	mov	r4, r1
 8003e34:	4618      	mov	r0, r3
 8003e36:	4621      	mov	r1, r4
 8003e38:	f7fc fed6 	bl	8000be8 <__aeabi_d2f>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	60fb      	str	r3, [r7, #12]
		mArgOld = mArg;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	609a      	str	r2, [r3, #8]
		mArg = mArg + arg_add + (2*M_PI);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	ed93 7a01 	vldr	s14, [r3, #4]
 8003e4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e56:	ee17 0a90 	vmov	r0, s15
 8003e5a:	f7fc fb95 	bl	8000588 <__aeabi_f2d>
 8003e5e:	a316      	add	r3, pc, #88	; (adr r3, 8003eb8 <_ZN9ArgSensor11ForceComArgEv+0x1a0>)
 8003e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e64:	f7fc fa32 	bl	80002cc <__adddf3>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	460c      	mov	r4, r1
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	4621      	mov	r1, r4
 8003e70:	f7fc feba 	bl	8000be8 <__aeabi_d2f>
 8003e74:	4602      	mov	r2, r0
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	605a      	str	r2, [r3, #4]
		mArg = fmodl(mArg, (2*M_PI));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fc fb82 	bl	8000588 <__aeabi_f2d>
 8003e84:	4603      	mov	r3, r0
 8003e86:	460c      	mov	r4, r1
 8003e88:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 8003eb8 <_ZN9ArgSensor11ForceComArgEv+0x1a0>
 8003e8c:	ec44 3b10 	vmov	d0, r3, r4
 8003e90:	f006 fdd7 	bl	800aa42 <fmodl>
 8003e94:	ec54 3b10 	vmov	r3, r4, d0
 8003e98:	4618      	mov	r0, r3
 8003e9a:	4621      	mov	r1, r4
 8003e9c:	f7fc fea4 	bl	8000be8 <__aeabi_d2f>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	605a      	str	r2, [r3, #4]
}
 8003ea6:	bf00      	nop
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd90      	pop	{r4, r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	54442d18 	.word	0x54442d18
 8003eb4:	400921fb 	.word	0x400921fb
 8003eb8:	54442d18 	.word	0x54442d18
 8003ebc:	401921fb 	.word	0x401921fb
 8003ec0:	3751b717 	.word	0x3751b717

08003ec4 <_ZNSt7__cxx119to_stringEf>:
					   4 * sizeof(unsigned long long),
					   "%llu", __val); }

  inline string
  to_string(float __val)
  {
 8003ec4:	b590      	push	{r4, r7, lr}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af02      	add	r7, sp, #8
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	ed87 0a00 	vstr	s0, [r7]
    const int __n = 
 8003ed0:	233a      	movs	r3, #58	; 0x3a
 8003ed2:	60fb      	str	r3, [r7, #12]
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
					   "%f", __val);
 8003ed4:	6838      	ldr	r0, [r7, #0]
 8003ed6:	f7fc fb57 	bl	8000588 <__aeabi_f2d>
 8003eda:	4603      	mov	r3, r0
 8003edc:	460c      	mov	r4, r1
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	e9cd 3400 	strd	r3, r4, [sp]
 8003ee4:	4b04      	ldr	r3, [pc, #16]	; (8003ef8 <_ZNSt7__cxx119to_stringEf+0x34>)
 8003ee6:	223a      	movs	r2, #58	; 0x3a
 8003ee8:	4904      	ldr	r1, [pc, #16]	; (8003efc <_ZNSt7__cxx119to_stringEf+0x38>)
 8003eea:	f000 f9a7 	bl	800423c <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
  }
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd90      	pop	{r4, r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	0800e310 	.word	0x0800e310
 8003efc:	0800cd19 	.word	0x0800cd19

08003f00 <_ZN9DebugCtrlC1Ev>:
 *      Author: watashi
 */

#include "DebugCtrl.hpp"

DebugCtrl::DebugCtrl() {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	4a07      	ldr	r2, [pc, #28]	; (8003f28 <_ZN9DebugCtrlC1Ev+0x28>)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3304      	adds	r3, #4
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fc2a 	bl	800476c <_ZN9DebugInfoC1Ev>
	// TODO Auto-generated constructor stub
	mDebugStatus = 0;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	619a      	str	r2, [r3, #24]
}
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4618      	mov	r0, r3
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	0800e424 	.word	0x0800e424

08003f2c <_ZN9DebugCtrlD1Ev>:

DebugCtrl::~DebugCtrl() {
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	4a06      	ldr	r2, [pc, #24]	; (8003f50 <_ZN9DebugCtrlD1Ev+0x24>)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 fc28 	bl	8004794 <_ZN9DebugInfoD1Ev>
	// TODO Auto-generated destructor stub
}
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	0800e424 	.word	0x0800e424

08003f54 <_ZN9DebugCtrlD0Ev>:
DebugCtrl::~DebugCtrl() {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
}
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff ffe5 	bl	8003f2c <_ZN9DebugCtrlD1Ev>
 8003f62:	211c      	movs	r1, #28
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f006 fd57 	bl	800aa18 <_ZdlPvj>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <_ZN9DebugCtrl12GetDbgStatusEv>:

int DebugCtrl::GetDbgStatus(void) {
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
	return mDebugStatus;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <_ZN9DebugCtrl15DbgInfoRegisterEffff>:

void DebugCtrl::DbgInfoRegister(float pIu, float pIv, float pIw, float pArg){
 8003f8c:	b5b0      	push	{r4, r5, r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6178      	str	r0, [r7, #20]
 8003f94:	ed87 0a04 	vstr	s0, [r7, #16]
 8003f98:	edc7 0a03 	vstr	s1, [r7, #12]
 8003f9c:	ed87 1a02 	vstr	s2, [r7, #8]
 8003fa0:	edc7 1a01 	vstr	s3, [r7, #4]
	//DEBUG_COUNTを超えるまではDebugInfoに情報を登録し続ける
	//超えた瞬間に、DebugStatusを更新することで次の関数に入るようにする。
	mDebugInfo.SetMotorData(new DebugInfo::SendMotorData(pIu,pIv,pIw,pArg));//デバッグの種類増やしたい時はここで変えてね
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	1d1c      	adds	r4, r3, #4
 8003fa8:	2040      	movs	r0, #64	; 0x40
 8003faa:	f006 fd37 	bl	800aa1c <_Znwj>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	461d      	mov	r5, r3
 8003fb2:	edd7 1a01 	vldr	s3, [r7, #4]
 8003fb6:	ed97 1a02 	vldr	s2, [r7, #8]
 8003fba:	edd7 0a03 	vldr	s1, [r7, #12]
 8003fbe:	ed97 0a04 	vldr	s0, [r7, #16]
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	f000 fb8e 	bl	80046e4 <_ZN9DebugInfo13SendMotorDataC1Effff>
 8003fc8:	4629      	mov	r1, r5
 8003fca:	4620      	mov	r0, r4
 8003fcc:	f000 fc06 	bl	80047dc <_ZN9DebugInfo12SetMotorDataEPNS_13SendMotorDataE>

	if(mDebugInfo.GetVectSize() == DEBUG_COUNT) {
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 fc1f 	bl	8004818 <_ZN9DebugInfo11GetVectSizeEv>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8003fe0:	bf0c      	ite	eq
 8003fe2:	2301      	moveq	r3, #1
 8003fe4:	2300      	movne	r3, #0
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d002      	beq.n	8003ff2 <_ZN9DebugCtrl15DbgInfoRegisterEffff+0x66>
		mDebugStatus = 1;//情報格納完了
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	619a      	str	r2, [r3, #24]
//
//			mPWMch1.Disable();
//			mPWMch2.Disable();
//			mPWMch3.Disable();
//			mPWMch4.Disable();
}
 8003ff2:	bf00      	nop
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bdb0      	pop	{r4, r5, r7, pc}

08003ffa <_ZN9DebugCtrl14SetDebugStatusEi>:

void DebugCtrl::SetDebugStatus(int pStatus) {
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	6039      	str	r1, [r7, #0]
	mDebugStatus = pStatus;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	619a      	str	r2, [r3, #24]
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
	...

08004018 <_ZN9DebugCtrl11PrintStatusEv>:

void DebugCtrl::PrintStatus() {
 8004018:	b580      	push	{r7, lr}
 800401a:	b0ba      	sub	sp, #232	; 0xe8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
	//UARTで転送する動作

	std::vector<DebugInfo::SendMotorData> vectorbuf = mDebugInfo.GetVect();
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	1d1a      	adds	r2, r3, #4
 8004024:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004028:	4611      	mov	r1, r2
 800402a:	4618      	mov	r0, r3
 800402c:	f000 fbe5 	bl	80047fa <_ZN9DebugInfo7GetVectEv>
	for(const auto& num : vectorbuf){
 8004030:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004034:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004038:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800403c:	f000 f951 	bl	80042e2 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE5beginEv>
 8004040:	4603      	mov	r3, r0
 8004042:	62bb      	str	r3, [r7, #40]	; 0x28
 8004044:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8004048:	f000 f95b 	bl	8004302 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE3endEv>
 800404c:	4603      	mov	r3, r0
 800404e:	627b      	str	r3, [r7, #36]	; 0x24
 8004050:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004054:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004058:	4611      	mov	r1, r2
 800405a:	4618      	mov	r0, r3
 800405c:	f000 f962 	bl	8004324 <_ZN9__gnu_cxxneIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 80dd 	beq.w	8004222 <_ZN9DebugCtrl11PrintStatusEv+0x20a>
 8004068:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800406c:	4618      	mov	r0, r3
 800406e:	f000 f982 	bl	8004376 <_ZNK9__gnu_cxx17__normal_iteratorIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEdeEv>
 8004072:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
		std::string strbuf;
 8004076:	f107 030c 	add.w	r3, r7, #12
 800407a:	4618      	mov	r0, r3
 800407c:	f006 fe23 	bl	800acc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
		strbuf.append(std::to_string(num.mIu));
 8004080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004084:	edd3 7a01 	vldr	s15, [r3, #4]
 8004088:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800408c:	eeb0 0a67 	vmov.f32	s0, s15
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff ff17 	bl	8003ec4 <_ZNSt7__cxx119to_stringEf>
 8004096:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800409a:	f107 030c 	add.w	r3, r7, #12
 800409e:	4611      	mov	r1, r2
 80040a0:	4618      	mov	r0, r3
 80040a2:	f006 fe3f 	bl	800ad24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 80040a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80040aa:	4618      	mov	r0, r3
 80040ac:	f006 fe12 	bl	800acd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		strbuf.append(",");
 80040b0:	f107 030c 	add.w	r3, r7, #12
 80040b4:	495f      	ldr	r1, [pc, #380]	; (8004234 <_ZN9DebugCtrl11PrintStatusEv+0x21c>)
 80040b6:	4618      	mov	r0, r3
 80040b8:	f006 fe3a 	bl	800ad30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
		strbuf.append(std::to_string(num.mIv));
 80040bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80040c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80040c8:	eeb0 0a67 	vmov.f32	s0, s15
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff fef9 	bl	8003ec4 <_ZNSt7__cxx119to_stringEf>
 80040d2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80040d6:	f107 030c 	add.w	r3, r7, #12
 80040da:	4611      	mov	r1, r2
 80040dc:	4618      	mov	r0, r3
 80040de:	f006 fe21 	bl	800ad24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 80040e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80040e6:	4618      	mov	r0, r3
 80040e8:	f006 fdf4 	bl	800acd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		strbuf.append(",");
 80040ec:	f107 030c 	add.w	r3, r7, #12
 80040f0:	4950      	ldr	r1, [pc, #320]	; (8004234 <_ZN9DebugCtrl11PrintStatusEv+0x21c>)
 80040f2:	4618      	mov	r0, r3
 80040f4:	f006 fe1c 	bl	800ad30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
		strbuf.append(std::to_string(num.mIw));
 80040f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8004100:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004104:	eeb0 0a67 	vmov.f32	s0, s15
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff fedb 	bl	8003ec4 <_ZNSt7__cxx119to_stringEf>
 800410e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004112:	f107 030c 	add.w	r3, r7, #12
 8004116:	4611      	mov	r1, r2
 8004118:	4618      	mov	r0, r3
 800411a:	f006 fe03 	bl	800ad24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 800411e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004122:	4618      	mov	r0, r3
 8004124:	f006 fdd6 	bl	800acd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		strbuf.append(",");
 8004128:	f107 030c 	add.w	r3, r7, #12
 800412c:	4941      	ldr	r1, [pc, #260]	; (8004234 <_ZN9DebugCtrl11PrintStatusEv+0x21c>)
 800412e:	4618      	mov	r0, r3
 8004130:	f006 fdfe 	bl	800ad30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
		strbuf.append(std::to_string(num.mEArg));
 8004134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004138:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800413c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004140:	eeb0 0a67 	vmov.f32	s0, s15
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff febd 	bl	8003ec4 <_ZNSt7__cxx119to_stringEf>
 800414a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800414e:	f107 030c 	add.w	r3, r7, #12
 8004152:	4611      	mov	r1, r2
 8004154:	4618      	mov	r0, r3
 8004156:	f006 fde5 	bl	800ad24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 800415a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800415e:	4618      	mov	r0, r3
 8004160:	f006 fdb8 	bl	800acd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		strbuf.append(",");
 8004164:	f107 030c 	add.w	r3, r7, #12
 8004168:	4932      	ldr	r1, [pc, #200]	; (8004234 <_ZN9DebugCtrl11PrintStatusEv+0x21c>)
 800416a:	4618      	mov	r0, r3
 800416c:	f006 fde0 	bl	800ad30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
		strbuf.append(std::to_string(num.mIalpha));
		strbuf.append(",");
		strbuf.append(std::to_string(num.mIbeta));
		strbuf.append(",");
		#endif
		strbuf.append(std::to_string(num.mId));
 8004170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004174:	edd3 7a06 	vldr	s15, [r3, #24]
 8004178:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800417c:	eeb0 0a67 	vmov.f32	s0, s15
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff fe9f 	bl	8003ec4 <_ZNSt7__cxx119to_stringEf>
 8004186:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800418a:	f107 030c 	add.w	r3, r7, #12
 800418e:	4611      	mov	r1, r2
 8004190:	4618      	mov	r0, r3
 8004192:	f006 fdc7 	bl	800ad24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8004196:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800419a:	4618      	mov	r0, r3
 800419c:	f006 fd9a 	bl	800acd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		strbuf.append(",");
 80041a0:	f107 030c 	add.w	r3, r7, #12
 80041a4:	4923      	ldr	r1, [pc, #140]	; (8004234 <_ZN9DebugCtrl11PrintStatusEv+0x21c>)
 80041a6:	4618      	mov	r0, r3
 80041a8:	f006 fdc2 	bl	800ad30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
		strbuf.append(std::to_string(num.mIq));
 80041ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041b0:	edd3 7a07 	vldr	s15, [r3, #28]
 80041b4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80041b8:	eeb0 0a67 	vmov.f32	s0, s15
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff fe81 	bl	8003ec4 <_ZNSt7__cxx119to_stringEf>
 80041c2:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80041c6:	f107 030c 	add.w	r3, r7, #12
 80041ca:	4611      	mov	r1, r2
 80041cc:	4618      	mov	r0, r3
 80041ce:	f006 fda9 	bl	800ad24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 80041d2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80041d6:	4618      	mov	r0, r3
 80041d8:	f006 fd7c 	bl	800acd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

		strbuf.append("\r\n");
 80041dc:	f107 030c 	add.w	r3, r7, #12
 80041e0:	4915      	ldr	r1, [pc, #84]	; (8004238 <_ZN9DebugCtrl11PrintStatusEv+0x220>)
 80041e2:	4618      	mov	r0, r3
 80041e4:	f006 fda4 	bl	800ad30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
		UART::Transmit(strbuf);
 80041e8:	f107 020c 	add.w	r2, r7, #12
 80041ec:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80041f0:	4611      	mov	r1, r2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f006 fdb6 	bl	800ad64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80041f8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80041fc:	4618      	mov	r0, r3
 80041fe:	f003 fda3 	bl	8007d48 <_ZN4UART8TransmitENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8004202:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004206:	4618      	mov	r0, r3
 8004208:	f006 fd64 	bl	800acd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		std::string strbuf;
 800420c:	f107 030c 	add.w	r3, r7, #12
 8004210:	4618      	mov	r0, r3
 8004212:	f006 fd5f 	bl	800acd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	for(const auto& num : vectorbuf){
 8004216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800421a:	4618      	mov	r0, r3
 800421c:	f000 f89a 	bl	8004354 <_ZN9__gnu_cxx17__normal_iteratorIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEppEv>
 8004220:	e716      	b.n	8004050 <_ZN9DebugCtrl11PrintStatusEv+0x38>
	std::vector<DebugInfo::SendMotorData> vectorbuf = mDebugInfo.GetVect();
 8004222:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004226:	4618      	mov	r0, r3
 8004228:	f000 f840 	bl	80042ac <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>
	}
}
 800422c:	bf00      	nop
 800422e:	37e8      	adds	r7, #232	; 0xe8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	0800e314 	.word	0x0800e314
 8004238:	0800e318 	.word	0x0800e318

0800423c <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 800423c:	b408      	push	{r3}
 800423e:	b590      	push	{r4, r7, lr}
 8004240:	b088      	sub	sp, #32
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	3307      	adds	r3, #7
 800424e:	3307      	adds	r3, #7
 8004250:	08db      	lsrs	r3, r3, #3
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	ebad 0d03 	sub.w	sp, sp, r3
 8004258:	466b      	mov	r3, sp
 800425a:	3307      	adds	r3, #7
 800425c:	08db      	lsrs	r3, r3, #3
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 8004262:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004266:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 8004268:	68bc      	ldr	r4, [r7, #8]
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800426e:	6879      	ldr	r1, [r7, #4]
 8004270:	69f8      	ldr	r0, [r7, #28]
 8004272:	47a0      	blx	r4
 8004274:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	69fa      	ldr	r2, [r7, #28]
 800427a:	18d4      	adds	r4, r2, r3
 800427c:	f107 0314 	add.w	r3, r7, #20
 8004280:	4618      	mov	r0, r3
 8004282:	f006 fbdc 	bl	800aa3e <_ZNSaIcEC1Ev>
 8004286:	f107 0314 	add.w	r3, r7, #20
 800428a:	4622      	mov	r2, r4
 800428c:	69f9      	ldr	r1, [r7, #28]
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 f87d 	bl	800438e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8004294:	f107 0314 	add.w	r3, r7, #20
 8004298:	4618      	mov	r0, r3
 800429a:	f006 fbd1 	bl	800aa40 <_ZNSaIcED1Ev>
    }
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	3720      	adds	r7, #32
 80042a2:	46bd      	mov	sp, r7
 80042a4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80042a8:	b001      	add	sp, #4
 80042aa:	4770      	bx	lr

080042ac <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80042ac:	b5b0      	push	{r4, r5, r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681c      	ldr	r4, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 f8a6 	bl	8004410 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>
 80042c4:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80042c6:	461a      	mov	r2, r3
 80042c8:	4629      	mov	r1, r5
 80042ca:	4620      	mov	r0, r4
 80042cc:	f000 f8ab 	bl	8004426 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataES1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 f882 	bl	80043dc <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4618      	mov	r0, r3
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bdb0      	pop	{r4, r5, r7, pc}

080042e2 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b084      	sub	sp, #16
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	f107 030c 	add.w	r3, r7, #12
 80042f0:	4611      	mov	r1, r2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 f8a5 	bl	8004442 <_ZN9__gnu_cxx17__normal_iteratorIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8004302:	b580      	push	{r7, lr}
 8004304:	b084      	sub	sp, #16
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	1d1a      	adds	r2, r3, #4
 800430e:	f107 030c 	add.w	r3, r7, #12
 8004312:	4611      	mov	r1, r2
 8004314:	4618      	mov	r0, r3
 8004316:	f000 f894 	bl	8004442 <_ZN9__gnu_cxx17__normal_iteratorIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	4618      	mov	r0, r3
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <_ZN9__gnu_cxxneIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8004324:	b590      	push	{r4, r7, lr}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f897 	bl	8004462 <_ZNK9__gnu_cxx17__normal_iteratorIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEE4baseEv>
 8004334:	4603      	mov	r3, r0
 8004336:	681c      	ldr	r4, [r3, #0]
 8004338:	6838      	ldr	r0, [r7, #0]
 800433a:	f000 f892 	bl	8004462 <_ZNK9__gnu_cxx17__normal_iteratorIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEE4baseEv>
 800433e:	4603      	mov	r3, r0
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	429c      	cmp	r4, r3
 8004344:	bf14      	ite	ne
 8004346:	2301      	movne	r3, #1
 8004348:	2300      	moveq	r3, #0
 800434a:	b2db      	uxtb	r3, r3
 800434c:	4618      	mov	r0, r3
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	bd90      	pop	{r4, r7, pc}

08004354 <_ZN9__gnu_cxx17__normal_iteratorIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
	++_M_current;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	601a      	str	r2, [r3, #0]
	return *this;
 8004368:	687b      	ldr	r3, [r7, #4]
      }
 800436a:	4618      	mov	r0, r3
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <_ZNK9__gnu_cxx17__normal_iteratorIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004376:	b480      	push	{r7}
 8004378:	b083      	sub	sp, #12
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 800438e:	b590      	push	{r4, r7, lr}
 8004390:	b085      	sub	sp, #20
 8004392:	af00      	add	r7, sp, #0
 8004394:	60f8      	str	r0, [r7, #12]
 8004396:	60b9      	str	r1, [r7, #8]
 8004398:	607a      	str	r2, [r7, #4]
 800439a:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 800439c:	68fc      	ldr	r4, [r7, #12]
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f006 fc0c 	bl	800abbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80043a4:	4603      	mov	r3, r0
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	4619      	mov	r1, r3
 80043aa:	4620      	mov	r0, r4
 80043ac:	f006 fcd8 	bl	800ad60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	68b9      	ldr	r1, [r7, #8]
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 f85f 	bl	8004478 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	4618      	mov	r0, r3
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd90      	pop	{r4, r7, pc}

080043c4 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f862 	bl	8004496 <_ZNSaIN9DebugInfo13SendMotorDataEED1Ev>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4618      	mov	r0, r3
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6819      	ldr	r1, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 80043ec:	461a      	mov	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	119b      	asrs	r3, r3, #6
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80043f6:	461a      	mov	r2, r3
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f858 	bl	80044ae <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff ffdf 	bl	80043c4 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implD1Ev>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4618      	mov	r0, r3
 800440a:	3708      	adds	r7, #8
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4618      	mov	r0, r3
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataES1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8004426:	b580      	push	{r7, lr}
 8004428:	b084      	sub	sp, #16
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8004432:	68b9      	ldr	r1, [r7, #8]
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 f84d 	bl	80044d4 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataEEvT_S3_>
    }
 800443a:	bf00      	nop
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <_ZN9__gnu_cxx17__normal_iteratorIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4618      	mov	r0, r3
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <_ZNK9__gnu_cxx17__normal_iteratorIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4618      	mov	r0, r3
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	68b9      	ldr	r1, [r7, #8]
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 f830 	bl	80044ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 800448e:	bf00      	nop
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <_ZNSaIN9DebugInfo13SendMotorDataEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 8004496:	b580      	push	{r7, lr}
 8004498:	b082      	sub	sp, #8
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f836 	bl	8004510 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEED1Ev>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4618      	mov	r0, r3
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b084      	sub	sp, #16
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	607a      	str	r2, [r7, #4]
	if (__p)
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d005      	beq.n	80044cc <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	68b9      	ldr	r1, [r7, #8]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 f82d 	bl	8004526 <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE10deallocateERS2_PS1_j>
      }
 80044cc:	bf00      	nop
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80044de:	6839      	ldr	r1, [r7, #0]
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f83a 	bl	800455a <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_>
    }
 80044e6:	bf00      	nop
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 80044ee:	b590      	push	{r4, r7, lr}
 80044f0:	b087      	sub	sp, #28
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	60f8      	str	r0, [r7, #12]
 80044f6:	60b9      	str	r1, [r7, #8]
 80044f8:	607a      	str	r2, [r7, #4]
 80044fa:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 80044fc:	4623      	mov	r3, r4
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	68b9      	ldr	r1, [r7, #8]
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 f842 	bl	800458c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 8004508:	bf00      	nop
 800450a:	371c      	adds	r7, #28
 800450c:	46bd      	mov	sp, r7
 800450e:	bd90      	pop	{r4, r7, pc}

08004510 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4618      	mov	r0, r3
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004526:	b580      	push	{r7, lr}
 8004528:	b084      	sub	sp, #16
 800452a:	af00      	add	r7, sp, #0
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	68b9      	ldr	r1, [r7, #8]
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 f870 	bl	800461c <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE10deallocateEPS2_j>
 800453c:	bf00      	nop
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <_ZSt11__addressofIN9DebugInfo13SendMotorDataEEPT_RS2_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4618      	mov	r0, r3
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 800455a:	b580      	push	{r7, lr}
 800455c:	b082      	sub	sp, #8
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	429a      	cmp	r2, r3
 800456a:	d00a      	beq.n	8004582 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7ff ffe9 	bl	8004544 <_ZSt11__addressofIN9DebugInfo13SendMotorDataEEPT_RS2_>
 8004572:	4603      	mov	r3, r0
 8004574:	4618      	mov	r0, r3
 8004576:	f000 f85e 	bl	8004636 <_ZSt8_DestroyIN9DebugInfo13SendMotorDataEEvPT_>
	  for (; __first != __last; ++__first)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3340      	adds	r3, #64	; 0x40
 800457e:	607b      	str	r3, [r7, #4]
 8004580:	e7f0      	b.n	8004564 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_+0xa>
	}
 8004582:	bf00      	nop
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
 8004598:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 800459a:	68b8      	ldr	r0, [r7, #8]
 800459c:	f000 f858 	bl	8004650 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d005      	beq.n	80045b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d001      	beq.n	80045b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 80045ae:	2301      	movs	r3, #1
 80045b0:	e000      	b.n	80045b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 80045b2:	2300      	movs	r3, #0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 80045b8:	4817      	ldr	r0, [pc, #92]	; (8004618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 80045ba:	f006 fa47 	bl	800aa4c <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	68b8      	ldr	r0, [r7, #8]
 80045c2:	f000 f85f 	bl	8004684 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 80045c6:	4603      	mov	r3, r0
 80045c8:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2b0f      	cmp	r3, #15
 80045ce:	d910      	bls.n	80045f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 80045d0:	f107 0314 	add.w	r3, r7, #20
 80045d4:	2200      	movs	r2, #0
 80045d6:	4619      	mov	r1, r3
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f006 faf9 	bl	800abd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80045de:	4603      	mov	r3, r0
 80045e0:	4619      	mov	r1, r3
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f006 fae6 	bl	800abb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	4619      	mov	r1, r3
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f006 fae7 	bl	800abc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f006 fae0 	bl	800abb8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80045f8:	4603      	mov	r3, r0
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	68b9      	ldr	r1, [r7, #8]
 80045fe:	4618      	mov	r0, r3
 8004600:	f006 fb1d 	bl	800ac3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	4619      	mov	r1, r3
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f006 fadb 	bl	800abc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 800460e:	bf00      	nop
 8004610:	3718      	adds	r7, #24
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	0800e31c 	.word	0x0800e31c

0800461c <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8004628:	68b8      	ldr	r0, [r7, #8]
 800462a:	f006 f9f3 	bl	800aa14 <_ZdlPv>
      }
 800462e:	bf00      	nop
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <_ZSt8_DestroyIN9DebugInfo13SendMotorDataEEvPT_>:
    _Destroy(_Tp* __pointer)
 8004636:	b580      	push	{r7, lr}
 8004638:	b082      	sub	sp, #8
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	4798      	blx	r3
 8004648:	bf00      	nop
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	bf0c      	ite	eq
 800465e:	2301      	moveq	r3, #1
 8004660:	2300      	movne	r3, #0
 8004662:	b2db      	uxtb	r3, r3
 8004664:	4618      	mov	r0, r3
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8004678:	4618      	mov	r0, r3
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8004684:	b5b0      	push	{r4, r5, r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800468e:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8004690:	1d3b      	adds	r3, r7, #4
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff ffec 	bl	8004670 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 8004698:	462a      	mov	r2, r5
 800469a:	6839      	ldr	r1, [r7, #0]
 800469c:	4620      	mov	r0, r4
 800469e:	f000 f805 	bl	80046ac <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 80046a2:	4603      	mov	r3, r0
    }
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bdb0      	pop	{r4, r5, r7, pc}

080046ac <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	1ad3      	subs	r3, r2, r3
    }
 80046be:	4618      	mov	r0, r3
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80046ca:	b480      	push	{r7}
 80046cc:	b083      	sub	sp, #12
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
 80046d2:	6039      	str	r1, [r7, #0]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	4618      	mov	r0, r3
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
	...

080046e4 <_ZN9DebugInfo13SendMotorDataC1Effff>:
 mVd(pVd), mVq(pVq), mEArg(pEArg)
{
	//constructor
}

DebugInfo::SendMotorData::SendMotorData(float pIu, float pIv, float pIw, float pEArg)
 80046e4:	b480      	push	{r7}
 80046e6:	b087      	sub	sp, #28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6178      	str	r0, [r7, #20]
 80046ec:	ed87 0a04 	vstr	s0, [r7, #16]
 80046f0:	edc7 0a03 	vstr	s1, [r7, #12]
 80046f4:	ed87 1a02 	vstr	s2, [r7, #8]
 80046f8:	edc7 1a01 	vstr	s3, [r7, #4]
:mIu(pIu), mIv(pIv), mIw(pIw), mEArg(pEArg)
 80046fc:	4a0a      	ldr	r2, [pc, #40]	; (8004728 <_ZN9DebugInfo13SendMotorDataC1Effff+0x44>)
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	605a      	str	r2, [r3, #4]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	609a      	str	r2, [r3, #8]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	60da      	str	r2, [r3, #12]
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	63da      	str	r2, [r3, #60]	; 0x3c
{
	//constructor
}
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	4618      	mov	r0, r3
 800471e:	371c      	adds	r7, #28
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	0800e444 	.word	0x0800e444

0800472c <_ZN9DebugInfo13SendMotorDataD1Ev>:

DebugInfo::SendMotorData::~SendMotorData(){
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	4a04      	ldr	r2, [pc, #16]	; (8004748 <_ZN9DebugInfo13SendMotorDataD1Ev+0x1c>)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	601a      	str	r2, [r3, #0]
	//destructor
}
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4618      	mov	r0, r3
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	0800e444 	.word	0x0800e444

0800474c <_ZN9DebugInfo13SendMotorDataD0Ev>:
DebugInfo::SendMotorData::~SendMotorData(){
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
}
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7ff ffe9 	bl	800472c <_ZN9DebugInfo13SendMotorDataD1Ev>
 800475a:	2140      	movs	r1, #64	; 0x40
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f006 f95b 	bl	800aa18 <_ZdlPvj>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4618      	mov	r0, r3
 8004766:	3708      	adds	r7, #8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <_ZN9DebugInfoC1Ev>:

DebugInfo::DebugInfo() {
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	4a06      	ldr	r2, [pc, #24]	; (8004790 <_ZN9DebugInfoC1Ev+0x24>)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	3304      	adds	r3, #4
 800477e:	4618      	mov	r0, r3
 8004780:	f000 f858 	bl	8004834 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>
	// TODO Auto-generated constructor stub
}
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4618      	mov	r0, r3
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	0800e434 	.word	0x0800e434

08004794 <_ZN9DebugInfoD1Ev>:

DebugInfo::~DebugInfo() {
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	4a06      	ldr	r2, [pc, #24]	; (80047b8 <_ZN9DebugInfoD1Ev+0x24>)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	3304      	adds	r3, #4
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff fd80 	bl	80042ac <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>
	// TODO Auto-generated destructor stub
}
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4618      	mov	r0, r3
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	0800e434 	.word	0x0800e434

080047bc <_ZN9DebugInfoD0Ev>:
DebugInfo::~DebugInfo() {
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
}
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f7ff ffe5 	bl	8004794 <_ZN9DebugInfoD1Ev>
 80047ca:	2110      	movs	r1, #16
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f006 f923 	bl	800aa18 <_ZdlPvj>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4618      	mov	r0, r3
 80047d6:	3708      	adds	r7, #8
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <_ZN9DebugInfo12SetMotorDataEPNS_13SendMotorDataE>:

void DebugInfo::SetMotorData(DebugInfo::SendMotorData* pMotorData){
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
	mSendDataVect.push_back(*pMotorData);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3304      	adds	r3, #4
 80047ea:	6839      	ldr	r1, [r7, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 f82e 	bl	800484e <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE9push_backERKS1_>
}
 80047f2:	bf00      	nop
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <_ZN9DebugInfo7GetVectEv>:

//getter
std::vector<DebugInfo::SendMotorData> DebugInfo::GetVect(void){
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b082      	sub	sp, #8
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
 8004802:	6039      	str	r1, [r7, #0]
	return mSendDataVect;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	3304      	adds	r3, #4
 8004808:	4619      	mov	r1, r3
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f845 	bl	800489a <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EEC1ERKS3_>
}
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <_ZN9DebugInfo11GetVectSizeEv>:

int DebugInfo::GetVectSize(void){
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
	return mSendDataVect.size();
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3304      	adds	r3, #4
 8004824:	4618      	mov	r0, r3
 8004826:	f000 f875 	bl	8004914 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE4sizeEv>
 800482a:	4603      	mov	r3, r0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>:
      vector()
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4618      	mov	r0, r3
 8004840:	f000 f879 	bl	8004936 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4618      	mov	r0, r3
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE9push_backERKS1_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 800484e:	b580      	push	{r7, lr}
 8004850:	b082      	sub	sp, #8
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	429a      	cmp	r2, r3
 8004862:	d00d      	beq.n	8004880 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE9push_backERKS1_+0x32>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	4619      	mov	r1, r3
 800486e:	f000 f87a 	bl	8004966 <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	605a      	str	r2, [r3, #4]
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 800487e:	e008      	b.n	8004892 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE9push_backERKS1_+0x44>
	  _M_realloc_insert(end(), __x);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7ff fd3e 	bl	8004302 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE3endEv>
 8004886:	4603      	mov	r3, r0
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	4619      	mov	r1, r3
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f87d 	bl	800498c <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8004892:	bf00      	nop
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EEC1ERKS3_>:
      vector(const vector& __x)
 800489a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800489c:	b085      	sub	sp, #20
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
 80048a2:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 80048a4:	687c      	ldr	r4, [r7, #4]
 80048a6:	6838      	ldr	r0, [r7, #0]
 80048a8:	f000 f834 	bl	8004914 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE4sizeEv>
 80048ac:	4605      	mov	r5, r0
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 f905 	bl	8004ac0 <_ZNKSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>
 80048b6:	4602      	mov	r2, r0
 80048b8:	f107 030c 	add.w	r3, r7, #12
 80048bc:	4611      	mov	r1, r2
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 f8f0 	bl	8004aa4 <_ZN9__gnu_cxx14__alloc_traitsISaIN9DebugInfo13SendMotorDataEEE17_S_select_on_copyERKS3_>
 80048c4:	f107 030c 	add.w	r3, r7, #12
 80048c8:	461a      	mov	r2, r3
 80048ca:	4629      	mov	r1, r5
 80048cc:	4620      	mov	r0, r4
 80048ce:	f000 f902 	bl	8004ad6 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EEC1EjRKS2_>
 80048d2:	f107 030c 	add.w	r3, r7, #12
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7ff fddd 	bl	8004496 <_ZNSaIN9DebugInfo13SendMotorDataEED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80048dc:	6838      	ldr	r0, [r7, #0]
 80048de:	f000 f90e 	bl	8004afe <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE5beginEv>
 80048e2:	4605      	mov	r5, r0
 80048e4:	6838      	ldr	r0, [r7, #0]
 80048e6:	f000 f91e 	bl	8004b26 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE3endEv>
 80048ea:	4606      	mov	r6, r0
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff fd8c 	bl	8004410 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>
 80048f8:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80048fa:	4622      	mov	r2, r4
 80048fc:	4631      	mov	r1, r6
 80048fe:	4628      	mov	r0, r5
 8004900:	f000 f925 	bl	8004b4e <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
 8004904:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	605a      	str	r2, [r3, #4]
      }
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004914 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	461a      	mov	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	119b      	asrs	r3, r3, #6
 800492a:	4618      	mov	r0, r3
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>:
      _Vector_base()
 8004936:	b580      	push	{r7, lr}
 8004938:	b082      	sub	sp, #8
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4618      	mov	r0, r3
 8004942:	f000 f915 	bl	8004b70 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implC1Ev>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4618      	mov	r0, r3
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <_ZSt7forwardIRKN9DebugInfo13SendMotorDataEEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4618      	mov	r0, r3
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8004966:	b580      	push	{r7, lr}
 8004968:	b084      	sub	sp, #16
 800496a:	af00      	add	r7, sp, #0
 800496c:	60f8      	str	r0, [r7, #12]
 800496e:	60b9      	str	r1, [r7, #8]
 8004970:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7ff ffec 	bl	8004950 <_ZSt7forwardIRKN9DebugInfo13SendMotorDataEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004978:	4603      	mov	r3, r0
 800497a:	461a      	mov	r2, r3
 800497c:	68b9      	ldr	r1, [r7, #8]
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 f95a 	bl	8004c38 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
 8004984:	bf00      	nop
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800498c:	b5b0      	push	{r4, r5, r7, lr}
 800498e:	b08a      	sub	sp, #40	; 0x28
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8004998:	4a41      	ldr	r2, [pc, #260]	; (8004aa0 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x114>)
 800499a:	2101      	movs	r1, #1
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 f965 	bl	8004c6c <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE12_M_check_lenEjPKc>
 80049a2:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f7ff fc9c 	bl	80042e2 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE5beginEv>
 80049aa:	4603      	mov	r3, r0
 80049ac:	617b      	str	r3, [r7, #20]
 80049ae:	f107 0214 	add.w	r2, r7, #20
 80049b2:	f107 0308 	add.w	r3, r7, #8
 80049b6:	4611      	mov	r1, r2
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 f99f 	bl	8004cfc <_ZN9__gnu_cxxmiIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80049be:	4603      	mov	r3, r0
 80049c0:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 f9ae 	bl	8004d28 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE11_M_allocateEj>
 80049cc:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80049d2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	019b      	lsls	r3, r3, #6
	  _Alloc_traits::construct(this->_M_impl,
 80049d8:	69fa      	ldr	r2, [r7, #28]
 80049da:	18d5      	adds	r5, r2, r3
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7ff ffb7 	bl	8004950 <_ZSt7forwardIRKN9DebugInfo13SendMotorDataEEOT_RNSt16remove_referenceIS4_E4typeE>
 80049e2:	4603      	mov	r3, r0
 80049e4:	461a      	mov	r2, r3
 80049e6:	4629      	mov	r1, r5
 80049e8:	4620      	mov	r0, r4
 80049ea:	f7ff ffbc 	bl	8004966 <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80049ee:	2300      	movs	r3, #0
 80049f0:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681c      	ldr	r4, [r3, #0]
 80049f6:	f107 0308 	add.w	r3, r7, #8
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7ff fd31 	bl	8004462 <_ZNK9__gnu_cxx17__normal_iteratorIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEE4baseEv>
 8004a00:	4603      	mov	r3, r0
 8004a02:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff fd02 	bl	8004410 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>
 8004a0c:	4603      	mov	r3, r0
	  __new_finish
 8004a0e:	69fa      	ldr	r2, [r7, #28]
 8004a10:	4629      	mov	r1, r5
 8004a12:	4620      	mov	r0, r4
 8004a14:	f000 f99c 	bl	8004d50 <_ZSt34__uninitialized_move_if_noexcept_aIPN9DebugInfo13SendMotorDataES2_SaIS1_EET0_T_S5_S4_RT1_>
 8004a18:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	3340      	adds	r3, #64	; 0x40
 8004a1e:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 8004a20:	f107 0308 	add.w	r3, r7, #8
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff fd1c 	bl	8004462 <_ZNK9__gnu_cxx17__normal_iteratorIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEE4baseEv>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	681c      	ldr	r4, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff fceb 	bl	8004410 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>
 8004a3a:	4603      	mov	r3, r0
	  __new_finish
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	4629      	mov	r1, r5
 8004a40:	4620      	mov	r0, r4
 8004a42:	f000 f985 	bl	8004d50 <_ZSt34__uninitialized_move_if_noexcept_aIPN9DebugInfo13SendMotorDataES2_SaIS1_EET0_T_S5_S4_RT1_>
 8004a46:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681c      	ldr	r4, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7ff fcdc 	bl	8004410 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>
 8004a58:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	4629      	mov	r1, r5
 8004a5e:	4620      	mov	r0, r4
 8004a60:	f7ff fce1 	bl	8004426 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataES1_EvT_S3_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8004a6e:	461a      	mov	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	119b      	asrs	r3, r3, #6
      _M_deallocate(this->_M_impl._M_start,
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f7ff fd18 	bl	80044ae <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	69fa      	ldr	r2, [r7, #28]
 8004a82:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	019b      	lsls	r3, r3, #6
 8004a8e:	69fa      	ldr	r2, [r7, #28]
 8004a90:	441a      	add	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	609a      	str	r2, [r3, #8]
    }
 8004a96:	bf00      	nop
 8004a98:	3728      	adds	r7, #40	; 0x28
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bdb0      	pop	{r4, r5, r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	0800e348 	.word	0x0800e348

08004aa4 <_ZN9__gnu_cxx14__alloc_traitsISaIN9DebugInfo13SendMotorDataEEE17_S_select_on_copyERKS3_>:
    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::addressof(*__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6839      	ldr	r1, [r7, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 f965 	bl	8004d82 <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE37select_on_container_copy_constructionERKS2_>
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <_ZNKSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4618      	mov	r0, r3
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EEC1EjRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b084      	sub	sp, #16
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	60f8      	str	r0, [r7, #12]
 8004ade:	60b9      	str	r1, [r7, #8]
 8004ae0:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6879      	ldr	r1, [r7, #4]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 f966 	bl	8004db8 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 f979 	bl	8004de6 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE17_M_create_storageEj>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4618      	mov	r0, r3
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b084      	sub	sp, #16
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	f107 020c 	add.w	r2, r7, #12
 8004b10:	f107 0308 	add.w	r3, r7, #8
 8004b14:	4611      	mov	r1, r2
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 f980 	bl	8004e1c <_ZN9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b084      	sub	sp, #16
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	f107 020c 	add.w	r2, r7, #12
 8004b38:	f107 0308 	add.w	r3, r7, #8
 8004b3c:	4611      	mov	r1, r2
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 f96c 	bl	8004e1c <_ZN9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b084      	sub	sp, #16
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	60f8      	str	r0, [r7, #12]
 8004b56:	60b9      	str	r1, [r7, #8]
 8004b58:	607a      	str	r2, [r7, #4]
 8004b5a:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	68b9      	ldr	r1, [r7, #8]
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f000 f96b 	bl	8004e3c <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
 8004b66:	4603      	mov	r3, r0
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f971 	bl	8004e60 <_ZNSaIN9DebugInfo13SendMotorDataEEC1Ev>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	605a      	str	r2, [r3, #4]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	609a      	str	r2, [r3, #8]
	{ }
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4618      	mov	r0, r3
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
	...

08004b9c <_ZN9DebugInfo13SendMotorDataC1ERKS0_>:



class DebugInfo {
public:
	class SendMotorData{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
 8004ba6:	4a23      	ldr	r2, [pc, #140]	; (8004c34 <_ZN9DebugInfo13SendMotorDataC1ERKS0_+0x98>)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	605a      	str	r2, [r3, #4]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	609a      	str	r2, [r3, #8]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	60da      	str	r2, [r3, #12]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	691a      	ldr	r2, [r3, #16]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	611a      	str	r2, [r3, #16]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	695a      	ldr	r2, [r3, #20]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	615a      	str	r2, [r3, #20]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	699a      	ldr	r2, [r3, #24]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	619a      	str	r2, [r3, #24]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	69da      	ldr	r2, [r3, #28]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	61da      	str	r2, [r3, #28]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	6a1a      	ldr	r2, [r3, #32]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	621a      	str	r2, [r3, #32]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	625a      	str	r2, [r3, #36]	; 0x24
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	629a      	str	r2, [r3, #40]	; 0x28
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	631a      	str	r2, [r3, #48]	; 0x30
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	635a      	str	r2, [r3, #52]	; 0x34
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	639a      	str	r2, [r3, #56]	; 0x38
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4618      	mov	r0, r3
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	0800e444 	.word	0x0800e444

08004c38 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8004c38:	b590      	push	{r4, r7, lr}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff fe83 	bl	8004950 <_ZSt7forwardIRKN9DebugInfo13SendMotorDataEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	4619      	mov	r1, r3
 8004c50:	2040      	movs	r0, #64	; 0x40
 8004c52:	f7ff fd3a 	bl	80046ca <_ZnwjPv>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE9constructIS2_JRKS2_EEEvPT_DpOT0_+0x2c>
 8004c5c:	4621      	mov	r1, r4
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7ff ff9c 	bl	8004b9c <_ZN9DebugInfo13SendMotorDataC1ERKS0_>
 8004c64:	bf00      	nop
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd90      	pop	{r4, r7, pc}

08004c6c <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8004c6c:	b590      	push	{r4, r7, lr}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 f8fd 	bl	8004e78 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE8max_sizeEv>
 8004c7e:	4604      	mov	r4, r0
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f7ff fe47 	bl	8004914 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE4sizeEv>
 8004c86:	4603      	mov	r3, r0
 8004c88:	1ae2      	subs	r2, r4, r3
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	bf34      	ite	cc
 8004c90:	2301      	movcc	r3, #1
 8004c92:	2300      	movcs	r3, #0
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f005 fed8 	bl	800aa52 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + std::max(size(), __n);
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f7ff fe36 	bl	8004914 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE4sizeEv>
 8004ca8:	4604      	mov	r4, r0
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f7ff fe32 	bl	8004914 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE4sizeEv>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	613b      	str	r3, [r7, #16]
 8004cb4:	f107 0208 	add.w	r2, r7, #8
 8004cb8:	f107 0310 	add.w	r3, r7, #16
 8004cbc:	4611      	mov	r1, r2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 f8eb 	bl	8004e9a <_ZSt3maxIjERKT_S2_S2_>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4423      	add	r3, r4
 8004cca:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f7ff fe21 	bl	8004914 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE4sizeEv>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d306      	bcc.n	8004ce8 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE12_M_check_lenEjPKc+0x7c>
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f000 f8cc 	bl	8004e78 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE8max_sizeEv>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d904      	bls.n	8004cf2 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE12_M_check_lenEjPKc+0x86>
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 f8c5 	bl	8004e78 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE8max_sizeEv>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	e000      	b.n	8004cf4 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE12_M_check_lenEjPKc+0x88>
 8004cf2:	697b      	ldr	r3, [r7, #20]
      }
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	371c      	adds	r7, #28
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd90      	pop	{r4, r7, pc}

08004cfc <_ZN9__gnu_cxxmiIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8004cfc:	b590      	push	{r4, r7, lr}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7ff fbab 	bl	8004462 <_ZNK9__gnu_cxx17__normal_iteratorIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEE4baseEv>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	461c      	mov	r4, r3
 8004d12:	6838      	ldr	r0, [r7, #0]
 8004d14:	f7ff fba5 	bl	8004462 <_ZNK9__gnu_cxx17__normal_iteratorIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEE4baseEv>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	1ae3      	subs	r3, r4, r3
 8004d1e:	119b      	asrs	r3, r3, #6
 8004d20:	4618      	mov	r0, r3
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd90      	pop	{r4, r7, pc}

08004d28 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d006      	beq.n	8004d46 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE11_M_allocateEj+0x1e>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6839      	ldr	r1, [r7, #0]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 f8c0 	bl	8004ec2 <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE8allocateERS2_j>
 8004d42:	4603      	mov	r3, r0
 8004d44:	e000      	b.n	8004d48 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE11_M_allocateEj+0x20>
 8004d46:	2300      	movs	r3, #0
      }
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3708      	adds	r7, #8
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <_ZSt34__uninitialized_move_if_noexcept_aIPN9DebugInfo13SendMotorDataES2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8004d50:	b590      	push	{r4, r7, lr}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
 8004d5c:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 f8be 	bl	8004ee0 <_ZSt32__make_move_if_noexcept_iteratorIN9DebugInfo13SendMotorDataESt13move_iteratorIPS1_EET0_PT_>
 8004d64:	4604      	mov	r4, r0
 8004d66:	68b8      	ldr	r0, [r7, #8]
 8004d68:	f000 f8ba 	bl	8004ee0 <_ZSt32__make_move_if_noexcept_iteratorIN9DebugInfo13SendMotorDataESt13move_iteratorIPS1_EET0_PT_>
 8004d6c:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	4620      	mov	r0, r4
 8004d74:	f000 f8c3 	bl	8004efe <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN9DebugInfo13SendMotorDataEES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8004d78:	4603      	mov	r3, r0
    }
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd90      	pop	{r4, r7, pc}

08004d82 <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE37select_on_container_copy_constructionERKS2_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b082      	sub	sp, #8
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
 8004d8a:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8004d8c:	6839      	ldr	r1, [r7, #0]
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f804 	bl	8004d9c <_ZNSaIN9DebugInfo13SendMotorDataEEC1ERKS1_>
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <_ZNSaIN9DebugInfo13SendMotorDataEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8004da6:	6839      	ldr	r1, [r7, #0]
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f8b9 	bl	8004f20 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEEC1ERKS3_>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4618      	mov	r0, r3
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 8004dc2:	6839      	ldr	r1, [r7, #0]
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f7ff ffe9 	bl	8004d9c <_ZNSaIN9DebugInfo13SendMotorDataEEC1ERKS1_>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	605a      	str	r2, [r3, #4]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	609a      	str	r2, [r3, #8]
	{ }
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4618      	mov	r0, r3
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b082      	sub	sp, #8
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8004df0:	6839      	ldr	r1, [r7, #0]
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f7ff ff98 	bl	8004d28 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE11_M_allocateEj>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	019b      	lsls	r3, r3, #6
 8004e0e:	441a      	add	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	609a      	str	r2, [r3, #8]
      }
 8004e14:	bf00      	nop
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <_ZN9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4618      	mov	r0, r3
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	68b9      	ldr	r1, [r7, #8]
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 f871 	bl	8004f38 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>
 8004e56:	4603      	mov	r3, r0
    }
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3718      	adds	r7, #24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <_ZNSaIN9DebugInfo13SendMotorDataEEC1Ev>:
      allocator() throw() { }
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f894 	bl	8004f96 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEEC1Ev>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4618      	mov	r0, r3
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7ff fe1c 	bl	8004ac0 <_ZNKSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 f88e 	bl	8004fac <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE8max_sizeERKS2_>
 8004e90:	4603      	mov	r3, r0
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d201      	bcs.n	8004eb4 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	e000      	b.n	8004eb6 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8004eb4:	687b      	ldr	r3, [r7, #4]
    }
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b082      	sub	sp, #8
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004ecc:	2200      	movs	r2, #0
 8004ece:	6839      	ldr	r1, [r7, #0]
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 f877 	bl	8004fc4 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE8allocateEjPKv>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <_ZSt32__make_move_if_noexcept_iteratorIN9DebugInfo13SendMotorDataESt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8004ee8:	f107 030c 	add.w	r3, r7, #12
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 f886 	bl	8005000 <_ZNSt13move_iteratorIPN9DebugInfo13SendMotorDataEEC1ES2_>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN9DebugInfo13SendMotorDataEES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b084      	sub	sp, #16
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	60f8      	str	r0, [r7, #12]
 8004f06:	60b9      	str	r1, [r7, #8]
 8004f08:	607a      	str	r2, [r7, #4]
 8004f0a:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	68b9      	ldr	r1, [r7, #8]
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 f884 	bl	800501e <_ZSt18uninitialized_copyISt13move_iteratorIPN9DebugInfo13SendMotorDataEES3_ET0_T_S6_S5_>
 8004f16:	4603      	mov	r3, r0
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004f38:	b590      	push	{r4, r7, lr}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8004f48:	f107 0208 	add.w	r2, r7, #8
 8004f4c:	f107 030c 	add.w	r3, r7, #12
 8004f50:	4611      	mov	r1, r2
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 f875 	bl	8005042 <_ZN9__gnu_cxxneIPKN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d016      	beq.n	8004f8c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8004f5e:	6978      	ldr	r0, [r7, #20]
 8004f60:	f7ff faf0 	bl	8004544 <_ZSt11__addressofIN9DebugInfo13SendMotorDataEEPT_RS2_>
 8004f64:	4604      	mov	r4, r0
 8004f66:	f107 030c 	add.w	r3, r7, #12
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 f892 	bl	8005094 <_ZNK9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEdeEv>
 8004f70:	4603      	mov	r3, r0
 8004f72:	4619      	mov	r1, r3
 8004f74:	4620      	mov	r0, r4
 8004f76:	f000 f899 	bl	80050ac <_ZSt10_ConstructIN9DebugInfo13SendMotorDataEJRKS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8004f7a:	f107 030c 	add.w	r3, r7, #12
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 f877 	bl	8005072 <_ZN9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEppEv>
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	3340      	adds	r3, #64	; 0x40
 8004f88:	617b      	str	r3, [r7, #20]
 8004f8a:	e7dd      	b.n	8004f48 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x10>
	      return __cur;
 8004f8c:	697b      	ldr	r3, [r7, #20]
	}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	371c      	adds	r7, #28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd90      	pop	{r4, r7, pc}

08004f96 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f892 	bl	80050de <_ZNK9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE8max_sizeEv>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 f884 	bl	80050de <_ZNK9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE8max_sizeEv>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	bf8c      	ite	hi
 8004fde:	2301      	movhi	r3, #1
 8004fe0:	2300      	movls	r3, #0
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004fe8:	f005 fd2d 	bl	800aa46 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	019b      	lsls	r3, r3, #6
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f005 fd13 	bl	800aa1c <_Znwj>
 8004ff6:	4603      	mov	r3, r0
      }
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <_ZNSt13move_iteratorIPN9DebugInfo13SendMotorDataEEC1ES2_>:
      move_iterator(iterator_type __i)
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4618      	mov	r0, r3
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <_ZSt18uninitialized_copyISt13move_iteratorIPN9DebugInfo13SendMotorDataEES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800501e:	b580      	push	{r7, lr}
 8005020:	b086      	sub	sp, #24
 8005022:	af00      	add	r7, sp, #0
 8005024:	60f8      	str	r0, [r7, #12]
 8005026:	60b9      	str	r1, [r7, #8]
 8005028:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800502a:	2301      	movs	r3, #1
 800502c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	68b9      	ldr	r1, [r7, #8]
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 f85f 	bl	80050f6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPN9DebugInfo13SendMotorDataEES5_EET0_T_S8_S7_>
 8005038:	4603      	mov	r3, r0
    }
 800503a:	4618      	mov	r0, r3
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <_ZN9__gnu_cxxneIPKN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005042:	b590      	push	{r4, r7, lr}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
 800504a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f881 	bl	8005154 <_ZNK9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEE4baseEv>
 8005052:	4603      	mov	r3, r0
 8005054:	681c      	ldr	r4, [r3, #0]
 8005056:	6838      	ldr	r0, [r7, #0]
 8005058:	f000 f87c 	bl	8005154 <_ZNK9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEE4baseEv>
 800505c:	4603      	mov	r3, r0
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	429c      	cmp	r4, r3
 8005062:	bf14      	ite	ne
 8005064:	2301      	movne	r3, #1
 8005066:	2300      	moveq	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	4618      	mov	r0, r3
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	bd90      	pop	{r4, r7, pc}

08005072 <_ZN9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
	++_M_current;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	601a      	str	r2, [r3, #0]
	return *this;
 8005086:	687b      	ldr	r3, [r7, #4]
      }
 8005088:	4618      	mov	r0, r3
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <_ZNK9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4618      	mov	r0, r3
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <_ZSt10_ConstructIN9DebugInfo13SendMotorDataEJRKS1_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 80050ac:	b590      	push	{r4, r7, lr}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 80050b6:	6838      	ldr	r0, [r7, #0]
 80050b8:	f7ff fc4a 	bl	8004950 <_ZSt7forwardIRKN9DebugInfo13SendMotorDataEEOT_RNSt16remove_referenceIS4_E4typeE>
 80050bc:	4604      	mov	r4, r0
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4619      	mov	r1, r3
 80050c2:	2040      	movs	r0, #64	; 0x40
 80050c4:	f7ff fb01 	bl	80046ca <_ZnwjPv>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <_ZSt10_ConstructIN9DebugInfo13SendMotorDataEJRKS1_EEvPT_DpOT0_+0x2a>
 80050ce:	4621      	mov	r1, r4
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7ff fd63 	bl	8004b9c <_ZN9DebugInfo13SendMotorDataC1ERKS0_>
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd90      	pop	{r4, r7, pc}

080050de <_ZNK9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80050e6:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 80050ea:	4618      	mov	r0, r3
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPN9DebugInfo13SendMotorDataEES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80050f6:	b590      	push	{r4, r7, lr}
 80050f8:	b087      	sub	sp, #28
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	60f8      	str	r0, [r7, #12]
 80050fe:	60b9      	str	r1, [r7, #8]
 8005100:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8005106:	f107 0208 	add.w	r2, r7, #8
 800510a:	f107 030c 	add.w	r3, r7, #12
 800510e:	4611      	mov	r1, r2
 8005110:	4618      	mov	r0, r3
 8005112:	f000 f82a 	bl	800516a <_ZStneIPN9DebugInfo13SendMotorDataEEbRKSt13move_iteratorIT_ES7_>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d016      	beq.n	800514a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPN9DebugInfo13SendMotorDataEES5_EET0_T_S8_S7_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 800511c:	6978      	ldr	r0, [r7, #20]
 800511e:	f7ff fa11 	bl	8004544 <_ZSt11__addressofIN9DebugInfo13SendMotorDataEEPT_RS2_>
 8005122:	4604      	mov	r4, r0
 8005124:	f107 030c 	add.w	r3, r7, #12
 8005128:	4618      	mov	r0, r3
 800512a:	f000 f840 	bl	80051ae <_ZNKSt13move_iteratorIPN9DebugInfo13SendMotorDataEEdeEv>
 800512e:	4603      	mov	r3, r0
 8005130:	4619      	mov	r1, r3
 8005132:	4620      	mov	r0, r4
 8005134:	f000 f852 	bl	80051dc <_ZSt10_ConstructIN9DebugInfo13SendMotorDataEJS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8005138:	f107 030c 	add.w	r3, r7, #12
 800513c:	4618      	mov	r0, r3
 800513e:	f000 f825 	bl	800518c <_ZNSt13move_iteratorIPN9DebugInfo13SendMotorDataEEppEv>
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	3340      	adds	r3, #64	; 0x40
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	e7dd      	b.n	8005106 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPN9DebugInfo13SendMotorDataEES5_EET0_T_S8_S7_+0x10>
	      return __cur;
 800514a:	697b      	ldr	r3, [r7, #20]
	}
 800514c:	4618      	mov	r0, r3
 800514e:	371c      	adds	r7, #28
 8005150:	46bd      	mov	sp, r7
 8005152:	bd90      	pop	{r4, r7, pc}

08005154 <_ZNK9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4618      	mov	r0, r3
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <_ZStneIPN9DebugInfo13SendMotorDataEEbRKSt13move_iteratorIT_ES7_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800516a:	b580      	push	{r7, lr}
 800516c:	b082      	sub	sp, #8
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
 8005172:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8005174:	6839      	ldr	r1, [r7, #0]
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f849 	bl	800520e <_ZSteqIPN9DebugInfo13SendMotorDataEEbRKSt13move_iteratorIT_ES7_>
 800517c:	4603      	mov	r3, r0
 800517e:	f083 0301 	eor.w	r3, r3, #1
 8005182:	b2db      	uxtb	r3, r3
 8005184:	4618      	mov	r0, r3
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <_ZNSt13move_iteratorIPN9DebugInfo13SendMotorDataEEppEv>:
      operator++()
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
	++_M_current;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	601a      	str	r2, [r3, #0]
	return *this;
 80051a0:	687b      	ldr	r3, [r7, #4]
      }
 80051a2:	4618      	mov	r0, r3
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <_ZNKSt13move_iteratorIPN9DebugInfo13SendMotorDataEEdeEv>:
      operator*() const
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4618      	mov	r0, r3
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <_ZSt7forwardIN9DebugInfo13SendMotorDataEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4618      	mov	r0, r3
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <_ZSt10_ConstructIN9DebugInfo13SendMotorDataEJS1_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 80051dc:	b590      	push	{r4, r7, lr}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 80051e6:	6838      	ldr	r0, [r7, #0]
 80051e8:	f7ff ffed 	bl	80051c6 <_ZSt7forwardIN9DebugInfo13SendMotorDataEEOT_RNSt16remove_referenceIS2_E4typeE>
 80051ec:	4604      	mov	r4, r0
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4619      	mov	r1, r3
 80051f2:	2040      	movs	r0, #64	; 0x40
 80051f4:	f7ff fa69 	bl	80046ca <_ZnwjPv>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <_ZSt10_ConstructIN9DebugInfo13SendMotorDataEJS1_EEvPT_DpOT0_+0x2a>
 80051fe:	4621      	mov	r1, r4
 8005200:	4618      	mov	r0, r3
 8005202:	f7ff fccb 	bl	8004b9c <_ZN9DebugInfo13SendMotorDataC1ERKS0_>
 8005206:	bf00      	nop
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	bd90      	pop	{r4, r7, pc}

0800520e <_ZSteqIPN9DebugInfo13SendMotorDataEEbRKSt13move_iteratorIT_ES7_>:
    operator==(const move_iterator<_Iterator>& __x,
 800520e:	b590      	push	{r4, r7, lr}
 8005210:	b083      	sub	sp, #12
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f80e 	bl	800523a <_ZNKSt13move_iteratorIPN9DebugInfo13SendMotorDataEE4baseEv>
 800521e:	4604      	mov	r4, r0
 8005220:	6838      	ldr	r0, [r7, #0]
 8005222:	f000 f80a 	bl	800523a <_ZNKSt13move_iteratorIPN9DebugInfo13SendMotorDataEE4baseEv>
 8005226:	4603      	mov	r3, r0
 8005228:	429c      	cmp	r4, r3
 800522a:	bf0c      	ite	eq
 800522c:	2301      	moveq	r3, #1
 800522e:	2300      	movne	r3, #0
 8005230:	b2db      	uxtb	r3, r3
 8005232:	4618      	mov	r0, r3
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	bd90      	pop	{r4, r7, pc}

0800523a <_ZNKSt13move_iteratorIPN9DebugInfo13SendMotorDataEE4baseEv>:
      base() const
 800523a:	b480      	push	{r7}
 800523c:	b083      	sub	sp, #12
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4618      	mov	r0, r3
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
	...

08005254 <_ZN7MathLibC1Ev>:
 *	256個の値を生成したならば、0~255の番地となることに注意すること。
 */

#include "MathLib.hpp"

MathLib::MathLib() {
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	4a0a      	ldr	r2, [pc, #40]	; (8005288 <_ZN7MathLibC1Ev+0x34>)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	3304      	adds	r3, #4
 8005266:	4618      	mov	r0, r3
 8005268:	f000 f9a2 	bl	80055b0 <_ZNSt6vectorIfSaIfEEC1Ev>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3310      	adds	r3, #16
 8005270:	4618      	mov	r0, r3
 8005272:	f000 f99d 	bl	80055b0 <_ZNSt6vectorIfSaIfEEC1Ev>
	mSize = 0;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	61da      	str	r2, [r3, #28]
}
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4618      	mov	r0, r3
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	0800e454 	.word	0x0800e454

0800528c <_ZN7MathLibD1Ev>:

MathLib::~MathLib() {
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	4a0f      	ldr	r2, [pc, #60]	; (80052d4 <_ZN7MathLibD1Ev+0x48>)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	601a      	str	r2, [r3, #0]
	mSize = 0;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	61da      	str	r2, [r3, #28]
	mSinList.clear();
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3304      	adds	r3, #4
 80052a4:	4618      	mov	r0, r3
 80052a6:	f000 f9ab 	bl	8005600 <_ZNSt6vectorIfSaIfEE5clearEv>
	mCosList.clear();
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	3310      	adds	r3, #16
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 f9a6 	bl	8005600 <_ZNSt6vectorIfSaIfEE5clearEv>
MathLib::~MathLib() {
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3310      	adds	r3, #16
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 f986 	bl	80055ca <_ZNSt6vectorIfSaIfEED1Ev>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3304      	adds	r3, #4
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 f981 	bl	80055ca <_ZNSt6vectorIfSaIfEED1Ev>
}
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4618      	mov	r0, r3
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	0800e454 	.word	0x0800e454

080052d8 <_ZN7MathLibD0Ev>:
MathLib::~MathLib() {
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
}
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7ff ffd3 	bl	800528c <_ZN7MathLibD1Ev>
 80052e6:	2124      	movs	r1, #36	; 0x24
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f005 fb95 	bl	800aa18 <_ZdlPvj>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4618      	mov	r0, r3
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <_ZN7MathLib10setLibSizeEi>:

void MathLib::setLibSize(int pSize){
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
	mSize = pSize;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	61da      	str	r2, [r3, #28]
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr
 8005314:	0000      	movs	r0, r0
	...

08005318 <_ZN7MathLib5fInitEi>:

void MathLib::fInit(int pSize){
 8005318:	b590      	push	{r4, r7, lr}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
	setLibSize(pSize);
 8005322:	6839      	ldr	r1, [r7, #0]
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7ff ffe7 	bl	80052f8 <_ZN7MathLib10setLibSizeEi>
	if(mSize == 0){
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d100      	bne.n	8005334 <_ZN7MathLib5fInitEi+0x1c>
		while(1){}//error check
 8005332:	e7fe      	b.n	8005332 <_ZN7MathLib5fInitEi+0x1a>
	}
	mRadvsSize = mSize / (2*M_PI);//サイズと1radianの比
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	4618      	mov	r0, r3
 800533a:	f7fb f913 	bl	8000564 <__aeabi_i2d>
 800533e:	a310      	add	r3, pc, #64	; (adr r3, 8005380 <_ZN7MathLib5fInitEi+0x68>)
 8005340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005344:	f7fb faa2 	bl	800088c <__aeabi_ddiv>
 8005348:	4603      	mov	r3, r0
 800534a:	460c      	mov	r4, r1
 800534c:	4618      	mov	r0, r3
 800534e:	4621      	mov	r1, r4
 8005350:	f7fb fc4a 	bl	8000be8 <__aeabi_d2f>
 8005354:	4602      	mov	r2, r0
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	621a      	str	r2, [r3, #32]

	fSinVectorInit(&mSinList);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	3304      	adds	r3, #4
 800535e:	4619      	mov	r1, r3
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f811 	bl	8005388 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE>
	fCosVectorInit(&mCosList);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	3310      	adds	r3, #16
 800536a:	4619      	mov	r1, r3
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f85b 	bl	8005428 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE>
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	bd90      	pop	{r4, r7, pc}
 800537a:	bf00      	nop
 800537c:	f3af 8000 	nop.w
 8005380:	54442d18 	.word	0x54442d18
 8005384:	401921fb 	.word	0x401921fb

08005388 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE>:

int MathLib::getLibSize(void){return mSize;}

void MathLib::fSinVectorInit(std::vector<float> *pVector){
 8005388:	b5b0      	push	{r4, r5, r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
	for(int i=0;i<mSize;i++){
 8005392:	2300      	movs	r3, #0
 8005394:	60fb      	str	r3, [r7, #12]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	429a      	cmp	r2, r3
 800539e:	da39      	bge.n	8005414 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE+0x8c>
		float fsinval = sin(i*2*M_PI/(float)mSize);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7fb f8dd 	bl	8000564 <__aeabi_i2d>
 80053aa:	a31d      	add	r3, pc, #116	; (adr r3, 8005420 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE+0x98>)
 80053ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b0:	f7fb f942 	bl	8000638 <__aeabi_dmul>
 80053b4:	4603      	mov	r3, r0
 80053b6:	460c      	mov	r4, r1
 80053b8:	4625      	mov	r5, r4
 80053ba:	461c      	mov	r4, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	ee07 3a90 	vmov	s15, r3
 80053c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053c8:	ee17 0a90 	vmov	r0, s15
 80053cc:	f7fb f8dc 	bl	8000588 <__aeabi_f2d>
 80053d0:	4602      	mov	r2, r0
 80053d2:	460b      	mov	r3, r1
 80053d4:	4620      	mov	r0, r4
 80053d6:	4629      	mov	r1, r5
 80053d8:	f7fb fa58 	bl	800088c <__aeabi_ddiv>
 80053dc:	4603      	mov	r3, r0
 80053de:	460c      	mov	r4, r1
 80053e0:	ec44 3b17 	vmov	d7, r3, r4
 80053e4:	eeb0 0a47 	vmov.f32	s0, s14
 80053e8:	eef0 0a67 	vmov.f32	s1, s15
 80053ec:	f005 fe1c 	bl	800b028 <sin>
 80053f0:	ec54 3b10 	vmov	r3, r4, d0
 80053f4:	4618      	mov	r0, r3
 80053f6:	4621      	mov	r1, r4
 80053f8:	f7fb fbf6 	bl	8000be8 <__aeabi_d2f>
 80053fc:	4603      	mov	r3, r0
 80053fe:	60bb      	str	r3, [r7, #8]
		pVector->push_back(fsinval);
 8005400:	f107 0308 	add.w	r3, r7, #8
 8005404:	4619      	mov	r1, r3
 8005406:	6838      	ldr	r0, [r7, #0]
 8005408:	f000 f908 	bl	800561c <_ZNSt6vectorIfSaIfEE9push_backERKf>
	for(int i=0;i<mSize;i++){
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	3301      	adds	r3, #1
 8005410:	60fb      	str	r3, [r7, #12]
 8005412:	e7c0      	b.n	8005396 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE+0xe>
	}
}
 8005414:	bf00      	nop
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bdb0      	pop	{r4, r5, r7, pc}
 800541c:	f3af 8000 	nop.w
 8005420:	54442d18 	.word	0x54442d18
 8005424:	400921fb 	.word	0x400921fb

08005428 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE>:

void MathLib::fCosVectorInit(std::vector<float> *pVector){
 8005428:	b5b0      	push	{r4, r5, r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
	for(int i=0;i<mSize;i++){
 8005432:	2300      	movs	r3, #0
 8005434:	60fb      	str	r3, [r7, #12]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	429a      	cmp	r2, r3
 800543e:	da39      	bge.n	80054b4 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE+0x8c>
		float fcosval = cos(i*2*M_PI/(float)mSize);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	005b      	lsls	r3, r3, #1
 8005444:	4618      	mov	r0, r3
 8005446:	f7fb f88d 	bl	8000564 <__aeabi_i2d>
 800544a:	a31d      	add	r3, pc, #116	; (adr r3, 80054c0 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE+0x98>)
 800544c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005450:	f7fb f8f2 	bl	8000638 <__aeabi_dmul>
 8005454:	4603      	mov	r3, r0
 8005456:	460c      	mov	r4, r1
 8005458:	4625      	mov	r5, r4
 800545a:	461c      	mov	r4, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	69db      	ldr	r3, [r3, #28]
 8005460:	ee07 3a90 	vmov	s15, r3
 8005464:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005468:	ee17 0a90 	vmov	r0, s15
 800546c:	f7fb f88c 	bl	8000588 <__aeabi_f2d>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	4620      	mov	r0, r4
 8005476:	4629      	mov	r1, r5
 8005478:	f7fb fa08 	bl	800088c <__aeabi_ddiv>
 800547c:	4603      	mov	r3, r0
 800547e:	460c      	mov	r4, r1
 8005480:	ec44 3b17 	vmov	d7, r3, r4
 8005484:	eeb0 0a47 	vmov.f32	s0, s14
 8005488:	eef0 0a67 	vmov.f32	s1, s15
 800548c:	f005 fc80 	bl	800ad90 <cos>
 8005490:	ec54 3b10 	vmov	r3, r4, d0
 8005494:	4618      	mov	r0, r3
 8005496:	4621      	mov	r1, r4
 8005498:	f7fb fba6 	bl	8000be8 <__aeabi_d2f>
 800549c:	4603      	mov	r3, r0
 800549e:	60bb      	str	r3, [r7, #8]
		pVector->push_back(fcosval);
 80054a0:	f107 0308 	add.w	r3, r7, #8
 80054a4:	4619      	mov	r1, r3
 80054a6:	6838      	ldr	r0, [r7, #0]
 80054a8:	f000 f8b8 	bl	800561c <_ZNSt6vectorIfSaIfEE9push_backERKf>
	for(int i=0;i<mSize;i++){
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	3301      	adds	r3, #1
 80054b0:	60fb      	str	r3, [r7, #12]
 80054b2:	e7c0      	b.n	8005436 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE+0xe>
	}
}
 80054b4:	bf00      	nop
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bdb0      	pop	{r4, r5, r7, pc}
 80054bc:	f3af 8000 	nop.w
 80054c0:	54442d18 	.word	0x54442d18
 80054c4:	400921fb 	.word	0x400921fb

080054c8 <_ZN7MathLib10getSinListEv>:

std::vector<float> MathLib::getSinList(void){
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
	return mSinList;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	3304      	adds	r3, #4
 80054d6:	4619      	mov	r1, r3
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f8c4 	bl	8005666 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
}
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <_ZN7MathLib10getCosListEv>:

std::vector<float> MathLib::getCosList(void){
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b082      	sub	sp, #8
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	6039      	str	r1, [r7, #0]
	return mCosList;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	3310      	adds	r3, #16
 80054f4:	4619      	mov	r1, r3
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f8b5 	bl	8005666 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
}
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	0000      	movs	r0, r0
	...

08005508 <_ZN7MathLib14radToSizeCountEf>:

int MathLib::radToSizeCount(float pRadian){//0~2piのラジアンを、0~mSizeに変換する
 8005508:	b590      	push	{r4, r7, lr}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	ed87 0a00 	vstr	s0, [r7]
	pRadian = pRadian + (2*M_PI);
 8005514:	6838      	ldr	r0, [r7, #0]
 8005516:	f7fb f837 	bl	8000588 <__aeabi_f2d>
 800551a:	a317      	add	r3, pc, #92	; (adr r3, 8005578 <_ZN7MathLib14radToSizeCountEf+0x70>)
 800551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005520:	f7fa fed4 	bl	80002cc <__adddf3>
 8005524:	4603      	mov	r3, r0
 8005526:	460c      	mov	r4, r1
 8005528:	4618      	mov	r0, r3
 800552a:	4621      	mov	r1, r4
 800552c:	f7fb fb5c 	bl	8000be8 <__aeabi_d2f>
 8005530:	4603      	mov	r3, r0
 8005532:	603b      	str	r3, [r7, #0]
	pRadian = fmodl(pRadian, (2*M_PI));
 8005534:	6838      	ldr	r0, [r7, #0]
 8005536:	f7fb f827 	bl	8000588 <__aeabi_f2d>
 800553a:	4603      	mov	r3, r0
 800553c:	460c      	mov	r4, r1
 800553e:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8005578 <_ZN7MathLib14radToSizeCountEf+0x70>
 8005542:	ec44 3b10 	vmov	d0, r3, r4
 8005546:	f005 fa7c 	bl	800aa42 <fmodl>
 800554a:	ec54 3b10 	vmov	r3, r4, d0
 800554e:	4618      	mov	r0, r3
 8005550:	4621      	mov	r1, r4
 8005552:	f7fb fb49 	bl	8000be8 <__aeabi_d2f>
 8005556:	4603      	mov	r3, r0
 8005558:	603b      	str	r3, [r7, #0]
	return pRadian * mRadvsSize;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	ed93 7a08 	vldr	s14, [r3, #32]
 8005560:	edd7 7a00 	vldr	s15, [r7]
 8005564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005568:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800556c:	ee17 3a90 	vmov	r3, s15
}
 8005570:	4618      	mov	r0, r3
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	bd90      	pop	{r4, r7, pc}
 8005578:	54442d18 	.word	0x54442d18
 800557c:	401921fb 	.word	0x401921fb

08005580 <_ZN7MathLib14sizeCountToRadEi>:

float MathLib::sizeCountToRad(int pSizecount){
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
	return (float)pSizecount / mRadvsSize;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	ee07 3a90 	vmov	s15, r3
 8005590:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	edd3 7a08 	vldr	s15, [r3, #32]
 800559a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800559e:	eef0 7a66 	vmov.f32	s15, s13
}
 80055a2:	eeb0 0a67 	vmov.f32	s0, s15
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <_ZNSt6vectorIfSaIfEEC1Ev>:
      vector()
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 f89c 	bl	80056f8 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4618      	mov	r0, r3
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <_ZNSt6vectorIfSaIfEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80055ca:	b5b0      	push	{r4, r5, r7, lr}
 80055cc:	b082      	sub	sp, #8
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681c      	ldr	r4, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 f8b2 	bl	8005746 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80055e2:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80055e4:	461a      	mov	r2, r3
 80055e6:	4629      	mov	r1, r5
 80055e8:	4620      	mov	r0, r4
 80055ea:	f000 f8b7 	bl	800575c <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 f88e 	bl	8005712 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4618      	mov	r0, r3
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bdb0      	pop	{r4, r5, r7, pc}

08005600 <_ZNSt6vectorIfSaIfEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4619      	mov	r1, r3
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f8b2 	bl	8005778 <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>
 8005614:	bf00      	nop
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <_ZNSt6vectorIfSaIfEE9push_backERKf>:
      push_back(const value_type& __x)
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	429a      	cmp	r2, r3
 8005630:	d00c      	beq.n	800564c <_ZNSt6vectorIfSaIfEE9push_backERKf+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	4619      	mov	r1, r3
 800563c:	f000 f8bf 	bl	80057be <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	1d1a      	adds	r2, r3, #4
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	605a      	str	r2, [r3, #4]
      }
 800564a:	e008      	b.n	800565e <_ZNSt6vectorIfSaIfEE9push_backERKf+0x42>
	  _M_realloc_insert(end(), __x);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 f8c9 	bl	80057e4 <_ZNSt6vectorIfSaIfEE3endEv>
 8005652:	4603      	mov	r3, r0
 8005654:	683a      	ldr	r2, [r7, #0]
 8005656:	4619      	mov	r1, r3
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f8d5 	bl	8005808 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>
      }
 800565e:	bf00      	nop
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 8005666:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005668:	b085      	sub	sp, #20
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
 800566e:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8005670:	687c      	ldr	r4, [r7, #4]
 8005672:	6838      	ldr	r0, [r7, #0]
 8005674:	f000 f954 	bl	8005920 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8005678:	4605      	mov	r5, r0
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	4618      	mov	r0, r3
 800567e:	f000 f96e 	bl	800595e <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8005682:	4602      	mov	r2, r0
 8005684:	f107 030c 	add.w	r3, r7, #12
 8005688:	4611      	mov	r1, r2
 800568a:	4618      	mov	r0, r3
 800568c:	f000 f959 	bl	8005942 <_ZN9__gnu_cxx14__alloc_traitsISaIfEE17_S_select_on_copyERKS1_>
 8005690:	f107 030c 	add.w	r3, r7, #12
 8005694:	461a      	mov	r2, r3
 8005696:	4629      	mov	r1, r5
 8005698:	4620      	mov	r0, r4
 800569a:	f000 f977 	bl	800598c <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 800569e:	f107 030c 	add.w	r3, r7, #12
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 f966 	bl	8005974 <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80056a8:	6838      	ldr	r0, [r7, #0]
 80056aa:	f000 f983 	bl	80059b4 <_ZNKSt6vectorIfSaIfEE5beginEv>
 80056ae:	4605      	mov	r5, r0
 80056b0:	6838      	ldr	r0, [r7, #0]
 80056b2:	f000 f993 	bl	80059dc <_ZNKSt6vectorIfSaIfEE3endEv>
 80056b6:	4606      	mov	r6, r0
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 f841 	bl	8005746 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80056c4:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80056c6:	4622      	mov	r2, r4
 80056c8:	4631      	mov	r1, r6
 80056ca:	4628      	mov	r0, r5
 80056cc:	f000 f99a 	bl	8005a04 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 80056d0:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	605a      	str	r2, [r3, #4]
      }
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4618      	mov	r0, r3
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056e0 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
      struct _Vector_impl
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f943 	bl	8005974 <_ZNSaIfED1Ev>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4618      	mov	r0, r3
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      _Vector_base()
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4618      	mov	r0, r3
 8005704:	f000 f98f 	bl	8005a26 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4618      	mov	r0, r3
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8005712:	b580      	push	{r7, lr}
 8005714:	b082      	sub	sp, #8
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6819      	ldr	r1, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8005722:	461a      	mov	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800572c:	461a      	mov	r2, r3
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f98e 	bl	8005a50 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
		      - this->_M_impl._M_start); }
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4618      	mov	r0, r3
 8005738:	f7ff ffd2 	bl	80056e0 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4618      	mov	r0, r3
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8005746:	b480      	push	{r7}
 8005748:	b083      	sub	sp, #12
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4618      	mov	r0, r3
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8005768:	68b9      	ldr	r1, [r7, #8]
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 f983 	bl	8005a76 <_ZSt8_DestroyIPfEvT_S1_>
    }
 8005770:	bf00      	nop
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8005778:	b590      	push	{r4, r7, lr}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685c      	ldr	r4, [r3, #4]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4618      	mov	r0, r3
 800578a:	f7ff ffdc 	bl	8005746 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800578e:	4603      	mov	r3, r0
 8005790:	461a      	mov	r2, r3
 8005792:	4621      	mov	r1, r4
 8005794:	6838      	ldr	r0, [r7, #0]
 8005796:	f7ff ffe1 	bl	800575c <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	605a      	str	r2, [r3, #4]
      }
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd90      	pop	{r4, r7, pc}

080057a8 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4618      	mov	r0, r3
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80057be:	b580      	push	{r7, lr}
 80057c0:	b084      	sub	sp, #16
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	60f8      	str	r0, [r7, #12]
 80057c6:	60b9      	str	r1, [r7, #8]
 80057c8:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7ff ffec 	bl	80057a8 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 80057d0:	4603      	mov	r3, r0
 80057d2:	461a      	mov	r2, r3
 80057d4:	68b9      	ldr	r1, [r7, #8]
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f000 f95a 	bl	8005a90 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_>
 80057dc:	bf00      	nop
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <_ZNSt6vectorIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	1d1a      	adds	r2, r3, #4
 80057f0:	f107 030c 	add.w	r3, r7, #12
 80057f4:	4611      	mov	r1, r2
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 f962 	bl	8005ac0 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
	...

08005808 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8005808:	b5b0      	push	{r4, r5, r7, lr}
 800580a:	b08a      	sub	sp, #40	; 0x28
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8005814:	4a41      	ldr	r2, [pc, #260]	; (800591c <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x114>)
 8005816:	2101      	movs	r1, #1
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 f961 	bl	8005ae0 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 800581e:	6278      	str	r0, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 f9a5 	bl	8005b70 <_ZNSt6vectorIfSaIfEE5beginEv>
 8005826:	4603      	mov	r3, r0
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	f107 0214 	add.w	r2, r7, #20
 800582e:	f107 0308 	add.w	r3, r7, #8
 8005832:	4611      	mov	r1, r2
 8005834:	4618      	mov	r0, r3
 8005836:	f000 f9ab 	bl	8005b90 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800583a:	4603      	mov	r3, r0
 800583c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005842:	4618      	mov	r0, r3
 8005844:	f000 f9ba 	bl	8005bbc <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8005848:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800584e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8005854:	69fa      	ldr	r2, [r7, #28]
 8005856:	18d5      	adds	r5, r2, r3
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7ff ffa5 	bl	80057a8 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800585e:	4603      	mov	r3, r0
 8005860:	461a      	mov	r2, r3
 8005862:	4629      	mov	r1, r5
 8005864:	4620      	mov	r0, r4
 8005866:	f7ff ffaa 	bl	80057be <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
	  __new_finish = pointer();
 800586a:	2300      	movs	r3, #0
 800586c:	61bb      	str	r3, [r7, #24]
	    (this->_M_impl._M_start, __position.base(),
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681c      	ldr	r4, [r3, #0]
 8005872:	f107 0308 	add.w	r3, r7, #8
 8005876:	4618      	mov	r0, r3
 8005878:	f000 f9b4 	bl	8005be4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800587c:	4603      	mov	r3, r0
 800587e:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4618      	mov	r0, r3
 8005884:	f7ff ff5f 	bl	8005746 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8005888:	4603      	mov	r3, r0
	  __new_finish
 800588a:	69fa      	ldr	r2, [r7, #28]
 800588c:	4629      	mov	r1, r5
 800588e:	4620      	mov	r0, r4
 8005890:	f000 f9b3 	bl	8005bfa <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 8005894:	61b8      	str	r0, [r7, #24]
	  ++__new_finish;
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	3304      	adds	r3, #4
 800589a:	61bb      	str	r3, [r7, #24]
	    (__position.base(), this->_M_impl._M_finish,
 800589c:	f107 0308 	add.w	r3, r7, #8
 80058a0:	4618      	mov	r0, r3
 80058a2:	f000 f99f 	bl	8005be4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 80058a6:	4603      	mov	r3, r0
 80058a8:	681c      	ldr	r4, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7ff ff48 	bl	8005746 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80058b6:	4603      	mov	r3, r0
	  __new_finish
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	4629      	mov	r1, r5
 80058bc:	4620      	mov	r0, r4
 80058be:	f000 f99c 	bl	8005bfa <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 80058c2:	61b8      	str	r0, [r7, #24]
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681c      	ldr	r4, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7ff ff39 	bl	8005746 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80058d4:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80058d6:	461a      	mov	r2, r3
 80058d8:	4629      	mov	r1, r5
 80058da:	4620      	mov	r0, r4
 80058dc:	f7ff ff3e 	bl	800575c <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 80058ea:	461a      	mov	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 80058f4:	461a      	mov	r2, r3
 80058f6:	f000 f8ab 	bl	8005a50 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	69fa      	ldr	r2, [r7, #28]
 80058fe:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	69fa      	ldr	r2, [r7, #28]
 800590c:	441a      	add	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	609a      	str	r2, [r3, #8]
    }
 8005912:	bf00      	nop
 8005914:	3728      	adds	r7, #40	; 0x28
 8005916:	46bd      	mov	sp, r7
 8005918:	bdb0      	pop	{r4, r5, r7, pc}
 800591a:	bf00      	nop
 800591c:	0800e364 	.word	0x0800e364

08005920 <_ZNKSt6vectorIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	461a      	mov	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	109b      	asrs	r3, r3, #2
 8005936:	4618      	mov	r0, r3
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <_ZN9__gnu_cxx14__alloc_traitsISaIfEE17_S_select_on_copyERKS1_>:
    static _Alloc _S_select_on_copy(const _Alloc& __a)
 8005942:	b580      	push	{r7, lr}
 8005944:	b082      	sub	sp, #8
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
 800594a:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6839      	ldr	r1, [r7, #0]
 8005950:	4618      	mov	r0, r3
 8005952:	f000 f96b 	bl	8005c2c <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800595e:	b480      	push	{r7}
 8005960:	b083      	sub	sp, #12
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4618      	mov	r0, r3
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <_ZNSaIfED1Ev>:
      ~allocator() throw() { }
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f970 	bl	8005c62 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4618      	mov	r0, r3
 8005986:	3708      	adds	r7, #8
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6879      	ldr	r1, [r7, #4]
 800599c:	4618      	mov	r0, r3
 800599e:	f000 f96b 	bl	8005c78 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 80059a2:	68b9      	ldr	r1, [r7, #8]
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f000 f97e 	bl	8005ca6 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	f107 020c 	add.w	r2, r7, #12
 80059c6:	f107 0308 	add.w	r3, r7, #8
 80059ca:	4611      	mov	r1, r2
 80059cc:	4618      	mov	r0, r3
 80059ce:	f000 f985 	bl	8005cdc <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	60fb      	str	r3, [r7, #12]
 80059ea:	f107 020c 	add.w	r2, r7, #12
 80059ee:	f107 0308 	add.w	r3, r7, #8
 80059f2:	4611      	mov	r1, r2
 80059f4:	4618      	mov	r0, r3
 80059f6:	f000 f971 	bl	8005cdc <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	4618      	mov	r0, r3
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
 8005a10:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	68b9      	ldr	r1, [r7, #8]
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f000 f970 	bl	8005cfc <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl()
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b082      	sub	sp, #8
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f976 	bl	8005d20 <_ZNSaIfEC1Ev>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	601a      	str	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	605a      	str	r2, [r3, #4]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	609a      	str	r2, [r3, #8]
	{ }
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
	if (__p)
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d005      	beq.n	8005a6e <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	68b9      	ldr	r1, [r7, #8]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 f965 	bl	8005d38 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 8005a6e:	bf00      	nop
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <_ZSt8_DestroyIPfEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b082      	sub	sp, #8
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8005a80:	6839      	ldr	r1, [r7, #0]
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f967 	bl	8005d56 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 8005a88:	bf00      	nop
 8005a8a:	3708      	adds	r7, #8
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8005a90:	b590      	push	{r4, r7, lr}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7ff fe83 	bl	80057a8 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	681c      	ldr	r4, [r3, #0]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	2004      	movs	r0, #4
 8005aac:	f7fe fe0d 	bl	80046ca <_ZnwjPv>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d000      	beq.n	8005ab8 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_+0x28>
 8005ab6:	601c      	str	r4, [r3, #0]
 8005ab8:	bf00      	nop
 8005aba:	3714      	adds	r7, #20
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd90      	pop	{r4, r7, pc}

08005ac0 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8005ae0:	b590      	push	{r4, r7, lr}
 8005ae2:	b087      	sub	sp, #28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 f93d 	bl	8005d6c <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8005af2:	4604      	mov	r4, r0
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f7ff ff13 	bl	8005920 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8005afa:	4603      	mov	r3, r0
 8005afc:	1ae2      	subs	r2, r4, r3
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	bf34      	ite	cc
 8005b04:	2301      	movcc	r3, #1
 8005b06:	2300      	movcs	r3, #0
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d003      	beq.n	8005b16 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f004 ff9e 	bl	800aa52 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f7ff ff02 	bl	8005920 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8005b1c:	4604      	mov	r4, r0
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f7ff fefe 	bl	8005920 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8005b24:	4603      	mov	r3, r0
 8005b26:	613b      	str	r3, [r7, #16]
 8005b28:	f107 0208 	add.w	r2, r7, #8
 8005b2c:	f107 0310 	add.w	r3, r7, #16
 8005b30:	4611      	mov	r1, r2
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7ff f9b1 	bl	8004e9a <_ZSt3maxIjERKT_S2_S2_>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4423      	add	r3, r4
 8005b3e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f7ff feed 	bl	8005920 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8005b46:	4602      	mov	r2, r0
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d306      	bcc.n	8005b5c <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x7c>
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 f90c 	bl	8005d6c <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8005b54:	4602      	mov	r2, r0
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d904      	bls.n	8005b66 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x86>
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 f905 	bl	8005d6c <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8005b62:	4603      	mov	r3, r0
 8005b64:	e000      	b.n	8005b68 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x88>
 8005b66:	697b      	ldr	r3, [r7, #20]
      }
 8005b68:	4618      	mov	r0, r3
 8005b6a:	371c      	adds	r7, #28
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd90      	pop	{r4, r7, pc}

08005b70 <_ZNSt6vectorIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	f107 030c 	add.w	r3, r7, #12
 8005b7e:	4611      	mov	r1, r2
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7ff ff9d 	bl	8005ac0 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005b90:	b590      	push	{r4, r7, lr}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f822 	bl	8005be4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	461c      	mov	r4, r3
 8005ba6:	6838      	ldr	r0, [r7, #0]
 8005ba8:	f000 f81c 	bl	8005be4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8005bac:	4603      	mov	r3, r0
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	1ae3      	subs	r3, r4, r3
 8005bb2:	109b      	asrs	r3, r3, #2
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd90      	pop	{r4, r7, pc}

08005bbc <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d006      	beq.n	8005bda <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6839      	ldr	r1, [r7, #0]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f000 f8dc 	bl	8005d8e <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	e000      	b.n	8005bdc <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 8005bda:	2300      	movs	r3, #0
      }
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8005bfa:	b590      	push	{r4, r7, lr}
 8005bfc:	b085      	sub	sp, #20
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	60f8      	str	r0, [r7, #12]
 8005c02:	60b9      	str	r1, [r7, #8]
 8005c04:	607a      	str	r2, [r7, #4]
 8005c06:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 f8cf 	bl	8005dac <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 8005c0e:	4604      	mov	r4, r0
 8005c10:	68b8      	ldr	r0, [r7, #8]
 8005c12:	f000 f8cb 	bl	8005dac <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 8005c16:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	f000 f8d4 	bl	8005dca <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>
 8005c22:	4603      	mov	r3, r0
    }
 8005c24:	4618      	mov	r0, r3
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd90      	pop	{r4, r7, pc}

08005c2c <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8005c36:	6839      	ldr	r1, [r7, #0]
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 f804 	bl	8005c46 <_ZNSaIfEC1ERKS_>
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) throw()
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b082      	sub	sp, #8
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
 8005c4e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8005c50:	6839      	ldr	r1, [r7, #0]
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f8ca 	bl	8005dec <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005c62:	b480      	push	{r7}
 8005c64:	b083      	sub	sp, #12
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 8005c82:	6839      	ldr	r1, [r7, #0]
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f7ff ffde 	bl	8005c46 <_ZNSaIfEC1ERKS_>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	605a      	str	r2, [r3, #4]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	609a      	str	r2, [r3, #8]
	{ }
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b082      	sub	sp, #8
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8005cb0:	6839      	ldr	r1, [r7, #0]
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff ff82 	bl	8005bbc <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	441a      	add	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	609a      	str	r2, [r3, #8]
      }
 8005cd4:	bf00      	nop
 8005cd6:	3708      	adds	r7, #8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	68b9      	ldr	r1, [r7, #8]
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 f877 	bl	8005e04 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 8005d16:	4603      	mov	r3, r0
    }
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3718      	adds	r7, #24
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <_ZNSaIfEC1Ev>:
      allocator() throw() { }
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 f87b 	bl	8005e24 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4618      	mov	r0, r3
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	68b9      	ldr	r1, [r7, #8]
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f000 f876 	bl	8005e3a <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
 8005d4e:	bf00      	nop
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	6039      	str	r1, [r7, #0]
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <_ZNKSt6vectorIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7ff fdf1 	bl	800595e <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 f868 	bl	8005e54 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 8005d84:	4603      	mov	r3, r0
 8005d86:	4618      	mov	r0, r3
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b082      	sub	sp, #8
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005d98:	2200      	movs	r2, #0
 8005d9a:	6839      	ldr	r1, [r7, #0]
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f865 	bl	8005e6c <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 8005da2:	4603      	mov	r3, r0
 8005da4:	4618      	mov	r0, r3
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8005db4:	f107 030c 	add.w	r3, r7, #12
 8005db8:	6879      	ldr	r1, [r7, #4]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 f874 	bl	8005ea8 <_ZNSt13move_iteratorIPfEC1ES0_>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b084      	sub	sp, #16
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	60f8      	str	r0, [r7, #12]
 8005dd2:	60b9      	str	r1, [r7, #8]
 8005dd4:	607a      	str	r2, [r7, #4]
 8005dd6:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	68b9      	ldr	r1, [r7, #8]
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 f872 	bl	8005ec6 <_ZSt18uninitialized_copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>
 8005de2:	4603      	mov	r3, r0
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	68b9      	ldr	r1, [r7, #8]
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 f868 	bl	8005eea <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
      deallocate(pointer __p, size_type)
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b084      	sub	sp, #16
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	60f8      	str	r0, [r7, #12]
 8005e42:	60b9      	str	r1, [r7, #8]
 8005e44:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005e46:	68b8      	ldr	r0, [r7, #8]
 8005e48:	f004 fde4 	bl	800aa14 <_ZdlPv>
      }
 8005e4c:	bf00      	nop
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 f85c 	bl	8005f1a <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 8005e62:	4603      	mov	r3, r0
 8005e64:	4618      	mov	r0, r3
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f000 f84e 	bl	8005f1a <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	4293      	cmp	r3, r2
 8005e84:	bf8c      	ite	hi
 8005e86:	2301      	movhi	r3, #1
 8005e88:	2300      	movls	r3, #0
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005e90:	f004 fdd9 	bl	800aa46 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f004 fdbf 	bl	800aa1c <_Znwj>
 8005e9e:	4603      	mov	r3, r0
      }
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <_ZNSt13move_iteratorIPfEC1ES0_>:
      move_iterator(iterator_type __i)
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <_ZSt18uninitialized_copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b086      	sub	sp, #24
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	60f8      	str	r0, [r7, #12]
 8005ece:	60b9      	str	r1, [r7, #8]
 8005ed0:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	68b9      	ldr	r1, [r7, #8]
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 f829 	bl	8005f32 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPfES3_EET0_T_S6_S5_>
 8005ee0:	4603      	mov	r3, r0
    }
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3718      	adds	r7, #24
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8005eea:	b590      	push	{r4, r7, lr}
 8005eec:	b085      	sub	sp, #20
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	60f8      	str	r0, [r7, #12]
 8005ef2:	60b9      	str	r1, [r7, #8]
 8005ef4:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f000 f82b 	bl	8005f52 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8005efc:	4604      	mov	r4, r0
 8005efe:	68b8      	ldr	r0, [r7, #8]
 8005f00:	f000 f827 	bl	8005f52 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8005f04:	4603      	mov	r3, r0
	       __result));
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	4619      	mov	r1, r3
 8005f0a:	4620      	mov	r0, r4
 8005f0c:	f000 f82c 	bl	8005f68 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 8005f10:	4603      	mov	r3, r0
    }
 8005f12:	4618      	mov	r0, r3
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd90      	pop	{r4, r7, pc}

08005f1a <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8005f22:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005f26:	4618      	mov	r0, r3
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPfES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b084      	sub	sp, #16
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	60f8      	str	r0, [r7, #12]
 8005f3a:	60b9      	str	r1, [r7, #8]
 8005f3c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	68b9      	ldr	r1, [r7, #8]
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f000 f82c 	bl	8005fa0 <_ZSt4copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8005f68:	b5b0      	push	{r4, r5, r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 f82b 	bl	8005fd0 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	68b8      	ldr	r0, [r7, #8]
 8005f7e:	f000 f827 	bl	8005fd0 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8005f82:	4605      	mov	r5, r0
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f831 	bl	8005fec <_ZSt12__niter_baseIPfET_S1_>
 8005f8a:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	4629      	mov	r1, r5
 8005f90:	4620      	mov	r0, r4
 8005f92:	f000 f836 	bl	8006002 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 8005f96:	4603      	mov	r3, r0
    }
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bdb0      	pop	{r4, r5, r7, pc}

08005fa0 <_ZSt4copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8005fa0:	b590      	push	{r4, r7, lr}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f000 f83a 	bl	8006026 <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	68b8      	ldr	r0, [r7, #8]
 8005fb6:	f000 f836 	bl	8006026 <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8005fba:	4603      	mov	r3, r0
	       __result));
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f000 f841 	bl	8006048 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>
 8005fc6:	4603      	mov	r3, r0
    }
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd90      	pop	{r4, r7, pc}

08005fd0 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8005fd8:	1d3b      	adds	r3, r7, #4
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 f850 	bl	8006080 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3708      	adds	r7, #8
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006002:	b580      	push	{r7, lr}
 8006004:	b086      	sub	sp, #24
 8006006:	af00      	add	r7, sp, #0
 8006008:	60f8      	str	r0, [r7, #12]
 800600a:	60b9      	str	r1, [r7, #8]
 800600c:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 800600e:	2301      	movs	r3, #1
 8006010:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	68b9      	ldr	r1, [r7, #8]
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f000 f83d 	bl	8006096 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 800601c:	4603      	mov	r3, r0
    }
 800601e:	4618      	mov	r0, r3
 8006020:	3718      	adds	r7, #24
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8006026:	b580      	push	{r7, lr}
 8006028:	b082      	sub	sp, #8
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 800602e:	1d3b      	adds	r3, r7, #4
 8006030:	4618      	mov	r0, r3
 8006032:	f000 f84d 	bl	80060d0 <_ZNKSt13move_iteratorIPfE4baseEv>
 8006036:	4603      	mov	r3, r0
 8006038:	4618      	mov	r0, r3
 800603a:	f000 f855 	bl	80060e8 <_ZSt12__miter_baseIPfET_S1_>
 800603e:	4603      	mov	r3, r0
 8006040:	4618      	mov	r0, r3
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8006048:	b5b0      	push	{r4, r5, r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f7ff ffc9 	bl	8005fec <_ZSt12__niter_baseIPfET_S1_>
 800605a:	4604      	mov	r4, r0
 800605c:	68b8      	ldr	r0, [r7, #8]
 800605e:	f7ff ffc5 	bl	8005fec <_ZSt12__niter_baseIPfET_S1_>
 8006062:	4605      	mov	r5, r0
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7ff ffc1 	bl	8005fec <_ZSt12__niter_baseIPfET_S1_>
 800606a:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 800606c:	461a      	mov	r2, r3
 800606e:	4629      	mov	r1, r5
 8006070:	4620      	mov	r0, r4
 8006072:	f000 f844 	bl	80060fe <_ZSt13__copy_move_aILb1EPfS0_ET1_T0_S2_S1_>
 8006076:	4603      	mov	r3, r0
    }
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bdb0      	pop	{r4, r5, r7, pc}

08006080 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4618      	mov	r0, r3
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8006096:	b580      	push	{r7, lr}
 8006098:	b086      	sub	sp, #24
 800609a:	af00      	add	r7, sp, #0
 800609c:	60f8      	str	r0, [r7, #12]
 800609e:	60b9      	str	r1, [r7, #8]
 80060a0:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	109b      	asrs	r3, r3, #2
 80060aa:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d006      	beq.n	80060c0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	461a      	mov	r2, r3
 80060b8:	68f9      	ldr	r1, [r7, #12]
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f006 f887 	bl	800c1ce <memmove>
	  return __result + _Num;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	4413      	add	r3, r2
	}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3718      	adds	r7, #24
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <_ZNKSt13move_iteratorIPfE4baseEv>:
      base() const
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4618      	mov	r0, r3
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <_ZSt12__miter_baseIPfET_S1_>:
    __miter_base(_Iterator __it)
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
    { return __it; }
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4618      	mov	r0, r3
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <_ZSt13__copy_move_aILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80060fe:	b580      	push	{r7, lr}
 8006100:	b086      	sub	sp, #24
 8006102:	af00      	add	r7, sp, #0
 8006104:	60f8      	str	r0, [r7, #12]
 8006106:	60b9      	str	r1, [r7, #8]
 8006108:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 800610a:	2301      	movs	r3, #1
 800610c:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	68b9      	ldr	r1, [r7, #8]
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f000 f805 	bl	8006122 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8006118:	4603      	mov	r3, r0
    }
 800611a:	4618      	mov	r0, r3
 800611c:	3718      	adds	r7, #24
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8006122:	b580      	push	{r7, lr}
 8006124:	b086      	sub	sp, #24
 8006126:	af00      	add	r7, sp, #0
 8006128:	60f8      	str	r0, [r7, #12]
 800612a:	60b9      	str	r1, [r7, #8]
 800612c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	109b      	asrs	r3, r3, #2
 8006136:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d006      	beq.n	800614c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	461a      	mov	r2, r3
 8006144:	68f9      	ldr	r1, [r7, #12]
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f006 f841 	bl	800c1ce <memmove>
	  return __result + _Num;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	4413      	add	r3, r2
	}
 8006154:	4618      	mov	r0, r3
 8006156:	3718      	adds	r7, #24
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <LL_ADC_Enable>:
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f043 0201 	orr.w	r2, r3, #1
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	609a      	str	r2, [r3, #8]
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	609a      	str	r2, [r3, #8]
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061a8:	b29b      	uxth	r3, r3
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	370c      	adds	r7, #12
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <LL_ADC_INJ_ReadConversionData12>:
  *         @arg @ref LL_ADC_INJ_RANK_3
  *         @arg @ref LL_ADC_INJ_RANK_4
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_INJ_ReadConversionData12(ADC_TypeDef *ADCx, uint32_t Rank)
{
 80061b6:	b490      	push	{r4, r7}
 80061b8:	b084      	sub	sp, #16
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	6039      	str	r1, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JDRX_REGOFFSET_MASK));
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	333c      	adds	r3, #60	; 0x3c
 80061c4:	4619      	mov	r1, r3
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061cc:	f44f 7240 	mov.w	r2, #768	; 0x300
 80061d0:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	fa92 f2a2 	rbit	r2, r2
 80061d8:	60ba      	str	r2, [r7, #8]
  return result;
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	fab2 f282 	clz	r2, r2
 80061e0:	b2d2      	uxtb	r2, r2
 80061e2:	40d3      	lsrs	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	440b      	add	r3, r1
 80061e8:	461c      	mov	r4, r3
  
  return (uint16_t)(READ_BIT(*preg,
 80061ea:	6823      	ldr	r3, [r4, #0]
                             ADC_JDR1_JDATA)
                   );
 80061ec:	b29b      	uxth	r3, r3
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bc90      	pop	{r4, r7}
 80061f6:	4770      	bx	lr

080061f8 <LL_ADC_IsActiveFlag_JEOS>:
  * @rmtoll SR       JEOC           LL_ADC_IsActiveFlag_JEOS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_JEOS(ADC_TypeDef *ADCx)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b04      	cmp	r3, #4
 800620a:	bf0c      	ite	eq
 800620c:	2301      	moveq	r3, #1
 800620e:	2300      	movne	r3, #0
 8006210:	b2db      	uxtb	r3, r3
}
 8006212:	4618      	mov	r0, r3
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <LL_ADC_ClearFlag_JEOS>:
  * @rmtoll SR       JEOC           LL_ADC_ClearFlag_JEOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_JEOS(ADC_TypeDef *ADCx)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f06f 0204 	mvn.w	r2, #4
 800622c:	601a      	str	r2, [r3, #0]
}
 800622e:	bf00      	nop
 8006230:	370c      	adds	r7, #12
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <LL_ADC_EnableIT_JEOS>:
  * @rmtoll CR1      JEOCIE         LL_ADC_EnableIT_JEOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_JEOS(ADC_TypeDef *ADCx)
{
 800623a:	b480      	push	{r7}
 800623c:	b083      	sub	sp, #12
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	605a      	str	r2, [r3, #4]
}
 800624e:	bf00      	nop
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800625a:	b480      	push	{r7}
 800625c:	b083      	sub	sp, #12
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
 8006262:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006264:	683a      	ldr	r2, [r7, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	619a      	str	r2, [r3, #24]
}
 800626a:	bf00      	nop
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <_ZN3PWMC1Ev>:

#include "STM32SystemPack.h"
#include "paramsetting.h"
//#include "stm32f4xx_ll_tim.h"//need

class PWM {
 8006276:	b480      	push	{r7}
 8006278:	b083      	sub	sp, #12
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	605a      	str	r2, [r3, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	609a      	str	r2, [r3, #8]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4618      	mov	r0, r3
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <_ZN9MotorCtrlC1Ev>:
 *      Author: watashi
 */

#include "MotorCtrl.hpp"

MotorCtrl::MotorCtrl() {
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	4a15      	ldr	r2, [pc, #84]	; (80062f8 <_ZN9MotorCtrlC1Ev+0x60>)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	601a      	str	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	3304      	adds	r3, #4
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 ff2c 	bl	8007108 <_ZN9MotorInfoC1Ev>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7ff ffdd 	bl	8006276 <_ZN3PWMC1Ev>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7ff ffd7 	bl	8006276 <_ZN3PWMC1Ev>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff ffd1 	bl	8006276 <_ZN3PWMC1Ev>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80062da:	4618      	mov	r0, r3
 80062dc:	f7ff ffcb 	bl	8006276 <_ZN3PWMC1Ev>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fd fe0a 	bl	8003f00 <_ZN9DebugCtrlC1Ev>
	// TODO Auto-generated constructor stub

}
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4618      	mov	r0, r3
 80062f0:	3708      	adds	r7, #8
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	0800e464 	.word	0x0800e464

080062fc <_ZN9MotorCtrlD1Ev>:

MotorCtrl::~MotorCtrl() {
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	4a09      	ldr	r2, [pc, #36]	; (800632c <_ZN9MotorCtrlD1Ev+0x30>)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	601a      	str	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006310:	4618      	mov	r0, r3
 8006312:	f7fd fe0b 	bl	8003f2c <_ZN9DebugCtrlD1Ev>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	3304      	adds	r3, #4
 800631a:	4618      	mov	r0, r3
 800631c:	f000 ff28 	bl	8007170 <_ZN9MotorInfoD1Ev>
	// TODO Auto-generated destructor stub
}
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4618      	mov	r0, r3
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	0800e464 	.word	0x0800e464

08006330 <_ZN9MotorCtrlD0Ev>:
MotorCtrl::~MotorCtrl() {
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
}
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f7ff ffdf 	bl	80062fc <_ZN9MotorCtrlD1Ev>
 800633e:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f004 fb68 	bl	800aa18 <_ZdlPvj>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4618      	mov	r0, r3
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <_ZN7MathLibaSERKS_>:
#define MATHLIB_HPP_

#include <vector>
#include "math.h"

class MathLib {
 8006352:	b580      	push	{r7, lr}
 8006354:	b082      	sub	sp, #8
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	6039      	str	r1, [r7, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	1d1a      	adds	r2, r3, #4
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	3304      	adds	r3, #4
 8006364:	4619      	mov	r1, r3
 8006366:	4610      	mov	r0, r2
 8006368:	f000 fc98 	bl	8006c9c <_ZNSt6vectorIfSaIfEEaSERKS1_>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f103 0210 	add.w	r2, r3, #16
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	3310      	adds	r3, #16
 8006376:	4619      	mov	r1, r3
 8006378:	4610      	mov	r0, r2
 800637a:	f000 fc8f 	bl	8006c9c <_ZNSt6vectorIfSaIfEEaSERKS1_>
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	69da      	ldr	r2, [r3, #28]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	61da      	str	r2, [r3, #28]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	6a1a      	ldr	r2, [r3, #32]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	621a      	str	r2, [r3, #32]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4618      	mov	r0, r3
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <_ZN7TimInfoaSERKS_>:
#ifndef TIMINFO_HPP_
#define TIMINFO_HPP_

#include "STM32SystemPack.h"

class TimInfo {
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	605a      	str	r2, [r3, #4]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	689a      	ldr	r2, [r3, #8]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	609a      	str	r2, [r3, #8]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	60da      	str	r2, [r3, #12]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	691a      	ldr	r2, [r3, #16]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	611a      	str	r2, [r3, #16]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4618      	mov	r0, r3
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <_ZN3PIDaSERKS_>:
#ifndef PID_HPP_
#define PID_HPP_

#include <array>

class PID {
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	3304      	adds	r3, #4
 80063e0:	3204      	adds	r2, #4
 80063e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80063e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	691a      	ldr	r2, [r3, #16]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	611a      	str	r2, [r3, #16]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	695a      	ldr	r2, [r3, #20]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	615a      	str	r2, [r3, #20]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	699a      	ldr	r2, [r3, #24]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	619a      	str	r2, [r3, #24]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	69da      	ldr	r2, [r3, #28]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	61da      	str	r2, [r3, #28]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	6a1a      	ldr	r2, [r3, #32]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	621a      	str	r2, [r3, #32]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	625a      	str	r2, [r3, #36]	; 0x24
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4618      	mov	r0, r3
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <_ZN9ArgSensoraSERKS_>:
#ifndef ARGSENSOR_HPP_
#define ARGSENSOR_HPP_

#include "math.h"

class ArgSensor {
 8006426:	b480      	push	{r7}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
 800642e:	6039      	str	r1, [r7, #0]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	605a      	str	r2, [r3, #4]
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	689a      	ldr	r2, [r3, #8]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	609a      	str	r2, [r3, #8]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	68da      	ldr	r2, [r3, #12]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	60da      	str	r2, [r3, #12]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	7c1a      	ldrb	r2, [r3, #16]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	741a      	strb	r2, [r3, #16]
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	7c5a      	ldrb	r2, [r3, #17]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	745a      	strb	r2, [r3, #17]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	695a      	ldr	r2, [r3, #20]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	615a      	str	r2, [r3, #20]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4618      	mov	r0, r3
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <_ZN9MotorCtrl10InitSystemEv>:

void MotorCtrl::SetPWMch4(PWM pPWM) {
	mPWMch4 = pPWM;
}

void MotorCtrl::InitSystem(void) {
 800646e:	b580      	push	{r7, lr}
 8006470:	b082      	sub	sp, #8
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
	//以下CubeMXに頼らない定義たち
	//mainで既に定義されているとうまく動かないかもしれない。注意。
	GPIOInit::Init();
 8006476:	f003 fec1 	bl	800a1fc <_ZN8GPIOInit4InitEv>
	USARTInit::Init();
 800647a:	f004 fa75 	bl	800a968 <_ZN9USARTInit4InitEv>
	ADCInit::Init();
 800647e:	f003 faef 	bl	8009a60 <_ZN7ADCInit4InitEv>
	TIMInit::Init();
 8006482:	f004 f8f9 	bl	800a678 <_ZN7TIMInit4InitEv>
}
 8006486:	bf00      	nop
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
	...

08006490 <_ZN9MotorCtrl7InitPWMEv>:

void MotorCtrl::InitPWM(void) {
 8006490:	b590      	push	{r4, r7, lr}
 8006492:	b093      	sub	sp, #76	; 0x4c
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
	PWM PWM_Object1; //PWMのHWを叩くClass
 8006498:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800649c:	4618      	mov	r0, r3
 800649e:	f7ff feea 	bl	8006276 <_ZN3PWMC1Ev>
	PWM PWM_Object2;
 80064a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7ff fee5 	bl	8006276 <_ZN3PWMC1Ev>
	PWM PWM_Object3;
 80064ac:	f107 0318 	add.w	r3, r7, #24
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7ff fee0 	bl	8006276 <_ZN3PWMC1Ev>
	PWM PWM_Object4;
 80064b6:	f107 0308 	add.w	r3, r7, #8
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7ff fedb 	bl	8006276 <_ZN3PWMC1Ev>

	//LL_TIM_DisableBRK(TIM1);//こっちは未検証
	//LL_TIM_DisableIT_BRK(TIM1);//効かない

	PWM_Object1.setTIM(TIM1);
 80064c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80064c4:	4953      	ldr	r1, [pc, #332]	; (8006614 <_ZN9MotorCtrl7InitPWMEv+0x184>)
 80064c6:	4618      	mov	r0, r3
 80064c8:	f001 fafe 	bl	8007ac8 <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object2.setTIM(TIM1);
 80064cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80064d0:	4950      	ldr	r1, [pc, #320]	; (8006614 <_ZN9MotorCtrl7InitPWMEv+0x184>)
 80064d2:	4618      	mov	r0, r3
 80064d4:	f001 faf8 	bl	8007ac8 <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object3.setTIM(TIM1);
 80064d8:	f107 0318 	add.w	r3, r7, #24
 80064dc:	494d      	ldr	r1, [pc, #308]	; (8006614 <_ZN9MotorCtrl7InitPWMEv+0x184>)
 80064de:	4618      	mov	r0, r3
 80064e0:	f001 faf2 	bl	8007ac8 <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object4.setTIM(TIM1);
 80064e4:	f107 0308 	add.w	r3, r7, #8
 80064e8:	494a      	ldr	r1, [pc, #296]	; (8006614 <_ZN9MotorCtrl7InitPWMEv+0x184>)
 80064ea:	4618      	mov	r0, r3
 80064ec:	f001 faec 	bl	8007ac8 <_ZN3PWM6setTIMEP11TIM_TypeDef>

	PWM_Object1.setCH(1);
 80064f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80064f4:	2101      	movs	r1, #1
 80064f6:	4618      	mov	r0, r3
 80064f8:	f001 faf4 	bl	8007ae4 <_ZN3PWM5setCHEi>
	PWM_Object2.setCH(2);
 80064fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006500:	2102      	movs	r1, #2
 8006502:	4618      	mov	r0, r3
 8006504:	f001 faee 	bl	8007ae4 <_ZN3PWM5setCHEi>
	PWM_Object3.setCH(3);
 8006508:	f107 0318 	add.w	r3, r7, #24
 800650c:	2103      	movs	r1, #3
 800650e:	4618      	mov	r0, r3
 8006510:	f001 fae8 	bl	8007ae4 <_ZN3PWM5setCHEi>
	PWM_Object4.setCH(4);
 8006514:	f107 0308 	add.w	r3, r7, #8
 8006518:	2104      	movs	r1, #4
 800651a:	4618      	mov	r0, r3
 800651c:	f001 fae2 	bl	8007ae4 <_ZN3PWM5setCHEi>

	PWM_Object1.fInit(PWM_COUNT);
 8006520:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006524:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8006528:	4618      	mov	r0, r3
 800652a:	f001 fae9 	bl	8007b00 <_ZN3PWM5fInitEi>
	PWM_Object2.fInit(PWM_COUNT);
 800652e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006532:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8006536:	4618      	mov	r0, r3
 8006538:	f001 fae2 	bl	8007b00 <_ZN3PWM5fInitEi>
	PWM_Object3.fInit(PWM_COUNT);
 800653c:	f107 0318 	add.w	r3, r7, #24
 8006540:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8006544:	4618      	mov	r0, r3
 8006546:	f001 fadb 	bl	8007b00 <_ZN3PWM5fInitEi>
	PWM_Object4.fInit(PWM_COUNT);
 800654a:	f107 0308 	add.w	r3, r7, #8
 800654e:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8006552:	4618      	mov	r0, r3
 8006554:	f001 fad4 	bl	8007b00 <_ZN3PWM5fInitEi>

	PWM_Object1.f2Duty(0);//50%duty
 8006558:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800655c:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8006618 <_ZN9MotorCtrl7InitPWMEv+0x188>
 8006560:	4618      	mov	r0, r3
 8006562:	f001 fb4b 	bl	8007bfc <_ZN3PWM6f2DutyEf>
	PWM_Object2.f2Duty(0);
 8006566:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800656a:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8006618 <_ZN9MotorCtrl7InitPWMEv+0x188>
 800656e:	4618      	mov	r0, r3
 8006570:	f001 fb44 	bl	8007bfc <_ZN3PWM6f2DutyEf>
	PWM_Object3.f2Duty(0);
 8006574:	f107 0318 	add.w	r3, r7, #24
 8006578:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8006618 <_ZN9MotorCtrl7InitPWMEv+0x188>
 800657c:	4618      	mov	r0, r3
 800657e:	f001 fb3d 	bl	8007bfc <_ZN3PWM6f2DutyEf>
	PWM_Object4.f2Duty(0);
 8006582:	f107 0308 	add.w	r3, r7, #8
 8006586:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8006618 <_ZN9MotorCtrl7InitPWMEv+0x188>
 800658a:	4618      	mov	r0, r3
 800658c:	f001 fb36 	bl	8007bfc <_ZN3PWM6f2DutyEf>

	LL_GPIO_SetOutputPin(GPIOC, GPIO_PIN_10);
 8006590:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006594:	4821      	ldr	r0, [pc, #132]	; (800661c <_ZN9MotorCtrl7InitPWMEv+0x18c>)
 8006596:	f7ff fe60 	bl	800625a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOC, GPIO_PIN_11);
 800659a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800659e:	481f      	ldr	r0, [pc, #124]	; (800661c <_ZN9MotorCtrl7InitPWMEv+0x18c>)
 80065a0:	f7ff fe5b 	bl	800625a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOC, GPIO_PIN_12);
 80065a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80065a8:	481c      	ldr	r0, [pc, #112]	; (800661c <_ZN9MotorCtrl7InitPWMEv+0x18c>)
 80065aa:	f7ff fe56 	bl	800625a <LL_GPIO_SetOutputPin>

	mPWMch1 = PWM_Object1;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 80065b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80065b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80065ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mPWMch2 = PWM_Object2;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f503 74ae 	add.w	r4, r3, #348	; 0x15c
 80065c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80065c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80065ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mPWMch3 = PWM_Object3;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f503 74b6 	add.w	r4, r3, #364	; 0x16c
 80065d4:	f107 0318 	add.w	r3, r7, #24
 80065d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80065da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mPWMch4 = PWM_Object4;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f503 74be 	add.w	r4, r3, #380	; 0x17c
 80065e4:	f107 0308 	add.w	r3, r7, #8
 80065e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80065ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	//ADC Start
    LL_ADC_Enable( ADC1 );
 80065ee:	480c      	ldr	r0, [pc, #48]	; (8006620 <_ZN9MotorCtrl7InitPWMEv+0x190>)
 80065f0:	f7ff fdb4 	bl	800615c <LL_ADC_Enable>
    LL_ADC_Enable( ADC2 );
 80065f4:	480b      	ldr	r0, [pc, #44]	; (8006624 <_ZN9MotorCtrl7InitPWMEv+0x194>)
 80065f6:	f7ff fdb1 	bl	800615c <LL_ADC_Enable>
    LL_ADC_Enable( ADC3 );
 80065fa:	480b      	ldr	r0, [pc, #44]	; (8006628 <_ZN9MotorCtrl7InitPWMEv+0x198>)
 80065fc:	f7ff fdae 	bl	800615c <LL_ADC_Enable>
    /* ADC1 Injected conversions end interrupt enabling */
    LL_ADC_ClearFlag_JEOS( ADC1 );
 8006600:	4807      	ldr	r0, [pc, #28]	; (8006620 <_ZN9MotorCtrl7InitPWMEv+0x190>)
 8006602:	f7ff fe0c 	bl	800621e <LL_ADC_ClearFlag_JEOS>
    LL_ADC_EnableIT_JEOS( ADC1 );
 8006606:	4806      	ldr	r0, [pc, #24]	; (8006620 <_ZN9MotorCtrl7InitPWMEv+0x190>)
 8006608:	f7ff fe17 	bl	800623a <LL_ADC_EnableIT_JEOS>
}
 800660c:	bf00      	nop
 800660e:	374c      	adds	r7, #76	; 0x4c
 8006610:	46bd      	mov	sp, r7
 8006612:	bd90      	pop	{r4, r7, pc}
 8006614:	40010000 	.word	0x40010000
 8006618:	00000000 	.word	0x00000000
 800661c:	40020800 	.word	0x40020800
 8006620:	40012000 	.word	0x40012000
 8006624:	40012100 	.word	0x40012100
 8006628:	40012200 	.word	0x40012200

0800662c <_ZN7MathLibC1ERKS_>:
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
 8006636:	4a10      	ldr	r2, [pc, #64]	; (8006678 <_ZN7MathLibC1ERKS_+0x4c>)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	1d1a      	adds	r2, r3, #4
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	3304      	adds	r3, #4
 8006644:	4619      	mov	r1, r3
 8006646:	4610      	mov	r0, r2
 8006648:	f7ff f80d 	bl	8005666 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f103 0210 	add.w	r2, r3, #16
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	3310      	adds	r3, #16
 8006656:	4619      	mov	r1, r3
 8006658:	4610      	mov	r0, r2
 800665a:	f7ff f804 	bl	8005666 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	69da      	ldr	r2, [r3, #28]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	61da      	str	r2, [r3, #28]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	6a1a      	ldr	r2, [r3, #32]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	621a      	str	r2, [r3, #32]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4618      	mov	r0, r3
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	0800e454 	.word	0x0800e454

0800667c <_ZN9ArgSensorC1ERKS_>:
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
 8006686:	4a11      	ldr	r2, [pc, #68]	; (80066cc <_ZN9ArgSensorC1ERKS_+0x50>)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	601a      	str	r2, [r3, #0]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	605a      	str	r2, [r3, #4]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	689a      	ldr	r2, [r3, #8]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	609a      	str	r2, [r3, #8]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	68da      	ldr	r2, [r3, #12]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	60da      	str	r2, [r3, #12]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	7c1a      	ldrb	r2, [r3, #16]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	741a      	strb	r2, [r3, #16]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	7c5a      	ldrb	r2, [r3, #17]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	745a      	strb	r2, [r3, #17]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	695a      	ldr	r2, [r3, #20]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	615a      	str	r2, [r3, #20]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4618      	mov	r0, r3
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	0800e414 	.word	0x0800e414

080066d0 <_ZN7TimInfoC1ERKS_>:
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
 80066da:	4a0d      	ldr	r2, [pc, #52]	; (8006710 <_ZN7TimInfoC1ERKS_+0x40>)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	601a      	str	r2, [r3, #0]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	605a      	str	r2, [r3, #4]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	689a      	ldr	r2, [r3, #8]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	609a      	str	r2, [r3, #8]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	68da      	ldr	r2, [r3, #12]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	60da      	str	r2, [r3, #12]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	691a      	ldr	r2, [r3, #16]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	611a      	str	r2, [r3, #16]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4618      	mov	r0, r3
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	0800e494 	.word	0x0800e494

08006714 <_ZN3PIDC1ERKS_>:
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
 800671e:	4a14      	ldr	r2, [pc, #80]	; (8006770 <_ZN3PIDC1ERKS_+0x5c>)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	3304      	adds	r3, #4
 800672a:	3204      	adds	r2, #4
 800672c:	ca07      	ldmia	r2, {r0, r1, r2}
 800672e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	691a      	ldr	r2, [r3, #16]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	611a      	str	r2, [r3, #16]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	695a      	ldr	r2, [r3, #20]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	615a      	str	r2, [r3, #20]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	699a      	ldr	r2, [r3, #24]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	619a      	str	r2, [r3, #24]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	69da      	ldr	r2, [r3, #28]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	61da      	str	r2, [r3, #28]
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	6a1a      	ldr	r2, [r3, #32]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	621a      	str	r2, [r3, #32]
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	625a      	str	r2, [r3, #36]	; 0x24
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4618      	mov	r0, r3
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	0800e484 	.word	0x0800e484

08006774 <_ZN9MotorCtrl13InitMotorInfoEv>:

void MotorCtrl::InitMotorInfo(void) {
 8006774:	b590      	push	{r4, r7, lr}
 8006776:	b0cb      	sub	sp, #300	; 0x12c
 8006778:	af00      	add	r7, sp, #0
 800677a:	1d3b      	adds	r3, r7, #4
 800677c:	6018      	str	r0, [r3, #0]
	{//MathLibの生存時間調整(メモリ空けてくれ!!)
		MathLib mathlibrary;//三角関数を取得
 800677e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006782:	4618      	mov	r0, r3
 8006784:	f7fe fd66 	bl	8005254 <_ZN7MathLibC1Ev>
		int mathlib_size = 512;//ライブラリのサイズを指定
 8006788:	f44f 7300 	mov.w	r3, #512	; 0x200
 800678c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		mathlibrary.fInit(mathlib_size);
 8006790:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006794:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8006798:	4618      	mov	r0, r3
 800679a:	f7fe fdbd 	bl	8005318 <_ZN7MathLib5fInitEi>
		mMotorInfo.setMathLib(mathlibrary);//モータクラスに算術ライブラリを渡す
 800679e:	1d3b      	adds	r3, r7, #4
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	1d1c      	adds	r4, r3, #4
 80067a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80067a8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80067ac:	4611      	mov	r1, r2
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7ff ff3c 	bl	800662c <_ZN7MathLibC1ERKS_>
 80067b4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80067b8:	4619      	mov	r1, r3
 80067ba:	4620      	mov	r0, r4
 80067bc:	f000 fd1d 	bl	80071fa <_ZN9MotorInfo10setMathLibE7MathLib>
 80067c0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7fe fd61 	bl	800528c <_ZN7MathLibD1Ev>
		MathLib mathlibrary;//三角関数を取得
 80067ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7fe fd5c 	bl	800528c <_ZN7MathLibD1Ev>
	}
	{
		ArgSensor sensor; //角度を求める機能を持ったclass
 80067d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80067d8:	4618      	mov	r0, r3
 80067da:	f7fd f9f7 	bl	8003bcc <_ZN9ArgSensorC1Ev>
		sensor.Init();
 80067de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fd fa34 	bl	8003c50 <_ZN9ArgSensor4InitEv>
		mMotorInfo.setArgSensor(sensor);
 80067e8:	1d3b      	adds	r3, r7, #4
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	1d1c      	adds	r4, r3, #4
 80067ee:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80067f2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80067f6:	4611      	mov	r1, r2
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7ff ff3f 	bl	800667c <_ZN9ArgSensorC1ERKS_>
 80067fe:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006802:	4619      	mov	r1, r3
 8006804:	4620      	mov	r0, r4
 8006806:	f000 fd07 	bl	8007218 <_ZN9MotorInfo12setArgSensorE9ArgSensor>
 800680a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800680e:	4618      	mov	r0, r3
 8006810:	f7fd f9fe 	bl	8003c10 <_ZN9ArgSensorD1Ev>
		ArgSensor sensor; //角度を求める機能を持ったclass
 8006814:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006818:	4618      	mov	r0, r3
 800681a:	f7fd f9f9 	bl	8003c10 <_ZN9ArgSensorD1Ev>
	}
	{
		TimInfo Tim_Info;//タイマの経過時間測定Class
 800681e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006822:	4618      	mov	r0, r3
 8006824:	f001 fa1e 	bl	8007c64 <_ZN7TimInfoC1Ev>
		Tim_Info.Init(TIM1);
 8006828:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800682c:	4939      	ldr	r1, [pc, #228]	; (8006914 <_ZN9MotorCtrl13InitMotorInfoEv+0x1a0>)
 800682e:	4618      	mov	r0, r3
 8006830:	f001 fa48 	bl	8007cc4 <_ZN7TimInfo4InitEP11TIM_TypeDef>
		mMotorInfo.setTimInfo(Tim_Info);
 8006834:	1d3b      	adds	r3, r7, #4
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	1d1c      	adds	r4, r3, #4
 800683a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800683e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006842:	4611      	mov	r1, r2
 8006844:	4618      	mov	r0, r3
 8006846:	f7ff ff43 	bl	80066d0 <_ZN7TimInfoC1ERKS_>
 800684a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800684e:	4619      	mov	r1, r3
 8006850:	4620      	mov	r0, r4
 8006852:	f000 fcf1 	bl	8007238 <_ZN9MotorInfo10setTimInfoE7TimInfo>
 8006856:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800685a:	4618      	mov	r0, r3
 800685c:	f001 fa12 	bl	8007c84 <_ZN7TimInfoD1Ev>
		TimInfo Tim_Info;//タイマの経過時間測定Class
 8006860:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006864:	4618      	mov	r0, r3
 8006866:	f001 fa0d 	bl	8007c84 <_ZN7TimInfoD1Ev>
	}
	{//PIDLibの生存時間調整(代入後メモリを解放する)
		PID IqPID;
 800686a:	f107 0308 	add.w	r3, r7, #8
 800686e:	4618      	mov	r0, r3
 8006870:	f001 f8a2 	bl	80079b8 <_ZN3PIDC1Ev>
		PID IdPID;
 8006874:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006878:	4618      	mov	r0, r3
 800687a:	f001 f89d 	bl	80079b8 <_ZN3PIDC1Ev>
		IdPID.SetParam(PID_GAIN_ID_P, PID_GAIN_ID_I, PID_GAIN_ID_D);
 800687e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006882:	ed9f 1a25 	vldr	s2, [pc, #148]	; 8006918 <_ZN9MotorCtrl13InitMotorInfoEv+0x1a4>
 8006886:	eddf 0a24 	vldr	s1, [pc, #144]	; 8006918 <_ZN9MotorCtrl13InitMotorInfoEv+0x1a4>
 800688a:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8006918 <_ZN9MotorCtrl13InitMotorInfoEv+0x1a4>
 800688e:	4618      	mov	r0, r3
 8006890:	f001 f8c2 	bl	8007a18 <_ZN3PID8SetParamEfff>
		IqPID.SetParam(PID_GAIN_IQ_P, PID_GAIN_IQ_I, PID_GAIN_IQ_D);
 8006894:	f107 0308 	add.w	r3, r7, #8
 8006898:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8006918 <_ZN9MotorCtrl13InitMotorInfoEv+0x1a4>
 800689c:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8006918 <_ZN9MotorCtrl13InitMotorInfoEv+0x1a4>
 80068a0:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8006918 <_ZN9MotorCtrl13InitMotorInfoEv+0x1a4>
 80068a4:	4618      	mov	r0, r3
 80068a6:	f001 f8b7 	bl	8007a18 <_ZN3PID8SetParamEfff>
		mMotorInfo.setIdqPIDLib(IdPID, IqPID);
 80068aa:	1d3b      	adds	r3, r7, #4
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	1d1c      	adds	r4, r3, #4
 80068b0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80068b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80068b8:	4611      	mov	r1, r2
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7ff ff2a 	bl	8006714 <_ZN3PIDC1ERKS_>
 80068c0:	f107 0208 	add.w	r2, r7, #8
 80068c4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80068c8:	4611      	mov	r1, r2
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7ff ff22 	bl	8006714 <_ZN3PIDC1ERKS_>
 80068d0:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 80068d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80068d8:	4619      	mov	r1, r3
 80068da:	4620      	mov	r0, r4
 80068dc:	f000 fcbb 	bl	8007256 <_ZN9MotorInfo12setIdqPIDLibE3PIDS0_>
 80068e0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80068e4:	4618      	mov	r0, r3
 80068e6:	f001 f877 	bl	80079d8 <_ZN3PIDD1Ev>
 80068ea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80068ee:	4618      	mov	r0, r3
 80068f0:	f001 f872 	bl	80079d8 <_ZN3PIDD1Ev>
		PID IdPID;
 80068f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80068f8:	4618      	mov	r0, r3
 80068fa:	f001 f86d 	bl	80079d8 <_ZN3PIDD1Ev>
		PID IqPID;
 80068fe:	f107 0308 	add.w	r3, r7, #8
 8006902:	4618      	mov	r0, r3
 8006904:	f001 f868 	bl	80079d8 <_ZN3PIDD1Ev>
		//mMotorInfo.setIganmadeltaPIDLib(IganmaPID, IdeltaPID);
	}
}
 8006908:	bf00      	nop
 800690a:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 800690e:	46bd      	mov	sp, r7
 8006910:	bd90      	pop	{r4, r7, pc}
 8006912:	bf00      	nop
 8006914:	40010000 	.word	0x40010000
 8006918:	3dcccccd 	.word	0x3dcccccd

0800691c <_ZN9MotorCtrl12HighFreqTaskEv>:

void MotorCtrl::HighFreqTask(void) {
 800691c:	b580      	push	{r7, lr}
 800691e:	b08c      	sub	sp, #48	; 0x30
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
	if (LL_ADC_IsActiveFlag_JEOS(ADC1) == 1)
 8006924:	4851      	ldr	r0, [pc, #324]	; (8006a6c <_ZN9MotorCtrl12HighFreqTaskEv+0x150>)
 8006926:	f7ff fc67 	bl	80061f8 <LL_ADC_IsActiveFlag_JEOS>
 800692a:	4603      	mov	r3, r0
 800692c:	2b01      	cmp	r3, #1
 800692e:	bf0c      	ite	eq
 8006930:	2301      	moveq	r3, #1
 8006932:	2300      	movne	r3, #0
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	f000 8093 	beq.w	8006a62 <_ZN9MotorCtrl12HighFreqTaskEv+0x146>
	{
		LL_ADC_ClearFlag_JEOS(ADC1);
 800693c:	484b      	ldr	r0, [pc, #300]	; (8006a6c <_ZN9MotorCtrl12HighFreqTaskEv+0x150>)
 800693e:	f7ff fc6e 	bl	800621e <LL_ADC_ClearFlag_JEOS>
		//エンコーダ読み取り
		float Iu,Iv,Iw;
		//増幅率のバイアス考慮してない。あとで計算すること。
		Iu = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_1);
 8006942:	2101      	movs	r1, #1
 8006944:	4849      	ldr	r0, [pc, #292]	; (8006a6c <_ZN9MotorCtrl12HighFreqTaskEv+0x150>)
 8006946:	f7ff fc36 	bl	80061b6 <LL_ADC_INJ_ReadConversionData12>
 800694a:	4603      	mov	r3, r0
 800694c:	ee07 3a90 	vmov	s15, r3
 8006950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006954:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		Iv = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_2);
 8006958:	f241 1102 	movw	r1, #4354	; 0x1102
 800695c:	4843      	ldr	r0, [pc, #268]	; (8006a6c <_ZN9MotorCtrl12HighFreqTaskEv+0x150>)
 800695e:	f7ff fc2a 	bl	80061b6 <LL_ADC_INJ_ReadConversionData12>
 8006962:	4603      	mov	r3, r0
 8006964:	ee07 3a90 	vmov	s15, r3
 8006968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800696c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		Iw = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_3);
 8006970:	f242 2103 	movw	r1, #8707	; 0x2203
 8006974:	483d      	ldr	r0, [pc, #244]	; (8006a6c <_ZN9MotorCtrl12HighFreqTaskEv+0x150>)
 8006976:	f7ff fc1e 	bl	80061b6 <LL_ADC_INJ_ReadConversionData12>
 800697a:	4603      	mov	r3, r0
 800697c:	ee07 3a90 	vmov	s15, r3
 8006980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006984:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
//		Iu = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_1)/4095;
//		Iv = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_2)/4095;
//		Iw = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_3)/4095;
		mMotorInfo.setIuvw(Iu, Iv, Iw);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	3304      	adds	r3, #4
 800698c:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 8006990:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8006994:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8006998:	4618      	mov	r0, r3
 800699a:	f000 fc90 	bl	80072be <_ZN9MotorInfo7setIuvwEfff>
		//推定誤差計算

		//推定位置計算(センサを叩く)
		//Motor.culcArg();

		mMotorInfo.ForceCommutation();
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	3304      	adds	r3, #4
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 fcb8 	bl	8007318 <_ZN9MotorInfo16ForceCommutationEv>

		//Iuvw -> Idqに変換 (Park,Clark変換)
		mMotorInfo.parkTransform();
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	3304      	adds	r3, #4
 80069ac:	4618      	mov	r0, r3
 80069ae:	f000 fd21 	bl	80073f4 <_ZN9MotorInfo13parkTransformEv>
		mMotorInfo.clarkTransform();
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	3304      	adds	r3, #4
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 fd50 	bl	800745c <_ZN9MotorInfo14clarkTransformEv>

		float Id, Iq;//あとで使う　今は未使用だからエラー吐くはず。
		Id = mMotorInfo.getId();
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	3304      	adds	r3, #4
 80069c0:	4618      	mov	r0, r3
 80069c2:	f000 ff6b 	bl	800789c <_ZN9MotorInfo5getIdEv>
 80069c6:	ed87 0a08 	vstr	s0, [r7, #32]
		Iq = mMotorInfo.getIq();
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	3304      	adds	r3, #4
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 ff73 	bl	80078ba <_ZN9MotorInfo5getIqEv>
 80069d4:	ed87 0a07 	vstr	s0, [r7, #28]

		//指令値入力
		//float Vd_input = 0;
		//float Vq_input = 0.5f;

		float Vganma_input = 0;
 80069d8:	f04f 0300 	mov.w	r3, #0
 80069dc:	61bb      	str	r3, [r7, #24]
		float Vdelta_input = 0;
 80069de:	f04f 0300 	mov.w	r3, #0
 80069e2:	617b      	str	r3, [r7, #20]

		float Id_error;
		float Iq_error;

		Id_error = 0;
 80069e4:	f04f 0300 	mov.w	r3, #0
 80069e8:	613b      	str	r3, [r7, #16]
		Iq_error = 0;
 80069ea:	f04f 0300 	mov.w	r3, #0
 80069ee:	60fb      	str	r3, [r7, #12]
		//Motor.PIDdq_control(Id_error, Iq_error, 0.1);
		//Vd_input = Motor.getVd();
		//Vq_input = Motor.getVq();

		//IO入力?
		LL_ADC_REG_StartConversionSWStart(ADC2);
 80069f0:	481f      	ldr	r0, [pc, #124]	; (8006a70 <_ZN9MotorCtrl12HighFreqTaskEv+0x154>)
 80069f2:	f7ff fbc3 	bl	800617c <LL_ADC_REG_StartConversionSWStart>
		float adc2_input = (float)LL_ADC_REG_ReadConversionData12(ADC2)/4095;
 80069f6:	481e      	ldr	r0, [pc, #120]	; (8006a70 <_ZN9MotorCtrl12HighFreqTaskEv+0x154>)
 80069f8:	f7ff fbd0 	bl	800619c <LL_ADC_REG_ReadConversionData12>
 80069fc:	4603      	mov	r3, r0
 80069fe:	ee07 3a90 	vmov	s15, r3
 8006a02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006a06:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8006a74 <_ZN9MotorCtrl12HighFreqTaskEv+0x158>
 8006a0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a0e:	edc7 7a02 	vstr	s15, [r7, #8]
		//Vq_input = 0;
		//Vd_input = adc_speed;//連れ回し運転

		Vganma_input = adc2_input;//連れ回し運転
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	61bb      	str	r3, [r7, #24]
		Vdelta_input = 0;
 8006a16:	f04f 0300 	mov.w	r3, #0
 8006a1a:	617b      	str	r3, [r7, #20]

		mMotorInfo.setVganma(Vganma_input);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	3304      	adds	r3, #4
 8006a20:	ed97 0a06 	vldr	s0, [r7, #24]
 8006a24:	4618      	mov	r0, r3
 8006a26:	f000 fdad 	bl	8007584 <_ZN9MotorInfo9setVganmaEf>
		mMotorInfo.setVdelta(Vdelta_input);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	ed97 0a05 	vldr	s0, [r7, #20]
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 fdb5 	bl	80075a2 <_ZN9MotorInfo9setVdeltaEf>

		//PWM出力
		MotorOutputTask();
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f81d 	bl	8006a78 <_ZN9MotorCtrl15MotorOutputTaskEv>

		if(DEBUG_MODE){//デバッグモードで入る処理
			MotorCtrl::DebugTask(Iu, Iv, Iw, mMotorInfo.getArgRad());
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	3304      	adds	r3, #4
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 fc54 	bl	80072f0 <_ZN9MotorInfo9getArgRadEv>
 8006a48:	eef0 7a40 	vmov.f32	s15, s0
 8006a4c:	eef0 1a67 	vmov.f32	s3, s15
 8006a50:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 8006a54:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8006a58:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f84f 	bl	8006b00 <_ZN9MotorCtrl9DebugTaskEffff>
	}
/*	else
 * 	{
 * 			LL_ADC_WriteReg(ADC1,ISR,0);
 * 				}*/
}
 8006a62:	bf00      	nop
 8006a64:	3730      	adds	r7, #48	; 0x30
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	40012000 	.word	0x40012000
 8006a70:	40012100 	.word	0x40012100
 8006a74:	457ff000 	.word	0x457ff000

08006a78 <_ZN9MotorCtrl15MotorOutputTaskEv>:

void MotorCtrl::MotorOutputTask(void){
 8006a78:	b590      	push	{r4, r7, lr}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
	mMotorInfo.invClarkGanmaDelta();
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	3304      	adds	r3, #4
 8006a84:	4618      	mov	r0, r3
 8006a86:	f000 fd9b 	bl	80075c0 <_ZN9MotorInfo18invClarkGanmaDeltaEv>
	mMotorInfo.invClarkTransform();
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f000 fe2a 	bl	80076e8 <_ZN9MotorInfo17invClarkTransformEv>
	mMotorInfo.invParkTransform();
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	3304      	adds	r3, #4
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 feb7 	bl	800780c <_ZN9MotorInfo16invParkTransformEv>

	mPWMch1.f2Duty(mMotorInfo.getVu());
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f000 ff15 	bl	80078d8 <_ZN9MotorInfo5getVuEv>
 8006aae:	eef0 7a40 	vmov.f32	s15, s0
 8006ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f001 f8a0 	bl	8007bfc <_ZN3PWM6f2DutyEf>
	mPWMch2.f2Duty(mMotorInfo.getVv());
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f503 74ae 	add.w	r4, r3, #348	; 0x15c
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	3304      	adds	r3, #4
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 ff15 	bl	80078f6 <_ZN9MotorInfo5getVvEv>
 8006acc:	eef0 7a40 	vmov.f32	s15, s0
 8006ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	f001 f891 	bl	8007bfc <_ZN3PWM6f2DutyEf>
	mPWMch3.f2Duty(mMotorInfo.getVw());
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f503 74b6 	add.w	r4, r3, #364	; 0x16c
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f000 ff15 	bl	8007914 <_ZN9MotorInfo5getVwEv>
 8006aea:	eef0 7a40 	vmov.f32	s15, s0
 8006aee:	eeb0 0a67 	vmov.f32	s0, s15
 8006af2:	4620      	mov	r0, r4
 8006af4:	f001 f882 	bl	8007bfc <_ZN3PWM6f2DutyEf>
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd90      	pop	{r4, r7, pc}

08006b00 <_ZN9MotorCtrl9DebugTaskEffff>:


void MotorCtrl::DebugTask(float pIu, float pIv, float pIw, float pArg){
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b088      	sub	sp, #32
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6178      	str	r0, [r7, #20]
 8006b08:	ed87 0a04 	vstr	s0, [r7, #16]
 8006b0c:	edc7 0a03 	vstr	s1, [r7, #12]
 8006b10:	ed87 1a02 	vstr	s2, [r7, #8]
 8006b14:	edc7 1a01 	vstr	s3, [r7, #4]
	int sw = mDebug.GetDbgStatus();
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7fd fa28 	bl	8003f74 <_ZN9DebugCtrl12GetDbgStatusEv>
 8006b24:	61f8      	str	r0, [r7, #28]
	switch(sw){
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	2b03      	cmp	r3, #3
 8006b2a:	d85c      	bhi.n	8006be6 <_ZN9MotorCtrl9DebugTaskEffff+0xe6>
 8006b2c:	a201      	add	r2, pc, #4	; (adr r2, 8006b34 <_ZN9MotorCtrl9DebugTaskEffff+0x34>)
 8006b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b32:	bf00      	nop
 8006b34:	08006b45 	.word	0x08006b45
 8006b38:	08006b83 	.word	0x08006b83
 8006b3c:	08006b99 	.word	0x08006b99
 8006b40:	08006bc5 	.word	0x08006bc5
	case 0:
		if(mMotorInfo.mSensor.GetArgCount() > 24000){
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7fd f8d8 	bl	8003d00 <_ZN9ArgSensor11GetArgCountEv>
 8006b50:	4602      	mov	r2, r0
 8006b52:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 8006b56:	429a      	cmp	r2, r3
 8006b58:	bfcc      	ite	gt
 8006b5a:	2301      	movgt	r3, #1
 8006b5c:	2300      	movle	r3, #0
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d042      	beq.n	8006bea <_ZN9MotorCtrl9DebugTaskEffff+0xea>
		mDebug.DbgInfoRegister(pIu, pIv, pIw, pArg);
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006b6a:	edd7 1a01 	vldr	s3, [r7, #4]
 8006b6e:	ed97 1a02 	vldr	s2, [r7, #8]
 8006b72:	edd7 0a03 	vldr	s1, [r7, #12]
 8006b76:	ed97 0a04 	vldr	s0, [r7, #16]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fd fa06 	bl	8003f8c <_ZN9DebugCtrl15DbgInfoRegisterEffff>
		}
		break;
 8006b80:	e033      	b.n	8006bea <_ZN9MotorCtrl9DebugTaskEffff+0xea>
	case 1:
		//止める動作が必要だと思う
		MotorCtrl::BtnActOFF();
 8006b82:	6978      	ldr	r0, [r7, #20]
 8006b84:	f000 f852 	bl	8006c2c <_ZN9MotorCtrl9BtnActOFFEv>
		mDebug.SetDebugStatus(2);
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006b8e:	2102      	movs	r1, #2
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fd fa32 	bl	8003ffa <_ZN9DebugCtrl14SetDebugStatusEi>
		break;
 8006b96:	e02b      	b.n	8006bf0 <_ZN9MotorCtrl9DebugTaskEffff+0xf0>
	case 2:
		//止まるのを確認したら次にすすめる
		if(mMotorInfo.mSensor.GetArgCount() < 10){
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7fd f8ae 	bl	8003d00 <_ZN9ArgSensor11GetArgCountEv>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b09      	cmp	r3, #9
 8006ba8:	bfd4      	ite	le
 8006baa:	2301      	movle	r3, #1
 8006bac:	2300      	movgt	r3, #0
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d01c      	beq.n	8006bee <_ZN9MotorCtrl9DebugTaskEffff+0xee>
			mDebug.SetDebugStatus(3);
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006bba:	2103      	movs	r1, #3
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7fd fa1c 	bl	8003ffa <_ZN9DebugCtrl14SetDebugStatusEi>
		}
		break;
 8006bc2:	e014      	b.n	8006bee <_ZN9MotorCtrl9DebugTaskEffff+0xee>
	case 3:
		mDebug.PrintStatus();
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7fd fa24 	bl	8004018 <_ZN9DebugCtrl11PrintStatusEv>
		HAL_Delay(1);
 8006bd0:	2001      	movs	r0, #1
 8006bd2:	f7fa fa4b 	bl	800106c <HAL_Delay>
		mDebug.SetDebugStatus(0);
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006bdc:	2100      	movs	r1, #0
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fd fa0b 	bl	8003ffa <_ZN9DebugCtrl14SetDebugStatusEi>
//		//こんな感じで状態遷移の動作をさせればいいのではないでしょうか。
		break;
 8006be4:	e004      	b.n	8006bf0 <_ZN9MotorCtrl9DebugTaskEffff+0xf0>
	default :
		//例外は何もしない
		break;
 8006be6:	bf00      	nop
 8006be8:	e002      	b.n	8006bf0 <_ZN9MotorCtrl9DebugTaskEffff+0xf0>
		break;
 8006bea:	bf00      	nop
 8006bec:	e000      	b.n	8006bf0 <_ZN9MotorCtrl9DebugTaskEffff+0xf0>
		break;
 8006bee:	bf00      	nop
	}
}
 8006bf0:	bf00      	nop
 8006bf2:	3720      	adds	r7, #32
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <_ZN9MotorCtrl6BtnActEv>:



void MotorCtrl::BtnAct(void){//強制転流開始へのトリガ 割り込みから叩くためにここでラッパする
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
	UiCtrl::BtnToggle(); // ON/OFFのトグルスイッチ　BtnActで書き込み、getStateで状態を読む
 8006c00:	f001 f8ca 	bl	8007d98 <_ZN6UiCtrl9BtnToggleEv>
	if(UiCtrl::getState()){
 8006c04:	f001 f8e8 	bl	8007dd8 <_ZN6UiCtrl8getStateEv>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d005      	beq.n	8006c1a <_ZN9MotorCtrl6BtnActEv+0x22>
		mMotorInfo.startForceCommutation();
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	3304      	adds	r3, #4
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 fb35 	bl	8007282 <_ZN9MotorInfo21startForceCommutationEv>
	} else {
		mMotorInfo.stopForceCommutation();
	}
}
 8006c18:	e004      	b.n	8006c24 <_ZN9MotorCtrl6BtnActEv+0x2c>
		mMotorInfo.stopForceCommutation();
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f000 fb3e 	bl	80072a0 <_ZN9MotorInfo20stopForceCommutationEv>
}
 8006c24:	bf00      	nop
 8006c26:	3708      	adds	r7, #8
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <_ZN9MotorCtrl9BtnActOFFEv>:

void MotorCtrl::BtnActOFF(void){//強制転流開始へのトリガOFF 割り込みから叩かないから本来UiCtrlで定義するべき
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
	UiCtrl::BtnActOFF(); // OFFのスイッチ　BtnActOFFで書き込み、getStateで状態を読む
 8006c34:	f001 f8c4 	bl	8007dc0 <_ZN6UiCtrl9BtnActOFFEv>
	mMotorInfo.stopForceCommutation();
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	3304      	adds	r3, #4
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 fb2f 	bl	80072a0 <_ZN9MotorInfo20stopForceCommutationEv>
}
 8006c42:	bf00      	nop
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <_ZN9MotorCtrl7DbgUartENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	mMotorInfo.startForceCommutation();
}


////////////////func of debug ///////////////////
void MotorCtrl::DbgUart(std::string pStr) {
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b088      	sub	sp, #32
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
 8006c52:	6039      	str	r1, [r7, #0]
	UART::Transmit(pStr);
 8006c54:	f107 0308 	add.w	r3, r7, #8
 8006c58:	6839      	ldr	r1, [r7, #0]
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f004 f882 	bl	800ad64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8006c60:	f107 0308 	add.w	r3, r7, #8
 8006c64:	4618      	mov	r0, r3
 8006c66:	f001 f86f 	bl	8007d48 <_ZN4UART8TransmitENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006c6a:	f107 0308 	add.w	r3, r7, #8
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f004 f830 	bl	800acd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8006c74:	bf00      	nop
 8006c76:	3720      	adds	r7, #32
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <_ZN9__gnu_cxx14__alloc_traitsISaIfEE27_S_propagate_on_copy_assignEv>:

    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
 8006c7c:	b480      	push	{r7}
 8006c7e:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 8006c80:	2300      	movs	r3, #0
 8006c82:	4618      	mov	r0, r3
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <_ZN9__gnu_cxx14__alloc_traitsISaIfEE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 8006c8c:	b480      	push	{r7}
 8006c8e:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 8006c90:	2301      	movs	r3, #1
 8006c92:	4618      	mov	r0, r3
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <_ZNSt6vectorIfSaIfEEaSERKS1_>:
    vector<_Tp, _Alloc>::
 8006c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
      if (&__x != this)
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	f000 80e8 	beq.w	8006e80 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1e4>
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 8006cb0:	f7ff ffe4 	bl	8006c7c <_ZN9__gnu_cxx14__alloc_traitsISaIfEE27_S_propagate_on_copy_assignEv>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d044      	beq.n	8006d44 <_ZNSt6vectorIfSaIfEEaSERKS1_+0xa8>
	      if (!_Alloc_traits::_S_always_equal()
 8006cba:	f7ff ffe7 	bl	8006c8c <_ZN9__gnu_cxx14__alloc_traitsISaIfEE15_S_always_equalEv>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	f083 0301 	eor.w	r3, r3, #1
 8006cc4:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d012      	beq.n	8006cf0 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x54>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7fe fd3a 	bl	8005746 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8006cd2:	4604      	mov	r4, r0
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7fe fe41 	bl	800595e <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	4619      	mov	r1, r3
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	f000 f8d2 	bl	8006e8a <_ZStneIfEbRKSaIT_ES3_>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d001      	beq.n	8006cf0 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x54>
 8006cec:	2301      	movs	r3, #1
 8006cee:	e000      	b.n	8006cf2 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x56>
 8006cf0:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d018      	beq.n	8006d28 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x8c>
		  this->clear();
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7fe fc82 	bl	8005600 <_ZNSt6vectorIfSaIfEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	689b      	ldr	r3, [r3, #8]
				- this->_M_impl._M_start);
 8006d06:	461a      	mov	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	109b      	asrs	r3, r3, #2
		  _M_deallocate(this->_M_impl._M_start,
 8006d10:	461a      	mov	r2, r3
 8006d12:	f7fe fe9d 	bl	8005a50 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
		  this->_M_impl._M_start = nullptr;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	609a      	str	r2, [r3, #8]
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7fe fd0b 	bl	8005746 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8006d30:	4604      	mov	r4, r0
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7fe fe12 	bl	800595e <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f000 f8af 	bl	8006ea2 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>
	  const size_type __xlen = __x.size();
 8006d44:	6838      	ldr	r0, [r7, #0]
 8006d46:	f7fe fdeb 	bl	8005920 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8006d4a:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f8b6 	bl	8006ebe <_ZNKSt6vectorIfSaIfEE8capacityEv>
 8006d52:	4602      	mov	r2, r0
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4293      	cmp	r3, r2
 8006d58:	bf8c      	ite	hi
 8006d5a:	2301      	movhi	r3, #1
 8006d5c:	2300      	movls	r3, #0
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d033      	beq.n	8006dcc <_ZNSt6vectorIfSaIfEEaSERKS1_+0x130>
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 8006d64:	6838      	ldr	r0, [r7, #0]
 8006d66:	f7fe fe25 	bl	80059b4 <_ZNKSt6vectorIfSaIfEE5beginEv>
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	6838      	ldr	r0, [r7, #0]
 8006d6e:	f7fe fe35 	bl	80059dc <_ZNKSt6vectorIfSaIfEE3endEv>
 8006d72:	4603      	mov	r3, r0
 8006d74:	4622      	mov	r2, r4
 8006d76:	68f9      	ldr	r1, [r7, #12]
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 f8b1 	bl	8006ee0 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>
 8006d7e:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681c      	ldr	r4, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7fe fcdb 	bl	8005746 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8006d90:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006d92:	461a      	mov	r2, r3
 8006d94:	4629      	mov	r1, r5
 8006d96:	4620      	mov	r0, r4
 8006d98:	f7fe fce0 	bl	800575c <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	689b      	ldr	r3, [r3, #8]
			    - this->_M_impl._M_start);
 8006da6:	461a      	mov	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 8006db0:	461a      	mov	r2, r3
 8006db2:	f7fe fe4d 	bl	8005a50 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
	      this->_M_impl._M_start = __tmp;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68ba      	ldr	r2, [r7, #8]
 8006dba:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	441a      	add	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	609a      	str	r2, [r3, #8]
 8006dca:	e052      	b.n	8006e72 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d6>
	  else if (size() >= __xlen)
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f7fe fda7 	bl	8005920 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	bf94      	ite	ls
 8006dda:	2301      	movls	r3, #1
 8006ddc:	2300      	movhi	r3, #0
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d020      	beq.n	8006e26 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x18a>
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8006de4:	6838      	ldr	r0, [r7, #0]
 8006de6:	f7fe fde5 	bl	80059b4 <_ZNKSt6vectorIfSaIfEE5beginEv>
 8006dea:	4604      	mov	r4, r0
 8006dec:	6838      	ldr	r0, [r7, #0]
 8006dee:	f7fe fdf5 	bl	80059dc <_ZNKSt6vectorIfSaIfEE3endEv>
 8006df2:	4605      	mov	r5, r0
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f7fe febb 	bl	8005b70 <_ZNSt6vectorIfSaIfEE5beginEv>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	4629      	mov	r1, r5
 8006e00:	4620      	mov	r0, r4
 8006e02:	f000 f889 	bl	8006f18 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>
 8006e06:	4604      	mov	r4, r0
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f7fe fceb 	bl	80057e4 <_ZNSt6vectorIfSaIfEE3endEv>
 8006e0e:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fe fc97 	bl	8005746 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8006e18:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	4629      	mov	r1, r5
 8006e1e:	4620      	mov	r0, r4
 8006e20:	f000 f892 	bl	8006f48 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>
 8006e24:	e025      	b.n	8006e72 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d6>
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	681d      	ldr	r5, [r3, #0]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	681c      	ldr	r4, [r3, #0]
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7fe fd76 	bl	8005920 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8006e34:	4603      	mov	r3, r0
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	18e1      	adds	r1, r4, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	461a      	mov	r2, r3
 8006e40:	4628      	mov	r0, r5
 8006e42:	f000 f88f 	bl	8006f64 <_ZSt4copyIPfS0_ET0_T_S2_S1_>
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	681c      	ldr	r4, [r3, #0]
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7fe fd68 	bl	8005920 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8006e50:	4603      	mov	r3, r0
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685e      	ldr	r6, [r3, #4]
					  _M_get_Tp_allocator());
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7fe fc70 	bl	8005746 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8006e66:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8006e68:	4632      	mov	r2, r6
 8006e6a:	4629      	mov	r1, r5
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	f000 f891 	bl	8006f94 <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	441a      	add	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	605a      	str	r2, [r3, #4]
      return *this;
 8006e80:	687b      	ldr	r3, [r7, #4]
    }
 8006e82:	4618      	mov	r0, r3
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006e8a <_ZStneIfEbRKSaIT_ES3_>:
    _GLIBCXX_USE_NOEXCEPT
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
 8006e8a:	b480      	push	{r7}
 8006e8c:	b083      	sub	sp, #12
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
 8006e92:	6039      	str	r1, [r7, #0]
    _GLIBCXX_USE_NOEXCEPT
    { return false; }
 8006e94:	2300      	movs	r3, #0
 8006e96:	4618      	mov	r0, r3
 8006e98:	370c      	adds	r7, #12
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>:
    inline void
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b084      	sub	sp, #16
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_copy_assignment __pocca;
      __do_alloc_on_copy(__one, __two, __pocca());
 8006eac:	461a      	mov	r2, r3
 8006eae:	6839      	ldr	r1, [r7, #0]
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f880 	bl	8006fb6 <_ZSt18__do_alloc_on_copyISaIfEEvRT_RKS1_St17integral_constantIbLb0EE>
    }
 8006eb6:	bf00      	nop
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <_ZNKSt6vectorIfSaIfEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8006ebe:	b480      	push	{r7}
 8006ec0:	b083      	sub	sp, #12
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	689b      	ldr	r3, [r3, #8]
			 - this->_M_impl._M_start); }
 8006eca:	461a      	mov	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	109b      	asrs	r3, r3, #2
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>:
	_M_allocate_and_copy(size_type __n,
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
 8006eec:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	68b9      	ldr	r1, [r7, #8]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fe fe62 	bl	8005bbc <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8006ef8:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7fe fc22 	bl	8005746 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8006f02:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	6839      	ldr	r1, [r7, #0]
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f7fe fd7b 	bl	8005a04 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
	      return __result;
 8006f0e:	697b      	ldr	r3, [r7, #20]
	}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3718      	adds	r7, #24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 8006f18:	b590      	push	{r4, r7, lr}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f7ff f814 	bl	8005f52 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8006f2a:	4604      	mov	r4, r0
 8006f2c:	68b8      	ldr	r0, [r7, #8]
 8006f2e:	f7ff f810 	bl	8005f52 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8006f32:	4603      	mov	r3, r0
	       __result));
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	4619      	mov	r1, r3
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f000 f848 	bl	8006fce <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>
 8006f3e:	4603      	mov	r3, r0
    }
 8006f40:	4618      	mov	r0, r3
 8006f42:	3714      	adds	r7, #20
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd90      	pop	{r4, r7, pc}

08006f48 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8006f54:	68b9      	ldr	r1, [r7, #8]
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f000 f85f 	bl	800701a <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>
    }
 8006f5c:	bf00      	nop
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <_ZSt4copyIPfS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 8006f64:	b590      	push	{r4, r7, lr}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f7ff f8b9 	bl	80060e8 <_ZSt12__miter_baseIPfET_S1_>
 8006f76:	4604      	mov	r4, r0
 8006f78:	68b8      	ldr	r0, [r7, #8]
 8006f7a:	f7ff f8b5 	bl	80060e8 <_ZSt12__miter_baseIPfET_S1_>
 8006f7e:	4603      	mov	r3, r0
	       __result));
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	4619      	mov	r1, r3
 8006f84:	4620      	mov	r0, r4
 8006f86:	f000 f855 	bl	8007034 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>
 8006f8a:	4603      	mov	r3, r0
    }
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3714      	adds	r7, #20
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd90      	pop	{r4, r7, pc}

08006f94 <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	607a      	str	r2, [r7, #4]
 8006fa0:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	68b9      	ldr	r1, [r7, #8]
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f000 f860 	bl	800706c <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>
 8006fac:	4603      	mov	r3, r0
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <_ZSt18__do_alloc_on_copyISaIfEEvRT_RKS1_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 8006fb6:	b480      	push	{r7}
 8006fb8:	b085      	sub	sp, #20
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	60f8      	str	r0, [r7, #12]
 8006fbe:	60b9      	str	r1, [r7, #8]
 8006fc0:	713a      	strb	r2, [r7, #4]
    { }
 8006fc2:	bf00      	nop
 8006fc4:	3714      	adds	r7, #20
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8006fce:	b5b0      	push	{r4, r5, r7, lr}
 8006fd0:	b086      	sub	sp, #24
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	60f8      	str	r0, [r7, #12]
 8006fd6:	60b9      	str	r1, [r7, #8]
 8006fd8:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f7fe fff8 	bl	8005fd0 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	68b8      	ldr	r0, [r7, #8]
 8006fe4:	f7fe fff4 	bl	8005fd0 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8006fe8:	4605      	mov	r5, r0
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f850 	bl	8007090 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	4629      	mov	r1, r5
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	f7ff f803 	bl	8006002 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 8007000:	f107 0214 	add.w	r2, r7, #20
 8007004:	f107 0310 	add.w	r3, r7, #16
 8007008:	4611      	mov	r1, r2
 800700a:	4618      	mov	r0, r3
 800700c:	f7fe fd58 	bl	8005ac0 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8007010:	693b      	ldr	r3, [r7, #16]
    }
 8007012:	4618      	mov	r0, r3
 8007014:	3718      	adds	r7, #24
 8007016:	46bd      	mov	sp, r7
 8007018:	bdb0      	pop	{r4, r5, r7, pc}

0800701a <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800701a:	b580      	push	{r7, lr}
 800701c:	b082      	sub	sp, #8
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
 8007022:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8007024:	6839      	ldr	r1, [r7, #0]
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f840 	bl	80070ac <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>
    }
 800702c:	bf00      	nop
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8007034:	b5b0      	push	{r4, r5, r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f7fe ffd3 	bl	8005fec <_ZSt12__niter_baseIPfET_S1_>
 8007046:	4604      	mov	r4, r0
 8007048:	68b8      	ldr	r0, [r7, #8]
 800704a:	f7fe ffcf 	bl	8005fec <_ZSt12__niter_baseIPfET_S1_>
 800704e:	4605      	mov	r5, r0
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f7fe ffcb 	bl	8005fec <_ZSt12__niter_baseIPfET_S1_>
 8007056:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8007058:	461a      	mov	r2, r3
 800705a:	4629      	mov	r1, r5
 800705c:	4620      	mov	r0, r4
 800705e:	f000 f830 	bl	80070c2 <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>
 8007062:	4603      	mov	r3, r0
    }
 8007064:	4618      	mov	r0, r3
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bdb0      	pop	{r4, r5, r7, pc}

0800706c <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8007078:	2301      	movs	r3, #1
 800707a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	68b9      	ldr	r1, [r7, #8]
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f000 f830 	bl	80070e6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>
 8007086:	4603      	mov	r3, r0
    }
 8007088:	4618      	mov	r0, r3
 800708a:	3718      	adds	r7, #24
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8007098:	1d3b      	adds	r3, r7, #4
 800709a:	4618      	mov	r0, r3
 800709c:	f7fe fda2 	bl	8005be4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 80070a0:	4603      	mov	r3, r0
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4618      	mov	r0, r3
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
 80070b6:	bf00      	nop
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b086      	sub	sp, #24
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	60f8      	str	r0, [r7, #12]
 80070ca:	60b9      	str	r1, [r7, #8]
 80070cc:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 80070ce:	2301      	movs	r3, #1
 80070d0:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	68b9      	ldr	r1, [r7, #8]
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f7fe ffdd 	bl	8006096 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 80070dc:	4603      	mov	r3, r0
    }
 80070de:	4618      	mov	r0, r3
 80070e0:	3718      	adds	r7, #24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b084      	sub	sp, #16
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	60f8      	str	r0, [r7, #12]
 80070ee:	60b9      	str	r1, [r7, #8]
 80070f0:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	68b9      	ldr	r1, [r7, #8]
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f7ff ff34 	bl	8006f64 <_ZSt4copyIPfS0_ET0_T_S2_S1_>
 80070fc:	4603      	mov	r3, r0
 80070fe:	4618      	mov	r0, r3
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
	...

08007108 <_ZN9MotorInfoC1Ev>:

#include "MotorInfo.hpp"

//Init

MotorInfo::MotorInfo() {
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	4a16      	ldr	r2, [pc, #88]	; (800716c <_ZN9MotorInfoC1Ev+0x64>)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	601a      	str	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	334c      	adds	r3, #76	; 0x4c
 800711a:	4618      	mov	r0, r3
 800711c:	f7fe f89a 	bl	8005254 <_ZN7MathLibC1Ev>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	337c      	adds	r3, #124	; 0x7c
 8007124:	4618      	mov	r0, r3
 8007126:	f000 fd9d 	bl	8007c64 <_ZN7TimInfoC1Ev>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	3390      	adds	r3, #144	; 0x90
 800712e:	4618      	mov	r0, r3
 8007130:	f000 fc42 	bl	80079b8 <_ZN3PIDC1Ev>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	33b8      	adds	r3, #184	; 0xb8
 8007138:	4618      	mov	r0, r3
 800713a:	f000 fc3d 	bl	80079b8 <_ZN3PIDC1Ev>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	33e0      	adds	r3, #224	; 0xe0
 8007142:	4618      	mov	r0, r3
 8007144:	f000 fc38 	bl	80079b8 <_ZN3PIDC1Ev>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800714e:	4618      	mov	r0, r3
 8007150:	f000 fc32 	bl	80079b8 <_ZN3PIDC1Ev>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800715a:	4618      	mov	r0, r3
 800715c:	f7fc fd36 	bl	8003bcc <_ZN9ArgSensorC1Ev>
	// TODO Auto-generated constructor stub

}
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4618      	mov	r0, r3
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	0800e474 	.word	0x0800e474

08007170 <_ZN9MotorInfoD1Ev>:

MotorInfo::~MotorInfo() {
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	4a16      	ldr	r2, [pc, #88]	; (80071d4 <_ZN9MotorInfoD1Ev+0x64>)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	601a      	str	r2, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8007184:	4618      	mov	r0, r3
 8007186:	f7fc fd43 	bl	8003c10 <_ZN9ArgSensorD1Ev>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8007190:	4618      	mov	r0, r3
 8007192:	f000 fc21 	bl	80079d8 <_ZN3PIDD1Ev>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	33e0      	adds	r3, #224	; 0xe0
 800719a:	4618      	mov	r0, r3
 800719c:	f000 fc1c 	bl	80079d8 <_ZN3PIDD1Ev>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	33b8      	adds	r3, #184	; 0xb8
 80071a4:	4618      	mov	r0, r3
 80071a6:	f000 fc17 	bl	80079d8 <_ZN3PIDD1Ev>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	3390      	adds	r3, #144	; 0x90
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 fc12 	bl	80079d8 <_ZN3PIDD1Ev>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	337c      	adds	r3, #124	; 0x7c
 80071b8:	4618      	mov	r0, r3
 80071ba:	f000 fd63 	bl	8007c84 <_ZN7TimInfoD1Ev>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	334c      	adds	r3, #76	; 0x4c
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7fe f862 	bl	800528c <_ZN7MathLibD1Ev>
	// TODO Auto-generated destructor stub
}
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4618      	mov	r0, r3
 80071cc:	3708      	adds	r7, #8
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	0800e474 	.word	0x0800e474

080071d8 <_ZN9MotorInfoD0Ev>:
MotorInfo::~MotorInfo() {
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
}
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f7ff ffc5 	bl	8007170 <_ZN9MotorInfoD1Ev>
 80071e6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f003 fc14 	bl	800aa18 <_ZdlPvj>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4618      	mov	r0, r3
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <_ZN9MotorInfo10setMathLibE7MathLib>:

void MotorInfo::setMathLib(MathLib pLib){
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b082      	sub	sp, #8
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
 8007202:	6039      	str	r1, [r7, #0]
	mLib = pLib;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	334c      	adds	r3, #76	; 0x4c
 8007208:	6839      	ldr	r1, [r7, #0]
 800720a:	4618      	mov	r0, r3
 800720c:	f7ff f8a1 	bl	8006352 <_ZN7MathLibaSERKS_>
}
 8007210:	bf00      	nop
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <_ZN9MotorInfo12setArgSensorE9ArgSensor>:

MathLib MotorInfo::getMathLib(void){return mLib;}

void MotorInfo::setArgSensor(ArgSensor pSensor){
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
	mSensor = pSensor;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8007228:	6839      	ldr	r1, [r7, #0]
 800722a:	4618      	mov	r0, r3
 800722c:	f7ff f8fb 	bl	8006426 <_ZN9ArgSensoraSERKS_>
}
 8007230:	bf00      	nop
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <_ZN9MotorInfo10setTimInfoE7TimInfo>:

void MotorInfo::setTimInfo(TimInfo pTimInfo) {
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
	mTimInfo = pTimInfo;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	337c      	adds	r3, #124	; 0x7c
 8007246:	6839      	ldr	r1, [r7, #0]
 8007248:	4618      	mov	r0, r3
 800724a:	f7ff f8a5 	bl	8006398 <_ZN7TimInfoaSERKS_>
}
 800724e:	bf00      	nop
 8007250:	3708      	adds	r7, #8
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <_ZN9MotorInfo12setIdqPIDLibE3PIDS0_>:


void MotorInfo::setIdqPIDLib(PID pdPID, PID pqPID){
 8007256:	b580      	push	{r7, lr}
 8007258:	b084      	sub	sp, #16
 800725a:	af00      	add	r7, sp, #0
 800725c:	60f8      	str	r0, [r7, #12]
 800725e:	60b9      	str	r1, [r7, #8]
 8007260:	607a      	str	r2, [r7, #4]
	mIdPID = pdPID;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	3390      	adds	r3, #144	; 0x90
 8007266:	68b9      	ldr	r1, [r7, #8]
 8007268:	4618      	mov	r0, r3
 800726a:	f7ff f8b1 	bl	80063d0 <_ZN3PIDaSERKS_>
	mIqPID = pqPID;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	33b8      	adds	r3, #184	; 0xb8
 8007272:	6879      	ldr	r1, [r7, #4]
 8007274:	4618      	mov	r0, r3
 8007276:	f7ff f8ab 	bl	80063d0 <_ZN3PIDaSERKS_>
}
 800727a:	bf00      	nop
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <_ZN9MotorInfo21startForceCommutationEv>:
//void MotorInfo::setVu(float pVu):mVu(pVu){};
//void MotorInfo::setVv(float pVv):mVv(pVv){};
//void MotorInfo::setVw(float pVw):mVw(pVw){};

//Start,Stop
void MotorInfo::startForceCommutation(void){
 8007282:	b580      	push	{r7, lr}
 8007284:	b082      	sub	sp, #8
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
	mSensor.FC_Start_Stop(true);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8007290:	2101      	movs	r1, #1
 8007292:	4618      	mov	r0, r3
 8007294:	f7fc fd25 	bl	8003ce2 <_ZN9ArgSensor13FC_Start_StopEb>
}
 8007298:	bf00      	nop
 800729a:	3708      	adds	r7, #8
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <_ZN9MotorInfo20stopForceCommutationEv>:

void MotorInfo::stopForceCommutation(void){
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
	mSensor.FC_Start_Stop(false);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80072ae:	2100      	movs	r1, #0
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7fc fd16 	bl	8003ce2 <_ZN9ArgSensor13FC_Start_StopEb>
}
 80072b6:	bf00      	nop
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <_ZN9MotorInfo7setIuvwEfff>:
//Update

void MotorInfo::setIu(float pIu){mIu=pIu;};
void MotorInfo::setIv(float pIv){mIv=pIv;};
void MotorInfo::setIw(float pIw){mIw=pIw;};
void MotorInfo::setIuvw(float pIu, float pIv, float pIw){
 80072be:	b480      	push	{r7}
 80072c0:	b085      	sub	sp, #20
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	60f8      	str	r0, [r7, #12]
 80072c6:	ed87 0a02 	vstr	s0, [r7, #8]
 80072ca:	edc7 0a01 	vstr	s1, [r7, #4]
 80072ce:	ed87 1a00 	vstr	s2, [r7]
	mIu = pIu;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	605a      	str	r2, [r3, #4]
	mIv = pIv;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	609a      	str	r2, [r3, #8]
	mIw = pIw;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	683a      	ldr	r2, [r7, #0]
 80072e2:	60da      	str	r2, [r3, #12]
}
 80072e4:	bf00      	nop
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <_ZN9MotorInfo9getArgRadEv>:

void MotorInfo::setArgDelta(int pArg){
	mArg_delta = pArg;
}

float MotorInfo::getArgRad(void){
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
	return mLib.sizeCountToRad(mArg);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007302:	4619      	mov	r1, r3
 8007304:	4610      	mov	r0, r2
 8007306:	f7fe f93b 	bl	8005580 <_ZN7MathLib14sizeCountToRadEi>
 800730a:	eef0 7a40 	vmov.f32	s15, s0
}
 800730e:	eeb0 0a67 	vmov.f32	s0, s15
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <_ZN9MotorInfo16ForceCommutationEv>:


void MotorInfo::culcArg(void){
}

void MotorInfo::ForceCommutation(void){
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
	mSensor.ForceComArg();
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8007326:	4618      	mov	r0, r3
 8007328:	f7fc fcf6 	bl	8003d18 <_ZN9ArgSensor11ForceComArgEv>
	float ArgOld = mSensor.getArgOld();
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8007332:	4618      	mov	r0, r3
 8007334:	f7fc fcb7 	bl	8003ca6 <_ZN9ArgSensor9getArgOldEv>
 8007338:	ed87 0a05 	vstr	s0, [r7, #20]
	float ArgDlt = mSensor.getArg_delta();
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8007342:	4618      	mov	r0, r3
 8007344:	f7fc fcbe 	bl	8003cc4 <_ZN9ArgSensor12getArg_deltaEv>
 8007348:	ed87 0a04 	vstr	s0, [r7, #16]
	int arg_count = mLib.radToSizeCount(ArgOld);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	334c      	adds	r3, #76	; 0x4c
 8007350:	ed97 0a05 	vldr	s0, [r7, #20]
 8007354:	4618      	mov	r0, r3
 8007356:	f7fe f8d7 	bl	8005508 <_ZN7MathLib14radToSizeCountEf>
 800735a:	60f8      	str	r0, [r7, #12]
	int argdelta_count = mLib.radToSizeCount(-1 * ArgDlt);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	334c      	adds	r3, #76	; 0x4c
 8007360:	edd7 7a04 	vldr	s15, [r7, #16]
 8007364:	eef1 7a67 	vneg.f32	s15, s15
 8007368:	eeb0 0a67 	vmov.f32	s0, s15
 800736c:	4618      	mov	r0, r3
 800736e:	f7fe f8cb 	bl	8005508 <_ZN7MathLib14radToSizeCountEf>
 8007372:	60b8      	str	r0, [r7, #8]
	mArg = arg_count;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	671a      	str	r2, [r3, #112]	; 0x70
	mArg_delta = argdelta_count; //回転方向より符号は反転する
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	675a      	str	r2, [r3, #116]	; 0x74
	setRPM();
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 f805 	bl	8007390 <_ZN9MotorInfo6setRPMEv>
}
 8007386:	bf00      	nop
 8007388:	3718      	adds	r7, #24
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
	...

08007390 <_ZN9MotorInfo6setRPMEv>:

void MotorInfo::setRPM(void){
 8007390:	b580      	push	{r7, lr}
 8007392:	ed2d 8b02 	vpush	{d8}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
	mRPM = (float)(mSensor.getArg() - mSensor.getArgOld()) / (2*3.14f) * 20 * 1000;//適当なパラメータを入れている
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7fc fc70 	bl	8003c88 <_ZN9ArgSensor6getArgEv>
 80073a8:	eeb0 8a40 	vmov.f32	s16, s0
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7fc fc77 	bl	8003ca6 <_ZN9ArgSensor9getArgOldEv>
 80073b8:	eef0 7a40 	vmov.f32	s15, s0
 80073bc:	ee38 7a67 	vsub.f32	s14, s16, s15
 80073c0:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80073ec <_ZN9MotorInfo6setRPMEv+0x5c>
 80073c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80073c8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80073cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80073d0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80073f0 <_ZN9MotorInfo6setRPMEv+0x60>
 80073d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
}
 80073de:	bf00      	nop
 80073e0:	3708      	adds	r7, #8
 80073e2:	46bd      	mov	sp, r7
 80073e4:	ecbd 8b02 	vpop	{d8}
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	40c8f5c3 	.word	0x40c8f5c3
 80073f0:	447a0000 	.word	0x447a0000

080073f4 <_ZN9MotorInfo13parkTransformEv>:

void MotorInfo::parkTransform(void){
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
	mIalpha = mIu - (mIv + mIw)/2;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	ed93 7a01 	vldr	s14, [r3, #4]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	edd3 6a02 	vldr	s13, [r3, #8]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	edd3 7a03 	vldr	s15, [r3, #12]
 800740e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007412:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8007416:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800741a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	edc3 7a04 	vstr	s15, [r3, #16]
	mIbeta = (mIv - mIw)* 1.7320508f/2;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	ed93 7a02 	vldr	s14, [r3, #8]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	edd3 7a03 	vldr	s15, [r3, #12]
 8007430:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007434:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8007458 <_ZN9MotorInfo13parkTransformEv+0x64>
 8007438:	ee27 7a87 	vmul.f32	s14, s15, s14
 800743c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007440:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	edc3 7a05 	vstr	s15, [r3, #20]
};
 800744a:	bf00      	nop
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	3fddb3d7 	.word	0x3fddb3d7

0800745c <_ZN9MotorInfo14clarkTransformEv>:

void MotorInfo::clarkTransform(void){//反時計回り回転
 800745c:	b580      	push	{r7, lr}
 800745e:	ed2d 8b02 	vpush	{d8}
 8007462:	b08e      	sub	sp, #56	; 0x38
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
	mId =  mLib.getCosList().at(mArg) * mIalpha + mLib.getSinList().at(mArg) * mIbeta;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800746e:	f107 0308 	add.w	r3, r7, #8
 8007472:	4611      	mov	r1, r2
 8007474:	4618      	mov	r0, r3
 8007476:	f7fe f836 	bl	80054e6 <_ZN7MathLib10getCosListEv>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800747e:	461a      	mov	r2, r3
 8007480:	f107 0308 	add.w	r3, r7, #8
 8007484:	4611      	mov	r1, r2
 8007486:	4618      	mov	r0, r3
 8007488:	f000 fa53 	bl	8007932 <_ZNSt6vectorIfSaIfEE2atEj>
 800748c:	4603      	mov	r3, r0
 800748e:	ed93 7a00 	vldr	s14, [r3]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	edd3 7a04 	vldr	s15, [r3, #16]
 8007498:	ee27 8a27 	vmul.f32	s16, s14, s15
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80074a2:	f107 0314 	add.w	r3, r7, #20
 80074a6:	4611      	mov	r1, r2
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7fe f80d 	bl	80054c8 <_ZN7MathLib10getSinListEv>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b2:	461a      	mov	r2, r3
 80074b4:	f107 0314 	add.w	r3, r7, #20
 80074b8:	4611      	mov	r1, r2
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 fa39 	bl	8007932 <_ZNSt6vectorIfSaIfEE2atEj>
 80074c0:	4603      	mov	r3, r0
 80074c2:	ed93 7a00 	vldr	s14, [r3]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	edd3 7a05 	vldr	s15, [r3, #20]
 80074cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074d0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	edc3 7a06 	vstr	s15, [r3, #24]
 80074da:	f107 0314 	add.w	r3, r7, #20
 80074de:	4618      	mov	r0, r3
 80074e0:	f7fe f873 	bl	80055ca <_ZNSt6vectorIfSaIfEED1Ev>
 80074e4:	f107 0308 	add.w	r3, r7, #8
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7fe f86e 	bl	80055ca <_ZNSt6vectorIfSaIfEED1Ev>
	mIq = -mLib.getSinList().at(mArg) * mIalpha + mLib.getCosList().at(mArg) * mIbeta;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80074f4:	f107 0320 	add.w	r3, r7, #32
 80074f8:	4611      	mov	r1, r2
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fd ffe4 	bl	80054c8 <_ZN7MathLib10getSinListEv>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007504:	461a      	mov	r2, r3
 8007506:	f107 0320 	add.w	r3, r7, #32
 800750a:	4611      	mov	r1, r2
 800750c:	4618      	mov	r0, r3
 800750e:	f000 fa10 	bl	8007932 <_ZNSt6vectorIfSaIfEE2atEj>
 8007512:	4603      	mov	r3, r0
 8007514:	edd3 7a00 	vldr	s15, [r3]
 8007518:	eeb1 7a67 	vneg.f32	s14, s15
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	edd3 7a04 	vldr	s15, [r3, #16]
 8007522:	ee27 8a27 	vmul.f32	s16, s14, s15
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800752c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007530:	4611      	mov	r1, r2
 8007532:	4618      	mov	r0, r3
 8007534:	f7fd ffd7 	bl	80054e6 <_ZN7MathLib10getCosListEv>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800753c:	461a      	mov	r2, r3
 800753e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007542:	4611      	mov	r1, r2
 8007544:	4618      	mov	r0, r3
 8007546:	f000 f9f4 	bl	8007932 <_ZNSt6vectorIfSaIfEE2atEj>
 800754a:	4603      	mov	r3, r0
 800754c:	ed93 7a00 	vldr	s14, [r3]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	edd3 7a05 	vldr	s15, [r3, #20]
 8007556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800755a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	edc3 7a07 	vstr	s15, [r3, #28]
 8007564:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007568:	4618      	mov	r0, r3
 800756a:	f7fe f82e 	bl	80055ca <_ZNSt6vectorIfSaIfEED1Ev>
 800756e:	f107 0320 	add.w	r3, r7, #32
 8007572:	4618      	mov	r0, r3
 8007574:	f7fe f829 	bl	80055ca <_ZNSt6vectorIfSaIfEED1Ev>
};
 8007578:	bf00      	nop
 800757a:	3738      	adds	r7, #56	; 0x38
 800757c:	46bd      	mov	sp, r7
 800757e:	ecbd 8b02 	vpop	{d8}
 8007582:	bd80      	pop	{r7, pc}

08007584 <_ZN9MotorInfo9setVganmaEf>:
	mVdelta = mVdelta + mIdeltaPID.OutPut();
}

void MotorInfo::setVd(float pVd){mVd = pVd;}
void MotorInfo::setVq(float pVq){mVq = pVq;}
void MotorInfo::setVganma(float pVganma){mVganma = pVganma;}
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	ed87 0a00 	vstr	s0, [r7]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	683a      	ldr	r2, [r7, #0]
 8007594:	645a      	str	r2, [r3, #68]	; 0x44
 8007596:	bf00      	nop
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr

080075a2 <_ZN9MotorInfo9setVdeltaEf>:
void MotorInfo::setVdelta(float pVdelta){mVdelta = pVdelta;}
 80075a2:	b480      	push	{r7}
 80075a4:	b083      	sub	sp, #12
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	ed87 0a00 	vstr	s0, [r7]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	683a      	ldr	r2, [r7, #0]
 80075b2:	649a      	str	r2, [r3, #72]	; 0x48
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <_ZN9MotorInfo18invClarkGanmaDeltaEv>:

void MotorInfo::invClarkGanmaDelta(void){
 80075c0:	b580      	push	{r7, lr}
 80075c2:	ed2d 8b02 	vpush	{d8}
 80075c6:	b08e      	sub	sp, #56	; 0x38
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
	mVd =  mLib.getCosList().at(mArg) * mVganma + mLib.getSinList().at(mArg) * mVdelta;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80075d2:	f107 0308 	add.w	r3, r7, #8
 80075d6:	4611      	mov	r1, r2
 80075d8:	4618      	mov	r0, r3
 80075da:	f7fd ff84 	bl	80054e6 <_ZN7MathLib10getCosListEv>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e2:	461a      	mov	r2, r3
 80075e4:	f107 0308 	add.w	r3, r7, #8
 80075e8:	4611      	mov	r1, r2
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 f9a1 	bl	8007932 <_ZNSt6vectorIfSaIfEE2atEj>
 80075f0:	4603      	mov	r3, r0
 80075f2:	ed93 7a00 	vldr	s14, [r3]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80075fc:	ee27 8a27 	vmul.f32	s16, s14, s15
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8007606:	f107 0314 	add.w	r3, r7, #20
 800760a:	4611      	mov	r1, r2
 800760c:	4618      	mov	r0, r3
 800760e:	f7fd ff5b 	bl	80054c8 <_ZN7MathLib10getSinListEv>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007616:	461a      	mov	r2, r3
 8007618:	f107 0314 	add.w	r3, r7, #20
 800761c:	4611      	mov	r1, r2
 800761e:	4618      	mov	r0, r3
 8007620:	f000 f987 	bl	8007932 <_ZNSt6vectorIfSaIfEE2atEj>
 8007624:	4603      	mov	r3, r0
 8007626:	ed93 7a00 	vldr	s14, [r3]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8007630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007634:	ee78 7a27 	vadd.f32	s15, s16, s15
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 800763e:	f107 0314 	add.w	r3, r7, #20
 8007642:	4618      	mov	r0, r3
 8007644:	f7fd ffc1 	bl	80055ca <_ZNSt6vectorIfSaIfEED1Ev>
 8007648:	f107 0308 	add.w	r3, r7, #8
 800764c:	4618      	mov	r0, r3
 800764e:	f7fd ffbc 	bl	80055ca <_ZNSt6vectorIfSaIfEED1Ev>
	mVq = -mLib.getSinList().at(mArg) * mVganma + mLib.getCosList().at(mArg) * mVdelta;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8007658:	f107 0320 	add.w	r3, r7, #32
 800765c:	4611      	mov	r1, r2
 800765e:	4618      	mov	r0, r3
 8007660:	f7fd ff32 	bl	80054c8 <_ZN7MathLib10getSinListEv>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007668:	461a      	mov	r2, r3
 800766a:	f107 0320 	add.w	r3, r7, #32
 800766e:	4611      	mov	r1, r2
 8007670:	4618      	mov	r0, r3
 8007672:	f000 f95e 	bl	8007932 <_ZNSt6vectorIfSaIfEE2atEj>
 8007676:	4603      	mov	r3, r0
 8007678:	edd3 7a00 	vldr	s15, [r3]
 800767c:	eeb1 7a67 	vneg.f32	s14, s15
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007686:	ee27 8a27 	vmul.f32	s16, s14, s15
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8007690:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007694:	4611      	mov	r1, r2
 8007696:	4618      	mov	r0, r3
 8007698:	f7fd ff25 	bl	80054e6 <_ZN7MathLib10getCosListEv>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076a0:	461a      	mov	r2, r3
 80076a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80076a6:	4611      	mov	r1, r2
 80076a8:	4618      	mov	r0, r3
 80076aa:	f000 f942 	bl	8007932 <_ZNSt6vectorIfSaIfEE2atEj>
 80076ae:	4603      	mov	r3, r0
 80076b0:	ed93 7a00 	vldr	s14, [r3]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80076ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076be:	ee78 7a27 	vadd.f32	s15, s16, s15
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
 80076c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7fd ff7c 	bl	80055ca <_ZNSt6vectorIfSaIfEED1Ev>
 80076d2:	f107 0320 	add.w	r3, r7, #32
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7fd ff77 	bl	80055ca <_ZNSt6vectorIfSaIfEED1Ev>
}
 80076dc:	bf00      	nop
 80076de:	3738      	adds	r7, #56	; 0x38
 80076e0:	46bd      	mov	sp, r7
 80076e2:	ecbd 8b02 	vpop	{d8}
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <_ZN9MotorInfo17invClarkTransformEv>:

void MotorInfo::invClarkTransform(void){
 80076e8:	b580      	push	{r7, lr}
 80076ea:	ed2d 8b02 	vpush	{d8}
 80076ee:	b08e      	sub	sp, #56	; 0x38
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
	mValpha = mLib.getCosList().at(mArg_delta) * mVd - mLib.getSinList().at(mArg_delta) * mVq;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80076fa:	f107 0308 	add.w	r3, r7, #8
 80076fe:	4611      	mov	r1, r2
 8007700:	4618      	mov	r0, r3
 8007702:	f7fd fef0 	bl	80054e6 <_ZN7MathLib10getCosListEv>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800770a:	461a      	mov	r2, r3
 800770c:	f107 0308 	add.w	r3, r7, #8
 8007710:	4611      	mov	r1, r2
 8007712:	4618      	mov	r0, r3
 8007714:	f000 f90d 	bl	8007932 <_ZNSt6vectorIfSaIfEE2atEj>
 8007718:	4603      	mov	r3, r0
 800771a:	ed93 7a00 	vldr	s14, [r3]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8007724:	ee27 8a27 	vmul.f32	s16, s14, s15
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800772e:	f107 0314 	add.w	r3, r7, #20
 8007732:	4611      	mov	r1, r2
 8007734:	4618      	mov	r0, r3
 8007736:	f7fd fec7 	bl	80054c8 <_ZN7MathLib10getSinListEv>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800773e:	461a      	mov	r2, r3
 8007740:	f107 0314 	add.w	r3, r7, #20
 8007744:	4611      	mov	r1, r2
 8007746:	4618      	mov	r0, r3
 8007748:	f000 f8f3 	bl	8007932 <_ZNSt6vectorIfSaIfEE2atEj>
 800774c:	4603      	mov	r3, r0
 800774e:	ed93 7a00 	vldr	s14, [r3]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8007758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800775c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 8007766:	f107 0314 	add.w	r3, r7, #20
 800776a:	4618      	mov	r0, r3
 800776c:	f7fd ff2d 	bl	80055ca <_ZNSt6vectorIfSaIfEED1Ev>
 8007770:	f107 0308 	add.w	r3, r7, #8
 8007774:	4618      	mov	r0, r3
 8007776:	f7fd ff28 	bl	80055ca <_ZNSt6vectorIfSaIfEED1Ev>
	mVbeta  = mLib.getSinList().at(mArg_delta) * mVd + mLib.getCosList().at(mArg_delta) * mVq;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8007780:	f107 0320 	add.w	r3, r7, #32
 8007784:	4611      	mov	r1, r2
 8007786:	4618      	mov	r0, r3
 8007788:	f7fd fe9e 	bl	80054c8 <_ZN7MathLib10getSinListEv>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007790:	461a      	mov	r2, r3
 8007792:	f107 0320 	add.w	r3, r7, #32
 8007796:	4611      	mov	r1, r2
 8007798:	4618      	mov	r0, r3
 800779a:	f000 f8ca 	bl	8007932 <_ZNSt6vectorIfSaIfEE2atEj>
 800779e:	4603      	mov	r3, r0
 80077a0:	ed93 7a00 	vldr	s14, [r3]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80077aa:	ee27 8a27 	vmul.f32	s16, s14, s15
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80077b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80077b8:	4611      	mov	r1, r2
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fd fe93 	bl	80054e6 <_ZN7MathLib10getCosListEv>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077c4:	461a      	mov	r2, r3
 80077c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80077ca:	4611      	mov	r1, r2
 80077cc:	4618      	mov	r0, r3
 80077ce:	f000 f8b0 	bl	8007932 <_ZNSt6vectorIfSaIfEE2atEj>
 80077d2:	4603      	mov	r3, r0
 80077d4:	ed93 7a00 	vldr	s14, [r3]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80077de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077e2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
 80077ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7fd feea 	bl	80055ca <_ZNSt6vectorIfSaIfEED1Ev>
 80077f6:	f107 0320 	add.w	r3, r7, #32
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7fd fee5 	bl	80055ca <_ZNSt6vectorIfSaIfEED1Ev>
};
 8007800:	bf00      	nop
 8007802:	3738      	adds	r7, #56	; 0x38
 8007804:	46bd      	mov	sp, r7
 8007806:	ecbd 8b02 	vpop	{d8}
 800780a:	bd80      	pop	{r7, pc}

0800780c <_ZN9MotorInfo16invParkTransformEv>:

void MotorInfo::invParkTransform(void){
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
	mVu = 0.75f * mValpha;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800781a:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 800781e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	mVv = -0.75f * mValpha + mValpha / 3 + mVbeta / 1.7320508f;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800782e:	eebe 7a08 	vmov.f32	s14, #232	; 0xbf400000 -0.750
 8007832:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800783c:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8007840:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007844:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800784e:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8007898 <_ZN9MotorInfo16invParkTransformEv+0x8c>
 8007852:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007856:	ee77 7a27 	vadd.f32	s15, s14, s15
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	mVw = - mValpha / 3 - mVbeta / 1.7320508f;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007866:	eef1 7a67 	vneg.f32	s15, s15
 800786a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800786e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8007878:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8007898 <_ZN9MotorInfo16invParkTransformEv+0x8c>
 800787c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007880:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
//	Iu + Iv - Iw = -2*Iw;
//	Ialpha * 2/3 + Ibeta * 2/sqrt(3) = -2 Iw;
//
//
//	Iv = -Iu - Iw;
};
 800788a:	bf00      	nop
 800788c:	370c      	adds	r7, #12
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	3fddb3d7 	.word	0x3fddb3d7

0800789c <_ZN9MotorInfo5getIdEv>:

float MotorInfo::getIganma(void){return mIganma;};
float MotorInfo::getIdelta(void){return mIdelta;};

float MotorInfo::getId(void){return mId;};
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	ee07 3a90 	vmov	s15, r3
 80078ac:	eeb0 0a67 	vmov.f32	s0, s15
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <_ZN9MotorInfo5getIqEv>:
float MotorInfo::getIq(void){return mIq;};
 80078ba:	b480      	push	{r7}
 80078bc:	b083      	sub	sp, #12
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	69db      	ldr	r3, [r3, #28]
 80078c6:	ee07 3a90 	vmov	s15, r3
 80078ca:	eeb0 0a67 	vmov.f32	s0, s15
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <_ZN9MotorInfo5getVuEv>:
float MotorInfo::getVq(void){return mVq;};

float MotorInfo::getValpha(void){return mValpha;};
float MotorInfo::getVbeta(void){return mVbeta;};

float MotorInfo::getVu(void){return mVu;};
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e4:	ee07 3a90 	vmov	s15, r3
 80078e8:	eeb0 0a67 	vmov.f32	s0, s15
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <_ZN9MotorInfo5getVvEv>:
float MotorInfo::getVv(void){return mVv;};
 80078f6:	b480      	push	{r7}
 80078f8:	b083      	sub	sp, #12
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007902:	ee07 3a90 	vmov	s15, r3
 8007906:	eeb0 0a67 	vmov.f32	s0, s15
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <_ZN9MotorInfo5getVwEv>:
float MotorInfo::getVw(void){return mVw;};
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007920:	ee07 3a90 	vmov	s15, r3
 8007924:	eeb0 0a67 	vmov.f32	s0, s15
 8007928:	370c      	adds	r7, #12
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <_ZNSt6vectorIfSaIfEE2atEj>:
      at(size_type __n)
 8007932:	b580      	push	{r7, lr}
 8007934:	b082      	sub	sp, #8
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
 800793a:	6039      	str	r1, [r7, #0]
	_M_range_check(__n);
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f80a 	bl	8007958 <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj>
	return (*this)[__n];
 8007944:	6839      	ldr	r1, [r7, #0]
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f826 	bl	8007998 <_ZNSt6vectorIfSaIfEEixEj>
 800794c:	4603      	mov	r3, r0
      }
 800794e:	4618      	mov	r0, r3
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
	...

08007958 <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj>:
      _M_range_check(size_type __n) const
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
	if (__n >= this->size())
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7fd ffdc 	bl	8005920 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8007968:	4602      	mov	r2, r0
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	4293      	cmp	r3, r2
 800796e:	bf2c      	ite	cs
 8007970:	2301      	movcs	r3, #1
 8007972:	2300      	movcc	r3, #0
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d008      	beq.n	800798c <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj+0x34>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7fd ffd0 	bl	8005920 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8007980:	4603      	mov	r3, r0
 8007982:	461a      	mov	r2, r3
 8007984:	6839      	ldr	r1, [r7, #0]
 8007986:	4803      	ldr	r0, [pc, #12]	; (8007994 <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj+0x3c>)
 8007988:	f003 f866 	bl	800aa58 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 800798c:	bf00      	nop
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	0800e380 	.word	0x0800e380

08007998 <_ZNSt6vectorIfSaIfEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4413      	add	r3, r2
      }
 80079ac:	4618      	mov	r0, r3
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <_ZN3PIDC1Ev>:
 * OutPut()でFloatを取り出せば速度型のPID制御が簡単にできるはず。
 */

#include "PID.hpp"

PID::PID(){
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	4a04      	ldr	r2, [pc, #16]	; (80079d4 <_ZN3PIDC1Ev+0x1c>)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	601a      	str	r2, [r3, #0]

}
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4618      	mov	r0, r3
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr
 80079d4:	0800e484 	.word	0x0800e484

080079d8 <_ZN3PIDD1Ev>:
	// TODO Auto-generated constructor stub

	mError.fill(0);
}

PID::~PID() {
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	4a04      	ldr	r2, [pc, #16]	; (80079f4 <_ZN3PIDD1Ev+0x1c>)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4618      	mov	r0, r3
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr
 80079f4:	0800e484 	.word	0x0800e484

080079f8 <_ZN3PIDD0Ev>:
PID::~PID() {
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
}
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7ff ffe9 	bl	80079d8 <_ZN3PIDD1Ev>
 8007a06:	2128      	movs	r1, #40	; 0x28
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f003 f805 	bl	800aa18 <_ZdlPvj>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4618      	mov	r0, r3
 8007a12:	3708      	adds	r7, #8
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <_ZN3PID8SetParamEfff>:

void PID::SetParam(float pGain_p, float pGain_i, float pGain_d){
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	ed87 0a02 	vstr	s0, [r7, #8]
 8007a24:	edc7 0a01 	vstr	s1, [r7, #4]
 8007a28:	ed87 1a00 	vstr	s2, [r7]
	mGain_p = pGain_p;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	615a      	str	r2, [r3, #20]
	mGain_i = pGain_i;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	619a      	str	r2, [r3, #24]
	mGain_d = pGain_d;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	61da      	str	r2, [r3, #28]
}
 8007a3e:	bf00      	nop
 8007a40:	3714      	adds	r7, #20
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <LL_TIM_EnableCounter>:
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b083      	sub	sp, #12
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f043 0201 	orr.w	r2, r3, #1
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	601a      	str	r2, [r3, #0]
}
 8007a5e:	bf00      	nop
 8007a60:	370c      	adds	r7, #12
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr

08007a6a <LL_TIM_SetAutoReload>:
{
 8007a6a:	b480      	push	{r7}
 8007a6c:	b083      	sub	sp, #12
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
 8007a72:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8007a74:	683a      	ldr	r2, [r7, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007a7a:	bf00      	nop
 8007a7c:	370c      	adds	r7, #12
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <LL_TIM_CC_EnableChannel>:
{
 8007a86:	b480      	push	{r7}
 8007a88:	b083      	sub	sp, #12
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
 8007a8e:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a1a      	ldr	r2, [r3, #32]
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	431a      	orrs	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	621a      	str	r2, [r3, #32]
}
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <LL_TIM_EnableAllOutputs>:
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ab4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	645a      	str	r2, [r3, #68]	; 0x44
}
 8007abc:	bf00      	nop
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <_ZN3PWM6setTIMEP11TIM_TypeDef>:


#include "PWM.hpp"


void PWM::setTIM(TIM_TypeDef* pTIMx){
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
	mTIMx = pTIMx;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	683a      	ldr	r2, [r7, #0]
 8007ad6:	601a      	str	r2, [r3, #0]
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <_ZN3PWM5setCHEi>:

//void PWM::setCH(__IO uint32_t pCCR);

void PWM::setCH(int pCH){
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
	mCH = pCH;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	683a      	ldr	r2, [r7, #0]
 8007af2:	605a      	str	r2, [r3, #4]
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <_ZN3PWM5fInitEi>:
	LL_TIM_EnableAllOutputs(mTIMx);// need
	//PWM TIM Init end

}

void PWM::fInit(int pTimReload){
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]

	mTimReload = pTimReload;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	683a      	ldr	r2, [r7, #0]
 8007b0e:	609a      	str	r2, [r3, #8]

	if(mCH==0){//error check
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d100      	bne.n	8007b1a <_ZN3PWM5fInitEi+0x1a>
		while(1){}
 8007b18:	e7fe      	b.n	8007b18 <_ZN3PWM5fInitEi+0x18>
	}

	//mREG Init
	if (mCH == 1){
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d105      	bne.n	8007b2e <_ZN3PWM5fInitEi+0x2e>
		mREG=&(mTIMx->CCR1);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 2){
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d105      	bne.n	8007b42 <_ZN3PWM5fInitEi+0x42>
		mREG=&(mTIMx->CCR2);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 3){
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	d105      	bne.n	8007b56 <_ZN3PWM5fInitEi+0x56>
		mREG=&(mTIMx->CCR3);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 4){
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	2b04      	cmp	r3, #4
 8007b5c:	d105      	bne.n	8007b6a <_ZN3PWM5fInitEi+0x6a>
		mREG=&(mTIMx->CCR4);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	60da      	str	r2, [r3, #12]
	}

	if(mREG==NULL){//error check
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d100      	bne.n	8007b74 <_ZN3PWM5fInitEi+0x74>
		while(1){}
 8007b72:	e7fe      	b.n	8007b72 <_ZN3PWM5fInitEi+0x72>
	}
	//mREG Init end

	//PWM Channel Init
	if(mTIMx==NULL){//error check
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d100      	bne.n	8007b7e <_ZN3PWM5fInitEi+0x7e>
		while(1){}
 8007b7c:	e7fe      	b.n	8007b7c <_ZN3PWM5fInitEi+0x7c>
	}
	if (mCH == 1){
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d105      	bne.n	8007b92 <_ZN3PWM5fInitEi+0x92>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH1);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2101      	movs	r1, #1
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7ff ff7a 	bl	8007a86 <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 2){
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d105      	bne.n	8007ba6 <_ZN3PWM5fInitEi+0xa6>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH2);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2110      	movs	r1, #16
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7ff ff70 	bl	8007a86 <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 3){
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	d106      	bne.n	8007bbc <_ZN3PWM5fInitEi+0xbc>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH3);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7ff ff65 	bl	8007a86 <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 4){
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	2b04      	cmp	r3, #4
 8007bc2:	d106      	bne.n	8007bd2 <_ZN3PWM5fInitEi+0xd2>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH4);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7ff ff5a 	bl	8007a86 <LL_TIM_CC_EnableChannel>
	}
	//PWM Channel Init end

	//PWM TIM Init
	LL_TIM_EnableCounter(mTIMx);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7ff ff37 	bl	8007a4a <LL_TIM_EnableCounter>

	//auto reload Init
	LL_TIM_SetAutoReload(mTIMx, pTimReload);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	683a      	ldr	r2, [r7, #0]
 8007be2:	4611      	mov	r1, r2
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7ff ff40 	bl	8007a6a <LL_TIM_SetAutoReload>

	//LL_TIM_GenerateEvent_UPDATE(TIM1);//
	LL_TIM_EnableAllOutputs(mTIMx);// need
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7ff ff5a 	bl	8007aa8 <LL_TIM_EnableAllOutputs>
	//PWM TIM Init end

}
 8007bf4:	bf00      	nop
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <_ZN3PWM6f2DutyEf>:
void PWM::fDuty(float pfDuty){
	int pDuty = pfDuty * (float)mTimReload;
	WRITE_REG(*mREG, pDuty);
}

void PWM::f2Duty(float pfDuty){
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	ed87 0a00 	vstr	s0, [r7]
	int pDuty = (pfDuty + 1)/2 * (float)mTimReload;
 8007c08:	edd7 7a00 	vldr	s15, [r7]
 8007c0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007c14:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007c18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	ee07 3a90 	vmov	s15, r3
 8007c24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c30:	ee17 3a90 	vmov	r3, s15
 8007c34:	60fb      	str	r3, [r7, #12]
	WRITE_REG(*mREG, pDuty);
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	601a      	str	r2, [r3, #0]
}
 8007c3e:	bf00      	nop
 8007c40:	3714      	adds	r7, #20
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr

08007c4a <LL_TIM_GetAutoReload>:
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b083      	sub	sp, #12
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->ARR));
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	370c      	adds	r7, #12
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
	...

08007c64 <_ZN7TimInfoC1Ev>:


#include "TimInfo.hpp"


TimInfo::TimInfo() {
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	4a04      	ldr	r2, [pc, #16]	; (8007c80 <_ZN7TimInfoC1Ev+0x1c>)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4618      	mov	r0, r3
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	0800e494 	.word	0x0800e494

08007c84 <_ZN7TimInfoD1Ev>:

TimInfo::~TimInfo() {
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	4a04      	ldr	r2, [pc, #16]	; (8007ca0 <_ZN7TimInfoD1Ev+0x1c>)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4618      	mov	r0, r3
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr
 8007ca0:	0800e494 	.word	0x0800e494

08007ca4 <_ZN7TimInfoD0Ev>:
TimInfo::~TimInfo() {
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
}
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f7ff ffe9 	bl	8007c84 <_ZN7TimInfoD1Ev>
 8007cb2:	2114      	movs	r1, #20
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f002 feaf 	bl	800aa18 <_ZdlPvj>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3708      	adds	r7, #8
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <_ZN7TimInfo4InitEP11TIM_TypeDef>:

void TimInfo::Init(TIM_TypeDef *pTIMx) {
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]

	if(pTIMx == NULL) {
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d100      	bne.n	8007cd6 <_ZN7TimInfo4InitEP11TIM_TypeDef+0x12>
		//null ptr error
		while(1){}
 8007cd4:	e7fe      	b.n	8007cd4 <_ZN7TimInfo4InitEP11TIM_TypeDef+0x10>
	}

	mReload = 0;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	609a      	str	r2, [r3, #8]
	mStartTime = 0;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	60da      	str	r2, [r3, #12]
	mStopTime = 0;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	611a      	str	r2, [r3, #16]

	mTIMx = pTIMx;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	683a      	ldr	r2, [r7, #0]
 8007cec:	605a      	str	r2, [r3, #4]
	mReload = LL_TIM_GetAutoReload(pTIMx);
 8007cee:	6838      	ldr	r0, [r7, #0]
 8007cf0:	f7ff ffab 	bl	8007c4a <LL_TIM_GetAutoReload>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	609a      	str	r2, [r3, #8]

}
 8007cfc:	bf00      	nop
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d14:	2b80      	cmp	r3, #128	; 0x80
 8007d16:	bf0c      	ite	eq
 8007d18:	2301      	moveq	r3, #1
 8007d1a:	2300      	movne	r3, #0
 8007d1c:	b2db      	uxtb	r3, r3
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	370c      	adds	r7, #12
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr

08007d2a <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8007d2a:	b480      	push	{r7}
 8007d2c:	b083      	sub	sp, #12
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
 8007d32:	460b      	mov	r3, r1
 8007d34:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8007d36:	78fa      	ldrb	r2, [r7, #3]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	605a      	str	r2, [r3, #4]
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <_ZN4UART8TransmitENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	for(int i = 0; *(str + i) != '/0'; i++){
		//LL_USART_TransmitData8(USART2, *(str + i));
	}
}

void UART::Transmit(std::string	pStr){
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
	const char* str = pStr.c_str();
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f003 f803 	bl	800ad5c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8007d56:	60f8      	str	r0, [r7, #12]
	while(*str){ // forで回すと安定しないので、whileでイテレータとして利用する
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d014      	beq.n	8007d8a <_ZN4UART8TransmitENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x42>
		while(!LL_USART_IsActiveFlag_TXE(USART2)){}; // čekej než bude volno v Tx Bufferu
 8007d60:	480c      	ldr	r0, [pc, #48]	; (8007d94 <_ZN4UART8TransmitENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 8007d62:	f7ff ffcf 	bl	8007d04 <LL_USART_IsActiveFlag_TXE>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	bf0c      	ite	eq
 8007d6c:	2301      	moveq	r3, #1
 8007d6e:	2300      	movne	r3, #0
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d000      	beq.n	8007d78 <_ZN4UART8TransmitENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x30>
 8007d76:	e7f3      	b.n	8007d60 <_ZN4UART8TransmitENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x18>
		LL_USART_TransmitData8(USART2,*str++); // předej znak k odeslání
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	1c5a      	adds	r2, r3, #1
 8007d7c:	60fa      	str	r2, [r7, #12]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	4619      	mov	r1, r3
 8007d82:	4804      	ldr	r0, [pc, #16]	; (8007d94 <_ZN4UART8TransmitENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 8007d84:	f7ff ffd1 	bl	8007d2a <LL_USART_TransmitData8>
	while(*str){ // forで回すと安定しないので、whileでイテレータとして利用する
 8007d88:	e7e6      	b.n	8007d58 <_ZN4UART8TransmitENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10>
//		if(str + i){
//			LL_USART_TransmitData8(USART2, *(str + i));
//		}
////		HAL_Delay(20);
//	}
}
 8007d8a:	bf00      	nop
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	40004400 	.word	0x40004400

08007d98 <_ZN6UiCtrl9BtnToggleEv>:

UiCtrl::~UiCtrl() {
	// TODO Auto-generated destructor stub
}

void UiCtrl::BtnToggle(){
 8007d98:	b480      	push	{r7}
 8007d9a:	af00      	add	r7, sp, #0
	if(isONBtnState == true){//ONの時
 8007d9c:	4b07      	ldr	r3, [pc, #28]	; (8007dbc <_ZN6UiCtrl9BtnToggleEv+0x24>)
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d003      	beq.n	8007dac <_ZN6UiCtrl9BtnToggleEv+0x14>
		isONBtnState = false;//offにするタスク
 8007da4:	4b05      	ldr	r3, [pc, #20]	; (8007dbc <_ZN6UiCtrl9BtnToggleEv+0x24>)
 8007da6:	2200      	movs	r2, #0
 8007da8:	701a      	strb	r2, [r3, #0]
	} else {
		isONBtnState = true;//ONにするタスク
	}
}
 8007daa:	e002      	b.n	8007db2 <_ZN6UiCtrl9BtnToggleEv+0x1a>
		isONBtnState = true;//ONにするタスク
 8007dac:	4b03      	ldr	r3, [pc, #12]	; (8007dbc <_ZN6UiCtrl9BtnToggleEv+0x24>)
 8007dae:	2201      	movs	r2, #1
 8007db0:	701a      	strb	r2, [r3, #0]
}
 8007db2:	bf00      	nop
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr
 8007dbc:	200001fc 	.word	0x200001fc

08007dc0 <_ZN6UiCtrl9BtnActOFFEv>:

void UiCtrl::BtnActOFF(){
 8007dc0:	b480      	push	{r7}
 8007dc2:	af00      	add	r7, sp, #0
	isONBtnState = false;//問答無用でoffにするタスク
 8007dc4:	4b03      	ldr	r3, [pc, #12]	; (8007dd4 <_ZN6UiCtrl9BtnActOFFEv+0x14>)
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	701a      	strb	r2, [r3, #0]
}
 8007dca:	bf00      	nop
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr
 8007dd4:	200001fc 	.word	0x200001fc

08007dd8 <_ZN6UiCtrl8getStateEv>:
void UiCtrl::BtnActON(){
	isONBtnState = true;//問答無用でonにするタスク
}


bool UiCtrl::getState(void){return isONBtnState;}
 8007dd8:	b480      	push	{r7}
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	4b03      	ldr	r3, [pc, #12]	; (8007dec <_ZN6UiCtrl8getStateEv+0x14>)
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	4618      	mov	r0, r3
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	200001fc 	.word	0x200001fc

08007df0 <__NVIC_GetPriorityGrouping>:
{
 8007df0:	b480      	push	{r7}
 8007df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007df4:	4b04      	ldr	r3, [pc, #16]	; (8007e08 <__NVIC_GetPriorityGrouping+0x18>)
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	0a1b      	lsrs	r3, r3, #8
 8007dfa:	f003 0307 	and.w	r3, r3, #7
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr
 8007e08:	e000ed00 	.word	0xe000ed00

08007e0c <__NVIC_EnableIRQ>:
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	4603      	mov	r3, r0
 8007e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	db0b      	blt.n	8007e36 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e1e:	79fb      	ldrb	r3, [r7, #7]
 8007e20:	f003 021f 	and.w	r2, r3, #31
 8007e24:	4907      	ldr	r1, [pc, #28]	; (8007e44 <__NVIC_EnableIRQ+0x38>)
 8007e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e2a:	095b      	lsrs	r3, r3, #5
 8007e2c:	2001      	movs	r0, #1
 8007e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8007e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007e36:	bf00      	nop
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	e000e100 	.word	0xe000e100

08007e48 <__NVIC_SetPriority>:
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	4603      	mov	r3, r0
 8007e50:	6039      	str	r1, [r7, #0]
 8007e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	db0a      	blt.n	8007e72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	b2da      	uxtb	r2, r3
 8007e60:	490c      	ldr	r1, [pc, #48]	; (8007e94 <__NVIC_SetPriority+0x4c>)
 8007e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e66:	0112      	lsls	r2, r2, #4
 8007e68:	b2d2      	uxtb	r2, r2
 8007e6a:	440b      	add	r3, r1
 8007e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007e70:	e00a      	b.n	8007e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	b2da      	uxtb	r2, r3
 8007e76:	4908      	ldr	r1, [pc, #32]	; (8007e98 <__NVIC_SetPriority+0x50>)
 8007e78:	79fb      	ldrb	r3, [r7, #7]
 8007e7a:	f003 030f 	and.w	r3, r3, #15
 8007e7e:	3b04      	subs	r3, #4
 8007e80:	0112      	lsls	r2, r2, #4
 8007e82:	b2d2      	uxtb	r2, r2
 8007e84:	440b      	add	r3, r1
 8007e86:	761a      	strb	r2, [r3, #24]
}
 8007e88:	bf00      	nop
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr
 8007e94:	e000e100 	.word	0xe000e100
 8007e98:	e000ed00 	.word	0xe000ed00

08007e9c <NVIC_EncodePriority>:
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b089      	sub	sp, #36	; 0x24
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f003 0307 	and.w	r3, r3, #7
 8007eae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	f1c3 0307 	rsb	r3, r3, #7
 8007eb6:	2b04      	cmp	r3, #4
 8007eb8:	bf28      	it	cs
 8007eba:	2304      	movcs	r3, #4
 8007ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	3304      	adds	r3, #4
 8007ec2:	2b06      	cmp	r3, #6
 8007ec4:	d902      	bls.n	8007ecc <NVIC_EncodePriority+0x30>
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	3b03      	subs	r3, #3
 8007eca:	e000      	b.n	8007ece <NVIC_EncodePriority+0x32>
 8007ecc:	2300      	movs	r3, #0
 8007ece:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ed0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eda:	43da      	mvns	r2, r3
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	401a      	ands	r2, r3
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007ee4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	fa01 f303 	lsl.w	r3, r1, r3
 8007eee:	43d9      	mvns	r1, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ef4:	4313      	orrs	r3, r2
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3724      	adds	r7, #36	; 0x24
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr

08007f02 <LL_ADC_REG_SetSequencerRanks>:
{
 8007f02:	b490      	push	{r4, r7}
 8007f04:	b086      	sub	sp, #24
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	60b9      	str	r1, [r7, #8]
 8007f0c:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	332c      	adds	r3, #44	; 0x2c
 8007f12:	4619      	mov	r1, r3
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f1a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007f1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f20:	697a      	ldr	r2, [r7, #20]
 8007f22:	fa92 f2a2 	rbit	r2, r2
 8007f26:	613a      	str	r2, [r7, #16]
  return result;
 8007f28:	693a      	ldr	r2, [r7, #16]
 8007f2a:	fab2 f282 	clz	r2, r2
 8007f2e:	b2d2      	uxtb	r2, r2
 8007f30:	40d3      	lsrs	r3, r2
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	440b      	add	r3, r1
 8007f36:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8007f38:	6822      	ldr	r2, [r4, #0]
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	f003 031f 	and.w	r3, r3, #31
 8007f40:	211f      	movs	r1, #31
 8007f42:	fa01 f303 	lsl.w	r3, r1, r3
 8007f46:	43db      	mvns	r3, r3
 8007f48:	401a      	ands	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f003 011f 	and.w	r1, r3, #31
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	f003 031f 	and.w	r3, r3, #31
 8007f56:	fa01 f303 	lsl.w	r3, r1, r3
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	6023      	str	r3, [r4, #0]
}
 8007f5e:	bf00      	nop
 8007f60:	3718      	adds	r7, #24
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bc90      	pop	{r4, r7}
 8007f66:	4770      	bx	lr

08007f68 <LL_ADC_REG_SetFlagEndOfConversion>:
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	431a      	orrs	r2, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	609a      	str	r2, [r3, #8]
}
 8007f82:	bf00      	nop
 8007f84:	370c      	adds	r7, #12
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr

08007f8e <LL_ADC_INJ_SetSequencerRanks>:
{
 8007f8e:	b490      	push	{r4, r7}
 8007f90:	b084      	sub	sp, #16
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	60f8      	str	r0, [r7, #12]
 8007f96:	60b9      	str	r1, [r7, #8]
 8007f98:	607a      	str	r2, [r7, #4]
  register uint32_t tmpreg1 = (READ_BIT(ADCx->JSQR, ADC_JSQR_JL) >> ADC_JSQR_JL_Pos) + 1U;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9e:	0d1b      	lsrs	r3, r3, #20
 8007fa0:	f003 0303 	and.w	r3, r3, #3
 8007fa4:	1c5c      	adds	r4, r3, #1
  MODIFY_REG(ADCx->JSQR,
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	b2d9      	uxtb	r1, r3
 8007fae:	b2e3      	uxtb	r3, r4
 8007fb0:	1acb      	subs	r3, r1, r3
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	3303      	adds	r3, #3
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	4619      	mov	r1, r3
 8007fba:	460b      	mov	r3, r1
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	440b      	add	r3, r1
 8007fc0:	211f      	movs	r1, #31
 8007fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8007fc6:	43db      	mvns	r3, r3
 8007fc8:	401a      	ands	r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f003 011f 	and.w	r1, r3, #31
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	b2d8      	uxtb	r0, r3
 8007fd4:	b2e3      	uxtb	r3, r4
 8007fd6:	1ac3      	subs	r3, r0, r3
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	3303      	adds	r3, #3
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	4618      	mov	r0, r3
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	4403      	add	r3, r0
 8007fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8007fea:	431a      	orrs	r2, r3
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007ff0:	bf00      	nop
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bc90      	pop	{r4, r7}
 8007ff8:	4770      	bx	lr

08007ffa <LL_ADC_INJ_SetOffset>:
{
 8007ffa:	b490      	push	{r4, r7}
 8007ffc:	b086      	sub	sp, #24
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	60f8      	str	r0, [r7, #12]
 8008002:	60b9      	str	r1, [r7, #8]
 8008004:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JOFR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JOFRX_REGOFFSET_MASK));
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	3314      	adds	r3, #20
 800800a:	4619      	mov	r1, r3
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008012:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8008016:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008018:	697a      	ldr	r2, [r7, #20]
 800801a:	fa92 f2a2 	rbit	r2, r2
 800801e:	613a      	str	r2, [r7, #16]
  return result;
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	fab2 f282 	clz	r2, r2
 8008026:	b2d2      	uxtb	r2, r2
 8008028:	40d3      	lsrs	r3, r2
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	440b      	add	r3, r1
 800802e:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8008030:	6823      	ldr	r3, [r4, #0]
 8008032:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008036:	f023 030f 	bic.w	r3, r3, #15
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	4313      	orrs	r3, r2
 800803e:	6023      	str	r3, [r4, #0]
}
 8008040:	bf00      	nop
 8008042:	3718      	adds	r7, #24
 8008044:	46bd      	mov	sp, r7
 8008046:	bc90      	pop	{r4, r7}
 8008048:	4770      	bx	lr

0800804a <LL_ADC_SetChannelSamplingTime>:
{
 800804a:	b490      	push	{r4, r7}
 800804c:	b08a      	sub	sp, #40	; 0x28
 800804e:	af00      	add	r7, sp, #0
 8008050:	60f8      	str	r0, [r7, #12]
 8008052:	60b9      	str	r1, [r7, #8]
 8008054:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	330c      	adds	r3, #12
 800805a:	4619      	mov	r1, r3
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008062:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008066:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008068:	697a      	ldr	r2, [r7, #20]
 800806a:	fa92 f2a2 	rbit	r2, r2
 800806e:	613a      	str	r2, [r7, #16]
  return result;
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	fab2 f282 	clz	r2, r2
 8008076:	b2d2      	uxtb	r2, r2
 8008078:	40d3      	lsrs	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	440b      	add	r3, r1
 800807e:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8008080:	6822      	ldr	r2, [r4, #0]
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8008088:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800808c:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800808e:	69f9      	ldr	r1, [r7, #28]
 8008090:	fa91 f1a1 	rbit	r1, r1
 8008094:	61b9      	str	r1, [r7, #24]
  return result;
 8008096:	69b9      	ldr	r1, [r7, #24]
 8008098:	fab1 f181 	clz	r1, r1
 800809c:	b2c9      	uxtb	r1, r1
 800809e:	40cb      	lsrs	r3, r1
 80080a0:	2107      	movs	r1, #7
 80080a2:	fa01 f303 	lsl.w	r3, r1, r3
 80080a6:	43db      	mvns	r3, r3
 80080a8:	401a      	ands	r2, r3
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80080b0:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80080b4:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080b8:	fa91 f1a1 	rbit	r1, r1
 80080bc:	6239      	str	r1, [r7, #32]
  return result;
 80080be:	6a39      	ldr	r1, [r7, #32]
 80080c0:	fab1 f181 	clz	r1, r1
 80080c4:	b2c9      	uxtb	r1, r1
 80080c6:	40cb      	lsrs	r3, r1
 80080c8:	6879      	ldr	r1, [r7, #4]
 80080ca:	fa01 f303 	lsl.w	r3, r1, r3
 80080ce:	4313      	orrs	r3, r2
 80080d0:	6023      	str	r3, [r4, #0]
}
 80080d2:	bf00      	nop
 80080d4:	3728      	adds	r7, #40	; 0x28
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bc90      	pop	{r4, r7}
 80080da:	4770      	bx	lr

080080dc <LL_ADC_INJ_StartConversionExtTrig>:
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	689a      	ldr	r2, [r3, #8]
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	431a      	orrs	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	609a      	str	r2, [r3, #8]
}
 80080f2:	bf00      	nop
 80080f4:	370c      	adds	r7, #12
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <LL_ADC_DisableIT_EOCS>:
  * @rmtoll CR1      EOCIE          LL_ADC_DisableIT_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
 80080fe:	b480      	push	{r7}
 8008100:	b083      	sub	sp, #12
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	f023 0220 	bic.w	r2, r3, #32
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	605a      	str	r2, [r3, #4]
}
 8008112:	bf00      	nop
 8008114:	370c      	adds	r7, #12
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr

0800811e <LL_ADC_DisableIT_JEOS>:
  * @rmtoll CR1      JEOCIE         LL_ADC_EnableIT_JEOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOS(ADC_TypeDef *ADCx)
{
 800811e:	b480      	push	{r7}
 8008120:	b083      	sub	sp, #12
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	605a      	str	r2, [r3, #4]
}
 8008132:	bf00      	nop
 8008134:	370c      	adds	r7, #12
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr
	...

08008140 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8008148:	4b08      	ldr	r3, [pc, #32]	; (800816c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800814a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800814c:	4907      	ldr	r1, [pc, #28]	; (800816c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4313      	orrs	r3, r2
 8008152:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8008154:	4b05      	ldr	r3, [pc, #20]	; (800816c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4013      	ands	r3, r2
 800815c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800815e:	68fb      	ldr	r3, [r7, #12]
}
 8008160:	bf00      	nop
 8008162:	3714      	adds	r7, #20
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr
 800816c:	40023800 	.word	0x40023800

08008170 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8008178:	4b08      	ldr	r3, [pc, #32]	; (800819c <LL_APB2_GRP1_EnableClock+0x2c>)
 800817a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800817c:	4907      	ldr	r1, [pc, #28]	; (800819c <LL_APB2_GRP1_EnableClock+0x2c>)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4313      	orrs	r3, r2
 8008182:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8008184:	4b05      	ldr	r3, [pc, #20]	; (800819c <LL_APB2_GRP1_EnableClock+0x2c>)
 8008186:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4013      	ands	r3, r2
 800818c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800818e:	68fb      	ldr	r3, [r7, #12]
}
 8008190:	bf00      	nop
 8008192:	3714      	adds	r7, #20
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr
 800819c:	40023800 	.word	0x40023800

080081a0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b096      	sub	sp, #88	; 0x58
 80081a4:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80081a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80081aa:	2200      	movs	r2, #0
 80081ac:	601a      	str	r2, [r3, #0]
 80081ae:	605a      	str	r2, [r3, #4]
 80081b0:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80081b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80081b6:	2200      	movs	r2, #0
 80081b8:	601a      	str	r2, [r3, #0]
 80081ba:	605a      	str	r2, [r3, #4]
 80081bc:	609a      	str	r2, [r3, #8]
 80081be:	60da      	str	r2, [r3, #12]
 80081c0:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80081c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80081c6:	2200      	movs	r2, #0
 80081c8:	601a      	str	r2, [r3, #0]
 80081ca:	605a      	str	r2, [r3, #4]
 80081cc:	609a      	str	r2, [r3, #8]
 80081ce:	60da      	str	r2, [r3, #12]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 80081d0:	f107 0318 	add.w	r3, r7, #24
 80081d4:	2200      	movs	r2, #0
 80081d6:	601a      	str	r2, [r3, #0]
 80081d8:	605a      	str	r2, [r3, #4]
 80081da:	609a      	str	r2, [r3, #8]
 80081dc:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081de:	463b      	mov	r3, r7
 80081e0:	2200      	movs	r2, #0
 80081e2:	601a      	str	r2, [r3, #0]
 80081e4:	605a      	str	r2, [r3, #4]
 80081e6:	609a      	str	r2, [r3, #8]
 80081e8:	60da      	str	r2, [r3, #12]
 80081ea:	611a      	str	r2, [r3, #16]
 80081ec:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80081ee:	f44f 7080 	mov.w	r0, #256	; 0x100
 80081f2:	f7ff ffbd 	bl	8008170 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80081f6:	2004      	movs	r0, #4
 80081f8:	f7ff ffa2 	bl	8008140 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80081fc:	2001      	movs	r0, #1
 80081fe:	f7ff ff9f 	bl	8008140 <LL_AHB1_GRP1_EnableClock>
  PC1   ------> ADC1_IN11
  PC2   ------> ADC1_IN12
  PA0-WKUP   ------> ADC1_IN0
  PA1   ------> ADC1_IN1 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 8008202:	2307      	movs	r3, #7
 8008204:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8008206:	2303      	movs	r3, #3
 8008208:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800820a:	2300      	movs	r3, #0
 800820c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800820e:	463b      	mov	r3, r7
 8008210:	4619      	mov	r1, r3
 8008212:	4869      	ldr	r0, [pc, #420]	; (80083b8 <MX_ADC1_Init+0x218>)
 8008214:	f7fa fe45 	bl	8002ea2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8008218:	2303      	movs	r3, #3
 800821a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800821c:	2303      	movs	r3, #3
 800821e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008220:	2300      	movs	r3, #0
 8008222:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008224:	463b      	mov	r3, r7
 8008226:	4619      	mov	r1, r3
 8008228:	4864      	ldr	r0, [pc, #400]	; (80083bc <MX_ADC1_Init+0x21c>)
 800822a:	f7fa fe3a 	bl	8002ea2 <LL_GPIO_Init>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 800822e:	f7ff fddf 	bl	8007df0 <__NVIC_GetPriorityGrouping>
 8008232:	4603      	mov	r3, r0
 8008234:	2200      	movs	r2, #0
 8008236:	2102      	movs	r1, #2
 8008238:	4618      	mov	r0, r3
 800823a:	f7ff fe2f 	bl	8007e9c <NVIC_EncodePriority>
 800823e:	4603      	mov	r3, r0
 8008240:	4619      	mov	r1, r3
 8008242:	2012      	movs	r0, #18
 8008244:	f7ff fe00 	bl	8007e48 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 8008248:	2012      	movs	r0, #18
 800824a:	f7ff fddf 	bl	8007e0c <__NVIC_EnableIRQ>

  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800824e:	2300      	movs	r3, #0
 8008250:	64fb      	str	r3, [r7, #76]	; 0x4c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8008252:	2300      	movs	r3, #0
 8008254:	653b      	str	r3, [r7, #80]	; 0x50
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8008256:	f44f 7380 	mov.w	r3, #256	; 0x100
 800825a:	657b      	str	r3, [r7, #84]	; 0x54
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800825c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008260:	4619      	mov	r1, r3
 8008262:	4857      	ldr	r0, [pc, #348]	; (80083c0 <MX_ADC1_Init+0x220>)
 8008264:	f7fa fb50 	bl	8002908 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8008268:	2300      	movs	r3, #0
 800826a:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 800826c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008270:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8008272:	2300      	movs	r3, #0
 8008274:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8008276:	2300      	movs	r3, #0
 8008278:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 800827a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800827e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8008280:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008284:	4619      	mov	r1, r3
 8008286:	484e      	ldr	r0, [pc, #312]	; (80083c0 <MX_ADC1_Init+0x220>)
 8008288:	f7fa fb6a 	bl	8002960 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 800828c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008290:	484b      	ldr	r0, [pc, #300]	; (80083c0 <MX_ADC1_Init+0x220>)
 8008292:	f7ff fe69 	bl	8007f68 <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC1);
 8008296:	484a      	ldr	r0, [pc, #296]	; (80083c0 <MX_ADC1_Init+0x220>)
 8008298:	f7ff ff31 	bl	80080fe <LL_ADC_DisableIT_EOCS>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 800829c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80082a0:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80082a2:	2300      	movs	r3, #0
 80082a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80082a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80082aa:	4619      	mov	r1, r3
 80082ac:	4845      	ldr	r0, [pc, #276]	; (80083c4 <MX_ADC1_Init+0x224>)
 80082ae:	f7fa fae3 	bl	8002878 <LL_ADC_CommonInit>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 80082b2:	4a45      	ldr	r2, [pc, #276]	; (80083c8 <MX_ADC1_Init+0x228>)
 80082b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80082b8:	4841      	ldr	r0, [pc, #260]	; (80083c0 <MX_ADC1_Init+0x220>)
 80082ba:	f7ff fe22 	bl	8007f02 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_28CYCLES);
 80082be:	2202      	movs	r2, #2
 80082c0:	4941      	ldr	r1, [pc, #260]	; (80083c8 <MX_ADC1_Init+0x228>)
 80082c2:	483f      	ldr	r0, [pc, #252]	; (80083c0 <MX_ADC1_Init+0x220>)
 80082c4:	f7ff fec1 	bl	800804a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_12);
 80082c8:	4a40      	ldr	r2, [pc, #256]	; (80083cc <MX_ADC1_Init+0x22c>)
 80082ca:	f240 2105 	movw	r1, #517	; 0x205
 80082ce:	483c      	ldr	r0, [pc, #240]	; (80083c0 <MX_ADC1_Init+0x220>)
 80082d0:	f7ff fe17 	bl	8007f02 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_28CYCLES);
 80082d4:	2202      	movs	r2, #2
 80082d6:	493d      	ldr	r1, [pc, #244]	; (80083cc <MX_ADC1_Init+0x22c>)
 80082d8:	4839      	ldr	r0, [pc, #228]	; (80083c0 <MX_ADC1_Init+0x220>)
 80082da:	f7ff feb6 	bl	800804a <LL_ADC_SetChannelSamplingTime>
  /** Configure Injected Channel 
  */
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 80082de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80082e2:	61bb      	str	r3, [r7, #24]
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 80082e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80082e8:	61fb      	str	r3, [r7, #28]
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_1RANK;
 80082ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082ee:	623b      	str	r3, [r7, #32]
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 80082f0:	2300      	movs	r3, #0
 80082f2:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 80082f4:	f107 0318 	add.w	r3, r7, #24
 80082f8:	4619      	mov	r1, r3
 80082fa:	4831      	ldr	r0, [pc, #196]	; (80083c0 <MX_ADC1_Init+0x220>)
 80082fc:	f7fa fb78 	bl	80029f0 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 8008300:	482f      	ldr	r0, [pc, #188]	; (80083c0 <MX_ADC1_Init+0x220>)
 8008302:	f7ff ff0c 	bl	800811e <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_0);
 8008306:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800830a:	2101      	movs	r1, #1
 800830c:	482c      	ldr	r0, [pc, #176]	; (80083c0 <MX_ADC1_Init+0x220>)
 800830e:	f7ff fe3e 	bl	8007f8e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 8008312:	2200      	movs	r2, #0
 8008314:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008318:	4829      	ldr	r0, [pc, #164]	; (80083c0 <MX_ADC1_Init+0x220>)
 800831a:	f7ff fe96 	bl	800804a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_1, 0);
 800831e:	2200      	movs	r2, #0
 8008320:	2101      	movs	r1, #1
 8008322:	4827      	ldr	r0, [pc, #156]	; (80083c0 <MX_ADC1_Init+0x220>)
 8008324:	f7ff fe69 	bl	8007ffa <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8008328:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800832c:	4824      	ldr	r0, [pc, #144]	; (80083c0 <MX_ADC1_Init+0x220>)
 800832e:	f7ff fed5 	bl	80080dc <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8008332:	f107 0318 	add.w	r3, r7, #24
 8008336:	4619      	mov	r1, r3
 8008338:	4821      	ldr	r0, [pc, #132]	; (80083c0 <MX_ADC1_Init+0x220>)
 800833a:	f7fa fb59 	bl	80029f0 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 800833e:	4820      	ldr	r0, [pc, #128]	; (80083c0 <MX_ADC1_Init+0x220>)
 8008340:	f7ff feed 	bl	800811e <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_11);
 8008344:	4a22      	ldr	r2, [pc, #136]	; (80083d0 <MX_ADC1_Init+0x230>)
 8008346:	f241 1102 	movw	r1, #4354	; 0x1102
 800834a:	481d      	ldr	r0, [pc, #116]	; (80083c0 <MX_ADC1_Init+0x220>)
 800834c:	f7ff fe1f 	bl	8007f8e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 8008350:	2200      	movs	r2, #0
 8008352:	491f      	ldr	r1, [pc, #124]	; (80083d0 <MX_ADC1_Init+0x230>)
 8008354:	481a      	ldr	r0, [pc, #104]	; (80083c0 <MX_ADC1_Init+0x220>)
 8008356:	f7ff fe78 	bl	800804a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_2, 0);
 800835a:	2200      	movs	r2, #0
 800835c:	f241 1102 	movw	r1, #4354	; 0x1102
 8008360:	4817      	ldr	r0, [pc, #92]	; (80083c0 <MX_ADC1_Init+0x220>)
 8008362:	f7ff fe4a 	bl	8007ffa <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8008366:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800836a:	4815      	ldr	r0, [pc, #84]	; (80083c0 <MX_ADC1_Init+0x220>)
 800836c:	f7ff feb6 	bl	80080dc <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8008370:	f107 0318 	add.w	r3, r7, #24
 8008374:	4619      	mov	r1, r3
 8008376:	4812      	ldr	r0, [pc, #72]	; (80083c0 <MX_ADC1_Init+0x220>)
 8008378:	f7fa fb3a 	bl	80029f0 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 800837c:	4810      	ldr	r0, [pc, #64]	; (80083c0 <MX_ADC1_Init+0x220>)
 800837e:	f7ff fece 	bl	800811e <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_10);
 8008382:	220a      	movs	r2, #10
 8008384:	f242 2103 	movw	r1, #8707	; 0x2203
 8008388:	480d      	ldr	r0, [pc, #52]	; (80083c0 <MX_ADC1_Init+0x220>)
 800838a:	f7ff fe00 	bl	8007f8e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_3CYCLES);
 800838e:	2200      	movs	r2, #0
 8008390:	210a      	movs	r1, #10
 8008392:	480b      	ldr	r0, [pc, #44]	; (80083c0 <MX_ADC1_Init+0x220>)
 8008394:	f7ff fe59 	bl	800804a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_3, 0);
 8008398:	2200      	movs	r2, #0
 800839a:	f242 2103 	movw	r1, #8707	; 0x2203
 800839e:	4808      	ldr	r0, [pc, #32]	; (80083c0 <MX_ADC1_Init+0x220>)
 80083a0:	f7ff fe2b 	bl	8007ffa <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 80083a4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80083a8:	4805      	ldr	r0, [pc, #20]	; (80083c0 <MX_ADC1_Init+0x220>)
 80083aa:	f7ff fe97 	bl	80080dc <LL_ADC_INJ_StartConversionExtTrig>

}
 80083ae:	bf00      	nop
 80083b0:	3758      	adds	r7, #88	; 0x58
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	40020800 	.word	0x40020800
 80083bc:	40020000 	.word	0x40020000
 80083c0:	40012000 	.word	0x40012000
 80083c4:	40012300 	.word	0x40012300
 80083c8:	02300001 	.word	0x02300001
 80083cc:	0060000c 	.word	0x0060000c
 80083d0:	0030000b 	.word	0x0030000b

080083d4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b092      	sub	sp, #72	; 0x48
 80083d8:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80083da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80083de:	2200      	movs	r2, #0
 80083e0:	601a      	str	r2, [r3, #0]
 80083e2:	605a      	str	r2, [r3, #4]
 80083e4:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80083e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80083ea:	2200      	movs	r2, #0
 80083ec:	601a      	str	r2, [r3, #0]
 80083ee:	605a      	str	r2, [r3, #4]
 80083f0:	609a      	str	r2, [r3, #8]
 80083f2:	60da      	str	r2, [r3, #12]
 80083f4:	611a      	str	r2, [r3, #16]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 80083f6:	f107 0318 	add.w	r3, r7, #24
 80083fa:	2200      	movs	r2, #0
 80083fc:	601a      	str	r2, [r3, #0]
 80083fe:	605a      	str	r2, [r3, #4]
 8008400:	609a      	str	r2, [r3, #8]
 8008402:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008404:	463b      	mov	r3, r7
 8008406:	2200      	movs	r2, #0
 8008408:	601a      	str	r2, [r3, #0]
 800840a:	605a      	str	r2, [r3, #4]
 800840c:	609a      	str	r2, [r3, #8]
 800840e:	60da      	str	r2, [r3, #12]
 8008410:	611a      	str	r2, [r3, #16]
 8008412:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC2);
 8008414:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008418:	f7ff feaa 	bl	8008170 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800841c:	2004      	movs	r0, #4
 800841e:	f7ff fe8f 	bl	8008140 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8008422:	2001      	movs	r0, #1
 8008424:	f7ff fe8c 	bl	8008140 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8008428:	2002      	movs	r0, #2
 800842a:	f7ff fe89 	bl	8008140 <LL_AHB1_GRP1_EnableClock>
  PC0   ------> ADC2_IN10
  PC1   ------> ADC2_IN11
  PA0-WKUP   ------> ADC2_IN0
  PB1   ------> ADC2_IN9 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 800842e:	2303      	movs	r3, #3
 8008430:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8008432:	2303      	movs	r3, #3
 8008434:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008436:	2300      	movs	r3, #0
 8008438:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800843a:	463b      	mov	r3, r7
 800843c:	4619      	mov	r1, r3
 800843e:	4863      	ldr	r0, [pc, #396]	; (80085cc <MX_ADC2_Init+0x1f8>)
 8008440:	f7fa fd2f 	bl	8002ea2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8008444:	2301      	movs	r3, #1
 8008446:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8008448:	2303      	movs	r3, #3
 800844a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800844c:	2300      	movs	r3, #0
 800844e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008450:	463b      	mov	r3, r7
 8008452:	4619      	mov	r1, r3
 8008454:	485e      	ldr	r0, [pc, #376]	; (80085d0 <MX_ADC2_Init+0x1fc>)
 8008456:	f7fa fd24 	bl	8002ea2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800845a:	2302      	movs	r3, #2
 800845c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800845e:	2303      	movs	r3, #3
 8008460:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008462:	2300      	movs	r3, #0
 8008464:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008466:	463b      	mov	r3, r7
 8008468:	4619      	mov	r1, r3
 800846a:	485a      	ldr	r0, [pc, #360]	; (80085d4 <MX_ADC2_Init+0x200>)
 800846c:	f7fa fd19 	bl	8002ea2 <LL_GPIO_Init>

  /* ADC2 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8008470:	f7ff fcbe 	bl	8007df0 <__NVIC_GetPriorityGrouping>
 8008474:	4603      	mov	r3, r0
 8008476:	2200      	movs	r2, #0
 8008478:	2102      	movs	r1, #2
 800847a:	4618      	mov	r0, r3
 800847c:	f7ff fd0e 	bl	8007e9c <NVIC_EncodePriority>
 8008480:	4603      	mov	r3, r0
 8008482:	4619      	mov	r1, r3
 8008484:	2012      	movs	r0, #18
 8008486:	f7ff fcdf 	bl	8007e48 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 800848a:	2012      	movs	r0, #18
 800848c:	f7ff fcbe 	bl	8007e0c <__NVIC_EnableIRQ>

  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8008490:	2300      	movs	r3, #0
 8008492:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8008494:	2300      	movs	r3, #0
 8008496:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8008498:	f44f 7380 	mov.w	r3, #256	; 0x100
 800849c:	647b      	str	r3, [r7, #68]	; 0x44
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 800849e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80084a2:	4619      	mov	r1, r3
 80084a4:	484c      	ldr	r0, [pc, #304]	; (80085d8 <MX_ADC2_Init+0x204>)
 80084a6:	f7fa fa2f 	bl	8002908 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80084aa:	2300      	movs	r3, #0
 80084ac:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80084ae:	2300      	movs	r3, #0
 80084b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80084b2:	2300      	movs	r3, #0
 80084b4:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80084b6:	2300      	movs	r3, #0
 80084b8:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 80084ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084be:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 80084c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80084c4:	4619      	mov	r1, r3
 80084c6:	4844      	ldr	r0, [pc, #272]	; (80085d8 <MX_ADC2_Init+0x204>)
 80084c8:	f7fa fa4a 	bl	8002960 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC2, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 80084cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80084d0:	4841      	ldr	r0, [pc, #260]	; (80085d8 <MX_ADC2_Init+0x204>)
 80084d2:	f7ff fd49 	bl	8007f68 <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC2);
 80084d6:	4840      	ldr	r0, [pc, #256]	; (80085d8 <MX_ADC2_Init+0x204>)
 80084d8:	f7ff fe11 	bl	80080fe <LL_ADC_DisableIT_EOCS>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_9);
 80084dc:	4a3f      	ldr	r2, [pc, #252]	; (80085dc <MX_ADC2_Init+0x208>)
 80084de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80084e2:	483d      	ldr	r0, [pc, #244]	; (80085d8 <MX_ADC2_Init+0x204>)
 80084e4:	f7ff fd0d 	bl	8007f02 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_3CYCLES);
 80084e8:	2200      	movs	r2, #0
 80084ea:	493c      	ldr	r1, [pc, #240]	; (80085dc <MX_ADC2_Init+0x208>)
 80084ec:	483a      	ldr	r0, [pc, #232]	; (80085d8 <MX_ADC2_Init+0x204>)
 80084ee:	f7ff fdac 	bl	800804a <LL_ADC_SetChannelSamplingTime>
  /** Configure Injected Channel 
  */
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 80084f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80084f6:	61bb      	str	r3, [r7, #24]
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 80084f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80084fc:	61fb      	str	r3, [r7, #28]
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_1RANK;
 80084fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008502:	623b      	str	r3, [r7, #32]
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 8008504:	2300      	movs	r3, #0
 8008506:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 8008508:	f107 0318 	add.w	r3, r7, #24
 800850c:	4619      	mov	r1, r3
 800850e:	4832      	ldr	r0, [pc, #200]	; (80085d8 <MX_ADC2_Init+0x204>)
 8008510:	f7fa fa6e 	bl	80029f0 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 8008514:	4830      	ldr	r0, [pc, #192]	; (80085d8 <MX_ADC2_Init+0x204>)
 8008516:	f7ff fe02 	bl	800811e <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_0);
 800851a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800851e:	2101      	movs	r1, #1
 8008520:	482d      	ldr	r0, [pc, #180]	; (80085d8 <MX_ADC2_Init+0x204>)
 8008522:	f7ff fd34 	bl	8007f8e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 8008526:	2200      	movs	r2, #0
 8008528:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800852c:	482a      	ldr	r0, [pc, #168]	; (80085d8 <MX_ADC2_Init+0x204>)
 800852e:	f7ff fd8c 	bl	800804a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_1, 0);
 8008532:	2200      	movs	r2, #0
 8008534:	2101      	movs	r1, #1
 8008536:	4828      	ldr	r0, [pc, #160]	; (80085d8 <MX_ADC2_Init+0x204>)
 8008538:	f7ff fd5f 	bl	8007ffa <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 800853c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8008540:	4825      	ldr	r0, [pc, #148]	; (80085d8 <MX_ADC2_Init+0x204>)
 8008542:	f7ff fdcb 	bl	80080dc <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 8008546:	f107 0318 	add.w	r3, r7, #24
 800854a:	4619      	mov	r1, r3
 800854c:	4822      	ldr	r0, [pc, #136]	; (80085d8 <MX_ADC2_Init+0x204>)
 800854e:	f7fa fa4f 	bl	80029f0 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 8008552:	4821      	ldr	r0, [pc, #132]	; (80085d8 <MX_ADC2_Init+0x204>)
 8008554:	f7ff fde3 	bl	800811e <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_11);
 8008558:	4a21      	ldr	r2, [pc, #132]	; (80085e0 <MX_ADC2_Init+0x20c>)
 800855a:	f241 1102 	movw	r1, #4354	; 0x1102
 800855e:	481e      	ldr	r0, [pc, #120]	; (80085d8 <MX_ADC2_Init+0x204>)
 8008560:	f7ff fd15 	bl	8007f8e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 8008564:	2200      	movs	r2, #0
 8008566:	491e      	ldr	r1, [pc, #120]	; (80085e0 <MX_ADC2_Init+0x20c>)
 8008568:	481b      	ldr	r0, [pc, #108]	; (80085d8 <MX_ADC2_Init+0x204>)
 800856a:	f7ff fd6e 	bl	800804a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_2, 0);
 800856e:	2200      	movs	r2, #0
 8008570:	f241 1102 	movw	r1, #4354	; 0x1102
 8008574:	4818      	ldr	r0, [pc, #96]	; (80085d8 <MX_ADC2_Init+0x204>)
 8008576:	f7ff fd40 	bl	8007ffa <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 800857a:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800857e:	4816      	ldr	r0, [pc, #88]	; (80085d8 <MX_ADC2_Init+0x204>)
 8008580:	f7ff fdac 	bl	80080dc <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 8008584:	f107 0318 	add.w	r3, r7, #24
 8008588:	4619      	mov	r1, r3
 800858a:	4813      	ldr	r0, [pc, #76]	; (80085d8 <MX_ADC2_Init+0x204>)
 800858c:	f7fa fa30 	bl	80029f0 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 8008590:	4811      	ldr	r0, [pc, #68]	; (80085d8 <MX_ADC2_Init+0x204>)
 8008592:	f7ff fdc4 	bl	800811e <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_10);
 8008596:	220a      	movs	r2, #10
 8008598:	f242 2103 	movw	r1, #8707	; 0x2203
 800859c:	480e      	ldr	r0, [pc, #56]	; (80085d8 <MX_ADC2_Init+0x204>)
 800859e:	f7ff fcf6 	bl	8007f8e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_3CYCLES);
 80085a2:	2200      	movs	r2, #0
 80085a4:	210a      	movs	r1, #10
 80085a6:	480c      	ldr	r0, [pc, #48]	; (80085d8 <MX_ADC2_Init+0x204>)
 80085a8:	f7ff fd4f 	bl	800804a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_3, 0);
 80085ac:	2200      	movs	r2, #0
 80085ae:	f242 2103 	movw	r1, #8707	; 0x2203
 80085b2:	4809      	ldr	r0, [pc, #36]	; (80085d8 <MX_ADC2_Init+0x204>)
 80085b4:	f7ff fd21 	bl	8007ffa <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 80085b8:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80085bc:	4806      	ldr	r0, [pc, #24]	; (80085d8 <MX_ADC2_Init+0x204>)
 80085be:	f7ff fd8d 	bl	80080dc <LL_ADC_INJ_StartConversionExtTrig>

}
 80085c2:	bf00      	nop
 80085c4:	3748      	adds	r7, #72	; 0x48
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	40020800 	.word	0x40020800
 80085d0:	40020000 	.word	0x40020000
 80085d4:	40020400 	.word	0x40020400
 80085d8:	40012100 	.word	0x40012100
 80085dc:	03b00009 	.word	0x03b00009
 80085e0:	0030000b 	.word	0x0030000b

080085e4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80085ea:	463b      	mov	r3, r7
 80085ec:	2200      	movs	r2, #0
 80085ee:	601a      	str	r2, [r3, #0]
 80085f0:	605a      	str	r2, [r3, #4]
 80085f2:	609a      	str	r2, [r3, #8]
 80085f4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 80085f6:	4b21      	ldr	r3, [pc, #132]	; (800867c <MX_ADC3_Init+0x98>)
 80085f8:	4a21      	ldr	r2, [pc, #132]	; (8008680 <MX_ADC3_Init+0x9c>)
 80085fa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80085fc:	4b1f      	ldr	r3, [pc, #124]	; (800867c <MX_ADC3_Init+0x98>)
 80085fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008602:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8008604:	4b1d      	ldr	r3, [pc, #116]	; (800867c <MX_ADC3_Init+0x98>)
 8008606:	2200      	movs	r2, #0
 8008608:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 800860a:	4b1c      	ldr	r3, [pc, #112]	; (800867c <MX_ADC3_Init+0x98>)
 800860c:	2201      	movs	r2, #1
 800860e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8008610:	4b1a      	ldr	r3, [pc, #104]	; (800867c <MX_ADC3_Init+0x98>)
 8008612:	2200      	movs	r2, #0
 8008614:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8008616:	4b19      	ldr	r3, [pc, #100]	; (800867c <MX_ADC3_Init+0x98>)
 8008618:	2200      	movs	r2, #0
 800861a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800861e:	4b17      	ldr	r3, [pc, #92]	; (800867c <MX_ADC3_Init+0x98>)
 8008620:	2200      	movs	r2, #0
 8008622:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008624:	4b15      	ldr	r3, [pc, #84]	; (800867c <MX_ADC3_Init+0x98>)
 8008626:	4a17      	ldr	r2, [pc, #92]	; (8008684 <MX_ADC3_Init+0xa0>)
 8008628:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800862a:	4b14      	ldr	r3, [pc, #80]	; (800867c <MX_ADC3_Init+0x98>)
 800862c:	2200      	movs	r2, #0
 800862e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8008630:	4b12      	ldr	r3, [pc, #72]	; (800867c <MX_ADC3_Init+0x98>)
 8008632:	2201      	movs	r2, #1
 8008634:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8008636:	4b11      	ldr	r3, [pc, #68]	; (800867c <MX_ADC3_Init+0x98>)
 8008638:	2200      	movs	r2, #0
 800863a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800863e:	4b0f      	ldr	r3, [pc, #60]	; (800867c <MX_ADC3_Init+0x98>)
 8008640:	2201      	movs	r2, #1
 8008642:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8008644:	480d      	ldr	r0, [pc, #52]	; (800867c <MX_ADC3_Init+0x98>)
 8008646:	f7f8 fd33 	bl	80010b0 <HAL_ADC_Init>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d001      	beq.n	8008654 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8008650:	f000 faa8 	bl	8008ba4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8008654:	230d      	movs	r3, #13
 8008656:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8008658:	2301      	movs	r3, #1
 800865a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800865c:	2300      	movs	r3, #0
 800865e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8008660:	463b      	mov	r3, r7
 8008662:	4619      	mov	r1, r3
 8008664:	4805      	ldr	r0, [pc, #20]	; (800867c <MX_ADC3_Init+0x98>)
 8008666:	f7f8 fec5 	bl	80013f4 <HAL_ADC_ConfigChannel>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d001      	beq.n	8008674 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8008670:	f000 fa98 	bl	8008ba4 <Error_Handler>
  }

}
 8008674:	bf00      	nop
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	200003ac 	.word	0x200003ac
 8008680:	40012200 	.word	0x40012200
 8008684:	0f000001 	.word	0x0f000001

08008688 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b08a      	sub	sp, #40	; 0x28
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008690:	f107 0314 	add.w	r3, r7, #20
 8008694:	2200      	movs	r2, #0
 8008696:	601a      	str	r2, [r3, #0]
 8008698:	605a      	str	r2, [r3, #4]
 800869a:	609a      	str	r2, [r3, #8]
 800869c:	60da      	str	r2, [r3, #12]
 800869e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a1b      	ldr	r2, [pc, #108]	; (8008714 <HAL_ADC_MspInit+0x8c>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d12f      	bne.n	800870a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80086aa:	2300      	movs	r3, #0
 80086ac:	613b      	str	r3, [r7, #16]
 80086ae:	4b1a      	ldr	r3, [pc, #104]	; (8008718 <HAL_ADC_MspInit+0x90>)
 80086b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086b2:	4a19      	ldr	r2, [pc, #100]	; (8008718 <HAL_ADC_MspInit+0x90>)
 80086b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80086b8:	6453      	str	r3, [r2, #68]	; 0x44
 80086ba:	4b17      	ldr	r3, [pc, #92]	; (8008718 <HAL_ADC_MspInit+0x90>)
 80086bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086c2:	613b      	str	r3, [r7, #16]
 80086c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80086c6:	2300      	movs	r3, #0
 80086c8:	60fb      	str	r3, [r7, #12]
 80086ca:	4b13      	ldr	r3, [pc, #76]	; (8008718 <HAL_ADC_MspInit+0x90>)
 80086cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ce:	4a12      	ldr	r2, [pc, #72]	; (8008718 <HAL_ADC_MspInit+0x90>)
 80086d0:	f043 0304 	orr.w	r3, r3, #4
 80086d4:	6313      	str	r3, [r2, #48]	; 0x30
 80086d6:	4b10      	ldr	r3, [pc, #64]	; (8008718 <HAL_ADC_MspInit+0x90>)
 80086d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086da:	f003 0304 	and.w	r3, r3, #4
 80086de:	60fb      	str	r3, [r7, #12]
 80086e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration    
    PC3     ------> ADC3_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80086e2:	2308      	movs	r3, #8
 80086e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80086e6:	2303      	movs	r3, #3
 80086e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ea:	2300      	movs	r3, #0
 80086ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80086ee:	f107 0314 	add.w	r3, r7, #20
 80086f2:	4619      	mov	r1, r3
 80086f4:	4809      	ldr	r0, [pc, #36]	; (800871c <HAL_ADC_MspInit+0x94>)
 80086f6:	f7f9 f9c7 	bl	8001a88 <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 80086fa:	2200      	movs	r2, #0
 80086fc:	2102      	movs	r1, #2
 80086fe:	2012      	movs	r0, #18
 8008700:	f7f9 f98b 	bl	8001a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8008704:	2012      	movs	r0, #18
 8008706:	f7f9 f9a4 	bl	8001a52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800870a:	bf00      	nop
 800870c:	3728      	adds	r7, #40	; 0x28
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	40012200 	.word	0x40012200
 8008718:	40023800 	.word	0x40023800
 800871c:	40020800 	.word	0x40020800

08008720 <__NVIC_GetPriorityGrouping>:
{
 8008720:	b480      	push	{r7}
 8008722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008724:	4b04      	ldr	r3, [pc, #16]	; (8008738 <__NVIC_GetPriorityGrouping+0x18>)
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	0a1b      	lsrs	r3, r3, #8
 800872a:	f003 0307 	and.w	r3, r3, #7
}
 800872e:	4618      	mov	r0, r3
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr
 8008738:	e000ed00 	.word	0xe000ed00

0800873c <__NVIC_EnableIRQ>:
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	4603      	mov	r3, r0
 8008744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800874a:	2b00      	cmp	r3, #0
 800874c:	db0b      	blt.n	8008766 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800874e:	79fb      	ldrb	r3, [r7, #7]
 8008750:	f003 021f 	and.w	r2, r3, #31
 8008754:	4907      	ldr	r1, [pc, #28]	; (8008774 <__NVIC_EnableIRQ+0x38>)
 8008756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800875a:	095b      	lsrs	r3, r3, #5
 800875c:	2001      	movs	r0, #1
 800875e:	fa00 f202 	lsl.w	r2, r0, r2
 8008762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008766:	bf00      	nop
 8008768:	370c      	adds	r7, #12
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	e000e100 	.word	0xe000e100

08008778 <__NVIC_SetPriority>:
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	4603      	mov	r3, r0
 8008780:	6039      	str	r1, [r7, #0]
 8008782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008788:	2b00      	cmp	r3, #0
 800878a:	db0a      	blt.n	80087a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	b2da      	uxtb	r2, r3
 8008790:	490c      	ldr	r1, [pc, #48]	; (80087c4 <__NVIC_SetPriority+0x4c>)
 8008792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008796:	0112      	lsls	r2, r2, #4
 8008798:	b2d2      	uxtb	r2, r2
 800879a:	440b      	add	r3, r1
 800879c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80087a0:	e00a      	b.n	80087b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	b2da      	uxtb	r2, r3
 80087a6:	4908      	ldr	r1, [pc, #32]	; (80087c8 <__NVIC_SetPriority+0x50>)
 80087a8:	79fb      	ldrb	r3, [r7, #7]
 80087aa:	f003 030f 	and.w	r3, r3, #15
 80087ae:	3b04      	subs	r3, #4
 80087b0:	0112      	lsls	r2, r2, #4
 80087b2:	b2d2      	uxtb	r2, r2
 80087b4:	440b      	add	r3, r1
 80087b6:	761a      	strb	r2, [r3, #24]
}
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr
 80087c4:	e000e100 	.word	0xe000e100
 80087c8:	e000ed00 	.word	0xe000ed00

080087cc <NVIC_EncodePriority>:
{
 80087cc:	b480      	push	{r7}
 80087ce:	b089      	sub	sp, #36	; 0x24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f003 0307 	and.w	r3, r3, #7
 80087de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	f1c3 0307 	rsb	r3, r3, #7
 80087e6:	2b04      	cmp	r3, #4
 80087e8:	bf28      	it	cs
 80087ea:	2304      	movcs	r3, #4
 80087ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	3304      	adds	r3, #4
 80087f2:	2b06      	cmp	r3, #6
 80087f4:	d902      	bls.n	80087fc <NVIC_EncodePriority+0x30>
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	3b03      	subs	r3, #3
 80087fa:	e000      	b.n	80087fe <NVIC_EncodePriority+0x32>
 80087fc:	2300      	movs	r3, #0
 80087fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	fa02 f303 	lsl.w	r3, r2, r3
 800880a:	43da      	mvns	r2, r3
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	401a      	ands	r2, r3
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008814:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	fa01 f303 	lsl.w	r3, r1, r3
 800881e:	43d9      	mvns	r1, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008824:	4313      	orrs	r3, r2
}
 8008826:	4618      	mov	r0, r3
 8008828:	3724      	adds	r7, #36	; 0x24
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr
	...

08008834 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8008834:	b480      	push	{r7}
 8008836:	b085      	sub	sp, #20
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800883e:	4a13      	ldr	r2, [pc, #76]	; (800888c <LL_SYSCFG_SetEXTISource+0x58>)
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	b2db      	uxtb	r3, r3
 8008844:	3302      	adds	r3, #2
 8008846:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	0c1b      	lsrs	r3, r3, #16
 800884e:	43db      	mvns	r3, r3
 8008850:	ea02 0103 	and.w	r1, r2, r3
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	0c1b      	lsrs	r3, r3, #16
 8008858:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	fa93 f3a3 	rbit	r3, r3
 8008860:	60bb      	str	r3, [r7, #8]
  return result;
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	fab3 f383 	clz	r3, r3
 8008868:	b2db      	uxtb	r3, r3
 800886a:	461a      	mov	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	fa03 f202 	lsl.w	r2, r3, r2
 8008872:	4806      	ldr	r0, [pc, #24]	; (800888c <LL_SYSCFG_SetEXTISource+0x58>)
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	b2db      	uxtb	r3, r3
 8008878:	430a      	orrs	r2, r1
 800887a:	3302      	adds	r3, #2
 800887c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8008880:	bf00      	nop
 8008882:	3714      	adds	r7, #20
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr
 800888c:	40013800 	.word	0x40013800

08008890 <LL_GPIO_SetPinMode>:
{
 8008890:	b480      	push	{r7}
 8008892:	b089      	sub	sp, #36	; 0x24
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	fa93 f3a3 	rbit	r3, r3
 80088aa:	613b      	str	r3, [r7, #16]
  return result;
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	fab3 f383 	clz	r3, r3
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	005b      	lsls	r3, r3, #1
 80088b6:	2103      	movs	r1, #3
 80088b8:	fa01 f303 	lsl.w	r3, r1, r3
 80088bc:	43db      	mvns	r3, r3
 80088be:	401a      	ands	r2, r3
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	fa93 f3a3 	rbit	r3, r3
 80088ca:	61bb      	str	r3, [r7, #24]
  return result;
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	fab3 f383 	clz	r3, r3
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	005b      	lsls	r3, r3, #1
 80088d6:	6879      	ldr	r1, [r7, #4]
 80088d8:	fa01 f303 	lsl.w	r3, r1, r3
 80088dc:	431a      	orrs	r2, r3
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	601a      	str	r2, [r3, #0]
}
 80088e2:	bf00      	nop
 80088e4:	3724      	adds	r7, #36	; 0x24
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr

080088ee <LL_GPIO_SetPinPull>:
{
 80088ee:	b480      	push	{r7}
 80088f0:	b089      	sub	sp, #36	; 0x24
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	60f8      	str	r0, [r7, #12]
 80088f6:	60b9      	str	r1, [r7, #8]
 80088f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	68da      	ldr	r2, [r3, #12]
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	fa93 f3a3 	rbit	r3, r3
 8008908:	613b      	str	r3, [r7, #16]
  return result;
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	fab3 f383 	clz	r3, r3
 8008910:	b2db      	uxtb	r3, r3
 8008912:	005b      	lsls	r3, r3, #1
 8008914:	2103      	movs	r1, #3
 8008916:	fa01 f303 	lsl.w	r3, r1, r3
 800891a:	43db      	mvns	r3, r3
 800891c:	401a      	ands	r2, r3
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	fa93 f3a3 	rbit	r3, r3
 8008928:	61bb      	str	r3, [r7, #24]
  return result;
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	fab3 f383 	clz	r3, r3
 8008930:	b2db      	uxtb	r3, r3
 8008932:	005b      	lsls	r3, r3, #1
 8008934:	6879      	ldr	r1, [r7, #4]
 8008936:	fa01 f303 	lsl.w	r3, r1, r3
 800893a:	431a      	orrs	r2, r3
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	60da      	str	r2, [r3, #12]
}
 8008940:	bf00      	nop
 8008942:	3724      	adds	r7, #36	; 0x24
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	041a      	lsls	r2, r3, #16
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	619a      	str	r2, [r3, #24]
}
 800895e:	bf00      	nop
 8008960:	370c      	adds	r7, #12
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr
	...

0800896c <LL_AHB1_GRP1_EnableClock>:
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8008974:	4b08      	ldr	r3, [pc, #32]	; (8008998 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008978:	4907      	ldr	r1, [pc, #28]	; (8008998 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4313      	orrs	r3, r2
 800897e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8008980:	4b05      	ldr	r3, [pc, #20]	; (8008998 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008982:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4013      	ands	r3, r2
 8008988:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800898a:	68fb      	ldr	r3, [r7, #12]
}
 800898c:	bf00      	nop
 800898e:	3714      	adds	r7, #20
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr
 8008998:	40023800 	.word	0x40023800

0800899c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b088      	sub	sp, #32
 80089a0:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80089a2:	f107 0318 	add.w	r3, r7, #24
 80089a6:	2200      	movs	r2, #0
 80089a8:	601a      	str	r2, [r3, #0]
 80089aa:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089ac:	463b      	mov	r3, r7
 80089ae:	2200      	movs	r2, #0
 80089b0:	601a      	str	r2, [r3, #0]
 80089b2:	605a      	str	r2, [r3, #4]
 80089b4:	609a      	str	r2, [r3, #8]
 80089b6:	60da      	str	r2, [r3, #12]
 80089b8:	611a      	str	r2, [r3, #16]
 80089ba:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80089bc:	2004      	movs	r0, #4
 80089be:	f7ff ffd5 	bl	800896c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80089c2:	2080      	movs	r0, #128	; 0x80
 80089c4:	f7ff ffd2 	bl	800896c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80089c8:	2001      	movs	r0, #1
 80089ca:	f7ff ffcf 	bl	800896c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80089ce:	2002      	movs	r0, #2
 80089d0:	f7ff ffcc 	bl	800896c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 80089d4:	2120      	movs	r1, #32
 80089d6:	482c      	ldr	r0, [pc, #176]	; (8008a88 <MX_GPIO_Init+0xec>)
 80089d8:	f7ff ffb8 	bl	800894c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12);
 80089dc:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80089e0:	482a      	ldr	r0, [pc, #168]	; (8008a8c <MX_GPIO_Init+0xf0>)
 80089e2:	f7ff ffb3 	bl	800894c <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80089e6:	492a      	ldr	r1, [pc, #168]	; (8008a90 <MX_GPIO_Init+0xf4>)
 80089e8:	2002      	movs	r0, #2
 80089ea:	f7ff ff23 	bl	8008834 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80089ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80089f2:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80089f4:	2301      	movs	r3, #1
 80089f6:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80089f8:	2300      	movs	r3, #0
 80089fa:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80089fc:	2302      	movs	r3, #2
 80089fe:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8008a00:	f107 0318 	add.w	r3, r7, #24
 8008a04:	4618      	mov	r0, r3
 8008a06:	f7fa f8cb 	bl	8002ba0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008a10:	481e      	ldr	r0, [pc, #120]	; (8008a8c <MX_GPIO_Init+0xf0>)
 8008a12:	f7ff ff6c 	bl	80088ee <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8008a16:	2200      	movs	r2, #0
 8008a18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008a1c:	481b      	ldr	r0, [pc, #108]	; (8008a8c <MX_GPIO_Init+0xf0>)
 8008a1e:	f7ff ff37 	bl	8008890 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8008a22:	2320      	movs	r3, #32
 8008a24:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008a26:	2301      	movs	r3, #1
 8008a28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008a32:	2300      	movs	r3, #0
 8008a34:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8008a36:	463b      	mov	r3, r7
 8008a38:	4619      	mov	r1, r3
 8008a3a:	4813      	ldr	r0, [pc, #76]	; (8008a88 <MX_GPIO_Init+0xec>)
 8008a3c:	f7fa fa31 	bl	8002ea2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8008a40:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008a44:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008a46:	2301      	movs	r3, #1
 8008a48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008a52:	2300      	movs	r3, #0
 8008a54:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008a56:	463b      	mov	r3, r7
 8008a58:	4619      	mov	r1, r3
 8008a5a:	480c      	ldr	r0, [pc, #48]	; (8008a8c <MX_GPIO_Init+0xf0>)
 8008a5c:	f7fa fa21 	bl	8002ea2 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008a60:	f7ff fe5e 	bl	8008720 <__NVIC_GetPriorityGrouping>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2200      	movs	r2, #0
 8008a68:	2100      	movs	r1, #0
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7ff feae 	bl	80087cc <NVIC_EncodePriority>
 8008a70:	4603      	mov	r3, r0
 8008a72:	4619      	mov	r1, r3
 8008a74:	2028      	movs	r0, #40	; 0x28
 8008a76:	f7ff fe7f 	bl	8008778 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008a7a:	2028      	movs	r0, #40	; 0x28
 8008a7c:	f7ff fe5e 	bl	800873c <__NVIC_EnableIRQ>

}
 8008a80:	bf00      	nop
 8008a82:	3720      	adds	r7, #32
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	40020000 	.word	0x40020000
 8008a8c:	40020800 	.word	0x40020800
 8008a90:	00f00003 	.word	0x00f00003

08008a94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008a98:	f7f8 fa76 	bl	8000f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008a9c:	f000 f810 	bl	8008ac0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  cppwrapper();
 8008aa0:	f000 fd46 	bl	8009530 <cppwrapper>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008aa4:	f7ff ff7a 	bl	800899c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8008aa8:	f000 fcdc 	bl	8009464 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8008aac:	f000 fb66 	bl	800917c <MX_TIM1_Init>
  MX_ADC1_Init();
 8008ab0:	f7ff fb76 	bl	80081a0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8008ab4:	f7ff fc8e 	bl	80083d4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8008ab8:	f7ff fd94 	bl	80085e4 <MX_ADC3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008abc:	e7fe      	b.n	8008abc <main+0x28>
	...

08008ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b094      	sub	sp, #80	; 0x50
 8008ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008ac6:	f107 031c 	add.w	r3, r7, #28
 8008aca:	2234      	movs	r2, #52	; 0x34
 8008acc:	2100      	movs	r1, #0
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f003 fb96 	bl	800c200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008ad4:	f107 0308 	add.w	r3, r7, #8
 8008ad8:	2200      	movs	r2, #0
 8008ada:	601a      	str	r2, [r3, #0]
 8008adc:	605a      	str	r2, [r3, #4]
 8008ade:	609a      	str	r2, [r3, #8]
 8008ae0:	60da      	str	r2, [r3, #12]
 8008ae2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	607b      	str	r3, [r7, #4]
 8008ae8:	4b2c      	ldr	r3, [pc, #176]	; (8008b9c <SystemClock_Config+0xdc>)
 8008aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aec:	4a2b      	ldr	r2, [pc, #172]	; (8008b9c <SystemClock_Config+0xdc>)
 8008aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008af2:	6413      	str	r3, [r2, #64]	; 0x40
 8008af4:	4b29      	ldr	r3, [pc, #164]	; (8008b9c <SystemClock_Config+0xdc>)
 8008af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008afc:	607b      	str	r3, [r7, #4]
 8008afe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008b00:	2300      	movs	r3, #0
 8008b02:	603b      	str	r3, [r7, #0]
 8008b04:	4b26      	ldr	r3, [pc, #152]	; (8008ba0 <SystemClock_Config+0xe0>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a25      	ldr	r2, [pc, #148]	; (8008ba0 <SystemClock_Config+0xe0>)
 8008b0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b0e:	6013      	str	r3, [r2, #0]
 8008b10:	4b23      	ldr	r3, [pc, #140]	; (8008ba0 <SystemClock_Config+0xe0>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008b18:	603b      	str	r3, [r7, #0]
 8008b1a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008b20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b24:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008b26:	2302      	movs	r3, #2
 8008b28:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008b2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008b2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8008b30:	2304      	movs	r3, #4
 8008b32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8008b34:	23b4      	movs	r3, #180	; 0xb4
 8008b36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008b38:	2302      	movs	r3, #2
 8008b3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8008b3c:	2302      	movs	r3, #2
 8008b3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8008b40:	2302      	movs	r3, #2
 8008b42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008b44:	f107 031c 	add.w	r3, r7, #28
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7f9 fc01 	bl	8002350 <HAL_RCC_OscConfig>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d001      	beq.n	8008b58 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8008b54:	f000 f826 	bl	8008ba4 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8008b58:	f7f9 f928 	bl	8001dac <HAL_PWREx_EnableOverDrive>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d001      	beq.n	8008b66 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8008b62:	f000 f81f 	bl	8008ba4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008b66:	230f      	movs	r3, #15
 8008b68:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008b6a:	2302      	movs	r3, #2
 8008b6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008b72:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008b76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b7c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008b7e:	f107 0308 	add.w	r3, r7, #8
 8008b82:	2105      	movs	r1, #5
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7f9 f961 	bl	8001e4c <HAL_RCC_ClockConfig>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d001      	beq.n	8008b94 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8008b90:	f000 f808 	bl	8008ba4 <Error_Handler>
  }
}
 8008b94:	bf00      	nop
 8008b96:	3750      	adds	r7, #80	; 0x50
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	40023800 	.word	0x40023800
 8008ba0:	40007000 	.word	0x40007000

08008ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008ba8:	bf00      	nop
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
	...

08008bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008bba:	2300      	movs	r3, #0
 8008bbc:	607b      	str	r3, [r7, #4]
 8008bbe:	4b10      	ldr	r3, [pc, #64]	; (8008c00 <HAL_MspInit+0x4c>)
 8008bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bc2:	4a0f      	ldr	r2, [pc, #60]	; (8008c00 <HAL_MspInit+0x4c>)
 8008bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8008bca:	4b0d      	ldr	r3, [pc, #52]	; (8008c00 <HAL_MspInit+0x4c>)
 8008bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bd2:	607b      	str	r3, [r7, #4]
 8008bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	603b      	str	r3, [r7, #0]
 8008bda:	4b09      	ldr	r3, [pc, #36]	; (8008c00 <HAL_MspInit+0x4c>)
 8008bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bde:	4a08      	ldr	r2, [pc, #32]	; (8008c00 <HAL_MspInit+0x4c>)
 8008be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008be4:	6413      	str	r3, [r2, #64]	; 0x40
 8008be6:	4b06      	ldr	r3, [pc, #24]	; (8008c00 <HAL_MspInit+0x4c>)
 8008be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bee:	603b      	str	r3, [r7, #0]
 8008bf0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8008bf2:	2004      	movs	r0, #4
 8008bf4:	f7f8 ff06 	bl	8001a04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008bf8:	bf00      	nop
 8008bfa:	3708      	adds	r7, #8
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	40023800 	.word	0x40023800

08008c04 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8008c0c:	4b07      	ldr	r3, [pc, #28]	; (8008c2c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8008c0e:	695a      	ldr	r2, [r3, #20]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4013      	ands	r3, r2
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	bf0c      	ite	eq
 8008c1a:	2301      	moveq	r3, #1
 8008c1c:	2300      	movne	r3, #0
 8008c1e:	b2db      	uxtb	r3, r3
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr
 8008c2c:	40013c00 	.word	0x40013c00

08008c30 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8008c38:	4a04      	ldr	r2, [pc, #16]	; (8008c4c <LL_EXTI_ClearFlag_0_31+0x1c>)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6153      	str	r3, [r2, #20]
}
 8008c3e:	bf00      	nop
 8008c40:	370c      	adds	r7, #12
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	40013c00 	.word	0x40013c00

08008c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008c50:	b480      	push	{r7}
 8008c52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008c54:	bf00      	nop
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr

08008c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008c5e:	b480      	push	{r7}
 8008c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008c62:	e7fe      	b.n	8008c62 <HardFault_Handler+0x4>

08008c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008c64:	b480      	push	{r7}
 8008c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008c68:	e7fe      	b.n	8008c68 <MemManage_Handler+0x4>

08008c6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008c6a:	b480      	push	{r7}
 8008c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008c6e:	e7fe      	b.n	8008c6e <BusFault_Handler+0x4>

08008c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008c70:	b480      	push	{r7}
 8008c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008c74:	e7fe      	b.n	8008c74 <UsageFault_Handler+0x4>

08008c76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008c76:	b480      	push	{r7}
 8008c78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008c7a:	bf00      	nop
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008c84:	b480      	push	{r7}
 8008c86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008c88:	bf00      	nop
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr

08008c92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008c92:	b480      	push	{r7}
 8008c94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008c96:	bf00      	nop
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008ca4:	f7f8 f9c2 	bl	800102c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008ca8:	bf00      	nop
 8008caa:	bd80      	pop	{r7, pc}

08008cac <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
	HighFreqTask();
 8008cb0:	f000 fc86 	bl	80095c0 <HighFreqTask>
  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8008cb4:	4802      	ldr	r0, [pc, #8]	; (8008cc0 <ADC_IRQHandler+0x14>)
 8008cb6:	f7f8 fa3e 	bl	8001136 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8008cba:	bf00      	nop
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	200003ac 	.word	0x200003ac

08008cc4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8008cc8:	bf00      	nop
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr

08008cd2 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8008cd2:	b480      	push	{r7}
 8008cd4:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8008cd6:	bf00      	nop
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8008ce4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008ce8:	f7ff ff8c 	bl	8008c04 <LL_EXTI_IsActiveFlag_0_31>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d005      	beq.n	8008cfe <EXTI15_10_IRQHandler+0x1e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8008cf2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008cf6:	f7ff ff9b 	bl	8008c30 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */
    BtnAct();
 8008cfa:	f000 fc6b 	bl	80095d4 <BtnAct>
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008cfe:	bf00      	nop
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008d02:	b480      	push	{r7}
 8008d04:	af00      	add	r7, sp, #0
	return 1;
 8008d06:	2301      	movs	r3, #1
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr

08008d12 <_kill>:

int _kill(int pid, int sig)
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b082      	sub	sp, #8
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
 8008d1a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008d1c:	f003 fa12 	bl	800c144 <__errno>
 8008d20:	4602      	mov	r2, r0
 8008d22:	2316      	movs	r3, #22
 8008d24:	6013      	str	r3, [r2, #0]
	return -1;
 8008d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3708      	adds	r7, #8
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <_exit>:

void _exit (int status)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b082      	sub	sp, #8
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008d3a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f7ff ffe7 	bl	8008d12 <_kill>
	while (1) {}		/* Make sure we hang here */
 8008d44:	e7fe      	b.n	8008d44 <_exit+0x12>
	...

08008d48 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008d50:	4b11      	ldr	r3, [pc, #68]	; (8008d98 <_sbrk+0x50>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d102      	bne.n	8008d5e <_sbrk+0x16>
		heap_end = &end;
 8008d58:	4b0f      	ldr	r3, [pc, #60]	; (8008d98 <_sbrk+0x50>)
 8008d5a:	4a10      	ldr	r2, [pc, #64]	; (8008d9c <_sbrk+0x54>)
 8008d5c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008d5e:	4b0e      	ldr	r3, [pc, #56]	; (8008d98 <_sbrk+0x50>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008d64:	4b0c      	ldr	r3, [pc, #48]	; (8008d98 <_sbrk+0x50>)
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	466a      	mov	r2, sp
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d907      	bls.n	8008d82 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008d72:	f003 f9e7 	bl	800c144 <__errno>
 8008d76:	4602      	mov	r2, r0
 8008d78:	230c      	movs	r3, #12
 8008d7a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008d7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d80:	e006      	b.n	8008d90 <_sbrk+0x48>
	}

	heap_end += incr;
 8008d82:	4b05      	ldr	r3, [pc, #20]	; (8008d98 <_sbrk+0x50>)
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4413      	add	r3, r2
 8008d8a:	4a03      	ldr	r2, [pc, #12]	; (8008d98 <_sbrk+0x50>)
 8008d8c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3710      	adds	r7, #16
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	20000200 	.word	0x20000200
 8008d9c:	20000408 	.word	0x20000408

08008da0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008da0:	b480      	push	{r7}
 8008da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008da4:	4b16      	ldr	r3, [pc, #88]	; (8008e00 <SystemInit+0x60>)
 8008da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008daa:	4a15      	ldr	r2, [pc, #84]	; (8008e00 <SystemInit+0x60>)
 8008dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008db4:	4b13      	ldr	r3, [pc, #76]	; (8008e04 <SystemInit+0x64>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a12      	ldr	r2, [pc, #72]	; (8008e04 <SystemInit+0x64>)
 8008dba:	f043 0301 	orr.w	r3, r3, #1
 8008dbe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008dc0:	4b10      	ldr	r3, [pc, #64]	; (8008e04 <SystemInit+0x64>)
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008dc6:	4b0f      	ldr	r3, [pc, #60]	; (8008e04 <SystemInit+0x64>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a0e      	ldr	r2, [pc, #56]	; (8008e04 <SystemInit+0x64>)
 8008dcc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8008dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dd4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008dd6:	4b0b      	ldr	r3, [pc, #44]	; (8008e04 <SystemInit+0x64>)
 8008dd8:	4a0b      	ldr	r2, [pc, #44]	; (8008e08 <SystemInit+0x68>)
 8008dda:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008ddc:	4b09      	ldr	r3, [pc, #36]	; (8008e04 <SystemInit+0x64>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a08      	ldr	r2, [pc, #32]	; (8008e04 <SystemInit+0x64>)
 8008de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008de6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008de8:	4b06      	ldr	r3, [pc, #24]	; (8008e04 <SystemInit+0x64>)
 8008dea:	2200      	movs	r2, #0
 8008dec:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008dee:	4b04      	ldr	r3, [pc, #16]	; (8008e00 <SystemInit+0x60>)
 8008df0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008df4:	609a      	str	r2, [r3, #8]
#endif
}
 8008df6:	bf00      	nop
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr
 8008e00:	e000ed00 	.word	0xe000ed00
 8008e04:	40023800 	.word	0x40023800
 8008e08:	24003010 	.word	0x24003010

08008e0c <__NVIC_GetPriorityGrouping>:
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008e10:	4b04      	ldr	r3, [pc, #16]	; (8008e24 <__NVIC_GetPriorityGrouping+0x18>)
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	0a1b      	lsrs	r3, r3, #8
 8008e16:	f003 0307 	and.w	r3, r3, #7
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr
 8008e24:	e000ed00 	.word	0xe000ed00

08008e28 <__NVIC_EnableIRQ>:
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	4603      	mov	r3, r0
 8008e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	db0b      	blt.n	8008e52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008e3a:	79fb      	ldrb	r3, [r7, #7]
 8008e3c:	f003 021f 	and.w	r2, r3, #31
 8008e40:	4907      	ldr	r1, [pc, #28]	; (8008e60 <__NVIC_EnableIRQ+0x38>)
 8008e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e46:	095b      	lsrs	r3, r3, #5
 8008e48:	2001      	movs	r0, #1
 8008e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8008e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008e52:	bf00      	nop
 8008e54:	370c      	adds	r7, #12
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop
 8008e60:	e000e100 	.word	0xe000e100

08008e64 <__NVIC_SetPriority>:
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	6039      	str	r1, [r7, #0]
 8008e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	db0a      	blt.n	8008e8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	b2da      	uxtb	r2, r3
 8008e7c:	490c      	ldr	r1, [pc, #48]	; (8008eb0 <__NVIC_SetPriority+0x4c>)
 8008e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e82:	0112      	lsls	r2, r2, #4
 8008e84:	b2d2      	uxtb	r2, r2
 8008e86:	440b      	add	r3, r1
 8008e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008e8c:	e00a      	b.n	8008ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	b2da      	uxtb	r2, r3
 8008e92:	4908      	ldr	r1, [pc, #32]	; (8008eb4 <__NVIC_SetPriority+0x50>)
 8008e94:	79fb      	ldrb	r3, [r7, #7]
 8008e96:	f003 030f 	and.w	r3, r3, #15
 8008e9a:	3b04      	subs	r3, #4
 8008e9c:	0112      	lsls	r2, r2, #4
 8008e9e:	b2d2      	uxtb	r2, r2
 8008ea0:	440b      	add	r3, r1
 8008ea2:	761a      	strb	r2, [r3, #24]
}
 8008ea4:	bf00      	nop
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr
 8008eb0:	e000e100 	.word	0xe000e100
 8008eb4:	e000ed00 	.word	0xe000ed00

08008eb8 <NVIC_EncodePriority>:
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b089      	sub	sp, #36	; 0x24
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f003 0307 	and.w	r3, r3, #7
 8008eca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	f1c3 0307 	rsb	r3, r3, #7
 8008ed2:	2b04      	cmp	r3, #4
 8008ed4:	bf28      	it	cs
 8008ed6:	2304      	movcs	r3, #4
 8008ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	3304      	adds	r3, #4
 8008ede:	2b06      	cmp	r3, #6
 8008ee0:	d902      	bls.n	8008ee8 <NVIC_EncodePriority+0x30>
 8008ee2:	69fb      	ldr	r3, [r7, #28]
 8008ee4:	3b03      	subs	r3, #3
 8008ee6:	e000      	b.n	8008eea <NVIC_EncodePriority+0x32>
 8008ee8:	2300      	movs	r3, #0
 8008eea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008eec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ef6:	43da      	mvns	r2, r3
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	401a      	ands	r2, r3
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008f00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	fa01 f303 	lsl.w	r3, r1, r3
 8008f0a:	43d9      	mvns	r1, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008f10:	4313      	orrs	r3, r2
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3724      	adds	r7, #36	; 0x24
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr

08008f1e <LL_TIM_DisableARRPreload>:
{
 8008f1e:	b480      	push	{r7}
 8008f20:	b083      	sub	sp, #12
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	601a      	str	r2, [r3, #0]
}
 8008f32:	bf00      	nop
 8008f34:	370c      	adds	r7, #12
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
	...

08008f40 <LL_TIM_OC_DisableFast>:
{
 8008f40:	b4b0      	push	{r4, r5, r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d01c      	beq.n	8008f8a <LL_TIM_OC_DisableFast+0x4a>
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	2b04      	cmp	r3, #4
 8008f54:	d017      	beq.n	8008f86 <LL_TIM_OC_DisableFast+0x46>
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	2b10      	cmp	r3, #16
 8008f5a:	d012      	beq.n	8008f82 <LL_TIM_OC_DisableFast+0x42>
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	2b40      	cmp	r3, #64	; 0x40
 8008f60:	d00d      	beq.n	8008f7e <LL_TIM_OC_DisableFast+0x3e>
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f68:	d007      	beq.n	8008f7a <LL_TIM_OC_DisableFast+0x3a>
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f70:	d101      	bne.n	8008f76 <LL_TIM_OC_DisableFast+0x36>
 8008f72:	2305      	movs	r3, #5
 8008f74:	e00a      	b.n	8008f8c <LL_TIM_OC_DisableFast+0x4c>
 8008f76:	2306      	movs	r3, #6
 8008f78:	e008      	b.n	8008f8c <LL_TIM_OC_DisableFast+0x4c>
 8008f7a:	2304      	movs	r3, #4
 8008f7c:	e006      	b.n	8008f8c <LL_TIM_OC_DisableFast+0x4c>
 8008f7e:	2303      	movs	r3, #3
 8008f80:	e004      	b.n	8008f8c <LL_TIM_OC_DisableFast+0x4c>
 8008f82:	2302      	movs	r3, #2
 8008f84:	e002      	b.n	8008f8c <LL_TIM_OC_DisableFast+0x4c>
 8008f86:	2301      	movs	r3, #1
 8008f88:	e000      	b.n	8008f8c <LL_TIM_OC_DisableFast+0x4c>
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	3318      	adds	r3, #24
 8008f92:	461a      	mov	r2, r3
 8008f94:	4629      	mov	r1, r5
 8008f96:	4b09      	ldr	r3, [pc, #36]	; (8008fbc <LL_TIM_OC_DisableFast+0x7c>)
 8008f98:	5c5b      	ldrb	r3, [r3, r1]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8008f9e:	6822      	ldr	r2, [r4, #0]
 8008fa0:	4629      	mov	r1, r5
 8008fa2:	4b07      	ldr	r3, [pc, #28]	; (8008fc0 <LL_TIM_OC_DisableFast+0x80>)
 8008fa4:	5c5b      	ldrb	r3, [r3, r1]
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	2304      	movs	r3, #4
 8008faa:	408b      	lsls	r3, r1
 8008fac:	43db      	mvns	r3, r3
 8008fae:	4013      	ands	r3, r2
 8008fb0:	6023      	str	r3, [r4, #0]
}
 8008fb2:	bf00      	nop
 8008fb4:	370c      	adds	r7, #12
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bcb0      	pop	{r4, r5, r7}
 8008fba:	4770      	bx	lr
 8008fbc:	0800e4b4 	.word	0x0800e4b4
 8008fc0:	0800e4bc 	.word	0x0800e4bc

08008fc4 <LL_TIM_OC_EnablePreload>:
{
 8008fc4:	b4b0      	push	{r4, r5, r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d01c      	beq.n	800900e <LL_TIM_OC_EnablePreload+0x4a>
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	2b04      	cmp	r3, #4
 8008fd8:	d017      	beq.n	800900a <LL_TIM_OC_EnablePreload+0x46>
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	2b10      	cmp	r3, #16
 8008fde:	d012      	beq.n	8009006 <LL_TIM_OC_EnablePreload+0x42>
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	2b40      	cmp	r3, #64	; 0x40
 8008fe4:	d00d      	beq.n	8009002 <LL_TIM_OC_EnablePreload+0x3e>
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fec:	d007      	beq.n	8008ffe <LL_TIM_OC_EnablePreload+0x3a>
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ff4:	d101      	bne.n	8008ffa <LL_TIM_OC_EnablePreload+0x36>
 8008ff6:	2305      	movs	r3, #5
 8008ff8:	e00a      	b.n	8009010 <LL_TIM_OC_EnablePreload+0x4c>
 8008ffa:	2306      	movs	r3, #6
 8008ffc:	e008      	b.n	8009010 <LL_TIM_OC_EnablePreload+0x4c>
 8008ffe:	2304      	movs	r3, #4
 8009000:	e006      	b.n	8009010 <LL_TIM_OC_EnablePreload+0x4c>
 8009002:	2303      	movs	r3, #3
 8009004:	e004      	b.n	8009010 <LL_TIM_OC_EnablePreload+0x4c>
 8009006:	2302      	movs	r3, #2
 8009008:	e002      	b.n	8009010 <LL_TIM_OC_EnablePreload+0x4c>
 800900a:	2301      	movs	r3, #1
 800900c:	e000      	b.n	8009010 <LL_TIM_OC_EnablePreload+0x4c>
 800900e:	2300      	movs	r3, #0
 8009010:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	3318      	adds	r3, #24
 8009016:	461a      	mov	r2, r3
 8009018:	4629      	mov	r1, r5
 800901a:	4b09      	ldr	r3, [pc, #36]	; (8009040 <LL_TIM_OC_EnablePreload+0x7c>)
 800901c:	5c5b      	ldrb	r3, [r3, r1]
 800901e:	4413      	add	r3, r2
 8009020:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8009022:	6822      	ldr	r2, [r4, #0]
 8009024:	4629      	mov	r1, r5
 8009026:	4b07      	ldr	r3, [pc, #28]	; (8009044 <LL_TIM_OC_EnablePreload+0x80>)
 8009028:	5c5b      	ldrb	r3, [r3, r1]
 800902a:	4619      	mov	r1, r3
 800902c:	2308      	movs	r3, #8
 800902e:	408b      	lsls	r3, r1
 8009030:	4313      	orrs	r3, r2
 8009032:	6023      	str	r3, [r4, #0]
}
 8009034:	bf00      	nop
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	bcb0      	pop	{r4, r5, r7}
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	0800e4b4 	.word	0x0800e4b4
 8009044:	0800e4bc 	.word	0x0800e4bc

08009048 <LL_TIM_SetTriggerOutput>:
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	431a      	orrs	r2, r3
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	605a      	str	r2, [r3, #4]
}
 8009062:	bf00      	nop
 8009064:	370c      	adds	r7, #12
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr

0800906e <LL_TIM_SetSlaveMode>:
{
 800906e:	b480      	push	{r7}
 8009070:	b083      	sub	sp, #12
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
 8009076:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	f023 0207 	bic.w	r2, r3, #7
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	431a      	orrs	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	609a      	str	r2, [r3, #8]
}
 8009088:	bf00      	nop
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <LL_TIM_SetTriggerInput>:
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	431a      	orrs	r2, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	609a      	str	r2, [r3, #8]
}
 80090ae:	bf00      	nop
 80090b0:	370c      	adds	r7, #12
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr

080090ba <LL_TIM_DisableMasterSlaveMode>:
{
 80090ba:	b480      	push	{r7}
 80090bc:	b083      	sub	sp, #12
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	609a      	str	r2, [r3, #8]
}
 80090ce:	bf00      	nop
 80090d0:	370c      	adds	r7, #12
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr

080090da <LL_TIM_DisableIT_TRIG>:
{
 80090da:	b480      	push	{r7}
 80090dc:	b083      	sub	sp, #12
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TIE);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	60da      	str	r2, [r3, #12]
}
 80090ee:	bf00      	nop
 80090f0:	370c      	adds	r7, #12
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr

080090fa <LL_TIM_DisableDMAReq_TRIG>:
{
 80090fa:	b480      	push	{r7}
 80090fc:	b083      	sub	sp, #12
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TDE);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	60da      	str	r2, [r3, #12]
}
 800910e:	bf00      	nop
 8009110:	370c      	adds	r7, #12
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr
	...

0800911c <LL_AHB1_GRP1_EnableClock>:
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8009124:	4b08      	ldr	r3, [pc, #32]	; (8009148 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8009126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009128:	4907      	ldr	r1, [pc, #28]	; (8009148 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4313      	orrs	r3, r2
 800912e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8009130:	4b05      	ldr	r3, [pc, #20]	; (8009148 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8009132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4013      	ands	r3, r2
 8009138:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800913a:	68fb      	ldr	r3, [r7, #12]
}
 800913c:	bf00      	nop
 800913e:	3714      	adds	r7, #20
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr
 8009148:	40023800 	.word	0x40023800

0800914c <LL_APB2_GRP1_EnableClock>:
{
 800914c:	b480      	push	{r7}
 800914e:	b085      	sub	sp, #20
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8009154:	4b08      	ldr	r3, [pc, #32]	; (8009178 <LL_APB2_GRP1_EnableClock+0x2c>)
 8009156:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009158:	4907      	ldr	r1, [pc, #28]	; (8009178 <LL_APB2_GRP1_EnableClock+0x2c>)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4313      	orrs	r3, r2
 800915e:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8009160:	4b05      	ldr	r3, [pc, #20]	; (8009178 <LL_APB2_GRP1_EnableClock+0x2c>)
 8009162:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4013      	ands	r3, r2
 8009168:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800916a:	68fb      	ldr	r3, [r7, #12]
}
 800916c:	bf00      	nop
 800916e:	3714      	adds	r7, #20
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr
 8009178:	40023800 	.word	0x40023800

0800917c <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b09a      	sub	sp, #104	; 0x68
 8009180:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8009182:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009186:	2200      	movs	r2, #0
 8009188:	601a      	str	r2, [r3, #0]
 800918a:	605a      	str	r2, [r3, #4]
 800918c:	609a      	str	r2, [r3, #8]
 800918e:	60da      	str	r2, [r3, #12]
 8009190:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8009192:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009196:	2220      	movs	r2, #32
 8009198:	2100      	movs	r1, #0
 800919a:	4618      	mov	r0, r3
 800919c:	f003 f830 	bl	800c200 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 80091a0:	f107 031c 	add.w	r3, r7, #28
 80091a4:	2200      	movs	r2, #0
 80091a6:	601a      	str	r2, [r3, #0]
 80091a8:	605a      	str	r2, [r3, #4]
 80091aa:	609a      	str	r2, [r3, #8]
 80091ac:	60da      	str	r2, [r3, #12]
 80091ae:	611a      	str	r2, [r3, #16]
 80091b0:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091b2:	1d3b      	adds	r3, r7, #4
 80091b4:	2200      	movs	r2, #0
 80091b6:	601a      	str	r2, [r3, #0]
 80091b8:	605a      	str	r2, [r3, #4]
 80091ba:	609a      	str	r2, [r3, #8]
 80091bc:	60da      	str	r2, [r3, #12]
 80091be:	611a      	str	r2, [r3, #16]
 80091c0:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80091c2:	2001      	movs	r0, #1
 80091c4:	f7ff ffc2 	bl	800914c <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80091c8:	2001      	movs	r0, #1
 80091ca:	f7ff ffa7 	bl	800911c <LL_AHB1_GRP1_EnableClock>
  /**TIM1 GPIO Configuration  
  PA6   ------> TIM1_BKIN 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80091ce:	2340      	movs	r3, #64	; 0x40
 80091d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80091d2:	2302      	movs	r3, #2
 80091d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80091d6:	2300      	movs	r3, #0
 80091d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80091da:	2300      	movs	r3, #0
 80091dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80091de:	2302      	movs	r3, #2
 80091e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80091e2:	2301      	movs	r3, #1
 80091e4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091e6:	1d3b      	adds	r3, r7, #4
 80091e8:	4619      	mov	r1, r3
 80091ea:	4871      	ldr	r0, [pc, #452]	; (80093b0 <MX_TIM1_Init+0x234>)
 80091ec:	f7f9 fe59 	bl	8002ea2 <LL_GPIO_Init>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 1));
 80091f0:	f7ff fe0c 	bl	8008e0c <__NVIC_GetPriorityGrouping>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2201      	movs	r2, #1
 80091f8:	2104      	movs	r1, #4
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7ff fe5c 	bl	8008eb8 <NVIC_EncodePriority>
 8009200:	4603      	mov	r3, r0
 8009202:	4619      	mov	r1, r3
 8009204:	2018      	movs	r0, #24
 8009206:	f7ff fe2d 	bl	8008e64 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800920a:	2018      	movs	r0, #24
 800920c:	f7ff fe0c 	bl	8008e28 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8009210:	f7ff fdfc 	bl	8008e0c <__NVIC_GetPriorityGrouping>
 8009214:	4603      	mov	r3, r0
 8009216:	2200      	movs	r2, #0
 8009218:	2100      	movs	r1, #0
 800921a:	4618      	mov	r0, r3
 800921c:	f7ff fe4c 	bl	8008eb8 <NVIC_EncodePriority>
 8009220:	4603      	mov	r3, r0
 8009222:	4619      	mov	r1, r3
 8009224:	2019      	movs	r0, #25
 8009226:	f7ff fe1d 	bl	8008e64 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800922a:	2019      	movs	r0, #25
 800922c:	f7ff fdfc 	bl	8008e28 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 0;
 8009230:	2300      	movs	r3, #0
 8009232:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_UP;
 8009236:	2320      	movs	r3, #32
 8009238:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 65535;
 800923a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800923e:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV2;
 8009240:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009244:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 8009246:	2300      	movs	r3, #0
 8009248:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800924c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009250:	4619      	mov	r1, r3
 8009252:	4858      	ldr	r0, [pc, #352]	; (80093b4 <MX_TIM1_Init+0x238>)
 8009254:	f7fa f88a 	bl	800336c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8009258:	4856      	ldr	r0, [pc, #344]	; (80093b4 <MX_TIM1_Init+0x238>)
 800925a:	f7ff fe60 	bl	8008f1e <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 800925e:	2101      	movs	r1, #1
 8009260:	4854      	ldr	r0, [pc, #336]	; (80093b4 <MX_TIM1_Init+0x238>)
 8009262:	f7ff feaf 	bl	8008fc4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8009266:	2360      	movs	r3, #96	; 0x60
 8009268:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800926a:	2300      	movs	r3, #0
 800926c:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800926e:	2300      	movs	r3, #0
 8009270:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 8009272:	2300      	movs	r3, #0
 8009274:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8009276:	2300      	movs	r3, #0
 8009278:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 800927a:	2300      	movs	r3, #0
 800927c:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 800927e:	2300      	movs	r3, #0
 8009280:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8009282:	2300      	movs	r3, #0
 8009284:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8009286:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800928a:	461a      	mov	r2, r3
 800928c:	2101      	movs	r1, #1
 800928e:	4849      	ldr	r0, [pc, #292]	; (80093b4 <MX_TIM1_Init+0x238>)
 8009290:	f7fa f906 	bl	80034a0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8009294:	2101      	movs	r1, #1
 8009296:	4847      	ldr	r0, [pc, #284]	; (80093b4 <MX_TIM1_Init+0x238>)
 8009298:	f7ff fe52 	bl	8008f40 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 800929c:	2110      	movs	r1, #16
 800929e:	4845      	ldr	r0, [pc, #276]	; (80093b4 <MX_TIM1_Init+0x238>)
 80092a0:	f7ff fe90 	bl	8008fc4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80092a4:	2300      	movs	r3, #0
 80092a6:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80092a8:	2300      	movs	r3, #0
 80092aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80092ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80092b0:	461a      	mov	r2, r3
 80092b2:	2110      	movs	r1, #16
 80092b4:	483f      	ldr	r0, [pc, #252]	; (80093b4 <MX_TIM1_Init+0x238>)
 80092b6:	f7fa f8f3 	bl	80034a0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 80092ba:	2110      	movs	r1, #16
 80092bc:	483d      	ldr	r0, [pc, #244]	; (80093b4 <MX_TIM1_Init+0x238>)
 80092be:	f7ff fe3f 	bl	8008f40 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 80092c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80092c6:	483b      	ldr	r0, [pc, #236]	; (80093b4 <MX_TIM1_Init+0x238>)
 80092c8:	f7ff fe7c 	bl	8008fc4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80092cc:	2300      	movs	r3, #0
 80092ce:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80092d0:	2300      	movs	r3, #0
 80092d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80092d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80092d8:	461a      	mov	r2, r3
 80092da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80092de:	4835      	ldr	r0, [pc, #212]	; (80093b4 <MX_TIM1_Init+0x238>)
 80092e0:	f7fa f8de 	bl	80034a0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 80092e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80092e8:	4832      	ldr	r0, [pc, #200]	; (80093b4 <MX_TIM1_Init+0x238>)
 80092ea:	f7ff fe29 	bl	8008f40 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 80092ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80092f2:	4830      	ldr	r0, [pc, #192]	; (80093b4 <MX_TIM1_Init+0x238>)
 80092f4:	f7ff fe66 	bl	8008fc4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 80092f8:	2370      	movs	r3, #112	; 0x70
 80092fa:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80092fc:	2300      	movs	r3, #0
 80092fe:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8009300:	2300      	movs	r3, #0
 8009302:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8009304:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009308:	461a      	mov	r2, r3
 800930a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800930e:	4829      	ldr	r0, [pc, #164]	; (80093b4 <MX_TIM1_Init+0x238>)
 8009310:	f7fa f8c6 	bl	80034a0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 8009314:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009318:	4826      	ldr	r0, [pc, #152]	; (80093b4 <MX_TIM1_Init+0x238>)
 800931a:	f7ff fe11 	bl	8008f40 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerInput(TIM1, LL_TIM_TS_ITR1);
 800931e:	2110      	movs	r1, #16
 8009320:	4824      	ldr	r0, [pc, #144]	; (80093b4 <MX_TIM1_Init+0x238>)
 8009322:	f7ff feb7 	bl	8009094 <LL_TIM_SetTriggerInput>
  LL_TIM_SetSlaveMode(TIM1, LL_TIM_SLAVEMODE_TRIGGER);
 8009326:	2106      	movs	r1, #6
 8009328:	4822      	ldr	r0, [pc, #136]	; (80093b4 <MX_TIM1_Init+0x238>)
 800932a:	f7ff fea0 	bl	800906e <LL_TIM_SetSlaveMode>
  LL_TIM_DisableIT_TRIG(TIM1);
 800932e:	4821      	ldr	r0, [pc, #132]	; (80093b4 <MX_TIM1_Init+0x238>)
 8009330:	f7ff fed3 	bl	80090da <LL_TIM_DisableIT_TRIG>
  LL_TIM_DisableDMAReq_TRIG(TIM1);
 8009334:	481f      	ldr	r0, [pc, #124]	; (80093b4 <MX_TIM1_Init+0x238>)
 8009336:	f7ff fee0 	bl	80090fa <LL_TIM_DisableDMAReq_TRIG>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 800933a:	2100      	movs	r1, #0
 800933c:	481d      	ldr	r0, [pc, #116]	; (80093b4 <MX_TIM1_Init+0x238>)
 800933e:	f7ff fe83 	bl	8009048 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8009342:	481c      	ldr	r0, [pc, #112]	; (80093b4 <MX_TIM1_Init+0x238>)
 8009344:	f7ff feb9 	bl	80090ba <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_ENABLE;
 8009348:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800934c:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_ENABLE;
 800934e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009352:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_1;
 8009354:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009358:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 800935a:	2300      	movs	r3, #0
 800935c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_ENABLE;
 8009360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009364:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8009366:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800936a:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 800936c:	2300      	movs	r3, #0
 800936e:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8009370:	f107 031c 	add.w	r3, r7, #28
 8009374:	4619      	mov	r1, r3
 8009376:	480f      	ldr	r0, [pc, #60]	; (80093b4 <MX_TIM1_Init+0x238>)
 8009378:	f7fa f8ca 	bl	8003510 <LL_TIM_BDTR_Init>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800937c:	2001      	movs	r0, #1
 800937e:	f7ff fecd 	bl	800911c <LL_AHB1_GRP1_EnableClock>
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8009382:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8009386:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8009388:	2302      	movs	r3, #2
 800938a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800938c:	2302      	movs	r3, #2
 800938e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8009390:	2300      	movs	r3, #0
 8009392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8009394:	2302      	movs	r3, #2
 8009396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8009398:	2301      	movs	r3, #1
 800939a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800939c:	1d3b      	adds	r3, r7, #4
 800939e:	4619      	mov	r1, r3
 80093a0:	4803      	ldr	r0, [pc, #12]	; (80093b0 <MX_TIM1_Init+0x234>)
 80093a2:	f7f9 fd7e 	bl	8002ea2 <LL_GPIO_Init>

}
 80093a6:	bf00      	nop
 80093a8:	3768      	adds	r7, #104	; 0x68
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	40020000 	.word	0x40020000
 80093b4:	40010000 	.word	0x40010000

080093b8 <LL_USART_Enable>:
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	60da      	str	r2, [r3, #12]
}
 80093cc:	bf00      	nop
 80093ce:	370c      	adds	r7, #12
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <LL_USART_ConfigAsyncMode>:
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	695b      	ldr	r3, [r3, #20]
 80093f0:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	615a      	str	r2, [r3, #20]
}
 80093f8:	bf00      	nop
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <LL_AHB1_GRP1_EnableClock>:
{
 8009404:	b480      	push	{r7}
 8009406:	b085      	sub	sp, #20
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800940c:	4b08      	ldr	r3, [pc, #32]	; (8009430 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800940e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009410:	4907      	ldr	r1, [pc, #28]	; (8009430 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4313      	orrs	r3, r2
 8009416:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8009418:	4b05      	ldr	r3, [pc, #20]	; (8009430 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800941a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4013      	ands	r3, r2
 8009420:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009422:	68fb      	ldr	r3, [r7, #12]
}
 8009424:	bf00      	nop
 8009426:	3714      	adds	r7, #20
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr
 8009430:	40023800 	.word	0x40023800

08009434 <LL_APB1_GRP1_EnableClock>:
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800943c:	4b08      	ldr	r3, [pc, #32]	; (8009460 <LL_APB1_GRP1_EnableClock+0x2c>)
 800943e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009440:	4907      	ldr	r1, [pc, #28]	; (8009460 <LL_APB1_GRP1_EnableClock+0x2c>)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4313      	orrs	r3, r2
 8009446:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8009448:	4b05      	ldr	r3, [pc, #20]	; (8009460 <LL_APB1_GRP1_EnableClock+0x2c>)
 800944a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	4013      	ands	r3, r2
 8009450:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009452:	68fb      	ldr	r3, [r7, #12]
}
 8009454:	bf00      	nop
 8009456:	3714      	adds	r7, #20
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	40023800 	.word	0x40023800

08009464 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b08e      	sub	sp, #56	; 0x38
 8009468:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800946a:	f107 031c 	add.w	r3, r7, #28
 800946e:	2200      	movs	r2, #0
 8009470:	601a      	str	r2, [r3, #0]
 8009472:	605a      	str	r2, [r3, #4]
 8009474:	609a      	str	r2, [r3, #8]
 8009476:	60da      	str	r2, [r3, #12]
 8009478:	611a      	str	r2, [r3, #16]
 800947a:	615a      	str	r2, [r3, #20]
 800947c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800947e:	1d3b      	adds	r3, r7, #4
 8009480:	2200      	movs	r2, #0
 8009482:	601a      	str	r2, [r3, #0]
 8009484:	605a      	str	r2, [r3, #4]
 8009486:	609a      	str	r2, [r3, #8]
 8009488:	60da      	str	r2, [r3, #12]
 800948a:	611a      	str	r2, [r3, #16]
 800948c:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800948e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8009492:	f7ff ffcf 	bl	8009434 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8009496:	2001      	movs	r0, #1
 8009498:	f7ff ffb4 	bl	8009404 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800949c:	230c      	movs	r3, #12
 800949e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80094a0:	2302      	movs	r3, #2
 80094a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80094a4:	2303      	movs	r3, #3
 80094a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80094a8:	2300      	movs	r3, #0
 80094aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80094ac:	2301      	movs	r3, #1
 80094ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80094b0:	2307      	movs	r3, #7
 80094b2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094b4:	1d3b      	adds	r3, r7, #4
 80094b6:	4619      	mov	r1, r3
 80094b8:	4810      	ldr	r0, [pc, #64]	; (80094fc <MX_USART2_UART_Init+0x98>)
 80094ba:	f7f9 fcf2 	bl	8002ea2 <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 80094be:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80094c2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80094c4:	2300      	movs	r3, #0
 80094c6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80094c8:	2300      	movs	r3, #0
 80094ca:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80094cc:	2300      	movs	r3, #0
 80094ce:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80094d0:	230c      	movs	r3, #12
 80094d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80094d4:	2300      	movs	r3, #0
 80094d6:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80094d8:	2300      	movs	r3, #0
 80094da:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80094dc:	f107 031c 	add.w	r3, r7, #28
 80094e0:	4619      	mov	r1, r3
 80094e2:	4807      	ldr	r0, [pc, #28]	; (8009500 <MX_USART2_UART_Init+0x9c>)
 80094e4:	f7fa faf2 	bl	8003acc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80094e8:	4805      	ldr	r0, [pc, #20]	; (8009500 <MX_USART2_UART_Init+0x9c>)
 80094ea:	f7ff ff75 	bl	80093d8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80094ee:	4804      	ldr	r0, [pc, #16]	; (8009500 <MX_USART2_UART_Init+0x9c>)
 80094f0:	f7ff ff62 	bl	80093b8 <LL_USART_Enable>

}
 80094f4:	bf00      	nop
 80094f6:	3738      	adds	r7, #56	; 0x38
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	40020000 	.word	0x40020000
 8009500:	40004400 	.word	0x40004400

08009504 <_ZNSt7__cxx119to_stringEi>:
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af02      	add	r7, sp, #8
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	9300      	str	r3, [sp, #0]
 8009514:	4b04      	ldr	r3, [pc, #16]	; (8009528 <_ZNSt7__cxx119to_stringEi+0x24>)
 8009516:	2210      	movs	r2, #16
 8009518:	4904      	ldr	r1, [pc, #16]	; (800952c <_ZNSt7__cxx119to_stringEi+0x28>)
 800951a:	f7fa fe8f 	bl	800423c <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	3708      	adds	r7, #8
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	0800e3cc 	.word	0x0800e3cc
 800952c:	0800cd19 	.word	0x0800cd19

08009530 <cppwrapper>:

MotorCtrl M_Ctrl;



void cppwrapper(void){
 8009530:	b580      	push	{r7, lr}
 8009532:	b094      	sub	sp, #80	; 0x50
 8009534:	af00      	add	r7, sp, #0




	M_Ctrl.InitSystem();
 8009536:	481f      	ldr	r0, [pc, #124]	; (80095b4 <cppwrapper+0x84>)
 8009538:	f7fc ff99 	bl	800646e <_ZN9MotorCtrl10InitSystemEv>

	//debug
	std::string DbgStr;
 800953c:	1d3b      	adds	r3, r7, #4
 800953e:	4618      	mov	r0, r3
 8009540:	f001 fbc1 	bl	800acc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	int Dbgint=3456;
 8009544:	f44f 6358 	mov.w	r3, #3456	; 0xd80
 8009548:	64fb      	str	r3, [r7, #76]	; 0x4c
	DbgStr.append("testnum:");
 800954a:	1d3b      	adds	r3, r7, #4
 800954c:	491a      	ldr	r1, [pc, #104]	; (80095b8 <cppwrapper+0x88>)
 800954e:	4618      	mov	r0, r3
 8009550:	f001 fbee 	bl	800ad30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
	DbgStr.append(std::to_string(Dbgint));
 8009554:	f107 031c 	add.w	r3, r7, #28
 8009558:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800955a:	4618      	mov	r0, r3
 800955c:	f7ff ffd2 	bl	8009504 <_ZNSt7__cxx119to_stringEi>
 8009560:	f107 021c 	add.w	r2, r7, #28
 8009564:	1d3b      	adds	r3, r7, #4
 8009566:	4611      	mov	r1, r2
 8009568:	4618      	mov	r0, r3
 800956a:	f001 fbdb 	bl	800ad24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 800956e:	f107 031c 	add.w	r3, r7, #28
 8009572:	4618      	mov	r0, r3
 8009574:	f001 fbae 	bl	800acd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	DbgStr.append("\r\n");
 8009578:	1d3b      	adds	r3, r7, #4
 800957a:	4910      	ldr	r1, [pc, #64]	; (80095bc <cppwrapper+0x8c>)
 800957c:	4618      	mov	r0, r3
 800957e:	f001 fbd7 	bl	800ad30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
	M_Ctrl.DbgUart(DbgStr);
 8009582:	1d3a      	adds	r2, r7, #4
 8009584:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009588:	4611      	mov	r1, r2
 800958a:	4618      	mov	r0, r3
 800958c:	f001 fbea 	bl	800ad64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009590:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009594:	4619      	mov	r1, r3
 8009596:	4807      	ldr	r0, [pc, #28]	; (80095b4 <cppwrapper+0x84>)
 8009598:	f7fd fb57 	bl	8006c4a <_ZN9MotorCtrl7DbgUartENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800959c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80095a0:	4618      	mov	r0, r3
 80095a2:	f001 fb97 	bl	800acd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

	M_Ctrl.InitMotorInfo();
 80095a6:	4803      	ldr	r0, [pc, #12]	; (80095b4 <cppwrapper+0x84>)
 80095a8:	f7fd f8e4 	bl	8006774 <_ZN9MotorCtrl13InitMotorInfoEv>
	M_Ctrl.InitPWM();
 80095ac:	4801      	ldr	r0, [pc, #4]	; (80095b4 <cppwrapper+0x84>)
 80095ae:	f7fc ff6f 	bl	8006490 <_ZN9MotorCtrl7InitPWMEv>

	while(1){}
 80095b2:	e7fe      	b.n	80095b2 <cppwrapper+0x82>
 80095b4:	20000204 	.word	0x20000204
 80095b8:	0800e3d0 	.word	0x0800e3d0
 80095bc:	0800e3dc 	.word	0x0800e3dc

080095c0 <HighFreqTask>:

}

void HighFreqTask(){
 80095c0:	b580      	push	{r7, lr}
 80095c2:	af00      	add	r7, sp, #0
	M_Ctrl.HighFreqTask();
 80095c4:	4802      	ldr	r0, [pc, #8]	; (80095d0 <HighFreqTask+0x10>)
 80095c6:	f7fd f9a9 	bl	800691c <_ZN9MotorCtrl12HighFreqTaskEv>
}
 80095ca:	bf00      	nop
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	20000204 	.word	0x20000204

080095d4 <BtnAct>:


void BtnAct(void) { //割り込みラッパ
 80095d4:	b580      	push	{r7, lr}
 80095d6:	af00      	add	r7, sp, #0
	M_Ctrl.BtnAct();
 80095d8:	4802      	ldr	r0, [pc, #8]	; (80095e4 <BtnAct+0x10>)
 80095da:	f7fd fb0d 	bl	8006bf8 <_ZN9MotorCtrl6BtnActEv>
}
 80095de:	bf00      	nop
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	20000204 	.word	0x20000204

080095e8 <_Z41__static_initialization_and_destruction_0ii>:
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d107      	bne.n	8009608 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80095fe:	4293      	cmp	r3, r2
 8009600:	d102      	bne.n	8009608 <_Z41__static_initialization_and_destruction_0ii+0x20>
MotorCtrl M_Ctrl;
 8009602:	4809      	ldr	r0, [pc, #36]	; (8009628 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8009604:	f7fc fe48 	bl	8006298 <_ZN9MotorCtrlC1Ev>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d107      	bne.n	800961e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009614:	4293      	cmp	r3, r2
 8009616:	d102      	bne.n	800961e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8009618:	4803      	ldr	r0, [pc, #12]	; (8009628 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800961a:	f7fc fe6f 	bl	80062fc <_ZN9MotorCtrlD1Ev>
}
 800961e:	bf00      	nop
 8009620:	3708      	adds	r7, #8
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	20000204 	.word	0x20000204

0800962c <_GLOBAL__sub_I_M_Ctrl>:
 800962c:	b580      	push	{r7, lr}
 800962e:	af00      	add	r7, sp, #0
 8009630:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009634:	2001      	movs	r0, #1
 8009636:	f7ff ffd7 	bl	80095e8 <_Z41__static_initialization_and_destruction_0ii>
 800963a:	bd80      	pop	{r7, pc}

0800963c <_GLOBAL__sub_D_M_Ctrl>:
 800963c:	b580      	push	{r7, lr}
 800963e:	af00      	add	r7, sp, #0
 8009640:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009644:	2000      	movs	r0, #0
 8009646:	f7ff ffcf 	bl	80095e8 <_Z41__static_initialization_and_destruction_0ii>
 800964a:	bd80      	pop	{r7, pc}

0800964c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800964c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009684 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009650:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009652:	e003      	b.n	800965c <LoopCopyDataInit>

08009654 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009654:	4b0c      	ldr	r3, [pc, #48]	; (8009688 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009656:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009658:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800965a:	3104      	adds	r1, #4

0800965c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800965c:	480b      	ldr	r0, [pc, #44]	; (800968c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800965e:	4b0c      	ldr	r3, [pc, #48]	; (8009690 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009660:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009662:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009664:	d3f6      	bcc.n	8009654 <CopyDataInit>
  ldr  r2, =_sbss
 8009666:	4a0b      	ldr	r2, [pc, #44]	; (8009694 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009668:	e002      	b.n	8009670 <LoopFillZerobss>

0800966a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800966a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800966c:	f842 3b04 	str.w	r3, [r2], #4

08009670 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009670:	4b09      	ldr	r3, [pc, #36]	; (8009698 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009672:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009674:	d3f9      	bcc.n	800966a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009676:	f7ff fb93 	bl	8008da0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800967a:	f002 fd69 	bl	800c150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800967e:	f7ff fa09 	bl	8008a94 <main>
  bx  lr    
 8009682:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009684:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 8009688:	0800e9e0 	.word	0x0800e9e0
  ldr  r0, =_sdata
 800968c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009690:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8009694:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8009698:	20000408 	.word	0x20000408

0800969c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800969c:	e7fe      	b.n	800969c <CAN1_RX0_IRQHandler>
	...

080096a0 <__NVIC_GetPriorityGrouping>:
{
 80096a0:	b480      	push	{r7}
 80096a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80096a4:	4b04      	ldr	r3, [pc, #16]	; (80096b8 <__NVIC_GetPriorityGrouping+0x18>)
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	0a1b      	lsrs	r3, r3, #8
 80096aa:	f003 0307 	and.w	r3, r3, #7
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr
 80096b8:	e000ed00 	.word	0xe000ed00

080096bc <__NVIC_EnableIRQ>:
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	4603      	mov	r3, r0
 80096c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80096c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	db0d      	blt.n	80096ea <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80096ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	f003 021f 	and.w	r2, r3, #31
 80096d8:	4907      	ldr	r1, [pc, #28]	; (80096f8 <__NVIC_EnableIRQ+0x3c>)
 80096da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096de:	095b      	lsrs	r3, r3, #5
 80096e0:	2001      	movs	r0, #1
 80096e2:	fa00 f202 	lsl.w	r2, r0, r2
 80096e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80096ea:	bf00      	nop
 80096ec:	370c      	adds	r7, #12
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	e000e100 	.word	0xe000e100

080096fc <__NVIC_SetPriority>:
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	4603      	mov	r3, r0
 8009704:	6039      	str	r1, [r7, #0]
 8009706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800970c:	2b00      	cmp	r3, #0
 800970e:	db0c      	blt.n	800972a <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	b2db      	uxtb	r3, r3
 8009714:	4a0e      	ldr	r2, [pc, #56]	; (8009750 <__NVIC_SetPriority+0x54>)
 8009716:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800971a:	4608      	mov	r0, r1
 800971c:	011b      	lsls	r3, r3, #4
 800971e:	b2d9      	uxtb	r1, r3
 8009720:	1813      	adds	r3, r2, r0
 8009722:	460a      	mov	r2, r1
 8009724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009728:	e00c      	b.n	8009744 <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	b2da      	uxtb	r2, r3
 800972e:	4909      	ldr	r1, [pc, #36]	; (8009754 <__NVIC_SetPriority+0x58>)
 8009730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009734:	b2db      	uxtb	r3, r3
 8009736:	f003 030f 	and.w	r3, r3, #15
 800973a:	3b04      	subs	r3, #4
 800973c:	0112      	lsls	r2, r2, #4
 800973e:	b2d2      	uxtb	r2, r2
 8009740:	440b      	add	r3, r1
 8009742:	761a      	strb	r2, [r3, #24]
}
 8009744:	bf00      	nop
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr
 8009750:	e000e100 	.word	0xe000e100
 8009754:	e000ed00 	.word	0xe000ed00

08009758 <NVIC_EncodePriority>:
{
 8009758:	b480      	push	{r7}
 800975a:	b089      	sub	sp, #36	; 0x24
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f003 0307 	and.w	r3, r3, #7
 800976a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	f1c3 0307 	rsb	r3, r3, #7
 8009772:	2b04      	cmp	r3, #4
 8009774:	bf28      	it	cs
 8009776:	2304      	movcs	r3, #4
 8009778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800977a:	69fb      	ldr	r3, [r7, #28]
 800977c:	3304      	adds	r3, #4
 800977e:	2b06      	cmp	r3, #6
 8009780:	d902      	bls.n	8009788 <NVIC_EncodePriority+0x30>
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	3b03      	subs	r3, #3
 8009786:	e000      	b.n	800978a <NVIC_EncodePriority+0x32>
 8009788:	2300      	movs	r3, #0
 800978a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	2201      	movs	r2, #1
 8009790:	fa02 f303 	lsl.w	r3, r2, r3
 8009794:	1e5a      	subs	r2, r3, #1
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	401a      	ands	r2, r3
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	2101      	movs	r1, #1
 80097a2:	fa01 f303 	lsl.w	r3, r1, r3
 80097a6:	1e59      	subs	r1, r3, #1
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	400b      	ands	r3, r1
         );
 80097ac:	4313      	orrs	r3, r2
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3724      	adds	r7, #36	; 0x24
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr

080097ba <LL_ADC_REG_SetSequencerRanks>:
{
 80097ba:	b490      	push	{r4, r7}
 80097bc:	b086      	sub	sp, #24
 80097be:	af00      	add	r7, sp, #0
 80097c0:	60f8      	str	r0, [r7, #12]
 80097c2:	60b9      	str	r1, [r7, #8]
 80097c4:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	332c      	adds	r3, #44	; 0x2c
 80097ca:	4619      	mov	r1, r3
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097d2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80097d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097d8:	697a      	ldr	r2, [r7, #20]
 80097da:	fa92 f2a2 	rbit	r2, r2
 80097de:	613a      	str	r2, [r7, #16]
  return result;
 80097e0:	693a      	ldr	r2, [r7, #16]
 80097e2:	fab2 f282 	clz	r2, r2
 80097e6:	b2d2      	uxtb	r2, r2
 80097e8:	40d3      	lsrs	r3, r2
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	440b      	add	r3, r1
 80097ee:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80097f0:	6822      	ldr	r2, [r4, #0]
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	f003 031f 	and.w	r3, r3, #31
 80097f8:	211f      	movs	r1, #31
 80097fa:	fa01 f303 	lsl.w	r3, r1, r3
 80097fe:	43db      	mvns	r3, r3
 8009800:	401a      	ands	r2, r3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f003 011f 	and.w	r1, r3, #31
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	f003 031f 	and.w	r3, r3, #31
 800980e:	fa01 f303 	lsl.w	r3, r1, r3
 8009812:	4313      	orrs	r3, r2
 8009814:	6023      	str	r3, [r4, #0]
}
 8009816:	bf00      	nop
 8009818:	3718      	adds	r7, #24
 800981a:	46bd      	mov	sp, r7
 800981c:	bc90      	pop	{r4, r7}
 800981e:	4770      	bx	lr

08009820 <LL_ADC_REG_SetFlagEndOfConversion>:
{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	431a      	orrs	r2, r3
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	609a      	str	r2, [r3, #8]
}
 800983a:	bf00      	nop
 800983c:	370c      	adds	r7, #12
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr

08009846 <LL_ADC_INJ_SetSequencerRanks>:
{
 8009846:	b480      	push	{r7}
 8009848:	b087      	sub	sp, #28
 800984a:	af00      	add	r7, sp, #0
 800984c:	60f8      	str	r0, [r7, #12]
 800984e:	60b9      	str	r1, [r7, #8]
 8009850:	607a      	str	r2, [r7, #4]
  register uint32_t tmpreg1 = (READ_BIT(ADCx->JSQR, ADC_JSQR_JL) >> ADC_JSQR_JL_Pos) + 1U;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009856:	0d1b      	lsrs	r3, r3, #20
 8009858:	f003 0303 	and.w	r3, r3, #3
 800985c:	3301      	adds	r3, #1
 800985e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(ADCx->JSQR,
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	b2d9      	uxtb	r1, r3
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	b2db      	uxtb	r3, r3
 800986c:	1acb      	subs	r3, r1, r3
 800986e:	b2db      	uxtb	r3, r3
 8009870:	3303      	adds	r3, #3
 8009872:	b2db      	uxtb	r3, r3
 8009874:	4619      	mov	r1, r3
 8009876:	460b      	mov	r3, r1
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	440b      	add	r3, r1
 800987c:	211f      	movs	r1, #31
 800987e:	fa01 f303 	lsl.w	r3, r1, r3
 8009882:	43db      	mvns	r3, r3
 8009884:	401a      	ands	r2, r3
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f003 011f 	and.w	r1, r3, #31
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	b2d8      	uxtb	r0, r3
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	b2db      	uxtb	r3, r3
 8009894:	1ac3      	subs	r3, r0, r3
 8009896:	b2db      	uxtb	r3, r3
 8009898:	3303      	adds	r3, #3
 800989a:	b2db      	uxtb	r3, r3
 800989c:	4618      	mov	r0, r3
 800989e:	4603      	mov	r3, r0
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	4403      	add	r3, r0
 80098a4:	fa01 f303 	lsl.w	r3, r1, r3
 80098a8:	431a      	orrs	r2, r3
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	639a      	str	r2, [r3, #56]	; 0x38
}
 80098ae:	bf00      	nop
 80098b0:	371c      	adds	r7, #28
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr

080098ba <LL_ADC_INJ_SetOffset>:
{
 80098ba:	b490      	push	{r4, r7}
 80098bc:	b086      	sub	sp, #24
 80098be:	af00      	add	r7, sp, #0
 80098c0:	60f8      	str	r0, [r7, #12]
 80098c2:	60b9      	str	r1, [r7, #8]
 80098c4:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JOFR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JOFRX_REGOFFSET_MASK));
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	3314      	adds	r3, #20
 80098ca:	4619      	mov	r1, r3
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80098d2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80098d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098d8:	697a      	ldr	r2, [r7, #20]
 80098da:	fa92 f2a2 	rbit	r2, r2
 80098de:	613a      	str	r2, [r7, #16]
  return result;
 80098e0:	693a      	ldr	r2, [r7, #16]
 80098e2:	fab2 f282 	clz	r2, r2
 80098e6:	b2d2      	uxtb	r2, r2
 80098e8:	40d3      	lsrs	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	440b      	add	r3, r1
 80098ee:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80098f0:	6823      	ldr	r3, [r4, #0]
 80098f2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80098f6:	f023 030f 	bic.w	r3, r3, #15
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	4313      	orrs	r3, r2
 80098fe:	6023      	str	r3, [r4, #0]
}
 8009900:	bf00      	nop
 8009902:	3718      	adds	r7, #24
 8009904:	46bd      	mov	sp, r7
 8009906:	bc90      	pop	{r4, r7}
 8009908:	4770      	bx	lr

0800990a <LL_ADC_SetChannelSamplingTime>:
{
 800990a:	b490      	push	{r4, r7}
 800990c:	b08a      	sub	sp, #40	; 0x28
 800990e:	af00      	add	r7, sp, #0
 8009910:	60f8      	str	r0, [r7, #12]
 8009912:	60b9      	str	r1, [r7, #8]
 8009914:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	330c      	adds	r3, #12
 800991a:	4619      	mov	r1, r3
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009922:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009926:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009928:	697a      	ldr	r2, [r7, #20]
 800992a:	fa92 f2a2 	rbit	r2, r2
 800992e:	613a      	str	r2, [r7, #16]
  return result;
 8009930:	693a      	ldr	r2, [r7, #16]
 8009932:	fab2 f282 	clz	r2, r2
 8009936:	b2d2      	uxtb	r2, r2
 8009938:	40d3      	lsrs	r3, r2
 800993a:	009b      	lsls	r3, r3, #2
 800993c:	440b      	add	r3, r1
 800993e:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8009940:	6822      	ldr	r2, [r4, #0]
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8009948:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800994c:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800994e:	69f9      	ldr	r1, [r7, #28]
 8009950:	fa91 f1a1 	rbit	r1, r1
 8009954:	61b9      	str	r1, [r7, #24]
  return result;
 8009956:	69b9      	ldr	r1, [r7, #24]
 8009958:	fab1 f181 	clz	r1, r1
 800995c:	b2c9      	uxtb	r1, r1
 800995e:	40cb      	lsrs	r3, r1
 8009960:	2107      	movs	r1, #7
 8009962:	fa01 f303 	lsl.w	r3, r1, r3
 8009966:	43db      	mvns	r3, r3
 8009968:	401a      	ands	r2, r3
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8009970:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8009974:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009976:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009978:	fa91 f1a1 	rbit	r1, r1
 800997c:	6239      	str	r1, [r7, #32]
  return result;
 800997e:	6a39      	ldr	r1, [r7, #32]
 8009980:	fab1 f181 	clz	r1, r1
 8009984:	b2c9      	uxtb	r1, r1
 8009986:	40cb      	lsrs	r3, r1
 8009988:	6879      	ldr	r1, [r7, #4]
 800998a:	fa01 f303 	lsl.w	r3, r1, r3
 800998e:	4313      	orrs	r3, r2
 8009990:	6023      	str	r3, [r4, #0]
}
 8009992:	bf00      	nop
 8009994:	3728      	adds	r7, #40	; 0x28
 8009996:	46bd      	mov	sp, r7
 8009998:	bc90      	pop	{r4, r7}
 800999a:	4770      	bx	lr

0800999c <LL_ADC_INJ_StartConversionExtTrig>:
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	689a      	ldr	r2, [r3, #8]
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	431a      	orrs	r2, r3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	609a      	str	r2, [r3, #8]
}
 80099b2:	bf00      	nop
 80099b4:	370c      	adds	r7, #12
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr

080099be <LL_ADC_DisableIT_EOCS>:
{
 80099be:	b480      	push	{r7}
 80099c0:	b083      	sub	sp, #12
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	f023 0220 	bic.w	r2, r3, #32
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	605a      	str	r2, [r3, #4]
}
 80099d2:	bf00      	nop
 80099d4:	370c      	adds	r7, #12
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr

080099de <LL_ADC_DisableIT_JEOS>:
{
 80099de:	b480      	push	{r7}
 80099e0:	b083      	sub	sp, #12
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	605a      	str	r2, [r3, #4]
}
 80099f2:	bf00      	nop
 80099f4:	370c      	adds	r7, #12
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr
	...

08009a00 <LL_AHB1_GRP1_EnableClock>:
{
 8009a00:	b480      	push	{r7}
 8009a02:	b085      	sub	sp, #20
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8009a08:	4b08      	ldr	r3, [pc, #32]	; (8009a2c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8009a0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4907      	ldr	r1, [pc, #28]	; (8009a2c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8009a10:	4313      	orrs	r3, r2
 8009a12:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8009a14:	4b05      	ldr	r3, [pc, #20]	; (8009a2c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8009a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	4013      	ands	r3, r2
 8009a1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
}
 8009a20:	bf00      	nop
 8009a22:	3714      	adds	r7, #20
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr
 8009a2c:	40023800 	.word	0x40023800

08009a30 <LL_APB2_GRP1_EnableClock>:
{
 8009a30:	b480      	push	{r7}
 8009a32:	b085      	sub	sp, #20
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8009a38:	4b08      	ldr	r3, [pc, #32]	; (8009a5c <LL_APB2_GRP1_EnableClock+0x2c>)
 8009a3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4907      	ldr	r1, [pc, #28]	; (8009a5c <LL_APB2_GRP1_EnableClock+0x2c>)
 8009a40:	4313      	orrs	r3, r2
 8009a42:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8009a44:	4b05      	ldr	r3, [pc, #20]	; (8009a5c <LL_APB2_GRP1_EnableClock+0x2c>)
 8009a46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	4013      	ands	r3, r2
 8009a4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
}
 8009a50:	bf00      	nop
 8009a52:	3714      	adds	r7, #20
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr
 8009a5c:	40023800 	.word	0x40023800

08009a60 <_ZN7ADCInit4InitEv>:
void MX_ADC3_Init(void);
ADC_HandleTypeDef hadc3;
//void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle);
//void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle);

void ADCInit::Init() {
 8009a60:	b580      	push	{r7, lr}
 8009a62:	af00      	add	r7, sp, #0
	MX_ADC1_Init();
 8009a64:	f000 f806 	bl	8009a74 <_Z12MX_ADC1_Initv>
	MX_ADC2_Init();
 8009a68:	f000 f91e 	bl	8009ca8 <_Z12MX_ADC2_Initv>
	MX_ADC3_Init();
 8009a6c:	f000 fa24 	bl	8009eb8 <_Z12MX_ADC3_Initv>
}
 8009a70:	bf00      	nop
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <_Z12MX_ADC1_Initv>:



/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b096      	sub	sp, #88	; 0x58
 8009a78:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8009a7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009a7e:	2200      	movs	r2, #0
 8009a80:	601a      	str	r2, [r3, #0]
 8009a82:	605a      	str	r2, [r3, #4]
 8009a84:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8009a86:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	601a      	str	r2, [r3, #0]
 8009a8e:	605a      	str	r2, [r3, #4]
 8009a90:	609a      	str	r2, [r3, #8]
 8009a92:	60da      	str	r2, [r3, #12]
 8009a94:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8009a96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	601a      	str	r2, [r3, #0]
 8009a9e:	605a      	str	r2, [r3, #4]
 8009aa0:	609a      	str	r2, [r3, #8]
 8009aa2:	60da      	str	r2, [r3, #12]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 8009aa4:	f107 0318 	add.w	r3, r7, #24
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	601a      	str	r2, [r3, #0]
 8009aac:	605a      	str	r2, [r3, #4]
 8009aae:	609a      	str	r2, [r3, #8]
 8009ab0:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ab2:	463b      	mov	r3, r7
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	601a      	str	r2, [r3, #0]
 8009ab8:	605a      	str	r2, [r3, #4]
 8009aba:	609a      	str	r2, [r3, #8]
 8009abc:	60da      	str	r2, [r3, #12]
 8009abe:	611a      	str	r2, [r3, #16]
 8009ac0:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8009ac2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009ac6:	f7ff ffb3 	bl	8009a30 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8009aca:	2004      	movs	r0, #4
 8009acc:	f7ff ff98 	bl	8009a00 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8009ad0:	2001      	movs	r0, #1
 8009ad2:	f7ff ff95 	bl	8009a00 <LL_AHB1_GRP1_EnableClock>
  PC1   ------> ADC1_IN11
  PC2   ------> ADC1_IN12
  PA0-WKUP   ------> ADC1_IN0
  PA1   ------> ADC1_IN1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 8009ad6:	2307      	movs	r3, #7
 8009ad8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8009ada:	2303      	movs	r3, #3
 8009adc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009ae2:	463b      	mov	r3, r7
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	4869      	ldr	r0, [pc, #420]	; (8009c8c <_Z12MX_ADC1_Initv+0x218>)
 8009ae8:	f7f9 f9db 	bl	8002ea2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8009aec:	2303      	movs	r3, #3
 8009aee:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8009af0:	2303      	movs	r3, #3
 8009af2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8009af4:	2300      	movs	r3, #0
 8009af6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009af8:	463b      	mov	r3, r7
 8009afa:	4619      	mov	r1, r3
 8009afc:	4864      	ldr	r0, [pc, #400]	; (8009c90 <_Z12MX_ADC1_Initv+0x21c>)
 8009afe:	f7f9 f9d0 	bl	8002ea2 <LL_GPIO_Init>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8009b02:	f7ff fdcd 	bl	80096a0 <__NVIC_GetPriorityGrouping>
 8009b06:	4603      	mov	r3, r0
 8009b08:	2200      	movs	r2, #0
 8009b0a:	2102      	movs	r1, #2
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7ff fe23 	bl	8009758 <NVIC_EncodePriority>
 8009b12:	4603      	mov	r3, r0
 8009b14:	4619      	mov	r1, r3
 8009b16:	2012      	movs	r0, #18
 8009b18:	f7ff fdf0 	bl	80096fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 8009b1c:	2012      	movs	r0, #18
 8009b1e:	f7ff fdcd 	bl	80096bc <__NVIC_EnableIRQ>

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8009b22:	2300      	movs	r3, #0
 8009b24:	64fb      	str	r3, [r7, #76]	; 0x4c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8009b26:	2300      	movs	r3, #0
 8009b28:	653b      	str	r3, [r7, #80]	; 0x50
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8009b2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b2e:	657b      	str	r3, [r7, #84]	; 0x54
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8009b30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009b34:	4619      	mov	r1, r3
 8009b36:	4857      	ldr	r0, [pc, #348]	; (8009c94 <_Z12MX_ADC1_Initv+0x220>)
 8009b38:	f7f8 fee6 	bl	8002908 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8009b40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009b44:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8009b46:	2300      	movs	r3, #0
 8009b48:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8009b4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b52:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8009b54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009b58:	4619      	mov	r1, r3
 8009b5a:	484e      	ldr	r0, [pc, #312]	; (8009c94 <_Z12MX_ADC1_Initv+0x220>)
 8009b5c:	f7f8 ff00 	bl	8002960 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8009b60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009b64:	484b      	ldr	r0, [pc, #300]	; (8009c94 <_Z12MX_ADC1_Initv+0x220>)
 8009b66:	f7ff fe5b 	bl	8009820 <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC1);
 8009b6a:	484a      	ldr	r0, [pc, #296]	; (8009c94 <_Z12MX_ADC1_Initv+0x220>)
 8009b6c:	f7ff ff27 	bl	80099be <LL_ADC_DisableIT_EOCS>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8009b70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009b74:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8009b76:	2300      	movs	r3, #0
 8009b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8009b7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009b7e:	4619      	mov	r1, r3
 8009b80:	4845      	ldr	r0, [pc, #276]	; (8009c98 <_Z12MX_ADC1_Initv+0x224>)
 8009b82:	f7f8 fe79 	bl	8002878 <LL_ADC_CommonInit>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8009b86:	4a45      	ldr	r2, [pc, #276]	; (8009c9c <_Z12MX_ADC1_Initv+0x228>)
 8009b88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009b8c:	4841      	ldr	r0, [pc, #260]	; (8009c94 <_Z12MX_ADC1_Initv+0x220>)
 8009b8e:	f7ff fe14 	bl	80097ba <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_28CYCLES);
 8009b92:	2202      	movs	r2, #2
 8009b94:	4941      	ldr	r1, [pc, #260]	; (8009c9c <_Z12MX_ADC1_Initv+0x228>)
 8009b96:	483f      	ldr	r0, [pc, #252]	; (8009c94 <_Z12MX_ADC1_Initv+0x220>)
 8009b98:	f7ff feb7 	bl	800990a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_12);
 8009b9c:	4a40      	ldr	r2, [pc, #256]	; (8009ca0 <_Z12MX_ADC1_Initv+0x22c>)
 8009b9e:	f240 2105 	movw	r1, #517	; 0x205
 8009ba2:	483c      	ldr	r0, [pc, #240]	; (8009c94 <_Z12MX_ADC1_Initv+0x220>)
 8009ba4:	f7ff fe09 	bl	80097ba <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_28CYCLES);
 8009ba8:	2202      	movs	r2, #2
 8009baa:	493d      	ldr	r1, [pc, #244]	; (8009ca0 <_Z12MX_ADC1_Initv+0x22c>)
 8009bac:	4839      	ldr	r0, [pc, #228]	; (8009c94 <_Z12MX_ADC1_Initv+0x220>)
 8009bae:	f7ff feac 	bl	800990a <LL_ADC_SetChannelSamplingTime>
  /** Configure Injected Channel
  */
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8009bb2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009bb6:	61bb      	str	r3, [r7, #24]
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 8009bb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009bbc:	61fb      	str	r3, [r7, #28]
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_1RANK;
 8009bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bc2:	623b      	str	r3, [r7, #32]
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8009bc8:	f107 0318 	add.w	r3, r7, #24
 8009bcc:	4619      	mov	r1, r3
 8009bce:	4831      	ldr	r0, [pc, #196]	; (8009c94 <_Z12MX_ADC1_Initv+0x220>)
 8009bd0:	f7f8 ff0e 	bl	80029f0 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 8009bd4:	482f      	ldr	r0, [pc, #188]	; (8009c94 <_Z12MX_ADC1_Initv+0x220>)
 8009bd6:	f7ff ff02 	bl	80099de <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_0);
 8009bda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009bde:	2101      	movs	r1, #1
 8009be0:	482c      	ldr	r0, [pc, #176]	; (8009c94 <_Z12MX_ADC1_Initv+0x220>)
 8009be2:	f7ff fe30 	bl	8009846 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 8009be6:	2200      	movs	r2, #0
 8009be8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009bec:	4829      	ldr	r0, [pc, #164]	; (8009c94 <_Z12MX_ADC1_Initv+0x220>)
 8009bee:	f7ff fe8c 	bl	800990a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_1, 0);
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	2101      	movs	r1, #1
 8009bf6:	4827      	ldr	r0, [pc, #156]	; (8009c94 <_Z12MX_ADC1_Initv+0x220>)
 8009bf8:	f7ff fe5f 	bl	80098ba <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8009bfc:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8009c00:	4824      	ldr	r0, [pc, #144]	; (8009c94 <_Z12MX_ADC1_Initv+0x220>)
 8009c02:	f7ff fecb 	bl	800999c <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8009c06:	f107 0318 	add.w	r3, r7, #24
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	4821      	ldr	r0, [pc, #132]	; (8009c94 <_Z12MX_ADC1_Initv+0x220>)
 8009c0e:	f7f8 feef 	bl	80029f0 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 8009c12:	4820      	ldr	r0, [pc, #128]	; (8009c94 <_Z12MX_ADC1_Initv+0x220>)
 8009c14:	f7ff fee3 	bl	80099de <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_11);
 8009c18:	4a22      	ldr	r2, [pc, #136]	; (8009ca4 <_Z12MX_ADC1_Initv+0x230>)
 8009c1a:	f241 1102 	movw	r1, #4354	; 0x1102
 8009c1e:	481d      	ldr	r0, [pc, #116]	; (8009c94 <_Z12MX_ADC1_Initv+0x220>)
 8009c20:	f7ff fe11 	bl	8009846 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 8009c24:	2200      	movs	r2, #0
 8009c26:	491f      	ldr	r1, [pc, #124]	; (8009ca4 <_Z12MX_ADC1_Initv+0x230>)
 8009c28:	481a      	ldr	r0, [pc, #104]	; (8009c94 <_Z12MX_ADC1_Initv+0x220>)
 8009c2a:	f7ff fe6e 	bl	800990a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_2, 0);
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f241 1102 	movw	r1, #4354	; 0x1102
 8009c34:	4817      	ldr	r0, [pc, #92]	; (8009c94 <_Z12MX_ADC1_Initv+0x220>)
 8009c36:	f7ff fe40 	bl	80098ba <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8009c3a:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8009c3e:	4815      	ldr	r0, [pc, #84]	; (8009c94 <_Z12MX_ADC1_Initv+0x220>)
 8009c40:	f7ff feac 	bl	800999c <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8009c44:	f107 0318 	add.w	r3, r7, #24
 8009c48:	4619      	mov	r1, r3
 8009c4a:	4812      	ldr	r0, [pc, #72]	; (8009c94 <_Z12MX_ADC1_Initv+0x220>)
 8009c4c:	f7f8 fed0 	bl	80029f0 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 8009c50:	4810      	ldr	r0, [pc, #64]	; (8009c94 <_Z12MX_ADC1_Initv+0x220>)
 8009c52:	f7ff fec4 	bl	80099de <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_10);
 8009c56:	220a      	movs	r2, #10
 8009c58:	f242 2103 	movw	r1, #8707	; 0x2203
 8009c5c:	480d      	ldr	r0, [pc, #52]	; (8009c94 <_Z12MX_ADC1_Initv+0x220>)
 8009c5e:	f7ff fdf2 	bl	8009846 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_3CYCLES);
 8009c62:	2200      	movs	r2, #0
 8009c64:	210a      	movs	r1, #10
 8009c66:	480b      	ldr	r0, [pc, #44]	; (8009c94 <_Z12MX_ADC1_Initv+0x220>)
 8009c68:	f7ff fe4f 	bl	800990a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_3, 0);
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f242 2103 	movw	r1, #8707	; 0x2203
 8009c72:	4808      	ldr	r0, [pc, #32]	; (8009c94 <_Z12MX_ADC1_Initv+0x220>)
 8009c74:	f7ff fe21 	bl	80098ba <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8009c78:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8009c7c:	4805      	ldr	r0, [pc, #20]	; (8009c94 <_Z12MX_ADC1_Initv+0x220>)
 8009c7e:	f7ff fe8d 	bl	800999c <LL_ADC_INJ_StartConversionExtTrig>

}
 8009c82:	bf00      	nop
 8009c84:	3758      	adds	r7, #88	; 0x58
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	40020800 	.word	0x40020800
 8009c90:	40020000 	.word	0x40020000
 8009c94:	40012000 	.word	0x40012000
 8009c98:	40012300 	.word	0x40012300
 8009c9c:	02300001 	.word	0x02300001
 8009ca0:	0060000c 	.word	0x0060000c
 8009ca4:	0030000b 	.word	0x0030000b

08009ca8 <_Z12MX_ADC2_Initv>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b092      	sub	sp, #72	; 0x48
 8009cac:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8009cae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	601a      	str	r2, [r3, #0]
 8009cb6:	605a      	str	r2, [r3, #4]
 8009cb8:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8009cba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	601a      	str	r2, [r3, #0]
 8009cc2:	605a      	str	r2, [r3, #4]
 8009cc4:	609a      	str	r2, [r3, #8]
 8009cc6:	60da      	str	r2, [r3, #12]
 8009cc8:	611a      	str	r2, [r3, #16]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 8009cca:	f107 0318 	add.w	r3, r7, #24
 8009cce:	2200      	movs	r2, #0
 8009cd0:	601a      	str	r2, [r3, #0]
 8009cd2:	605a      	str	r2, [r3, #4]
 8009cd4:	609a      	str	r2, [r3, #8]
 8009cd6:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009cd8:	463b      	mov	r3, r7
 8009cda:	2200      	movs	r2, #0
 8009cdc:	601a      	str	r2, [r3, #0]
 8009cde:	605a      	str	r2, [r3, #4]
 8009ce0:	609a      	str	r2, [r3, #8]
 8009ce2:	60da      	str	r2, [r3, #12]
 8009ce4:	611a      	str	r2, [r3, #16]
 8009ce6:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC2);
 8009ce8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009cec:	f7ff fea0 	bl	8009a30 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8009cf0:	2004      	movs	r0, #4
 8009cf2:	f7ff fe85 	bl	8009a00 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8009cf6:	2001      	movs	r0, #1
 8009cf8:	f7ff fe82 	bl	8009a00 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8009cfc:	2002      	movs	r0, #2
 8009cfe:	f7ff fe7f 	bl	8009a00 <LL_AHB1_GRP1_EnableClock>
  PC0   ------> ADC2_IN10
  PC1   ------> ADC2_IN11
  PA0-WKUP   ------> ADC2_IN0
  PB1   ------> ADC2_IN9
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8009d02:	2303      	movs	r3, #3
 8009d04:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8009d06:	2303      	movs	r3, #3
 8009d08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009d0e:	463b      	mov	r3, r7
 8009d10:	4619      	mov	r1, r3
 8009d12:	4863      	ldr	r0, [pc, #396]	; (8009ea0 <_Z12MX_ADC2_Initv+0x1f8>)
 8009d14:	f7f9 f8c5 	bl	8002ea2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8009d1c:	2303      	movs	r3, #3
 8009d1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8009d20:	2300      	movs	r3, #0
 8009d22:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d24:	463b      	mov	r3, r7
 8009d26:	4619      	mov	r1, r3
 8009d28:	485e      	ldr	r0, [pc, #376]	; (8009ea4 <_Z12MX_ADC2_Initv+0x1fc>)
 8009d2a:	f7f9 f8ba 	bl	8002ea2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8009d2e:	2302      	movs	r3, #2
 8009d30:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8009d32:	2303      	movs	r3, #3
 8009d34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8009d36:	2300      	movs	r3, #0
 8009d38:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009d3a:	463b      	mov	r3, r7
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	485a      	ldr	r0, [pc, #360]	; (8009ea8 <_Z12MX_ADC2_Initv+0x200>)
 8009d40:	f7f9 f8af 	bl	8002ea2 <LL_GPIO_Init>

  /* ADC2 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8009d44:	f7ff fcac 	bl	80096a0 <__NVIC_GetPriorityGrouping>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	2102      	movs	r1, #2
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7ff fd02 	bl	8009758 <NVIC_EncodePriority>
 8009d54:	4603      	mov	r3, r0
 8009d56:	4619      	mov	r1, r3
 8009d58:	2012      	movs	r0, #18
 8009d5a:	f7ff fccf 	bl	80096fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 8009d5e:	2012      	movs	r0, #18
 8009d60:	f7ff fcac 	bl	80096bc <__NVIC_EnableIRQ>

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8009d64:	2300      	movs	r3, #0
 8009d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8009d6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d70:	647b      	str	r3, [r7, #68]	; 0x44
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8009d72:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009d76:	4619      	mov	r1, r3
 8009d78:	484c      	ldr	r0, [pc, #304]	; (8009eac <_Z12MX_ADC2_Initv+0x204>)
 8009d7a:	f7f8 fdc5 	bl	8002908 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8009d82:	2300      	movs	r3, #0
 8009d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8009d86:	2300      	movs	r3, #0
 8009d88:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8009d8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d92:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8009d94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009d98:	4619      	mov	r1, r3
 8009d9a:	4844      	ldr	r0, [pc, #272]	; (8009eac <_Z12MX_ADC2_Initv+0x204>)
 8009d9c:	f7f8 fde0 	bl	8002960 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC2, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8009da0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009da4:	4841      	ldr	r0, [pc, #260]	; (8009eac <_Z12MX_ADC2_Initv+0x204>)
 8009da6:	f7ff fd3b 	bl	8009820 <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC2);
 8009daa:	4840      	ldr	r0, [pc, #256]	; (8009eac <_Z12MX_ADC2_Initv+0x204>)
 8009dac:	f7ff fe07 	bl	80099be <LL_ADC_DisableIT_EOCS>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_9);
 8009db0:	4a3f      	ldr	r2, [pc, #252]	; (8009eb0 <_Z12MX_ADC2_Initv+0x208>)
 8009db2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009db6:	483d      	ldr	r0, [pc, #244]	; (8009eac <_Z12MX_ADC2_Initv+0x204>)
 8009db8:	f7ff fcff 	bl	80097ba <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_3CYCLES);
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	493c      	ldr	r1, [pc, #240]	; (8009eb0 <_Z12MX_ADC2_Initv+0x208>)
 8009dc0:	483a      	ldr	r0, [pc, #232]	; (8009eac <_Z12MX_ADC2_Initv+0x204>)
 8009dc2:	f7ff fda2 	bl	800990a <LL_ADC_SetChannelSamplingTime>
  /** Configure Injected Channel
  */
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8009dc6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009dca:	61bb      	str	r3, [r7, #24]
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 8009dcc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009dd0:	61fb      	str	r3, [r7, #28]
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_1RANK;
 8009dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009dd6:	623b      	str	r3, [r7, #32]
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 8009ddc:	f107 0318 	add.w	r3, r7, #24
 8009de0:	4619      	mov	r1, r3
 8009de2:	4832      	ldr	r0, [pc, #200]	; (8009eac <_Z12MX_ADC2_Initv+0x204>)
 8009de4:	f7f8 fe04 	bl	80029f0 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 8009de8:	4830      	ldr	r0, [pc, #192]	; (8009eac <_Z12MX_ADC2_Initv+0x204>)
 8009dea:	f7ff fdf8 	bl	80099de <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_0);
 8009dee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009df2:	2101      	movs	r1, #1
 8009df4:	482d      	ldr	r0, [pc, #180]	; (8009eac <_Z12MX_ADC2_Initv+0x204>)
 8009df6:	f7ff fd26 	bl	8009846 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009e00:	482a      	ldr	r0, [pc, #168]	; (8009eac <_Z12MX_ADC2_Initv+0x204>)
 8009e02:	f7ff fd82 	bl	800990a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_1, 0);
 8009e06:	2200      	movs	r2, #0
 8009e08:	2101      	movs	r1, #1
 8009e0a:	4828      	ldr	r0, [pc, #160]	; (8009eac <_Z12MX_ADC2_Initv+0x204>)
 8009e0c:	f7ff fd55 	bl	80098ba <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 8009e10:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8009e14:	4825      	ldr	r0, [pc, #148]	; (8009eac <_Z12MX_ADC2_Initv+0x204>)
 8009e16:	f7ff fdc1 	bl	800999c <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel
  */
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 8009e1a:	f107 0318 	add.w	r3, r7, #24
 8009e1e:	4619      	mov	r1, r3
 8009e20:	4822      	ldr	r0, [pc, #136]	; (8009eac <_Z12MX_ADC2_Initv+0x204>)
 8009e22:	f7f8 fde5 	bl	80029f0 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 8009e26:	4821      	ldr	r0, [pc, #132]	; (8009eac <_Z12MX_ADC2_Initv+0x204>)
 8009e28:	f7ff fdd9 	bl	80099de <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_11);
 8009e2c:	4a21      	ldr	r2, [pc, #132]	; (8009eb4 <_Z12MX_ADC2_Initv+0x20c>)
 8009e2e:	f241 1102 	movw	r1, #4354	; 0x1102
 8009e32:	481e      	ldr	r0, [pc, #120]	; (8009eac <_Z12MX_ADC2_Initv+0x204>)
 8009e34:	f7ff fd07 	bl	8009846 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 8009e38:	2200      	movs	r2, #0
 8009e3a:	491e      	ldr	r1, [pc, #120]	; (8009eb4 <_Z12MX_ADC2_Initv+0x20c>)
 8009e3c:	481b      	ldr	r0, [pc, #108]	; (8009eac <_Z12MX_ADC2_Initv+0x204>)
 8009e3e:	f7ff fd64 	bl	800990a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_2, 0);
 8009e42:	2200      	movs	r2, #0
 8009e44:	f241 1102 	movw	r1, #4354	; 0x1102
 8009e48:	4818      	ldr	r0, [pc, #96]	; (8009eac <_Z12MX_ADC2_Initv+0x204>)
 8009e4a:	f7ff fd36 	bl	80098ba <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 8009e4e:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8009e52:	4816      	ldr	r0, [pc, #88]	; (8009eac <_Z12MX_ADC2_Initv+0x204>)
 8009e54:	f7ff fda2 	bl	800999c <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel
  */
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 8009e58:	f107 0318 	add.w	r3, r7, #24
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	4813      	ldr	r0, [pc, #76]	; (8009eac <_Z12MX_ADC2_Initv+0x204>)
 8009e60:	f7f8 fdc6 	bl	80029f0 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 8009e64:	4811      	ldr	r0, [pc, #68]	; (8009eac <_Z12MX_ADC2_Initv+0x204>)
 8009e66:	f7ff fdba 	bl	80099de <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_10);
 8009e6a:	220a      	movs	r2, #10
 8009e6c:	f242 2103 	movw	r1, #8707	; 0x2203
 8009e70:	480e      	ldr	r0, [pc, #56]	; (8009eac <_Z12MX_ADC2_Initv+0x204>)
 8009e72:	f7ff fce8 	bl	8009846 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_3CYCLES);
 8009e76:	2200      	movs	r2, #0
 8009e78:	210a      	movs	r1, #10
 8009e7a:	480c      	ldr	r0, [pc, #48]	; (8009eac <_Z12MX_ADC2_Initv+0x204>)
 8009e7c:	f7ff fd45 	bl	800990a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_3, 0);
 8009e80:	2200      	movs	r2, #0
 8009e82:	f242 2103 	movw	r1, #8707	; 0x2203
 8009e86:	4809      	ldr	r0, [pc, #36]	; (8009eac <_Z12MX_ADC2_Initv+0x204>)
 8009e88:	f7ff fd17 	bl	80098ba <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 8009e8c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8009e90:	4806      	ldr	r0, [pc, #24]	; (8009eac <_Z12MX_ADC2_Initv+0x204>)
 8009e92:	f7ff fd83 	bl	800999c <LL_ADC_INJ_StartConversionExtTrig>

}
 8009e96:	bf00      	nop
 8009e98:	3748      	adds	r7, #72	; 0x48
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	40020800 	.word	0x40020800
 8009ea4:	40020000 	.word	0x40020000
 8009ea8:	40020400 	.word	0x40020400
 8009eac:	40012100 	.word	0x40012100
 8009eb0:	03b00009 	.word	0x03b00009
 8009eb4:	0030000b 	.word	0x0030000b

08009eb8 <_Z12MX_ADC3_Initv>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b084      	sub	sp, #16
 8009ebc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8009ebe:	463b      	mov	r3, r7
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	601a      	str	r2, [r3, #0]
 8009ec4:	605a      	str	r2, [r3, #4]
 8009ec6:	609a      	str	r2, [r3, #8]
 8009ec8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8009eca:	4b26      	ldr	r3, [pc, #152]	; (8009f64 <_Z12MX_ADC3_Initv+0xac>)
 8009ecc:	4a26      	ldr	r2, [pc, #152]	; (8009f68 <_Z12MX_ADC3_Initv+0xb0>)
 8009ece:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8009ed0:	4b24      	ldr	r3, [pc, #144]	; (8009f64 <_Z12MX_ADC3_Initv+0xac>)
 8009ed2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009ed6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8009ed8:	4b22      	ldr	r3, [pc, #136]	; (8009f64 <_Z12MX_ADC3_Initv+0xac>)
 8009eda:	2200      	movs	r2, #0
 8009edc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8009ede:	4b21      	ldr	r3, [pc, #132]	; (8009f64 <_Z12MX_ADC3_Initv+0xac>)
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8009ee4:	4b1f      	ldr	r3, [pc, #124]	; (8009f64 <_Z12MX_ADC3_Initv+0xac>)
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8009eea:	4b1e      	ldr	r3, [pc, #120]	; (8009f64 <_Z12MX_ADC3_Initv+0xac>)
 8009eec:	2200      	movs	r2, #0
 8009eee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009ef2:	4b1c      	ldr	r3, [pc, #112]	; (8009f64 <_Z12MX_ADC3_Initv+0xac>)
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009ef8:	4b1a      	ldr	r3, [pc, #104]	; (8009f64 <_Z12MX_ADC3_Initv+0xac>)
 8009efa:	4a1c      	ldr	r2, [pc, #112]	; (8009f6c <_Z12MX_ADC3_Initv+0xb4>)
 8009efc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009efe:	4b19      	ldr	r3, [pc, #100]	; (8009f64 <_Z12MX_ADC3_Initv+0xac>)
 8009f00:	2200      	movs	r2, #0
 8009f02:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8009f04:	4b17      	ldr	r3, [pc, #92]	; (8009f64 <_Z12MX_ADC3_Initv+0xac>)
 8009f06:	2201      	movs	r2, #1
 8009f08:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8009f0a:	4b16      	ldr	r3, [pc, #88]	; (8009f64 <_Z12MX_ADC3_Initv+0xac>)
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009f12:	4b14      	ldr	r3, [pc, #80]	; (8009f64 <_Z12MX_ADC3_Initv+0xac>)
 8009f14:	2201      	movs	r2, #1
 8009f16:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8009f18:	4812      	ldr	r0, [pc, #72]	; (8009f64 <_Z12MX_ADC3_Initv+0xac>)
 8009f1a:	f7f7 f8c9 	bl	80010b0 <HAL_ADC_Init>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	bf14      	ite	ne
 8009f24:	2301      	movne	r3, #1
 8009f26:	2300      	moveq	r3, #0
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d001      	beq.n	8009f32 <_Z12MX_ADC3_Initv+0x7a>
  {
	  ErrorHandler::ADC_Error_Handler();
 8009f2e:	f000 f81f 	bl	8009f70 <_ZN12ErrorHandler17ADC_Error_HandlerEv>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8009f32:	230d      	movs	r3, #13
 8009f34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8009f36:	2301      	movs	r3, #1
 8009f38:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8009f3e:	463b      	mov	r3, r7
 8009f40:	4619      	mov	r1, r3
 8009f42:	4808      	ldr	r0, [pc, #32]	; (8009f64 <_Z12MX_ADC3_Initv+0xac>)
 8009f44:	f7f7 fa56 	bl	80013f4 <HAL_ADC_ConfigChannel>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	bf14      	ite	ne
 8009f4e:	2301      	movne	r3, #1
 8009f50:	2300      	moveq	r3, #0
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d001      	beq.n	8009f5c <_Z12MX_ADC3_Initv+0xa4>
  {
	  ErrorHandler::ADC_Error_Handler();
 8009f58:	f000 f80a 	bl	8009f70 <_ZN12ErrorHandler17ADC_Error_HandlerEv>
  }

}
 8009f5c:	bf00      	nop
 8009f5e:	3710      	adds	r7, #16
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	200003ac 	.word	0x200003ac
 8009f68:	40012200 	.word	0x40012200
 8009f6c:	0f000001 	.word	0x0f000001

08009f70 <_ZN12ErrorHandler17ADC_Error_HandlerEv>:

ErrorHandler::~ErrorHandler() {
	// TODO Auto-generated destructor stub
}

void ErrorHandler::ADC_Error_Handler(){
 8009f70:	b480      	push	{r7}
 8009f72:	af00      	add	r7, sp, #0
	//ADC Error Handler
	  /* USER CODE BEGIN Error_Handler_Debug */
	while(1){}
 8009f74:	e7fe      	b.n	8009f74 <_ZN12ErrorHandler17ADC_Error_HandlerEv+0x4>
	...

08009f78 <__NVIC_GetPriorityGrouping>:
{
 8009f78:	b480      	push	{r7}
 8009f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009f7c:	4b04      	ldr	r3, [pc, #16]	; (8009f90 <__NVIC_GetPriorityGrouping+0x18>)
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	0a1b      	lsrs	r3, r3, #8
 8009f82:	f003 0307 	and.w	r3, r3, #7
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr
 8009f90:	e000ed00 	.word	0xe000ed00

08009f94 <__NVIC_EnableIRQ>:
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	db0d      	blt.n	8009fc2 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	f003 021f 	and.w	r2, r3, #31
 8009fb0:	4907      	ldr	r1, [pc, #28]	; (8009fd0 <__NVIC_EnableIRQ+0x3c>)
 8009fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fb6:	095b      	lsrs	r3, r3, #5
 8009fb8:	2001      	movs	r0, #1
 8009fba:	fa00 f202 	lsl.w	r2, r0, r2
 8009fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009fc2:	bf00      	nop
 8009fc4:	370c      	adds	r7, #12
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop
 8009fd0:	e000e100 	.word	0xe000e100

08009fd4 <__NVIC_SetPriority>:
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	4603      	mov	r3, r0
 8009fdc:	6039      	str	r1, [r7, #0]
 8009fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	db0c      	blt.n	800a002 <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	4a0e      	ldr	r2, [pc, #56]	; (800a028 <__NVIC_SetPriority+0x54>)
 8009fee:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8009ff2:	4608      	mov	r0, r1
 8009ff4:	011b      	lsls	r3, r3, #4
 8009ff6:	b2d9      	uxtb	r1, r3
 8009ff8:	1813      	adds	r3, r2, r0
 8009ffa:	460a      	mov	r2, r1
 8009ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a000:	e00c      	b.n	800a01c <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	b2da      	uxtb	r2, r3
 800a006:	4909      	ldr	r1, [pc, #36]	; (800a02c <__NVIC_SetPriority+0x58>)
 800a008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	f003 030f 	and.w	r3, r3, #15
 800a012:	3b04      	subs	r3, #4
 800a014:	0112      	lsls	r2, r2, #4
 800a016:	b2d2      	uxtb	r2, r2
 800a018:	440b      	add	r3, r1
 800a01a:	761a      	strb	r2, [r3, #24]
}
 800a01c:	bf00      	nop
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr
 800a028:	e000e100 	.word	0xe000e100
 800a02c:	e000ed00 	.word	0xe000ed00

0800a030 <NVIC_EncodePriority>:
{
 800a030:	b480      	push	{r7}
 800a032:	b089      	sub	sp, #36	; 0x24
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f003 0307 	and.w	r3, r3, #7
 800a042:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a044:	69fb      	ldr	r3, [r7, #28]
 800a046:	f1c3 0307 	rsb	r3, r3, #7
 800a04a:	2b04      	cmp	r3, #4
 800a04c:	bf28      	it	cs
 800a04e:	2304      	movcs	r3, #4
 800a050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a052:	69fb      	ldr	r3, [r7, #28]
 800a054:	3304      	adds	r3, #4
 800a056:	2b06      	cmp	r3, #6
 800a058:	d902      	bls.n	800a060 <NVIC_EncodePriority+0x30>
 800a05a:	69fb      	ldr	r3, [r7, #28]
 800a05c:	3b03      	subs	r3, #3
 800a05e:	e000      	b.n	800a062 <NVIC_EncodePriority+0x32>
 800a060:	2300      	movs	r3, #0
 800a062:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a064:	69bb      	ldr	r3, [r7, #24]
 800a066:	2201      	movs	r2, #1
 800a068:	fa02 f303 	lsl.w	r3, r2, r3
 800a06c:	1e5a      	subs	r2, r3, #1
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	401a      	ands	r2, r3
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	2101      	movs	r1, #1
 800a07a:	fa01 f303 	lsl.w	r3, r1, r3
 800a07e:	1e59      	subs	r1, r3, #1
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	400b      	ands	r3, r1
         );
 800a084:	4313      	orrs	r3, r2
}
 800a086:	4618      	mov	r0, r3
 800a088:	3724      	adds	r7, #36	; 0x24
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
	...

0800a094 <LL_SYSCFG_SetEXTISource>:
{
 800a094:	b480      	push	{r7}
 800a096:	b085      	sub	sp, #20
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800a09e:	4a13      	ldr	r2, [pc, #76]	; (800a0ec <LL_SYSCFG_SetEXTISource+0x58>)
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	3302      	adds	r3, #2
 800a0a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	0c1b      	lsrs	r3, r3, #16
 800a0ae:	43db      	mvns	r3, r3
 800a0b0:	ea02 0103 	and.w	r1, r2, r3
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	0c1b      	lsrs	r3, r3, #16
 800a0b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	fa93 f3a3 	rbit	r3, r3
 800a0c0:	60bb      	str	r3, [r7, #8]
  return result;
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	fab3 f383 	clz	r3, r3
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	fa03 f202 	lsl.w	r2, r3, r2
 800a0d2:	4806      	ldr	r0, [pc, #24]	; (800a0ec <LL_SYSCFG_SetEXTISource+0x58>)
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	430a      	orrs	r2, r1
 800a0da:	3302      	adds	r3, #2
 800a0dc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800a0e0:	bf00      	nop
 800a0e2:	3714      	adds	r7, #20
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr
 800a0ec:	40013800 	.word	0x40013800

0800a0f0 <LL_GPIO_SetPinMode>:
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b089      	sub	sp, #36	; 0x24
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	60b9      	str	r1, [r7, #8]
 800a0fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	fa93 f3a3 	rbit	r3, r3
 800a10a:	613b      	str	r3, [r7, #16]
  return result;
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	fab3 f383 	clz	r3, r3
 800a112:	b2db      	uxtb	r3, r3
 800a114:	005b      	lsls	r3, r3, #1
 800a116:	2103      	movs	r1, #3
 800a118:	fa01 f303 	lsl.w	r3, r1, r3
 800a11c:	43db      	mvns	r3, r3
 800a11e:	401a      	ands	r2, r3
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a124:	69fb      	ldr	r3, [r7, #28]
 800a126:	fa93 f3a3 	rbit	r3, r3
 800a12a:	61bb      	str	r3, [r7, #24]
  return result;
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	fab3 f383 	clz	r3, r3
 800a132:	b2db      	uxtb	r3, r3
 800a134:	005b      	lsls	r3, r3, #1
 800a136:	6879      	ldr	r1, [r7, #4]
 800a138:	fa01 f303 	lsl.w	r3, r1, r3
 800a13c:	431a      	orrs	r2, r3
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	601a      	str	r2, [r3, #0]
}
 800a142:	bf00      	nop
 800a144:	3724      	adds	r7, #36	; 0x24
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr

0800a14e <LL_GPIO_SetPinPull>:
{
 800a14e:	b480      	push	{r7}
 800a150:	b089      	sub	sp, #36	; 0x24
 800a152:	af00      	add	r7, sp, #0
 800a154:	60f8      	str	r0, [r7, #12]
 800a156:	60b9      	str	r1, [r7, #8]
 800a158:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	68da      	ldr	r2, [r3, #12]
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	fa93 f3a3 	rbit	r3, r3
 800a168:	613b      	str	r3, [r7, #16]
  return result;
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	fab3 f383 	clz	r3, r3
 800a170:	b2db      	uxtb	r3, r3
 800a172:	005b      	lsls	r3, r3, #1
 800a174:	2103      	movs	r1, #3
 800a176:	fa01 f303 	lsl.w	r3, r1, r3
 800a17a:	43db      	mvns	r3, r3
 800a17c:	401a      	ands	r2, r3
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	fa93 f3a3 	rbit	r3, r3
 800a188:	61bb      	str	r3, [r7, #24]
  return result;
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	fab3 f383 	clz	r3, r3
 800a190:	b2db      	uxtb	r3, r3
 800a192:	005b      	lsls	r3, r3, #1
 800a194:	6879      	ldr	r1, [r7, #4]
 800a196:	fa01 f303 	lsl.w	r3, r1, r3
 800a19a:	431a      	orrs	r2, r3
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	60da      	str	r2, [r3, #12]
}
 800a1a0:	bf00      	nop
 800a1a2:	3724      	adds	r7, #36	; 0x24
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <LL_GPIO_ResetOutputPin>:
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	041a      	lsls	r2, r3, #16
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	619a      	str	r2, [r3, #24]
}
 800a1be:	bf00      	nop
 800a1c0:	370c      	adds	r7, #12
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr
	...

0800a1cc <LL_AHB1_GRP1_EnableClock>:
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b085      	sub	sp, #20
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800a1d4:	4b08      	ldr	r3, [pc, #32]	; (800a1f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800a1d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	4907      	ldr	r1, [pc, #28]	; (800a1f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800a1e0:	4b05      	ldr	r3, [pc, #20]	; (800a1f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800a1e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	4013      	ands	r3, r2
 800a1e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
}
 800a1ec:	bf00      	nop
 800a1ee:	3714      	adds	r7, #20
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr
 800a1f8:	40023800 	.word	0x40023800

0800a1fc <_ZN8GPIOInit4InitEv>:
	// TODO Auto-generated destructor stub
}

void MX_GPIO_Init(void);

void GPIOInit::Init() {
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 800a200:	f000 f802 	bl	800a208 <_Z12MX_GPIO_Initv>
}
 800a204:	bf00      	nop
 800a206:	bd80      	pop	{r7, pc}

0800a208 <_Z12MX_GPIO_Initv>:

void MX_GPIO_Init(void)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b088      	sub	sp, #32
 800a20c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800a20e:	f107 0318 	add.w	r3, r7, #24
 800a212:	2200      	movs	r2, #0
 800a214:	601a      	str	r2, [r3, #0]
 800a216:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a218:	463b      	mov	r3, r7
 800a21a:	2200      	movs	r2, #0
 800a21c:	601a      	str	r2, [r3, #0]
 800a21e:	605a      	str	r2, [r3, #4]
 800a220:	609a      	str	r2, [r3, #8]
 800a222:	60da      	str	r2, [r3, #12]
 800a224:	611a      	str	r2, [r3, #16]
 800a226:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800a228:	2004      	movs	r0, #4
 800a22a:	f7ff ffcf 	bl	800a1cc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800a22e:	2080      	movs	r0, #128	; 0x80
 800a230:	f7ff ffcc 	bl	800a1cc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800a234:	2001      	movs	r0, #1
 800a236:	f7ff ffc9 	bl	800a1cc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800a23a:	2002      	movs	r0, #2
 800a23c:	f7ff ffc6 	bl	800a1cc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 800a240:	2120      	movs	r1, #32
 800a242:	482c      	ldr	r0, [pc, #176]	; (800a2f4 <_Z12MX_GPIO_Initv+0xec>)
 800a244:	f7ff ffb2 	bl	800a1ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12);
 800a248:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800a24c:	482a      	ldr	r0, [pc, #168]	; (800a2f8 <_Z12MX_GPIO_Initv+0xf0>)
 800a24e:	f7ff ffad 	bl	800a1ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 800a252:	492a      	ldr	r1, [pc, #168]	; (800a2fc <_Z12MX_GPIO_Initv+0xf4>)
 800a254:	2002      	movs	r0, #2
 800a256:	f7ff ff1d 	bl	800a094 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 800a25a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a25e:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800a260:	2301      	movs	r3, #1
 800a262:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800a264:	2300      	movs	r3, #0
 800a266:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800a268:	2302      	movs	r3, #2
 800a26a:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800a26c:	f107 0318 	add.w	r3, r7, #24
 800a270:	4618      	mov	r0, r3
 800a272:	f7f8 fc95 	bl	8002ba0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 800a276:	2200      	movs	r2, #0
 800a278:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a27c:	481e      	ldr	r0, [pc, #120]	; (800a2f8 <_Z12MX_GPIO_Initv+0xf0>)
 800a27e:	f7ff ff66 	bl	800a14e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 800a282:	2200      	movs	r2, #0
 800a284:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a288:	481b      	ldr	r0, [pc, #108]	; (800a2f8 <_Z12MX_GPIO_Initv+0xf0>)
 800a28a:	f7ff ff31 	bl	800a0f0 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 800a28e:	2320      	movs	r3, #32
 800a290:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800a292:	2301      	movs	r3, #1
 800a294:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800a296:	2300      	movs	r3, #0
 800a298:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a29a:	2300      	movs	r3, #0
 800a29c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800a2a2:	463b      	mov	r3, r7
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	4813      	ldr	r0, [pc, #76]	; (800a2f4 <_Z12MX_GPIO_Initv+0xec>)
 800a2a8:	f7f8 fdfb 	bl	8002ea2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 800a2ac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a2b0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a2c2:	463b      	mov	r3, r7
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	480c      	ldr	r0, [pc, #48]	; (800a2f8 <_Z12MX_GPIO_Initv+0xf0>)
 800a2c8:	f7f8 fdeb 	bl	8002ea2 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800a2cc:	f7ff fe54 	bl	8009f78 <__NVIC_GetPriorityGrouping>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	2100      	movs	r1, #0
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7ff feaa 	bl	800a030 <NVIC_EncodePriority>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	4619      	mov	r1, r3
 800a2e0:	2028      	movs	r0, #40	; 0x28
 800a2e2:	f7ff fe77 	bl	8009fd4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a2e6:	2028      	movs	r0, #40	; 0x28
 800a2e8:	f7ff fe54 	bl	8009f94 <__NVIC_EnableIRQ>

}
 800a2ec:	bf00      	nop
 800a2ee:	3720      	adds	r7, #32
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	40020000 	.word	0x40020000
 800a2f8:	40020800 	.word	0x40020800
 800a2fc:	00f00003 	.word	0x00f00003

0800a300 <__NVIC_GetPriorityGrouping>:
{
 800a300:	b480      	push	{r7}
 800a302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a304:	4b04      	ldr	r3, [pc, #16]	; (800a318 <__NVIC_GetPriorityGrouping+0x18>)
 800a306:	68db      	ldr	r3, [r3, #12]
 800a308:	0a1b      	lsrs	r3, r3, #8
 800a30a:	f003 0307 	and.w	r3, r3, #7
}
 800a30e:	4618      	mov	r0, r3
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr
 800a318:	e000ed00 	.word	0xe000ed00

0800a31c <__NVIC_EnableIRQ>:
{
 800a31c:	b480      	push	{r7}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0
 800a322:	4603      	mov	r3, r0
 800a324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	db0d      	blt.n	800a34a <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a32e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a332:	b2db      	uxtb	r3, r3
 800a334:	f003 021f 	and.w	r2, r3, #31
 800a338:	4907      	ldr	r1, [pc, #28]	; (800a358 <__NVIC_EnableIRQ+0x3c>)
 800a33a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a33e:	095b      	lsrs	r3, r3, #5
 800a340:	2001      	movs	r0, #1
 800a342:	fa00 f202 	lsl.w	r2, r0, r2
 800a346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a34a:	bf00      	nop
 800a34c:	370c      	adds	r7, #12
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr
 800a356:	bf00      	nop
 800a358:	e000e100 	.word	0xe000e100

0800a35c <__NVIC_SetPriority>:
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	4603      	mov	r3, r0
 800a364:	6039      	str	r1, [r7, #0]
 800a366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	db0c      	blt.n	800a38a <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	b2db      	uxtb	r3, r3
 800a374:	4a0e      	ldr	r2, [pc, #56]	; (800a3b0 <__NVIC_SetPriority+0x54>)
 800a376:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800a37a:	4608      	mov	r0, r1
 800a37c:	011b      	lsls	r3, r3, #4
 800a37e:	b2d9      	uxtb	r1, r3
 800a380:	1813      	adds	r3, r2, r0
 800a382:	460a      	mov	r2, r1
 800a384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a388:	e00c      	b.n	800a3a4 <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	b2da      	uxtb	r2, r3
 800a38e:	4909      	ldr	r1, [pc, #36]	; (800a3b4 <__NVIC_SetPriority+0x58>)
 800a390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a394:	b2db      	uxtb	r3, r3
 800a396:	f003 030f 	and.w	r3, r3, #15
 800a39a:	3b04      	subs	r3, #4
 800a39c:	0112      	lsls	r2, r2, #4
 800a39e:	b2d2      	uxtb	r2, r2
 800a3a0:	440b      	add	r3, r1
 800a3a2:	761a      	strb	r2, [r3, #24]
}
 800a3a4:	bf00      	nop
 800a3a6:	370c      	adds	r7, #12
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr
 800a3b0:	e000e100 	.word	0xe000e100
 800a3b4:	e000ed00 	.word	0xe000ed00

0800a3b8 <NVIC_EncodePriority>:
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b089      	sub	sp, #36	; 0x24
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f003 0307 	and.w	r3, r3, #7
 800a3ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	f1c3 0307 	rsb	r3, r3, #7
 800a3d2:	2b04      	cmp	r3, #4
 800a3d4:	bf28      	it	cs
 800a3d6:	2304      	movcs	r3, #4
 800a3d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a3da:	69fb      	ldr	r3, [r7, #28]
 800a3dc:	3304      	adds	r3, #4
 800a3de:	2b06      	cmp	r3, #6
 800a3e0:	d902      	bls.n	800a3e8 <NVIC_EncodePriority+0x30>
 800a3e2:	69fb      	ldr	r3, [r7, #28]
 800a3e4:	3b03      	subs	r3, #3
 800a3e6:	e000      	b.n	800a3ea <NVIC_EncodePriority+0x32>
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a3ec:	69bb      	ldr	r3, [r7, #24]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a3f4:	1e5a      	subs	r2, r3, #1
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	401a      	ands	r2, r3
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	2101      	movs	r1, #1
 800a402:	fa01 f303 	lsl.w	r3, r1, r3
 800a406:	1e59      	subs	r1, r3, #1
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	400b      	ands	r3, r1
         );
 800a40c:	4313      	orrs	r3, r2
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3724      	adds	r7, #36	; 0x24
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr

0800a41a <LL_TIM_DisableARRPreload>:
{
 800a41a:	b480      	push	{r7}
 800a41c:	b083      	sub	sp, #12
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	601a      	str	r2, [r3, #0]
}
 800a42e:	bf00      	nop
 800a430:	370c      	adds	r7, #12
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr
	...

0800a43c <LL_TIM_OC_DisableFast>:
{
 800a43c:	b4b0      	push	{r4, r5, r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d01c      	beq.n	800a486 <LL_TIM_OC_DisableFast+0x4a>
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	2b04      	cmp	r3, #4
 800a450:	d017      	beq.n	800a482 <LL_TIM_OC_DisableFast+0x46>
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	2b10      	cmp	r3, #16
 800a456:	d012      	beq.n	800a47e <LL_TIM_OC_DisableFast+0x42>
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	2b40      	cmp	r3, #64	; 0x40
 800a45c:	d00d      	beq.n	800a47a <LL_TIM_OC_DisableFast+0x3e>
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a464:	d007      	beq.n	800a476 <LL_TIM_OC_DisableFast+0x3a>
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a46c:	d101      	bne.n	800a472 <LL_TIM_OC_DisableFast+0x36>
 800a46e:	2305      	movs	r3, #5
 800a470:	e00a      	b.n	800a488 <LL_TIM_OC_DisableFast+0x4c>
 800a472:	2306      	movs	r3, #6
 800a474:	e008      	b.n	800a488 <LL_TIM_OC_DisableFast+0x4c>
 800a476:	2304      	movs	r3, #4
 800a478:	e006      	b.n	800a488 <LL_TIM_OC_DisableFast+0x4c>
 800a47a:	2303      	movs	r3, #3
 800a47c:	e004      	b.n	800a488 <LL_TIM_OC_DisableFast+0x4c>
 800a47e:	2302      	movs	r3, #2
 800a480:	e002      	b.n	800a488 <LL_TIM_OC_DisableFast+0x4c>
 800a482:	2301      	movs	r3, #1
 800a484:	e000      	b.n	800a488 <LL_TIM_OC_DisableFast+0x4c>
 800a486:	2300      	movs	r3, #0
 800a488:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	3318      	adds	r3, #24
 800a48e:	461a      	mov	r2, r3
 800a490:	4629      	mov	r1, r5
 800a492:	4b09      	ldr	r3, [pc, #36]	; (800a4b8 <LL_TIM_OC_DisableFast+0x7c>)
 800a494:	5c5b      	ldrb	r3, [r3, r1]
 800a496:	4413      	add	r3, r2
 800a498:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800a49a:	6822      	ldr	r2, [r4, #0]
 800a49c:	4629      	mov	r1, r5
 800a49e:	4b07      	ldr	r3, [pc, #28]	; (800a4bc <LL_TIM_OC_DisableFast+0x80>)
 800a4a0:	5c5b      	ldrb	r3, [r3, r1]
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	2304      	movs	r3, #4
 800a4a6:	408b      	lsls	r3, r1
 800a4a8:	43db      	mvns	r3, r3
 800a4aa:	4013      	ands	r3, r2
 800a4ac:	6023      	str	r3, [r4, #0]
}
 800a4ae:	bf00      	nop
 800a4b0:	370c      	adds	r7, #12
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bcb0      	pop	{r4, r5, r7}
 800a4b6:	4770      	bx	lr
 800a4b8:	0800e4c4 	.word	0x0800e4c4
 800a4bc:	0800e4cc 	.word	0x0800e4cc

0800a4c0 <LL_TIM_OC_EnablePreload>:
{
 800a4c0:	b4b0      	push	{r4, r5, r7}
 800a4c2:	b083      	sub	sp, #12
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d01c      	beq.n	800a50a <LL_TIM_OC_EnablePreload+0x4a>
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	2b04      	cmp	r3, #4
 800a4d4:	d017      	beq.n	800a506 <LL_TIM_OC_EnablePreload+0x46>
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	2b10      	cmp	r3, #16
 800a4da:	d012      	beq.n	800a502 <LL_TIM_OC_EnablePreload+0x42>
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	2b40      	cmp	r3, #64	; 0x40
 800a4e0:	d00d      	beq.n	800a4fe <LL_TIM_OC_EnablePreload+0x3e>
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4e8:	d007      	beq.n	800a4fa <LL_TIM_OC_EnablePreload+0x3a>
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4f0:	d101      	bne.n	800a4f6 <LL_TIM_OC_EnablePreload+0x36>
 800a4f2:	2305      	movs	r3, #5
 800a4f4:	e00a      	b.n	800a50c <LL_TIM_OC_EnablePreload+0x4c>
 800a4f6:	2306      	movs	r3, #6
 800a4f8:	e008      	b.n	800a50c <LL_TIM_OC_EnablePreload+0x4c>
 800a4fa:	2304      	movs	r3, #4
 800a4fc:	e006      	b.n	800a50c <LL_TIM_OC_EnablePreload+0x4c>
 800a4fe:	2303      	movs	r3, #3
 800a500:	e004      	b.n	800a50c <LL_TIM_OC_EnablePreload+0x4c>
 800a502:	2302      	movs	r3, #2
 800a504:	e002      	b.n	800a50c <LL_TIM_OC_EnablePreload+0x4c>
 800a506:	2301      	movs	r3, #1
 800a508:	e000      	b.n	800a50c <LL_TIM_OC_EnablePreload+0x4c>
 800a50a:	2300      	movs	r3, #0
 800a50c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	3318      	adds	r3, #24
 800a512:	461a      	mov	r2, r3
 800a514:	4629      	mov	r1, r5
 800a516:	4b09      	ldr	r3, [pc, #36]	; (800a53c <LL_TIM_OC_EnablePreload+0x7c>)
 800a518:	5c5b      	ldrb	r3, [r3, r1]
 800a51a:	4413      	add	r3, r2
 800a51c:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800a51e:	6822      	ldr	r2, [r4, #0]
 800a520:	4629      	mov	r1, r5
 800a522:	4b07      	ldr	r3, [pc, #28]	; (800a540 <LL_TIM_OC_EnablePreload+0x80>)
 800a524:	5c5b      	ldrb	r3, [r3, r1]
 800a526:	4619      	mov	r1, r3
 800a528:	2308      	movs	r3, #8
 800a52a:	408b      	lsls	r3, r1
 800a52c:	4313      	orrs	r3, r2
 800a52e:	6023      	str	r3, [r4, #0]
}
 800a530:	bf00      	nop
 800a532:	370c      	adds	r7, #12
 800a534:	46bd      	mov	sp, r7
 800a536:	bcb0      	pop	{r4, r5, r7}
 800a538:	4770      	bx	lr
 800a53a:	bf00      	nop
 800a53c:	0800e4c4 	.word	0x0800e4c4
 800a540:	0800e4cc 	.word	0x0800e4cc

0800a544 <LL_TIM_SetTriggerOutput>:
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	431a      	orrs	r2, r3
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	605a      	str	r2, [r3, #4]
}
 800a55e:	bf00      	nop
 800a560:	370c      	adds	r7, #12
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr

0800a56a <LL_TIM_SetSlaveMode>:
{
 800a56a:	b480      	push	{r7}
 800a56c:	b083      	sub	sp, #12
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
 800a572:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	689b      	ldr	r3, [r3, #8]
 800a578:	f023 0207 	bic.w	r2, r3, #7
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	431a      	orrs	r2, r3
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	609a      	str	r2, [r3, #8]
}
 800a584:	bf00      	nop
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <LL_TIM_SetTriggerInput>:
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	431a      	orrs	r2, r3
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	609a      	str	r2, [r3, #8]
}
 800a5aa:	bf00      	nop
 800a5ac:	370c      	adds	r7, #12
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr

0800a5b6 <LL_TIM_DisableMasterSlaveMode>:
{
 800a5b6:	b480      	push	{r7}
 800a5b8:	b083      	sub	sp, #12
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	689b      	ldr	r3, [r3, #8]
 800a5c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	609a      	str	r2, [r3, #8]
}
 800a5ca:	bf00      	nop
 800a5cc:	370c      	adds	r7, #12
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr

0800a5d6 <LL_TIM_DisableIT_TRIG>:
{
 800a5d6:	b480      	push	{r7}
 800a5d8:	b083      	sub	sp, #12
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TIE);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	60da      	str	r2, [r3, #12]
}
 800a5ea:	bf00      	nop
 800a5ec:	370c      	adds	r7, #12
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr

0800a5f6 <LL_TIM_DisableDMAReq_TRIG>:
{
 800a5f6:	b480      	push	{r7}
 800a5f8:	b083      	sub	sp, #12
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TDE);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	60da      	str	r2, [r3, #12]
}
 800a60a:	bf00      	nop
 800a60c:	370c      	adds	r7, #12
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr
	...

0800a618 <LL_AHB1_GRP1_EnableClock>:
{
 800a618:	b480      	push	{r7}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800a620:	4b08      	ldr	r3, [pc, #32]	; (800a644 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800a622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	4907      	ldr	r1, [pc, #28]	; (800a644 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800a628:	4313      	orrs	r3, r2
 800a62a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800a62c:	4b05      	ldr	r3, [pc, #20]	; (800a644 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800a62e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4013      	ands	r3, r2
 800a634:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a636:	68fb      	ldr	r3, [r7, #12]
}
 800a638:	bf00      	nop
 800a63a:	3714      	adds	r7, #20
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr
 800a644:	40023800 	.word	0x40023800

0800a648 <LL_APB2_GRP1_EnableClock>:
{
 800a648:	b480      	push	{r7}
 800a64a:	b085      	sub	sp, #20
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800a650:	4b08      	ldr	r3, [pc, #32]	; (800a674 <LL_APB2_GRP1_EnableClock+0x2c>)
 800a652:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	4907      	ldr	r1, [pc, #28]	; (800a674 <LL_APB2_GRP1_EnableClock+0x2c>)
 800a658:	4313      	orrs	r3, r2
 800a65a:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800a65c:	4b05      	ldr	r3, [pc, #20]	; (800a674 <LL_APB2_GRP1_EnableClock+0x2c>)
 800a65e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	4013      	ands	r3, r2
 800a664:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a666:	68fb      	ldr	r3, [r7, #12]
}
 800a668:	bf00      	nop
 800a66a:	3714      	adds	r7, #20
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr
 800a674:	40023800 	.word	0x40023800

0800a678 <_ZN7TIMInit4InitEv>:
}

void MX_TIM1_Init(void);


void TIMInit::Init() {
 800a678:	b580      	push	{r7, lr}
 800a67a:	af00      	add	r7, sp, #0
	MX_TIM1_Init();
 800a67c:	f000 f802 	bl	800a684 <_Z12MX_TIM1_Initv>
}
 800a680:	bf00      	nop
 800a682:	bd80      	pop	{r7, pc}

0800a684 <_Z12MX_TIM1_Initv>:

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b09a      	sub	sp, #104	; 0x68
 800a688:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800a68a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a68e:	2200      	movs	r2, #0
 800a690:	601a      	str	r2, [r3, #0]
 800a692:	605a      	str	r2, [r3, #4]
 800a694:	609a      	str	r2, [r3, #8]
 800a696:	60da      	str	r2, [r3, #12]
 800a698:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800a69a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a69e:	2220      	movs	r2, #32
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f001 fdac 	bl	800c200 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 800a6a8:	f107 031c 	add.w	r3, r7, #28
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	601a      	str	r2, [r3, #0]
 800a6b0:	605a      	str	r2, [r3, #4]
 800a6b2:	609a      	str	r2, [r3, #8]
 800a6b4:	60da      	str	r2, [r3, #12]
 800a6b6:	611a      	str	r2, [r3, #16]
 800a6b8:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6ba:	1d3b      	adds	r3, r7, #4
 800a6bc:	2200      	movs	r2, #0
 800a6be:	601a      	str	r2, [r3, #0]
 800a6c0:	605a      	str	r2, [r3, #4]
 800a6c2:	609a      	str	r2, [r3, #8]
 800a6c4:	60da      	str	r2, [r3, #12]
 800a6c6:	611a      	str	r2, [r3, #16]
 800a6c8:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 800a6ca:	2001      	movs	r0, #1
 800a6cc:	f7ff ffbc 	bl	800a648 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800a6d0:	2001      	movs	r0, #1
 800a6d2:	f7ff ffa1 	bl	800a618 <LL_AHB1_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA6   ------> TIM1_BKIN
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800a6d6:	2340      	movs	r3, #64	; 0x40
 800a6d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a6da:	2302      	movs	r3, #2
 800a6dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800a6e6:	2302      	movs	r3, #2
 800a6e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a6ee:	1d3b      	adds	r3, r7, #4
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	4870      	ldr	r0, [pc, #448]	; (800a8b4 <_Z12MX_TIM1_Initv+0x230>)
 800a6f4:	f7f8 fbd5 	bl	8002ea2 <LL_GPIO_Init>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 1));
 800a6f8:	f7ff fe02 	bl	800a300 <__NVIC_GetPriorityGrouping>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	2201      	movs	r2, #1
 800a700:	2104      	movs	r1, #4
 800a702:	4618      	mov	r0, r3
 800a704:	f7ff fe58 	bl	800a3b8 <NVIC_EncodePriority>
 800a708:	4603      	mov	r3, r0
 800a70a:	4619      	mov	r1, r3
 800a70c:	2018      	movs	r0, #24
 800a70e:	f7ff fe25 	bl	800a35c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800a712:	2018      	movs	r0, #24
 800a714:	f7ff fe02 	bl	800a31c <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800a718:	f7ff fdf2 	bl	800a300 <__NVIC_GetPriorityGrouping>
 800a71c:	4603      	mov	r3, r0
 800a71e:	2200      	movs	r2, #0
 800a720:	2100      	movs	r1, #0
 800a722:	4618      	mov	r0, r3
 800a724:	f7ff fe48 	bl	800a3b8 <NVIC_EncodePriority>
 800a728:	4603      	mov	r3, r0
 800a72a:	4619      	mov	r1, r3
 800a72c:	2019      	movs	r0, #25
 800a72e:	f7ff fe15 	bl	800a35c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800a732:	2019      	movs	r0, #25
 800a734:	f7ff fdf2 	bl	800a31c <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 0;
 800a738:	2300      	movs	r3, #0
 800a73a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_UP;
 800a73e:	2320      	movs	r3, #32
 800a740:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 4000;
 800a742:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800a746:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV2;
 800a748:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a74c:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 800a74e:	2300      	movs	r3, #0
 800a750:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800a754:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a758:	4619      	mov	r1, r3
 800a75a:	4857      	ldr	r0, [pc, #348]	; (800a8b8 <_Z12MX_TIM1_Initv+0x234>)
 800a75c:	f7f8 fe06 	bl	800336c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 800a760:	4855      	ldr	r0, [pc, #340]	; (800a8b8 <_Z12MX_TIM1_Initv+0x234>)
 800a762:	f7ff fe5a 	bl	800a41a <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 800a766:	2101      	movs	r1, #1
 800a768:	4853      	ldr	r0, [pc, #332]	; (800a8b8 <_Z12MX_TIM1_Initv+0x234>)
 800a76a:	f7ff fea9 	bl	800a4c0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800a76e:	2360      	movs	r3, #96	; 0x60
 800a770:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800a772:	2300      	movs	r3, #0
 800a774:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800a776:	2300      	movs	r3, #0
 800a778:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 800a77a:	2300      	movs	r3, #0
 800a77c:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800a77e:	2300      	movs	r3, #0
 800a780:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 800a782:	2300      	movs	r3, #0
 800a784:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 800a786:	2300      	movs	r3, #0
 800a788:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 800a78a:	2300      	movs	r3, #0
 800a78c:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800a78e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a792:	461a      	mov	r2, r3
 800a794:	2101      	movs	r1, #1
 800a796:	4848      	ldr	r0, [pc, #288]	; (800a8b8 <_Z12MX_TIM1_Initv+0x234>)
 800a798:	f7f8 fe82 	bl	80034a0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 800a79c:	2101      	movs	r1, #1
 800a79e:	4846      	ldr	r0, [pc, #280]	; (800a8b8 <_Z12MX_TIM1_Initv+0x234>)
 800a7a0:	f7ff fe4c 	bl	800a43c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 800a7a4:	2110      	movs	r1, #16
 800a7a6:	4844      	ldr	r0, [pc, #272]	; (800a8b8 <_Z12MX_TIM1_Initv+0x234>)
 800a7a8:	f7ff fe8a 	bl	800a4c0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800a7b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	2110      	movs	r1, #16
 800a7bc:	483e      	ldr	r0, [pc, #248]	; (800a8b8 <_Z12MX_TIM1_Initv+0x234>)
 800a7be:	f7f8 fe6f 	bl	80034a0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 800a7c2:	2110      	movs	r1, #16
 800a7c4:	483c      	ldr	r0, [pc, #240]	; (800a8b8 <_Z12MX_TIM1_Initv+0x234>)
 800a7c6:	f7ff fe39 	bl	800a43c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 800a7ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a7ce:	483a      	ldr	r0, [pc, #232]	; (800a8b8 <_Z12MX_TIM1_Initv+0x234>)
 800a7d0:	f7ff fe76 	bl	800a4c0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 800a7dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a7e6:	4834      	ldr	r0, [pc, #208]	; (800a8b8 <_Z12MX_TIM1_Initv+0x234>)
 800a7e8:	f7f8 fe5a 	bl	80034a0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 800a7ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a7f0:	4831      	ldr	r0, [pc, #196]	; (800a8b8 <_Z12MX_TIM1_Initv+0x234>)
 800a7f2:	f7ff fe23 	bl	800a43c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 800a7f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a7fa:	482f      	ldr	r0, [pc, #188]	; (800a8b8 <_Z12MX_TIM1_Initv+0x234>)
 800a7fc:	f7ff fe60 	bl	800a4c0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 800a800:	2370      	movs	r3, #112	; 0x70
 800a802:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800a804:	2300      	movs	r3, #0
 800a806:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800a808:	2300      	movs	r3, #0
 800a80a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 800a80c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a810:	461a      	mov	r2, r3
 800a812:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a816:	4828      	ldr	r0, [pc, #160]	; (800a8b8 <_Z12MX_TIM1_Initv+0x234>)
 800a818:	f7f8 fe42 	bl	80034a0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 800a81c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a820:	4825      	ldr	r0, [pc, #148]	; (800a8b8 <_Z12MX_TIM1_Initv+0x234>)
 800a822:	f7ff fe0b 	bl	800a43c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerInput(TIM1, LL_TIM_TS_ITR1);
 800a826:	2110      	movs	r1, #16
 800a828:	4823      	ldr	r0, [pc, #140]	; (800a8b8 <_Z12MX_TIM1_Initv+0x234>)
 800a82a:	f7ff feb1 	bl	800a590 <LL_TIM_SetTriggerInput>
  LL_TIM_SetSlaveMode(TIM1, LL_TIM_SLAVEMODE_TRIGGER);
 800a82e:	2106      	movs	r1, #6
 800a830:	4821      	ldr	r0, [pc, #132]	; (800a8b8 <_Z12MX_TIM1_Initv+0x234>)
 800a832:	f7ff fe9a 	bl	800a56a <LL_TIM_SetSlaveMode>
  LL_TIM_DisableIT_TRIG(TIM1);
 800a836:	4820      	ldr	r0, [pc, #128]	; (800a8b8 <_Z12MX_TIM1_Initv+0x234>)
 800a838:	f7ff fecd 	bl	800a5d6 <LL_TIM_DisableIT_TRIG>
  LL_TIM_DisableDMAReq_TRIG(TIM1);
 800a83c:	481e      	ldr	r0, [pc, #120]	; (800a8b8 <_Z12MX_TIM1_Initv+0x234>)
 800a83e:	f7ff feda 	bl	800a5f6 <LL_TIM_DisableDMAReq_TRIG>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 800a842:	2100      	movs	r1, #0
 800a844:	481c      	ldr	r0, [pc, #112]	; (800a8b8 <_Z12MX_TIM1_Initv+0x234>)
 800a846:	f7ff fe7d 	bl	800a544 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 800a84a:	481b      	ldr	r0, [pc, #108]	; (800a8b8 <_Z12MX_TIM1_Initv+0x234>)
 800a84c:	f7ff feb3 	bl	800a5b6 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_ENABLE;
 800a850:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a854:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_ENABLE;
 800a856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a85a:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_1;
 800a85c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a860:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 800a862:	2300      	movs	r3, #0
 800a864:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 800a868:	2300      	movs	r3, #0
 800a86a:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 800a86c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a870:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 800a872:	2300      	movs	r3, #0
 800a874:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 800a876:	f107 031c 	add.w	r3, r7, #28
 800a87a:	4619      	mov	r1, r3
 800a87c:	480e      	ldr	r0, [pc, #56]	; (800a8b8 <_Z12MX_TIM1_Initv+0x234>)
 800a87e:	f7f8 fe47 	bl	8003510 <LL_TIM_BDTR_Init>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800a882:	2001      	movs	r0, #1
 800a884:	f7ff fec8 	bl	800a618 <LL_AHB1_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 800a888:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800a88c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a88e:	2302      	movs	r3, #2
 800a890:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800a892:	2302      	movs	r3, #2
 800a894:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a896:	2300      	movs	r3, #0
 800a898:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800a89a:	2302      	movs	r3, #2
 800a89c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8a2:	1d3b      	adds	r3, r7, #4
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	4803      	ldr	r0, [pc, #12]	; (800a8b4 <_Z12MX_TIM1_Initv+0x230>)
 800a8a8:	f7f8 fafb 	bl	8002ea2 <LL_GPIO_Init>

}
 800a8ac:	bf00      	nop
 800a8ae:	3768      	adds	r7, #104	; 0x68
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}
 800a8b4:	40020000 	.word	0x40020000
 800a8b8:	40010000 	.word	0x40010000

0800a8bc <LL_USART_Enable>:
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	60da      	str	r2, [r3, #12]
}
 800a8d0:	bf00      	nop
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <LL_USART_ConfigAsyncMode>:
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b083      	sub	sp, #12
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	691b      	ldr	r3, [r3, #16]
 800a8e8:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	695b      	ldr	r3, [r3, #20]
 800a8f4:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	615a      	str	r2, [r3, #20]
}
 800a8fc:	bf00      	nop
 800a8fe:	370c      	adds	r7, #12
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr

0800a908 <LL_AHB1_GRP1_EnableClock>:
{
 800a908:	b480      	push	{r7}
 800a90a:	b085      	sub	sp, #20
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800a910:	4b08      	ldr	r3, [pc, #32]	; (800a934 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800a912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	4907      	ldr	r1, [pc, #28]	; (800a934 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800a918:	4313      	orrs	r3, r2
 800a91a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800a91c:	4b05      	ldr	r3, [pc, #20]	; (800a934 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800a91e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	4013      	ands	r3, r2
 800a924:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a926:	68fb      	ldr	r3, [r7, #12]
}
 800a928:	bf00      	nop
 800a92a:	3714      	adds	r7, #20
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr
 800a934:	40023800 	.word	0x40023800

0800a938 <LL_APB1_GRP1_EnableClock>:
{
 800a938:	b480      	push	{r7}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800a940:	4b08      	ldr	r3, [pc, #32]	; (800a964 <LL_APB1_GRP1_EnableClock+0x2c>)
 800a942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	4907      	ldr	r1, [pc, #28]	; (800a964 <LL_APB1_GRP1_EnableClock+0x2c>)
 800a948:	4313      	orrs	r3, r2
 800a94a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800a94c:	4b05      	ldr	r3, [pc, #20]	; (800a964 <LL_APB1_GRP1_EnableClock+0x2c>)
 800a94e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	4013      	ands	r3, r2
 800a954:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a956:	68fb      	ldr	r3, [r7, #12]
}
 800a958:	bf00      	nop
 800a95a:	3714      	adds	r7, #20
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr
 800a964:	40023800 	.word	0x40023800

0800a968 <_ZN9USARTInit4InitEv>:
//UART_HandleTypeDef huart2;
//void MX_USART2_HAL_UART_Init(void);
//void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle);


void USARTInit::Init() {
 800a968:	b580      	push	{r7, lr}
 800a96a:	af00      	add	r7, sp, #0
	MX_USART2_LL_UART_Init();
 800a96c:	f000 f802 	bl	800a974 <_Z22MX_USART2_LL_UART_Initv>
	//MX_USART2_HAL_UART_Init();
}
 800a970:	bf00      	nop
 800a972:	bd80      	pop	{r7, pc}

0800a974 <_Z22MX_USART2_LL_UART_Initv>:

void MX_USART2_LL_UART_Init(void)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b08e      	sub	sp, #56	; 0x38
 800a978:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800a97a:	f107 031c 	add.w	r3, r7, #28
 800a97e:	2200      	movs	r2, #0
 800a980:	601a      	str	r2, [r3, #0]
 800a982:	605a      	str	r2, [r3, #4]
 800a984:	609a      	str	r2, [r3, #8]
 800a986:	60da      	str	r2, [r3, #12]
 800a988:	611a      	str	r2, [r3, #16]
 800a98a:	615a      	str	r2, [r3, #20]
 800a98c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a98e:	1d3b      	adds	r3, r7, #4
 800a990:	2200      	movs	r2, #0
 800a992:	601a      	str	r2, [r3, #0]
 800a994:	605a      	str	r2, [r3, #4]
 800a996:	609a      	str	r2, [r3, #8]
 800a998:	60da      	str	r2, [r3, #12]
 800a99a:	611a      	str	r2, [r3, #16]
 800a99c:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800a99e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800a9a2:	f7ff ffc9 	bl	800a938 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800a9a6:	2001      	movs	r0, #1
 800a9a8:	f7ff ffae 	bl	800a908 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800a9ac:	230c      	movs	r3, #12
 800a9ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a9b0:	2302      	movs	r3, #2
 800a9b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800a9b4:	2303      	movs	r3, #3
 800a9b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800a9c0:	2307      	movs	r3, #7
 800a9c2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9c4:	1d3b      	adds	r3, r7, #4
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	4810      	ldr	r0, [pc, #64]	; (800aa0c <_Z22MX_USART2_LL_UART_Initv+0x98>)
 800a9ca:	f7f8 fa6a 	bl	8002ea2 <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 800a9ce:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800a9d2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800a9e0:	230c      	movs	r3, #12
 800a9e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800a9ec:	f107 031c 	add.w	r3, r7, #28
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	4807      	ldr	r0, [pc, #28]	; (800aa10 <_Z22MX_USART2_LL_UART_Initv+0x9c>)
 800a9f4:	f7f9 f86a 	bl	8003acc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800a9f8:	4805      	ldr	r0, [pc, #20]	; (800aa10 <_Z22MX_USART2_LL_UART_Initv+0x9c>)
 800a9fa:	f7ff ff6f 	bl	800a8dc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800a9fe:	4804      	ldr	r0, [pc, #16]	; (800aa10 <_Z22MX_USART2_LL_UART_Initv+0x9c>)
 800aa00:	f7ff ff5c 	bl	800a8bc <LL_USART_Enable>

}
 800aa04:	bf00      	nop
 800aa06:	3738      	adds	r7, #56	; 0x38
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	40020000 	.word	0x40020000
 800aa10:	40004400 	.word	0x40004400

0800aa14 <_ZdlPv>:
 800aa14:	f001 bbc8 	b.w	800c1a8 <free>

0800aa18 <_ZdlPvj>:
 800aa18:	f7ff bffc 	b.w	800aa14 <_ZdlPv>

0800aa1c <_Znwj>:
 800aa1c:	b510      	push	{r4, lr}
 800aa1e:	2800      	cmp	r0, #0
 800aa20:	bf14      	ite	ne
 800aa22:	4604      	movne	r4, r0
 800aa24:	2401      	moveq	r4, #1
 800aa26:	4620      	mov	r0, r4
 800aa28:	f001 fbb6 	bl	800c198 <malloc>
 800aa2c:	b930      	cbnz	r0, 800aa3c <_Znwj+0x20>
 800aa2e:	f000 f9a7 	bl	800ad80 <_ZSt15get_new_handlerv>
 800aa32:	b908      	cbnz	r0, 800aa38 <_Znwj+0x1c>
 800aa34:	f001 fb7f 	bl	800c136 <abort>
 800aa38:	4780      	blx	r0
 800aa3a:	e7f4      	b.n	800aa26 <_Znwj+0xa>
 800aa3c:	bd10      	pop	{r4, pc}

0800aa3e <_ZNSaIcEC1Ev>:
 800aa3e:	4770      	bx	lr

0800aa40 <_ZNSaIcED1Ev>:
 800aa40:	4770      	bx	lr

0800aa42 <fmodl>:
 800aa42:	f000 bb39 	b.w	800b0b8 <fmod>

0800aa46 <_ZSt17__throw_bad_allocv>:
 800aa46:	b508      	push	{r3, lr}
 800aa48:	f001 fb75 	bl	800c136 <abort>

0800aa4c <_ZSt19__throw_logic_errorPKc>:
 800aa4c:	b508      	push	{r3, lr}
 800aa4e:	f001 fb72 	bl	800c136 <abort>

0800aa52 <_ZSt20__throw_length_errorPKc>:
 800aa52:	b508      	push	{r3, lr}
 800aa54:	f001 fb6f 	bl	800c136 <abort>

0800aa58 <_ZSt24__throw_out_of_range_fmtPKcz>:
 800aa58:	b40f      	push	{r0, r1, r2, r3}
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b082      	sub	sp, #8
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	f107 0410 	add.w	r4, r7, #16
 800aa64:	f854 5b04 	ldr.w	r5, [r4], #4
 800aa68:	4628      	mov	r0, r5
 800aa6a:	f7f5 fc21 	bl	80002b0 <strlen>
 800aa6e:	f200 230e 	addw	r3, r0, #526	; 0x20e
 800aa72:	f023 0307 	bic.w	r3, r3, #7
 800aa76:	ebad 0d03 	sub.w	sp, sp, r3
 800aa7a:	f500 7100 	add.w	r1, r0, #512	; 0x200
 800aa7e:	4623      	mov	r3, r4
 800aa80:	462a      	mov	r2, r5
 800aa82:	4668      	mov	r0, sp
 800aa84:	607c      	str	r4, [r7, #4]
 800aa86:	f000 f851 	bl	800ab2c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 800aa8a:	f001 fb54 	bl	800c136 <abort>
	...

0800aa90 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b09c      	sub	sp, #112	; 0x70
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	1a0e      	subs	r6, r1, r0
 800aa98:	4680      	mov	r8, r0
 800aa9a:	2269      	movs	r2, #105	; 0x69
 800aa9c:	490e      	ldr	r1, [pc, #56]	; (800aad8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 800aa9e:	1d38      	adds	r0, r7, #4
 800aaa0:	f001 fb8a 	bl	800c1b8 <memcpy>
 800aaa4:	f106 0377 	add.w	r3, r6, #119	; 0x77
 800aaa8:	f023 0307 	bic.w	r3, r3, #7
 800aaac:	ebad 0d03 	sub.w	sp, sp, r3
 800aab0:	466c      	mov	r4, sp
 800aab2:	2268      	movs	r2, #104	; 0x68
 800aab4:	1d39      	adds	r1, r7, #4
 800aab6:	1c75      	adds	r5, r6, #1
 800aab8:	4620      	mov	r0, r4
 800aaba:	f001 fb7d 	bl	800c1b8 <memcpy>
 800aabe:	4425      	add	r5, r4
 800aac0:	4632      	mov	r2, r6
 800aac2:	4641      	mov	r1, r8
 800aac4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800aac8:	f001 fb76 	bl	800c1b8 <memcpy>
 800aacc:	2300      	movs	r3, #0
 800aace:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 800aad2:	4620      	mov	r0, r4
 800aad4:	f7ff ffba 	bl	800aa4c <_ZSt19__throw_logic_errorPKc>
 800aad8:	0800e4de 	.word	0x0800e4de

0800aadc <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 800aadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aade:	af00      	add	r7, sp, #0
 800aae0:	b086      	sub	sp, #24
 800aae2:	466d      	mov	r5, sp
 800aae4:	f105 040c 	add.w	r4, r5, #12
 800aae8:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800ab28 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 800aaec:	4623      	mov	r3, r4
 800aaee:	f04f 0c0a 	mov.w	ip, #10
 800aaf2:	fbb2 f6fc 	udiv	r6, r2, ip
 800aaf6:	fb0c 2216 	mls	r2, ip, r6, r2
 800aafa:	f81e 2002 	ldrb.w	r2, [lr, r2]
 800aafe:	f803 2d01 	strb.w	r2, [r3, #-1]!
 800ab02:	4632      	mov	r2, r6
 800ab04:	2e00      	cmp	r6, #0
 800ab06:	d1f4      	bne.n	800aaf2 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 800ab08:	1ae4      	subs	r4, r4, r3
 800ab0a:	428c      	cmp	r4, r1
 800ab0c:	d808      	bhi.n	800ab20 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 800ab0e:	f1c4 010c 	rsb	r1, r4, #12
 800ab12:	4622      	mov	r2, r4
 800ab14:	4429      	add	r1, r5
 800ab16:	f001 fb4f 	bl	800c1b8 <memcpy>
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ab24:	e7f9      	b.n	800ab1a <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 800ab26:	bf00      	nop
 800ab28:	0800e4d3 	.word	0x0800e4d3

0800ab2c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 800ab2c:	3901      	subs	r1, #1
 800ab2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab32:	4606      	mov	r6, r0
 800ab34:	4615      	mov	r5, r2
 800ab36:	1847      	adds	r7, r0, r1
 800ab38:	4604      	mov	r4, r0
 800ab3a:	782a      	ldrb	r2, [r5, #0]
 800ab3c:	b392      	cbz	r2, 800aba4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x78>
 800ab3e:	42bc      	cmp	r4, r7
 800ab40:	d22c      	bcs.n	800ab9c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 800ab42:	2a25      	cmp	r2, #37	; 0x25
 800ab44:	d107      	bne.n	800ab56 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 800ab46:	786a      	ldrb	r2, [r5, #1]
 800ab48:	2a73      	cmp	r2, #115	; 0x73
 800ab4a:	d009      	beq.n	800ab60 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x34>
 800ab4c:	2a7a      	cmp	r2, #122	; 0x7a
 800ab4e:	d012      	beq.n	800ab76 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4a>
 800ab50:	2a25      	cmp	r2, #37	; 0x25
 800ab52:	d100      	bne.n	800ab56 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 800ab54:	3501      	adds	r5, #1
 800ab56:	782a      	ldrb	r2, [r5, #0]
 800ab58:	7022      	strb	r2, [r4, #0]
 800ab5a:	3501      	adds	r5, #1
 800ab5c:	3401      	adds	r4, #1
 800ab5e:	e7ec      	b.n	800ab3a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 800ab60:	1d19      	adds	r1, r3, #4
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	3b01      	subs	r3, #1
 800ab66:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800ab6a:	b1a2      	cbz	r2, 800ab96 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6a>
 800ab6c:	42bc      	cmp	r4, r7
 800ab6e:	d015      	beq.n	800ab9c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 800ab70:	f804 2b01 	strb.w	r2, [r4], #1
 800ab74:	e7f7      	b.n	800ab66 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3a>
 800ab76:	78aa      	ldrb	r2, [r5, #2]
 800ab78:	2a75      	cmp	r2, #117	; 0x75
 800ab7a:	d1ec      	bne.n	800ab56 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	1b39      	subs	r1, r7, r4
 800ab80:	4620      	mov	r0, r4
 800ab82:	f103 0804 	add.w	r8, r3, #4
 800ab86:	f7ff ffa9 	bl	800aadc <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 800ab8a:	2800      	cmp	r0, #0
 800ab8c:	dd06      	ble.n	800ab9c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 800ab8e:	4404      	add	r4, r0
 800ab90:	3503      	adds	r5, #3
 800ab92:	4643      	mov	r3, r8
 800ab94:	e7d1      	b.n	800ab3a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 800ab96:	3502      	adds	r5, #2
 800ab98:	460b      	mov	r3, r1
 800ab9a:	e7ce      	b.n	800ab3a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 800ab9c:	4621      	mov	r1, r4
 800ab9e:	4630      	mov	r0, r6
 800aba0:	f7ff ff76 	bl	800aa90 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 800aba4:	7022      	strb	r2, [r4, #0]
 800aba6:	1ba0      	subs	r0, r4, r6
 800aba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800abac <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 800abac:	b10a      	cbz	r2, 800abb2 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 800abae:	f001 bb03 	b.w	800c1b8 <memcpy>
 800abb2:	4770      	bx	lr

0800abb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 800abb4:	6001      	str	r1, [r0, #0]
 800abb6:	4770      	bx	lr

0800abb8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 800abb8:	6800      	ldr	r0, [r0, #0]
 800abba:	4770      	bx	lr

0800abbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 800abbc:	3008      	adds	r0, #8
 800abbe:	4770      	bx	lr

0800abc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 800abc0:	6081      	str	r1, [r0, #8]
 800abc2:	4770      	bx	lr

0800abc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 800abc4:	6803      	ldr	r3, [r0, #0]
 800abc6:	6041      	str	r1, [r0, #4]
 800abc8:	2200      	movs	r2, #0
 800abca:	545a      	strb	r2, [r3, r1]
 800abcc:	4770      	bx	lr
	...

0800abd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800abd0:	b508      	push	{r3, lr}
 800abd2:	680b      	ldr	r3, [r1, #0]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	da02      	bge.n	800abde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 800abd8:	4809      	ldr	r0, [pc, #36]	; (800ac00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 800abda:	f7ff ff3a 	bl	800aa52 <_ZSt20__throw_length_errorPKc>
 800abde:	4293      	cmp	r3, r2
 800abe0:	d908      	bls.n	800abf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800abe2:	0052      	lsls	r2, r2, #1
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d205      	bcs.n	800abf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800abe8:	2a00      	cmp	r2, #0
 800abea:	bfb6      	itet	lt
 800abec:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800abf0:	600a      	strge	r2, [r1, #0]
 800abf2:	600b      	strlt	r3, [r1, #0]
 800abf4:	6808      	ldr	r0, [r1, #0]
 800abf6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800abfa:	3001      	adds	r0, #1
 800abfc:	f7ff bf0e 	b.w	800aa1c <_Znwj>
 800ac00:	0800e55c 	.word	0x0800e55c

0800ac04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800ac04:	4603      	mov	r3, r0
 800ac06:	f853 0b08 	ldr.w	r0, [r3], #8
 800ac0a:	4298      	cmp	r0, r3
 800ac0c:	d001      	beq.n	800ac12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800ac0e:	f7ff bf01 	b.w	800aa14 <_ZdlPv>
 800ac12:	4770      	bx	lr

0800ac14 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800ac14:	b508      	push	{r3, lr}
 800ac16:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800ac1a:	6840      	ldr	r0, [r0, #4]
 800ac1c:	3901      	subs	r1, #1
 800ac1e:	1a09      	subs	r1, r1, r0
 800ac20:	4291      	cmp	r1, r2
 800ac22:	d202      	bcs.n	800ac2a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800ac24:	4618      	mov	r0, r3
 800ac26:	f7ff ff14 	bl	800aa52 <_ZSt20__throw_length_errorPKc>
 800ac2a:	bd08      	pop	{r3, pc}

0800ac2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800ac2c:	2a01      	cmp	r2, #1
 800ac2e:	b510      	push	{r4, lr}
 800ac30:	d102      	bne.n	800ac38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800ac32:	780a      	ldrb	r2, [r1, #0]
 800ac34:	7002      	strb	r2, [r0, #0]
 800ac36:	bd10      	pop	{r4, pc}
 800ac38:	f7ff ffb8 	bl	800abac <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800ac3c:	e7fb      	b.n	800ac36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0800ac3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800ac3e:	b508      	push	{r3, lr}
 800ac40:	1a52      	subs	r2, r2, r1
 800ac42:	f7ff fff3 	bl	800ac2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800ac46:	bd08      	pop	{r3, pc}

0800ac48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800ac48:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac4c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800ac50:	4616      	mov	r6, r2
 800ac52:	6842      	ldr	r2, [r0, #4]
 800ac54:	469a      	mov	sl, r3
 800ac56:	eba8 0306 	sub.w	r3, r8, r6
 800ac5a:	1a57      	subs	r7, r2, r1
 800ac5c:	4413      	add	r3, r2
 800ac5e:	6802      	ldr	r2, [r0, #0]
 800ac60:	9301      	str	r3, [sp, #4]
 800ac62:	f100 0308 	add.w	r3, r0, #8
 800ac66:	429a      	cmp	r2, r3
 800ac68:	460d      	mov	r5, r1
 800ac6a:	bf14      	ite	ne
 800ac6c:	6882      	ldrne	r2, [r0, #8]
 800ac6e:	220f      	moveq	r2, #15
 800ac70:	a901      	add	r1, sp, #4
 800ac72:	4604      	mov	r4, r0
 800ac74:	f7ff ffac 	bl	800abd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800ac78:	1bbf      	subs	r7, r7, r6
 800ac7a:	4681      	mov	r9, r0
 800ac7c:	b11d      	cbz	r5, 800ac86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800ac7e:	462a      	mov	r2, r5
 800ac80:	6821      	ldr	r1, [r4, #0]
 800ac82:	f7ff ffd3 	bl	800ac2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800ac86:	f1ba 0f00 	cmp.w	sl, #0
 800ac8a:	d008      	beq.n	800ac9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 800ac8c:	f1b8 0f00 	cmp.w	r8, #0
 800ac90:	d005      	beq.n	800ac9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 800ac92:	4642      	mov	r2, r8
 800ac94:	4651      	mov	r1, sl
 800ac96:	eb09 0005 	add.w	r0, r9, r5
 800ac9a:	f7ff ffc7 	bl	800ac2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800ac9e:	b147      	cbz	r7, 800acb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 800aca0:	6821      	ldr	r1, [r4, #0]
 800aca2:	442e      	add	r6, r5
 800aca4:	eb05 0008 	add.w	r0, r5, r8
 800aca8:	463a      	mov	r2, r7
 800acaa:	4431      	add	r1, r6
 800acac:	4448      	add	r0, r9
 800acae:	f7ff ffbd 	bl	800ac2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800acb2:	4620      	mov	r0, r4
 800acb4:	f7ff ffa6 	bl	800ac04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800acb8:	9b01      	ldr	r3, [sp, #4]
 800acba:	f8c4 9000 	str.w	r9, [r4]
 800acbe:	60a3      	str	r3, [r4, #8]
 800acc0:	b002      	add	sp, #8
 800acc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800acc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800acc6:	f100 0208 	add.w	r2, r0, #8
 800acca:	6002      	str	r2, [r0, #0]
 800accc:	2200      	movs	r2, #0
 800acce:	6042      	str	r2, [r0, #4]
 800acd0:	7202      	strb	r2, [r0, #8]
 800acd2:	4770      	bx	lr

0800acd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800acd4:	b510      	push	{r4, lr}
 800acd6:	4604      	mov	r4, r0
 800acd8:	f7ff ff94 	bl	800ac04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800acdc:	4620      	mov	r0, r4
 800acde:	bd10      	pop	{r4, pc}

0800ace0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800ace0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ace2:	4604      	mov	r4, r0
 800ace4:	4626      	mov	r6, r4
 800ace6:	6840      	ldr	r0, [r0, #4]
 800ace8:	f856 3b08 	ldr.w	r3, [r6], #8
 800acec:	42b3      	cmp	r3, r6
 800acee:	bf18      	it	ne
 800acf0:	68a6      	ldrne	r6, [r4, #8]
 800acf2:	eb00 0502 	add.w	r5, r0, r2
 800acf6:	bf08      	it	eq
 800acf8:	260f      	moveq	r6, #15
 800acfa:	42b5      	cmp	r5, r6
 800acfc:	d80a      	bhi.n	800ad14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 800acfe:	b112      	cbz	r2, 800ad06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 800ad00:	4418      	add	r0, r3
 800ad02:	f7ff ff93 	bl	800ac2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800ad06:	6823      	ldr	r3, [r4, #0]
 800ad08:	6065      	str	r5, [r4, #4]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	555a      	strb	r2, [r3, r5]
 800ad10:	b002      	add	sp, #8
 800ad12:	bd70      	pop	{r4, r5, r6, pc}
 800ad14:	9200      	str	r2, [sp, #0]
 800ad16:	460b      	mov	r3, r1
 800ad18:	2200      	movs	r2, #0
 800ad1a:	4601      	mov	r1, r0
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	f7ff ff93 	bl	800ac48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800ad22:	e7f0      	b.n	800ad06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

0800ad24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 800ad24:	b508      	push	{r3, lr}
 800ad26:	e9d1 1200 	ldrd	r1, r2, [r1]
 800ad2a:	f7ff ffd9 	bl	800ace0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800ad2e:	bd08      	pop	{r3, pc}

0800ad30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 800ad30:	b570      	push	{r4, r5, r6, lr}
 800ad32:	4604      	mov	r4, r0
 800ad34:	4608      	mov	r0, r1
 800ad36:	460d      	mov	r5, r1
 800ad38:	f7f5 faba 	bl	80002b0 <strlen>
 800ad3c:	4b06      	ldr	r3, [pc, #24]	; (800ad58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 800ad3e:	4606      	mov	r6, r0
 800ad40:	4602      	mov	r2, r0
 800ad42:	2100      	movs	r1, #0
 800ad44:	4620      	mov	r0, r4
 800ad46:	f7ff ff65 	bl	800ac14 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800ad4a:	4632      	mov	r2, r6
 800ad4c:	4629      	mov	r1, r5
 800ad4e:	4620      	mov	r0, r4
 800ad50:	f7ff ffc6 	bl	800ace0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800ad54:	bd70      	pop	{r4, r5, r6, pc}
 800ad56:	bf00      	nop
 800ad58:	0800e547 	.word	0x0800e547

0800ad5c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800ad5c:	6800      	ldr	r0, [r0, #0]
 800ad5e:	4770      	bx	lr

0800ad60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 800ad60:	6001      	str	r1, [r0, #0]
 800ad62:	4770      	bx	lr

0800ad64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800ad64:	b510      	push	{r4, lr}
 800ad66:	f100 0208 	add.w	r2, r0, #8
 800ad6a:	6002      	str	r2, [r0, #0]
 800ad6c:	e9d1 1200 	ldrd	r1, r2, [r1]
 800ad70:	4604      	mov	r4, r0
 800ad72:	f04f 0300 	mov.w	r3, #0
 800ad76:	440a      	add	r2, r1
 800ad78:	f7f9 fc08 	bl	800458c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	bd10      	pop	{r4, pc}

0800ad80 <_ZSt15get_new_handlerv>:
 800ad80:	4b02      	ldr	r3, [pc, #8]	; (800ad8c <_ZSt15get_new_handlerv+0xc>)
 800ad82:	6818      	ldr	r0, [r3, #0]
 800ad84:	f3bf 8f5b 	dmb	ish
 800ad88:	4770      	bx	lr
 800ad8a:	bf00      	nop
 800ad8c:	200003f4 	.word	0x200003f4

0800ad90 <cos>:
 800ad90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad92:	ec51 0b10 	vmov	r0, r1, d0
 800ad96:	4a1e      	ldr	r2, [pc, #120]	; (800ae10 <cos+0x80>)
 800ad98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	dc06      	bgt.n	800adae <cos+0x1e>
 800ada0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800ae08 <cos+0x78>
 800ada4:	f000 fcf4 	bl	800b790 <__kernel_cos>
 800ada8:	ec51 0b10 	vmov	r0, r1, d0
 800adac:	e007      	b.n	800adbe <cos+0x2e>
 800adae:	4a19      	ldr	r2, [pc, #100]	; (800ae14 <cos+0x84>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	dd09      	ble.n	800adc8 <cos+0x38>
 800adb4:	ee10 2a10 	vmov	r2, s0
 800adb8:	460b      	mov	r3, r1
 800adba:	f7f5 fa85 	bl	80002c8 <__aeabi_dsub>
 800adbe:	ec41 0b10 	vmov	d0, r0, r1
 800adc2:	b005      	add	sp, #20
 800adc4:	f85d fb04 	ldr.w	pc, [sp], #4
 800adc8:	4668      	mov	r0, sp
 800adca:	f000 faed 	bl	800b3a8 <__ieee754_rem_pio2>
 800adce:	f000 0003 	and.w	r0, r0, #3
 800add2:	2801      	cmp	r0, #1
 800add4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800add8:	ed9d 0b00 	vldr	d0, [sp]
 800addc:	d007      	beq.n	800adee <cos+0x5e>
 800adde:	2802      	cmp	r0, #2
 800ade0:	d00e      	beq.n	800ae00 <cos+0x70>
 800ade2:	2800      	cmp	r0, #0
 800ade4:	d0de      	beq.n	800ada4 <cos+0x14>
 800ade6:	2001      	movs	r0, #1
 800ade8:	f001 f8da 	bl	800bfa0 <__kernel_sin>
 800adec:	e7dc      	b.n	800ada8 <cos+0x18>
 800adee:	f001 f8d7 	bl	800bfa0 <__kernel_sin>
 800adf2:	ec53 2b10 	vmov	r2, r3, d0
 800adf6:	ee10 0a10 	vmov	r0, s0
 800adfa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800adfe:	e7de      	b.n	800adbe <cos+0x2e>
 800ae00:	f000 fcc6 	bl	800b790 <__kernel_cos>
 800ae04:	e7f5      	b.n	800adf2 <cos+0x62>
 800ae06:	bf00      	nop
	...
 800ae10:	3fe921fb 	.word	0x3fe921fb
 800ae14:	7fefffff 	.word	0x7fefffff

0800ae18 <fabs>:
 800ae18:	ec51 0b10 	vmov	r0, r1, d0
 800ae1c:	ee10 2a10 	vmov	r2, s0
 800ae20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ae24:	ec43 2b10 	vmov	d0, r2, r3
 800ae28:	4770      	bx	lr
 800ae2a:	0000      	movs	r0, r0
 800ae2c:	0000      	movs	r0, r0
	...

0800ae30 <floor>:
 800ae30:	ec51 0b10 	vmov	r0, r1, d0
 800ae34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae38:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ae3c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ae40:	2e13      	cmp	r6, #19
 800ae42:	460c      	mov	r4, r1
 800ae44:	ee10 5a10 	vmov	r5, s0
 800ae48:	4680      	mov	r8, r0
 800ae4a:	dc34      	bgt.n	800aeb6 <floor+0x86>
 800ae4c:	2e00      	cmp	r6, #0
 800ae4e:	da16      	bge.n	800ae7e <floor+0x4e>
 800ae50:	a335      	add	r3, pc, #212	; (adr r3, 800af28 <floor+0xf8>)
 800ae52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae56:	f7f5 fa39 	bl	80002cc <__adddf3>
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	f7f5 fe7b 	bl	8000b58 <__aeabi_dcmpgt>
 800ae62:	b148      	cbz	r0, 800ae78 <floor+0x48>
 800ae64:	2c00      	cmp	r4, #0
 800ae66:	da59      	bge.n	800af1c <floor+0xec>
 800ae68:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ae6c:	4a30      	ldr	r2, [pc, #192]	; (800af30 <floor+0x100>)
 800ae6e:	432b      	orrs	r3, r5
 800ae70:	2500      	movs	r5, #0
 800ae72:	42ab      	cmp	r3, r5
 800ae74:	bf18      	it	ne
 800ae76:	4614      	movne	r4, r2
 800ae78:	4621      	mov	r1, r4
 800ae7a:	4628      	mov	r0, r5
 800ae7c:	e025      	b.n	800aeca <floor+0x9a>
 800ae7e:	4f2d      	ldr	r7, [pc, #180]	; (800af34 <floor+0x104>)
 800ae80:	4137      	asrs	r7, r6
 800ae82:	ea01 0307 	and.w	r3, r1, r7
 800ae86:	4303      	orrs	r3, r0
 800ae88:	d01f      	beq.n	800aeca <floor+0x9a>
 800ae8a:	a327      	add	r3, pc, #156	; (adr r3, 800af28 <floor+0xf8>)
 800ae8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae90:	f7f5 fa1c 	bl	80002cc <__adddf3>
 800ae94:	2200      	movs	r2, #0
 800ae96:	2300      	movs	r3, #0
 800ae98:	f7f5 fe5e 	bl	8000b58 <__aeabi_dcmpgt>
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	d0eb      	beq.n	800ae78 <floor+0x48>
 800aea0:	2c00      	cmp	r4, #0
 800aea2:	bfbe      	ittt	lt
 800aea4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800aea8:	fa43 f606 	asrlt.w	r6, r3, r6
 800aeac:	19a4      	addlt	r4, r4, r6
 800aeae:	ea24 0407 	bic.w	r4, r4, r7
 800aeb2:	2500      	movs	r5, #0
 800aeb4:	e7e0      	b.n	800ae78 <floor+0x48>
 800aeb6:	2e33      	cmp	r6, #51	; 0x33
 800aeb8:	dd0b      	ble.n	800aed2 <floor+0xa2>
 800aeba:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800aebe:	d104      	bne.n	800aeca <floor+0x9a>
 800aec0:	ee10 2a10 	vmov	r2, s0
 800aec4:	460b      	mov	r3, r1
 800aec6:	f7f5 fa01 	bl	80002cc <__adddf3>
 800aeca:	ec41 0b10 	vmov	d0, r0, r1
 800aece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aed2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800aed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aeda:	fa23 f707 	lsr.w	r7, r3, r7
 800aede:	4207      	tst	r7, r0
 800aee0:	d0f3      	beq.n	800aeca <floor+0x9a>
 800aee2:	a311      	add	r3, pc, #68	; (adr r3, 800af28 <floor+0xf8>)
 800aee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee8:	f7f5 f9f0 	bl	80002cc <__adddf3>
 800aeec:	2200      	movs	r2, #0
 800aeee:	2300      	movs	r3, #0
 800aef0:	f7f5 fe32 	bl	8000b58 <__aeabi_dcmpgt>
 800aef4:	2800      	cmp	r0, #0
 800aef6:	d0bf      	beq.n	800ae78 <floor+0x48>
 800aef8:	2c00      	cmp	r4, #0
 800aefa:	da02      	bge.n	800af02 <floor+0xd2>
 800aefc:	2e14      	cmp	r6, #20
 800aefe:	d103      	bne.n	800af08 <floor+0xd8>
 800af00:	3401      	adds	r4, #1
 800af02:	ea25 0507 	bic.w	r5, r5, r7
 800af06:	e7b7      	b.n	800ae78 <floor+0x48>
 800af08:	2301      	movs	r3, #1
 800af0a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800af0e:	fa03 f606 	lsl.w	r6, r3, r6
 800af12:	4435      	add	r5, r6
 800af14:	4545      	cmp	r5, r8
 800af16:	bf38      	it	cc
 800af18:	18e4      	addcc	r4, r4, r3
 800af1a:	e7f2      	b.n	800af02 <floor+0xd2>
 800af1c:	2500      	movs	r5, #0
 800af1e:	462c      	mov	r4, r5
 800af20:	e7aa      	b.n	800ae78 <floor+0x48>
 800af22:	bf00      	nop
 800af24:	f3af 8000 	nop.w
 800af28:	8800759c 	.word	0x8800759c
 800af2c:	7e37e43c 	.word	0x7e37e43c
 800af30:	bff00000 	.word	0xbff00000
 800af34:	000fffff 	.word	0x000fffff

0800af38 <scalbn>:
 800af38:	b570      	push	{r4, r5, r6, lr}
 800af3a:	ec55 4b10 	vmov	r4, r5, d0
 800af3e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800af42:	4606      	mov	r6, r0
 800af44:	462b      	mov	r3, r5
 800af46:	b9aa      	cbnz	r2, 800af74 <scalbn+0x3c>
 800af48:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800af4c:	4323      	orrs	r3, r4
 800af4e:	d03b      	beq.n	800afc8 <scalbn+0x90>
 800af50:	4b31      	ldr	r3, [pc, #196]	; (800b018 <scalbn+0xe0>)
 800af52:	4629      	mov	r1, r5
 800af54:	2200      	movs	r2, #0
 800af56:	ee10 0a10 	vmov	r0, s0
 800af5a:	f7f5 fb6d 	bl	8000638 <__aeabi_dmul>
 800af5e:	4b2f      	ldr	r3, [pc, #188]	; (800b01c <scalbn+0xe4>)
 800af60:	429e      	cmp	r6, r3
 800af62:	4604      	mov	r4, r0
 800af64:	460d      	mov	r5, r1
 800af66:	da12      	bge.n	800af8e <scalbn+0x56>
 800af68:	a327      	add	r3, pc, #156	; (adr r3, 800b008 <scalbn+0xd0>)
 800af6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6e:	f7f5 fb63 	bl	8000638 <__aeabi_dmul>
 800af72:	e009      	b.n	800af88 <scalbn+0x50>
 800af74:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800af78:	428a      	cmp	r2, r1
 800af7a:	d10c      	bne.n	800af96 <scalbn+0x5e>
 800af7c:	ee10 2a10 	vmov	r2, s0
 800af80:	4620      	mov	r0, r4
 800af82:	4629      	mov	r1, r5
 800af84:	f7f5 f9a2 	bl	80002cc <__adddf3>
 800af88:	4604      	mov	r4, r0
 800af8a:	460d      	mov	r5, r1
 800af8c:	e01c      	b.n	800afc8 <scalbn+0x90>
 800af8e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800af92:	460b      	mov	r3, r1
 800af94:	3a36      	subs	r2, #54	; 0x36
 800af96:	4432      	add	r2, r6
 800af98:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800af9c:	428a      	cmp	r2, r1
 800af9e:	dd0b      	ble.n	800afb8 <scalbn+0x80>
 800afa0:	ec45 4b11 	vmov	d1, r4, r5
 800afa4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800b010 <scalbn+0xd8>
 800afa8:	f001 f8b4 	bl	800c114 <copysign>
 800afac:	a318      	add	r3, pc, #96	; (adr r3, 800b010 <scalbn+0xd8>)
 800afae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb2:	ec51 0b10 	vmov	r0, r1, d0
 800afb6:	e7da      	b.n	800af6e <scalbn+0x36>
 800afb8:	2a00      	cmp	r2, #0
 800afba:	dd08      	ble.n	800afce <scalbn+0x96>
 800afbc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800afc0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800afc4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800afc8:	ec45 4b10 	vmov	d0, r4, r5
 800afcc:	bd70      	pop	{r4, r5, r6, pc}
 800afce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800afd2:	da0d      	bge.n	800aff0 <scalbn+0xb8>
 800afd4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800afd8:	429e      	cmp	r6, r3
 800afda:	ec45 4b11 	vmov	d1, r4, r5
 800afde:	dce1      	bgt.n	800afa4 <scalbn+0x6c>
 800afe0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800b008 <scalbn+0xd0>
 800afe4:	f001 f896 	bl	800c114 <copysign>
 800afe8:	a307      	add	r3, pc, #28	; (adr r3, 800b008 <scalbn+0xd0>)
 800afea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afee:	e7e0      	b.n	800afb2 <scalbn+0x7a>
 800aff0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aff4:	3236      	adds	r2, #54	; 0x36
 800aff6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800affa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800affe:	4620      	mov	r0, r4
 800b000:	4629      	mov	r1, r5
 800b002:	2200      	movs	r2, #0
 800b004:	4b06      	ldr	r3, [pc, #24]	; (800b020 <scalbn+0xe8>)
 800b006:	e7b2      	b.n	800af6e <scalbn+0x36>
 800b008:	c2f8f359 	.word	0xc2f8f359
 800b00c:	01a56e1f 	.word	0x01a56e1f
 800b010:	8800759c 	.word	0x8800759c
 800b014:	7e37e43c 	.word	0x7e37e43c
 800b018:	43500000 	.word	0x43500000
 800b01c:	ffff3cb0 	.word	0xffff3cb0
 800b020:	3c900000 	.word	0x3c900000
 800b024:	00000000 	.word	0x00000000

0800b028 <sin>:
 800b028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b02a:	ec51 0b10 	vmov	r0, r1, d0
 800b02e:	4a20      	ldr	r2, [pc, #128]	; (800b0b0 <sin+0x88>)
 800b030:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b034:	4293      	cmp	r3, r2
 800b036:	dc07      	bgt.n	800b048 <sin+0x20>
 800b038:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800b0a8 <sin+0x80>
 800b03c:	2000      	movs	r0, #0
 800b03e:	f000 ffaf 	bl	800bfa0 <__kernel_sin>
 800b042:	ec51 0b10 	vmov	r0, r1, d0
 800b046:	e007      	b.n	800b058 <sin+0x30>
 800b048:	4a1a      	ldr	r2, [pc, #104]	; (800b0b4 <sin+0x8c>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	dd09      	ble.n	800b062 <sin+0x3a>
 800b04e:	ee10 2a10 	vmov	r2, s0
 800b052:	460b      	mov	r3, r1
 800b054:	f7f5 f938 	bl	80002c8 <__aeabi_dsub>
 800b058:	ec41 0b10 	vmov	d0, r0, r1
 800b05c:	b005      	add	sp, #20
 800b05e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b062:	4668      	mov	r0, sp
 800b064:	f000 f9a0 	bl	800b3a8 <__ieee754_rem_pio2>
 800b068:	f000 0003 	and.w	r0, r0, #3
 800b06c:	2801      	cmp	r0, #1
 800b06e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b072:	ed9d 0b00 	vldr	d0, [sp]
 800b076:	d004      	beq.n	800b082 <sin+0x5a>
 800b078:	2802      	cmp	r0, #2
 800b07a:	d005      	beq.n	800b088 <sin+0x60>
 800b07c:	b970      	cbnz	r0, 800b09c <sin+0x74>
 800b07e:	2001      	movs	r0, #1
 800b080:	e7dd      	b.n	800b03e <sin+0x16>
 800b082:	f000 fb85 	bl	800b790 <__kernel_cos>
 800b086:	e7dc      	b.n	800b042 <sin+0x1a>
 800b088:	2001      	movs	r0, #1
 800b08a:	f000 ff89 	bl	800bfa0 <__kernel_sin>
 800b08e:	ec53 2b10 	vmov	r2, r3, d0
 800b092:	ee10 0a10 	vmov	r0, s0
 800b096:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b09a:	e7dd      	b.n	800b058 <sin+0x30>
 800b09c:	f000 fb78 	bl	800b790 <__kernel_cos>
 800b0a0:	e7f5      	b.n	800b08e <sin+0x66>
 800b0a2:	bf00      	nop
 800b0a4:	f3af 8000 	nop.w
	...
 800b0b0:	3fe921fb 	.word	0x3fe921fb
 800b0b4:	7fefffff 	.word	0x7fefffff

0800b0b8 <fmod>:
 800b0b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b0bc:	ed2d 8b02 	vpush	{d8}
 800b0c0:	b08b      	sub	sp, #44	; 0x2c
 800b0c2:	ec55 4b10 	vmov	r4, r5, d0
 800b0c6:	ec57 6b11 	vmov	r6, r7, d1
 800b0ca:	f000 f859 	bl	800b180 <__ieee754_fmod>
 800b0ce:	4b2a      	ldr	r3, [pc, #168]	; (800b178 <fmod+0xc0>)
 800b0d0:	eeb0 8a40 	vmov.f32	s16, s0
 800b0d4:	eef0 8a60 	vmov.f32	s17, s1
 800b0d8:	f993 8000 	ldrsb.w	r8, [r3]
 800b0dc:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800b0e0:	d030      	beq.n	800b144 <fmod+0x8c>
 800b0e2:	4632      	mov	r2, r6
 800b0e4:	463b      	mov	r3, r7
 800b0e6:	4630      	mov	r0, r6
 800b0e8:	4639      	mov	r1, r7
 800b0ea:	f7f5 fd3f 	bl	8000b6c <__aeabi_dcmpun>
 800b0ee:	bb48      	cbnz	r0, 800b144 <fmod+0x8c>
 800b0f0:	4622      	mov	r2, r4
 800b0f2:	462b      	mov	r3, r5
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	4629      	mov	r1, r5
 800b0f8:	f7f5 fd38 	bl	8000b6c <__aeabi_dcmpun>
 800b0fc:	4681      	mov	r9, r0
 800b0fe:	bb08      	cbnz	r0, 800b144 <fmod+0x8c>
 800b100:	2200      	movs	r2, #0
 800b102:	2300      	movs	r3, #0
 800b104:	4630      	mov	r0, r6
 800b106:	4639      	mov	r1, r7
 800b108:	f7f5 fcfe 	bl	8000b08 <__aeabi_dcmpeq>
 800b10c:	b1d0      	cbz	r0, 800b144 <fmod+0x8c>
 800b10e:	2301      	movs	r3, #1
 800b110:	9300      	str	r3, [sp, #0]
 800b112:	4b1a      	ldr	r3, [pc, #104]	; (800b17c <fmod+0xc4>)
 800b114:	9301      	str	r3, [sp, #4]
 800b116:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b11a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b11e:	f8cd 9020 	str.w	r9, [sp, #32]
 800b122:	f1b8 0f00 	cmp.w	r8, #0
 800b126:	d116      	bne.n	800b156 <fmod+0x9e>
 800b128:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b12c:	4668      	mov	r0, sp
 800b12e:	f001 f800 	bl	800c132 <matherr>
 800b132:	b1d8      	cbz	r0, 800b16c <fmod+0xb4>
 800b134:	9b08      	ldr	r3, [sp, #32]
 800b136:	b11b      	cbz	r3, 800b140 <fmod+0x88>
 800b138:	f001 f804 	bl	800c144 <__errno>
 800b13c:	9b08      	ldr	r3, [sp, #32]
 800b13e:	6003      	str	r3, [r0, #0]
 800b140:	ed9d 8b06 	vldr	d8, [sp, #24]
 800b144:	eeb0 0a48 	vmov.f32	s0, s16
 800b148:	eef0 0a68 	vmov.f32	s1, s17
 800b14c:	b00b      	add	sp, #44	; 0x2c
 800b14e:	ecbd 8b02 	vpop	{d8}
 800b152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b156:	2200      	movs	r2, #0
 800b158:	2300      	movs	r3, #0
 800b15a:	4610      	mov	r0, r2
 800b15c:	4619      	mov	r1, r3
 800b15e:	f7f5 fb95 	bl	800088c <__aeabi_ddiv>
 800b162:	f1b8 0f02 	cmp.w	r8, #2
 800b166:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b16a:	d1df      	bne.n	800b12c <fmod+0x74>
 800b16c:	f000 ffea 	bl	800c144 <__errno>
 800b170:	2321      	movs	r3, #33	; 0x21
 800b172:	6003      	str	r3, [r0, #0]
 800b174:	e7de      	b.n	800b134 <fmod+0x7c>
 800b176:	bf00      	nop
 800b178:	2000000c 	.word	0x2000000c
 800b17c:	0800e574 	.word	0x0800e574

0800b180 <__ieee754_fmod>:
 800b180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b184:	ec53 2b11 	vmov	r2, r3, d1
 800b188:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800b18c:	ea5e 0402 	orrs.w	r4, lr, r2
 800b190:	ec51 0b10 	vmov	r0, r1, d0
 800b194:	461e      	mov	r6, r3
 800b196:	ee11 5a10 	vmov	r5, s2
 800b19a:	4694      	mov	ip, r2
 800b19c:	d00c      	beq.n	800b1b8 <__ieee754_fmod+0x38>
 800b19e:	4c7a      	ldr	r4, [pc, #488]	; (800b388 <__ieee754_fmod+0x208>)
 800b1a0:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800b1a4:	45a0      	cmp	r8, r4
 800b1a6:	4689      	mov	r9, r1
 800b1a8:	dc06      	bgt.n	800b1b8 <__ieee754_fmod+0x38>
 800b1aa:	4254      	negs	r4, r2
 800b1ac:	4314      	orrs	r4, r2
 800b1ae:	4f77      	ldr	r7, [pc, #476]	; (800b38c <__ieee754_fmod+0x20c>)
 800b1b0:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800b1b4:	42bc      	cmp	r4, r7
 800b1b6:	d909      	bls.n	800b1cc <__ieee754_fmod+0x4c>
 800b1b8:	f7f5 fa3e 	bl	8000638 <__aeabi_dmul>
 800b1bc:	4602      	mov	r2, r0
 800b1be:	460b      	mov	r3, r1
 800b1c0:	f7f5 fb64 	bl	800088c <__aeabi_ddiv>
 800b1c4:	ec41 0b10 	vmov	d0, r0, r1
 800b1c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1cc:	45f0      	cmp	r8, lr
 800b1ce:	ee10 2a10 	vmov	r2, s0
 800b1d2:	4607      	mov	r7, r0
 800b1d4:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 800b1d8:	dc0a      	bgt.n	800b1f0 <__ieee754_fmod+0x70>
 800b1da:	dbf3      	blt.n	800b1c4 <__ieee754_fmod+0x44>
 800b1dc:	42a8      	cmp	r0, r5
 800b1de:	d3f1      	bcc.n	800b1c4 <__ieee754_fmod+0x44>
 800b1e0:	d106      	bne.n	800b1f0 <__ieee754_fmod+0x70>
 800b1e2:	496b      	ldr	r1, [pc, #428]	; (800b390 <__ieee754_fmod+0x210>)
 800b1e4:	0fe4      	lsrs	r4, r4, #31
 800b1e6:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800b1ea:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b1ee:	e7e9      	b.n	800b1c4 <__ieee754_fmod+0x44>
 800b1f0:	4b68      	ldr	r3, [pc, #416]	; (800b394 <__ieee754_fmod+0x214>)
 800b1f2:	4598      	cmp	r8, r3
 800b1f4:	dc49      	bgt.n	800b28a <__ieee754_fmod+0x10a>
 800b1f6:	f1b8 0f00 	cmp.w	r8, #0
 800b1fa:	d13d      	bne.n	800b278 <__ieee754_fmod+0xf8>
 800b1fc:	4866      	ldr	r0, [pc, #408]	; (800b398 <__ieee754_fmod+0x218>)
 800b1fe:	4611      	mov	r1, r2
 800b200:	2900      	cmp	r1, #0
 800b202:	dc36      	bgt.n	800b272 <__ieee754_fmod+0xf2>
 800b204:	459e      	cmp	lr, r3
 800b206:	dc51      	bgt.n	800b2ac <__ieee754_fmod+0x12c>
 800b208:	f1be 0f00 	cmp.w	lr, #0
 800b20c:	d145      	bne.n	800b29a <__ieee754_fmod+0x11a>
 800b20e:	4b62      	ldr	r3, [pc, #392]	; (800b398 <__ieee754_fmod+0x218>)
 800b210:	4629      	mov	r1, r5
 800b212:	2900      	cmp	r1, #0
 800b214:	dc3e      	bgt.n	800b294 <__ieee754_fmod+0x114>
 800b216:	4961      	ldr	r1, [pc, #388]	; (800b39c <__ieee754_fmod+0x21c>)
 800b218:	4288      	cmp	r0, r1
 800b21a:	db4c      	blt.n	800b2b6 <__ieee754_fmod+0x136>
 800b21c:	f3c9 0113 	ubfx	r1, r9, #0, #20
 800b220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b224:	4a5d      	ldr	r2, [pc, #372]	; (800b39c <__ieee754_fmod+0x21c>)
 800b226:	4293      	cmp	r3, r2
 800b228:	db59      	blt.n	800b2de <__ieee754_fmod+0x15e>
 800b22a:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800b22e:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800b232:	1ac0      	subs	r0, r0, r3
 800b234:	1b8a      	subs	r2, r1, r6
 800b236:	eba7 050c 	sub.w	r5, r7, ip
 800b23a:	2800      	cmp	r0, #0
 800b23c:	d166      	bne.n	800b30c <__ieee754_fmod+0x18c>
 800b23e:	4567      	cmp	r7, ip
 800b240:	bf38      	it	cc
 800b242:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 800b246:	2a00      	cmp	r2, #0
 800b248:	bfbc      	itt	lt
 800b24a:	463d      	movlt	r5, r7
 800b24c:	460a      	movlt	r2, r1
 800b24e:	ea52 0105 	orrs.w	r1, r2, r5
 800b252:	d0c6      	beq.n	800b1e2 <__ieee754_fmod+0x62>
 800b254:	494f      	ldr	r1, [pc, #316]	; (800b394 <__ieee754_fmod+0x214>)
 800b256:	428a      	cmp	r2, r1
 800b258:	dd6d      	ble.n	800b336 <__ieee754_fmod+0x1b6>
 800b25a:	4950      	ldr	r1, [pc, #320]	; (800b39c <__ieee754_fmod+0x21c>)
 800b25c:	428b      	cmp	r3, r1
 800b25e:	db70      	blt.n	800b342 <__ieee754_fmod+0x1c2>
 800b260:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 800b264:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800b268:	4314      	orrs	r4, r2
 800b26a:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 800b26e:	4628      	mov	r0, r5
 800b270:	e7a8      	b.n	800b1c4 <__ieee754_fmod+0x44>
 800b272:	3801      	subs	r0, #1
 800b274:	0049      	lsls	r1, r1, #1
 800b276:	e7c3      	b.n	800b200 <__ieee754_fmod+0x80>
 800b278:	4848      	ldr	r0, [pc, #288]	; (800b39c <__ieee754_fmod+0x21c>)
 800b27a:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 800b27e:	0049      	lsls	r1, r1, #1
 800b280:	2900      	cmp	r1, #0
 800b282:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800b286:	dcfa      	bgt.n	800b27e <__ieee754_fmod+0xfe>
 800b288:	e7bc      	b.n	800b204 <__ieee754_fmod+0x84>
 800b28a:	ea4f 5028 	mov.w	r0, r8, asr #20
 800b28e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800b292:	e7b7      	b.n	800b204 <__ieee754_fmod+0x84>
 800b294:	3b01      	subs	r3, #1
 800b296:	0049      	lsls	r1, r1, #1
 800b298:	e7bb      	b.n	800b212 <__ieee754_fmod+0x92>
 800b29a:	4b40      	ldr	r3, [pc, #256]	; (800b39c <__ieee754_fmod+0x21c>)
 800b29c:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 800b2a0:	0049      	lsls	r1, r1, #1
 800b2a2:	2900      	cmp	r1, #0
 800b2a4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b2a8:	dcfa      	bgt.n	800b2a0 <__ieee754_fmod+0x120>
 800b2aa:	e7b4      	b.n	800b216 <__ieee754_fmod+0x96>
 800b2ac:	ea4f 532e 	mov.w	r3, lr, asr #20
 800b2b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b2b4:	e7af      	b.n	800b216 <__ieee754_fmod+0x96>
 800b2b6:	1a0f      	subs	r7, r1, r0
 800b2b8:	2f1f      	cmp	r7, #31
 800b2ba:	dc0a      	bgt.n	800b2d2 <__ieee754_fmod+0x152>
 800b2bc:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 800b2c0:	fa08 f807 	lsl.w	r8, r8, r7
 800b2c4:	fa22 f101 	lsr.w	r1, r2, r1
 800b2c8:	ea41 0108 	orr.w	r1, r1, r8
 800b2cc:	fa02 f707 	lsl.w	r7, r2, r7
 800b2d0:	e7a8      	b.n	800b224 <__ieee754_fmod+0xa4>
 800b2d2:	4933      	ldr	r1, [pc, #204]	; (800b3a0 <__ieee754_fmod+0x220>)
 800b2d4:	1a09      	subs	r1, r1, r0
 800b2d6:	fa02 f101 	lsl.w	r1, r2, r1
 800b2da:	2700      	movs	r7, #0
 800b2dc:	e7a2      	b.n	800b224 <__ieee754_fmod+0xa4>
 800b2de:	eba2 0c03 	sub.w	ip, r2, r3
 800b2e2:	f1bc 0f1f 	cmp.w	ip, #31
 800b2e6:	dc0a      	bgt.n	800b2fe <__ieee754_fmod+0x17e>
 800b2e8:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 800b2ec:	fa0e fe0c 	lsl.w	lr, lr, ip
 800b2f0:	fa25 f606 	lsr.w	r6, r5, r6
 800b2f4:	ea46 060e 	orr.w	r6, r6, lr
 800b2f8:	fa05 fc0c 	lsl.w	ip, r5, ip
 800b2fc:	e799      	b.n	800b232 <__ieee754_fmod+0xb2>
 800b2fe:	4e28      	ldr	r6, [pc, #160]	; (800b3a0 <__ieee754_fmod+0x220>)
 800b300:	1af6      	subs	r6, r6, r3
 800b302:	fa05 f606 	lsl.w	r6, r5, r6
 800b306:	f04f 0c00 	mov.w	ip, #0
 800b30a:	e792      	b.n	800b232 <__ieee754_fmod+0xb2>
 800b30c:	4567      	cmp	r7, ip
 800b30e:	bf38      	it	cc
 800b310:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 800b314:	2a00      	cmp	r2, #0
 800b316:	da05      	bge.n	800b324 <__ieee754_fmod+0x1a4>
 800b318:	0ffa      	lsrs	r2, r7, #31
 800b31a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b31e:	007f      	lsls	r7, r7, #1
 800b320:	3801      	subs	r0, #1
 800b322:	e787      	b.n	800b234 <__ieee754_fmod+0xb4>
 800b324:	ea52 0105 	orrs.w	r1, r2, r5
 800b328:	f43f af5b 	beq.w	800b1e2 <__ieee754_fmod+0x62>
 800b32c:	0fe9      	lsrs	r1, r5, #31
 800b32e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800b332:	006f      	lsls	r7, r5, #1
 800b334:	e7f4      	b.n	800b320 <__ieee754_fmod+0x1a0>
 800b336:	0fe8      	lsrs	r0, r5, #31
 800b338:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800b33c:	006d      	lsls	r5, r5, #1
 800b33e:	3b01      	subs	r3, #1
 800b340:	e789      	b.n	800b256 <__ieee754_fmod+0xd6>
 800b342:	1ac9      	subs	r1, r1, r3
 800b344:	2914      	cmp	r1, #20
 800b346:	dc0a      	bgt.n	800b35e <__ieee754_fmod+0x1de>
 800b348:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800b34c:	fa02 f303 	lsl.w	r3, r2, r3
 800b350:	40cd      	lsrs	r5, r1
 800b352:	432b      	orrs	r3, r5
 800b354:	410a      	asrs	r2, r1
 800b356:	ea42 0104 	orr.w	r1, r2, r4
 800b35a:	4618      	mov	r0, r3
 800b35c:	e732      	b.n	800b1c4 <__ieee754_fmod+0x44>
 800b35e:	291f      	cmp	r1, #31
 800b360:	dc07      	bgt.n	800b372 <__ieee754_fmod+0x1f2>
 800b362:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800b366:	40cd      	lsrs	r5, r1
 800b368:	fa02 f303 	lsl.w	r3, r2, r3
 800b36c:	432b      	orrs	r3, r5
 800b36e:	4622      	mov	r2, r4
 800b370:	e7f1      	b.n	800b356 <__ieee754_fmod+0x1d6>
 800b372:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800b376:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800b37a:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800b37e:	33e2      	adds	r3, #226	; 0xe2
 800b380:	fa42 f303 	asr.w	r3, r2, r3
 800b384:	e7f3      	b.n	800b36e <__ieee754_fmod+0x1ee>
 800b386:	bf00      	nop
 800b388:	7fefffff 	.word	0x7fefffff
 800b38c:	7ff00000 	.word	0x7ff00000
 800b390:	0800e580 	.word	0x0800e580
 800b394:	000fffff 	.word	0x000fffff
 800b398:	fffffbed 	.word	0xfffffbed
 800b39c:	fffffc02 	.word	0xfffffc02
 800b3a0:	fffffbe2 	.word	0xfffffbe2
 800b3a4:	00000000 	.word	0x00000000

0800b3a8 <__ieee754_rem_pio2>:
 800b3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ac:	ec57 6b10 	vmov	r6, r7, d0
 800b3b0:	4bc3      	ldr	r3, [pc, #780]	; (800b6c0 <__ieee754_rem_pio2+0x318>)
 800b3b2:	b08d      	sub	sp, #52	; 0x34
 800b3b4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b3b8:	4598      	cmp	r8, r3
 800b3ba:	4604      	mov	r4, r0
 800b3bc:	9704      	str	r7, [sp, #16]
 800b3be:	dc07      	bgt.n	800b3d0 <__ieee754_rem_pio2+0x28>
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	ed84 0b00 	vstr	d0, [r4]
 800b3c8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b3cc:	2500      	movs	r5, #0
 800b3ce:	e027      	b.n	800b420 <__ieee754_rem_pio2+0x78>
 800b3d0:	4bbc      	ldr	r3, [pc, #752]	; (800b6c4 <__ieee754_rem_pio2+0x31c>)
 800b3d2:	4598      	cmp	r8, r3
 800b3d4:	dc75      	bgt.n	800b4c2 <__ieee754_rem_pio2+0x11a>
 800b3d6:	9b04      	ldr	r3, [sp, #16]
 800b3d8:	4dbb      	ldr	r5, [pc, #748]	; (800b6c8 <__ieee754_rem_pio2+0x320>)
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	ee10 0a10 	vmov	r0, s0
 800b3e0:	a3a9      	add	r3, pc, #676	; (adr r3, 800b688 <__ieee754_rem_pio2+0x2e0>)
 800b3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e6:	4639      	mov	r1, r7
 800b3e8:	dd36      	ble.n	800b458 <__ieee754_rem_pio2+0xb0>
 800b3ea:	f7f4 ff6d 	bl	80002c8 <__aeabi_dsub>
 800b3ee:	45a8      	cmp	r8, r5
 800b3f0:	4606      	mov	r6, r0
 800b3f2:	460f      	mov	r7, r1
 800b3f4:	d018      	beq.n	800b428 <__ieee754_rem_pio2+0x80>
 800b3f6:	a3a6      	add	r3, pc, #664	; (adr r3, 800b690 <__ieee754_rem_pio2+0x2e8>)
 800b3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fc:	f7f4 ff64 	bl	80002c8 <__aeabi_dsub>
 800b400:	4602      	mov	r2, r0
 800b402:	460b      	mov	r3, r1
 800b404:	e9c4 2300 	strd	r2, r3, [r4]
 800b408:	4630      	mov	r0, r6
 800b40a:	4639      	mov	r1, r7
 800b40c:	f7f4 ff5c 	bl	80002c8 <__aeabi_dsub>
 800b410:	a39f      	add	r3, pc, #636	; (adr r3, 800b690 <__ieee754_rem_pio2+0x2e8>)
 800b412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b416:	f7f4 ff57 	bl	80002c8 <__aeabi_dsub>
 800b41a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b41e:	2501      	movs	r5, #1
 800b420:	4628      	mov	r0, r5
 800b422:	b00d      	add	sp, #52	; 0x34
 800b424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b428:	a39b      	add	r3, pc, #620	; (adr r3, 800b698 <__ieee754_rem_pio2+0x2f0>)
 800b42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42e:	f7f4 ff4b 	bl	80002c8 <__aeabi_dsub>
 800b432:	a39b      	add	r3, pc, #620	; (adr r3, 800b6a0 <__ieee754_rem_pio2+0x2f8>)
 800b434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b438:	4606      	mov	r6, r0
 800b43a:	460f      	mov	r7, r1
 800b43c:	f7f4 ff44 	bl	80002c8 <__aeabi_dsub>
 800b440:	4602      	mov	r2, r0
 800b442:	460b      	mov	r3, r1
 800b444:	e9c4 2300 	strd	r2, r3, [r4]
 800b448:	4630      	mov	r0, r6
 800b44a:	4639      	mov	r1, r7
 800b44c:	f7f4 ff3c 	bl	80002c8 <__aeabi_dsub>
 800b450:	a393      	add	r3, pc, #588	; (adr r3, 800b6a0 <__ieee754_rem_pio2+0x2f8>)
 800b452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b456:	e7de      	b.n	800b416 <__ieee754_rem_pio2+0x6e>
 800b458:	f7f4 ff38 	bl	80002cc <__adddf3>
 800b45c:	45a8      	cmp	r8, r5
 800b45e:	4606      	mov	r6, r0
 800b460:	460f      	mov	r7, r1
 800b462:	d016      	beq.n	800b492 <__ieee754_rem_pio2+0xea>
 800b464:	a38a      	add	r3, pc, #552	; (adr r3, 800b690 <__ieee754_rem_pio2+0x2e8>)
 800b466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46a:	f7f4 ff2f 	bl	80002cc <__adddf3>
 800b46e:	4602      	mov	r2, r0
 800b470:	460b      	mov	r3, r1
 800b472:	e9c4 2300 	strd	r2, r3, [r4]
 800b476:	4630      	mov	r0, r6
 800b478:	4639      	mov	r1, r7
 800b47a:	f7f4 ff25 	bl	80002c8 <__aeabi_dsub>
 800b47e:	a384      	add	r3, pc, #528	; (adr r3, 800b690 <__ieee754_rem_pio2+0x2e8>)
 800b480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b484:	f7f4 ff22 	bl	80002cc <__adddf3>
 800b488:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b48c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b490:	e7c6      	b.n	800b420 <__ieee754_rem_pio2+0x78>
 800b492:	a381      	add	r3, pc, #516	; (adr r3, 800b698 <__ieee754_rem_pio2+0x2f0>)
 800b494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b498:	f7f4 ff18 	bl	80002cc <__adddf3>
 800b49c:	a380      	add	r3, pc, #512	; (adr r3, 800b6a0 <__ieee754_rem_pio2+0x2f8>)
 800b49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a2:	4606      	mov	r6, r0
 800b4a4:	460f      	mov	r7, r1
 800b4a6:	f7f4 ff11 	bl	80002cc <__adddf3>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	e9c4 2300 	strd	r2, r3, [r4]
 800b4b2:	4630      	mov	r0, r6
 800b4b4:	4639      	mov	r1, r7
 800b4b6:	f7f4 ff07 	bl	80002c8 <__aeabi_dsub>
 800b4ba:	a379      	add	r3, pc, #484	; (adr r3, 800b6a0 <__ieee754_rem_pio2+0x2f8>)
 800b4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c0:	e7e0      	b.n	800b484 <__ieee754_rem_pio2+0xdc>
 800b4c2:	4b82      	ldr	r3, [pc, #520]	; (800b6cc <__ieee754_rem_pio2+0x324>)
 800b4c4:	4598      	cmp	r8, r3
 800b4c6:	f300 80d0 	bgt.w	800b66a <__ieee754_rem_pio2+0x2c2>
 800b4ca:	f7ff fca5 	bl	800ae18 <fabs>
 800b4ce:	ec57 6b10 	vmov	r6, r7, d0
 800b4d2:	ee10 0a10 	vmov	r0, s0
 800b4d6:	a374      	add	r3, pc, #464	; (adr r3, 800b6a8 <__ieee754_rem_pio2+0x300>)
 800b4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4dc:	4639      	mov	r1, r7
 800b4de:	f7f5 f8ab 	bl	8000638 <__aeabi_dmul>
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	4b7a      	ldr	r3, [pc, #488]	; (800b6d0 <__ieee754_rem_pio2+0x328>)
 800b4e6:	f7f4 fef1 	bl	80002cc <__adddf3>
 800b4ea:	f7f5 fb55 	bl	8000b98 <__aeabi_d2iz>
 800b4ee:	4605      	mov	r5, r0
 800b4f0:	f7f5 f838 	bl	8000564 <__aeabi_i2d>
 800b4f4:	a364      	add	r3, pc, #400	; (adr r3, 800b688 <__ieee754_rem_pio2+0x2e0>)
 800b4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4fe:	f7f5 f89b 	bl	8000638 <__aeabi_dmul>
 800b502:	4602      	mov	r2, r0
 800b504:	460b      	mov	r3, r1
 800b506:	4630      	mov	r0, r6
 800b508:	4639      	mov	r1, r7
 800b50a:	f7f4 fedd 	bl	80002c8 <__aeabi_dsub>
 800b50e:	a360      	add	r3, pc, #384	; (adr r3, 800b690 <__ieee754_rem_pio2+0x2e8>)
 800b510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b514:	4682      	mov	sl, r0
 800b516:	468b      	mov	fp, r1
 800b518:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b51c:	f7f5 f88c 	bl	8000638 <__aeabi_dmul>
 800b520:	2d1f      	cmp	r5, #31
 800b522:	4606      	mov	r6, r0
 800b524:	460f      	mov	r7, r1
 800b526:	dc0c      	bgt.n	800b542 <__ieee754_rem_pio2+0x19a>
 800b528:	1e6a      	subs	r2, r5, #1
 800b52a:	4b6a      	ldr	r3, [pc, #424]	; (800b6d4 <__ieee754_rem_pio2+0x32c>)
 800b52c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b530:	4543      	cmp	r3, r8
 800b532:	d006      	beq.n	800b542 <__ieee754_rem_pio2+0x19a>
 800b534:	4632      	mov	r2, r6
 800b536:	463b      	mov	r3, r7
 800b538:	4650      	mov	r0, sl
 800b53a:	4659      	mov	r1, fp
 800b53c:	f7f4 fec4 	bl	80002c8 <__aeabi_dsub>
 800b540:	e00e      	b.n	800b560 <__ieee754_rem_pio2+0x1b8>
 800b542:	4632      	mov	r2, r6
 800b544:	463b      	mov	r3, r7
 800b546:	4650      	mov	r0, sl
 800b548:	4659      	mov	r1, fp
 800b54a:	f7f4 febd 	bl	80002c8 <__aeabi_dsub>
 800b54e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b552:	9305      	str	r3, [sp, #20]
 800b554:	9a05      	ldr	r2, [sp, #20]
 800b556:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b55a:	1ad3      	subs	r3, r2, r3
 800b55c:	2b10      	cmp	r3, #16
 800b55e:	dc02      	bgt.n	800b566 <__ieee754_rem_pio2+0x1be>
 800b560:	e9c4 0100 	strd	r0, r1, [r4]
 800b564:	e039      	b.n	800b5da <__ieee754_rem_pio2+0x232>
 800b566:	a34c      	add	r3, pc, #304	; (adr r3, 800b698 <__ieee754_rem_pio2+0x2f0>)
 800b568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b570:	f7f5 f862 	bl	8000638 <__aeabi_dmul>
 800b574:	4606      	mov	r6, r0
 800b576:	460f      	mov	r7, r1
 800b578:	4602      	mov	r2, r0
 800b57a:	460b      	mov	r3, r1
 800b57c:	4650      	mov	r0, sl
 800b57e:	4659      	mov	r1, fp
 800b580:	f7f4 fea2 	bl	80002c8 <__aeabi_dsub>
 800b584:	4602      	mov	r2, r0
 800b586:	460b      	mov	r3, r1
 800b588:	4680      	mov	r8, r0
 800b58a:	4689      	mov	r9, r1
 800b58c:	4650      	mov	r0, sl
 800b58e:	4659      	mov	r1, fp
 800b590:	f7f4 fe9a 	bl	80002c8 <__aeabi_dsub>
 800b594:	4632      	mov	r2, r6
 800b596:	463b      	mov	r3, r7
 800b598:	f7f4 fe96 	bl	80002c8 <__aeabi_dsub>
 800b59c:	a340      	add	r3, pc, #256	; (adr r3, 800b6a0 <__ieee754_rem_pio2+0x2f8>)
 800b59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a2:	4606      	mov	r6, r0
 800b5a4:	460f      	mov	r7, r1
 800b5a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5aa:	f7f5 f845 	bl	8000638 <__aeabi_dmul>
 800b5ae:	4632      	mov	r2, r6
 800b5b0:	463b      	mov	r3, r7
 800b5b2:	f7f4 fe89 	bl	80002c8 <__aeabi_dsub>
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	460b      	mov	r3, r1
 800b5ba:	4606      	mov	r6, r0
 800b5bc:	460f      	mov	r7, r1
 800b5be:	4640      	mov	r0, r8
 800b5c0:	4649      	mov	r1, r9
 800b5c2:	f7f4 fe81 	bl	80002c8 <__aeabi_dsub>
 800b5c6:	9a05      	ldr	r2, [sp, #20]
 800b5c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b5cc:	1ad3      	subs	r3, r2, r3
 800b5ce:	2b31      	cmp	r3, #49	; 0x31
 800b5d0:	dc20      	bgt.n	800b614 <__ieee754_rem_pio2+0x26c>
 800b5d2:	e9c4 0100 	strd	r0, r1, [r4]
 800b5d6:	46c2      	mov	sl, r8
 800b5d8:	46cb      	mov	fp, r9
 800b5da:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b5de:	4650      	mov	r0, sl
 800b5e0:	4642      	mov	r2, r8
 800b5e2:	464b      	mov	r3, r9
 800b5e4:	4659      	mov	r1, fp
 800b5e6:	f7f4 fe6f 	bl	80002c8 <__aeabi_dsub>
 800b5ea:	463b      	mov	r3, r7
 800b5ec:	4632      	mov	r2, r6
 800b5ee:	f7f4 fe6b 	bl	80002c8 <__aeabi_dsub>
 800b5f2:	9b04      	ldr	r3, [sp, #16]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b5fa:	f6bf af11 	bge.w	800b420 <__ieee754_rem_pio2+0x78>
 800b5fe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b602:	6063      	str	r3, [r4, #4]
 800b604:	f8c4 8000 	str.w	r8, [r4]
 800b608:	60a0      	str	r0, [r4, #8]
 800b60a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b60e:	60e3      	str	r3, [r4, #12]
 800b610:	426d      	negs	r5, r5
 800b612:	e705      	b.n	800b420 <__ieee754_rem_pio2+0x78>
 800b614:	a326      	add	r3, pc, #152	; (adr r3, 800b6b0 <__ieee754_rem_pio2+0x308>)
 800b616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b61e:	f7f5 f80b 	bl	8000638 <__aeabi_dmul>
 800b622:	4606      	mov	r6, r0
 800b624:	460f      	mov	r7, r1
 800b626:	4602      	mov	r2, r0
 800b628:	460b      	mov	r3, r1
 800b62a:	4640      	mov	r0, r8
 800b62c:	4649      	mov	r1, r9
 800b62e:	f7f4 fe4b 	bl	80002c8 <__aeabi_dsub>
 800b632:	4602      	mov	r2, r0
 800b634:	460b      	mov	r3, r1
 800b636:	4682      	mov	sl, r0
 800b638:	468b      	mov	fp, r1
 800b63a:	4640      	mov	r0, r8
 800b63c:	4649      	mov	r1, r9
 800b63e:	f7f4 fe43 	bl	80002c8 <__aeabi_dsub>
 800b642:	4632      	mov	r2, r6
 800b644:	463b      	mov	r3, r7
 800b646:	f7f4 fe3f 	bl	80002c8 <__aeabi_dsub>
 800b64a:	a31b      	add	r3, pc, #108	; (adr r3, 800b6b8 <__ieee754_rem_pio2+0x310>)
 800b64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b650:	4606      	mov	r6, r0
 800b652:	460f      	mov	r7, r1
 800b654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b658:	f7f4 ffee 	bl	8000638 <__aeabi_dmul>
 800b65c:	4632      	mov	r2, r6
 800b65e:	463b      	mov	r3, r7
 800b660:	f7f4 fe32 	bl	80002c8 <__aeabi_dsub>
 800b664:	4606      	mov	r6, r0
 800b666:	460f      	mov	r7, r1
 800b668:	e764      	b.n	800b534 <__ieee754_rem_pio2+0x18c>
 800b66a:	4b1b      	ldr	r3, [pc, #108]	; (800b6d8 <__ieee754_rem_pio2+0x330>)
 800b66c:	4598      	cmp	r8, r3
 800b66e:	dd35      	ble.n	800b6dc <__ieee754_rem_pio2+0x334>
 800b670:	ee10 2a10 	vmov	r2, s0
 800b674:	463b      	mov	r3, r7
 800b676:	4630      	mov	r0, r6
 800b678:	4639      	mov	r1, r7
 800b67a:	f7f4 fe25 	bl	80002c8 <__aeabi_dsub>
 800b67e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b682:	e9c4 0100 	strd	r0, r1, [r4]
 800b686:	e6a1      	b.n	800b3cc <__ieee754_rem_pio2+0x24>
 800b688:	54400000 	.word	0x54400000
 800b68c:	3ff921fb 	.word	0x3ff921fb
 800b690:	1a626331 	.word	0x1a626331
 800b694:	3dd0b461 	.word	0x3dd0b461
 800b698:	1a600000 	.word	0x1a600000
 800b69c:	3dd0b461 	.word	0x3dd0b461
 800b6a0:	2e037073 	.word	0x2e037073
 800b6a4:	3ba3198a 	.word	0x3ba3198a
 800b6a8:	6dc9c883 	.word	0x6dc9c883
 800b6ac:	3fe45f30 	.word	0x3fe45f30
 800b6b0:	2e000000 	.word	0x2e000000
 800b6b4:	3ba3198a 	.word	0x3ba3198a
 800b6b8:	252049c1 	.word	0x252049c1
 800b6bc:	397b839a 	.word	0x397b839a
 800b6c0:	3fe921fb 	.word	0x3fe921fb
 800b6c4:	4002d97b 	.word	0x4002d97b
 800b6c8:	3ff921fb 	.word	0x3ff921fb
 800b6cc:	413921fb 	.word	0x413921fb
 800b6d0:	3fe00000 	.word	0x3fe00000
 800b6d4:	0800e590 	.word	0x0800e590
 800b6d8:	7fefffff 	.word	0x7fefffff
 800b6dc:	ea4f 5528 	mov.w	r5, r8, asr #20
 800b6e0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800b6e4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800b6e8:	4630      	mov	r0, r6
 800b6ea:	460f      	mov	r7, r1
 800b6ec:	f7f5 fa54 	bl	8000b98 <__aeabi_d2iz>
 800b6f0:	f7f4 ff38 	bl	8000564 <__aeabi_i2d>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	4630      	mov	r0, r6
 800b6fa:	4639      	mov	r1, r7
 800b6fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b700:	f7f4 fde2 	bl	80002c8 <__aeabi_dsub>
 800b704:	2200      	movs	r2, #0
 800b706:	4b1f      	ldr	r3, [pc, #124]	; (800b784 <__ieee754_rem_pio2+0x3dc>)
 800b708:	f7f4 ff96 	bl	8000638 <__aeabi_dmul>
 800b70c:	460f      	mov	r7, r1
 800b70e:	4606      	mov	r6, r0
 800b710:	f7f5 fa42 	bl	8000b98 <__aeabi_d2iz>
 800b714:	f7f4 ff26 	bl	8000564 <__aeabi_i2d>
 800b718:	4602      	mov	r2, r0
 800b71a:	460b      	mov	r3, r1
 800b71c:	4630      	mov	r0, r6
 800b71e:	4639      	mov	r1, r7
 800b720:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b724:	f7f4 fdd0 	bl	80002c8 <__aeabi_dsub>
 800b728:	2200      	movs	r2, #0
 800b72a:	4b16      	ldr	r3, [pc, #88]	; (800b784 <__ieee754_rem_pio2+0x3dc>)
 800b72c:	f7f4 ff84 	bl	8000638 <__aeabi_dmul>
 800b730:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b734:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800b738:	f04f 0803 	mov.w	r8, #3
 800b73c:	2600      	movs	r6, #0
 800b73e:	2700      	movs	r7, #0
 800b740:	4632      	mov	r2, r6
 800b742:	463b      	mov	r3, r7
 800b744:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b748:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800b74c:	f7f5 f9dc 	bl	8000b08 <__aeabi_dcmpeq>
 800b750:	b9b0      	cbnz	r0, 800b780 <__ieee754_rem_pio2+0x3d8>
 800b752:	4b0d      	ldr	r3, [pc, #52]	; (800b788 <__ieee754_rem_pio2+0x3e0>)
 800b754:	9301      	str	r3, [sp, #4]
 800b756:	2302      	movs	r3, #2
 800b758:	9300      	str	r3, [sp, #0]
 800b75a:	462a      	mov	r2, r5
 800b75c:	4643      	mov	r3, r8
 800b75e:	4621      	mov	r1, r4
 800b760:	a806      	add	r0, sp, #24
 800b762:	f000 f8dd 	bl	800b920 <__kernel_rem_pio2>
 800b766:	9b04      	ldr	r3, [sp, #16]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	4605      	mov	r5, r0
 800b76c:	f6bf ae58 	bge.w	800b420 <__ieee754_rem_pio2+0x78>
 800b770:	6863      	ldr	r3, [r4, #4]
 800b772:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b776:	6063      	str	r3, [r4, #4]
 800b778:	68e3      	ldr	r3, [r4, #12]
 800b77a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b77e:	e746      	b.n	800b60e <__ieee754_rem_pio2+0x266>
 800b780:	46d0      	mov	r8, sl
 800b782:	e7dd      	b.n	800b740 <__ieee754_rem_pio2+0x398>
 800b784:	41700000 	.word	0x41700000
 800b788:	0800e610 	.word	0x0800e610
 800b78c:	00000000 	.word	0x00000000

0800b790 <__kernel_cos>:
 800b790:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b794:	ec59 8b10 	vmov	r8, r9, d0
 800b798:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800b79c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800b7a0:	ed2d 8b02 	vpush	{d8}
 800b7a4:	eeb0 8a41 	vmov.f32	s16, s2
 800b7a8:	eef0 8a61 	vmov.f32	s17, s3
 800b7ac:	da07      	bge.n	800b7be <__kernel_cos+0x2e>
 800b7ae:	ee10 0a10 	vmov	r0, s0
 800b7b2:	4649      	mov	r1, r9
 800b7b4:	f7f5 f9f0 	bl	8000b98 <__aeabi_d2iz>
 800b7b8:	2800      	cmp	r0, #0
 800b7ba:	f000 8089 	beq.w	800b8d0 <__kernel_cos+0x140>
 800b7be:	4642      	mov	r2, r8
 800b7c0:	464b      	mov	r3, r9
 800b7c2:	4640      	mov	r0, r8
 800b7c4:	4649      	mov	r1, r9
 800b7c6:	f7f4 ff37 	bl	8000638 <__aeabi_dmul>
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	4b4e      	ldr	r3, [pc, #312]	; (800b908 <__kernel_cos+0x178>)
 800b7ce:	4604      	mov	r4, r0
 800b7d0:	460d      	mov	r5, r1
 800b7d2:	f7f4 ff31 	bl	8000638 <__aeabi_dmul>
 800b7d6:	a340      	add	r3, pc, #256	; (adr r3, 800b8d8 <__kernel_cos+0x148>)
 800b7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7dc:	4682      	mov	sl, r0
 800b7de:	468b      	mov	fp, r1
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	4629      	mov	r1, r5
 800b7e4:	f7f4 ff28 	bl	8000638 <__aeabi_dmul>
 800b7e8:	a33d      	add	r3, pc, #244	; (adr r3, 800b8e0 <__kernel_cos+0x150>)
 800b7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ee:	f7f4 fd6d 	bl	80002cc <__adddf3>
 800b7f2:	4622      	mov	r2, r4
 800b7f4:	462b      	mov	r3, r5
 800b7f6:	f7f4 ff1f 	bl	8000638 <__aeabi_dmul>
 800b7fa:	a33b      	add	r3, pc, #236	; (adr r3, 800b8e8 <__kernel_cos+0x158>)
 800b7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b800:	f7f4 fd62 	bl	80002c8 <__aeabi_dsub>
 800b804:	4622      	mov	r2, r4
 800b806:	462b      	mov	r3, r5
 800b808:	f7f4 ff16 	bl	8000638 <__aeabi_dmul>
 800b80c:	a338      	add	r3, pc, #224	; (adr r3, 800b8f0 <__kernel_cos+0x160>)
 800b80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b812:	f7f4 fd5b 	bl	80002cc <__adddf3>
 800b816:	4622      	mov	r2, r4
 800b818:	462b      	mov	r3, r5
 800b81a:	f7f4 ff0d 	bl	8000638 <__aeabi_dmul>
 800b81e:	a336      	add	r3, pc, #216	; (adr r3, 800b8f8 <__kernel_cos+0x168>)
 800b820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b824:	f7f4 fd50 	bl	80002c8 <__aeabi_dsub>
 800b828:	4622      	mov	r2, r4
 800b82a:	462b      	mov	r3, r5
 800b82c:	f7f4 ff04 	bl	8000638 <__aeabi_dmul>
 800b830:	a333      	add	r3, pc, #204	; (adr r3, 800b900 <__kernel_cos+0x170>)
 800b832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b836:	f7f4 fd49 	bl	80002cc <__adddf3>
 800b83a:	4622      	mov	r2, r4
 800b83c:	462b      	mov	r3, r5
 800b83e:	f7f4 fefb 	bl	8000638 <__aeabi_dmul>
 800b842:	4622      	mov	r2, r4
 800b844:	462b      	mov	r3, r5
 800b846:	f7f4 fef7 	bl	8000638 <__aeabi_dmul>
 800b84a:	ec53 2b18 	vmov	r2, r3, d8
 800b84e:	4604      	mov	r4, r0
 800b850:	460d      	mov	r5, r1
 800b852:	4640      	mov	r0, r8
 800b854:	4649      	mov	r1, r9
 800b856:	f7f4 feef 	bl	8000638 <__aeabi_dmul>
 800b85a:	460b      	mov	r3, r1
 800b85c:	4602      	mov	r2, r0
 800b85e:	4629      	mov	r1, r5
 800b860:	4620      	mov	r0, r4
 800b862:	f7f4 fd31 	bl	80002c8 <__aeabi_dsub>
 800b866:	4b29      	ldr	r3, [pc, #164]	; (800b90c <__kernel_cos+0x17c>)
 800b868:	429e      	cmp	r6, r3
 800b86a:	4680      	mov	r8, r0
 800b86c:	4689      	mov	r9, r1
 800b86e:	dc11      	bgt.n	800b894 <__kernel_cos+0x104>
 800b870:	4602      	mov	r2, r0
 800b872:	460b      	mov	r3, r1
 800b874:	4650      	mov	r0, sl
 800b876:	4659      	mov	r1, fp
 800b878:	f7f4 fd26 	bl	80002c8 <__aeabi_dsub>
 800b87c:	460b      	mov	r3, r1
 800b87e:	4924      	ldr	r1, [pc, #144]	; (800b910 <__kernel_cos+0x180>)
 800b880:	4602      	mov	r2, r0
 800b882:	2000      	movs	r0, #0
 800b884:	f7f4 fd20 	bl	80002c8 <__aeabi_dsub>
 800b888:	ecbd 8b02 	vpop	{d8}
 800b88c:	ec41 0b10 	vmov	d0, r0, r1
 800b890:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b894:	4b1f      	ldr	r3, [pc, #124]	; (800b914 <__kernel_cos+0x184>)
 800b896:	491e      	ldr	r1, [pc, #120]	; (800b910 <__kernel_cos+0x180>)
 800b898:	429e      	cmp	r6, r3
 800b89a:	bfcc      	ite	gt
 800b89c:	4d1e      	ldrgt	r5, [pc, #120]	; (800b918 <__kernel_cos+0x188>)
 800b89e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b8a2:	2400      	movs	r4, #0
 800b8a4:	4622      	mov	r2, r4
 800b8a6:	462b      	mov	r3, r5
 800b8a8:	2000      	movs	r0, #0
 800b8aa:	f7f4 fd0d 	bl	80002c8 <__aeabi_dsub>
 800b8ae:	4622      	mov	r2, r4
 800b8b0:	4606      	mov	r6, r0
 800b8b2:	460f      	mov	r7, r1
 800b8b4:	462b      	mov	r3, r5
 800b8b6:	4650      	mov	r0, sl
 800b8b8:	4659      	mov	r1, fp
 800b8ba:	f7f4 fd05 	bl	80002c8 <__aeabi_dsub>
 800b8be:	4642      	mov	r2, r8
 800b8c0:	464b      	mov	r3, r9
 800b8c2:	f7f4 fd01 	bl	80002c8 <__aeabi_dsub>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	4630      	mov	r0, r6
 800b8cc:	4639      	mov	r1, r7
 800b8ce:	e7d9      	b.n	800b884 <__kernel_cos+0xf4>
 800b8d0:	2000      	movs	r0, #0
 800b8d2:	490f      	ldr	r1, [pc, #60]	; (800b910 <__kernel_cos+0x180>)
 800b8d4:	e7d8      	b.n	800b888 <__kernel_cos+0xf8>
 800b8d6:	bf00      	nop
 800b8d8:	be8838d4 	.word	0xbe8838d4
 800b8dc:	bda8fae9 	.word	0xbda8fae9
 800b8e0:	bdb4b1c4 	.word	0xbdb4b1c4
 800b8e4:	3e21ee9e 	.word	0x3e21ee9e
 800b8e8:	809c52ad 	.word	0x809c52ad
 800b8ec:	3e927e4f 	.word	0x3e927e4f
 800b8f0:	19cb1590 	.word	0x19cb1590
 800b8f4:	3efa01a0 	.word	0x3efa01a0
 800b8f8:	16c15177 	.word	0x16c15177
 800b8fc:	3f56c16c 	.word	0x3f56c16c
 800b900:	5555554c 	.word	0x5555554c
 800b904:	3fa55555 	.word	0x3fa55555
 800b908:	3fe00000 	.word	0x3fe00000
 800b90c:	3fd33332 	.word	0x3fd33332
 800b910:	3ff00000 	.word	0x3ff00000
 800b914:	3fe90000 	.word	0x3fe90000
 800b918:	3fd20000 	.word	0x3fd20000
 800b91c:	00000000 	.word	0x00000000

0800b920 <__kernel_rem_pio2>:
 800b920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b924:	ed2d 8b02 	vpush	{d8}
 800b928:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b92c:	1ed4      	subs	r4, r2, #3
 800b92e:	9308      	str	r3, [sp, #32]
 800b930:	9101      	str	r1, [sp, #4]
 800b932:	4bc5      	ldr	r3, [pc, #788]	; (800bc48 <__kernel_rem_pio2+0x328>)
 800b934:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b936:	9009      	str	r0, [sp, #36]	; 0x24
 800b938:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b93c:	9304      	str	r3, [sp, #16]
 800b93e:	9b08      	ldr	r3, [sp, #32]
 800b940:	3b01      	subs	r3, #1
 800b942:	9307      	str	r3, [sp, #28]
 800b944:	2318      	movs	r3, #24
 800b946:	fb94 f4f3 	sdiv	r4, r4, r3
 800b94a:	f06f 0317 	mvn.w	r3, #23
 800b94e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800b952:	fb04 3303 	mla	r3, r4, r3, r3
 800b956:	eb03 0a02 	add.w	sl, r3, r2
 800b95a:	9b04      	ldr	r3, [sp, #16]
 800b95c:	9a07      	ldr	r2, [sp, #28]
 800b95e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800bc38 <__kernel_rem_pio2+0x318>
 800b962:	eb03 0802 	add.w	r8, r3, r2
 800b966:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b968:	1aa7      	subs	r7, r4, r2
 800b96a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b96e:	ae22      	add	r6, sp, #136	; 0x88
 800b970:	2500      	movs	r5, #0
 800b972:	4545      	cmp	r5, r8
 800b974:	dd13      	ble.n	800b99e <__kernel_rem_pio2+0x7e>
 800b976:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800bc38 <__kernel_rem_pio2+0x318>
 800b97a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b97e:	2600      	movs	r6, #0
 800b980:	9b04      	ldr	r3, [sp, #16]
 800b982:	429e      	cmp	r6, r3
 800b984:	dc32      	bgt.n	800b9ec <__kernel_rem_pio2+0xcc>
 800b986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b988:	9302      	str	r3, [sp, #8]
 800b98a:	9b08      	ldr	r3, [sp, #32]
 800b98c:	199d      	adds	r5, r3, r6
 800b98e:	ab22      	add	r3, sp, #136	; 0x88
 800b990:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b994:	9306      	str	r3, [sp, #24]
 800b996:	ec59 8b18 	vmov	r8, r9, d8
 800b99a:	2700      	movs	r7, #0
 800b99c:	e01f      	b.n	800b9de <__kernel_rem_pio2+0xbe>
 800b99e:	42ef      	cmn	r7, r5
 800b9a0:	d407      	bmi.n	800b9b2 <__kernel_rem_pio2+0x92>
 800b9a2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b9a6:	f7f4 fddd 	bl	8000564 <__aeabi_i2d>
 800b9aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b9ae:	3501      	adds	r5, #1
 800b9b0:	e7df      	b.n	800b972 <__kernel_rem_pio2+0x52>
 800b9b2:	ec51 0b18 	vmov	r0, r1, d8
 800b9b6:	e7f8      	b.n	800b9aa <__kernel_rem_pio2+0x8a>
 800b9b8:	9906      	ldr	r1, [sp, #24]
 800b9ba:	9d02      	ldr	r5, [sp, #8]
 800b9bc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800b9c0:	9106      	str	r1, [sp, #24]
 800b9c2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800b9c6:	9502      	str	r5, [sp, #8]
 800b9c8:	f7f4 fe36 	bl	8000638 <__aeabi_dmul>
 800b9cc:	4602      	mov	r2, r0
 800b9ce:	460b      	mov	r3, r1
 800b9d0:	4640      	mov	r0, r8
 800b9d2:	4649      	mov	r1, r9
 800b9d4:	f7f4 fc7a 	bl	80002cc <__adddf3>
 800b9d8:	3701      	adds	r7, #1
 800b9da:	4680      	mov	r8, r0
 800b9dc:	4689      	mov	r9, r1
 800b9de:	9b07      	ldr	r3, [sp, #28]
 800b9e0:	429f      	cmp	r7, r3
 800b9e2:	dde9      	ble.n	800b9b8 <__kernel_rem_pio2+0x98>
 800b9e4:	e8eb 8902 	strd	r8, r9, [fp], #8
 800b9e8:	3601      	adds	r6, #1
 800b9ea:	e7c9      	b.n	800b980 <__kernel_rem_pio2+0x60>
 800b9ec:	9b04      	ldr	r3, [sp, #16]
 800b9ee:	aa0e      	add	r2, sp, #56	; 0x38
 800b9f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b9f4:	930c      	str	r3, [sp, #48]	; 0x30
 800b9f6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b9f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b9fc:	9c04      	ldr	r4, [sp, #16]
 800b9fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba00:	ab9a      	add	r3, sp, #616	; 0x268
 800ba02:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800ba06:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ba0a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ba0e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800ba12:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800ba16:	ab9a      	add	r3, sp, #616	; 0x268
 800ba18:	445b      	add	r3, fp
 800ba1a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800ba1e:	2500      	movs	r5, #0
 800ba20:	1b63      	subs	r3, r4, r5
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	dc78      	bgt.n	800bb18 <__kernel_rem_pio2+0x1f8>
 800ba26:	4650      	mov	r0, sl
 800ba28:	ec49 8b10 	vmov	d0, r8, r9
 800ba2c:	f7ff fa84 	bl	800af38 <scalbn>
 800ba30:	ec57 6b10 	vmov	r6, r7, d0
 800ba34:	2200      	movs	r2, #0
 800ba36:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ba3a:	ee10 0a10 	vmov	r0, s0
 800ba3e:	4639      	mov	r1, r7
 800ba40:	f7f4 fdfa 	bl	8000638 <__aeabi_dmul>
 800ba44:	ec41 0b10 	vmov	d0, r0, r1
 800ba48:	f7ff f9f2 	bl	800ae30 <floor>
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	ec51 0b10 	vmov	r0, r1, d0
 800ba52:	4b7e      	ldr	r3, [pc, #504]	; (800bc4c <__kernel_rem_pio2+0x32c>)
 800ba54:	f7f4 fdf0 	bl	8000638 <__aeabi_dmul>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	4630      	mov	r0, r6
 800ba5e:	4639      	mov	r1, r7
 800ba60:	f7f4 fc32 	bl	80002c8 <__aeabi_dsub>
 800ba64:	460f      	mov	r7, r1
 800ba66:	4606      	mov	r6, r0
 800ba68:	f7f5 f896 	bl	8000b98 <__aeabi_d2iz>
 800ba6c:	9006      	str	r0, [sp, #24]
 800ba6e:	f7f4 fd79 	bl	8000564 <__aeabi_i2d>
 800ba72:	4602      	mov	r2, r0
 800ba74:	460b      	mov	r3, r1
 800ba76:	4630      	mov	r0, r6
 800ba78:	4639      	mov	r1, r7
 800ba7a:	f7f4 fc25 	bl	80002c8 <__aeabi_dsub>
 800ba7e:	f1ba 0f00 	cmp.w	sl, #0
 800ba82:	4606      	mov	r6, r0
 800ba84:	460f      	mov	r7, r1
 800ba86:	dd6c      	ble.n	800bb62 <__kernel_rem_pio2+0x242>
 800ba88:	1e62      	subs	r2, r4, #1
 800ba8a:	ab0e      	add	r3, sp, #56	; 0x38
 800ba8c:	f1ca 0118 	rsb	r1, sl, #24
 800ba90:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ba94:	9d06      	ldr	r5, [sp, #24]
 800ba96:	fa40 f301 	asr.w	r3, r0, r1
 800ba9a:	441d      	add	r5, r3
 800ba9c:	408b      	lsls	r3, r1
 800ba9e:	1ac0      	subs	r0, r0, r3
 800baa0:	ab0e      	add	r3, sp, #56	; 0x38
 800baa2:	9506      	str	r5, [sp, #24]
 800baa4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800baa8:	f1ca 0317 	rsb	r3, sl, #23
 800baac:	fa40 f303 	asr.w	r3, r0, r3
 800bab0:	9302      	str	r3, [sp, #8]
 800bab2:	9b02      	ldr	r3, [sp, #8]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	dd62      	ble.n	800bb7e <__kernel_rem_pio2+0x25e>
 800bab8:	9b06      	ldr	r3, [sp, #24]
 800baba:	2200      	movs	r2, #0
 800babc:	3301      	adds	r3, #1
 800babe:	9306      	str	r3, [sp, #24]
 800bac0:	4615      	mov	r5, r2
 800bac2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800bac6:	4294      	cmp	r4, r2
 800bac8:	f300 8095 	bgt.w	800bbf6 <__kernel_rem_pio2+0x2d6>
 800bacc:	f1ba 0f00 	cmp.w	sl, #0
 800bad0:	dd07      	ble.n	800bae2 <__kernel_rem_pio2+0x1c2>
 800bad2:	f1ba 0f01 	cmp.w	sl, #1
 800bad6:	f000 80a2 	beq.w	800bc1e <__kernel_rem_pio2+0x2fe>
 800bada:	f1ba 0f02 	cmp.w	sl, #2
 800bade:	f000 80c1 	beq.w	800bc64 <__kernel_rem_pio2+0x344>
 800bae2:	9b02      	ldr	r3, [sp, #8]
 800bae4:	2b02      	cmp	r3, #2
 800bae6:	d14a      	bne.n	800bb7e <__kernel_rem_pio2+0x25e>
 800bae8:	4632      	mov	r2, r6
 800baea:	463b      	mov	r3, r7
 800baec:	2000      	movs	r0, #0
 800baee:	4958      	ldr	r1, [pc, #352]	; (800bc50 <__kernel_rem_pio2+0x330>)
 800baf0:	f7f4 fbea 	bl	80002c8 <__aeabi_dsub>
 800baf4:	4606      	mov	r6, r0
 800baf6:	460f      	mov	r7, r1
 800baf8:	2d00      	cmp	r5, #0
 800bafa:	d040      	beq.n	800bb7e <__kernel_rem_pio2+0x25e>
 800bafc:	4650      	mov	r0, sl
 800bafe:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800bc40 <__kernel_rem_pio2+0x320>
 800bb02:	f7ff fa19 	bl	800af38 <scalbn>
 800bb06:	4630      	mov	r0, r6
 800bb08:	4639      	mov	r1, r7
 800bb0a:	ec53 2b10 	vmov	r2, r3, d0
 800bb0e:	f7f4 fbdb 	bl	80002c8 <__aeabi_dsub>
 800bb12:	4606      	mov	r6, r0
 800bb14:	460f      	mov	r7, r1
 800bb16:	e032      	b.n	800bb7e <__kernel_rem_pio2+0x25e>
 800bb18:	2200      	movs	r2, #0
 800bb1a:	4b4e      	ldr	r3, [pc, #312]	; (800bc54 <__kernel_rem_pio2+0x334>)
 800bb1c:	4640      	mov	r0, r8
 800bb1e:	4649      	mov	r1, r9
 800bb20:	f7f4 fd8a 	bl	8000638 <__aeabi_dmul>
 800bb24:	f7f5 f838 	bl	8000b98 <__aeabi_d2iz>
 800bb28:	f7f4 fd1c 	bl	8000564 <__aeabi_i2d>
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	4b4a      	ldr	r3, [pc, #296]	; (800bc58 <__kernel_rem_pio2+0x338>)
 800bb30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb34:	f7f4 fd80 	bl	8000638 <__aeabi_dmul>
 800bb38:	4602      	mov	r2, r0
 800bb3a:	460b      	mov	r3, r1
 800bb3c:	4640      	mov	r0, r8
 800bb3e:	4649      	mov	r1, r9
 800bb40:	f7f4 fbc2 	bl	80002c8 <__aeabi_dsub>
 800bb44:	f7f5 f828 	bl	8000b98 <__aeabi_d2iz>
 800bb48:	ab0e      	add	r3, sp, #56	; 0x38
 800bb4a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800bb4e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800bb52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb56:	f7f4 fbb9 	bl	80002cc <__adddf3>
 800bb5a:	3501      	adds	r5, #1
 800bb5c:	4680      	mov	r8, r0
 800bb5e:	4689      	mov	r9, r1
 800bb60:	e75e      	b.n	800ba20 <__kernel_rem_pio2+0x100>
 800bb62:	d105      	bne.n	800bb70 <__kernel_rem_pio2+0x250>
 800bb64:	1e63      	subs	r3, r4, #1
 800bb66:	aa0e      	add	r2, sp, #56	; 0x38
 800bb68:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bb6c:	15c3      	asrs	r3, r0, #23
 800bb6e:	e79f      	b.n	800bab0 <__kernel_rem_pio2+0x190>
 800bb70:	2200      	movs	r2, #0
 800bb72:	4b3a      	ldr	r3, [pc, #232]	; (800bc5c <__kernel_rem_pio2+0x33c>)
 800bb74:	f7f4 ffe6 	bl	8000b44 <__aeabi_dcmpge>
 800bb78:	2800      	cmp	r0, #0
 800bb7a:	d139      	bne.n	800bbf0 <__kernel_rem_pio2+0x2d0>
 800bb7c:	9002      	str	r0, [sp, #8]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	2300      	movs	r3, #0
 800bb82:	4630      	mov	r0, r6
 800bb84:	4639      	mov	r1, r7
 800bb86:	f7f4 ffbf 	bl	8000b08 <__aeabi_dcmpeq>
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	f000 80c7 	beq.w	800bd1e <__kernel_rem_pio2+0x3fe>
 800bb90:	1e65      	subs	r5, r4, #1
 800bb92:	462b      	mov	r3, r5
 800bb94:	2200      	movs	r2, #0
 800bb96:	9904      	ldr	r1, [sp, #16]
 800bb98:	428b      	cmp	r3, r1
 800bb9a:	da6a      	bge.n	800bc72 <__kernel_rem_pio2+0x352>
 800bb9c:	2a00      	cmp	r2, #0
 800bb9e:	f000 8088 	beq.w	800bcb2 <__kernel_rem_pio2+0x392>
 800bba2:	ab0e      	add	r3, sp, #56	; 0x38
 800bba4:	f1aa 0a18 	sub.w	sl, sl, #24
 800bba8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	f000 80b4 	beq.w	800bd1a <__kernel_rem_pio2+0x3fa>
 800bbb2:	4650      	mov	r0, sl
 800bbb4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800bc40 <__kernel_rem_pio2+0x320>
 800bbb8:	f7ff f9be 	bl	800af38 <scalbn>
 800bbbc:	00ec      	lsls	r4, r5, #3
 800bbbe:	ab72      	add	r3, sp, #456	; 0x1c8
 800bbc0:	191e      	adds	r6, r3, r4
 800bbc2:	ec59 8b10 	vmov	r8, r9, d0
 800bbc6:	f106 0a08 	add.w	sl, r6, #8
 800bbca:	462f      	mov	r7, r5
 800bbcc:	2f00      	cmp	r7, #0
 800bbce:	f280 80df 	bge.w	800bd90 <__kernel_rem_pio2+0x470>
 800bbd2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800bc38 <__kernel_rem_pio2+0x318>
 800bbd6:	f04f 0a00 	mov.w	sl, #0
 800bbda:	eba5 030a 	sub.w	r3, r5, sl
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	f2c0 810a 	blt.w	800bdf8 <__kernel_rem_pio2+0x4d8>
 800bbe4:	f8df b078 	ldr.w	fp, [pc, #120]	; 800bc60 <__kernel_rem_pio2+0x340>
 800bbe8:	ec59 8b18 	vmov	r8, r9, d8
 800bbec:	2700      	movs	r7, #0
 800bbee:	e0f5      	b.n	800bddc <__kernel_rem_pio2+0x4bc>
 800bbf0:	2302      	movs	r3, #2
 800bbf2:	9302      	str	r3, [sp, #8]
 800bbf4:	e760      	b.n	800bab8 <__kernel_rem_pio2+0x198>
 800bbf6:	ab0e      	add	r3, sp, #56	; 0x38
 800bbf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbfc:	b94d      	cbnz	r5, 800bc12 <__kernel_rem_pio2+0x2f2>
 800bbfe:	b12b      	cbz	r3, 800bc0c <__kernel_rem_pio2+0x2ec>
 800bc00:	a80e      	add	r0, sp, #56	; 0x38
 800bc02:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800bc06:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	3201      	adds	r2, #1
 800bc0e:	461d      	mov	r5, r3
 800bc10:	e759      	b.n	800bac6 <__kernel_rem_pio2+0x1a6>
 800bc12:	a80e      	add	r0, sp, #56	; 0x38
 800bc14:	1acb      	subs	r3, r1, r3
 800bc16:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800bc1a:	462b      	mov	r3, r5
 800bc1c:	e7f6      	b.n	800bc0c <__kernel_rem_pio2+0x2ec>
 800bc1e:	1e62      	subs	r2, r4, #1
 800bc20:	ab0e      	add	r3, sp, #56	; 0x38
 800bc22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc26:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bc2a:	a90e      	add	r1, sp, #56	; 0x38
 800bc2c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bc30:	e757      	b.n	800bae2 <__kernel_rem_pio2+0x1c2>
 800bc32:	bf00      	nop
 800bc34:	f3af 8000 	nop.w
	...
 800bc44:	3ff00000 	.word	0x3ff00000
 800bc48:	0800e758 	.word	0x0800e758
 800bc4c:	40200000 	.word	0x40200000
 800bc50:	3ff00000 	.word	0x3ff00000
 800bc54:	3e700000 	.word	0x3e700000
 800bc58:	41700000 	.word	0x41700000
 800bc5c:	3fe00000 	.word	0x3fe00000
 800bc60:	0800e718 	.word	0x0800e718
 800bc64:	1e62      	subs	r2, r4, #1
 800bc66:	ab0e      	add	r3, sp, #56	; 0x38
 800bc68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc6c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bc70:	e7db      	b.n	800bc2a <__kernel_rem_pio2+0x30a>
 800bc72:	a90e      	add	r1, sp, #56	; 0x38
 800bc74:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bc78:	3b01      	subs	r3, #1
 800bc7a:	430a      	orrs	r2, r1
 800bc7c:	e78b      	b.n	800bb96 <__kernel_rem_pio2+0x276>
 800bc7e:	3301      	adds	r3, #1
 800bc80:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800bc84:	2900      	cmp	r1, #0
 800bc86:	d0fa      	beq.n	800bc7e <__kernel_rem_pio2+0x35e>
 800bc88:	9a08      	ldr	r2, [sp, #32]
 800bc8a:	4422      	add	r2, r4
 800bc8c:	00d2      	lsls	r2, r2, #3
 800bc8e:	a922      	add	r1, sp, #136	; 0x88
 800bc90:	18e3      	adds	r3, r4, r3
 800bc92:	9206      	str	r2, [sp, #24]
 800bc94:	440a      	add	r2, r1
 800bc96:	9302      	str	r3, [sp, #8]
 800bc98:	f10b 0108 	add.w	r1, fp, #8
 800bc9c:	f102 0308 	add.w	r3, r2, #8
 800bca0:	1c66      	adds	r6, r4, #1
 800bca2:	910a      	str	r1, [sp, #40]	; 0x28
 800bca4:	2500      	movs	r5, #0
 800bca6:	930d      	str	r3, [sp, #52]	; 0x34
 800bca8:	9b02      	ldr	r3, [sp, #8]
 800bcaa:	42b3      	cmp	r3, r6
 800bcac:	da04      	bge.n	800bcb8 <__kernel_rem_pio2+0x398>
 800bcae:	461c      	mov	r4, r3
 800bcb0:	e6a6      	b.n	800ba00 <__kernel_rem_pio2+0xe0>
 800bcb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	e7e3      	b.n	800bc80 <__kernel_rem_pio2+0x360>
 800bcb8:	9b06      	ldr	r3, [sp, #24]
 800bcba:	18ef      	adds	r7, r5, r3
 800bcbc:	ab22      	add	r3, sp, #136	; 0x88
 800bcbe:	441f      	add	r7, r3
 800bcc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcc2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bcc6:	f7f4 fc4d 	bl	8000564 <__aeabi_i2d>
 800bcca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bccc:	461c      	mov	r4, r3
 800bcce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcd0:	e9c7 0100 	strd	r0, r1, [r7]
 800bcd4:	eb03 0b05 	add.w	fp, r3, r5
 800bcd8:	2700      	movs	r7, #0
 800bcda:	f04f 0800 	mov.w	r8, #0
 800bcde:	f04f 0900 	mov.w	r9, #0
 800bce2:	9b07      	ldr	r3, [sp, #28]
 800bce4:	429f      	cmp	r7, r3
 800bce6:	dd08      	ble.n	800bcfa <__kernel_rem_pio2+0x3da>
 800bce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcea:	aa72      	add	r2, sp, #456	; 0x1c8
 800bcec:	18eb      	adds	r3, r5, r3
 800bcee:	4413      	add	r3, r2
 800bcf0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800bcf4:	3601      	adds	r6, #1
 800bcf6:	3508      	adds	r5, #8
 800bcf8:	e7d6      	b.n	800bca8 <__kernel_rem_pio2+0x388>
 800bcfa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800bcfe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800bd02:	f7f4 fc99 	bl	8000638 <__aeabi_dmul>
 800bd06:	4602      	mov	r2, r0
 800bd08:	460b      	mov	r3, r1
 800bd0a:	4640      	mov	r0, r8
 800bd0c:	4649      	mov	r1, r9
 800bd0e:	f7f4 fadd 	bl	80002cc <__adddf3>
 800bd12:	3701      	adds	r7, #1
 800bd14:	4680      	mov	r8, r0
 800bd16:	4689      	mov	r9, r1
 800bd18:	e7e3      	b.n	800bce2 <__kernel_rem_pio2+0x3c2>
 800bd1a:	3d01      	subs	r5, #1
 800bd1c:	e741      	b.n	800bba2 <__kernel_rem_pio2+0x282>
 800bd1e:	f1ca 0000 	rsb	r0, sl, #0
 800bd22:	ec47 6b10 	vmov	d0, r6, r7
 800bd26:	f7ff f907 	bl	800af38 <scalbn>
 800bd2a:	ec57 6b10 	vmov	r6, r7, d0
 800bd2e:	2200      	movs	r2, #0
 800bd30:	4b99      	ldr	r3, [pc, #612]	; (800bf98 <__kernel_rem_pio2+0x678>)
 800bd32:	ee10 0a10 	vmov	r0, s0
 800bd36:	4639      	mov	r1, r7
 800bd38:	f7f4 ff04 	bl	8000b44 <__aeabi_dcmpge>
 800bd3c:	b1f8      	cbz	r0, 800bd7e <__kernel_rem_pio2+0x45e>
 800bd3e:	2200      	movs	r2, #0
 800bd40:	4b96      	ldr	r3, [pc, #600]	; (800bf9c <__kernel_rem_pio2+0x67c>)
 800bd42:	4630      	mov	r0, r6
 800bd44:	4639      	mov	r1, r7
 800bd46:	f7f4 fc77 	bl	8000638 <__aeabi_dmul>
 800bd4a:	f7f4 ff25 	bl	8000b98 <__aeabi_d2iz>
 800bd4e:	4680      	mov	r8, r0
 800bd50:	f7f4 fc08 	bl	8000564 <__aeabi_i2d>
 800bd54:	2200      	movs	r2, #0
 800bd56:	4b90      	ldr	r3, [pc, #576]	; (800bf98 <__kernel_rem_pio2+0x678>)
 800bd58:	f7f4 fc6e 	bl	8000638 <__aeabi_dmul>
 800bd5c:	460b      	mov	r3, r1
 800bd5e:	4602      	mov	r2, r0
 800bd60:	4639      	mov	r1, r7
 800bd62:	4630      	mov	r0, r6
 800bd64:	f7f4 fab0 	bl	80002c8 <__aeabi_dsub>
 800bd68:	f7f4 ff16 	bl	8000b98 <__aeabi_d2iz>
 800bd6c:	1c65      	adds	r5, r4, #1
 800bd6e:	ab0e      	add	r3, sp, #56	; 0x38
 800bd70:	f10a 0a18 	add.w	sl, sl, #24
 800bd74:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bd78:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800bd7c:	e719      	b.n	800bbb2 <__kernel_rem_pio2+0x292>
 800bd7e:	4630      	mov	r0, r6
 800bd80:	4639      	mov	r1, r7
 800bd82:	f7f4 ff09 	bl	8000b98 <__aeabi_d2iz>
 800bd86:	ab0e      	add	r3, sp, #56	; 0x38
 800bd88:	4625      	mov	r5, r4
 800bd8a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bd8e:	e710      	b.n	800bbb2 <__kernel_rem_pio2+0x292>
 800bd90:	ab0e      	add	r3, sp, #56	; 0x38
 800bd92:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800bd96:	f7f4 fbe5 	bl	8000564 <__aeabi_i2d>
 800bd9a:	4642      	mov	r2, r8
 800bd9c:	464b      	mov	r3, r9
 800bd9e:	f7f4 fc4b 	bl	8000638 <__aeabi_dmul>
 800bda2:	2200      	movs	r2, #0
 800bda4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800bda8:	4b7c      	ldr	r3, [pc, #496]	; (800bf9c <__kernel_rem_pio2+0x67c>)
 800bdaa:	4640      	mov	r0, r8
 800bdac:	4649      	mov	r1, r9
 800bdae:	f7f4 fc43 	bl	8000638 <__aeabi_dmul>
 800bdb2:	3f01      	subs	r7, #1
 800bdb4:	4680      	mov	r8, r0
 800bdb6:	4689      	mov	r9, r1
 800bdb8:	e708      	b.n	800bbcc <__kernel_rem_pio2+0x2ac>
 800bdba:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800bdbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800bdc6:	f7f4 fc37 	bl	8000638 <__aeabi_dmul>
 800bdca:	4602      	mov	r2, r0
 800bdcc:	460b      	mov	r3, r1
 800bdce:	4640      	mov	r0, r8
 800bdd0:	4649      	mov	r1, r9
 800bdd2:	f7f4 fa7b 	bl	80002cc <__adddf3>
 800bdd6:	3701      	adds	r7, #1
 800bdd8:	4680      	mov	r8, r0
 800bdda:	4689      	mov	r9, r1
 800bddc:	9b04      	ldr	r3, [sp, #16]
 800bdde:	429f      	cmp	r7, r3
 800bde0:	dc01      	bgt.n	800bde6 <__kernel_rem_pio2+0x4c6>
 800bde2:	45ba      	cmp	sl, r7
 800bde4:	dae9      	bge.n	800bdba <__kernel_rem_pio2+0x49a>
 800bde6:	ab4a      	add	r3, sp, #296	; 0x128
 800bde8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bdec:	e9c3 8900 	strd	r8, r9, [r3]
 800bdf0:	f10a 0a01 	add.w	sl, sl, #1
 800bdf4:	3e08      	subs	r6, #8
 800bdf6:	e6f0      	b.n	800bbda <__kernel_rem_pio2+0x2ba>
 800bdf8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800bdfa:	2b03      	cmp	r3, #3
 800bdfc:	d85b      	bhi.n	800beb6 <__kernel_rem_pio2+0x596>
 800bdfe:	e8df f003 	tbb	[pc, r3]
 800be02:	264a      	.short	0x264a
 800be04:	0226      	.short	0x0226
 800be06:	ab9a      	add	r3, sp, #616	; 0x268
 800be08:	441c      	add	r4, r3
 800be0a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800be0e:	46a2      	mov	sl, r4
 800be10:	46ab      	mov	fp, r5
 800be12:	f1bb 0f00 	cmp.w	fp, #0
 800be16:	dc6c      	bgt.n	800bef2 <__kernel_rem_pio2+0x5d2>
 800be18:	46a2      	mov	sl, r4
 800be1a:	46ab      	mov	fp, r5
 800be1c:	f1bb 0f01 	cmp.w	fp, #1
 800be20:	f300 8086 	bgt.w	800bf30 <__kernel_rem_pio2+0x610>
 800be24:	2000      	movs	r0, #0
 800be26:	2100      	movs	r1, #0
 800be28:	2d01      	cmp	r5, #1
 800be2a:	f300 80a0 	bgt.w	800bf6e <__kernel_rem_pio2+0x64e>
 800be2e:	9b02      	ldr	r3, [sp, #8]
 800be30:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800be34:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800be38:	2b00      	cmp	r3, #0
 800be3a:	f040 809e 	bne.w	800bf7a <__kernel_rem_pio2+0x65a>
 800be3e:	9b01      	ldr	r3, [sp, #4]
 800be40:	e9c3 7800 	strd	r7, r8, [r3]
 800be44:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800be48:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800be4c:	e033      	b.n	800beb6 <__kernel_rem_pio2+0x596>
 800be4e:	3408      	adds	r4, #8
 800be50:	ab4a      	add	r3, sp, #296	; 0x128
 800be52:	441c      	add	r4, r3
 800be54:	462e      	mov	r6, r5
 800be56:	2000      	movs	r0, #0
 800be58:	2100      	movs	r1, #0
 800be5a:	2e00      	cmp	r6, #0
 800be5c:	da3a      	bge.n	800bed4 <__kernel_rem_pio2+0x5b4>
 800be5e:	9b02      	ldr	r3, [sp, #8]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d03d      	beq.n	800bee0 <__kernel_rem_pio2+0x5c0>
 800be64:	4602      	mov	r2, r0
 800be66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800be6a:	9c01      	ldr	r4, [sp, #4]
 800be6c:	e9c4 2300 	strd	r2, r3, [r4]
 800be70:	4602      	mov	r2, r0
 800be72:	460b      	mov	r3, r1
 800be74:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800be78:	f7f4 fa26 	bl	80002c8 <__aeabi_dsub>
 800be7c:	ae4c      	add	r6, sp, #304	; 0x130
 800be7e:	2401      	movs	r4, #1
 800be80:	42a5      	cmp	r5, r4
 800be82:	da30      	bge.n	800bee6 <__kernel_rem_pio2+0x5c6>
 800be84:	9b02      	ldr	r3, [sp, #8]
 800be86:	b113      	cbz	r3, 800be8e <__kernel_rem_pio2+0x56e>
 800be88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800be8c:	4619      	mov	r1, r3
 800be8e:	9b01      	ldr	r3, [sp, #4]
 800be90:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800be94:	e00f      	b.n	800beb6 <__kernel_rem_pio2+0x596>
 800be96:	ab9a      	add	r3, sp, #616	; 0x268
 800be98:	441c      	add	r4, r3
 800be9a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800be9e:	2000      	movs	r0, #0
 800bea0:	2100      	movs	r1, #0
 800bea2:	2d00      	cmp	r5, #0
 800bea4:	da10      	bge.n	800bec8 <__kernel_rem_pio2+0x5a8>
 800bea6:	9b02      	ldr	r3, [sp, #8]
 800bea8:	b113      	cbz	r3, 800beb0 <__kernel_rem_pio2+0x590>
 800beaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800beae:	4619      	mov	r1, r3
 800beb0:	9b01      	ldr	r3, [sp, #4]
 800beb2:	e9c3 0100 	strd	r0, r1, [r3]
 800beb6:	9b06      	ldr	r3, [sp, #24]
 800beb8:	f003 0007 	and.w	r0, r3, #7
 800bebc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800bec0:	ecbd 8b02 	vpop	{d8}
 800bec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bec8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800becc:	f7f4 f9fe 	bl	80002cc <__adddf3>
 800bed0:	3d01      	subs	r5, #1
 800bed2:	e7e6      	b.n	800bea2 <__kernel_rem_pio2+0x582>
 800bed4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bed8:	f7f4 f9f8 	bl	80002cc <__adddf3>
 800bedc:	3e01      	subs	r6, #1
 800bede:	e7bc      	b.n	800be5a <__kernel_rem_pio2+0x53a>
 800bee0:	4602      	mov	r2, r0
 800bee2:	460b      	mov	r3, r1
 800bee4:	e7c1      	b.n	800be6a <__kernel_rem_pio2+0x54a>
 800bee6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800beea:	f7f4 f9ef 	bl	80002cc <__adddf3>
 800beee:	3401      	adds	r4, #1
 800bef0:	e7c6      	b.n	800be80 <__kernel_rem_pio2+0x560>
 800bef2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800bef6:	ed3a 7b02 	vldmdb	sl!, {d7}
 800befa:	4640      	mov	r0, r8
 800befc:	ec53 2b17 	vmov	r2, r3, d7
 800bf00:	4649      	mov	r1, r9
 800bf02:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bf06:	f7f4 f9e1 	bl	80002cc <__adddf3>
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	4606      	mov	r6, r0
 800bf10:	460f      	mov	r7, r1
 800bf12:	4640      	mov	r0, r8
 800bf14:	4649      	mov	r1, r9
 800bf16:	f7f4 f9d7 	bl	80002c8 <__aeabi_dsub>
 800bf1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf1e:	f7f4 f9d5 	bl	80002cc <__adddf3>
 800bf22:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800bf26:	e9ca 0100 	strd	r0, r1, [sl]
 800bf2a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800bf2e:	e770      	b.n	800be12 <__kernel_rem_pio2+0x4f2>
 800bf30:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800bf34:	ed3a 7b02 	vldmdb	sl!, {d7}
 800bf38:	4630      	mov	r0, r6
 800bf3a:	ec53 2b17 	vmov	r2, r3, d7
 800bf3e:	4639      	mov	r1, r7
 800bf40:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bf44:	f7f4 f9c2 	bl	80002cc <__adddf3>
 800bf48:	4602      	mov	r2, r0
 800bf4a:	460b      	mov	r3, r1
 800bf4c:	4680      	mov	r8, r0
 800bf4e:	4689      	mov	r9, r1
 800bf50:	4630      	mov	r0, r6
 800bf52:	4639      	mov	r1, r7
 800bf54:	f7f4 f9b8 	bl	80002c8 <__aeabi_dsub>
 800bf58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf5c:	f7f4 f9b6 	bl	80002cc <__adddf3>
 800bf60:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800bf64:	e9ca 0100 	strd	r0, r1, [sl]
 800bf68:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800bf6c:	e756      	b.n	800be1c <__kernel_rem_pio2+0x4fc>
 800bf6e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bf72:	f7f4 f9ab 	bl	80002cc <__adddf3>
 800bf76:	3d01      	subs	r5, #1
 800bf78:	e756      	b.n	800be28 <__kernel_rem_pio2+0x508>
 800bf7a:	9b01      	ldr	r3, [sp, #4]
 800bf7c:	9a01      	ldr	r2, [sp, #4]
 800bf7e:	601f      	str	r7, [r3, #0]
 800bf80:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800bf84:	605c      	str	r4, [r3, #4]
 800bf86:	609d      	str	r5, [r3, #8]
 800bf88:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bf8c:	60d3      	str	r3, [r2, #12]
 800bf8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf92:	6110      	str	r0, [r2, #16]
 800bf94:	6153      	str	r3, [r2, #20]
 800bf96:	e78e      	b.n	800beb6 <__kernel_rem_pio2+0x596>
 800bf98:	41700000 	.word	0x41700000
 800bf9c:	3e700000 	.word	0x3e700000

0800bfa0 <__kernel_sin>:
 800bfa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfa4:	ec55 4b10 	vmov	r4, r5, d0
 800bfa8:	b085      	sub	sp, #20
 800bfaa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bfae:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800bfb2:	ed8d 1b00 	vstr	d1, [sp]
 800bfb6:	9002      	str	r0, [sp, #8]
 800bfb8:	da06      	bge.n	800bfc8 <__kernel_sin+0x28>
 800bfba:	ee10 0a10 	vmov	r0, s0
 800bfbe:	4629      	mov	r1, r5
 800bfc0:	f7f4 fdea 	bl	8000b98 <__aeabi_d2iz>
 800bfc4:	2800      	cmp	r0, #0
 800bfc6:	d051      	beq.n	800c06c <__kernel_sin+0xcc>
 800bfc8:	4622      	mov	r2, r4
 800bfca:	462b      	mov	r3, r5
 800bfcc:	4620      	mov	r0, r4
 800bfce:	4629      	mov	r1, r5
 800bfd0:	f7f4 fb32 	bl	8000638 <__aeabi_dmul>
 800bfd4:	4682      	mov	sl, r0
 800bfd6:	468b      	mov	fp, r1
 800bfd8:	4602      	mov	r2, r0
 800bfda:	460b      	mov	r3, r1
 800bfdc:	4620      	mov	r0, r4
 800bfde:	4629      	mov	r1, r5
 800bfe0:	f7f4 fb2a 	bl	8000638 <__aeabi_dmul>
 800bfe4:	a341      	add	r3, pc, #260	; (adr r3, 800c0ec <__kernel_sin+0x14c>)
 800bfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfea:	4680      	mov	r8, r0
 800bfec:	4689      	mov	r9, r1
 800bfee:	4650      	mov	r0, sl
 800bff0:	4659      	mov	r1, fp
 800bff2:	f7f4 fb21 	bl	8000638 <__aeabi_dmul>
 800bff6:	a33f      	add	r3, pc, #252	; (adr r3, 800c0f4 <__kernel_sin+0x154>)
 800bff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffc:	f7f4 f964 	bl	80002c8 <__aeabi_dsub>
 800c000:	4652      	mov	r2, sl
 800c002:	465b      	mov	r3, fp
 800c004:	f7f4 fb18 	bl	8000638 <__aeabi_dmul>
 800c008:	a33c      	add	r3, pc, #240	; (adr r3, 800c0fc <__kernel_sin+0x15c>)
 800c00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00e:	f7f4 f95d 	bl	80002cc <__adddf3>
 800c012:	4652      	mov	r2, sl
 800c014:	465b      	mov	r3, fp
 800c016:	f7f4 fb0f 	bl	8000638 <__aeabi_dmul>
 800c01a:	a33a      	add	r3, pc, #232	; (adr r3, 800c104 <__kernel_sin+0x164>)
 800c01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c020:	f7f4 f952 	bl	80002c8 <__aeabi_dsub>
 800c024:	4652      	mov	r2, sl
 800c026:	465b      	mov	r3, fp
 800c028:	f7f4 fb06 	bl	8000638 <__aeabi_dmul>
 800c02c:	a337      	add	r3, pc, #220	; (adr r3, 800c10c <__kernel_sin+0x16c>)
 800c02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c032:	f7f4 f94b 	bl	80002cc <__adddf3>
 800c036:	9b02      	ldr	r3, [sp, #8]
 800c038:	4606      	mov	r6, r0
 800c03a:	460f      	mov	r7, r1
 800c03c:	b9db      	cbnz	r3, 800c076 <__kernel_sin+0xd6>
 800c03e:	4602      	mov	r2, r0
 800c040:	460b      	mov	r3, r1
 800c042:	4650      	mov	r0, sl
 800c044:	4659      	mov	r1, fp
 800c046:	f7f4 faf7 	bl	8000638 <__aeabi_dmul>
 800c04a:	a325      	add	r3, pc, #148	; (adr r3, 800c0e0 <__kernel_sin+0x140>)
 800c04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c050:	f7f4 f93a 	bl	80002c8 <__aeabi_dsub>
 800c054:	4642      	mov	r2, r8
 800c056:	464b      	mov	r3, r9
 800c058:	f7f4 faee 	bl	8000638 <__aeabi_dmul>
 800c05c:	4602      	mov	r2, r0
 800c05e:	460b      	mov	r3, r1
 800c060:	4620      	mov	r0, r4
 800c062:	4629      	mov	r1, r5
 800c064:	f7f4 f932 	bl	80002cc <__adddf3>
 800c068:	4604      	mov	r4, r0
 800c06a:	460d      	mov	r5, r1
 800c06c:	ec45 4b10 	vmov	d0, r4, r5
 800c070:	b005      	add	sp, #20
 800c072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c076:	2200      	movs	r2, #0
 800c078:	4b1b      	ldr	r3, [pc, #108]	; (800c0e8 <__kernel_sin+0x148>)
 800c07a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c07e:	f7f4 fadb 	bl	8000638 <__aeabi_dmul>
 800c082:	4632      	mov	r2, r6
 800c084:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c088:	463b      	mov	r3, r7
 800c08a:	4640      	mov	r0, r8
 800c08c:	4649      	mov	r1, r9
 800c08e:	f7f4 fad3 	bl	8000638 <__aeabi_dmul>
 800c092:	4602      	mov	r2, r0
 800c094:	460b      	mov	r3, r1
 800c096:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c09a:	f7f4 f915 	bl	80002c8 <__aeabi_dsub>
 800c09e:	4652      	mov	r2, sl
 800c0a0:	465b      	mov	r3, fp
 800c0a2:	f7f4 fac9 	bl	8000638 <__aeabi_dmul>
 800c0a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0aa:	f7f4 f90d 	bl	80002c8 <__aeabi_dsub>
 800c0ae:	a30c      	add	r3, pc, #48	; (adr r3, 800c0e0 <__kernel_sin+0x140>)
 800c0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b4:	4606      	mov	r6, r0
 800c0b6:	460f      	mov	r7, r1
 800c0b8:	4640      	mov	r0, r8
 800c0ba:	4649      	mov	r1, r9
 800c0bc:	f7f4 fabc 	bl	8000638 <__aeabi_dmul>
 800c0c0:	4602      	mov	r2, r0
 800c0c2:	460b      	mov	r3, r1
 800c0c4:	4630      	mov	r0, r6
 800c0c6:	4639      	mov	r1, r7
 800c0c8:	f7f4 f900 	bl	80002cc <__adddf3>
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	4629      	mov	r1, r5
 800c0d4:	f7f4 f8f8 	bl	80002c8 <__aeabi_dsub>
 800c0d8:	e7c6      	b.n	800c068 <__kernel_sin+0xc8>
 800c0da:	bf00      	nop
 800c0dc:	f3af 8000 	nop.w
 800c0e0:	55555549 	.word	0x55555549
 800c0e4:	3fc55555 	.word	0x3fc55555
 800c0e8:	3fe00000 	.word	0x3fe00000
 800c0ec:	5acfd57c 	.word	0x5acfd57c
 800c0f0:	3de5d93a 	.word	0x3de5d93a
 800c0f4:	8a2b9ceb 	.word	0x8a2b9ceb
 800c0f8:	3e5ae5e6 	.word	0x3e5ae5e6
 800c0fc:	57b1fe7d 	.word	0x57b1fe7d
 800c100:	3ec71de3 	.word	0x3ec71de3
 800c104:	19c161d5 	.word	0x19c161d5
 800c108:	3f2a01a0 	.word	0x3f2a01a0
 800c10c:	1110f8a6 	.word	0x1110f8a6
 800c110:	3f811111 	.word	0x3f811111

0800c114 <copysign>:
 800c114:	ec51 0b10 	vmov	r0, r1, d0
 800c118:	ee11 0a90 	vmov	r0, s3
 800c11c:	ee10 2a10 	vmov	r2, s0
 800c120:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c124:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800c128:	ea41 0300 	orr.w	r3, r1, r0
 800c12c:	ec43 2b10 	vmov	d0, r2, r3
 800c130:	4770      	bx	lr

0800c132 <matherr>:
 800c132:	2000      	movs	r0, #0
 800c134:	4770      	bx	lr

0800c136 <abort>:
 800c136:	b508      	push	{r3, lr}
 800c138:	2006      	movs	r0, #6
 800c13a:	f000 fda5 	bl	800cc88 <raise>
 800c13e:	2001      	movs	r0, #1
 800c140:	f7fc fdf7 	bl	8008d32 <_exit>

0800c144 <__errno>:
 800c144:	4b01      	ldr	r3, [pc, #4]	; (800c14c <__errno+0x8>)
 800c146:	6818      	ldr	r0, [r3, #0]
 800c148:	4770      	bx	lr
 800c14a:	bf00      	nop
 800c14c:	20000010 	.word	0x20000010

0800c150 <__libc_init_array>:
 800c150:	b570      	push	{r4, r5, r6, lr}
 800c152:	4e0d      	ldr	r6, [pc, #52]	; (800c188 <__libc_init_array+0x38>)
 800c154:	4c0d      	ldr	r4, [pc, #52]	; (800c18c <__libc_init_array+0x3c>)
 800c156:	1ba4      	subs	r4, r4, r6
 800c158:	10a4      	asrs	r4, r4, #2
 800c15a:	2500      	movs	r5, #0
 800c15c:	42a5      	cmp	r5, r4
 800c15e:	d109      	bne.n	800c174 <__libc_init_array+0x24>
 800c160:	4e0b      	ldr	r6, [pc, #44]	; (800c190 <__libc_init_array+0x40>)
 800c162:	4c0c      	ldr	r4, [pc, #48]	; (800c194 <__libc_init_array+0x44>)
 800c164:	f002 f8c6 	bl	800e2f4 <_init>
 800c168:	1ba4      	subs	r4, r4, r6
 800c16a:	10a4      	asrs	r4, r4, #2
 800c16c:	2500      	movs	r5, #0
 800c16e:	42a5      	cmp	r5, r4
 800c170:	d105      	bne.n	800c17e <__libc_init_array+0x2e>
 800c172:	bd70      	pop	{r4, r5, r6, pc}
 800c174:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c178:	4798      	blx	r3
 800c17a:	3501      	adds	r5, #1
 800c17c:	e7ee      	b.n	800c15c <__libc_init_array+0xc>
 800c17e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c182:	4798      	blx	r3
 800c184:	3501      	adds	r5, #1
 800c186:	e7f2      	b.n	800c16e <__libc_init_array+0x1e>
 800c188:	0800e9d0 	.word	0x0800e9d0
 800c18c:	0800e9d0 	.word	0x0800e9d0
 800c190:	0800e9d0 	.word	0x0800e9d0
 800c194:	0800e9d8 	.word	0x0800e9d8

0800c198 <malloc>:
 800c198:	4b02      	ldr	r3, [pc, #8]	; (800c1a4 <malloc+0xc>)
 800c19a:	4601      	mov	r1, r0
 800c19c:	6818      	ldr	r0, [r3, #0]
 800c19e:	f000 b885 	b.w	800c2ac <_malloc_r>
 800c1a2:	bf00      	nop
 800c1a4:	20000010 	.word	0x20000010

0800c1a8 <free>:
 800c1a8:	4b02      	ldr	r3, [pc, #8]	; (800c1b4 <free+0xc>)
 800c1aa:	4601      	mov	r1, r0
 800c1ac:	6818      	ldr	r0, [r3, #0]
 800c1ae:	f000 b82f 	b.w	800c210 <_free_r>
 800c1b2:	bf00      	nop
 800c1b4:	20000010 	.word	0x20000010

0800c1b8 <memcpy>:
 800c1b8:	b510      	push	{r4, lr}
 800c1ba:	1e43      	subs	r3, r0, #1
 800c1bc:	440a      	add	r2, r1
 800c1be:	4291      	cmp	r1, r2
 800c1c0:	d100      	bne.n	800c1c4 <memcpy+0xc>
 800c1c2:	bd10      	pop	{r4, pc}
 800c1c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c1cc:	e7f7      	b.n	800c1be <memcpy+0x6>

0800c1ce <memmove>:
 800c1ce:	4288      	cmp	r0, r1
 800c1d0:	b510      	push	{r4, lr}
 800c1d2:	eb01 0302 	add.w	r3, r1, r2
 800c1d6:	d807      	bhi.n	800c1e8 <memmove+0x1a>
 800c1d8:	1e42      	subs	r2, r0, #1
 800c1da:	4299      	cmp	r1, r3
 800c1dc:	d00a      	beq.n	800c1f4 <memmove+0x26>
 800c1de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1e2:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c1e6:	e7f8      	b.n	800c1da <memmove+0xc>
 800c1e8:	4283      	cmp	r3, r0
 800c1ea:	d9f5      	bls.n	800c1d8 <memmove+0xa>
 800c1ec:	1881      	adds	r1, r0, r2
 800c1ee:	1ad2      	subs	r2, r2, r3
 800c1f0:	42d3      	cmn	r3, r2
 800c1f2:	d100      	bne.n	800c1f6 <memmove+0x28>
 800c1f4:	bd10      	pop	{r4, pc}
 800c1f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c1fa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c1fe:	e7f7      	b.n	800c1f0 <memmove+0x22>

0800c200 <memset>:
 800c200:	4402      	add	r2, r0
 800c202:	4603      	mov	r3, r0
 800c204:	4293      	cmp	r3, r2
 800c206:	d100      	bne.n	800c20a <memset+0xa>
 800c208:	4770      	bx	lr
 800c20a:	f803 1b01 	strb.w	r1, [r3], #1
 800c20e:	e7f9      	b.n	800c204 <memset+0x4>

0800c210 <_free_r>:
 800c210:	b538      	push	{r3, r4, r5, lr}
 800c212:	4605      	mov	r5, r0
 800c214:	2900      	cmp	r1, #0
 800c216:	d045      	beq.n	800c2a4 <_free_r+0x94>
 800c218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c21c:	1f0c      	subs	r4, r1, #4
 800c21e:	2b00      	cmp	r3, #0
 800c220:	bfb8      	it	lt
 800c222:	18e4      	addlt	r4, r4, r3
 800c224:	f001 fbda 	bl	800d9dc <__malloc_lock>
 800c228:	4a1f      	ldr	r2, [pc, #124]	; (800c2a8 <_free_r+0x98>)
 800c22a:	6813      	ldr	r3, [r2, #0]
 800c22c:	4610      	mov	r0, r2
 800c22e:	b933      	cbnz	r3, 800c23e <_free_r+0x2e>
 800c230:	6063      	str	r3, [r4, #4]
 800c232:	6014      	str	r4, [r2, #0]
 800c234:	4628      	mov	r0, r5
 800c236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c23a:	f001 bbd0 	b.w	800d9de <__malloc_unlock>
 800c23e:	42a3      	cmp	r3, r4
 800c240:	d90c      	bls.n	800c25c <_free_r+0x4c>
 800c242:	6821      	ldr	r1, [r4, #0]
 800c244:	1862      	adds	r2, r4, r1
 800c246:	4293      	cmp	r3, r2
 800c248:	bf04      	itt	eq
 800c24a:	681a      	ldreq	r2, [r3, #0]
 800c24c:	685b      	ldreq	r3, [r3, #4]
 800c24e:	6063      	str	r3, [r4, #4]
 800c250:	bf04      	itt	eq
 800c252:	1852      	addeq	r2, r2, r1
 800c254:	6022      	streq	r2, [r4, #0]
 800c256:	6004      	str	r4, [r0, #0]
 800c258:	e7ec      	b.n	800c234 <_free_r+0x24>
 800c25a:	4613      	mov	r3, r2
 800c25c:	685a      	ldr	r2, [r3, #4]
 800c25e:	b10a      	cbz	r2, 800c264 <_free_r+0x54>
 800c260:	42a2      	cmp	r2, r4
 800c262:	d9fa      	bls.n	800c25a <_free_r+0x4a>
 800c264:	6819      	ldr	r1, [r3, #0]
 800c266:	1858      	adds	r0, r3, r1
 800c268:	42a0      	cmp	r0, r4
 800c26a:	d10b      	bne.n	800c284 <_free_r+0x74>
 800c26c:	6820      	ldr	r0, [r4, #0]
 800c26e:	4401      	add	r1, r0
 800c270:	1858      	adds	r0, r3, r1
 800c272:	4282      	cmp	r2, r0
 800c274:	6019      	str	r1, [r3, #0]
 800c276:	d1dd      	bne.n	800c234 <_free_r+0x24>
 800c278:	6810      	ldr	r0, [r2, #0]
 800c27a:	6852      	ldr	r2, [r2, #4]
 800c27c:	605a      	str	r2, [r3, #4]
 800c27e:	4401      	add	r1, r0
 800c280:	6019      	str	r1, [r3, #0]
 800c282:	e7d7      	b.n	800c234 <_free_r+0x24>
 800c284:	d902      	bls.n	800c28c <_free_r+0x7c>
 800c286:	230c      	movs	r3, #12
 800c288:	602b      	str	r3, [r5, #0]
 800c28a:	e7d3      	b.n	800c234 <_free_r+0x24>
 800c28c:	6820      	ldr	r0, [r4, #0]
 800c28e:	1821      	adds	r1, r4, r0
 800c290:	428a      	cmp	r2, r1
 800c292:	bf04      	itt	eq
 800c294:	6811      	ldreq	r1, [r2, #0]
 800c296:	6852      	ldreq	r2, [r2, #4]
 800c298:	6062      	str	r2, [r4, #4]
 800c29a:	bf04      	itt	eq
 800c29c:	1809      	addeq	r1, r1, r0
 800c29e:	6021      	streq	r1, [r4, #0]
 800c2a0:	605c      	str	r4, [r3, #4]
 800c2a2:	e7c7      	b.n	800c234 <_free_r+0x24>
 800c2a4:	bd38      	pop	{r3, r4, r5, pc}
 800c2a6:	bf00      	nop
 800c2a8:	200003f8 	.word	0x200003f8

0800c2ac <_malloc_r>:
 800c2ac:	b570      	push	{r4, r5, r6, lr}
 800c2ae:	1ccd      	adds	r5, r1, #3
 800c2b0:	f025 0503 	bic.w	r5, r5, #3
 800c2b4:	3508      	adds	r5, #8
 800c2b6:	2d0c      	cmp	r5, #12
 800c2b8:	bf38      	it	cc
 800c2ba:	250c      	movcc	r5, #12
 800c2bc:	2d00      	cmp	r5, #0
 800c2be:	4606      	mov	r6, r0
 800c2c0:	db01      	blt.n	800c2c6 <_malloc_r+0x1a>
 800c2c2:	42a9      	cmp	r1, r5
 800c2c4:	d903      	bls.n	800c2ce <_malloc_r+0x22>
 800c2c6:	230c      	movs	r3, #12
 800c2c8:	6033      	str	r3, [r6, #0]
 800c2ca:	2000      	movs	r0, #0
 800c2cc:	bd70      	pop	{r4, r5, r6, pc}
 800c2ce:	f001 fb85 	bl	800d9dc <__malloc_lock>
 800c2d2:	4a21      	ldr	r2, [pc, #132]	; (800c358 <_malloc_r+0xac>)
 800c2d4:	6814      	ldr	r4, [r2, #0]
 800c2d6:	4621      	mov	r1, r4
 800c2d8:	b991      	cbnz	r1, 800c300 <_malloc_r+0x54>
 800c2da:	4c20      	ldr	r4, [pc, #128]	; (800c35c <_malloc_r+0xb0>)
 800c2dc:	6823      	ldr	r3, [r4, #0]
 800c2de:	b91b      	cbnz	r3, 800c2e8 <_malloc_r+0x3c>
 800c2e0:	4630      	mov	r0, r6
 800c2e2:	f000 fc99 	bl	800cc18 <_sbrk_r>
 800c2e6:	6020      	str	r0, [r4, #0]
 800c2e8:	4629      	mov	r1, r5
 800c2ea:	4630      	mov	r0, r6
 800c2ec:	f000 fc94 	bl	800cc18 <_sbrk_r>
 800c2f0:	1c43      	adds	r3, r0, #1
 800c2f2:	d124      	bne.n	800c33e <_malloc_r+0x92>
 800c2f4:	230c      	movs	r3, #12
 800c2f6:	6033      	str	r3, [r6, #0]
 800c2f8:	4630      	mov	r0, r6
 800c2fa:	f001 fb70 	bl	800d9de <__malloc_unlock>
 800c2fe:	e7e4      	b.n	800c2ca <_malloc_r+0x1e>
 800c300:	680b      	ldr	r3, [r1, #0]
 800c302:	1b5b      	subs	r3, r3, r5
 800c304:	d418      	bmi.n	800c338 <_malloc_r+0x8c>
 800c306:	2b0b      	cmp	r3, #11
 800c308:	d90f      	bls.n	800c32a <_malloc_r+0x7e>
 800c30a:	600b      	str	r3, [r1, #0]
 800c30c:	50cd      	str	r5, [r1, r3]
 800c30e:	18cc      	adds	r4, r1, r3
 800c310:	4630      	mov	r0, r6
 800c312:	f001 fb64 	bl	800d9de <__malloc_unlock>
 800c316:	f104 000b 	add.w	r0, r4, #11
 800c31a:	1d23      	adds	r3, r4, #4
 800c31c:	f020 0007 	bic.w	r0, r0, #7
 800c320:	1ac3      	subs	r3, r0, r3
 800c322:	d0d3      	beq.n	800c2cc <_malloc_r+0x20>
 800c324:	425a      	negs	r2, r3
 800c326:	50e2      	str	r2, [r4, r3]
 800c328:	e7d0      	b.n	800c2cc <_malloc_r+0x20>
 800c32a:	428c      	cmp	r4, r1
 800c32c:	684b      	ldr	r3, [r1, #4]
 800c32e:	bf16      	itet	ne
 800c330:	6063      	strne	r3, [r4, #4]
 800c332:	6013      	streq	r3, [r2, #0]
 800c334:	460c      	movne	r4, r1
 800c336:	e7eb      	b.n	800c310 <_malloc_r+0x64>
 800c338:	460c      	mov	r4, r1
 800c33a:	6849      	ldr	r1, [r1, #4]
 800c33c:	e7cc      	b.n	800c2d8 <_malloc_r+0x2c>
 800c33e:	1cc4      	adds	r4, r0, #3
 800c340:	f024 0403 	bic.w	r4, r4, #3
 800c344:	42a0      	cmp	r0, r4
 800c346:	d005      	beq.n	800c354 <_malloc_r+0xa8>
 800c348:	1a21      	subs	r1, r4, r0
 800c34a:	4630      	mov	r0, r6
 800c34c:	f000 fc64 	bl	800cc18 <_sbrk_r>
 800c350:	3001      	adds	r0, #1
 800c352:	d0cf      	beq.n	800c2f4 <_malloc_r+0x48>
 800c354:	6025      	str	r5, [r4, #0]
 800c356:	e7db      	b.n	800c310 <_malloc_r+0x64>
 800c358:	200003f8 	.word	0x200003f8
 800c35c:	200003fc 	.word	0x200003fc

0800c360 <__cvt>:
 800c360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c364:	ec55 4b10 	vmov	r4, r5, d0
 800c368:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c36a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c36e:	2d00      	cmp	r5, #0
 800c370:	460e      	mov	r6, r1
 800c372:	4691      	mov	r9, r2
 800c374:	4619      	mov	r1, r3
 800c376:	bfb8      	it	lt
 800c378:	4622      	movlt	r2, r4
 800c37a:	462b      	mov	r3, r5
 800c37c:	f027 0720 	bic.w	r7, r7, #32
 800c380:	bfbb      	ittet	lt
 800c382:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c386:	461d      	movlt	r5, r3
 800c388:	2300      	movge	r3, #0
 800c38a:	232d      	movlt	r3, #45	; 0x2d
 800c38c:	bfb8      	it	lt
 800c38e:	4614      	movlt	r4, r2
 800c390:	2f46      	cmp	r7, #70	; 0x46
 800c392:	700b      	strb	r3, [r1, #0]
 800c394:	d004      	beq.n	800c3a0 <__cvt+0x40>
 800c396:	2f45      	cmp	r7, #69	; 0x45
 800c398:	d100      	bne.n	800c39c <__cvt+0x3c>
 800c39a:	3601      	adds	r6, #1
 800c39c:	2102      	movs	r1, #2
 800c39e:	e000      	b.n	800c3a2 <__cvt+0x42>
 800c3a0:	2103      	movs	r1, #3
 800c3a2:	ab03      	add	r3, sp, #12
 800c3a4:	9301      	str	r3, [sp, #4]
 800c3a6:	ab02      	add	r3, sp, #8
 800c3a8:	9300      	str	r3, [sp, #0]
 800c3aa:	4632      	mov	r2, r6
 800c3ac:	4653      	mov	r3, sl
 800c3ae:	ec45 4b10 	vmov	d0, r4, r5
 800c3b2:	f000 fd4d 	bl	800ce50 <_dtoa_r>
 800c3b6:	2f47      	cmp	r7, #71	; 0x47
 800c3b8:	4680      	mov	r8, r0
 800c3ba:	d102      	bne.n	800c3c2 <__cvt+0x62>
 800c3bc:	f019 0f01 	tst.w	r9, #1
 800c3c0:	d026      	beq.n	800c410 <__cvt+0xb0>
 800c3c2:	2f46      	cmp	r7, #70	; 0x46
 800c3c4:	eb08 0906 	add.w	r9, r8, r6
 800c3c8:	d111      	bne.n	800c3ee <__cvt+0x8e>
 800c3ca:	f898 3000 	ldrb.w	r3, [r8]
 800c3ce:	2b30      	cmp	r3, #48	; 0x30
 800c3d0:	d10a      	bne.n	800c3e8 <__cvt+0x88>
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	4620      	mov	r0, r4
 800c3d8:	4629      	mov	r1, r5
 800c3da:	f7f4 fb95 	bl	8000b08 <__aeabi_dcmpeq>
 800c3de:	b918      	cbnz	r0, 800c3e8 <__cvt+0x88>
 800c3e0:	f1c6 0601 	rsb	r6, r6, #1
 800c3e4:	f8ca 6000 	str.w	r6, [sl]
 800c3e8:	f8da 3000 	ldr.w	r3, [sl]
 800c3ec:	4499      	add	r9, r3
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	4620      	mov	r0, r4
 800c3f4:	4629      	mov	r1, r5
 800c3f6:	f7f4 fb87 	bl	8000b08 <__aeabi_dcmpeq>
 800c3fa:	b938      	cbnz	r0, 800c40c <__cvt+0xac>
 800c3fc:	2230      	movs	r2, #48	; 0x30
 800c3fe:	9b03      	ldr	r3, [sp, #12]
 800c400:	454b      	cmp	r3, r9
 800c402:	d205      	bcs.n	800c410 <__cvt+0xb0>
 800c404:	1c59      	adds	r1, r3, #1
 800c406:	9103      	str	r1, [sp, #12]
 800c408:	701a      	strb	r2, [r3, #0]
 800c40a:	e7f8      	b.n	800c3fe <__cvt+0x9e>
 800c40c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c410:	9b03      	ldr	r3, [sp, #12]
 800c412:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c414:	eba3 0308 	sub.w	r3, r3, r8
 800c418:	4640      	mov	r0, r8
 800c41a:	6013      	str	r3, [r2, #0]
 800c41c:	b004      	add	sp, #16
 800c41e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c422 <__exponent>:
 800c422:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c424:	2900      	cmp	r1, #0
 800c426:	4604      	mov	r4, r0
 800c428:	bfba      	itte	lt
 800c42a:	4249      	neglt	r1, r1
 800c42c:	232d      	movlt	r3, #45	; 0x2d
 800c42e:	232b      	movge	r3, #43	; 0x2b
 800c430:	2909      	cmp	r1, #9
 800c432:	f804 2b02 	strb.w	r2, [r4], #2
 800c436:	7043      	strb	r3, [r0, #1]
 800c438:	dd20      	ble.n	800c47c <__exponent+0x5a>
 800c43a:	f10d 0307 	add.w	r3, sp, #7
 800c43e:	461f      	mov	r7, r3
 800c440:	260a      	movs	r6, #10
 800c442:	fb91 f5f6 	sdiv	r5, r1, r6
 800c446:	fb06 1115 	mls	r1, r6, r5, r1
 800c44a:	3130      	adds	r1, #48	; 0x30
 800c44c:	2d09      	cmp	r5, #9
 800c44e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c452:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800c456:	4629      	mov	r1, r5
 800c458:	dc09      	bgt.n	800c46e <__exponent+0x4c>
 800c45a:	3130      	adds	r1, #48	; 0x30
 800c45c:	3b02      	subs	r3, #2
 800c45e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c462:	42bb      	cmp	r3, r7
 800c464:	4622      	mov	r2, r4
 800c466:	d304      	bcc.n	800c472 <__exponent+0x50>
 800c468:	1a10      	subs	r0, r2, r0
 800c46a:	b003      	add	sp, #12
 800c46c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c46e:	4613      	mov	r3, r2
 800c470:	e7e7      	b.n	800c442 <__exponent+0x20>
 800c472:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c476:	f804 2b01 	strb.w	r2, [r4], #1
 800c47a:	e7f2      	b.n	800c462 <__exponent+0x40>
 800c47c:	2330      	movs	r3, #48	; 0x30
 800c47e:	4419      	add	r1, r3
 800c480:	7083      	strb	r3, [r0, #2]
 800c482:	1d02      	adds	r2, r0, #4
 800c484:	70c1      	strb	r1, [r0, #3]
 800c486:	e7ef      	b.n	800c468 <__exponent+0x46>

0800c488 <_printf_float>:
 800c488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c48c:	b08d      	sub	sp, #52	; 0x34
 800c48e:	460c      	mov	r4, r1
 800c490:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c494:	4616      	mov	r6, r2
 800c496:	461f      	mov	r7, r3
 800c498:	4605      	mov	r5, r0
 800c49a:	f001 fa91 	bl	800d9c0 <_localeconv_r>
 800c49e:	6803      	ldr	r3, [r0, #0]
 800c4a0:	9304      	str	r3, [sp, #16]
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f7f3 ff04 	bl	80002b0 <strlen>
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	930a      	str	r3, [sp, #40]	; 0x28
 800c4ac:	f8d8 3000 	ldr.w	r3, [r8]
 800c4b0:	9005      	str	r0, [sp, #20]
 800c4b2:	3307      	adds	r3, #7
 800c4b4:	f023 0307 	bic.w	r3, r3, #7
 800c4b8:	f103 0208 	add.w	r2, r3, #8
 800c4bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c4c0:	f8d4 b000 	ldr.w	fp, [r4]
 800c4c4:	f8c8 2000 	str.w	r2, [r8]
 800c4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4cc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c4d0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c4d4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c4d8:	9307      	str	r3, [sp, #28]
 800c4da:	f8cd 8018 	str.w	r8, [sp, #24]
 800c4de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c4e2:	4ba7      	ldr	r3, [pc, #668]	; (800c780 <_printf_float+0x2f8>)
 800c4e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c4e8:	f7f4 fb40 	bl	8000b6c <__aeabi_dcmpun>
 800c4ec:	bb70      	cbnz	r0, 800c54c <_printf_float+0xc4>
 800c4ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c4f2:	4ba3      	ldr	r3, [pc, #652]	; (800c780 <_printf_float+0x2f8>)
 800c4f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c4f8:	f7f4 fb1a 	bl	8000b30 <__aeabi_dcmple>
 800c4fc:	bb30      	cbnz	r0, 800c54c <_printf_float+0xc4>
 800c4fe:	2200      	movs	r2, #0
 800c500:	2300      	movs	r3, #0
 800c502:	4640      	mov	r0, r8
 800c504:	4649      	mov	r1, r9
 800c506:	f7f4 fb09 	bl	8000b1c <__aeabi_dcmplt>
 800c50a:	b110      	cbz	r0, 800c512 <_printf_float+0x8a>
 800c50c:	232d      	movs	r3, #45	; 0x2d
 800c50e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c512:	4a9c      	ldr	r2, [pc, #624]	; (800c784 <_printf_float+0x2fc>)
 800c514:	4b9c      	ldr	r3, [pc, #624]	; (800c788 <_printf_float+0x300>)
 800c516:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c51a:	bf8c      	ite	hi
 800c51c:	4690      	movhi	r8, r2
 800c51e:	4698      	movls	r8, r3
 800c520:	2303      	movs	r3, #3
 800c522:	f02b 0204 	bic.w	r2, fp, #4
 800c526:	6123      	str	r3, [r4, #16]
 800c528:	6022      	str	r2, [r4, #0]
 800c52a:	f04f 0900 	mov.w	r9, #0
 800c52e:	9700      	str	r7, [sp, #0]
 800c530:	4633      	mov	r3, r6
 800c532:	aa0b      	add	r2, sp, #44	; 0x2c
 800c534:	4621      	mov	r1, r4
 800c536:	4628      	mov	r0, r5
 800c538:	f000 f9e6 	bl	800c908 <_printf_common>
 800c53c:	3001      	adds	r0, #1
 800c53e:	f040 808d 	bne.w	800c65c <_printf_float+0x1d4>
 800c542:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c546:	b00d      	add	sp, #52	; 0x34
 800c548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c54c:	4642      	mov	r2, r8
 800c54e:	464b      	mov	r3, r9
 800c550:	4640      	mov	r0, r8
 800c552:	4649      	mov	r1, r9
 800c554:	f7f4 fb0a 	bl	8000b6c <__aeabi_dcmpun>
 800c558:	b110      	cbz	r0, 800c560 <_printf_float+0xd8>
 800c55a:	4a8c      	ldr	r2, [pc, #560]	; (800c78c <_printf_float+0x304>)
 800c55c:	4b8c      	ldr	r3, [pc, #560]	; (800c790 <_printf_float+0x308>)
 800c55e:	e7da      	b.n	800c516 <_printf_float+0x8e>
 800c560:	6861      	ldr	r1, [r4, #4]
 800c562:	1c4b      	adds	r3, r1, #1
 800c564:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800c568:	a80a      	add	r0, sp, #40	; 0x28
 800c56a:	d13e      	bne.n	800c5ea <_printf_float+0x162>
 800c56c:	2306      	movs	r3, #6
 800c56e:	6063      	str	r3, [r4, #4]
 800c570:	2300      	movs	r3, #0
 800c572:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c576:	ab09      	add	r3, sp, #36	; 0x24
 800c578:	9300      	str	r3, [sp, #0]
 800c57a:	ec49 8b10 	vmov	d0, r8, r9
 800c57e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c582:	6022      	str	r2, [r4, #0]
 800c584:	f8cd a004 	str.w	sl, [sp, #4]
 800c588:	6861      	ldr	r1, [r4, #4]
 800c58a:	4628      	mov	r0, r5
 800c58c:	f7ff fee8 	bl	800c360 <__cvt>
 800c590:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800c594:	2b47      	cmp	r3, #71	; 0x47
 800c596:	4680      	mov	r8, r0
 800c598:	d109      	bne.n	800c5ae <_printf_float+0x126>
 800c59a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c59c:	1cd8      	adds	r0, r3, #3
 800c59e:	db02      	blt.n	800c5a6 <_printf_float+0x11e>
 800c5a0:	6862      	ldr	r2, [r4, #4]
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	dd47      	ble.n	800c636 <_printf_float+0x1ae>
 800c5a6:	f1aa 0a02 	sub.w	sl, sl, #2
 800c5aa:	fa5f fa8a 	uxtb.w	sl, sl
 800c5ae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c5b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c5b4:	d824      	bhi.n	800c600 <_printf_float+0x178>
 800c5b6:	3901      	subs	r1, #1
 800c5b8:	4652      	mov	r2, sl
 800c5ba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c5be:	9109      	str	r1, [sp, #36]	; 0x24
 800c5c0:	f7ff ff2f 	bl	800c422 <__exponent>
 800c5c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5c6:	1813      	adds	r3, r2, r0
 800c5c8:	2a01      	cmp	r2, #1
 800c5ca:	4681      	mov	r9, r0
 800c5cc:	6123      	str	r3, [r4, #16]
 800c5ce:	dc02      	bgt.n	800c5d6 <_printf_float+0x14e>
 800c5d0:	6822      	ldr	r2, [r4, #0]
 800c5d2:	07d1      	lsls	r1, r2, #31
 800c5d4:	d501      	bpl.n	800c5da <_printf_float+0x152>
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	6123      	str	r3, [r4, #16]
 800c5da:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d0a5      	beq.n	800c52e <_printf_float+0xa6>
 800c5e2:	232d      	movs	r3, #45	; 0x2d
 800c5e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5e8:	e7a1      	b.n	800c52e <_printf_float+0xa6>
 800c5ea:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800c5ee:	f000 8177 	beq.w	800c8e0 <_printf_float+0x458>
 800c5f2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c5f6:	d1bb      	bne.n	800c570 <_printf_float+0xe8>
 800c5f8:	2900      	cmp	r1, #0
 800c5fa:	d1b9      	bne.n	800c570 <_printf_float+0xe8>
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	e7b6      	b.n	800c56e <_printf_float+0xe6>
 800c600:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800c604:	d119      	bne.n	800c63a <_printf_float+0x1b2>
 800c606:	2900      	cmp	r1, #0
 800c608:	6863      	ldr	r3, [r4, #4]
 800c60a:	dd0c      	ble.n	800c626 <_printf_float+0x19e>
 800c60c:	6121      	str	r1, [r4, #16]
 800c60e:	b913      	cbnz	r3, 800c616 <_printf_float+0x18e>
 800c610:	6822      	ldr	r2, [r4, #0]
 800c612:	07d2      	lsls	r2, r2, #31
 800c614:	d502      	bpl.n	800c61c <_printf_float+0x194>
 800c616:	3301      	adds	r3, #1
 800c618:	440b      	add	r3, r1
 800c61a:	6123      	str	r3, [r4, #16]
 800c61c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c61e:	65a3      	str	r3, [r4, #88]	; 0x58
 800c620:	f04f 0900 	mov.w	r9, #0
 800c624:	e7d9      	b.n	800c5da <_printf_float+0x152>
 800c626:	b913      	cbnz	r3, 800c62e <_printf_float+0x1a6>
 800c628:	6822      	ldr	r2, [r4, #0]
 800c62a:	07d0      	lsls	r0, r2, #31
 800c62c:	d501      	bpl.n	800c632 <_printf_float+0x1aa>
 800c62e:	3302      	adds	r3, #2
 800c630:	e7f3      	b.n	800c61a <_printf_float+0x192>
 800c632:	2301      	movs	r3, #1
 800c634:	e7f1      	b.n	800c61a <_printf_float+0x192>
 800c636:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800c63a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c63e:	4293      	cmp	r3, r2
 800c640:	db05      	blt.n	800c64e <_printf_float+0x1c6>
 800c642:	6822      	ldr	r2, [r4, #0]
 800c644:	6123      	str	r3, [r4, #16]
 800c646:	07d1      	lsls	r1, r2, #31
 800c648:	d5e8      	bpl.n	800c61c <_printf_float+0x194>
 800c64a:	3301      	adds	r3, #1
 800c64c:	e7e5      	b.n	800c61a <_printf_float+0x192>
 800c64e:	2b00      	cmp	r3, #0
 800c650:	bfd4      	ite	le
 800c652:	f1c3 0302 	rsble	r3, r3, #2
 800c656:	2301      	movgt	r3, #1
 800c658:	4413      	add	r3, r2
 800c65a:	e7de      	b.n	800c61a <_printf_float+0x192>
 800c65c:	6823      	ldr	r3, [r4, #0]
 800c65e:	055a      	lsls	r2, r3, #21
 800c660:	d407      	bmi.n	800c672 <_printf_float+0x1ea>
 800c662:	6923      	ldr	r3, [r4, #16]
 800c664:	4642      	mov	r2, r8
 800c666:	4631      	mov	r1, r6
 800c668:	4628      	mov	r0, r5
 800c66a:	47b8      	blx	r7
 800c66c:	3001      	adds	r0, #1
 800c66e:	d12b      	bne.n	800c6c8 <_printf_float+0x240>
 800c670:	e767      	b.n	800c542 <_printf_float+0xba>
 800c672:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c676:	f240 80dc 	bls.w	800c832 <_printf_float+0x3aa>
 800c67a:	2200      	movs	r2, #0
 800c67c:	2300      	movs	r3, #0
 800c67e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c682:	f7f4 fa41 	bl	8000b08 <__aeabi_dcmpeq>
 800c686:	2800      	cmp	r0, #0
 800c688:	d033      	beq.n	800c6f2 <_printf_float+0x26a>
 800c68a:	2301      	movs	r3, #1
 800c68c:	4a41      	ldr	r2, [pc, #260]	; (800c794 <_printf_float+0x30c>)
 800c68e:	4631      	mov	r1, r6
 800c690:	4628      	mov	r0, r5
 800c692:	47b8      	blx	r7
 800c694:	3001      	adds	r0, #1
 800c696:	f43f af54 	beq.w	800c542 <_printf_float+0xba>
 800c69a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	db02      	blt.n	800c6a8 <_printf_float+0x220>
 800c6a2:	6823      	ldr	r3, [r4, #0]
 800c6a4:	07d8      	lsls	r0, r3, #31
 800c6a6:	d50f      	bpl.n	800c6c8 <_printf_float+0x240>
 800c6a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c6ac:	4631      	mov	r1, r6
 800c6ae:	4628      	mov	r0, r5
 800c6b0:	47b8      	blx	r7
 800c6b2:	3001      	adds	r0, #1
 800c6b4:	f43f af45 	beq.w	800c542 <_printf_float+0xba>
 800c6b8:	f04f 0800 	mov.w	r8, #0
 800c6bc:	f104 091a 	add.w	r9, r4, #26
 800c6c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6c2:	3b01      	subs	r3, #1
 800c6c4:	4543      	cmp	r3, r8
 800c6c6:	dc09      	bgt.n	800c6dc <_printf_float+0x254>
 800c6c8:	6823      	ldr	r3, [r4, #0]
 800c6ca:	079b      	lsls	r3, r3, #30
 800c6cc:	f100 8103 	bmi.w	800c8d6 <_printf_float+0x44e>
 800c6d0:	68e0      	ldr	r0, [r4, #12]
 800c6d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6d4:	4298      	cmp	r0, r3
 800c6d6:	bfb8      	it	lt
 800c6d8:	4618      	movlt	r0, r3
 800c6da:	e734      	b.n	800c546 <_printf_float+0xbe>
 800c6dc:	2301      	movs	r3, #1
 800c6de:	464a      	mov	r2, r9
 800c6e0:	4631      	mov	r1, r6
 800c6e2:	4628      	mov	r0, r5
 800c6e4:	47b8      	blx	r7
 800c6e6:	3001      	adds	r0, #1
 800c6e8:	f43f af2b 	beq.w	800c542 <_printf_float+0xba>
 800c6ec:	f108 0801 	add.w	r8, r8, #1
 800c6f0:	e7e6      	b.n	800c6c0 <_printf_float+0x238>
 800c6f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	dc2b      	bgt.n	800c750 <_printf_float+0x2c8>
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	4a26      	ldr	r2, [pc, #152]	; (800c794 <_printf_float+0x30c>)
 800c6fc:	4631      	mov	r1, r6
 800c6fe:	4628      	mov	r0, r5
 800c700:	47b8      	blx	r7
 800c702:	3001      	adds	r0, #1
 800c704:	f43f af1d 	beq.w	800c542 <_printf_float+0xba>
 800c708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c70a:	b923      	cbnz	r3, 800c716 <_printf_float+0x28e>
 800c70c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c70e:	b913      	cbnz	r3, 800c716 <_printf_float+0x28e>
 800c710:	6823      	ldr	r3, [r4, #0]
 800c712:	07d9      	lsls	r1, r3, #31
 800c714:	d5d8      	bpl.n	800c6c8 <_printf_float+0x240>
 800c716:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c71a:	4631      	mov	r1, r6
 800c71c:	4628      	mov	r0, r5
 800c71e:	47b8      	blx	r7
 800c720:	3001      	adds	r0, #1
 800c722:	f43f af0e 	beq.w	800c542 <_printf_float+0xba>
 800c726:	f04f 0900 	mov.w	r9, #0
 800c72a:	f104 0a1a 	add.w	sl, r4, #26
 800c72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c730:	425b      	negs	r3, r3
 800c732:	454b      	cmp	r3, r9
 800c734:	dc01      	bgt.n	800c73a <_printf_float+0x2b2>
 800c736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c738:	e794      	b.n	800c664 <_printf_float+0x1dc>
 800c73a:	2301      	movs	r3, #1
 800c73c:	4652      	mov	r2, sl
 800c73e:	4631      	mov	r1, r6
 800c740:	4628      	mov	r0, r5
 800c742:	47b8      	blx	r7
 800c744:	3001      	adds	r0, #1
 800c746:	f43f aefc 	beq.w	800c542 <_printf_float+0xba>
 800c74a:	f109 0901 	add.w	r9, r9, #1
 800c74e:	e7ee      	b.n	800c72e <_printf_float+0x2a6>
 800c750:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c752:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c754:	429a      	cmp	r2, r3
 800c756:	bfa8      	it	ge
 800c758:	461a      	movge	r2, r3
 800c75a:	2a00      	cmp	r2, #0
 800c75c:	4691      	mov	r9, r2
 800c75e:	dd07      	ble.n	800c770 <_printf_float+0x2e8>
 800c760:	4613      	mov	r3, r2
 800c762:	4631      	mov	r1, r6
 800c764:	4642      	mov	r2, r8
 800c766:	4628      	mov	r0, r5
 800c768:	47b8      	blx	r7
 800c76a:	3001      	adds	r0, #1
 800c76c:	f43f aee9 	beq.w	800c542 <_printf_float+0xba>
 800c770:	f104 031a 	add.w	r3, r4, #26
 800c774:	f04f 0b00 	mov.w	fp, #0
 800c778:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c77c:	9306      	str	r3, [sp, #24]
 800c77e:	e015      	b.n	800c7ac <_printf_float+0x324>
 800c780:	7fefffff 	.word	0x7fefffff
 800c784:	0800e76c 	.word	0x0800e76c
 800c788:	0800e768 	.word	0x0800e768
 800c78c:	0800e774 	.word	0x0800e774
 800c790:	0800e770 	.word	0x0800e770
 800c794:	0800e778 	.word	0x0800e778
 800c798:	2301      	movs	r3, #1
 800c79a:	9a06      	ldr	r2, [sp, #24]
 800c79c:	4631      	mov	r1, r6
 800c79e:	4628      	mov	r0, r5
 800c7a0:	47b8      	blx	r7
 800c7a2:	3001      	adds	r0, #1
 800c7a4:	f43f aecd 	beq.w	800c542 <_printf_float+0xba>
 800c7a8:	f10b 0b01 	add.w	fp, fp, #1
 800c7ac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c7b0:	ebaa 0309 	sub.w	r3, sl, r9
 800c7b4:	455b      	cmp	r3, fp
 800c7b6:	dcef      	bgt.n	800c798 <_printf_float+0x310>
 800c7b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c7bc:	429a      	cmp	r2, r3
 800c7be:	44d0      	add	r8, sl
 800c7c0:	db15      	blt.n	800c7ee <_printf_float+0x366>
 800c7c2:	6823      	ldr	r3, [r4, #0]
 800c7c4:	07da      	lsls	r2, r3, #31
 800c7c6:	d412      	bmi.n	800c7ee <_printf_float+0x366>
 800c7c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c7cc:	eba3 020a 	sub.w	r2, r3, sl
 800c7d0:	eba3 0a01 	sub.w	sl, r3, r1
 800c7d4:	4592      	cmp	sl, r2
 800c7d6:	bfa8      	it	ge
 800c7d8:	4692      	movge	sl, r2
 800c7da:	f1ba 0f00 	cmp.w	sl, #0
 800c7de:	dc0e      	bgt.n	800c7fe <_printf_float+0x376>
 800c7e0:	f04f 0800 	mov.w	r8, #0
 800c7e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c7e8:	f104 091a 	add.w	r9, r4, #26
 800c7ec:	e019      	b.n	800c822 <_printf_float+0x39a>
 800c7ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7f2:	4631      	mov	r1, r6
 800c7f4:	4628      	mov	r0, r5
 800c7f6:	47b8      	blx	r7
 800c7f8:	3001      	adds	r0, #1
 800c7fa:	d1e5      	bne.n	800c7c8 <_printf_float+0x340>
 800c7fc:	e6a1      	b.n	800c542 <_printf_float+0xba>
 800c7fe:	4653      	mov	r3, sl
 800c800:	4642      	mov	r2, r8
 800c802:	4631      	mov	r1, r6
 800c804:	4628      	mov	r0, r5
 800c806:	47b8      	blx	r7
 800c808:	3001      	adds	r0, #1
 800c80a:	d1e9      	bne.n	800c7e0 <_printf_float+0x358>
 800c80c:	e699      	b.n	800c542 <_printf_float+0xba>
 800c80e:	2301      	movs	r3, #1
 800c810:	464a      	mov	r2, r9
 800c812:	4631      	mov	r1, r6
 800c814:	4628      	mov	r0, r5
 800c816:	47b8      	blx	r7
 800c818:	3001      	adds	r0, #1
 800c81a:	f43f ae92 	beq.w	800c542 <_printf_float+0xba>
 800c81e:	f108 0801 	add.w	r8, r8, #1
 800c822:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c826:	1a9b      	subs	r3, r3, r2
 800c828:	eba3 030a 	sub.w	r3, r3, sl
 800c82c:	4543      	cmp	r3, r8
 800c82e:	dcee      	bgt.n	800c80e <_printf_float+0x386>
 800c830:	e74a      	b.n	800c6c8 <_printf_float+0x240>
 800c832:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c834:	2a01      	cmp	r2, #1
 800c836:	dc01      	bgt.n	800c83c <_printf_float+0x3b4>
 800c838:	07db      	lsls	r3, r3, #31
 800c83a:	d53a      	bpl.n	800c8b2 <_printf_float+0x42a>
 800c83c:	2301      	movs	r3, #1
 800c83e:	4642      	mov	r2, r8
 800c840:	4631      	mov	r1, r6
 800c842:	4628      	mov	r0, r5
 800c844:	47b8      	blx	r7
 800c846:	3001      	adds	r0, #1
 800c848:	f43f ae7b 	beq.w	800c542 <_printf_float+0xba>
 800c84c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c850:	4631      	mov	r1, r6
 800c852:	4628      	mov	r0, r5
 800c854:	47b8      	blx	r7
 800c856:	3001      	adds	r0, #1
 800c858:	f108 0801 	add.w	r8, r8, #1
 800c85c:	f43f ae71 	beq.w	800c542 <_printf_float+0xba>
 800c860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c862:	2200      	movs	r2, #0
 800c864:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800c868:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c86c:	2300      	movs	r3, #0
 800c86e:	f7f4 f94b 	bl	8000b08 <__aeabi_dcmpeq>
 800c872:	b9c8      	cbnz	r0, 800c8a8 <_printf_float+0x420>
 800c874:	4653      	mov	r3, sl
 800c876:	4642      	mov	r2, r8
 800c878:	4631      	mov	r1, r6
 800c87a:	4628      	mov	r0, r5
 800c87c:	47b8      	blx	r7
 800c87e:	3001      	adds	r0, #1
 800c880:	d10e      	bne.n	800c8a0 <_printf_float+0x418>
 800c882:	e65e      	b.n	800c542 <_printf_float+0xba>
 800c884:	2301      	movs	r3, #1
 800c886:	4652      	mov	r2, sl
 800c888:	4631      	mov	r1, r6
 800c88a:	4628      	mov	r0, r5
 800c88c:	47b8      	blx	r7
 800c88e:	3001      	adds	r0, #1
 800c890:	f43f ae57 	beq.w	800c542 <_printf_float+0xba>
 800c894:	f108 0801 	add.w	r8, r8, #1
 800c898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c89a:	3b01      	subs	r3, #1
 800c89c:	4543      	cmp	r3, r8
 800c89e:	dcf1      	bgt.n	800c884 <_printf_float+0x3fc>
 800c8a0:	464b      	mov	r3, r9
 800c8a2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c8a6:	e6de      	b.n	800c666 <_printf_float+0x1de>
 800c8a8:	f04f 0800 	mov.w	r8, #0
 800c8ac:	f104 0a1a 	add.w	sl, r4, #26
 800c8b0:	e7f2      	b.n	800c898 <_printf_float+0x410>
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	e7df      	b.n	800c876 <_printf_float+0x3ee>
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	464a      	mov	r2, r9
 800c8ba:	4631      	mov	r1, r6
 800c8bc:	4628      	mov	r0, r5
 800c8be:	47b8      	blx	r7
 800c8c0:	3001      	adds	r0, #1
 800c8c2:	f43f ae3e 	beq.w	800c542 <_printf_float+0xba>
 800c8c6:	f108 0801 	add.w	r8, r8, #1
 800c8ca:	68e3      	ldr	r3, [r4, #12]
 800c8cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c8ce:	1a9b      	subs	r3, r3, r2
 800c8d0:	4543      	cmp	r3, r8
 800c8d2:	dcf0      	bgt.n	800c8b6 <_printf_float+0x42e>
 800c8d4:	e6fc      	b.n	800c6d0 <_printf_float+0x248>
 800c8d6:	f04f 0800 	mov.w	r8, #0
 800c8da:	f104 0919 	add.w	r9, r4, #25
 800c8de:	e7f4      	b.n	800c8ca <_printf_float+0x442>
 800c8e0:	2900      	cmp	r1, #0
 800c8e2:	f43f ae8b 	beq.w	800c5fc <_printf_float+0x174>
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c8ec:	ab09      	add	r3, sp, #36	; 0x24
 800c8ee:	9300      	str	r3, [sp, #0]
 800c8f0:	ec49 8b10 	vmov	d0, r8, r9
 800c8f4:	6022      	str	r2, [r4, #0]
 800c8f6:	f8cd a004 	str.w	sl, [sp, #4]
 800c8fa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c8fe:	4628      	mov	r0, r5
 800c900:	f7ff fd2e 	bl	800c360 <__cvt>
 800c904:	4680      	mov	r8, r0
 800c906:	e648      	b.n	800c59a <_printf_float+0x112>

0800c908 <_printf_common>:
 800c908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c90c:	4691      	mov	r9, r2
 800c90e:	461f      	mov	r7, r3
 800c910:	688a      	ldr	r2, [r1, #8]
 800c912:	690b      	ldr	r3, [r1, #16]
 800c914:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c918:	4293      	cmp	r3, r2
 800c91a:	bfb8      	it	lt
 800c91c:	4613      	movlt	r3, r2
 800c91e:	f8c9 3000 	str.w	r3, [r9]
 800c922:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c926:	4606      	mov	r6, r0
 800c928:	460c      	mov	r4, r1
 800c92a:	b112      	cbz	r2, 800c932 <_printf_common+0x2a>
 800c92c:	3301      	adds	r3, #1
 800c92e:	f8c9 3000 	str.w	r3, [r9]
 800c932:	6823      	ldr	r3, [r4, #0]
 800c934:	0699      	lsls	r1, r3, #26
 800c936:	bf42      	ittt	mi
 800c938:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c93c:	3302      	addmi	r3, #2
 800c93e:	f8c9 3000 	strmi.w	r3, [r9]
 800c942:	6825      	ldr	r5, [r4, #0]
 800c944:	f015 0506 	ands.w	r5, r5, #6
 800c948:	d107      	bne.n	800c95a <_printf_common+0x52>
 800c94a:	f104 0a19 	add.w	sl, r4, #25
 800c94e:	68e3      	ldr	r3, [r4, #12]
 800c950:	f8d9 2000 	ldr.w	r2, [r9]
 800c954:	1a9b      	subs	r3, r3, r2
 800c956:	42ab      	cmp	r3, r5
 800c958:	dc28      	bgt.n	800c9ac <_printf_common+0xa4>
 800c95a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c95e:	6822      	ldr	r2, [r4, #0]
 800c960:	3300      	adds	r3, #0
 800c962:	bf18      	it	ne
 800c964:	2301      	movne	r3, #1
 800c966:	0692      	lsls	r2, r2, #26
 800c968:	d42d      	bmi.n	800c9c6 <_printf_common+0xbe>
 800c96a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c96e:	4639      	mov	r1, r7
 800c970:	4630      	mov	r0, r6
 800c972:	47c0      	blx	r8
 800c974:	3001      	adds	r0, #1
 800c976:	d020      	beq.n	800c9ba <_printf_common+0xb2>
 800c978:	6823      	ldr	r3, [r4, #0]
 800c97a:	68e5      	ldr	r5, [r4, #12]
 800c97c:	f8d9 2000 	ldr.w	r2, [r9]
 800c980:	f003 0306 	and.w	r3, r3, #6
 800c984:	2b04      	cmp	r3, #4
 800c986:	bf08      	it	eq
 800c988:	1aad      	subeq	r5, r5, r2
 800c98a:	68a3      	ldr	r3, [r4, #8]
 800c98c:	6922      	ldr	r2, [r4, #16]
 800c98e:	bf0c      	ite	eq
 800c990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c994:	2500      	movne	r5, #0
 800c996:	4293      	cmp	r3, r2
 800c998:	bfc4      	itt	gt
 800c99a:	1a9b      	subgt	r3, r3, r2
 800c99c:	18ed      	addgt	r5, r5, r3
 800c99e:	f04f 0900 	mov.w	r9, #0
 800c9a2:	341a      	adds	r4, #26
 800c9a4:	454d      	cmp	r5, r9
 800c9a6:	d11a      	bne.n	800c9de <_printf_common+0xd6>
 800c9a8:	2000      	movs	r0, #0
 800c9aa:	e008      	b.n	800c9be <_printf_common+0xb6>
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	4652      	mov	r2, sl
 800c9b0:	4639      	mov	r1, r7
 800c9b2:	4630      	mov	r0, r6
 800c9b4:	47c0      	blx	r8
 800c9b6:	3001      	adds	r0, #1
 800c9b8:	d103      	bne.n	800c9c2 <_printf_common+0xba>
 800c9ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c9be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9c2:	3501      	adds	r5, #1
 800c9c4:	e7c3      	b.n	800c94e <_printf_common+0x46>
 800c9c6:	18e1      	adds	r1, r4, r3
 800c9c8:	1c5a      	adds	r2, r3, #1
 800c9ca:	2030      	movs	r0, #48	; 0x30
 800c9cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c9d0:	4422      	add	r2, r4
 800c9d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c9d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c9da:	3302      	adds	r3, #2
 800c9dc:	e7c5      	b.n	800c96a <_printf_common+0x62>
 800c9de:	2301      	movs	r3, #1
 800c9e0:	4622      	mov	r2, r4
 800c9e2:	4639      	mov	r1, r7
 800c9e4:	4630      	mov	r0, r6
 800c9e6:	47c0      	blx	r8
 800c9e8:	3001      	adds	r0, #1
 800c9ea:	d0e6      	beq.n	800c9ba <_printf_common+0xb2>
 800c9ec:	f109 0901 	add.w	r9, r9, #1
 800c9f0:	e7d8      	b.n	800c9a4 <_printf_common+0x9c>
	...

0800c9f4 <_printf_i>:
 800c9f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c9f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c9fc:	460c      	mov	r4, r1
 800c9fe:	7e09      	ldrb	r1, [r1, #24]
 800ca00:	b085      	sub	sp, #20
 800ca02:	296e      	cmp	r1, #110	; 0x6e
 800ca04:	4617      	mov	r7, r2
 800ca06:	4606      	mov	r6, r0
 800ca08:	4698      	mov	r8, r3
 800ca0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca0c:	f000 80b3 	beq.w	800cb76 <_printf_i+0x182>
 800ca10:	d822      	bhi.n	800ca58 <_printf_i+0x64>
 800ca12:	2963      	cmp	r1, #99	; 0x63
 800ca14:	d036      	beq.n	800ca84 <_printf_i+0x90>
 800ca16:	d80a      	bhi.n	800ca2e <_printf_i+0x3a>
 800ca18:	2900      	cmp	r1, #0
 800ca1a:	f000 80b9 	beq.w	800cb90 <_printf_i+0x19c>
 800ca1e:	2958      	cmp	r1, #88	; 0x58
 800ca20:	f000 8083 	beq.w	800cb2a <_printf_i+0x136>
 800ca24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca28:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ca2c:	e032      	b.n	800ca94 <_printf_i+0xa0>
 800ca2e:	2964      	cmp	r1, #100	; 0x64
 800ca30:	d001      	beq.n	800ca36 <_printf_i+0x42>
 800ca32:	2969      	cmp	r1, #105	; 0x69
 800ca34:	d1f6      	bne.n	800ca24 <_printf_i+0x30>
 800ca36:	6820      	ldr	r0, [r4, #0]
 800ca38:	6813      	ldr	r3, [r2, #0]
 800ca3a:	0605      	lsls	r5, r0, #24
 800ca3c:	f103 0104 	add.w	r1, r3, #4
 800ca40:	d52a      	bpl.n	800ca98 <_printf_i+0xa4>
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	6011      	str	r1, [r2, #0]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	da03      	bge.n	800ca52 <_printf_i+0x5e>
 800ca4a:	222d      	movs	r2, #45	; 0x2d
 800ca4c:	425b      	negs	r3, r3
 800ca4e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ca52:	486f      	ldr	r0, [pc, #444]	; (800cc10 <_printf_i+0x21c>)
 800ca54:	220a      	movs	r2, #10
 800ca56:	e039      	b.n	800cacc <_printf_i+0xd8>
 800ca58:	2973      	cmp	r1, #115	; 0x73
 800ca5a:	f000 809d 	beq.w	800cb98 <_printf_i+0x1a4>
 800ca5e:	d808      	bhi.n	800ca72 <_printf_i+0x7e>
 800ca60:	296f      	cmp	r1, #111	; 0x6f
 800ca62:	d020      	beq.n	800caa6 <_printf_i+0xb2>
 800ca64:	2970      	cmp	r1, #112	; 0x70
 800ca66:	d1dd      	bne.n	800ca24 <_printf_i+0x30>
 800ca68:	6823      	ldr	r3, [r4, #0]
 800ca6a:	f043 0320 	orr.w	r3, r3, #32
 800ca6e:	6023      	str	r3, [r4, #0]
 800ca70:	e003      	b.n	800ca7a <_printf_i+0x86>
 800ca72:	2975      	cmp	r1, #117	; 0x75
 800ca74:	d017      	beq.n	800caa6 <_printf_i+0xb2>
 800ca76:	2978      	cmp	r1, #120	; 0x78
 800ca78:	d1d4      	bne.n	800ca24 <_printf_i+0x30>
 800ca7a:	2378      	movs	r3, #120	; 0x78
 800ca7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ca80:	4864      	ldr	r0, [pc, #400]	; (800cc14 <_printf_i+0x220>)
 800ca82:	e055      	b.n	800cb30 <_printf_i+0x13c>
 800ca84:	6813      	ldr	r3, [r2, #0]
 800ca86:	1d19      	adds	r1, r3, #4
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	6011      	str	r1, [r2, #0]
 800ca8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca94:	2301      	movs	r3, #1
 800ca96:	e08c      	b.n	800cbb2 <_printf_i+0x1be>
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	6011      	str	r1, [r2, #0]
 800ca9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800caa0:	bf18      	it	ne
 800caa2:	b21b      	sxthne	r3, r3
 800caa4:	e7cf      	b.n	800ca46 <_printf_i+0x52>
 800caa6:	6813      	ldr	r3, [r2, #0]
 800caa8:	6825      	ldr	r5, [r4, #0]
 800caaa:	1d18      	adds	r0, r3, #4
 800caac:	6010      	str	r0, [r2, #0]
 800caae:	0628      	lsls	r0, r5, #24
 800cab0:	d501      	bpl.n	800cab6 <_printf_i+0xc2>
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	e002      	b.n	800cabc <_printf_i+0xc8>
 800cab6:	0668      	lsls	r0, r5, #25
 800cab8:	d5fb      	bpl.n	800cab2 <_printf_i+0xbe>
 800caba:	881b      	ldrh	r3, [r3, #0]
 800cabc:	4854      	ldr	r0, [pc, #336]	; (800cc10 <_printf_i+0x21c>)
 800cabe:	296f      	cmp	r1, #111	; 0x6f
 800cac0:	bf14      	ite	ne
 800cac2:	220a      	movne	r2, #10
 800cac4:	2208      	moveq	r2, #8
 800cac6:	2100      	movs	r1, #0
 800cac8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cacc:	6865      	ldr	r5, [r4, #4]
 800cace:	60a5      	str	r5, [r4, #8]
 800cad0:	2d00      	cmp	r5, #0
 800cad2:	f2c0 8095 	blt.w	800cc00 <_printf_i+0x20c>
 800cad6:	6821      	ldr	r1, [r4, #0]
 800cad8:	f021 0104 	bic.w	r1, r1, #4
 800cadc:	6021      	str	r1, [r4, #0]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d13d      	bne.n	800cb5e <_printf_i+0x16a>
 800cae2:	2d00      	cmp	r5, #0
 800cae4:	f040 808e 	bne.w	800cc04 <_printf_i+0x210>
 800cae8:	4665      	mov	r5, ip
 800caea:	2a08      	cmp	r2, #8
 800caec:	d10b      	bne.n	800cb06 <_printf_i+0x112>
 800caee:	6823      	ldr	r3, [r4, #0]
 800caf0:	07db      	lsls	r3, r3, #31
 800caf2:	d508      	bpl.n	800cb06 <_printf_i+0x112>
 800caf4:	6923      	ldr	r3, [r4, #16]
 800caf6:	6862      	ldr	r2, [r4, #4]
 800caf8:	429a      	cmp	r2, r3
 800cafa:	bfde      	ittt	le
 800cafc:	2330      	movle	r3, #48	; 0x30
 800cafe:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb02:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cb06:	ebac 0305 	sub.w	r3, ip, r5
 800cb0a:	6123      	str	r3, [r4, #16]
 800cb0c:	f8cd 8000 	str.w	r8, [sp]
 800cb10:	463b      	mov	r3, r7
 800cb12:	aa03      	add	r2, sp, #12
 800cb14:	4621      	mov	r1, r4
 800cb16:	4630      	mov	r0, r6
 800cb18:	f7ff fef6 	bl	800c908 <_printf_common>
 800cb1c:	3001      	adds	r0, #1
 800cb1e:	d14d      	bne.n	800cbbc <_printf_i+0x1c8>
 800cb20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb24:	b005      	add	sp, #20
 800cb26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb2a:	4839      	ldr	r0, [pc, #228]	; (800cc10 <_printf_i+0x21c>)
 800cb2c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800cb30:	6813      	ldr	r3, [r2, #0]
 800cb32:	6821      	ldr	r1, [r4, #0]
 800cb34:	1d1d      	adds	r5, r3, #4
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	6015      	str	r5, [r2, #0]
 800cb3a:	060a      	lsls	r2, r1, #24
 800cb3c:	d50b      	bpl.n	800cb56 <_printf_i+0x162>
 800cb3e:	07ca      	lsls	r2, r1, #31
 800cb40:	bf44      	itt	mi
 800cb42:	f041 0120 	orrmi.w	r1, r1, #32
 800cb46:	6021      	strmi	r1, [r4, #0]
 800cb48:	b91b      	cbnz	r3, 800cb52 <_printf_i+0x15e>
 800cb4a:	6822      	ldr	r2, [r4, #0]
 800cb4c:	f022 0220 	bic.w	r2, r2, #32
 800cb50:	6022      	str	r2, [r4, #0]
 800cb52:	2210      	movs	r2, #16
 800cb54:	e7b7      	b.n	800cac6 <_printf_i+0xd2>
 800cb56:	064d      	lsls	r5, r1, #25
 800cb58:	bf48      	it	mi
 800cb5a:	b29b      	uxthmi	r3, r3
 800cb5c:	e7ef      	b.n	800cb3e <_printf_i+0x14a>
 800cb5e:	4665      	mov	r5, ip
 800cb60:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb64:	fb02 3311 	mls	r3, r2, r1, r3
 800cb68:	5cc3      	ldrb	r3, [r0, r3]
 800cb6a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cb6e:	460b      	mov	r3, r1
 800cb70:	2900      	cmp	r1, #0
 800cb72:	d1f5      	bne.n	800cb60 <_printf_i+0x16c>
 800cb74:	e7b9      	b.n	800caea <_printf_i+0xf6>
 800cb76:	6813      	ldr	r3, [r2, #0]
 800cb78:	6825      	ldr	r5, [r4, #0]
 800cb7a:	6961      	ldr	r1, [r4, #20]
 800cb7c:	1d18      	adds	r0, r3, #4
 800cb7e:	6010      	str	r0, [r2, #0]
 800cb80:	0628      	lsls	r0, r5, #24
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	d501      	bpl.n	800cb8a <_printf_i+0x196>
 800cb86:	6019      	str	r1, [r3, #0]
 800cb88:	e002      	b.n	800cb90 <_printf_i+0x19c>
 800cb8a:	066a      	lsls	r2, r5, #25
 800cb8c:	d5fb      	bpl.n	800cb86 <_printf_i+0x192>
 800cb8e:	8019      	strh	r1, [r3, #0]
 800cb90:	2300      	movs	r3, #0
 800cb92:	6123      	str	r3, [r4, #16]
 800cb94:	4665      	mov	r5, ip
 800cb96:	e7b9      	b.n	800cb0c <_printf_i+0x118>
 800cb98:	6813      	ldr	r3, [r2, #0]
 800cb9a:	1d19      	adds	r1, r3, #4
 800cb9c:	6011      	str	r1, [r2, #0]
 800cb9e:	681d      	ldr	r5, [r3, #0]
 800cba0:	6862      	ldr	r2, [r4, #4]
 800cba2:	2100      	movs	r1, #0
 800cba4:	4628      	mov	r0, r5
 800cba6:	f7f3 fb33 	bl	8000210 <memchr>
 800cbaa:	b108      	cbz	r0, 800cbb0 <_printf_i+0x1bc>
 800cbac:	1b40      	subs	r0, r0, r5
 800cbae:	6060      	str	r0, [r4, #4]
 800cbb0:	6863      	ldr	r3, [r4, #4]
 800cbb2:	6123      	str	r3, [r4, #16]
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbba:	e7a7      	b.n	800cb0c <_printf_i+0x118>
 800cbbc:	6923      	ldr	r3, [r4, #16]
 800cbbe:	462a      	mov	r2, r5
 800cbc0:	4639      	mov	r1, r7
 800cbc2:	4630      	mov	r0, r6
 800cbc4:	47c0      	blx	r8
 800cbc6:	3001      	adds	r0, #1
 800cbc8:	d0aa      	beq.n	800cb20 <_printf_i+0x12c>
 800cbca:	6823      	ldr	r3, [r4, #0]
 800cbcc:	079b      	lsls	r3, r3, #30
 800cbce:	d413      	bmi.n	800cbf8 <_printf_i+0x204>
 800cbd0:	68e0      	ldr	r0, [r4, #12]
 800cbd2:	9b03      	ldr	r3, [sp, #12]
 800cbd4:	4298      	cmp	r0, r3
 800cbd6:	bfb8      	it	lt
 800cbd8:	4618      	movlt	r0, r3
 800cbda:	e7a3      	b.n	800cb24 <_printf_i+0x130>
 800cbdc:	2301      	movs	r3, #1
 800cbde:	464a      	mov	r2, r9
 800cbe0:	4639      	mov	r1, r7
 800cbe2:	4630      	mov	r0, r6
 800cbe4:	47c0      	blx	r8
 800cbe6:	3001      	adds	r0, #1
 800cbe8:	d09a      	beq.n	800cb20 <_printf_i+0x12c>
 800cbea:	3501      	adds	r5, #1
 800cbec:	68e3      	ldr	r3, [r4, #12]
 800cbee:	9a03      	ldr	r2, [sp, #12]
 800cbf0:	1a9b      	subs	r3, r3, r2
 800cbf2:	42ab      	cmp	r3, r5
 800cbf4:	dcf2      	bgt.n	800cbdc <_printf_i+0x1e8>
 800cbf6:	e7eb      	b.n	800cbd0 <_printf_i+0x1dc>
 800cbf8:	2500      	movs	r5, #0
 800cbfa:	f104 0919 	add.w	r9, r4, #25
 800cbfe:	e7f5      	b.n	800cbec <_printf_i+0x1f8>
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d1ac      	bne.n	800cb5e <_printf_i+0x16a>
 800cc04:	7803      	ldrb	r3, [r0, #0]
 800cc06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cc0a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc0e:	e76c      	b.n	800caea <_printf_i+0xf6>
 800cc10:	0800e77a 	.word	0x0800e77a
 800cc14:	0800e78b 	.word	0x0800e78b

0800cc18 <_sbrk_r>:
 800cc18:	b538      	push	{r3, r4, r5, lr}
 800cc1a:	4c06      	ldr	r4, [pc, #24]	; (800cc34 <_sbrk_r+0x1c>)
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	4605      	mov	r5, r0
 800cc20:	4608      	mov	r0, r1
 800cc22:	6023      	str	r3, [r4, #0]
 800cc24:	f7fc f890 	bl	8008d48 <_sbrk>
 800cc28:	1c43      	adds	r3, r0, #1
 800cc2a:	d102      	bne.n	800cc32 <_sbrk_r+0x1a>
 800cc2c:	6823      	ldr	r3, [r4, #0]
 800cc2e:	b103      	cbz	r3, 800cc32 <_sbrk_r+0x1a>
 800cc30:	602b      	str	r3, [r5, #0]
 800cc32:	bd38      	pop	{r3, r4, r5, pc}
 800cc34:	20000404 	.word	0x20000404

0800cc38 <_raise_r>:
 800cc38:	291f      	cmp	r1, #31
 800cc3a:	b538      	push	{r3, r4, r5, lr}
 800cc3c:	4604      	mov	r4, r0
 800cc3e:	460d      	mov	r5, r1
 800cc40:	d904      	bls.n	800cc4c <_raise_r+0x14>
 800cc42:	2316      	movs	r3, #22
 800cc44:	6003      	str	r3, [r0, #0]
 800cc46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc4a:	bd38      	pop	{r3, r4, r5, pc}
 800cc4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cc4e:	b112      	cbz	r2, 800cc56 <_raise_r+0x1e>
 800cc50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc54:	b94b      	cbnz	r3, 800cc6a <_raise_r+0x32>
 800cc56:	4620      	mov	r0, r4
 800cc58:	f000 f830 	bl	800ccbc <_getpid_r>
 800cc5c:	462a      	mov	r2, r5
 800cc5e:	4601      	mov	r1, r0
 800cc60:	4620      	mov	r0, r4
 800cc62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc66:	f000 b817 	b.w	800cc98 <_kill_r>
 800cc6a:	2b01      	cmp	r3, #1
 800cc6c:	d00a      	beq.n	800cc84 <_raise_r+0x4c>
 800cc6e:	1c59      	adds	r1, r3, #1
 800cc70:	d103      	bne.n	800cc7a <_raise_r+0x42>
 800cc72:	2316      	movs	r3, #22
 800cc74:	6003      	str	r3, [r0, #0]
 800cc76:	2001      	movs	r0, #1
 800cc78:	e7e7      	b.n	800cc4a <_raise_r+0x12>
 800cc7a:	2400      	movs	r4, #0
 800cc7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cc80:	4628      	mov	r0, r5
 800cc82:	4798      	blx	r3
 800cc84:	2000      	movs	r0, #0
 800cc86:	e7e0      	b.n	800cc4a <_raise_r+0x12>

0800cc88 <raise>:
 800cc88:	4b02      	ldr	r3, [pc, #8]	; (800cc94 <raise+0xc>)
 800cc8a:	4601      	mov	r1, r0
 800cc8c:	6818      	ldr	r0, [r3, #0]
 800cc8e:	f7ff bfd3 	b.w	800cc38 <_raise_r>
 800cc92:	bf00      	nop
 800cc94:	20000010 	.word	0x20000010

0800cc98 <_kill_r>:
 800cc98:	b538      	push	{r3, r4, r5, lr}
 800cc9a:	4c07      	ldr	r4, [pc, #28]	; (800ccb8 <_kill_r+0x20>)
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	4605      	mov	r5, r0
 800cca0:	4608      	mov	r0, r1
 800cca2:	4611      	mov	r1, r2
 800cca4:	6023      	str	r3, [r4, #0]
 800cca6:	f7fc f834 	bl	8008d12 <_kill>
 800ccaa:	1c43      	adds	r3, r0, #1
 800ccac:	d102      	bne.n	800ccb4 <_kill_r+0x1c>
 800ccae:	6823      	ldr	r3, [r4, #0]
 800ccb0:	b103      	cbz	r3, 800ccb4 <_kill_r+0x1c>
 800ccb2:	602b      	str	r3, [r5, #0]
 800ccb4:	bd38      	pop	{r3, r4, r5, pc}
 800ccb6:	bf00      	nop
 800ccb8:	20000404 	.word	0x20000404

0800ccbc <_getpid_r>:
 800ccbc:	f7fc b821 	b.w	8008d02 <_getpid>

0800ccc0 <_vsniprintf_r>:
 800ccc0:	b530      	push	{r4, r5, lr}
 800ccc2:	1e14      	subs	r4, r2, #0
 800ccc4:	4605      	mov	r5, r0
 800ccc6:	b09b      	sub	sp, #108	; 0x6c
 800ccc8:	4618      	mov	r0, r3
 800ccca:	da05      	bge.n	800ccd8 <_vsniprintf_r+0x18>
 800cccc:	238b      	movs	r3, #139	; 0x8b
 800ccce:	602b      	str	r3, [r5, #0]
 800ccd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ccd4:	b01b      	add	sp, #108	; 0x6c
 800ccd6:	bd30      	pop	{r4, r5, pc}
 800ccd8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ccdc:	f8ad 300c 	strh.w	r3, [sp, #12]
 800cce0:	bf14      	ite	ne
 800cce2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800cce6:	4623      	moveq	r3, r4
 800cce8:	9302      	str	r3, [sp, #8]
 800ccea:	9305      	str	r3, [sp, #20]
 800ccec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ccf0:	9100      	str	r1, [sp, #0]
 800ccf2:	9104      	str	r1, [sp, #16]
 800ccf4:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ccfc:	4669      	mov	r1, sp
 800ccfe:	4628      	mov	r0, r5
 800cd00:	f001 f9b2 	bl	800e068 <_svfiprintf_r>
 800cd04:	1c43      	adds	r3, r0, #1
 800cd06:	bfbc      	itt	lt
 800cd08:	238b      	movlt	r3, #139	; 0x8b
 800cd0a:	602b      	strlt	r3, [r5, #0]
 800cd0c:	2c00      	cmp	r4, #0
 800cd0e:	d0e1      	beq.n	800ccd4 <_vsniprintf_r+0x14>
 800cd10:	9b00      	ldr	r3, [sp, #0]
 800cd12:	2200      	movs	r2, #0
 800cd14:	701a      	strb	r2, [r3, #0]
 800cd16:	e7dd      	b.n	800ccd4 <_vsniprintf_r+0x14>

0800cd18 <vsniprintf>:
 800cd18:	b507      	push	{r0, r1, r2, lr}
 800cd1a:	9300      	str	r3, [sp, #0]
 800cd1c:	4613      	mov	r3, r2
 800cd1e:	460a      	mov	r2, r1
 800cd20:	4601      	mov	r1, r0
 800cd22:	4803      	ldr	r0, [pc, #12]	; (800cd30 <vsniprintf+0x18>)
 800cd24:	6800      	ldr	r0, [r0, #0]
 800cd26:	f7ff ffcb 	bl	800ccc0 <_vsniprintf_r>
 800cd2a:	b003      	add	sp, #12
 800cd2c:	f85d fb04 	ldr.w	pc, [sp], #4
 800cd30:	20000010 	.word	0x20000010

0800cd34 <quorem>:
 800cd34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd38:	6903      	ldr	r3, [r0, #16]
 800cd3a:	690c      	ldr	r4, [r1, #16]
 800cd3c:	42a3      	cmp	r3, r4
 800cd3e:	4680      	mov	r8, r0
 800cd40:	f2c0 8082 	blt.w	800ce48 <quorem+0x114>
 800cd44:	3c01      	subs	r4, #1
 800cd46:	f101 0714 	add.w	r7, r1, #20
 800cd4a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800cd4e:	f100 0614 	add.w	r6, r0, #20
 800cd52:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800cd56:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800cd5a:	eb06 030c 	add.w	r3, r6, ip
 800cd5e:	3501      	adds	r5, #1
 800cd60:	eb07 090c 	add.w	r9, r7, ip
 800cd64:	9301      	str	r3, [sp, #4]
 800cd66:	fbb0 f5f5 	udiv	r5, r0, r5
 800cd6a:	b395      	cbz	r5, 800cdd2 <quorem+0x9e>
 800cd6c:	f04f 0a00 	mov.w	sl, #0
 800cd70:	4638      	mov	r0, r7
 800cd72:	46b6      	mov	lr, r6
 800cd74:	46d3      	mov	fp, sl
 800cd76:	f850 2b04 	ldr.w	r2, [r0], #4
 800cd7a:	b293      	uxth	r3, r2
 800cd7c:	fb05 a303 	mla	r3, r5, r3, sl
 800cd80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cd84:	b29b      	uxth	r3, r3
 800cd86:	ebab 0303 	sub.w	r3, fp, r3
 800cd8a:	0c12      	lsrs	r2, r2, #16
 800cd8c:	f8de b000 	ldr.w	fp, [lr]
 800cd90:	fb05 a202 	mla	r2, r5, r2, sl
 800cd94:	fa13 f38b 	uxtah	r3, r3, fp
 800cd98:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800cd9c:	fa1f fb82 	uxth.w	fp, r2
 800cda0:	f8de 2000 	ldr.w	r2, [lr]
 800cda4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800cda8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cdac:	b29b      	uxth	r3, r3
 800cdae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cdb2:	4581      	cmp	r9, r0
 800cdb4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800cdb8:	f84e 3b04 	str.w	r3, [lr], #4
 800cdbc:	d2db      	bcs.n	800cd76 <quorem+0x42>
 800cdbe:	f856 300c 	ldr.w	r3, [r6, ip]
 800cdc2:	b933      	cbnz	r3, 800cdd2 <quorem+0x9e>
 800cdc4:	9b01      	ldr	r3, [sp, #4]
 800cdc6:	3b04      	subs	r3, #4
 800cdc8:	429e      	cmp	r6, r3
 800cdca:	461a      	mov	r2, r3
 800cdcc:	d330      	bcc.n	800ce30 <quorem+0xfc>
 800cdce:	f8c8 4010 	str.w	r4, [r8, #16]
 800cdd2:	4640      	mov	r0, r8
 800cdd4:	f001 f81a 	bl	800de0c <__mcmp>
 800cdd8:	2800      	cmp	r0, #0
 800cdda:	db25      	blt.n	800ce28 <quorem+0xf4>
 800cddc:	3501      	adds	r5, #1
 800cdde:	4630      	mov	r0, r6
 800cde0:	f04f 0c00 	mov.w	ip, #0
 800cde4:	f857 2b04 	ldr.w	r2, [r7], #4
 800cde8:	f8d0 e000 	ldr.w	lr, [r0]
 800cdec:	b293      	uxth	r3, r2
 800cdee:	ebac 0303 	sub.w	r3, ip, r3
 800cdf2:	0c12      	lsrs	r2, r2, #16
 800cdf4:	fa13 f38e 	uxtah	r3, r3, lr
 800cdf8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cdfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ce00:	b29b      	uxth	r3, r3
 800ce02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce06:	45b9      	cmp	r9, r7
 800ce08:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ce0c:	f840 3b04 	str.w	r3, [r0], #4
 800ce10:	d2e8      	bcs.n	800cde4 <quorem+0xb0>
 800ce12:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800ce16:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800ce1a:	b92a      	cbnz	r2, 800ce28 <quorem+0xf4>
 800ce1c:	3b04      	subs	r3, #4
 800ce1e:	429e      	cmp	r6, r3
 800ce20:	461a      	mov	r2, r3
 800ce22:	d30b      	bcc.n	800ce3c <quorem+0x108>
 800ce24:	f8c8 4010 	str.w	r4, [r8, #16]
 800ce28:	4628      	mov	r0, r5
 800ce2a:	b003      	add	sp, #12
 800ce2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce30:	6812      	ldr	r2, [r2, #0]
 800ce32:	3b04      	subs	r3, #4
 800ce34:	2a00      	cmp	r2, #0
 800ce36:	d1ca      	bne.n	800cdce <quorem+0x9a>
 800ce38:	3c01      	subs	r4, #1
 800ce3a:	e7c5      	b.n	800cdc8 <quorem+0x94>
 800ce3c:	6812      	ldr	r2, [r2, #0]
 800ce3e:	3b04      	subs	r3, #4
 800ce40:	2a00      	cmp	r2, #0
 800ce42:	d1ef      	bne.n	800ce24 <quorem+0xf0>
 800ce44:	3c01      	subs	r4, #1
 800ce46:	e7ea      	b.n	800ce1e <quorem+0xea>
 800ce48:	2000      	movs	r0, #0
 800ce4a:	e7ee      	b.n	800ce2a <quorem+0xf6>
 800ce4c:	0000      	movs	r0, r0
	...

0800ce50 <_dtoa_r>:
 800ce50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce54:	ec57 6b10 	vmov	r6, r7, d0
 800ce58:	b097      	sub	sp, #92	; 0x5c
 800ce5a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ce5c:	9106      	str	r1, [sp, #24]
 800ce5e:	4604      	mov	r4, r0
 800ce60:	920b      	str	r2, [sp, #44]	; 0x2c
 800ce62:	9312      	str	r3, [sp, #72]	; 0x48
 800ce64:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ce68:	e9cd 6700 	strd	r6, r7, [sp]
 800ce6c:	b93d      	cbnz	r5, 800ce7e <_dtoa_r+0x2e>
 800ce6e:	2010      	movs	r0, #16
 800ce70:	f7ff f992 	bl	800c198 <malloc>
 800ce74:	6260      	str	r0, [r4, #36]	; 0x24
 800ce76:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ce7a:	6005      	str	r5, [r0, #0]
 800ce7c:	60c5      	str	r5, [r0, #12]
 800ce7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce80:	6819      	ldr	r1, [r3, #0]
 800ce82:	b151      	cbz	r1, 800ce9a <_dtoa_r+0x4a>
 800ce84:	685a      	ldr	r2, [r3, #4]
 800ce86:	604a      	str	r2, [r1, #4]
 800ce88:	2301      	movs	r3, #1
 800ce8a:	4093      	lsls	r3, r2
 800ce8c:	608b      	str	r3, [r1, #8]
 800ce8e:	4620      	mov	r0, r4
 800ce90:	f000 fdda 	bl	800da48 <_Bfree>
 800ce94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce96:	2200      	movs	r2, #0
 800ce98:	601a      	str	r2, [r3, #0]
 800ce9a:	1e3b      	subs	r3, r7, #0
 800ce9c:	bfbb      	ittet	lt
 800ce9e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cea2:	9301      	strlt	r3, [sp, #4]
 800cea4:	2300      	movge	r3, #0
 800cea6:	2201      	movlt	r2, #1
 800cea8:	bfac      	ite	ge
 800ceaa:	f8c8 3000 	strge.w	r3, [r8]
 800ceae:	f8c8 2000 	strlt.w	r2, [r8]
 800ceb2:	4baf      	ldr	r3, [pc, #700]	; (800d170 <_dtoa_r+0x320>)
 800ceb4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ceb8:	ea33 0308 	bics.w	r3, r3, r8
 800cebc:	d114      	bne.n	800cee8 <_dtoa_r+0x98>
 800cebe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cec0:	f242 730f 	movw	r3, #9999	; 0x270f
 800cec4:	6013      	str	r3, [r2, #0]
 800cec6:	9b00      	ldr	r3, [sp, #0]
 800cec8:	b923      	cbnz	r3, 800ced4 <_dtoa_r+0x84>
 800ceca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800cece:	2800      	cmp	r0, #0
 800ced0:	f000 8542 	beq.w	800d958 <_dtoa_r+0xb08>
 800ced4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ced6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800d184 <_dtoa_r+0x334>
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	f000 8544 	beq.w	800d968 <_dtoa_r+0xb18>
 800cee0:	f10b 0303 	add.w	r3, fp, #3
 800cee4:	f000 bd3e 	b.w	800d964 <_dtoa_r+0xb14>
 800cee8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ceec:	2200      	movs	r2, #0
 800ceee:	2300      	movs	r3, #0
 800cef0:	4630      	mov	r0, r6
 800cef2:	4639      	mov	r1, r7
 800cef4:	f7f3 fe08 	bl	8000b08 <__aeabi_dcmpeq>
 800cef8:	4681      	mov	r9, r0
 800cefa:	b168      	cbz	r0, 800cf18 <_dtoa_r+0xc8>
 800cefc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cefe:	2301      	movs	r3, #1
 800cf00:	6013      	str	r3, [r2, #0]
 800cf02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	f000 8524 	beq.w	800d952 <_dtoa_r+0xb02>
 800cf0a:	4b9a      	ldr	r3, [pc, #616]	; (800d174 <_dtoa_r+0x324>)
 800cf0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cf0e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800cf12:	6013      	str	r3, [r2, #0]
 800cf14:	f000 bd28 	b.w	800d968 <_dtoa_r+0xb18>
 800cf18:	aa14      	add	r2, sp, #80	; 0x50
 800cf1a:	a915      	add	r1, sp, #84	; 0x54
 800cf1c:	ec47 6b10 	vmov	d0, r6, r7
 800cf20:	4620      	mov	r0, r4
 800cf22:	f000 ffea 	bl	800defa <__d2b>
 800cf26:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800cf2a:	9004      	str	r0, [sp, #16]
 800cf2c:	2d00      	cmp	r5, #0
 800cf2e:	d07c      	beq.n	800d02a <_dtoa_r+0x1da>
 800cf30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cf34:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800cf38:	46b2      	mov	sl, r6
 800cf3a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800cf3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cf42:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800cf46:	2200      	movs	r2, #0
 800cf48:	4b8b      	ldr	r3, [pc, #556]	; (800d178 <_dtoa_r+0x328>)
 800cf4a:	4650      	mov	r0, sl
 800cf4c:	4659      	mov	r1, fp
 800cf4e:	f7f3 f9bb 	bl	80002c8 <__aeabi_dsub>
 800cf52:	a381      	add	r3, pc, #516	; (adr r3, 800d158 <_dtoa_r+0x308>)
 800cf54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf58:	f7f3 fb6e 	bl	8000638 <__aeabi_dmul>
 800cf5c:	a380      	add	r3, pc, #512	; (adr r3, 800d160 <_dtoa_r+0x310>)
 800cf5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf62:	f7f3 f9b3 	bl	80002cc <__adddf3>
 800cf66:	4606      	mov	r6, r0
 800cf68:	4628      	mov	r0, r5
 800cf6a:	460f      	mov	r7, r1
 800cf6c:	f7f3 fafa 	bl	8000564 <__aeabi_i2d>
 800cf70:	a37d      	add	r3, pc, #500	; (adr r3, 800d168 <_dtoa_r+0x318>)
 800cf72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf76:	f7f3 fb5f 	bl	8000638 <__aeabi_dmul>
 800cf7a:	4602      	mov	r2, r0
 800cf7c:	460b      	mov	r3, r1
 800cf7e:	4630      	mov	r0, r6
 800cf80:	4639      	mov	r1, r7
 800cf82:	f7f3 f9a3 	bl	80002cc <__adddf3>
 800cf86:	4606      	mov	r6, r0
 800cf88:	460f      	mov	r7, r1
 800cf8a:	f7f3 fe05 	bl	8000b98 <__aeabi_d2iz>
 800cf8e:	2200      	movs	r2, #0
 800cf90:	4682      	mov	sl, r0
 800cf92:	2300      	movs	r3, #0
 800cf94:	4630      	mov	r0, r6
 800cf96:	4639      	mov	r1, r7
 800cf98:	f7f3 fdc0 	bl	8000b1c <__aeabi_dcmplt>
 800cf9c:	b148      	cbz	r0, 800cfb2 <_dtoa_r+0x162>
 800cf9e:	4650      	mov	r0, sl
 800cfa0:	f7f3 fae0 	bl	8000564 <__aeabi_i2d>
 800cfa4:	4632      	mov	r2, r6
 800cfa6:	463b      	mov	r3, r7
 800cfa8:	f7f3 fdae 	bl	8000b08 <__aeabi_dcmpeq>
 800cfac:	b908      	cbnz	r0, 800cfb2 <_dtoa_r+0x162>
 800cfae:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800cfb2:	f1ba 0f16 	cmp.w	sl, #22
 800cfb6:	d859      	bhi.n	800d06c <_dtoa_r+0x21c>
 800cfb8:	4970      	ldr	r1, [pc, #448]	; (800d17c <_dtoa_r+0x32c>)
 800cfba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800cfbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfc6:	f7f3 fdc7 	bl	8000b58 <__aeabi_dcmpgt>
 800cfca:	2800      	cmp	r0, #0
 800cfcc:	d050      	beq.n	800d070 <_dtoa_r+0x220>
 800cfce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	930f      	str	r3, [sp, #60]	; 0x3c
 800cfd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cfd8:	1b5d      	subs	r5, r3, r5
 800cfda:	f1b5 0801 	subs.w	r8, r5, #1
 800cfde:	bf49      	itett	mi
 800cfe0:	f1c5 0301 	rsbmi	r3, r5, #1
 800cfe4:	2300      	movpl	r3, #0
 800cfe6:	9305      	strmi	r3, [sp, #20]
 800cfe8:	f04f 0800 	movmi.w	r8, #0
 800cfec:	bf58      	it	pl
 800cfee:	9305      	strpl	r3, [sp, #20]
 800cff0:	f1ba 0f00 	cmp.w	sl, #0
 800cff4:	db3e      	blt.n	800d074 <_dtoa_r+0x224>
 800cff6:	2300      	movs	r3, #0
 800cff8:	44d0      	add	r8, sl
 800cffa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800cffe:	9307      	str	r3, [sp, #28]
 800d000:	9b06      	ldr	r3, [sp, #24]
 800d002:	2b09      	cmp	r3, #9
 800d004:	f200 8090 	bhi.w	800d128 <_dtoa_r+0x2d8>
 800d008:	2b05      	cmp	r3, #5
 800d00a:	bfc4      	itt	gt
 800d00c:	3b04      	subgt	r3, #4
 800d00e:	9306      	strgt	r3, [sp, #24]
 800d010:	9b06      	ldr	r3, [sp, #24]
 800d012:	f1a3 0302 	sub.w	r3, r3, #2
 800d016:	bfcc      	ite	gt
 800d018:	2500      	movgt	r5, #0
 800d01a:	2501      	movle	r5, #1
 800d01c:	2b03      	cmp	r3, #3
 800d01e:	f200 808f 	bhi.w	800d140 <_dtoa_r+0x2f0>
 800d022:	e8df f003 	tbb	[pc, r3]
 800d026:	7f7d      	.short	0x7f7d
 800d028:	7131      	.short	0x7131
 800d02a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800d02e:	441d      	add	r5, r3
 800d030:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800d034:	2820      	cmp	r0, #32
 800d036:	dd13      	ble.n	800d060 <_dtoa_r+0x210>
 800d038:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800d03c:	9b00      	ldr	r3, [sp, #0]
 800d03e:	fa08 f800 	lsl.w	r8, r8, r0
 800d042:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800d046:	fa23 f000 	lsr.w	r0, r3, r0
 800d04a:	ea48 0000 	orr.w	r0, r8, r0
 800d04e:	f7f3 fa79 	bl	8000544 <__aeabi_ui2d>
 800d052:	2301      	movs	r3, #1
 800d054:	4682      	mov	sl, r0
 800d056:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800d05a:	3d01      	subs	r5, #1
 800d05c:	9313      	str	r3, [sp, #76]	; 0x4c
 800d05e:	e772      	b.n	800cf46 <_dtoa_r+0xf6>
 800d060:	9b00      	ldr	r3, [sp, #0]
 800d062:	f1c0 0020 	rsb	r0, r0, #32
 800d066:	fa03 f000 	lsl.w	r0, r3, r0
 800d06a:	e7f0      	b.n	800d04e <_dtoa_r+0x1fe>
 800d06c:	2301      	movs	r3, #1
 800d06e:	e7b1      	b.n	800cfd4 <_dtoa_r+0x184>
 800d070:	900f      	str	r0, [sp, #60]	; 0x3c
 800d072:	e7b0      	b.n	800cfd6 <_dtoa_r+0x186>
 800d074:	9b05      	ldr	r3, [sp, #20]
 800d076:	eba3 030a 	sub.w	r3, r3, sl
 800d07a:	9305      	str	r3, [sp, #20]
 800d07c:	f1ca 0300 	rsb	r3, sl, #0
 800d080:	9307      	str	r3, [sp, #28]
 800d082:	2300      	movs	r3, #0
 800d084:	930e      	str	r3, [sp, #56]	; 0x38
 800d086:	e7bb      	b.n	800d000 <_dtoa_r+0x1b0>
 800d088:	2301      	movs	r3, #1
 800d08a:	930a      	str	r3, [sp, #40]	; 0x28
 800d08c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d08e:	2b00      	cmp	r3, #0
 800d090:	dd59      	ble.n	800d146 <_dtoa_r+0x2f6>
 800d092:	9302      	str	r3, [sp, #8]
 800d094:	4699      	mov	r9, r3
 800d096:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d098:	2200      	movs	r2, #0
 800d09a:	6072      	str	r2, [r6, #4]
 800d09c:	2204      	movs	r2, #4
 800d09e:	f102 0014 	add.w	r0, r2, #20
 800d0a2:	4298      	cmp	r0, r3
 800d0a4:	6871      	ldr	r1, [r6, #4]
 800d0a6:	d953      	bls.n	800d150 <_dtoa_r+0x300>
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	f000 fc99 	bl	800d9e0 <_Balloc>
 800d0ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d0b0:	6030      	str	r0, [r6, #0]
 800d0b2:	f1b9 0f0e 	cmp.w	r9, #14
 800d0b6:	f8d3 b000 	ldr.w	fp, [r3]
 800d0ba:	f200 80e6 	bhi.w	800d28a <_dtoa_r+0x43a>
 800d0be:	2d00      	cmp	r5, #0
 800d0c0:	f000 80e3 	beq.w	800d28a <_dtoa_r+0x43a>
 800d0c4:	ed9d 7b00 	vldr	d7, [sp]
 800d0c8:	f1ba 0f00 	cmp.w	sl, #0
 800d0cc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800d0d0:	dd74      	ble.n	800d1bc <_dtoa_r+0x36c>
 800d0d2:	4a2a      	ldr	r2, [pc, #168]	; (800d17c <_dtoa_r+0x32c>)
 800d0d4:	f00a 030f 	and.w	r3, sl, #15
 800d0d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d0dc:	ed93 7b00 	vldr	d7, [r3]
 800d0e0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800d0e4:	06f0      	lsls	r0, r6, #27
 800d0e6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800d0ea:	d565      	bpl.n	800d1b8 <_dtoa_r+0x368>
 800d0ec:	4b24      	ldr	r3, [pc, #144]	; (800d180 <_dtoa_r+0x330>)
 800d0ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d0f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d0f6:	f7f3 fbc9 	bl	800088c <__aeabi_ddiv>
 800d0fa:	e9cd 0100 	strd	r0, r1, [sp]
 800d0fe:	f006 060f 	and.w	r6, r6, #15
 800d102:	2503      	movs	r5, #3
 800d104:	4f1e      	ldr	r7, [pc, #120]	; (800d180 <_dtoa_r+0x330>)
 800d106:	e04c      	b.n	800d1a2 <_dtoa_r+0x352>
 800d108:	2301      	movs	r3, #1
 800d10a:	930a      	str	r3, [sp, #40]	; 0x28
 800d10c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d10e:	4453      	add	r3, sl
 800d110:	f103 0901 	add.w	r9, r3, #1
 800d114:	9302      	str	r3, [sp, #8]
 800d116:	464b      	mov	r3, r9
 800d118:	2b01      	cmp	r3, #1
 800d11a:	bfb8      	it	lt
 800d11c:	2301      	movlt	r3, #1
 800d11e:	e7ba      	b.n	800d096 <_dtoa_r+0x246>
 800d120:	2300      	movs	r3, #0
 800d122:	e7b2      	b.n	800d08a <_dtoa_r+0x23a>
 800d124:	2300      	movs	r3, #0
 800d126:	e7f0      	b.n	800d10a <_dtoa_r+0x2ba>
 800d128:	2501      	movs	r5, #1
 800d12a:	2300      	movs	r3, #0
 800d12c:	9306      	str	r3, [sp, #24]
 800d12e:	950a      	str	r5, [sp, #40]	; 0x28
 800d130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d134:	9302      	str	r3, [sp, #8]
 800d136:	4699      	mov	r9, r3
 800d138:	2200      	movs	r2, #0
 800d13a:	2312      	movs	r3, #18
 800d13c:	920b      	str	r2, [sp, #44]	; 0x2c
 800d13e:	e7aa      	b.n	800d096 <_dtoa_r+0x246>
 800d140:	2301      	movs	r3, #1
 800d142:	930a      	str	r3, [sp, #40]	; 0x28
 800d144:	e7f4      	b.n	800d130 <_dtoa_r+0x2e0>
 800d146:	2301      	movs	r3, #1
 800d148:	9302      	str	r3, [sp, #8]
 800d14a:	4699      	mov	r9, r3
 800d14c:	461a      	mov	r2, r3
 800d14e:	e7f5      	b.n	800d13c <_dtoa_r+0x2ec>
 800d150:	3101      	adds	r1, #1
 800d152:	6071      	str	r1, [r6, #4]
 800d154:	0052      	lsls	r2, r2, #1
 800d156:	e7a2      	b.n	800d09e <_dtoa_r+0x24e>
 800d158:	636f4361 	.word	0x636f4361
 800d15c:	3fd287a7 	.word	0x3fd287a7
 800d160:	8b60c8b3 	.word	0x8b60c8b3
 800d164:	3fc68a28 	.word	0x3fc68a28
 800d168:	509f79fb 	.word	0x509f79fb
 800d16c:	3fd34413 	.word	0x3fd34413
 800d170:	7ff00000 	.word	0x7ff00000
 800d174:	0800e779 	.word	0x0800e779
 800d178:	3ff80000 	.word	0x3ff80000
 800d17c:	0800e7d8 	.word	0x0800e7d8
 800d180:	0800e7b0 	.word	0x0800e7b0
 800d184:	0800e7a5 	.word	0x0800e7a5
 800d188:	07f1      	lsls	r1, r6, #31
 800d18a:	d508      	bpl.n	800d19e <_dtoa_r+0x34e>
 800d18c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d190:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d194:	f7f3 fa50 	bl	8000638 <__aeabi_dmul>
 800d198:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d19c:	3501      	adds	r5, #1
 800d19e:	1076      	asrs	r6, r6, #1
 800d1a0:	3708      	adds	r7, #8
 800d1a2:	2e00      	cmp	r6, #0
 800d1a4:	d1f0      	bne.n	800d188 <_dtoa_r+0x338>
 800d1a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d1aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d1ae:	f7f3 fb6d 	bl	800088c <__aeabi_ddiv>
 800d1b2:	e9cd 0100 	strd	r0, r1, [sp]
 800d1b6:	e01a      	b.n	800d1ee <_dtoa_r+0x39e>
 800d1b8:	2502      	movs	r5, #2
 800d1ba:	e7a3      	b.n	800d104 <_dtoa_r+0x2b4>
 800d1bc:	f000 80a0 	beq.w	800d300 <_dtoa_r+0x4b0>
 800d1c0:	f1ca 0600 	rsb	r6, sl, #0
 800d1c4:	4b9f      	ldr	r3, [pc, #636]	; (800d444 <_dtoa_r+0x5f4>)
 800d1c6:	4fa0      	ldr	r7, [pc, #640]	; (800d448 <_dtoa_r+0x5f8>)
 800d1c8:	f006 020f 	and.w	r2, r6, #15
 800d1cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d1d8:	f7f3 fa2e 	bl	8000638 <__aeabi_dmul>
 800d1dc:	e9cd 0100 	strd	r0, r1, [sp]
 800d1e0:	1136      	asrs	r6, r6, #4
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	2502      	movs	r5, #2
 800d1e6:	2e00      	cmp	r6, #0
 800d1e8:	d17f      	bne.n	800d2ea <_dtoa_r+0x49a>
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d1e1      	bne.n	800d1b2 <_dtoa_r+0x362>
 800d1ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	f000 8087 	beq.w	800d304 <_dtoa_r+0x4b4>
 800d1f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	4b93      	ldr	r3, [pc, #588]	; (800d44c <_dtoa_r+0x5fc>)
 800d1fe:	4630      	mov	r0, r6
 800d200:	4639      	mov	r1, r7
 800d202:	f7f3 fc8b 	bl	8000b1c <__aeabi_dcmplt>
 800d206:	2800      	cmp	r0, #0
 800d208:	d07c      	beq.n	800d304 <_dtoa_r+0x4b4>
 800d20a:	f1b9 0f00 	cmp.w	r9, #0
 800d20e:	d079      	beq.n	800d304 <_dtoa_r+0x4b4>
 800d210:	9b02      	ldr	r3, [sp, #8]
 800d212:	2b00      	cmp	r3, #0
 800d214:	dd35      	ble.n	800d282 <_dtoa_r+0x432>
 800d216:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800d21a:	9308      	str	r3, [sp, #32]
 800d21c:	4639      	mov	r1, r7
 800d21e:	2200      	movs	r2, #0
 800d220:	4b8b      	ldr	r3, [pc, #556]	; (800d450 <_dtoa_r+0x600>)
 800d222:	4630      	mov	r0, r6
 800d224:	f7f3 fa08 	bl	8000638 <__aeabi_dmul>
 800d228:	e9cd 0100 	strd	r0, r1, [sp]
 800d22c:	9f02      	ldr	r7, [sp, #8]
 800d22e:	3501      	adds	r5, #1
 800d230:	4628      	mov	r0, r5
 800d232:	f7f3 f997 	bl	8000564 <__aeabi_i2d>
 800d236:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d23a:	f7f3 f9fd 	bl	8000638 <__aeabi_dmul>
 800d23e:	2200      	movs	r2, #0
 800d240:	4b84      	ldr	r3, [pc, #528]	; (800d454 <_dtoa_r+0x604>)
 800d242:	f7f3 f843 	bl	80002cc <__adddf3>
 800d246:	4605      	mov	r5, r0
 800d248:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d24c:	2f00      	cmp	r7, #0
 800d24e:	d15d      	bne.n	800d30c <_dtoa_r+0x4bc>
 800d250:	2200      	movs	r2, #0
 800d252:	4b81      	ldr	r3, [pc, #516]	; (800d458 <_dtoa_r+0x608>)
 800d254:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d258:	f7f3 f836 	bl	80002c8 <__aeabi_dsub>
 800d25c:	462a      	mov	r2, r5
 800d25e:	4633      	mov	r3, r6
 800d260:	e9cd 0100 	strd	r0, r1, [sp]
 800d264:	f7f3 fc78 	bl	8000b58 <__aeabi_dcmpgt>
 800d268:	2800      	cmp	r0, #0
 800d26a:	f040 8288 	bne.w	800d77e <_dtoa_r+0x92e>
 800d26e:	462a      	mov	r2, r5
 800d270:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d274:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d278:	f7f3 fc50 	bl	8000b1c <__aeabi_dcmplt>
 800d27c:	2800      	cmp	r0, #0
 800d27e:	f040 827c 	bne.w	800d77a <_dtoa_r+0x92a>
 800d282:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d286:	e9cd 2300 	strd	r2, r3, [sp]
 800d28a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	f2c0 8150 	blt.w	800d532 <_dtoa_r+0x6e2>
 800d292:	f1ba 0f0e 	cmp.w	sl, #14
 800d296:	f300 814c 	bgt.w	800d532 <_dtoa_r+0x6e2>
 800d29a:	4b6a      	ldr	r3, [pc, #424]	; (800d444 <_dtoa_r+0x5f4>)
 800d29c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d2a0:	ed93 7b00 	vldr	d7, [r3]
 800d2a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d2ac:	f280 80d8 	bge.w	800d460 <_dtoa_r+0x610>
 800d2b0:	f1b9 0f00 	cmp.w	r9, #0
 800d2b4:	f300 80d4 	bgt.w	800d460 <_dtoa_r+0x610>
 800d2b8:	f040 825e 	bne.w	800d778 <_dtoa_r+0x928>
 800d2bc:	2200      	movs	r2, #0
 800d2be:	4b66      	ldr	r3, [pc, #408]	; (800d458 <_dtoa_r+0x608>)
 800d2c0:	ec51 0b17 	vmov	r0, r1, d7
 800d2c4:	f7f3 f9b8 	bl	8000638 <__aeabi_dmul>
 800d2c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d2cc:	f7f3 fc3a 	bl	8000b44 <__aeabi_dcmpge>
 800d2d0:	464f      	mov	r7, r9
 800d2d2:	464e      	mov	r6, r9
 800d2d4:	2800      	cmp	r0, #0
 800d2d6:	f040 8234 	bne.w	800d742 <_dtoa_r+0x8f2>
 800d2da:	2331      	movs	r3, #49	; 0x31
 800d2dc:	f10b 0501 	add.w	r5, fp, #1
 800d2e0:	f88b 3000 	strb.w	r3, [fp]
 800d2e4:	f10a 0a01 	add.w	sl, sl, #1
 800d2e8:	e22f      	b.n	800d74a <_dtoa_r+0x8fa>
 800d2ea:	07f2      	lsls	r2, r6, #31
 800d2ec:	d505      	bpl.n	800d2fa <_dtoa_r+0x4aa>
 800d2ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2f2:	f7f3 f9a1 	bl	8000638 <__aeabi_dmul>
 800d2f6:	3501      	adds	r5, #1
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	1076      	asrs	r6, r6, #1
 800d2fc:	3708      	adds	r7, #8
 800d2fe:	e772      	b.n	800d1e6 <_dtoa_r+0x396>
 800d300:	2502      	movs	r5, #2
 800d302:	e774      	b.n	800d1ee <_dtoa_r+0x39e>
 800d304:	f8cd a020 	str.w	sl, [sp, #32]
 800d308:	464f      	mov	r7, r9
 800d30a:	e791      	b.n	800d230 <_dtoa_r+0x3e0>
 800d30c:	4b4d      	ldr	r3, [pc, #308]	; (800d444 <_dtoa_r+0x5f4>)
 800d30e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d312:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d047      	beq.n	800d3ac <_dtoa_r+0x55c>
 800d31c:	4602      	mov	r2, r0
 800d31e:	460b      	mov	r3, r1
 800d320:	2000      	movs	r0, #0
 800d322:	494e      	ldr	r1, [pc, #312]	; (800d45c <_dtoa_r+0x60c>)
 800d324:	f7f3 fab2 	bl	800088c <__aeabi_ddiv>
 800d328:	462a      	mov	r2, r5
 800d32a:	4633      	mov	r3, r6
 800d32c:	f7f2 ffcc 	bl	80002c8 <__aeabi_dsub>
 800d330:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d334:	465d      	mov	r5, fp
 800d336:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d33a:	f7f3 fc2d 	bl	8000b98 <__aeabi_d2iz>
 800d33e:	4606      	mov	r6, r0
 800d340:	f7f3 f910 	bl	8000564 <__aeabi_i2d>
 800d344:	4602      	mov	r2, r0
 800d346:	460b      	mov	r3, r1
 800d348:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d34c:	f7f2 ffbc 	bl	80002c8 <__aeabi_dsub>
 800d350:	3630      	adds	r6, #48	; 0x30
 800d352:	f805 6b01 	strb.w	r6, [r5], #1
 800d356:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d35a:	e9cd 0100 	strd	r0, r1, [sp]
 800d35e:	f7f3 fbdd 	bl	8000b1c <__aeabi_dcmplt>
 800d362:	2800      	cmp	r0, #0
 800d364:	d163      	bne.n	800d42e <_dtoa_r+0x5de>
 800d366:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d36a:	2000      	movs	r0, #0
 800d36c:	4937      	ldr	r1, [pc, #220]	; (800d44c <_dtoa_r+0x5fc>)
 800d36e:	f7f2 ffab 	bl	80002c8 <__aeabi_dsub>
 800d372:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d376:	f7f3 fbd1 	bl	8000b1c <__aeabi_dcmplt>
 800d37a:	2800      	cmp	r0, #0
 800d37c:	f040 80b7 	bne.w	800d4ee <_dtoa_r+0x69e>
 800d380:	eba5 030b 	sub.w	r3, r5, fp
 800d384:	429f      	cmp	r7, r3
 800d386:	f77f af7c 	ble.w	800d282 <_dtoa_r+0x432>
 800d38a:	2200      	movs	r2, #0
 800d38c:	4b30      	ldr	r3, [pc, #192]	; (800d450 <_dtoa_r+0x600>)
 800d38e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d392:	f7f3 f951 	bl	8000638 <__aeabi_dmul>
 800d396:	2200      	movs	r2, #0
 800d398:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d39c:	4b2c      	ldr	r3, [pc, #176]	; (800d450 <_dtoa_r+0x600>)
 800d39e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d3a2:	f7f3 f949 	bl	8000638 <__aeabi_dmul>
 800d3a6:	e9cd 0100 	strd	r0, r1, [sp]
 800d3aa:	e7c4      	b.n	800d336 <_dtoa_r+0x4e6>
 800d3ac:	462a      	mov	r2, r5
 800d3ae:	4633      	mov	r3, r6
 800d3b0:	f7f3 f942 	bl	8000638 <__aeabi_dmul>
 800d3b4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d3b8:	eb0b 0507 	add.w	r5, fp, r7
 800d3bc:	465e      	mov	r6, fp
 800d3be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d3c2:	f7f3 fbe9 	bl	8000b98 <__aeabi_d2iz>
 800d3c6:	4607      	mov	r7, r0
 800d3c8:	f7f3 f8cc 	bl	8000564 <__aeabi_i2d>
 800d3cc:	3730      	adds	r7, #48	; 0x30
 800d3ce:	4602      	mov	r2, r0
 800d3d0:	460b      	mov	r3, r1
 800d3d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d3d6:	f7f2 ff77 	bl	80002c8 <__aeabi_dsub>
 800d3da:	f806 7b01 	strb.w	r7, [r6], #1
 800d3de:	42ae      	cmp	r6, r5
 800d3e0:	e9cd 0100 	strd	r0, r1, [sp]
 800d3e4:	f04f 0200 	mov.w	r2, #0
 800d3e8:	d126      	bne.n	800d438 <_dtoa_r+0x5e8>
 800d3ea:	4b1c      	ldr	r3, [pc, #112]	; (800d45c <_dtoa_r+0x60c>)
 800d3ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d3f0:	f7f2 ff6c 	bl	80002cc <__adddf3>
 800d3f4:	4602      	mov	r2, r0
 800d3f6:	460b      	mov	r3, r1
 800d3f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d3fc:	f7f3 fbac 	bl	8000b58 <__aeabi_dcmpgt>
 800d400:	2800      	cmp	r0, #0
 800d402:	d174      	bne.n	800d4ee <_dtoa_r+0x69e>
 800d404:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d408:	2000      	movs	r0, #0
 800d40a:	4914      	ldr	r1, [pc, #80]	; (800d45c <_dtoa_r+0x60c>)
 800d40c:	f7f2 ff5c 	bl	80002c8 <__aeabi_dsub>
 800d410:	4602      	mov	r2, r0
 800d412:	460b      	mov	r3, r1
 800d414:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d418:	f7f3 fb80 	bl	8000b1c <__aeabi_dcmplt>
 800d41c:	2800      	cmp	r0, #0
 800d41e:	f43f af30 	beq.w	800d282 <_dtoa_r+0x432>
 800d422:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d426:	2b30      	cmp	r3, #48	; 0x30
 800d428:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800d42c:	d002      	beq.n	800d434 <_dtoa_r+0x5e4>
 800d42e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d432:	e04a      	b.n	800d4ca <_dtoa_r+0x67a>
 800d434:	4615      	mov	r5, r2
 800d436:	e7f4      	b.n	800d422 <_dtoa_r+0x5d2>
 800d438:	4b05      	ldr	r3, [pc, #20]	; (800d450 <_dtoa_r+0x600>)
 800d43a:	f7f3 f8fd 	bl	8000638 <__aeabi_dmul>
 800d43e:	e9cd 0100 	strd	r0, r1, [sp]
 800d442:	e7bc      	b.n	800d3be <_dtoa_r+0x56e>
 800d444:	0800e7d8 	.word	0x0800e7d8
 800d448:	0800e7b0 	.word	0x0800e7b0
 800d44c:	3ff00000 	.word	0x3ff00000
 800d450:	40240000 	.word	0x40240000
 800d454:	401c0000 	.word	0x401c0000
 800d458:	40140000 	.word	0x40140000
 800d45c:	3fe00000 	.word	0x3fe00000
 800d460:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d464:	465d      	mov	r5, fp
 800d466:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d46a:	4630      	mov	r0, r6
 800d46c:	4639      	mov	r1, r7
 800d46e:	f7f3 fa0d 	bl	800088c <__aeabi_ddiv>
 800d472:	f7f3 fb91 	bl	8000b98 <__aeabi_d2iz>
 800d476:	4680      	mov	r8, r0
 800d478:	f7f3 f874 	bl	8000564 <__aeabi_i2d>
 800d47c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d480:	f7f3 f8da 	bl	8000638 <__aeabi_dmul>
 800d484:	4602      	mov	r2, r0
 800d486:	460b      	mov	r3, r1
 800d488:	4630      	mov	r0, r6
 800d48a:	4639      	mov	r1, r7
 800d48c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d490:	f7f2 ff1a 	bl	80002c8 <__aeabi_dsub>
 800d494:	f805 6b01 	strb.w	r6, [r5], #1
 800d498:	eba5 060b 	sub.w	r6, r5, fp
 800d49c:	45b1      	cmp	r9, r6
 800d49e:	4602      	mov	r2, r0
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	d139      	bne.n	800d518 <_dtoa_r+0x6c8>
 800d4a4:	f7f2 ff12 	bl	80002cc <__adddf3>
 800d4a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d4ac:	4606      	mov	r6, r0
 800d4ae:	460f      	mov	r7, r1
 800d4b0:	f7f3 fb52 	bl	8000b58 <__aeabi_dcmpgt>
 800d4b4:	b9c8      	cbnz	r0, 800d4ea <_dtoa_r+0x69a>
 800d4b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d4ba:	4630      	mov	r0, r6
 800d4bc:	4639      	mov	r1, r7
 800d4be:	f7f3 fb23 	bl	8000b08 <__aeabi_dcmpeq>
 800d4c2:	b110      	cbz	r0, 800d4ca <_dtoa_r+0x67a>
 800d4c4:	f018 0f01 	tst.w	r8, #1
 800d4c8:	d10f      	bne.n	800d4ea <_dtoa_r+0x69a>
 800d4ca:	9904      	ldr	r1, [sp, #16]
 800d4cc:	4620      	mov	r0, r4
 800d4ce:	f000 fabb 	bl	800da48 <_Bfree>
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d4d6:	702b      	strb	r3, [r5, #0]
 800d4d8:	f10a 0301 	add.w	r3, sl, #1
 800d4dc:	6013      	str	r3, [r2, #0]
 800d4de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	f000 8241 	beq.w	800d968 <_dtoa_r+0xb18>
 800d4e6:	601d      	str	r5, [r3, #0]
 800d4e8:	e23e      	b.n	800d968 <_dtoa_r+0xb18>
 800d4ea:	f8cd a020 	str.w	sl, [sp, #32]
 800d4ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d4f2:	2a39      	cmp	r2, #57	; 0x39
 800d4f4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800d4f8:	d108      	bne.n	800d50c <_dtoa_r+0x6bc>
 800d4fa:	459b      	cmp	fp, r3
 800d4fc:	d10a      	bne.n	800d514 <_dtoa_r+0x6c4>
 800d4fe:	9b08      	ldr	r3, [sp, #32]
 800d500:	3301      	adds	r3, #1
 800d502:	9308      	str	r3, [sp, #32]
 800d504:	2330      	movs	r3, #48	; 0x30
 800d506:	f88b 3000 	strb.w	r3, [fp]
 800d50a:	465b      	mov	r3, fp
 800d50c:	781a      	ldrb	r2, [r3, #0]
 800d50e:	3201      	adds	r2, #1
 800d510:	701a      	strb	r2, [r3, #0]
 800d512:	e78c      	b.n	800d42e <_dtoa_r+0x5de>
 800d514:	461d      	mov	r5, r3
 800d516:	e7ea      	b.n	800d4ee <_dtoa_r+0x69e>
 800d518:	2200      	movs	r2, #0
 800d51a:	4b9b      	ldr	r3, [pc, #620]	; (800d788 <_dtoa_r+0x938>)
 800d51c:	f7f3 f88c 	bl	8000638 <__aeabi_dmul>
 800d520:	2200      	movs	r2, #0
 800d522:	2300      	movs	r3, #0
 800d524:	4606      	mov	r6, r0
 800d526:	460f      	mov	r7, r1
 800d528:	f7f3 faee 	bl	8000b08 <__aeabi_dcmpeq>
 800d52c:	2800      	cmp	r0, #0
 800d52e:	d09a      	beq.n	800d466 <_dtoa_r+0x616>
 800d530:	e7cb      	b.n	800d4ca <_dtoa_r+0x67a>
 800d532:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d534:	2a00      	cmp	r2, #0
 800d536:	f000 808b 	beq.w	800d650 <_dtoa_r+0x800>
 800d53a:	9a06      	ldr	r2, [sp, #24]
 800d53c:	2a01      	cmp	r2, #1
 800d53e:	dc6e      	bgt.n	800d61e <_dtoa_r+0x7ce>
 800d540:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d542:	2a00      	cmp	r2, #0
 800d544:	d067      	beq.n	800d616 <_dtoa_r+0x7c6>
 800d546:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d54a:	9f07      	ldr	r7, [sp, #28]
 800d54c:	9d05      	ldr	r5, [sp, #20]
 800d54e:	9a05      	ldr	r2, [sp, #20]
 800d550:	2101      	movs	r1, #1
 800d552:	441a      	add	r2, r3
 800d554:	4620      	mov	r0, r4
 800d556:	9205      	str	r2, [sp, #20]
 800d558:	4498      	add	r8, r3
 800d55a:	f000 fb15 	bl	800db88 <__i2b>
 800d55e:	4606      	mov	r6, r0
 800d560:	2d00      	cmp	r5, #0
 800d562:	dd0c      	ble.n	800d57e <_dtoa_r+0x72e>
 800d564:	f1b8 0f00 	cmp.w	r8, #0
 800d568:	dd09      	ble.n	800d57e <_dtoa_r+0x72e>
 800d56a:	4545      	cmp	r5, r8
 800d56c:	9a05      	ldr	r2, [sp, #20]
 800d56e:	462b      	mov	r3, r5
 800d570:	bfa8      	it	ge
 800d572:	4643      	movge	r3, r8
 800d574:	1ad2      	subs	r2, r2, r3
 800d576:	9205      	str	r2, [sp, #20]
 800d578:	1aed      	subs	r5, r5, r3
 800d57a:	eba8 0803 	sub.w	r8, r8, r3
 800d57e:	9b07      	ldr	r3, [sp, #28]
 800d580:	b1eb      	cbz	r3, 800d5be <_dtoa_r+0x76e>
 800d582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d584:	2b00      	cmp	r3, #0
 800d586:	d067      	beq.n	800d658 <_dtoa_r+0x808>
 800d588:	b18f      	cbz	r7, 800d5ae <_dtoa_r+0x75e>
 800d58a:	4631      	mov	r1, r6
 800d58c:	463a      	mov	r2, r7
 800d58e:	4620      	mov	r0, r4
 800d590:	f000 fb9a 	bl	800dcc8 <__pow5mult>
 800d594:	9a04      	ldr	r2, [sp, #16]
 800d596:	4601      	mov	r1, r0
 800d598:	4606      	mov	r6, r0
 800d59a:	4620      	mov	r0, r4
 800d59c:	f000 fafd 	bl	800db9a <__multiply>
 800d5a0:	9904      	ldr	r1, [sp, #16]
 800d5a2:	9008      	str	r0, [sp, #32]
 800d5a4:	4620      	mov	r0, r4
 800d5a6:	f000 fa4f 	bl	800da48 <_Bfree>
 800d5aa:	9b08      	ldr	r3, [sp, #32]
 800d5ac:	9304      	str	r3, [sp, #16]
 800d5ae:	9b07      	ldr	r3, [sp, #28]
 800d5b0:	1bda      	subs	r2, r3, r7
 800d5b2:	d004      	beq.n	800d5be <_dtoa_r+0x76e>
 800d5b4:	9904      	ldr	r1, [sp, #16]
 800d5b6:	4620      	mov	r0, r4
 800d5b8:	f000 fb86 	bl	800dcc8 <__pow5mult>
 800d5bc:	9004      	str	r0, [sp, #16]
 800d5be:	2101      	movs	r1, #1
 800d5c0:	4620      	mov	r0, r4
 800d5c2:	f000 fae1 	bl	800db88 <__i2b>
 800d5c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d5c8:	4607      	mov	r7, r0
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	f000 81d0 	beq.w	800d970 <_dtoa_r+0xb20>
 800d5d0:	461a      	mov	r2, r3
 800d5d2:	4601      	mov	r1, r0
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	f000 fb77 	bl	800dcc8 <__pow5mult>
 800d5da:	9b06      	ldr	r3, [sp, #24]
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	4607      	mov	r7, r0
 800d5e0:	dc40      	bgt.n	800d664 <_dtoa_r+0x814>
 800d5e2:	9b00      	ldr	r3, [sp, #0]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d139      	bne.n	800d65c <_dtoa_r+0x80c>
 800d5e8:	9b01      	ldr	r3, [sp, #4]
 800d5ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d136      	bne.n	800d660 <_dtoa_r+0x810>
 800d5f2:	9b01      	ldr	r3, [sp, #4]
 800d5f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d5f8:	0d1b      	lsrs	r3, r3, #20
 800d5fa:	051b      	lsls	r3, r3, #20
 800d5fc:	b12b      	cbz	r3, 800d60a <_dtoa_r+0x7ba>
 800d5fe:	9b05      	ldr	r3, [sp, #20]
 800d600:	3301      	adds	r3, #1
 800d602:	9305      	str	r3, [sp, #20]
 800d604:	f108 0801 	add.w	r8, r8, #1
 800d608:	2301      	movs	r3, #1
 800d60a:	9307      	str	r3, [sp, #28]
 800d60c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d12a      	bne.n	800d668 <_dtoa_r+0x818>
 800d612:	2001      	movs	r0, #1
 800d614:	e030      	b.n	800d678 <_dtoa_r+0x828>
 800d616:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d618:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d61c:	e795      	b.n	800d54a <_dtoa_r+0x6fa>
 800d61e:	9b07      	ldr	r3, [sp, #28]
 800d620:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800d624:	42bb      	cmp	r3, r7
 800d626:	bfbf      	itttt	lt
 800d628:	9b07      	ldrlt	r3, [sp, #28]
 800d62a:	9707      	strlt	r7, [sp, #28]
 800d62c:	1afa      	sublt	r2, r7, r3
 800d62e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d630:	bfbb      	ittet	lt
 800d632:	189b      	addlt	r3, r3, r2
 800d634:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d636:	1bdf      	subge	r7, r3, r7
 800d638:	2700      	movlt	r7, #0
 800d63a:	f1b9 0f00 	cmp.w	r9, #0
 800d63e:	bfb5      	itete	lt
 800d640:	9b05      	ldrlt	r3, [sp, #20]
 800d642:	9d05      	ldrge	r5, [sp, #20]
 800d644:	eba3 0509 	sublt.w	r5, r3, r9
 800d648:	464b      	movge	r3, r9
 800d64a:	bfb8      	it	lt
 800d64c:	2300      	movlt	r3, #0
 800d64e:	e77e      	b.n	800d54e <_dtoa_r+0x6fe>
 800d650:	9f07      	ldr	r7, [sp, #28]
 800d652:	9d05      	ldr	r5, [sp, #20]
 800d654:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d656:	e783      	b.n	800d560 <_dtoa_r+0x710>
 800d658:	9a07      	ldr	r2, [sp, #28]
 800d65a:	e7ab      	b.n	800d5b4 <_dtoa_r+0x764>
 800d65c:	2300      	movs	r3, #0
 800d65e:	e7d4      	b.n	800d60a <_dtoa_r+0x7ba>
 800d660:	9b00      	ldr	r3, [sp, #0]
 800d662:	e7d2      	b.n	800d60a <_dtoa_r+0x7ba>
 800d664:	2300      	movs	r3, #0
 800d666:	9307      	str	r3, [sp, #28]
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d66e:	6918      	ldr	r0, [r3, #16]
 800d670:	f000 fa3c 	bl	800daec <__hi0bits>
 800d674:	f1c0 0020 	rsb	r0, r0, #32
 800d678:	4440      	add	r0, r8
 800d67a:	f010 001f 	ands.w	r0, r0, #31
 800d67e:	d047      	beq.n	800d710 <_dtoa_r+0x8c0>
 800d680:	f1c0 0320 	rsb	r3, r0, #32
 800d684:	2b04      	cmp	r3, #4
 800d686:	dd3b      	ble.n	800d700 <_dtoa_r+0x8b0>
 800d688:	9b05      	ldr	r3, [sp, #20]
 800d68a:	f1c0 001c 	rsb	r0, r0, #28
 800d68e:	4403      	add	r3, r0
 800d690:	9305      	str	r3, [sp, #20]
 800d692:	4405      	add	r5, r0
 800d694:	4480      	add	r8, r0
 800d696:	9b05      	ldr	r3, [sp, #20]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	dd05      	ble.n	800d6a8 <_dtoa_r+0x858>
 800d69c:	461a      	mov	r2, r3
 800d69e:	9904      	ldr	r1, [sp, #16]
 800d6a0:	4620      	mov	r0, r4
 800d6a2:	f000 fb5f 	bl	800dd64 <__lshift>
 800d6a6:	9004      	str	r0, [sp, #16]
 800d6a8:	f1b8 0f00 	cmp.w	r8, #0
 800d6ac:	dd05      	ble.n	800d6ba <_dtoa_r+0x86a>
 800d6ae:	4639      	mov	r1, r7
 800d6b0:	4642      	mov	r2, r8
 800d6b2:	4620      	mov	r0, r4
 800d6b4:	f000 fb56 	bl	800dd64 <__lshift>
 800d6b8:	4607      	mov	r7, r0
 800d6ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d6bc:	b353      	cbz	r3, 800d714 <_dtoa_r+0x8c4>
 800d6be:	4639      	mov	r1, r7
 800d6c0:	9804      	ldr	r0, [sp, #16]
 800d6c2:	f000 fba3 	bl	800de0c <__mcmp>
 800d6c6:	2800      	cmp	r0, #0
 800d6c8:	da24      	bge.n	800d714 <_dtoa_r+0x8c4>
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	220a      	movs	r2, #10
 800d6ce:	9904      	ldr	r1, [sp, #16]
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	f000 f9d0 	bl	800da76 <__multadd>
 800d6d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6d8:	9004      	str	r0, [sp, #16]
 800d6da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	f000 814d 	beq.w	800d97e <_dtoa_r+0xb2e>
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	4631      	mov	r1, r6
 800d6e8:	220a      	movs	r2, #10
 800d6ea:	4620      	mov	r0, r4
 800d6ec:	f000 f9c3 	bl	800da76 <__multadd>
 800d6f0:	9b02      	ldr	r3, [sp, #8]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	4606      	mov	r6, r0
 800d6f6:	dc4f      	bgt.n	800d798 <_dtoa_r+0x948>
 800d6f8:	9b06      	ldr	r3, [sp, #24]
 800d6fa:	2b02      	cmp	r3, #2
 800d6fc:	dd4c      	ble.n	800d798 <_dtoa_r+0x948>
 800d6fe:	e011      	b.n	800d724 <_dtoa_r+0x8d4>
 800d700:	d0c9      	beq.n	800d696 <_dtoa_r+0x846>
 800d702:	9a05      	ldr	r2, [sp, #20]
 800d704:	331c      	adds	r3, #28
 800d706:	441a      	add	r2, r3
 800d708:	9205      	str	r2, [sp, #20]
 800d70a:	441d      	add	r5, r3
 800d70c:	4498      	add	r8, r3
 800d70e:	e7c2      	b.n	800d696 <_dtoa_r+0x846>
 800d710:	4603      	mov	r3, r0
 800d712:	e7f6      	b.n	800d702 <_dtoa_r+0x8b2>
 800d714:	f1b9 0f00 	cmp.w	r9, #0
 800d718:	dc38      	bgt.n	800d78c <_dtoa_r+0x93c>
 800d71a:	9b06      	ldr	r3, [sp, #24]
 800d71c:	2b02      	cmp	r3, #2
 800d71e:	dd35      	ble.n	800d78c <_dtoa_r+0x93c>
 800d720:	f8cd 9008 	str.w	r9, [sp, #8]
 800d724:	9b02      	ldr	r3, [sp, #8]
 800d726:	b963      	cbnz	r3, 800d742 <_dtoa_r+0x8f2>
 800d728:	4639      	mov	r1, r7
 800d72a:	2205      	movs	r2, #5
 800d72c:	4620      	mov	r0, r4
 800d72e:	f000 f9a2 	bl	800da76 <__multadd>
 800d732:	4601      	mov	r1, r0
 800d734:	4607      	mov	r7, r0
 800d736:	9804      	ldr	r0, [sp, #16]
 800d738:	f000 fb68 	bl	800de0c <__mcmp>
 800d73c:	2800      	cmp	r0, #0
 800d73e:	f73f adcc 	bgt.w	800d2da <_dtoa_r+0x48a>
 800d742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d744:	465d      	mov	r5, fp
 800d746:	ea6f 0a03 	mvn.w	sl, r3
 800d74a:	f04f 0900 	mov.w	r9, #0
 800d74e:	4639      	mov	r1, r7
 800d750:	4620      	mov	r0, r4
 800d752:	f000 f979 	bl	800da48 <_Bfree>
 800d756:	2e00      	cmp	r6, #0
 800d758:	f43f aeb7 	beq.w	800d4ca <_dtoa_r+0x67a>
 800d75c:	f1b9 0f00 	cmp.w	r9, #0
 800d760:	d005      	beq.n	800d76e <_dtoa_r+0x91e>
 800d762:	45b1      	cmp	r9, r6
 800d764:	d003      	beq.n	800d76e <_dtoa_r+0x91e>
 800d766:	4649      	mov	r1, r9
 800d768:	4620      	mov	r0, r4
 800d76a:	f000 f96d 	bl	800da48 <_Bfree>
 800d76e:	4631      	mov	r1, r6
 800d770:	4620      	mov	r0, r4
 800d772:	f000 f969 	bl	800da48 <_Bfree>
 800d776:	e6a8      	b.n	800d4ca <_dtoa_r+0x67a>
 800d778:	2700      	movs	r7, #0
 800d77a:	463e      	mov	r6, r7
 800d77c:	e7e1      	b.n	800d742 <_dtoa_r+0x8f2>
 800d77e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d782:	463e      	mov	r6, r7
 800d784:	e5a9      	b.n	800d2da <_dtoa_r+0x48a>
 800d786:	bf00      	nop
 800d788:	40240000 	.word	0x40240000
 800d78c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d78e:	f8cd 9008 	str.w	r9, [sp, #8]
 800d792:	2b00      	cmp	r3, #0
 800d794:	f000 80fa 	beq.w	800d98c <_dtoa_r+0xb3c>
 800d798:	2d00      	cmp	r5, #0
 800d79a:	dd05      	ble.n	800d7a8 <_dtoa_r+0x958>
 800d79c:	4631      	mov	r1, r6
 800d79e:	462a      	mov	r2, r5
 800d7a0:	4620      	mov	r0, r4
 800d7a2:	f000 fadf 	bl	800dd64 <__lshift>
 800d7a6:	4606      	mov	r6, r0
 800d7a8:	9b07      	ldr	r3, [sp, #28]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d04c      	beq.n	800d848 <_dtoa_r+0x9f8>
 800d7ae:	6871      	ldr	r1, [r6, #4]
 800d7b0:	4620      	mov	r0, r4
 800d7b2:	f000 f915 	bl	800d9e0 <_Balloc>
 800d7b6:	6932      	ldr	r2, [r6, #16]
 800d7b8:	3202      	adds	r2, #2
 800d7ba:	4605      	mov	r5, r0
 800d7bc:	0092      	lsls	r2, r2, #2
 800d7be:	f106 010c 	add.w	r1, r6, #12
 800d7c2:	300c      	adds	r0, #12
 800d7c4:	f7fe fcf8 	bl	800c1b8 <memcpy>
 800d7c8:	2201      	movs	r2, #1
 800d7ca:	4629      	mov	r1, r5
 800d7cc:	4620      	mov	r0, r4
 800d7ce:	f000 fac9 	bl	800dd64 <__lshift>
 800d7d2:	9b00      	ldr	r3, [sp, #0]
 800d7d4:	f8cd b014 	str.w	fp, [sp, #20]
 800d7d8:	f003 0301 	and.w	r3, r3, #1
 800d7dc:	46b1      	mov	r9, r6
 800d7de:	9307      	str	r3, [sp, #28]
 800d7e0:	4606      	mov	r6, r0
 800d7e2:	4639      	mov	r1, r7
 800d7e4:	9804      	ldr	r0, [sp, #16]
 800d7e6:	f7ff faa5 	bl	800cd34 <quorem>
 800d7ea:	4649      	mov	r1, r9
 800d7ec:	4605      	mov	r5, r0
 800d7ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d7f2:	9804      	ldr	r0, [sp, #16]
 800d7f4:	f000 fb0a 	bl	800de0c <__mcmp>
 800d7f8:	4632      	mov	r2, r6
 800d7fa:	9000      	str	r0, [sp, #0]
 800d7fc:	4639      	mov	r1, r7
 800d7fe:	4620      	mov	r0, r4
 800d800:	f000 fb1e 	bl	800de40 <__mdiff>
 800d804:	68c3      	ldr	r3, [r0, #12]
 800d806:	4602      	mov	r2, r0
 800d808:	bb03      	cbnz	r3, 800d84c <_dtoa_r+0x9fc>
 800d80a:	4601      	mov	r1, r0
 800d80c:	9008      	str	r0, [sp, #32]
 800d80e:	9804      	ldr	r0, [sp, #16]
 800d810:	f000 fafc 	bl	800de0c <__mcmp>
 800d814:	9a08      	ldr	r2, [sp, #32]
 800d816:	4603      	mov	r3, r0
 800d818:	4611      	mov	r1, r2
 800d81a:	4620      	mov	r0, r4
 800d81c:	9308      	str	r3, [sp, #32]
 800d81e:	f000 f913 	bl	800da48 <_Bfree>
 800d822:	9b08      	ldr	r3, [sp, #32]
 800d824:	b9a3      	cbnz	r3, 800d850 <_dtoa_r+0xa00>
 800d826:	9a06      	ldr	r2, [sp, #24]
 800d828:	b992      	cbnz	r2, 800d850 <_dtoa_r+0xa00>
 800d82a:	9a07      	ldr	r2, [sp, #28]
 800d82c:	b982      	cbnz	r2, 800d850 <_dtoa_r+0xa00>
 800d82e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d832:	d029      	beq.n	800d888 <_dtoa_r+0xa38>
 800d834:	9b00      	ldr	r3, [sp, #0]
 800d836:	2b00      	cmp	r3, #0
 800d838:	dd01      	ble.n	800d83e <_dtoa_r+0x9ee>
 800d83a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d83e:	9b05      	ldr	r3, [sp, #20]
 800d840:	1c5d      	adds	r5, r3, #1
 800d842:	f883 8000 	strb.w	r8, [r3]
 800d846:	e782      	b.n	800d74e <_dtoa_r+0x8fe>
 800d848:	4630      	mov	r0, r6
 800d84a:	e7c2      	b.n	800d7d2 <_dtoa_r+0x982>
 800d84c:	2301      	movs	r3, #1
 800d84e:	e7e3      	b.n	800d818 <_dtoa_r+0x9c8>
 800d850:	9a00      	ldr	r2, [sp, #0]
 800d852:	2a00      	cmp	r2, #0
 800d854:	db04      	blt.n	800d860 <_dtoa_r+0xa10>
 800d856:	d125      	bne.n	800d8a4 <_dtoa_r+0xa54>
 800d858:	9a06      	ldr	r2, [sp, #24]
 800d85a:	bb1a      	cbnz	r2, 800d8a4 <_dtoa_r+0xa54>
 800d85c:	9a07      	ldr	r2, [sp, #28]
 800d85e:	bb0a      	cbnz	r2, 800d8a4 <_dtoa_r+0xa54>
 800d860:	2b00      	cmp	r3, #0
 800d862:	ddec      	ble.n	800d83e <_dtoa_r+0x9ee>
 800d864:	2201      	movs	r2, #1
 800d866:	9904      	ldr	r1, [sp, #16]
 800d868:	4620      	mov	r0, r4
 800d86a:	f000 fa7b 	bl	800dd64 <__lshift>
 800d86e:	4639      	mov	r1, r7
 800d870:	9004      	str	r0, [sp, #16]
 800d872:	f000 facb 	bl	800de0c <__mcmp>
 800d876:	2800      	cmp	r0, #0
 800d878:	dc03      	bgt.n	800d882 <_dtoa_r+0xa32>
 800d87a:	d1e0      	bne.n	800d83e <_dtoa_r+0x9ee>
 800d87c:	f018 0f01 	tst.w	r8, #1
 800d880:	d0dd      	beq.n	800d83e <_dtoa_r+0x9ee>
 800d882:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d886:	d1d8      	bne.n	800d83a <_dtoa_r+0x9ea>
 800d888:	9b05      	ldr	r3, [sp, #20]
 800d88a:	9a05      	ldr	r2, [sp, #20]
 800d88c:	1c5d      	adds	r5, r3, #1
 800d88e:	2339      	movs	r3, #57	; 0x39
 800d890:	7013      	strb	r3, [r2, #0]
 800d892:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d896:	2b39      	cmp	r3, #57	; 0x39
 800d898:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800d89c:	d04f      	beq.n	800d93e <_dtoa_r+0xaee>
 800d89e:	3301      	adds	r3, #1
 800d8a0:	7013      	strb	r3, [r2, #0]
 800d8a2:	e754      	b.n	800d74e <_dtoa_r+0x8fe>
 800d8a4:	9a05      	ldr	r2, [sp, #20]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	f102 0501 	add.w	r5, r2, #1
 800d8ac:	dd06      	ble.n	800d8bc <_dtoa_r+0xa6c>
 800d8ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d8b2:	d0e9      	beq.n	800d888 <_dtoa_r+0xa38>
 800d8b4:	f108 0801 	add.w	r8, r8, #1
 800d8b8:	9b05      	ldr	r3, [sp, #20]
 800d8ba:	e7c2      	b.n	800d842 <_dtoa_r+0x9f2>
 800d8bc:	9a02      	ldr	r2, [sp, #8]
 800d8be:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d8c2:	eba5 030b 	sub.w	r3, r5, fp
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d021      	beq.n	800d90e <_dtoa_r+0xabe>
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	220a      	movs	r2, #10
 800d8ce:	9904      	ldr	r1, [sp, #16]
 800d8d0:	4620      	mov	r0, r4
 800d8d2:	f000 f8d0 	bl	800da76 <__multadd>
 800d8d6:	45b1      	cmp	r9, r6
 800d8d8:	9004      	str	r0, [sp, #16]
 800d8da:	f04f 0300 	mov.w	r3, #0
 800d8de:	f04f 020a 	mov.w	r2, #10
 800d8e2:	4649      	mov	r1, r9
 800d8e4:	4620      	mov	r0, r4
 800d8e6:	d105      	bne.n	800d8f4 <_dtoa_r+0xaa4>
 800d8e8:	f000 f8c5 	bl	800da76 <__multadd>
 800d8ec:	4681      	mov	r9, r0
 800d8ee:	4606      	mov	r6, r0
 800d8f0:	9505      	str	r5, [sp, #20]
 800d8f2:	e776      	b.n	800d7e2 <_dtoa_r+0x992>
 800d8f4:	f000 f8bf 	bl	800da76 <__multadd>
 800d8f8:	4631      	mov	r1, r6
 800d8fa:	4681      	mov	r9, r0
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	220a      	movs	r2, #10
 800d900:	4620      	mov	r0, r4
 800d902:	f000 f8b8 	bl	800da76 <__multadd>
 800d906:	4606      	mov	r6, r0
 800d908:	e7f2      	b.n	800d8f0 <_dtoa_r+0xaa0>
 800d90a:	f04f 0900 	mov.w	r9, #0
 800d90e:	2201      	movs	r2, #1
 800d910:	9904      	ldr	r1, [sp, #16]
 800d912:	4620      	mov	r0, r4
 800d914:	f000 fa26 	bl	800dd64 <__lshift>
 800d918:	4639      	mov	r1, r7
 800d91a:	9004      	str	r0, [sp, #16]
 800d91c:	f000 fa76 	bl	800de0c <__mcmp>
 800d920:	2800      	cmp	r0, #0
 800d922:	dcb6      	bgt.n	800d892 <_dtoa_r+0xa42>
 800d924:	d102      	bne.n	800d92c <_dtoa_r+0xadc>
 800d926:	f018 0f01 	tst.w	r8, #1
 800d92a:	d1b2      	bne.n	800d892 <_dtoa_r+0xa42>
 800d92c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d930:	2b30      	cmp	r3, #48	; 0x30
 800d932:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800d936:	f47f af0a 	bne.w	800d74e <_dtoa_r+0x8fe>
 800d93a:	4615      	mov	r5, r2
 800d93c:	e7f6      	b.n	800d92c <_dtoa_r+0xadc>
 800d93e:	4593      	cmp	fp, r2
 800d940:	d105      	bne.n	800d94e <_dtoa_r+0xafe>
 800d942:	2331      	movs	r3, #49	; 0x31
 800d944:	f10a 0a01 	add.w	sl, sl, #1
 800d948:	f88b 3000 	strb.w	r3, [fp]
 800d94c:	e6ff      	b.n	800d74e <_dtoa_r+0x8fe>
 800d94e:	4615      	mov	r5, r2
 800d950:	e79f      	b.n	800d892 <_dtoa_r+0xa42>
 800d952:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d9b8 <_dtoa_r+0xb68>
 800d956:	e007      	b.n	800d968 <_dtoa_r+0xb18>
 800d958:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d95a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d9bc <_dtoa_r+0xb6c>
 800d95e:	b11b      	cbz	r3, 800d968 <_dtoa_r+0xb18>
 800d960:	f10b 0308 	add.w	r3, fp, #8
 800d964:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d966:	6013      	str	r3, [r2, #0]
 800d968:	4658      	mov	r0, fp
 800d96a:	b017      	add	sp, #92	; 0x5c
 800d96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d970:	9b06      	ldr	r3, [sp, #24]
 800d972:	2b01      	cmp	r3, #1
 800d974:	f77f ae35 	ble.w	800d5e2 <_dtoa_r+0x792>
 800d978:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d97a:	9307      	str	r3, [sp, #28]
 800d97c:	e649      	b.n	800d612 <_dtoa_r+0x7c2>
 800d97e:	9b02      	ldr	r3, [sp, #8]
 800d980:	2b00      	cmp	r3, #0
 800d982:	dc03      	bgt.n	800d98c <_dtoa_r+0xb3c>
 800d984:	9b06      	ldr	r3, [sp, #24]
 800d986:	2b02      	cmp	r3, #2
 800d988:	f73f aecc 	bgt.w	800d724 <_dtoa_r+0x8d4>
 800d98c:	465d      	mov	r5, fp
 800d98e:	4639      	mov	r1, r7
 800d990:	9804      	ldr	r0, [sp, #16]
 800d992:	f7ff f9cf 	bl	800cd34 <quorem>
 800d996:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d99a:	f805 8b01 	strb.w	r8, [r5], #1
 800d99e:	9a02      	ldr	r2, [sp, #8]
 800d9a0:	eba5 030b 	sub.w	r3, r5, fp
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	ddb0      	ble.n	800d90a <_dtoa_r+0xaba>
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	220a      	movs	r2, #10
 800d9ac:	9904      	ldr	r1, [sp, #16]
 800d9ae:	4620      	mov	r0, r4
 800d9b0:	f000 f861 	bl	800da76 <__multadd>
 800d9b4:	9004      	str	r0, [sp, #16]
 800d9b6:	e7ea      	b.n	800d98e <_dtoa_r+0xb3e>
 800d9b8:	0800e778 	.word	0x0800e778
 800d9bc:	0800e79c 	.word	0x0800e79c

0800d9c0 <_localeconv_r>:
 800d9c0:	4b04      	ldr	r3, [pc, #16]	; (800d9d4 <_localeconv_r+0x14>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	6a18      	ldr	r0, [r3, #32]
 800d9c6:	4b04      	ldr	r3, [pc, #16]	; (800d9d8 <_localeconv_r+0x18>)
 800d9c8:	2800      	cmp	r0, #0
 800d9ca:	bf08      	it	eq
 800d9cc:	4618      	moveq	r0, r3
 800d9ce:	30f0      	adds	r0, #240	; 0xf0
 800d9d0:	4770      	bx	lr
 800d9d2:	bf00      	nop
 800d9d4:	20000010 	.word	0x20000010
 800d9d8:	20000074 	.word	0x20000074

0800d9dc <__malloc_lock>:
 800d9dc:	4770      	bx	lr

0800d9de <__malloc_unlock>:
 800d9de:	4770      	bx	lr

0800d9e0 <_Balloc>:
 800d9e0:	b570      	push	{r4, r5, r6, lr}
 800d9e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d9e4:	4604      	mov	r4, r0
 800d9e6:	460e      	mov	r6, r1
 800d9e8:	b93d      	cbnz	r5, 800d9fa <_Balloc+0x1a>
 800d9ea:	2010      	movs	r0, #16
 800d9ec:	f7fe fbd4 	bl	800c198 <malloc>
 800d9f0:	6260      	str	r0, [r4, #36]	; 0x24
 800d9f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d9f6:	6005      	str	r5, [r0, #0]
 800d9f8:	60c5      	str	r5, [r0, #12]
 800d9fa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d9fc:	68eb      	ldr	r3, [r5, #12]
 800d9fe:	b183      	cbz	r3, 800da22 <_Balloc+0x42>
 800da00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da02:	68db      	ldr	r3, [r3, #12]
 800da04:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800da08:	b9b8      	cbnz	r0, 800da3a <_Balloc+0x5a>
 800da0a:	2101      	movs	r1, #1
 800da0c:	fa01 f506 	lsl.w	r5, r1, r6
 800da10:	1d6a      	adds	r2, r5, #5
 800da12:	0092      	lsls	r2, r2, #2
 800da14:	4620      	mov	r0, r4
 800da16:	f000 fabf 	bl	800df98 <_calloc_r>
 800da1a:	b160      	cbz	r0, 800da36 <_Balloc+0x56>
 800da1c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800da20:	e00e      	b.n	800da40 <_Balloc+0x60>
 800da22:	2221      	movs	r2, #33	; 0x21
 800da24:	2104      	movs	r1, #4
 800da26:	4620      	mov	r0, r4
 800da28:	f000 fab6 	bl	800df98 <_calloc_r>
 800da2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da2e:	60e8      	str	r0, [r5, #12]
 800da30:	68db      	ldr	r3, [r3, #12]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d1e4      	bne.n	800da00 <_Balloc+0x20>
 800da36:	2000      	movs	r0, #0
 800da38:	bd70      	pop	{r4, r5, r6, pc}
 800da3a:	6802      	ldr	r2, [r0, #0]
 800da3c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800da40:	2300      	movs	r3, #0
 800da42:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800da46:	e7f7      	b.n	800da38 <_Balloc+0x58>

0800da48 <_Bfree>:
 800da48:	b570      	push	{r4, r5, r6, lr}
 800da4a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800da4c:	4606      	mov	r6, r0
 800da4e:	460d      	mov	r5, r1
 800da50:	b93c      	cbnz	r4, 800da62 <_Bfree+0x1a>
 800da52:	2010      	movs	r0, #16
 800da54:	f7fe fba0 	bl	800c198 <malloc>
 800da58:	6270      	str	r0, [r6, #36]	; 0x24
 800da5a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da5e:	6004      	str	r4, [r0, #0]
 800da60:	60c4      	str	r4, [r0, #12]
 800da62:	b13d      	cbz	r5, 800da74 <_Bfree+0x2c>
 800da64:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800da66:	686a      	ldr	r2, [r5, #4]
 800da68:	68db      	ldr	r3, [r3, #12]
 800da6a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800da6e:	6029      	str	r1, [r5, #0]
 800da70:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800da74:	bd70      	pop	{r4, r5, r6, pc}

0800da76 <__multadd>:
 800da76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da7a:	690d      	ldr	r5, [r1, #16]
 800da7c:	461f      	mov	r7, r3
 800da7e:	4606      	mov	r6, r0
 800da80:	460c      	mov	r4, r1
 800da82:	f101 0c14 	add.w	ip, r1, #20
 800da86:	2300      	movs	r3, #0
 800da88:	f8dc 0000 	ldr.w	r0, [ip]
 800da8c:	b281      	uxth	r1, r0
 800da8e:	fb02 7101 	mla	r1, r2, r1, r7
 800da92:	0c0f      	lsrs	r7, r1, #16
 800da94:	0c00      	lsrs	r0, r0, #16
 800da96:	fb02 7000 	mla	r0, r2, r0, r7
 800da9a:	b289      	uxth	r1, r1
 800da9c:	3301      	adds	r3, #1
 800da9e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800daa2:	429d      	cmp	r5, r3
 800daa4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800daa8:	f84c 1b04 	str.w	r1, [ip], #4
 800daac:	dcec      	bgt.n	800da88 <__multadd+0x12>
 800daae:	b1d7      	cbz	r7, 800dae6 <__multadd+0x70>
 800dab0:	68a3      	ldr	r3, [r4, #8]
 800dab2:	42ab      	cmp	r3, r5
 800dab4:	dc12      	bgt.n	800dadc <__multadd+0x66>
 800dab6:	6861      	ldr	r1, [r4, #4]
 800dab8:	4630      	mov	r0, r6
 800daba:	3101      	adds	r1, #1
 800dabc:	f7ff ff90 	bl	800d9e0 <_Balloc>
 800dac0:	6922      	ldr	r2, [r4, #16]
 800dac2:	3202      	adds	r2, #2
 800dac4:	f104 010c 	add.w	r1, r4, #12
 800dac8:	4680      	mov	r8, r0
 800daca:	0092      	lsls	r2, r2, #2
 800dacc:	300c      	adds	r0, #12
 800dace:	f7fe fb73 	bl	800c1b8 <memcpy>
 800dad2:	4621      	mov	r1, r4
 800dad4:	4630      	mov	r0, r6
 800dad6:	f7ff ffb7 	bl	800da48 <_Bfree>
 800dada:	4644      	mov	r4, r8
 800dadc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dae0:	3501      	adds	r5, #1
 800dae2:	615f      	str	r7, [r3, #20]
 800dae4:	6125      	str	r5, [r4, #16]
 800dae6:	4620      	mov	r0, r4
 800dae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800daec <__hi0bits>:
 800daec:	0c02      	lsrs	r2, r0, #16
 800daee:	0412      	lsls	r2, r2, #16
 800daf0:	4603      	mov	r3, r0
 800daf2:	b9b2      	cbnz	r2, 800db22 <__hi0bits+0x36>
 800daf4:	0403      	lsls	r3, r0, #16
 800daf6:	2010      	movs	r0, #16
 800daf8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800dafc:	bf04      	itt	eq
 800dafe:	021b      	lsleq	r3, r3, #8
 800db00:	3008      	addeq	r0, #8
 800db02:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800db06:	bf04      	itt	eq
 800db08:	011b      	lsleq	r3, r3, #4
 800db0a:	3004      	addeq	r0, #4
 800db0c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800db10:	bf04      	itt	eq
 800db12:	009b      	lsleq	r3, r3, #2
 800db14:	3002      	addeq	r0, #2
 800db16:	2b00      	cmp	r3, #0
 800db18:	db06      	blt.n	800db28 <__hi0bits+0x3c>
 800db1a:	005b      	lsls	r3, r3, #1
 800db1c:	d503      	bpl.n	800db26 <__hi0bits+0x3a>
 800db1e:	3001      	adds	r0, #1
 800db20:	4770      	bx	lr
 800db22:	2000      	movs	r0, #0
 800db24:	e7e8      	b.n	800daf8 <__hi0bits+0xc>
 800db26:	2020      	movs	r0, #32
 800db28:	4770      	bx	lr

0800db2a <__lo0bits>:
 800db2a:	6803      	ldr	r3, [r0, #0]
 800db2c:	f013 0207 	ands.w	r2, r3, #7
 800db30:	4601      	mov	r1, r0
 800db32:	d00b      	beq.n	800db4c <__lo0bits+0x22>
 800db34:	07da      	lsls	r2, r3, #31
 800db36:	d423      	bmi.n	800db80 <__lo0bits+0x56>
 800db38:	0798      	lsls	r0, r3, #30
 800db3a:	bf49      	itett	mi
 800db3c:	085b      	lsrmi	r3, r3, #1
 800db3e:	089b      	lsrpl	r3, r3, #2
 800db40:	2001      	movmi	r0, #1
 800db42:	600b      	strmi	r3, [r1, #0]
 800db44:	bf5c      	itt	pl
 800db46:	600b      	strpl	r3, [r1, #0]
 800db48:	2002      	movpl	r0, #2
 800db4a:	4770      	bx	lr
 800db4c:	b298      	uxth	r0, r3
 800db4e:	b9a8      	cbnz	r0, 800db7c <__lo0bits+0x52>
 800db50:	0c1b      	lsrs	r3, r3, #16
 800db52:	2010      	movs	r0, #16
 800db54:	f013 0fff 	tst.w	r3, #255	; 0xff
 800db58:	bf04      	itt	eq
 800db5a:	0a1b      	lsreq	r3, r3, #8
 800db5c:	3008      	addeq	r0, #8
 800db5e:	071a      	lsls	r2, r3, #28
 800db60:	bf04      	itt	eq
 800db62:	091b      	lsreq	r3, r3, #4
 800db64:	3004      	addeq	r0, #4
 800db66:	079a      	lsls	r2, r3, #30
 800db68:	bf04      	itt	eq
 800db6a:	089b      	lsreq	r3, r3, #2
 800db6c:	3002      	addeq	r0, #2
 800db6e:	07da      	lsls	r2, r3, #31
 800db70:	d402      	bmi.n	800db78 <__lo0bits+0x4e>
 800db72:	085b      	lsrs	r3, r3, #1
 800db74:	d006      	beq.n	800db84 <__lo0bits+0x5a>
 800db76:	3001      	adds	r0, #1
 800db78:	600b      	str	r3, [r1, #0]
 800db7a:	4770      	bx	lr
 800db7c:	4610      	mov	r0, r2
 800db7e:	e7e9      	b.n	800db54 <__lo0bits+0x2a>
 800db80:	2000      	movs	r0, #0
 800db82:	4770      	bx	lr
 800db84:	2020      	movs	r0, #32
 800db86:	4770      	bx	lr

0800db88 <__i2b>:
 800db88:	b510      	push	{r4, lr}
 800db8a:	460c      	mov	r4, r1
 800db8c:	2101      	movs	r1, #1
 800db8e:	f7ff ff27 	bl	800d9e0 <_Balloc>
 800db92:	2201      	movs	r2, #1
 800db94:	6144      	str	r4, [r0, #20]
 800db96:	6102      	str	r2, [r0, #16]
 800db98:	bd10      	pop	{r4, pc}

0800db9a <__multiply>:
 800db9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db9e:	4614      	mov	r4, r2
 800dba0:	690a      	ldr	r2, [r1, #16]
 800dba2:	6923      	ldr	r3, [r4, #16]
 800dba4:	429a      	cmp	r2, r3
 800dba6:	bfb8      	it	lt
 800dba8:	460b      	movlt	r3, r1
 800dbaa:	4688      	mov	r8, r1
 800dbac:	bfbc      	itt	lt
 800dbae:	46a0      	movlt	r8, r4
 800dbb0:	461c      	movlt	r4, r3
 800dbb2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dbb6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800dbba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dbbe:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dbc2:	eb07 0609 	add.w	r6, r7, r9
 800dbc6:	42b3      	cmp	r3, r6
 800dbc8:	bfb8      	it	lt
 800dbca:	3101      	addlt	r1, #1
 800dbcc:	f7ff ff08 	bl	800d9e0 <_Balloc>
 800dbd0:	f100 0514 	add.w	r5, r0, #20
 800dbd4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800dbd8:	462b      	mov	r3, r5
 800dbda:	2200      	movs	r2, #0
 800dbdc:	4573      	cmp	r3, lr
 800dbde:	d316      	bcc.n	800dc0e <__multiply+0x74>
 800dbe0:	f104 0214 	add.w	r2, r4, #20
 800dbe4:	f108 0114 	add.w	r1, r8, #20
 800dbe8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800dbec:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800dbf0:	9300      	str	r3, [sp, #0]
 800dbf2:	9b00      	ldr	r3, [sp, #0]
 800dbf4:	9201      	str	r2, [sp, #4]
 800dbf6:	4293      	cmp	r3, r2
 800dbf8:	d80c      	bhi.n	800dc14 <__multiply+0x7a>
 800dbfa:	2e00      	cmp	r6, #0
 800dbfc:	dd03      	ble.n	800dc06 <__multiply+0x6c>
 800dbfe:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d05d      	beq.n	800dcc2 <__multiply+0x128>
 800dc06:	6106      	str	r6, [r0, #16]
 800dc08:	b003      	add	sp, #12
 800dc0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc0e:	f843 2b04 	str.w	r2, [r3], #4
 800dc12:	e7e3      	b.n	800dbdc <__multiply+0x42>
 800dc14:	f8b2 b000 	ldrh.w	fp, [r2]
 800dc18:	f1bb 0f00 	cmp.w	fp, #0
 800dc1c:	d023      	beq.n	800dc66 <__multiply+0xcc>
 800dc1e:	4689      	mov	r9, r1
 800dc20:	46ac      	mov	ip, r5
 800dc22:	f04f 0800 	mov.w	r8, #0
 800dc26:	f859 4b04 	ldr.w	r4, [r9], #4
 800dc2a:	f8dc a000 	ldr.w	sl, [ip]
 800dc2e:	b2a3      	uxth	r3, r4
 800dc30:	fa1f fa8a 	uxth.w	sl, sl
 800dc34:	fb0b a303 	mla	r3, fp, r3, sl
 800dc38:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800dc3c:	f8dc 4000 	ldr.w	r4, [ip]
 800dc40:	4443      	add	r3, r8
 800dc42:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800dc46:	fb0b 840a 	mla	r4, fp, sl, r8
 800dc4a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800dc4e:	46e2      	mov	sl, ip
 800dc50:	b29b      	uxth	r3, r3
 800dc52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800dc56:	454f      	cmp	r7, r9
 800dc58:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800dc5c:	f84a 3b04 	str.w	r3, [sl], #4
 800dc60:	d82b      	bhi.n	800dcba <__multiply+0x120>
 800dc62:	f8cc 8004 	str.w	r8, [ip, #4]
 800dc66:	9b01      	ldr	r3, [sp, #4]
 800dc68:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800dc6c:	3204      	adds	r2, #4
 800dc6e:	f1ba 0f00 	cmp.w	sl, #0
 800dc72:	d020      	beq.n	800dcb6 <__multiply+0x11c>
 800dc74:	682b      	ldr	r3, [r5, #0]
 800dc76:	4689      	mov	r9, r1
 800dc78:	46a8      	mov	r8, r5
 800dc7a:	f04f 0b00 	mov.w	fp, #0
 800dc7e:	f8b9 c000 	ldrh.w	ip, [r9]
 800dc82:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800dc86:	fb0a 440c 	mla	r4, sl, ip, r4
 800dc8a:	445c      	add	r4, fp
 800dc8c:	46c4      	mov	ip, r8
 800dc8e:	b29b      	uxth	r3, r3
 800dc90:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800dc94:	f84c 3b04 	str.w	r3, [ip], #4
 800dc98:	f859 3b04 	ldr.w	r3, [r9], #4
 800dc9c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800dca0:	0c1b      	lsrs	r3, r3, #16
 800dca2:	fb0a b303 	mla	r3, sl, r3, fp
 800dca6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800dcaa:	454f      	cmp	r7, r9
 800dcac:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800dcb0:	d805      	bhi.n	800dcbe <__multiply+0x124>
 800dcb2:	f8c8 3004 	str.w	r3, [r8, #4]
 800dcb6:	3504      	adds	r5, #4
 800dcb8:	e79b      	b.n	800dbf2 <__multiply+0x58>
 800dcba:	46d4      	mov	ip, sl
 800dcbc:	e7b3      	b.n	800dc26 <__multiply+0x8c>
 800dcbe:	46e0      	mov	r8, ip
 800dcc0:	e7dd      	b.n	800dc7e <__multiply+0xe4>
 800dcc2:	3e01      	subs	r6, #1
 800dcc4:	e799      	b.n	800dbfa <__multiply+0x60>
	...

0800dcc8 <__pow5mult>:
 800dcc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dccc:	4615      	mov	r5, r2
 800dcce:	f012 0203 	ands.w	r2, r2, #3
 800dcd2:	4606      	mov	r6, r0
 800dcd4:	460f      	mov	r7, r1
 800dcd6:	d007      	beq.n	800dce8 <__pow5mult+0x20>
 800dcd8:	3a01      	subs	r2, #1
 800dcda:	4c21      	ldr	r4, [pc, #132]	; (800dd60 <__pow5mult+0x98>)
 800dcdc:	2300      	movs	r3, #0
 800dcde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dce2:	f7ff fec8 	bl	800da76 <__multadd>
 800dce6:	4607      	mov	r7, r0
 800dce8:	10ad      	asrs	r5, r5, #2
 800dcea:	d035      	beq.n	800dd58 <__pow5mult+0x90>
 800dcec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dcee:	b93c      	cbnz	r4, 800dd00 <__pow5mult+0x38>
 800dcf0:	2010      	movs	r0, #16
 800dcf2:	f7fe fa51 	bl	800c198 <malloc>
 800dcf6:	6270      	str	r0, [r6, #36]	; 0x24
 800dcf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dcfc:	6004      	str	r4, [r0, #0]
 800dcfe:	60c4      	str	r4, [r0, #12]
 800dd00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dd04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dd08:	b94c      	cbnz	r4, 800dd1e <__pow5mult+0x56>
 800dd0a:	f240 2171 	movw	r1, #625	; 0x271
 800dd0e:	4630      	mov	r0, r6
 800dd10:	f7ff ff3a 	bl	800db88 <__i2b>
 800dd14:	2300      	movs	r3, #0
 800dd16:	f8c8 0008 	str.w	r0, [r8, #8]
 800dd1a:	4604      	mov	r4, r0
 800dd1c:	6003      	str	r3, [r0, #0]
 800dd1e:	f04f 0800 	mov.w	r8, #0
 800dd22:	07eb      	lsls	r3, r5, #31
 800dd24:	d50a      	bpl.n	800dd3c <__pow5mult+0x74>
 800dd26:	4639      	mov	r1, r7
 800dd28:	4622      	mov	r2, r4
 800dd2a:	4630      	mov	r0, r6
 800dd2c:	f7ff ff35 	bl	800db9a <__multiply>
 800dd30:	4639      	mov	r1, r7
 800dd32:	4681      	mov	r9, r0
 800dd34:	4630      	mov	r0, r6
 800dd36:	f7ff fe87 	bl	800da48 <_Bfree>
 800dd3a:	464f      	mov	r7, r9
 800dd3c:	106d      	asrs	r5, r5, #1
 800dd3e:	d00b      	beq.n	800dd58 <__pow5mult+0x90>
 800dd40:	6820      	ldr	r0, [r4, #0]
 800dd42:	b938      	cbnz	r0, 800dd54 <__pow5mult+0x8c>
 800dd44:	4622      	mov	r2, r4
 800dd46:	4621      	mov	r1, r4
 800dd48:	4630      	mov	r0, r6
 800dd4a:	f7ff ff26 	bl	800db9a <__multiply>
 800dd4e:	6020      	str	r0, [r4, #0]
 800dd50:	f8c0 8000 	str.w	r8, [r0]
 800dd54:	4604      	mov	r4, r0
 800dd56:	e7e4      	b.n	800dd22 <__pow5mult+0x5a>
 800dd58:	4638      	mov	r0, r7
 800dd5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd5e:	bf00      	nop
 800dd60:	0800e8a0 	.word	0x0800e8a0

0800dd64 <__lshift>:
 800dd64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd68:	460c      	mov	r4, r1
 800dd6a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dd6e:	6923      	ldr	r3, [r4, #16]
 800dd70:	6849      	ldr	r1, [r1, #4]
 800dd72:	eb0a 0903 	add.w	r9, sl, r3
 800dd76:	68a3      	ldr	r3, [r4, #8]
 800dd78:	4607      	mov	r7, r0
 800dd7a:	4616      	mov	r6, r2
 800dd7c:	f109 0501 	add.w	r5, r9, #1
 800dd80:	42ab      	cmp	r3, r5
 800dd82:	db32      	blt.n	800ddea <__lshift+0x86>
 800dd84:	4638      	mov	r0, r7
 800dd86:	f7ff fe2b 	bl	800d9e0 <_Balloc>
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	4680      	mov	r8, r0
 800dd8e:	f100 0114 	add.w	r1, r0, #20
 800dd92:	461a      	mov	r2, r3
 800dd94:	4553      	cmp	r3, sl
 800dd96:	db2b      	blt.n	800ddf0 <__lshift+0x8c>
 800dd98:	6920      	ldr	r0, [r4, #16]
 800dd9a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dd9e:	f104 0314 	add.w	r3, r4, #20
 800dda2:	f016 021f 	ands.w	r2, r6, #31
 800dda6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ddaa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ddae:	d025      	beq.n	800ddfc <__lshift+0x98>
 800ddb0:	f1c2 0e20 	rsb	lr, r2, #32
 800ddb4:	2000      	movs	r0, #0
 800ddb6:	681e      	ldr	r6, [r3, #0]
 800ddb8:	468a      	mov	sl, r1
 800ddba:	4096      	lsls	r6, r2
 800ddbc:	4330      	orrs	r0, r6
 800ddbe:	f84a 0b04 	str.w	r0, [sl], #4
 800ddc2:	f853 0b04 	ldr.w	r0, [r3], #4
 800ddc6:	459c      	cmp	ip, r3
 800ddc8:	fa20 f00e 	lsr.w	r0, r0, lr
 800ddcc:	d814      	bhi.n	800ddf8 <__lshift+0x94>
 800ddce:	6048      	str	r0, [r1, #4]
 800ddd0:	b108      	cbz	r0, 800ddd6 <__lshift+0x72>
 800ddd2:	f109 0502 	add.w	r5, r9, #2
 800ddd6:	3d01      	subs	r5, #1
 800ddd8:	4638      	mov	r0, r7
 800ddda:	f8c8 5010 	str.w	r5, [r8, #16]
 800ddde:	4621      	mov	r1, r4
 800dde0:	f7ff fe32 	bl	800da48 <_Bfree>
 800dde4:	4640      	mov	r0, r8
 800dde6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddea:	3101      	adds	r1, #1
 800ddec:	005b      	lsls	r3, r3, #1
 800ddee:	e7c7      	b.n	800dd80 <__lshift+0x1c>
 800ddf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ddf4:	3301      	adds	r3, #1
 800ddf6:	e7cd      	b.n	800dd94 <__lshift+0x30>
 800ddf8:	4651      	mov	r1, sl
 800ddfa:	e7dc      	b.n	800ddb6 <__lshift+0x52>
 800ddfc:	3904      	subs	r1, #4
 800ddfe:	f853 2b04 	ldr.w	r2, [r3], #4
 800de02:	f841 2f04 	str.w	r2, [r1, #4]!
 800de06:	459c      	cmp	ip, r3
 800de08:	d8f9      	bhi.n	800ddfe <__lshift+0x9a>
 800de0a:	e7e4      	b.n	800ddd6 <__lshift+0x72>

0800de0c <__mcmp>:
 800de0c:	6903      	ldr	r3, [r0, #16]
 800de0e:	690a      	ldr	r2, [r1, #16]
 800de10:	1a9b      	subs	r3, r3, r2
 800de12:	b530      	push	{r4, r5, lr}
 800de14:	d10c      	bne.n	800de30 <__mcmp+0x24>
 800de16:	0092      	lsls	r2, r2, #2
 800de18:	3014      	adds	r0, #20
 800de1a:	3114      	adds	r1, #20
 800de1c:	1884      	adds	r4, r0, r2
 800de1e:	4411      	add	r1, r2
 800de20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800de24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800de28:	4295      	cmp	r5, r2
 800de2a:	d003      	beq.n	800de34 <__mcmp+0x28>
 800de2c:	d305      	bcc.n	800de3a <__mcmp+0x2e>
 800de2e:	2301      	movs	r3, #1
 800de30:	4618      	mov	r0, r3
 800de32:	bd30      	pop	{r4, r5, pc}
 800de34:	42a0      	cmp	r0, r4
 800de36:	d3f3      	bcc.n	800de20 <__mcmp+0x14>
 800de38:	e7fa      	b.n	800de30 <__mcmp+0x24>
 800de3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de3e:	e7f7      	b.n	800de30 <__mcmp+0x24>

0800de40 <__mdiff>:
 800de40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de44:	460d      	mov	r5, r1
 800de46:	4607      	mov	r7, r0
 800de48:	4611      	mov	r1, r2
 800de4a:	4628      	mov	r0, r5
 800de4c:	4614      	mov	r4, r2
 800de4e:	f7ff ffdd 	bl	800de0c <__mcmp>
 800de52:	1e06      	subs	r6, r0, #0
 800de54:	d108      	bne.n	800de68 <__mdiff+0x28>
 800de56:	4631      	mov	r1, r6
 800de58:	4638      	mov	r0, r7
 800de5a:	f7ff fdc1 	bl	800d9e0 <_Balloc>
 800de5e:	2301      	movs	r3, #1
 800de60:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800de64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de68:	bfa4      	itt	ge
 800de6a:	4623      	movge	r3, r4
 800de6c:	462c      	movge	r4, r5
 800de6e:	4638      	mov	r0, r7
 800de70:	6861      	ldr	r1, [r4, #4]
 800de72:	bfa6      	itte	ge
 800de74:	461d      	movge	r5, r3
 800de76:	2600      	movge	r6, #0
 800de78:	2601      	movlt	r6, #1
 800de7a:	f7ff fdb1 	bl	800d9e0 <_Balloc>
 800de7e:	692b      	ldr	r3, [r5, #16]
 800de80:	60c6      	str	r6, [r0, #12]
 800de82:	6926      	ldr	r6, [r4, #16]
 800de84:	f105 0914 	add.w	r9, r5, #20
 800de88:	f104 0214 	add.w	r2, r4, #20
 800de8c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800de90:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800de94:	f100 0514 	add.w	r5, r0, #20
 800de98:	f04f 0e00 	mov.w	lr, #0
 800de9c:	f852 ab04 	ldr.w	sl, [r2], #4
 800dea0:	f859 4b04 	ldr.w	r4, [r9], #4
 800dea4:	fa1e f18a 	uxtah	r1, lr, sl
 800dea8:	b2a3      	uxth	r3, r4
 800deaa:	1ac9      	subs	r1, r1, r3
 800deac:	0c23      	lsrs	r3, r4, #16
 800deae:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800deb2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800deb6:	b289      	uxth	r1, r1
 800deb8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800debc:	45c8      	cmp	r8, r9
 800debe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800dec2:	4694      	mov	ip, r2
 800dec4:	f845 3b04 	str.w	r3, [r5], #4
 800dec8:	d8e8      	bhi.n	800de9c <__mdiff+0x5c>
 800deca:	45bc      	cmp	ip, r7
 800decc:	d304      	bcc.n	800ded8 <__mdiff+0x98>
 800dece:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ded2:	b183      	cbz	r3, 800def6 <__mdiff+0xb6>
 800ded4:	6106      	str	r6, [r0, #16]
 800ded6:	e7c5      	b.n	800de64 <__mdiff+0x24>
 800ded8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800dedc:	fa1e f381 	uxtah	r3, lr, r1
 800dee0:	141a      	asrs	r2, r3, #16
 800dee2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dee6:	b29b      	uxth	r3, r3
 800dee8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800deec:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800def0:	f845 3b04 	str.w	r3, [r5], #4
 800def4:	e7e9      	b.n	800deca <__mdiff+0x8a>
 800def6:	3e01      	subs	r6, #1
 800def8:	e7e9      	b.n	800dece <__mdiff+0x8e>

0800defa <__d2b>:
 800defa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800defe:	460e      	mov	r6, r1
 800df00:	2101      	movs	r1, #1
 800df02:	ec59 8b10 	vmov	r8, r9, d0
 800df06:	4615      	mov	r5, r2
 800df08:	f7ff fd6a 	bl	800d9e0 <_Balloc>
 800df0c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800df10:	4607      	mov	r7, r0
 800df12:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800df16:	bb34      	cbnz	r4, 800df66 <__d2b+0x6c>
 800df18:	9301      	str	r3, [sp, #4]
 800df1a:	f1b8 0300 	subs.w	r3, r8, #0
 800df1e:	d027      	beq.n	800df70 <__d2b+0x76>
 800df20:	a802      	add	r0, sp, #8
 800df22:	f840 3d08 	str.w	r3, [r0, #-8]!
 800df26:	f7ff fe00 	bl	800db2a <__lo0bits>
 800df2a:	9900      	ldr	r1, [sp, #0]
 800df2c:	b1f0      	cbz	r0, 800df6c <__d2b+0x72>
 800df2e:	9a01      	ldr	r2, [sp, #4]
 800df30:	f1c0 0320 	rsb	r3, r0, #32
 800df34:	fa02 f303 	lsl.w	r3, r2, r3
 800df38:	430b      	orrs	r3, r1
 800df3a:	40c2      	lsrs	r2, r0
 800df3c:	617b      	str	r3, [r7, #20]
 800df3e:	9201      	str	r2, [sp, #4]
 800df40:	9b01      	ldr	r3, [sp, #4]
 800df42:	61bb      	str	r3, [r7, #24]
 800df44:	2b00      	cmp	r3, #0
 800df46:	bf14      	ite	ne
 800df48:	2102      	movne	r1, #2
 800df4a:	2101      	moveq	r1, #1
 800df4c:	6139      	str	r1, [r7, #16]
 800df4e:	b1c4      	cbz	r4, 800df82 <__d2b+0x88>
 800df50:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800df54:	4404      	add	r4, r0
 800df56:	6034      	str	r4, [r6, #0]
 800df58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800df5c:	6028      	str	r0, [r5, #0]
 800df5e:	4638      	mov	r0, r7
 800df60:	b003      	add	sp, #12
 800df62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800df6a:	e7d5      	b.n	800df18 <__d2b+0x1e>
 800df6c:	6179      	str	r1, [r7, #20]
 800df6e:	e7e7      	b.n	800df40 <__d2b+0x46>
 800df70:	a801      	add	r0, sp, #4
 800df72:	f7ff fdda 	bl	800db2a <__lo0bits>
 800df76:	9b01      	ldr	r3, [sp, #4]
 800df78:	617b      	str	r3, [r7, #20]
 800df7a:	2101      	movs	r1, #1
 800df7c:	6139      	str	r1, [r7, #16]
 800df7e:	3020      	adds	r0, #32
 800df80:	e7e5      	b.n	800df4e <__d2b+0x54>
 800df82:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800df86:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800df8a:	6030      	str	r0, [r6, #0]
 800df8c:	6918      	ldr	r0, [r3, #16]
 800df8e:	f7ff fdad 	bl	800daec <__hi0bits>
 800df92:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800df96:	e7e1      	b.n	800df5c <__d2b+0x62>

0800df98 <_calloc_r>:
 800df98:	b538      	push	{r3, r4, r5, lr}
 800df9a:	fb02 f401 	mul.w	r4, r2, r1
 800df9e:	4621      	mov	r1, r4
 800dfa0:	f7fe f984 	bl	800c2ac <_malloc_r>
 800dfa4:	4605      	mov	r5, r0
 800dfa6:	b118      	cbz	r0, 800dfb0 <_calloc_r+0x18>
 800dfa8:	4622      	mov	r2, r4
 800dfaa:	2100      	movs	r1, #0
 800dfac:	f7fe f928 	bl	800c200 <memset>
 800dfb0:	4628      	mov	r0, r5
 800dfb2:	bd38      	pop	{r3, r4, r5, pc}

0800dfb4 <__ssputs_r>:
 800dfb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfb8:	688e      	ldr	r6, [r1, #8]
 800dfba:	429e      	cmp	r6, r3
 800dfbc:	4682      	mov	sl, r0
 800dfbe:	460c      	mov	r4, r1
 800dfc0:	4690      	mov	r8, r2
 800dfc2:	4699      	mov	r9, r3
 800dfc4:	d837      	bhi.n	800e036 <__ssputs_r+0x82>
 800dfc6:	898a      	ldrh	r2, [r1, #12]
 800dfc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dfcc:	d031      	beq.n	800e032 <__ssputs_r+0x7e>
 800dfce:	6825      	ldr	r5, [r4, #0]
 800dfd0:	6909      	ldr	r1, [r1, #16]
 800dfd2:	1a6f      	subs	r7, r5, r1
 800dfd4:	6965      	ldr	r5, [r4, #20]
 800dfd6:	2302      	movs	r3, #2
 800dfd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dfdc:	fb95 f5f3 	sdiv	r5, r5, r3
 800dfe0:	f109 0301 	add.w	r3, r9, #1
 800dfe4:	443b      	add	r3, r7
 800dfe6:	429d      	cmp	r5, r3
 800dfe8:	bf38      	it	cc
 800dfea:	461d      	movcc	r5, r3
 800dfec:	0553      	lsls	r3, r2, #21
 800dfee:	d530      	bpl.n	800e052 <__ssputs_r+0x9e>
 800dff0:	4629      	mov	r1, r5
 800dff2:	f7fe f95b 	bl	800c2ac <_malloc_r>
 800dff6:	4606      	mov	r6, r0
 800dff8:	b950      	cbnz	r0, 800e010 <__ssputs_r+0x5c>
 800dffa:	230c      	movs	r3, #12
 800dffc:	f8ca 3000 	str.w	r3, [sl]
 800e000:	89a3      	ldrh	r3, [r4, #12]
 800e002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e006:	81a3      	strh	r3, [r4, #12]
 800e008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e00c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e010:	463a      	mov	r2, r7
 800e012:	6921      	ldr	r1, [r4, #16]
 800e014:	f7fe f8d0 	bl	800c1b8 <memcpy>
 800e018:	89a3      	ldrh	r3, [r4, #12]
 800e01a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e01e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e022:	81a3      	strh	r3, [r4, #12]
 800e024:	6126      	str	r6, [r4, #16]
 800e026:	6165      	str	r5, [r4, #20]
 800e028:	443e      	add	r6, r7
 800e02a:	1bed      	subs	r5, r5, r7
 800e02c:	6026      	str	r6, [r4, #0]
 800e02e:	60a5      	str	r5, [r4, #8]
 800e030:	464e      	mov	r6, r9
 800e032:	454e      	cmp	r6, r9
 800e034:	d900      	bls.n	800e038 <__ssputs_r+0x84>
 800e036:	464e      	mov	r6, r9
 800e038:	4632      	mov	r2, r6
 800e03a:	4641      	mov	r1, r8
 800e03c:	6820      	ldr	r0, [r4, #0]
 800e03e:	f7fe f8c6 	bl	800c1ce <memmove>
 800e042:	68a3      	ldr	r3, [r4, #8]
 800e044:	1b9b      	subs	r3, r3, r6
 800e046:	60a3      	str	r3, [r4, #8]
 800e048:	6823      	ldr	r3, [r4, #0]
 800e04a:	441e      	add	r6, r3
 800e04c:	6026      	str	r6, [r4, #0]
 800e04e:	2000      	movs	r0, #0
 800e050:	e7dc      	b.n	800e00c <__ssputs_r+0x58>
 800e052:	462a      	mov	r2, r5
 800e054:	f000 f912 	bl	800e27c <_realloc_r>
 800e058:	4606      	mov	r6, r0
 800e05a:	2800      	cmp	r0, #0
 800e05c:	d1e2      	bne.n	800e024 <__ssputs_r+0x70>
 800e05e:	6921      	ldr	r1, [r4, #16]
 800e060:	4650      	mov	r0, sl
 800e062:	f7fe f8d5 	bl	800c210 <_free_r>
 800e066:	e7c8      	b.n	800dffa <__ssputs_r+0x46>

0800e068 <_svfiprintf_r>:
 800e068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e06c:	461d      	mov	r5, r3
 800e06e:	898b      	ldrh	r3, [r1, #12]
 800e070:	061f      	lsls	r7, r3, #24
 800e072:	b09d      	sub	sp, #116	; 0x74
 800e074:	4680      	mov	r8, r0
 800e076:	460c      	mov	r4, r1
 800e078:	4616      	mov	r6, r2
 800e07a:	d50f      	bpl.n	800e09c <_svfiprintf_r+0x34>
 800e07c:	690b      	ldr	r3, [r1, #16]
 800e07e:	b96b      	cbnz	r3, 800e09c <_svfiprintf_r+0x34>
 800e080:	2140      	movs	r1, #64	; 0x40
 800e082:	f7fe f913 	bl	800c2ac <_malloc_r>
 800e086:	6020      	str	r0, [r4, #0]
 800e088:	6120      	str	r0, [r4, #16]
 800e08a:	b928      	cbnz	r0, 800e098 <_svfiprintf_r+0x30>
 800e08c:	230c      	movs	r3, #12
 800e08e:	f8c8 3000 	str.w	r3, [r8]
 800e092:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e096:	e0c8      	b.n	800e22a <_svfiprintf_r+0x1c2>
 800e098:	2340      	movs	r3, #64	; 0x40
 800e09a:	6163      	str	r3, [r4, #20]
 800e09c:	2300      	movs	r3, #0
 800e09e:	9309      	str	r3, [sp, #36]	; 0x24
 800e0a0:	2320      	movs	r3, #32
 800e0a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e0a6:	2330      	movs	r3, #48	; 0x30
 800e0a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e0ac:	9503      	str	r5, [sp, #12]
 800e0ae:	f04f 0b01 	mov.w	fp, #1
 800e0b2:	4637      	mov	r7, r6
 800e0b4:	463d      	mov	r5, r7
 800e0b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e0ba:	b10b      	cbz	r3, 800e0c0 <_svfiprintf_r+0x58>
 800e0bc:	2b25      	cmp	r3, #37	; 0x25
 800e0be:	d13e      	bne.n	800e13e <_svfiprintf_r+0xd6>
 800e0c0:	ebb7 0a06 	subs.w	sl, r7, r6
 800e0c4:	d00b      	beq.n	800e0de <_svfiprintf_r+0x76>
 800e0c6:	4653      	mov	r3, sl
 800e0c8:	4632      	mov	r2, r6
 800e0ca:	4621      	mov	r1, r4
 800e0cc:	4640      	mov	r0, r8
 800e0ce:	f7ff ff71 	bl	800dfb4 <__ssputs_r>
 800e0d2:	3001      	adds	r0, #1
 800e0d4:	f000 80a4 	beq.w	800e220 <_svfiprintf_r+0x1b8>
 800e0d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0da:	4453      	add	r3, sl
 800e0dc:	9309      	str	r3, [sp, #36]	; 0x24
 800e0de:	783b      	ldrb	r3, [r7, #0]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	f000 809d 	beq.w	800e220 <_svfiprintf_r+0x1b8>
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e0ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0f0:	9304      	str	r3, [sp, #16]
 800e0f2:	9307      	str	r3, [sp, #28]
 800e0f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e0f8:	931a      	str	r3, [sp, #104]	; 0x68
 800e0fa:	462f      	mov	r7, r5
 800e0fc:	2205      	movs	r2, #5
 800e0fe:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e102:	4850      	ldr	r0, [pc, #320]	; (800e244 <_svfiprintf_r+0x1dc>)
 800e104:	f7f2 f884 	bl	8000210 <memchr>
 800e108:	9b04      	ldr	r3, [sp, #16]
 800e10a:	b9d0      	cbnz	r0, 800e142 <_svfiprintf_r+0xda>
 800e10c:	06d9      	lsls	r1, r3, #27
 800e10e:	bf44      	itt	mi
 800e110:	2220      	movmi	r2, #32
 800e112:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e116:	071a      	lsls	r2, r3, #28
 800e118:	bf44      	itt	mi
 800e11a:	222b      	movmi	r2, #43	; 0x2b
 800e11c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e120:	782a      	ldrb	r2, [r5, #0]
 800e122:	2a2a      	cmp	r2, #42	; 0x2a
 800e124:	d015      	beq.n	800e152 <_svfiprintf_r+0xea>
 800e126:	9a07      	ldr	r2, [sp, #28]
 800e128:	462f      	mov	r7, r5
 800e12a:	2000      	movs	r0, #0
 800e12c:	250a      	movs	r5, #10
 800e12e:	4639      	mov	r1, r7
 800e130:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e134:	3b30      	subs	r3, #48	; 0x30
 800e136:	2b09      	cmp	r3, #9
 800e138:	d94d      	bls.n	800e1d6 <_svfiprintf_r+0x16e>
 800e13a:	b1b8      	cbz	r0, 800e16c <_svfiprintf_r+0x104>
 800e13c:	e00f      	b.n	800e15e <_svfiprintf_r+0xf6>
 800e13e:	462f      	mov	r7, r5
 800e140:	e7b8      	b.n	800e0b4 <_svfiprintf_r+0x4c>
 800e142:	4a40      	ldr	r2, [pc, #256]	; (800e244 <_svfiprintf_r+0x1dc>)
 800e144:	1a80      	subs	r0, r0, r2
 800e146:	fa0b f000 	lsl.w	r0, fp, r0
 800e14a:	4318      	orrs	r0, r3
 800e14c:	9004      	str	r0, [sp, #16]
 800e14e:	463d      	mov	r5, r7
 800e150:	e7d3      	b.n	800e0fa <_svfiprintf_r+0x92>
 800e152:	9a03      	ldr	r2, [sp, #12]
 800e154:	1d11      	adds	r1, r2, #4
 800e156:	6812      	ldr	r2, [r2, #0]
 800e158:	9103      	str	r1, [sp, #12]
 800e15a:	2a00      	cmp	r2, #0
 800e15c:	db01      	blt.n	800e162 <_svfiprintf_r+0xfa>
 800e15e:	9207      	str	r2, [sp, #28]
 800e160:	e004      	b.n	800e16c <_svfiprintf_r+0x104>
 800e162:	4252      	negs	r2, r2
 800e164:	f043 0302 	orr.w	r3, r3, #2
 800e168:	9207      	str	r2, [sp, #28]
 800e16a:	9304      	str	r3, [sp, #16]
 800e16c:	783b      	ldrb	r3, [r7, #0]
 800e16e:	2b2e      	cmp	r3, #46	; 0x2e
 800e170:	d10c      	bne.n	800e18c <_svfiprintf_r+0x124>
 800e172:	787b      	ldrb	r3, [r7, #1]
 800e174:	2b2a      	cmp	r3, #42	; 0x2a
 800e176:	d133      	bne.n	800e1e0 <_svfiprintf_r+0x178>
 800e178:	9b03      	ldr	r3, [sp, #12]
 800e17a:	1d1a      	adds	r2, r3, #4
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	9203      	str	r2, [sp, #12]
 800e180:	2b00      	cmp	r3, #0
 800e182:	bfb8      	it	lt
 800e184:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e188:	3702      	adds	r7, #2
 800e18a:	9305      	str	r3, [sp, #20]
 800e18c:	4d2e      	ldr	r5, [pc, #184]	; (800e248 <_svfiprintf_r+0x1e0>)
 800e18e:	7839      	ldrb	r1, [r7, #0]
 800e190:	2203      	movs	r2, #3
 800e192:	4628      	mov	r0, r5
 800e194:	f7f2 f83c 	bl	8000210 <memchr>
 800e198:	b138      	cbz	r0, 800e1aa <_svfiprintf_r+0x142>
 800e19a:	2340      	movs	r3, #64	; 0x40
 800e19c:	1b40      	subs	r0, r0, r5
 800e19e:	fa03 f000 	lsl.w	r0, r3, r0
 800e1a2:	9b04      	ldr	r3, [sp, #16]
 800e1a4:	4303      	orrs	r3, r0
 800e1a6:	3701      	adds	r7, #1
 800e1a8:	9304      	str	r3, [sp, #16]
 800e1aa:	7839      	ldrb	r1, [r7, #0]
 800e1ac:	4827      	ldr	r0, [pc, #156]	; (800e24c <_svfiprintf_r+0x1e4>)
 800e1ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e1b2:	2206      	movs	r2, #6
 800e1b4:	1c7e      	adds	r6, r7, #1
 800e1b6:	f7f2 f82b 	bl	8000210 <memchr>
 800e1ba:	2800      	cmp	r0, #0
 800e1bc:	d038      	beq.n	800e230 <_svfiprintf_r+0x1c8>
 800e1be:	4b24      	ldr	r3, [pc, #144]	; (800e250 <_svfiprintf_r+0x1e8>)
 800e1c0:	bb13      	cbnz	r3, 800e208 <_svfiprintf_r+0x1a0>
 800e1c2:	9b03      	ldr	r3, [sp, #12]
 800e1c4:	3307      	adds	r3, #7
 800e1c6:	f023 0307 	bic.w	r3, r3, #7
 800e1ca:	3308      	adds	r3, #8
 800e1cc:	9303      	str	r3, [sp, #12]
 800e1ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1d0:	444b      	add	r3, r9
 800e1d2:	9309      	str	r3, [sp, #36]	; 0x24
 800e1d4:	e76d      	b.n	800e0b2 <_svfiprintf_r+0x4a>
 800e1d6:	fb05 3202 	mla	r2, r5, r2, r3
 800e1da:	2001      	movs	r0, #1
 800e1dc:	460f      	mov	r7, r1
 800e1de:	e7a6      	b.n	800e12e <_svfiprintf_r+0xc6>
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	3701      	adds	r7, #1
 800e1e4:	9305      	str	r3, [sp, #20]
 800e1e6:	4619      	mov	r1, r3
 800e1e8:	250a      	movs	r5, #10
 800e1ea:	4638      	mov	r0, r7
 800e1ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1f0:	3a30      	subs	r2, #48	; 0x30
 800e1f2:	2a09      	cmp	r2, #9
 800e1f4:	d903      	bls.n	800e1fe <_svfiprintf_r+0x196>
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d0c8      	beq.n	800e18c <_svfiprintf_r+0x124>
 800e1fa:	9105      	str	r1, [sp, #20]
 800e1fc:	e7c6      	b.n	800e18c <_svfiprintf_r+0x124>
 800e1fe:	fb05 2101 	mla	r1, r5, r1, r2
 800e202:	2301      	movs	r3, #1
 800e204:	4607      	mov	r7, r0
 800e206:	e7f0      	b.n	800e1ea <_svfiprintf_r+0x182>
 800e208:	ab03      	add	r3, sp, #12
 800e20a:	9300      	str	r3, [sp, #0]
 800e20c:	4622      	mov	r2, r4
 800e20e:	4b11      	ldr	r3, [pc, #68]	; (800e254 <_svfiprintf_r+0x1ec>)
 800e210:	a904      	add	r1, sp, #16
 800e212:	4640      	mov	r0, r8
 800e214:	f7fe f938 	bl	800c488 <_printf_float>
 800e218:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e21c:	4681      	mov	r9, r0
 800e21e:	d1d6      	bne.n	800e1ce <_svfiprintf_r+0x166>
 800e220:	89a3      	ldrh	r3, [r4, #12]
 800e222:	065b      	lsls	r3, r3, #25
 800e224:	f53f af35 	bmi.w	800e092 <_svfiprintf_r+0x2a>
 800e228:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e22a:	b01d      	add	sp, #116	; 0x74
 800e22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e230:	ab03      	add	r3, sp, #12
 800e232:	9300      	str	r3, [sp, #0]
 800e234:	4622      	mov	r2, r4
 800e236:	4b07      	ldr	r3, [pc, #28]	; (800e254 <_svfiprintf_r+0x1ec>)
 800e238:	a904      	add	r1, sp, #16
 800e23a:	4640      	mov	r0, r8
 800e23c:	f7fe fbda 	bl	800c9f4 <_printf_i>
 800e240:	e7ea      	b.n	800e218 <_svfiprintf_r+0x1b0>
 800e242:	bf00      	nop
 800e244:	0800e8ac 	.word	0x0800e8ac
 800e248:	0800e8b2 	.word	0x0800e8b2
 800e24c:	0800e8b6 	.word	0x0800e8b6
 800e250:	0800c489 	.word	0x0800c489
 800e254:	0800dfb5 	.word	0x0800dfb5

0800e258 <__ascii_mbtowc>:
 800e258:	b082      	sub	sp, #8
 800e25a:	b901      	cbnz	r1, 800e25e <__ascii_mbtowc+0x6>
 800e25c:	a901      	add	r1, sp, #4
 800e25e:	b142      	cbz	r2, 800e272 <__ascii_mbtowc+0x1a>
 800e260:	b14b      	cbz	r3, 800e276 <__ascii_mbtowc+0x1e>
 800e262:	7813      	ldrb	r3, [r2, #0]
 800e264:	600b      	str	r3, [r1, #0]
 800e266:	7812      	ldrb	r2, [r2, #0]
 800e268:	1c10      	adds	r0, r2, #0
 800e26a:	bf18      	it	ne
 800e26c:	2001      	movne	r0, #1
 800e26e:	b002      	add	sp, #8
 800e270:	4770      	bx	lr
 800e272:	4610      	mov	r0, r2
 800e274:	e7fb      	b.n	800e26e <__ascii_mbtowc+0x16>
 800e276:	f06f 0001 	mvn.w	r0, #1
 800e27a:	e7f8      	b.n	800e26e <__ascii_mbtowc+0x16>

0800e27c <_realloc_r>:
 800e27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e27e:	4607      	mov	r7, r0
 800e280:	4614      	mov	r4, r2
 800e282:	460e      	mov	r6, r1
 800e284:	b921      	cbnz	r1, 800e290 <_realloc_r+0x14>
 800e286:	4611      	mov	r1, r2
 800e288:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e28c:	f7fe b80e 	b.w	800c2ac <_malloc_r>
 800e290:	b922      	cbnz	r2, 800e29c <_realloc_r+0x20>
 800e292:	f7fd ffbd 	bl	800c210 <_free_r>
 800e296:	4625      	mov	r5, r4
 800e298:	4628      	mov	r0, r5
 800e29a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e29c:	f000 f821 	bl	800e2e2 <_malloc_usable_size_r>
 800e2a0:	42a0      	cmp	r0, r4
 800e2a2:	d20f      	bcs.n	800e2c4 <_realloc_r+0x48>
 800e2a4:	4621      	mov	r1, r4
 800e2a6:	4638      	mov	r0, r7
 800e2a8:	f7fe f800 	bl	800c2ac <_malloc_r>
 800e2ac:	4605      	mov	r5, r0
 800e2ae:	2800      	cmp	r0, #0
 800e2b0:	d0f2      	beq.n	800e298 <_realloc_r+0x1c>
 800e2b2:	4631      	mov	r1, r6
 800e2b4:	4622      	mov	r2, r4
 800e2b6:	f7fd ff7f 	bl	800c1b8 <memcpy>
 800e2ba:	4631      	mov	r1, r6
 800e2bc:	4638      	mov	r0, r7
 800e2be:	f7fd ffa7 	bl	800c210 <_free_r>
 800e2c2:	e7e9      	b.n	800e298 <_realloc_r+0x1c>
 800e2c4:	4635      	mov	r5, r6
 800e2c6:	e7e7      	b.n	800e298 <_realloc_r+0x1c>

0800e2c8 <__ascii_wctomb>:
 800e2c8:	b149      	cbz	r1, 800e2de <__ascii_wctomb+0x16>
 800e2ca:	2aff      	cmp	r2, #255	; 0xff
 800e2cc:	bf85      	ittet	hi
 800e2ce:	238a      	movhi	r3, #138	; 0x8a
 800e2d0:	6003      	strhi	r3, [r0, #0]
 800e2d2:	700a      	strbls	r2, [r1, #0]
 800e2d4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e2d8:	bf98      	it	ls
 800e2da:	2001      	movls	r0, #1
 800e2dc:	4770      	bx	lr
 800e2de:	4608      	mov	r0, r1
 800e2e0:	4770      	bx	lr

0800e2e2 <_malloc_usable_size_r>:
 800e2e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2e6:	1f18      	subs	r0, r3, #4
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	bfbc      	itt	lt
 800e2ec:	580b      	ldrlt	r3, [r1, r0]
 800e2ee:	18c0      	addlt	r0, r0, r3
 800e2f0:	4770      	bx	lr
	...

0800e2f4 <_init>:
 800e2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2f6:	bf00      	nop
 800e2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2fa:	bc08      	pop	{r3}
 800e2fc:	469e      	mov	lr, r3
 800e2fe:	4770      	bx	lr

0800e300 <_fini>:
 800e300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e302:	bf00      	nop
 800e304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e306:	bc08      	pop	{r3}
 800e308:	469e      	mov	lr, r3
 800e30a:	4770      	bx	lr
