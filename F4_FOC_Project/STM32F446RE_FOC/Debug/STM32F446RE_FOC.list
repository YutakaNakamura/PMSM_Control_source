
STM32F446RE_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e40  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003004  08003004  00013004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800302c  0800302c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800302c  0800302c  0001302c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003034  08003034  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003034  08003034  00013034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003038  08003038  00013038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800303c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  08003048  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08003048  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a02  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f61  00000000  00000000  00029a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009b8  00000000  00000000  0002b9a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000880  00000000  00000000  0002c358  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024159  00000000  00000000  0002cbd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009ef4  00000000  00000000  00050d31  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6dd3  00000000  00000000  0005ac25  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001319f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002594  00000000  00000000  00131a74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002fec 	.word	0x08002fec

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002fec 	.word	0x08002fec

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <HAL_Init+0x40>)
 800050e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_Init+0x40>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <HAL_Init+0x40>)
 800051a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_Init+0x40>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <HAL_Init+0x40>)
 8000526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f92f 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f808 	bl	8000548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f002 fa3c 	bl	80029b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023c00 	.word	0x40023c00

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x54>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x58>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f939 	bl	80007de <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	f000 f90f 	bl	80007a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x5c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000008 	.word	0x20000008
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000004 	.word	0x20000004
 80005cc:	20000028 	.word	0x20000028

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000028 	.word	0x20000028

080005e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f0:	f7ff ffee 	bl	80005d0 <HAL_GetTick>
 80005f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000600:	d005      	beq.n	800060e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <HAL_Delay+0x40>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800060e:	bf00      	nop
 8000610:	f7ff ffde 	bl	80005d0 <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	429a      	cmp	r2, r3
 800061e:	d8f7      	bhi.n	8000610 <HAL_Delay+0x28>
  {
  }
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000004 	.word	0x20000004

0800062c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f003 0307 	and.w	r3, r3, #7
 800063a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000648:	4013      	ands	r3, r2
 800064a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065e:	4a04      	ldr	r2, [pc, #16]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	60d3      	str	r3, [r2, #12]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <__NVIC_GetPriorityGrouping+0x18>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	0a1b      	lsrs	r3, r3, #8
 800067e:	f003 0307 	and.w	r3, r3, #7
}
 8000682:	4618      	mov	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	; (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	; (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	; 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800075c:	d301      	bcc.n	8000762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075e:	2301      	movs	r3, #1
 8000760:	e00f      	b.n	8000782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <SysTick_Config+0x40>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076a:	210f      	movs	r1, #15
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	f7ff ff8e 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <SysTick_Config+0x40>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SysTick_Config+0x40>)
 800077c:	2207      	movs	r2, #7
 800077e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	e000e010 	.word	0xe000e010

08000790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff47 	bl	800062c <__NVIC_SetPriorityGrouping>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b8:	f7ff ff5c 	bl	8000674 <__NVIC_GetPriorityGrouping>
 80007bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	68b9      	ldr	r1, [r7, #8]
 80007c2:	6978      	ldr	r0, [r7, #20]
 80007c4:	f7ff ff8e 	bl	80006e4 <NVIC_EncodePriority>
 80007c8:	4602      	mov	r2, r0
 80007ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff5d 	bl	8000690 <__NVIC_SetPriority>
}
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff ffb0 	bl	800074c <SysTick_Config>
 80007ec:	4603      	mov	r3, r0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b089      	sub	sp, #36	; 0x24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
 8000812:	e165      	b.n	8000ae0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000814:	2201      	movs	r2, #1
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	fa02 f303 	lsl.w	r3, r2, r3
 800081c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	697a      	ldr	r2, [r7, #20]
 8000824:	4013      	ands	r3, r2
 8000826:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000828:	693a      	ldr	r2, [r7, #16]
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	429a      	cmp	r2, r3
 800082e:	f040 8154 	bne.w	8000ada <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	2b02      	cmp	r3, #2
 8000838:	d003      	beq.n	8000842 <HAL_GPIO_Init+0x4a>
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	2b12      	cmp	r3, #18
 8000840:	d123      	bne.n	800088a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	08da      	lsrs	r2, r3, #3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	3208      	adds	r2, #8
 800084a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800084e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	220f      	movs	r2, #15
 800085a:	fa02 f303 	lsl.w	r3, r2, r3
 800085e:	43db      	mvns	r3, r3
 8000860:	69ba      	ldr	r2, [r7, #24]
 8000862:	4013      	ands	r3, r2
 8000864:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	691a      	ldr	r2, [r3, #16]
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	f003 0307 	and.w	r3, r3, #7
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	69ba      	ldr	r2, [r7, #24]
 8000878:	4313      	orrs	r3, r2
 800087a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800087c:	69fb      	ldr	r3, [r7, #28]
 800087e:	08da      	lsrs	r2, r3, #3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3208      	adds	r2, #8
 8000884:	69b9      	ldr	r1, [r7, #24]
 8000886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	2203      	movs	r2, #3
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	43db      	mvns	r3, r3
 800089c:	69ba      	ldr	r2, [r7, #24]
 800089e:	4013      	ands	r3, r2
 80008a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	f003 0203 	and.w	r2, r3, #3
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	69ba      	ldr	r2, [r7, #24]
 80008b4:	4313      	orrs	r3, r2
 80008b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	69ba      	ldr	r2, [r7, #24]
 80008bc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d00b      	beq.n	80008de <HAL_GPIO_Init+0xe6>
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	2b02      	cmp	r3, #2
 80008cc:	d007      	beq.n	80008de <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008d2:	2b11      	cmp	r3, #17
 80008d4:	d003      	beq.n	80008de <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	2b12      	cmp	r3, #18
 80008dc:	d130      	bne.n	8000940 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	2203      	movs	r2, #3
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	43db      	mvns	r3, r3
 80008f0:	69ba      	ldr	r2, [r7, #24]
 80008f2:	4013      	ands	r3, r2
 80008f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	68da      	ldr	r2, [r3, #12]
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	69ba      	ldr	r2, [r7, #24]
 8000904:	4313      	orrs	r3, r2
 8000906:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	69ba      	ldr	r2, [r7, #24]
 800090c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000914:	2201      	movs	r2, #1
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	43db      	mvns	r3, r3
 800091e:	69ba      	ldr	r2, [r7, #24]
 8000920:	4013      	ands	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	091b      	lsrs	r3, r3, #4
 800092a:	f003 0201 	and.w	r2, r3, #1
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	4313      	orrs	r3, r2
 8000938:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	2203      	movs	r2, #3
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	43db      	mvns	r3, r3
 8000952:	69ba      	ldr	r2, [r7, #24]
 8000954:	4013      	ands	r3, r2
 8000956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	689a      	ldr	r2, [r3, #8]
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	69ba      	ldr	r2, [r7, #24]
 8000966:	4313      	orrs	r3, r2
 8000968:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	69ba      	ldr	r2, [r7, #24]
 800096e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000978:	2b00      	cmp	r3, #0
 800097a:	f000 80ae 	beq.w	8000ada <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b5c      	ldr	r3, [pc, #368]	; (8000af4 <HAL_GPIO_Init+0x2fc>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	4a5b      	ldr	r2, [pc, #364]	; (8000af4 <HAL_GPIO_Init+0x2fc>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098c:	6453      	str	r3, [r2, #68]	; 0x44
 800098e:	4b59      	ldr	r3, [pc, #356]	; (8000af4 <HAL_GPIO_Init+0x2fc>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800099a:	4a57      	ldr	r2, [pc, #348]	; (8000af8 <HAL_GPIO_Init+0x300>)
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	089b      	lsrs	r3, r3, #2
 80009a0:	3302      	adds	r3, #2
 80009a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	f003 0303 	and.w	r3, r3, #3
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	220f      	movs	r2, #15
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	43db      	mvns	r3, r3
 80009b8:	69ba      	ldr	r2, [r7, #24]
 80009ba:	4013      	ands	r3, r2
 80009bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a4e      	ldr	r2, [pc, #312]	; (8000afc <HAL_GPIO_Init+0x304>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d025      	beq.n	8000a12 <HAL_GPIO_Init+0x21a>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a4d      	ldr	r2, [pc, #308]	; (8000b00 <HAL_GPIO_Init+0x308>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d01f      	beq.n	8000a0e <HAL_GPIO_Init+0x216>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a4c      	ldr	r2, [pc, #304]	; (8000b04 <HAL_GPIO_Init+0x30c>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d019      	beq.n	8000a0a <HAL_GPIO_Init+0x212>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a4b      	ldr	r2, [pc, #300]	; (8000b08 <HAL_GPIO_Init+0x310>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d013      	beq.n	8000a06 <HAL_GPIO_Init+0x20e>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a4a      	ldr	r2, [pc, #296]	; (8000b0c <HAL_GPIO_Init+0x314>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d00d      	beq.n	8000a02 <HAL_GPIO_Init+0x20a>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a49      	ldr	r2, [pc, #292]	; (8000b10 <HAL_GPIO_Init+0x318>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d007      	beq.n	80009fe <HAL_GPIO_Init+0x206>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a48      	ldr	r2, [pc, #288]	; (8000b14 <HAL_GPIO_Init+0x31c>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d101      	bne.n	80009fa <HAL_GPIO_Init+0x202>
 80009f6:	2306      	movs	r3, #6
 80009f8:	e00c      	b.n	8000a14 <HAL_GPIO_Init+0x21c>
 80009fa:	2307      	movs	r3, #7
 80009fc:	e00a      	b.n	8000a14 <HAL_GPIO_Init+0x21c>
 80009fe:	2305      	movs	r3, #5
 8000a00:	e008      	b.n	8000a14 <HAL_GPIO_Init+0x21c>
 8000a02:	2304      	movs	r3, #4
 8000a04:	e006      	b.n	8000a14 <HAL_GPIO_Init+0x21c>
 8000a06:	2303      	movs	r3, #3
 8000a08:	e004      	b.n	8000a14 <HAL_GPIO_Init+0x21c>
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	e002      	b.n	8000a14 <HAL_GPIO_Init+0x21c>
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e000      	b.n	8000a14 <HAL_GPIO_Init+0x21c>
 8000a12:	2300      	movs	r3, #0
 8000a14:	69fa      	ldr	r2, [r7, #28]
 8000a16:	f002 0203 	and.w	r2, r2, #3
 8000a1a:	0092      	lsls	r2, r2, #2
 8000a1c:	4093      	lsls	r3, r2
 8000a1e:	69ba      	ldr	r2, [r7, #24]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a24:	4934      	ldr	r1, [pc, #208]	; (8000af8 <HAL_GPIO_Init+0x300>)
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	089b      	lsrs	r3, r3, #2
 8000a2a:	3302      	adds	r3, #2
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a32:	4b39      	ldr	r3, [pc, #228]	; (8000b18 <HAL_GPIO_Init+0x320>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d003      	beq.n	8000a56 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000a4e:	69ba      	ldr	r2, [r7, #24]
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a56:	4a30      	ldr	r2, [pc, #192]	; (8000b18 <HAL_GPIO_Init+0x320>)
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a5c:	4b2e      	ldr	r3, [pc, #184]	; (8000b18 <HAL_GPIO_Init+0x320>)
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	43db      	mvns	r3, r3
 8000a66:	69ba      	ldr	r2, [r7, #24]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d003      	beq.n	8000a80 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000a78:	69ba      	ldr	r2, [r7, #24]
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a80:	4a25      	ldr	r2, [pc, #148]	; (8000b18 <HAL_GPIO_Init+0x320>)
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a86:	4b24      	ldr	r3, [pc, #144]	; (8000b18 <HAL_GPIO_Init+0x320>)
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	4013      	ands	r3, r2
 8000a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d003      	beq.n	8000aaa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000aa2:	69ba      	ldr	r2, [r7, #24]
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000aaa:	4a1b      	ldr	r2, [pc, #108]	; (8000b18 <HAL_GPIO_Init+0x320>)
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ab0:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <HAL_GPIO_Init+0x320>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	4013      	ands	r3, r2
 8000abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d003      	beq.n	8000ad4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000acc:	69ba      	ldr	r2, [r7, #24]
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ad4:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <HAL_GPIO_Init+0x320>)
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3301      	adds	r3, #1
 8000ade:	61fb      	str	r3, [r7, #28]
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	2b0f      	cmp	r3, #15
 8000ae4:	f67f ae96 	bls.w	8000814 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ae8:	bf00      	nop
 8000aea:	3724      	adds	r7, #36	; 0x24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40013800 	.word	0x40013800
 8000afc:	40020000 	.word	0x40020000
 8000b00:	40020400 	.word	0x40020400
 8000b04:	40020800 	.word	0x40020800
 8000b08:	40020c00 	.word	0x40020c00
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40021400 	.word	0x40021400
 8000b14:	40021800 	.word	0x40021800
 8000b18:	40013c00 	.word	0x40013c00

08000b1c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4b20      	ldr	r3, [pc, #128]	; (8000bac <HAL_PWREx_EnableOverDrive+0x90>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a1f      	ldr	r2, [pc, #124]	; (8000bac <HAL_PWREx_EnableOverDrive+0x90>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <HAL_PWREx_EnableOverDrive+0x90>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000b42:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <HAL_PWREx_EnableOverDrive+0x94>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b48:	f7ff fd42 	bl	80005d0 <HAL_GetTick>
 8000b4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000b4e:	e009      	b.n	8000b64 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000b50:	f7ff fd3e 	bl	80005d0 <HAL_GetTick>
 8000b54:	4602      	mov	r2, r0
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b5e:	d901      	bls.n	8000b64 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8000b60:	2303      	movs	r3, #3
 8000b62:	e01f      	b.n	8000ba4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b70:	d1ee      	bne.n	8000b50 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b78:	f7ff fd2a 	bl	80005d0 <HAL_GetTick>
 8000b7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000b7e:	e009      	b.n	8000b94 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000b80:	f7ff fd26 	bl	80005d0 <HAL_GetTick>
 8000b84:	4602      	mov	r2, r0
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b8e:	d901      	bls.n	8000b94 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8000b90:	2303      	movs	r3, #3
 8000b92:	e007      	b.n	8000ba4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000b94:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000ba0:	d1ee      	bne.n	8000b80 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8000ba2:	2300      	movs	r3, #0
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	420e0040 	.word	0x420e0040
 8000bb4:	40007000 	.word	0x40007000
 8000bb8:	420e0044 	.word	0x420e0044

08000bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d101      	bne.n	8000bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e0ca      	b.n	8000d66 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000bd0:	4b67      	ldr	r3, [pc, #412]	; (8000d70 <HAL_RCC_ClockConfig+0x1b4>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f003 030f 	and.w	r3, r3, #15
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d90c      	bls.n	8000bf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bde:	4b64      	ldr	r3, [pc, #400]	; (8000d70 <HAL_RCC_ClockConfig+0x1b4>)
 8000be0:	683a      	ldr	r2, [r7, #0]
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000be6:	4b62      	ldr	r3, [pc, #392]	; (8000d70 <HAL_RCC_ClockConfig+0x1b4>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f003 030f 	and.w	r3, r3, #15
 8000bee:	683a      	ldr	r2, [r7, #0]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d001      	beq.n	8000bf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e0b6      	b.n	8000d66 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f003 0302 	and.w	r3, r3, #2
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d020      	beq.n	8000c46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f003 0304 	and.w	r3, r3, #4
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d005      	beq.n	8000c1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c10:	4b58      	ldr	r3, [pc, #352]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	4a57      	ldr	r2, [pc, #348]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000c16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000c1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f003 0308 	and.w	r3, r3, #8
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d005      	beq.n	8000c34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c28:	4b52      	ldr	r3, [pc, #328]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	4a51      	ldr	r2, [pc, #324]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000c2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000c32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c34:	4b4f      	ldr	r3, [pc, #316]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	494c      	ldr	r1, [pc, #304]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000c42:	4313      	orrs	r3, r2
 8000c44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d044      	beq.n	8000cdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d107      	bne.n	8000c6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c5a:	4b46      	ldr	r3, [pc, #280]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d119      	bne.n	8000c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e07d      	b.n	8000d66 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d003      	beq.n	8000c7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	d107      	bne.n	8000c8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c7a:	4b3e      	ldr	r3, [pc, #248]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d109      	bne.n	8000c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e06d      	b.n	8000d66 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c8a:	4b3a      	ldr	r3, [pc, #232]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d101      	bne.n	8000c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e065      	b.n	8000d66 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c9a:	4b36      	ldr	r3, [pc, #216]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f023 0203 	bic.w	r2, r3, #3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	4933      	ldr	r1, [pc, #204]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000cac:	f7ff fc90 	bl	80005d0 <HAL_GetTick>
 8000cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cb2:	e00a      	b.n	8000cca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cb4:	f7ff fc8c 	bl	80005d0 <HAL_GetTick>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d901      	bls.n	8000cca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	e04d      	b.n	8000d66 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cca:	4b2a      	ldr	r3, [pc, #168]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	f003 020c 	and.w	r2, r3, #12
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d1eb      	bne.n	8000cb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000cdc:	4b24      	ldr	r3, [pc, #144]	; (8000d70 <HAL_RCC_ClockConfig+0x1b4>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f003 030f 	and.w	r3, r3, #15
 8000ce4:	683a      	ldr	r2, [r7, #0]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d20c      	bcs.n	8000d04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cea:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <HAL_RCC_ClockConfig+0x1b4>)
 8000cec:	683a      	ldr	r2, [r7, #0]
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cf2:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <HAL_RCC_ClockConfig+0x1b4>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	683a      	ldr	r2, [r7, #0]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d001      	beq.n	8000d04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	e030      	b.n	8000d66 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f003 0304 	and.w	r3, r3, #4
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d008      	beq.n	8000d22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d10:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	4915      	ldr	r1, [pc, #84]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 0308 	and.w	r3, r3, #8
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d009      	beq.n	8000d42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	691b      	ldr	r3, [r3, #16]
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	490d      	ldr	r1, [pc, #52]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d42:	f000 f851 	bl	8000de8 <HAL_RCC_GetSysClockFreq>
 8000d46:	4601      	mov	r1, r0
 8000d48:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	091b      	lsrs	r3, r3, #4
 8000d4e:	f003 030f 	and.w	r3, r3, #15
 8000d52:	4a09      	ldr	r2, [pc, #36]	; (8000d78 <HAL_RCC_ClockConfig+0x1bc>)
 8000d54:	5cd3      	ldrb	r3, [r2, r3]
 8000d56:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5a:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <HAL_RCC_ClockConfig+0x1c0>)
 8000d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f7ff fbf2 	bl	8000548 <HAL_InitTick>

  return HAL_OK;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40023c00 	.word	0x40023c00
 8000d74:	40023800 	.word	0x40023800
 8000d78:	08003004 	.word	0x08003004
 8000d7c:	20000008 	.word	0x20000008

08000d80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <HAL_RCC_GetHCLKFreq+0x14>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000008 	.word	0x20000008

08000d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d9c:	f7ff fff0 	bl	8000d80 <HAL_RCC_GetHCLKFreq>
 8000da0:	4601      	mov	r1, r0
 8000da2:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	0a9b      	lsrs	r3, r3, #10
 8000da8:	f003 0307 	and.w	r3, r3, #7
 8000dac:	4a03      	ldr	r2, [pc, #12]	; (8000dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8000dae:	5cd3      	ldrb	r3, [r2, r3]
 8000db0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	08003014 	.word	0x08003014

08000dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000dc4:	f7ff ffdc 	bl	8000d80 <HAL_RCC_GetHCLKFreq>
 8000dc8:	4601      	mov	r1, r0
 8000dca:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	0b5b      	lsrs	r3, r3, #13
 8000dd0:	f003 0307 	and.w	r3, r3, #7
 8000dd4:	4a03      	ldr	r2, [pc, #12]	; (8000de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000dd6:	5cd3      	ldrb	r3, [r2, r3]
 8000dd8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40023800 	.word	0x40023800
 8000de4:	08003014 	.word	0x08003014

08000de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dea:	b087      	sub	sp, #28
 8000dec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e02:	4bc6      	ldr	r3, [pc, #792]	; (800111c <HAL_RCC_GetSysClockFreq+0x334>)
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f003 030c 	and.w	r3, r3, #12
 8000e0a:	2b0c      	cmp	r3, #12
 8000e0c:	f200 817e 	bhi.w	800110c <HAL_RCC_GetSysClockFreq+0x324>
 8000e10:	a201      	add	r2, pc, #4	; (adr r2, 8000e18 <HAL_RCC_GetSysClockFreq+0x30>)
 8000e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e16:	bf00      	nop
 8000e18:	08000e4d 	.word	0x08000e4d
 8000e1c:	0800110d 	.word	0x0800110d
 8000e20:	0800110d 	.word	0x0800110d
 8000e24:	0800110d 	.word	0x0800110d
 8000e28:	08000e53 	.word	0x08000e53
 8000e2c:	0800110d 	.word	0x0800110d
 8000e30:	0800110d 	.word	0x0800110d
 8000e34:	0800110d 	.word	0x0800110d
 8000e38:	08000e59 	.word	0x08000e59
 8000e3c:	0800110d 	.word	0x0800110d
 8000e40:	0800110d 	.word	0x0800110d
 8000e44:	0800110d 	.word	0x0800110d
 8000e48:	08000fb5 	.word	0x08000fb5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000e4c:	4bb4      	ldr	r3, [pc, #720]	; (8001120 <HAL_RCC_GetSysClockFreq+0x338>)
 8000e4e:	613b      	str	r3, [r7, #16]
       break;
 8000e50:	e15f      	b.n	8001112 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000e52:	4bb4      	ldr	r3, [pc, #720]	; (8001124 <HAL_RCC_GetSysClockFreq+0x33c>)
 8000e54:	613b      	str	r3, [r7, #16]
      break;
 8000e56:	e15c      	b.n	8001112 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e58:	4bb0      	ldr	r3, [pc, #704]	; (800111c <HAL_RCC_GetSysClockFreq+0x334>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e60:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e62:	4bae      	ldr	r3, [pc, #696]	; (800111c <HAL_RCC_GetSysClockFreq+0x334>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d04a      	beq.n	8000f04 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e6e:	4bab      	ldr	r3, [pc, #684]	; (800111c <HAL_RCC_GetSysClockFreq+0x334>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	099b      	lsrs	r3, r3, #6
 8000e74:	f04f 0400 	mov.w	r4, #0
 8000e78:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000e7c:	f04f 0200 	mov.w	r2, #0
 8000e80:	ea03 0501 	and.w	r5, r3, r1
 8000e84:	ea04 0602 	and.w	r6, r4, r2
 8000e88:	4629      	mov	r1, r5
 8000e8a:	4632      	mov	r2, r6
 8000e8c:	f04f 0300 	mov.w	r3, #0
 8000e90:	f04f 0400 	mov.w	r4, #0
 8000e94:	0154      	lsls	r4, r2, #5
 8000e96:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000e9a:	014b      	lsls	r3, r1, #5
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4622      	mov	r2, r4
 8000ea0:	1b49      	subs	r1, r1, r5
 8000ea2:	eb62 0206 	sbc.w	r2, r2, r6
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	f04f 0400 	mov.w	r4, #0
 8000eae:	0194      	lsls	r4, r2, #6
 8000eb0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000eb4:	018b      	lsls	r3, r1, #6
 8000eb6:	1a5b      	subs	r3, r3, r1
 8000eb8:	eb64 0402 	sbc.w	r4, r4, r2
 8000ebc:	f04f 0100 	mov.w	r1, #0
 8000ec0:	f04f 0200 	mov.w	r2, #0
 8000ec4:	00e2      	lsls	r2, r4, #3
 8000ec6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000eca:	00d9      	lsls	r1, r3, #3
 8000ecc:	460b      	mov	r3, r1
 8000ece:	4614      	mov	r4, r2
 8000ed0:	195b      	adds	r3, r3, r5
 8000ed2:	eb44 0406 	adc.w	r4, r4, r6
 8000ed6:	f04f 0100 	mov.w	r1, #0
 8000eda:	f04f 0200 	mov.w	r2, #0
 8000ede:	0262      	lsls	r2, r4, #9
 8000ee0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8000ee4:	0259      	lsls	r1, r3, #9
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	4614      	mov	r4, r2
 8000eea:	4618      	mov	r0, r3
 8000eec:	4621      	mov	r1, r4
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f04f 0400 	mov.w	r4, #0
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4623      	mov	r3, r4
 8000ef8:	f7ff f984 	bl	8000204 <__aeabi_uldivmod>
 8000efc:	4603      	mov	r3, r0
 8000efe:	460c      	mov	r4, r1
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	e049      	b.n	8000f98 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f04:	4b85      	ldr	r3, [pc, #532]	; (800111c <HAL_RCC_GetSysClockFreq+0x334>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	099b      	lsrs	r3, r3, #6
 8000f0a:	f04f 0400 	mov.w	r4, #0
 8000f0e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000f12:	f04f 0200 	mov.w	r2, #0
 8000f16:	ea03 0501 	and.w	r5, r3, r1
 8000f1a:	ea04 0602 	and.w	r6, r4, r2
 8000f1e:	4629      	mov	r1, r5
 8000f20:	4632      	mov	r2, r6
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	f04f 0400 	mov.w	r4, #0
 8000f2a:	0154      	lsls	r4, r2, #5
 8000f2c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000f30:	014b      	lsls	r3, r1, #5
 8000f32:	4619      	mov	r1, r3
 8000f34:	4622      	mov	r2, r4
 8000f36:	1b49      	subs	r1, r1, r5
 8000f38:	eb62 0206 	sbc.w	r2, r2, r6
 8000f3c:	f04f 0300 	mov.w	r3, #0
 8000f40:	f04f 0400 	mov.w	r4, #0
 8000f44:	0194      	lsls	r4, r2, #6
 8000f46:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000f4a:	018b      	lsls	r3, r1, #6
 8000f4c:	1a5b      	subs	r3, r3, r1
 8000f4e:	eb64 0402 	sbc.w	r4, r4, r2
 8000f52:	f04f 0100 	mov.w	r1, #0
 8000f56:	f04f 0200 	mov.w	r2, #0
 8000f5a:	00e2      	lsls	r2, r4, #3
 8000f5c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000f60:	00d9      	lsls	r1, r3, #3
 8000f62:	460b      	mov	r3, r1
 8000f64:	4614      	mov	r4, r2
 8000f66:	195b      	adds	r3, r3, r5
 8000f68:	eb44 0406 	adc.w	r4, r4, r6
 8000f6c:	f04f 0100 	mov.w	r1, #0
 8000f70:	f04f 0200 	mov.w	r2, #0
 8000f74:	02a2      	lsls	r2, r4, #10
 8000f76:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8000f7a:	0299      	lsls	r1, r3, #10
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	4614      	mov	r4, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	4621      	mov	r1, r4
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f04f 0400 	mov.w	r4, #0
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4623      	mov	r3, r4
 8000f8e:	f7ff f939 	bl	8000204 <__aeabi_uldivmod>
 8000f92:	4603      	mov	r3, r0
 8000f94:	460c      	mov	r4, r1
 8000f96:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000f98:	4b60      	ldr	r3, [pc, #384]	; (800111c <HAL_RCC_GetSysClockFreq+0x334>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	0c1b      	lsrs	r3, r3, #16
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8000fa8:	697a      	ldr	r2, [r7, #20]
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb0:	613b      	str	r3, [r7, #16]
      break;
 8000fb2:	e0ae      	b.n	8001112 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fb4:	4b59      	ldr	r3, [pc, #356]	; (800111c <HAL_RCC_GetSysClockFreq+0x334>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fbc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fbe:	4b57      	ldr	r3, [pc, #348]	; (800111c <HAL_RCC_GetSysClockFreq+0x334>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d04a      	beq.n	8001060 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fca:	4b54      	ldr	r3, [pc, #336]	; (800111c <HAL_RCC_GetSysClockFreq+0x334>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	099b      	lsrs	r3, r3, #6
 8000fd0:	f04f 0400 	mov.w	r4, #0
 8000fd4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000fd8:	f04f 0200 	mov.w	r2, #0
 8000fdc:	ea03 0501 	and.w	r5, r3, r1
 8000fe0:	ea04 0602 	and.w	r6, r4, r2
 8000fe4:	4629      	mov	r1, r5
 8000fe6:	4632      	mov	r2, r6
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	f04f 0400 	mov.w	r4, #0
 8000ff0:	0154      	lsls	r4, r2, #5
 8000ff2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000ff6:	014b      	lsls	r3, r1, #5
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4622      	mov	r2, r4
 8000ffc:	1b49      	subs	r1, r1, r5
 8000ffe:	eb62 0206 	sbc.w	r2, r2, r6
 8001002:	f04f 0300 	mov.w	r3, #0
 8001006:	f04f 0400 	mov.w	r4, #0
 800100a:	0194      	lsls	r4, r2, #6
 800100c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001010:	018b      	lsls	r3, r1, #6
 8001012:	1a5b      	subs	r3, r3, r1
 8001014:	eb64 0402 	sbc.w	r4, r4, r2
 8001018:	f04f 0100 	mov.w	r1, #0
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	00e2      	lsls	r2, r4, #3
 8001022:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001026:	00d9      	lsls	r1, r3, #3
 8001028:	460b      	mov	r3, r1
 800102a:	4614      	mov	r4, r2
 800102c:	195b      	adds	r3, r3, r5
 800102e:	eb44 0406 	adc.w	r4, r4, r6
 8001032:	f04f 0100 	mov.w	r1, #0
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	0262      	lsls	r2, r4, #9
 800103c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001040:	0259      	lsls	r1, r3, #9
 8001042:	460b      	mov	r3, r1
 8001044:	4614      	mov	r4, r2
 8001046:	4618      	mov	r0, r3
 8001048:	4621      	mov	r1, r4
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f04f 0400 	mov.w	r4, #0
 8001050:	461a      	mov	r2, r3
 8001052:	4623      	mov	r3, r4
 8001054:	f7ff f8d6 	bl	8000204 <__aeabi_uldivmod>
 8001058:	4603      	mov	r3, r0
 800105a:	460c      	mov	r4, r1
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	e049      	b.n	80010f4 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001060:	4b2e      	ldr	r3, [pc, #184]	; (800111c <HAL_RCC_GetSysClockFreq+0x334>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	099b      	lsrs	r3, r3, #6
 8001066:	f04f 0400 	mov.w	r4, #0
 800106a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	ea03 0501 	and.w	r5, r3, r1
 8001076:	ea04 0602 	and.w	r6, r4, r2
 800107a:	4629      	mov	r1, r5
 800107c:	4632      	mov	r2, r6
 800107e:	f04f 0300 	mov.w	r3, #0
 8001082:	f04f 0400 	mov.w	r4, #0
 8001086:	0154      	lsls	r4, r2, #5
 8001088:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800108c:	014b      	lsls	r3, r1, #5
 800108e:	4619      	mov	r1, r3
 8001090:	4622      	mov	r2, r4
 8001092:	1b49      	subs	r1, r1, r5
 8001094:	eb62 0206 	sbc.w	r2, r2, r6
 8001098:	f04f 0300 	mov.w	r3, #0
 800109c:	f04f 0400 	mov.w	r4, #0
 80010a0:	0194      	lsls	r4, r2, #6
 80010a2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80010a6:	018b      	lsls	r3, r1, #6
 80010a8:	1a5b      	subs	r3, r3, r1
 80010aa:	eb64 0402 	sbc.w	r4, r4, r2
 80010ae:	f04f 0100 	mov.w	r1, #0
 80010b2:	f04f 0200 	mov.w	r2, #0
 80010b6:	00e2      	lsls	r2, r4, #3
 80010b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80010bc:	00d9      	lsls	r1, r3, #3
 80010be:	460b      	mov	r3, r1
 80010c0:	4614      	mov	r4, r2
 80010c2:	195b      	adds	r3, r3, r5
 80010c4:	eb44 0406 	adc.w	r4, r4, r6
 80010c8:	f04f 0100 	mov.w	r1, #0
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	02a2      	lsls	r2, r4, #10
 80010d2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80010d6:	0299      	lsls	r1, r3, #10
 80010d8:	460b      	mov	r3, r1
 80010da:	4614      	mov	r4, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	4621      	mov	r1, r4
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f04f 0400 	mov.w	r4, #0
 80010e6:	461a      	mov	r2, r3
 80010e8:	4623      	mov	r3, r4
 80010ea:	f7ff f88b 	bl	8000204 <__aeabi_uldivmod>
 80010ee:	4603      	mov	r3, r0
 80010f0:	460c      	mov	r4, r1
 80010f2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80010f4:	4b09      	ldr	r3, [pc, #36]	; (800111c <HAL_RCC_GetSysClockFreq+0x334>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	0f1b      	lsrs	r3, r3, #28
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	fbb2 f3f3 	udiv	r3, r2, r3
 8001108:	613b      	str	r3, [r7, #16]
      break;
 800110a:	e002      	b.n	8001112 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <HAL_RCC_GetSysClockFreq+0x338>)
 800110e:	613b      	str	r3, [r7, #16]
      break;
 8001110:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001112:	693b      	ldr	r3, [r7, #16]
}
 8001114:	4618      	mov	r0, r3
 8001116:	371c      	adds	r7, #28
 8001118:	46bd      	mov	sp, r7
 800111a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800111c:	40023800 	.word	0x40023800
 8001120:	00f42400 	.word	0x00f42400
 8001124:	007a1200 	.word	0x007a1200

08001128 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 8083 	beq.w	8001248 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001142:	4b95      	ldr	r3, [pc, #596]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f003 030c 	and.w	r3, r3, #12
 800114a:	2b04      	cmp	r3, #4
 800114c:	d019      	beq.n	8001182 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800114e:	4b92      	ldr	r3, [pc, #584]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001156:	2b08      	cmp	r3, #8
 8001158:	d106      	bne.n	8001168 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800115a:	4b8f      	ldr	r3, [pc, #572]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001162:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001166:	d00c      	beq.n	8001182 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001168:	4b8b      	ldr	r3, [pc, #556]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001170:	2b0c      	cmp	r3, #12
 8001172:	d112      	bne.n	800119a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001174:	4b88      	ldr	r3, [pc, #544]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800117c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001180:	d10b      	bne.n	800119a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001182:	4b85      	ldr	r3, [pc, #532]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d05b      	beq.n	8001246 <HAL_RCC_OscConfig+0x11e>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d157      	bne.n	8001246 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e216      	b.n	80015c8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a2:	d106      	bne.n	80011b2 <HAL_RCC_OscConfig+0x8a>
 80011a4:	4b7c      	ldr	r3, [pc, #496]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a7b      	ldr	r2, [pc, #492]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 80011aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	e01d      	b.n	80011ee <HAL_RCC_OscConfig+0xc6>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ba:	d10c      	bne.n	80011d6 <HAL_RCC_OscConfig+0xae>
 80011bc:	4b76      	ldr	r3, [pc, #472]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a75      	ldr	r2, [pc, #468]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 80011c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b73      	ldr	r3, [pc, #460]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a72      	ldr	r2, [pc, #456]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 80011ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	e00b      	b.n	80011ee <HAL_RCC_OscConfig+0xc6>
 80011d6:	4b70      	ldr	r3, [pc, #448]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a6f      	ldr	r2, [pc, #444]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 80011dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	4b6d      	ldr	r3, [pc, #436]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a6c      	ldr	r2, [pc, #432]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 80011e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d013      	beq.n	800121e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f6:	f7ff f9eb 	bl	80005d0 <HAL_GetTick>
 80011fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011fe:	f7ff f9e7 	bl	80005d0 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b64      	cmp	r3, #100	; 0x64
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e1db      	b.n	80015c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001210:	4b61      	ldr	r3, [pc, #388]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0f0      	beq.n	80011fe <HAL_RCC_OscConfig+0xd6>
 800121c:	e014      	b.n	8001248 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121e:	f7ff f9d7 	bl	80005d0 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001226:	f7ff f9d3 	bl	80005d0 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b64      	cmp	r3, #100	; 0x64
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e1c7      	b.n	80015c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001238:	4b57      	ldr	r3, [pc, #348]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1f0      	bne.n	8001226 <HAL_RCC_OscConfig+0xfe>
 8001244:	e000      	b.n	8001248 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001246:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d06f      	beq.n	8001334 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001254:	4b50      	ldr	r3, [pc, #320]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 030c 	and.w	r3, r3, #12
 800125c:	2b00      	cmp	r3, #0
 800125e:	d017      	beq.n	8001290 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001260:	4b4d      	ldr	r3, [pc, #308]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001268:	2b08      	cmp	r3, #8
 800126a:	d105      	bne.n	8001278 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800126c:	4b4a      	ldr	r3, [pc, #296]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d00b      	beq.n	8001290 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001278:	4b47      	ldr	r3, [pc, #284]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001280:	2b0c      	cmp	r3, #12
 8001282:	d11c      	bne.n	80012be <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001284:	4b44      	ldr	r3, [pc, #272]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d116      	bne.n	80012be <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001290:	4b41      	ldr	r3, [pc, #260]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d005      	beq.n	80012a8 <HAL_RCC_OscConfig+0x180>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d001      	beq.n	80012a8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e18f      	b.n	80015c8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a8:	4b3b      	ldr	r3, [pc, #236]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	4938      	ldr	r1, [pc, #224]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012bc:	e03a      	b.n	8001334 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d020      	beq.n	8001308 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c6:	4b35      	ldr	r3, [pc, #212]	; (800139c <HAL_RCC_OscConfig+0x274>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012cc:	f7ff f980 	bl	80005d0 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d4:	f7ff f97c 	bl	80005d0 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e170      	b.n	80015c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e6:	4b2c      	ldr	r3, [pc, #176]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0f0      	beq.n	80012d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f2:	4b29      	ldr	r3, [pc, #164]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	4925      	ldr	r1, [pc, #148]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 8001302:	4313      	orrs	r3, r2
 8001304:	600b      	str	r3, [r1, #0]
 8001306:	e015      	b.n	8001334 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001308:	4b24      	ldr	r3, [pc, #144]	; (800139c <HAL_RCC_OscConfig+0x274>)
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130e:	f7ff f95f 	bl	80005d0 <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001316:	f7ff f95b 	bl	80005d0 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e14f      	b.n	80015c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1f0      	bne.n	8001316 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0308 	and.w	r3, r3, #8
 800133c:	2b00      	cmp	r3, #0
 800133e:	d037      	beq.n	80013b0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	695b      	ldr	r3, [r3, #20]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d016      	beq.n	8001376 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001348:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <HAL_RCC_OscConfig+0x278>)
 800134a:	2201      	movs	r2, #1
 800134c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800134e:	f7ff f93f 	bl	80005d0 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001356:	f7ff f93b 	bl	80005d0 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e12f      	b.n	80015c8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 800136a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f0      	beq.n	8001356 <HAL_RCC_OscConfig+0x22e>
 8001374:	e01c      	b.n	80013b0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <HAL_RCC_OscConfig+0x278>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800137c:	f7ff f928 	bl	80005d0 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001382:	e00f      	b.n	80013a4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001384:	f7ff f924 	bl	80005d0 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d908      	bls.n	80013a4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e118      	b.n	80015c8 <HAL_RCC_OscConfig+0x4a0>
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800
 800139c:	42470000 	.word	0x42470000
 80013a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a4:	4b8a      	ldr	r3, [pc, #552]	; (80015d0 <HAL_RCC_OscConfig+0x4a8>)
 80013a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1e9      	bne.n	8001384 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8097 	beq.w	80014ec <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013be:	2300      	movs	r3, #0
 80013c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013c2:	4b83      	ldr	r3, [pc, #524]	; (80015d0 <HAL_RCC_OscConfig+0x4a8>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10f      	bne.n	80013ee <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	4b7f      	ldr	r3, [pc, #508]	; (80015d0 <HAL_RCC_OscConfig+0x4a8>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	4a7e      	ldr	r2, [pc, #504]	; (80015d0 <HAL_RCC_OscConfig+0x4a8>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013dc:	6413      	str	r3, [r2, #64]	; 0x40
 80013de:	4b7c      	ldr	r3, [pc, #496]	; (80015d0 <HAL_RCC_OscConfig+0x4a8>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013ea:	2301      	movs	r3, #1
 80013ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ee:	4b79      	ldr	r3, [pc, #484]	; (80015d4 <HAL_RCC_OscConfig+0x4ac>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d118      	bne.n	800142c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013fa:	4b76      	ldr	r3, [pc, #472]	; (80015d4 <HAL_RCC_OscConfig+0x4ac>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a75      	ldr	r2, [pc, #468]	; (80015d4 <HAL_RCC_OscConfig+0x4ac>)
 8001400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001406:	f7ff f8e3 	bl	80005d0 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800140e:	f7ff f8df 	bl	80005d0 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e0d3      	b.n	80015c8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001420:	4b6c      	ldr	r3, [pc, #432]	; (80015d4 <HAL_RCC_OscConfig+0x4ac>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f0      	beq.n	800140e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d106      	bne.n	8001442 <HAL_RCC_OscConfig+0x31a>
 8001434:	4b66      	ldr	r3, [pc, #408]	; (80015d0 <HAL_RCC_OscConfig+0x4a8>)
 8001436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001438:	4a65      	ldr	r2, [pc, #404]	; (80015d0 <HAL_RCC_OscConfig+0x4a8>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6713      	str	r3, [r2, #112]	; 0x70
 8001440:	e01c      	b.n	800147c <HAL_RCC_OscConfig+0x354>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b05      	cmp	r3, #5
 8001448:	d10c      	bne.n	8001464 <HAL_RCC_OscConfig+0x33c>
 800144a:	4b61      	ldr	r3, [pc, #388]	; (80015d0 <HAL_RCC_OscConfig+0x4a8>)
 800144c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144e:	4a60      	ldr	r2, [pc, #384]	; (80015d0 <HAL_RCC_OscConfig+0x4a8>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	6713      	str	r3, [r2, #112]	; 0x70
 8001456:	4b5e      	ldr	r3, [pc, #376]	; (80015d0 <HAL_RCC_OscConfig+0x4a8>)
 8001458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800145a:	4a5d      	ldr	r2, [pc, #372]	; (80015d0 <HAL_RCC_OscConfig+0x4a8>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6713      	str	r3, [r2, #112]	; 0x70
 8001462:	e00b      	b.n	800147c <HAL_RCC_OscConfig+0x354>
 8001464:	4b5a      	ldr	r3, [pc, #360]	; (80015d0 <HAL_RCC_OscConfig+0x4a8>)
 8001466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001468:	4a59      	ldr	r2, [pc, #356]	; (80015d0 <HAL_RCC_OscConfig+0x4a8>)
 800146a:	f023 0301 	bic.w	r3, r3, #1
 800146e:	6713      	str	r3, [r2, #112]	; 0x70
 8001470:	4b57      	ldr	r3, [pc, #348]	; (80015d0 <HAL_RCC_OscConfig+0x4a8>)
 8001472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001474:	4a56      	ldr	r2, [pc, #344]	; (80015d0 <HAL_RCC_OscConfig+0x4a8>)
 8001476:	f023 0304 	bic.w	r3, r3, #4
 800147a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d015      	beq.n	80014b0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001484:	f7ff f8a4 	bl	80005d0 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800148a:	e00a      	b.n	80014a2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800148c:	f7ff f8a0 	bl	80005d0 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	f241 3288 	movw	r2, #5000	; 0x1388
 800149a:	4293      	cmp	r3, r2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e092      	b.n	80015c8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a2:	4b4b      	ldr	r3, [pc, #300]	; (80015d0 <HAL_RCC_OscConfig+0x4a8>)
 80014a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0ee      	beq.n	800148c <HAL_RCC_OscConfig+0x364>
 80014ae:	e014      	b.n	80014da <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b0:	f7ff f88e 	bl	80005d0 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014b6:	e00a      	b.n	80014ce <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b8:	f7ff f88a 	bl	80005d0 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e07c      	b.n	80015c8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ce:	4b40      	ldr	r3, [pc, #256]	; (80015d0 <HAL_RCC_OscConfig+0x4a8>)
 80014d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1ee      	bne.n	80014b8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014da:	7dfb      	ldrb	r3, [r7, #23]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d105      	bne.n	80014ec <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014e0:	4b3b      	ldr	r3, [pc, #236]	; (80015d0 <HAL_RCC_OscConfig+0x4a8>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	4a3a      	ldr	r2, [pc, #232]	; (80015d0 <HAL_RCC_OscConfig+0x4a8>)
 80014e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d068      	beq.n	80015c6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014f4:	4b36      	ldr	r3, [pc, #216]	; (80015d0 <HAL_RCC_OscConfig+0x4a8>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 030c 	and.w	r3, r3, #12
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	d060      	beq.n	80015c2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	2b02      	cmp	r3, #2
 8001506:	d145      	bne.n	8001594 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001508:	4b33      	ldr	r3, [pc, #204]	; (80015d8 <HAL_RCC_OscConfig+0x4b0>)
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150e:	f7ff f85f 	bl	80005d0 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001516:	f7ff f85b 	bl	80005d0 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e04f      	b.n	80015c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <HAL_RCC_OscConfig+0x4a8>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1f0      	bne.n	8001516 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69da      	ldr	r2, [r3, #28]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	431a      	orrs	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001542:	019b      	lsls	r3, r3, #6
 8001544:	431a      	orrs	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154a:	085b      	lsrs	r3, r3, #1
 800154c:	3b01      	subs	r3, #1
 800154e:	041b      	lsls	r3, r3, #16
 8001550:	431a      	orrs	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001556:	061b      	lsls	r3, r3, #24
 8001558:	431a      	orrs	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	071b      	lsls	r3, r3, #28
 8001560:	491b      	ldr	r1, [pc, #108]	; (80015d0 <HAL_RCC_OscConfig+0x4a8>)
 8001562:	4313      	orrs	r3, r2
 8001564:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001566:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <HAL_RCC_OscConfig+0x4b0>)
 8001568:	2201      	movs	r2, #1
 800156a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff f830 	bl	80005d0 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001574:	f7ff f82c 	bl	80005d0 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e020      	b.n	80015c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001586:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_RCC_OscConfig+0x4a8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0x44c>
 8001592:	e018      	b.n	80015c6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001594:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <HAL_RCC_OscConfig+0x4b0>)
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159a:	f7ff f819 	bl	80005d0 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a2:	f7ff f815 	bl	80005d0 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e009      	b.n	80015c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_RCC_OscConfig+0x4a8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f0      	bne.n	80015a2 <HAL_RCC_OscConfig+0x47a>
 80015c0:	e001      	b.n	80015c6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40007000 	.word	0x40007000
 80015d8:	42470060 	.word	0x42470060

080015dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e03f      	b.n	800166e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d106      	bne.n	8001608 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f001 fc48 	bl	8002e98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2224      	movs	r2, #36	; 0x24
 800160c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800161e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 f829 	bl	8001678 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	691a      	ldr	r2, [r3, #16]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001634:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	695a      	ldr	r2, [r3, #20]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001644:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68da      	ldr	r2, [r3, #12]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001654:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2220      	movs	r2, #32
 8001660:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2220      	movs	r2, #32
 8001668:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001678:	b5b0      	push	{r4, r5, r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	431a      	orrs	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80016b8:	f023 030c 	bic.w	r3, r3, #12
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	68f9      	ldr	r1, [r7, #12]
 80016c2:	430b      	orrs	r3, r1
 80016c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	699a      	ldr	r2, [r3, #24]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016e4:	f040 80e4 	bne.w	80018b0 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4aab      	ldr	r2, [pc, #684]	; (800199c <UART_SetConfig+0x324>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d004      	beq.n	80016fc <UART_SetConfig+0x84>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4aaa      	ldr	r2, [pc, #680]	; (80019a0 <UART_SetConfig+0x328>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d16c      	bne.n	80017d6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80016fc:	f7ff fb60 	bl	8000dc0 <HAL_RCC_GetPCLK2Freq>
 8001700:	4602      	mov	r2, r0
 8001702:	4613      	mov	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	009a      	lsls	r2, r3, #2
 800170a:	441a      	add	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	fbb2 f3f3 	udiv	r3, r2, r3
 8001716:	4aa3      	ldr	r2, [pc, #652]	; (80019a4 <UART_SetConfig+0x32c>)
 8001718:	fba2 2303 	umull	r2, r3, r2, r3
 800171c:	095b      	lsrs	r3, r3, #5
 800171e:	011c      	lsls	r4, r3, #4
 8001720:	f7ff fb4e 	bl	8000dc0 <HAL_RCC_GetPCLK2Freq>
 8001724:	4602      	mov	r2, r0
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	009a      	lsls	r2, r3, #2
 800172e:	441a      	add	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	fbb2 f5f3 	udiv	r5, r2, r3
 800173a:	f7ff fb41 	bl	8000dc0 <HAL_RCC_GetPCLK2Freq>
 800173e:	4602      	mov	r2, r0
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	009a      	lsls	r2, r3, #2
 8001748:	441a      	add	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	fbb2 f3f3 	udiv	r3, r2, r3
 8001754:	4a93      	ldr	r2, [pc, #588]	; (80019a4 <UART_SetConfig+0x32c>)
 8001756:	fba2 2303 	umull	r2, r3, r2, r3
 800175a:	095b      	lsrs	r3, r3, #5
 800175c:	2264      	movs	r2, #100	; 0x64
 800175e:	fb02 f303 	mul.w	r3, r2, r3
 8001762:	1aeb      	subs	r3, r5, r3
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	3332      	adds	r3, #50	; 0x32
 8001768:	4a8e      	ldr	r2, [pc, #568]	; (80019a4 <UART_SetConfig+0x32c>)
 800176a:	fba2 2303 	umull	r2, r3, r2, r3
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001776:	441c      	add	r4, r3
 8001778:	f7ff fb22 	bl	8000dc0 <HAL_RCC_GetPCLK2Freq>
 800177c:	4602      	mov	r2, r0
 800177e:	4613      	mov	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	009a      	lsls	r2, r3, #2
 8001786:	441a      	add	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	fbb2 f5f3 	udiv	r5, r2, r3
 8001792:	f7ff fb15 	bl	8000dc0 <HAL_RCC_GetPCLK2Freq>
 8001796:	4602      	mov	r2, r0
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	009a      	lsls	r2, r3, #2
 80017a0:	441a      	add	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ac:	4a7d      	ldr	r2, [pc, #500]	; (80019a4 <UART_SetConfig+0x32c>)
 80017ae:	fba2 2303 	umull	r2, r3, r2, r3
 80017b2:	095b      	lsrs	r3, r3, #5
 80017b4:	2264      	movs	r2, #100	; 0x64
 80017b6:	fb02 f303 	mul.w	r3, r2, r3
 80017ba:	1aeb      	subs	r3, r5, r3
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	3332      	adds	r3, #50	; 0x32
 80017c0:	4a78      	ldr	r2, [pc, #480]	; (80019a4 <UART_SetConfig+0x32c>)
 80017c2:	fba2 2303 	umull	r2, r3, r2, r3
 80017c6:	095b      	lsrs	r3, r3, #5
 80017c8:	f003 0207 	and.w	r2, r3, #7
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4422      	add	r2, r4
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	e154      	b.n	8001a80 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80017d6:	f7ff fadf 	bl	8000d98 <HAL_RCC_GetPCLK1Freq>
 80017da:	4602      	mov	r2, r0
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	009a      	lsls	r2, r3, #2
 80017e4:	441a      	add	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f0:	4a6c      	ldr	r2, [pc, #432]	; (80019a4 <UART_SetConfig+0x32c>)
 80017f2:	fba2 2303 	umull	r2, r3, r2, r3
 80017f6:	095b      	lsrs	r3, r3, #5
 80017f8:	011c      	lsls	r4, r3, #4
 80017fa:	f7ff facd 	bl	8000d98 <HAL_RCC_GetPCLK1Freq>
 80017fe:	4602      	mov	r2, r0
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	009a      	lsls	r2, r3, #2
 8001808:	441a      	add	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	fbb2 f5f3 	udiv	r5, r2, r3
 8001814:	f7ff fac0 	bl	8000d98 <HAL_RCC_GetPCLK1Freq>
 8001818:	4602      	mov	r2, r0
 800181a:	4613      	mov	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	009a      	lsls	r2, r3, #2
 8001822:	441a      	add	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	fbb2 f3f3 	udiv	r3, r2, r3
 800182e:	4a5d      	ldr	r2, [pc, #372]	; (80019a4 <UART_SetConfig+0x32c>)
 8001830:	fba2 2303 	umull	r2, r3, r2, r3
 8001834:	095b      	lsrs	r3, r3, #5
 8001836:	2264      	movs	r2, #100	; 0x64
 8001838:	fb02 f303 	mul.w	r3, r2, r3
 800183c:	1aeb      	subs	r3, r5, r3
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	3332      	adds	r3, #50	; 0x32
 8001842:	4a58      	ldr	r2, [pc, #352]	; (80019a4 <UART_SetConfig+0x32c>)
 8001844:	fba2 2303 	umull	r2, r3, r2, r3
 8001848:	095b      	lsrs	r3, r3, #5
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001850:	441c      	add	r4, r3
 8001852:	f7ff faa1 	bl	8000d98 <HAL_RCC_GetPCLK1Freq>
 8001856:	4602      	mov	r2, r0
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	009a      	lsls	r2, r3, #2
 8001860:	441a      	add	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	fbb2 f5f3 	udiv	r5, r2, r3
 800186c:	f7ff fa94 	bl	8000d98 <HAL_RCC_GetPCLK1Freq>
 8001870:	4602      	mov	r2, r0
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	009a      	lsls	r2, r3, #2
 800187a:	441a      	add	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	fbb2 f3f3 	udiv	r3, r2, r3
 8001886:	4a47      	ldr	r2, [pc, #284]	; (80019a4 <UART_SetConfig+0x32c>)
 8001888:	fba2 2303 	umull	r2, r3, r2, r3
 800188c:	095b      	lsrs	r3, r3, #5
 800188e:	2264      	movs	r2, #100	; 0x64
 8001890:	fb02 f303 	mul.w	r3, r2, r3
 8001894:	1aeb      	subs	r3, r5, r3
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	3332      	adds	r3, #50	; 0x32
 800189a:	4a42      	ldr	r2, [pc, #264]	; (80019a4 <UART_SetConfig+0x32c>)
 800189c:	fba2 2303 	umull	r2, r3, r2, r3
 80018a0:	095b      	lsrs	r3, r3, #5
 80018a2:	f003 0207 	and.w	r2, r3, #7
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4422      	add	r2, r4
 80018ac:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80018ae:	e0e7      	b.n	8001a80 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a39      	ldr	r2, [pc, #228]	; (800199c <UART_SetConfig+0x324>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d004      	beq.n	80018c4 <UART_SetConfig+0x24c>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a38      	ldr	r2, [pc, #224]	; (80019a0 <UART_SetConfig+0x328>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d171      	bne.n	80019a8 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80018c4:	f7ff fa7c 	bl	8000dc0 <HAL_RCC_GetPCLK2Freq>
 80018c8:	4602      	mov	r2, r0
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	009a      	lsls	r2, r3, #2
 80018d2:	441a      	add	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	fbb2 f3f3 	udiv	r3, r2, r3
 80018de:	4a31      	ldr	r2, [pc, #196]	; (80019a4 <UART_SetConfig+0x32c>)
 80018e0:	fba2 2303 	umull	r2, r3, r2, r3
 80018e4:	095b      	lsrs	r3, r3, #5
 80018e6:	011c      	lsls	r4, r3, #4
 80018e8:	f7ff fa6a 	bl	8000dc0 <HAL_RCC_GetPCLK2Freq>
 80018ec:	4602      	mov	r2, r0
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	009a      	lsls	r2, r3, #2
 80018f6:	441a      	add	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	fbb2 f5f3 	udiv	r5, r2, r3
 8001902:	f7ff fa5d 	bl	8000dc0 <HAL_RCC_GetPCLK2Freq>
 8001906:	4602      	mov	r2, r0
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	009a      	lsls	r2, r3, #2
 8001910:	441a      	add	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	fbb2 f3f3 	udiv	r3, r2, r3
 800191c:	4a21      	ldr	r2, [pc, #132]	; (80019a4 <UART_SetConfig+0x32c>)
 800191e:	fba2 2303 	umull	r2, r3, r2, r3
 8001922:	095b      	lsrs	r3, r3, #5
 8001924:	2264      	movs	r2, #100	; 0x64
 8001926:	fb02 f303 	mul.w	r3, r2, r3
 800192a:	1aeb      	subs	r3, r5, r3
 800192c:	011b      	lsls	r3, r3, #4
 800192e:	3332      	adds	r3, #50	; 0x32
 8001930:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <UART_SetConfig+0x32c>)
 8001932:	fba2 2303 	umull	r2, r3, r2, r3
 8001936:	095b      	lsrs	r3, r3, #5
 8001938:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800193c:	441c      	add	r4, r3
 800193e:	f7ff fa3f 	bl	8000dc0 <HAL_RCC_GetPCLK2Freq>
 8001942:	4602      	mov	r2, r0
 8001944:	4613      	mov	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	009a      	lsls	r2, r3, #2
 800194c:	441a      	add	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	fbb2 f5f3 	udiv	r5, r2, r3
 8001958:	f7ff fa32 	bl	8000dc0 <HAL_RCC_GetPCLK2Freq>
 800195c:	4602      	mov	r2, r0
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	009a      	lsls	r2, r3, #2
 8001966:	441a      	add	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001972:	4a0c      	ldr	r2, [pc, #48]	; (80019a4 <UART_SetConfig+0x32c>)
 8001974:	fba2 2303 	umull	r2, r3, r2, r3
 8001978:	095b      	lsrs	r3, r3, #5
 800197a:	2264      	movs	r2, #100	; 0x64
 800197c:	fb02 f303 	mul.w	r3, r2, r3
 8001980:	1aeb      	subs	r3, r5, r3
 8001982:	011b      	lsls	r3, r3, #4
 8001984:	3332      	adds	r3, #50	; 0x32
 8001986:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <UART_SetConfig+0x32c>)
 8001988:	fba2 2303 	umull	r2, r3, r2, r3
 800198c:	095b      	lsrs	r3, r3, #5
 800198e:	f003 020f 	and.w	r2, r3, #15
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4422      	add	r2, r4
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	e071      	b.n	8001a80 <UART_SetConfig+0x408>
 800199c:	40011000 	.word	0x40011000
 80019a0:	40011400 	.word	0x40011400
 80019a4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80019a8:	f7ff f9f6 	bl	8000d98 <HAL_RCC_GetPCLK1Freq>
 80019ac:	4602      	mov	r2, r0
 80019ae:	4613      	mov	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	009a      	lsls	r2, r3, #2
 80019b6:	441a      	add	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c2:	4a31      	ldr	r2, [pc, #196]	; (8001a88 <UART_SetConfig+0x410>)
 80019c4:	fba2 2303 	umull	r2, r3, r2, r3
 80019c8:	095b      	lsrs	r3, r3, #5
 80019ca:	011c      	lsls	r4, r3, #4
 80019cc:	f7ff f9e4 	bl	8000d98 <HAL_RCC_GetPCLK1Freq>
 80019d0:	4602      	mov	r2, r0
 80019d2:	4613      	mov	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	009a      	lsls	r2, r3, #2
 80019da:	441a      	add	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	fbb2 f5f3 	udiv	r5, r2, r3
 80019e6:	f7ff f9d7 	bl	8000d98 <HAL_RCC_GetPCLK1Freq>
 80019ea:	4602      	mov	r2, r0
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	009a      	lsls	r2, r3, #2
 80019f4:	441a      	add	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a00:	4a21      	ldr	r2, [pc, #132]	; (8001a88 <UART_SetConfig+0x410>)
 8001a02:	fba2 2303 	umull	r2, r3, r2, r3
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	2264      	movs	r2, #100	; 0x64
 8001a0a:	fb02 f303 	mul.w	r3, r2, r3
 8001a0e:	1aeb      	subs	r3, r5, r3
 8001a10:	011b      	lsls	r3, r3, #4
 8001a12:	3332      	adds	r3, #50	; 0x32
 8001a14:	4a1c      	ldr	r2, [pc, #112]	; (8001a88 <UART_SetConfig+0x410>)
 8001a16:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1a:	095b      	lsrs	r3, r3, #5
 8001a1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a20:	441c      	add	r4, r3
 8001a22:	f7ff f9b9 	bl	8000d98 <HAL_RCC_GetPCLK1Freq>
 8001a26:	4602      	mov	r2, r0
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	009a      	lsls	r2, r3, #2
 8001a30:	441a      	add	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	fbb2 f5f3 	udiv	r5, r2, r3
 8001a3c:	f7ff f9ac 	bl	8000d98 <HAL_RCC_GetPCLK1Freq>
 8001a40:	4602      	mov	r2, r0
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	009a      	lsls	r2, r3, #2
 8001a4a:	441a      	add	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a56:	4a0c      	ldr	r2, [pc, #48]	; (8001a88 <UART_SetConfig+0x410>)
 8001a58:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5c:	095b      	lsrs	r3, r3, #5
 8001a5e:	2264      	movs	r2, #100	; 0x64
 8001a60:	fb02 f303 	mul.w	r3, r2, r3
 8001a64:	1aeb      	subs	r3, r5, r3
 8001a66:	011b      	lsls	r3, r3, #4
 8001a68:	3332      	adds	r3, #50	; 0x32
 8001a6a:	4a07      	ldr	r2, [pc, #28]	; (8001a88 <UART_SetConfig+0x410>)
 8001a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a70:	095b      	lsrs	r3, r3, #5
 8001a72:	f003 020f 	and.w	r2, r3, #15
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4422      	add	r2, r4
 8001a7c:	609a      	str	r2, [r3, #8]
}
 8001a7e:	e7ff      	b.n	8001a80 <UART_SetConfig+0x408>
 8001a80:	bf00      	nop
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bdb0      	pop	{r4, r5, r7, pc}
 8001a88:	51eb851f 	.word	0x51eb851f

08001a8c <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <LL_EXTI_EnableIT_0_31+0x20>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4904      	ldr	r1, [pc, #16]	; (8001aac <LL_EXTI_EnableIT_0_31+0x20>)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	600b      	str	r3, [r1, #0]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	40013c00 	.word	0x40013c00

08001ab0 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <LL_EXTI_DisableIT_0_31+0x24>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	4904      	ldr	r1, [pc, #16]	; (8001ad4 <LL_EXTI_DisableIT_0_31+0x24>)
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	600b      	str	r3, [r1, #0]
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40013c00 	.word	0x40013c00

08001ad8 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	4904      	ldr	r1, [pc, #16]	; (8001af8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]

}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	40013c00 	.word	0x40013c00

08001afc <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	4904      	ldr	r1, [pc, #16]	; (8001b20 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	604b      	str	r3, [r1, #4]
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40013c00 	.word	0x40013c00

08001b24 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001b2c:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	4904      	ldr	r1, [pc, #16]	; (8001b44 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	608b      	str	r3, [r1, #8]

}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	40013c00 	.word	0x40013c00

08001b48 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	43db      	mvns	r3, r3
 8001b58:	4904      	ldr	r1, [pc, #16]	; (8001b6c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	608b      	str	r3, [r1, #8]

}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40013c00 	.word	0x40013c00

08001b70 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	4904      	ldr	r1, [pc, #16]	; (8001b90 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	60cb      	str	r3, [r1, #12]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	40013c00 	.word	0x40013c00

08001b94 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	4904      	ldr	r1, [pc, #16]	; (8001bb8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	60cb      	str	r3, [r1, #12]
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40013c00 	.word	0x40013c00

08001bbc <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	791b      	ldrb	r3, [r3, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d060      	beq.n	8001c92 <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d067      	beq.n	8001ca8 <LL_EXTI_Init+0xec>
    {
      switch (EXTI_InitStruct->Mode)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	795b      	ldrb	r3, [r3, #5]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d00e      	beq.n	8001bfe <LL_EXTI_Init+0x42>
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d017      	beq.n	8001c14 <LL_EXTI_Init+0x58>
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d120      	bne.n	8001c2a <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff85 	bl	8001afc <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff ff48 	bl	8001a8c <LL_EXTI_EnableIT_0_31>
          break;
 8001bfc:	e018      	b.n	8001c30 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff ff54 	bl	8001ab0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff63 	bl	8001ad8 <LL_EXTI_EnableEvent_0_31>
          break;
 8001c12:	e00d      	b.n	8001c30 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff37 	bl	8001a8c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff ff58 	bl	8001ad8 <LL_EXTI_EnableEvent_0_31>
          break;
 8001c28:	e002      	b.n	8001c30 <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	73fb      	strb	r3, [r7, #15]
          break;
 8001c2e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	799b      	ldrb	r3, [r3, #6]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d037      	beq.n	8001ca8 <LL_EXTI_Init+0xec>
      {
        switch (EXTI_InitStruct->Trigger)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	799b      	ldrb	r3, [r3, #6]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d00e      	beq.n	8001c5e <LL_EXTI_Init+0xa2>
 8001c40:	2b03      	cmp	r3, #3
 8001c42:	d017      	beq.n	8001c74 <LL_EXTI_Init+0xb8>
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d120      	bne.n	8001c8a <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ffa1 	bl	8001b94 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff ff64 	bl	8001b24 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001c5c:	e025      	b.n	8001caa <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ff70 	bl	8001b48 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff7f 	bl	8001b70 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001c72:	e01a      	b.n	8001caa <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff53 	bl	8001b24 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff ff74 	bl	8001b70 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001c88:	e00f      	b.n	8001caa <LL_EXTI_Init+0xee>
          default:
            status = ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	73fb      	strb	r3, [r7, #15]
            break;
 8001c8e:	bf00      	nop
 8001c90:	e00b      	b.n	8001caa <LL_EXTI_Init+0xee>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff ff0a 	bl	8001ab0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff2b 	bl	8001afc <LL_EXTI_DisableEvent_0_31>
 8001ca6:	e000      	b.n	8001caa <LL_EXTI_Init+0xee>
      }
 8001ca8:	bf00      	nop
  }
  return status;
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b089      	sub	sp, #36	; 0x24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	fa93 f3a3 	rbit	r3, r3
 8001cce:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	fab3 f383 	clz	r3, r3
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	2103      	movs	r1, #3
 8001cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	fa93 f3a3 	rbit	r3, r3
 8001cee:	61bb      	str	r3, [r7, #24]
  return result;
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001d00:	431a      	orrs	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	601a      	str	r2, [r3, #0]
}
 8001d06:	bf00      	nop
 8001d08:	3724      	adds	r7, #36	; 0x24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b085      	sub	sp, #20
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	60f8      	str	r0, [r7, #12]
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	43db      	mvns	r3, r3
 8001d26:	401a      	ands	r2, r3
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	fb01 f303 	mul.w	r3, r1, r3
 8001d30:	431a      	orrs	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	605a      	str	r2, [r3, #4]
}
 8001d36:	bf00      	nop
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b089      	sub	sp, #36	; 0x24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	60f8      	str	r0, [r7, #12]
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	fa93 f3a3 	rbit	r3, r3
 8001d5c:	613b      	str	r3, [r7, #16]
  return result;
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	fab3 f383 	clz	r3, r3
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	2103      	movs	r1, #3
 8001d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	401a      	ands	r2, r3
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	fa93 f3a3 	rbit	r3, r3
 8001d7c:	61bb      	str	r3, [r7, #24]
  return result;
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	fab3 f383 	clz	r3, r3
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001d94:	bf00      	nop
 8001d96:	3724      	adds	r7, #36	; 0x24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b089      	sub	sp, #36	; 0x24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	fa93 f3a3 	rbit	r3, r3
 8001dba:	613b      	str	r3, [r7, #16]
  return result;
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	fab3 f383 	clz	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	2103      	movs	r1, #3
 8001dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	401a      	ands	r2, r3
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	fa93 f3a3 	rbit	r3, r3
 8001dda:	61bb      	str	r3, [r7, #24]
  return result;
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	fab3 f383 	clz	r3, r3
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dec:	431a      	orrs	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	60da      	str	r2, [r3, #12]
}
 8001df2:	bf00      	nop
 8001df4:	3724      	adds	r7, #36	; 0x24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b089      	sub	sp, #36	; 0x24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6a1a      	ldr	r2, [r3, #32]
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	fa93 f3a3 	rbit	r3, r3
 8001e18:	613b      	str	r3, [r7, #16]
  return result;
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	fab3 f383 	clz	r3, r3
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	210f      	movs	r1, #15
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	401a      	ands	r2, r3
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	fa93 f3a3 	rbit	r3, r3
 8001e38:	61bb      	str	r3, [r7, #24]
  return result;
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	fab3 f383 	clz	r3, r3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8001e50:	bf00      	nop
 8001e52:	3724      	adds	r7, #36	; 0x24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b089      	sub	sp, #36	; 0x24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	0a1b      	lsrs	r3, r3, #8
 8001e70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	fa93 f3a3 	rbit	r3, r3
 8001e78:	613b      	str	r3, [r7, #16]
  return result;
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	fab3 f383 	clz	r3, r3
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	210f      	movs	r1, #15
 8001e86:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	401a      	ands	r2, r3
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	0a1b      	lsrs	r3, r3, #8
 8001e92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	fa93 f3a3 	rbit	r3, r3
 8001e9a:	61bb      	str	r3, [r7, #24]
  return result;
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	fab3 f383 	clz	r3, r3
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eac:	431a      	orrs	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001eb2:	bf00      	nop
 8001eb4:	3724      	adds	r7, #36	; 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b088      	sub	sp, #32
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	fa93 f3a3 	rbit	r3, r3
 8001edc:	613b      	str	r3, [r7, #16]
  return result;
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	fab3 f383 	clz	r3, r3
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001ee8:	e049      	b.n	8001f7e <LL_GPIO_Init+0xc0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	2101      	movs	r1, #1
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d03b      	beq.n	8001f78 <LL_GPIO_Init+0xba>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	461a      	mov	r2, r3
 8001f06:	69b9      	ldr	r1, [r7, #24]
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff fed3 	bl	8001cb4 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d003      	beq.n	8001f1e <LL_GPIO_Init+0x60>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d106      	bne.n	8001f2c <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	461a      	mov	r2, r3
 8001f24:	69b9      	ldr	r1, [r7, #24]
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff ff0b 	bl	8001d42 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	461a      	mov	r2, r3
 8001f32:	69b9      	ldr	r1, [r7, #24]
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff ff33 	bl	8001da0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d11a      	bne.n	8001f78 <LL_GPIO_Init+0xba>
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	fa93 f3a3 	rbit	r3, r3
 8001f4c:	60bb      	str	r3, [r7, #8]
  return result;
 8001f4e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001f50:	fab3 f383 	clz	r3, r3
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b07      	cmp	r3, #7
 8001f58:	d807      	bhi.n	8001f6a <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	69b9      	ldr	r1, [r7, #24]
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff ff4b 	bl	8001dfe <LL_GPIO_SetAFPin_0_7>
 8001f68:	e006      	b.n	8001f78 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	69b9      	ldr	r1, [r7, #24]
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff ff72 	bl	8001e5c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	fa22 f303 	lsr.w	r3, r2, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1ae      	bne.n	8001eea <LL_GPIO_Init+0x2c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d003      	beq.n	8001f9c <LL_GPIO_Init+0xde>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d107      	bne.n	8001fac <LL_GPIO_Init+0xee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	6819      	ldr	r1, [r3, #0]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff feb3 	bl	8001d12 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3720      	adds	r7, #32
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	635a      	str	r2, [r3, #52]	; 0x34
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	f043 0201 	orr.w	r2, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	615a      	str	r2, [r3, #20]
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
	...

0800209c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a3d      	ldr	r2, [pc, #244]	; (80021a4 <LL_TIM_Init+0x108>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d013      	beq.n	80020dc <LL_TIM_Init+0x40>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ba:	d00f      	beq.n	80020dc <LL_TIM_Init+0x40>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a3a      	ldr	r2, [pc, #232]	; (80021a8 <LL_TIM_Init+0x10c>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d00b      	beq.n	80020dc <LL_TIM_Init+0x40>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a39      	ldr	r2, [pc, #228]	; (80021ac <LL_TIM_Init+0x110>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d007      	beq.n	80020dc <LL_TIM_Init+0x40>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a38      	ldr	r2, [pc, #224]	; (80021b0 <LL_TIM_Init+0x114>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d003      	beq.n	80020dc <LL_TIM_Init+0x40>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a37      	ldr	r2, [pc, #220]	; (80021b4 <LL_TIM_Init+0x118>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d106      	bne.n	80020ea <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a2d      	ldr	r2, [pc, #180]	; (80021a4 <LL_TIM_Init+0x108>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d02b      	beq.n	800214a <LL_TIM_Init+0xae>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f8:	d027      	beq.n	800214a <LL_TIM_Init+0xae>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a2a      	ldr	r2, [pc, #168]	; (80021a8 <LL_TIM_Init+0x10c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d023      	beq.n	800214a <LL_TIM_Init+0xae>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a29      	ldr	r2, [pc, #164]	; (80021ac <LL_TIM_Init+0x110>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d01f      	beq.n	800214a <LL_TIM_Init+0xae>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a28      	ldr	r2, [pc, #160]	; (80021b0 <LL_TIM_Init+0x114>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d01b      	beq.n	800214a <LL_TIM_Init+0xae>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a27      	ldr	r2, [pc, #156]	; (80021b4 <LL_TIM_Init+0x118>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d017      	beq.n	800214a <LL_TIM_Init+0xae>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a26      	ldr	r2, [pc, #152]	; (80021b8 <LL_TIM_Init+0x11c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d013      	beq.n	800214a <LL_TIM_Init+0xae>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a25      	ldr	r2, [pc, #148]	; (80021bc <LL_TIM_Init+0x120>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d00f      	beq.n	800214a <LL_TIM_Init+0xae>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a24      	ldr	r2, [pc, #144]	; (80021c0 <LL_TIM_Init+0x124>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d00b      	beq.n	800214a <LL_TIM_Init+0xae>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a23      	ldr	r2, [pc, #140]	; (80021c4 <LL_TIM_Init+0x128>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d007      	beq.n	800214a <LL_TIM_Init+0xae>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a22      	ldr	r2, [pc, #136]	; (80021c8 <LL_TIM_Init+0x12c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d003      	beq.n	800214a <LL_TIM_Init+0xae>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a21      	ldr	r2, [pc, #132]	; (80021cc <LL_TIM_Init+0x130>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d106      	bne.n	8002158 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4313      	orrs	r3, r2
 8002156:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	4619      	mov	r1, r3
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff ff34 	bl	8001fd2 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	4619      	mov	r1, r3
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff ff20 	bl	8001fb6 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <LL_TIM_Init+0x108>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d003      	beq.n	8002186 <LL_TIM_Init+0xea>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a0c      	ldr	r2, [pc, #48]	; (80021b4 <LL_TIM_Init+0x118>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d105      	bne.n	8002192 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	7c1b      	ldrb	r3, [r3, #16]
 800218a:	4619      	mov	r1, r3
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff ff2e 	bl	8001fee <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff ff71 	bl	800207a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40010000 	.word	0x40010000
 80021a8:	40000400 	.word	0x40000400
 80021ac:	40000800 	.word	0x40000800
 80021b0:	40000c00 	.word	0x40000c00
 80021b4:	40010400 	.word	0x40010400
 80021b8:	40014000 	.word	0x40014000
 80021bc:	40014400 	.word	0x40014400
 80021c0:	40014800 	.word	0x40014800
 80021c4:	40001800 	.word	0x40001800
 80021c8:	40001c00 	.word	0x40001c00
 80021cc:	40002000 	.word	0x40002000

080021d0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2b10      	cmp	r3, #16
 80021e4:	d012      	beq.n	800220c <LL_TIM_OC_Init+0x3c>
 80021e6:	2b10      	cmp	r3, #16
 80021e8:	d802      	bhi.n	80021f0 <LL_TIM_OC_Init+0x20>
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d007      	beq.n	80021fe <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80021ee:	e022      	b.n	8002236 <LL_TIM_OC_Init+0x66>
  switch (Channel)
 80021f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021f4:	d011      	beq.n	800221a <LL_TIM_OC_Init+0x4a>
 80021f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021fa:	d015      	beq.n	8002228 <LL_TIM_OC_Init+0x58>
      break;
 80021fc:	e01b      	b.n	8002236 <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f000 f867 	bl	80022d4 <OC1Config>
 8002206:	4603      	mov	r3, r0
 8002208:	75fb      	strb	r3, [r7, #23]
      break;
 800220a:	e014      	b.n	8002236 <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 f8cc 	bl	80023ac <OC2Config>
 8002214:	4603      	mov	r3, r0
 8002216:	75fb      	strb	r3, [r7, #23]
      break;
 8002218:	e00d      	b.n	8002236 <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f000 f935 	bl	800248c <OC3Config>
 8002222:	4603      	mov	r3, r0
 8002224:	75fb      	strb	r3, [r7, #23]
      break;
 8002226:	e006      	b.n	8002236 <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 f99e 	bl	800256c <OC4Config>
 8002230:	4603      	mov	r3, r0
 8002232:	75fb      	strb	r3, [r7, #23]
      break;
 8002234:	bf00      	nop
  }

  return result;
 8002236:	7dfb      	ldrb	r3, [r7, #23]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	7b12      	ldrb	r2, [r2, #12]
 8002258:	4313      	orrs	r3, r2
 800225a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	4313      	orrs	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	4313      	orrs	r3, r2
 8002276:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4313      	orrs	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	89d2      	ldrh	r2, [r2, #14]
 8002290:	4313      	orrs	r3, r2
 8002292:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	4313      	orrs	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	f023 0201 	bic.w	r2, r3, #1
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f023 0303 	bic.w	r3, r3, #3
 8002302:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4313      	orrs	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f023 0202 	bic.w	r2, r3, #2
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	f023 0201 	bic.w	r2, r3, #1
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	4313      	orrs	r3, r2
 800232c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a1c      	ldr	r2, [pc, #112]	; (80023a4 <OC1Config+0xd0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d003      	beq.n	800233e <OC1Config+0x6a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a1b      	ldr	r2, [pc, #108]	; (80023a8 <OC1Config+0xd4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d11e      	bne.n	800237c <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f023 0208 	bic.w	r2, r3, #8
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4313      	orrs	r3, r2
 800234c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f023 0204 	bic.w	r2, r3, #4
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4313      	orrs	r3, r2
 800235c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	4619      	mov	r1, r3
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff fe3b 	bl	800200a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40010000 	.word	0x40010000
 80023a8:	40010400 	.word	0x40010400

080023ac <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	f023 0210 	bic.w	r2, r3, #16
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	021b      	lsls	r3, r3, #8
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f023 0220 	bic.w	r2, r3, #32
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	4313      	orrs	r3, r2
 80023fa:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f023 0210 	bic.w	r2, r3, #16
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	4313      	orrs	r3, r2
 800240a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a1d      	ldr	r2, [pc, #116]	; (8002484 <OC2Config+0xd8>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d003      	beq.n	800241c <OC2Config+0x70>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a1c      	ldr	r2, [pc, #112]	; (8002488 <OC2Config+0xdc>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d11f      	bne.n	800245c <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	019b      	lsls	r3, r3, #6
 8002428:	4313      	orrs	r3, r2
 800242a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	019b      	lsls	r3, r3, #6
 8002438:	4313      	orrs	r3, r2
 800243a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4313      	orrs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	4619      	mov	r1, r3
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7ff fdd9 	bl	8002026 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40010000 	.word	0x40010000
 8002488:	40010400 	.word	0x40010400

0800248c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f023 0303 	bic.w	r3, r3, #3
 80024ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	021b      	lsls	r3, r3, #8
 80024d6:	4313      	orrs	r3, r2
 80024d8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	021b      	lsls	r3, r3, #8
 80024e6:	4313      	orrs	r3, r2
 80024e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a1d      	ldr	r2, [pc, #116]	; (8002564 <OC3Config+0xd8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d003      	beq.n	80024fa <OC3Config+0x6e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a1c      	ldr	r2, [pc, #112]	; (8002568 <OC3Config+0xdc>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d11f      	bne.n	800253a <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	029b      	lsls	r3, r3, #10
 8002506:	4313      	orrs	r3, r2
 8002508:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	029b      	lsls	r3, r3, #10
 8002516:	4313      	orrs	r3, r2
 8002518:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	011b      	lsls	r3, r3, #4
 8002526:	4313      	orrs	r3, r2
 8002528:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	015b      	lsls	r3, r3, #5
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	4619      	mov	r1, r3
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff fd78 	bl	8002042 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40010000 	.word	0x40010000
 8002568:	40010400 	.word	0x40010400

0800256c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800259a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	021b      	lsls	r3, r3, #8
 80025a8:	4313      	orrs	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	031b      	lsls	r3, r3, #12
 80025b8:	4313      	orrs	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	031b      	lsls	r3, r3, #12
 80025c8:	4313      	orrs	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a11      	ldr	r2, [pc, #68]	; (8002614 <OC4Config+0xa8>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d003      	beq.n	80025dc <OC4Config+0x70>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a10      	ldr	r2, [pc, #64]	; (8002618 <OC4Config+0xac>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d107      	bne.n	80025ec <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	019b      	lsls	r3, r3, #6
 80025e8:	4313      	orrs	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4619      	mov	r1, r3
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff fd2d 	bl	800205e <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40010000 	.word	0x40010000
 8002618:	40010400 	.word	0x40010400

0800261c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	619a      	str	r2, [r3, #24]
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	041a      	lsls	r2, r3, #16
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	619a      	str	r2, [r3, #24]
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
	...

08002658 <_ZN8LedBlink6toggleEv>:

#include "LedBlink.hpp"
#include "gpio.h"
//#include "stm32f4xx_hal.h"

void LedBlink::toggle() {
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
	  LL_GPIO_SetOutputPin(GPIOA, GPIO_PIN_5);
 8002660:	2120      	movs	r1, #32
 8002662:	4808      	ldr	r0, [pc, #32]	; (8002684 <_ZN8LedBlink6toggleEv+0x2c>)
 8002664:	f7ff ffda 	bl	800261c <LL_GPIO_SetOutputPin>
	  HAL_Delay(100);
 8002668:	2064      	movs	r0, #100	; 0x64
 800266a:	f7fd ffbd 	bl	80005e8 <HAL_Delay>
	  LL_GPIO_ResetOutputPin(GPIOA, GPIO_PIN_5);
 800266e:	2120      	movs	r1, #32
 8002670:	4804      	ldr	r0, [pc, #16]	; (8002684 <_ZN8LedBlink6toggleEv+0x2c>)
 8002672:	f7ff ffe1 	bl	8002638 <LL_GPIO_ResetOutputPin>
	  HAL_Delay(100);
 8002676:	2064      	movs	r0, #100	; 0x64
 8002678:	f7fd ffb6 	bl	80005e8 <HAL_Delay>
}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40020000 	.word	0x40020000

08002688 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8002692:	4a13      	ldr	r2, [pc, #76]	; (80026e0 <LL_SYSCFG_SetEXTISource+0x58>)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	b2db      	uxtb	r3, r3
 8002698:	3302      	adds	r3, #2
 800269a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	0c1b      	lsrs	r3, r3, #16
 80026a2:	43db      	mvns	r3, r3
 80026a4:	ea02 0103 	and.w	r1, r2, r3
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	0c1b      	lsrs	r3, r3, #16
 80026ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	fa93 f3a3 	rbit	r3, r3
 80026b4:	60bb      	str	r3, [r7, #8]
  return result;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	fab3 f383 	clz	r3, r3
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	461a      	mov	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	fa03 f202 	lsl.w	r2, r3, r2
 80026c6:	4806      	ldr	r0, [pc, #24]	; (80026e0 <LL_SYSCFG_SetEXTISource+0x58>)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	430a      	orrs	r2, r1
 80026ce:	3302      	adds	r3, #2
 80026d0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80026d4:	bf00      	nop
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	40013800 	.word	0x40013800

080026e4 <LL_GPIO_SetPinMode>:
{
 80026e4:	b480      	push	{r7}
 80026e6:	b089      	sub	sp, #36	; 0x24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	fa93 f3a3 	rbit	r3, r3
 80026fe:	613b      	str	r3, [r7, #16]
  return result;
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	fab3 f383 	clz	r3, r3
 8002706:	b2db      	uxtb	r3, r3
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	2103      	movs	r1, #3
 800270c:	fa01 f303 	lsl.w	r3, r1, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	401a      	ands	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	fa93 f3a3 	rbit	r3, r3
 800271e:	61bb      	str	r3, [r7, #24]
  return result;
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	fa01 f303 	lsl.w	r3, r1, r3
 8002730:	431a      	orrs	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	601a      	str	r2, [r3, #0]
}
 8002736:	bf00      	nop
 8002738:	3724      	adds	r7, #36	; 0x24
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <LL_GPIO_SetPinPull>:
{
 8002742:	b480      	push	{r7}
 8002744:	b089      	sub	sp, #36	; 0x24
 8002746:	af00      	add	r7, sp, #0
 8002748:	60f8      	str	r0, [r7, #12]
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	fa93 f3a3 	rbit	r3, r3
 800275c:	613b      	str	r3, [r7, #16]
  return result;
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	fab3 f383 	clz	r3, r3
 8002764:	b2db      	uxtb	r3, r3
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	2103      	movs	r1, #3
 800276a:	fa01 f303 	lsl.w	r3, r1, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	401a      	ands	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	fa93 f3a3 	rbit	r3, r3
 800277c:	61bb      	str	r3, [r7, #24]
  return result;
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	fab3 f383 	clz	r3, r3
 8002784:	b2db      	uxtb	r3, r3
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	fa01 f303 	lsl.w	r3, r1, r3
 800278e:	431a      	orrs	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	60da      	str	r2, [r3, #12]
}
 8002794:	bf00      	nop
 8002796:	3724      	adds	r7, #36	; 0x24
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <LL_GPIO_ResetOutputPin>:
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	041a      	lsls	r2, r3, #16
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	619a      	str	r2, [r3, #24]
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
	...

080027c0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027cc:	4907      	ldr	r1, [pc, #28]	; (80027ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4013      	ands	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027de:	68fb      	ldr	r3, [r7, #12]
}
 80027e0:	bf00      	nop
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	40023800 	.word	0x40023800

080027f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80027f6:	f107 0318 	add.w	r3, r7, #24
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002800:	463b      	mov	r3, r7
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	605a      	str	r2, [r3, #4]
 8002808:	609a      	str	r2, [r3, #8]
 800280a:	60da      	str	r2, [r3, #12]
 800280c:	611a      	str	r2, [r3, #16]
 800280e:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002810:	2004      	movs	r0, #4
 8002812:	f7ff ffd5 	bl	80027c0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8002816:	2080      	movs	r0, #128	; 0x80
 8002818:	f7ff ffd2 	bl	80027c0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800281c:	2001      	movs	r0, #1
 800281e:	f7ff ffcf 	bl	80027c0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002822:	2002      	movs	r0, #2
 8002824:	f7ff ffcc 	bl	80027c0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8002828:	2120      	movs	r1, #32
 800282a:	481a      	ldr	r0, [pc, #104]	; (8002894 <MX_GPIO_Init+0xa4>)
 800282c:	f7ff ffb8 	bl	80027a0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8002830:	4919      	ldr	r1, [pc, #100]	; (8002898 <MX_GPIO_Init+0xa8>)
 8002832:	2002      	movs	r0, #2
 8002834:	f7ff ff28 	bl	8002688 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8002838:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800283c:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800283e:	2301      	movs	r3, #1
 8002840:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8002842:	2300      	movs	r3, #0
 8002844:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8002846:	2302      	movs	r3, #2
 8002848:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800284a:	f107 0318 	add.w	r3, r7, #24
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff f9b4 	bl	8001bbc <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8002854:	2200      	movs	r2, #0
 8002856:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800285a:	4810      	ldr	r0, [pc, #64]	; (800289c <MX_GPIO_Init+0xac>)
 800285c:	f7ff ff71 	bl	8002742 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8002860:	2200      	movs	r2, #0
 8002862:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002866:	480d      	ldr	r0, [pc, #52]	; (800289c <MX_GPIO_Init+0xac>)
 8002868:	f7ff ff3c 	bl	80026e4 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 800286c:	2320      	movs	r3, #32
 800286e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002870:	2301      	movs	r3, #1
 8002872:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002874:	2300      	movs	r3, #0
 8002876:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800287c:	2300      	movs	r3, #0
 800287e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002880:	463b      	mov	r3, r7
 8002882:	4619      	mov	r1, r3
 8002884:	4803      	ldr	r0, [pc, #12]	; (8002894 <MX_GPIO_Init+0xa4>)
 8002886:	f7ff fb1a 	bl	8001ebe <LL_GPIO_Init>

}
 800288a:	bf00      	nop
 800288c:	3720      	adds	r7, #32
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40020000 	.word	0x40020000
 8002898:	00f00003 	.word	0x00f00003
 800289c:	40020800 	.word	0x40020800

080028a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028a4:	f7fd fe2e 	bl	8000504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028a8:	f000 f80a 	bl	80028c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028ac:	f7ff ffa0 	bl	80027f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80028b0:	f000 fac8 	bl	8002e44 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80028b4:	f000 f9f2 	bl	8002c9c <MX_TIM1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  cpploop();
 80028b8:	f000 fb36 	bl	8002f28 <cpploop>
 80028bc:	e7fc      	b.n	80028b8 <main+0x18>
	...

080028c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b094      	sub	sp, #80	; 0x50
 80028c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028c6:	f107 031c 	add.w	r3, r7, #28
 80028ca:	2234      	movs	r2, #52	; 0x34
 80028cc:	2100      	movs	r1, #0
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fb84 	bl	8002fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028d4:	f107 0308 	add.w	r3, r7, #8
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028e4:	2300      	movs	r3, #0
 80028e6:	607b      	str	r3, [r7, #4]
 80028e8:	4b2c      	ldr	r3, [pc, #176]	; (800299c <SystemClock_Config+0xdc>)
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	4a2b      	ldr	r2, [pc, #172]	; (800299c <SystemClock_Config+0xdc>)
 80028ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f2:	6413      	str	r3, [r2, #64]	; 0x40
 80028f4:	4b29      	ldr	r3, [pc, #164]	; (800299c <SystemClock_Config+0xdc>)
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fc:	607b      	str	r3, [r7, #4]
 80028fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002900:	2300      	movs	r3, #0
 8002902:	603b      	str	r3, [r7, #0]
 8002904:	4b26      	ldr	r3, [pc, #152]	; (80029a0 <SystemClock_Config+0xe0>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a25      	ldr	r2, [pc, #148]	; (80029a0 <SystemClock_Config+0xe0>)
 800290a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800290e:	6013      	str	r3, [r2, #0]
 8002910:	4b23      	ldr	r3, [pc, #140]	; (80029a0 <SystemClock_Config+0xe0>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002918:	603b      	str	r3, [r7, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800291c:	2301      	movs	r3, #1
 800291e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002920:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002924:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002926:	2302      	movs	r3, #2
 8002928:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800292a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800292e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002930:	2304      	movs	r3, #4
 8002932:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002934:	23b4      	movs	r3, #180	; 0xb4
 8002936:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002938:	2302      	movs	r3, #2
 800293a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800293c:	2302      	movs	r3, #2
 800293e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002940:	2302      	movs	r3, #2
 8002942:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002944:	f107 031c 	add.w	r3, r7, #28
 8002948:	4618      	mov	r0, r3
 800294a:	f7fe fbed 	bl	8001128 <HAL_RCC_OscConfig>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002954:	f000 f826 	bl	80029a4 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002958:	f7fe f8e0 	bl	8000b1c <HAL_PWREx_EnableOverDrive>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002962:	f000 f81f 	bl	80029a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002966:	230f      	movs	r3, #15
 8002968:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800296a:	2302      	movs	r3, #2
 800296c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800296e:	2300      	movs	r3, #0
 8002970:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002972:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002976:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800297c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800297e:	f107 0308 	add.w	r3, r7, #8
 8002982:	2105      	movs	r1, #5
 8002984:	4618      	mov	r0, r3
 8002986:	f7fe f919 	bl	8000bbc <HAL_RCC_ClockConfig>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002990:	f000 f808 	bl	80029a4 <Error_Handler>
  }
}
 8002994:	bf00      	nop
 8002996:	3750      	adds	r7, #80	; 0x50
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40023800 	.word	0x40023800
 80029a0:	40007000 	.word	0x40007000

080029a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80029a8:	bf00      	nop
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	607b      	str	r3, [r7, #4]
 80029be:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <HAL_MspInit+0x4c>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	4a0f      	ldr	r2, [pc, #60]	; (8002a00 <HAL_MspInit+0x4c>)
 80029c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ca:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <HAL_MspInit+0x4c>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d2:	607b      	str	r3, [r7, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	603b      	str	r3, [r7, #0]
 80029da:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <HAL_MspInit+0x4c>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	4a08      	ldr	r2, [pc, #32]	; (8002a00 <HAL_MspInit+0x4c>)
 80029e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e4:	6413      	str	r3, [r2, #64]	; 0x40
 80029e6:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <HAL_MspInit+0x4c>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80029f2:	2007      	movs	r0, #7
 80029f4:	f7fd fecc 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029f8:	bf00      	nop
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40023800 	.word	0x40023800

08002a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a08:	bf00      	nop
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a12:	b480      	push	{r7}
 8002a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a16:	e7fe      	b.n	8002a16 <HardFault_Handler+0x4>

08002a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a1c:	e7fe      	b.n	8002a1c <MemManage_Handler+0x4>

08002a1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a22:	e7fe      	b.n	8002a22 <BusFault_Handler+0x4>

08002a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a28:	e7fe      	b.n	8002a28 <UsageFault_Handler+0x4>

08002a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a3c:	bf00      	nop
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a46:	b480      	push	{r7}
 8002a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a58:	f7fd fda6 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a5c:	bf00      	nop
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a64:	4b16      	ldr	r3, [pc, #88]	; (8002ac0 <SystemInit+0x60>)
 8002a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6a:	4a15      	ldr	r2, [pc, #84]	; (8002ac0 <SystemInit+0x60>)
 8002a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002a74:	4b13      	ldr	r3, [pc, #76]	; (8002ac4 <SystemInit+0x64>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a12      	ldr	r2, [pc, #72]	; (8002ac4 <SystemInit+0x64>)
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a80:	4b10      	ldr	r3, [pc, #64]	; (8002ac4 <SystemInit+0x64>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002a86:	4b0f      	ldr	r3, [pc, #60]	; (8002ac4 <SystemInit+0x64>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a0e      	ldr	r2, [pc, #56]	; (8002ac4 <SystemInit+0x64>)
 8002a8c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a94:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002a96:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <SystemInit+0x64>)
 8002a98:	4a0b      	ldr	r2, [pc, #44]	; (8002ac8 <SystemInit+0x68>)
 8002a9a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002a9c:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <SystemInit+0x64>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a08      	ldr	r2, [pc, #32]	; (8002ac4 <SystemInit+0x64>)
 8002aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002aa8:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <SystemInit+0x64>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002aae:	4b04      	ldr	r3, [pc, #16]	; (8002ac0 <SystemInit+0x60>)
 8002ab0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ab4:	609a      	str	r2, [r3, #8]
#endif
}
 8002ab6:	bf00      	nop
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	e000ed00 	.word	0xe000ed00
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	24003010 	.word	0x24003010

08002acc <LL_TIM_DisableARRPreload>:
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	601a      	str	r2, [r3, #0]
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <LL_TIM_OC_DisableFast>:
{
 8002aec:	b4b0      	push	{r4, r5, r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d01c      	beq.n	8002b36 <LL_TIM_OC_DisableFast+0x4a>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d017      	beq.n	8002b32 <LL_TIM_OC_DisableFast+0x46>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b10      	cmp	r3, #16
 8002b06:	d012      	beq.n	8002b2e <LL_TIM_OC_DisableFast+0x42>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	2b40      	cmp	r3, #64	; 0x40
 8002b0c:	d00d      	beq.n	8002b2a <LL_TIM_OC_DisableFast+0x3e>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b14:	d007      	beq.n	8002b26 <LL_TIM_OC_DisableFast+0x3a>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b1c:	d101      	bne.n	8002b22 <LL_TIM_OC_DisableFast+0x36>
 8002b1e:	2305      	movs	r3, #5
 8002b20:	e00a      	b.n	8002b38 <LL_TIM_OC_DisableFast+0x4c>
 8002b22:	2306      	movs	r3, #6
 8002b24:	e008      	b.n	8002b38 <LL_TIM_OC_DisableFast+0x4c>
 8002b26:	2304      	movs	r3, #4
 8002b28:	e006      	b.n	8002b38 <LL_TIM_OC_DisableFast+0x4c>
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e004      	b.n	8002b38 <LL_TIM_OC_DisableFast+0x4c>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e002      	b.n	8002b38 <LL_TIM_OC_DisableFast+0x4c>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <LL_TIM_OC_DisableFast+0x4c>
 8002b36:	2300      	movs	r3, #0
 8002b38:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3318      	adds	r3, #24
 8002b3e:	461a      	mov	r2, r3
 8002b40:	4629      	mov	r1, r5
 8002b42:	4b09      	ldr	r3, [pc, #36]	; (8002b68 <LL_TIM_OC_DisableFast+0x7c>)
 8002b44:	5c5b      	ldrb	r3, [r3, r1]
 8002b46:	4413      	add	r3, r2
 8002b48:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002b4a:	6822      	ldr	r2, [r4, #0]
 8002b4c:	4629      	mov	r1, r5
 8002b4e:	4b07      	ldr	r3, [pc, #28]	; (8002b6c <LL_TIM_OC_DisableFast+0x80>)
 8002b50:	5c5b      	ldrb	r3, [r3, r1]
 8002b52:	4619      	mov	r1, r3
 8002b54:	2304      	movs	r3, #4
 8002b56:	408b      	lsls	r3, r1
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	6023      	str	r3, [r4, #0]
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bcb0      	pop	{r4, r5, r7}
 8002b66:	4770      	bx	lr
 8002b68:	0800301c 	.word	0x0800301c
 8002b6c:	08003024 	.word	0x08003024

08002b70 <LL_TIM_OC_EnablePreload>:
{
 8002b70:	b4b0      	push	{r4, r5, r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d01c      	beq.n	8002bba <LL_TIM_OC_EnablePreload+0x4a>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d017      	beq.n	8002bb6 <LL_TIM_OC_EnablePreload+0x46>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b10      	cmp	r3, #16
 8002b8a:	d012      	beq.n	8002bb2 <LL_TIM_OC_EnablePreload+0x42>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	2b40      	cmp	r3, #64	; 0x40
 8002b90:	d00d      	beq.n	8002bae <LL_TIM_OC_EnablePreload+0x3e>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b98:	d007      	beq.n	8002baa <LL_TIM_OC_EnablePreload+0x3a>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba0:	d101      	bne.n	8002ba6 <LL_TIM_OC_EnablePreload+0x36>
 8002ba2:	2305      	movs	r3, #5
 8002ba4:	e00a      	b.n	8002bbc <LL_TIM_OC_EnablePreload+0x4c>
 8002ba6:	2306      	movs	r3, #6
 8002ba8:	e008      	b.n	8002bbc <LL_TIM_OC_EnablePreload+0x4c>
 8002baa:	2304      	movs	r3, #4
 8002bac:	e006      	b.n	8002bbc <LL_TIM_OC_EnablePreload+0x4c>
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e004      	b.n	8002bbc <LL_TIM_OC_EnablePreload+0x4c>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e002      	b.n	8002bbc <LL_TIM_OC_EnablePreload+0x4c>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <LL_TIM_OC_EnablePreload+0x4c>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3318      	adds	r3, #24
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4629      	mov	r1, r5
 8002bc6:	4b09      	ldr	r3, [pc, #36]	; (8002bec <LL_TIM_OC_EnablePreload+0x7c>)
 8002bc8:	5c5b      	ldrb	r3, [r3, r1]
 8002bca:	4413      	add	r3, r2
 8002bcc:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002bce:	6822      	ldr	r2, [r4, #0]
 8002bd0:	4629      	mov	r1, r5
 8002bd2:	4b07      	ldr	r3, [pc, #28]	; (8002bf0 <LL_TIM_OC_EnablePreload+0x80>)
 8002bd4:	5c5b      	ldrb	r3, [r3, r1]
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	2308      	movs	r3, #8
 8002bda:	408b      	lsls	r3, r1
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	6023      	str	r3, [r4, #0]
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bcb0      	pop	{r4, r5, r7}
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	0800301c 	.word	0x0800301c
 8002bf0:	08003024 	.word	0x08003024

08002bf4 <LL_TIM_SetTriggerOutput>:
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	605a      	str	r2, [r3, #4]
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <LL_TIM_DisableMasterSlaveMode>:
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	609a      	str	r2, [r3, #8]
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
	...

08002c3c <LL_AHB1_GRP1_EnableClock>:
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002c44:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002c46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c48:	4907      	ldr	r1, [pc, #28]	; (8002c68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002c50:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4013      	ands	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
}
 8002c5c:	bf00      	nop
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	40023800 	.word	0x40023800

08002c6c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002c74:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002c76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c78:	4907      	ldr	r1, [pc, #28]	; (8002c98 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002c80:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002c82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4013      	ands	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
}
 8002c8c:	bf00      	nop
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	40023800 	.word	0x40023800

08002c9c <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b09a      	sub	sp, #104	; 0x68
 8002ca0:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002ca2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	605a      	str	r2, [r3, #4]
 8002cac:	609a      	str	r2, [r3, #8]
 8002cae:	60da      	str	r2, [r3, #12]
 8002cb0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002cb2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	2100      	movs	r1, #0
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 f98e 	bl	8002fdc <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8002cc0:	f107 031c 	add.w	r3, r7, #28
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
 8002cce:	611a      	str	r2, [r3, #16]
 8002cd0:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd2:	1d3b      	adds	r3, r7, #4
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	60da      	str	r2, [r3, #12]
 8002cde:	611a      	str	r2, [r3, #16]
 8002ce0:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8002ce2:	2001      	movs	r0, #1
 8002ce4:	f7ff ffc2 	bl	8002c6c <LL_APB2_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 0;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8002d00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002d04:	4619      	mov	r1, r3
 8002d06:	484d      	ldr	r0, [pc, #308]	; (8002e3c <MX_TIM1_Init+0x1a0>)
 8002d08:	f7ff f9c8 	bl	800209c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8002d0c:	484b      	ldr	r0, [pc, #300]	; (8002e3c <MX_TIM1_Init+0x1a0>)
 8002d0e:	f7ff fedd 	bl	8002acc <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8002d12:	2101      	movs	r1, #1
 8002d14:	4849      	ldr	r0, [pc, #292]	; (8002e3c <MX_TIM1_Init+0x1a0>)
 8002d16:	f7ff ff2b 	bl	8002b70 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002d1a:	2360      	movs	r3, #96	; 0x60
 8002d1c:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002d22:	2300      	movs	r3, #0
 8002d24:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 8002d26:	2300      	movs	r3, #0
 8002d28:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002d32:	2300      	movs	r3, #0
 8002d34:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002d36:	2300      	movs	r3, #0
 8002d38:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002d3a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d3e:	461a      	mov	r2, r3
 8002d40:	2101      	movs	r1, #1
 8002d42:	483e      	ldr	r0, [pc, #248]	; (8002e3c <MX_TIM1_Init+0x1a0>)
 8002d44:	f7ff fa44 	bl	80021d0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8002d48:	2101      	movs	r1, #1
 8002d4a:	483c      	ldr	r0, [pc, #240]	; (8002e3c <MX_TIM1_Init+0x1a0>)
 8002d4c:	f7ff fece 	bl	8002aec <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 8002d50:	2110      	movs	r1, #16
 8002d52:	483a      	ldr	r0, [pc, #232]	; (8002e3c <MX_TIM1_Init+0x1a0>)
 8002d54:	f7ff ff0c 	bl	8002b70 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8002d60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d64:	461a      	mov	r2, r3
 8002d66:	2110      	movs	r1, #16
 8002d68:	4834      	ldr	r0, [pc, #208]	; (8002e3c <MX_TIM1_Init+0x1a0>)
 8002d6a:	f7ff fa31 	bl	80021d0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 8002d6e:	2110      	movs	r1, #16
 8002d70:	4832      	ldr	r0, [pc, #200]	; (8002e3c <MX_TIM1_Init+0x1a0>)
 8002d72:	f7ff febb 	bl	8002aec <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8002d76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d7a:	4830      	ldr	r0, [pc, #192]	; (8002e3c <MX_TIM1_Init+0x1a0>)
 8002d7c:	f7ff fef8 	bl	8002b70 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002d80:	2300      	movs	r3, #0
 8002d82:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002d84:	2300      	movs	r3, #0
 8002d86:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8002d88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d92:	482a      	ldr	r0, [pc, #168]	; (8002e3c <MX_TIM1_Init+0x1a0>)
 8002d94:	f7ff fa1c 	bl	80021d0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8002d98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d9c:	4827      	ldr	r0, [pc, #156]	; (8002e3c <MX_TIM1_Init+0x1a0>)
 8002d9e:	f7ff fea5 	bl	8002aec <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 8002da2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002da6:	4825      	ldr	r0, [pc, #148]	; (8002e3c <MX_TIM1_Init+0x1a0>)
 8002da8:	f7ff fee2 	bl	8002b70 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002dac:	2300      	movs	r3, #0
 8002dae:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002db0:	2300      	movs	r3, #0
 8002db2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8002db4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002db8:	461a      	mov	r2, r3
 8002dba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dbe:	481f      	ldr	r0, [pc, #124]	; (8002e3c <MX_TIM1_Init+0x1a0>)
 8002dc0:	f7ff fa06 	bl	80021d0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 8002dc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dc8:	481c      	ldr	r0, [pc, #112]	; (8002e3c <MX_TIM1_Init+0x1a0>)
 8002dca:	f7ff fe8f 	bl	8002aec <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8002dce:	2100      	movs	r1, #0
 8002dd0:	481a      	ldr	r0, [pc, #104]	; (8002e3c <MX_TIM1_Init+0x1a0>)
 8002dd2:	f7ff ff0f 	bl	8002bf4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8002dd6:	4819      	ldr	r0, [pc, #100]	; (8002e3c <MX_TIM1_Init+0x1a0>)
 8002dd8:	f7ff ff1f 	bl	8002c1a <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8002de0:	2300      	movs	r3, #0
 8002de2:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8002de4:	2300      	movs	r3, #0
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8002dee:	2300      	movs	r3, #0
 8002df0:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8002df2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8002dfc:	f107 031c 	add.w	r3, r7, #28
 8002e00:	4619      	mov	r1, r3
 8002e02:	480e      	ldr	r0, [pc, #56]	; (8002e3c <MX_TIM1_Init+0x1a0>)
 8002e04:	f7ff fa1c 	bl	8002240 <LL_TIM_BDTR_Init>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002e08:	2001      	movs	r0, #1
 8002e0a:	f7ff ff17 	bl	8002c3c <LL_AHB1_GRP1_EnableClock>
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8002e0e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002e12:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002e14:	2302      	movs	r3, #2
 8002e16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002e24:	2301      	movs	r3, #1
 8002e26:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e28:	1d3b      	adds	r3, r7, #4
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4804      	ldr	r0, [pc, #16]	; (8002e40 <MX_TIM1_Init+0x1a4>)
 8002e2e:	f7ff f846 	bl	8001ebe <LL_GPIO_Init>

}
 8002e32:	bf00      	nop
 8002e34:	3768      	adds	r7, #104	; 0x68
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40010000 	.word	0x40010000
 8002e40:	40020000 	.word	0x40020000

08002e44 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002e48:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <MX_USART2_UART_Init+0x4c>)
 8002e4a:	4a12      	ldr	r2, [pc, #72]	; (8002e94 <MX_USART2_UART_Init+0x50>)
 8002e4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e4e:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <MX_USART2_UART_Init+0x4c>)
 8002e50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e56:	4b0e      	ldr	r3, [pc, #56]	; (8002e90 <MX_USART2_UART_Init+0x4c>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <MX_USART2_UART_Init+0x4c>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e62:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <MX_USART2_UART_Init+0x4c>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e68:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <MX_USART2_UART_Init+0x4c>)
 8002e6a:	220c      	movs	r2, #12
 8002e6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e6e:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <MX_USART2_UART_Init+0x4c>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e74:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <MX_USART2_UART_Init+0x4c>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e7a:	4805      	ldr	r0, [pc, #20]	; (8002e90 <MX_USART2_UART_Init+0x4c>)
 8002e7c:	f7fe fbae 	bl	80015dc <HAL_UART_Init>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002e86:	f7ff fd8d 	bl	80029a4 <Error_Handler>
  }

}
 8002e8a:	bf00      	nop
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	2000002c 	.word	0x2000002c
 8002e94:	40004400 	.word	0x40004400

08002e98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08a      	sub	sp, #40	; 0x28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea0:	f107 0314 	add.w	r3, r7, #20
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	609a      	str	r2, [r3, #8]
 8002eac:	60da      	str	r2, [r3, #12]
 8002eae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a19      	ldr	r2, [pc, #100]	; (8002f1c <HAL_UART_MspInit+0x84>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d12b      	bne.n	8002f12 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	4b18      	ldr	r3, [pc, #96]	; (8002f20 <HAL_UART_MspInit+0x88>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	4a17      	ldr	r2, [pc, #92]	; (8002f20 <HAL_UART_MspInit+0x88>)
 8002ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eca:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <HAL_UART_MspInit+0x88>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	613b      	str	r3, [r7, #16]
 8002ed4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <HAL_UART_MspInit+0x88>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	4a10      	ldr	r2, [pc, #64]	; (8002f20 <HAL_UART_MspInit+0x88>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee6:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <HAL_UART_MspInit+0x88>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ef2:	230c      	movs	r3, #12
 8002ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002efa:	2301      	movs	r3, #1
 8002efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efe:	2303      	movs	r3, #3
 8002f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f02:	2307      	movs	r3, #7
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f06:	f107 0314 	add.w	r3, r7, #20
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4805      	ldr	r0, [pc, #20]	; (8002f24 <HAL_UART_MspInit+0x8c>)
 8002f0e:	f7fd fc73 	bl	80007f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002f12:	bf00      	nop
 8002f14:	3728      	adds	r7, #40	; 0x28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40004400 	.word	0x40004400
 8002f20:	40023800 	.word	0x40023800
 8002f24:	40020000 	.word	0x40020000

08002f28 <cpploop>:


#include "wrapper.hpp"
#include "LedBlink.hpp"

void cpploop(void) {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
    LedBlink instance;

    instance.toggle();
 8002f2e:	1d3b      	adds	r3, r7, #4
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fb91 	bl	8002658 <_ZN8LedBlink6toggleEv>
}
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f46:	e003      	b.n	8002f50 <LoopCopyDataInit>

08002f48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f48:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f4e:	3104      	adds	r1, #4

08002f50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f50:	480b      	ldr	r0, [pc, #44]	; (8002f80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f52:	4b0c      	ldr	r3, [pc, #48]	; (8002f84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f58:	d3f6      	bcc.n	8002f48 <CopyDataInit>
  ldr  r2, =_sbss
 8002f5a:	4a0b      	ldr	r2, [pc, #44]	; (8002f88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f5c:	e002      	b.n	8002f64 <LoopFillZerobss>

08002f5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f60:	f842 3b04 	str.w	r3, [r2], #4

08002f64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f64:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f68:	d3f9      	bcc.n	8002f5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f6a:	f7ff fd79 	bl	8002a60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f6e:	f000 f811 	bl	8002f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f72:	f7ff fc95 	bl	80028a0 <main>
  bx  lr    
 8002f76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f78:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 8002f7c:	0800303c 	.word	0x0800303c
  ldr  r0, =_sdata
 8002f80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002f84:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002f88:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002f8c:	2000006c 	.word	0x2000006c

08002f90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f90:	e7fe      	b.n	8002f90 <ADC_IRQHandler>
	...

08002f94 <__libc_init_array>:
 8002f94:	b570      	push	{r4, r5, r6, lr}
 8002f96:	4e0d      	ldr	r6, [pc, #52]	; (8002fcc <__libc_init_array+0x38>)
 8002f98:	4c0d      	ldr	r4, [pc, #52]	; (8002fd0 <__libc_init_array+0x3c>)
 8002f9a:	1ba4      	subs	r4, r4, r6
 8002f9c:	10a4      	asrs	r4, r4, #2
 8002f9e:	2500      	movs	r5, #0
 8002fa0:	42a5      	cmp	r5, r4
 8002fa2:	d109      	bne.n	8002fb8 <__libc_init_array+0x24>
 8002fa4:	4e0b      	ldr	r6, [pc, #44]	; (8002fd4 <__libc_init_array+0x40>)
 8002fa6:	4c0c      	ldr	r4, [pc, #48]	; (8002fd8 <__libc_init_array+0x44>)
 8002fa8:	f000 f820 	bl	8002fec <_init>
 8002fac:	1ba4      	subs	r4, r4, r6
 8002fae:	10a4      	asrs	r4, r4, #2
 8002fb0:	2500      	movs	r5, #0
 8002fb2:	42a5      	cmp	r5, r4
 8002fb4:	d105      	bne.n	8002fc2 <__libc_init_array+0x2e>
 8002fb6:	bd70      	pop	{r4, r5, r6, pc}
 8002fb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fbc:	4798      	blx	r3
 8002fbe:	3501      	adds	r5, #1
 8002fc0:	e7ee      	b.n	8002fa0 <__libc_init_array+0xc>
 8002fc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fc6:	4798      	blx	r3
 8002fc8:	3501      	adds	r5, #1
 8002fca:	e7f2      	b.n	8002fb2 <__libc_init_array+0x1e>
 8002fcc:	08003034 	.word	0x08003034
 8002fd0:	08003034 	.word	0x08003034
 8002fd4:	08003034 	.word	0x08003034
 8002fd8:	08003038 	.word	0x08003038

08002fdc <memset>:
 8002fdc:	4402      	add	r2, r0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d100      	bne.n	8002fe6 <memset+0xa>
 8002fe4:	4770      	bx	lr
 8002fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8002fea:	e7f9      	b.n	8002fe0 <memset+0x4>

08002fec <_init>:
 8002fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fee:	bf00      	nop
 8002ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ff2:	bc08      	pop	{r3}
 8002ff4:	469e      	mov	lr, r3
 8002ff6:	4770      	bx	lr

08002ff8 <_fini>:
 8002ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffa:	bf00      	nop
 8002ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ffe:	bc08      	pop	{r3}
 8003000:	469e      	mov	lr, r3
 8003002:	4770      	bx	lr
