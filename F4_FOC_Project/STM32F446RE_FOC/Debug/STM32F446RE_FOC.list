
STM32F446RE_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009794  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf8  08009960  08009960  00019960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a558  0800a558  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a558  0800a558  0001a558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a560  0800a560  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a560  0800a560  0001a560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800a568  0800a568  0001a568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003028  200001e0  0800a750  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003208  0800a750  00023208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004b7dc  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009091  00000000  00000000  0006b9ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001cd0  00000000  00000000  00074a80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019e0  00000000  00000000  00076750  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002faa2  00000000  00000000  00078130  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f331  00000000  00000000  000a7bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001028a9  00000000  00000000  000c6f03  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000e9  00000000  00000000  001c97ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084a4  00000000  00000000  001c9898  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000018a  00000000  00000000  001d1d3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001e0 	.word	0x200001e0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08009944 	.word	0x08009944

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001e4 	.word	0x200001e4
 8000204:	08009944 	.word	0x08009944

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bf4:	f000 b972 	b.w	8000edc <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9e08      	ldr	r6, [sp, #32]
 8000c16:	4604      	mov	r4, r0
 8000c18:	4688      	mov	r8, r1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d14b      	bne.n	8000cb6 <__udivmoddi4+0xa6>
 8000c1e:	428a      	cmp	r2, r1
 8000c20:	4615      	mov	r5, r2
 8000c22:	d967      	bls.n	8000cf4 <__udivmoddi4+0xe4>
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	b14a      	cbz	r2, 8000c3e <__udivmoddi4+0x2e>
 8000c2a:	f1c2 0720 	rsb	r7, r2, #32
 8000c2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c32:	fa20 f707 	lsr.w	r7, r0, r7
 8000c36:	4095      	lsls	r5, r2
 8000c38:	ea47 0803 	orr.w	r8, r7, r3
 8000c3c:	4094      	lsls	r4, r2
 8000c3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c42:	0c23      	lsrs	r3, r4, #16
 8000c44:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c48:	fa1f fc85 	uxth.w	ip, r5
 8000c4c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c50:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c54:	fb07 f10c 	mul.w	r1, r7, ip
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	d909      	bls.n	8000c70 <__udivmoddi4+0x60>
 8000c5c:	18eb      	adds	r3, r5, r3
 8000c5e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c62:	f080 811b 	bcs.w	8000e9c <__udivmoddi4+0x28c>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 8118 	bls.w	8000e9c <__udivmoddi4+0x28c>
 8000c6c:	3f02      	subs	r7, #2
 8000c6e:	442b      	add	r3, r5
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c84:	45a4      	cmp	ip, r4
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x8c>
 8000c88:	192c      	adds	r4, r5, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8e:	f080 8107 	bcs.w	8000ea0 <__udivmoddi4+0x290>
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	f240 8104 	bls.w	8000ea0 <__udivmoddi4+0x290>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	442c      	add	r4, r5
 8000c9c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca0:	eba4 040c 	sub.w	r4, r4, ip
 8000ca4:	2700      	movs	r7, #0
 8000ca6:	b11e      	cbz	r6, 8000cb0 <__udivmoddi4+0xa0>
 8000ca8:	40d4      	lsrs	r4, r2
 8000caa:	2300      	movs	r3, #0
 8000cac:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d909      	bls.n	8000cce <__udivmoddi4+0xbe>
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	f000 80eb 	beq.w	8000e96 <__udivmoddi4+0x286>
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	e9c6 0100 	strd	r0, r1, [r6]
 8000cc6:	4638      	mov	r0, r7
 8000cc8:	4639      	mov	r1, r7
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	fab3 f783 	clz	r7, r3
 8000cd2:	2f00      	cmp	r7, #0
 8000cd4:	d147      	bne.n	8000d66 <__udivmoddi4+0x156>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xd0>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 80fa 	bhi.w	8000ed4 <__udivmoddi4+0x2c4>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4698      	mov	r8, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d0e0      	beq.n	8000cb0 <__udivmoddi4+0xa0>
 8000cee:	e9c6 4800 	strd	r4, r8, [r6]
 8000cf2:	e7dd      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000cf4:	b902      	cbnz	r2, 8000cf8 <__udivmoddi4+0xe8>
 8000cf6:	deff      	udf	#255	; 0xff
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	2a00      	cmp	r2, #0
 8000cfe:	f040 808f 	bne.w	8000e20 <__udivmoddi4+0x210>
 8000d02:	1b49      	subs	r1, r1, r5
 8000d04:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d08:	fa1f f885 	uxth.w	r8, r5
 8000d0c:	2701      	movs	r7, #1
 8000d0e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d12:	0c23      	lsrs	r3, r4, #16
 8000d14:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb08 f10c 	mul.w	r1, r8, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x124>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x122>
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2bc>
 8000d32:	4684      	mov	ip, r0
 8000d34:	1a59      	subs	r1, r3, r1
 8000d36:	b2a3      	uxth	r3, r4
 8000d38:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d3c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d44:	fb08 f800 	mul.w	r8, r8, r0
 8000d48:	45a0      	cmp	r8, r4
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x14c>
 8000d4c:	192c      	adds	r4, r5, r4
 8000d4e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x14a>
 8000d54:	45a0      	cmp	r8, r4
 8000d56:	f200 80b6 	bhi.w	8000ec6 <__udivmoddi4+0x2b6>
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	eba4 0408 	sub.w	r4, r4, r8
 8000d60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d64:	e79f      	b.n	8000ca6 <__udivmoddi4+0x96>
 8000d66:	f1c7 0c20 	rsb	ip, r7, #32
 8000d6a:	40bb      	lsls	r3, r7
 8000d6c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d70:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d74:	fa01 f407 	lsl.w	r4, r1, r7
 8000d78:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d7c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d80:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d84:	4325      	orrs	r5, r4
 8000d86:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d8a:	0c2c      	lsrs	r4, r5, #16
 8000d8c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d90:	fa1f fa8e 	uxth.w	sl, lr
 8000d94:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d98:	fb09 f40a 	mul.w	r4, r9, sl
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	fa02 f207 	lsl.w	r2, r2, r7
 8000da2:	fa00 f107 	lsl.w	r1, r0, r7
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b0>
 8000da8:	eb1e 0303 	adds.w	r3, lr, r3
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000db0:	f080 8087 	bcs.w	8000ec2 <__udivmoddi4+0x2b2>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f240 8084 	bls.w	8000ec2 <__udivmoddi4+0x2b2>
 8000dba:	f1a9 0902 	sub.w	r9, r9, #2
 8000dbe:	4473      	add	r3, lr
 8000dc0:	1b1b      	subs	r3, r3, r4
 8000dc2:	b2ad      	uxth	r5, r5
 8000dc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000dcc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dd4:	45a2      	cmp	sl, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1da>
 8000dd8:	eb1e 0404 	adds.w	r4, lr, r4
 8000ddc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de0:	d26b      	bcs.n	8000eba <__udivmoddi4+0x2aa>
 8000de2:	45a2      	cmp	sl, r4
 8000de4:	d969      	bls.n	8000eba <__udivmoddi4+0x2aa>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4474      	add	r4, lr
 8000dea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	eba4 040a 	sub.w	r4, r4, sl
 8000df6:	454c      	cmp	r4, r9
 8000df8:	46c2      	mov	sl, r8
 8000dfa:	464b      	mov	r3, r9
 8000dfc:	d354      	bcc.n	8000ea8 <__udivmoddi4+0x298>
 8000dfe:	d051      	beq.n	8000ea4 <__udivmoddi4+0x294>
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d069      	beq.n	8000ed8 <__udivmoddi4+0x2c8>
 8000e04:	ebb1 050a 	subs.w	r5, r1, sl
 8000e08:	eb64 0403 	sbc.w	r4, r4, r3
 8000e0c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e10:	40fd      	lsrs	r5, r7
 8000e12:	40fc      	lsrs	r4, r7
 8000e14:	ea4c 0505 	orr.w	r5, ip, r5
 8000e18:	e9c6 5400 	strd	r5, r4, [r6]
 8000e1c:	2700      	movs	r7, #0
 8000e1e:	e747      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e20:	f1c2 0320 	rsb	r3, r2, #32
 8000e24:	fa20 f703 	lsr.w	r7, r0, r3
 8000e28:	4095      	lsls	r5, r2
 8000e2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e36:	4338      	orrs	r0, r7
 8000e38:	0c01      	lsrs	r1, r0, #16
 8000e3a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e3e:	fa1f f885 	uxth.w	r8, r5
 8000e42:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4a:	fb07 f308 	mul.w	r3, r7, r8
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x256>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e5c:	d22f      	bcs.n	8000ebe <__udivmoddi4+0x2ae>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d92d      	bls.n	8000ebe <__udivmoddi4+0x2ae>
 8000e62:	3f02      	subs	r7, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1acb      	subs	r3, r1, r3
 8000e68:	b281      	uxth	r1, r0
 8000e6a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e76:	fb00 f308 	mul.w	r3, r0, r8
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x27e>
 8000e7e:	1869      	adds	r1, r5, r1
 8000e80:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e84:	d217      	bcs.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d915      	bls.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	4429      	add	r1, r5
 8000e8e:	1ac9      	subs	r1, r1, r3
 8000e90:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e94:	e73b      	b.n	8000d0e <__udivmoddi4+0xfe>
 8000e96:	4637      	mov	r7, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e709      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e9c:	4607      	mov	r7, r0
 8000e9e:	e6e7      	b.n	8000c70 <__udivmoddi4+0x60>
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	e6fb      	b.n	8000c9c <__udivmoddi4+0x8c>
 8000ea4:	4541      	cmp	r1, r8
 8000ea6:	d2ab      	bcs.n	8000e00 <__udivmoddi4+0x1f0>
 8000ea8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eac:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb0:	3801      	subs	r0, #1
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	e7a4      	b.n	8000e00 <__udivmoddi4+0x1f0>
 8000eb6:	4660      	mov	r0, ip
 8000eb8:	e7e9      	b.n	8000e8e <__udivmoddi4+0x27e>
 8000eba:	4618      	mov	r0, r3
 8000ebc:	e795      	b.n	8000dea <__udivmoddi4+0x1da>
 8000ebe:	4667      	mov	r7, ip
 8000ec0:	e7d1      	b.n	8000e66 <__udivmoddi4+0x256>
 8000ec2:	4681      	mov	r9, r0
 8000ec4:	e77c      	b.n	8000dc0 <__udivmoddi4+0x1b0>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	442c      	add	r4, r5
 8000eca:	e747      	b.n	8000d5c <__udivmoddi4+0x14c>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	442b      	add	r3, r5
 8000ed2:	e72f      	b.n	8000d34 <__udivmoddi4+0x124>
 8000ed4:	4638      	mov	r0, r7
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xda>
 8000ed8:	4637      	mov	r7, r6
 8000eda:	e6e9      	b.n	8000cb0 <__udivmoddi4+0xa0>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	; (8000f20 <HAL_Init+0x40>)
 8000eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <HAL_Init+0x40>)
 8000ef6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <HAL_Init+0x40>)
 8000f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f000 fd05 	bl	8001918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0e:	2004      	movs	r0, #4
 8000f10:	f000 f808 	bl	8000f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f14:	f004 fffe 	bl	8005f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40023c00 	.word	0x40023c00

08000f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_InitTick+0x54>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_InitTick+0x58>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 fd1d 	bl	8001982 <HAL_SYSTICK_Config>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00e      	b.n	8000f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d80a      	bhi.n	8000f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f60:	f000 fce5 	bl	800192e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f64:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <HAL_InitTick+0x5c>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	20000004 	.word	0x20000004
 8000f80:	20000000 	.word	0x20000000

08000f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_IncTick+0x20>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000004 	.word	0x20000004
 8000fa8:	20003200 	.word	0x20003200

08000fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <HAL_GetTick+0x14>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20003200 	.word	0x20003200

08000fc4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d101      	bne.n	8000fda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e033      	b.n	8001042 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d109      	bne.n	8000ff6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f004 fec6 	bl	8005d74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	f003 0310 	and.w	r3, r3, #16
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d118      	bne.n	8001034 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800100a:	f023 0302 	bic.w	r3, r3, #2
 800100e:	f043 0202 	orr.w	r2, r3, #2
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 faa8 	bl	800156c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	f023 0303 	bic.w	r3, r3, #3
 800102a:	f043 0201 	orr.w	r2, r3, #1
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	641a      	str	r2, [r3, #64]	; 0x40
 8001032:	e001      	b.n	8001038 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001040:	7bfb      	ldrb	r3, [r7, #15]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b084      	sub	sp, #16
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b02      	cmp	r3, #2
 8001066:	bf0c      	ite	eq
 8001068:	2301      	moveq	r3, #1
 800106a:	2300      	movne	r3, #0
 800106c:	b2db      	uxtb	r3, r3
 800106e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f003 0320 	and.w	r3, r3, #32
 800107a:	2b20      	cmp	r3, #32
 800107c:	bf0c      	ite	eq
 800107e:	2301      	moveq	r3, #1
 8001080:	2300      	movne	r3, #0
 8001082:	b2db      	uxtb	r3, r3
 8001084:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d049      	beq.n	8001120 <HAL_ADC_IRQHandler+0xd6>
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d046      	beq.n	8001120 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	2b00      	cmp	r3, #0
 800109c:	d105      	bne.n	80010aa <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d12b      	bne.n	8001110 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d127      	bne.n	8001110 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d006      	beq.n	80010dc <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d119      	bne.n	8001110 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 0220 	bic.w	r2, r2, #32
 80010ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d105      	bne.n	8001110 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	f043 0201 	orr.w	r2, r3, #1
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 f8db 	bl	80012cc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f06f 0212 	mvn.w	r2, #18
 800111e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0304 	and.w	r3, r3, #4
 800112a:	2b04      	cmp	r3, #4
 800112c:	bf0c      	ite	eq
 800112e:	2301      	moveq	r3, #1
 8001130:	2300      	movne	r3, #0
 8001132:	b2db      	uxtb	r3, r3
 8001134:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001140:	2b80      	cmp	r3, #128	; 0x80
 8001142:	bf0c      	ite	eq
 8001144:	2301      	moveq	r3, #1
 8001146:	2300      	movne	r3, #0
 8001148:	b2db      	uxtb	r3, r3
 800114a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d057      	beq.n	8001202 <HAL_ADC_IRQHandler+0x1b8>
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d054      	beq.n	8001202 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f003 0310 	and.w	r3, r3, #16
 8001160:	2b00      	cmp	r3, #0
 8001162:	d105      	bne.n	8001170 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d139      	bne.n	80011f2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001184:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001188:	2b00      	cmp	r3, #0
 800118a:	d006      	beq.n	800119a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001196:	2b00      	cmp	r3, #0
 8001198:	d12b      	bne.n	80011f2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d124      	bne.n	80011f2 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d11d      	bne.n	80011f2 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d119      	bne.n	80011f2 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011cc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d105      	bne.n	80011f2 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	f043 0201 	orr.w	r2, r3, #1
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f000 fab6 	bl	8001764 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f06f 020c 	mvn.w	r2, #12
 8001200:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b01      	cmp	r3, #1
 800120e:	bf0c      	ite	eq
 8001210:	2301      	moveq	r3, #1
 8001212:	2300      	movne	r3, #0
 8001214:	b2db      	uxtb	r3, r3
 8001216:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001222:	2b40      	cmp	r3, #64	; 0x40
 8001224:	bf0c      	ite	eq
 8001226:	2301      	moveq	r3, #1
 8001228:	2300      	movne	r3, #0
 800122a:	b2db      	uxtb	r3, r3
 800122c:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d017      	beq.n	8001264 <HAL_ADC_IRQHandler+0x21a>
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d014      	beq.n	8001264 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b01      	cmp	r3, #1
 8001246:	d10d      	bne.n	8001264 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 f843 	bl	80012e0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f06f 0201 	mvn.w	r2, #1
 8001262:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0320 	and.w	r3, r3, #32
 800126e:	2b20      	cmp	r3, #32
 8001270:	bf0c      	ite	eq
 8001272:	2301      	moveq	r3, #1
 8001274:	2300      	movne	r3, #0
 8001276:	b2db      	uxtb	r3, r3
 8001278:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001284:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001288:	bf0c      	ite	eq
 800128a:	2301      	moveq	r3, #1
 800128c:	2300      	movne	r3, #0
 800128e:	b2db      	uxtb	r3, r3
 8001290:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d015      	beq.n	80012c4 <HAL_ADC_IRQHandler+0x27a>
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d012      	beq.n	80012c4 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	f043 0202 	orr.w	r2, r3, #2
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f06f 0220 	mvn.w	r2, #32
 80012b2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 f81d 	bl	80012f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f06f 0220 	mvn.w	r2, #32
 80012c2:	601a      	str	r2, [r3, #0]
  }
}
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800131c:	2b01      	cmp	r3, #1
 800131e:	d101      	bne.n	8001324 <HAL_ADC_ConfigChannel+0x1c>
 8001320:	2302      	movs	r3, #2
 8001322:	e113      	b.n	800154c <HAL_ADC_ConfigChannel+0x244>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b09      	cmp	r3, #9
 8001332:	d925      	bls.n	8001380 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68d9      	ldr	r1, [r3, #12]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	b29b      	uxth	r3, r3
 8001340:	461a      	mov	r2, r3
 8001342:	4613      	mov	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	3b1e      	subs	r3, #30
 800134a:	2207      	movs	r2, #7
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43da      	mvns	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	400a      	ands	r2, r1
 8001358:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68d9      	ldr	r1, [r3, #12]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	b29b      	uxth	r3, r3
 800136a:	4618      	mov	r0, r3
 800136c:	4603      	mov	r3, r0
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4403      	add	r3, r0
 8001372:	3b1e      	subs	r3, #30
 8001374:	409a      	lsls	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	430a      	orrs	r2, r1
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	e022      	b.n	80013c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6919      	ldr	r1, [r3, #16]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	b29b      	uxth	r3, r3
 800138c:	461a      	mov	r2, r3
 800138e:	4613      	mov	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	2207      	movs	r2, #7
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	400a      	ands	r2, r1
 80013a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6919      	ldr	r1, [r3, #16]
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	4618      	mov	r0, r3
 80013b6:	4603      	mov	r3, r0
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4403      	add	r3, r0
 80013bc:	409a      	lsls	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d824      	bhi.n	8001418 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	3b05      	subs	r3, #5
 80013e0:	221f      	movs	r2, #31
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43da      	mvns	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	400a      	ands	r2, r1
 80013ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	4618      	mov	r0, r3
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	3b05      	subs	r3, #5
 800140a:	fa00 f203 	lsl.w	r2, r0, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	430a      	orrs	r2, r1
 8001414:	635a      	str	r2, [r3, #52]	; 0x34
 8001416:	e04c      	b.n	80014b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b0c      	cmp	r3, #12
 800141e:	d824      	bhi.n	800146a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	3b23      	subs	r3, #35	; 0x23
 8001432:	221f      	movs	r2, #31
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43da      	mvns	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	400a      	ands	r2, r1
 8001440:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	b29b      	uxth	r3, r3
 800144e:	4618      	mov	r0, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	4613      	mov	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	3b23      	subs	r3, #35	; 0x23
 800145c:	fa00 f203 	lsl.w	r2, r0, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	430a      	orrs	r2, r1
 8001466:	631a      	str	r2, [r3, #48]	; 0x30
 8001468:	e023      	b.n	80014b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	3b41      	subs	r3, #65	; 0x41
 800147c:	221f      	movs	r2, #31
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43da      	mvns	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	400a      	ands	r2, r1
 800148a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	b29b      	uxth	r3, r3
 8001498:	4618      	mov	r0, r3
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	3b41      	subs	r3, #65	; 0x41
 80014a6:	fa00 f203 	lsl.w	r2, r0, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014b2:	4b29      	ldr	r3, [pc, #164]	; (8001558 <HAL_ADC_ConfigChannel+0x250>)
 80014b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a28      	ldr	r2, [pc, #160]	; (800155c <HAL_ADC_ConfigChannel+0x254>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d10f      	bne.n	80014e0 <HAL_ADC_ConfigChannel+0x1d8>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b12      	cmp	r3, #18
 80014c6:	d10b      	bne.n	80014e0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a1d      	ldr	r2, [pc, #116]	; (800155c <HAL_ADC_ConfigChannel+0x254>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d12b      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x23a>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a1c      	ldr	r2, [pc, #112]	; (8001560 <HAL_ADC_ConfigChannel+0x258>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d003      	beq.n	80014fc <HAL_ADC_ConfigChannel+0x1f4>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b11      	cmp	r3, #17
 80014fa:	d122      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a11      	ldr	r2, [pc, #68]	; (8001560 <HAL_ADC_ConfigChannel+0x258>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d111      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <HAL_ADC_ConfigChannel+0x25c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a11      	ldr	r2, [pc, #68]	; (8001568 <HAL_ADC_ConfigChannel+0x260>)
 8001524:	fba2 2303 	umull	r2, r3, r2, r3
 8001528:	0c9a      	lsrs	r2, r3, #18
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001534:	e002      	b.n	800153c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	3b01      	subs	r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f9      	bne.n	8001536 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	40012300 	.word	0x40012300
 800155c:	40012000 	.word	0x40012000
 8001560:	10000012 	.word	0x10000012
 8001564:	20000008 	.word	0x20000008
 8001568:	431bde83 	.word	0x431bde83

0800156c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001574:	4b79      	ldr	r3, [pc, #484]	; (800175c <ADC_Init+0x1f0>)
 8001576:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	431a      	orrs	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6859      	ldr	r1, [r3, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	021a      	lsls	r2, r3, #8
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6859      	ldr	r1, [r3, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6899      	ldr	r1, [r3, #8]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68da      	ldr	r2, [r3, #12]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fe:	4a58      	ldr	r2, [pc, #352]	; (8001760 <ADC_Init+0x1f4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d022      	beq.n	800164a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001612:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6899      	ldr	r1, [r3, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001634:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6899      	ldr	r1, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	e00f      	b.n	800166a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001658:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001668:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0202 	bic.w	r2, r2, #2
 8001678:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6899      	ldr	r1, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	7e1b      	ldrb	r3, [r3, #24]
 8001684:	005a      	lsls	r2, r3, #1
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	430a      	orrs	r2, r1
 800168c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d01b      	beq.n	80016d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6859      	ldr	r1, [r3, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c2:	3b01      	subs	r3, #1
 80016c4:	035a      	lsls	r2, r3, #13
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	e007      	b.n	80016e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	051a      	lsls	r2, r3, #20
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001714:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6899      	ldr	r1, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001722:	025a      	lsls	r2, r3, #9
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800173a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6899      	ldr	r1, [r3, #8]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	029a      	lsls	r2, r3, #10
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	609a      	str	r2, [r3, #8]
}
 8001750:	bf00      	nop
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	40012300 	.word	0x40012300
 8001760:	0f000001 	.word	0x0f000001

08001764 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001794:	4013      	ands	r3, r2
 8001796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017aa:	4a04      	ldr	r2, [pc, #16]	; (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	60d3      	str	r3, [r2, #12]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <__NVIC_GetPriorityGrouping+0x18>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	f003 0307 	and.w	r3, r3, #7
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db0b      	blt.n	8001806 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	f003 021f 	and.w	r2, r3, #31
 80017f4:	4907      	ldr	r1, [pc, #28]	; (8001814 <__NVIC_EnableIRQ+0x38>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	2001      	movs	r0, #1
 80017fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000e100 	.word	0xe000e100

08001818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	6039      	str	r1, [r7, #0]
 8001822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001828:	2b00      	cmp	r3, #0
 800182a:	db0a      	blt.n	8001842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	b2da      	uxtb	r2, r3
 8001830:	490c      	ldr	r1, [pc, #48]	; (8001864 <__NVIC_SetPriority+0x4c>)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	0112      	lsls	r2, r2, #4
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	440b      	add	r3, r1
 800183c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001840:	e00a      	b.n	8001858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4908      	ldr	r1, [pc, #32]	; (8001868 <__NVIC_SetPriority+0x50>)
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	3b04      	subs	r3, #4
 8001850:	0112      	lsls	r2, r2, #4
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	440b      	add	r3, r1
 8001856:	761a      	strb	r2, [r3, #24]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000e100 	.word	0xe000e100
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800186c:	b480      	push	{r7}
 800186e:	b089      	sub	sp, #36	; 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f1c3 0307 	rsb	r3, r3, #7
 8001886:	2b04      	cmp	r3, #4
 8001888:	bf28      	it	cs
 800188a:	2304      	movcs	r3, #4
 800188c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3304      	adds	r3, #4
 8001892:	2b06      	cmp	r3, #6
 8001894:	d902      	bls.n	800189c <NVIC_EncodePriority+0x30>
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3b03      	subs	r3, #3
 800189a:	e000      	b.n	800189e <NVIC_EncodePriority+0x32>
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43da      	mvns	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	401a      	ands	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	43d9      	mvns	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	4313      	orrs	r3, r2
         );
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3724      	adds	r7, #36	; 0x24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e4:	d301      	bcc.n	80018ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00f      	b.n	800190a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <SysTick_Config+0x40>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018f2:	210f      	movs	r1, #15
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018f8:	f7ff ff8e 	bl	8001818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <SysTick_Config+0x40>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001902:	4b04      	ldr	r3, [pc, #16]	; (8001914 <SysTick_Config+0x40>)
 8001904:	2207      	movs	r2, #7
 8001906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	e000e010 	.word	0xe000e010

08001918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ff29 	bl	8001778 <__NVIC_SetPriorityGrouping>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001940:	f7ff ff3e 	bl	80017c0 <__NVIC_GetPriorityGrouping>
 8001944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	6978      	ldr	r0, [r7, #20]
 800194c:	f7ff ff8e 	bl	800186c <NVIC_EncodePriority>
 8001950:	4602      	mov	r2, r0
 8001952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff5d 	bl	8001818 <__NVIC_SetPriority>
}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff31 	bl	80017dc <__NVIC_EnableIRQ>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ffa2 	bl	80018d4 <SysTick_Config>
 8001990:	4603      	mov	r3, r0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	; 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
 80019b6:	e165      	b.n	8001c84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019b8:	2201      	movs	r2, #1
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	f040 8154 	bne.w	8001c7e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_Init+0x4a>
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b12      	cmp	r3, #18
 80019e4:	d123      	bne.n	8001a2e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	08da      	lsrs	r2, r3, #3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3208      	adds	r2, #8
 80019ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	220f      	movs	r2, #15
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	691a      	ldr	r2, [r3, #16]
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	08da      	lsrs	r2, r3, #3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3208      	adds	r2, #8
 8001a28:	69b9      	ldr	r1, [r7, #24]
 8001a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	2203      	movs	r2, #3
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 0203 	and.w	r2, r3, #3
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d00b      	beq.n	8001a82 <HAL_GPIO_Init+0xe6>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d007      	beq.n	8001a82 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a76:	2b11      	cmp	r3, #17
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b12      	cmp	r3, #18
 8001a80:	d130      	bne.n	8001ae4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4013      	ands	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ab8:	2201      	movs	r2, #1
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	091b      	lsrs	r3, r3, #4
 8001ace:	f003 0201 	and.w	r2, r3, #1
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	2203      	movs	r2, #3
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 80ae 	beq.w	8001c7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b5c      	ldr	r3, [pc, #368]	; (8001c98 <HAL_GPIO_Init+0x2fc>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	4a5b      	ldr	r2, [pc, #364]	; (8001c98 <HAL_GPIO_Init+0x2fc>)
 8001b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b30:	6453      	str	r3, [r2, #68]	; 0x44
 8001b32:	4b59      	ldr	r3, [pc, #356]	; (8001c98 <HAL_GPIO_Init+0x2fc>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b3e:	4a57      	ldr	r2, [pc, #348]	; (8001c9c <HAL_GPIO_Init+0x300>)
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	089b      	lsrs	r3, r3, #2
 8001b44:	3302      	adds	r3, #2
 8001b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	220f      	movs	r2, #15
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a4e      	ldr	r2, [pc, #312]	; (8001ca0 <HAL_GPIO_Init+0x304>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d025      	beq.n	8001bb6 <HAL_GPIO_Init+0x21a>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a4d      	ldr	r2, [pc, #308]	; (8001ca4 <HAL_GPIO_Init+0x308>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d01f      	beq.n	8001bb2 <HAL_GPIO_Init+0x216>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4c      	ldr	r2, [pc, #304]	; (8001ca8 <HAL_GPIO_Init+0x30c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d019      	beq.n	8001bae <HAL_GPIO_Init+0x212>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4b      	ldr	r2, [pc, #300]	; (8001cac <HAL_GPIO_Init+0x310>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d013      	beq.n	8001baa <HAL_GPIO_Init+0x20e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4a      	ldr	r2, [pc, #296]	; (8001cb0 <HAL_GPIO_Init+0x314>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d00d      	beq.n	8001ba6 <HAL_GPIO_Init+0x20a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a49      	ldr	r2, [pc, #292]	; (8001cb4 <HAL_GPIO_Init+0x318>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d007      	beq.n	8001ba2 <HAL_GPIO_Init+0x206>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a48      	ldr	r2, [pc, #288]	; (8001cb8 <HAL_GPIO_Init+0x31c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d101      	bne.n	8001b9e <HAL_GPIO_Init+0x202>
 8001b9a:	2306      	movs	r3, #6
 8001b9c:	e00c      	b.n	8001bb8 <HAL_GPIO_Init+0x21c>
 8001b9e:	2307      	movs	r3, #7
 8001ba0:	e00a      	b.n	8001bb8 <HAL_GPIO_Init+0x21c>
 8001ba2:	2305      	movs	r3, #5
 8001ba4:	e008      	b.n	8001bb8 <HAL_GPIO_Init+0x21c>
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	e006      	b.n	8001bb8 <HAL_GPIO_Init+0x21c>
 8001baa:	2303      	movs	r3, #3
 8001bac:	e004      	b.n	8001bb8 <HAL_GPIO_Init+0x21c>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e002      	b.n	8001bb8 <HAL_GPIO_Init+0x21c>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_GPIO_Init+0x21c>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	69fa      	ldr	r2, [r7, #28]
 8001bba:	f002 0203 	and.w	r2, r2, #3
 8001bbe:	0092      	lsls	r2, r2, #2
 8001bc0:	4093      	lsls	r3, r2
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bc8:	4934      	ldr	r1, [pc, #208]	; (8001c9c <HAL_GPIO_Init+0x300>)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	089b      	lsrs	r3, r3, #2
 8001bce:	3302      	adds	r3, #2
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bd6:	4b39      	ldr	r3, [pc, #228]	; (8001cbc <HAL_GPIO_Init+0x320>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4013      	ands	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bfa:	4a30      	ldr	r2, [pc, #192]	; (8001cbc <HAL_GPIO_Init+0x320>)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c00:	4b2e      	ldr	r3, [pc, #184]	; (8001cbc <HAL_GPIO_Init+0x320>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c24:	4a25      	ldr	r2, [pc, #148]	; (8001cbc <HAL_GPIO_Init+0x320>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c2a:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <HAL_GPIO_Init+0x320>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c4e:	4a1b      	ldr	r2, [pc, #108]	; (8001cbc <HAL_GPIO_Init+0x320>)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c54:	4b19      	ldr	r3, [pc, #100]	; (8001cbc <HAL_GPIO_Init+0x320>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c78:	4a10      	ldr	r2, [pc, #64]	; (8001cbc <HAL_GPIO_Init+0x320>)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3301      	adds	r3, #1
 8001c82:	61fb      	str	r3, [r7, #28]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	2b0f      	cmp	r3, #15
 8001c88:	f67f ae96 	bls.w	80019b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	3724      	adds	r7, #36	; 0x24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40013800 	.word	0x40013800
 8001ca0:	40020000 	.word	0x40020000
 8001ca4:	40020400 	.word	0x40020400
 8001ca8:	40020800 	.word	0x40020800
 8001cac:	40020c00 	.word	0x40020c00
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40021400 	.word	0x40021400
 8001cb8:	40021800 	.word	0x40021800
 8001cbc:	40013c00 	.word	0x40013c00

08001cc0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	603b      	str	r3, [r7, #0]
 8001cce:	4b20      	ldr	r3, [pc, #128]	; (8001d50 <HAL_PWREx_EnableOverDrive+0x90>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	4a1f      	ldr	r2, [pc, #124]	; (8001d50 <HAL_PWREx_EnableOverDrive+0x90>)
 8001cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cda:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <HAL_PWREx_EnableOverDrive+0x90>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001ce6:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_PWREx_EnableOverDrive+0x94>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cec:	f7ff f95e 	bl	8000fac <HAL_GetTick>
 8001cf0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001cf2:	e009      	b.n	8001d08 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001cf4:	f7ff f95a 	bl	8000fac <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d02:	d901      	bls.n	8001d08 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e01f      	b.n	8001d48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d08:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d14:	d1ee      	bne.n	8001cf4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001d16:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d1c:	f7ff f946 	bl	8000fac <HAL_GetTick>
 8001d20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d22:	e009      	b.n	8001d38 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d24:	f7ff f942 	bl	8000fac <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d32:	d901      	bls.n	8001d38 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e007      	b.n	8001d48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d44:	d1ee      	bne.n	8001d24 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40023800 	.word	0x40023800
 8001d54:	420e0040 	.word	0x420e0040
 8001d58:	40007000 	.word	0x40007000
 8001d5c:	420e0044 	.word	0x420e0044

08001d60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e0ca      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d74:	4b67      	ldr	r3, [pc, #412]	; (8001f14 <HAL_RCC_ClockConfig+0x1b4>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 030f 	and.w	r3, r3, #15
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d90c      	bls.n	8001d9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d82:	4b64      	ldr	r3, [pc, #400]	; (8001f14 <HAL_RCC_ClockConfig+0x1b4>)
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8a:	4b62      	ldr	r3, [pc, #392]	; (8001f14 <HAL_RCC_ClockConfig+0x1b4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d001      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0b6      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d020      	beq.n	8001dea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d005      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001db4:	4b58      	ldr	r3, [pc, #352]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	4a57      	ldr	r2, [pc, #348]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001dba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0308 	and.w	r3, r3, #8
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d005      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dcc:	4b52      	ldr	r3, [pc, #328]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	4a51      	ldr	r2, [pc, #324]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd8:	4b4f      	ldr	r3, [pc, #316]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	494c      	ldr	r1, [pc, #304]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d044      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d107      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfe:	4b46      	ldr	r3, [pc, #280]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d119      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e07d      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d003      	beq.n	8001e1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e1a:	2b03      	cmp	r3, #3
 8001e1c:	d107      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1e:	4b3e      	ldr	r3, [pc, #248]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d109      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e06d      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2e:	4b3a      	ldr	r3, [pc, #232]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e065      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e3e:	4b36      	ldr	r3, [pc, #216]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f023 0203 	bic.w	r2, r3, #3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	4933      	ldr	r1, [pc, #204]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e50:	f7ff f8ac 	bl	8000fac <HAL_GetTick>
 8001e54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e56:	e00a      	b.n	8001e6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e58:	f7ff f8a8 	bl	8000fac <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e04d      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6e:	4b2a      	ldr	r3, [pc, #168]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 020c 	and.w	r2, r3, #12
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d1eb      	bne.n	8001e58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e80:	4b24      	ldr	r3, [pc, #144]	; (8001f14 <HAL_RCC_ClockConfig+0x1b4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 030f 	and.w	r3, r3, #15
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d20c      	bcs.n	8001ea8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8e:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <HAL_RCC_ClockConfig+0x1b4>)
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e96:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <HAL_RCC_ClockConfig+0x1b4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d001      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e030      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d008      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eb4:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	4915      	ldr	r1, [pc, #84]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d009      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ed2:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	490d      	ldr	r1, [pc, #52]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ee6:	f000 f81d 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 8001eea:	4601      	mov	r1, r0
 8001eec:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	091b      	lsrs	r3, r3, #4
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	4a09      	ldr	r2, [pc, #36]	; (8001f1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef8:	5cd3      	ldrb	r3, [r2, r3]
 8001efa:	fa21 f303 	lsr.w	r3, r1, r3
 8001efe:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <HAL_RCC_ClockConfig+0x1c0>)
 8001f00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f02:	2004      	movs	r0, #4
 8001f04:	f7ff f80e 	bl	8000f24 <HAL_InitTick>

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40023c00 	.word	0x40023c00
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	08009a78 	.word	0x08009a78
 8001f20:	20000008 	.word	0x20000008

08001f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f3e:	4bc6      	ldr	r3, [pc, #792]	; (8002258 <HAL_RCC_GetSysClockFreq+0x334>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	2b0c      	cmp	r3, #12
 8001f48:	f200 817e 	bhi.w	8002248 <HAL_RCC_GetSysClockFreq+0x324>
 8001f4c:	a201      	add	r2, pc, #4	; (adr r2, 8001f54 <HAL_RCC_GetSysClockFreq+0x30>)
 8001f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f52:	bf00      	nop
 8001f54:	08001f89 	.word	0x08001f89
 8001f58:	08002249 	.word	0x08002249
 8001f5c:	08002249 	.word	0x08002249
 8001f60:	08002249 	.word	0x08002249
 8001f64:	08001f8f 	.word	0x08001f8f
 8001f68:	08002249 	.word	0x08002249
 8001f6c:	08002249 	.word	0x08002249
 8001f70:	08002249 	.word	0x08002249
 8001f74:	08001f95 	.word	0x08001f95
 8001f78:	08002249 	.word	0x08002249
 8001f7c:	08002249 	.word	0x08002249
 8001f80:	08002249 	.word	0x08002249
 8001f84:	080020f1 	.word	0x080020f1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f88:	4bb4      	ldr	r3, [pc, #720]	; (800225c <HAL_RCC_GetSysClockFreq+0x338>)
 8001f8a:	613b      	str	r3, [r7, #16]
       break;
 8001f8c:	e15f      	b.n	800224e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f8e:	4bb4      	ldr	r3, [pc, #720]	; (8002260 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001f90:	613b      	str	r3, [r7, #16]
      break;
 8001f92:	e15c      	b.n	800224e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f94:	4bb0      	ldr	r3, [pc, #704]	; (8002258 <HAL_RCC_GetSysClockFreq+0x334>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f9c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f9e:	4bae      	ldr	r3, [pc, #696]	; (8002258 <HAL_RCC_GetSysClockFreq+0x334>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d04a      	beq.n	8002040 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001faa:	4bab      	ldr	r3, [pc, #684]	; (8002258 <HAL_RCC_GetSysClockFreq+0x334>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	099b      	lsrs	r3, r3, #6
 8001fb0:	f04f 0400 	mov.w	r4, #0
 8001fb4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	ea03 0501 	and.w	r5, r3, r1
 8001fc0:	ea04 0602 	and.w	r6, r4, r2
 8001fc4:	4629      	mov	r1, r5
 8001fc6:	4632      	mov	r2, r6
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	f04f 0400 	mov.w	r4, #0
 8001fd0:	0154      	lsls	r4, r2, #5
 8001fd2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fd6:	014b      	lsls	r3, r1, #5
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4622      	mov	r2, r4
 8001fdc:	1b49      	subs	r1, r1, r5
 8001fde:	eb62 0206 	sbc.w	r2, r2, r6
 8001fe2:	f04f 0300 	mov.w	r3, #0
 8001fe6:	f04f 0400 	mov.w	r4, #0
 8001fea:	0194      	lsls	r4, r2, #6
 8001fec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ff0:	018b      	lsls	r3, r1, #6
 8001ff2:	1a5b      	subs	r3, r3, r1
 8001ff4:	eb64 0402 	sbc.w	r4, r4, r2
 8001ff8:	f04f 0100 	mov.w	r1, #0
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	00e2      	lsls	r2, r4, #3
 8002002:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002006:	00d9      	lsls	r1, r3, #3
 8002008:	460b      	mov	r3, r1
 800200a:	4614      	mov	r4, r2
 800200c:	195b      	adds	r3, r3, r5
 800200e:	eb44 0406 	adc.w	r4, r4, r6
 8002012:	f04f 0100 	mov.w	r1, #0
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	0262      	lsls	r2, r4, #9
 800201c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002020:	0259      	lsls	r1, r3, #9
 8002022:	460b      	mov	r3, r1
 8002024:	4614      	mov	r4, r2
 8002026:	4618      	mov	r0, r3
 8002028:	4621      	mov	r1, r4
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f04f 0400 	mov.w	r4, #0
 8002030:	461a      	mov	r2, r3
 8002032:	4623      	mov	r3, r4
 8002034:	f7fe fdd4 	bl	8000be0 <__aeabi_uldivmod>
 8002038:	4603      	mov	r3, r0
 800203a:	460c      	mov	r4, r1
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	e049      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002040:	4b85      	ldr	r3, [pc, #532]	; (8002258 <HAL_RCC_GetSysClockFreq+0x334>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	099b      	lsrs	r3, r3, #6
 8002046:	f04f 0400 	mov.w	r4, #0
 800204a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	ea03 0501 	and.w	r5, r3, r1
 8002056:	ea04 0602 	and.w	r6, r4, r2
 800205a:	4629      	mov	r1, r5
 800205c:	4632      	mov	r2, r6
 800205e:	f04f 0300 	mov.w	r3, #0
 8002062:	f04f 0400 	mov.w	r4, #0
 8002066:	0154      	lsls	r4, r2, #5
 8002068:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800206c:	014b      	lsls	r3, r1, #5
 800206e:	4619      	mov	r1, r3
 8002070:	4622      	mov	r2, r4
 8002072:	1b49      	subs	r1, r1, r5
 8002074:	eb62 0206 	sbc.w	r2, r2, r6
 8002078:	f04f 0300 	mov.w	r3, #0
 800207c:	f04f 0400 	mov.w	r4, #0
 8002080:	0194      	lsls	r4, r2, #6
 8002082:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002086:	018b      	lsls	r3, r1, #6
 8002088:	1a5b      	subs	r3, r3, r1
 800208a:	eb64 0402 	sbc.w	r4, r4, r2
 800208e:	f04f 0100 	mov.w	r1, #0
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	00e2      	lsls	r2, r4, #3
 8002098:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800209c:	00d9      	lsls	r1, r3, #3
 800209e:	460b      	mov	r3, r1
 80020a0:	4614      	mov	r4, r2
 80020a2:	195b      	adds	r3, r3, r5
 80020a4:	eb44 0406 	adc.w	r4, r4, r6
 80020a8:	f04f 0100 	mov.w	r1, #0
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	02a2      	lsls	r2, r4, #10
 80020b2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80020b6:	0299      	lsls	r1, r3, #10
 80020b8:	460b      	mov	r3, r1
 80020ba:	4614      	mov	r4, r2
 80020bc:	4618      	mov	r0, r3
 80020be:	4621      	mov	r1, r4
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f04f 0400 	mov.w	r4, #0
 80020c6:	461a      	mov	r2, r3
 80020c8:	4623      	mov	r3, r4
 80020ca:	f7fe fd89 	bl	8000be0 <__aeabi_uldivmod>
 80020ce:	4603      	mov	r3, r0
 80020d0:	460c      	mov	r4, r1
 80020d2:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020d4:	4b60      	ldr	r3, [pc, #384]	; (8002258 <HAL_RCC_GetSysClockFreq+0x334>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	0c1b      	lsrs	r3, r3, #16
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	3301      	adds	r3, #1
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ec:	613b      	str	r3, [r7, #16]
      break;
 80020ee:	e0ae      	b.n	800224e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020f0:	4b59      	ldr	r3, [pc, #356]	; (8002258 <HAL_RCC_GetSysClockFreq+0x334>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020f8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020fa:	4b57      	ldr	r3, [pc, #348]	; (8002258 <HAL_RCC_GetSysClockFreq+0x334>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d04a      	beq.n	800219c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002106:	4b54      	ldr	r3, [pc, #336]	; (8002258 <HAL_RCC_GetSysClockFreq+0x334>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	099b      	lsrs	r3, r3, #6
 800210c:	f04f 0400 	mov.w	r4, #0
 8002110:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	ea03 0501 	and.w	r5, r3, r1
 800211c:	ea04 0602 	and.w	r6, r4, r2
 8002120:	4629      	mov	r1, r5
 8002122:	4632      	mov	r2, r6
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	f04f 0400 	mov.w	r4, #0
 800212c:	0154      	lsls	r4, r2, #5
 800212e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002132:	014b      	lsls	r3, r1, #5
 8002134:	4619      	mov	r1, r3
 8002136:	4622      	mov	r2, r4
 8002138:	1b49      	subs	r1, r1, r5
 800213a:	eb62 0206 	sbc.w	r2, r2, r6
 800213e:	f04f 0300 	mov.w	r3, #0
 8002142:	f04f 0400 	mov.w	r4, #0
 8002146:	0194      	lsls	r4, r2, #6
 8002148:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800214c:	018b      	lsls	r3, r1, #6
 800214e:	1a5b      	subs	r3, r3, r1
 8002150:	eb64 0402 	sbc.w	r4, r4, r2
 8002154:	f04f 0100 	mov.w	r1, #0
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	00e2      	lsls	r2, r4, #3
 800215e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002162:	00d9      	lsls	r1, r3, #3
 8002164:	460b      	mov	r3, r1
 8002166:	4614      	mov	r4, r2
 8002168:	195b      	adds	r3, r3, r5
 800216a:	eb44 0406 	adc.w	r4, r4, r6
 800216e:	f04f 0100 	mov.w	r1, #0
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	0262      	lsls	r2, r4, #9
 8002178:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800217c:	0259      	lsls	r1, r3, #9
 800217e:	460b      	mov	r3, r1
 8002180:	4614      	mov	r4, r2
 8002182:	4618      	mov	r0, r3
 8002184:	4621      	mov	r1, r4
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f04f 0400 	mov.w	r4, #0
 800218c:	461a      	mov	r2, r3
 800218e:	4623      	mov	r3, r4
 8002190:	f7fe fd26 	bl	8000be0 <__aeabi_uldivmod>
 8002194:	4603      	mov	r3, r0
 8002196:	460c      	mov	r4, r1
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	e049      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800219c:	4b2e      	ldr	r3, [pc, #184]	; (8002258 <HAL_RCC_GetSysClockFreq+0x334>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	099b      	lsrs	r3, r3, #6
 80021a2:	f04f 0400 	mov.w	r4, #0
 80021a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	ea03 0501 	and.w	r5, r3, r1
 80021b2:	ea04 0602 	and.w	r6, r4, r2
 80021b6:	4629      	mov	r1, r5
 80021b8:	4632      	mov	r2, r6
 80021ba:	f04f 0300 	mov.w	r3, #0
 80021be:	f04f 0400 	mov.w	r4, #0
 80021c2:	0154      	lsls	r4, r2, #5
 80021c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021c8:	014b      	lsls	r3, r1, #5
 80021ca:	4619      	mov	r1, r3
 80021cc:	4622      	mov	r2, r4
 80021ce:	1b49      	subs	r1, r1, r5
 80021d0:	eb62 0206 	sbc.w	r2, r2, r6
 80021d4:	f04f 0300 	mov.w	r3, #0
 80021d8:	f04f 0400 	mov.w	r4, #0
 80021dc:	0194      	lsls	r4, r2, #6
 80021de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021e2:	018b      	lsls	r3, r1, #6
 80021e4:	1a5b      	subs	r3, r3, r1
 80021e6:	eb64 0402 	sbc.w	r4, r4, r2
 80021ea:	f04f 0100 	mov.w	r1, #0
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	00e2      	lsls	r2, r4, #3
 80021f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80021f8:	00d9      	lsls	r1, r3, #3
 80021fa:	460b      	mov	r3, r1
 80021fc:	4614      	mov	r4, r2
 80021fe:	195b      	adds	r3, r3, r5
 8002200:	eb44 0406 	adc.w	r4, r4, r6
 8002204:	f04f 0100 	mov.w	r1, #0
 8002208:	f04f 0200 	mov.w	r2, #0
 800220c:	02a2      	lsls	r2, r4, #10
 800220e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002212:	0299      	lsls	r1, r3, #10
 8002214:	460b      	mov	r3, r1
 8002216:	4614      	mov	r4, r2
 8002218:	4618      	mov	r0, r3
 800221a:	4621      	mov	r1, r4
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f04f 0400 	mov.w	r4, #0
 8002222:	461a      	mov	r2, r3
 8002224:	4623      	mov	r3, r4
 8002226:	f7fe fcdb 	bl	8000be0 <__aeabi_uldivmod>
 800222a:	4603      	mov	r3, r0
 800222c:	460c      	mov	r4, r1
 800222e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002230:	4b09      	ldr	r3, [pc, #36]	; (8002258 <HAL_RCC_GetSysClockFreq+0x334>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	0f1b      	lsrs	r3, r3, #28
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	fbb2 f3f3 	udiv	r3, r2, r3
 8002244:	613b      	str	r3, [r7, #16]
      break;
 8002246:	e002      	b.n	800224e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002248:	4b04      	ldr	r3, [pc, #16]	; (800225c <HAL_RCC_GetSysClockFreq+0x338>)
 800224a:	613b      	str	r3, [r7, #16]
      break;
 800224c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800224e:	693b      	ldr	r3, [r7, #16]
}
 8002250:	4618      	mov	r0, r3
 8002252:	371c      	adds	r7, #28
 8002254:	46bd      	mov	sp, r7
 8002256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002258:	40023800 	.word	0x40023800
 800225c:	00f42400 	.word	0x00f42400
 8002260:	007a1200 	.word	0x007a1200

08002264 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 8083 	beq.w	8002384 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800227e:	4b95      	ldr	r3, [pc, #596]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 030c 	and.w	r3, r3, #12
 8002286:	2b04      	cmp	r3, #4
 8002288:	d019      	beq.n	80022be <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800228a:	4b92      	ldr	r3, [pc, #584]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002292:	2b08      	cmp	r3, #8
 8002294:	d106      	bne.n	80022a4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002296:	4b8f      	ldr	r3, [pc, #572]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800229e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022a2:	d00c      	beq.n	80022be <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022a4:	4b8b      	ldr	r3, [pc, #556]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022ac:	2b0c      	cmp	r3, #12
 80022ae:	d112      	bne.n	80022d6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022b0:	4b88      	ldr	r3, [pc, #544]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022bc:	d10b      	bne.n	80022d6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022be:	4b85      	ldr	r3, [pc, #532]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d05b      	beq.n	8002382 <HAL_RCC_OscConfig+0x11e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d157      	bne.n	8002382 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e216      	b.n	8002704 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022de:	d106      	bne.n	80022ee <HAL_RCC_OscConfig+0x8a>
 80022e0:	4b7c      	ldr	r3, [pc, #496]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a7b      	ldr	r2, [pc, #492]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80022e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	e01d      	b.n	800232a <HAL_RCC_OscConfig+0xc6>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022f6:	d10c      	bne.n	8002312 <HAL_RCC_OscConfig+0xae>
 80022f8:	4b76      	ldr	r3, [pc, #472]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a75      	ldr	r2, [pc, #468]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80022fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	4b73      	ldr	r3, [pc, #460]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a72      	ldr	r2, [pc, #456]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 800230a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	e00b      	b.n	800232a <HAL_RCC_OscConfig+0xc6>
 8002312:	4b70      	ldr	r3, [pc, #448]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a6f      	ldr	r2, [pc, #444]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	4b6d      	ldr	r3, [pc, #436]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a6c      	ldr	r2, [pc, #432]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002324:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002328:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d013      	beq.n	800235a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002332:	f7fe fe3b 	bl	8000fac <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800233a:	f7fe fe37 	bl	8000fac <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b64      	cmp	r3, #100	; 0x64
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e1db      	b.n	8002704 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234c:	4b61      	ldr	r3, [pc, #388]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0f0      	beq.n	800233a <HAL_RCC_OscConfig+0xd6>
 8002358:	e014      	b.n	8002384 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235a:	f7fe fe27 	bl	8000fac <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002362:	f7fe fe23 	bl	8000fac <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b64      	cmp	r3, #100	; 0x64
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e1c7      	b.n	8002704 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002374:	4b57      	ldr	r3, [pc, #348]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1f0      	bne.n	8002362 <HAL_RCC_OscConfig+0xfe>
 8002380:	e000      	b.n	8002384 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002382:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d06f      	beq.n	8002470 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002390:	4b50      	ldr	r3, [pc, #320]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 030c 	and.w	r3, r3, #12
 8002398:	2b00      	cmp	r3, #0
 800239a:	d017      	beq.n	80023cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800239c:	4b4d      	ldr	r3, [pc, #308]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d105      	bne.n	80023b4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023a8:	4b4a      	ldr	r3, [pc, #296]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00b      	beq.n	80023cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023b4:	4b47      	ldr	r3, [pc, #284]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023bc:	2b0c      	cmp	r3, #12
 80023be:	d11c      	bne.n	80023fa <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023c0:	4b44      	ldr	r3, [pc, #272]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d116      	bne.n	80023fa <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023cc:	4b41      	ldr	r3, [pc, #260]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d005      	beq.n	80023e4 <HAL_RCC_OscConfig+0x180>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d001      	beq.n	80023e4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e18f      	b.n	8002704 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e4:	4b3b      	ldr	r3, [pc, #236]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	4938      	ldr	r1, [pc, #224]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f8:	e03a      	b.n	8002470 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d020      	beq.n	8002444 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002402:	4b35      	ldr	r3, [pc, #212]	; (80024d8 <HAL_RCC_OscConfig+0x274>)
 8002404:	2201      	movs	r2, #1
 8002406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002408:	f7fe fdd0 	bl	8000fac <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002410:	f7fe fdcc 	bl	8000fac <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e170      	b.n	8002704 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002422:	4b2c      	ldr	r3, [pc, #176]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f0      	beq.n	8002410 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242e:	4b29      	ldr	r3, [pc, #164]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	4925      	ldr	r1, [pc, #148]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 800243e:	4313      	orrs	r3, r2
 8002440:	600b      	str	r3, [r1, #0]
 8002442:	e015      	b.n	8002470 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002444:	4b24      	ldr	r3, [pc, #144]	; (80024d8 <HAL_RCC_OscConfig+0x274>)
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244a:	f7fe fdaf 	bl	8000fac <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002452:	f7fe fdab 	bl	8000fac <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e14f      	b.n	8002704 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002464:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f0      	bne.n	8002452 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0308 	and.w	r3, r3, #8
 8002478:	2b00      	cmp	r3, #0
 800247a:	d037      	beq.n	80024ec <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d016      	beq.n	80024b2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002484:	4b15      	ldr	r3, [pc, #84]	; (80024dc <HAL_RCC_OscConfig+0x278>)
 8002486:	2201      	movs	r2, #1
 8002488:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248a:	f7fe fd8f 	bl	8000fac <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002492:	f7fe fd8b 	bl	8000fac <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e12f      	b.n	8002704 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80024a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0x22e>
 80024b0:	e01c      	b.n	80024ec <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024b2:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <HAL_RCC_OscConfig+0x278>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b8:	f7fe fd78 	bl	8000fac <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024be:	e00f      	b.n	80024e0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024c0:	f7fe fd74 	bl	8000fac <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d908      	bls.n	80024e0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e118      	b.n	8002704 <HAL_RCC_OscConfig+0x4a0>
 80024d2:	bf00      	nop
 80024d4:	40023800 	.word	0x40023800
 80024d8:	42470000 	.word	0x42470000
 80024dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e0:	4b8a      	ldr	r3, [pc, #552]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 80024e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1e9      	bne.n	80024c0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 8097 	beq.w	8002628 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024fa:	2300      	movs	r3, #0
 80024fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024fe:	4b83      	ldr	r3, [pc, #524]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10f      	bne.n	800252a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	4b7f      	ldr	r3, [pc, #508]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	4a7e      	ldr	r2, [pc, #504]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 8002514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002518:	6413      	str	r3, [r2, #64]	; 0x40
 800251a:	4b7c      	ldr	r3, [pc, #496]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002526:	2301      	movs	r3, #1
 8002528:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252a:	4b79      	ldr	r3, [pc, #484]	; (8002710 <HAL_RCC_OscConfig+0x4ac>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002532:	2b00      	cmp	r3, #0
 8002534:	d118      	bne.n	8002568 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002536:	4b76      	ldr	r3, [pc, #472]	; (8002710 <HAL_RCC_OscConfig+0x4ac>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a75      	ldr	r2, [pc, #468]	; (8002710 <HAL_RCC_OscConfig+0x4ac>)
 800253c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002542:	f7fe fd33 	bl	8000fac <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800254a:	f7fe fd2f 	bl	8000fac <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e0d3      	b.n	8002704 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255c:	4b6c      	ldr	r3, [pc, #432]	; (8002710 <HAL_RCC_OscConfig+0x4ac>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f0      	beq.n	800254a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d106      	bne.n	800257e <HAL_RCC_OscConfig+0x31a>
 8002570:	4b66      	ldr	r3, [pc, #408]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 8002572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002574:	4a65      	ldr	r2, [pc, #404]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	6713      	str	r3, [r2, #112]	; 0x70
 800257c:	e01c      	b.n	80025b8 <HAL_RCC_OscConfig+0x354>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b05      	cmp	r3, #5
 8002584:	d10c      	bne.n	80025a0 <HAL_RCC_OscConfig+0x33c>
 8002586:	4b61      	ldr	r3, [pc, #388]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258a:	4a60      	ldr	r2, [pc, #384]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 800258c:	f043 0304 	orr.w	r3, r3, #4
 8002590:	6713      	str	r3, [r2, #112]	; 0x70
 8002592:	4b5e      	ldr	r3, [pc, #376]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 8002594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002596:	4a5d      	ldr	r2, [pc, #372]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	6713      	str	r3, [r2, #112]	; 0x70
 800259e:	e00b      	b.n	80025b8 <HAL_RCC_OscConfig+0x354>
 80025a0:	4b5a      	ldr	r3, [pc, #360]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 80025a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a4:	4a59      	ldr	r2, [pc, #356]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 80025a6:	f023 0301 	bic.w	r3, r3, #1
 80025aa:	6713      	str	r3, [r2, #112]	; 0x70
 80025ac:	4b57      	ldr	r3, [pc, #348]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 80025ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b0:	4a56      	ldr	r2, [pc, #344]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 80025b2:	f023 0304 	bic.w	r3, r3, #4
 80025b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d015      	beq.n	80025ec <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c0:	f7fe fcf4 	bl	8000fac <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c6:	e00a      	b.n	80025de <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025c8:	f7fe fcf0 	bl	8000fac <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e092      	b.n	8002704 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025de:	4b4b      	ldr	r3, [pc, #300]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0ee      	beq.n	80025c8 <HAL_RCC_OscConfig+0x364>
 80025ea:	e014      	b.n	8002616 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ec:	f7fe fcde 	bl	8000fac <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f2:	e00a      	b.n	800260a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025f4:	f7fe fcda 	bl	8000fac <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002602:	4293      	cmp	r3, r2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e07c      	b.n	8002704 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800260a:	4b40      	ldr	r3, [pc, #256]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 800260c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1ee      	bne.n	80025f4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002616:	7dfb      	ldrb	r3, [r7, #23]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d105      	bne.n	8002628 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800261c:	4b3b      	ldr	r3, [pc, #236]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 800261e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002620:	4a3a      	ldr	r2, [pc, #232]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 8002622:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002626:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d068      	beq.n	8002702 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002630:	4b36      	ldr	r3, [pc, #216]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 030c 	and.w	r3, r3, #12
 8002638:	2b08      	cmp	r3, #8
 800263a:	d060      	beq.n	80026fe <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d145      	bne.n	80026d0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002644:	4b33      	ldr	r3, [pc, #204]	; (8002714 <HAL_RCC_OscConfig+0x4b0>)
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264a:	f7fe fcaf 	bl	8000fac <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002652:	f7fe fcab 	bl	8000fac <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e04f      	b.n	8002704 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002664:	4b29      	ldr	r3, [pc, #164]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1f0      	bne.n	8002652 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69da      	ldr	r2, [r3, #28]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	019b      	lsls	r3, r3, #6
 8002680:	431a      	orrs	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002686:	085b      	lsrs	r3, r3, #1
 8002688:	3b01      	subs	r3, #1
 800268a:	041b      	lsls	r3, r3, #16
 800268c:	431a      	orrs	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002692:	061b      	lsls	r3, r3, #24
 8002694:	431a      	orrs	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	071b      	lsls	r3, r3, #28
 800269c:	491b      	ldr	r1, [pc, #108]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026a2:	4b1c      	ldr	r3, [pc, #112]	; (8002714 <HAL_RCC_OscConfig+0x4b0>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a8:	f7fe fc80 	bl	8000fac <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b0:	f7fe fc7c 	bl	8000fac <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e020      	b.n	8002704 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c2:	4b12      	ldr	r3, [pc, #72]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0x44c>
 80026ce:	e018      	b.n	8002702 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d0:	4b10      	ldr	r3, [pc, #64]	; (8002714 <HAL_RCC_OscConfig+0x4b0>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d6:	f7fe fc69 	bl	8000fac <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026de:	f7fe fc65 	bl	8000fac <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e009      	b.n	8002704 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1f0      	bne.n	80026de <HAL_RCC_OscConfig+0x47a>
 80026fc:	e001      	b.n	8002702 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40023800 	.word	0x40023800
 8002710:	40007000 	.word	0x40007000
 8002714:	42470060 	.word	0x42470060

08002718 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002726:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <LL_ADC_INJ_SetSequencerLength>:
  *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
  *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b01      	cmp	r3, #1
 8002776:	bf0c      	ite	eq
 8002778:	2301      	moveq	r3, #1
 800277a:	2300      	movne	r3, #0
 800277c:	b2db      	uxtb	r3, r3
}
 800277e:	4618      	mov	r0, r3
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 800278c:	b590      	push	{r4, r7, lr}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002796:	2300      	movs	r3, #0
 8002798:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 800279a:	481c      	ldr	r0, [pc, #112]	; (800280c <LL_ADC_CommonInit+0x80>)
 800279c:	f7ff ffe2 	bl	8002764 <LL_ADC_IsEnabled>
 80027a0:	4604      	mov	r4, r0
 80027a2:	481b      	ldr	r0, [pc, #108]	; (8002810 <LL_ADC_CommonInit+0x84>)
 80027a4:	f7ff ffde 	bl	8002764 <LL_ADC_IsEnabled>
 80027a8:	4603      	mov	r3, r0
 80027aa:	431c      	orrs	r4, r3
 80027ac:	4819      	ldr	r0, [pc, #100]	; (8002814 <LL_ADC_CommonInit+0x88>)
 80027ae:	f7ff ffd9 	bl	8002764 <LL_ADC_IsEnabled>
 80027b2:	4603      	mov	r3, r0
 80027b4:	4323      	orrs	r3, r4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d120      	bne.n	80027fc <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d012      	beq.n	80027e8 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	4b14      	ldr	r3, [pc, #80]	; (8002818 <LL_ADC_CommonInit+0x8c>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	6811      	ldr	r1, [r2, #0]
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	6852      	ldr	r2, [r2, #4]
 80027d2:	4311      	orrs	r1, r2
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	6892      	ldr	r2, [r2, #8]
 80027d8:	4311      	orrs	r1, r2
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	68d2      	ldr	r2, [r2, #12]
 80027de:	430a      	orrs	r2, r1
 80027e0:	431a      	orrs	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	e00b      	b.n	8002800 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <LL_ADC_CommonInit+0x8c>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	e001      	b.n	8002800 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8002800:	7bfb      	ldrb	r3, [r7, #15]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	bd90      	pop	{r4, r7, pc}
 800280a:	bf00      	nop
 800280c:	40012000 	.word	0x40012000
 8002810:	40012100 	.word	0x40012100
 8002814:	40012200 	.word	0x40012200
 8002818:	fffc10e0 	.word	0xfffc10e0

0800281c <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002826:	2300      	movs	r3, #0
 8002828:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7ff ff9a 	bl	8002764 <LL_ADC_IsEnabled>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d117      	bne.n	8002866 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800283e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	6811      	ldr	r1, [r2, #0]
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	6892      	ldr	r2, [r2, #8]
 800284a:	430a      	orrs	r2, r1
 800284c:	431a      	orrs	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	e001      	b.n	800286a <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800286a:	7bfb      	ldrb	r3, [r7, #15]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800287e:	2300      	movs	r3, #0
 8002880:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff ff6e 	bl	8002764 <LL_ADC_IsEnabled>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d131      	bne.n	80028f2 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00c      	beq.n	80028b0 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	6859      	ldr	r1, [r3, #4]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	430b      	orrs	r3, r1
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	e008      	b.n	80028c2 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	431a      	orrs	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <LL_ADC_REG_Init+0x8c>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	6812      	ldr	r2, [r2, #0]
 80028ce:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	68d2      	ldr	r2, [r2, #12]
 80028d6:	4311      	orrs	r1, r2
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	6912      	ldr	r2, [r2, #16]
 80028dc:	430a      	orrs	r2, r1
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	4619      	mov	r1, r3
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff ff14 	bl	8002718 <LL_ADC_REG_SetSequencerLength>
 80028f0:	e001      	b.n	80028f6 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	c0fffcfd 	.word	0xc0fffcfd

08002904 <LL_ADC_INJ_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_INJ_Init(ADC_TypeDef *ADCx, LL_ADC_INJ_InitTypeDef *ADC_INJ_InitStruct)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800290e:	2300      	movs	r3, #0
 8002910:	73fb      	strb	r3, [r7, #15]
  }
  assert_param(IS_LL_ADC_INJ_TRIG_AUTO(ADC_INJ_InitStruct->TrigAuto));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff ff26 	bl	8002764 <LL_ADC_IsEnabled>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d12b      	bne.n	8002976 <LL_ADC_INJ_Init+0x72>
    /*    - Set ADC group injected conversion trigger: independent or         */
    /*      from ADC group regular                                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_INJ_StartConversionExtTrig().      */
    if(ADC_INJ_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00c      	beq.n	8002940 <LL_ADC_INJ_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f423 52a0 	bic.w	r2, r3, #5120	; 0x1400
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	6899      	ldr	r1, [r3, #8]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	430b      	orrs	r3, r1
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	e008      	b.n	8002952 <LL_ADC_INJ_Init+0x4e>
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f423 52a0 	bic.w	r2, r3, #5120	; 0x1400
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	605a      	str	r2, [r3, #4]
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_INJ_SetSequencerLength(ADCx, ADC_INJ_InitStruct->SequencerLength);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4619      	mov	r1, r3
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7ff fee5 	bl	800273e <LL_ADC_INJ_SetSequencerLength>
 8002974:	e001      	b.n	800297a <LL_ADC_INJ_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800297a:	7bfb      	ldrb	r3, [r7, #15]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <LL_EXTI_EnableIT_0_31+0x20>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4904      	ldr	r1, [pc, #16]	; (80029a4 <LL_EXTI_EnableIT_0_31+0x20>)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4313      	orrs	r3, r2
 8002996:	600b      	str	r3, [r1, #0]
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	40013c00 	.word	0x40013c00

080029a8 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80029b0:	4b06      	ldr	r3, [pc, #24]	; (80029cc <LL_EXTI_DisableIT_0_31+0x24>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	43db      	mvns	r3, r3
 80029b8:	4904      	ldr	r1, [pc, #16]	; (80029cc <LL_EXTI_DisableIT_0_31+0x24>)
 80029ba:	4013      	ands	r3, r2
 80029bc:	600b      	str	r3, [r1, #0]
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40013c00 	.word	0x40013c00

080029d0 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80029d8:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	4904      	ldr	r1, [pc, #16]	; (80029f0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	604b      	str	r3, [r1, #4]

}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	40013c00 	.word	0x40013c00

080029f4 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80029fc:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <LL_EXTI_DisableEvent_0_31+0x24>)
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	43db      	mvns	r3, r3
 8002a04:	4904      	ldr	r1, [pc, #16]	; (8002a18 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002a06:	4013      	ands	r3, r2
 8002a08:	604b      	str	r3, [r1, #4]
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40013c00 	.word	0x40013c00

08002a1c <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002a24:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	4904      	ldr	r1, [pc, #16]	; (8002a3c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	608b      	str	r3, [r1, #8]

}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	40013c00 	.word	0x40013c00

08002a40 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	4904      	ldr	r1, [pc, #16]	; (8002a64 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	608b      	str	r3, [r1, #8]

}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40013c00 	.word	0x40013c00

08002a68 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002a70:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	4904      	ldr	r1, [pc, #16]	; (8002a88 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	60cb      	str	r3, [r1, #12]
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	40013c00 	.word	0x40013c00

08002a8c <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002a94:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	4904      	ldr	r1, [pc, #16]	; (8002ab0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	60cb      	str	r3, [r1, #12]
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40013c00 	.word	0x40013c00

08002ab4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002abc:	2300      	movs	r3, #0
 8002abe:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	791b      	ldrb	r3, [r3, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d060      	beq.n	8002b8a <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d067      	beq.n	8002ba0 <LL_EXTI_Init+0xec>
    {
      switch (EXTI_InitStruct->Mode)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	795b      	ldrb	r3, [r3, #5]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d00e      	beq.n	8002af6 <LL_EXTI_Init+0x42>
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d017      	beq.n	8002b0c <LL_EXTI_Init+0x58>
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d120      	bne.n	8002b22 <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff ff85 	bl	80029f4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff ff48 	bl	8002984 <LL_EXTI_EnableIT_0_31>
          break;
 8002af4:	e018      	b.n	8002b28 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff ff54 	bl	80029a8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff ff63 	bl	80029d0 <LL_EXTI_EnableEvent_0_31>
          break;
 8002b0a:	e00d      	b.n	8002b28 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff ff37 	bl	8002984 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff ff58 	bl	80029d0 <LL_EXTI_EnableEvent_0_31>
          break;
 8002b20:	e002      	b.n	8002b28 <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	73fb      	strb	r3, [r7, #15]
          break;
 8002b26:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	799b      	ldrb	r3, [r3, #6]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d037      	beq.n	8002ba0 <LL_EXTI_Init+0xec>
      {
        switch (EXTI_InitStruct->Trigger)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	799b      	ldrb	r3, [r3, #6]
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d00e      	beq.n	8002b56 <LL_EXTI_Init+0xa2>
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d017      	beq.n	8002b6c <LL_EXTI_Init+0xb8>
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d120      	bne.n	8002b82 <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff ffa1 	bl	8002a8c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff ff64 	bl	8002a1c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002b54:	e025      	b.n	8002ba2 <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff ff70 	bl	8002a40 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff ff7f 	bl	8002a68 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002b6a:	e01a      	b.n	8002ba2 <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff ff53 	bl	8002a1c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff ff74 	bl	8002a68 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002b80:	e00f      	b.n	8002ba2 <LL_EXTI_Init+0xee>
          default:
            status = ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	73fb      	strb	r3, [r7, #15]
            break;
 8002b86:	bf00      	nop
 8002b88:	e00b      	b.n	8002ba2 <LL_EXTI_Init+0xee>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff ff0a 	bl	80029a8 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff ff2b 	bl	80029f4 <LL_EXTI_DisableEvent_0_31>
 8002b9e:	e000      	b.n	8002ba2 <LL_EXTI_Init+0xee>
      }
 8002ba0:	bf00      	nop
  }
  return status;
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b089      	sub	sp, #36	; 0x24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	fa93 f3a3 	rbit	r3, r3
 8002bc6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	fab3 f383 	clz	r3, r3
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	2103      	movs	r1, #3
 8002bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	401a      	ands	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	61bb      	str	r3, [r7, #24]
  return result;
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	601a      	str	r2, [r3, #0]
}
 8002bfe:	bf00      	nop
 8002c00:	3724      	adds	r7, #36	; 0x24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b085      	sub	sp, #20
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	401a      	ands	r2, r3
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	fb01 f303 	mul.w	r3, r1, r3
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	605a      	str	r2, [r3, #4]
}
 8002c2e:	bf00      	nop
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b089      	sub	sp, #36	; 0x24
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	fa93 f3a3 	rbit	r3, r3
 8002c54:	613b      	str	r3, [r7, #16]
  return result;
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	fab3 f383 	clz	r3, r3
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	2103      	movs	r1, #3
 8002c62:	fa01 f303 	lsl.w	r3, r1, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	401a      	ands	r2, r3
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	fa93 f3a3 	rbit	r3, r3
 8002c74:	61bb      	str	r3, [r7, #24]
  return result;
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	fab3 f383 	clz	r3, r3
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	fa01 f303 	lsl.w	r3, r1, r3
 8002c86:	431a      	orrs	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002c8c:	bf00      	nop
 8002c8e:	3724      	adds	r7, #36	; 0x24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b089      	sub	sp, #36	; 0x24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	fa93 f3a3 	rbit	r3, r3
 8002cb2:	613b      	str	r3, [r7, #16]
  return result;
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	fab3 f383 	clz	r3, r3
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	2103      	movs	r1, #3
 8002cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	fa93 f3a3 	rbit	r3, r3
 8002cd2:	61bb      	str	r3, [r7, #24]
  return result;
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	60da      	str	r2, [r3, #12]
}
 8002cea:	bf00      	nop
 8002cec:	3724      	adds	r7, #36	; 0x24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b089      	sub	sp, #36	; 0x24
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a1a      	ldr	r2, [r3, #32]
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	fa93 f3a3 	rbit	r3, r3
 8002d10:	613b      	str	r3, [r7, #16]
  return result;
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	fab3 f383 	clz	r3, r3
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	210f      	movs	r1, #15
 8002d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d22:	43db      	mvns	r3, r3
 8002d24:	401a      	ands	r2, r3
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	fa93 f3a3 	rbit	r3, r3
 8002d30:	61bb      	str	r3, [r7, #24]
  return result;
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	fab3 f383 	clz	r3, r3
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d42:	431a      	orrs	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002d48:	bf00      	nop
 8002d4a:	3724      	adds	r7, #36	; 0x24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b089      	sub	sp, #36	; 0x24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	0a1b      	lsrs	r3, r3, #8
 8002d68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	fa93 f3a3 	rbit	r3, r3
 8002d70:	613b      	str	r3, [r7, #16]
  return result;
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	fab3 f383 	clz	r3, r3
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	210f      	movs	r1, #15
 8002d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d82:	43db      	mvns	r3, r3
 8002d84:	401a      	ands	r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	0a1b      	lsrs	r3, r3, #8
 8002d8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	fa93 f3a3 	rbit	r3, r3
 8002d92:	61bb      	str	r3, [r7, #24]
  return result;
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	fab3 f383 	clz	r3, r3
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	fa01 f303 	lsl.w	r3, r1, r3
 8002da4:	431a      	orrs	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002daa:	bf00      	nop
 8002dac:	3724      	adds	r7, #36	; 0x24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b088      	sub	sp, #32
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
 8002dbe:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	fa93 f3a3 	rbit	r3, r3
 8002dd4:	613b      	str	r3, [r7, #16]
  return result;
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	fab3 f383 	clz	r3, r3
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002de0:	e049      	b.n	8002e76 <LL_GPIO_Init+0xc0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	2101      	movs	r1, #1
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	fa01 f303 	lsl.w	r3, r1, r3
 8002dee:	4013      	ands	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d03b      	beq.n	8002e70 <LL_GPIO_Init+0xba>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	69b9      	ldr	r1, [r7, #24]
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f7ff fed3 	bl	8002bac <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d003      	beq.n	8002e16 <LL_GPIO_Init+0x60>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d106      	bne.n	8002e24 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	69b9      	ldr	r1, [r7, #24]
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff ff0b 	bl	8002c3a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	69b9      	ldr	r1, [r7, #24]
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7ff ff33 	bl	8002c98 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d11a      	bne.n	8002e70 <LL_GPIO_Init+0xba>
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	fa93 f3a3 	rbit	r3, r3
 8002e44:	60bb      	str	r3, [r7, #8]
  return result;
 8002e46:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002e48:	fab3 f383 	clz	r3, r3
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b07      	cmp	r3, #7
 8002e50:	d807      	bhi.n	8002e62 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	461a      	mov	r2, r3
 8002e58:	69b9      	ldr	r1, [r7, #24]
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff ff4b 	bl	8002cf6 <LL_GPIO_SetAFPin_0_7>
 8002e60:	e006      	b.n	8002e70 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	461a      	mov	r2, r3
 8002e68:	69b9      	ldr	r1, [r7, #24]
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff ff72 	bl	8002d54 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	3301      	adds	r3, #1
 8002e74:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1ae      	bne.n	8002de2 <LL_GPIO_Init+0x2c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d003      	beq.n	8002e94 <LL_GPIO_Init+0xde>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d107      	bne.n	8002ea4 <LL_GPIO_Init+0xee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	6819      	ldr	r1, [r3, #0]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7ff feb3 	bl	8002c0a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3720      	adds	r7, #32
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
	...

08002eb0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002eb4:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <LL_RCC_GetSysClkSource+0x18>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 030c 	and.w	r3, r3, #12
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800

08002ecc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002ed0:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <LL_RCC_GetAHBPrescaler+0x18>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800

08002ee8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002eec:	4b04      	ldr	r3, [pc, #16]	; (8002f00 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40023800 	.word	0x40023800

08002f04 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002f08:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <LL_RCC_GetAPB2Prescaler+0x18>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800

08002f20 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002f24:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <LL_RCC_PLL_GetMainSource+0x18>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	40023800 	.word	0x40023800

08002f3c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002f40:	4b04      	ldr	r3, [pc, #16]	; (8002f54 <LL_RCC_PLL_GetN+0x18>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	099b      	lsrs	r3, r3, #6
 8002f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	40023800 	.word	0x40023800

08002f58 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002f5c:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <LL_RCC_PLL_GetP+0x18>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40023800 	.word	0x40023800

08002f74 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002f78:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <LL_RCC_PLL_GetR+0x18>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40023800 	.word	0x40023800

08002f90 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002f94:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <LL_RCC_PLL_GetDivider+0x18>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40023800 	.word	0x40023800

08002fac <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002fb4:	f000 f820 	bl	8002ff8 <RCC_GetSystemClockFreq>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 f85c 	bl	8003080 <RCC_GetHCLKClockFreq>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 f86a 	bl	80030ac <RCC_GetPCLK1ClockFreq>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 f876 	bl	80030d4 <RCC_GetPCLK2ClockFreq>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	60da      	str	r2, [r3, #12]
}
 8002fee:	bf00      	nop
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003002:	f7ff ff55 	bl	8002eb0 <LL_RCC_GetSysClkSource>
 8003006:	4603      	mov	r3, r0
 8003008:	2b0c      	cmp	r3, #12
 800300a:	d82d      	bhi.n	8003068 <RCC_GetSystemClockFreq+0x70>
 800300c:	a201      	add	r2, pc, #4	; (adr r2, 8003014 <RCC_GetSystemClockFreq+0x1c>)
 800300e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003012:	bf00      	nop
 8003014:	08003049 	.word	0x08003049
 8003018:	08003069 	.word	0x08003069
 800301c:	08003069 	.word	0x08003069
 8003020:	08003069 	.word	0x08003069
 8003024:	0800304f 	.word	0x0800304f
 8003028:	08003069 	.word	0x08003069
 800302c:	08003069 	.word	0x08003069
 8003030:	08003069 	.word	0x08003069
 8003034:	08003055 	.word	0x08003055
 8003038:	08003069 	.word	0x08003069
 800303c:	08003069 	.word	0x08003069
 8003040:	08003069 	.word	0x08003069
 8003044:	0800305f 	.word	0x0800305f
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <RCC_GetSystemClockFreq+0x80>)
 800304a:	607b      	str	r3, [r7, #4]
      break;
 800304c:	e00f      	b.n	800306e <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800304e:	4b0b      	ldr	r3, [pc, #44]	; (800307c <RCC_GetSystemClockFreq+0x84>)
 8003050:	607b      	str	r3, [r7, #4]
      break;
 8003052:	e00c      	b.n	800306e <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003054:	2008      	movs	r0, #8
 8003056:	f000 f851 	bl	80030fc <RCC_PLL_GetFreqDomain_SYS>
 800305a:	6078      	str	r0, [r7, #4]
      break;
 800305c:	e007      	b.n	800306e <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 800305e:	200c      	movs	r0, #12
 8003060:	f000 f84c 	bl	80030fc <RCC_PLL_GetFreqDomain_SYS>
 8003064:	6078      	str	r0, [r7, #4]
      break;
 8003066:	e002      	b.n	800306e <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003068:	4b03      	ldr	r3, [pc, #12]	; (8003078 <RCC_GetSystemClockFreq+0x80>)
 800306a:	607b      	str	r3, [r7, #4]
      break;
 800306c:	bf00      	nop
  }

  return frequency;
 800306e:	687b      	ldr	r3, [r7, #4]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	00f42400 	.word	0x00f42400
 800307c:	007a1200 	.word	0x007a1200

08003080 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003088:	f7ff ff20 	bl	8002ecc <LL_RCC_GetAHBPrescaler>
 800308c:	4603      	mov	r3, r0
 800308e:	091b      	lsrs	r3, r3, #4
 8003090:	f003 030f 	and.w	r3, r3, #15
 8003094:	4a04      	ldr	r2, [pc, #16]	; (80030a8 <RCC_GetHCLKClockFreq+0x28>)
 8003096:	5cd3      	ldrb	r3, [r2, r3]
 8003098:	461a      	mov	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	40d3      	lsrs	r3, r2
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	08009a78 	.word	0x08009a78

080030ac <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80030b4:	f7ff ff18 	bl	8002ee8 <LL_RCC_GetAPB1Prescaler>
 80030b8:	4603      	mov	r3, r0
 80030ba:	0a9b      	lsrs	r3, r3, #10
 80030bc:	4a04      	ldr	r2, [pc, #16]	; (80030d0 <RCC_GetPCLK1ClockFreq+0x24>)
 80030be:	5cd3      	ldrb	r3, [r2, r3]
 80030c0:	461a      	mov	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	40d3      	lsrs	r3, r2
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	08009a88 	.word	0x08009a88

080030d4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80030dc:	f7ff ff12 	bl	8002f04 <LL_RCC_GetAPB2Prescaler>
 80030e0:	4603      	mov	r3, r0
 80030e2:	0b5b      	lsrs	r3, r3, #13
 80030e4:	4a04      	ldr	r2, [pc, #16]	; (80030f8 <RCC_GetPCLK2ClockFreq+0x24>)
 80030e6:	5cd3      	ldrb	r3, [r2, r3]
 80030e8:	461a      	mov	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	40d3      	lsrs	r3, r2
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	08009a88 	.word	0x08009a88

080030fc <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80030fc:	b590      	push	{r4, r7, lr}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	2300      	movs	r3, #0
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	2300      	movs	r3, #0
 800310e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003110:	f7ff ff06 	bl	8002f20 <LL_RCC_PLL_GetMainSource>
 8003114:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <RCC_PLL_GetFreqDomain_SYS+0x28>
 800311c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003120:	d003      	beq.n	800312a <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8003122:	e005      	b.n	8003130 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003124:	4b1b      	ldr	r3, [pc, #108]	; (8003194 <RCC_PLL_GetFreqDomain_SYS+0x98>)
 8003126:	617b      	str	r3, [r7, #20]
      break;
 8003128:	e005      	b.n	8003136 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800312a:	4b1b      	ldr	r3, [pc, #108]	; (8003198 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 800312c:	617b      	str	r3, [r7, #20]
      break;
 800312e:	e002      	b.n	8003136 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 8003130:	4b18      	ldr	r3, [pc, #96]	; (8003194 <RCC_PLL_GetFreqDomain_SYS+0x98>)
 8003132:	617b      	str	r3, [r7, #20]
      break;
 8003134:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b08      	cmp	r3, #8
 800313a:	d114      	bne.n	8003166 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800313c:	f7ff ff28 	bl	8002f90 <LL_RCC_PLL_GetDivider>
 8003140:	4602      	mov	r2, r0
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	fbb3 f4f2 	udiv	r4, r3, r2
 8003148:	f7ff fef8 	bl	8002f3c <LL_RCC_PLL_GetN>
 800314c:	4603      	mov	r3, r0
 800314e:	fb03 f404 	mul.w	r4, r3, r4
 8003152:	f7ff ff01 	bl	8002f58 <LL_RCC_PLL_GetP>
 8003156:	4603      	mov	r3, r0
 8003158:	0c1b      	lsrs	r3, r3, #16
 800315a:	3301      	adds	r3, #1
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	fbb4 f3f3 	udiv	r3, r4, r3
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	e011      	b.n	800318a <RCC_PLL_GetFreqDomain_SYS+0x8e>
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003166:	f7ff ff13 	bl	8002f90 <LL_RCC_PLL_GetDivider>
 800316a:	4602      	mov	r2, r0
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	fbb3 f4f2 	udiv	r4, r3, r2
 8003172:	f7ff fee3 	bl	8002f3c <LL_RCC_PLL_GetN>
 8003176:	4603      	mov	r3, r0
 8003178:	fb03 f404 	mul.w	r4, r3, r4
 800317c:	f7ff fefa 	bl	8002f74 <LL_RCC_PLL_GetR>
 8003180:	4603      	mov	r3, r0
 8003182:	0f1b      	lsrs	r3, r3, #28
 8003184:	fbb4 f3f3 	udiv	r3, r4, r3
 8003188:	613b      	str	r3, [r7, #16]
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800318a:	693b      	ldr	r3, [r7, #16]
}
 800318c:	4618      	mov	r0, r3
 800318e:	371c      	adds	r7, #28
 8003190:	46bd      	mov	sp, r7
 8003192:	bd90      	pop	{r4, r7, pc}
 8003194:	00f42400 	.word	0x00f42400
 8003198:	007a1200 	.word	0x007a1200

0800319c <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	f043 0201 	orr.w	r2, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	615a      	str	r2, [r3, #20]
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a3d      	ldr	r2, [pc, #244]	; (8003388 <LL_TIM_Init+0x108>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d013      	beq.n	80032c0 <LL_TIM_Init+0x40>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800329e:	d00f      	beq.n	80032c0 <LL_TIM_Init+0x40>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a3a      	ldr	r2, [pc, #232]	; (800338c <LL_TIM_Init+0x10c>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d00b      	beq.n	80032c0 <LL_TIM_Init+0x40>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a39      	ldr	r2, [pc, #228]	; (8003390 <LL_TIM_Init+0x110>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d007      	beq.n	80032c0 <LL_TIM_Init+0x40>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a38      	ldr	r2, [pc, #224]	; (8003394 <LL_TIM_Init+0x114>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d003      	beq.n	80032c0 <LL_TIM_Init+0x40>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a37      	ldr	r2, [pc, #220]	; (8003398 <LL_TIM_Init+0x118>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d106      	bne.n	80032ce <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a2d      	ldr	r2, [pc, #180]	; (8003388 <LL_TIM_Init+0x108>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d02b      	beq.n	800332e <LL_TIM_Init+0xae>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032dc:	d027      	beq.n	800332e <LL_TIM_Init+0xae>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a2a      	ldr	r2, [pc, #168]	; (800338c <LL_TIM_Init+0x10c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d023      	beq.n	800332e <LL_TIM_Init+0xae>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a29      	ldr	r2, [pc, #164]	; (8003390 <LL_TIM_Init+0x110>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d01f      	beq.n	800332e <LL_TIM_Init+0xae>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a28      	ldr	r2, [pc, #160]	; (8003394 <LL_TIM_Init+0x114>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d01b      	beq.n	800332e <LL_TIM_Init+0xae>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a27      	ldr	r2, [pc, #156]	; (8003398 <LL_TIM_Init+0x118>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d017      	beq.n	800332e <LL_TIM_Init+0xae>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a26      	ldr	r2, [pc, #152]	; (800339c <LL_TIM_Init+0x11c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d013      	beq.n	800332e <LL_TIM_Init+0xae>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a25      	ldr	r2, [pc, #148]	; (80033a0 <LL_TIM_Init+0x120>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00f      	beq.n	800332e <LL_TIM_Init+0xae>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a24      	ldr	r2, [pc, #144]	; (80033a4 <LL_TIM_Init+0x124>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00b      	beq.n	800332e <LL_TIM_Init+0xae>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a23      	ldr	r2, [pc, #140]	; (80033a8 <LL_TIM_Init+0x128>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d007      	beq.n	800332e <LL_TIM_Init+0xae>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a22      	ldr	r2, [pc, #136]	; (80033ac <LL_TIM_Init+0x12c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d003      	beq.n	800332e <LL_TIM_Init+0xae>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a21      	ldr	r2, [pc, #132]	; (80033b0 <LL_TIM_Init+0x130>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d106      	bne.n	800333c <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	4313      	orrs	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	4619      	mov	r1, r3
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff ff35 	bl	80031b8 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	881b      	ldrh	r3, [r3, #0]
 8003352:	4619      	mov	r1, r3
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff ff21 	bl	800319c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a0a      	ldr	r2, [pc, #40]	; (8003388 <LL_TIM_Init+0x108>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d003      	beq.n	800336a <LL_TIM_Init+0xea>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a0c      	ldr	r2, [pc, #48]	; (8003398 <LL_TIM_Init+0x118>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d105      	bne.n	8003376 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	7c1b      	ldrb	r3, [r3, #16]
 800336e:	4619      	mov	r1, r3
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7ff ff2f 	bl	80031d4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7ff ff72 	bl	8003260 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40010000 	.word	0x40010000
 800338c:	40000400 	.word	0x40000400
 8003390:	40000800 	.word	0x40000800
 8003394:	40000c00 	.word	0x40000c00
 8003398:	40010400 	.word	0x40010400
 800339c:	40014000 	.word	0x40014000
 80033a0:	40014400 	.word	0x40014400
 80033a4:	40014800 	.word	0x40014800
 80033a8:	40001800 	.word	0x40001800
 80033ac:	40001c00 	.word	0x40001c00
 80033b0:	40002000 	.word	0x40002000

080033b4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b10      	cmp	r3, #16
 80033c8:	d012      	beq.n	80033f0 <LL_TIM_OC_Init+0x3c>
 80033ca:	2b10      	cmp	r3, #16
 80033cc:	d802      	bhi.n	80033d4 <LL_TIM_OC_Init+0x20>
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d007      	beq.n	80033e2 <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80033d2:	e022      	b.n	800341a <LL_TIM_OC_Init+0x66>
  switch (Channel)
 80033d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033d8:	d011      	beq.n	80033fe <LL_TIM_OC_Init+0x4a>
 80033da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033de:	d015      	beq.n	800340c <LL_TIM_OC_Init+0x58>
      break;
 80033e0:	e01b      	b.n	800341a <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 f867 	bl	80034b8 <OC1Config>
 80033ea:	4603      	mov	r3, r0
 80033ec:	75fb      	strb	r3, [r7, #23]
      break;
 80033ee:	e014      	b.n	800341a <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 f8cc 	bl	8003590 <OC2Config>
 80033f8:	4603      	mov	r3, r0
 80033fa:	75fb      	strb	r3, [r7, #23]
      break;
 80033fc:	e00d      	b.n	800341a <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 f935 	bl	8003670 <OC3Config>
 8003406:	4603      	mov	r3, r0
 8003408:	75fb      	strb	r3, [r7, #23]
      break;
 800340a:	e006      	b.n	800341a <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 f99e 	bl	8003750 <OC4Config>
 8003414:	4603      	mov	r3, r0
 8003416:	75fb      	strb	r3, [r7, #23]
      break;
 8003418:	bf00      	nop
  }

  return result;
 800341a:	7dfb      	ldrb	r3, [r7, #23]
}
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	7b12      	ldrb	r2, [r2, #12]
 800343c:	4313      	orrs	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	4313      	orrs	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	4313      	orrs	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4313      	orrs	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	89d2      	ldrh	r2, [r2, #14]
 8003474:	4313      	orrs	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	4313      	orrs	r3, r2
 8003492:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
	...

080034b8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	f023 0201 	bic.w	r2, r3, #1
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f023 0303 	bic.w	r3, r3, #3
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f023 0202 	bic.w	r2, r3, #2
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	4313      	orrs	r3, r2
 8003502:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f023 0201 	bic.w	r2, r3, #1
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	4313      	orrs	r3, r2
 8003510:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a1c      	ldr	r2, [pc, #112]	; (8003588 <OC1Config+0xd0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d003      	beq.n	8003522 <OC1Config+0x6a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a1b      	ldr	r2, [pc, #108]	; (800358c <OC1Config+0xd4>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d11e      	bne.n	8003560 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f023 0208 	bic.w	r2, r3, #8
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4313      	orrs	r3, r2
 8003530:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f023 0204 	bic.w	r2, r3, #4
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4313      	orrs	r3, r2
 8003540:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	4313      	orrs	r3, r2
 800354e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	4619      	mov	r1, r3
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff fe3c 	bl	80031f0 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40010000 	.word	0x40010000
 800358c:	40010400 	.word	0x40010400

08003590 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	f023 0210 	bic.w	r2, r3, #16
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	021b      	lsls	r3, r3, #8
 80035cc:	4313      	orrs	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f023 0220 	bic.w	r2, r3, #32
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	4313      	orrs	r3, r2
 80035de:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f023 0210 	bic.w	r2, r3, #16
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	4313      	orrs	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a1d      	ldr	r2, [pc, #116]	; (8003668 <OC2Config+0xd8>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d003      	beq.n	8003600 <OC2Config+0x70>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a1c      	ldr	r2, [pc, #112]	; (800366c <OC2Config+0xdc>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d11f      	bne.n	8003640 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	019b      	lsls	r3, r3, #6
 800360c:	4313      	orrs	r3, r2
 800360e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	019b      	lsls	r3, r3, #6
 800361c:	4313      	orrs	r3, r2
 800361e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	4313      	orrs	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	4619      	mov	r1, r3
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff fdda 	bl	800320c <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40010000 	.word	0x40010000
 800366c:	40010400 	.word	0x40010400

08003670 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f023 0303 	bic.w	r3, r3, #3
 800369e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	021b      	lsls	r3, r3, #8
 80036ba:	4313      	orrs	r3, r2
 80036bc:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	021b      	lsls	r3, r3, #8
 80036ca:	4313      	orrs	r3, r2
 80036cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a1d      	ldr	r2, [pc, #116]	; (8003748 <OC3Config+0xd8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d003      	beq.n	80036de <OC3Config+0x6e>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a1c      	ldr	r2, [pc, #112]	; (800374c <OC3Config+0xdc>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d11f      	bne.n	800371e <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	029b      	lsls	r3, r3, #10
 80036ea:	4313      	orrs	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	029b      	lsls	r3, r3, #10
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	011b      	lsls	r3, r3, #4
 800370a:	4313      	orrs	r3, r2
 800370c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	015b      	lsls	r3, r3, #5
 800371a:	4313      	orrs	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	4619      	mov	r1, r3
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f7ff fd79 	bl	8003228 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40010000 	.word	0x40010000
 800374c:	40010400 	.word	0x40010400

08003750 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800377e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	021b      	lsls	r3, r3, #8
 800378c:	4313      	orrs	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	031b      	lsls	r3, r3, #12
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	031b      	lsls	r3, r3, #12
 80037ac:	4313      	orrs	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a11      	ldr	r2, [pc, #68]	; (80037f8 <OC4Config+0xa8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d003      	beq.n	80037c0 <OC4Config+0x70>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a10      	ldr	r2, [pc, #64]	; (80037fc <OC4Config+0xac>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d107      	bne.n	80037d0 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	019b      	lsls	r3, r3, #6
 80037cc:	4313      	orrs	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	4619      	mov	r1, r3
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7ff fd2e 	bl	8003244 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40010000 	.word	0x40010000
 80037fc:	40010400 	.word	0x40010400

08003800 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003814:	bf0c      	ite	eq
 8003816:	2301      	moveq	r3, #1
 8003818:	2300      	movne	r3, #0
 800381a:	b2db      	uxtb	r3, r3
}
 800381c:	4618      	mov	r0, r3
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	431a      	orrs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	611a      	str	r2, [r3, #16]
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	615a      	str	r2, [r3, #20]
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003888:	d152      	bne.n	8003930 <LL_USART_SetBaudRate+0xbc>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	009a      	lsls	r2, r3, #2
 8003894:	441a      	add	r2, r3
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	fbb2 f3f3 	udiv	r3, r2, r3
 800389e:	4a4f      	ldr	r2, [pc, #316]	; (80039dc <LL_USART_SetBaudRate+0x168>)
 80038a0:	fba2 2303 	umull	r2, r3, r2, r3
 80038a4:	095b      	lsrs	r3, r3, #5
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	b299      	uxth	r1, r3
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	4613      	mov	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	009a      	lsls	r2, r3, #2
 80038b6:	441a      	add	r2, r3
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80038c0:	4b46      	ldr	r3, [pc, #280]	; (80039dc <LL_USART_SetBaudRate+0x168>)
 80038c2:	fba3 0302 	umull	r0, r3, r3, r2
 80038c6:	095b      	lsrs	r3, r3, #5
 80038c8:	2064      	movs	r0, #100	; 0x64
 80038ca:	fb00 f303 	mul.w	r3, r0, r3
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	3332      	adds	r3, #50	; 0x32
 80038d4:	4a41      	ldr	r2, [pc, #260]	; (80039dc <LL_USART_SetBaudRate+0x168>)
 80038d6:	fba2 2303 	umull	r2, r3, r2, r3
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	b29b      	uxth	r3, r3
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	440b      	add	r3, r1
 80038ea:	b299      	uxth	r1, r3
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	4613      	mov	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	009a      	lsls	r2, r3, #2
 80038f6:	441a      	add	r2, r3
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003900:	4b36      	ldr	r3, [pc, #216]	; (80039dc <LL_USART_SetBaudRate+0x168>)
 8003902:	fba3 0302 	umull	r0, r3, r3, r2
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	2064      	movs	r0, #100	; 0x64
 800390a:	fb00 f303 	mul.w	r3, r0, r3
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	3332      	adds	r3, #50	; 0x32
 8003914:	4a31      	ldr	r2, [pc, #196]	; (80039dc <LL_USART_SetBaudRate+0x168>)
 8003916:	fba2 2303 	umull	r2, r3, r2, r3
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	b29b      	uxth	r3, r3
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	b29b      	uxth	r3, r3
 8003924:	440b      	add	r3, r1
 8003926:	b29b      	uxth	r3, r3
 8003928:	461a      	mov	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 800392e:	e04f      	b.n	80039d0 <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	4613      	mov	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	009a      	lsls	r2, r3, #2
 800393a:	441a      	add	r2, r3
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	fbb2 f3f3 	udiv	r3, r2, r3
 8003944:	4a25      	ldr	r2, [pc, #148]	; (80039dc <LL_USART_SetBaudRate+0x168>)
 8003946:	fba2 2303 	umull	r2, r3, r2, r3
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	b29b      	uxth	r3, r3
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	b299      	uxth	r1, r3
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	4613      	mov	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	009a      	lsls	r2, r3, #2
 800395c:	441a      	add	r2, r3
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	fbb2 f2f3 	udiv	r2, r2, r3
 8003966:	4b1d      	ldr	r3, [pc, #116]	; (80039dc <LL_USART_SetBaudRate+0x168>)
 8003968:	fba3 0302 	umull	r0, r3, r3, r2
 800396c:	095b      	lsrs	r3, r3, #5
 800396e:	2064      	movs	r0, #100	; 0x64
 8003970:	fb00 f303 	mul.w	r3, r0, r3
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	3332      	adds	r3, #50	; 0x32
 800397a:	4a18      	ldr	r2, [pc, #96]	; (80039dc <LL_USART_SetBaudRate+0x168>)
 800397c:	fba2 2303 	umull	r2, r3, r2, r3
 8003980:	095b      	lsrs	r3, r3, #5
 8003982:	b29b      	uxth	r3, r3
 8003984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003988:	b29b      	uxth	r3, r3
 800398a:	440b      	add	r3, r1
 800398c:	b299      	uxth	r1, r3
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	4613      	mov	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	009a      	lsls	r2, r3, #2
 8003998:	441a      	add	r2, r3
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	fbb2 f2f3 	udiv	r2, r2, r3
 80039a2:	4b0e      	ldr	r3, [pc, #56]	; (80039dc <LL_USART_SetBaudRate+0x168>)
 80039a4:	fba3 0302 	umull	r0, r3, r3, r2
 80039a8:	095b      	lsrs	r3, r3, #5
 80039aa:	2064      	movs	r0, #100	; 0x64
 80039ac:	fb00 f303 	mul.w	r3, r0, r3
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	3332      	adds	r3, #50	; 0x32
 80039b6:	4a09      	ldr	r2, [pc, #36]	; (80039dc <LL_USART_SetBaudRate+0x168>)
 80039b8:	fba2 2303 	umull	r2, r3, r2, r3
 80039bc:	095b      	lsrs	r3, r3, #5
 80039be:	b29b      	uxth	r3, r3
 80039c0:	f003 030f 	and.w	r3, r3, #15
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	440b      	add	r3, r1
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	461a      	mov	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	609a      	str	r2, [r3, #8]
}
 80039d0:	bf00      	nop
 80039d2:	3714      	adds	r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	51eb851f 	.word	0x51eb851f

080039e0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80039ee:	2300      	movs	r3, #0
 80039f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff ff04 	bl	8003800 <LL_USART_IsEnabled>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d15e      	bne.n	8003abc <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003a06:	f023 030c 	bic.w	r3, r3, #12
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	6851      	ldr	r1, [r2, #4]
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	68d2      	ldr	r2, [r2, #12]
 8003a12:	4311      	orrs	r1, r2
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	6912      	ldr	r2, [r2, #16]
 8003a18:	4311      	orrs	r1, r2
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	6992      	ldr	r2, [r2, #24]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff fefb 	bl	8003828 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	4619      	mov	r1, r3
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7ff ff08 	bl	800384e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003a3e:	f107 0308 	add.w	r3, r7, #8
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff fab2 	bl	8002fac <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a1f      	ldr	r2, [pc, #124]	; (8003ac8 <LL_USART_Init+0xe8>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d102      	bne.n	8003a56 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	61bb      	str	r3, [r7, #24]
 8003a54:	e021      	b.n	8003a9a <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a1c      	ldr	r2, [pc, #112]	; (8003acc <LL_USART_Init+0xec>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d102      	bne.n	8003a64 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	61bb      	str	r3, [r7, #24]
 8003a62:	e01a      	b.n	8003a9a <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a1a      	ldr	r2, [pc, #104]	; (8003ad0 <LL_USART_Init+0xf0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d102      	bne.n	8003a72 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	61bb      	str	r3, [r7, #24]
 8003a70:	e013      	b.n	8003a9a <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a17      	ldr	r2, [pc, #92]	; (8003ad4 <LL_USART_Init+0xf4>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d102      	bne.n	8003a80 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	61bb      	str	r3, [r7, #24]
 8003a7e:	e00c      	b.n	8003a9a <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a15      	ldr	r2, [pc, #84]	; (8003ad8 <LL_USART_Init+0xf8>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d102      	bne.n	8003a8e <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	61bb      	str	r3, [r7, #24]
 8003a8c:	e005      	b.n	8003a9a <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a12      	ldr	r2, [pc, #72]	; (8003adc <LL_USART_Init+0xfc>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d101      	bne.n	8003a9a <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00d      	beq.n	8003abc <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d009      	beq.n	8003abc <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	699a      	ldr	r2, [r3, #24]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	69b9      	ldr	r1, [r7, #24]
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7ff fedc 	bl	8003874 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003abc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3720      	adds	r7, #32
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40011000 	.word	0x40011000
 8003acc:	40004400 	.word	0x40004400
 8003ad0:	40004800 	.word	0x40004800
 8003ad4:	40011400 	.word	0x40011400
 8003ad8:	40004c00 	.word	0x40004c00
 8003adc:	40005000 	.word	0x40005000

08003ae0 <_ZNSt5arrayIfLj2EE2atEj>:
      constexpr const_reference
      operator[](size_type __n) const noexcept
      { return _AT_Type::_S_ref(_M_elems, __n); }

      _GLIBCXX17_CONSTEXPR reference
      at(size_type __n)
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
      {
	if (__n >= _Nm)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d904      	bls.n	8003afa <_ZNSt5arrayIfLj2EE2atEj+0x1a>
	  std::__throw_out_of_range_fmt(__N("array::at: __n (which is %zu) "
 8003af0:	2202      	movs	r2, #2
 8003af2:	6839      	ldr	r1, [r7, #0]
 8003af4:	4806      	ldr	r0, [pc, #24]	; (8003b10 <_ZNSt5arrayIfLj2EE2atEj+0x30>)
 8003af6:	f003 ff08 	bl	800790a <_ZSt24__throw_out_of_range_fmtPKcz>
					    ">= _Nm (which is %zu)"),
					__n, _Nm);
	return _AT_Type::_S_ref(_M_elems, __n);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6839      	ldr	r1, [r7, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 f808 	bl	8003b14 <_ZNSt14__array_traitsIfLj2EE6_S_refERA2_Kfj>
 8003b04:	4603      	mov	r3, r0
      }
 8003b06:	4618      	mov	r0, r3
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	08009960 	.word	0x08009960

08003b14 <_ZNSt14__array_traitsIfLj2EE6_S_refERA2_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	4413      	add	r3, r2
 8003b26:	4618      	mov	r0, r3
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
	...

08003b34 <_ZN9MotorMath13parkTransformESt5arrayIfLj3EE>:
}


//input [u,v,w]
//output [a,b]
std::array<float, 2> MotorMath::parkTransform (std::array<float, 3> pVector) {
 8003b34:	b580      	push	{r7, lr}
 8003b36:	ed2d 8b02 	vpush	{d8}
 8003b3a:	b08a      	sub	sp, #40	; 0x28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	eef0 6a40 	vmov.f32	s13, s0
 8003b42:	eeb0 7a60 	vmov.f32	s14, s1
 8003b46:	eef0 7a41 	vmov.f32	s15, s2
 8003b4a:	edc7 6a03 	vstr	s13, [r7, #12]
 8003b4e:	ed87 7a04 	vstr	s14, [r7, #16]
 8003b52:	edc7 7a05 	vstr	s15, [r7, #20]
	std::array<float ,2> RtnArr;
	//mIalpha = mIu - (mIv + mIw)/2;
	//mIbeta = (mIv - mIw)* 1.7320508f/2;
	RtnArr.at(0) = pVector.at(0) - ((pVector.at(1) + pVector.at(2))/2) ;
 8003b56:	f107 030c 	add.w	r3, r7, #12
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 fa05 	bl	8003f6c <_ZNSt5arrayIfLj3EE2atEj>
 8003b62:	4603      	mov	r3, r0
 8003b64:	edd3 8a00 	vldr	s17, [r3]
 8003b68:	f107 030c 	add.w	r3, r7, #12
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 f9fc 	bl	8003f6c <_ZNSt5arrayIfLj3EE2atEj>
 8003b74:	4603      	mov	r3, r0
 8003b76:	ed93 8a00 	vldr	s16, [r3]
 8003b7a:	f107 030c 	add.w	r3, r7, #12
 8003b7e:	2102      	movs	r1, #2
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 f9f3 	bl	8003f6c <_ZNSt5arrayIfLj3EE2atEj>
 8003b86:	4603      	mov	r3, r0
 8003b88:	edd3 7a00 	vldr	s15, [r3]
 8003b8c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003b90:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003b94:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8003b98:	f107 0318 	add.w	r3, r7, #24
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff ff9e 	bl	8003ae0 <_ZNSt5arrayIfLj2EE2atEj>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	ee78 7ac8 	vsub.f32	s15, s17, s16
 8003baa:	edc3 7a00 	vstr	s15, [r3]
	RtnArr.at(1) = (pVector.at(1) - pVector.at(2)) * 1.7320508f/2;
 8003bae:	f107 030c 	add.w	r3, r7, #12
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 f9d9 	bl	8003f6c <_ZNSt5arrayIfLj3EE2atEj>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	ed93 8a00 	vldr	s16, [r3]
 8003bc0:	f107 030c 	add.w	r3, r7, #12
 8003bc4:	2102      	movs	r1, #2
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 f9d0 	bl	8003f6c <_ZNSt5arrayIfLj3EE2atEj>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	edd3 7a00 	vldr	s15, [r3]
 8003bd2:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003bd6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003c28 <_ZN9MotorMath13parkTransformESt5arrayIfLj3EE+0xf4>
 8003bda:	ee27 8a87 	vmul.f32	s16, s15, s14
 8003bde:	f107 0318 	add.w	r3, r7, #24
 8003be2:	2101      	movs	r1, #1
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff ff7b 	bl	8003ae0 <_ZNSt5arrayIfLj2EE2atEj>
 8003bea:	4603      	mov	r3, r0
 8003bec:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003bf0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8003bf4:	edc3 7a00 	vstr	s15, [r3]

	return RtnArr;
 8003bf8:	f107 0320 	add.w	r3, r7, #32
 8003bfc:	f107 0218 	add.w	r2, r7, #24
 8003c00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c04:	e883 0003 	stmia.w	r3, {r0, r1}
 8003c08:	6a3a      	ldr	r2, [r7, #32]
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	ee07 2a10 	vmov	s14, r2
 8003c10:	ee07 3a90 	vmov	s15, r3
};
 8003c14:	eeb0 0a47 	vmov.f32	s0, s14
 8003c18:	eef0 0a67 	vmov.f32	s1, s15
 8003c1c:	3728      	adds	r7, #40	; 0x28
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	ecbd 8b02 	vpop	{d8}
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	3fddb3d7 	.word	0x3fddb3d7

08003c2c <_ZN9MotorMath14clarkTransformEfSt5arrayIfLj2EE>:


std::array<float, 2> MotorMath::clarkTransform(fp_rad pRadian, std::array<float, 2> pVector) {
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	ed2d 8b02 	vpush	{d8}
 8003c32:	b08e      	sub	sp, #56	; 0x38
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	ed87 0a05 	vstr	s0, [r7, #20]
 8003c3a:	eeb0 7a60 	vmov.f32	s14, s1
 8003c3e:	eef0 7a41 	vmov.f32	s15, s2
 8003c42:	ed87 7a03 	vstr	s14, [r7, #12]
 8003c46:	edc7 7a04 	vstr	s15, [r7, #16]
	//mId =  mLib.getCosList().at(mArg) * mIalpha + mLib.getSinList().at(mArg) * mIbeta;
	//mIq = -mLib.getSinList().at(mArg) * mIalpha + mLib.getCosList().at(mArg) * mIbeta;
	float sinVal = Trigonometric::sin(pRadian);
 8003c4a:	ed97 0a05 	vldr	s0, [r7, #20]
 8003c4e:	f000 fa00 	bl	8004052 <_ZN13Trigonometric3sinEf>
 8003c52:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	float cosVal = Trigonometric::cos(pRadian);
 8003c56:	ed97 0a05 	vldr	s0, [r7, #20]
 8003c5a:	f000 fa0a 	bl	8004072 <_ZN13Trigonometric3cosEf>
 8003c5e:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
	float Invsin = -1.0f * sinVal;
 8003c62:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003c66:	eef1 7a67 	vneg.f32	s15, s15
 8003c6a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	std::array<float, 2> RtnArr;
	RtnArr.at(0) = cosVal * pVector.at(0) + sinVal * pVector.at(1);
 8003c6e:	f107 030c 	add.w	r3, r7, #12
 8003c72:	2100      	movs	r1, #0
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff ff33 	bl	8003ae0 <_ZNSt5arrayIfLj2EE2atEj>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	ed93 7a00 	vldr	s14, [r3]
 8003c80:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003c84:	ee67 8a27 	vmul.f32	s17, s14, s15
 8003c88:	f107 030c 	add.w	r3, r7, #12
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff ff26 	bl	8003ae0 <_ZNSt5arrayIfLj2EE2atEj>
 8003c94:	4603      	mov	r3, r0
 8003c96:	ed93 7a00 	vldr	s14, [r3]
 8003c9a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003c9e:	ee27 8a27 	vmul.f32	s16, s14, s15
 8003ca2:	f107 031c 	add.w	r3, r7, #28
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff ff19 	bl	8003ae0 <_ZNSt5arrayIfLj2EE2atEj>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	ee78 7a88 	vadd.f32	s15, s17, s16
 8003cb4:	edc3 7a00 	vstr	s15, [r3]
	RtnArr.at(1) = Invsin * pVector.at(0) + cosVal * pVector.at(1);
 8003cb8:	f107 030c 	add.w	r3, r7, #12
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff ff0e 	bl	8003ae0 <_ZNSt5arrayIfLj2EE2atEj>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	ed93 7a00 	vldr	s14, [r3]
 8003cca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003cce:	ee67 8a27 	vmul.f32	s17, s14, s15
 8003cd2:	f107 030c 	add.w	r3, r7, #12
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff ff01 	bl	8003ae0 <_ZNSt5arrayIfLj2EE2atEj>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	ed93 7a00 	vldr	s14, [r3]
 8003ce4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003ce8:	ee27 8a27 	vmul.f32	s16, s14, s15
 8003cec:	f107 031c 	add.w	r3, r7, #28
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7ff fef4 	bl	8003ae0 <_ZNSt5arrayIfLj2EE2atEj>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	ee78 7a88 	vadd.f32	s15, s17, s16
 8003cfe:	edc3 7a00 	vstr	s15, [r3]

	return RtnArr;
 8003d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d06:	f107 021c 	add.w	r2, r7, #28
 8003d0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d0e:	e883 0003 	stmia.w	r3, {r0, r1}
 8003d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d16:	ee07 2a10 	vmov	s14, r2
 8003d1a:	ee07 3a90 	vmov	s15, r3
}
 8003d1e:	eeb0 0a47 	vmov.f32	s0, s14
 8003d22:	eef0 0a67 	vmov.f32	s1, s15
 8003d26:	3738      	adds	r7, #56	; 0x38
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	ecbd 8b02 	vpop	{d8}
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <_ZN9MotorMath17InvclarkTransformEfSt5arrayIfLj2EE>:

std::array<float, 2> MotorMath::InvclarkTransform(fp_rad pRadian, std::array<float, 2> pVector) {
 8003d30:	b580      	push	{r7, lr}
 8003d32:	ed2d 8b02 	vpush	{d8}
 8003d36:	b08e      	sub	sp, #56	; 0x38
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	ed87 0a05 	vstr	s0, [r7, #20]
 8003d3e:	eeb0 7a60 	vmov.f32	s14, s1
 8003d42:	eef0 7a41 	vmov.f32	s15, s2
 8003d46:	ed87 7a03 	vstr	s14, [r7, #12]
 8003d4a:	edc7 7a04 	vstr	s15, [r7, #16]
	//mId =  mLib.getCosList().at(mArg) * mIalpha + mLib.getSinList().at(mArg) * mIbeta;
	//mIq = -mLib.getSinList().at(mArg) * mIalpha + mLib.getCosList().at(mArg) * mIbeta;
	float sinVal = Trigonometric::sin(pRadian);
 8003d4e:	ed97 0a05 	vldr	s0, [r7, #20]
 8003d52:	f000 f97e 	bl	8004052 <_ZN13Trigonometric3sinEf>
 8003d56:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	float cosVal = Trigonometric::cos(pRadian);
 8003d5a:	ed97 0a05 	vldr	s0, [r7, #20]
 8003d5e:	f000 f988 	bl	8004072 <_ZN13Trigonometric3cosEf>
 8003d62:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
	float Invsin = -1.0f * sinVal;
 8003d66:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003d6a:	eef1 7a67 	vneg.f32	s15, s15
 8003d6e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	std::array<float, 2> RtnArr;
	RtnArr.at(0) = cosVal * pVector.at(0) + Invsin * pVector.at(1);
 8003d72:	f107 030c 	add.w	r3, r7, #12
 8003d76:	2100      	movs	r1, #0
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff feb1 	bl	8003ae0 <_ZNSt5arrayIfLj2EE2atEj>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	ed93 7a00 	vldr	s14, [r3]
 8003d84:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003d88:	ee67 8a27 	vmul.f32	s17, s14, s15
 8003d8c:	f107 030c 	add.w	r3, r7, #12
 8003d90:	2101      	movs	r1, #1
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7ff fea4 	bl	8003ae0 <_ZNSt5arrayIfLj2EE2atEj>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	ed93 7a00 	vldr	s14, [r3]
 8003d9e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003da2:	ee27 8a27 	vmul.f32	s16, s14, s15
 8003da6:	f107 031c 	add.w	r3, r7, #28
 8003daa:	2100      	movs	r1, #0
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff fe97 	bl	8003ae0 <_ZNSt5arrayIfLj2EE2atEj>
 8003db2:	4603      	mov	r3, r0
 8003db4:	ee78 7a88 	vadd.f32	s15, s17, s16
 8003db8:	edc3 7a00 	vstr	s15, [r3]
	RtnArr.at(1) = sinVal * pVector.at(0) + cosVal * pVector.at(1);
 8003dbc:	f107 030c 	add.w	r3, r7, #12
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff fe8c 	bl	8003ae0 <_ZNSt5arrayIfLj2EE2atEj>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	ed93 7a00 	vldr	s14, [r3]
 8003dce:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003dd2:	ee67 8a27 	vmul.f32	s17, s14, s15
 8003dd6:	f107 030c 	add.w	r3, r7, #12
 8003dda:	2101      	movs	r1, #1
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff fe7f 	bl	8003ae0 <_ZNSt5arrayIfLj2EE2atEj>
 8003de2:	4603      	mov	r3, r0
 8003de4:	ed93 7a00 	vldr	s14, [r3]
 8003de8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003dec:	ee27 8a27 	vmul.f32	s16, s14, s15
 8003df0:	f107 031c 	add.w	r3, r7, #28
 8003df4:	2101      	movs	r1, #1
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff fe72 	bl	8003ae0 <_ZNSt5arrayIfLj2EE2atEj>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	ee78 7a88 	vadd.f32	s15, s17, s16
 8003e02:	edc3 7a00 	vstr	s15, [r3]

	return RtnArr;
 8003e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e0a:	f107 021c 	add.w	r2, r7, #28
 8003e0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e12:	e883 0003 	stmia.w	r3, {r0, r1}
 8003e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1a:	ee07 2a10 	vmov	s14, r2
 8003e1e:	ee07 3a90 	vmov	s15, r3
}
 8003e22:	eeb0 0a47 	vmov.f32	s0, s14
 8003e26:	eef0 0a67 	vmov.f32	s1, s15
 8003e2a:	3738      	adds	r7, #56	; 0x38
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	ecbd 8b02 	vpop	{d8}
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <_ZN9MotorMath16InvparkTransformESt5arrayIfLj2EE>:

//input [a,b]
//output [u,v,w]
std::array<float, 3> MotorMath::InvparkTransform (std::array<float, 2> pVector) {
 8003e34:	b580      	push	{r7, lr}
 8003e36:	ed2d 8b02 	vpush	{d8}
 8003e3a:	b08c      	sub	sp, #48	; 0x30
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	eeb0 7a40 	vmov.f32	s14, s0
 8003e42:	eef0 7a60 	vmov.f32	s15, s1
 8003e46:	ed87 7a04 	vstr	s14, [r7, #16]
 8003e4a:	edc7 7a05 	vstr	s15, [r7, #20]
	//mVu = 0.75f * mValpha;
	//mVv = -0.75f * mValpha + mValpha / 3 + mVbeta / 1.7320508f;
	//mVw = - mValpha / 3 - mVbeta / 1.7320508f;
	std::array<float ,3> RtnArr;
	RtnArr.at(0) = 0.75f * pVector.at(0);
 8003e4e:	f107 0310 	add.w	r3, r7, #16
 8003e52:	2100      	movs	r1, #0
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff fe43 	bl	8003ae0 <_ZNSt5arrayIfLj2EE2atEj>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	ed93 8a00 	vldr	s16, [r3]
 8003e60:	f107 0318 	add.w	r3, r7, #24
 8003e64:	2100      	movs	r1, #0
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 f880 	bl	8003f6c <_ZNSt5arrayIfLj3EE2atEj>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	eef6 7a08 	vmov.f32	s15, #104	; 0x3f400000  0.750
 8003e72:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003e76:	edc3 7a00 	vstr	s15, [r3]
	RtnArr.at(1) = -0.75f * pVector.at(0) + pVector.at(0) / 3 + pVector.at(1) / 1.7320508f;
 8003e7a:	f107 0310 	add.w	r3, r7, #16
 8003e7e:	2100      	movs	r1, #0
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff fe2d 	bl	8003ae0 <_ZNSt5arrayIfLj2EE2atEj>
 8003e86:	4603      	mov	r3, r0
 8003e88:	edd3 7a00 	vldr	s15, [r3]
 8003e8c:	eebe 7a08 	vmov.f32	s14, #232	; 0xbf400000 -0.750
 8003e90:	ee27 8a87 	vmul.f32	s16, s15, s14
 8003e94:	f107 0310 	add.w	r3, r7, #16
 8003e98:	2100      	movs	r1, #0
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff fe20 	bl	8003ae0 <_ZNSt5arrayIfLj2EE2atEj>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	ed93 7a00 	vldr	s14, [r3]
 8003ea6:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003eaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003eae:	ee78 8a27 	vadd.f32	s17, s16, s15
 8003eb2:	f107 0310 	add.w	r3, r7, #16
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff fe11 	bl	8003ae0 <_ZNSt5arrayIfLj2EE2atEj>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	edd3 7a00 	vldr	s15, [r3]
 8003ec4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003f68 <_ZN9MotorMath16InvparkTransformESt5arrayIfLj2EE+0x134>
 8003ec8:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8003ecc:	f107 0318 	add.w	r3, r7, #24
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 f84a 	bl	8003f6c <_ZNSt5arrayIfLj3EE2atEj>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	ee78 7a88 	vadd.f32	s15, s17, s16
 8003ede:	edc3 7a00 	vstr	s15, [r3]
	RtnArr.at(2) = - pVector.at(0) / 3 - pVector.at(1) / 1.7320508f;
 8003ee2:	f107 0310 	add.w	r3, r7, #16
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff fdf9 	bl	8003ae0 <_ZNSt5arrayIfLj2EE2atEj>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	edd3 7a00 	vldr	s15, [r3]
 8003ef4:	eef1 7a67 	vneg.f32	s15, s15
 8003ef8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003efc:	eec7 8a87 	vdiv.f32	s17, s15, s14
 8003f00:	f107 0310 	add.w	r3, r7, #16
 8003f04:	2101      	movs	r1, #1
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7ff fdea 	bl	8003ae0 <_ZNSt5arrayIfLj2EE2atEj>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	edd3 7a00 	vldr	s15, [r3]
 8003f12:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003f68 <_ZN9MotorMath16InvparkTransformESt5arrayIfLj2EE+0x134>
 8003f16:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8003f1a:	f107 0318 	add.w	r3, r7, #24
 8003f1e:	2102      	movs	r1, #2
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 f823 	bl	8003f6c <_ZNSt5arrayIfLj3EE2atEj>
 8003f26:	4603      	mov	r3, r0
 8003f28:	ee78 7ac8 	vsub.f32	s15, s17, s16
 8003f2c:	edc3 7a00 	vstr	s15, [r3]
	return RtnArr;
 8003f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f34:	f107 0218 	add.w	r2, r7, #24
 8003f38:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003f3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f44:	ee06 1a90 	vmov	s13, r1
 8003f48:	ee07 2a10 	vmov	s14, r2
 8003f4c:	ee07 3a90 	vmov	s15, r3
};
 8003f50:	eeb0 0a66 	vmov.f32	s0, s13
 8003f54:	eef0 0a47 	vmov.f32	s1, s14
 8003f58:	eeb0 1a67 	vmov.f32	s2, s15
 8003f5c:	3730      	adds	r7, #48	; 0x30
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	ecbd 8b02 	vpop	{d8}
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	3fddb3d7 	.word	0x3fddb3d7

08003f6c <_ZNSt5arrayIfLj3EE2atEj>:
      at(size_type __n)
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
	if (__n >= _Nm)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d904      	bls.n	8003f86 <_ZNSt5arrayIfLj3EE2atEj+0x1a>
	  std::__throw_out_of_range_fmt(__N("array::at: __n (which is %zu) "
 8003f7c:	2203      	movs	r2, #3
 8003f7e:	6839      	ldr	r1, [r7, #0]
 8003f80:	4806      	ldr	r0, [pc, #24]	; (8003f9c <_ZNSt5arrayIfLj3EE2atEj+0x30>)
 8003f82:	f003 fcc2 	bl	800790a <_ZSt24__throw_out_of_range_fmtPKcz>
	return _AT_Type::_S_ref(_M_elems, __n);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6839      	ldr	r1, [r7, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 f808 	bl	8003fa0 <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>
 8003f90:	4603      	mov	r3, r0
      }
 8003f92:	4618      	mov	r0, r3
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	08009994 	.word	0x08009994

08003fa0 <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
	...

08003fc0 <_ZN3PIDC1Ev>:
 * OutPut()でFloatを取り出せば速度型のPID制御が簡単にできるはず。
 */

#include "PID.hpp"

PID::PID(){
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	4a04      	ldr	r2, [pc, #16]	; (8003fdc <_ZN3PIDC1Ev+0x1c>)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	601a      	str	r2, [r3, #0]

}
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	080099d0 	.word	0x080099d0

08003fe0 <_ZN3PIDD1Ev>:
	// TODO Auto-generated constructor stub

	mError.fill(0);
}

PID::~PID() {
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	4a04      	ldr	r2, [pc, #16]	; (8003ffc <_ZN3PIDD1Ev+0x1c>)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	080099d0 	.word	0x080099d0

08004000 <_ZN3PIDD0Ev>:
PID::~PID() {
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
}
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f7ff ffe9 	bl	8003fe0 <_ZN3PIDD1Ev>
 800400e:	2128      	movs	r1, #40	; 0x28
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f003 fc73 	bl	80078fc <_ZdlPvj>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4618      	mov	r0, r3
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <_ZN3PID8SetParamEfff>:

void PID::SetParam(float pGain_p, float pGain_i, float pGain_d){
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	ed87 0a02 	vstr	s0, [r7, #8]
 800402c:	edc7 0a01 	vstr	s1, [r7, #4]
 8004030:	ed87 1a00 	vstr	s2, [r7]
	mGain_p = pGain_p;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	615a      	str	r2, [r3, #20]
	mGain_i = pGain_i;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	619a      	str	r2, [r3, #24]
	mGain_d = pGain_d;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	61da      	str	r2, [r3, #28]
}
 8004046:	bf00      	nop
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <_ZN13Trigonometric3sinEf>:

Trigonometric::~Trigonometric() {
	// TODO Auto-generated destructor stub
}

float Trigonometric::sin(float pVal) {
 8004052:	b580      	push	{r7, lr}
 8004054:	b082      	sub	sp, #8
 8004056:	af00      	add	r7, sp, #0
 8004058:	ed87 0a01 	vstr	s0, [r7, #4]
	return arm_sin_f32(pVal);
 800405c:	ed97 0a01 	vldr	s0, [r7, #4]
 8004060:	f003 fbbc 	bl	80077dc <arm_sin_f32>
 8004064:	eef0 7a40 	vmov.f32	s15, s0
}
 8004068:	eeb0 0a67 	vmov.f32	s0, s15
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <_ZN13Trigonometric3cosEf>:

float Trigonometric::cos(float pVal) {
 8004072:	b580      	push	{r7, lr}
 8004074:	b082      	sub	sp, #8
 8004076:	af00      	add	r7, sp, #0
 8004078:	ed87 0a01 	vstr	s0, [r7, #4]
	return arm_cos_f32(pVal);
 800407c:	ed97 0a01 	vldr	s0, [r7, #4]
 8004080:	f003 fbfa 	bl	8007878 <arm_cos_f32>
 8004084:	eef0 7a40 	vmov.f32	s15, s0
}
 8004088:	eeb0 0a67 	vmov.f32	s0, s15
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
	...

08004094 <_ZN9ArgSensorC1Ev>:
 * ABZエンコーダ等の物理エンコーダもここに実装する。
 */

#include "ArgSensor.hpp"

ArgSensor::ArgSensor() {
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	4a0e      	ldr	r2, [pc, #56]	; (80040d8 <_ZN9ArgSensorC1Ev+0x44>)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3318      	adds	r3, #24
 80040a6:	4618      	mov	r0, r3
 80040a8:	f001 fda2 	bl	8005bf0 <_ZN8ObserverC1Ev>
	// TODO Auto-generated constructor stub
	mArg = 0;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f04f 0200 	mov.w	r2, #0
 80040b2:	605a      	str	r2, [r3, #4]
	mImArgcount = 0;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	615a      	str	r2, [r3, #20]
	mArg_delta = 0;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	60da      	str	r2, [r3, #12]
	mFCisON = 0;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	741a      	strb	r2, [r3, #16]
	mIsAccelerating = false;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	745a      	strb	r2, [r3, #17]
}
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4618      	mov	r0, r3
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	080099e0 	.word	0x080099e0

080040dc <_ZN9ArgSensorD1Ev>:

ArgSensor::~ArgSensor() {
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	4a06      	ldr	r2, [pc, #24]	; (8004100 <_ZN9ArgSensorD1Ev+0x24>)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3318      	adds	r3, #24
 80040ee:	4618      	mov	r0, r3
 80040f0:	f001 fd98 	bl	8005c24 <_ZN8ObserverD1Ev>
	// TODO Auto-generated destructor stub
}
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	080099e0 	.word	0x080099e0

08004104 <_ZN9ArgSensorD0Ev>:
ArgSensor::~ArgSensor() {
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
}
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7ff ffe5 	bl	80040dc <_ZN9ArgSensorD1Ev>
 8004112:	f44f 719c 	mov.w	r1, #312	; 0x138
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f003 fbf0 	bl	80078fc <_ZdlPvj>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4618      	mov	r0, r3
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <_ZN9ArgSensor4InitEv>:

void ArgSensor::Init(void) {
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
	mArgOld = 0;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f04f 0200 	mov.w	r2, #0
 8004134:	609a      	str	r2, [r3, #8]
	mArg = 0;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	605a      	str	r2, [r3, #4]
	mArg_delta = 0;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	60da      	str	r2, [r3, #12]
	mFCisON = 0;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	741a      	strb	r2, [r3, #16]
	mIsAccelerating = false;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	745a      	strb	r2, [r3, #17]
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <_ZN9ArgSensor9getArgOldEv>:

float ArgSensor::getArg(void){
	return mArg;
}

float ArgSensor::getArgOld(void){
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
	return mArgOld;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	ee07 3a90 	vmov	s15, r3
}
 800416e:	eeb0 0a67 	vmov.f32	s0, s15
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <_ZN9ArgSensor12getArg_deltaEv>:

float ArgSensor::getArg_delta(void){
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
	return mArg_delta;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	ee07 3a90 	vmov	s15, r3
}
 800418c:	eeb0 0a67 	vmov.f32	s0, s15
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <_ZN9ArgSensor13FC_Start_StopEb>:

void ArgSensor::FC_Start_Stop(bool pIsON){
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	460b      	mov	r3, r1
 80041a4:	70fb      	strb	r3, [r7, #3]
		mFCisON = pIsON;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	78fa      	ldrb	r2, [r7, #3]
 80041aa:	741a      	strb	r2, [r3, #16]
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <_ZN9ArgSensor11ForceComArgEv>:

int ArgSensor::GetArgCount(void) {
	return mImArgcount;
}

void ArgSensor::ForceComArg(void){
 80041b8:	b590      	push	{r4, r7, lr}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
	if(mFCisON){
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	7c1b      	ldrb	r3, [r3, #16]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d060      	beq.n	800428a <_ZN9ArgSensor11ForceComArgEv+0xd2>
		if(mImArgcount < 35000){
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	f648 02b7 	movw	r2, #34999	; 0x88b7
 80041d0:	4293      	cmp	r3, r2
 80041d2:	dc08      	bgt.n	80041e6 <_ZN9ArgSensor11ForceComArgEv+0x2e>
			mImArgcount = mImArgcount + 4;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	1d1a      	adds	r2, r3, #4
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	615a      	str	r2, [r3, #20]
			mIsAccelerating = true;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	745a      	strb	r2, [r3, #17]
 80041e4:	e002      	b.n	80041ec <_ZN9ArgSensor11ForceComArgEv+0x34>
		} else {
			mIsAccelerating = false;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	745a      	strb	r2, [r3, #17]
		}
		float arg_add;
		arg_add = mImArgcount*0.00000125f*M_PI;//進む差分角
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	ee07 3a90 	vmov	s15, r3
 80041f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041f8:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8004360 <_ZN9ArgSensor11ForceComArgEv+0x1a8>
 80041fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004200:	ee17 0a90 	vmov	r0, s15
 8004204:	f7fc f96c 	bl	80004e0 <__aeabi_f2d>
 8004208:	a351      	add	r3, pc, #324	; (adr r3, 8004350 <_ZN9ArgSensor11ForceComArgEv+0x198>)
 800420a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420e:	f7fc f9bf 	bl	8000590 <__aeabi_dmul>
 8004212:	4603      	mov	r3, r0
 8004214:	460c      	mov	r4, r1
 8004216:	4618      	mov	r0, r3
 8004218:	4621      	mov	r1, r4
 800421a:	f7fc fc91 	bl	8000b40 <__aeabi_d2f>
 800421e:	4603      	mov	r3, r0
 8004220:	60bb      	str	r3, [r7, #8]
		mArgOld = mArg;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	609a      	str	r2, [r3, #8]
		mArg = mArg + arg_add + (2*M_PI);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004230:	edd7 7a02 	vldr	s15, [r7, #8]
 8004234:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004238:	ee17 0a90 	vmov	r0, s15
 800423c:	f7fc f950 	bl	80004e0 <__aeabi_f2d>
 8004240:	a345      	add	r3, pc, #276	; (adr r3, 8004358 <_ZN9ArgSensor11ForceComArgEv+0x1a0>)
 8004242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004246:	f7fb ffed 	bl	8000224 <__adddf3>
 800424a:	4603      	mov	r3, r0
 800424c:	460c      	mov	r4, r1
 800424e:	4618      	mov	r0, r3
 8004250:	4621      	mov	r1, r4
 8004252:	f7fc fc75 	bl	8000b40 <__aeabi_d2f>
 8004256:	4602      	mov	r2, r0
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	605a      	str	r2, [r3, #4]
		mArg = fmodl(mArg, (2*M_PI));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	4618      	mov	r0, r3
 8004262:	f7fc f93d 	bl	80004e0 <__aeabi_f2d>
 8004266:	4603      	mov	r3, r0
 8004268:	460c      	mov	r4, r1
 800426a:	ed9f 1b3b 	vldr	d1, [pc, #236]	; 8004358 <_ZN9ArgSensor11ForceComArgEv+0x1a0>
 800426e:	ec44 3b10 	vmov	d0, r3, r4
 8004272:	f003 fb45 	bl	8007900 <fmodl>
 8004276:	ec54 3b10 	vmov	r3, r4, d0
 800427a:	4618      	mov	r0, r3
 800427c:	4621      	mov	r1, r4
 800427e:	f7fc fc5f 	bl	8000b40 <__aeabi_d2f>
 8004282:	4602      	mov	r2, r0
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	605a      	str	r2, [r3, #4]
		arg_add = mImArgcount*0.00000125f*M_PI;
		mArgOld = mArg;
		mArg = mArg + arg_add + (2*M_PI);
		mArg = fmodl(mArg, (2*M_PI));
	}
}
 8004288:	e05d      	b.n	8004346 <_ZN9ArgSensor11ForceComArgEv+0x18e>
		if(mImArgcount > 0){
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	2b00      	cmp	r3, #0
 8004290:	dd08      	ble.n	80042a4 <_ZN9ArgSensor11ForceComArgEv+0xec>
			mImArgcount = mImArgcount - 4;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	1f1a      	subs	r2, r3, #4
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	615a      	str	r2, [r3, #20]
			mIsAccelerating = true;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	745a      	strb	r2, [r3, #17]
 80042a2:	e002      	b.n	80042aa <_ZN9ArgSensor11ForceComArgEv+0xf2>
			mIsAccelerating = false;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	745a      	strb	r2, [r3, #17]
		arg_add = mImArgcount*0.00000125f*M_PI;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042b6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004360 <_ZN9ArgSensor11ForceComArgEv+0x1a8>
 80042ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042be:	ee17 0a90 	vmov	r0, s15
 80042c2:	f7fc f90d 	bl	80004e0 <__aeabi_f2d>
 80042c6:	a322      	add	r3, pc, #136	; (adr r3, 8004350 <_ZN9ArgSensor11ForceComArgEv+0x198>)
 80042c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042cc:	f7fc f960 	bl	8000590 <__aeabi_dmul>
 80042d0:	4603      	mov	r3, r0
 80042d2:	460c      	mov	r4, r1
 80042d4:	4618      	mov	r0, r3
 80042d6:	4621      	mov	r1, r4
 80042d8:	f7fc fc32 	bl	8000b40 <__aeabi_d2f>
 80042dc:	4603      	mov	r3, r0
 80042de:	60fb      	str	r3, [r7, #12]
		mArgOld = mArg;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	609a      	str	r2, [r3, #8]
		mArg = mArg + arg_add + (2*M_PI);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	ed93 7a01 	vldr	s14, [r3, #4]
 80042ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80042f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042f6:	ee17 0a90 	vmov	r0, s15
 80042fa:	f7fc f8f1 	bl	80004e0 <__aeabi_f2d>
 80042fe:	a316      	add	r3, pc, #88	; (adr r3, 8004358 <_ZN9ArgSensor11ForceComArgEv+0x1a0>)
 8004300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004304:	f7fb ff8e 	bl	8000224 <__adddf3>
 8004308:	4603      	mov	r3, r0
 800430a:	460c      	mov	r4, r1
 800430c:	4618      	mov	r0, r3
 800430e:	4621      	mov	r1, r4
 8004310:	f7fc fc16 	bl	8000b40 <__aeabi_d2f>
 8004314:	4602      	mov	r2, r0
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	605a      	str	r2, [r3, #4]
		mArg = fmodl(mArg, (2*M_PI));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	4618      	mov	r0, r3
 8004320:	f7fc f8de 	bl	80004e0 <__aeabi_f2d>
 8004324:	4603      	mov	r3, r0
 8004326:	460c      	mov	r4, r1
 8004328:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 8004358 <_ZN9ArgSensor11ForceComArgEv+0x1a0>
 800432c:	ec44 3b10 	vmov	d0, r3, r4
 8004330:	f003 fae6 	bl	8007900 <fmodl>
 8004334:	ec54 3b10 	vmov	r3, r4, d0
 8004338:	4618      	mov	r0, r3
 800433a:	4621      	mov	r1, r4
 800433c:	f7fc fc00 	bl	8000b40 <__aeabi_d2f>
 8004340:	4602      	mov	r2, r0
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	605a      	str	r2, [r3, #4]
}
 8004346:	bf00      	nop
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	bd90      	pop	{r4, r7, pc}
 800434e:	bf00      	nop
 8004350:	54442d18 	.word	0x54442d18
 8004354:	400921fb 	.word	0x400921fb
 8004358:	54442d18 	.word	0x54442d18
 800435c:	401921fb 	.word	0x401921fb
 8004360:	35a7c5ac 	.word	0x35a7c5ac

08004364 <_ZN9DebugCtrlC1Ev>:
 *      Author: watashi
 */

#include "DebugCtrl.hpp"

DebugCtrl::DebugCtrl() {
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	4a0b      	ldr	r2, [pc, #44]	; (800439c <_ZN9DebugCtrlC1Ev+0x38>)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3304      	adds	r3, #4
 8004376:	4618      	mov	r0, r3
 8004378:	f000 f918 	bl	80045ac <_ZN9DebugInfoC1Ev>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3314      	adds	r3, #20
 8004380:	4618      	mov	r0, r3
 8004382:	f000 f991 	bl	80046a8 <_ZN13DebugInfoTinyC1Ev>
	// TODO Auto-generated constructor stub
	mDebugStatus = 0;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f503 5334 	add.w	r3, r3, #11520	; 0x2d00
 800438c:	3320      	adds	r3, #32
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]
}
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4618      	mov	r0, r3
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	080099f0 	.word	0x080099f0

080043a0 <_ZN9DebugCtrlD1Ev>:

DebugCtrl::~DebugCtrl() {
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	4a08      	ldr	r2, [pc, #32]	; (80043cc <_ZN9DebugCtrlD1Ev+0x2c>)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3314      	adds	r3, #20
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 f98c 	bl	80046d0 <_ZN13DebugInfoTinyD1Ev>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3304      	adds	r3, #4
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 f909 	bl	80045d4 <_ZN9DebugInfoD1Ev>
	// TODO Auto-generated destructor stub
}
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4618      	mov	r0, r3
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	080099f0 	.word	0x080099f0

080043d0 <_ZN9DebugCtrlD0Ev>:
DebugCtrl::~DebugCtrl() {
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
}
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7ff ffe1 	bl	80043a0 <_ZN9DebugCtrlD1Ev>
 80043de:	f642 5124 	movw	r1, #11556	; 0x2d24
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f003 fa8a 	bl	80078fc <_ZdlPvj>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80043f2:	b5b0      	push	{r4, r5, r7, lr}
 80043f4:	b082      	sub	sp, #8
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681c      	ldr	r4, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4618      	mov	r0, r3
 8004406:	f000 f835 	bl	8004474 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>
 800440a:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800440c:	461a      	mov	r2, r3
 800440e:	4629      	mov	r1, r5
 8004410:	4620      	mov	r0, r4
 8004412:	f000 f83a 	bl	800448a <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataES1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4618      	mov	r0, r3
 800441a:	f000 f811 	bl	8004440 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4618      	mov	r0, r3
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bdb0      	pop	{r4, r5, r7, pc}

08004428 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f838 	bl	80044a6 <_ZNSaIN9DebugInfo13SendMotorDataEED1Ev>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4618      	mov	r0, r3
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6819      	ldr	r1, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8004450:	461a      	mov	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	119b      	asrs	r3, r3, #6
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800445a:	461a      	mov	r2, r3
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f82e 	bl	80044be <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff ffdf 	bl	8004428 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implD1Ev>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4618      	mov	r0, r3
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4618      	mov	r0, r3
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataES1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800448a:	b580      	push	{r7, lr}
 800448c:	b084      	sub	sp, #16
 800448e:	af00      	add	r7, sp, #0
 8004490:	60f8      	str	r0, [r7, #12]
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8004496:	68b9      	ldr	r1, [r7, #8]
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 f823 	bl	80044e4 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataEEvT_S3_>
    }
 800449e:	bf00      	nop
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <_ZNSaIN9DebugInfo13SendMotorDataEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b082      	sub	sp, #8
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f825 	bl	80044fe <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEED1Ev>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4618      	mov	r0, r3
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80044be:	b580      	push	{r7, lr}
 80044c0:	b084      	sub	sp, #16
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	607a      	str	r2, [r7, #4]
	if (__p)
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d005      	beq.n	80044dc <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	68b9      	ldr	r1, [r7, #8]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 f81c 	bl	8004514 <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE10deallocateERS2_PS1_j>
      }
 80044dc:	bf00      	nop
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80044ee:	6839      	ldr	r1, [r7, #0]
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f829 	bl	8004548 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_>
    }
 80044f6:	bf00      	nop
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4618      	mov	r0, r3
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	68b9      	ldr	r1, [r7, #8]
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 f827 	bl	8004578 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE10deallocateEPS2_j>
 800452a:	bf00      	nop
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <_ZSt11__addressofIN9DebugInfo13SendMotorDataEEPT_RS2_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004532:	b480      	push	{r7}
 8004534:	b083      	sub	sp, #12
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4618      	mov	r0, r3
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d00a      	beq.n	8004570 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7ff ffe9 	bl	8004532 <_ZSt11__addressofIN9DebugInfo13SendMotorDataEEPT_RS2_>
 8004560:	4603      	mov	r3, r0
 8004562:	4618      	mov	r0, r3
 8004564:	f000 f815 	bl	8004592 <_ZSt8_DestroyIN9DebugInfo13SendMotorDataEEvPT_>
	  for (; __first != __last; ++__first)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3340      	adds	r3, #64	; 0x40
 800456c:	607b      	str	r3, [r7, #4]
 800456e:	e7f0      	b.n	8004552 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_+0xa>
	}
 8004570:	bf00      	nop
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8004584:	68b8      	ldr	r0, [r7, #8]
 8004586:	f003 f9b7 	bl	80078f8 <_ZdlPv>
      }
 800458a:	bf00      	nop
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <_ZSt8_DestroyIN9DebugInfo13SendMotorDataEEvPT_>:
    _Destroy(_Tp* __pointer)
 8004592:	b580      	push	{r7, lr}
 8004594:	b082      	sub	sp, #8
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	4798      	blx	r3
 80045a4:	bf00      	nop
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <_ZN9DebugInfoC1Ev>:

DebugInfo::SendMotorData::~SendMotorData(){
	//destructor
}

DebugInfo::DebugInfo() {
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	4a06      	ldr	r2, [pc, #24]	; (80045d0 <_ZN9DebugInfoC1Ev+0x24>)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	3304      	adds	r3, #4
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 f82c 	bl	800461c <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>
	// TODO Auto-generated constructor stub
}
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4618      	mov	r0, r3
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	08009a00 	.word	0x08009a00

080045d4 <_ZN9DebugInfoD1Ev>:

DebugInfo::~DebugInfo() {
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	4a06      	ldr	r2, [pc, #24]	; (80045f8 <_ZN9DebugInfoD1Ev+0x24>)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	3304      	adds	r3, #4
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff ff03 	bl	80043f2 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>
	// TODO Auto-generated destructor stub
}
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4618      	mov	r0, r3
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	08009a00 	.word	0x08009a00

080045fc <_ZN9DebugInfoD0Ev>:
DebugInfo::~DebugInfo() {
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
}
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff ffe5 	bl	80045d4 <_ZN9DebugInfoD1Ev>
 800460a:	2110      	movs	r1, #16
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f003 f975 	bl	80078fc <_ZdlPvj>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4618      	mov	r0, r3
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>:
      vector()
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4618      	mov	r0, r3
 8004628:	f000 f805 	bl	8004636 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4618      	mov	r0, r3
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>:
      _Vector_base()
 8004636:	b580      	push	{r7, lr}
 8004638:	b082      	sub	sp, #8
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4618      	mov	r0, r3
 8004642:	f000 f805 	bl	8004650 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implC1Ev>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4618      	mov	r0, r3
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f80e 	bl	800467a <_ZNSaIN9DebugInfo13SendMotorDataEEC1Ev>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	605a      	str	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	609a      	str	r2, [r3, #8]
	{ }
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4618      	mov	r0, r3
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <_ZNSaIN9DebugInfo13SendMotorDataEEC1Ev>:
      allocator() throw() { }
 800467a:	b580      	push	{r7, lr}
 800467c:	b082      	sub	sp, #8
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f805 	bl	8004692 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEEC1Ev>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4618      	mov	r0, r3
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4618      	mov	r0, r3
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <_ZN13DebugInfoTinyC1Ev>:
 * 読み出しがVector型であるのは(float型でないのは)データの個数の変化に対応するため。
 *(配列のfor使って調理してください(にっこり))
 */
#include "DebugInfoTiny.hpp"

DebugInfoTiny::DebugInfoTiny() {
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	4a06      	ldr	r2, [pc, #24]	; (80046cc <_ZN13DebugInfoTinyC1Ev+0x24>)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	mCNT = 0;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	605a      	str	r2, [r3, #4]
}
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4618      	mov	r0, r3
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	08009a10 	.word	0x08009a10

080046d0 <_ZN13DebugInfoTinyD1Ev>:

DebugInfoTiny::~DebugInfoTiny() {
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	4a04      	ldr	r2, [pc, #16]	; (80046ec <_ZN13DebugInfoTinyD1Ev+0x1c>)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4618      	mov	r0, r3
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	08009a10 	.word	0x08009a10

080046f0 <_ZN13DebugInfoTinyD0Ev>:
DebugInfoTiny::~DebugInfoTiny() {
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
}
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7ff ffe9 	bl	80046d0 <_ZN13DebugInfoTinyD1Ev>
 80046fe:	f642 5108 	movw	r1, #11528	; 0x2d08
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f003 f8fa 	bl	80078fc <_ZdlPvj>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <LL_ADC_Enable>:
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f043 0201 	orr.w	r2, r3, #1
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	609a      	str	r2, [r3, #8]
}
 8004726:	bf00      	nop
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8004732:	b480      	push	{r7}
 8004734:	b083      	sub	sp, #12
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	609a      	str	r2, [r3, #8]
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8004752:	b480      	push	{r7}
 8004754:	b083      	sub	sp, #12
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475e:	b29b      	uxth	r3, r3
}
 8004760:	4618      	mov	r0, r3
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <LL_ADC_INJ_ReadConversionData12>:
  *         @arg @ref LL_ADC_INJ_RANK_3
  *         @arg @ref LL_ADC_INJ_RANK_4
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_INJ_ReadConversionData12(ADC_TypeDef *ADCx, uint32_t Rank)
{
 800476c:	b490      	push	{r4, r7}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JDRX_REGOFFSET_MASK));
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	333c      	adds	r3, #60	; 0x3c
 800477a:	4619      	mov	r1, r3
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004782:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004786:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	fa92 f2a2 	rbit	r2, r2
 800478e:	60ba      	str	r2, [r7, #8]
  return result;
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	fab2 f282 	clz	r2, r2
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	40d3      	lsrs	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	461c      	mov	r4, r3
  
  return (uint16_t)(READ_BIT(*preg,
 80047a0:	6823      	ldr	r3, [r4, #0]
                             ADC_JDR1_JDATA)
                   );
 80047a2:	b29b      	uxth	r3, r3
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bc90      	pop	{r4, r7}
 80047ac:	4770      	bx	lr

080047ae <LL_ADC_IsActiveFlag_JEOS>:
  * @rmtoll SR       JEOC           LL_ADC_IsActiveFlag_JEOS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_JEOS(ADC_TypeDef *ADCx)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0304 	and.w	r3, r3, #4
 80047be:	2b04      	cmp	r3, #4
 80047c0:	bf0c      	ite	eq
 80047c2:	2301      	moveq	r3, #1
 80047c4:	2300      	movne	r3, #0
 80047c6:	b2db      	uxtb	r3, r3
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <LL_ADC_ClearFlag_JEOS>:
  * @rmtoll SR       JEOC           LL_ADC_ClearFlag_JEOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_JEOS(ADC_TypeDef *ADCx)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f06f 0204 	mvn.w	r2, #4
 80047e2:	601a      	str	r2, [r3, #0]
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <LL_ADC_EnableIT_JEOS>:
  * @rmtoll CR1      JEOCIE         LL_ADC_EnableIT_JEOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_JEOS(ADC_TypeDef *ADCx)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	605a      	str	r2, [r3, #4]
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	619a      	str	r2, [r3, #24]
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <_ZN3PWMC1Ev>:

#include "STM32SystemPack.h"
#include "paramsetting.h"
//#include "stm32f4xx_ll_tim.h"//need

class PWM {
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	605a      	str	r2, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	609a      	str	r2, [r3, #8]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4618      	mov	r0, r3
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
	...

08004850 <_ZN9MotorCtrlC1Ev>:
 *      Author: watashi
 */

#include "MotorCtrl.hpp"

MotorCtrl::MotorCtrl() {
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	4a15      	ldr	r2, [pc, #84]	; (80048b0 <_ZN9MotorCtrlC1Ev+0x60>)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	3304      	adds	r3, #4
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fe66 	bl	8005534 <_ZN9MotorInfoC1Ev>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff ffdc 	bl	800482c <_ZN3PWMC1Ev>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff ffd6 	bl	800482c <_ZN3PWMC1Ev>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff ffd0 	bl	800482c <_ZN3PWMC1Ev>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff ffca 	bl	800482c <_ZN3PWMC1Ev>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff fd60 	bl	8004364 <_ZN9DebugCtrlC1Ev>
	// TODO Auto-generated constructor stub

}
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4618      	mov	r0, r3
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	08009a20 	.word	0x08009a20

080048b4 <_ZN9MotorCtrlD1Ev>:

MotorCtrl::~MotorCtrl() {
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	4a09      	ldr	r2, [pc, #36]	; (80048e4 <_ZN9MotorCtrlD1Ev+0x30>)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7ff fd69 	bl	80043a0 <_ZN9DebugCtrlD1Ev>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	3304      	adds	r3, #4
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 fe5c 	bl	8005590 <_ZN9MotorInfoD1Ev>
	// TODO Auto-generated destructor stub
}
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	08009a20 	.word	0x08009a20

080048e8 <_ZN9MotorCtrlD0Ev>:
MotorCtrl::~MotorCtrl() {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
}
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7ff ffdf 	bl	80048b4 <_ZN9MotorCtrlD1Ev>
 80048f6:	f642 71ac 	movw	r1, #12204	; 0x2fac
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f002 fffe 	bl	80078fc <_ZdlPvj>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4618      	mov	r0, r3
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <_ZN7TimInfoaSERKS_>:
#ifndef TIMINFO_HPP_
#define TIMINFO_HPP_

#include "STM32SystemPack.h"

class TimInfo {
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
 8004912:	6039      	str	r1, [r7, #0]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	605a      	str	r2, [r3, #4]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	609a      	str	r2, [r3, #8]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	68da      	ldr	r2, [r3, #12]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	60da      	str	r2, [r3, #12]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	611a      	str	r2, [r3, #16]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4618      	mov	r0, r3
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <_ZN3PIDaSERKS_>:
#ifndef PID_HPP_
#define PID_HPP_

#include <array>

class PID {
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
 800494a:	6039      	str	r1, [r7, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	3304      	adds	r3, #4
 8004952:	3204      	adds	r2, #4
 8004954:	ca07      	ldmia	r2, {r0, r1, r2}
 8004956:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	691a      	ldr	r2, [r3, #16]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	611a      	str	r2, [r3, #16]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	695a      	ldr	r2, [r3, #20]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	615a      	str	r2, [r3, #20]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	699a      	ldr	r2, [r3, #24]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	619a      	str	r2, [r3, #24]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	69da      	ldr	r2, [r3, #28]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	61da      	str	r2, [r3, #28]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	6a1a      	ldr	r2, [r3, #32]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	621a      	str	r2, [r3, #32]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	625a      	str	r2, [r3, #36]	; 0x24
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4618      	mov	r0, r3
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <_ZN11AdaptVelEstaSERKS_>:
#include "Matrix.hpp"
#include "ZIntegrate.hpp"
#include "Trigonometric.hpp"


class AdaptVelEst {
 8004998:	b4b0      	push	{r4, r5, r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	3304      	adds	r3, #4
 80049a8:	3204      	adds	r2, #4
 80049aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80049ae:	e883 0003 	stmia.w	r3, {r0, r1}
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	330c      	adds	r3, #12
 80049b8:	320c      	adds	r2, #12
 80049ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80049be:	e883 0003 	stmia.w	r3, {r0, r1}
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	695a      	ldr	r2, [r3, #20]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	615a      	str	r2, [r3, #20]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	699a      	ldr	r2, [r3, #24]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	619a      	str	r2, [r3, #24]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	69da      	ldr	r2, [r3, #28]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	61da      	str	r2, [r3, #28]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	6a1a      	ldr	r2, [r3, #32]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	621a      	str	r2, [r3, #32]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	625a      	str	r2, [r3, #36]	; 0x24
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	629a      	str	r2, [r3, #40]	; 0x28
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	631a      	str	r2, [r3, #48]	; 0x30
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	3334      	adds	r3, #52	; 0x34
 8004a08:	3234      	adds	r2, #52	; 0x34
 8004a0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a0e:	e883 0003 	stmia.w	r3, {r0, r1}
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	333c      	adds	r3, #60	; 0x3c
 8004a18:	323c      	adds	r2, #60	; 0x3c
 8004a1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a1e:	e883 0003 	stmia.w	r3, {r0, r1}
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	3344      	adds	r3, #68	; 0x44
 8004a28:	3244      	adds	r2, #68	; 0x44
 8004a2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a2e:	e883 0003 	stmia.w	r3, {r0, r1}
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	334c      	adds	r3, #76	; 0x4c
 8004a38:	324c      	adds	r2, #76	; 0x4c
 8004a3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a3e:	e883 0003 	stmia.w	r3, {r0, r1}
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	3354      	adds	r3, #84	; 0x54
 8004a48:	3254      	adds	r2, #84	; 0x54
 8004a4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a4e:	e883 0003 	stmia.w	r3, {r0, r1}
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	335c      	adds	r3, #92	; 0x5c
 8004a58:	325c      	adds	r2, #92	; 0x5c
 8004a5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a5e:	e883 0003 	stmia.w	r3, {r0, r1}
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	f102 0464 	add.w	r4, r2, #100	; 0x64
 8004a6a:	f103 0564 	add.w	r5, r3, #100	; 0x64
 8004a6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a72:	682b      	ldr	r3, [r5, #0]
 8004a74:	6023      	str	r3, [r4, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	3378      	adds	r3, #120	; 0x78
 8004a7c:	3278      	adds	r2, #120	; 0x78
 8004a7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a82:	e883 0003 	stmia.w	r3, {r0, r1}
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	3380      	adds	r3, #128	; 0x80
 8004a8c:	3280      	adds	r2, #128	; 0x80
 8004a8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a92:	e883 0003 	stmia.w	r3, {r0, r1}
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	3388      	adds	r3, #136	; 0x88
 8004a9c:	3288      	adds	r2, #136	; 0x88
 8004a9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004aa2:	e883 0003 	stmia.w	r3, {r0, r1}
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	683a      	ldr	r2, [r7, #0]
 8004aaa:	3390      	adds	r3, #144	; 0x90
 8004aac:	3290      	adds	r2, #144	; 0x90
 8004aae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ab2:	e883 0003 	stmia.w	r3, {r0, r1}
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	3398      	adds	r3, #152	; 0x98
 8004abc:	3298      	adds	r2, #152	; 0x98
 8004abe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ac2:	e883 0003 	stmia.w	r3, {r0, r1}
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	33a0      	adds	r3, #160	; 0xa0
 8004acc:	32a0      	adds	r2, #160	; 0xa0
 8004ace:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ad2:	e883 0003 	stmia.w	r3, {r0, r1}
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	33a8      	adds	r3, #168	; 0xa8
 8004adc:	32a8      	adds	r2, #168	; 0xa8
 8004ade:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ae2:	e883 0003 	stmia.w	r3, {r0, r1}
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	33b0      	adds	r3, #176	; 0xb0
 8004aec:	32b0      	adds	r2, #176	; 0xb0
 8004aee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004af2:	e883 0003 	stmia.w	r3, {r0, r1}
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	f102 04b8 	add.w	r4, r2, #184	; 0xb8
 8004afe:	f103 05b8 	add.w	r5, r3, #184	; 0xb8
 8004b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b06:	682b      	ldr	r3, [r5, #0]
 8004b08:	6023      	str	r3, [r4, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	33cc      	adds	r3, #204	; 0xcc
 8004b10:	32cc      	adds	r2, #204	; 0xcc
 8004b12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b16:	e883 0003 	stmia.w	r3, {r0, r1}
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	33d4      	adds	r3, #212	; 0xd4
 8004b20:	32d4      	adds	r2, #212	; 0xd4
 8004b22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b26:	e883 0003 	stmia.w	r3, {r0, r1}
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	33e8      	adds	r3, #232	; 0xe8
 8004b54:	32e8      	adds	r2, #232	; 0xe8
 8004b56:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4618      	mov	r0, r3
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bcb0      	pop	{r4, r5, r7}
 8004b7e:	4770      	bx	lr

08004b80 <_ZN6EMFObsaSERKS_>:
 */

#ifndef INC_EMFOBS_HPP_
#define INC_EMFOBS_HPP_

class EMFObs {
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <_ZN8ObserveraSERKS_>:
#define OBSERVER_HPP_

#include "AdaptVelEst.hpp"
#include "EMFObs.hpp"

class Observer {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	1d1a      	adds	r2, r3, #4
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	3304      	adds	r3, #4
 8004baa:	4619      	mov	r1, r3
 8004bac:	4610      	mov	r0, r2
 8004bae:	f7ff fef3 	bl	8004998 <_ZN11AdaptVelEstaSERKS_>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	f7ff ffdd 	bl	8004b80 <_ZN6EMFObsaSERKS_>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <_ZN9ArgSensoraSERKS_>:
#define ARGSENSOR_HPP_

#include "math.h"
#include "Observer.hpp"

class ArgSensor {
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	605a      	str	r2, [r3, #4]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	689a      	ldr	r2, [r3, #8]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	609a      	str	r2, [r3, #8]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	60da      	str	r2, [r3, #12]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	7c1a      	ldrb	r2, [r3, #16]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	741a      	strb	r2, [r3, #16]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	7c5a      	ldrb	r2, [r3, #17]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	745a      	strb	r2, [r3, #17]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	695a      	ldr	r2, [r3, #20]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	615a      	str	r2, [r3, #20]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f103 0218 	add.w	r2, r3, #24
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	3318      	adds	r3, #24
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	f7ff ff94 	bl	8004b98 <_ZN8ObserveraSERKS_>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4618      	mov	r0, r3
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <_ZN9MotorCtrl10InitSystemEv>:

void MotorCtrl::SetPWMch4(PWM pPWM) {
	mPWMch4 = pPWM;
}

void MotorCtrl::InitSystem(void) {
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b082      	sub	sp, #8
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
	//以下CubeMXに頼らない定義たち
	//mainで既に定義されているとうまく動かないかもしれない。注意。
	GPIOInit::Init();
 8004c82:	f002 f89f 	bl	8006dc4 <_ZN8GPIOInit4InitEv>
	USARTInit::Init();
 8004c86:	f002 fd53 	bl	8007730 <_ZN9USARTInit4InitEv>
	ADCInit::Init();
 8004c8a:	f001 fccd 	bl	8006628 <_ZN7ADCInit4InitEv>
	TIMInit::Init();
 8004c8e:	f002 fbd7 	bl	8007440 <_ZN7TIMInit4InitEv>
}
 8004c92:	bf00      	nop
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <_ZN9MotorCtrl7InitPWMEv>:

void MotorCtrl::InitPWM(void) {
 8004c9c:	b590      	push	{r4, r7, lr}
 8004c9e:	b093      	sub	sp, #76	; 0x4c
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
	PWM PWM_Object1; //PWMのHWを叩くClass
 8004ca4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7ff fdbf 	bl	800482c <_ZN3PWMC1Ev>
	PWM PWM_Object2;
 8004cae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7ff fdba 	bl	800482c <_ZN3PWMC1Ev>
	PWM PWM_Object3;
 8004cb8:	f107 0318 	add.w	r3, r7, #24
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7ff fdb5 	bl	800482c <_ZN3PWMC1Ev>
	PWM PWM_Object4;
 8004cc2:	f107 0308 	add.w	r3, r7, #8
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7ff fdb0 	bl	800482c <_ZN3PWMC1Ev>

	//LL_TIM_DisableBRK(TIM1);//こっちは未検証
	//LL_TIM_DisableIT_BRK(TIM1);//効かない

	PWM_Object1.setTIM(TIM1);
 8004ccc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004cd0:	4953      	ldr	r1, [pc, #332]	; (8004e20 <_ZN9MotorCtrl7InitPWMEv+0x184>)
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f002 f937 	bl	8006f46 <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object2.setTIM(TIM1);
 8004cd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004cdc:	4950      	ldr	r1, [pc, #320]	; (8004e20 <_ZN9MotorCtrl7InitPWMEv+0x184>)
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f002 f931 	bl	8006f46 <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object3.setTIM(TIM1);
 8004ce4:	f107 0318 	add.w	r3, r7, #24
 8004ce8:	494d      	ldr	r1, [pc, #308]	; (8004e20 <_ZN9MotorCtrl7InitPWMEv+0x184>)
 8004cea:	4618      	mov	r0, r3
 8004cec:	f002 f92b 	bl	8006f46 <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object4.setTIM(TIM1);
 8004cf0:	f107 0308 	add.w	r3, r7, #8
 8004cf4:	494a      	ldr	r1, [pc, #296]	; (8004e20 <_ZN9MotorCtrl7InitPWMEv+0x184>)
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f002 f925 	bl	8006f46 <_ZN3PWM6setTIMEP11TIM_TypeDef>

	PWM_Object1.setCH(1);
 8004cfc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004d00:	2101      	movs	r1, #1
 8004d02:	4618      	mov	r0, r3
 8004d04:	f002 f92d 	bl	8006f62 <_ZN3PWM5setCHEi>
	PWM_Object2.setCH(2);
 8004d08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d0c:	2102      	movs	r1, #2
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f002 f927 	bl	8006f62 <_ZN3PWM5setCHEi>
	PWM_Object3.setCH(3);
 8004d14:	f107 0318 	add.w	r3, r7, #24
 8004d18:	2103      	movs	r1, #3
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f002 f921 	bl	8006f62 <_ZN3PWM5setCHEi>
	PWM_Object4.setCH(4);
 8004d20:	f107 0308 	add.w	r3, r7, #8
 8004d24:	2104      	movs	r1, #4
 8004d26:	4618      	mov	r0, r3
 8004d28:	f002 f91b 	bl	8006f62 <_ZN3PWM5setCHEi>

	PWM_Object1.fInit(PWM_COUNT);
 8004d2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004d30:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8004d34:	4618      	mov	r0, r3
 8004d36:	f002 f922 	bl	8006f7e <_ZN3PWM5fInitEi>
	PWM_Object2.fInit(PWM_COUNT);
 8004d3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d3e:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8004d42:	4618      	mov	r0, r3
 8004d44:	f002 f91b 	bl	8006f7e <_ZN3PWM5fInitEi>
	PWM_Object3.fInit(PWM_COUNT);
 8004d48:	f107 0318 	add.w	r3, r7, #24
 8004d4c:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8004d50:	4618      	mov	r0, r3
 8004d52:	f002 f914 	bl	8006f7e <_ZN3PWM5fInitEi>
	PWM_Object4.fInit(PWM_COUNT);
 8004d56:	f107 0308 	add.w	r3, r7, #8
 8004d5a:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f002 f90d 	bl	8006f7e <_ZN3PWM5fInitEi>

	PWM_Object1.f2Duty(0);//50%duty
 8004d64:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004d68:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8004e24 <_ZN9MotorCtrl7InitPWMEv+0x188>
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f002 f984 	bl	800707a <_ZN3PWM6f2DutyEf>
	PWM_Object2.f2Duty(0);
 8004d72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d76:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8004e24 <_ZN9MotorCtrl7InitPWMEv+0x188>
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f002 f97d 	bl	800707a <_ZN3PWM6f2DutyEf>
	PWM_Object3.f2Duty(0);
 8004d80:	f107 0318 	add.w	r3, r7, #24
 8004d84:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8004e24 <_ZN9MotorCtrl7InitPWMEv+0x188>
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f002 f976 	bl	800707a <_ZN3PWM6f2DutyEf>
	PWM_Object4.f2Duty(0);
 8004d8e:	f107 0308 	add.w	r3, r7, #8
 8004d92:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8004e24 <_ZN9MotorCtrl7InitPWMEv+0x188>
 8004d96:	4618      	mov	r0, r3
 8004d98:	f002 f96f 	bl	800707a <_ZN3PWM6f2DutyEf>

	LL_GPIO_SetOutputPin(GPIOC, GPIO_PIN_10);
 8004d9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004da0:	4821      	ldr	r0, [pc, #132]	; (8004e28 <_ZN9MotorCtrl7InitPWMEv+0x18c>)
 8004da2:	f7ff fd35 	bl	8004810 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOC, GPIO_PIN_11);
 8004da6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004daa:	481f      	ldr	r0, [pc, #124]	; (8004e28 <_ZN9MotorCtrl7InitPWMEv+0x18c>)
 8004dac:	f7ff fd30 	bl	8004810 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOC, GPIO_PIN_12);
 8004db0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004db4:	481c      	ldr	r0, [pc, #112]	; (8004e28 <_ZN9MotorCtrl7InitPWMEv+0x18c>)
 8004db6:	f7ff fd2b 	bl	8004810 <LL_GPIO_SetOutputPin>

	mPWMch1 = PWM_Object1;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f503 7412 	add.w	r4, r3, #584	; 0x248
 8004dc0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004dc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004dc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mPWMch2 = PWM_Object2;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f503 7416 	add.w	r4, r3, #600	; 0x258
 8004dd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004dd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004dd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mPWMch3 = PWM_Object3;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f503 741a 	add.w	r4, r3, #616	; 0x268
 8004de0:	f107 0318 	add.w	r3, r7, #24
 8004de4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004de6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mPWMch4 = PWM_Object4;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f503 741e 	add.w	r4, r3, #632	; 0x278
 8004df0:	f107 0308 	add.w	r3, r7, #8
 8004df4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004df6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	//ADC Start
    LL_ADC_Enable( ADC1 );
 8004dfa:	480c      	ldr	r0, [pc, #48]	; (8004e2c <_ZN9MotorCtrl7InitPWMEv+0x190>)
 8004dfc:	f7ff fc89 	bl	8004712 <LL_ADC_Enable>
    LL_ADC_Enable( ADC2 );
 8004e00:	480b      	ldr	r0, [pc, #44]	; (8004e30 <_ZN9MotorCtrl7InitPWMEv+0x194>)
 8004e02:	f7ff fc86 	bl	8004712 <LL_ADC_Enable>
    LL_ADC_Enable( ADC3 );
 8004e06:	480b      	ldr	r0, [pc, #44]	; (8004e34 <_ZN9MotorCtrl7InitPWMEv+0x198>)
 8004e08:	f7ff fc83 	bl	8004712 <LL_ADC_Enable>
    /* ADC1 Injected conversions end interrupt enabling */
    LL_ADC_ClearFlag_JEOS( ADC1 );
 8004e0c:	4807      	ldr	r0, [pc, #28]	; (8004e2c <_ZN9MotorCtrl7InitPWMEv+0x190>)
 8004e0e:	f7ff fce1 	bl	80047d4 <LL_ADC_ClearFlag_JEOS>
    LL_ADC_EnableIT_JEOS( ADC1 );
 8004e12:	4806      	ldr	r0, [pc, #24]	; (8004e2c <_ZN9MotorCtrl7InitPWMEv+0x190>)
 8004e14:	f7ff fcec 	bl	80047f0 <LL_ADC_EnableIT_JEOS>
}
 8004e18:	bf00      	nop
 8004e1a:	374c      	adds	r7, #76	; 0x4c
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd90      	pop	{r4, r7, pc}
 8004e20:	40010000 	.word	0x40010000
 8004e24:	00000000 	.word	0x00000000
 8004e28:	40020800 	.word	0x40020800
 8004e2c:	40012000 	.word	0x40012000
 8004e30:	40012100 	.word	0x40012100
 8004e34:	40012200 	.word	0x40012200

08004e38 <_ZN11AdaptVelEstC1ERKS_>:
 8004e38:	b4b0      	push	{r4, r5, r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
 8004e42:	4a79      	ldr	r2, [pc, #484]	; (8005028 <_ZN11AdaptVelEstC1ERKS_+0x1f0>)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	3204      	adds	r2, #4
 8004e50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e54:	e883 0003 	stmia.w	r3, {r0, r1}
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	330c      	adds	r3, #12
 8004e5e:	320c      	adds	r2, #12
 8004e60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e64:	e883 0003 	stmia.w	r3, {r0, r1}
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	695a      	ldr	r2, [r3, #20]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	615a      	str	r2, [r3, #20]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	699a      	ldr	r2, [r3, #24]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	619a      	str	r2, [r3, #24]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	69da      	ldr	r2, [r3, #28]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	61da      	str	r2, [r3, #28]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	6a1a      	ldr	r2, [r3, #32]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	621a      	str	r2, [r3, #32]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	625a      	str	r2, [r3, #36]	; 0x24
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	629a      	str	r2, [r3, #40]	; 0x28
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	631a      	str	r2, [r3, #48]	; 0x30
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	3334      	adds	r3, #52	; 0x34
 8004eae:	3234      	adds	r2, #52	; 0x34
 8004eb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004eb4:	e883 0003 	stmia.w	r3, {r0, r1}
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	333c      	adds	r3, #60	; 0x3c
 8004ebe:	323c      	adds	r2, #60	; 0x3c
 8004ec0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ec4:	e883 0003 	stmia.w	r3, {r0, r1}
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	3344      	adds	r3, #68	; 0x44
 8004ece:	3244      	adds	r2, #68	; 0x44
 8004ed0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ed4:	e883 0003 	stmia.w	r3, {r0, r1}
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	334c      	adds	r3, #76	; 0x4c
 8004ede:	324c      	adds	r2, #76	; 0x4c
 8004ee0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ee4:	e883 0003 	stmia.w	r3, {r0, r1}
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	3354      	adds	r3, #84	; 0x54
 8004eee:	3254      	adds	r2, #84	; 0x54
 8004ef0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ef4:	e883 0003 	stmia.w	r3, {r0, r1}
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	335c      	adds	r3, #92	; 0x5c
 8004efe:	325c      	adds	r2, #92	; 0x5c
 8004f00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f04:	e883 0003 	stmia.w	r3, {r0, r1}
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	f102 0464 	add.w	r4, r2, #100	; 0x64
 8004f10:	f103 0564 	add.w	r5, r3, #100	; 0x64
 8004f14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f18:	682b      	ldr	r3, [r5, #0]
 8004f1a:	6023      	str	r3, [r4, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	3378      	adds	r3, #120	; 0x78
 8004f22:	3278      	adds	r2, #120	; 0x78
 8004f24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f28:	e883 0003 	stmia.w	r3, {r0, r1}
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	3380      	adds	r3, #128	; 0x80
 8004f32:	3280      	adds	r2, #128	; 0x80
 8004f34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f38:	e883 0003 	stmia.w	r3, {r0, r1}
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	3388      	adds	r3, #136	; 0x88
 8004f42:	3288      	adds	r2, #136	; 0x88
 8004f44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f48:	e883 0003 	stmia.w	r3, {r0, r1}
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	3390      	adds	r3, #144	; 0x90
 8004f52:	3290      	adds	r2, #144	; 0x90
 8004f54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f58:	e883 0003 	stmia.w	r3, {r0, r1}
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	683a      	ldr	r2, [r7, #0]
 8004f60:	3398      	adds	r3, #152	; 0x98
 8004f62:	3298      	adds	r2, #152	; 0x98
 8004f64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f68:	e883 0003 	stmia.w	r3, {r0, r1}
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	33a0      	adds	r3, #160	; 0xa0
 8004f72:	32a0      	adds	r2, #160	; 0xa0
 8004f74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f78:	e883 0003 	stmia.w	r3, {r0, r1}
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	33a8      	adds	r3, #168	; 0xa8
 8004f82:	32a8      	adds	r2, #168	; 0xa8
 8004f84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f88:	e883 0003 	stmia.w	r3, {r0, r1}
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	33b0      	adds	r3, #176	; 0xb0
 8004f92:	32b0      	adds	r2, #176	; 0xb0
 8004f94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f98:	e883 0003 	stmia.w	r3, {r0, r1}
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	f102 04b8 	add.w	r4, r2, #184	; 0xb8
 8004fa4:	f103 05b8 	add.w	r5, r3, #184	; 0xb8
 8004fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004faa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fac:	682b      	ldr	r3, [r5, #0]
 8004fae:	6023      	str	r3, [r4, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	33cc      	adds	r3, #204	; 0xcc
 8004fb6:	32cc      	adds	r2, #204	; 0xcc
 8004fb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004fbc:	e883 0003 	stmia.w	r3, {r0, r1}
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	33d4      	adds	r3, #212	; 0xd4
 8004fc6:	32d4      	adds	r2, #212	; 0xd4
 8004fc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004fcc:	e883 0003 	stmia.w	r3, {r0, r1}
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	33e8      	adds	r3, #232	; 0xe8
 8004ffa:	32e8      	adds	r2, #232	; 0xe8
 8004ffc:	ca07      	ldmia	r2, {r0, r1, r2}
 8004ffe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4618      	mov	r0, r3
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	bcb0      	pop	{r4, r5, r7}
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	08009a40 	.word	0x08009a40

0800502c <_ZN6EMFObsC1ERKS_>:
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
 8005036:	4a05      	ldr	r2, [pc, #20]	; (800504c <_ZN6EMFObsC1ERKS_+0x20>)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4618      	mov	r0, r3
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	08009a50 	.word	0x08009a50

08005050 <_ZN8ObserverC1ERKS_>:
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
 800505a:	4a22      	ldr	r2, [pc, #136]	; (80050e4 <_ZN8ObserverC1ERKS_+0x94>)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	1d1a      	adds	r2, r3, #4
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	3304      	adds	r3, #4
 8005068:	4619      	mov	r1, r3
 800506a:	4610      	mov	r0, r2
 800506c:	f7ff fee4 	bl	8004e38 <_ZN11AdaptVelEstC1ERKS_>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800507c:	4619      	mov	r1, r3
 800507e:	4610      	mov	r0, r2
 8005080:	f7ff ffd4 	bl	800502c <_ZN6EMFObsC1ERKS_>
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4618      	mov	r0, r3
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	08009a60 	.word	0x08009a60

080050e8 <_ZN9ArgSensorC1ERKS_>:
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
 80050f2:	4a14      	ldr	r2, [pc, #80]	; (8005144 <_ZN9ArgSensorC1ERKS_+0x5c>)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	605a      	str	r2, [r3, #4]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	609a      	str	r2, [r3, #8]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	60da      	str	r2, [r3, #12]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	7c1a      	ldrb	r2, [r3, #16]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	741a      	strb	r2, [r3, #16]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	7c5a      	ldrb	r2, [r3, #17]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	745a      	strb	r2, [r3, #17]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	695a      	ldr	r2, [r3, #20]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	615a      	str	r2, [r3, #20]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f103 0218 	add.w	r2, r3, #24
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	3318      	adds	r3, #24
 8005132:	4619      	mov	r1, r3
 8005134:	4610      	mov	r0, r2
 8005136:	f7ff ff8b 	bl	8005050 <_ZN8ObserverC1ERKS_>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4618      	mov	r0, r3
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	080099e0 	.word	0x080099e0

08005148 <_ZN7TimInfoC1ERKS_>:
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
 8005152:	4a0d      	ldr	r2, [pc, #52]	; (8005188 <_ZN7TimInfoC1ERKS_+0x40>)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	605a      	str	r2, [r3, #4]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	609a      	str	r2, [r3, #8]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	60da      	str	r2, [r3, #12]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	691a      	ldr	r2, [r3, #16]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	611a      	str	r2, [r3, #16]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4618      	mov	r0, r3
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	08009a70 	.word	0x08009a70

0800518c <_ZN3PIDC1ERKS_>:
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
 8005196:	4a14      	ldr	r2, [pc, #80]	; (80051e8 <_ZN3PIDC1ERKS_+0x5c>)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	3304      	adds	r3, #4
 80051a2:	3204      	adds	r2, #4
 80051a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80051a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	691a      	ldr	r2, [r3, #16]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	611a      	str	r2, [r3, #16]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	695a      	ldr	r2, [r3, #20]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	615a      	str	r2, [r3, #20]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	699a      	ldr	r2, [r3, #24]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	619a      	str	r2, [r3, #24]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	69da      	ldr	r2, [r3, #28]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	61da      	str	r2, [r3, #28]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	6a1a      	ldr	r2, [r3, #32]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	621a      	str	r2, [r3, #32]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	625a      	str	r2, [r3, #36]	; 0x24
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4618      	mov	r0, r3
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	080099d0 	.word	0x080099d0

080051ec <_ZN9MotorCtrl13InitMotorInfoEv>:

void MotorCtrl::InitMotorInfo(void) {
 80051ec:	b590      	push	{r4, r7, lr}
 80051ee:	f5ad 7d47 	sub.w	sp, sp, #796	; 0x31c
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	1d3b      	adds	r3, r7, #4
 80051f6:	6018      	str	r0, [r3, #0]

	{
		ArgSensor sensor; //角度を求める機能を持ったclass
 80051f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7fe ff49 	bl	8004094 <_ZN9ArgSensorC1Ev>
		sensor.Init();
 8005202:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005206:	4618      	mov	r0, r3
 8005208:	f7fe ff8d 	bl	8004126 <_ZN9ArgSensor4InitEv>
		mMotorInfo.setArgSensor(sensor);
 800520c:	1d3b      	adds	r3, r7, #4
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	1d1c      	adds	r4, r3, #4
 8005212:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005216:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800521a:	4611      	mov	r1, r2
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff ff63 	bl	80050e8 <_ZN9ArgSensorC1ERKS_>
 8005222:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005226:	4619      	mov	r1, r3
 8005228:	4620      	mov	r0, r4
 800522a:	f000 f9f0 	bl	800560e <_ZN9MotorInfo12setArgSensorE9ArgSensor>
 800522e:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005232:	4618      	mov	r0, r3
 8005234:	f7fe ff52 	bl	80040dc <_ZN9ArgSensorD1Ev>
		ArgSensor sensor; //角度を求める機能を持ったclass
 8005238:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800523c:	4618      	mov	r0, r3
 800523e:	f7fe ff4d 	bl	80040dc <_ZN9ArgSensorD1Ev>
	}
	{
		TimInfo Tim_Info;//タイマの経過時間測定Class
 8005242:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005246:	4618      	mov	r0, r3
 8005248:	f000 fd24 	bl	8005c94 <_ZN7TimInfoC1Ev>
		Tim_Info.Init(TIM1);
 800524c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005250:	4939      	ldr	r1, [pc, #228]	; (8005338 <_ZN9MotorCtrl13InitMotorInfoEv+0x14c>)
 8005252:	4618      	mov	r0, r3
 8005254:	f000 fd4e 	bl	8005cf4 <_ZN7TimInfo4InitEP11TIM_TypeDef>
		mMotorInfo.setTimInfo(Tim_Info);
 8005258:	1d3b      	adds	r3, r7, #4
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	1d1c      	adds	r4, r3, #4
 800525e:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8005262:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8005266:	4611      	mov	r1, r2
 8005268:	4618      	mov	r0, r3
 800526a:	f7ff ff6d 	bl	8005148 <_ZN7TimInfoC1ERKS_>
 800526e:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8005272:	4619      	mov	r1, r3
 8005274:	4620      	mov	r0, r4
 8005276:	f000 f9da 	bl	800562e <_ZN9MotorInfo10setTimInfoE7TimInfo>
 800527a:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fd18 	bl	8005cb4 <_ZN7TimInfoD1Ev>
		TimInfo Tim_Info;//タイマの経過時間測定Class
 8005284:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005288:	4618      	mov	r0, r3
 800528a:	f000 fd13 	bl	8005cb4 <_ZN7TimInfoD1Ev>
	}
	{//PIDLibの生存時間調整(代入後メモリを解放する)
		PID IqPID;
 800528e:	f107 0308 	add.w	r3, r7, #8
 8005292:	4618      	mov	r0, r3
 8005294:	f7fe fe94 	bl	8003fc0 <_ZN3PIDC1Ev>
		PID IdPID;
 8005298:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800529c:	4618      	mov	r0, r3
 800529e:	f7fe fe8f 	bl	8003fc0 <_ZN3PIDC1Ev>
		IdPID.SetParam(PID_GAIN_ID_P, PID_GAIN_ID_I, PID_GAIN_ID_D);
 80052a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80052a6:	ed9f 1a25 	vldr	s2, [pc, #148]	; 800533c <_ZN9MotorCtrl13InitMotorInfoEv+0x150>
 80052aa:	eddf 0a24 	vldr	s1, [pc, #144]	; 800533c <_ZN9MotorCtrl13InitMotorInfoEv+0x150>
 80052ae:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800533c <_ZN9MotorCtrl13InitMotorInfoEv+0x150>
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fe feb4 	bl	8004020 <_ZN3PID8SetParamEfff>
		IqPID.SetParam(PID_GAIN_IQ_P, PID_GAIN_IQ_I, PID_GAIN_IQ_D);
 80052b8:	f107 0308 	add.w	r3, r7, #8
 80052bc:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 800533c <_ZN9MotorCtrl13InitMotorInfoEv+0x150>
 80052c0:	eddf 0a1e 	vldr	s1, [pc, #120]	; 800533c <_ZN9MotorCtrl13InitMotorInfoEv+0x150>
 80052c4:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800533c <_ZN9MotorCtrl13InitMotorInfoEv+0x150>
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7fe fea9 	bl	8004020 <_ZN3PID8SetParamEfff>
		mMotorInfo.setIdqPIDLib(IdPID, IqPID);
 80052ce:	1d3b      	adds	r3, r7, #4
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	1d1c      	adds	r4, r3, #4
 80052d4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80052d8:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80052dc:	4611      	mov	r1, r2
 80052de:	4618      	mov	r0, r3
 80052e0:	f7ff ff54 	bl	800518c <_ZN3PIDC1ERKS_>
 80052e4:	f107 0208 	add.w	r2, r7, #8
 80052e8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80052ec:	4611      	mov	r1, r2
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff ff4c 	bl	800518c <_ZN3PIDC1ERKS_>
 80052f4:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 80052f8:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80052fc:	4619      	mov	r1, r3
 80052fe:	4620      	mov	r0, r4
 8005300:	f000 f9a4 	bl	800564c <_ZN9MotorInfo12setIdqPIDLibE3PIDS0_>
 8005304:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8005308:	4618      	mov	r0, r3
 800530a:	f7fe fe69 	bl	8003fe0 <_ZN3PIDD1Ev>
 800530e:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8005312:	4618      	mov	r0, r3
 8005314:	f7fe fe64 	bl	8003fe0 <_ZN3PIDD1Ev>
		PID IdPID;
 8005318:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800531c:	4618      	mov	r0, r3
 800531e:	f7fe fe5f 	bl	8003fe0 <_ZN3PIDD1Ev>
		PID IqPID;
 8005322:	f107 0308 	add.w	r3, r7, #8
 8005326:	4618      	mov	r0, r3
 8005328:	f7fe fe5a 	bl	8003fe0 <_ZN3PIDD1Ev>
		//mMotorInfo.setIganmadeltaPIDLib(IganmaPID, IdeltaPID);
	}
}
 800532c:	bf00      	nop
 800532e:	f507 7747 	add.w	r7, r7, #796	; 0x31c
 8005332:	46bd      	mov	sp, r7
 8005334:	bd90      	pop	{r4, r7, pc}
 8005336:	bf00      	nop
 8005338:	40010000 	.word	0x40010000
 800533c:	3dcccccd 	.word	0x3dcccccd

08005340 <_ZN9MotorCtrl12HighFreqTaskEv>:

void MotorCtrl::HighFreqTask(void) {
 8005340:	b580      	push	{r7, lr}
 8005342:	b08c      	sub	sp, #48	; 0x30
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
	if (LL_ADC_IsActiveFlag_JEOS(ADC1) == 1)
 8005348:	4848      	ldr	r0, [pc, #288]	; (800546c <_ZN9MotorCtrl12HighFreqTaskEv+0x12c>)
 800534a:	f7ff fa30 	bl	80047ae <LL_ADC_IsActiveFlag_JEOS>
 800534e:	4603      	mov	r3, r0
 8005350:	2b01      	cmp	r3, #1
 8005352:	bf0c      	ite	eq
 8005354:	2301      	moveq	r3, #1
 8005356:	2300      	movne	r3, #0
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 8081 	beq.w	8005462 <_ZN9MotorCtrl12HighFreqTaskEv+0x122>
	{
		LL_ADC_ClearFlag_JEOS(ADC1);
 8005360:	4842      	ldr	r0, [pc, #264]	; (800546c <_ZN9MotorCtrl12HighFreqTaskEv+0x12c>)
 8005362:	f7ff fa37 	bl	80047d4 <LL_ADC_ClearFlag_JEOS>
		//エンコーダ読み取り
		float Iu,Iv,Iw;
		//増幅率のバイアス考慮してない。あとで計算すること。
		Iu = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_1);
 8005366:	2101      	movs	r1, #1
 8005368:	4840      	ldr	r0, [pc, #256]	; (800546c <_ZN9MotorCtrl12HighFreqTaskEv+0x12c>)
 800536a:	f7ff f9ff 	bl	800476c <LL_ADC_INJ_ReadConversionData12>
 800536e:	4603      	mov	r3, r0
 8005370:	ee07 3a90 	vmov	s15, r3
 8005374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005378:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		Iv = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_2);
 800537c:	f241 1102 	movw	r1, #4354	; 0x1102
 8005380:	483a      	ldr	r0, [pc, #232]	; (800546c <_ZN9MotorCtrl12HighFreqTaskEv+0x12c>)
 8005382:	f7ff f9f3 	bl	800476c <LL_ADC_INJ_ReadConversionData12>
 8005386:	4603      	mov	r3, r0
 8005388:	ee07 3a90 	vmov	s15, r3
 800538c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005390:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		Iw = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_3);
 8005394:	f242 2103 	movw	r1, #8707	; 0x2203
 8005398:	4834      	ldr	r0, [pc, #208]	; (800546c <_ZN9MotorCtrl12HighFreqTaskEv+0x12c>)
 800539a:	f7ff f9e7 	bl	800476c <LL_ADC_INJ_ReadConversionData12>
 800539e:	4603      	mov	r3, r0
 80053a0:	ee07 3a90 	vmov	s15, r3
 80053a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053a8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
//		Iu = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_1)/4095;
//		Iv = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_2)/4095;
//		Iw = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_3)/4095;
		mMotorInfo.setIuvw(Iu, Iv, Iw);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3304      	adds	r3, #4
 80053b0:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 80053b4:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 80053b8:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 f979 	bl	80056b4 <_ZN9MotorInfo7setIuvwEfff>
		//推定誤差計算

		//推定位置計算(センサを叩く)
		//Motor.culcArg();

		mMotorInfo.ForceCommutation();
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	3304      	adds	r3, #4
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 f98d 	bl	80056e6 <_ZN9MotorInfo16ForceCommutationEv>

		//Iuvw -> Idqに変換 (Park,Clark変換)
		mMotorInfo.parkTransform();
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3304      	adds	r3, #4
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 f9ac 	bl	800572e <_ZN9MotorInfo13parkTransformEv>
		mMotorInfo.clarkTransform();
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	3304      	adds	r3, #4
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 f9e2 	bl	80057a4 <_ZN9MotorInfo14clarkTransformEv>

		float Id, Iq;//あとで使う　今は未使用だからエラー吐くはず。
		Id = mMotorInfo.getId();
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3304      	adds	r3, #4
 80053e4:	4618      	mov	r0, r3
 80053e6:	f000 faee 	bl	80059c6 <_ZN9MotorInfo5getIdEv>
 80053ea:	ed87 0a08 	vstr	s0, [r7, #32]
		Iq = mMotorInfo.getIq();
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	3304      	adds	r3, #4
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 faf6 	bl	80059e4 <_ZN9MotorInfo5getIqEv>
 80053f8:	ed87 0a07 	vstr	s0, [r7, #28]

		//指令値入力
		//float Vd_input = 0;
		//float Vq_input = 0.5f;

		float Vganma_input = 0;
 80053fc:	f04f 0300 	mov.w	r3, #0
 8005400:	61bb      	str	r3, [r7, #24]
		float Vdelta_input = 0;
 8005402:	f04f 0300 	mov.w	r3, #0
 8005406:	617b      	str	r3, [r7, #20]

		float Id_error;
		float Iq_error;

		Id_error = 0;
 8005408:	f04f 0300 	mov.w	r3, #0
 800540c:	613b      	str	r3, [r7, #16]
		Iq_error = 0;
 800540e:	f04f 0300 	mov.w	r3, #0
 8005412:	60fb      	str	r3, [r7, #12]
		//Motor.PIDdq_control(Id_error, Iq_error, 0.1);
		//Vd_input = Motor.getVd();
		//Vq_input = Motor.getVq();

		//IO入力?
		LL_ADC_REG_StartConversionSWStart(ADC2);
 8005414:	4816      	ldr	r0, [pc, #88]	; (8005470 <_ZN9MotorCtrl12HighFreqTaskEv+0x130>)
 8005416:	f7ff f98c 	bl	8004732 <LL_ADC_REG_StartConversionSWStart>
		float adc2_input = (float)LL_ADC_REG_ReadConversionData12(ADC2)/4095;
 800541a:	4815      	ldr	r0, [pc, #84]	; (8005470 <_ZN9MotorCtrl12HighFreqTaskEv+0x130>)
 800541c:	f7ff f999 	bl	8004752 <LL_ADC_REG_ReadConversionData12>
 8005420:	4603      	mov	r3, r0
 8005422:	ee07 3a90 	vmov	s15, r3
 8005426:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800542a:	eddf 6a12 	vldr	s13, [pc, #72]	; 8005474 <_ZN9MotorCtrl12HighFreqTaskEv+0x134>
 800542e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005432:	edc7 7a02 	vstr	s15, [r7, #8]
		//Vq_input = 0;
		//Vd_input = adc_speed;//連れ回し運転

		Vganma_input = adc2_input;//連れ回し運転
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	61bb      	str	r3, [r7, #24]
		Vdelta_input = 0;
 800543a:	f04f 0300 	mov.w	r3, #0
 800543e:	617b      	str	r3, [r7, #20]

		mMotorInfo.setVganma(Vganma_input);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	3304      	adds	r3, #4
 8005444:	ed97 0a06 	vldr	s0, [r7, #24]
 8005448:	4618      	mov	r0, r3
 800544a:	f000 f9e4 	bl	8005816 <_ZN9MotorInfo9setVganmaEf>
		mMotorInfo.setVdelta(Vdelta_input);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	3304      	adds	r3, #4
 8005452:	ed97 0a05 	vldr	s0, [r7, #20]
 8005456:	4618      	mov	r0, r3
 8005458:	f000 f9ec 	bl	8005834 <_ZN9MotorInfo9setVdeltaEf>

		//PWM出力
		MotorOutputTask();
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f80b 	bl	8005478 <_ZN9MotorCtrl15MotorOutputTaskEv>
	}
/*	else
 * 	{
 * 			LL_ADC_WriteReg(ADC1,ISR,0);
 * 				}*/
}
 8005462:	bf00      	nop
 8005464:	3730      	adds	r7, #48	; 0x30
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	40012000 	.word	0x40012000
 8005470:	40012100 	.word	0x40012100
 8005474:	457ff000 	.word	0x457ff000

08005478 <_ZN9MotorCtrl15MotorOutputTaskEv>:

void MotorCtrl::MotorOutputTask(void){
 8005478:	b590      	push	{r4, r7, lr}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
	mMotorInfo.invClarkGanmaDelta();
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	3304      	adds	r3, #4
 8005484:	4618      	mov	r0, r3
 8005486:	f000 f9e4 	bl	8005852 <_ZN9MotorInfo18invClarkGanmaDeltaEv>
	mMotorInfo.invClarkTransform();
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	3304      	adds	r3, #4
 800548e:	4618      	mov	r0, r3
 8005490:	f000 fa1e 	bl	80058d0 <_ZN9MotorInfo17invClarkTransformEv>
	mMotorInfo.invParkTransform();
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	3304      	adds	r3, #4
 8005498:	4618      	mov	r0, r3
 800549a:	f000 fa52 	bl	8005942 <_ZN9MotorInfo16invParkTransformEv>

	mPWMch1.f2Duty(mMotorInfo.getVu());
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f503 7412 	add.w	r4, r3, #584	; 0x248
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3304      	adds	r3, #4
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 faaa 	bl	8005a02 <_ZN9MotorInfo5getVuEv>
 80054ae:	eef0 7a40 	vmov.f32	s15, s0
 80054b2:	eeb0 0a67 	vmov.f32	s0, s15
 80054b6:	4620      	mov	r0, r4
 80054b8:	f001 fddf 	bl	800707a <_ZN3PWM6f2DutyEf>
	mPWMch2.f2Duty(mMotorInfo.getVv());
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f503 7416 	add.w	r4, r3, #600	; 0x258
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	3304      	adds	r3, #4
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 faaa 	bl	8005a20 <_ZN9MotorInfo5getVvEv>
 80054cc:	eef0 7a40 	vmov.f32	s15, s0
 80054d0:	eeb0 0a67 	vmov.f32	s0, s15
 80054d4:	4620      	mov	r0, r4
 80054d6:	f001 fdd0 	bl	800707a <_ZN3PWM6f2DutyEf>
	mPWMch3.f2Duty(mMotorInfo.getVw());
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f503 741a 	add.w	r4, r3, #616	; 0x268
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3304      	adds	r3, #4
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 faaa 	bl	8005a3e <_ZN9MotorInfo5getVwEv>
 80054ea:	eef0 7a40 	vmov.f32	s15, s0
 80054ee:	eeb0 0a67 	vmov.f32	s0, s15
 80054f2:	4620      	mov	r0, r4
 80054f4:	f001 fdc1 	bl	800707a <_ZN3PWM6f2DutyEf>
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd90      	pop	{r4, r7, pc}

08005500 <_ZN9MotorCtrl6BtnActEv>:
	}
}



void MotorCtrl::BtnAct(void){//強制転流開始へのトリガ 割り込みから叩くためにここでラッパする
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
	UiCtrl::BtnToggle(); // ON/OFFのトグルスイッチ　BtnActで書き込み、getStateで状態を読む
 8005508:	f000 fc14 	bl	8005d34 <_ZN6UiCtrl9BtnToggleEv>
	if(UiCtrl::getState()){
 800550c:	f000 fc26 	bl	8005d5c <_ZN6UiCtrl8getStateEv>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d005      	beq.n	8005522 <_ZN9MotorCtrl6BtnActEv+0x22>
		mMotorInfo.startForceCommutation();
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	3304      	adds	r3, #4
 800551a:	4618      	mov	r0, r3
 800551c:	f000 f8ac 	bl	8005678 <_ZN9MotorInfo21startForceCommutationEv>
	} else {
		mMotorInfo.stopForceCommutation();
	}
}
 8005520:	e004      	b.n	800552c <_ZN9MotorCtrl6BtnActEv+0x2c>
		mMotorInfo.stopForceCommutation();
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	3304      	adds	r3, #4
 8005526:	4618      	mov	r0, r3
 8005528:	f000 f8b5 	bl	8005696 <_ZN9MotorInfo20stopForceCommutationEv>
}
 800552c:	bf00      	nop
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <_ZN9MotorInfoC1Ev>:

#include "MotorInfo.hpp"

//Init

MotorInfo::MotorInfo() {
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	4a13      	ldr	r2, [pc, #76]	; (800558c <_ZN9MotorInfoC1Ev+0x58>)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	3358      	adds	r3, #88	; 0x58
 8005546:	4618      	mov	r0, r3
 8005548:	f000 fba4 	bl	8005c94 <_ZN7TimInfoC1Ev>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	336c      	adds	r3, #108	; 0x6c
 8005550:	4618      	mov	r0, r3
 8005552:	f7fe fd35 	bl	8003fc0 <_ZN3PIDC1Ev>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	3394      	adds	r3, #148	; 0x94
 800555a:	4618      	mov	r0, r3
 800555c:	f7fe fd30 	bl	8003fc0 <_ZN3PIDC1Ev>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	33bc      	adds	r3, #188	; 0xbc
 8005564:	4618      	mov	r0, r3
 8005566:	f7fe fd2b 	bl	8003fc0 <_ZN3PIDC1Ev>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	33e4      	adds	r3, #228	; 0xe4
 800556e:	4618      	mov	r0, r3
 8005570:	f7fe fd26 	bl	8003fc0 <_ZN3PIDC1Ev>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800557a:	4618      	mov	r0, r3
 800557c:	f7fe fd8a 	bl	8004094 <_ZN9ArgSensorC1Ev>
	// TODO Auto-generated constructor stub

}
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4618      	mov	r0, r3
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	08009a30 	.word	0x08009a30

08005590 <_ZN9MotorInfoD1Ev>:

MotorInfo::~MotorInfo() {
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	4a13      	ldr	r2, [pc, #76]	; (80055e8 <_ZN9MotorInfoD1Ev+0x58>)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	601a      	str	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7fe fd99 	bl	80040dc <_ZN9ArgSensorD1Ev>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	33e4      	adds	r3, #228	; 0xe4
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7fe fd16 	bl	8003fe0 <_ZN3PIDD1Ev>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	33bc      	adds	r3, #188	; 0xbc
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7fe fd11 	bl	8003fe0 <_ZN3PIDD1Ev>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	3394      	adds	r3, #148	; 0x94
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7fe fd0c 	bl	8003fe0 <_ZN3PIDD1Ev>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	336c      	adds	r3, #108	; 0x6c
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7fe fd07 	bl	8003fe0 <_ZN3PIDD1Ev>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	3358      	adds	r3, #88	; 0x58
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 fb6c 	bl	8005cb4 <_ZN7TimInfoD1Ev>
	// TODO Auto-generated destructor stub
}
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4618      	mov	r0, r3
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	08009a30 	.word	0x08009a30

080055ec <_ZN9MotorInfoD0Ev>:
MotorInfo::~MotorInfo() {
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
}
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7ff ffcb 	bl	8005590 <_ZN9MotorInfoD1Ev>
 80055fa:	f44f 7111 	mov.w	r1, #580	; 0x244
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f002 f97c 	bl	80078fc <_ZdlPvj>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4618      	mov	r0, r3
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <_ZN9MotorInfo12setArgSensorE9ArgSensor>:

void MotorInfo::setArgSensor(ArgSensor pSensor){
 800560e:	b580      	push	{r7, lr}
 8005610:	b082      	sub	sp, #8
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
 8005616:	6039      	str	r1, [r7, #0]
	mSensor = pSensor;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800561e:	6839      	ldr	r1, [r7, #0]
 8005620:	4618      	mov	r0, r3
 8005622:	f7ff faff 	bl	8004c24 <_ZN9ArgSensoraSERKS_>
}
 8005626:	bf00      	nop
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <_ZN9MotorInfo10setTimInfoE7TimInfo>:

void MotorInfo::setTimInfo(TimInfo pTimInfo) {
 800562e:	b580      	push	{r7, lr}
 8005630:	b082      	sub	sp, #8
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	6039      	str	r1, [r7, #0]
	mTimInfo = pTimInfo;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	3358      	adds	r3, #88	; 0x58
 800563c:	6839      	ldr	r1, [r7, #0]
 800563e:	4618      	mov	r0, r3
 8005640:	f7ff f963 	bl	800490a <_ZN7TimInfoaSERKS_>
}
 8005644:	bf00      	nop
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <_ZN9MotorInfo12setIdqPIDLibE3PIDS0_>:


void MotorInfo::setIdqPIDLib(PID pdPID, PID pqPID){
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
	mIdPID = pdPID;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	336c      	adds	r3, #108	; 0x6c
 800565c:	68b9      	ldr	r1, [r7, #8]
 800565e:	4618      	mov	r0, r3
 8005660:	f7ff f96f 	bl	8004942 <_ZN3PIDaSERKS_>
	mIqPID = pqPID;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	3394      	adds	r3, #148	; 0x94
 8005668:	6879      	ldr	r1, [r7, #4]
 800566a:	4618      	mov	r0, r3
 800566c:	f7ff f969 	bl	8004942 <_ZN3PIDaSERKS_>
}
 8005670:	bf00      	nop
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <_ZN9MotorInfo21startForceCommutationEv>:
//void MotorInfo::setVu(float pVu):mVu(pVu){};
//void MotorInfo::setVv(float pVv):mVv(pVv){};
//void MotorInfo::setVw(float pVw):mVw(pVw){};

//Start,Stop
void MotorInfo::startForceCommutation(void){
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
	mSensor.FC_Start_Stop(true);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8005686:	2101      	movs	r1, #1
 8005688:	4618      	mov	r0, r3
 800568a:	f7fe fd86 	bl	800419a <_ZN9ArgSensor13FC_Start_StopEb>
}
 800568e:	bf00      	nop
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <_ZN9MotorInfo20stopForceCommutationEv>:

void MotorInfo::stopForceCommutation(void){
 8005696:	b580      	push	{r7, lr}
 8005698:	b082      	sub	sp, #8
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
	mSensor.FC_Start_Stop(false);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80056a4:	2100      	movs	r1, #0
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fe fd77 	bl	800419a <_ZN9ArgSensor13FC_Start_StopEb>
}
 80056ac:	bf00      	nop
 80056ae:	3708      	adds	r7, #8
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <_ZN9MotorInfo7setIuvwEfff>:
//Update

void MotorInfo::setIu(float pIu){mIu=pIu;};
void MotorInfo::setIv(float pIv){mIv=pIv;};
void MotorInfo::setIw(float pIw){mIw=pIw;};
void MotorInfo::setIuvw(float pIu, float pIv, float pIw){
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	ed87 0a02 	vstr	s0, [r7, #8]
 80056c0:	edc7 0a01 	vstr	s1, [r7, #4]
 80056c4:	ed87 1a00 	vstr	s2, [r7]
	mIu = pIu;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	605a      	str	r2, [r3, #4]
	mIv = pIv;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	609a      	str	r2, [r3, #8]
	mIw = pIw;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	60da      	str	r2, [r3, #12]
}
 80056da:	bf00      	nop
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <_ZN9MotorInfo16ForceCommutationEv>:

void MotorInfo::culcArg(void){
}

//要改良
void MotorInfo::ForceCommutation(void){
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b084      	sub	sp, #16
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
	mSensor.ForceComArg();
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7fe fd5f 	bl	80041b8 <_ZN9ArgSensor11ForceComArgEv>
	fp_rad ArgOld = mSensor.getArgOld();
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8005700:	4618      	mov	r0, r3
 8005702:	f7fe fd2c 	bl	800415e <_ZN9ArgSensor9getArgOldEv>
 8005706:	ed87 0a03 	vstr	s0, [r7, #12]
	fp_rad ArgDlt = mSensor.getArg_delta();
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8005710:	4618      	mov	r0, r3
 8005712:	f7fe fd33 	bl	800417c <_ZN9ArgSensor12getArg_deltaEv>
 8005716:	ed87 0a02 	vstr	s0, [r7, #8]
//	int arg_count = mLib.radToSizeCount(ArgOld);
//	int argdelta_count = mLib.radToSizeCount(-1 * ArgDlt);
//	mArg = arg_count;
//	mArg_delta = argdelta_count; //回転方向より符号は反転する
	mArg = ArgOld;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	64da      	str	r2, [r3, #76]	; 0x4c
	mArg_delta = ArgDlt;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	651a      	str	r2, [r3, #80]	; 0x50
//	setRPM();
}
 8005726:	bf00      	nop
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <_ZN9MotorInfo13parkTransformEv>:

void MotorInfo::setRPM(void){
	mRPM = (float)(mSensor.getArg() - mSensor.getArgOld()) / (2*3.14f) * 20 * 1000;//適当なパラメータを入れている
}

void MotorInfo::parkTransform(void){
 800572e:	b580      	push	{r7, lr}
 8005730:	b088      	sub	sp, #32
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
	//	mIalpha = mIu - (mIv + mIw)/2;
	//	mIbeta = (mIv - mIw)* 1.7320508f/2;
	std::array<float, 3> Iuvw = {mIu, mIv, mIw};
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	617b      	str	r3, [r7, #20]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	61bb      	str	r3, [r7, #24]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	61fb      	str	r3, [r7, #28]
	std::array<float, 2> Iab = MotorMath::parkTransform(Iuvw);
 8005748:	edd7 6a05 	vldr	s13, [r7, #20]
 800574c:	ed97 7a06 	vldr	s14, [r7, #24]
 8005750:	edd7 7a07 	vldr	s15, [r7, #28]
 8005754:	eeb0 0a66 	vmov.f32	s0, s13
 8005758:	eef0 0a47 	vmov.f32	s1, s14
 800575c:	eeb0 1a67 	vmov.f32	s2, s15
 8005760:	f7fe f9e8 	bl	8003b34 <_ZN9MotorMath13parkTransformESt5arrayIfLj3EE>
 8005764:	eeb0 7a40 	vmov.f32	s14, s0
 8005768:	eef0 7a60 	vmov.f32	s15, s1
 800576c:	ed87 7a03 	vstr	s14, [r7, #12]
 8005770:	edc7 7a04 	vstr	s15, [r7, #16]

	mIalpha = Iab.at(0);
 8005774:	f107 030c 	add.w	r3, r7, #12
 8005778:	2100      	movs	r1, #0
 800577a:	4618      	mov	r0, r3
 800577c:	f7fe f9b0 	bl	8003ae0 <_ZNSt5arrayIfLj2EE2atEj>
 8005780:	4603      	mov	r3, r0
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	611a      	str	r2, [r3, #16]
	mIbeta = Iab.at(1);
 8005788:	f107 030c 	add.w	r3, r7, #12
 800578c:	2101      	movs	r1, #1
 800578e:	4618      	mov	r0, r3
 8005790:	f7fe f9a6 	bl	8003ae0 <_ZNSt5arrayIfLj2EE2atEj>
 8005794:	4603      	mov	r3, r0
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	615a      	str	r2, [r3, #20]
};
 800579c:	bf00      	nop
 800579e:	3720      	adds	r7, #32
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <_ZN9MotorInfo14clarkTransformEv>:

void MotorInfo::clarkTransform(void){//反時計回り回転
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
//	mId =  mLib.getCosList().at(mArg) * mIalpha + mLib.getSinList().at(mArg) * mIbeta;
//	mIq = -mLib.getSinList().at(mArg) * mIalpha + mLib.getCosList().at(mArg) * mIbeta;
	std::array<float, 2> Iab = {mIalpha, mIbeta};
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	613b      	str	r3, [r7, #16]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	617b      	str	r3, [r7, #20]
	std::array<float, 2> Idq = MotorMath::clarkTransform(mArg, Iab);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80057be:	edd7 6a04 	vldr	s13, [r7, #16]
 80057c2:	ed97 7a05 	vldr	s14, [r7, #20]
 80057c6:	eef0 0a66 	vmov.f32	s1, s13
 80057ca:	eeb0 1a47 	vmov.f32	s2, s14
 80057ce:	eeb0 0a67 	vmov.f32	s0, s15
 80057d2:	f7fe fa2b 	bl	8003c2c <_ZN9MotorMath14clarkTransformEfSt5arrayIfLj2EE>
 80057d6:	eeb0 7a40 	vmov.f32	s14, s0
 80057da:	eef0 7a60 	vmov.f32	s15, s1
 80057de:	ed87 7a02 	vstr	s14, [r7, #8]
 80057e2:	edc7 7a03 	vstr	s15, [r7, #12]
	mId = Idq.at(0);
 80057e6:	f107 0308 	add.w	r3, r7, #8
 80057ea:	2100      	movs	r1, #0
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7fe f977 	bl	8003ae0 <_ZNSt5arrayIfLj2EE2atEj>
 80057f2:	4603      	mov	r3, r0
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	619a      	str	r2, [r3, #24]
	mIq = Idq.at(1);
 80057fa:	f107 0308 	add.w	r3, r7, #8
 80057fe:	2101      	movs	r1, #1
 8005800:	4618      	mov	r0, r3
 8005802:	f7fe f96d 	bl	8003ae0 <_ZNSt5arrayIfLj2EE2atEj>
 8005806:	4603      	mov	r3, r0
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	61da      	str	r2, [r3, #28]
};
 800580e:	bf00      	nop
 8005810:	3718      	adds	r7, #24
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <_ZN9MotorInfo9setVganmaEf>:
	mVdelta = mVdelta + mIdeltaPID.OutPut();
}

void MotorInfo::setVd(float pVd){mVd = pVd;}
void MotorInfo::setVq(float pVq){mVq = pVq;}
void MotorInfo::setVganma(float pVganma){mVganma = pVganma;}
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	ed87 0a00 	vstr	s0, [r7]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	645a      	str	r2, [r3, #68]	; 0x44
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <_ZN9MotorInfo9setVdeltaEf>:
void MotorInfo::setVdelta(float pVdelta){mVdelta = pVdelta;}
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	ed87 0a00 	vstr	s0, [r7]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	649a      	str	r2, [r3, #72]	; 0x48
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <_ZN9MotorInfo18invClarkGanmaDeltaEv>:

void MotorInfo::invClarkGanmaDelta(void){
 8005852:	b580      	push	{r7, lr}
 8005854:	b088      	sub	sp, #32
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]

//	mVd =  mLib.getCosList().at(mArg) * mVganma + mLib.getSinList().at(mArg) * mVdelta;
//	mVq = -mLib.getSinList().at(mArg) * mVganma + mLib.getCosList().at(mArg) * mVdelta;
	std::array<float, 2> Vganmadelta = {mVganma, mVdelta};
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800585e:	613b      	str	r3, [r7, #16]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005864:	617b      	str	r3, [r7, #20]
	fp_rad Argdelta = mArg_delta;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800586a:	61fb      	str	r3, [r7, #28]
	fp_rad InvArgDelta = -1.0f * Argdelta;
 800586c:	edd7 7a07 	vldr	s15, [r7, #28]
 8005870:	eef1 7a67 	vneg.f32	s15, s15
 8005874:	edc7 7a06 	vstr	s15, [r7, #24]
	std::array<float, 2> Vdq = MotorMath::InvclarkTransform(InvArgDelta, Vganmadelta);
 8005878:	ed97 7a04 	vldr	s14, [r7, #16]
 800587c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005880:	eef0 0a47 	vmov.f32	s1, s14
 8005884:	eeb0 1a67 	vmov.f32	s2, s15
 8005888:	ed97 0a06 	vldr	s0, [r7, #24]
 800588c:	f7fe fa50 	bl	8003d30 <_ZN9MotorMath17InvclarkTransformEfSt5arrayIfLj2EE>
 8005890:	eeb0 7a40 	vmov.f32	s14, s0
 8005894:	eef0 7a60 	vmov.f32	s15, s1
 8005898:	ed87 7a02 	vstr	s14, [r7, #8]
 800589c:	edc7 7a03 	vstr	s15, [r7, #12]
	mVd = Vdq.at(0);
 80058a0:	f107 0308 	add.w	r3, r7, #8
 80058a4:	2100      	movs	r1, #0
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fe f91a 	bl	8003ae0 <_ZNSt5arrayIfLj2EE2atEj>
 80058ac:	4603      	mov	r3, r0
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	63da      	str	r2, [r3, #60]	; 0x3c
	mVq = Vdq.at(1);
 80058b4:	f107 0308 	add.w	r3, r7, #8
 80058b8:	2101      	movs	r1, #1
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fe f910 	bl	8003ae0 <_ZNSt5arrayIfLj2EE2atEj>
 80058c0:	4603      	mov	r3, r0
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80058c8:	bf00      	nop
 80058ca:	3720      	adds	r7, #32
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <_ZN9MotorInfo17invClarkTransformEv>:

void MotorInfo::invClarkTransform(void){
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
//	mValpha = mLib.getCosList().at(mArg_delta) * mVd - mLib.getSinList().at(mArg_delta) * mVq;
//	mVbeta  = mLib.getSinList().at(mArg_delta) * mVd + mLib.getCosList().at(mArg_delta) * mVq;
	std::array<float, 2> Vdq= {mVd, mVq};
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058dc:	613b      	str	r3, [r7, #16]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	617b      	str	r3, [r7, #20]
	std::array<float, 2> Vab = MotorMath::InvclarkTransform(mArg, Vdq);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80058ea:	edd7 6a04 	vldr	s13, [r7, #16]
 80058ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80058f2:	eef0 0a66 	vmov.f32	s1, s13
 80058f6:	eeb0 1a47 	vmov.f32	s2, s14
 80058fa:	eeb0 0a67 	vmov.f32	s0, s15
 80058fe:	f7fe fa17 	bl	8003d30 <_ZN9MotorMath17InvclarkTransformEfSt5arrayIfLj2EE>
 8005902:	eeb0 7a40 	vmov.f32	s14, s0
 8005906:	eef0 7a60 	vmov.f32	s15, s1
 800590a:	ed87 7a02 	vstr	s14, [r7, #8]
 800590e:	edc7 7a03 	vstr	s15, [r7, #12]
	mValpha = Vab.at(0);
 8005912:	f107 0308 	add.w	r3, r7, #8
 8005916:	2100      	movs	r1, #0
 8005918:	4618      	mov	r0, r3
 800591a:	f7fe f8e1 	bl	8003ae0 <_ZNSt5arrayIfLj2EE2atEj>
 800591e:	4603      	mov	r3, r0
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	635a      	str	r2, [r3, #52]	; 0x34
	mVbeta = Vab.at(1);
 8005926:	f107 0308 	add.w	r3, r7, #8
 800592a:	2101      	movs	r1, #1
 800592c:	4618      	mov	r0, r3
 800592e:	f7fe f8d7 	bl	8003ae0 <_ZNSt5arrayIfLj2EE2atEj>
 8005932:	4603      	mov	r3, r0
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	639a      	str	r2, [r3, #56]	; 0x38
};
 800593a:	bf00      	nop
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <_ZN9MotorInfo16invParkTransformEv>:

void MotorInfo::invParkTransform(void){
 8005942:	b580      	push	{r7, lr}
 8005944:	b088      	sub	sp, #32
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
//	mVu = 0.75f * mValpha;
//	mVv = -0.75f * mValpha + mValpha / 3 + mVbeta / 1.7320508f;
//	mVw = - mValpha / 3 - mVbeta / 1.7320508f;
	std::array<float, 3> Vuvw = MotorMath::InvparkTransform({mValpha, mVbeta});
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800594e:	61bb      	str	r3, [r7, #24]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005954:	61fb      	str	r3, [r7, #28]
 8005956:	ed97 7a06 	vldr	s14, [r7, #24]
 800595a:	edd7 7a07 	vldr	s15, [r7, #28]
 800595e:	eeb0 0a47 	vmov.f32	s0, s14
 8005962:	eef0 0a67 	vmov.f32	s1, s15
 8005966:	f7fe fa65 	bl	8003e34 <_ZN9MotorMath16InvparkTransformESt5arrayIfLj2EE>
 800596a:	eef0 6a40 	vmov.f32	s13, s0
 800596e:	eeb0 7a60 	vmov.f32	s14, s1
 8005972:	eef0 7a41 	vmov.f32	s15, s2
 8005976:	edc7 6a03 	vstr	s13, [r7, #12]
 800597a:	ed87 7a04 	vstr	s14, [r7, #16]
 800597e:	edc7 7a05 	vstr	s15, [r7, #20]
	mVu = Vuvw.at(0);
 8005982:	f107 030c 	add.w	r3, r7, #12
 8005986:	2100      	movs	r1, #0
 8005988:	4618      	mov	r0, r3
 800598a:	f7fe faef 	bl	8003f6c <_ZNSt5arrayIfLj3EE2atEj>
 800598e:	4603      	mov	r3, r0
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	629a      	str	r2, [r3, #40]	; 0x28
	mVv = Vuvw.at(1);
 8005996:	f107 030c 	add.w	r3, r7, #12
 800599a:	2101      	movs	r1, #1
 800599c:	4618      	mov	r0, r3
 800599e:	f7fe fae5 	bl	8003f6c <_ZNSt5arrayIfLj3EE2atEj>
 80059a2:	4603      	mov	r3, r0
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	62da      	str	r2, [r3, #44]	; 0x2c
	mVw = Vuvw.at(2);
 80059aa:	f107 030c 	add.w	r3, r7, #12
 80059ae:	2102      	movs	r1, #2
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7fe fadb 	bl	8003f6c <_ZNSt5arrayIfLj3EE2atEj>
 80059b6:	4603      	mov	r3, r0
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	631a      	str	r2, [r3, #48]	; 0x30
//	Iu + Iv - Iw = -2*Iw;
//	Ialpha * 2/3 + Ibeta * 2/sqrt(3) = -2 Iw;
//
//
//	Iv = -Iu - Iw;
};
 80059be:	bf00      	nop
 80059c0:	3720      	adds	r7, #32
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <_ZN9MotorInfo5getIdEv>:

float MotorInfo::getIganma(void){return mIganma;};
float MotorInfo::getIdelta(void){return mIdelta;};

float MotorInfo::getId(void){return mId;};
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	ee07 3a90 	vmov	s15, r3
 80059d6:	eeb0 0a67 	vmov.f32	s0, s15
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <_ZN9MotorInfo5getIqEv>:
float MotorInfo::getIq(void){return mIq;};
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	69db      	ldr	r3, [r3, #28]
 80059f0:	ee07 3a90 	vmov	s15, r3
 80059f4:	eeb0 0a67 	vmov.f32	s0, s15
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <_ZN9MotorInfo5getVuEv>:
float MotorInfo::getVq(void){return mVq;};

float MotorInfo::getValpha(void){return mValpha;};
float MotorInfo::getVbeta(void){return mVbeta;};

float MotorInfo::getVu(void){return mVu;};
 8005a02:	b480      	push	{r7}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0e:	ee07 3a90 	vmov	s15, r3
 8005a12:	eeb0 0a67 	vmov.f32	s0, s15
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <_ZN9MotorInfo5getVvEv>:
float MotorInfo::getVv(void){return mVv;};
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2c:	ee07 3a90 	vmov	s15, r3
 8005a30:	eeb0 0a67 	vmov.f32	s0, s15
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <_ZN9MotorInfo5getVwEv>:
float MotorInfo::getVw(void){return mVw;};
 8005a3e:	b480      	push	{r7}
 8005a40:	b083      	sub	sp, #12
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4a:	ee07 3a90 	vmov	s15, r3
 8005a4e:	eeb0 0a67 	vmov.f32	s0, s15
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <_ZN11AdaptVelEstC1Ev>:
 *      Author: watashi
 */

#include <AdaptVelEst.hpp>

AdaptVelEst::AdaptVelEst() {
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	4a39      	ldr	r2, [pc, #228]	; (8005b4c <_ZN11AdaptVelEstC1Ev+0xf0>)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	//オブジェクト生成時に必ず0埋めすること.
	mBufVec1 = {0};
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	3334      	adds	r3, #52	; 0x34
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	605a      	str	r2, [r3, #4]
	mBufVec2 = {0};
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	333c      	adds	r3, #60	; 0x3c
 8005a78:	2200      	movs	r2, #0
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	605a      	str	r2, [r3, #4]
	mBufVec3 = {0};
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	3344      	adds	r3, #68	; 0x44
 8005a82:	2200      	movs	r2, #0
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	605a      	str	r2, [r3, #4]
	mBufVec4 = {0};
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	334c      	adds	r3, #76	; 0x4c
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	605a      	str	r2, [r3, #4]
	mBufVec5 = {0};
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	3354      	adds	r3, #84	; 0x54
 8005a96:	2200      	movs	r2, #0
 8005a98:	601a      	str	r2, [r3, #0]
 8005a9a:	605a      	str	r2, [r3, #4]
	mBufVec6 = {0};
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	335c      	adds	r3, #92	; 0x5c
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	605a      	str	r2, [r3, #4]
	mEtaAlphaBeta = {0};
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	3378      	adds	r3, #120	; 0x78
 8005aaa:	2200      	movs	r2, #0
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	605a      	str	r2, [r3, #4]
	mBufVec7 = {0};
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	3380      	adds	r3, #128	; 0x80
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	605a      	str	r2, [r3, #4]
	mEstEmfAlphaBeta = {0};
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	3388      	adds	r3, #136	; 0x88
 8005abe:	2200      	movs	r2, #0
 8005ac0:	601a      	str	r2, [r3, #0]
 8005ac2:	605a      	str	r2, [r3, #4]
	mErrEmfAlphaBeta = {0};
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	3390      	adds	r3, #144	; 0x90
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	605a      	str	r2, [r3, #4]
	mBufVec8 = {0};
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	3398      	adds	r3, #152	; 0x98
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]
 8005ad6:	605a      	str	r2, [r3, #4]
	mBufVec9 = {0};
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	33a0      	adds	r3, #160	; 0xa0
 8005adc:	2200      	movs	r2, #0
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	605a      	str	r2, [r3, #4]
	mBufVec10 = {0};
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	33a8      	adds	r3, #168	; 0xa8
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	605a      	str	r2, [r3, #4]
	mBufVec11 = {0};
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	33b0      	adds	r3, #176	; 0xb0
 8005af0:	2200      	movs	r2, #0
 8005af2:	601a      	str	r2, [r3, #0]
 8005af4:	605a      	str	r2, [r3, #4]
	mAdaptEmfAlphaBeta = {0};
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	33cc      	adds	r3, #204	; 0xcc
 8005afa:	2200      	movs	r2, #0
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	605a      	str	r2, [r3, #4]
	mBufVec12 = {0};
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	33d4      	adds	r3, #212	; 0xd4
 8005b04:	2200      	movs	r2, #0
 8005b06:	601a      	str	r2, [r3, #0]
 8005b08:	605a      	str	r2, [r3, #4]

	mBufVal1 = 0;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f04f 0200 	mov.w	r2, #0
 8005b10:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	mBufVal2 = 0;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f04f 0200 	mov.w	r2, #0
 8005b1a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	mBufVal3 = 0;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f04f 0200 	mov.w	r2, #0
 8005b24:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	mBufVal4 = 0;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f04f 0200 	mov.w	r2, #0
 8005b2e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	mEstOmegaE = 0;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f04f 0200 	mov.w	r2, #0
 8005b38:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
}
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	370c      	adds	r7, #12
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	08009a40 	.word	0x08009a40

08005b50 <_ZN11AdaptVelEstD1Ev>:
AdaptVelEst::~AdaptVelEst() {
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	4a04      	ldr	r2, [pc, #16]	; (8005b6c <_ZN11AdaptVelEstD1Ev+0x1c>)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4618      	mov	r0, r3
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	08009a40 	.word	0x08009a40

08005b70 <_ZN11AdaptVelEstD0Ev>:
AdaptVelEst::~AdaptVelEst() {
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
}
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f7ff ffe9 	bl	8005b50 <_ZN11AdaptVelEstD1Ev>
 8005b7e:	21fc      	movs	r1, #252	; 0xfc
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f001 febb 	bl	80078fc <_ZdlPvj>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <_ZN6EMFObsC1Ev>:
 *      Author: watashi
 */

#include <EMFObs.hpp>

EMFObs::EMFObs() {
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	4a04      	ldr	r2, [pc, #16]	; (8005bac <_ZN6EMFObsC1Ev+0x1c>)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr
 8005bac:	08009a50 	.word	0x08009a50

08005bb0 <_ZN6EMFObsD1Ev>:

EMFObs::~EMFObs() {
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	4a04      	ldr	r2, [pc, #16]	; (8005bcc <_ZN6EMFObsD1Ev+0x1c>)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	08009a50 	.word	0x08009a50

08005bd0 <_ZN6EMFObsD0Ev>:
EMFObs::~EMFObs() {
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
}
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7ff ffe9 	bl	8005bb0 <_ZN6EMFObsD1Ev>
 8005bde:	2104      	movs	r1, #4
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f001 fe8b 	bl	80078fc <_ZdlPvj>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4618      	mov	r0, r3
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <_ZN8ObserverC1Ev>:
 *      Author: watashi
 */

#include "Observer.hpp"

Observer::Observer() {
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	4a09      	ldr	r2, [pc, #36]	; (8005c20 <_ZN8ObserverC1Ev+0x30>)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	3304      	adds	r3, #4
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7ff ff2a 	bl	8005a5c <_ZN11AdaptVelEstC1Ev>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7ff ffbe 	bl	8005b90 <_ZN6EMFObsC1Ev>
	// TODO Auto-generated constructor stub
}
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4618      	mov	r0, r3
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	08009a60 	.word	0x08009a60

08005c24 <_ZN8ObserverD1Ev>:

Observer::~Observer() {
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	4a09      	ldr	r2, [pc, #36]	; (8005c54 <_ZN8ObserverD1Ev+0x30>)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7ff ffb9 	bl	8005bb0 <_ZN6EMFObsD1Ev>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	3304      	adds	r3, #4
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7ff ff84 	bl	8005b50 <_ZN11AdaptVelEstD1Ev>
	// TODO Auto-generated destructor stub
}
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3708      	adds	r7, #8
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	08009a60 	.word	0x08009a60

08005c58 <_ZN8ObserverD0Ev>:
Observer::~Observer() {
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
}
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7ff ffdf 	bl	8005c24 <_ZN8ObserverD1Ev>
 8005c66:	f44f 7190 	mov.w	r1, #288	; 0x120
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f001 fe46 	bl	80078fc <_ZdlPvj>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4618      	mov	r0, r3
 8005c74:	3708      	adds	r7, #8
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <LL_TIM_GetAutoReload>:
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b083      	sub	sp, #12
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->ARR));
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
	...

08005c94 <_ZN7TimInfoC1Ev>:


#include "TimInfo.hpp"


TimInfo::TimInfo() {
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	4a04      	ldr	r2, [pc, #16]	; (8005cb0 <_ZN7TimInfoC1Ev+0x1c>)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	08009a70 	.word	0x08009a70

08005cb4 <_ZN7TimInfoD1Ev>:

TimInfo::~TimInfo() {
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	4a04      	ldr	r2, [pc, #16]	; (8005cd0 <_ZN7TimInfoD1Ev+0x1c>)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	08009a70 	.word	0x08009a70

08005cd4 <_ZN7TimInfoD0Ev>:
TimInfo::~TimInfo() {
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
}
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7ff ffe9 	bl	8005cb4 <_ZN7TimInfoD1Ev>
 8005ce2:	2114      	movs	r1, #20
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f001 fe09 	bl	80078fc <_ZdlPvj>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4618      	mov	r0, r3
 8005cee:	3708      	adds	r7, #8
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <_ZN7TimInfo4InitEP11TIM_TypeDef>:

void TimInfo::Init(TIM_TypeDef *pTIMx) {
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]

	if(pTIMx == NULL) {
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d100      	bne.n	8005d06 <_ZN7TimInfo4InitEP11TIM_TypeDef+0x12>
		//null ptr error
		while(1){}
 8005d04:	e7fe      	b.n	8005d04 <_ZN7TimInfo4InitEP11TIM_TypeDef+0x10>
	}

	mReload = 0;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	609a      	str	r2, [r3, #8]
	mStartTime = 0;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	60da      	str	r2, [r3, #12]
	mStopTime = 0;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	611a      	str	r2, [r3, #16]

	mTIMx = pTIMx;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	605a      	str	r2, [r3, #4]
	mReload = LL_TIM_GetAutoReload(pTIMx);
 8005d1e:	6838      	ldr	r0, [r7, #0]
 8005d20:	f7ff ffab 	bl	8005c7a <LL_TIM_GetAutoReload>
 8005d24:	4603      	mov	r3, r0
 8005d26:	461a      	mov	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	609a      	str	r2, [r3, #8]

}
 8005d2c:	bf00      	nop
 8005d2e:	3708      	adds	r7, #8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <_ZN6UiCtrl9BtnToggleEv>:

UiCtrl::~UiCtrl() {
	// TODO Auto-generated destructor stub
}

void UiCtrl::BtnToggle(){
 8005d34:	b480      	push	{r7}
 8005d36:	af00      	add	r7, sp, #0
	if(isONBtnState == true){//ONの時
 8005d38:	4b07      	ldr	r3, [pc, #28]	; (8005d58 <_ZN6UiCtrl9BtnToggleEv+0x24>)
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <_ZN6UiCtrl9BtnToggleEv+0x14>
		isONBtnState = false;//offにするタスク
 8005d40:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <_ZN6UiCtrl9BtnToggleEv+0x24>)
 8005d42:	2200      	movs	r2, #0
 8005d44:	701a      	strb	r2, [r3, #0]
	} else {
		isONBtnState = true;//ONにするタスク
	}
}
 8005d46:	e002      	b.n	8005d4e <_ZN6UiCtrl9BtnToggleEv+0x1a>
		isONBtnState = true;//ONにするタスク
 8005d48:	4b03      	ldr	r3, [pc, #12]	; (8005d58 <_ZN6UiCtrl9BtnToggleEv+0x24>)
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	701a      	strb	r2, [r3, #0]
}
 8005d4e:	bf00      	nop
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	200001fc 	.word	0x200001fc

08005d5c <_ZN6UiCtrl8getStateEv>:
void UiCtrl::BtnActON(){
	isONBtnState = true;//問答無用でonにするタスク
}


bool UiCtrl::getState(void){return isONBtnState;}
 8005d5c:	b480      	push	{r7}
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	4b03      	ldr	r3, [pc, #12]	; (8005d70 <_ZN6UiCtrl8getStateEv+0x14>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	4618      	mov	r0, r3
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	200001fc 	.word	0x200001fc

08005d74 <HAL_ADC_MspInit>:
  }

}

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b08a      	sub	sp, #40	; 0x28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d7c:	f107 0314 	add.w	r3, r7, #20
 8005d80:	2200      	movs	r2, #0
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	605a      	str	r2, [r3, #4]
 8005d86:	609a      	str	r2, [r3, #8]
 8005d88:	60da      	str	r2, [r3, #12]
 8005d8a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a1b      	ldr	r2, [pc, #108]	; (8005e00 <HAL_ADC_MspInit+0x8c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d12f      	bne.n	8005df6 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005d96:	2300      	movs	r3, #0
 8005d98:	613b      	str	r3, [r7, #16]
 8005d9a:	4b1a      	ldr	r3, [pc, #104]	; (8005e04 <HAL_ADC_MspInit+0x90>)
 8005d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9e:	4a19      	ldr	r2, [pc, #100]	; (8005e04 <HAL_ADC_MspInit+0x90>)
 8005da0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005da4:	6453      	str	r3, [r2, #68]	; 0x44
 8005da6:	4b17      	ldr	r3, [pc, #92]	; (8005e04 <HAL_ADC_MspInit+0x90>)
 8005da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dae:	613b      	str	r3, [r7, #16]
 8005db0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005db2:	2300      	movs	r3, #0
 8005db4:	60fb      	str	r3, [r7, #12]
 8005db6:	4b13      	ldr	r3, [pc, #76]	; (8005e04 <HAL_ADC_MspInit+0x90>)
 8005db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dba:	4a12      	ldr	r2, [pc, #72]	; (8005e04 <HAL_ADC_MspInit+0x90>)
 8005dbc:	f043 0304 	orr.w	r3, r3, #4
 8005dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8005dc2:	4b10      	ldr	r3, [pc, #64]	; (8005e04 <HAL_ADC_MspInit+0x90>)
 8005dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc6:	f003 0304 	and.w	r3, r3, #4
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration    
    PC3     ------> ADC3_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005dce:	2308      	movs	r3, #8
 8005dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005dda:	f107 0314 	add.w	r3, r7, #20
 8005dde:	4619      	mov	r1, r3
 8005de0:	4809      	ldr	r0, [pc, #36]	; (8005e08 <HAL_ADC_MspInit+0x94>)
 8005de2:	f7fb fddb 	bl	800199c <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8005de6:	2200      	movs	r2, #0
 8005de8:	2102      	movs	r1, #2
 8005dea:	2012      	movs	r0, #18
 8005dec:	f7fb fd9f 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8005df0:	2012      	movs	r0, #18
 8005df2:	f7fb fdb8 	bl	8001966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8005df6:	bf00      	nop
 8005df8:	3728      	adds	r7, #40	; 0x28
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	40012200 	.word	0x40012200
 8005e04:	40023800 	.word	0x40023800
 8005e08:	40020800 	.word	0x40020800

08005e0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005e10:	f7fb f866 	bl	8000ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005e14:	f000 f804 	bl	8005e20 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  cppwrapper();
 8005e18:	f000 f9a8 	bl	800616c <cppwrapper>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005e1c:	e7fe      	b.n	8005e1c <main+0x10>
	...

08005e20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b094      	sub	sp, #80	; 0x50
 8005e24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005e26:	f107 031c 	add.w	r3, r7, #28
 8005e2a:	2234      	movs	r2, #52	; 0x34
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f001 ffd9 	bl	8007de6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005e34:	f107 0308 	add.w	r3, r7, #8
 8005e38:	2200      	movs	r2, #0
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	605a      	str	r2, [r3, #4]
 8005e3e:	609a      	str	r2, [r3, #8]
 8005e40:	60da      	str	r2, [r3, #12]
 8005e42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e44:	2300      	movs	r3, #0
 8005e46:	607b      	str	r3, [r7, #4]
 8005e48:	4b2c      	ldr	r3, [pc, #176]	; (8005efc <SystemClock_Config+0xdc>)
 8005e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4c:	4a2b      	ldr	r2, [pc, #172]	; (8005efc <SystemClock_Config+0xdc>)
 8005e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e52:	6413      	str	r3, [r2, #64]	; 0x40
 8005e54:	4b29      	ldr	r3, [pc, #164]	; (8005efc <SystemClock_Config+0xdc>)
 8005e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e5c:	607b      	str	r3, [r7, #4]
 8005e5e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e60:	2300      	movs	r3, #0
 8005e62:	603b      	str	r3, [r7, #0]
 8005e64:	4b26      	ldr	r3, [pc, #152]	; (8005f00 <SystemClock_Config+0xe0>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a25      	ldr	r2, [pc, #148]	; (8005f00 <SystemClock_Config+0xe0>)
 8005e6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e6e:	6013      	str	r3, [r2, #0]
 8005e70:	4b23      	ldr	r3, [pc, #140]	; (8005f00 <SystemClock_Config+0xe0>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005e78:	603b      	str	r3, [r7, #0]
 8005e7a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005e80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e84:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005e86:	2302      	movs	r3, #2
 8005e88:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005e8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005e8e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005e90:	2304      	movs	r3, #4
 8005e92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005e94:	23b4      	movs	r3, #180	; 0xb4
 8005e96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005e98:	2302      	movs	r3, #2
 8005e9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005ea4:	f107 031c 	add.w	r3, r7, #28
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7fc f9db 	bl	8002264 <HAL_RCC_OscConfig>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d001      	beq.n	8005eb8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8005eb4:	f000 f826 	bl	8005f04 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005eb8:	f7fb ff02 	bl	8001cc0 <HAL_PWREx_EnableOverDrive>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8005ec2:	f000 f81f 	bl	8005f04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005ec6:	230f      	movs	r3, #15
 8005ec8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005eca:	2302      	movs	r3, #2
 8005ecc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005ed2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005ed6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005edc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005ede:	f107 0308 	add.w	r3, r7, #8
 8005ee2:	2105      	movs	r1, #5
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fb ff3b 	bl	8001d60 <HAL_RCC_ClockConfig>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d001      	beq.n	8005ef4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8005ef0:	f000 f808 	bl	8005f04 <Error_Handler>
  }
}
 8005ef4:	bf00      	nop
 8005ef6:	3750      	adds	r7, #80	; 0x50
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	40023800 	.word	0x40023800
 8005f00:	40007000 	.word	0x40007000

08005f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005f04:	b480      	push	{r7}
 8005f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005f08:	bf00      	nop
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
	...

08005f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	607b      	str	r3, [r7, #4]
 8005f1e:	4b10      	ldr	r3, [pc, #64]	; (8005f60 <HAL_MspInit+0x4c>)
 8005f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f22:	4a0f      	ldr	r2, [pc, #60]	; (8005f60 <HAL_MspInit+0x4c>)
 8005f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f28:	6453      	str	r3, [r2, #68]	; 0x44
 8005f2a:	4b0d      	ldr	r3, [pc, #52]	; (8005f60 <HAL_MspInit+0x4c>)
 8005f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f32:	607b      	str	r3, [r7, #4]
 8005f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f36:	2300      	movs	r3, #0
 8005f38:	603b      	str	r3, [r7, #0]
 8005f3a:	4b09      	ldr	r3, [pc, #36]	; (8005f60 <HAL_MspInit+0x4c>)
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3e:	4a08      	ldr	r2, [pc, #32]	; (8005f60 <HAL_MspInit+0x4c>)
 8005f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f44:	6413      	str	r3, [r2, #64]	; 0x40
 8005f46:	4b06      	ldr	r3, [pc, #24]	; (8005f60 <HAL_MspInit+0x4c>)
 8005f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f4e:	603b      	str	r3, [r7, #0]
 8005f50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8005f52:	2004      	movs	r0, #4
 8005f54:	f7fb fce0 	bl	8001918 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005f58:	bf00      	nop
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40023800 	.word	0x40023800

08005f64 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8005f6c:	4b07      	ldr	r3, [pc, #28]	; (8005f8c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8005f6e:	695a      	ldr	r2, [r3, #20]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4013      	ands	r3, r2
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	bf0c      	ite	eq
 8005f7a:	2301      	moveq	r3, #1
 8005f7c:	2300      	movne	r3, #0
 8005f7e:	b2db      	uxtb	r3, r3
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	40013c00 	.word	0x40013c00

08005f90 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8005f98:	4a04      	ldr	r2, [pc, #16]	; (8005fac <LL_EXTI_ClearFlag_0_31+0x1c>)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6153      	str	r3, [r2, #20]
}
 8005f9e:	bf00      	nop
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	40013c00 	.word	0x40013c00

08005fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005fb4:	bf00      	nop
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005fc2:	e7fe      	b.n	8005fc2 <HardFault_Handler+0x4>

08005fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005fc8:	e7fe      	b.n	8005fc8 <MemManage_Handler+0x4>

08005fca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005fce:	e7fe      	b.n	8005fce <BusFault_Handler+0x4>

08005fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005fd4:	e7fe      	b.n	8005fd4 <UsageFault_Handler+0x4>

08005fd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005fda:	bf00      	nop
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005fe8:	bf00      	nop
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005ff6:	bf00      	nop
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006004:	f7fa ffbe 	bl	8000f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006008:	bf00      	nop
 800600a:	bd80      	pop	{r7, pc}

0800600c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
	HighFreqTask();
 8006010:	f000 f8ba 	bl	8006188 <HighFreqTask>
  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8006014:	4802      	ldr	r0, [pc, #8]	; (8006020 <ADC_IRQHandler+0x14>)
 8006016:	f7fb f818 	bl	800104a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800601a:	bf00      	nop
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	200031b0 	.word	0x200031b0

08006024 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8006024:	b480      	push	{r7}
 8006026:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8006028:	bf00      	nop
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006032:	b480      	push	{r7}
 8006034:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006036:	bf00      	nop
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8006044:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006048:	f7ff ff8c 	bl	8005f64 <LL_EXTI_IsActiveFlag_0_31>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d005      	beq.n	800605e <EXTI15_10_IRQHandler+0x1e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8006052:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006056:	f7ff ff9b 	bl	8005f90 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */
    BtnAct();
 800605a:	f000 f89f 	bl	800619c <BtnAct>
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800605e:	bf00      	nop
 8006060:	bd80      	pop	{r7, pc}

08006062 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006062:	b480      	push	{r7}
 8006064:	af00      	add	r7, sp, #0
	return 1;
 8006066:	2301      	movs	r3, #1
}
 8006068:	4618      	mov	r0, r3
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr

08006072 <_kill>:

int _kill(int pid, int sig)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b082      	sub	sp, #8
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800607c:	f001 fe6e 	bl	8007d5c <__errno>
 8006080:	4602      	mov	r2, r0
 8006082:	2316      	movs	r3, #22
 8006084:	6013      	str	r3, [r2, #0]
	return -1;
 8006086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800608a:	4618      	mov	r0, r3
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <_exit>:

void _exit (int status)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b082      	sub	sp, #8
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800609a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7ff ffe7 	bl	8006072 <_kill>
	while (1) {}		/* Make sure we hang here */
 80060a4:	e7fe      	b.n	80060a4 <_exit+0x12>
	...

080060a8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80060b0:	4b11      	ldr	r3, [pc, #68]	; (80060f8 <_sbrk+0x50>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d102      	bne.n	80060be <_sbrk+0x16>
		heap_end = &end;
 80060b8:	4b0f      	ldr	r3, [pc, #60]	; (80060f8 <_sbrk+0x50>)
 80060ba:	4a10      	ldr	r2, [pc, #64]	; (80060fc <_sbrk+0x54>)
 80060bc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80060be:	4b0e      	ldr	r3, [pc, #56]	; (80060f8 <_sbrk+0x50>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80060c4:	4b0c      	ldr	r3, [pc, #48]	; (80060f8 <_sbrk+0x50>)
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4413      	add	r3, r2
 80060cc:	466a      	mov	r2, sp
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d907      	bls.n	80060e2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80060d2:	f001 fe43 	bl	8007d5c <__errno>
 80060d6:	4602      	mov	r2, r0
 80060d8:	230c      	movs	r3, #12
 80060da:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80060dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060e0:	e006      	b.n	80060f0 <_sbrk+0x48>
	}

	heap_end += incr;
 80060e2:	4b05      	ldr	r3, [pc, #20]	; (80060f8 <_sbrk+0x50>)
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4413      	add	r3, r2
 80060ea:	4a03      	ldr	r2, [pc, #12]	; (80060f8 <_sbrk+0x50>)
 80060ec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80060ee:	68fb      	ldr	r3, [r7, #12]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	20000200 	.word	0x20000200
 80060fc:	20003208 	.word	0x20003208

08006100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006100:	b480      	push	{r7}
 8006102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006104:	4b16      	ldr	r3, [pc, #88]	; (8006160 <SystemInit+0x60>)
 8006106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800610a:	4a15      	ldr	r2, [pc, #84]	; (8006160 <SystemInit+0x60>)
 800610c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006114:	4b13      	ldr	r3, [pc, #76]	; (8006164 <SystemInit+0x64>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a12      	ldr	r2, [pc, #72]	; (8006164 <SystemInit+0x64>)
 800611a:	f043 0301 	orr.w	r3, r3, #1
 800611e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006120:	4b10      	ldr	r3, [pc, #64]	; (8006164 <SystemInit+0x64>)
 8006122:	2200      	movs	r2, #0
 8006124:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006126:	4b0f      	ldr	r3, [pc, #60]	; (8006164 <SystemInit+0x64>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a0e      	ldr	r2, [pc, #56]	; (8006164 <SystemInit+0x64>)
 800612c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006134:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006136:	4b0b      	ldr	r3, [pc, #44]	; (8006164 <SystemInit+0x64>)
 8006138:	4a0b      	ldr	r2, [pc, #44]	; (8006168 <SystemInit+0x68>)
 800613a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800613c:	4b09      	ldr	r3, [pc, #36]	; (8006164 <SystemInit+0x64>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a08      	ldr	r2, [pc, #32]	; (8006164 <SystemInit+0x64>)
 8006142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006146:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006148:	4b06      	ldr	r3, [pc, #24]	; (8006164 <SystemInit+0x64>)
 800614a:	2200      	movs	r2, #0
 800614c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800614e:	4b04      	ldr	r3, [pc, #16]	; (8006160 <SystemInit+0x60>)
 8006150:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006154:	609a      	str	r2, [r3, #8]
#endif
}
 8006156:	bf00      	nop
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	e000ed00 	.word	0xe000ed00
 8006164:	40023800 	.word	0x40023800
 8006168:	24003010 	.word	0x24003010

0800616c <cppwrapper>:
//unsigned int debugCount = DEBUG_COUNT;

MotorCtrl M_Ctrl;


void cppwrapper(void){
 800616c:	b580      	push	{r7, lr}
 800616e:	af00      	add	r7, sp, #0

	M_Ctrl.InitSystem();
 8006170:	4804      	ldr	r0, [pc, #16]	; (8006184 <cppwrapper+0x18>)
 8006172:	f7fe fd82 	bl	8004c7a <_ZN9MotorCtrl10InitSystemEv>
//	DbgStr.append("testnum:");
//	DbgStr.append(std::to_string(Dbgint));
//	DbgStr.append("\r\n");
//	M_Ctrl.DbgUart(DbgStr);

	M_Ctrl.InitMotorInfo();
 8006176:	4803      	ldr	r0, [pc, #12]	; (8006184 <cppwrapper+0x18>)
 8006178:	f7ff f838 	bl	80051ec <_ZN9MotorCtrl13InitMotorInfoEv>
	M_Ctrl.InitPWM();
 800617c:	4801      	ldr	r0, [pc, #4]	; (8006184 <cppwrapper+0x18>)
 800617e:	f7fe fd8d 	bl	8004c9c <_ZN9MotorCtrl7InitPWMEv>

	while(1){}
 8006182:	e7fe      	b.n	8006182 <cppwrapper+0x16>
 8006184:	20000204 	.word	0x20000204

08006188 <HighFreqTask>:

}

void HighFreqTask(){
 8006188:	b580      	push	{r7, lr}
 800618a:	af00      	add	r7, sp, #0
	M_Ctrl.HighFreqTask();
 800618c:	4802      	ldr	r0, [pc, #8]	; (8006198 <HighFreqTask+0x10>)
 800618e:	f7ff f8d7 	bl	8005340 <_ZN9MotorCtrl12HighFreqTaskEv>
}
 8006192:	bf00      	nop
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	20000204 	.word	0x20000204

0800619c <BtnAct>:


void BtnAct(void) { //割り込みラッパ
 800619c:	b580      	push	{r7, lr}
 800619e:	af00      	add	r7, sp, #0
	M_Ctrl.BtnAct();
 80061a0:	4802      	ldr	r0, [pc, #8]	; (80061ac <BtnAct+0x10>)
 80061a2:	f7ff f9ad 	bl	8005500 <_ZN9MotorCtrl6BtnActEv>
}
 80061a6:	bf00      	nop
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	20000204 	.word	0x20000204

080061b0 <_Z41__static_initialization_and_destruction_0ii>:
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d107      	bne.n	80061d0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d102      	bne.n	80061d0 <_Z41__static_initialization_and_destruction_0ii+0x20>
MotorCtrl M_Ctrl;
 80061ca:	4809      	ldr	r0, [pc, #36]	; (80061f0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80061cc:	f7fe fb40 	bl	8004850 <_ZN9MotorCtrlC1Ev>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d107      	bne.n	80061e6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061dc:	4293      	cmp	r3, r2
 80061de:	d102      	bne.n	80061e6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80061e0:	4803      	ldr	r0, [pc, #12]	; (80061f0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80061e2:	f7fe fb67 	bl	80048b4 <_ZN9MotorCtrlD1Ev>
}
 80061e6:	bf00      	nop
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	20000204 	.word	0x20000204

080061f4 <_GLOBAL__sub_I_M_Ctrl>:
 80061f4:	b580      	push	{r7, lr}
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80061fc:	2001      	movs	r0, #1
 80061fe:	f7ff ffd7 	bl	80061b0 <_Z41__static_initialization_and_destruction_0ii>
 8006202:	bd80      	pop	{r7, pc}

08006204 <_GLOBAL__sub_D_M_Ctrl>:
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0
 8006208:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800620c:	2000      	movs	r0, #0
 800620e:	f7ff ffcf 	bl	80061b0 <_Z41__static_initialization_and_destruction_0ii>
 8006212:	bd80      	pop	{r7, pc}

08006214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006214:	f8df d034 	ldr.w	sp, [pc, #52]	; 800624c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006218:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800621a:	e003      	b.n	8006224 <LoopCopyDataInit>

0800621c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800621c:	4b0c      	ldr	r3, [pc, #48]	; (8006250 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800621e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006220:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006222:	3104      	adds	r1, #4

08006224 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006224:	480b      	ldr	r0, [pc, #44]	; (8006254 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006226:	4b0c      	ldr	r3, [pc, #48]	; (8006258 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006228:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800622a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800622c:	d3f6      	bcc.n	800621c <CopyDataInit>
  ldr  r2, =_sbss
 800622e:	4a0b      	ldr	r2, [pc, #44]	; (800625c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006230:	e002      	b.n	8006238 <LoopFillZerobss>

08006232 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006232:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006234:	f842 3b04 	str.w	r3, [r2], #4

08006238 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006238:	4b09      	ldr	r3, [pc, #36]	; (8006260 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800623a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800623c:	d3f9      	bcc.n	8006232 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800623e:	f7ff ff5f 	bl	8006100 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006242:	f001 fd91 	bl	8007d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006246:	f7ff fde1 	bl	8005e0c <main>
  bx  lr    
 800624a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800624c:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 8006250:	0800a570 	.word	0x0800a570
  ldr  r0, =_sdata
 8006254:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006258:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 800625c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8006260:	20003208 	.word	0x20003208

08006264 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006264:	e7fe      	b.n	8006264 <CAN1_RX0_IRQHandler>
	...

08006268 <__NVIC_GetPriorityGrouping>:
{
 8006268:	b480      	push	{r7}
 800626a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800626c:	4b04      	ldr	r3, [pc, #16]	; (8006280 <__NVIC_GetPriorityGrouping+0x18>)
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	0a1b      	lsrs	r3, r3, #8
 8006272:	f003 0307 	and.w	r3, r3, #7
}
 8006276:	4618      	mov	r0, r3
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	e000ed00 	.word	0xe000ed00

08006284 <__NVIC_EnableIRQ>:
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	4603      	mov	r3, r0
 800628c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800628e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006292:	2b00      	cmp	r3, #0
 8006294:	db0d      	blt.n	80062b2 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800629a:	b2db      	uxtb	r3, r3
 800629c:	f003 021f 	and.w	r2, r3, #31
 80062a0:	4907      	ldr	r1, [pc, #28]	; (80062c0 <__NVIC_EnableIRQ+0x3c>)
 80062a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062a6:	095b      	lsrs	r3, r3, #5
 80062a8:	2001      	movs	r0, #1
 80062aa:	fa00 f202 	lsl.w	r2, r0, r2
 80062ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80062b2:	bf00      	nop
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	e000e100 	.word	0xe000e100

080062c4 <__NVIC_SetPriority>:
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	4603      	mov	r3, r0
 80062cc:	6039      	str	r1, [r7, #0]
 80062ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	db0c      	blt.n	80062f2 <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	4a0e      	ldr	r2, [pc, #56]	; (8006318 <__NVIC_SetPriority+0x54>)
 80062de:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80062e2:	4608      	mov	r0, r1
 80062e4:	011b      	lsls	r3, r3, #4
 80062e6:	b2d9      	uxtb	r1, r3
 80062e8:	1813      	adds	r3, r2, r0
 80062ea:	460a      	mov	r2, r1
 80062ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80062f0:	e00c      	b.n	800630c <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	b2da      	uxtb	r2, r3
 80062f6:	4909      	ldr	r1, [pc, #36]	; (800631c <__NVIC_SetPriority+0x58>)
 80062f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	f003 030f 	and.w	r3, r3, #15
 8006302:	3b04      	subs	r3, #4
 8006304:	0112      	lsls	r2, r2, #4
 8006306:	b2d2      	uxtb	r2, r2
 8006308:	440b      	add	r3, r1
 800630a:	761a      	strb	r2, [r3, #24]
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	e000e100 	.word	0xe000e100
 800631c:	e000ed00 	.word	0xe000ed00

08006320 <NVIC_EncodePriority>:
{
 8006320:	b480      	push	{r7}
 8006322:	b089      	sub	sp, #36	; 0x24
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f003 0307 	and.w	r3, r3, #7
 8006332:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	f1c3 0307 	rsb	r3, r3, #7
 800633a:	2b04      	cmp	r3, #4
 800633c:	bf28      	it	cs
 800633e:	2304      	movcs	r3, #4
 8006340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	3304      	adds	r3, #4
 8006346:	2b06      	cmp	r3, #6
 8006348:	d902      	bls.n	8006350 <NVIC_EncodePriority+0x30>
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	3b03      	subs	r3, #3
 800634e:	e000      	b.n	8006352 <NVIC_EncodePriority+0x32>
 8006350:	2300      	movs	r3, #0
 8006352:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	2201      	movs	r2, #1
 8006358:	fa02 f303 	lsl.w	r3, r2, r3
 800635c:	1e5a      	subs	r2, r3, #1
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	401a      	ands	r2, r3
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	2101      	movs	r1, #1
 800636a:	fa01 f303 	lsl.w	r3, r1, r3
 800636e:	1e59      	subs	r1, r3, #1
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	400b      	ands	r3, r1
         );
 8006374:	4313      	orrs	r3, r2
}
 8006376:	4618      	mov	r0, r3
 8006378:	3724      	adds	r7, #36	; 0x24
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <LL_ADC_REG_SetSequencerRanks>:
{
 8006382:	b490      	push	{r4, r7}
 8006384:	b086      	sub	sp, #24
 8006386:	af00      	add	r7, sp, #0
 8006388:	60f8      	str	r0, [r7, #12]
 800638a:	60b9      	str	r1, [r7, #8]
 800638c:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	332c      	adds	r3, #44	; 0x2c
 8006392:	4619      	mov	r1, r3
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800639a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800639e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	fa92 f2a2 	rbit	r2, r2
 80063a6:	613a      	str	r2, [r7, #16]
  return result;
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	fab2 f282 	clz	r2, r2
 80063ae:	b2d2      	uxtb	r2, r2
 80063b0:	40d3      	lsrs	r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	440b      	add	r3, r1
 80063b6:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80063b8:	6822      	ldr	r2, [r4, #0]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	f003 031f 	and.w	r3, r3, #31
 80063c0:	211f      	movs	r1, #31
 80063c2:	fa01 f303 	lsl.w	r3, r1, r3
 80063c6:	43db      	mvns	r3, r3
 80063c8:	401a      	ands	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f003 011f 	and.w	r1, r3, #31
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	f003 031f 	and.w	r3, r3, #31
 80063d6:	fa01 f303 	lsl.w	r3, r1, r3
 80063da:	4313      	orrs	r3, r2
 80063dc:	6023      	str	r3, [r4, #0]
}
 80063de:	bf00      	nop
 80063e0:	3718      	adds	r7, #24
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bc90      	pop	{r4, r7}
 80063e6:	4770      	bx	lr

080063e8 <LL_ADC_REG_SetFlagEndOfConversion>:
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	431a      	orrs	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	609a      	str	r2, [r3, #8]
}
 8006402:	bf00      	nop
 8006404:	370c      	adds	r7, #12
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <LL_ADC_INJ_SetSequencerRanks>:
{
 800640e:	b480      	push	{r7}
 8006410:	b087      	sub	sp, #28
 8006412:	af00      	add	r7, sp, #0
 8006414:	60f8      	str	r0, [r7, #12]
 8006416:	60b9      	str	r1, [r7, #8]
 8006418:	607a      	str	r2, [r7, #4]
  register uint32_t tmpreg1 = (READ_BIT(ADCx->JSQR, ADC_JSQR_JL) >> ADC_JSQR_JL_Pos) + 1U;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641e:	0d1b      	lsrs	r3, r3, #20
 8006420:	f003 0303 	and.w	r3, r3, #3
 8006424:	3301      	adds	r3, #1
 8006426:	617b      	str	r3, [r7, #20]
  MODIFY_REG(ADCx->JSQR,
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	b2d9      	uxtb	r1, r3
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	b2db      	uxtb	r3, r3
 8006434:	1acb      	subs	r3, r1, r3
 8006436:	b2db      	uxtb	r3, r3
 8006438:	3303      	adds	r3, #3
 800643a:	b2db      	uxtb	r3, r3
 800643c:	4619      	mov	r1, r3
 800643e:	460b      	mov	r3, r1
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	440b      	add	r3, r1
 8006444:	211f      	movs	r1, #31
 8006446:	fa01 f303 	lsl.w	r3, r1, r3
 800644a:	43db      	mvns	r3, r3
 800644c:	401a      	ands	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f003 011f 	and.w	r1, r3, #31
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	b2d8      	uxtb	r0, r3
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	b2db      	uxtb	r3, r3
 800645c:	1ac3      	subs	r3, r0, r3
 800645e:	b2db      	uxtb	r3, r3
 8006460:	3303      	adds	r3, #3
 8006462:	b2db      	uxtb	r3, r3
 8006464:	4618      	mov	r0, r3
 8006466:	4603      	mov	r3, r0
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4403      	add	r3, r0
 800646c:	fa01 f303 	lsl.w	r3, r1, r3
 8006470:	431a      	orrs	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006476:	bf00      	nop
 8006478:	371c      	adds	r7, #28
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <LL_ADC_INJ_SetOffset>:
{
 8006482:	b490      	push	{r4, r7}
 8006484:	b086      	sub	sp, #24
 8006486:	af00      	add	r7, sp, #0
 8006488:	60f8      	str	r0, [r7, #12]
 800648a:	60b9      	str	r1, [r7, #8]
 800648c:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JOFR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JOFRX_REGOFFSET_MASK));
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	3314      	adds	r3, #20
 8006492:	4619      	mov	r1, r3
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800649a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800649e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	fa92 f2a2 	rbit	r2, r2
 80064a6:	613a      	str	r2, [r7, #16]
  return result;
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	fab2 f282 	clz	r2, r2
 80064ae:	b2d2      	uxtb	r2, r2
 80064b0:	40d3      	lsrs	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	440b      	add	r3, r1
 80064b6:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80064b8:	6823      	ldr	r3, [r4, #0]
 80064ba:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80064be:	f023 030f 	bic.w	r3, r3, #15
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	6023      	str	r3, [r4, #0]
}
 80064c8:	bf00      	nop
 80064ca:	3718      	adds	r7, #24
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bc90      	pop	{r4, r7}
 80064d0:	4770      	bx	lr

080064d2 <LL_ADC_SetChannelSamplingTime>:
{
 80064d2:	b490      	push	{r4, r7}
 80064d4:	b08a      	sub	sp, #40	; 0x28
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	60f8      	str	r0, [r7, #12]
 80064da:	60b9      	str	r1, [r7, #8]
 80064dc:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	330c      	adds	r3, #12
 80064e2:	4619      	mov	r1, r3
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80064ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	fa92 f2a2 	rbit	r2, r2
 80064f6:	613a      	str	r2, [r7, #16]
  return result;
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	fab2 f282 	clz	r2, r2
 80064fe:	b2d2      	uxtb	r2, r2
 8006500:	40d3      	lsrs	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	440b      	add	r3, r1
 8006506:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8006508:	6822      	ldr	r2, [r4, #0]
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8006510:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8006514:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006516:	69f9      	ldr	r1, [r7, #28]
 8006518:	fa91 f1a1 	rbit	r1, r1
 800651c:	61b9      	str	r1, [r7, #24]
  return result;
 800651e:	69b9      	ldr	r1, [r7, #24]
 8006520:	fab1 f181 	clz	r1, r1
 8006524:	b2c9      	uxtb	r1, r1
 8006526:	40cb      	lsrs	r3, r1
 8006528:	2107      	movs	r1, #7
 800652a:	fa01 f303 	lsl.w	r3, r1, r3
 800652e:	43db      	mvns	r3, r3
 8006530:	401a      	ands	r2, r3
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8006538:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800653c:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800653e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006540:	fa91 f1a1 	rbit	r1, r1
 8006544:	6239      	str	r1, [r7, #32]
  return result;
 8006546:	6a39      	ldr	r1, [r7, #32]
 8006548:	fab1 f181 	clz	r1, r1
 800654c:	b2c9      	uxtb	r1, r1
 800654e:	40cb      	lsrs	r3, r1
 8006550:	6879      	ldr	r1, [r7, #4]
 8006552:	fa01 f303 	lsl.w	r3, r1, r3
 8006556:	4313      	orrs	r3, r2
 8006558:	6023      	str	r3, [r4, #0]
}
 800655a:	bf00      	nop
 800655c:	3728      	adds	r7, #40	; 0x28
 800655e:	46bd      	mov	sp, r7
 8006560:	bc90      	pop	{r4, r7}
 8006562:	4770      	bx	lr

08006564 <LL_ADC_INJ_StartConversionExtTrig>:
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	689a      	ldr	r2, [r3, #8]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	431a      	orrs	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	609a      	str	r2, [r3, #8]
}
 800657a:	bf00      	nop
 800657c:	370c      	adds	r7, #12
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <LL_ADC_DisableIT_EOCS>:
  * @rmtoll CR1      EOCIE          LL_ADC_DisableIT_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
 8006586:	b480      	push	{r7}
 8006588:	b083      	sub	sp, #12
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f023 0220 	bic.w	r2, r3, #32
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	605a      	str	r2, [r3, #4]
}
 800659a:	bf00      	nop
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <LL_ADC_DisableIT_JEOS>:
  * @rmtoll CR1      JEOCIE         LL_ADC_EnableIT_JEOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOS(ADC_TypeDef *ADCx)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b083      	sub	sp, #12
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	605a      	str	r2, [r3, #4]
}
 80065ba:	bf00      	nop
 80065bc:	370c      	adds	r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
	...

080065c8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80065d0:	4b08      	ldr	r3, [pc, #32]	; (80065f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80065d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4907      	ldr	r1, [pc, #28]	; (80065f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80065dc:	4b05      	ldr	r3, [pc, #20]	; (80065f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80065de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4013      	ands	r3, r2
 80065e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80065e6:	68fb      	ldr	r3, [r7, #12]
}
 80065e8:	bf00      	nop
 80065ea:	3714      	adds	r7, #20
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr
 80065f4:	40023800 	.word	0x40023800

080065f8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8006600:	4b08      	ldr	r3, [pc, #32]	; (8006624 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006602:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4907      	ldr	r1, [pc, #28]	; (8006624 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006608:	4313      	orrs	r3, r2
 800660a:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800660c:	4b05      	ldr	r3, [pc, #20]	; (8006624 <LL_APB2_GRP1_EnableClock+0x2c>)
 800660e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4013      	ands	r3, r2
 8006614:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006616:	68fb      	ldr	r3, [r7, #12]
}
 8006618:	bf00      	nop
 800661a:	3714      	adds	r7, #20
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	40023800 	.word	0x40023800

08006628 <_ZN7ADCInit4InitEv>:
void MX_ADC3_Init(void);
ADC_HandleTypeDef hadc3;
//void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle);
//void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle);

void ADCInit::Init() {
 8006628:	b580      	push	{r7, lr}
 800662a:	af00      	add	r7, sp, #0
	MX_ADC1_Init();
 800662c:	f000 f806 	bl	800663c <_Z12MX_ADC1_Initv>
	MX_ADC2_Init();
 8006630:	f000 f91e 	bl	8006870 <_Z12MX_ADC2_Initv>
	MX_ADC3_Init();
 8006634:	f000 fa24 	bl	8006a80 <_Z12MX_ADC3_Initv>
}
 8006638:	bf00      	nop
 800663a:	bd80      	pop	{r7, pc}

0800663c <_Z12MX_ADC1_Initv>:



/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b096      	sub	sp, #88	; 0x58
 8006640:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8006642:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006646:	2200      	movs	r2, #0
 8006648:	601a      	str	r2, [r3, #0]
 800664a:	605a      	str	r2, [r3, #4]
 800664c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800664e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006652:	2200      	movs	r2, #0
 8006654:	601a      	str	r2, [r3, #0]
 8006656:	605a      	str	r2, [r3, #4]
 8006658:	609a      	str	r2, [r3, #8]
 800665a:	60da      	str	r2, [r3, #12]
 800665c:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800665e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]
 8006666:	605a      	str	r2, [r3, #4]
 8006668:	609a      	str	r2, [r3, #8]
 800666a:	60da      	str	r2, [r3, #12]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 800666c:	f107 0318 	add.w	r3, r7, #24
 8006670:	2200      	movs	r2, #0
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	605a      	str	r2, [r3, #4]
 8006676:	609a      	str	r2, [r3, #8]
 8006678:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800667a:	463b      	mov	r3, r7
 800667c:	2200      	movs	r2, #0
 800667e:	601a      	str	r2, [r3, #0]
 8006680:	605a      	str	r2, [r3, #4]
 8006682:	609a      	str	r2, [r3, #8]
 8006684:	60da      	str	r2, [r3, #12]
 8006686:	611a      	str	r2, [r3, #16]
 8006688:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 800668a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800668e:	f7ff ffb3 	bl	80065f8 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8006692:	2004      	movs	r0, #4
 8006694:	f7ff ff98 	bl	80065c8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8006698:	2001      	movs	r0, #1
 800669a:	f7ff ff95 	bl	80065c8 <LL_AHB1_GRP1_EnableClock>
  PC1   ------> ADC1_IN11
  PC2   ------> ADC1_IN12
  PA0-WKUP   ------> ADC1_IN0
  PA1   ------> ADC1_IN1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 800669e:	2307      	movs	r3, #7
 80066a0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80066a2:	2303      	movs	r3, #3
 80066a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80066a6:	2300      	movs	r3, #0
 80066a8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066aa:	463b      	mov	r3, r7
 80066ac:	4619      	mov	r1, r3
 80066ae:	4869      	ldr	r0, [pc, #420]	; (8006854 <_Z12MX_ADC1_Initv+0x218>)
 80066b0:	f7fc fb81 	bl	8002db6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 80066b4:	2303      	movs	r3, #3
 80066b6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80066b8:	2303      	movs	r3, #3
 80066ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80066bc:	2300      	movs	r3, #0
 80066be:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066c0:	463b      	mov	r3, r7
 80066c2:	4619      	mov	r1, r3
 80066c4:	4864      	ldr	r0, [pc, #400]	; (8006858 <_Z12MX_ADC1_Initv+0x21c>)
 80066c6:	f7fc fb76 	bl	8002db6 <LL_GPIO_Init>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 80066ca:	f7ff fdcd 	bl	8006268 <__NVIC_GetPriorityGrouping>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2200      	movs	r2, #0
 80066d2:	2102      	movs	r1, #2
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7ff fe23 	bl	8006320 <NVIC_EncodePriority>
 80066da:	4603      	mov	r3, r0
 80066dc:	4619      	mov	r1, r3
 80066de:	2012      	movs	r0, #18
 80066e0:	f7ff fdf0 	bl	80062c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 80066e4:	2012      	movs	r0, #18
 80066e6:	f7ff fdcd 	bl	8006284 <__NVIC_EnableIRQ>

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80066ea:	2300      	movs	r3, #0
 80066ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80066ee:	2300      	movs	r3, #0
 80066f0:	653b      	str	r3, [r7, #80]	; 0x50
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 80066f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066f6:	657b      	str	r3, [r7, #84]	; 0x54
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80066f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80066fc:	4619      	mov	r1, r3
 80066fe:	4857      	ldr	r0, [pc, #348]	; (800685c <_Z12MX_ADC1_Initv+0x220>)
 8006700:	f7fc f88c 	bl	800281c <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8006704:	2300      	movs	r3, #0
 8006706:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8006708:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800670c:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800670e:	2300      	movs	r3, #0
 8006710:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8006712:	2300      	movs	r3, #0
 8006714:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8006716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800671a:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800671c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006720:	4619      	mov	r1, r3
 8006722:	484e      	ldr	r0, [pc, #312]	; (800685c <_Z12MX_ADC1_Initv+0x220>)
 8006724:	f7fc f8a6 	bl	8002874 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8006728:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800672c:	484b      	ldr	r0, [pc, #300]	; (800685c <_Z12MX_ADC1_Initv+0x220>)
 800672e:	f7ff fe5b 	bl	80063e8 <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC1);
 8006732:	484a      	ldr	r0, [pc, #296]	; (800685c <_Z12MX_ADC1_Initv+0x220>)
 8006734:	f7ff ff27 	bl	8006586 <LL_ADC_DisableIT_EOCS>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8006738:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800673c:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 800673e:	2300      	movs	r3, #0
 8006740:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8006742:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006746:	4619      	mov	r1, r3
 8006748:	4845      	ldr	r0, [pc, #276]	; (8006860 <_Z12MX_ADC1_Initv+0x224>)
 800674a:	f7fc f81f 	bl	800278c <LL_ADC_CommonInit>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 800674e:	4a45      	ldr	r2, [pc, #276]	; (8006864 <_Z12MX_ADC1_Initv+0x228>)
 8006750:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006754:	4841      	ldr	r0, [pc, #260]	; (800685c <_Z12MX_ADC1_Initv+0x220>)
 8006756:	f7ff fe14 	bl	8006382 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_28CYCLES);
 800675a:	2202      	movs	r2, #2
 800675c:	4941      	ldr	r1, [pc, #260]	; (8006864 <_Z12MX_ADC1_Initv+0x228>)
 800675e:	483f      	ldr	r0, [pc, #252]	; (800685c <_Z12MX_ADC1_Initv+0x220>)
 8006760:	f7ff feb7 	bl	80064d2 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_12);
 8006764:	4a40      	ldr	r2, [pc, #256]	; (8006868 <_Z12MX_ADC1_Initv+0x22c>)
 8006766:	f240 2105 	movw	r1, #517	; 0x205
 800676a:	483c      	ldr	r0, [pc, #240]	; (800685c <_Z12MX_ADC1_Initv+0x220>)
 800676c:	f7ff fe09 	bl	8006382 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_28CYCLES);
 8006770:	2202      	movs	r2, #2
 8006772:	493d      	ldr	r1, [pc, #244]	; (8006868 <_Z12MX_ADC1_Initv+0x22c>)
 8006774:	4839      	ldr	r0, [pc, #228]	; (800685c <_Z12MX_ADC1_Initv+0x220>)
 8006776:	f7ff feac 	bl	80064d2 <LL_ADC_SetChannelSamplingTime>
  /** Configure Injected Channel
  */
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 800677a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800677e:	61bb      	str	r3, [r7, #24]
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 8006780:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006784:	61fb      	str	r3, [r7, #28]
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_1RANK;
 8006786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800678a:	623b      	str	r3, [r7, #32]
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 800678c:	2300      	movs	r3, #0
 800678e:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8006790:	f107 0318 	add.w	r3, r7, #24
 8006794:	4619      	mov	r1, r3
 8006796:	4831      	ldr	r0, [pc, #196]	; (800685c <_Z12MX_ADC1_Initv+0x220>)
 8006798:	f7fc f8b4 	bl	8002904 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 800679c:	482f      	ldr	r0, [pc, #188]	; (800685c <_Z12MX_ADC1_Initv+0x220>)
 800679e:	f7ff ff02 	bl	80065a6 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_0);
 80067a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80067a6:	2101      	movs	r1, #1
 80067a8:	482c      	ldr	r0, [pc, #176]	; (800685c <_Z12MX_ADC1_Initv+0x220>)
 80067aa:	f7ff fe30 	bl	800640e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 80067ae:	2200      	movs	r2, #0
 80067b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80067b4:	4829      	ldr	r0, [pc, #164]	; (800685c <_Z12MX_ADC1_Initv+0x220>)
 80067b6:	f7ff fe8c 	bl	80064d2 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_1, 0);
 80067ba:	2200      	movs	r2, #0
 80067bc:	2101      	movs	r1, #1
 80067be:	4827      	ldr	r0, [pc, #156]	; (800685c <_Z12MX_ADC1_Initv+0x220>)
 80067c0:	f7ff fe5f 	bl	8006482 <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 80067c4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80067c8:	4824      	ldr	r0, [pc, #144]	; (800685c <_Z12MX_ADC1_Initv+0x220>)
 80067ca:	f7ff fecb 	bl	8006564 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 80067ce:	f107 0318 	add.w	r3, r7, #24
 80067d2:	4619      	mov	r1, r3
 80067d4:	4821      	ldr	r0, [pc, #132]	; (800685c <_Z12MX_ADC1_Initv+0x220>)
 80067d6:	f7fc f895 	bl	8002904 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 80067da:	4820      	ldr	r0, [pc, #128]	; (800685c <_Z12MX_ADC1_Initv+0x220>)
 80067dc:	f7ff fee3 	bl	80065a6 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_11);
 80067e0:	4a22      	ldr	r2, [pc, #136]	; (800686c <_Z12MX_ADC1_Initv+0x230>)
 80067e2:	f241 1102 	movw	r1, #4354	; 0x1102
 80067e6:	481d      	ldr	r0, [pc, #116]	; (800685c <_Z12MX_ADC1_Initv+0x220>)
 80067e8:	f7ff fe11 	bl	800640e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 80067ec:	2200      	movs	r2, #0
 80067ee:	491f      	ldr	r1, [pc, #124]	; (800686c <_Z12MX_ADC1_Initv+0x230>)
 80067f0:	481a      	ldr	r0, [pc, #104]	; (800685c <_Z12MX_ADC1_Initv+0x220>)
 80067f2:	f7ff fe6e 	bl	80064d2 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_2, 0);
 80067f6:	2200      	movs	r2, #0
 80067f8:	f241 1102 	movw	r1, #4354	; 0x1102
 80067fc:	4817      	ldr	r0, [pc, #92]	; (800685c <_Z12MX_ADC1_Initv+0x220>)
 80067fe:	f7ff fe40 	bl	8006482 <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8006802:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8006806:	4815      	ldr	r0, [pc, #84]	; (800685c <_Z12MX_ADC1_Initv+0x220>)
 8006808:	f7ff feac 	bl	8006564 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 800680c:	f107 0318 	add.w	r3, r7, #24
 8006810:	4619      	mov	r1, r3
 8006812:	4812      	ldr	r0, [pc, #72]	; (800685c <_Z12MX_ADC1_Initv+0x220>)
 8006814:	f7fc f876 	bl	8002904 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 8006818:	4810      	ldr	r0, [pc, #64]	; (800685c <_Z12MX_ADC1_Initv+0x220>)
 800681a:	f7ff fec4 	bl	80065a6 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_10);
 800681e:	220a      	movs	r2, #10
 8006820:	f242 2103 	movw	r1, #8707	; 0x2203
 8006824:	480d      	ldr	r0, [pc, #52]	; (800685c <_Z12MX_ADC1_Initv+0x220>)
 8006826:	f7ff fdf2 	bl	800640e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_3CYCLES);
 800682a:	2200      	movs	r2, #0
 800682c:	210a      	movs	r1, #10
 800682e:	480b      	ldr	r0, [pc, #44]	; (800685c <_Z12MX_ADC1_Initv+0x220>)
 8006830:	f7ff fe4f 	bl	80064d2 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_3, 0);
 8006834:	2200      	movs	r2, #0
 8006836:	f242 2103 	movw	r1, #8707	; 0x2203
 800683a:	4808      	ldr	r0, [pc, #32]	; (800685c <_Z12MX_ADC1_Initv+0x220>)
 800683c:	f7ff fe21 	bl	8006482 <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8006840:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8006844:	4805      	ldr	r0, [pc, #20]	; (800685c <_Z12MX_ADC1_Initv+0x220>)
 8006846:	f7ff fe8d 	bl	8006564 <LL_ADC_INJ_StartConversionExtTrig>

}
 800684a:	bf00      	nop
 800684c:	3758      	adds	r7, #88	; 0x58
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	40020800 	.word	0x40020800
 8006858:	40020000 	.word	0x40020000
 800685c:	40012000 	.word	0x40012000
 8006860:	40012300 	.word	0x40012300
 8006864:	02300001 	.word	0x02300001
 8006868:	0060000c 	.word	0x0060000c
 800686c:	0030000b 	.word	0x0030000b

08006870 <_Z12MX_ADC2_Initv>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b092      	sub	sp, #72	; 0x48
 8006874:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8006876:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800687a:	2200      	movs	r2, #0
 800687c:	601a      	str	r2, [r3, #0]
 800687e:	605a      	str	r2, [r3, #4]
 8006880:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8006882:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006886:	2200      	movs	r2, #0
 8006888:	601a      	str	r2, [r3, #0]
 800688a:	605a      	str	r2, [r3, #4]
 800688c:	609a      	str	r2, [r3, #8]
 800688e:	60da      	str	r2, [r3, #12]
 8006890:	611a      	str	r2, [r3, #16]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 8006892:	f107 0318 	add.w	r3, r7, #24
 8006896:	2200      	movs	r2, #0
 8006898:	601a      	str	r2, [r3, #0]
 800689a:	605a      	str	r2, [r3, #4]
 800689c:	609a      	str	r2, [r3, #8]
 800689e:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068a0:	463b      	mov	r3, r7
 80068a2:	2200      	movs	r2, #0
 80068a4:	601a      	str	r2, [r3, #0]
 80068a6:	605a      	str	r2, [r3, #4]
 80068a8:	609a      	str	r2, [r3, #8]
 80068aa:	60da      	str	r2, [r3, #12]
 80068ac:	611a      	str	r2, [r3, #16]
 80068ae:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC2);
 80068b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80068b4:	f7ff fea0 	bl	80065f8 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80068b8:	2004      	movs	r0, #4
 80068ba:	f7ff fe85 	bl	80065c8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80068be:	2001      	movs	r0, #1
 80068c0:	f7ff fe82 	bl	80065c8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80068c4:	2002      	movs	r0, #2
 80068c6:	f7ff fe7f 	bl	80065c8 <LL_AHB1_GRP1_EnableClock>
  PC0   ------> ADC2_IN10
  PC1   ------> ADC2_IN11
  PA0-WKUP   ------> ADC2_IN0
  PB1   ------> ADC2_IN9
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 80068ca:	2303      	movs	r3, #3
 80068cc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80068ce:	2303      	movs	r3, #3
 80068d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80068d2:	2300      	movs	r3, #0
 80068d4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80068d6:	463b      	mov	r3, r7
 80068d8:	4619      	mov	r1, r3
 80068da:	4863      	ldr	r0, [pc, #396]	; (8006a68 <_Z12MX_ADC2_Initv+0x1f8>)
 80068dc:	f7fc fa6b 	bl	8002db6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80068e0:	2301      	movs	r3, #1
 80068e2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80068e4:	2303      	movs	r3, #3
 80068e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80068e8:	2300      	movs	r3, #0
 80068ea:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068ec:	463b      	mov	r3, r7
 80068ee:	4619      	mov	r1, r3
 80068f0:	485e      	ldr	r0, [pc, #376]	; (8006a6c <_Z12MX_ADC2_Initv+0x1fc>)
 80068f2:	f7fc fa60 	bl	8002db6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80068f6:	2302      	movs	r3, #2
 80068f8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80068fa:	2303      	movs	r3, #3
 80068fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80068fe:	2300      	movs	r3, #0
 8006900:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006902:	463b      	mov	r3, r7
 8006904:	4619      	mov	r1, r3
 8006906:	485a      	ldr	r0, [pc, #360]	; (8006a70 <_Z12MX_ADC2_Initv+0x200>)
 8006908:	f7fc fa55 	bl	8002db6 <LL_GPIO_Init>

  /* ADC2 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 800690c:	f7ff fcac 	bl	8006268 <__NVIC_GetPriorityGrouping>
 8006910:	4603      	mov	r3, r0
 8006912:	2200      	movs	r2, #0
 8006914:	2102      	movs	r1, #2
 8006916:	4618      	mov	r0, r3
 8006918:	f7ff fd02 	bl	8006320 <NVIC_EncodePriority>
 800691c:	4603      	mov	r3, r0
 800691e:	4619      	mov	r1, r3
 8006920:	2012      	movs	r0, #18
 8006922:	f7ff fccf 	bl	80062c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 8006926:	2012      	movs	r0, #18
 8006928:	f7ff fcac 	bl	8006284 <__NVIC_EnableIRQ>

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800692c:	2300      	movs	r3, #0
 800692e:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8006930:	2300      	movs	r3, #0
 8006932:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8006934:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006938:	647b      	str	r3, [r7, #68]	; 0x44
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 800693a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800693e:	4619      	mov	r1, r3
 8006940:	484c      	ldr	r0, [pc, #304]	; (8006a74 <_Z12MX_ADC2_Initv+0x204>)
 8006942:	f7fb ff6b 	bl	800281c <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8006946:	2300      	movs	r3, #0
 8006948:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800694a:	2300      	movs	r3, #0
 800694c:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800694e:	2300      	movs	r3, #0
 8006950:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8006952:	2300      	movs	r3, #0
 8006954:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8006956:	f44f 7380 	mov.w	r3, #256	; 0x100
 800695a:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 800695c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006960:	4619      	mov	r1, r3
 8006962:	4844      	ldr	r0, [pc, #272]	; (8006a74 <_Z12MX_ADC2_Initv+0x204>)
 8006964:	f7fb ff86 	bl	8002874 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC2, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8006968:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800696c:	4841      	ldr	r0, [pc, #260]	; (8006a74 <_Z12MX_ADC2_Initv+0x204>)
 800696e:	f7ff fd3b 	bl	80063e8 <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC2);
 8006972:	4840      	ldr	r0, [pc, #256]	; (8006a74 <_Z12MX_ADC2_Initv+0x204>)
 8006974:	f7ff fe07 	bl	8006586 <LL_ADC_DisableIT_EOCS>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_9);
 8006978:	4a3f      	ldr	r2, [pc, #252]	; (8006a78 <_Z12MX_ADC2_Initv+0x208>)
 800697a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800697e:	483d      	ldr	r0, [pc, #244]	; (8006a74 <_Z12MX_ADC2_Initv+0x204>)
 8006980:	f7ff fcff 	bl	8006382 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_3CYCLES);
 8006984:	2200      	movs	r2, #0
 8006986:	493c      	ldr	r1, [pc, #240]	; (8006a78 <_Z12MX_ADC2_Initv+0x208>)
 8006988:	483a      	ldr	r0, [pc, #232]	; (8006a74 <_Z12MX_ADC2_Initv+0x204>)
 800698a:	f7ff fda2 	bl	80064d2 <LL_ADC_SetChannelSamplingTime>
  /** Configure Injected Channel
  */
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 800698e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006992:	61bb      	str	r3, [r7, #24]
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 8006994:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006998:	61fb      	str	r3, [r7, #28]
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_1RANK;
 800699a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800699e:	623b      	str	r3, [r7, #32]
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 80069a0:	2300      	movs	r3, #0
 80069a2:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 80069a4:	f107 0318 	add.w	r3, r7, #24
 80069a8:	4619      	mov	r1, r3
 80069aa:	4832      	ldr	r0, [pc, #200]	; (8006a74 <_Z12MX_ADC2_Initv+0x204>)
 80069ac:	f7fb ffaa 	bl	8002904 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 80069b0:	4830      	ldr	r0, [pc, #192]	; (8006a74 <_Z12MX_ADC2_Initv+0x204>)
 80069b2:	f7ff fdf8 	bl	80065a6 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_0);
 80069b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80069ba:	2101      	movs	r1, #1
 80069bc:	482d      	ldr	r0, [pc, #180]	; (8006a74 <_Z12MX_ADC2_Initv+0x204>)
 80069be:	f7ff fd26 	bl	800640e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 80069c2:	2200      	movs	r2, #0
 80069c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80069c8:	482a      	ldr	r0, [pc, #168]	; (8006a74 <_Z12MX_ADC2_Initv+0x204>)
 80069ca:	f7ff fd82 	bl	80064d2 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_1, 0);
 80069ce:	2200      	movs	r2, #0
 80069d0:	2101      	movs	r1, #1
 80069d2:	4828      	ldr	r0, [pc, #160]	; (8006a74 <_Z12MX_ADC2_Initv+0x204>)
 80069d4:	f7ff fd55 	bl	8006482 <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 80069d8:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80069dc:	4825      	ldr	r0, [pc, #148]	; (8006a74 <_Z12MX_ADC2_Initv+0x204>)
 80069de:	f7ff fdc1 	bl	8006564 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel
  */
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 80069e2:	f107 0318 	add.w	r3, r7, #24
 80069e6:	4619      	mov	r1, r3
 80069e8:	4822      	ldr	r0, [pc, #136]	; (8006a74 <_Z12MX_ADC2_Initv+0x204>)
 80069ea:	f7fb ff8b 	bl	8002904 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 80069ee:	4821      	ldr	r0, [pc, #132]	; (8006a74 <_Z12MX_ADC2_Initv+0x204>)
 80069f0:	f7ff fdd9 	bl	80065a6 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_11);
 80069f4:	4a21      	ldr	r2, [pc, #132]	; (8006a7c <_Z12MX_ADC2_Initv+0x20c>)
 80069f6:	f241 1102 	movw	r1, #4354	; 0x1102
 80069fa:	481e      	ldr	r0, [pc, #120]	; (8006a74 <_Z12MX_ADC2_Initv+0x204>)
 80069fc:	f7ff fd07 	bl	800640e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 8006a00:	2200      	movs	r2, #0
 8006a02:	491e      	ldr	r1, [pc, #120]	; (8006a7c <_Z12MX_ADC2_Initv+0x20c>)
 8006a04:	481b      	ldr	r0, [pc, #108]	; (8006a74 <_Z12MX_ADC2_Initv+0x204>)
 8006a06:	f7ff fd64 	bl	80064d2 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_2, 0);
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f241 1102 	movw	r1, #4354	; 0x1102
 8006a10:	4818      	ldr	r0, [pc, #96]	; (8006a74 <_Z12MX_ADC2_Initv+0x204>)
 8006a12:	f7ff fd36 	bl	8006482 <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 8006a16:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8006a1a:	4816      	ldr	r0, [pc, #88]	; (8006a74 <_Z12MX_ADC2_Initv+0x204>)
 8006a1c:	f7ff fda2 	bl	8006564 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel
  */
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 8006a20:	f107 0318 	add.w	r3, r7, #24
 8006a24:	4619      	mov	r1, r3
 8006a26:	4813      	ldr	r0, [pc, #76]	; (8006a74 <_Z12MX_ADC2_Initv+0x204>)
 8006a28:	f7fb ff6c 	bl	8002904 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 8006a2c:	4811      	ldr	r0, [pc, #68]	; (8006a74 <_Z12MX_ADC2_Initv+0x204>)
 8006a2e:	f7ff fdba 	bl	80065a6 <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_10);
 8006a32:	220a      	movs	r2, #10
 8006a34:	f242 2103 	movw	r1, #8707	; 0x2203
 8006a38:	480e      	ldr	r0, [pc, #56]	; (8006a74 <_Z12MX_ADC2_Initv+0x204>)
 8006a3a:	f7ff fce8 	bl	800640e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_3CYCLES);
 8006a3e:	2200      	movs	r2, #0
 8006a40:	210a      	movs	r1, #10
 8006a42:	480c      	ldr	r0, [pc, #48]	; (8006a74 <_Z12MX_ADC2_Initv+0x204>)
 8006a44:	f7ff fd45 	bl	80064d2 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_3, 0);
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f242 2103 	movw	r1, #8707	; 0x2203
 8006a4e:	4809      	ldr	r0, [pc, #36]	; (8006a74 <_Z12MX_ADC2_Initv+0x204>)
 8006a50:	f7ff fd17 	bl	8006482 <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 8006a54:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8006a58:	4806      	ldr	r0, [pc, #24]	; (8006a74 <_Z12MX_ADC2_Initv+0x204>)
 8006a5a:	f7ff fd83 	bl	8006564 <LL_ADC_INJ_StartConversionExtTrig>

}
 8006a5e:	bf00      	nop
 8006a60:	3748      	adds	r7, #72	; 0x48
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	40020800 	.word	0x40020800
 8006a6c:	40020000 	.word	0x40020000
 8006a70:	40020400 	.word	0x40020400
 8006a74:	40012100 	.word	0x40012100
 8006a78:	03b00009 	.word	0x03b00009
 8006a7c:	0030000b 	.word	0x0030000b

08006a80 <_Z12MX_ADC3_Initv>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8006a86:	463b      	mov	r3, r7
 8006a88:	2200      	movs	r2, #0
 8006a8a:	601a      	str	r2, [r3, #0]
 8006a8c:	605a      	str	r2, [r3, #4]
 8006a8e:	609a      	str	r2, [r3, #8]
 8006a90:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8006a92:	4b26      	ldr	r3, [pc, #152]	; (8006b2c <_Z12MX_ADC3_Initv+0xac>)
 8006a94:	4a26      	ldr	r2, [pc, #152]	; (8006b30 <_Z12MX_ADC3_Initv+0xb0>)
 8006a96:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006a98:	4b24      	ldr	r3, [pc, #144]	; (8006b2c <_Z12MX_ADC3_Initv+0xac>)
 8006a9a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006a9e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8006aa0:	4b22      	ldr	r3, [pc, #136]	; (8006b2c <_Z12MX_ADC3_Initv+0xac>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8006aa6:	4b21      	ldr	r3, [pc, #132]	; (8006b2c <_Z12MX_ADC3_Initv+0xac>)
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8006aac:	4b1f      	ldr	r3, [pc, #124]	; (8006b2c <_Z12MX_ADC3_Initv+0xac>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8006ab2:	4b1e      	ldr	r3, [pc, #120]	; (8006b2c <_Z12MX_ADC3_Initv+0xac>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006aba:	4b1c      	ldr	r3, [pc, #112]	; (8006b2c <_Z12MX_ADC3_Initv+0xac>)
 8006abc:	2200      	movs	r2, #0
 8006abe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006ac0:	4b1a      	ldr	r3, [pc, #104]	; (8006b2c <_Z12MX_ADC3_Initv+0xac>)
 8006ac2:	4a1c      	ldr	r2, [pc, #112]	; (8006b34 <_Z12MX_ADC3_Initv+0xb4>)
 8006ac4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006ac6:	4b19      	ldr	r3, [pc, #100]	; (8006b2c <_Z12MX_ADC3_Initv+0xac>)
 8006ac8:	2200      	movs	r2, #0
 8006aca:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8006acc:	4b17      	ldr	r3, [pc, #92]	; (8006b2c <_Z12MX_ADC3_Initv+0xac>)
 8006ace:	2201      	movs	r2, #1
 8006ad0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8006ad2:	4b16      	ldr	r3, [pc, #88]	; (8006b2c <_Z12MX_ADC3_Initv+0xac>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006ada:	4b14      	ldr	r3, [pc, #80]	; (8006b2c <_Z12MX_ADC3_Initv+0xac>)
 8006adc:	2201      	movs	r2, #1
 8006ade:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8006ae0:	4812      	ldr	r0, [pc, #72]	; (8006b2c <_Z12MX_ADC3_Initv+0xac>)
 8006ae2:	f7fa fa6f 	bl	8000fc4 <HAL_ADC_Init>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	bf14      	ite	ne
 8006aec:	2301      	movne	r3, #1
 8006aee:	2300      	moveq	r3, #0
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <_Z12MX_ADC3_Initv+0x7a>
  {
	  ErrorHandler::ADC_Error_Handler();
 8006af6:	f000 f81f 	bl	8006b38 <_ZN12ErrorHandler17ADC_Error_HandlerEv>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8006afa:	230d      	movs	r3, #13
 8006afc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006afe:	2301      	movs	r3, #1
 8006b00:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8006b02:	2300      	movs	r3, #0
 8006b04:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8006b06:	463b      	mov	r3, r7
 8006b08:	4619      	mov	r1, r3
 8006b0a:	4808      	ldr	r0, [pc, #32]	; (8006b2c <_Z12MX_ADC3_Initv+0xac>)
 8006b0c:	f7fa fbfc 	bl	8001308 <HAL_ADC_ConfigChannel>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	bf14      	ite	ne
 8006b16:	2301      	movne	r3, #1
 8006b18:	2300      	moveq	r3, #0
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d001      	beq.n	8006b24 <_Z12MX_ADC3_Initv+0xa4>
  {
	  ErrorHandler::ADC_Error_Handler();
 8006b20:	f000 f80a 	bl	8006b38 <_ZN12ErrorHandler17ADC_Error_HandlerEv>
  }

}
 8006b24:	bf00      	nop
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	200031b0 	.word	0x200031b0
 8006b30:	40012200 	.word	0x40012200
 8006b34:	0f000001 	.word	0x0f000001

08006b38 <_ZN12ErrorHandler17ADC_Error_HandlerEv>:

ErrorHandler::~ErrorHandler() {
	// TODO Auto-generated destructor stub
}

void ErrorHandler::ADC_Error_Handler(){
 8006b38:	b480      	push	{r7}
 8006b3a:	af00      	add	r7, sp, #0
	//ADC Error Handler
	  /* USER CODE BEGIN Error_Handler_Debug */
	while(1){}
 8006b3c:	e7fe      	b.n	8006b3c <_ZN12ErrorHandler17ADC_Error_HandlerEv+0x4>
	...

08006b40 <__NVIC_GetPriorityGrouping>:
{
 8006b40:	b480      	push	{r7}
 8006b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006b44:	4b04      	ldr	r3, [pc, #16]	; (8006b58 <__NVIC_GetPriorityGrouping+0x18>)
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	0a1b      	lsrs	r3, r3, #8
 8006b4a:	f003 0307 	and.w	r3, r3, #7
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr
 8006b58:	e000ed00 	.word	0xe000ed00

08006b5c <__NVIC_EnableIRQ>:
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	4603      	mov	r3, r0
 8006b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	db0d      	blt.n	8006b8a <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	f003 021f 	and.w	r2, r3, #31
 8006b78:	4907      	ldr	r1, [pc, #28]	; (8006b98 <__NVIC_EnableIRQ+0x3c>)
 8006b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b7e:	095b      	lsrs	r3, r3, #5
 8006b80:	2001      	movs	r0, #1
 8006b82:	fa00 f202 	lsl.w	r2, r0, r2
 8006b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006b8a:	bf00      	nop
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	e000e100 	.word	0xe000e100

08006b9c <__NVIC_SetPriority>:
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	6039      	str	r1, [r7, #0]
 8006ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	db0c      	blt.n	8006bca <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	4a0e      	ldr	r2, [pc, #56]	; (8006bf0 <__NVIC_SetPriority+0x54>)
 8006bb6:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8006bba:	4608      	mov	r0, r1
 8006bbc:	011b      	lsls	r3, r3, #4
 8006bbe:	b2d9      	uxtb	r1, r3
 8006bc0:	1813      	adds	r3, r2, r0
 8006bc2:	460a      	mov	r2, r1
 8006bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006bc8:	e00c      	b.n	8006be4 <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	4909      	ldr	r1, [pc, #36]	; (8006bf4 <__NVIC_SetPriority+0x58>)
 8006bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	f003 030f 	and.w	r3, r3, #15
 8006bda:	3b04      	subs	r3, #4
 8006bdc:	0112      	lsls	r2, r2, #4
 8006bde:	b2d2      	uxtb	r2, r2
 8006be0:	440b      	add	r3, r1
 8006be2:	761a      	strb	r2, [r3, #24]
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	e000e100 	.word	0xe000e100
 8006bf4:	e000ed00 	.word	0xe000ed00

08006bf8 <NVIC_EncodePriority>:
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b089      	sub	sp, #36	; 0x24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f003 0307 	and.w	r3, r3, #7
 8006c0a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	f1c3 0307 	rsb	r3, r3, #7
 8006c12:	2b04      	cmp	r3, #4
 8006c14:	bf28      	it	cs
 8006c16:	2304      	movcs	r3, #4
 8006c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	2b06      	cmp	r3, #6
 8006c20:	d902      	bls.n	8006c28 <NVIC_EncodePriority+0x30>
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	3b03      	subs	r3, #3
 8006c26:	e000      	b.n	8006c2a <NVIC_EncodePriority+0x32>
 8006c28:	2300      	movs	r3, #0
 8006c2a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	fa02 f303 	lsl.w	r3, r2, r3
 8006c34:	1e5a      	subs	r2, r3, #1
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	401a      	ands	r2, r3
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	2101      	movs	r1, #1
 8006c42:	fa01 f303 	lsl.w	r3, r1, r3
 8006c46:	1e59      	subs	r1, r3, #1
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	400b      	ands	r3, r1
         );
 8006c4c:	4313      	orrs	r3, r2
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3724      	adds	r7, #36	; 0x24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
	...

08006c5c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8006c66:	4a13      	ldr	r2, [pc, #76]	; (8006cb4 <LL_SYSCFG_SetEXTISource+0x58>)
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	3302      	adds	r3, #2
 8006c6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	0c1b      	lsrs	r3, r3, #16
 8006c76:	43db      	mvns	r3, r3
 8006c78:	ea02 0103 	and.w	r1, r2, r3
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	0c1b      	lsrs	r3, r3, #16
 8006c80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	fa93 f3a3 	rbit	r3, r3
 8006c88:	60bb      	str	r3, [r7, #8]
  return result;
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	fab3 f383 	clz	r3, r3
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	461a      	mov	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	fa03 f202 	lsl.w	r2, r3, r2
 8006c9a:	4806      	ldr	r0, [pc, #24]	; (8006cb4 <LL_SYSCFG_SetEXTISource+0x58>)
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	430a      	orrs	r2, r1
 8006ca2:	3302      	adds	r3, #2
 8006ca4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8006ca8:	bf00      	nop
 8006caa:	3714      	adds	r7, #20
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr
 8006cb4:	40013800 	.word	0x40013800

08006cb8 <LL_GPIO_SetPinMode>:
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b089      	sub	sp, #36	; 0x24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	fa93 f3a3 	rbit	r3, r3
 8006cd2:	613b      	str	r3, [r7, #16]
  return result;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	fab3 f383 	clz	r3, r3
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	005b      	lsls	r3, r3, #1
 8006cde:	2103      	movs	r1, #3
 8006ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ce4:	43db      	mvns	r3, r3
 8006ce6:	401a      	ands	r2, r3
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	fa93 f3a3 	rbit	r3, r3
 8006cf2:	61bb      	str	r3, [r7, #24]
  return result;
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	fab3 f383 	clz	r3, r3
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	005b      	lsls	r3, r3, #1
 8006cfe:	6879      	ldr	r1, [r7, #4]
 8006d00:	fa01 f303 	lsl.w	r3, r1, r3
 8006d04:	431a      	orrs	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	601a      	str	r2, [r3, #0]
}
 8006d0a:	bf00      	nop
 8006d0c:	3724      	adds	r7, #36	; 0x24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <LL_GPIO_SetPinPull>:
{
 8006d16:	b480      	push	{r7}
 8006d18:	b089      	sub	sp, #36	; 0x24
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	60f8      	str	r0, [r7, #12]
 8006d1e:	60b9      	str	r1, [r7, #8]
 8006d20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	68da      	ldr	r2, [r3, #12]
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	fa93 f3a3 	rbit	r3, r3
 8006d30:	613b      	str	r3, [r7, #16]
  return result;
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	fab3 f383 	clz	r3, r3
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	005b      	lsls	r3, r3, #1
 8006d3c:	2103      	movs	r1, #3
 8006d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d42:	43db      	mvns	r3, r3
 8006d44:	401a      	ands	r2, r3
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	fa93 f3a3 	rbit	r3, r3
 8006d50:	61bb      	str	r3, [r7, #24]
  return result;
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	fab3 f383 	clz	r3, r3
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	005b      	lsls	r3, r3, #1
 8006d5c:	6879      	ldr	r1, [r7, #4]
 8006d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d62:	431a      	orrs	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	60da      	str	r2, [r3, #12]
}
 8006d68:	bf00      	nop
 8006d6a:	3724      	adds	r7, #36	; 0x24
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	041a      	lsls	r2, r3, #16
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	619a      	str	r2, [r3, #24]
}
 8006d86:	bf00      	nop
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
	...

08006d94 <LL_AHB1_GRP1_EnableClock>:
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8006d9c:	4b08      	ldr	r3, [pc, #32]	; (8006dc0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006d9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4907      	ldr	r1, [pc, #28]	; (8006dc0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8006da8:	4b05      	ldr	r3, [pc, #20]	; (8006dc0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006daa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4013      	ands	r3, r2
 8006db0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006db2:	68fb      	ldr	r3, [r7, #12]
}
 8006db4:	bf00      	nop
 8006db6:	3714      	adds	r7, #20
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	40023800 	.word	0x40023800

08006dc4 <_ZN8GPIOInit4InitEv>:
	// TODO Auto-generated destructor stub
}

void MX_GPIO_Init(void);

void GPIOInit::Init() {
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8006dc8:	f000 f802 	bl	8006dd0 <_Z12MX_GPIO_Initv>
}
 8006dcc:	bf00      	nop
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <_Z12MX_GPIO_Initv>:

void MX_GPIO_Init(void)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b088      	sub	sp, #32
 8006dd4:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8006dd6:	f107 0318 	add.w	r3, r7, #24
 8006dda:	2200      	movs	r2, #0
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006de0:	463b      	mov	r3, r7
 8006de2:	2200      	movs	r2, #0
 8006de4:	601a      	str	r2, [r3, #0]
 8006de6:	605a      	str	r2, [r3, #4]
 8006de8:	609a      	str	r2, [r3, #8]
 8006dea:	60da      	str	r2, [r3, #12]
 8006dec:	611a      	str	r2, [r3, #16]
 8006dee:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8006df0:	2004      	movs	r0, #4
 8006df2:	f7ff ffcf 	bl	8006d94 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8006df6:	2080      	movs	r0, #128	; 0x80
 8006df8:	f7ff ffcc 	bl	8006d94 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8006dfc:	2001      	movs	r0, #1
 8006dfe:	f7ff ffc9 	bl	8006d94 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8006e02:	2002      	movs	r0, #2
 8006e04:	f7ff ffc6 	bl	8006d94 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8006e08:	2120      	movs	r1, #32
 8006e0a:	482c      	ldr	r0, [pc, #176]	; (8006ebc <_Z12MX_GPIO_Initv+0xec>)
 8006e0c:	f7ff ffb2 	bl	8006d74 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12);
 8006e10:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8006e14:	482a      	ldr	r0, [pc, #168]	; (8006ec0 <_Z12MX_GPIO_Initv+0xf0>)
 8006e16:	f7ff ffad 	bl	8006d74 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8006e1a:	492a      	ldr	r1, [pc, #168]	; (8006ec4 <_Z12MX_GPIO_Initv+0xf4>)
 8006e1c:	2002      	movs	r0, #2
 8006e1e:	f7ff ff1d 	bl	8006c5c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8006e22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006e26:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006e30:	2302      	movs	r3, #2
 8006e32:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8006e34:	f107 0318 	add.w	r3, r7, #24
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7fb fe3b 	bl	8002ab4 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006e44:	481e      	ldr	r0, [pc, #120]	; (8006ec0 <_Z12MX_GPIO_Initv+0xf0>)
 8006e46:	f7ff ff66 	bl	8006d16 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006e50:	481b      	ldr	r0, [pc, #108]	; (8006ec0 <_Z12MX_GPIO_Initv+0xf0>)
 8006e52:	f7ff ff31 	bl	8006cb8 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8006e56:	2320      	movs	r3, #32
 8006e58:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006e62:	2300      	movs	r3, #0
 8006e64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006e66:	2300      	movs	r3, #0
 8006e68:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8006e6a:	463b      	mov	r3, r7
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	4813      	ldr	r0, [pc, #76]	; (8006ebc <_Z12MX_GPIO_Initv+0xec>)
 8006e70:	f7fb ffa1 	bl	8002db6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8006e74:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006e78:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006e82:	2300      	movs	r3, #0
 8006e84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006e86:	2300      	movs	r3, #0
 8006e88:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e8a:	463b      	mov	r3, r7
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	480c      	ldr	r0, [pc, #48]	; (8006ec0 <_Z12MX_GPIO_Initv+0xf0>)
 8006e90:	f7fb ff91 	bl	8002db6 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006e94:	f7ff fe54 	bl	8006b40 <__NVIC_GetPriorityGrouping>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7ff feaa 	bl	8006bf8 <NVIC_EncodePriority>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	2028      	movs	r0, #40	; 0x28
 8006eaa:	f7ff fe77 	bl	8006b9c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006eae:	2028      	movs	r0, #40	; 0x28
 8006eb0:	f7ff fe54 	bl	8006b5c <__NVIC_EnableIRQ>

}
 8006eb4:	bf00      	nop
 8006eb6:	3720      	adds	r7, #32
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	40020000 	.word	0x40020000
 8006ec0:	40020800 	.word	0x40020800
 8006ec4:	00f00003 	.word	0x00f00003

08006ec8 <LL_TIM_EnableCounter>:
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f043 0201 	orr.w	r2, r3, #1
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	601a      	str	r2, [r3, #0]
}
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <LL_TIM_SetAutoReload>:
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <LL_TIM_CC_EnableChannel>:
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a1a      	ldr	r2, [r3, #32]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	431a      	orrs	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	621a      	str	r2, [r3, #32]
}
 8006f1a:	bf00      	nop
 8006f1c:	370c      	adds	r7, #12
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <LL_TIM_EnableAllOutputs>:
{
 8006f26:	b480      	push	{r7}
 8006f28:	b083      	sub	sp, #12
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f32:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	645a      	str	r2, [r3, #68]	; 0x44
}
 8006f3a:	bf00      	nop
 8006f3c:	370c      	adds	r7, #12
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <_ZN3PWM6setTIMEP11TIM_TypeDef>:


#include "PWM.hpp"


void PWM::setTIM(TIM_TypeDef* pTIMx){
 8006f46:	b480      	push	{r7}
 8006f48:	b083      	sub	sp, #12
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	6039      	str	r1, [r7, #0]
	mTIMx = pTIMx;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	601a      	str	r2, [r3, #0]
}
 8006f56:	bf00      	nop
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <_ZN3PWM5setCHEi>:

//void PWM::setCH(__IO uint32_t pCCR);

void PWM::setCH(int pCH){
 8006f62:	b480      	push	{r7}
 8006f64:	b083      	sub	sp, #12
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
 8006f6a:	6039      	str	r1, [r7, #0]
	mCH = pCH;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	605a      	str	r2, [r3, #4]
}
 8006f72:	bf00      	nop
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <_ZN3PWM5fInitEi>:
	LL_TIM_EnableAllOutputs(mTIMx);// need
	//PWM TIM Init end

}

void PWM::fInit(int pTimReload){
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b082      	sub	sp, #8
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	6039      	str	r1, [r7, #0]

	mTimReload = pTimReload;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	609a      	str	r2, [r3, #8]

	if(mCH==0){//error check
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d100      	bne.n	8006f98 <_ZN3PWM5fInitEi+0x1a>
		while(1){}
 8006f96:	e7fe      	b.n	8006f96 <_ZN3PWM5fInitEi+0x18>
	}

	//mREG Init
	if (mCH == 1){
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d105      	bne.n	8006fac <_ZN3PWM5fInitEi+0x2e>
		mREG=&(mTIMx->CCR1);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 2){
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d105      	bne.n	8006fc0 <_ZN3PWM5fInitEi+0x42>
		mREG=&(mTIMx->CCR2);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 3){
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	2b03      	cmp	r3, #3
 8006fc6:	d105      	bne.n	8006fd4 <_ZN3PWM5fInitEi+0x56>
		mREG=&(mTIMx->CCR3);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 4){
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	2b04      	cmp	r3, #4
 8006fda:	d105      	bne.n	8006fe8 <_ZN3PWM5fInitEi+0x6a>
		mREG=&(mTIMx->CCR4);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	60da      	str	r2, [r3, #12]
	}

	if(mREG==NULL){//error check
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d100      	bne.n	8006ff2 <_ZN3PWM5fInitEi+0x74>
		while(1){}
 8006ff0:	e7fe      	b.n	8006ff0 <_ZN3PWM5fInitEi+0x72>
	}
	//mREG Init end

	//PWM Channel Init
	if(mTIMx==NULL){//error check
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d100      	bne.n	8006ffc <_ZN3PWM5fInitEi+0x7e>
		while(1){}
 8006ffa:	e7fe      	b.n	8006ffa <_ZN3PWM5fInitEi+0x7c>
	}
	if (mCH == 1){
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d105      	bne.n	8007010 <_ZN3PWM5fInitEi+0x92>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH1);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2101      	movs	r1, #1
 800700a:	4618      	mov	r0, r3
 800700c:	f7ff ff7a 	bl	8006f04 <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 2){
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	2b02      	cmp	r3, #2
 8007016:	d105      	bne.n	8007024 <_ZN3PWM5fInitEi+0xa6>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH2);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2110      	movs	r1, #16
 800701e:	4618      	mov	r0, r3
 8007020:	f7ff ff70 	bl	8006f04 <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 3){
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	2b03      	cmp	r3, #3
 800702a:	d106      	bne.n	800703a <_ZN3PWM5fInitEi+0xbc>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH3);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007034:	4618      	mov	r0, r3
 8007036:	f7ff ff65 	bl	8006f04 <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 4){
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2b04      	cmp	r3, #4
 8007040:	d106      	bne.n	8007050 <_ZN3PWM5fInitEi+0xd2>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH4);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800704a:	4618      	mov	r0, r3
 800704c:	f7ff ff5a 	bl	8006f04 <LL_TIM_CC_EnableChannel>
	}
	//PWM Channel Init end

	//PWM TIM Init
	LL_TIM_EnableCounter(mTIMx);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4618      	mov	r0, r3
 8007056:	f7ff ff37 	bl	8006ec8 <LL_TIM_EnableCounter>

	//auto reload Init
	LL_TIM_SetAutoReload(mTIMx, pTimReload);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	4611      	mov	r1, r2
 8007062:	4618      	mov	r0, r3
 8007064:	f7ff ff40 	bl	8006ee8 <LL_TIM_SetAutoReload>

	//LL_TIM_GenerateEvent_UPDATE(TIM1);//
	LL_TIM_EnableAllOutputs(mTIMx);// need
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4618      	mov	r0, r3
 800706e:	f7ff ff5a 	bl	8006f26 <LL_TIM_EnableAllOutputs>
	//PWM TIM Init end

}
 8007072:	bf00      	nop
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <_ZN3PWM6f2DutyEf>:
void PWM::fDuty(float pfDuty){
	int pDuty = pfDuty * (float)mTimReload;
	WRITE_REG(*mREG, pDuty);
}

void PWM::f2Duty(float pfDuty){
 800707a:	b480      	push	{r7}
 800707c:	b085      	sub	sp, #20
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
 8007082:	ed87 0a00 	vstr	s0, [r7]
	int pDuty = (pfDuty + 1)/2 * (float)mTimReload;
 8007086:	edd7 7a00 	vldr	s15, [r7]
 800708a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800708e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007092:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007096:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	ee07 3a90 	vmov	s15, r3
 80070a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070ae:	ee17 3a90 	vmov	r3, s15
 80070b2:	60fb      	str	r3, [r7, #12]
	WRITE_REG(*mREG, pDuty);
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	601a      	str	r2, [r3, #0]
}
 80070bc:	bf00      	nop
 80070be:	3714      	adds	r7, #20
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <__NVIC_GetPriorityGrouping>:
{
 80070c8:	b480      	push	{r7}
 80070ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80070cc:	4b04      	ldr	r3, [pc, #16]	; (80070e0 <__NVIC_GetPriorityGrouping+0x18>)
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	0a1b      	lsrs	r3, r3, #8
 80070d2:	f003 0307 	and.w	r3, r3, #7
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr
 80070e0:	e000ed00 	.word	0xe000ed00

080070e4 <__NVIC_EnableIRQ>:
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	4603      	mov	r3, r0
 80070ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	db0d      	blt.n	8007112 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	f003 021f 	and.w	r2, r3, #31
 8007100:	4907      	ldr	r1, [pc, #28]	; (8007120 <__NVIC_EnableIRQ+0x3c>)
 8007102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007106:	095b      	lsrs	r3, r3, #5
 8007108:	2001      	movs	r0, #1
 800710a:	fa00 f202 	lsl.w	r2, r0, r2
 800710e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007112:	bf00      	nop
 8007114:	370c      	adds	r7, #12
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	e000e100 	.word	0xe000e100

08007124 <__NVIC_SetPriority>:
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	4603      	mov	r3, r0
 800712c:	6039      	str	r1, [r7, #0]
 800712e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007134:	2b00      	cmp	r3, #0
 8007136:	db0c      	blt.n	8007152 <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	b2db      	uxtb	r3, r3
 800713c:	4a0e      	ldr	r2, [pc, #56]	; (8007178 <__NVIC_SetPriority+0x54>)
 800713e:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8007142:	4608      	mov	r0, r1
 8007144:	011b      	lsls	r3, r3, #4
 8007146:	b2d9      	uxtb	r1, r3
 8007148:	1813      	adds	r3, r2, r0
 800714a:	460a      	mov	r2, r1
 800714c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007150:	e00c      	b.n	800716c <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	b2da      	uxtb	r2, r3
 8007156:	4909      	ldr	r1, [pc, #36]	; (800717c <__NVIC_SetPriority+0x58>)
 8007158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800715c:	b2db      	uxtb	r3, r3
 800715e:	f003 030f 	and.w	r3, r3, #15
 8007162:	3b04      	subs	r3, #4
 8007164:	0112      	lsls	r2, r2, #4
 8007166:	b2d2      	uxtb	r2, r2
 8007168:	440b      	add	r3, r1
 800716a:	761a      	strb	r2, [r3, #24]
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr
 8007178:	e000e100 	.word	0xe000e100
 800717c:	e000ed00 	.word	0xe000ed00

08007180 <NVIC_EncodePriority>:
{
 8007180:	b480      	push	{r7}
 8007182:	b089      	sub	sp, #36	; 0x24
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f003 0307 	and.w	r3, r3, #7
 8007192:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	f1c3 0307 	rsb	r3, r3, #7
 800719a:	2b04      	cmp	r3, #4
 800719c:	bf28      	it	cs
 800719e:	2304      	movcs	r3, #4
 80071a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	3304      	adds	r3, #4
 80071a6:	2b06      	cmp	r3, #6
 80071a8:	d902      	bls.n	80071b0 <NVIC_EncodePriority+0x30>
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	3b03      	subs	r3, #3
 80071ae:	e000      	b.n	80071b2 <NVIC_EncodePriority+0x32>
 80071b0:	2300      	movs	r3, #0
 80071b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	2201      	movs	r2, #1
 80071b8:	fa02 f303 	lsl.w	r3, r2, r3
 80071bc:	1e5a      	subs	r2, r3, #1
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	401a      	ands	r2, r3
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	2101      	movs	r1, #1
 80071ca:	fa01 f303 	lsl.w	r3, r1, r3
 80071ce:	1e59      	subs	r1, r3, #1
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	400b      	ands	r3, r1
         );
 80071d4:	4313      	orrs	r3, r2
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3724      	adds	r7, #36	; 0x24
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <LL_TIM_DisableARRPreload>:
{
 80071e2:	b480      	push	{r7}
 80071e4:	b083      	sub	sp, #12
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	601a      	str	r2, [r3, #0]
}
 80071f6:	bf00      	nop
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
	...

08007204 <LL_TIM_OC_DisableFast>:
{
 8007204:	b4b0      	push	{r4, r5, r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d01c      	beq.n	800724e <LL_TIM_OC_DisableFast+0x4a>
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	2b04      	cmp	r3, #4
 8007218:	d017      	beq.n	800724a <LL_TIM_OC_DisableFast+0x46>
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	2b10      	cmp	r3, #16
 800721e:	d012      	beq.n	8007246 <LL_TIM_OC_DisableFast+0x42>
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	2b40      	cmp	r3, #64	; 0x40
 8007224:	d00d      	beq.n	8007242 <LL_TIM_OC_DisableFast+0x3e>
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800722c:	d007      	beq.n	800723e <LL_TIM_OC_DisableFast+0x3a>
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007234:	d101      	bne.n	800723a <LL_TIM_OC_DisableFast+0x36>
 8007236:	2305      	movs	r3, #5
 8007238:	e00a      	b.n	8007250 <LL_TIM_OC_DisableFast+0x4c>
 800723a:	2306      	movs	r3, #6
 800723c:	e008      	b.n	8007250 <LL_TIM_OC_DisableFast+0x4c>
 800723e:	2304      	movs	r3, #4
 8007240:	e006      	b.n	8007250 <LL_TIM_OC_DisableFast+0x4c>
 8007242:	2303      	movs	r3, #3
 8007244:	e004      	b.n	8007250 <LL_TIM_OC_DisableFast+0x4c>
 8007246:	2302      	movs	r3, #2
 8007248:	e002      	b.n	8007250 <LL_TIM_OC_DisableFast+0x4c>
 800724a:	2301      	movs	r3, #1
 800724c:	e000      	b.n	8007250 <LL_TIM_OC_DisableFast+0x4c>
 800724e:	2300      	movs	r3, #0
 8007250:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	3318      	adds	r3, #24
 8007256:	461a      	mov	r2, r3
 8007258:	4629      	mov	r1, r5
 800725a:	4b09      	ldr	r3, [pc, #36]	; (8007280 <LL_TIM_OC_DisableFast+0x7c>)
 800725c:	5c5b      	ldrb	r3, [r3, r1]
 800725e:	4413      	add	r3, r2
 8007260:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8007262:	6822      	ldr	r2, [r4, #0]
 8007264:	4629      	mov	r1, r5
 8007266:	4b07      	ldr	r3, [pc, #28]	; (8007284 <LL_TIM_OC_DisableFast+0x80>)
 8007268:	5c5b      	ldrb	r3, [r3, r1]
 800726a:	4619      	mov	r1, r3
 800726c:	2304      	movs	r3, #4
 800726e:	408b      	lsls	r3, r1
 8007270:	43db      	mvns	r3, r3
 8007272:	4013      	ands	r3, r2
 8007274:	6023      	str	r3, [r4, #0]
}
 8007276:	bf00      	nop
 8007278:	370c      	adds	r7, #12
 800727a:	46bd      	mov	sp, r7
 800727c:	bcb0      	pop	{r4, r5, r7}
 800727e:	4770      	bx	lr
 8007280:	08009a90 	.word	0x08009a90
 8007284:	08009a98 	.word	0x08009a98

08007288 <LL_TIM_OC_EnablePreload>:
{
 8007288:	b4b0      	push	{r4, r5, r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d01c      	beq.n	80072d2 <LL_TIM_OC_EnablePreload+0x4a>
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	2b04      	cmp	r3, #4
 800729c:	d017      	beq.n	80072ce <LL_TIM_OC_EnablePreload+0x46>
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	2b10      	cmp	r3, #16
 80072a2:	d012      	beq.n	80072ca <LL_TIM_OC_EnablePreload+0x42>
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	2b40      	cmp	r3, #64	; 0x40
 80072a8:	d00d      	beq.n	80072c6 <LL_TIM_OC_EnablePreload+0x3e>
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072b0:	d007      	beq.n	80072c2 <LL_TIM_OC_EnablePreload+0x3a>
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072b8:	d101      	bne.n	80072be <LL_TIM_OC_EnablePreload+0x36>
 80072ba:	2305      	movs	r3, #5
 80072bc:	e00a      	b.n	80072d4 <LL_TIM_OC_EnablePreload+0x4c>
 80072be:	2306      	movs	r3, #6
 80072c0:	e008      	b.n	80072d4 <LL_TIM_OC_EnablePreload+0x4c>
 80072c2:	2304      	movs	r3, #4
 80072c4:	e006      	b.n	80072d4 <LL_TIM_OC_EnablePreload+0x4c>
 80072c6:	2303      	movs	r3, #3
 80072c8:	e004      	b.n	80072d4 <LL_TIM_OC_EnablePreload+0x4c>
 80072ca:	2302      	movs	r3, #2
 80072cc:	e002      	b.n	80072d4 <LL_TIM_OC_EnablePreload+0x4c>
 80072ce:	2301      	movs	r3, #1
 80072d0:	e000      	b.n	80072d4 <LL_TIM_OC_EnablePreload+0x4c>
 80072d2:	2300      	movs	r3, #0
 80072d4:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	3318      	adds	r3, #24
 80072da:	461a      	mov	r2, r3
 80072dc:	4629      	mov	r1, r5
 80072de:	4b09      	ldr	r3, [pc, #36]	; (8007304 <LL_TIM_OC_EnablePreload+0x7c>)
 80072e0:	5c5b      	ldrb	r3, [r3, r1]
 80072e2:	4413      	add	r3, r2
 80072e4:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80072e6:	6822      	ldr	r2, [r4, #0]
 80072e8:	4629      	mov	r1, r5
 80072ea:	4b07      	ldr	r3, [pc, #28]	; (8007308 <LL_TIM_OC_EnablePreload+0x80>)
 80072ec:	5c5b      	ldrb	r3, [r3, r1]
 80072ee:	4619      	mov	r1, r3
 80072f0:	2308      	movs	r3, #8
 80072f2:	408b      	lsls	r3, r1
 80072f4:	4313      	orrs	r3, r2
 80072f6:	6023      	str	r3, [r4, #0]
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bcb0      	pop	{r4, r5, r7}
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	08009a90 	.word	0x08009a90
 8007308:	08009a98 	.word	0x08009a98

0800730c <LL_TIM_SetTriggerOutput>:
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	431a      	orrs	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	605a      	str	r2, [r3, #4]
}
 8007326:	bf00      	nop
 8007328:	370c      	adds	r7, #12
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <LL_TIM_SetSlaveMode>:
{
 8007332:	b480      	push	{r7}
 8007334:	b083      	sub	sp, #12
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	f023 0207 	bic.w	r2, r3, #7
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	431a      	orrs	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	609a      	str	r2, [r3, #8]
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <LL_TIM_SetTriggerInput>:
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	431a      	orrs	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	609a      	str	r2, [r3, #8]
}
 8007372:	bf00      	nop
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <LL_TIM_DisableMasterSlaveMode>:
{
 800737e:	b480      	push	{r7}
 8007380:	b083      	sub	sp, #12
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	609a      	str	r2, [r3, #8]
}
 8007392:	bf00      	nop
 8007394:	370c      	adds	r7, #12
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <LL_TIM_DisableIT_TRIG>:
{
 800739e:	b480      	push	{r7}
 80073a0:	b083      	sub	sp, #12
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TIE);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	60da      	str	r2, [r3, #12]
}
 80073b2:	bf00      	nop
 80073b4:	370c      	adds	r7, #12
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <LL_TIM_DisableDMAReq_TRIG>:
{
 80073be:	b480      	push	{r7}
 80073c0:	b083      	sub	sp, #12
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TDE);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	60da      	str	r2, [r3, #12]
}
 80073d2:	bf00      	nop
 80073d4:	370c      	adds	r7, #12
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
	...

080073e0 <LL_AHB1_GRP1_EnableClock>:
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80073e8:	4b08      	ldr	r3, [pc, #32]	; (800740c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80073ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4907      	ldr	r1, [pc, #28]	; (800740c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80073f0:	4313      	orrs	r3, r2
 80073f2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80073f4:	4b05      	ldr	r3, [pc, #20]	; (800740c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80073f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4013      	ands	r3, r2
 80073fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80073fe:	68fb      	ldr	r3, [r7, #12]
}
 8007400:	bf00      	nop
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	40023800 	.word	0x40023800

08007410 <LL_APB2_GRP1_EnableClock>:
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8007418:	4b08      	ldr	r3, [pc, #32]	; (800743c <LL_APB2_GRP1_EnableClock+0x2c>)
 800741a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4907      	ldr	r1, [pc, #28]	; (800743c <LL_APB2_GRP1_EnableClock+0x2c>)
 8007420:	4313      	orrs	r3, r2
 8007422:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007424:	4b05      	ldr	r3, [pc, #20]	; (800743c <LL_APB2_GRP1_EnableClock+0x2c>)
 8007426:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4013      	ands	r3, r2
 800742c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800742e:	68fb      	ldr	r3, [r7, #12]
}
 8007430:	bf00      	nop
 8007432:	3714      	adds	r7, #20
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	40023800 	.word	0x40023800

08007440 <_ZN7TIMInit4InitEv>:
}

void MX_TIM1_Init(void);


void TIMInit::Init() {
 8007440:	b580      	push	{r7, lr}
 8007442:	af00      	add	r7, sp, #0
	MX_TIM1_Init();
 8007444:	f000 f802 	bl	800744c <_Z12MX_TIM1_Initv>
}
 8007448:	bf00      	nop
 800744a:	bd80      	pop	{r7, pc}

0800744c <_Z12MX_TIM1_Initv>:

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b09a      	sub	sp, #104	; 0x68
 8007450:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8007452:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007456:	2200      	movs	r2, #0
 8007458:	601a      	str	r2, [r3, #0]
 800745a:	605a      	str	r2, [r3, #4]
 800745c:	609a      	str	r2, [r3, #8]
 800745e:	60da      	str	r2, [r3, #12]
 8007460:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8007462:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007466:	2220      	movs	r2, #32
 8007468:	2100      	movs	r1, #0
 800746a:	4618      	mov	r0, r3
 800746c:	f000 fcbb 	bl	8007de6 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8007470:	f107 031c 	add.w	r3, r7, #28
 8007474:	2200      	movs	r2, #0
 8007476:	601a      	str	r2, [r3, #0]
 8007478:	605a      	str	r2, [r3, #4]
 800747a:	609a      	str	r2, [r3, #8]
 800747c:	60da      	str	r2, [r3, #12]
 800747e:	611a      	str	r2, [r3, #16]
 8007480:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007482:	1d3b      	adds	r3, r7, #4
 8007484:	2200      	movs	r2, #0
 8007486:	601a      	str	r2, [r3, #0]
 8007488:	605a      	str	r2, [r3, #4]
 800748a:	609a      	str	r2, [r3, #8]
 800748c:	60da      	str	r2, [r3, #12]
 800748e:	611a      	str	r2, [r3, #16]
 8007490:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8007492:	2001      	movs	r0, #1
 8007494:	f7ff ffbc 	bl	8007410 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8007498:	2001      	movs	r0, #1
 800749a:	f7ff ffa1 	bl	80073e0 <LL_AHB1_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA6   ------> TIM1_BKIN
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800749e:	2340      	movs	r3, #64	; 0x40
 80074a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80074a2:	2302      	movs	r3, #2
 80074a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80074a6:	2300      	movs	r3, #0
 80074a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80074aa:	2300      	movs	r3, #0
 80074ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80074ae:	2302      	movs	r3, #2
 80074b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80074b2:	2301      	movs	r3, #1
 80074b4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074b6:	1d3b      	adds	r3, r7, #4
 80074b8:	4619      	mov	r1, r3
 80074ba:	4870      	ldr	r0, [pc, #448]	; (800767c <_Z12MX_TIM1_Initv+0x230>)
 80074bc:	f7fb fc7b 	bl	8002db6 <LL_GPIO_Init>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 1));
 80074c0:	f7ff fe02 	bl	80070c8 <__NVIC_GetPriorityGrouping>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2201      	movs	r2, #1
 80074c8:	2104      	movs	r1, #4
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7ff fe58 	bl	8007180 <NVIC_EncodePriority>
 80074d0:	4603      	mov	r3, r0
 80074d2:	4619      	mov	r1, r3
 80074d4:	2018      	movs	r0, #24
 80074d6:	f7ff fe25 	bl	8007124 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80074da:	2018      	movs	r0, #24
 80074dc:	f7ff fe02 	bl	80070e4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80074e0:	f7ff fdf2 	bl	80070c8 <__NVIC_GetPriorityGrouping>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2200      	movs	r2, #0
 80074e8:	2100      	movs	r1, #0
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7ff fe48 	bl	8007180 <NVIC_EncodePriority>
 80074f0:	4603      	mov	r3, r0
 80074f2:	4619      	mov	r1, r3
 80074f4:	2019      	movs	r0, #25
 80074f6:	f7ff fe15 	bl	8007124 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80074fa:	2019      	movs	r0, #25
 80074fc:	f7ff fdf2 	bl	80070e4 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 0;
 8007500:	2300      	movs	r3, #0
 8007502:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_UP;
 8007506:	2320      	movs	r3, #32
 8007508:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 4000;
 800750a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800750e:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV2;
 8007510:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007514:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 8007516:	2300      	movs	r3, #0
 8007518:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800751c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007520:	4619      	mov	r1, r3
 8007522:	4857      	ldr	r0, [pc, #348]	; (8007680 <_Z12MX_TIM1_Initv+0x234>)
 8007524:	f7fb feac 	bl	8003280 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8007528:	4855      	ldr	r0, [pc, #340]	; (8007680 <_Z12MX_TIM1_Initv+0x234>)
 800752a:	f7ff fe5a 	bl	80071e2 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 800752e:	2101      	movs	r1, #1
 8007530:	4853      	ldr	r0, [pc, #332]	; (8007680 <_Z12MX_TIM1_Initv+0x234>)
 8007532:	f7ff fea9 	bl	8007288 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8007536:	2360      	movs	r3, #96	; 0x60
 8007538:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800753a:	2300      	movs	r3, #0
 800753c:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800753e:	2300      	movs	r3, #0
 8007540:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 8007542:	2300      	movs	r3, #0
 8007544:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8007546:	2300      	movs	r3, #0
 8007548:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 800754a:	2300      	movs	r3, #0
 800754c:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 800754e:	2300      	movs	r3, #0
 8007550:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8007552:	2300      	movs	r3, #0
 8007554:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8007556:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800755a:	461a      	mov	r2, r3
 800755c:	2101      	movs	r1, #1
 800755e:	4848      	ldr	r0, [pc, #288]	; (8007680 <_Z12MX_TIM1_Initv+0x234>)
 8007560:	f7fb ff28 	bl	80033b4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8007564:	2101      	movs	r1, #1
 8007566:	4846      	ldr	r0, [pc, #280]	; (8007680 <_Z12MX_TIM1_Initv+0x234>)
 8007568:	f7ff fe4c 	bl	8007204 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 800756c:	2110      	movs	r1, #16
 800756e:	4844      	ldr	r0, [pc, #272]	; (8007680 <_Z12MX_TIM1_Initv+0x234>)
 8007570:	f7ff fe8a 	bl	8007288 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8007574:	2300      	movs	r3, #0
 8007576:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8007578:	2300      	movs	r3, #0
 800757a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800757c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007580:	461a      	mov	r2, r3
 8007582:	2110      	movs	r1, #16
 8007584:	483e      	ldr	r0, [pc, #248]	; (8007680 <_Z12MX_TIM1_Initv+0x234>)
 8007586:	f7fb ff15 	bl	80033b4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 800758a:	2110      	movs	r1, #16
 800758c:	483c      	ldr	r0, [pc, #240]	; (8007680 <_Z12MX_TIM1_Initv+0x234>)
 800758e:	f7ff fe39 	bl	8007204 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8007592:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007596:	483a      	ldr	r0, [pc, #232]	; (8007680 <_Z12MX_TIM1_Initv+0x234>)
 8007598:	f7ff fe76 	bl	8007288 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800759c:	2300      	movs	r3, #0
 800759e:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80075a0:	2300      	movs	r3, #0
 80075a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80075a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80075a8:	461a      	mov	r2, r3
 80075aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80075ae:	4834      	ldr	r0, [pc, #208]	; (8007680 <_Z12MX_TIM1_Initv+0x234>)
 80075b0:	f7fb ff00 	bl	80033b4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 80075b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80075b8:	4831      	ldr	r0, [pc, #196]	; (8007680 <_Z12MX_TIM1_Initv+0x234>)
 80075ba:	f7ff fe23 	bl	8007204 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 80075be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80075c2:	482f      	ldr	r0, [pc, #188]	; (8007680 <_Z12MX_TIM1_Initv+0x234>)
 80075c4:	f7ff fe60 	bl	8007288 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 80075c8:	2370      	movs	r3, #112	; 0x70
 80075ca:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80075cc:	2300      	movs	r3, #0
 80075ce:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80075d0:	2300      	movs	r3, #0
 80075d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80075d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80075d8:	461a      	mov	r2, r3
 80075da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80075de:	4828      	ldr	r0, [pc, #160]	; (8007680 <_Z12MX_TIM1_Initv+0x234>)
 80075e0:	f7fb fee8 	bl	80033b4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 80075e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80075e8:	4825      	ldr	r0, [pc, #148]	; (8007680 <_Z12MX_TIM1_Initv+0x234>)
 80075ea:	f7ff fe0b 	bl	8007204 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerInput(TIM1, LL_TIM_TS_ITR1);
 80075ee:	2110      	movs	r1, #16
 80075f0:	4823      	ldr	r0, [pc, #140]	; (8007680 <_Z12MX_TIM1_Initv+0x234>)
 80075f2:	f7ff feb1 	bl	8007358 <LL_TIM_SetTriggerInput>
  LL_TIM_SetSlaveMode(TIM1, LL_TIM_SLAVEMODE_TRIGGER);
 80075f6:	2106      	movs	r1, #6
 80075f8:	4821      	ldr	r0, [pc, #132]	; (8007680 <_Z12MX_TIM1_Initv+0x234>)
 80075fa:	f7ff fe9a 	bl	8007332 <LL_TIM_SetSlaveMode>
  LL_TIM_DisableIT_TRIG(TIM1);
 80075fe:	4820      	ldr	r0, [pc, #128]	; (8007680 <_Z12MX_TIM1_Initv+0x234>)
 8007600:	f7ff fecd 	bl	800739e <LL_TIM_DisableIT_TRIG>
  LL_TIM_DisableDMAReq_TRIG(TIM1);
 8007604:	481e      	ldr	r0, [pc, #120]	; (8007680 <_Z12MX_TIM1_Initv+0x234>)
 8007606:	f7ff feda 	bl	80073be <LL_TIM_DisableDMAReq_TRIG>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 800760a:	2100      	movs	r1, #0
 800760c:	481c      	ldr	r0, [pc, #112]	; (8007680 <_Z12MX_TIM1_Initv+0x234>)
 800760e:	f7ff fe7d 	bl	800730c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8007612:	481b      	ldr	r0, [pc, #108]	; (8007680 <_Z12MX_TIM1_Initv+0x234>)
 8007614:	f7ff feb3 	bl	800737e <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_ENABLE;
 8007618:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800761c:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_ENABLE;
 800761e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007622:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_1;
 8007624:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007628:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 800762a:	2300      	movs	r3, #0
 800762c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8007630:	2300      	movs	r3, #0
 8007632:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8007634:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007638:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 800763a:	2300      	movs	r3, #0
 800763c:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 800763e:	f107 031c 	add.w	r3, r7, #28
 8007642:	4619      	mov	r1, r3
 8007644:	480e      	ldr	r0, [pc, #56]	; (8007680 <_Z12MX_TIM1_Initv+0x234>)
 8007646:	f7fb feed 	bl	8003424 <LL_TIM_BDTR_Init>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800764a:	2001      	movs	r0, #1
 800764c:	f7ff fec8 	bl	80073e0 <LL_AHB1_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8007650:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8007654:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007656:	2302      	movs	r3, #2
 8007658:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800765a:	2302      	movs	r3, #2
 800765c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800765e:	2300      	movs	r3, #0
 8007660:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007662:	2302      	movs	r3, #2
 8007664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8007666:	2301      	movs	r3, #1
 8007668:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800766a:	1d3b      	adds	r3, r7, #4
 800766c:	4619      	mov	r1, r3
 800766e:	4803      	ldr	r0, [pc, #12]	; (800767c <_Z12MX_TIM1_Initv+0x230>)
 8007670:	f7fb fba1 	bl	8002db6 <LL_GPIO_Init>

}
 8007674:	bf00      	nop
 8007676:	3768      	adds	r7, #104	; 0x68
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	40020000 	.word	0x40020000
 8007680:	40010000 	.word	0x40010000

08007684 <LL_USART_Enable>:
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	60da      	str	r2, [r3, #12]
}
 8007698:	bf00      	nop
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	695b      	ldr	r3, [r3, #20]
 80076bc:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	615a      	str	r2, [r3, #20]
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <LL_AHB1_GRP1_EnableClock>:
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80076d8:	4b08      	ldr	r3, [pc, #32]	; (80076fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80076da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4907      	ldr	r1, [pc, #28]	; (80076fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80076e4:	4b05      	ldr	r3, [pc, #20]	; (80076fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80076e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4013      	ands	r3, r2
 80076ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80076ee:	68fb      	ldr	r3, [r7, #12]
}
 80076f0:	bf00      	nop
 80076f2:	3714      	adds	r7, #20
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	40023800 	.word	0x40023800

08007700 <LL_APB1_GRP1_EnableClock>:
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8007708:	4b08      	ldr	r3, [pc, #32]	; (800772c <LL_APB1_GRP1_EnableClock+0x2c>)
 800770a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4907      	ldr	r1, [pc, #28]	; (800772c <LL_APB1_GRP1_EnableClock+0x2c>)
 8007710:	4313      	orrs	r3, r2
 8007712:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8007714:	4b05      	ldr	r3, [pc, #20]	; (800772c <LL_APB1_GRP1_EnableClock+0x2c>)
 8007716:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4013      	ands	r3, r2
 800771c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800771e:	68fb      	ldr	r3, [r7, #12]
}
 8007720:	bf00      	nop
 8007722:	3714      	adds	r7, #20
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	40023800 	.word	0x40023800

08007730 <_ZN9USARTInit4InitEv>:
//UART_HandleTypeDef huart2;
//void MX_USART2_HAL_UART_Init(void);
//void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle);


void USARTInit::Init() {
 8007730:	b580      	push	{r7, lr}
 8007732:	af00      	add	r7, sp, #0
	MX_USART2_LL_UART_Init();
 8007734:	f000 f802 	bl	800773c <_Z22MX_USART2_LL_UART_Initv>
	//MX_USART2_HAL_UART_Init();
}
 8007738:	bf00      	nop
 800773a:	bd80      	pop	{r7, pc}

0800773c <_Z22MX_USART2_LL_UART_Initv>:

void MX_USART2_LL_UART_Init(void)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b08e      	sub	sp, #56	; 0x38
 8007740:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8007742:	f107 031c 	add.w	r3, r7, #28
 8007746:	2200      	movs	r2, #0
 8007748:	601a      	str	r2, [r3, #0]
 800774a:	605a      	str	r2, [r3, #4]
 800774c:	609a      	str	r2, [r3, #8]
 800774e:	60da      	str	r2, [r3, #12]
 8007750:	611a      	str	r2, [r3, #16]
 8007752:	615a      	str	r2, [r3, #20]
 8007754:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007756:	1d3b      	adds	r3, r7, #4
 8007758:	2200      	movs	r2, #0
 800775a:	601a      	str	r2, [r3, #0]
 800775c:	605a      	str	r2, [r3, #4]
 800775e:	609a      	str	r2, [r3, #8]
 8007760:	60da      	str	r2, [r3, #12]
 8007762:	611a      	str	r2, [r3, #16]
 8007764:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8007766:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800776a:	f7ff ffc9 	bl	8007700 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800776e:	2001      	movs	r0, #1
 8007770:	f7ff ffae 	bl	80076d0 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8007774:	230c      	movs	r3, #12
 8007776:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007778:	2302      	movs	r3, #2
 800777a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800777c:	2303      	movs	r3, #3
 800777e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007780:	2300      	movs	r3, #0
 8007782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8007784:	2301      	movs	r3, #1
 8007786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8007788:	2307      	movs	r3, #7
 800778a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800778c:	1d3b      	adds	r3, r7, #4
 800778e:	4619      	mov	r1, r3
 8007790:	4810      	ldr	r0, [pc, #64]	; (80077d4 <_Z22MX_USART2_LL_UART_Initv+0x98>)
 8007792:	f7fb fb10 	bl	8002db6 <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 8007796:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800779a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800779c:	2300      	movs	r3, #0
 800779e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80077a0:	2300      	movs	r3, #0
 80077a2:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80077a4:	2300      	movs	r3, #0
 80077a6:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80077a8:	230c      	movs	r3, #12
 80077aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80077ac:	2300      	movs	r3, #0
 80077ae:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80077b0:	2300      	movs	r3, #0
 80077b2:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80077b4:	f107 031c 	add.w	r3, r7, #28
 80077b8:	4619      	mov	r1, r3
 80077ba:	4807      	ldr	r0, [pc, #28]	; (80077d8 <_Z22MX_USART2_LL_UART_Initv+0x9c>)
 80077bc:	f7fc f910 	bl	80039e0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80077c0:	4805      	ldr	r0, [pc, #20]	; (80077d8 <_Z22MX_USART2_LL_UART_Initv+0x9c>)
 80077c2:	f7ff ff6f 	bl	80076a4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80077c6:	4804      	ldr	r0, [pc, #16]	; (80077d8 <_Z22MX_USART2_LL_UART_Initv+0x9c>)
 80077c8:	f7ff ff5c 	bl	8007684 <LL_USART_Enable>

}
 80077cc:	bf00      	nop
 80077ce:	3738      	adds	r7, #56	; 0x38
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	40020000 	.word	0x40020000
 80077d8:	40004400 	.word	0x40004400

080077dc <arm_sin_f32>:
 80077dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80077e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077e4:	d42c      	bmi.n	8007840 <arm_sin_f32+0x64>
 80077e6:	eddf 7a20 	vldr	s15, [pc, #128]	; 8007868 <arm_sin_f32+0x8c>
 80077ea:	ee20 0a27 	vmul.f32	s0, s0, s15
 80077ee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80077f2:	d432      	bmi.n	800785a <arm_sin_f32+0x7e>
 80077f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077f8:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800786c <arm_sin_f32+0x90>
 80077fc:	4a1c      	ldr	r2, [pc, #112]	; (8007870 <arm_sin_f32+0x94>)
 80077fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007802:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007806:	ee20 0a26 	vmul.f32	s0, s0, s13
 800780a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800780e:	ee17 3a90 	vmov	r3, s15
 8007812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007816:	ee07 3a90 	vmov	s15, r3
 800781a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8007822:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007826:	edd1 6a01 	vldr	s13, [r1, #4]
 800782a:	ed91 0a00 	vldr	s0, [r1]
 800782e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007832:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007836:	ee27 0a00 	vmul.f32	s0, s14, s0
 800783a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800783e:	4770      	bx	lr
 8007840:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8007874 <arm_sin_f32+0x98>
 8007844:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800784c:	da0b      	bge.n	8007866 <arm_sin_f32+0x8a>
 800784e:	eddf 7a06 	vldr	s15, [pc, #24]	; 8007868 <arm_sin_f32+0x8c>
 8007852:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007856:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800785a:	ee17 3a90 	vmov	r3, s15
 800785e:	3b01      	subs	r3, #1
 8007860:	ee07 3a90 	vmov	s15, r3
 8007864:	e7c6      	b.n	80077f4 <arm_sin_f32+0x18>
 8007866:	4770      	bx	lr
 8007868:	3e22f983 	.word	0x3e22f983
 800786c:	44000000 	.word	0x44000000
 8007870:	08009aa0 	.word	0x08009aa0
 8007874:	b44c02cd 	.word	0xb44c02cd

08007878 <arm_cos_f32>:
 8007878:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80078ec <arm_cos_f32+0x74>
 800787c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007880:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8007884:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007888:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800788c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007890:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007894:	d504      	bpl.n	80078a0 <arm_cos_f32+0x28>
 8007896:	ee17 3a90 	vmov	r3, s15
 800789a:	3b01      	subs	r3, #1
 800789c:	ee07 3a90 	vmov	s15, r3
 80078a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078a4:	eddf 6a12 	vldr	s13, [pc, #72]	; 80078f0 <arm_cos_f32+0x78>
 80078a8:	4a12      	ldr	r2, [pc, #72]	; (80078f4 <arm_cos_f32+0x7c>)
 80078aa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80078ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078b2:	ee20 0a26 	vmul.f32	s0, s0, s13
 80078b6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80078ba:	ee17 3a90 	vmov	r3, s15
 80078be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078c2:	ee07 3a90 	vmov	s15, r3
 80078c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ca:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80078ce:	ee70 7a67 	vsub.f32	s15, s0, s15
 80078d2:	edd1 6a01 	vldr	s13, [r1, #4]
 80078d6:	ed91 0a00 	vldr	s0, [r1]
 80078da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80078de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80078e2:	ee27 0a00 	vmul.f32	s0, s14, s0
 80078e6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80078ea:	4770      	bx	lr
 80078ec:	3e22f983 	.word	0x3e22f983
 80078f0:	44000000 	.word	0x44000000
 80078f4:	08009aa0 	.word	0x08009aa0

080078f8 <_ZdlPv>:
 80078f8:	f000 ba62 	b.w	8007dc0 <free>

080078fc <_ZdlPvj>:
 80078fc:	f7ff bffc 	b.w	80078f8 <_ZdlPv>

08007900 <fmodl>:
 8007900:	f000 b8ac 	b.w	8007a5c <fmod>

08007904 <_ZSt19__throw_logic_errorPKc>:
 8007904:	b508      	push	{r3, lr}
 8007906:	f000 fa21 	bl	8007d4c <abort>

0800790a <_ZSt24__throw_out_of_range_fmtPKcz>:
 800790a:	b40f      	push	{r0, r1, r2, r3}
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	f107 0410 	add.w	r4, r7, #16
 8007916:	f854 5b04 	ldr.w	r5, [r4], #4
 800791a:	4628      	mov	r0, r5
 800791c:	f7f8 fc74 	bl	8000208 <strlen>
 8007920:	f200 230e 	addw	r3, r0, #526	; 0x20e
 8007924:	f023 0307 	bic.w	r3, r3, #7
 8007928:	ebad 0d03 	sub.w	sp, sp, r3
 800792c:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8007930:	4623      	mov	r3, r4
 8007932:	462a      	mov	r2, r5
 8007934:	4668      	mov	r0, sp
 8007936:	607c      	str	r4, [r7, #4]
 8007938:	f000 f850 	bl	80079dc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 800793c:	f000 fa06 	bl	8007d4c <abort>

08007940 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8007940:	b580      	push	{r7, lr}
 8007942:	b09c      	sub	sp, #112	; 0x70
 8007944:	af00      	add	r7, sp, #0
 8007946:	1a0e      	subs	r6, r1, r0
 8007948:	4680      	mov	r8, r0
 800794a:	2269      	movs	r2, #105	; 0x69
 800794c:	490e      	ldr	r1, [pc, #56]	; (8007988 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 800794e:	1d38      	adds	r0, r7, #4
 8007950:	f000 fa3e 	bl	8007dd0 <memcpy>
 8007954:	f106 0377 	add.w	r3, r6, #119	; 0x77
 8007958:	f023 0307 	bic.w	r3, r3, #7
 800795c:	ebad 0d03 	sub.w	sp, sp, r3
 8007960:	466c      	mov	r4, sp
 8007962:	2268      	movs	r2, #104	; 0x68
 8007964:	1d39      	adds	r1, r7, #4
 8007966:	1c75      	adds	r5, r6, #1
 8007968:	4620      	mov	r0, r4
 800796a:	f000 fa31 	bl	8007dd0 <memcpy>
 800796e:	4425      	add	r5, r4
 8007970:	4632      	mov	r2, r6
 8007972:	4641      	mov	r1, r8
 8007974:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007978:	f000 fa2a 	bl	8007dd0 <memcpy>
 800797c:	2300      	movs	r3, #0
 800797e:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 8007982:	4620      	mov	r0, r4
 8007984:	f7ff ffbe 	bl	8007904 <_ZSt19__throw_logic_errorPKc>
 8007988:	0800a2af 	.word	0x0800a2af

0800798c <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 800798c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800798e:	af00      	add	r7, sp, #0
 8007990:	b086      	sub	sp, #24
 8007992:	466d      	mov	r5, sp
 8007994:	f105 040c 	add.w	r4, r5, #12
 8007998:	f8df e03c 	ldr.w	lr, [pc, #60]	; 80079d8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 800799c:	4623      	mov	r3, r4
 800799e:	f04f 0c0a 	mov.w	ip, #10
 80079a2:	fbb2 f6fc 	udiv	r6, r2, ip
 80079a6:	fb0c 2216 	mls	r2, ip, r6, r2
 80079aa:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80079ae:	f803 2d01 	strb.w	r2, [r3, #-1]!
 80079b2:	4632      	mov	r2, r6
 80079b4:	2e00      	cmp	r6, #0
 80079b6:	d1f4      	bne.n	80079a2 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 80079b8:	1ae4      	subs	r4, r4, r3
 80079ba:	428c      	cmp	r4, r1
 80079bc:	d808      	bhi.n	80079d0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 80079be:	f1c4 010c 	rsb	r1, r4, #12
 80079c2:	4622      	mov	r2, r4
 80079c4:	4429      	add	r1, r5
 80079c6:	f000 fa03 	bl	8007dd0 <memcpy>
 80079ca:	4620      	mov	r0, r4
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80079d4:	e7f9      	b.n	80079ca <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 80079d6:	bf00      	nop
 80079d8:	0800a2a4 	.word	0x0800a2a4

080079dc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 80079dc:	3901      	subs	r1, #1
 80079de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079e2:	4606      	mov	r6, r0
 80079e4:	4615      	mov	r5, r2
 80079e6:	1847      	adds	r7, r0, r1
 80079e8:	4604      	mov	r4, r0
 80079ea:	782a      	ldrb	r2, [r5, #0]
 80079ec:	b392      	cbz	r2, 8007a54 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x78>
 80079ee:	42bc      	cmp	r4, r7
 80079f0:	d22c      	bcs.n	8007a4c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 80079f2:	2a25      	cmp	r2, #37	; 0x25
 80079f4:	d107      	bne.n	8007a06 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 80079f6:	786a      	ldrb	r2, [r5, #1]
 80079f8:	2a73      	cmp	r2, #115	; 0x73
 80079fa:	d009      	beq.n	8007a10 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x34>
 80079fc:	2a7a      	cmp	r2, #122	; 0x7a
 80079fe:	d012      	beq.n	8007a26 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4a>
 8007a00:	2a25      	cmp	r2, #37	; 0x25
 8007a02:	d100      	bne.n	8007a06 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8007a04:	3501      	adds	r5, #1
 8007a06:	782a      	ldrb	r2, [r5, #0]
 8007a08:	7022      	strb	r2, [r4, #0]
 8007a0a:	3501      	adds	r5, #1
 8007a0c:	3401      	adds	r4, #1
 8007a0e:	e7ec      	b.n	80079ea <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8007a10:	1d19      	adds	r1, r3, #4
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	3b01      	subs	r3, #1
 8007a16:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8007a1a:	b1a2      	cbz	r2, 8007a46 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6a>
 8007a1c:	42bc      	cmp	r4, r7
 8007a1e:	d015      	beq.n	8007a4c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 8007a20:	f804 2b01 	strb.w	r2, [r4], #1
 8007a24:	e7f7      	b.n	8007a16 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3a>
 8007a26:	78aa      	ldrb	r2, [r5, #2]
 8007a28:	2a75      	cmp	r2, #117	; 0x75
 8007a2a:	d1ec      	bne.n	8007a06 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	1b39      	subs	r1, r7, r4
 8007a30:	4620      	mov	r0, r4
 8007a32:	f103 0804 	add.w	r8, r3, #4
 8007a36:	f7ff ffa9 	bl	800798c <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8007a3a:	2800      	cmp	r0, #0
 8007a3c:	dd06      	ble.n	8007a4c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 8007a3e:	4404      	add	r4, r0
 8007a40:	3503      	adds	r5, #3
 8007a42:	4643      	mov	r3, r8
 8007a44:	e7d1      	b.n	80079ea <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8007a46:	3502      	adds	r5, #2
 8007a48:	460b      	mov	r3, r1
 8007a4a:	e7ce      	b.n	80079ea <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8007a4c:	4621      	mov	r1, r4
 8007a4e:	4630      	mov	r0, r6
 8007a50:	f7ff ff76 	bl	8007940 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8007a54:	7022      	strb	r2, [r4, #0]
 8007a56:	1ba0      	subs	r0, r4, r6
 8007a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007a5c <fmod>:
 8007a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a60:	ed2d 8b02 	vpush	{d8}
 8007a64:	b08b      	sub	sp, #44	; 0x2c
 8007a66:	ec55 4b10 	vmov	r4, r5, d0
 8007a6a:	ec57 6b11 	vmov	r6, r7, d1
 8007a6e:	f000 f859 	bl	8007b24 <__ieee754_fmod>
 8007a72:	4b2a      	ldr	r3, [pc, #168]	; (8007b1c <fmod+0xc0>)
 8007a74:	eeb0 8a40 	vmov.f32	s16, s0
 8007a78:	eef0 8a60 	vmov.f32	s17, s1
 8007a7c:	f993 8000 	ldrsb.w	r8, [r3]
 8007a80:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8007a84:	d030      	beq.n	8007ae8 <fmod+0x8c>
 8007a86:	4632      	mov	r2, r6
 8007a88:	463b      	mov	r3, r7
 8007a8a:	4630      	mov	r0, r6
 8007a8c:	4639      	mov	r1, r7
 8007a8e:	f7f9 f819 	bl	8000ac4 <__aeabi_dcmpun>
 8007a92:	bb48      	cbnz	r0, 8007ae8 <fmod+0x8c>
 8007a94:	4622      	mov	r2, r4
 8007a96:	462b      	mov	r3, r5
 8007a98:	4620      	mov	r0, r4
 8007a9a:	4629      	mov	r1, r5
 8007a9c:	f7f9 f812 	bl	8000ac4 <__aeabi_dcmpun>
 8007aa0:	4681      	mov	r9, r0
 8007aa2:	bb08      	cbnz	r0, 8007ae8 <fmod+0x8c>
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	4639      	mov	r1, r7
 8007aac:	f7f8 ffd8 	bl	8000a60 <__aeabi_dcmpeq>
 8007ab0:	b1d0      	cbz	r0, 8007ae8 <fmod+0x8c>
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	4b1a      	ldr	r3, [pc, #104]	; (8007b20 <fmod+0xc4>)
 8007ab8:	9301      	str	r3, [sp, #4]
 8007aba:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007abe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007ac2:	f8cd 9020 	str.w	r9, [sp, #32]
 8007ac6:	f1b8 0f00 	cmp.w	r8, #0
 8007aca:	d116      	bne.n	8007afa <fmod+0x9e>
 8007acc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007ad0:	4668      	mov	r0, sp
 8007ad2:	f000 f939 	bl	8007d48 <matherr>
 8007ad6:	b1d8      	cbz	r0, 8007b10 <fmod+0xb4>
 8007ad8:	9b08      	ldr	r3, [sp, #32]
 8007ada:	b11b      	cbz	r3, 8007ae4 <fmod+0x88>
 8007adc:	f000 f93e 	bl	8007d5c <__errno>
 8007ae0:	9b08      	ldr	r3, [sp, #32]
 8007ae2:	6003      	str	r3, [r0, #0]
 8007ae4:	ed9d 8b06 	vldr	d8, [sp, #24]
 8007ae8:	eeb0 0a48 	vmov.f32	s0, s16
 8007aec:	eef0 0a68 	vmov.f32	s1, s17
 8007af0:	b00b      	add	sp, #44	; 0x2c
 8007af2:	ecbd 8b02 	vpop	{d8}
 8007af6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007afa:	2200      	movs	r2, #0
 8007afc:	2300      	movs	r3, #0
 8007afe:	4610      	mov	r0, r2
 8007b00:	4619      	mov	r1, r3
 8007b02:	f7f8 fe6f 	bl	80007e4 <__aeabi_ddiv>
 8007b06:	f1b8 0f02 	cmp.w	r8, #2
 8007b0a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007b0e:	d1df      	bne.n	8007ad0 <fmod+0x74>
 8007b10:	f000 f924 	bl	8007d5c <__errno>
 8007b14:	2321      	movs	r3, #33	; 0x21
 8007b16:	6003      	str	r3, [r0, #0]
 8007b18:	e7de      	b.n	8007ad8 <fmod+0x7c>
 8007b1a:	bf00      	nop
 8007b1c:	2000000c 	.word	0x2000000c
 8007b20:	0800a318 	.word	0x0800a318

08007b24 <__ieee754_fmod>:
 8007b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b28:	ec53 2b11 	vmov	r2, r3, d1
 8007b2c:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8007b30:	ea5e 0402 	orrs.w	r4, lr, r2
 8007b34:	ec51 0b10 	vmov	r0, r1, d0
 8007b38:	461e      	mov	r6, r3
 8007b3a:	ee11 5a10 	vmov	r5, s2
 8007b3e:	4694      	mov	ip, r2
 8007b40:	d00c      	beq.n	8007b5c <__ieee754_fmod+0x38>
 8007b42:	4c7a      	ldr	r4, [pc, #488]	; (8007d2c <__ieee754_fmod+0x208>)
 8007b44:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8007b48:	45a0      	cmp	r8, r4
 8007b4a:	4689      	mov	r9, r1
 8007b4c:	dc06      	bgt.n	8007b5c <__ieee754_fmod+0x38>
 8007b4e:	4254      	negs	r4, r2
 8007b50:	4314      	orrs	r4, r2
 8007b52:	4f77      	ldr	r7, [pc, #476]	; (8007d30 <__ieee754_fmod+0x20c>)
 8007b54:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8007b58:	42bc      	cmp	r4, r7
 8007b5a:	d909      	bls.n	8007b70 <__ieee754_fmod+0x4c>
 8007b5c:	f7f8 fd18 	bl	8000590 <__aeabi_dmul>
 8007b60:	4602      	mov	r2, r0
 8007b62:	460b      	mov	r3, r1
 8007b64:	f7f8 fe3e 	bl	80007e4 <__aeabi_ddiv>
 8007b68:	ec41 0b10 	vmov	d0, r0, r1
 8007b6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b70:	45f0      	cmp	r8, lr
 8007b72:	ee10 2a10 	vmov	r2, s0
 8007b76:	4607      	mov	r7, r0
 8007b78:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 8007b7c:	dc0a      	bgt.n	8007b94 <__ieee754_fmod+0x70>
 8007b7e:	dbf3      	blt.n	8007b68 <__ieee754_fmod+0x44>
 8007b80:	42a8      	cmp	r0, r5
 8007b82:	d3f1      	bcc.n	8007b68 <__ieee754_fmod+0x44>
 8007b84:	d106      	bne.n	8007b94 <__ieee754_fmod+0x70>
 8007b86:	496b      	ldr	r1, [pc, #428]	; (8007d34 <__ieee754_fmod+0x210>)
 8007b88:	0fe4      	lsrs	r4, r4, #31
 8007b8a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8007b8e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007b92:	e7e9      	b.n	8007b68 <__ieee754_fmod+0x44>
 8007b94:	4b68      	ldr	r3, [pc, #416]	; (8007d38 <__ieee754_fmod+0x214>)
 8007b96:	4598      	cmp	r8, r3
 8007b98:	dc49      	bgt.n	8007c2e <__ieee754_fmod+0x10a>
 8007b9a:	f1b8 0f00 	cmp.w	r8, #0
 8007b9e:	d13d      	bne.n	8007c1c <__ieee754_fmod+0xf8>
 8007ba0:	4866      	ldr	r0, [pc, #408]	; (8007d3c <__ieee754_fmod+0x218>)
 8007ba2:	4611      	mov	r1, r2
 8007ba4:	2900      	cmp	r1, #0
 8007ba6:	dc36      	bgt.n	8007c16 <__ieee754_fmod+0xf2>
 8007ba8:	459e      	cmp	lr, r3
 8007baa:	dc51      	bgt.n	8007c50 <__ieee754_fmod+0x12c>
 8007bac:	f1be 0f00 	cmp.w	lr, #0
 8007bb0:	d145      	bne.n	8007c3e <__ieee754_fmod+0x11a>
 8007bb2:	4b62      	ldr	r3, [pc, #392]	; (8007d3c <__ieee754_fmod+0x218>)
 8007bb4:	4629      	mov	r1, r5
 8007bb6:	2900      	cmp	r1, #0
 8007bb8:	dc3e      	bgt.n	8007c38 <__ieee754_fmod+0x114>
 8007bba:	4961      	ldr	r1, [pc, #388]	; (8007d40 <__ieee754_fmod+0x21c>)
 8007bbc:	4288      	cmp	r0, r1
 8007bbe:	db4c      	blt.n	8007c5a <__ieee754_fmod+0x136>
 8007bc0:	f3c9 0113 	ubfx	r1, r9, #0, #20
 8007bc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007bc8:	4a5d      	ldr	r2, [pc, #372]	; (8007d40 <__ieee754_fmod+0x21c>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	db59      	blt.n	8007c82 <__ieee754_fmod+0x15e>
 8007bce:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8007bd2:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8007bd6:	1ac0      	subs	r0, r0, r3
 8007bd8:	1b8a      	subs	r2, r1, r6
 8007bda:	eba7 050c 	sub.w	r5, r7, ip
 8007bde:	2800      	cmp	r0, #0
 8007be0:	d166      	bne.n	8007cb0 <__ieee754_fmod+0x18c>
 8007be2:	4567      	cmp	r7, ip
 8007be4:	bf38      	it	cc
 8007be6:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 8007bea:	2a00      	cmp	r2, #0
 8007bec:	bfbc      	itt	lt
 8007bee:	463d      	movlt	r5, r7
 8007bf0:	460a      	movlt	r2, r1
 8007bf2:	ea52 0105 	orrs.w	r1, r2, r5
 8007bf6:	d0c6      	beq.n	8007b86 <__ieee754_fmod+0x62>
 8007bf8:	494f      	ldr	r1, [pc, #316]	; (8007d38 <__ieee754_fmod+0x214>)
 8007bfa:	428a      	cmp	r2, r1
 8007bfc:	dd6d      	ble.n	8007cda <__ieee754_fmod+0x1b6>
 8007bfe:	4950      	ldr	r1, [pc, #320]	; (8007d40 <__ieee754_fmod+0x21c>)
 8007c00:	428b      	cmp	r3, r1
 8007c02:	db70      	blt.n	8007ce6 <__ieee754_fmod+0x1c2>
 8007c04:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8007c08:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8007c0c:	4314      	orrs	r4, r2
 8007c0e:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 8007c12:	4628      	mov	r0, r5
 8007c14:	e7a8      	b.n	8007b68 <__ieee754_fmod+0x44>
 8007c16:	3801      	subs	r0, #1
 8007c18:	0049      	lsls	r1, r1, #1
 8007c1a:	e7c3      	b.n	8007ba4 <__ieee754_fmod+0x80>
 8007c1c:	4848      	ldr	r0, [pc, #288]	; (8007d40 <__ieee754_fmod+0x21c>)
 8007c1e:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8007c22:	0049      	lsls	r1, r1, #1
 8007c24:	2900      	cmp	r1, #0
 8007c26:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8007c2a:	dcfa      	bgt.n	8007c22 <__ieee754_fmod+0xfe>
 8007c2c:	e7bc      	b.n	8007ba8 <__ieee754_fmod+0x84>
 8007c2e:	ea4f 5028 	mov.w	r0, r8, asr #20
 8007c32:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8007c36:	e7b7      	b.n	8007ba8 <__ieee754_fmod+0x84>
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	0049      	lsls	r1, r1, #1
 8007c3c:	e7bb      	b.n	8007bb6 <__ieee754_fmod+0x92>
 8007c3e:	4b40      	ldr	r3, [pc, #256]	; (8007d40 <__ieee754_fmod+0x21c>)
 8007c40:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 8007c44:	0049      	lsls	r1, r1, #1
 8007c46:	2900      	cmp	r1, #0
 8007c48:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8007c4c:	dcfa      	bgt.n	8007c44 <__ieee754_fmod+0x120>
 8007c4e:	e7b4      	b.n	8007bba <__ieee754_fmod+0x96>
 8007c50:	ea4f 532e 	mov.w	r3, lr, asr #20
 8007c54:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007c58:	e7af      	b.n	8007bba <__ieee754_fmod+0x96>
 8007c5a:	1a0f      	subs	r7, r1, r0
 8007c5c:	2f1f      	cmp	r7, #31
 8007c5e:	dc0a      	bgt.n	8007c76 <__ieee754_fmod+0x152>
 8007c60:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8007c64:	fa08 f807 	lsl.w	r8, r8, r7
 8007c68:	fa22 f101 	lsr.w	r1, r2, r1
 8007c6c:	ea41 0108 	orr.w	r1, r1, r8
 8007c70:	fa02 f707 	lsl.w	r7, r2, r7
 8007c74:	e7a8      	b.n	8007bc8 <__ieee754_fmod+0xa4>
 8007c76:	4933      	ldr	r1, [pc, #204]	; (8007d44 <__ieee754_fmod+0x220>)
 8007c78:	1a09      	subs	r1, r1, r0
 8007c7a:	fa02 f101 	lsl.w	r1, r2, r1
 8007c7e:	2700      	movs	r7, #0
 8007c80:	e7a2      	b.n	8007bc8 <__ieee754_fmod+0xa4>
 8007c82:	eba2 0c03 	sub.w	ip, r2, r3
 8007c86:	f1bc 0f1f 	cmp.w	ip, #31
 8007c8a:	dc0a      	bgt.n	8007ca2 <__ieee754_fmod+0x17e>
 8007c8c:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8007c90:	fa0e fe0c 	lsl.w	lr, lr, ip
 8007c94:	fa25 f606 	lsr.w	r6, r5, r6
 8007c98:	ea46 060e 	orr.w	r6, r6, lr
 8007c9c:	fa05 fc0c 	lsl.w	ip, r5, ip
 8007ca0:	e799      	b.n	8007bd6 <__ieee754_fmod+0xb2>
 8007ca2:	4e28      	ldr	r6, [pc, #160]	; (8007d44 <__ieee754_fmod+0x220>)
 8007ca4:	1af6      	subs	r6, r6, r3
 8007ca6:	fa05 f606 	lsl.w	r6, r5, r6
 8007caa:	f04f 0c00 	mov.w	ip, #0
 8007cae:	e792      	b.n	8007bd6 <__ieee754_fmod+0xb2>
 8007cb0:	4567      	cmp	r7, ip
 8007cb2:	bf38      	it	cc
 8007cb4:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 8007cb8:	2a00      	cmp	r2, #0
 8007cba:	da05      	bge.n	8007cc8 <__ieee754_fmod+0x1a4>
 8007cbc:	0ffa      	lsrs	r2, r7, #31
 8007cbe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007cc2:	007f      	lsls	r7, r7, #1
 8007cc4:	3801      	subs	r0, #1
 8007cc6:	e787      	b.n	8007bd8 <__ieee754_fmod+0xb4>
 8007cc8:	ea52 0105 	orrs.w	r1, r2, r5
 8007ccc:	f43f af5b 	beq.w	8007b86 <__ieee754_fmod+0x62>
 8007cd0:	0fe9      	lsrs	r1, r5, #31
 8007cd2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8007cd6:	006f      	lsls	r7, r5, #1
 8007cd8:	e7f4      	b.n	8007cc4 <__ieee754_fmod+0x1a0>
 8007cda:	0fe8      	lsrs	r0, r5, #31
 8007cdc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8007ce0:	006d      	lsls	r5, r5, #1
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	e789      	b.n	8007bfa <__ieee754_fmod+0xd6>
 8007ce6:	1ac9      	subs	r1, r1, r3
 8007ce8:	2914      	cmp	r1, #20
 8007cea:	dc0a      	bgt.n	8007d02 <__ieee754_fmod+0x1de>
 8007cec:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8007cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf4:	40cd      	lsrs	r5, r1
 8007cf6:	432b      	orrs	r3, r5
 8007cf8:	410a      	asrs	r2, r1
 8007cfa:	ea42 0104 	orr.w	r1, r2, r4
 8007cfe:	4618      	mov	r0, r3
 8007d00:	e732      	b.n	8007b68 <__ieee754_fmod+0x44>
 8007d02:	291f      	cmp	r1, #31
 8007d04:	dc07      	bgt.n	8007d16 <__ieee754_fmod+0x1f2>
 8007d06:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8007d0a:	40cd      	lsrs	r5, r1
 8007d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d10:	432b      	orrs	r3, r5
 8007d12:	4622      	mov	r2, r4
 8007d14:	e7f1      	b.n	8007cfa <__ieee754_fmod+0x1d6>
 8007d16:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8007d1a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8007d1e:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8007d22:	33e2      	adds	r3, #226	; 0xe2
 8007d24:	fa42 f303 	asr.w	r3, r2, r3
 8007d28:	e7f3      	b.n	8007d12 <__ieee754_fmod+0x1ee>
 8007d2a:	bf00      	nop
 8007d2c:	7fefffff 	.word	0x7fefffff
 8007d30:	7ff00000 	.word	0x7ff00000
 8007d34:	0800a320 	.word	0x0800a320
 8007d38:	000fffff 	.word	0x000fffff
 8007d3c:	fffffbed 	.word	0xfffffbed
 8007d40:	fffffc02 	.word	0xfffffc02
 8007d44:	fffffbe2 	.word	0xfffffbe2

08007d48 <matherr>:
 8007d48:	2000      	movs	r0, #0
 8007d4a:	4770      	bx	lr

08007d4c <abort>:
 8007d4c:	b508      	push	{r3, lr}
 8007d4e:	2006      	movs	r0, #6
 8007d50:	f000 fc7c 	bl	800864c <raise>
 8007d54:	2001      	movs	r0, #1
 8007d56:	f7fe f99c 	bl	8006092 <_exit>
	...

08007d5c <__errno>:
 8007d5c:	4b01      	ldr	r3, [pc, #4]	; (8007d64 <__errno+0x8>)
 8007d5e:	6818      	ldr	r0, [r3, #0]
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	20000010 	.word	0x20000010

08007d68 <__libc_init_array>:
 8007d68:	b570      	push	{r4, r5, r6, lr}
 8007d6a:	4e0d      	ldr	r6, [pc, #52]	; (8007da0 <__libc_init_array+0x38>)
 8007d6c:	4c0d      	ldr	r4, [pc, #52]	; (8007da4 <__libc_init_array+0x3c>)
 8007d6e:	1ba4      	subs	r4, r4, r6
 8007d70:	10a4      	asrs	r4, r4, #2
 8007d72:	2500      	movs	r5, #0
 8007d74:	42a5      	cmp	r5, r4
 8007d76:	d109      	bne.n	8007d8c <__libc_init_array+0x24>
 8007d78:	4e0b      	ldr	r6, [pc, #44]	; (8007da8 <__libc_init_array+0x40>)
 8007d7a:	4c0c      	ldr	r4, [pc, #48]	; (8007dac <__libc_init_array+0x44>)
 8007d7c:	f001 fde2 	bl	8009944 <_init>
 8007d80:	1ba4      	subs	r4, r4, r6
 8007d82:	10a4      	asrs	r4, r4, #2
 8007d84:	2500      	movs	r5, #0
 8007d86:	42a5      	cmp	r5, r4
 8007d88:	d105      	bne.n	8007d96 <__libc_init_array+0x2e>
 8007d8a:	bd70      	pop	{r4, r5, r6, pc}
 8007d8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d90:	4798      	blx	r3
 8007d92:	3501      	adds	r5, #1
 8007d94:	e7ee      	b.n	8007d74 <__libc_init_array+0xc>
 8007d96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d9a:	4798      	blx	r3
 8007d9c:	3501      	adds	r5, #1
 8007d9e:	e7f2      	b.n	8007d86 <__libc_init_array+0x1e>
 8007da0:	0800a560 	.word	0x0800a560
 8007da4:	0800a560 	.word	0x0800a560
 8007da8:	0800a560 	.word	0x0800a560
 8007dac:	0800a568 	.word	0x0800a568

08007db0 <malloc>:
 8007db0:	4b02      	ldr	r3, [pc, #8]	; (8007dbc <malloc+0xc>)
 8007db2:	4601      	mov	r1, r0
 8007db4:	6818      	ldr	r0, [r3, #0]
 8007db6:	f000 b86d 	b.w	8007e94 <_malloc_r>
 8007dba:	bf00      	nop
 8007dbc:	20000010 	.word	0x20000010

08007dc0 <free>:
 8007dc0:	4b02      	ldr	r3, [pc, #8]	; (8007dcc <free+0xc>)
 8007dc2:	4601      	mov	r1, r0
 8007dc4:	6818      	ldr	r0, [r3, #0]
 8007dc6:	f000 b817 	b.w	8007df8 <_free_r>
 8007dca:	bf00      	nop
 8007dcc:	20000010 	.word	0x20000010

08007dd0 <memcpy>:
 8007dd0:	b510      	push	{r4, lr}
 8007dd2:	1e43      	subs	r3, r0, #1
 8007dd4:	440a      	add	r2, r1
 8007dd6:	4291      	cmp	r1, r2
 8007dd8:	d100      	bne.n	8007ddc <memcpy+0xc>
 8007dda:	bd10      	pop	{r4, pc}
 8007ddc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007de0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007de4:	e7f7      	b.n	8007dd6 <memcpy+0x6>

08007de6 <memset>:
 8007de6:	4402      	add	r2, r0
 8007de8:	4603      	mov	r3, r0
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d100      	bne.n	8007df0 <memset+0xa>
 8007dee:	4770      	bx	lr
 8007df0:	f803 1b01 	strb.w	r1, [r3], #1
 8007df4:	e7f9      	b.n	8007dea <memset+0x4>
	...

08007df8 <_free_r>:
 8007df8:	b538      	push	{r3, r4, r5, lr}
 8007dfa:	4605      	mov	r5, r0
 8007dfc:	2900      	cmp	r1, #0
 8007dfe:	d045      	beq.n	8007e8c <_free_r+0x94>
 8007e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e04:	1f0c      	subs	r4, r1, #4
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	bfb8      	it	lt
 8007e0a:	18e4      	addlt	r4, r4, r3
 8007e0c:	f001 fa8e 	bl	800932c <__malloc_lock>
 8007e10:	4a1f      	ldr	r2, [pc, #124]	; (8007e90 <_free_r+0x98>)
 8007e12:	6813      	ldr	r3, [r2, #0]
 8007e14:	4610      	mov	r0, r2
 8007e16:	b933      	cbnz	r3, 8007e26 <_free_r+0x2e>
 8007e18:	6063      	str	r3, [r4, #4]
 8007e1a:	6014      	str	r4, [r2, #0]
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e22:	f001 ba84 	b.w	800932e <__malloc_unlock>
 8007e26:	42a3      	cmp	r3, r4
 8007e28:	d90c      	bls.n	8007e44 <_free_r+0x4c>
 8007e2a:	6821      	ldr	r1, [r4, #0]
 8007e2c:	1862      	adds	r2, r4, r1
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	bf04      	itt	eq
 8007e32:	681a      	ldreq	r2, [r3, #0]
 8007e34:	685b      	ldreq	r3, [r3, #4]
 8007e36:	6063      	str	r3, [r4, #4]
 8007e38:	bf04      	itt	eq
 8007e3a:	1852      	addeq	r2, r2, r1
 8007e3c:	6022      	streq	r2, [r4, #0]
 8007e3e:	6004      	str	r4, [r0, #0]
 8007e40:	e7ec      	b.n	8007e1c <_free_r+0x24>
 8007e42:	4613      	mov	r3, r2
 8007e44:	685a      	ldr	r2, [r3, #4]
 8007e46:	b10a      	cbz	r2, 8007e4c <_free_r+0x54>
 8007e48:	42a2      	cmp	r2, r4
 8007e4a:	d9fa      	bls.n	8007e42 <_free_r+0x4a>
 8007e4c:	6819      	ldr	r1, [r3, #0]
 8007e4e:	1858      	adds	r0, r3, r1
 8007e50:	42a0      	cmp	r0, r4
 8007e52:	d10b      	bne.n	8007e6c <_free_r+0x74>
 8007e54:	6820      	ldr	r0, [r4, #0]
 8007e56:	4401      	add	r1, r0
 8007e58:	1858      	adds	r0, r3, r1
 8007e5a:	4282      	cmp	r2, r0
 8007e5c:	6019      	str	r1, [r3, #0]
 8007e5e:	d1dd      	bne.n	8007e1c <_free_r+0x24>
 8007e60:	6810      	ldr	r0, [r2, #0]
 8007e62:	6852      	ldr	r2, [r2, #4]
 8007e64:	605a      	str	r2, [r3, #4]
 8007e66:	4401      	add	r1, r0
 8007e68:	6019      	str	r1, [r3, #0]
 8007e6a:	e7d7      	b.n	8007e1c <_free_r+0x24>
 8007e6c:	d902      	bls.n	8007e74 <_free_r+0x7c>
 8007e6e:	230c      	movs	r3, #12
 8007e70:	602b      	str	r3, [r5, #0]
 8007e72:	e7d3      	b.n	8007e1c <_free_r+0x24>
 8007e74:	6820      	ldr	r0, [r4, #0]
 8007e76:	1821      	adds	r1, r4, r0
 8007e78:	428a      	cmp	r2, r1
 8007e7a:	bf04      	itt	eq
 8007e7c:	6811      	ldreq	r1, [r2, #0]
 8007e7e:	6852      	ldreq	r2, [r2, #4]
 8007e80:	6062      	str	r2, [r4, #4]
 8007e82:	bf04      	itt	eq
 8007e84:	1809      	addeq	r1, r1, r0
 8007e86:	6021      	streq	r1, [r4, #0]
 8007e88:	605c      	str	r4, [r3, #4]
 8007e8a:	e7c7      	b.n	8007e1c <_free_r+0x24>
 8007e8c:	bd38      	pop	{r3, r4, r5, pc}
 8007e8e:	bf00      	nop
 8007e90:	200031f8 	.word	0x200031f8

08007e94 <_malloc_r>:
 8007e94:	b570      	push	{r4, r5, r6, lr}
 8007e96:	1ccd      	adds	r5, r1, #3
 8007e98:	f025 0503 	bic.w	r5, r5, #3
 8007e9c:	3508      	adds	r5, #8
 8007e9e:	2d0c      	cmp	r5, #12
 8007ea0:	bf38      	it	cc
 8007ea2:	250c      	movcc	r5, #12
 8007ea4:	2d00      	cmp	r5, #0
 8007ea6:	4606      	mov	r6, r0
 8007ea8:	db01      	blt.n	8007eae <_malloc_r+0x1a>
 8007eaa:	42a9      	cmp	r1, r5
 8007eac:	d903      	bls.n	8007eb6 <_malloc_r+0x22>
 8007eae:	230c      	movs	r3, #12
 8007eb0:	6033      	str	r3, [r6, #0]
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	bd70      	pop	{r4, r5, r6, pc}
 8007eb6:	f001 fa39 	bl	800932c <__malloc_lock>
 8007eba:	4a21      	ldr	r2, [pc, #132]	; (8007f40 <_malloc_r+0xac>)
 8007ebc:	6814      	ldr	r4, [r2, #0]
 8007ebe:	4621      	mov	r1, r4
 8007ec0:	b991      	cbnz	r1, 8007ee8 <_malloc_r+0x54>
 8007ec2:	4c20      	ldr	r4, [pc, #128]	; (8007f44 <_malloc_r+0xb0>)
 8007ec4:	6823      	ldr	r3, [r4, #0]
 8007ec6:	b91b      	cbnz	r3, 8007ed0 <_malloc_r+0x3c>
 8007ec8:	4630      	mov	r0, r6
 8007eca:	f000 fb87 	bl	80085dc <_sbrk_r>
 8007ece:	6020      	str	r0, [r4, #0]
 8007ed0:	4629      	mov	r1, r5
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	f000 fb82 	bl	80085dc <_sbrk_r>
 8007ed8:	1c43      	adds	r3, r0, #1
 8007eda:	d124      	bne.n	8007f26 <_malloc_r+0x92>
 8007edc:	230c      	movs	r3, #12
 8007ede:	6033      	str	r3, [r6, #0]
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	f001 fa24 	bl	800932e <__malloc_unlock>
 8007ee6:	e7e4      	b.n	8007eb2 <_malloc_r+0x1e>
 8007ee8:	680b      	ldr	r3, [r1, #0]
 8007eea:	1b5b      	subs	r3, r3, r5
 8007eec:	d418      	bmi.n	8007f20 <_malloc_r+0x8c>
 8007eee:	2b0b      	cmp	r3, #11
 8007ef0:	d90f      	bls.n	8007f12 <_malloc_r+0x7e>
 8007ef2:	600b      	str	r3, [r1, #0]
 8007ef4:	50cd      	str	r5, [r1, r3]
 8007ef6:	18cc      	adds	r4, r1, r3
 8007ef8:	4630      	mov	r0, r6
 8007efa:	f001 fa18 	bl	800932e <__malloc_unlock>
 8007efe:	f104 000b 	add.w	r0, r4, #11
 8007f02:	1d23      	adds	r3, r4, #4
 8007f04:	f020 0007 	bic.w	r0, r0, #7
 8007f08:	1ac3      	subs	r3, r0, r3
 8007f0a:	d0d3      	beq.n	8007eb4 <_malloc_r+0x20>
 8007f0c:	425a      	negs	r2, r3
 8007f0e:	50e2      	str	r2, [r4, r3]
 8007f10:	e7d0      	b.n	8007eb4 <_malloc_r+0x20>
 8007f12:	428c      	cmp	r4, r1
 8007f14:	684b      	ldr	r3, [r1, #4]
 8007f16:	bf16      	itet	ne
 8007f18:	6063      	strne	r3, [r4, #4]
 8007f1a:	6013      	streq	r3, [r2, #0]
 8007f1c:	460c      	movne	r4, r1
 8007f1e:	e7eb      	b.n	8007ef8 <_malloc_r+0x64>
 8007f20:	460c      	mov	r4, r1
 8007f22:	6849      	ldr	r1, [r1, #4]
 8007f24:	e7cc      	b.n	8007ec0 <_malloc_r+0x2c>
 8007f26:	1cc4      	adds	r4, r0, #3
 8007f28:	f024 0403 	bic.w	r4, r4, #3
 8007f2c:	42a0      	cmp	r0, r4
 8007f2e:	d005      	beq.n	8007f3c <_malloc_r+0xa8>
 8007f30:	1a21      	subs	r1, r4, r0
 8007f32:	4630      	mov	r0, r6
 8007f34:	f000 fb52 	bl	80085dc <_sbrk_r>
 8007f38:	3001      	adds	r0, #1
 8007f3a:	d0cf      	beq.n	8007edc <_malloc_r+0x48>
 8007f3c:	6025      	str	r5, [r4, #0]
 8007f3e:	e7db      	b.n	8007ef8 <_malloc_r+0x64>
 8007f40:	200031f8 	.word	0x200031f8
 8007f44:	200031fc 	.word	0x200031fc

08007f48 <__cvt>:
 8007f48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f4c:	ec55 4b10 	vmov	r4, r5, d0
 8007f50:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007f52:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007f56:	2d00      	cmp	r5, #0
 8007f58:	460e      	mov	r6, r1
 8007f5a:	4691      	mov	r9, r2
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	bfb8      	it	lt
 8007f60:	4622      	movlt	r2, r4
 8007f62:	462b      	mov	r3, r5
 8007f64:	f027 0720 	bic.w	r7, r7, #32
 8007f68:	bfbb      	ittet	lt
 8007f6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007f6e:	461d      	movlt	r5, r3
 8007f70:	2300      	movge	r3, #0
 8007f72:	232d      	movlt	r3, #45	; 0x2d
 8007f74:	bfb8      	it	lt
 8007f76:	4614      	movlt	r4, r2
 8007f78:	2f46      	cmp	r7, #70	; 0x46
 8007f7a:	700b      	strb	r3, [r1, #0]
 8007f7c:	d004      	beq.n	8007f88 <__cvt+0x40>
 8007f7e:	2f45      	cmp	r7, #69	; 0x45
 8007f80:	d100      	bne.n	8007f84 <__cvt+0x3c>
 8007f82:	3601      	adds	r6, #1
 8007f84:	2102      	movs	r1, #2
 8007f86:	e000      	b.n	8007f8a <__cvt+0x42>
 8007f88:	2103      	movs	r1, #3
 8007f8a:	ab03      	add	r3, sp, #12
 8007f8c:	9301      	str	r3, [sp, #4]
 8007f8e:	ab02      	add	r3, sp, #8
 8007f90:	9300      	str	r3, [sp, #0]
 8007f92:	4632      	mov	r2, r6
 8007f94:	4653      	mov	r3, sl
 8007f96:	ec45 4b10 	vmov	d0, r4, r5
 8007f9a:	f000 fc01 	bl	80087a0 <_dtoa_r>
 8007f9e:	2f47      	cmp	r7, #71	; 0x47
 8007fa0:	4680      	mov	r8, r0
 8007fa2:	d102      	bne.n	8007faa <__cvt+0x62>
 8007fa4:	f019 0f01 	tst.w	r9, #1
 8007fa8:	d026      	beq.n	8007ff8 <__cvt+0xb0>
 8007faa:	2f46      	cmp	r7, #70	; 0x46
 8007fac:	eb08 0906 	add.w	r9, r8, r6
 8007fb0:	d111      	bne.n	8007fd6 <__cvt+0x8e>
 8007fb2:	f898 3000 	ldrb.w	r3, [r8]
 8007fb6:	2b30      	cmp	r3, #48	; 0x30
 8007fb8:	d10a      	bne.n	8007fd0 <__cvt+0x88>
 8007fba:	2200      	movs	r2, #0
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	4629      	mov	r1, r5
 8007fc2:	f7f8 fd4d 	bl	8000a60 <__aeabi_dcmpeq>
 8007fc6:	b918      	cbnz	r0, 8007fd0 <__cvt+0x88>
 8007fc8:	f1c6 0601 	rsb	r6, r6, #1
 8007fcc:	f8ca 6000 	str.w	r6, [sl]
 8007fd0:	f8da 3000 	ldr.w	r3, [sl]
 8007fd4:	4499      	add	r9, r3
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	2300      	movs	r3, #0
 8007fda:	4620      	mov	r0, r4
 8007fdc:	4629      	mov	r1, r5
 8007fde:	f7f8 fd3f 	bl	8000a60 <__aeabi_dcmpeq>
 8007fe2:	b938      	cbnz	r0, 8007ff4 <__cvt+0xac>
 8007fe4:	2230      	movs	r2, #48	; 0x30
 8007fe6:	9b03      	ldr	r3, [sp, #12]
 8007fe8:	454b      	cmp	r3, r9
 8007fea:	d205      	bcs.n	8007ff8 <__cvt+0xb0>
 8007fec:	1c59      	adds	r1, r3, #1
 8007fee:	9103      	str	r1, [sp, #12]
 8007ff0:	701a      	strb	r2, [r3, #0]
 8007ff2:	e7f8      	b.n	8007fe6 <__cvt+0x9e>
 8007ff4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007ff8:	9b03      	ldr	r3, [sp, #12]
 8007ffa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ffc:	eba3 0308 	sub.w	r3, r3, r8
 8008000:	4640      	mov	r0, r8
 8008002:	6013      	str	r3, [r2, #0]
 8008004:	b004      	add	sp, #16
 8008006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800800a <__exponent>:
 800800a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800800c:	2900      	cmp	r1, #0
 800800e:	4604      	mov	r4, r0
 8008010:	bfba      	itte	lt
 8008012:	4249      	neglt	r1, r1
 8008014:	232d      	movlt	r3, #45	; 0x2d
 8008016:	232b      	movge	r3, #43	; 0x2b
 8008018:	2909      	cmp	r1, #9
 800801a:	f804 2b02 	strb.w	r2, [r4], #2
 800801e:	7043      	strb	r3, [r0, #1]
 8008020:	dd20      	ble.n	8008064 <__exponent+0x5a>
 8008022:	f10d 0307 	add.w	r3, sp, #7
 8008026:	461f      	mov	r7, r3
 8008028:	260a      	movs	r6, #10
 800802a:	fb91 f5f6 	sdiv	r5, r1, r6
 800802e:	fb06 1115 	mls	r1, r6, r5, r1
 8008032:	3130      	adds	r1, #48	; 0x30
 8008034:	2d09      	cmp	r5, #9
 8008036:	f803 1c01 	strb.w	r1, [r3, #-1]
 800803a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800803e:	4629      	mov	r1, r5
 8008040:	dc09      	bgt.n	8008056 <__exponent+0x4c>
 8008042:	3130      	adds	r1, #48	; 0x30
 8008044:	3b02      	subs	r3, #2
 8008046:	f802 1c01 	strb.w	r1, [r2, #-1]
 800804a:	42bb      	cmp	r3, r7
 800804c:	4622      	mov	r2, r4
 800804e:	d304      	bcc.n	800805a <__exponent+0x50>
 8008050:	1a10      	subs	r0, r2, r0
 8008052:	b003      	add	sp, #12
 8008054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008056:	4613      	mov	r3, r2
 8008058:	e7e7      	b.n	800802a <__exponent+0x20>
 800805a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800805e:	f804 2b01 	strb.w	r2, [r4], #1
 8008062:	e7f2      	b.n	800804a <__exponent+0x40>
 8008064:	2330      	movs	r3, #48	; 0x30
 8008066:	4419      	add	r1, r3
 8008068:	7083      	strb	r3, [r0, #2]
 800806a:	1d02      	adds	r2, r0, #4
 800806c:	70c1      	strb	r1, [r0, #3]
 800806e:	e7ef      	b.n	8008050 <__exponent+0x46>

08008070 <_printf_float>:
 8008070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008074:	b08d      	sub	sp, #52	; 0x34
 8008076:	460c      	mov	r4, r1
 8008078:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800807c:	4616      	mov	r6, r2
 800807e:	461f      	mov	r7, r3
 8008080:	4605      	mov	r5, r0
 8008082:	f001 f945 	bl	8009310 <_localeconv_r>
 8008086:	6803      	ldr	r3, [r0, #0]
 8008088:	9304      	str	r3, [sp, #16]
 800808a:	4618      	mov	r0, r3
 800808c:	f7f8 f8bc 	bl	8000208 <strlen>
 8008090:	2300      	movs	r3, #0
 8008092:	930a      	str	r3, [sp, #40]	; 0x28
 8008094:	f8d8 3000 	ldr.w	r3, [r8]
 8008098:	9005      	str	r0, [sp, #20]
 800809a:	3307      	adds	r3, #7
 800809c:	f023 0307 	bic.w	r3, r3, #7
 80080a0:	f103 0208 	add.w	r2, r3, #8
 80080a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80080a8:	f8d4 b000 	ldr.w	fp, [r4]
 80080ac:	f8c8 2000 	str.w	r2, [r8]
 80080b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80080b8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80080bc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80080c0:	9307      	str	r3, [sp, #28]
 80080c2:	f8cd 8018 	str.w	r8, [sp, #24]
 80080c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080ca:	4ba7      	ldr	r3, [pc, #668]	; (8008368 <_printf_float+0x2f8>)
 80080cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080d0:	f7f8 fcf8 	bl	8000ac4 <__aeabi_dcmpun>
 80080d4:	bb70      	cbnz	r0, 8008134 <_printf_float+0xc4>
 80080d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080da:	4ba3      	ldr	r3, [pc, #652]	; (8008368 <_printf_float+0x2f8>)
 80080dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080e0:	f7f8 fcd2 	bl	8000a88 <__aeabi_dcmple>
 80080e4:	bb30      	cbnz	r0, 8008134 <_printf_float+0xc4>
 80080e6:	2200      	movs	r2, #0
 80080e8:	2300      	movs	r3, #0
 80080ea:	4640      	mov	r0, r8
 80080ec:	4649      	mov	r1, r9
 80080ee:	f7f8 fcc1 	bl	8000a74 <__aeabi_dcmplt>
 80080f2:	b110      	cbz	r0, 80080fa <_printf_float+0x8a>
 80080f4:	232d      	movs	r3, #45	; 0x2d
 80080f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080fa:	4a9c      	ldr	r2, [pc, #624]	; (800836c <_printf_float+0x2fc>)
 80080fc:	4b9c      	ldr	r3, [pc, #624]	; (8008370 <_printf_float+0x300>)
 80080fe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008102:	bf8c      	ite	hi
 8008104:	4690      	movhi	r8, r2
 8008106:	4698      	movls	r8, r3
 8008108:	2303      	movs	r3, #3
 800810a:	f02b 0204 	bic.w	r2, fp, #4
 800810e:	6123      	str	r3, [r4, #16]
 8008110:	6022      	str	r2, [r4, #0]
 8008112:	f04f 0900 	mov.w	r9, #0
 8008116:	9700      	str	r7, [sp, #0]
 8008118:	4633      	mov	r3, r6
 800811a:	aa0b      	add	r2, sp, #44	; 0x2c
 800811c:	4621      	mov	r1, r4
 800811e:	4628      	mov	r0, r5
 8008120:	f000 f9e6 	bl	80084f0 <_printf_common>
 8008124:	3001      	adds	r0, #1
 8008126:	f040 808d 	bne.w	8008244 <_printf_float+0x1d4>
 800812a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800812e:	b00d      	add	sp, #52	; 0x34
 8008130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008134:	4642      	mov	r2, r8
 8008136:	464b      	mov	r3, r9
 8008138:	4640      	mov	r0, r8
 800813a:	4649      	mov	r1, r9
 800813c:	f7f8 fcc2 	bl	8000ac4 <__aeabi_dcmpun>
 8008140:	b110      	cbz	r0, 8008148 <_printf_float+0xd8>
 8008142:	4a8c      	ldr	r2, [pc, #560]	; (8008374 <_printf_float+0x304>)
 8008144:	4b8c      	ldr	r3, [pc, #560]	; (8008378 <_printf_float+0x308>)
 8008146:	e7da      	b.n	80080fe <_printf_float+0x8e>
 8008148:	6861      	ldr	r1, [r4, #4]
 800814a:	1c4b      	adds	r3, r1, #1
 800814c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008150:	a80a      	add	r0, sp, #40	; 0x28
 8008152:	d13e      	bne.n	80081d2 <_printf_float+0x162>
 8008154:	2306      	movs	r3, #6
 8008156:	6063      	str	r3, [r4, #4]
 8008158:	2300      	movs	r3, #0
 800815a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800815e:	ab09      	add	r3, sp, #36	; 0x24
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	ec49 8b10 	vmov	d0, r8, r9
 8008166:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800816a:	6022      	str	r2, [r4, #0]
 800816c:	f8cd a004 	str.w	sl, [sp, #4]
 8008170:	6861      	ldr	r1, [r4, #4]
 8008172:	4628      	mov	r0, r5
 8008174:	f7ff fee8 	bl	8007f48 <__cvt>
 8008178:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800817c:	2b47      	cmp	r3, #71	; 0x47
 800817e:	4680      	mov	r8, r0
 8008180:	d109      	bne.n	8008196 <_printf_float+0x126>
 8008182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008184:	1cd8      	adds	r0, r3, #3
 8008186:	db02      	blt.n	800818e <_printf_float+0x11e>
 8008188:	6862      	ldr	r2, [r4, #4]
 800818a:	4293      	cmp	r3, r2
 800818c:	dd47      	ble.n	800821e <_printf_float+0x1ae>
 800818e:	f1aa 0a02 	sub.w	sl, sl, #2
 8008192:	fa5f fa8a 	uxtb.w	sl, sl
 8008196:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800819a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800819c:	d824      	bhi.n	80081e8 <_printf_float+0x178>
 800819e:	3901      	subs	r1, #1
 80081a0:	4652      	mov	r2, sl
 80081a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80081a6:	9109      	str	r1, [sp, #36]	; 0x24
 80081a8:	f7ff ff2f 	bl	800800a <__exponent>
 80081ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081ae:	1813      	adds	r3, r2, r0
 80081b0:	2a01      	cmp	r2, #1
 80081b2:	4681      	mov	r9, r0
 80081b4:	6123      	str	r3, [r4, #16]
 80081b6:	dc02      	bgt.n	80081be <_printf_float+0x14e>
 80081b8:	6822      	ldr	r2, [r4, #0]
 80081ba:	07d1      	lsls	r1, r2, #31
 80081bc:	d501      	bpl.n	80081c2 <_printf_float+0x152>
 80081be:	3301      	adds	r3, #1
 80081c0:	6123      	str	r3, [r4, #16]
 80081c2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d0a5      	beq.n	8008116 <_printf_float+0xa6>
 80081ca:	232d      	movs	r3, #45	; 0x2d
 80081cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081d0:	e7a1      	b.n	8008116 <_printf_float+0xa6>
 80081d2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80081d6:	f000 8177 	beq.w	80084c8 <_printf_float+0x458>
 80081da:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80081de:	d1bb      	bne.n	8008158 <_printf_float+0xe8>
 80081e0:	2900      	cmp	r1, #0
 80081e2:	d1b9      	bne.n	8008158 <_printf_float+0xe8>
 80081e4:	2301      	movs	r3, #1
 80081e6:	e7b6      	b.n	8008156 <_printf_float+0xe6>
 80081e8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80081ec:	d119      	bne.n	8008222 <_printf_float+0x1b2>
 80081ee:	2900      	cmp	r1, #0
 80081f0:	6863      	ldr	r3, [r4, #4]
 80081f2:	dd0c      	ble.n	800820e <_printf_float+0x19e>
 80081f4:	6121      	str	r1, [r4, #16]
 80081f6:	b913      	cbnz	r3, 80081fe <_printf_float+0x18e>
 80081f8:	6822      	ldr	r2, [r4, #0]
 80081fa:	07d2      	lsls	r2, r2, #31
 80081fc:	d502      	bpl.n	8008204 <_printf_float+0x194>
 80081fe:	3301      	adds	r3, #1
 8008200:	440b      	add	r3, r1
 8008202:	6123      	str	r3, [r4, #16]
 8008204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008206:	65a3      	str	r3, [r4, #88]	; 0x58
 8008208:	f04f 0900 	mov.w	r9, #0
 800820c:	e7d9      	b.n	80081c2 <_printf_float+0x152>
 800820e:	b913      	cbnz	r3, 8008216 <_printf_float+0x1a6>
 8008210:	6822      	ldr	r2, [r4, #0]
 8008212:	07d0      	lsls	r0, r2, #31
 8008214:	d501      	bpl.n	800821a <_printf_float+0x1aa>
 8008216:	3302      	adds	r3, #2
 8008218:	e7f3      	b.n	8008202 <_printf_float+0x192>
 800821a:	2301      	movs	r3, #1
 800821c:	e7f1      	b.n	8008202 <_printf_float+0x192>
 800821e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008222:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008226:	4293      	cmp	r3, r2
 8008228:	db05      	blt.n	8008236 <_printf_float+0x1c6>
 800822a:	6822      	ldr	r2, [r4, #0]
 800822c:	6123      	str	r3, [r4, #16]
 800822e:	07d1      	lsls	r1, r2, #31
 8008230:	d5e8      	bpl.n	8008204 <_printf_float+0x194>
 8008232:	3301      	adds	r3, #1
 8008234:	e7e5      	b.n	8008202 <_printf_float+0x192>
 8008236:	2b00      	cmp	r3, #0
 8008238:	bfd4      	ite	le
 800823a:	f1c3 0302 	rsble	r3, r3, #2
 800823e:	2301      	movgt	r3, #1
 8008240:	4413      	add	r3, r2
 8008242:	e7de      	b.n	8008202 <_printf_float+0x192>
 8008244:	6823      	ldr	r3, [r4, #0]
 8008246:	055a      	lsls	r2, r3, #21
 8008248:	d407      	bmi.n	800825a <_printf_float+0x1ea>
 800824a:	6923      	ldr	r3, [r4, #16]
 800824c:	4642      	mov	r2, r8
 800824e:	4631      	mov	r1, r6
 8008250:	4628      	mov	r0, r5
 8008252:	47b8      	blx	r7
 8008254:	3001      	adds	r0, #1
 8008256:	d12b      	bne.n	80082b0 <_printf_float+0x240>
 8008258:	e767      	b.n	800812a <_printf_float+0xba>
 800825a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800825e:	f240 80dc 	bls.w	800841a <_printf_float+0x3aa>
 8008262:	2200      	movs	r2, #0
 8008264:	2300      	movs	r3, #0
 8008266:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800826a:	f7f8 fbf9 	bl	8000a60 <__aeabi_dcmpeq>
 800826e:	2800      	cmp	r0, #0
 8008270:	d033      	beq.n	80082da <_printf_float+0x26a>
 8008272:	2301      	movs	r3, #1
 8008274:	4a41      	ldr	r2, [pc, #260]	; (800837c <_printf_float+0x30c>)
 8008276:	4631      	mov	r1, r6
 8008278:	4628      	mov	r0, r5
 800827a:	47b8      	blx	r7
 800827c:	3001      	adds	r0, #1
 800827e:	f43f af54 	beq.w	800812a <_printf_float+0xba>
 8008282:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008286:	429a      	cmp	r2, r3
 8008288:	db02      	blt.n	8008290 <_printf_float+0x220>
 800828a:	6823      	ldr	r3, [r4, #0]
 800828c:	07d8      	lsls	r0, r3, #31
 800828e:	d50f      	bpl.n	80082b0 <_printf_float+0x240>
 8008290:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008294:	4631      	mov	r1, r6
 8008296:	4628      	mov	r0, r5
 8008298:	47b8      	blx	r7
 800829a:	3001      	adds	r0, #1
 800829c:	f43f af45 	beq.w	800812a <_printf_float+0xba>
 80082a0:	f04f 0800 	mov.w	r8, #0
 80082a4:	f104 091a 	add.w	r9, r4, #26
 80082a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082aa:	3b01      	subs	r3, #1
 80082ac:	4543      	cmp	r3, r8
 80082ae:	dc09      	bgt.n	80082c4 <_printf_float+0x254>
 80082b0:	6823      	ldr	r3, [r4, #0]
 80082b2:	079b      	lsls	r3, r3, #30
 80082b4:	f100 8103 	bmi.w	80084be <_printf_float+0x44e>
 80082b8:	68e0      	ldr	r0, [r4, #12]
 80082ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082bc:	4298      	cmp	r0, r3
 80082be:	bfb8      	it	lt
 80082c0:	4618      	movlt	r0, r3
 80082c2:	e734      	b.n	800812e <_printf_float+0xbe>
 80082c4:	2301      	movs	r3, #1
 80082c6:	464a      	mov	r2, r9
 80082c8:	4631      	mov	r1, r6
 80082ca:	4628      	mov	r0, r5
 80082cc:	47b8      	blx	r7
 80082ce:	3001      	adds	r0, #1
 80082d0:	f43f af2b 	beq.w	800812a <_printf_float+0xba>
 80082d4:	f108 0801 	add.w	r8, r8, #1
 80082d8:	e7e6      	b.n	80082a8 <_printf_float+0x238>
 80082da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082dc:	2b00      	cmp	r3, #0
 80082de:	dc2b      	bgt.n	8008338 <_printf_float+0x2c8>
 80082e0:	2301      	movs	r3, #1
 80082e2:	4a26      	ldr	r2, [pc, #152]	; (800837c <_printf_float+0x30c>)
 80082e4:	4631      	mov	r1, r6
 80082e6:	4628      	mov	r0, r5
 80082e8:	47b8      	blx	r7
 80082ea:	3001      	adds	r0, #1
 80082ec:	f43f af1d 	beq.w	800812a <_printf_float+0xba>
 80082f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f2:	b923      	cbnz	r3, 80082fe <_printf_float+0x28e>
 80082f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082f6:	b913      	cbnz	r3, 80082fe <_printf_float+0x28e>
 80082f8:	6823      	ldr	r3, [r4, #0]
 80082fa:	07d9      	lsls	r1, r3, #31
 80082fc:	d5d8      	bpl.n	80082b0 <_printf_float+0x240>
 80082fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008302:	4631      	mov	r1, r6
 8008304:	4628      	mov	r0, r5
 8008306:	47b8      	blx	r7
 8008308:	3001      	adds	r0, #1
 800830a:	f43f af0e 	beq.w	800812a <_printf_float+0xba>
 800830e:	f04f 0900 	mov.w	r9, #0
 8008312:	f104 0a1a 	add.w	sl, r4, #26
 8008316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008318:	425b      	negs	r3, r3
 800831a:	454b      	cmp	r3, r9
 800831c:	dc01      	bgt.n	8008322 <_printf_float+0x2b2>
 800831e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008320:	e794      	b.n	800824c <_printf_float+0x1dc>
 8008322:	2301      	movs	r3, #1
 8008324:	4652      	mov	r2, sl
 8008326:	4631      	mov	r1, r6
 8008328:	4628      	mov	r0, r5
 800832a:	47b8      	blx	r7
 800832c:	3001      	adds	r0, #1
 800832e:	f43f aefc 	beq.w	800812a <_printf_float+0xba>
 8008332:	f109 0901 	add.w	r9, r9, #1
 8008336:	e7ee      	b.n	8008316 <_printf_float+0x2a6>
 8008338:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800833a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800833c:	429a      	cmp	r2, r3
 800833e:	bfa8      	it	ge
 8008340:	461a      	movge	r2, r3
 8008342:	2a00      	cmp	r2, #0
 8008344:	4691      	mov	r9, r2
 8008346:	dd07      	ble.n	8008358 <_printf_float+0x2e8>
 8008348:	4613      	mov	r3, r2
 800834a:	4631      	mov	r1, r6
 800834c:	4642      	mov	r2, r8
 800834e:	4628      	mov	r0, r5
 8008350:	47b8      	blx	r7
 8008352:	3001      	adds	r0, #1
 8008354:	f43f aee9 	beq.w	800812a <_printf_float+0xba>
 8008358:	f104 031a 	add.w	r3, r4, #26
 800835c:	f04f 0b00 	mov.w	fp, #0
 8008360:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008364:	9306      	str	r3, [sp, #24]
 8008366:	e015      	b.n	8008394 <_printf_float+0x324>
 8008368:	7fefffff 	.word	0x7fefffff
 800836c:	0800a334 	.word	0x0800a334
 8008370:	0800a330 	.word	0x0800a330
 8008374:	0800a33c 	.word	0x0800a33c
 8008378:	0800a338 	.word	0x0800a338
 800837c:	0800a340 	.word	0x0800a340
 8008380:	2301      	movs	r3, #1
 8008382:	9a06      	ldr	r2, [sp, #24]
 8008384:	4631      	mov	r1, r6
 8008386:	4628      	mov	r0, r5
 8008388:	47b8      	blx	r7
 800838a:	3001      	adds	r0, #1
 800838c:	f43f aecd 	beq.w	800812a <_printf_float+0xba>
 8008390:	f10b 0b01 	add.w	fp, fp, #1
 8008394:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008398:	ebaa 0309 	sub.w	r3, sl, r9
 800839c:	455b      	cmp	r3, fp
 800839e:	dcef      	bgt.n	8008380 <_printf_float+0x310>
 80083a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083a4:	429a      	cmp	r2, r3
 80083a6:	44d0      	add	r8, sl
 80083a8:	db15      	blt.n	80083d6 <_printf_float+0x366>
 80083aa:	6823      	ldr	r3, [r4, #0]
 80083ac:	07da      	lsls	r2, r3, #31
 80083ae:	d412      	bmi.n	80083d6 <_printf_float+0x366>
 80083b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083b4:	eba3 020a 	sub.w	r2, r3, sl
 80083b8:	eba3 0a01 	sub.w	sl, r3, r1
 80083bc:	4592      	cmp	sl, r2
 80083be:	bfa8      	it	ge
 80083c0:	4692      	movge	sl, r2
 80083c2:	f1ba 0f00 	cmp.w	sl, #0
 80083c6:	dc0e      	bgt.n	80083e6 <_printf_float+0x376>
 80083c8:	f04f 0800 	mov.w	r8, #0
 80083cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80083d0:	f104 091a 	add.w	r9, r4, #26
 80083d4:	e019      	b.n	800840a <_printf_float+0x39a>
 80083d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083da:	4631      	mov	r1, r6
 80083dc:	4628      	mov	r0, r5
 80083de:	47b8      	blx	r7
 80083e0:	3001      	adds	r0, #1
 80083e2:	d1e5      	bne.n	80083b0 <_printf_float+0x340>
 80083e4:	e6a1      	b.n	800812a <_printf_float+0xba>
 80083e6:	4653      	mov	r3, sl
 80083e8:	4642      	mov	r2, r8
 80083ea:	4631      	mov	r1, r6
 80083ec:	4628      	mov	r0, r5
 80083ee:	47b8      	blx	r7
 80083f0:	3001      	adds	r0, #1
 80083f2:	d1e9      	bne.n	80083c8 <_printf_float+0x358>
 80083f4:	e699      	b.n	800812a <_printf_float+0xba>
 80083f6:	2301      	movs	r3, #1
 80083f8:	464a      	mov	r2, r9
 80083fa:	4631      	mov	r1, r6
 80083fc:	4628      	mov	r0, r5
 80083fe:	47b8      	blx	r7
 8008400:	3001      	adds	r0, #1
 8008402:	f43f ae92 	beq.w	800812a <_printf_float+0xba>
 8008406:	f108 0801 	add.w	r8, r8, #1
 800840a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800840e:	1a9b      	subs	r3, r3, r2
 8008410:	eba3 030a 	sub.w	r3, r3, sl
 8008414:	4543      	cmp	r3, r8
 8008416:	dcee      	bgt.n	80083f6 <_printf_float+0x386>
 8008418:	e74a      	b.n	80082b0 <_printf_float+0x240>
 800841a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800841c:	2a01      	cmp	r2, #1
 800841e:	dc01      	bgt.n	8008424 <_printf_float+0x3b4>
 8008420:	07db      	lsls	r3, r3, #31
 8008422:	d53a      	bpl.n	800849a <_printf_float+0x42a>
 8008424:	2301      	movs	r3, #1
 8008426:	4642      	mov	r2, r8
 8008428:	4631      	mov	r1, r6
 800842a:	4628      	mov	r0, r5
 800842c:	47b8      	blx	r7
 800842e:	3001      	adds	r0, #1
 8008430:	f43f ae7b 	beq.w	800812a <_printf_float+0xba>
 8008434:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008438:	4631      	mov	r1, r6
 800843a:	4628      	mov	r0, r5
 800843c:	47b8      	blx	r7
 800843e:	3001      	adds	r0, #1
 8008440:	f108 0801 	add.w	r8, r8, #1
 8008444:	f43f ae71 	beq.w	800812a <_printf_float+0xba>
 8008448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800844a:	2200      	movs	r2, #0
 800844c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8008450:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008454:	2300      	movs	r3, #0
 8008456:	f7f8 fb03 	bl	8000a60 <__aeabi_dcmpeq>
 800845a:	b9c8      	cbnz	r0, 8008490 <_printf_float+0x420>
 800845c:	4653      	mov	r3, sl
 800845e:	4642      	mov	r2, r8
 8008460:	4631      	mov	r1, r6
 8008462:	4628      	mov	r0, r5
 8008464:	47b8      	blx	r7
 8008466:	3001      	adds	r0, #1
 8008468:	d10e      	bne.n	8008488 <_printf_float+0x418>
 800846a:	e65e      	b.n	800812a <_printf_float+0xba>
 800846c:	2301      	movs	r3, #1
 800846e:	4652      	mov	r2, sl
 8008470:	4631      	mov	r1, r6
 8008472:	4628      	mov	r0, r5
 8008474:	47b8      	blx	r7
 8008476:	3001      	adds	r0, #1
 8008478:	f43f ae57 	beq.w	800812a <_printf_float+0xba>
 800847c:	f108 0801 	add.w	r8, r8, #1
 8008480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008482:	3b01      	subs	r3, #1
 8008484:	4543      	cmp	r3, r8
 8008486:	dcf1      	bgt.n	800846c <_printf_float+0x3fc>
 8008488:	464b      	mov	r3, r9
 800848a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800848e:	e6de      	b.n	800824e <_printf_float+0x1de>
 8008490:	f04f 0800 	mov.w	r8, #0
 8008494:	f104 0a1a 	add.w	sl, r4, #26
 8008498:	e7f2      	b.n	8008480 <_printf_float+0x410>
 800849a:	2301      	movs	r3, #1
 800849c:	e7df      	b.n	800845e <_printf_float+0x3ee>
 800849e:	2301      	movs	r3, #1
 80084a0:	464a      	mov	r2, r9
 80084a2:	4631      	mov	r1, r6
 80084a4:	4628      	mov	r0, r5
 80084a6:	47b8      	blx	r7
 80084a8:	3001      	adds	r0, #1
 80084aa:	f43f ae3e 	beq.w	800812a <_printf_float+0xba>
 80084ae:	f108 0801 	add.w	r8, r8, #1
 80084b2:	68e3      	ldr	r3, [r4, #12]
 80084b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084b6:	1a9b      	subs	r3, r3, r2
 80084b8:	4543      	cmp	r3, r8
 80084ba:	dcf0      	bgt.n	800849e <_printf_float+0x42e>
 80084bc:	e6fc      	b.n	80082b8 <_printf_float+0x248>
 80084be:	f04f 0800 	mov.w	r8, #0
 80084c2:	f104 0919 	add.w	r9, r4, #25
 80084c6:	e7f4      	b.n	80084b2 <_printf_float+0x442>
 80084c8:	2900      	cmp	r1, #0
 80084ca:	f43f ae8b 	beq.w	80081e4 <_printf_float+0x174>
 80084ce:	2300      	movs	r3, #0
 80084d0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80084d4:	ab09      	add	r3, sp, #36	; 0x24
 80084d6:	9300      	str	r3, [sp, #0]
 80084d8:	ec49 8b10 	vmov	d0, r8, r9
 80084dc:	6022      	str	r2, [r4, #0]
 80084de:	f8cd a004 	str.w	sl, [sp, #4]
 80084e2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80084e6:	4628      	mov	r0, r5
 80084e8:	f7ff fd2e 	bl	8007f48 <__cvt>
 80084ec:	4680      	mov	r8, r0
 80084ee:	e648      	b.n	8008182 <_printf_float+0x112>

080084f0 <_printf_common>:
 80084f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084f4:	4691      	mov	r9, r2
 80084f6:	461f      	mov	r7, r3
 80084f8:	688a      	ldr	r2, [r1, #8]
 80084fa:	690b      	ldr	r3, [r1, #16]
 80084fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008500:	4293      	cmp	r3, r2
 8008502:	bfb8      	it	lt
 8008504:	4613      	movlt	r3, r2
 8008506:	f8c9 3000 	str.w	r3, [r9]
 800850a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800850e:	4606      	mov	r6, r0
 8008510:	460c      	mov	r4, r1
 8008512:	b112      	cbz	r2, 800851a <_printf_common+0x2a>
 8008514:	3301      	adds	r3, #1
 8008516:	f8c9 3000 	str.w	r3, [r9]
 800851a:	6823      	ldr	r3, [r4, #0]
 800851c:	0699      	lsls	r1, r3, #26
 800851e:	bf42      	ittt	mi
 8008520:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008524:	3302      	addmi	r3, #2
 8008526:	f8c9 3000 	strmi.w	r3, [r9]
 800852a:	6825      	ldr	r5, [r4, #0]
 800852c:	f015 0506 	ands.w	r5, r5, #6
 8008530:	d107      	bne.n	8008542 <_printf_common+0x52>
 8008532:	f104 0a19 	add.w	sl, r4, #25
 8008536:	68e3      	ldr	r3, [r4, #12]
 8008538:	f8d9 2000 	ldr.w	r2, [r9]
 800853c:	1a9b      	subs	r3, r3, r2
 800853e:	42ab      	cmp	r3, r5
 8008540:	dc28      	bgt.n	8008594 <_printf_common+0xa4>
 8008542:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008546:	6822      	ldr	r2, [r4, #0]
 8008548:	3300      	adds	r3, #0
 800854a:	bf18      	it	ne
 800854c:	2301      	movne	r3, #1
 800854e:	0692      	lsls	r2, r2, #26
 8008550:	d42d      	bmi.n	80085ae <_printf_common+0xbe>
 8008552:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008556:	4639      	mov	r1, r7
 8008558:	4630      	mov	r0, r6
 800855a:	47c0      	blx	r8
 800855c:	3001      	adds	r0, #1
 800855e:	d020      	beq.n	80085a2 <_printf_common+0xb2>
 8008560:	6823      	ldr	r3, [r4, #0]
 8008562:	68e5      	ldr	r5, [r4, #12]
 8008564:	f8d9 2000 	ldr.w	r2, [r9]
 8008568:	f003 0306 	and.w	r3, r3, #6
 800856c:	2b04      	cmp	r3, #4
 800856e:	bf08      	it	eq
 8008570:	1aad      	subeq	r5, r5, r2
 8008572:	68a3      	ldr	r3, [r4, #8]
 8008574:	6922      	ldr	r2, [r4, #16]
 8008576:	bf0c      	ite	eq
 8008578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800857c:	2500      	movne	r5, #0
 800857e:	4293      	cmp	r3, r2
 8008580:	bfc4      	itt	gt
 8008582:	1a9b      	subgt	r3, r3, r2
 8008584:	18ed      	addgt	r5, r5, r3
 8008586:	f04f 0900 	mov.w	r9, #0
 800858a:	341a      	adds	r4, #26
 800858c:	454d      	cmp	r5, r9
 800858e:	d11a      	bne.n	80085c6 <_printf_common+0xd6>
 8008590:	2000      	movs	r0, #0
 8008592:	e008      	b.n	80085a6 <_printf_common+0xb6>
 8008594:	2301      	movs	r3, #1
 8008596:	4652      	mov	r2, sl
 8008598:	4639      	mov	r1, r7
 800859a:	4630      	mov	r0, r6
 800859c:	47c0      	blx	r8
 800859e:	3001      	adds	r0, #1
 80085a0:	d103      	bne.n	80085aa <_printf_common+0xba>
 80085a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085aa:	3501      	adds	r5, #1
 80085ac:	e7c3      	b.n	8008536 <_printf_common+0x46>
 80085ae:	18e1      	adds	r1, r4, r3
 80085b0:	1c5a      	adds	r2, r3, #1
 80085b2:	2030      	movs	r0, #48	; 0x30
 80085b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085b8:	4422      	add	r2, r4
 80085ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085c2:	3302      	adds	r3, #2
 80085c4:	e7c5      	b.n	8008552 <_printf_common+0x62>
 80085c6:	2301      	movs	r3, #1
 80085c8:	4622      	mov	r2, r4
 80085ca:	4639      	mov	r1, r7
 80085cc:	4630      	mov	r0, r6
 80085ce:	47c0      	blx	r8
 80085d0:	3001      	adds	r0, #1
 80085d2:	d0e6      	beq.n	80085a2 <_printf_common+0xb2>
 80085d4:	f109 0901 	add.w	r9, r9, #1
 80085d8:	e7d8      	b.n	800858c <_printf_common+0x9c>
	...

080085dc <_sbrk_r>:
 80085dc:	b538      	push	{r3, r4, r5, lr}
 80085de:	4c06      	ldr	r4, [pc, #24]	; (80085f8 <_sbrk_r+0x1c>)
 80085e0:	2300      	movs	r3, #0
 80085e2:	4605      	mov	r5, r0
 80085e4:	4608      	mov	r0, r1
 80085e6:	6023      	str	r3, [r4, #0]
 80085e8:	f7fd fd5e 	bl	80060a8 <_sbrk>
 80085ec:	1c43      	adds	r3, r0, #1
 80085ee:	d102      	bne.n	80085f6 <_sbrk_r+0x1a>
 80085f0:	6823      	ldr	r3, [r4, #0]
 80085f2:	b103      	cbz	r3, 80085f6 <_sbrk_r+0x1a>
 80085f4:	602b      	str	r3, [r5, #0]
 80085f6:	bd38      	pop	{r3, r4, r5, pc}
 80085f8:	20003204 	.word	0x20003204

080085fc <_raise_r>:
 80085fc:	291f      	cmp	r1, #31
 80085fe:	b538      	push	{r3, r4, r5, lr}
 8008600:	4604      	mov	r4, r0
 8008602:	460d      	mov	r5, r1
 8008604:	d904      	bls.n	8008610 <_raise_r+0x14>
 8008606:	2316      	movs	r3, #22
 8008608:	6003      	str	r3, [r0, #0]
 800860a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800860e:	bd38      	pop	{r3, r4, r5, pc}
 8008610:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008612:	b112      	cbz	r2, 800861a <_raise_r+0x1e>
 8008614:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008618:	b94b      	cbnz	r3, 800862e <_raise_r+0x32>
 800861a:	4620      	mov	r0, r4
 800861c:	f000 f830 	bl	8008680 <_getpid_r>
 8008620:	462a      	mov	r2, r5
 8008622:	4601      	mov	r1, r0
 8008624:	4620      	mov	r0, r4
 8008626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800862a:	f000 b817 	b.w	800865c <_kill_r>
 800862e:	2b01      	cmp	r3, #1
 8008630:	d00a      	beq.n	8008648 <_raise_r+0x4c>
 8008632:	1c59      	adds	r1, r3, #1
 8008634:	d103      	bne.n	800863e <_raise_r+0x42>
 8008636:	2316      	movs	r3, #22
 8008638:	6003      	str	r3, [r0, #0]
 800863a:	2001      	movs	r0, #1
 800863c:	e7e7      	b.n	800860e <_raise_r+0x12>
 800863e:	2400      	movs	r4, #0
 8008640:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008644:	4628      	mov	r0, r5
 8008646:	4798      	blx	r3
 8008648:	2000      	movs	r0, #0
 800864a:	e7e0      	b.n	800860e <_raise_r+0x12>

0800864c <raise>:
 800864c:	4b02      	ldr	r3, [pc, #8]	; (8008658 <raise+0xc>)
 800864e:	4601      	mov	r1, r0
 8008650:	6818      	ldr	r0, [r3, #0]
 8008652:	f7ff bfd3 	b.w	80085fc <_raise_r>
 8008656:	bf00      	nop
 8008658:	20000010 	.word	0x20000010

0800865c <_kill_r>:
 800865c:	b538      	push	{r3, r4, r5, lr}
 800865e:	4c07      	ldr	r4, [pc, #28]	; (800867c <_kill_r+0x20>)
 8008660:	2300      	movs	r3, #0
 8008662:	4605      	mov	r5, r0
 8008664:	4608      	mov	r0, r1
 8008666:	4611      	mov	r1, r2
 8008668:	6023      	str	r3, [r4, #0]
 800866a:	f7fd fd02 	bl	8006072 <_kill>
 800866e:	1c43      	adds	r3, r0, #1
 8008670:	d102      	bne.n	8008678 <_kill_r+0x1c>
 8008672:	6823      	ldr	r3, [r4, #0]
 8008674:	b103      	cbz	r3, 8008678 <_kill_r+0x1c>
 8008676:	602b      	str	r3, [r5, #0]
 8008678:	bd38      	pop	{r3, r4, r5, pc}
 800867a:	bf00      	nop
 800867c:	20003204 	.word	0x20003204

08008680 <_getpid_r>:
 8008680:	f7fd bcef 	b.w	8006062 <_getpid>

08008684 <quorem>:
 8008684:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008688:	6903      	ldr	r3, [r0, #16]
 800868a:	690c      	ldr	r4, [r1, #16]
 800868c:	42a3      	cmp	r3, r4
 800868e:	4680      	mov	r8, r0
 8008690:	f2c0 8082 	blt.w	8008798 <quorem+0x114>
 8008694:	3c01      	subs	r4, #1
 8008696:	f101 0714 	add.w	r7, r1, #20
 800869a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800869e:	f100 0614 	add.w	r6, r0, #20
 80086a2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80086a6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80086aa:	eb06 030c 	add.w	r3, r6, ip
 80086ae:	3501      	adds	r5, #1
 80086b0:	eb07 090c 	add.w	r9, r7, ip
 80086b4:	9301      	str	r3, [sp, #4]
 80086b6:	fbb0 f5f5 	udiv	r5, r0, r5
 80086ba:	b395      	cbz	r5, 8008722 <quorem+0x9e>
 80086bc:	f04f 0a00 	mov.w	sl, #0
 80086c0:	4638      	mov	r0, r7
 80086c2:	46b6      	mov	lr, r6
 80086c4:	46d3      	mov	fp, sl
 80086c6:	f850 2b04 	ldr.w	r2, [r0], #4
 80086ca:	b293      	uxth	r3, r2
 80086cc:	fb05 a303 	mla	r3, r5, r3, sl
 80086d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	ebab 0303 	sub.w	r3, fp, r3
 80086da:	0c12      	lsrs	r2, r2, #16
 80086dc:	f8de b000 	ldr.w	fp, [lr]
 80086e0:	fb05 a202 	mla	r2, r5, r2, sl
 80086e4:	fa13 f38b 	uxtah	r3, r3, fp
 80086e8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80086ec:	fa1f fb82 	uxth.w	fp, r2
 80086f0:	f8de 2000 	ldr.w	r2, [lr]
 80086f4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80086f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008702:	4581      	cmp	r9, r0
 8008704:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008708:	f84e 3b04 	str.w	r3, [lr], #4
 800870c:	d2db      	bcs.n	80086c6 <quorem+0x42>
 800870e:	f856 300c 	ldr.w	r3, [r6, ip]
 8008712:	b933      	cbnz	r3, 8008722 <quorem+0x9e>
 8008714:	9b01      	ldr	r3, [sp, #4]
 8008716:	3b04      	subs	r3, #4
 8008718:	429e      	cmp	r6, r3
 800871a:	461a      	mov	r2, r3
 800871c:	d330      	bcc.n	8008780 <quorem+0xfc>
 800871e:	f8c8 4010 	str.w	r4, [r8, #16]
 8008722:	4640      	mov	r0, r8
 8008724:	f001 f81a 	bl	800975c <__mcmp>
 8008728:	2800      	cmp	r0, #0
 800872a:	db25      	blt.n	8008778 <quorem+0xf4>
 800872c:	3501      	adds	r5, #1
 800872e:	4630      	mov	r0, r6
 8008730:	f04f 0c00 	mov.w	ip, #0
 8008734:	f857 2b04 	ldr.w	r2, [r7], #4
 8008738:	f8d0 e000 	ldr.w	lr, [r0]
 800873c:	b293      	uxth	r3, r2
 800873e:	ebac 0303 	sub.w	r3, ip, r3
 8008742:	0c12      	lsrs	r2, r2, #16
 8008744:	fa13 f38e 	uxtah	r3, r3, lr
 8008748:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800874c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008750:	b29b      	uxth	r3, r3
 8008752:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008756:	45b9      	cmp	r9, r7
 8008758:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800875c:	f840 3b04 	str.w	r3, [r0], #4
 8008760:	d2e8      	bcs.n	8008734 <quorem+0xb0>
 8008762:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008766:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800876a:	b92a      	cbnz	r2, 8008778 <quorem+0xf4>
 800876c:	3b04      	subs	r3, #4
 800876e:	429e      	cmp	r6, r3
 8008770:	461a      	mov	r2, r3
 8008772:	d30b      	bcc.n	800878c <quorem+0x108>
 8008774:	f8c8 4010 	str.w	r4, [r8, #16]
 8008778:	4628      	mov	r0, r5
 800877a:	b003      	add	sp, #12
 800877c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008780:	6812      	ldr	r2, [r2, #0]
 8008782:	3b04      	subs	r3, #4
 8008784:	2a00      	cmp	r2, #0
 8008786:	d1ca      	bne.n	800871e <quorem+0x9a>
 8008788:	3c01      	subs	r4, #1
 800878a:	e7c5      	b.n	8008718 <quorem+0x94>
 800878c:	6812      	ldr	r2, [r2, #0]
 800878e:	3b04      	subs	r3, #4
 8008790:	2a00      	cmp	r2, #0
 8008792:	d1ef      	bne.n	8008774 <quorem+0xf0>
 8008794:	3c01      	subs	r4, #1
 8008796:	e7ea      	b.n	800876e <quorem+0xea>
 8008798:	2000      	movs	r0, #0
 800879a:	e7ee      	b.n	800877a <quorem+0xf6>
 800879c:	0000      	movs	r0, r0
	...

080087a0 <_dtoa_r>:
 80087a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a4:	ec57 6b10 	vmov	r6, r7, d0
 80087a8:	b097      	sub	sp, #92	; 0x5c
 80087aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80087ac:	9106      	str	r1, [sp, #24]
 80087ae:	4604      	mov	r4, r0
 80087b0:	920b      	str	r2, [sp, #44]	; 0x2c
 80087b2:	9312      	str	r3, [sp, #72]	; 0x48
 80087b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80087b8:	e9cd 6700 	strd	r6, r7, [sp]
 80087bc:	b93d      	cbnz	r5, 80087ce <_dtoa_r+0x2e>
 80087be:	2010      	movs	r0, #16
 80087c0:	f7ff faf6 	bl	8007db0 <malloc>
 80087c4:	6260      	str	r0, [r4, #36]	; 0x24
 80087c6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80087ca:	6005      	str	r5, [r0, #0]
 80087cc:	60c5      	str	r5, [r0, #12]
 80087ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087d0:	6819      	ldr	r1, [r3, #0]
 80087d2:	b151      	cbz	r1, 80087ea <_dtoa_r+0x4a>
 80087d4:	685a      	ldr	r2, [r3, #4]
 80087d6:	604a      	str	r2, [r1, #4]
 80087d8:	2301      	movs	r3, #1
 80087da:	4093      	lsls	r3, r2
 80087dc:	608b      	str	r3, [r1, #8]
 80087de:	4620      	mov	r0, r4
 80087e0:	f000 fdda 	bl	8009398 <_Bfree>
 80087e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087e6:	2200      	movs	r2, #0
 80087e8:	601a      	str	r2, [r3, #0]
 80087ea:	1e3b      	subs	r3, r7, #0
 80087ec:	bfbb      	ittet	lt
 80087ee:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80087f2:	9301      	strlt	r3, [sp, #4]
 80087f4:	2300      	movge	r3, #0
 80087f6:	2201      	movlt	r2, #1
 80087f8:	bfac      	ite	ge
 80087fa:	f8c8 3000 	strge.w	r3, [r8]
 80087fe:	f8c8 2000 	strlt.w	r2, [r8]
 8008802:	4baf      	ldr	r3, [pc, #700]	; (8008ac0 <_dtoa_r+0x320>)
 8008804:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008808:	ea33 0308 	bics.w	r3, r3, r8
 800880c:	d114      	bne.n	8008838 <_dtoa_r+0x98>
 800880e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008810:	f242 730f 	movw	r3, #9999	; 0x270f
 8008814:	6013      	str	r3, [r2, #0]
 8008816:	9b00      	ldr	r3, [sp, #0]
 8008818:	b923      	cbnz	r3, 8008824 <_dtoa_r+0x84>
 800881a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800881e:	2800      	cmp	r0, #0
 8008820:	f000 8542 	beq.w	80092a8 <_dtoa_r+0xb08>
 8008824:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008826:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008ad4 <_dtoa_r+0x334>
 800882a:	2b00      	cmp	r3, #0
 800882c:	f000 8544 	beq.w	80092b8 <_dtoa_r+0xb18>
 8008830:	f10b 0303 	add.w	r3, fp, #3
 8008834:	f000 bd3e 	b.w	80092b4 <_dtoa_r+0xb14>
 8008838:	e9dd 6700 	ldrd	r6, r7, [sp]
 800883c:	2200      	movs	r2, #0
 800883e:	2300      	movs	r3, #0
 8008840:	4630      	mov	r0, r6
 8008842:	4639      	mov	r1, r7
 8008844:	f7f8 f90c 	bl	8000a60 <__aeabi_dcmpeq>
 8008848:	4681      	mov	r9, r0
 800884a:	b168      	cbz	r0, 8008868 <_dtoa_r+0xc8>
 800884c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800884e:	2301      	movs	r3, #1
 8008850:	6013      	str	r3, [r2, #0]
 8008852:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008854:	2b00      	cmp	r3, #0
 8008856:	f000 8524 	beq.w	80092a2 <_dtoa_r+0xb02>
 800885a:	4b9a      	ldr	r3, [pc, #616]	; (8008ac4 <_dtoa_r+0x324>)
 800885c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800885e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8008862:	6013      	str	r3, [r2, #0]
 8008864:	f000 bd28 	b.w	80092b8 <_dtoa_r+0xb18>
 8008868:	aa14      	add	r2, sp, #80	; 0x50
 800886a:	a915      	add	r1, sp, #84	; 0x54
 800886c:	ec47 6b10 	vmov	d0, r6, r7
 8008870:	4620      	mov	r0, r4
 8008872:	f000 ffea 	bl	800984a <__d2b>
 8008876:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800887a:	9004      	str	r0, [sp, #16]
 800887c:	2d00      	cmp	r5, #0
 800887e:	d07c      	beq.n	800897a <_dtoa_r+0x1da>
 8008880:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008884:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008888:	46b2      	mov	sl, r6
 800888a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800888e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008892:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008896:	2200      	movs	r2, #0
 8008898:	4b8b      	ldr	r3, [pc, #556]	; (8008ac8 <_dtoa_r+0x328>)
 800889a:	4650      	mov	r0, sl
 800889c:	4659      	mov	r1, fp
 800889e:	f7f7 fcbf 	bl	8000220 <__aeabi_dsub>
 80088a2:	a381      	add	r3, pc, #516	; (adr r3, 8008aa8 <_dtoa_r+0x308>)
 80088a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a8:	f7f7 fe72 	bl	8000590 <__aeabi_dmul>
 80088ac:	a380      	add	r3, pc, #512	; (adr r3, 8008ab0 <_dtoa_r+0x310>)
 80088ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b2:	f7f7 fcb7 	bl	8000224 <__adddf3>
 80088b6:	4606      	mov	r6, r0
 80088b8:	4628      	mov	r0, r5
 80088ba:	460f      	mov	r7, r1
 80088bc:	f7f7 fdfe 	bl	80004bc <__aeabi_i2d>
 80088c0:	a37d      	add	r3, pc, #500	; (adr r3, 8008ab8 <_dtoa_r+0x318>)
 80088c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c6:	f7f7 fe63 	bl	8000590 <__aeabi_dmul>
 80088ca:	4602      	mov	r2, r0
 80088cc:	460b      	mov	r3, r1
 80088ce:	4630      	mov	r0, r6
 80088d0:	4639      	mov	r1, r7
 80088d2:	f7f7 fca7 	bl	8000224 <__adddf3>
 80088d6:	4606      	mov	r6, r0
 80088d8:	460f      	mov	r7, r1
 80088da:	f7f8 f909 	bl	8000af0 <__aeabi_d2iz>
 80088de:	2200      	movs	r2, #0
 80088e0:	4682      	mov	sl, r0
 80088e2:	2300      	movs	r3, #0
 80088e4:	4630      	mov	r0, r6
 80088e6:	4639      	mov	r1, r7
 80088e8:	f7f8 f8c4 	bl	8000a74 <__aeabi_dcmplt>
 80088ec:	b148      	cbz	r0, 8008902 <_dtoa_r+0x162>
 80088ee:	4650      	mov	r0, sl
 80088f0:	f7f7 fde4 	bl	80004bc <__aeabi_i2d>
 80088f4:	4632      	mov	r2, r6
 80088f6:	463b      	mov	r3, r7
 80088f8:	f7f8 f8b2 	bl	8000a60 <__aeabi_dcmpeq>
 80088fc:	b908      	cbnz	r0, 8008902 <_dtoa_r+0x162>
 80088fe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008902:	f1ba 0f16 	cmp.w	sl, #22
 8008906:	d859      	bhi.n	80089bc <_dtoa_r+0x21c>
 8008908:	4970      	ldr	r1, [pc, #448]	; (8008acc <_dtoa_r+0x32c>)
 800890a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800890e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008912:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008916:	f7f8 f8cb 	bl	8000ab0 <__aeabi_dcmpgt>
 800891a:	2800      	cmp	r0, #0
 800891c:	d050      	beq.n	80089c0 <_dtoa_r+0x220>
 800891e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008922:	2300      	movs	r3, #0
 8008924:	930f      	str	r3, [sp, #60]	; 0x3c
 8008926:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008928:	1b5d      	subs	r5, r3, r5
 800892a:	f1b5 0801 	subs.w	r8, r5, #1
 800892e:	bf49      	itett	mi
 8008930:	f1c5 0301 	rsbmi	r3, r5, #1
 8008934:	2300      	movpl	r3, #0
 8008936:	9305      	strmi	r3, [sp, #20]
 8008938:	f04f 0800 	movmi.w	r8, #0
 800893c:	bf58      	it	pl
 800893e:	9305      	strpl	r3, [sp, #20]
 8008940:	f1ba 0f00 	cmp.w	sl, #0
 8008944:	db3e      	blt.n	80089c4 <_dtoa_r+0x224>
 8008946:	2300      	movs	r3, #0
 8008948:	44d0      	add	r8, sl
 800894a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800894e:	9307      	str	r3, [sp, #28]
 8008950:	9b06      	ldr	r3, [sp, #24]
 8008952:	2b09      	cmp	r3, #9
 8008954:	f200 8090 	bhi.w	8008a78 <_dtoa_r+0x2d8>
 8008958:	2b05      	cmp	r3, #5
 800895a:	bfc4      	itt	gt
 800895c:	3b04      	subgt	r3, #4
 800895e:	9306      	strgt	r3, [sp, #24]
 8008960:	9b06      	ldr	r3, [sp, #24]
 8008962:	f1a3 0302 	sub.w	r3, r3, #2
 8008966:	bfcc      	ite	gt
 8008968:	2500      	movgt	r5, #0
 800896a:	2501      	movle	r5, #1
 800896c:	2b03      	cmp	r3, #3
 800896e:	f200 808f 	bhi.w	8008a90 <_dtoa_r+0x2f0>
 8008972:	e8df f003 	tbb	[pc, r3]
 8008976:	7f7d      	.short	0x7f7d
 8008978:	7131      	.short	0x7131
 800897a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800897e:	441d      	add	r5, r3
 8008980:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008984:	2820      	cmp	r0, #32
 8008986:	dd13      	ble.n	80089b0 <_dtoa_r+0x210>
 8008988:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800898c:	9b00      	ldr	r3, [sp, #0]
 800898e:	fa08 f800 	lsl.w	r8, r8, r0
 8008992:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008996:	fa23 f000 	lsr.w	r0, r3, r0
 800899a:	ea48 0000 	orr.w	r0, r8, r0
 800899e:	f7f7 fd7d 	bl	800049c <__aeabi_ui2d>
 80089a2:	2301      	movs	r3, #1
 80089a4:	4682      	mov	sl, r0
 80089a6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80089aa:	3d01      	subs	r5, #1
 80089ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80089ae:	e772      	b.n	8008896 <_dtoa_r+0xf6>
 80089b0:	9b00      	ldr	r3, [sp, #0]
 80089b2:	f1c0 0020 	rsb	r0, r0, #32
 80089b6:	fa03 f000 	lsl.w	r0, r3, r0
 80089ba:	e7f0      	b.n	800899e <_dtoa_r+0x1fe>
 80089bc:	2301      	movs	r3, #1
 80089be:	e7b1      	b.n	8008924 <_dtoa_r+0x184>
 80089c0:	900f      	str	r0, [sp, #60]	; 0x3c
 80089c2:	e7b0      	b.n	8008926 <_dtoa_r+0x186>
 80089c4:	9b05      	ldr	r3, [sp, #20]
 80089c6:	eba3 030a 	sub.w	r3, r3, sl
 80089ca:	9305      	str	r3, [sp, #20]
 80089cc:	f1ca 0300 	rsb	r3, sl, #0
 80089d0:	9307      	str	r3, [sp, #28]
 80089d2:	2300      	movs	r3, #0
 80089d4:	930e      	str	r3, [sp, #56]	; 0x38
 80089d6:	e7bb      	b.n	8008950 <_dtoa_r+0x1b0>
 80089d8:	2301      	movs	r3, #1
 80089da:	930a      	str	r3, [sp, #40]	; 0x28
 80089dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089de:	2b00      	cmp	r3, #0
 80089e0:	dd59      	ble.n	8008a96 <_dtoa_r+0x2f6>
 80089e2:	9302      	str	r3, [sp, #8]
 80089e4:	4699      	mov	r9, r3
 80089e6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80089e8:	2200      	movs	r2, #0
 80089ea:	6072      	str	r2, [r6, #4]
 80089ec:	2204      	movs	r2, #4
 80089ee:	f102 0014 	add.w	r0, r2, #20
 80089f2:	4298      	cmp	r0, r3
 80089f4:	6871      	ldr	r1, [r6, #4]
 80089f6:	d953      	bls.n	8008aa0 <_dtoa_r+0x300>
 80089f8:	4620      	mov	r0, r4
 80089fa:	f000 fc99 	bl	8009330 <_Balloc>
 80089fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a00:	6030      	str	r0, [r6, #0]
 8008a02:	f1b9 0f0e 	cmp.w	r9, #14
 8008a06:	f8d3 b000 	ldr.w	fp, [r3]
 8008a0a:	f200 80e6 	bhi.w	8008bda <_dtoa_r+0x43a>
 8008a0e:	2d00      	cmp	r5, #0
 8008a10:	f000 80e3 	beq.w	8008bda <_dtoa_r+0x43a>
 8008a14:	ed9d 7b00 	vldr	d7, [sp]
 8008a18:	f1ba 0f00 	cmp.w	sl, #0
 8008a1c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008a20:	dd74      	ble.n	8008b0c <_dtoa_r+0x36c>
 8008a22:	4a2a      	ldr	r2, [pc, #168]	; (8008acc <_dtoa_r+0x32c>)
 8008a24:	f00a 030f 	and.w	r3, sl, #15
 8008a28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008a2c:	ed93 7b00 	vldr	d7, [r3]
 8008a30:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008a34:	06f0      	lsls	r0, r6, #27
 8008a36:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008a3a:	d565      	bpl.n	8008b08 <_dtoa_r+0x368>
 8008a3c:	4b24      	ldr	r3, [pc, #144]	; (8008ad0 <_dtoa_r+0x330>)
 8008a3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008a42:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a46:	f7f7 fecd 	bl	80007e4 <__aeabi_ddiv>
 8008a4a:	e9cd 0100 	strd	r0, r1, [sp]
 8008a4e:	f006 060f 	and.w	r6, r6, #15
 8008a52:	2503      	movs	r5, #3
 8008a54:	4f1e      	ldr	r7, [pc, #120]	; (8008ad0 <_dtoa_r+0x330>)
 8008a56:	e04c      	b.n	8008af2 <_dtoa_r+0x352>
 8008a58:	2301      	movs	r3, #1
 8008a5a:	930a      	str	r3, [sp, #40]	; 0x28
 8008a5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a5e:	4453      	add	r3, sl
 8008a60:	f103 0901 	add.w	r9, r3, #1
 8008a64:	9302      	str	r3, [sp, #8]
 8008a66:	464b      	mov	r3, r9
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	bfb8      	it	lt
 8008a6c:	2301      	movlt	r3, #1
 8008a6e:	e7ba      	b.n	80089e6 <_dtoa_r+0x246>
 8008a70:	2300      	movs	r3, #0
 8008a72:	e7b2      	b.n	80089da <_dtoa_r+0x23a>
 8008a74:	2300      	movs	r3, #0
 8008a76:	e7f0      	b.n	8008a5a <_dtoa_r+0x2ba>
 8008a78:	2501      	movs	r5, #1
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	9306      	str	r3, [sp, #24]
 8008a7e:	950a      	str	r5, [sp, #40]	; 0x28
 8008a80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a84:	9302      	str	r3, [sp, #8]
 8008a86:	4699      	mov	r9, r3
 8008a88:	2200      	movs	r2, #0
 8008a8a:	2312      	movs	r3, #18
 8008a8c:	920b      	str	r2, [sp, #44]	; 0x2c
 8008a8e:	e7aa      	b.n	80089e6 <_dtoa_r+0x246>
 8008a90:	2301      	movs	r3, #1
 8008a92:	930a      	str	r3, [sp, #40]	; 0x28
 8008a94:	e7f4      	b.n	8008a80 <_dtoa_r+0x2e0>
 8008a96:	2301      	movs	r3, #1
 8008a98:	9302      	str	r3, [sp, #8]
 8008a9a:	4699      	mov	r9, r3
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	e7f5      	b.n	8008a8c <_dtoa_r+0x2ec>
 8008aa0:	3101      	adds	r1, #1
 8008aa2:	6071      	str	r1, [r6, #4]
 8008aa4:	0052      	lsls	r2, r2, #1
 8008aa6:	e7a2      	b.n	80089ee <_dtoa_r+0x24e>
 8008aa8:	636f4361 	.word	0x636f4361
 8008aac:	3fd287a7 	.word	0x3fd287a7
 8008ab0:	8b60c8b3 	.word	0x8b60c8b3
 8008ab4:	3fc68a28 	.word	0x3fc68a28
 8008ab8:	509f79fb 	.word	0x509f79fb
 8008abc:	3fd34413 	.word	0x3fd34413
 8008ac0:	7ff00000 	.word	0x7ff00000
 8008ac4:	0800a341 	.word	0x0800a341
 8008ac8:	3ff80000 	.word	0x3ff80000
 8008acc:	0800a378 	.word	0x0800a378
 8008ad0:	0800a350 	.word	0x0800a350
 8008ad4:	0800a34b 	.word	0x0800a34b
 8008ad8:	07f1      	lsls	r1, r6, #31
 8008ada:	d508      	bpl.n	8008aee <_dtoa_r+0x34e>
 8008adc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008ae0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ae4:	f7f7 fd54 	bl	8000590 <__aeabi_dmul>
 8008ae8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008aec:	3501      	adds	r5, #1
 8008aee:	1076      	asrs	r6, r6, #1
 8008af0:	3708      	adds	r7, #8
 8008af2:	2e00      	cmp	r6, #0
 8008af4:	d1f0      	bne.n	8008ad8 <_dtoa_r+0x338>
 8008af6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008afa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008afe:	f7f7 fe71 	bl	80007e4 <__aeabi_ddiv>
 8008b02:	e9cd 0100 	strd	r0, r1, [sp]
 8008b06:	e01a      	b.n	8008b3e <_dtoa_r+0x39e>
 8008b08:	2502      	movs	r5, #2
 8008b0a:	e7a3      	b.n	8008a54 <_dtoa_r+0x2b4>
 8008b0c:	f000 80a0 	beq.w	8008c50 <_dtoa_r+0x4b0>
 8008b10:	f1ca 0600 	rsb	r6, sl, #0
 8008b14:	4b9f      	ldr	r3, [pc, #636]	; (8008d94 <_dtoa_r+0x5f4>)
 8008b16:	4fa0      	ldr	r7, [pc, #640]	; (8008d98 <_dtoa_r+0x5f8>)
 8008b18:	f006 020f 	and.w	r2, r6, #15
 8008b1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b28:	f7f7 fd32 	bl	8000590 <__aeabi_dmul>
 8008b2c:	e9cd 0100 	strd	r0, r1, [sp]
 8008b30:	1136      	asrs	r6, r6, #4
 8008b32:	2300      	movs	r3, #0
 8008b34:	2502      	movs	r5, #2
 8008b36:	2e00      	cmp	r6, #0
 8008b38:	d17f      	bne.n	8008c3a <_dtoa_r+0x49a>
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1e1      	bne.n	8008b02 <_dtoa_r+0x362>
 8008b3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f000 8087 	beq.w	8008c54 <_dtoa_r+0x4b4>
 8008b46:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	4b93      	ldr	r3, [pc, #588]	; (8008d9c <_dtoa_r+0x5fc>)
 8008b4e:	4630      	mov	r0, r6
 8008b50:	4639      	mov	r1, r7
 8008b52:	f7f7 ff8f 	bl	8000a74 <__aeabi_dcmplt>
 8008b56:	2800      	cmp	r0, #0
 8008b58:	d07c      	beq.n	8008c54 <_dtoa_r+0x4b4>
 8008b5a:	f1b9 0f00 	cmp.w	r9, #0
 8008b5e:	d079      	beq.n	8008c54 <_dtoa_r+0x4b4>
 8008b60:	9b02      	ldr	r3, [sp, #8]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	dd35      	ble.n	8008bd2 <_dtoa_r+0x432>
 8008b66:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008b6a:	9308      	str	r3, [sp, #32]
 8008b6c:	4639      	mov	r1, r7
 8008b6e:	2200      	movs	r2, #0
 8008b70:	4b8b      	ldr	r3, [pc, #556]	; (8008da0 <_dtoa_r+0x600>)
 8008b72:	4630      	mov	r0, r6
 8008b74:	f7f7 fd0c 	bl	8000590 <__aeabi_dmul>
 8008b78:	e9cd 0100 	strd	r0, r1, [sp]
 8008b7c:	9f02      	ldr	r7, [sp, #8]
 8008b7e:	3501      	adds	r5, #1
 8008b80:	4628      	mov	r0, r5
 8008b82:	f7f7 fc9b 	bl	80004bc <__aeabi_i2d>
 8008b86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b8a:	f7f7 fd01 	bl	8000590 <__aeabi_dmul>
 8008b8e:	2200      	movs	r2, #0
 8008b90:	4b84      	ldr	r3, [pc, #528]	; (8008da4 <_dtoa_r+0x604>)
 8008b92:	f7f7 fb47 	bl	8000224 <__adddf3>
 8008b96:	4605      	mov	r5, r0
 8008b98:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008b9c:	2f00      	cmp	r7, #0
 8008b9e:	d15d      	bne.n	8008c5c <_dtoa_r+0x4bc>
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	4b81      	ldr	r3, [pc, #516]	; (8008da8 <_dtoa_r+0x608>)
 8008ba4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ba8:	f7f7 fb3a 	bl	8000220 <__aeabi_dsub>
 8008bac:	462a      	mov	r2, r5
 8008bae:	4633      	mov	r3, r6
 8008bb0:	e9cd 0100 	strd	r0, r1, [sp]
 8008bb4:	f7f7 ff7c 	bl	8000ab0 <__aeabi_dcmpgt>
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	f040 8288 	bne.w	80090ce <_dtoa_r+0x92e>
 8008bbe:	462a      	mov	r2, r5
 8008bc0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008bc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bc8:	f7f7 ff54 	bl	8000a74 <__aeabi_dcmplt>
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	f040 827c 	bne.w	80090ca <_dtoa_r+0x92a>
 8008bd2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008bd6:	e9cd 2300 	strd	r2, r3, [sp]
 8008bda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f2c0 8150 	blt.w	8008e82 <_dtoa_r+0x6e2>
 8008be2:	f1ba 0f0e 	cmp.w	sl, #14
 8008be6:	f300 814c 	bgt.w	8008e82 <_dtoa_r+0x6e2>
 8008bea:	4b6a      	ldr	r3, [pc, #424]	; (8008d94 <_dtoa_r+0x5f4>)
 8008bec:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008bf0:	ed93 7b00 	vldr	d7, [r3]
 8008bf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008bfc:	f280 80d8 	bge.w	8008db0 <_dtoa_r+0x610>
 8008c00:	f1b9 0f00 	cmp.w	r9, #0
 8008c04:	f300 80d4 	bgt.w	8008db0 <_dtoa_r+0x610>
 8008c08:	f040 825e 	bne.w	80090c8 <_dtoa_r+0x928>
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	4b66      	ldr	r3, [pc, #408]	; (8008da8 <_dtoa_r+0x608>)
 8008c10:	ec51 0b17 	vmov	r0, r1, d7
 8008c14:	f7f7 fcbc 	bl	8000590 <__aeabi_dmul>
 8008c18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c1c:	f7f7 ff3e 	bl	8000a9c <__aeabi_dcmpge>
 8008c20:	464f      	mov	r7, r9
 8008c22:	464e      	mov	r6, r9
 8008c24:	2800      	cmp	r0, #0
 8008c26:	f040 8234 	bne.w	8009092 <_dtoa_r+0x8f2>
 8008c2a:	2331      	movs	r3, #49	; 0x31
 8008c2c:	f10b 0501 	add.w	r5, fp, #1
 8008c30:	f88b 3000 	strb.w	r3, [fp]
 8008c34:	f10a 0a01 	add.w	sl, sl, #1
 8008c38:	e22f      	b.n	800909a <_dtoa_r+0x8fa>
 8008c3a:	07f2      	lsls	r2, r6, #31
 8008c3c:	d505      	bpl.n	8008c4a <_dtoa_r+0x4aa>
 8008c3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c42:	f7f7 fca5 	bl	8000590 <__aeabi_dmul>
 8008c46:	3501      	adds	r5, #1
 8008c48:	2301      	movs	r3, #1
 8008c4a:	1076      	asrs	r6, r6, #1
 8008c4c:	3708      	adds	r7, #8
 8008c4e:	e772      	b.n	8008b36 <_dtoa_r+0x396>
 8008c50:	2502      	movs	r5, #2
 8008c52:	e774      	b.n	8008b3e <_dtoa_r+0x39e>
 8008c54:	f8cd a020 	str.w	sl, [sp, #32]
 8008c58:	464f      	mov	r7, r9
 8008c5a:	e791      	b.n	8008b80 <_dtoa_r+0x3e0>
 8008c5c:	4b4d      	ldr	r3, [pc, #308]	; (8008d94 <_dtoa_r+0x5f4>)
 8008c5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008c62:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d047      	beq.n	8008cfc <_dtoa_r+0x55c>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	460b      	mov	r3, r1
 8008c70:	2000      	movs	r0, #0
 8008c72:	494e      	ldr	r1, [pc, #312]	; (8008dac <_dtoa_r+0x60c>)
 8008c74:	f7f7 fdb6 	bl	80007e4 <__aeabi_ddiv>
 8008c78:	462a      	mov	r2, r5
 8008c7a:	4633      	mov	r3, r6
 8008c7c:	f7f7 fad0 	bl	8000220 <__aeabi_dsub>
 8008c80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008c84:	465d      	mov	r5, fp
 8008c86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c8a:	f7f7 ff31 	bl	8000af0 <__aeabi_d2iz>
 8008c8e:	4606      	mov	r6, r0
 8008c90:	f7f7 fc14 	bl	80004bc <__aeabi_i2d>
 8008c94:	4602      	mov	r2, r0
 8008c96:	460b      	mov	r3, r1
 8008c98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c9c:	f7f7 fac0 	bl	8000220 <__aeabi_dsub>
 8008ca0:	3630      	adds	r6, #48	; 0x30
 8008ca2:	f805 6b01 	strb.w	r6, [r5], #1
 8008ca6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008caa:	e9cd 0100 	strd	r0, r1, [sp]
 8008cae:	f7f7 fee1 	bl	8000a74 <__aeabi_dcmplt>
 8008cb2:	2800      	cmp	r0, #0
 8008cb4:	d163      	bne.n	8008d7e <_dtoa_r+0x5de>
 8008cb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cba:	2000      	movs	r0, #0
 8008cbc:	4937      	ldr	r1, [pc, #220]	; (8008d9c <_dtoa_r+0x5fc>)
 8008cbe:	f7f7 faaf 	bl	8000220 <__aeabi_dsub>
 8008cc2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008cc6:	f7f7 fed5 	bl	8000a74 <__aeabi_dcmplt>
 8008cca:	2800      	cmp	r0, #0
 8008ccc:	f040 80b7 	bne.w	8008e3e <_dtoa_r+0x69e>
 8008cd0:	eba5 030b 	sub.w	r3, r5, fp
 8008cd4:	429f      	cmp	r7, r3
 8008cd6:	f77f af7c 	ble.w	8008bd2 <_dtoa_r+0x432>
 8008cda:	2200      	movs	r2, #0
 8008cdc:	4b30      	ldr	r3, [pc, #192]	; (8008da0 <_dtoa_r+0x600>)
 8008cde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ce2:	f7f7 fc55 	bl	8000590 <__aeabi_dmul>
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008cec:	4b2c      	ldr	r3, [pc, #176]	; (8008da0 <_dtoa_r+0x600>)
 8008cee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cf2:	f7f7 fc4d 	bl	8000590 <__aeabi_dmul>
 8008cf6:	e9cd 0100 	strd	r0, r1, [sp]
 8008cfa:	e7c4      	b.n	8008c86 <_dtoa_r+0x4e6>
 8008cfc:	462a      	mov	r2, r5
 8008cfe:	4633      	mov	r3, r6
 8008d00:	f7f7 fc46 	bl	8000590 <__aeabi_dmul>
 8008d04:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008d08:	eb0b 0507 	add.w	r5, fp, r7
 8008d0c:	465e      	mov	r6, fp
 8008d0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d12:	f7f7 feed 	bl	8000af0 <__aeabi_d2iz>
 8008d16:	4607      	mov	r7, r0
 8008d18:	f7f7 fbd0 	bl	80004bc <__aeabi_i2d>
 8008d1c:	3730      	adds	r7, #48	; 0x30
 8008d1e:	4602      	mov	r2, r0
 8008d20:	460b      	mov	r3, r1
 8008d22:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d26:	f7f7 fa7b 	bl	8000220 <__aeabi_dsub>
 8008d2a:	f806 7b01 	strb.w	r7, [r6], #1
 8008d2e:	42ae      	cmp	r6, r5
 8008d30:	e9cd 0100 	strd	r0, r1, [sp]
 8008d34:	f04f 0200 	mov.w	r2, #0
 8008d38:	d126      	bne.n	8008d88 <_dtoa_r+0x5e8>
 8008d3a:	4b1c      	ldr	r3, [pc, #112]	; (8008dac <_dtoa_r+0x60c>)
 8008d3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d40:	f7f7 fa70 	bl	8000224 <__adddf3>
 8008d44:	4602      	mov	r2, r0
 8008d46:	460b      	mov	r3, r1
 8008d48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d4c:	f7f7 feb0 	bl	8000ab0 <__aeabi_dcmpgt>
 8008d50:	2800      	cmp	r0, #0
 8008d52:	d174      	bne.n	8008e3e <_dtoa_r+0x69e>
 8008d54:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008d58:	2000      	movs	r0, #0
 8008d5a:	4914      	ldr	r1, [pc, #80]	; (8008dac <_dtoa_r+0x60c>)
 8008d5c:	f7f7 fa60 	bl	8000220 <__aeabi_dsub>
 8008d60:	4602      	mov	r2, r0
 8008d62:	460b      	mov	r3, r1
 8008d64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d68:	f7f7 fe84 	bl	8000a74 <__aeabi_dcmplt>
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	f43f af30 	beq.w	8008bd2 <_dtoa_r+0x432>
 8008d72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008d76:	2b30      	cmp	r3, #48	; 0x30
 8008d78:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008d7c:	d002      	beq.n	8008d84 <_dtoa_r+0x5e4>
 8008d7e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008d82:	e04a      	b.n	8008e1a <_dtoa_r+0x67a>
 8008d84:	4615      	mov	r5, r2
 8008d86:	e7f4      	b.n	8008d72 <_dtoa_r+0x5d2>
 8008d88:	4b05      	ldr	r3, [pc, #20]	; (8008da0 <_dtoa_r+0x600>)
 8008d8a:	f7f7 fc01 	bl	8000590 <__aeabi_dmul>
 8008d8e:	e9cd 0100 	strd	r0, r1, [sp]
 8008d92:	e7bc      	b.n	8008d0e <_dtoa_r+0x56e>
 8008d94:	0800a378 	.word	0x0800a378
 8008d98:	0800a350 	.word	0x0800a350
 8008d9c:	3ff00000 	.word	0x3ff00000
 8008da0:	40240000 	.word	0x40240000
 8008da4:	401c0000 	.word	0x401c0000
 8008da8:	40140000 	.word	0x40140000
 8008dac:	3fe00000 	.word	0x3fe00000
 8008db0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008db4:	465d      	mov	r5, fp
 8008db6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dba:	4630      	mov	r0, r6
 8008dbc:	4639      	mov	r1, r7
 8008dbe:	f7f7 fd11 	bl	80007e4 <__aeabi_ddiv>
 8008dc2:	f7f7 fe95 	bl	8000af0 <__aeabi_d2iz>
 8008dc6:	4680      	mov	r8, r0
 8008dc8:	f7f7 fb78 	bl	80004bc <__aeabi_i2d>
 8008dcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dd0:	f7f7 fbde 	bl	8000590 <__aeabi_dmul>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	4630      	mov	r0, r6
 8008dda:	4639      	mov	r1, r7
 8008ddc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008de0:	f7f7 fa1e 	bl	8000220 <__aeabi_dsub>
 8008de4:	f805 6b01 	strb.w	r6, [r5], #1
 8008de8:	eba5 060b 	sub.w	r6, r5, fp
 8008dec:	45b1      	cmp	r9, r6
 8008dee:	4602      	mov	r2, r0
 8008df0:	460b      	mov	r3, r1
 8008df2:	d139      	bne.n	8008e68 <_dtoa_r+0x6c8>
 8008df4:	f7f7 fa16 	bl	8000224 <__adddf3>
 8008df8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dfc:	4606      	mov	r6, r0
 8008dfe:	460f      	mov	r7, r1
 8008e00:	f7f7 fe56 	bl	8000ab0 <__aeabi_dcmpgt>
 8008e04:	b9c8      	cbnz	r0, 8008e3a <_dtoa_r+0x69a>
 8008e06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e0a:	4630      	mov	r0, r6
 8008e0c:	4639      	mov	r1, r7
 8008e0e:	f7f7 fe27 	bl	8000a60 <__aeabi_dcmpeq>
 8008e12:	b110      	cbz	r0, 8008e1a <_dtoa_r+0x67a>
 8008e14:	f018 0f01 	tst.w	r8, #1
 8008e18:	d10f      	bne.n	8008e3a <_dtoa_r+0x69a>
 8008e1a:	9904      	ldr	r1, [sp, #16]
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	f000 fabb 	bl	8009398 <_Bfree>
 8008e22:	2300      	movs	r3, #0
 8008e24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e26:	702b      	strb	r3, [r5, #0]
 8008e28:	f10a 0301 	add.w	r3, sl, #1
 8008e2c:	6013      	str	r3, [r2, #0]
 8008e2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 8241 	beq.w	80092b8 <_dtoa_r+0xb18>
 8008e36:	601d      	str	r5, [r3, #0]
 8008e38:	e23e      	b.n	80092b8 <_dtoa_r+0xb18>
 8008e3a:	f8cd a020 	str.w	sl, [sp, #32]
 8008e3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008e42:	2a39      	cmp	r2, #57	; 0x39
 8008e44:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8008e48:	d108      	bne.n	8008e5c <_dtoa_r+0x6bc>
 8008e4a:	459b      	cmp	fp, r3
 8008e4c:	d10a      	bne.n	8008e64 <_dtoa_r+0x6c4>
 8008e4e:	9b08      	ldr	r3, [sp, #32]
 8008e50:	3301      	adds	r3, #1
 8008e52:	9308      	str	r3, [sp, #32]
 8008e54:	2330      	movs	r3, #48	; 0x30
 8008e56:	f88b 3000 	strb.w	r3, [fp]
 8008e5a:	465b      	mov	r3, fp
 8008e5c:	781a      	ldrb	r2, [r3, #0]
 8008e5e:	3201      	adds	r2, #1
 8008e60:	701a      	strb	r2, [r3, #0]
 8008e62:	e78c      	b.n	8008d7e <_dtoa_r+0x5de>
 8008e64:	461d      	mov	r5, r3
 8008e66:	e7ea      	b.n	8008e3e <_dtoa_r+0x69e>
 8008e68:	2200      	movs	r2, #0
 8008e6a:	4b9b      	ldr	r3, [pc, #620]	; (80090d8 <_dtoa_r+0x938>)
 8008e6c:	f7f7 fb90 	bl	8000590 <__aeabi_dmul>
 8008e70:	2200      	movs	r2, #0
 8008e72:	2300      	movs	r3, #0
 8008e74:	4606      	mov	r6, r0
 8008e76:	460f      	mov	r7, r1
 8008e78:	f7f7 fdf2 	bl	8000a60 <__aeabi_dcmpeq>
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	d09a      	beq.n	8008db6 <_dtoa_r+0x616>
 8008e80:	e7cb      	b.n	8008e1a <_dtoa_r+0x67a>
 8008e82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e84:	2a00      	cmp	r2, #0
 8008e86:	f000 808b 	beq.w	8008fa0 <_dtoa_r+0x800>
 8008e8a:	9a06      	ldr	r2, [sp, #24]
 8008e8c:	2a01      	cmp	r2, #1
 8008e8e:	dc6e      	bgt.n	8008f6e <_dtoa_r+0x7ce>
 8008e90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008e92:	2a00      	cmp	r2, #0
 8008e94:	d067      	beq.n	8008f66 <_dtoa_r+0x7c6>
 8008e96:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008e9a:	9f07      	ldr	r7, [sp, #28]
 8008e9c:	9d05      	ldr	r5, [sp, #20]
 8008e9e:	9a05      	ldr	r2, [sp, #20]
 8008ea0:	2101      	movs	r1, #1
 8008ea2:	441a      	add	r2, r3
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	9205      	str	r2, [sp, #20]
 8008ea8:	4498      	add	r8, r3
 8008eaa:	f000 fb15 	bl	80094d8 <__i2b>
 8008eae:	4606      	mov	r6, r0
 8008eb0:	2d00      	cmp	r5, #0
 8008eb2:	dd0c      	ble.n	8008ece <_dtoa_r+0x72e>
 8008eb4:	f1b8 0f00 	cmp.w	r8, #0
 8008eb8:	dd09      	ble.n	8008ece <_dtoa_r+0x72e>
 8008eba:	4545      	cmp	r5, r8
 8008ebc:	9a05      	ldr	r2, [sp, #20]
 8008ebe:	462b      	mov	r3, r5
 8008ec0:	bfa8      	it	ge
 8008ec2:	4643      	movge	r3, r8
 8008ec4:	1ad2      	subs	r2, r2, r3
 8008ec6:	9205      	str	r2, [sp, #20]
 8008ec8:	1aed      	subs	r5, r5, r3
 8008eca:	eba8 0803 	sub.w	r8, r8, r3
 8008ece:	9b07      	ldr	r3, [sp, #28]
 8008ed0:	b1eb      	cbz	r3, 8008f0e <_dtoa_r+0x76e>
 8008ed2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d067      	beq.n	8008fa8 <_dtoa_r+0x808>
 8008ed8:	b18f      	cbz	r7, 8008efe <_dtoa_r+0x75e>
 8008eda:	4631      	mov	r1, r6
 8008edc:	463a      	mov	r2, r7
 8008ede:	4620      	mov	r0, r4
 8008ee0:	f000 fb9a 	bl	8009618 <__pow5mult>
 8008ee4:	9a04      	ldr	r2, [sp, #16]
 8008ee6:	4601      	mov	r1, r0
 8008ee8:	4606      	mov	r6, r0
 8008eea:	4620      	mov	r0, r4
 8008eec:	f000 fafd 	bl	80094ea <__multiply>
 8008ef0:	9904      	ldr	r1, [sp, #16]
 8008ef2:	9008      	str	r0, [sp, #32]
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	f000 fa4f 	bl	8009398 <_Bfree>
 8008efa:	9b08      	ldr	r3, [sp, #32]
 8008efc:	9304      	str	r3, [sp, #16]
 8008efe:	9b07      	ldr	r3, [sp, #28]
 8008f00:	1bda      	subs	r2, r3, r7
 8008f02:	d004      	beq.n	8008f0e <_dtoa_r+0x76e>
 8008f04:	9904      	ldr	r1, [sp, #16]
 8008f06:	4620      	mov	r0, r4
 8008f08:	f000 fb86 	bl	8009618 <__pow5mult>
 8008f0c:	9004      	str	r0, [sp, #16]
 8008f0e:	2101      	movs	r1, #1
 8008f10:	4620      	mov	r0, r4
 8008f12:	f000 fae1 	bl	80094d8 <__i2b>
 8008f16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f18:	4607      	mov	r7, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	f000 81d0 	beq.w	80092c0 <_dtoa_r+0xb20>
 8008f20:	461a      	mov	r2, r3
 8008f22:	4601      	mov	r1, r0
 8008f24:	4620      	mov	r0, r4
 8008f26:	f000 fb77 	bl	8009618 <__pow5mult>
 8008f2a:	9b06      	ldr	r3, [sp, #24]
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	4607      	mov	r7, r0
 8008f30:	dc40      	bgt.n	8008fb4 <_dtoa_r+0x814>
 8008f32:	9b00      	ldr	r3, [sp, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d139      	bne.n	8008fac <_dtoa_r+0x80c>
 8008f38:	9b01      	ldr	r3, [sp, #4]
 8008f3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d136      	bne.n	8008fb0 <_dtoa_r+0x810>
 8008f42:	9b01      	ldr	r3, [sp, #4]
 8008f44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f48:	0d1b      	lsrs	r3, r3, #20
 8008f4a:	051b      	lsls	r3, r3, #20
 8008f4c:	b12b      	cbz	r3, 8008f5a <_dtoa_r+0x7ba>
 8008f4e:	9b05      	ldr	r3, [sp, #20]
 8008f50:	3301      	adds	r3, #1
 8008f52:	9305      	str	r3, [sp, #20]
 8008f54:	f108 0801 	add.w	r8, r8, #1
 8008f58:	2301      	movs	r3, #1
 8008f5a:	9307      	str	r3, [sp, #28]
 8008f5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d12a      	bne.n	8008fb8 <_dtoa_r+0x818>
 8008f62:	2001      	movs	r0, #1
 8008f64:	e030      	b.n	8008fc8 <_dtoa_r+0x828>
 8008f66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f68:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008f6c:	e795      	b.n	8008e9a <_dtoa_r+0x6fa>
 8008f6e:	9b07      	ldr	r3, [sp, #28]
 8008f70:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8008f74:	42bb      	cmp	r3, r7
 8008f76:	bfbf      	itttt	lt
 8008f78:	9b07      	ldrlt	r3, [sp, #28]
 8008f7a:	9707      	strlt	r7, [sp, #28]
 8008f7c:	1afa      	sublt	r2, r7, r3
 8008f7e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008f80:	bfbb      	ittet	lt
 8008f82:	189b      	addlt	r3, r3, r2
 8008f84:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008f86:	1bdf      	subge	r7, r3, r7
 8008f88:	2700      	movlt	r7, #0
 8008f8a:	f1b9 0f00 	cmp.w	r9, #0
 8008f8e:	bfb5      	itete	lt
 8008f90:	9b05      	ldrlt	r3, [sp, #20]
 8008f92:	9d05      	ldrge	r5, [sp, #20]
 8008f94:	eba3 0509 	sublt.w	r5, r3, r9
 8008f98:	464b      	movge	r3, r9
 8008f9a:	bfb8      	it	lt
 8008f9c:	2300      	movlt	r3, #0
 8008f9e:	e77e      	b.n	8008e9e <_dtoa_r+0x6fe>
 8008fa0:	9f07      	ldr	r7, [sp, #28]
 8008fa2:	9d05      	ldr	r5, [sp, #20]
 8008fa4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008fa6:	e783      	b.n	8008eb0 <_dtoa_r+0x710>
 8008fa8:	9a07      	ldr	r2, [sp, #28]
 8008faa:	e7ab      	b.n	8008f04 <_dtoa_r+0x764>
 8008fac:	2300      	movs	r3, #0
 8008fae:	e7d4      	b.n	8008f5a <_dtoa_r+0x7ba>
 8008fb0:	9b00      	ldr	r3, [sp, #0]
 8008fb2:	e7d2      	b.n	8008f5a <_dtoa_r+0x7ba>
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	9307      	str	r3, [sp, #28]
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008fbe:	6918      	ldr	r0, [r3, #16]
 8008fc0:	f000 fa3c 	bl	800943c <__hi0bits>
 8008fc4:	f1c0 0020 	rsb	r0, r0, #32
 8008fc8:	4440      	add	r0, r8
 8008fca:	f010 001f 	ands.w	r0, r0, #31
 8008fce:	d047      	beq.n	8009060 <_dtoa_r+0x8c0>
 8008fd0:	f1c0 0320 	rsb	r3, r0, #32
 8008fd4:	2b04      	cmp	r3, #4
 8008fd6:	dd3b      	ble.n	8009050 <_dtoa_r+0x8b0>
 8008fd8:	9b05      	ldr	r3, [sp, #20]
 8008fda:	f1c0 001c 	rsb	r0, r0, #28
 8008fde:	4403      	add	r3, r0
 8008fe0:	9305      	str	r3, [sp, #20]
 8008fe2:	4405      	add	r5, r0
 8008fe4:	4480      	add	r8, r0
 8008fe6:	9b05      	ldr	r3, [sp, #20]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	dd05      	ble.n	8008ff8 <_dtoa_r+0x858>
 8008fec:	461a      	mov	r2, r3
 8008fee:	9904      	ldr	r1, [sp, #16]
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	f000 fb5f 	bl	80096b4 <__lshift>
 8008ff6:	9004      	str	r0, [sp, #16]
 8008ff8:	f1b8 0f00 	cmp.w	r8, #0
 8008ffc:	dd05      	ble.n	800900a <_dtoa_r+0x86a>
 8008ffe:	4639      	mov	r1, r7
 8009000:	4642      	mov	r2, r8
 8009002:	4620      	mov	r0, r4
 8009004:	f000 fb56 	bl	80096b4 <__lshift>
 8009008:	4607      	mov	r7, r0
 800900a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800900c:	b353      	cbz	r3, 8009064 <_dtoa_r+0x8c4>
 800900e:	4639      	mov	r1, r7
 8009010:	9804      	ldr	r0, [sp, #16]
 8009012:	f000 fba3 	bl	800975c <__mcmp>
 8009016:	2800      	cmp	r0, #0
 8009018:	da24      	bge.n	8009064 <_dtoa_r+0x8c4>
 800901a:	2300      	movs	r3, #0
 800901c:	220a      	movs	r2, #10
 800901e:	9904      	ldr	r1, [sp, #16]
 8009020:	4620      	mov	r0, r4
 8009022:	f000 f9d0 	bl	80093c6 <__multadd>
 8009026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009028:	9004      	str	r0, [sp, #16]
 800902a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800902e:	2b00      	cmp	r3, #0
 8009030:	f000 814d 	beq.w	80092ce <_dtoa_r+0xb2e>
 8009034:	2300      	movs	r3, #0
 8009036:	4631      	mov	r1, r6
 8009038:	220a      	movs	r2, #10
 800903a:	4620      	mov	r0, r4
 800903c:	f000 f9c3 	bl	80093c6 <__multadd>
 8009040:	9b02      	ldr	r3, [sp, #8]
 8009042:	2b00      	cmp	r3, #0
 8009044:	4606      	mov	r6, r0
 8009046:	dc4f      	bgt.n	80090e8 <_dtoa_r+0x948>
 8009048:	9b06      	ldr	r3, [sp, #24]
 800904a:	2b02      	cmp	r3, #2
 800904c:	dd4c      	ble.n	80090e8 <_dtoa_r+0x948>
 800904e:	e011      	b.n	8009074 <_dtoa_r+0x8d4>
 8009050:	d0c9      	beq.n	8008fe6 <_dtoa_r+0x846>
 8009052:	9a05      	ldr	r2, [sp, #20]
 8009054:	331c      	adds	r3, #28
 8009056:	441a      	add	r2, r3
 8009058:	9205      	str	r2, [sp, #20]
 800905a:	441d      	add	r5, r3
 800905c:	4498      	add	r8, r3
 800905e:	e7c2      	b.n	8008fe6 <_dtoa_r+0x846>
 8009060:	4603      	mov	r3, r0
 8009062:	e7f6      	b.n	8009052 <_dtoa_r+0x8b2>
 8009064:	f1b9 0f00 	cmp.w	r9, #0
 8009068:	dc38      	bgt.n	80090dc <_dtoa_r+0x93c>
 800906a:	9b06      	ldr	r3, [sp, #24]
 800906c:	2b02      	cmp	r3, #2
 800906e:	dd35      	ble.n	80090dc <_dtoa_r+0x93c>
 8009070:	f8cd 9008 	str.w	r9, [sp, #8]
 8009074:	9b02      	ldr	r3, [sp, #8]
 8009076:	b963      	cbnz	r3, 8009092 <_dtoa_r+0x8f2>
 8009078:	4639      	mov	r1, r7
 800907a:	2205      	movs	r2, #5
 800907c:	4620      	mov	r0, r4
 800907e:	f000 f9a2 	bl	80093c6 <__multadd>
 8009082:	4601      	mov	r1, r0
 8009084:	4607      	mov	r7, r0
 8009086:	9804      	ldr	r0, [sp, #16]
 8009088:	f000 fb68 	bl	800975c <__mcmp>
 800908c:	2800      	cmp	r0, #0
 800908e:	f73f adcc 	bgt.w	8008c2a <_dtoa_r+0x48a>
 8009092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009094:	465d      	mov	r5, fp
 8009096:	ea6f 0a03 	mvn.w	sl, r3
 800909a:	f04f 0900 	mov.w	r9, #0
 800909e:	4639      	mov	r1, r7
 80090a0:	4620      	mov	r0, r4
 80090a2:	f000 f979 	bl	8009398 <_Bfree>
 80090a6:	2e00      	cmp	r6, #0
 80090a8:	f43f aeb7 	beq.w	8008e1a <_dtoa_r+0x67a>
 80090ac:	f1b9 0f00 	cmp.w	r9, #0
 80090b0:	d005      	beq.n	80090be <_dtoa_r+0x91e>
 80090b2:	45b1      	cmp	r9, r6
 80090b4:	d003      	beq.n	80090be <_dtoa_r+0x91e>
 80090b6:	4649      	mov	r1, r9
 80090b8:	4620      	mov	r0, r4
 80090ba:	f000 f96d 	bl	8009398 <_Bfree>
 80090be:	4631      	mov	r1, r6
 80090c0:	4620      	mov	r0, r4
 80090c2:	f000 f969 	bl	8009398 <_Bfree>
 80090c6:	e6a8      	b.n	8008e1a <_dtoa_r+0x67a>
 80090c8:	2700      	movs	r7, #0
 80090ca:	463e      	mov	r6, r7
 80090cc:	e7e1      	b.n	8009092 <_dtoa_r+0x8f2>
 80090ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 80090d2:	463e      	mov	r6, r7
 80090d4:	e5a9      	b.n	8008c2a <_dtoa_r+0x48a>
 80090d6:	bf00      	nop
 80090d8:	40240000 	.word	0x40240000
 80090dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090de:	f8cd 9008 	str.w	r9, [sp, #8]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f000 80fa 	beq.w	80092dc <_dtoa_r+0xb3c>
 80090e8:	2d00      	cmp	r5, #0
 80090ea:	dd05      	ble.n	80090f8 <_dtoa_r+0x958>
 80090ec:	4631      	mov	r1, r6
 80090ee:	462a      	mov	r2, r5
 80090f0:	4620      	mov	r0, r4
 80090f2:	f000 fadf 	bl	80096b4 <__lshift>
 80090f6:	4606      	mov	r6, r0
 80090f8:	9b07      	ldr	r3, [sp, #28]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d04c      	beq.n	8009198 <_dtoa_r+0x9f8>
 80090fe:	6871      	ldr	r1, [r6, #4]
 8009100:	4620      	mov	r0, r4
 8009102:	f000 f915 	bl	8009330 <_Balloc>
 8009106:	6932      	ldr	r2, [r6, #16]
 8009108:	3202      	adds	r2, #2
 800910a:	4605      	mov	r5, r0
 800910c:	0092      	lsls	r2, r2, #2
 800910e:	f106 010c 	add.w	r1, r6, #12
 8009112:	300c      	adds	r0, #12
 8009114:	f7fe fe5c 	bl	8007dd0 <memcpy>
 8009118:	2201      	movs	r2, #1
 800911a:	4629      	mov	r1, r5
 800911c:	4620      	mov	r0, r4
 800911e:	f000 fac9 	bl	80096b4 <__lshift>
 8009122:	9b00      	ldr	r3, [sp, #0]
 8009124:	f8cd b014 	str.w	fp, [sp, #20]
 8009128:	f003 0301 	and.w	r3, r3, #1
 800912c:	46b1      	mov	r9, r6
 800912e:	9307      	str	r3, [sp, #28]
 8009130:	4606      	mov	r6, r0
 8009132:	4639      	mov	r1, r7
 8009134:	9804      	ldr	r0, [sp, #16]
 8009136:	f7ff faa5 	bl	8008684 <quorem>
 800913a:	4649      	mov	r1, r9
 800913c:	4605      	mov	r5, r0
 800913e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009142:	9804      	ldr	r0, [sp, #16]
 8009144:	f000 fb0a 	bl	800975c <__mcmp>
 8009148:	4632      	mov	r2, r6
 800914a:	9000      	str	r0, [sp, #0]
 800914c:	4639      	mov	r1, r7
 800914e:	4620      	mov	r0, r4
 8009150:	f000 fb1e 	bl	8009790 <__mdiff>
 8009154:	68c3      	ldr	r3, [r0, #12]
 8009156:	4602      	mov	r2, r0
 8009158:	bb03      	cbnz	r3, 800919c <_dtoa_r+0x9fc>
 800915a:	4601      	mov	r1, r0
 800915c:	9008      	str	r0, [sp, #32]
 800915e:	9804      	ldr	r0, [sp, #16]
 8009160:	f000 fafc 	bl	800975c <__mcmp>
 8009164:	9a08      	ldr	r2, [sp, #32]
 8009166:	4603      	mov	r3, r0
 8009168:	4611      	mov	r1, r2
 800916a:	4620      	mov	r0, r4
 800916c:	9308      	str	r3, [sp, #32]
 800916e:	f000 f913 	bl	8009398 <_Bfree>
 8009172:	9b08      	ldr	r3, [sp, #32]
 8009174:	b9a3      	cbnz	r3, 80091a0 <_dtoa_r+0xa00>
 8009176:	9a06      	ldr	r2, [sp, #24]
 8009178:	b992      	cbnz	r2, 80091a0 <_dtoa_r+0xa00>
 800917a:	9a07      	ldr	r2, [sp, #28]
 800917c:	b982      	cbnz	r2, 80091a0 <_dtoa_r+0xa00>
 800917e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009182:	d029      	beq.n	80091d8 <_dtoa_r+0xa38>
 8009184:	9b00      	ldr	r3, [sp, #0]
 8009186:	2b00      	cmp	r3, #0
 8009188:	dd01      	ble.n	800918e <_dtoa_r+0x9ee>
 800918a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800918e:	9b05      	ldr	r3, [sp, #20]
 8009190:	1c5d      	adds	r5, r3, #1
 8009192:	f883 8000 	strb.w	r8, [r3]
 8009196:	e782      	b.n	800909e <_dtoa_r+0x8fe>
 8009198:	4630      	mov	r0, r6
 800919a:	e7c2      	b.n	8009122 <_dtoa_r+0x982>
 800919c:	2301      	movs	r3, #1
 800919e:	e7e3      	b.n	8009168 <_dtoa_r+0x9c8>
 80091a0:	9a00      	ldr	r2, [sp, #0]
 80091a2:	2a00      	cmp	r2, #0
 80091a4:	db04      	blt.n	80091b0 <_dtoa_r+0xa10>
 80091a6:	d125      	bne.n	80091f4 <_dtoa_r+0xa54>
 80091a8:	9a06      	ldr	r2, [sp, #24]
 80091aa:	bb1a      	cbnz	r2, 80091f4 <_dtoa_r+0xa54>
 80091ac:	9a07      	ldr	r2, [sp, #28]
 80091ae:	bb0a      	cbnz	r2, 80091f4 <_dtoa_r+0xa54>
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	ddec      	ble.n	800918e <_dtoa_r+0x9ee>
 80091b4:	2201      	movs	r2, #1
 80091b6:	9904      	ldr	r1, [sp, #16]
 80091b8:	4620      	mov	r0, r4
 80091ba:	f000 fa7b 	bl	80096b4 <__lshift>
 80091be:	4639      	mov	r1, r7
 80091c0:	9004      	str	r0, [sp, #16]
 80091c2:	f000 facb 	bl	800975c <__mcmp>
 80091c6:	2800      	cmp	r0, #0
 80091c8:	dc03      	bgt.n	80091d2 <_dtoa_r+0xa32>
 80091ca:	d1e0      	bne.n	800918e <_dtoa_r+0x9ee>
 80091cc:	f018 0f01 	tst.w	r8, #1
 80091d0:	d0dd      	beq.n	800918e <_dtoa_r+0x9ee>
 80091d2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80091d6:	d1d8      	bne.n	800918a <_dtoa_r+0x9ea>
 80091d8:	9b05      	ldr	r3, [sp, #20]
 80091da:	9a05      	ldr	r2, [sp, #20]
 80091dc:	1c5d      	adds	r5, r3, #1
 80091de:	2339      	movs	r3, #57	; 0x39
 80091e0:	7013      	strb	r3, [r2, #0]
 80091e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80091e6:	2b39      	cmp	r3, #57	; 0x39
 80091e8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80091ec:	d04f      	beq.n	800928e <_dtoa_r+0xaee>
 80091ee:	3301      	adds	r3, #1
 80091f0:	7013      	strb	r3, [r2, #0]
 80091f2:	e754      	b.n	800909e <_dtoa_r+0x8fe>
 80091f4:	9a05      	ldr	r2, [sp, #20]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	f102 0501 	add.w	r5, r2, #1
 80091fc:	dd06      	ble.n	800920c <_dtoa_r+0xa6c>
 80091fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009202:	d0e9      	beq.n	80091d8 <_dtoa_r+0xa38>
 8009204:	f108 0801 	add.w	r8, r8, #1
 8009208:	9b05      	ldr	r3, [sp, #20]
 800920a:	e7c2      	b.n	8009192 <_dtoa_r+0x9f2>
 800920c:	9a02      	ldr	r2, [sp, #8]
 800920e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009212:	eba5 030b 	sub.w	r3, r5, fp
 8009216:	4293      	cmp	r3, r2
 8009218:	d021      	beq.n	800925e <_dtoa_r+0xabe>
 800921a:	2300      	movs	r3, #0
 800921c:	220a      	movs	r2, #10
 800921e:	9904      	ldr	r1, [sp, #16]
 8009220:	4620      	mov	r0, r4
 8009222:	f000 f8d0 	bl	80093c6 <__multadd>
 8009226:	45b1      	cmp	r9, r6
 8009228:	9004      	str	r0, [sp, #16]
 800922a:	f04f 0300 	mov.w	r3, #0
 800922e:	f04f 020a 	mov.w	r2, #10
 8009232:	4649      	mov	r1, r9
 8009234:	4620      	mov	r0, r4
 8009236:	d105      	bne.n	8009244 <_dtoa_r+0xaa4>
 8009238:	f000 f8c5 	bl	80093c6 <__multadd>
 800923c:	4681      	mov	r9, r0
 800923e:	4606      	mov	r6, r0
 8009240:	9505      	str	r5, [sp, #20]
 8009242:	e776      	b.n	8009132 <_dtoa_r+0x992>
 8009244:	f000 f8bf 	bl	80093c6 <__multadd>
 8009248:	4631      	mov	r1, r6
 800924a:	4681      	mov	r9, r0
 800924c:	2300      	movs	r3, #0
 800924e:	220a      	movs	r2, #10
 8009250:	4620      	mov	r0, r4
 8009252:	f000 f8b8 	bl	80093c6 <__multadd>
 8009256:	4606      	mov	r6, r0
 8009258:	e7f2      	b.n	8009240 <_dtoa_r+0xaa0>
 800925a:	f04f 0900 	mov.w	r9, #0
 800925e:	2201      	movs	r2, #1
 8009260:	9904      	ldr	r1, [sp, #16]
 8009262:	4620      	mov	r0, r4
 8009264:	f000 fa26 	bl	80096b4 <__lshift>
 8009268:	4639      	mov	r1, r7
 800926a:	9004      	str	r0, [sp, #16]
 800926c:	f000 fa76 	bl	800975c <__mcmp>
 8009270:	2800      	cmp	r0, #0
 8009272:	dcb6      	bgt.n	80091e2 <_dtoa_r+0xa42>
 8009274:	d102      	bne.n	800927c <_dtoa_r+0xadc>
 8009276:	f018 0f01 	tst.w	r8, #1
 800927a:	d1b2      	bne.n	80091e2 <_dtoa_r+0xa42>
 800927c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009280:	2b30      	cmp	r3, #48	; 0x30
 8009282:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8009286:	f47f af0a 	bne.w	800909e <_dtoa_r+0x8fe>
 800928a:	4615      	mov	r5, r2
 800928c:	e7f6      	b.n	800927c <_dtoa_r+0xadc>
 800928e:	4593      	cmp	fp, r2
 8009290:	d105      	bne.n	800929e <_dtoa_r+0xafe>
 8009292:	2331      	movs	r3, #49	; 0x31
 8009294:	f10a 0a01 	add.w	sl, sl, #1
 8009298:	f88b 3000 	strb.w	r3, [fp]
 800929c:	e6ff      	b.n	800909e <_dtoa_r+0x8fe>
 800929e:	4615      	mov	r5, r2
 80092a0:	e79f      	b.n	80091e2 <_dtoa_r+0xa42>
 80092a2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009308 <_dtoa_r+0xb68>
 80092a6:	e007      	b.n	80092b8 <_dtoa_r+0xb18>
 80092a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092aa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800930c <_dtoa_r+0xb6c>
 80092ae:	b11b      	cbz	r3, 80092b8 <_dtoa_r+0xb18>
 80092b0:	f10b 0308 	add.w	r3, fp, #8
 80092b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80092b6:	6013      	str	r3, [r2, #0]
 80092b8:	4658      	mov	r0, fp
 80092ba:	b017      	add	sp, #92	; 0x5c
 80092bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c0:	9b06      	ldr	r3, [sp, #24]
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	f77f ae35 	ble.w	8008f32 <_dtoa_r+0x792>
 80092c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092ca:	9307      	str	r3, [sp, #28]
 80092cc:	e649      	b.n	8008f62 <_dtoa_r+0x7c2>
 80092ce:	9b02      	ldr	r3, [sp, #8]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	dc03      	bgt.n	80092dc <_dtoa_r+0xb3c>
 80092d4:	9b06      	ldr	r3, [sp, #24]
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	f73f aecc 	bgt.w	8009074 <_dtoa_r+0x8d4>
 80092dc:	465d      	mov	r5, fp
 80092de:	4639      	mov	r1, r7
 80092e0:	9804      	ldr	r0, [sp, #16]
 80092e2:	f7ff f9cf 	bl	8008684 <quorem>
 80092e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80092ea:	f805 8b01 	strb.w	r8, [r5], #1
 80092ee:	9a02      	ldr	r2, [sp, #8]
 80092f0:	eba5 030b 	sub.w	r3, r5, fp
 80092f4:	429a      	cmp	r2, r3
 80092f6:	ddb0      	ble.n	800925a <_dtoa_r+0xaba>
 80092f8:	2300      	movs	r3, #0
 80092fa:	220a      	movs	r2, #10
 80092fc:	9904      	ldr	r1, [sp, #16]
 80092fe:	4620      	mov	r0, r4
 8009300:	f000 f861 	bl	80093c6 <__multadd>
 8009304:	9004      	str	r0, [sp, #16]
 8009306:	e7ea      	b.n	80092de <_dtoa_r+0xb3e>
 8009308:	0800a340 	.word	0x0800a340
 800930c:	0800a342 	.word	0x0800a342

08009310 <_localeconv_r>:
 8009310:	4b04      	ldr	r3, [pc, #16]	; (8009324 <_localeconv_r+0x14>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6a18      	ldr	r0, [r3, #32]
 8009316:	4b04      	ldr	r3, [pc, #16]	; (8009328 <_localeconv_r+0x18>)
 8009318:	2800      	cmp	r0, #0
 800931a:	bf08      	it	eq
 800931c:	4618      	moveq	r0, r3
 800931e:	30f0      	adds	r0, #240	; 0xf0
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop
 8009324:	20000010 	.word	0x20000010
 8009328:	20000074 	.word	0x20000074

0800932c <__malloc_lock>:
 800932c:	4770      	bx	lr

0800932e <__malloc_unlock>:
 800932e:	4770      	bx	lr

08009330 <_Balloc>:
 8009330:	b570      	push	{r4, r5, r6, lr}
 8009332:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009334:	4604      	mov	r4, r0
 8009336:	460e      	mov	r6, r1
 8009338:	b93d      	cbnz	r5, 800934a <_Balloc+0x1a>
 800933a:	2010      	movs	r0, #16
 800933c:	f7fe fd38 	bl	8007db0 <malloc>
 8009340:	6260      	str	r0, [r4, #36]	; 0x24
 8009342:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009346:	6005      	str	r5, [r0, #0]
 8009348:	60c5      	str	r5, [r0, #12]
 800934a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800934c:	68eb      	ldr	r3, [r5, #12]
 800934e:	b183      	cbz	r3, 8009372 <_Balloc+0x42>
 8009350:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009358:	b9b8      	cbnz	r0, 800938a <_Balloc+0x5a>
 800935a:	2101      	movs	r1, #1
 800935c:	fa01 f506 	lsl.w	r5, r1, r6
 8009360:	1d6a      	adds	r2, r5, #5
 8009362:	0092      	lsls	r2, r2, #2
 8009364:	4620      	mov	r0, r4
 8009366:	f000 fabf 	bl	80098e8 <_calloc_r>
 800936a:	b160      	cbz	r0, 8009386 <_Balloc+0x56>
 800936c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009370:	e00e      	b.n	8009390 <_Balloc+0x60>
 8009372:	2221      	movs	r2, #33	; 0x21
 8009374:	2104      	movs	r1, #4
 8009376:	4620      	mov	r0, r4
 8009378:	f000 fab6 	bl	80098e8 <_calloc_r>
 800937c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800937e:	60e8      	str	r0, [r5, #12]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d1e4      	bne.n	8009350 <_Balloc+0x20>
 8009386:	2000      	movs	r0, #0
 8009388:	bd70      	pop	{r4, r5, r6, pc}
 800938a:	6802      	ldr	r2, [r0, #0]
 800938c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009390:	2300      	movs	r3, #0
 8009392:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009396:	e7f7      	b.n	8009388 <_Balloc+0x58>

08009398 <_Bfree>:
 8009398:	b570      	push	{r4, r5, r6, lr}
 800939a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800939c:	4606      	mov	r6, r0
 800939e:	460d      	mov	r5, r1
 80093a0:	b93c      	cbnz	r4, 80093b2 <_Bfree+0x1a>
 80093a2:	2010      	movs	r0, #16
 80093a4:	f7fe fd04 	bl	8007db0 <malloc>
 80093a8:	6270      	str	r0, [r6, #36]	; 0x24
 80093aa:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80093ae:	6004      	str	r4, [r0, #0]
 80093b0:	60c4      	str	r4, [r0, #12]
 80093b2:	b13d      	cbz	r5, 80093c4 <_Bfree+0x2c>
 80093b4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80093b6:	686a      	ldr	r2, [r5, #4]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80093be:	6029      	str	r1, [r5, #0]
 80093c0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80093c4:	bd70      	pop	{r4, r5, r6, pc}

080093c6 <__multadd>:
 80093c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ca:	690d      	ldr	r5, [r1, #16]
 80093cc:	461f      	mov	r7, r3
 80093ce:	4606      	mov	r6, r0
 80093d0:	460c      	mov	r4, r1
 80093d2:	f101 0c14 	add.w	ip, r1, #20
 80093d6:	2300      	movs	r3, #0
 80093d8:	f8dc 0000 	ldr.w	r0, [ip]
 80093dc:	b281      	uxth	r1, r0
 80093de:	fb02 7101 	mla	r1, r2, r1, r7
 80093e2:	0c0f      	lsrs	r7, r1, #16
 80093e4:	0c00      	lsrs	r0, r0, #16
 80093e6:	fb02 7000 	mla	r0, r2, r0, r7
 80093ea:	b289      	uxth	r1, r1
 80093ec:	3301      	adds	r3, #1
 80093ee:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80093f2:	429d      	cmp	r5, r3
 80093f4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80093f8:	f84c 1b04 	str.w	r1, [ip], #4
 80093fc:	dcec      	bgt.n	80093d8 <__multadd+0x12>
 80093fe:	b1d7      	cbz	r7, 8009436 <__multadd+0x70>
 8009400:	68a3      	ldr	r3, [r4, #8]
 8009402:	42ab      	cmp	r3, r5
 8009404:	dc12      	bgt.n	800942c <__multadd+0x66>
 8009406:	6861      	ldr	r1, [r4, #4]
 8009408:	4630      	mov	r0, r6
 800940a:	3101      	adds	r1, #1
 800940c:	f7ff ff90 	bl	8009330 <_Balloc>
 8009410:	6922      	ldr	r2, [r4, #16]
 8009412:	3202      	adds	r2, #2
 8009414:	f104 010c 	add.w	r1, r4, #12
 8009418:	4680      	mov	r8, r0
 800941a:	0092      	lsls	r2, r2, #2
 800941c:	300c      	adds	r0, #12
 800941e:	f7fe fcd7 	bl	8007dd0 <memcpy>
 8009422:	4621      	mov	r1, r4
 8009424:	4630      	mov	r0, r6
 8009426:	f7ff ffb7 	bl	8009398 <_Bfree>
 800942a:	4644      	mov	r4, r8
 800942c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009430:	3501      	adds	r5, #1
 8009432:	615f      	str	r7, [r3, #20]
 8009434:	6125      	str	r5, [r4, #16]
 8009436:	4620      	mov	r0, r4
 8009438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800943c <__hi0bits>:
 800943c:	0c02      	lsrs	r2, r0, #16
 800943e:	0412      	lsls	r2, r2, #16
 8009440:	4603      	mov	r3, r0
 8009442:	b9b2      	cbnz	r2, 8009472 <__hi0bits+0x36>
 8009444:	0403      	lsls	r3, r0, #16
 8009446:	2010      	movs	r0, #16
 8009448:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800944c:	bf04      	itt	eq
 800944e:	021b      	lsleq	r3, r3, #8
 8009450:	3008      	addeq	r0, #8
 8009452:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009456:	bf04      	itt	eq
 8009458:	011b      	lsleq	r3, r3, #4
 800945a:	3004      	addeq	r0, #4
 800945c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009460:	bf04      	itt	eq
 8009462:	009b      	lsleq	r3, r3, #2
 8009464:	3002      	addeq	r0, #2
 8009466:	2b00      	cmp	r3, #0
 8009468:	db06      	blt.n	8009478 <__hi0bits+0x3c>
 800946a:	005b      	lsls	r3, r3, #1
 800946c:	d503      	bpl.n	8009476 <__hi0bits+0x3a>
 800946e:	3001      	adds	r0, #1
 8009470:	4770      	bx	lr
 8009472:	2000      	movs	r0, #0
 8009474:	e7e8      	b.n	8009448 <__hi0bits+0xc>
 8009476:	2020      	movs	r0, #32
 8009478:	4770      	bx	lr

0800947a <__lo0bits>:
 800947a:	6803      	ldr	r3, [r0, #0]
 800947c:	f013 0207 	ands.w	r2, r3, #7
 8009480:	4601      	mov	r1, r0
 8009482:	d00b      	beq.n	800949c <__lo0bits+0x22>
 8009484:	07da      	lsls	r2, r3, #31
 8009486:	d423      	bmi.n	80094d0 <__lo0bits+0x56>
 8009488:	0798      	lsls	r0, r3, #30
 800948a:	bf49      	itett	mi
 800948c:	085b      	lsrmi	r3, r3, #1
 800948e:	089b      	lsrpl	r3, r3, #2
 8009490:	2001      	movmi	r0, #1
 8009492:	600b      	strmi	r3, [r1, #0]
 8009494:	bf5c      	itt	pl
 8009496:	600b      	strpl	r3, [r1, #0]
 8009498:	2002      	movpl	r0, #2
 800949a:	4770      	bx	lr
 800949c:	b298      	uxth	r0, r3
 800949e:	b9a8      	cbnz	r0, 80094cc <__lo0bits+0x52>
 80094a0:	0c1b      	lsrs	r3, r3, #16
 80094a2:	2010      	movs	r0, #16
 80094a4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80094a8:	bf04      	itt	eq
 80094aa:	0a1b      	lsreq	r3, r3, #8
 80094ac:	3008      	addeq	r0, #8
 80094ae:	071a      	lsls	r2, r3, #28
 80094b0:	bf04      	itt	eq
 80094b2:	091b      	lsreq	r3, r3, #4
 80094b4:	3004      	addeq	r0, #4
 80094b6:	079a      	lsls	r2, r3, #30
 80094b8:	bf04      	itt	eq
 80094ba:	089b      	lsreq	r3, r3, #2
 80094bc:	3002      	addeq	r0, #2
 80094be:	07da      	lsls	r2, r3, #31
 80094c0:	d402      	bmi.n	80094c8 <__lo0bits+0x4e>
 80094c2:	085b      	lsrs	r3, r3, #1
 80094c4:	d006      	beq.n	80094d4 <__lo0bits+0x5a>
 80094c6:	3001      	adds	r0, #1
 80094c8:	600b      	str	r3, [r1, #0]
 80094ca:	4770      	bx	lr
 80094cc:	4610      	mov	r0, r2
 80094ce:	e7e9      	b.n	80094a4 <__lo0bits+0x2a>
 80094d0:	2000      	movs	r0, #0
 80094d2:	4770      	bx	lr
 80094d4:	2020      	movs	r0, #32
 80094d6:	4770      	bx	lr

080094d8 <__i2b>:
 80094d8:	b510      	push	{r4, lr}
 80094da:	460c      	mov	r4, r1
 80094dc:	2101      	movs	r1, #1
 80094de:	f7ff ff27 	bl	8009330 <_Balloc>
 80094e2:	2201      	movs	r2, #1
 80094e4:	6144      	str	r4, [r0, #20]
 80094e6:	6102      	str	r2, [r0, #16]
 80094e8:	bd10      	pop	{r4, pc}

080094ea <__multiply>:
 80094ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ee:	4614      	mov	r4, r2
 80094f0:	690a      	ldr	r2, [r1, #16]
 80094f2:	6923      	ldr	r3, [r4, #16]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	bfb8      	it	lt
 80094f8:	460b      	movlt	r3, r1
 80094fa:	4688      	mov	r8, r1
 80094fc:	bfbc      	itt	lt
 80094fe:	46a0      	movlt	r8, r4
 8009500:	461c      	movlt	r4, r3
 8009502:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009506:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800950a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800950e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009512:	eb07 0609 	add.w	r6, r7, r9
 8009516:	42b3      	cmp	r3, r6
 8009518:	bfb8      	it	lt
 800951a:	3101      	addlt	r1, #1
 800951c:	f7ff ff08 	bl	8009330 <_Balloc>
 8009520:	f100 0514 	add.w	r5, r0, #20
 8009524:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009528:	462b      	mov	r3, r5
 800952a:	2200      	movs	r2, #0
 800952c:	4573      	cmp	r3, lr
 800952e:	d316      	bcc.n	800955e <__multiply+0x74>
 8009530:	f104 0214 	add.w	r2, r4, #20
 8009534:	f108 0114 	add.w	r1, r8, #20
 8009538:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800953c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	9b00      	ldr	r3, [sp, #0]
 8009544:	9201      	str	r2, [sp, #4]
 8009546:	4293      	cmp	r3, r2
 8009548:	d80c      	bhi.n	8009564 <__multiply+0x7a>
 800954a:	2e00      	cmp	r6, #0
 800954c:	dd03      	ble.n	8009556 <__multiply+0x6c>
 800954e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009552:	2b00      	cmp	r3, #0
 8009554:	d05d      	beq.n	8009612 <__multiply+0x128>
 8009556:	6106      	str	r6, [r0, #16]
 8009558:	b003      	add	sp, #12
 800955a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800955e:	f843 2b04 	str.w	r2, [r3], #4
 8009562:	e7e3      	b.n	800952c <__multiply+0x42>
 8009564:	f8b2 b000 	ldrh.w	fp, [r2]
 8009568:	f1bb 0f00 	cmp.w	fp, #0
 800956c:	d023      	beq.n	80095b6 <__multiply+0xcc>
 800956e:	4689      	mov	r9, r1
 8009570:	46ac      	mov	ip, r5
 8009572:	f04f 0800 	mov.w	r8, #0
 8009576:	f859 4b04 	ldr.w	r4, [r9], #4
 800957a:	f8dc a000 	ldr.w	sl, [ip]
 800957e:	b2a3      	uxth	r3, r4
 8009580:	fa1f fa8a 	uxth.w	sl, sl
 8009584:	fb0b a303 	mla	r3, fp, r3, sl
 8009588:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800958c:	f8dc 4000 	ldr.w	r4, [ip]
 8009590:	4443      	add	r3, r8
 8009592:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009596:	fb0b 840a 	mla	r4, fp, sl, r8
 800959a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800959e:	46e2      	mov	sl, ip
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80095a6:	454f      	cmp	r7, r9
 80095a8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80095ac:	f84a 3b04 	str.w	r3, [sl], #4
 80095b0:	d82b      	bhi.n	800960a <__multiply+0x120>
 80095b2:	f8cc 8004 	str.w	r8, [ip, #4]
 80095b6:	9b01      	ldr	r3, [sp, #4]
 80095b8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80095bc:	3204      	adds	r2, #4
 80095be:	f1ba 0f00 	cmp.w	sl, #0
 80095c2:	d020      	beq.n	8009606 <__multiply+0x11c>
 80095c4:	682b      	ldr	r3, [r5, #0]
 80095c6:	4689      	mov	r9, r1
 80095c8:	46a8      	mov	r8, r5
 80095ca:	f04f 0b00 	mov.w	fp, #0
 80095ce:	f8b9 c000 	ldrh.w	ip, [r9]
 80095d2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80095d6:	fb0a 440c 	mla	r4, sl, ip, r4
 80095da:	445c      	add	r4, fp
 80095dc:	46c4      	mov	ip, r8
 80095de:	b29b      	uxth	r3, r3
 80095e0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80095e4:	f84c 3b04 	str.w	r3, [ip], #4
 80095e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80095ec:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80095f0:	0c1b      	lsrs	r3, r3, #16
 80095f2:	fb0a b303 	mla	r3, sl, r3, fp
 80095f6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80095fa:	454f      	cmp	r7, r9
 80095fc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009600:	d805      	bhi.n	800960e <__multiply+0x124>
 8009602:	f8c8 3004 	str.w	r3, [r8, #4]
 8009606:	3504      	adds	r5, #4
 8009608:	e79b      	b.n	8009542 <__multiply+0x58>
 800960a:	46d4      	mov	ip, sl
 800960c:	e7b3      	b.n	8009576 <__multiply+0x8c>
 800960e:	46e0      	mov	r8, ip
 8009610:	e7dd      	b.n	80095ce <__multiply+0xe4>
 8009612:	3e01      	subs	r6, #1
 8009614:	e799      	b.n	800954a <__multiply+0x60>
	...

08009618 <__pow5mult>:
 8009618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800961c:	4615      	mov	r5, r2
 800961e:	f012 0203 	ands.w	r2, r2, #3
 8009622:	4606      	mov	r6, r0
 8009624:	460f      	mov	r7, r1
 8009626:	d007      	beq.n	8009638 <__pow5mult+0x20>
 8009628:	3a01      	subs	r2, #1
 800962a:	4c21      	ldr	r4, [pc, #132]	; (80096b0 <__pow5mult+0x98>)
 800962c:	2300      	movs	r3, #0
 800962e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009632:	f7ff fec8 	bl	80093c6 <__multadd>
 8009636:	4607      	mov	r7, r0
 8009638:	10ad      	asrs	r5, r5, #2
 800963a:	d035      	beq.n	80096a8 <__pow5mult+0x90>
 800963c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800963e:	b93c      	cbnz	r4, 8009650 <__pow5mult+0x38>
 8009640:	2010      	movs	r0, #16
 8009642:	f7fe fbb5 	bl	8007db0 <malloc>
 8009646:	6270      	str	r0, [r6, #36]	; 0x24
 8009648:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800964c:	6004      	str	r4, [r0, #0]
 800964e:	60c4      	str	r4, [r0, #12]
 8009650:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009654:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009658:	b94c      	cbnz	r4, 800966e <__pow5mult+0x56>
 800965a:	f240 2171 	movw	r1, #625	; 0x271
 800965e:	4630      	mov	r0, r6
 8009660:	f7ff ff3a 	bl	80094d8 <__i2b>
 8009664:	2300      	movs	r3, #0
 8009666:	f8c8 0008 	str.w	r0, [r8, #8]
 800966a:	4604      	mov	r4, r0
 800966c:	6003      	str	r3, [r0, #0]
 800966e:	f04f 0800 	mov.w	r8, #0
 8009672:	07eb      	lsls	r3, r5, #31
 8009674:	d50a      	bpl.n	800968c <__pow5mult+0x74>
 8009676:	4639      	mov	r1, r7
 8009678:	4622      	mov	r2, r4
 800967a:	4630      	mov	r0, r6
 800967c:	f7ff ff35 	bl	80094ea <__multiply>
 8009680:	4639      	mov	r1, r7
 8009682:	4681      	mov	r9, r0
 8009684:	4630      	mov	r0, r6
 8009686:	f7ff fe87 	bl	8009398 <_Bfree>
 800968a:	464f      	mov	r7, r9
 800968c:	106d      	asrs	r5, r5, #1
 800968e:	d00b      	beq.n	80096a8 <__pow5mult+0x90>
 8009690:	6820      	ldr	r0, [r4, #0]
 8009692:	b938      	cbnz	r0, 80096a4 <__pow5mult+0x8c>
 8009694:	4622      	mov	r2, r4
 8009696:	4621      	mov	r1, r4
 8009698:	4630      	mov	r0, r6
 800969a:	f7ff ff26 	bl	80094ea <__multiply>
 800969e:	6020      	str	r0, [r4, #0]
 80096a0:	f8c0 8000 	str.w	r8, [r0]
 80096a4:	4604      	mov	r4, r0
 80096a6:	e7e4      	b.n	8009672 <__pow5mult+0x5a>
 80096a8:	4638      	mov	r0, r7
 80096aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ae:	bf00      	nop
 80096b0:	0800a440 	.word	0x0800a440

080096b4 <__lshift>:
 80096b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096b8:	460c      	mov	r4, r1
 80096ba:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80096be:	6923      	ldr	r3, [r4, #16]
 80096c0:	6849      	ldr	r1, [r1, #4]
 80096c2:	eb0a 0903 	add.w	r9, sl, r3
 80096c6:	68a3      	ldr	r3, [r4, #8]
 80096c8:	4607      	mov	r7, r0
 80096ca:	4616      	mov	r6, r2
 80096cc:	f109 0501 	add.w	r5, r9, #1
 80096d0:	42ab      	cmp	r3, r5
 80096d2:	db32      	blt.n	800973a <__lshift+0x86>
 80096d4:	4638      	mov	r0, r7
 80096d6:	f7ff fe2b 	bl	8009330 <_Balloc>
 80096da:	2300      	movs	r3, #0
 80096dc:	4680      	mov	r8, r0
 80096de:	f100 0114 	add.w	r1, r0, #20
 80096e2:	461a      	mov	r2, r3
 80096e4:	4553      	cmp	r3, sl
 80096e6:	db2b      	blt.n	8009740 <__lshift+0x8c>
 80096e8:	6920      	ldr	r0, [r4, #16]
 80096ea:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80096ee:	f104 0314 	add.w	r3, r4, #20
 80096f2:	f016 021f 	ands.w	r2, r6, #31
 80096f6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80096fa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80096fe:	d025      	beq.n	800974c <__lshift+0x98>
 8009700:	f1c2 0e20 	rsb	lr, r2, #32
 8009704:	2000      	movs	r0, #0
 8009706:	681e      	ldr	r6, [r3, #0]
 8009708:	468a      	mov	sl, r1
 800970a:	4096      	lsls	r6, r2
 800970c:	4330      	orrs	r0, r6
 800970e:	f84a 0b04 	str.w	r0, [sl], #4
 8009712:	f853 0b04 	ldr.w	r0, [r3], #4
 8009716:	459c      	cmp	ip, r3
 8009718:	fa20 f00e 	lsr.w	r0, r0, lr
 800971c:	d814      	bhi.n	8009748 <__lshift+0x94>
 800971e:	6048      	str	r0, [r1, #4]
 8009720:	b108      	cbz	r0, 8009726 <__lshift+0x72>
 8009722:	f109 0502 	add.w	r5, r9, #2
 8009726:	3d01      	subs	r5, #1
 8009728:	4638      	mov	r0, r7
 800972a:	f8c8 5010 	str.w	r5, [r8, #16]
 800972e:	4621      	mov	r1, r4
 8009730:	f7ff fe32 	bl	8009398 <_Bfree>
 8009734:	4640      	mov	r0, r8
 8009736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800973a:	3101      	adds	r1, #1
 800973c:	005b      	lsls	r3, r3, #1
 800973e:	e7c7      	b.n	80096d0 <__lshift+0x1c>
 8009740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009744:	3301      	adds	r3, #1
 8009746:	e7cd      	b.n	80096e4 <__lshift+0x30>
 8009748:	4651      	mov	r1, sl
 800974a:	e7dc      	b.n	8009706 <__lshift+0x52>
 800974c:	3904      	subs	r1, #4
 800974e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009752:	f841 2f04 	str.w	r2, [r1, #4]!
 8009756:	459c      	cmp	ip, r3
 8009758:	d8f9      	bhi.n	800974e <__lshift+0x9a>
 800975a:	e7e4      	b.n	8009726 <__lshift+0x72>

0800975c <__mcmp>:
 800975c:	6903      	ldr	r3, [r0, #16]
 800975e:	690a      	ldr	r2, [r1, #16]
 8009760:	1a9b      	subs	r3, r3, r2
 8009762:	b530      	push	{r4, r5, lr}
 8009764:	d10c      	bne.n	8009780 <__mcmp+0x24>
 8009766:	0092      	lsls	r2, r2, #2
 8009768:	3014      	adds	r0, #20
 800976a:	3114      	adds	r1, #20
 800976c:	1884      	adds	r4, r0, r2
 800976e:	4411      	add	r1, r2
 8009770:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009774:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009778:	4295      	cmp	r5, r2
 800977a:	d003      	beq.n	8009784 <__mcmp+0x28>
 800977c:	d305      	bcc.n	800978a <__mcmp+0x2e>
 800977e:	2301      	movs	r3, #1
 8009780:	4618      	mov	r0, r3
 8009782:	bd30      	pop	{r4, r5, pc}
 8009784:	42a0      	cmp	r0, r4
 8009786:	d3f3      	bcc.n	8009770 <__mcmp+0x14>
 8009788:	e7fa      	b.n	8009780 <__mcmp+0x24>
 800978a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800978e:	e7f7      	b.n	8009780 <__mcmp+0x24>

08009790 <__mdiff>:
 8009790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009794:	460d      	mov	r5, r1
 8009796:	4607      	mov	r7, r0
 8009798:	4611      	mov	r1, r2
 800979a:	4628      	mov	r0, r5
 800979c:	4614      	mov	r4, r2
 800979e:	f7ff ffdd 	bl	800975c <__mcmp>
 80097a2:	1e06      	subs	r6, r0, #0
 80097a4:	d108      	bne.n	80097b8 <__mdiff+0x28>
 80097a6:	4631      	mov	r1, r6
 80097a8:	4638      	mov	r0, r7
 80097aa:	f7ff fdc1 	bl	8009330 <_Balloc>
 80097ae:	2301      	movs	r3, #1
 80097b0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80097b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097b8:	bfa4      	itt	ge
 80097ba:	4623      	movge	r3, r4
 80097bc:	462c      	movge	r4, r5
 80097be:	4638      	mov	r0, r7
 80097c0:	6861      	ldr	r1, [r4, #4]
 80097c2:	bfa6      	itte	ge
 80097c4:	461d      	movge	r5, r3
 80097c6:	2600      	movge	r6, #0
 80097c8:	2601      	movlt	r6, #1
 80097ca:	f7ff fdb1 	bl	8009330 <_Balloc>
 80097ce:	692b      	ldr	r3, [r5, #16]
 80097d0:	60c6      	str	r6, [r0, #12]
 80097d2:	6926      	ldr	r6, [r4, #16]
 80097d4:	f105 0914 	add.w	r9, r5, #20
 80097d8:	f104 0214 	add.w	r2, r4, #20
 80097dc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80097e0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80097e4:	f100 0514 	add.w	r5, r0, #20
 80097e8:	f04f 0e00 	mov.w	lr, #0
 80097ec:	f852 ab04 	ldr.w	sl, [r2], #4
 80097f0:	f859 4b04 	ldr.w	r4, [r9], #4
 80097f4:	fa1e f18a 	uxtah	r1, lr, sl
 80097f8:	b2a3      	uxth	r3, r4
 80097fa:	1ac9      	subs	r1, r1, r3
 80097fc:	0c23      	lsrs	r3, r4, #16
 80097fe:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009802:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009806:	b289      	uxth	r1, r1
 8009808:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800980c:	45c8      	cmp	r8, r9
 800980e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009812:	4694      	mov	ip, r2
 8009814:	f845 3b04 	str.w	r3, [r5], #4
 8009818:	d8e8      	bhi.n	80097ec <__mdiff+0x5c>
 800981a:	45bc      	cmp	ip, r7
 800981c:	d304      	bcc.n	8009828 <__mdiff+0x98>
 800981e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009822:	b183      	cbz	r3, 8009846 <__mdiff+0xb6>
 8009824:	6106      	str	r6, [r0, #16]
 8009826:	e7c5      	b.n	80097b4 <__mdiff+0x24>
 8009828:	f85c 1b04 	ldr.w	r1, [ip], #4
 800982c:	fa1e f381 	uxtah	r3, lr, r1
 8009830:	141a      	asrs	r2, r3, #16
 8009832:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009836:	b29b      	uxth	r3, r3
 8009838:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800983c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009840:	f845 3b04 	str.w	r3, [r5], #4
 8009844:	e7e9      	b.n	800981a <__mdiff+0x8a>
 8009846:	3e01      	subs	r6, #1
 8009848:	e7e9      	b.n	800981e <__mdiff+0x8e>

0800984a <__d2b>:
 800984a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800984e:	460e      	mov	r6, r1
 8009850:	2101      	movs	r1, #1
 8009852:	ec59 8b10 	vmov	r8, r9, d0
 8009856:	4615      	mov	r5, r2
 8009858:	f7ff fd6a 	bl	8009330 <_Balloc>
 800985c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009860:	4607      	mov	r7, r0
 8009862:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009866:	bb34      	cbnz	r4, 80098b6 <__d2b+0x6c>
 8009868:	9301      	str	r3, [sp, #4]
 800986a:	f1b8 0300 	subs.w	r3, r8, #0
 800986e:	d027      	beq.n	80098c0 <__d2b+0x76>
 8009870:	a802      	add	r0, sp, #8
 8009872:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009876:	f7ff fe00 	bl	800947a <__lo0bits>
 800987a:	9900      	ldr	r1, [sp, #0]
 800987c:	b1f0      	cbz	r0, 80098bc <__d2b+0x72>
 800987e:	9a01      	ldr	r2, [sp, #4]
 8009880:	f1c0 0320 	rsb	r3, r0, #32
 8009884:	fa02 f303 	lsl.w	r3, r2, r3
 8009888:	430b      	orrs	r3, r1
 800988a:	40c2      	lsrs	r2, r0
 800988c:	617b      	str	r3, [r7, #20]
 800988e:	9201      	str	r2, [sp, #4]
 8009890:	9b01      	ldr	r3, [sp, #4]
 8009892:	61bb      	str	r3, [r7, #24]
 8009894:	2b00      	cmp	r3, #0
 8009896:	bf14      	ite	ne
 8009898:	2102      	movne	r1, #2
 800989a:	2101      	moveq	r1, #1
 800989c:	6139      	str	r1, [r7, #16]
 800989e:	b1c4      	cbz	r4, 80098d2 <__d2b+0x88>
 80098a0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80098a4:	4404      	add	r4, r0
 80098a6:	6034      	str	r4, [r6, #0]
 80098a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80098ac:	6028      	str	r0, [r5, #0]
 80098ae:	4638      	mov	r0, r7
 80098b0:	b003      	add	sp, #12
 80098b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098ba:	e7d5      	b.n	8009868 <__d2b+0x1e>
 80098bc:	6179      	str	r1, [r7, #20]
 80098be:	e7e7      	b.n	8009890 <__d2b+0x46>
 80098c0:	a801      	add	r0, sp, #4
 80098c2:	f7ff fdda 	bl	800947a <__lo0bits>
 80098c6:	9b01      	ldr	r3, [sp, #4]
 80098c8:	617b      	str	r3, [r7, #20]
 80098ca:	2101      	movs	r1, #1
 80098cc:	6139      	str	r1, [r7, #16]
 80098ce:	3020      	adds	r0, #32
 80098d0:	e7e5      	b.n	800989e <__d2b+0x54>
 80098d2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80098d6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80098da:	6030      	str	r0, [r6, #0]
 80098dc:	6918      	ldr	r0, [r3, #16]
 80098de:	f7ff fdad 	bl	800943c <__hi0bits>
 80098e2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80098e6:	e7e1      	b.n	80098ac <__d2b+0x62>

080098e8 <_calloc_r>:
 80098e8:	b538      	push	{r3, r4, r5, lr}
 80098ea:	fb02 f401 	mul.w	r4, r2, r1
 80098ee:	4621      	mov	r1, r4
 80098f0:	f7fe fad0 	bl	8007e94 <_malloc_r>
 80098f4:	4605      	mov	r5, r0
 80098f6:	b118      	cbz	r0, 8009900 <_calloc_r+0x18>
 80098f8:	4622      	mov	r2, r4
 80098fa:	2100      	movs	r1, #0
 80098fc:	f7fe fa73 	bl	8007de6 <memset>
 8009900:	4628      	mov	r0, r5
 8009902:	bd38      	pop	{r3, r4, r5, pc}

08009904 <__ascii_mbtowc>:
 8009904:	b082      	sub	sp, #8
 8009906:	b901      	cbnz	r1, 800990a <__ascii_mbtowc+0x6>
 8009908:	a901      	add	r1, sp, #4
 800990a:	b142      	cbz	r2, 800991e <__ascii_mbtowc+0x1a>
 800990c:	b14b      	cbz	r3, 8009922 <__ascii_mbtowc+0x1e>
 800990e:	7813      	ldrb	r3, [r2, #0]
 8009910:	600b      	str	r3, [r1, #0]
 8009912:	7812      	ldrb	r2, [r2, #0]
 8009914:	1c10      	adds	r0, r2, #0
 8009916:	bf18      	it	ne
 8009918:	2001      	movne	r0, #1
 800991a:	b002      	add	sp, #8
 800991c:	4770      	bx	lr
 800991e:	4610      	mov	r0, r2
 8009920:	e7fb      	b.n	800991a <__ascii_mbtowc+0x16>
 8009922:	f06f 0001 	mvn.w	r0, #1
 8009926:	e7f8      	b.n	800991a <__ascii_mbtowc+0x16>

08009928 <__ascii_wctomb>:
 8009928:	b149      	cbz	r1, 800993e <__ascii_wctomb+0x16>
 800992a:	2aff      	cmp	r2, #255	; 0xff
 800992c:	bf85      	ittet	hi
 800992e:	238a      	movhi	r3, #138	; 0x8a
 8009930:	6003      	strhi	r3, [r0, #0]
 8009932:	700a      	strbls	r2, [r1, #0]
 8009934:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009938:	bf98      	it	ls
 800993a:	2001      	movls	r0, #1
 800993c:	4770      	bx	lr
 800993e:	4608      	mov	r0, r1
 8009940:	4770      	bx	lr
	...

08009944 <_init>:
 8009944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009946:	bf00      	nop
 8009948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800994a:	bc08      	pop	{r3}
 800994c:	469e      	mov	lr, r3
 800994e:	4770      	bx	lr

08009950 <_fini>:
 8009950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009952:	bf00      	nop
 8009954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009956:	bc08      	pop	{r3}
 8009958:	469e      	mov	lr, r3
 800995a:	4770      	bx	lr
