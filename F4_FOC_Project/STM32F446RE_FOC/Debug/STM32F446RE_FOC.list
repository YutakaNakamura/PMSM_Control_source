
STM32F446RE_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000678  0800cd80  0800cd80  0001cd80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3f8  0800d3f8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d3f8  0800d3f8  0001d3f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d400  0800d400  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d400  0800d400  0001d400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800d408  0800d408  0001d408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800d410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  200001e4  0800d5f4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  0800d5f4  0002042c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036210  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006662  00000000  00000000  00056424  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d90  00000000  00000000  0005ca88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b68  00000000  00000000  0005e818  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002bd93  00000000  00000000  00060380  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000175a0  00000000  00000000  0008c113  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00103031  00000000  00000000  000a36b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a66e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a210  00000000  00000000  001a6760  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cd64 	.word	0x0800cd64

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800cd64 	.word	0x0800cd64

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <HAL_Init+0x40>)
 8000f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <HAL_Init+0x40>)
 8000f9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <HAL_Init+0x40>)
 8000faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f000 fd05 	bl	80019c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb6:	2004      	movs	r0, #4
 8000fb8:	f000 f808 	bl	8000fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fbc:	f007 f978 	bl	80082b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023c00 	.word	0x40023c00

08000fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_InitTick+0x54>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_InitTick+0x58>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 fd1d 	bl	8001a2a <HAL_SYSTICK_Config>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00e      	b.n	8001018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0f      	cmp	r3, #15
 8000ffe:	d80a      	bhi.n	8001016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001008:	f000 fce5 	bl	80019d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800100c:	4a06      	ldr	r2, [pc, #24]	; (8001028 <HAL_InitTick+0x5c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	e000      	b.n	8001018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000008 	.word	0x20000008
 8001024:	20000004 	.word	0x20000004
 8001028:	20000000 	.word	0x20000000

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000004 	.word	0x20000004
 8001050:	200003dc 	.word	0x200003dc

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	200003dc 	.word	0x200003dc

0800106c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001074:	2300      	movs	r3, #0
 8001076:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e033      	b.n	80010ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	2b00      	cmp	r3, #0
 8001088:	d109      	bne.n	800109e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f006 fe7c 	bl	8007d88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f003 0310 	and.w	r3, r3, #16
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d118      	bne.n	80010dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010b2:	f023 0302 	bic.w	r3, r3, #2
 80010b6:	f043 0202 	orr.w	r2, r3, #2
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 faa8 	bl	8001614 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f023 0303 	bic.w	r3, r3, #3
 80010d2:	f043 0201 	orr.w	r2, r3, #1
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	641a      	str	r2, [r3, #64]	; 0x40
 80010da:	e001      	b.n	80010e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b084      	sub	sp, #16
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b02      	cmp	r3, #2
 800110e:	bf0c      	ite	eq
 8001110:	2301      	moveq	r3, #1
 8001112:	2300      	movne	r3, #0
 8001114:	b2db      	uxtb	r3, r3
 8001116:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0320 	and.w	r3, r3, #32
 8001122:	2b20      	cmp	r3, #32
 8001124:	bf0c      	ite	eq
 8001126:	2301      	moveq	r3, #1
 8001128:	2300      	movne	r3, #0
 800112a:	b2db      	uxtb	r3, r3
 800112c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d049      	beq.n	80011c8 <HAL_ADC_IRQHandler+0xd6>
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d046      	beq.n	80011c8 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f003 0310 	and.w	r3, r3, #16
 8001142:	2b00      	cmp	r3, #0
 8001144:	d105      	bne.n	8001152 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d12b      	bne.n	80011b8 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001164:	2b00      	cmp	r3, #0
 8001166:	d127      	bne.n	80011b8 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001172:	2b00      	cmp	r3, #0
 8001174:	d006      	beq.n	8001184 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001180:	2b00      	cmp	r3, #0
 8001182:	d119      	bne.n	80011b8 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0220 	bic.w	r2, r2, #32
 8001192:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d105      	bne.n	80011b8 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f043 0201 	orr.w	r2, r3, #1
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 f8db 	bl	8001374 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f06f 0212 	mvn.w	r2, #18
 80011c6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	bf0c      	ite	eq
 80011d6:	2301      	moveq	r3, #1
 80011d8:	2300      	movne	r3, #0
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e8:	2b80      	cmp	r3, #128	; 0x80
 80011ea:	bf0c      	ite	eq
 80011ec:	2301      	moveq	r3, #1
 80011ee:	2300      	movne	r3, #0
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d057      	beq.n	80012aa <HAL_ADC_IRQHandler+0x1b8>
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d054      	beq.n	80012aa <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	f003 0310 	and.w	r3, r3, #16
 8001208:	2b00      	cmp	r3, #0
 800120a:	d105      	bne.n	8001218 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d139      	bne.n	800129a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800122c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001230:	2b00      	cmp	r3, #0
 8001232:	d006      	beq.n	8001242 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800123e:	2b00      	cmp	r3, #0
 8001240:	d12b      	bne.n	800129a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800124c:	2b00      	cmp	r3, #0
 800124e:	d124      	bne.n	800129a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800125a:	2b00      	cmp	r3, #0
 800125c:	d11d      	bne.n	800129a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001262:	2b00      	cmp	r3, #0
 8001264:	d119      	bne.n	800129a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001274:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800128a:	2b00      	cmp	r3, #0
 800128c:	d105      	bne.n	800129a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f043 0201 	orr.w	r2, r3, #1
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 fab6 	bl	800180c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f06f 020c 	mvn.w	r2, #12
 80012a8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	bf0c      	ite	eq
 80012b8:	2301      	moveq	r3, #1
 80012ba:	2300      	movne	r3, #0
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ca:	2b40      	cmp	r3, #64	; 0x40
 80012cc:	bf0c      	ite	eq
 80012ce:	2301      	moveq	r3, #1
 80012d0:	2300      	movne	r3, #0
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d017      	beq.n	800130c <HAL_ADC_IRQHandler+0x21a>
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d014      	beq.n	800130c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d10d      	bne.n	800130c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 f843 	bl	8001388 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f06f 0201 	mvn.w	r2, #1
 800130a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0320 	and.w	r3, r3, #32
 8001316:	2b20      	cmp	r3, #32
 8001318:	bf0c      	ite	eq
 800131a:	2301      	moveq	r3, #1
 800131c:	2300      	movne	r3, #0
 800131e:	b2db      	uxtb	r3, r3
 8001320:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800132c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001330:	bf0c      	ite	eq
 8001332:	2301      	moveq	r3, #1
 8001334:	2300      	movne	r3, #0
 8001336:	b2db      	uxtb	r3, r3
 8001338:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d015      	beq.n	800136c <HAL_ADC_IRQHandler+0x27a>
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d012      	beq.n	800136c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	f043 0202 	orr.w	r2, r3, #2
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f06f 0220 	mvn.w	r2, #32
 800135a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 f81d 	bl	800139c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f06f 0220 	mvn.w	r2, #32
 800136a:	601a      	str	r2, [r3, #0]
  }
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d101      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x1c>
 80013c8:	2302      	movs	r3, #2
 80013ca:	e113      	b.n	80015f4 <HAL_ADC_ConfigChannel+0x244>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b09      	cmp	r3, #9
 80013da:	d925      	bls.n	8001428 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68d9      	ldr	r1, [r3, #12]
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	4613      	mov	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4413      	add	r3, r2
 80013f0:	3b1e      	subs	r3, #30
 80013f2:	2207      	movs	r2, #7
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43da      	mvns	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	400a      	ands	r2, r1
 8001400:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68d9      	ldr	r1, [r3, #12]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	b29b      	uxth	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	4603      	mov	r3, r0
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	4403      	add	r3, r0
 800141a:	3b1e      	subs	r3, #30
 800141c:	409a      	lsls	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	e022      	b.n	800146e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6919      	ldr	r1, [r3, #16]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	b29b      	uxth	r3, r3
 8001434:	461a      	mov	r2, r3
 8001436:	4613      	mov	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4413      	add	r3, r2
 800143c:	2207      	movs	r2, #7
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43da      	mvns	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	400a      	ands	r2, r1
 800144a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6919      	ldr	r1, [r3, #16]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	b29b      	uxth	r3, r3
 800145c:	4618      	mov	r0, r3
 800145e:	4603      	mov	r3, r0
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	4403      	add	r3, r0
 8001464:	409a      	lsls	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b06      	cmp	r3, #6
 8001474:	d824      	bhi.n	80014c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	3b05      	subs	r3, #5
 8001488:	221f      	movs	r2, #31
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43da      	mvns	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	400a      	ands	r2, r1
 8001496:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	4618      	mov	r0, r3
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	3b05      	subs	r3, #5
 80014b2:	fa00 f203 	lsl.w	r2, r0, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	635a      	str	r2, [r3, #52]	; 0x34
 80014be:	e04c      	b.n	800155a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b0c      	cmp	r3, #12
 80014c6:	d824      	bhi.n	8001512 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	3b23      	subs	r3, #35	; 0x23
 80014da:	221f      	movs	r2, #31
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43da      	mvns	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	400a      	ands	r2, r1
 80014e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	3b23      	subs	r3, #35	; 0x23
 8001504:	fa00 f203 	lsl.w	r2, r0, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	631a      	str	r2, [r3, #48]	; 0x30
 8001510:	e023      	b.n	800155a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	3b41      	subs	r3, #65	; 0x41
 8001524:	221f      	movs	r2, #31
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43da      	mvns	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	400a      	ands	r2, r1
 8001532:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	b29b      	uxth	r3, r3
 8001540:	4618      	mov	r0, r3
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	3b41      	subs	r3, #65	; 0x41
 800154e:	fa00 f203 	lsl.w	r2, r0, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800155a:	4b29      	ldr	r3, [pc, #164]	; (8001600 <HAL_ADC_ConfigChannel+0x250>)
 800155c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a28      	ldr	r2, [pc, #160]	; (8001604 <HAL_ADC_ConfigChannel+0x254>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d10f      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x1d8>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b12      	cmp	r3, #18
 800156e:	d10b      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a1d      	ldr	r2, [pc, #116]	; (8001604 <HAL_ADC_ConfigChannel+0x254>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d12b      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x23a>
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a1c      	ldr	r2, [pc, #112]	; (8001608 <HAL_ADC_ConfigChannel+0x258>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d003      	beq.n	80015a4 <HAL_ADC_ConfigChannel+0x1f4>
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b11      	cmp	r3, #17
 80015a2:	d122      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a11      	ldr	r2, [pc, #68]	; (8001608 <HAL_ADC_ConfigChannel+0x258>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d111      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_ADC_ConfigChannel+0x25c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a11      	ldr	r2, [pc, #68]	; (8001610 <HAL_ADC_ConfigChannel+0x260>)
 80015cc:	fba2 2303 	umull	r2, r3, r2, r3
 80015d0:	0c9a      	lsrs	r2, r3, #18
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015dc:	e002      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	3b01      	subs	r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f9      	bne.n	80015de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	40012300 	.word	0x40012300
 8001604:	40012000 	.word	0x40012000
 8001608:	10000012 	.word	0x10000012
 800160c:	20000008 	.word	0x20000008
 8001610:	431bde83 	.word	0x431bde83

08001614 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800161c:	4b79      	ldr	r3, [pc, #484]	; (8001804 <ADC_Init+0x1f0>)
 800161e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	431a      	orrs	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001648:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6859      	ldr	r1, [r3, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	021a      	lsls	r2, r3, #8
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800166c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6859      	ldr	r1, [r3, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	430a      	orrs	r2, r1
 800167e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800168e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6899      	ldr	r1, [r3, #8]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a6:	4a58      	ldr	r2, [pc, #352]	; (8001808 <ADC_Init+0x1f4>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d022      	beq.n	80016f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6899      	ldr	r1, [r3, #8]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6899      	ldr	r1, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	e00f      	b.n	8001712 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001700:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001710:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0202 	bic.w	r2, r2, #2
 8001720:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6899      	ldr	r1, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	7e1b      	ldrb	r3, [r3, #24]
 800172c:	005a      	lsls	r2, r3, #1
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3020 	ldrb.w	r3, [r3, #32]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d01b      	beq.n	8001778 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800174e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800175e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6859      	ldr	r1, [r3, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176a:	3b01      	subs	r3, #1
 800176c:	035a      	lsls	r2, r3, #13
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	e007      	b.n	8001788 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001786:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001796:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	051a      	lsls	r2, r3, #20
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6899      	ldr	r1, [r3, #8]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017ca:	025a      	lsls	r2, r3, #9
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6899      	ldr	r1, [r3, #8]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	029a      	lsls	r2, r3, #10
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	609a      	str	r2, [r3, #8]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	40012300 	.word	0x40012300
 8001808:	0f000001 	.word	0x0f000001

0800180c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800183c:	4013      	ands	r3, r2
 800183e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800184c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001852:	4a04      	ldr	r2, [pc, #16]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	60d3      	str	r3, [r2, #12]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <__NVIC_GetPriorityGrouping+0x18>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	f003 0307 	and.w	r3, r3, #7
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	2b00      	cmp	r3, #0
 8001894:	db0b      	blt.n	80018ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	f003 021f 	and.w	r2, r3, #31
 800189c:	4907      	ldr	r1, [pc, #28]	; (80018bc <__NVIC_EnableIRQ+0x38>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	2001      	movs	r0, #1
 80018a6:	fa00 f202 	lsl.w	r2, r0, r2
 80018aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000e100 	.word	0xe000e100

080018c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	6039      	str	r1, [r7, #0]
 80018ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	db0a      	blt.n	80018ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	490c      	ldr	r1, [pc, #48]	; (800190c <__NVIC_SetPriority+0x4c>)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	0112      	lsls	r2, r2, #4
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	440b      	add	r3, r1
 80018e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e8:	e00a      	b.n	8001900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4908      	ldr	r1, [pc, #32]	; (8001910 <__NVIC_SetPriority+0x50>)
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	3b04      	subs	r3, #4
 80018f8:	0112      	lsls	r2, r2, #4
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	440b      	add	r3, r1
 80018fe:	761a      	strb	r2, [r3, #24]
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000e100 	.word	0xe000e100
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001914:	b480      	push	{r7}
 8001916:	b089      	sub	sp, #36	; 0x24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f1c3 0307 	rsb	r3, r3, #7
 800192e:	2b04      	cmp	r3, #4
 8001930:	bf28      	it	cs
 8001932:	2304      	movcs	r3, #4
 8001934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3304      	adds	r3, #4
 800193a:	2b06      	cmp	r3, #6
 800193c:	d902      	bls.n	8001944 <NVIC_EncodePriority+0x30>
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3b03      	subs	r3, #3
 8001942:	e000      	b.n	8001946 <NVIC_EncodePriority+0x32>
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43da      	mvns	r2, r3
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	401a      	ands	r2, r3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800195c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	fa01 f303 	lsl.w	r3, r1, r3
 8001966:	43d9      	mvns	r1, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	4313      	orrs	r3, r2
         );
}
 800196e:	4618      	mov	r0, r3
 8001970:	3724      	adds	r7, #36	; 0x24
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3b01      	subs	r3, #1
 8001988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800198c:	d301      	bcc.n	8001992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198e:	2301      	movs	r3, #1
 8001990:	e00f      	b.n	80019b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001992:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <SysTick_Config+0x40>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3b01      	subs	r3, #1
 8001998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199a:	210f      	movs	r1, #15
 800199c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019a0:	f7ff ff8e 	bl	80018c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <SysTick_Config+0x40>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019aa:	4b04      	ldr	r3, [pc, #16]	; (80019bc <SysTick_Config+0x40>)
 80019ac:	2207      	movs	r2, #7
 80019ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	e000e010 	.word	0xe000e010

080019c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ff29 	bl	8001820 <__NVIC_SetPriorityGrouping>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b086      	sub	sp, #24
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
 80019e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e8:	f7ff ff3e 	bl	8001868 <__NVIC_GetPriorityGrouping>
 80019ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	68b9      	ldr	r1, [r7, #8]
 80019f2:	6978      	ldr	r0, [r7, #20]
 80019f4:	f7ff ff8e 	bl	8001914 <NVIC_EncodePriority>
 80019f8:	4602      	mov	r2, r0
 80019fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff5d 	bl	80018c0 <__NVIC_SetPriority>
}
 8001a06:	bf00      	nop
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff31 	bl	8001884 <__NVIC_EnableIRQ>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ffa2 	bl	800197c <SysTick_Config>
 8001a38:	4603      	mov	r3, r0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b089      	sub	sp, #36	; 0x24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
 8001a5e:	e165      	b.n	8001d2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a60:	2201      	movs	r2, #1
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	4013      	ands	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	f040 8154 	bne.w	8001d26 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x4a>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b12      	cmp	r3, #18
 8001a8c:	d123      	bne.n	8001ad6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	08da      	lsrs	r2, r3, #3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3208      	adds	r2, #8
 8001a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	220f      	movs	r2, #15
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	691a      	ldr	r2, [r3, #16]
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	08da      	lsrs	r2, r3, #3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3208      	adds	r2, #8
 8001ad0:	69b9      	ldr	r1, [r7, #24]
 8001ad2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 0203 	and.w	r2, r3, #3
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d00b      	beq.n	8001b2a <HAL_GPIO_Init+0xe6>
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d007      	beq.n	8001b2a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b1e:	2b11      	cmp	r3, #17
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b12      	cmp	r3, #18
 8001b28:	d130      	bne.n	8001b8c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	2203      	movs	r2, #3
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b60:	2201      	movs	r2, #1
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	091b      	lsrs	r3, r3, #4
 8001b76:	f003 0201 	and.w	r2, r3, #1
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	2203      	movs	r2, #3
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 80ae 	beq.w	8001d26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	4b5c      	ldr	r3, [pc, #368]	; (8001d40 <HAL_GPIO_Init+0x2fc>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	4a5b      	ldr	r2, [pc, #364]	; (8001d40 <HAL_GPIO_Init+0x2fc>)
 8001bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bda:	4b59      	ldr	r3, [pc, #356]	; (8001d40 <HAL_GPIO_Init+0x2fc>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001be6:	4a57      	ldr	r2, [pc, #348]	; (8001d44 <HAL_GPIO_Init+0x300>)
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	089b      	lsrs	r3, r3, #2
 8001bec:	3302      	adds	r3, #2
 8001bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	220f      	movs	r2, #15
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a4e      	ldr	r2, [pc, #312]	; (8001d48 <HAL_GPIO_Init+0x304>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d025      	beq.n	8001c5e <HAL_GPIO_Init+0x21a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a4d      	ldr	r2, [pc, #308]	; (8001d4c <HAL_GPIO_Init+0x308>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d01f      	beq.n	8001c5a <HAL_GPIO_Init+0x216>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a4c      	ldr	r2, [pc, #304]	; (8001d50 <HAL_GPIO_Init+0x30c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d019      	beq.n	8001c56 <HAL_GPIO_Init+0x212>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a4b      	ldr	r2, [pc, #300]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d013      	beq.n	8001c52 <HAL_GPIO_Init+0x20e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a4a      	ldr	r2, [pc, #296]	; (8001d58 <HAL_GPIO_Init+0x314>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d00d      	beq.n	8001c4e <HAL_GPIO_Init+0x20a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a49      	ldr	r2, [pc, #292]	; (8001d5c <HAL_GPIO_Init+0x318>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d007      	beq.n	8001c4a <HAL_GPIO_Init+0x206>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a48      	ldr	r2, [pc, #288]	; (8001d60 <HAL_GPIO_Init+0x31c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d101      	bne.n	8001c46 <HAL_GPIO_Init+0x202>
 8001c42:	2306      	movs	r3, #6
 8001c44:	e00c      	b.n	8001c60 <HAL_GPIO_Init+0x21c>
 8001c46:	2307      	movs	r3, #7
 8001c48:	e00a      	b.n	8001c60 <HAL_GPIO_Init+0x21c>
 8001c4a:	2305      	movs	r3, #5
 8001c4c:	e008      	b.n	8001c60 <HAL_GPIO_Init+0x21c>
 8001c4e:	2304      	movs	r3, #4
 8001c50:	e006      	b.n	8001c60 <HAL_GPIO_Init+0x21c>
 8001c52:	2303      	movs	r3, #3
 8001c54:	e004      	b.n	8001c60 <HAL_GPIO_Init+0x21c>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e002      	b.n	8001c60 <HAL_GPIO_Init+0x21c>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <HAL_GPIO_Init+0x21c>
 8001c5e:	2300      	movs	r3, #0
 8001c60:	69fa      	ldr	r2, [r7, #28]
 8001c62:	f002 0203 	and.w	r2, r2, #3
 8001c66:	0092      	lsls	r2, r2, #2
 8001c68:	4093      	lsls	r3, r2
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c70:	4934      	ldr	r1, [pc, #208]	; (8001d44 <HAL_GPIO_Init+0x300>)
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	089b      	lsrs	r3, r3, #2
 8001c76:	3302      	adds	r3, #2
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c7e:	4b39      	ldr	r3, [pc, #228]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ca2:	4a30      	ldr	r2, [pc, #192]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ca8:	4b2e      	ldr	r3, [pc, #184]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ccc:	4a25      	ldr	r2, [pc, #148]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cd2:	4b24      	ldr	r3, [pc, #144]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cf6:	4a1b      	ldr	r2, [pc, #108]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cfc:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d20:	4a10      	ldr	r2, [pc, #64]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	61fb      	str	r3, [r7, #28]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	2b0f      	cmp	r3, #15
 8001d30:	f67f ae96 	bls.w	8001a60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d34:	bf00      	nop
 8001d36:	3724      	adds	r7, #36	; 0x24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40013800 	.word	0x40013800
 8001d48:	40020000 	.word	0x40020000
 8001d4c:	40020400 	.word	0x40020400
 8001d50:	40020800 	.word	0x40020800
 8001d54:	40020c00 	.word	0x40020c00
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40021400 	.word	0x40021400
 8001d60:	40021800 	.word	0x40021800
 8001d64:	40013c00 	.word	0x40013c00

08001d68 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	4b20      	ldr	r3, [pc, #128]	; (8001df8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	4a1f      	ldr	r2, [pc, #124]	; (8001df8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d80:	6413      	str	r3, [r2, #64]	; 0x40
 8001d82:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d8e:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <HAL_PWREx_EnableOverDrive+0x94>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d94:	f7ff f95e 	bl	8001054 <HAL_GetTick>
 8001d98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d9a:	e009      	b.n	8001db0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d9c:	f7ff f95a 	bl	8001054 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001daa:	d901      	bls.n	8001db0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e01f      	b.n	8001df0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001db0:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <HAL_PWREx_EnableOverDrive+0x98>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dbc:	d1ee      	bne.n	8001d9c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001dbe:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dc4:	f7ff f946 	bl	8001054 <HAL_GetTick>
 8001dc8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001dca:	e009      	b.n	8001de0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001dcc:	f7ff f942 	bl	8001054 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dda:	d901      	bls.n	8001de0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e007      	b.n	8001df0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001de0:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <HAL_PWREx_EnableOverDrive+0x98>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001dec:	d1ee      	bne.n	8001dcc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	420e0040 	.word	0x420e0040
 8001e00:	40007000 	.word	0x40007000
 8001e04:	420e0044 	.word	0x420e0044

08001e08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0ca      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e1c:	4b67      	ldr	r3, [pc, #412]	; (8001fbc <HAL_RCC_ClockConfig+0x1b4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 030f 	and.w	r3, r3, #15
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d90c      	bls.n	8001e44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2a:	4b64      	ldr	r3, [pc, #400]	; (8001fbc <HAL_RCC_ClockConfig+0x1b4>)
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e32:	4b62      	ldr	r3, [pc, #392]	; (8001fbc <HAL_RCC_ClockConfig+0x1b4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d001      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e0b6      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d020      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d005      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e5c:	4b58      	ldr	r3, [pc, #352]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	4a57      	ldr	r2, [pc, #348]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e74:	4b52      	ldr	r3, [pc, #328]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4a51      	ldr	r2, [pc, #324]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e80:	4b4f      	ldr	r3, [pc, #316]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	494c      	ldr	r1, [pc, #304]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d044      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d107      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea6:	4b46      	ldr	r3, [pc, #280]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d119      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e07d      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d003      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	d107      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec6:	4b3e      	ldr	r3, [pc, #248]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d109      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e06d      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed6:	4b3a      	ldr	r3, [pc, #232]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e065      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ee6:	4b36      	ldr	r3, [pc, #216]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f023 0203 	bic.w	r2, r3, #3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	4933      	ldr	r1, [pc, #204]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ef8:	f7ff f8ac 	bl	8001054 <HAL_GetTick>
 8001efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efe:	e00a      	b.n	8001f16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f00:	f7ff f8a8 	bl	8001054 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e04d      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f16:	4b2a      	ldr	r3, [pc, #168]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 020c 	and.w	r2, r3, #12
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d1eb      	bne.n	8001f00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f28:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <HAL_RCC_ClockConfig+0x1b4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 030f 	and.w	r3, r3, #15
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d20c      	bcs.n	8001f50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f36:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <HAL_RCC_ClockConfig+0x1b4>)
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3e:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <HAL_RCC_ClockConfig+0x1b4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e030      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d008      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f5c:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	4915      	ldr	r1, [pc, #84]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d009      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	490d      	ldr	r1, [pc, #52]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f8e:	f000 f81d 	bl	8001fcc <HAL_RCC_GetSysClockFreq>
 8001f92:	4601      	mov	r1, r0
 8001f94:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	091b      	lsrs	r3, r3, #4
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	4a09      	ldr	r2, [pc, #36]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa0:	5cd3      	ldrb	r3, [r2, r3]
 8001fa2:	fa21 f303 	lsr.w	r3, r1, r3
 8001fa6:	4a08      	ldr	r2, [pc, #32]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001faa:	2004      	movs	r0, #4
 8001fac:	f7ff f80e 	bl	8000fcc <HAL_InitTick>

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40023c00 	.word	0x40023c00
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	0800ceec 	.word	0x0800ceec
 8001fc8:	20000008 	.word	0x20000008

08001fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fce:	b087      	sub	sp, #28
 8001fd0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fe6:	4bc6      	ldr	r3, [pc, #792]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b0c      	cmp	r3, #12
 8001ff0:	f200 817e 	bhi.w	80022f0 <HAL_RCC_GetSysClockFreq+0x324>
 8001ff4:	a201      	add	r2, pc, #4	; (adr r2, 8001ffc <HAL_RCC_GetSysClockFreq+0x30>)
 8001ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffa:	bf00      	nop
 8001ffc:	08002031 	.word	0x08002031
 8002000:	080022f1 	.word	0x080022f1
 8002004:	080022f1 	.word	0x080022f1
 8002008:	080022f1 	.word	0x080022f1
 800200c:	08002037 	.word	0x08002037
 8002010:	080022f1 	.word	0x080022f1
 8002014:	080022f1 	.word	0x080022f1
 8002018:	080022f1 	.word	0x080022f1
 800201c:	0800203d 	.word	0x0800203d
 8002020:	080022f1 	.word	0x080022f1
 8002024:	080022f1 	.word	0x080022f1
 8002028:	080022f1 	.word	0x080022f1
 800202c:	08002199 	.word	0x08002199
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002030:	4bb4      	ldr	r3, [pc, #720]	; (8002304 <HAL_RCC_GetSysClockFreq+0x338>)
 8002032:	613b      	str	r3, [r7, #16]
       break;
 8002034:	e15f      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002036:	4bb4      	ldr	r3, [pc, #720]	; (8002308 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002038:	613b      	str	r3, [r7, #16]
      break;
 800203a:	e15c      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800203c:	4bb0      	ldr	r3, [pc, #704]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002044:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002046:	4bae      	ldr	r3, [pc, #696]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d04a      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002052:	4bab      	ldr	r3, [pc, #684]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	099b      	lsrs	r3, r3, #6
 8002058:	f04f 0400 	mov.w	r4, #0
 800205c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	ea03 0501 	and.w	r5, r3, r1
 8002068:	ea04 0602 	and.w	r6, r4, r2
 800206c:	4629      	mov	r1, r5
 800206e:	4632      	mov	r2, r6
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	f04f 0400 	mov.w	r4, #0
 8002078:	0154      	lsls	r4, r2, #5
 800207a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800207e:	014b      	lsls	r3, r1, #5
 8002080:	4619      	mov	r1, r3
 8002082:	4622      	mov	r2, r4
 8002084:	1b49      	subs	r1, r1, r5
 8002086:	eb62 0206 	sbc.w	r2, r2, r6
 800208a:	f04f 0300 	mov.w	r3, #0
 800208e:	f04f 0400 	mov.w	r4, #0
 8002092:	0194      	lsls	r4, r2, #6
 8002094:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002098:	018b      	lsls	r3, r1, #6
 800209a:	1a5b      	subs	r3, r3, r1
 800209c:	eb64 0402 	sbc.w	r4, r4, r2
 80020a0:	f04f 0100 	mov.w	r1, #0
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	00e2      	lsls	r2, r4, #3
 80020aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020ae:	00d9      	lsls	r1, r3, #3
 80020b0:	460b      	mov	r3, r1
 80020b2:	4614      	mov	r4, r2
 80020b4:	195b      	adds	r3, r3, r5
 80020b6:	eb44 0406 	adc.w	r4, r4, r6
 80020ba:	f04f 0100 	mov.w	r1, #0
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	0262      	lsls	r2, r4, #9
 80020c4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80020c8:	0259      	lsls	r1, r3, #9
 80020ca:	460b      	mov	r3, r1
 80020cc:	4614      	mov	r4, r2
 80020ce:	4618      	mov	r0, r3
 80020d0:	4621      	mov	r1, r4
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f04f 0400 	mov.w	r4, #0
 80020d8:	461a      	mov	r2, r3
 80020da:	4623      	mov	r3, r4
 80020dc:	f7fe fdd4 	bl	8000c88 <__aeabi_uldivmod>
 80020e0:	4603      	mov	r3, r0
 80020e2:	460c      	mov	r4, r1
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	e049      	b.n	800217c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020e8:	4b85      	ldr	r3, [pc, #532]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	099b      	lsrs	r3, r3, #6
 80020ee:	f04f 0400 	mov.w	r4, #0
 80020f2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	ea03 0501 	and.w	r5, r3, r1
 80020fe:	ea04 0602 	and.w	r6, r4, r2
 8002102:	4629      	mov	r1, r5
 8002104:	4632      	mov	r2, r6
 8002106:	f04f 0300 	mov.w	r3, #0
 800210a:	f04f 0400 	mov.w	r4, #0
 800210e:	0154      	lsls	r4, r2, #5
 8002110:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002114:	014b      	lsls	r3, r1, #5
 8002116:	4619      	mov	r1, r3
 8002118:	4622      	mov	r2, r4
 800211a:	1b49      	subs	r1, r1, r5
 800211c:	eb62 0206 	sbc.w	r2, r2, r6
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	f04f 0400 	mov.w	r4, #0
 8002128:	0194      	lsls	r4, r2, #6
 800212a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800212e:	018b      	lsls	r3, r1, #6
 8002130:	1a5b      	subs	r3, r3, r1
 8002132:	eb64 0402 	sbc.w	r4, r4, r2
 8002136:	f04f 0100 	mov.w	r1, #0
 800213a:	f04f 0200 	mov.w	r2, #0
 800213e:	00e2      	lsls	r2, r4, #3
 8002140:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002144:	00d9      	lsls	r1, r3, #3
 8002146:	460b      	mov	r3, r1
 8002148:	4614      	mov	r4, r2
 800214a:	195b      	adds	r3, r3, r5
 800214c:	eb44 0406 	adc.w	r4, r4, r6
 8002150:	f04f 0100 	mov.w	r1, #0
 8002154:	f04f 0200 	mov.w	r2, #0
 8002158:	02a2      	lsls	r2, r4, #10
 800215a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800215e:	0299      	lsls	r1, r3, #10
 8002160:	460b      	mov	r3, r1
 8002162:	4614      	mov	r4, r2
 8002164:	4618      	mov	r0, r3
 8002166:	4621      	mov	r1, r4
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f04f 0400 	mov.w	r4, #0
 800216e:	461a      	mov	r2, r3
 8002170:	4623      	mov	r3, r4
 8002172:	f7fe fd89 	bl	8000c88 <__aeabi_uldivmod>
 8002176:	4603      	mov	r3, r0
 8002178:	460c      	mov	r4, r1
 800217a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800217c:	4b60      	ldr	r3, [pc, #384]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	0c1b      	lsrs	r3, r3, #16
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	3301      	adds	r3, #1
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	fbb2 f3f3 	udiv	r3, r2, r3
 8002194:	613b      	str	r3, [r7, #16]
      break;
 8002196:	e0ae      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002198:	4b59      	ldr	r3, [pc, #356]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021a0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021a2:	4b57      	ldr	r3, [pc, #348]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d04a      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ae:	4b54      	ldr	r3, [pc, #336]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	099b      	lsrs	r3, r3, #6
 80021b4:	f04f 0400 	mov.w	r4, #0
 80021b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	ea03 0501 	and.w	r5, r3, r1
 80021c4:	ea04 0602 	and.w	r6, r4, r2
 80021c8:	4629      	mov	r1, r5
 80021ca:	4632      	mov	r2, r6
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	f04f 0400 	mov.w	r4, #0
 80021d4:	0154      	lsls	r4, r2, #5
 80021d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021da:	014b      	lsls	r3, r1, #5
 80021dc:	4619      	mov	r1, r3
 80021de:	4622      	mov	r2, r4
 80021e0:	1b49      	subs	r1, r1, r5
 80021e2:	eb62 0206 	sbc.w	r2, r2, r6
 80021e6:	f04f 0300 	mov.w	r3, #0
 80021ea:	f04f 0400 	mov.w	r4, #0
 80021ee:	0194      	lsls	r4, r2, #6
 80021f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021f4:	018b      	lsls	r3, r1, #6
 80021f6:	1a5b      	subs	r3, r3, r1
 80021f8:	eb64 0402 	sbc.w	r4, r4, r2
 80021fc:	f04f 0100 	mov.w	r1, #0
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	00e2      	lsls	r2, r4, #3
 8002206:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800220a:	00d9      	lsls	r1, r3, #3
 800220c:	460b      	mov	r3, r1
 800220e:	4614      	mov	r4, r2
 8002210:	195b      	adds	r3, r3, r5
 8002212:	eb44 0406 	adc.w	r4, r4, r6
 8002216:	f04f 0100 	mov.w	r1, #0
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	0262      	lsls	r2, r4, #9
 8002220:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002224:	0259      	lsls	r1, r3, #9
 8002226:	460b      	mov	r3, r1
 8002228:	4614      	mov	r4, r2
 800222a:	4618      	mov	r0, r3
 800222c:	4621      	mov	r1, r4
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f04f 0400 	mov.w	r4, #0
 8002234:	461a      	mov	r2, r3
 8002236:	4623      	mov	r3, r4
 8002238:	f7fe fd26 	bl	8000c88 <__aeabi_uldivmod>
 800223c:	4603      	mov	r3, r0
 800223e:	460c      	mov	r4, r1
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	e049      	b.n	80022d8 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002244:	4b2e      	ldr	r3, [pc, #184]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	099b      	lsrs	r3, r3, #6
 800224a:	f04f 0400 	mov.w	r4, #0
 800224e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	ea03 0501 	and.w	r5, r3, r1
 800225a:	ea04 0602 	and.w	r6, r4, r2
 800225e:	4629      	mov	r1, r5
 8002260:	4632      	mov	r2, r6
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	f04f 0400 	mov.w	r4, #0
 800226a:	0154      	lsls	r4, r2, #5
 800226c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002270:	014b      	lsls	r3, r1, #5
 8002272:	4619      	mov	r1, r3
 8002274:	4622      	mov	r2, r4
 8002276:	1b49      	subs	r1, r1, r5
 8002278:	eb62 0206 	sbc.w	r2, r2, r6
 800227c:	f04f 0300 	mov.w	r3, #0
 8002280:	f04f 0400 	mov.w	r4, #0
 8002284:	0194      	lsls	r4, r2, #6
 8002286:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800228a:	018b      	lsls	r3, r1, #6
 800228c:	1a5b      	subs	r3, r3, r1
 800228e:	eb64 0402 	sbc.w	r4, r4, r2
 8002292:	f04f 0100 	mov.w	r1, #0
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	00e2      	lsls	r2, r4, #3
 800229c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022a0:	00d9      	lsls	r1, r3, #3
 80022a2:	460b      	mov	r3, r1
 80022a4:	4614      	mov	r4, r2
 80022a6:	195b      	adds	r3, r3, r5
 80022a8:	eb44 0406 	adc.w	r4, r4, r6
 80022ac:	f04f 0100 	mov.w	r1, #0
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	02a2      	lsls	r2, r4, #10
 80022b6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80022ba:	0299      	lsls	r1, r3, #10
 80022bc:	460b      	mov	r3, r1
 80022be:	4614      	mov	r4, r2
 80022c0:	4618      	mov	r0, r3
 80022c2:	4621      	mov	r1, r4
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f04f 0400 	mov.w	r4, #0
 80022ca:	461a      	mov	r2, r3
 80022cc:	4623      	mov	r3, r4
 80022ce:	f7fe fcdb 	bl	8000c88 <__aeabi_uldivmod>
 80022d2:	4603      	mov	r3, r0
 80022d4:	460c      	mov	r4, r1
 80022d6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_RCC_GetSysClockFreq+0x334>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	0f1b      	lsrs	r3, r3, #28
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ec:	613b      	str	r3, [r7, #16]
      break;
 80022ee:	e002      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022f0:	4b04      	ldr	r3, [pc, #16]	; (8002304 <HAL_RCC_GetSysClockFreq+0x338>)
 80022f2:	613b      	str	r3, [r7, #16]
      break;
 80022f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022f6:	693b      	ldr	r3, [r7, #16]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	371c      	adds	r7, #28
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002300:	40023800 	.word	0x40023800
 8002304:	00f42400 	.word	0x00f42400
 8002308:	007a1200 	.word	0x007a1200

0800230c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 8083 	beq.w	800242c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002326:	4b95      	ldr	r3, [pc, #596]	; (800257c <HAL_RCC_OscConfig+0x270>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
 800232e:	2b04      	cmp	r3, #4
 8002330:	d019      	beq.n	8002366 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002332:	4b92      	ldr	r3, [pc, #584]	; (800257c <HAL_RCC_OscConfig+0x270>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800233a:	2b08      	cmp	r3, #8
 800233c:	d106      	bne.n	800234c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800233e:	4b8f      	ldr	r3, [pc, #572]	; (800257c <HAL_RCC_OscConfig+0x270>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800234a:	d00c      	beq.n	8002366 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800234c:	4b8b      	ldr	r3, [pc, #556]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002354:	2b0c      	cmp	r3, #12
 8002356:	d112      	bne.n	800237e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002358:	4b88      	ldr	r3, [pc, #544]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002360:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002364:	d10b      	bne.n	800237e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002366:	4b85      	ldr	r3, [pc, #532]	; (800257c <HAL_RCC_OscConfig+0x270>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d05b      	beq.n	800242a <HAL_RCC_OscConfig+0x11e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d157      	bne.n	800242a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e216      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002386:	d106      	bne.n	8002396 <HAL_RCC_OscConfig+0x8a>
 8002388:	4b7c      	ldr	r3, [pc, #496]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a7b      	ldr	r2, [pc, #492]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800238e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	e01d      	b.n	80023d2 <HAL_RCC_OscConfig+0xc6>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800239e:	d10c      	bne.n	80023ba <HAL_RCC_OscConfig+0xae>
 80023a0:	4b76      	ldr	r3, [pc, #472]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a75      	ldr	r2, [pc, #468]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80023a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	4b73      	ldr	r3, [pc, #460]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a72      	ldr	r2, [pc, #456]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80023b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b6:	6013      	str	r3, [r2, #0]
 80023b8:	e00b      	b.n	80023d2 <HAL_RCC_OscConfig+0xc6>
 80023ba:	4b70      	ldr	r3, [pc, #448]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a6f      	ldr	r2, [pc, #444]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80023c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	4b6d      	ldr	r3, [pc, #436]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a6c      	ldr	r2, [pc, #432]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80023cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d013      	beq.n	8002402 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023da:	f7fe fe3b 	bl	8001054 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023e2:	f7fe fe37 	bl	8001054 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b64      	cmp	r3, #100	; 0x64
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e1db      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f4:	4b61      	ldr	r3, [pc, #388]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f0      	beq.n	80023e2 <HAL_RCC_OscConfig+0xd6>
 8002400:	e014      	b.n	800242c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002402:	f7fe fe27 	bl	8001054 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800240a:	f7fe fe23 	bl	8001054 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b64      	cmp	r3, #100	; 0x64
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e1c7      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241c:	4b57      	ldr	r3, [pc, #348]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1f0      	bne.n	800240a <HAL_RCC_OscConfig+0xfe>
 8002428:	e000      	b.n	800242c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d06f      	beq.n	8002518 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002438:	4b50      	ldr	r3, [pc, #320]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 030c 	and.w	r3, r3, #12
 8002440:	2b00      	cmp	r3, #0
 8002442:	d017      	beq.n	8002474 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002444:	4b4d      	ldr	r3, [pc, #308]	; (800257c <HAL_RCC_OscConfig+0x270>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800244c:	2b08      	cmp	r3, #8
 800244e:	d105      	bne.n	800245c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002450:	4b4a      	ldr	r3, [pc, #296]	; (800257c <HAL_RCC_OscConfig+0x270>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00b      	beq.n	8002474 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245c:	4b47      	ldr	r3, [pc, #284]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002464:	2b0c      	cmp	r3, #12
 8002466:	d11c      	bne.n	80024a2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002468:	4b44      	ldr	r3, [pc, #272]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d116      	bne.n	80024a2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002474:	4b41      	ldr	r3, [pc, #260]	; (800257c <HAL_RCC_OscConfig+0x270>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_RCC_OscConfig+0x180>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d001      	beq.n	800248c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e18f      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248c:	4b3b      	ldr	r3, [pc, #236]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	4938      	ldr	r1, [pc, #224]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800249c:	4313      	orrs	r3, r2
 800249e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a0:	e03a      	b.n	8002518 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d020      	beq.n	80024ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024aa:	4b35      	ldr	r3, [pc, #212]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b0:	f7fe fdd0 	bl	8001054 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b8:	f7fe fdcc 	bl	8001054 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e170      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ca:	4b2c      	ldr	r3, [pc, #176]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f0      	beq.n	80024b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d6:	4b29      	ldr	r3, [pc, #164]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4925      	ldr	r1, [pc, #148]	; (800257c <HAL_RCC_OscConfig+0x270>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	600b      	str	r3, [r1, #0]
 80024ea:	e015      	b.n	8002518 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ec:	4b24      	ldr	r3, [pc, #144]	; (8002580 <HAL_RCC_OscConfig+0x274>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f2:	f7fe fdaf 	bl	8001054 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024fa:	f7fe fdab 	bl	8001054 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e14f      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250c:	4b1b      	ldr	r3, [pc, #108]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1f0      	bne.n	80024fa <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	2b00      	cmp	r3, #0
 8002522:	d037      	beq.n	8002594 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d016      	beq.n	800255a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252c:	4b15      	ldr	r3, [pc, #84]	; (8002584 <HAL_RCC_OscConfig+0x278>)
 800252e:	2201      	movs	r2, #1
 8002530:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002532:	f7fe fd8f 	bl	8001054 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800253a:	f7fe fd8b 	bl	8001054 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e12f      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_RCC_OscConfig+0x270>)
 800254e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0f0      	beq.n	800253a <HAL_RCC_OscConfig+0x22e>
 8002558:	e01c      	b.n	8002594 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <HAL_RCC_OscConfig+0x278>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002560:	f7fe fd78 	bl	8001054 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002566:	e00f      	b.n	8002588 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002568:	f7fe fd74 	bl	8001054 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d908      	bls.n	8002588 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e118      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800
 8002580:	42470000 	.word	0x42470000
 8002584:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002588:	4b8a      	ldr	r3, [pc, #552]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 800258a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1e9      	bne.n	8002568 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 8097 	beq.w	80026d0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a2:	2300      	movs	r3, #0
 80025a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025a6:	4b83      	ldr	r3, [pc, #524]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10f      	bne.n	80025d2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	4b7f      	ldr	r3, [pc, #508]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	4a7e      	ldr	r2, [pc, #504]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 80025bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c0:	6413      	str	r3, [r2, #64]	; 0x40
 80025c2:	4b7c      	ldr	r3, [pc, #496]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025ce:	2301      	movs	r3, #1
 80025d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d2:	4b79      	ldr	r3, [pc, #484]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d118      	bne.n	8002610 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025de:	4b76      	ldr	r3, [pc, #472]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a75      	ldr	r2, [pc, #468]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 80025e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ea:	f7fe fd33 	bl	8001054 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f2:	f7fe fd2f 	bl	8001054 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e0d3      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002604:	4b6c      	ldr	r3, [pc, #432]	; (80027b8 <HAL_RCC_OscConfig+0x4ac>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0f0      	beq.n	80025f2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d106      	bne.n	8002626 <HAL_RCC_OscConfig+0x31a>
 8002618:	4b66      	ldr	r3, [pc, #408]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	4a65      	ldr	r2, [pc, #404]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	6713      	str	r3, [r2, #112]	; 0x70
 8002624:	e01c      	b.n	8002660 <HAL_RCC_OscConfig+0x354>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2b05      	cmp	r3, #5
 800262c:	d10c      	bne.n	8002648 <HAL_RCC_OscConfig+0x33c>
 800262e:	4b61      	ldr	r3, [pc, #388]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 8002630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002632:	4a60      	ldr	r2, [pc, #384]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 8002634:	f043 0304 	orr.w	r3, r3, #4
 8002638:	6713      	str	r3, [r2, #112]	; 0x70
 800263a:	4b5e      	ldr	r3, [pc, #376]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 800263c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263e:	4a5d      	ldr	r2, [pc, #372]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	6713      	str	r3, [r2, #112]	; 0x70
 8002646:	e00b      	b.n	8002660 <HAL_RCC_OscConfig+0x354>
 8002648:	4b5a      	ldr	r3, [pc, #360]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 800264a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264c:	4a59      	ldr	r2, [pc, #356]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 800264e:	f023 0301 	bic.w	r3, r3, #1
 8002652:	6713      	str	r3, [r2, #112]	; 0x70
 8002654:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 8002656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002658:	4a56      	ldr	r2, [pc, #344]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 800265a:	f023 0304 	bic.w	r3, r3, #4
 800265e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d015      	beq.n	8002694 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002668:	f7fe fcf4 	bl	8001054 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800266e:	e00a      	b.n	8002686 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002670:	f7fe fcf0 	bl	8001054 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f241 3288 	movw	r2, #5000	; 0x1388
 800267e:	4293      	cmp	r3, r2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e092      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002686:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 8002688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0ee      	beq.n	8002670 <HAL_RCC_OscConfig+0x364>
 8002692:	e014      	b.n	80026be <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002694:	f7fe fcde 	bl	8001054 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269a:	e00a      	b.n	80026b2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269c:	f7fe fcda 	bl	8001054 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e07c      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b2:	4b40      	ldr	r3, [pc, #256]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 80026b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1ee      	bne.n	800269c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026be:	7dfb      	ldrb	r3, [r7, #23]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d105      	bne.n	80026d0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c4:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	4a3a      	ldr	r2, [pc, #232]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 80026ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d068      	beq.n	80027aa <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026d8:	4b36      	ldr	r3, [pc, #216]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 030c 	and.w	r3, r3, #12
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d060      	beq.n	80027a6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d145      	bne.n	8002778 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ec:	4b33      	ldr	r3, [pc, #204]	; (80027bc <HAL_RCC_OscConfig+0x4b0>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f2:	f7fe fcaf 	bl	8001054 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fa:	f7fe fcab 	bl	8001054 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e04f      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270c:	4b29      	ldr	r3, [pc, #164]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f0      	bne.n	80026fa <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69da      	ldr	r2, [r3, #28]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	019b      	lsls	r3, r3, #6
 8002728:	431a      	orrs	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272e:	085b      	lsrs	r3, r3, #1
 8002730:	3b01      	subs	r3, #1
 8002732:	041b      	lsls	r3, r3, #16
 8002734:	431a      	orrs	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273a:	061b      	lsls	r3, r3, #24
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	071b      	lsls	r3, r3, #28
 8002744:	491b      	ldr	r1, [pc, #108]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 8002746:	4313      	orrs	r3, r2
 8002748:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800274a:	4b1c      	ldr	r3, [pc, #112]	; (80027bc <HAL_RCC_OscConfig+0x4b0>)
 800274c:	2201      	movs	r2, #1
 800274e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002750:	f7fe fc80 	bl	8001054 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002758:	f7fe fc7c 	bl	8001054 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e020      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276a:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0f0      	beq.n	8002758 <HAL_RCC_OscConfig+0x44c>
 8002776:	e018      	b.n	80027aa <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002778:	4b10      	ldr	r3, [pc, #64]	; (80027bc <HAL_RCC_OscConfig+0x4b0>)
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277e:	f7fe fc69 	bl	8001054 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002786:	f7fe fc65 	bl	8001054 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e009      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <HAL_RCC_OscConfig+0x4a8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1f0      	bne.n	8002786 <HAL_RCC_OscConfig+0x47a>
 80027a4:	e001      	b.n	80027aa <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40023800 	.word	0x40023800
 80027b8:	40007000 	.word	0x40007000
 80027bc:	42470060 	.word	0x42470060

080027c0 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ce:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <LL_ADC_INJ_SetSequencerLength>:
  *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
  *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b01      	cmp	r3, #1
 800281e:	bf0c      	ite	eq
 8002820:	2301      	moveq	r3, #1
 8002822:	2300      	movne	r3, #0
 8002824:	b2db      	uxtb	r3, r3
}
 8002826:	4618      	mov	r0, r3
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
	...

08002834 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8002834:	b590      	push	{r4, r7, lr}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800283e:	2300      	movs	r3, #0
 8002840:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8002842:	481c      	ldr	r0, [pc, #112]	; (80028b4 <LL_ADC_CommonInit+0x80>)
 8002844:	f7ff ffe2 	bl	800280c <LL_ADC_IsEnabled>
 8002848:	4604      	mov	r4, r0
 800284a:	481b      	ldr	r0, [pc, #108]	; (80028b8 <LL_ADC_CommonInit+0x84>)
 800284c:	f7ff ffde 	bl	800280c <LL_ADC_IsEnabled>
 8002850:	4603      	mov	r3, r0
 8002852:	431c      	orrs	r4, r3
 8002854:	4819      	ldr	r0, [pc, #100]	; (80028bc <LL_ADC_CommonInit+0x88>)
 8002856:	f7ff ffd9 	bl	800280c <LL_ADC_IsEnabled>
 800285a:	4603      	mov	r3, r0
 800285c:	4323      	orrs	r3, r4
 800285e:	2b00      	cmp	r3, #0
 8002860:	d120      	bne.n	80028a4 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d012      	beq.n	8002890 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <LL_ADC_CommonInit+0x8c>)
 8002870:	4013      	ands	r3, r2
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	6811      	ldr	r1, [r2, #0]
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	6852      	ldr	r2, [r2, #4]
 800287a:	4311      	orrs	r1, r2
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	6892      	ldr	r2, [r2, #8]
 8002880:	4311      	orrs	r1, r2
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	68d2      	ldr	r2, [r2, #12]
 8002886:	430a      	orrs	r2, r1
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	e00b      	b.n	80028a8 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <LL_ADC_CommonInit+0x8c>)
 8002896:	4013      	ands	r3, r2
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	431a      	orrs	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	e001      	b.n	80028a8 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd90      	pop	{r4, r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40012000 	.word	0x40012000
 80028b8:	40012100 	.word	0x40012100
 80028bc:	40012200 	.word	0x40012200
 80028c0:	fffc10e0 	.word	0xfffc10e0

080028c4 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80028ce:	2300      	movs	r3, #0
 80028d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff ff9a 	bl	800280c <LL_ADC_IsEnabled>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d117      	bne.n	800290e <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80028e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	6811      	ldr	r1, [r2, #0]
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	6892      	ldr	r2, [r2, #8]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	e001      	b.n	8002912 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002912:	7bfb      	ldrb	r3, [r7, #15]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002926:	2300      	movs	r3, #0
 8002928:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff ff6e 	bl	800280c <LL_ADC_IsEnabled>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d131      	bne.n	800299a <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00c      	beq.n	8002958 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6859      	ldr	r1, [r3, #4]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	430b      	orrs	r3, r1
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	e008      	b.n	800296a <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	431a      	orrs	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <LL_ADC_REG_Init+0x8c>)
 8002970:	4013      	ands	r3, r2
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	6812      	ldr	r2, [r2, #0]
 8002976:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	68d2      	ldr	r2, [r2, #12]
 800297e:	4311      	orrs	r1, r2
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	6912      	ldr	r2, [r2, #16]
 8002984:	430a      	orrs	r2, r1
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	4619      	mov	r1, r3
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff ff14 	bl	80027c0 <LL_ADC_REG_SetSequencerLength>
 8002998:	e001      	b.n	800299e <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800299e:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	c0fffcfd 	.word	0xc0fffcfd

080029ac <LL_ADC_INJ_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_INJ_Init(ADC_TypeDef *ADCx, LL_ADC_INJ_InitTypeDef *ADC_INJ_InitStruct)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80029b6:	2300      	movs	r3, #0
 80029b8:	73fb      	strb	r3, [r7, #15]
  }
  assert_param(IS_LL_ADC_INJ_TRIG_AUTO(ADC_INJ_InitStruct->TrigAuto));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff ff26 	bl	800280c <LL_ADC_IsEnabled>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d12b      	bne.n	8002a1e <LL_ADC_INJ_Init+0x72>
    /*    - Set ADC group injected conversion trigger: independent or         */
    /*      from ADC group regular                                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_INJ_StartConversionExtTrig().      */
    if(ADC_INJ_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00c      	beq.n	80029e8 <LL_ADC_INJ_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f423 52a0 	bic.w	r2, r3, #5120	; 0x1400
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6899      	ldr	r1, [r3, #8]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	430b      	orrs	r3, r1
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	e008      	b.n	80029fa <LL_ADC_INJ_Init+0x4e>
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f423 52a0 	bic.w	r2, r3, #5120	; 0x1400
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	431a      	orrs	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	605a      	str	r2, [r3, #4]
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_INJ_SetSequencerLength(ADCx, ADC_INJ_InitStruct->SequencerLength);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	4619      	mov	r1, r3
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff fee5 	bl	80027e6 <LL_ADC_INJ_SetSequencerLength>
 8002a1c:	e001      	b.n	8002a22 <LL_ADC_INJ_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <LL_EXTI_EnableIT_0_31+0x20>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4904      	ldr	r1, [pc, #16]	; (8002a4c <LL_EXTI_EnableIT_0_31+0x20>)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	600b      	str	r3, [r1, #0]
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	40013c00 	.word	0x40013c00

08002a50 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <LL_EXTI_DisableIT_0_31+0x24>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	4904      	ldr	r1, [pc, #16]	; (8002a74 <LL_EXTI_DisableIT_0_31+0x24>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40013c00 	.word	0x40013c00

08002a78 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	4904      	ldr	r1, [pc, #16]	; (8002a98 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	604b      	str	r3, [r1, #4]

}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	40013c00 	.word	0x40013c00

08002a9c <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002aa4:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	4904      	ldr	r1, [pc, #16]	; (8002ac0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	604b      	str	r3, [r1, #4]
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	40013c00 	.word	0x40013c00

08002ac4 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002acc:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	4904      	ldr	r1, [pc, #16]	; (8002ae4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	608b      	str	r3, [r1, #8]

}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	40013c00 	.word	0x40013c00

08002ae8 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	43db      	mvns	r3, r3
 8002af8:	4904      	ldr	r1, [pc, #16]	; (8002b0c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	608b      	str	r3, [r1, #8]

}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	40013c00 	.word	0x40013c00

08002b10 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002b18:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	4904      	ldr	r1, [pc, #16]	; (8002b30 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	60cb      	str	r3, [r1, #12]
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	40013c00 	.word	0x40013c00

08002b34 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	43db      	mvns	r3, r3
 8002b44:	4904      	ldr	r1, [pc, #16]	; (8002b58 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	60cb      	str	r3, [r1, #12]
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40013c00 	.word	0x40013c00

08002b5c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002b64:	2300      	movs	r3, #0
 8002b66:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	791b      	ldrb	r3, [r3, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d060      	beq.n	8002c32 <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d067      	beq.n	8002c48 <LL_EXTI_Init+0xec>
    {
      switch (EXTI_InitStruct->Mode)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	795b      	ldrb	r3, [r3, #5]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d00e      	beq.n	8002b9e <LL_EXTI_Init+0x42>
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d017      	beq.n	8002bb4 <LL_EXTI_Init+0x58>
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d120      	bne.n	8002bca <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff ff85 	bl	8002a9c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff ff48 	bl	8002a2c <LL_EXTI_EnableIT_0_31>
          break;
 8002b9c:	e018      	b.n	8002bd0 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff ff54 	bl	8002a50 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff ff63 	bl	8002a78 <LL_EXTI_EnableEvent_0_31>
          break;
 8002bb2:	e00d      	b.n	8002bd0 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff ff37 	bl	8002a2c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff ff58 	bl	8002a78 <LL_EXTI_EnableEvent_0_31>
          break;
 8002bc8:	e002      	b.n	8002bd0 <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	73fb      	strb	r3, [r7, #15]
          break;
 8002bce:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	799b      	ldrb	r3, [r3, #6]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d037      	beq.n	8002c48 <LL_EXTI_Init+0xec>
      {
        switch (EXTI_InitStruct->Trigger)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	799b      	ldrb	r3, [r3, #6]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d00e      	beq.n	8002bfe <LL_EXTI_Init+0xa2>
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d017      	beq.n	8002c14 <LL_EXTI_Init+0xb8>
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d120      	bne.n	8002c2a <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff ffa1 	bl	8002b34 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff ff64 	bl	8002ac4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002bfc:	e025      	b.n	8002c4a <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff ff70 	bl	8002ae8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff ff7f 	bl	8002b10 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002c12:	e01a      	b.n	8002c4a <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff ff53 	bl	8002ac4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff ff74 	bl	8002b10 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002c28:	e00f      	b.n	8002c4a <LL_EXTI_Init+0xee>
          default:
            status = ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	73fb      	strb	r3, [r7, #15]
            break;
 8002c2e:	bf00      	nop
 8002c30:	e00b      	b.n	8002c4a <LL_EXTI_Init+0xee>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff ff0a 	bl	8002a50 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff ff2b 	bl	8002a9c <LL_EXTI_DisableEvent_0_31>
 8002c46:	e000      	b.n	8002c4a <LL_EXTI_Init+0xee>
      }
 8002c48:	bf00      	nop
  }
  return status;
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b089      	sub	sp, #36	; 0x24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	2103      	movs	r1, #3
 8002c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	401a      	ands	r2, r3
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	fa93 f3a3 	rbit	r3, r3
 8002c8e:	61bb      	str	r3, [r7, #24]
  return result;
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	601a      	str	r2, [r3, #0]
}
 8002ca6:	bf00      	nop
 8002ca8:	3724      	adds	r7, #36	; 0x24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b085      	sub	sp, #20
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	605a      	str	r2, [r3, #4]
}
 8002cd6:	bf00      	nop
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b089      	sub	sp, #36	; 0x24
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	fa93 f3a3 	rbit	r3, r3
 8002cfc:	613b      	str	r3, [r7, #16]
  return result;
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	fab3 f383 	clz	r3, r3
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	2103      	movs	r1, #3
 8002d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	401a      	ands	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	fa93 f3a3 	rbit	r3, r3
 8002d1c:	61bb      	str	r3, [r7, #24]
  return result;
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	fab3 f383 	clz	r3, r3
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002d34:	bf00      	nop
 8002d36:	3724      	adds	r7, #36	; 0x24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b089      	sub	sp, #36	; 0x24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	fa93 f3a3 	rbit	r3, r3
 8002d5a:	613b      	str	r3, [r7, #16]
  return result;
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	2103      	movs	r1, #3
 8002d68:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	401a      	ands	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	61bb      	str	r3, [r7, #24]
  return result;
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	fab3 f383 	clz	r3, r3
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	60da      	str	r2, [r3, #12]
}
 8002d92:	bf00      	nop
 8002d94:	3724      	adds	r7, #36	; 0x24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b089      	sub	sp, #36	; 0x24
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a1a      	ldr	r2, [r3, #32]
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	fa93 f3a3 	rbit	r3, r3
 8002db8:	613b      	str	r3, [r7, #16]
  return result;
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	fab3 f383 	clz	r3, r3
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	210f      	movs	r1, #15
 8002dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	401a      	ands	r2, r3
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	fa93 f3a3 	rbit	r3, r3
 8002dd8:	61bb      	str	r3, [r7, #24]
  return result;
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	fab3 f383 	clz	r3, r3
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dea:	431a      	orrs	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002df0:	bf00      	nop
 8002df2:	3724      	adds	r7, #36	; 0x24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b089      	sub	sp, #36	; 0x24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	0a1b      	lsrs	r3, r3, #8
 8002e10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	613b      	str	r3, [r7, #16]
  return result;
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	fab3 f383 	clz	r3, r3
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	210f      	movs	r1, #15
 8002e26:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	401a      	ands	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	0a1b      	lsrs	r3, r3, #8
 8002e32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	fa93 f3a3 	rbit	r3, r3
 8002e3a:	61bb      	str	r3, [r7, #24]
  return result;
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	fab3 f383 	clz	r3, r3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002e52:	bf00      	nop
 8002e54:	3724      	adds	r7, #36	; 0x24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b088      	sub	sp, #32
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	fa93 f3a3 	rbit	r3, r3
 8002e7c:	613b      	str	r3, [r7, #16]
  return result;
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	fab3 f383 	clz	r3, r3
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002e88:	e049      	b.n	8002f1e <LL_GPIO_Init+0xc0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	2101      	movs	r1, #1
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	fa01 f303 	lsl.w	r3, r1, r3
 8002e96:	4013      	ands	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d03b      	beq.n	8002f18 <LL_GPIO_Init+0xba>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	69b9      	ldr	r1, [r7, #24]
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7ff fed3 	bl	8002c54 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d003      	beq.n	8002ebe <LL_GPIO_Init+0x60>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d106      	bne.n	8002ecc <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	69b9      	ldr	r1, [r7, #24]
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff ff0b 	bl	8002ce2 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	69b9      	ldr	r1, [r7, #24]
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff ff33 	bl	8002d40 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d11a      	bne.n	8002f18 <LL_GPIO_Init+0xba>
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	fa93 f3a3 	rbit	r3, r3
 8002eec:	60bb      	str	r3, [r7, #8]
  return result;
 8002eee:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002ef0:	fab3 f383 	clz	r3, r3
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b07      	cmp	r3, #7
 8002ef8:	d807      	bhi.n	8002f0a <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	461a      	mov	r2, r3
 8002f00:	69b9      	ldr	r1, [r7, #24]
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7ff ff4b 	bl	8002d9e <LL_GPIO_SetAFPin_0_7>
 8002f08:	e006      	b.n	8002f18 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	69b9      	ldr	r1, [r7, #24]
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff ff72 	bl	8002dfc <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	fa22 f303 	lsr.w	r3, r2, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1ae      	bne.n	8002e8a <LL_GPIO_Init+0x2c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d003      	beq.n	8002f3c <LL_GPIO_Init+0xde>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d107      	bne.n	8002f4c <LL_GPIO_Init+0xee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	6819      	ldr	r1, [r3, #0]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	461a      	mov	r2, r3
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7ff feb3 	bl	8002cb2 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3720      	adds	r7, #32
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002f5c:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <LL_RCC_GetSysClkSource+0x18>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f003 030c 	and.w	r3, r3, #12
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40023800 	.word	0x40023800

08002f74 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002f78:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <LL_RCC_GetAHBPrescaler+0x18>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40023800 	.word	0x40023800

08002f90 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002f94:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40023800 	.word	0x40023800

08002fac <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002fb0:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40023800 	.word	0x40023800

08002fc8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002fcc:	4b04      	ldr	r3, [pc, #16]	; (8002fe0 <LL_RCC_PLL_GetMainSource+0x18>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	40023800 	.word	0x40023800

08002fe4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002fe8:	4b04      	ldr	r3, [pc, #16]	; (8002ffc <LL_RCC_PLL_GetN+0x18>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	099b      	lsrs	r3, r3, #6
 8002fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	40023800 	.word	0x40023800

08003000 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003004:	4b04      	ldr	r3, [pc, #16]	; (8003018 <LL_RCC_PLL_GetP+0x18>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800300c:	4618      	mov	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40023800 	.word	0x40023800

0800301c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003020:	4b04      	ldr	r3, [pc, #16]	; (8003034 <LL_RCC_PLL_GetR+0x18>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
}
 8003028:	4618      	mov	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40023800 	.word	0x40023800

08003038 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800303c:	4b04      	ldr	r3, [pc, #16]	; (8003050 <LL_RCC_PLL_GetDivider+0x18>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003044:	4618      	mov	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800

08003054 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800305c:	f000 f820 	bl	80030a0 <RCC_GetSystemClockFreq>
 8003060:	4602      	mov	r2, r0
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f000 f85c 	bl	8003128 <RCC_GetHCLKClockFreq>
 8003070:	4602      	mov	r2, r0
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	4618      	mov	r0, r3
 800307c:	f000 f86a 	bl	8003154 <RCC_GetPCLK1ClockFreq>
 8003080:	4602      	mov	r2, r0
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4618      	mov	r0, r3
 800308c:	f000 f876 	bl	800317c <RCC_GetPCLK2ClockFreq>
 8003090:	4602      	mov	r2, r0
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	60da      	str	r2, [r3, #12]
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80030a6:	2300      	movs	r3, #0
 80030a8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80030aa:	f7ff ff55 	bl	8002f58 <LL_RCC_GetSysClkSource>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b0c      	cmp	r3, #12
 80030b2:	d82d      	bhi.n	8003110 <RCC_GetSystemClockFreq+0x70>
 80030b4:	a201      	add	r2, pc, #4	; (adr r2, 80030bc <RCC_GetSystemClockFreq+0x1c>)
 80030b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ba:	bf00      	nop
 80030bc:	080030f1 	.word	0x080030f1
 80030c0:	08003111 	.word	0x08003111
 80030c4:	08003111 	.word	0x08003111
 80030c8:	08003111 	.word	0x08003111
 80030cc:	080030f7 	.word	0x080030f7
 80030d0:	08003111 	.word	0x08003111
 80030d4:	08003111 	.word	0x08003111
 80030d8:	08003111 	.word	0x08003111
 80030dc:	080030fd 	.word	0x080030fd
 80030e0:	08003111 	.word	0x08003111
 80030e4:	08003111 	.word	0x08003111
 80030e8:	08003111 	.word	0x08003111
 80030ec:	08003107 	.word	0x08003107
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <RCC_GetSystemClockFreq+0x80>)
 80030f2:	607b      	str	r3, [r7, #4]
      break;
 80030f4:	e00f      	b.n	8003116 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80030f6:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <RCC_GetSystemClockFreq+0x84>)
 80030f8:	607b      	str	r3, [r7, #4]
      break;
 80030fa:	e00c      	b.n	8003116 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80030fc:	2008      	movs	r0, #8
 80030fe:	f000 f851 	bl	80031a4 <RCC_PLL_GetFreqDomain_SYS>
 8003102:	6078      	str	r0, [r7, #4]
      break;
 8003104:	e007      	b.n	8003116 <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 8003106:	200c      	movs	r0, #12
 8003108:	f000 f84c 	bl	80031a4 <RCC_PLL_GetFreqDomain_SYS>
 800310c:	6078      	str	r0, [r7, #4]
      break;
 800310e:	e002      	b.n	8003116 <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003110:	4b03      	ldr	r3, [pc, #12]	; (8003120 <RCC_GetSystemClockFreq+0x80>)
 8003112:	607b      	str	r3, [r7, #4]
      break;
 8003114:	bf00      	nop
  }

  return frequency;
 8003116:	687b      	ldr	r3, [r7, #4]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	00f42400 	.word	0x00f42400
 8003124:	007a1200 	.word	0x007a1200

08003128 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003130:	f7ff ff20 	bl	8002f74 <LL_RCC_GetAHBPrescaler>
 8003134:	4603      	mov	r3, r0
 8003136:	091b      	lsrs	r3, r3, #4
 8003138:	f003 030f 	and.w	r3, r3, #15
 800313c:	4a04      	ldr	r2, [pc, #16]	; (8003150 <RCC_GetHCLKClockFreq+0x28>)
 800313e:	5cd3      	ldrb	r3, [r2, r3]
 8003140:	461a      	mov	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	40d3      	lsrs	r3, r2
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	0800ceec 	.word	0x0800ceec

08003154 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800315c:	f7ff ff18 	bl	8002f90 <LL_RCC_GetAPB1Prescaler>
 8003160:	4603      	mov	r3, r0
 8003162:	0a9b      	lsrs	r3, r3, #10
 8003164:	4a04      	ldr	r2, [pc, #16]	; (8003178 <RCC_GetPCLK1ClockFreq+0x24>)
 8003166:	5cd3      	ldrb	r3, [r2, r3]
 8003168:	461a      	mov	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	40d3      	lsrs	r3, r2
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	0800cefc 	.word	0x0800cefc

0800317c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003184:	f7ff ff12 	bl	8002fac <LL_RCC_GetAPB2Prescaler>
 8003188:	4603      	mov	r3, r0
 800318a:	0b5b      	lsrs	r3, r3, #13
 800318c:	4a04      	ldr	r2, [pc, #16]	; (80031a0 <RCC_GetPCLK2ClockFreq+0x24>)
 800318e:	5cd3      	ldrb	r3, [r2, r3]
 8003190:	461a      	mov	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	40d3      	lsrs	r3, r2
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	0800cefc 	.word	0x0800cefc

080031a4 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80031a4:	b590      	push	{r4, r7, lr}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
 80031b0:	2300      	movs	r3, #0
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	2300      	movs	r3, #0
 80031b6:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80031b8:	f7ff ff06 	bl	8002fc8 <LL_RCC_PLL_GetMainSource>
 80031bc:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <RCC_PLL_GetFreqDomain_SYS+0x28>
 80031c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031c8:	d003      	beq.n	80031d2 <RCC_PLL_GetFreqDomain_SYS+0x2e>
 80031ca:	e005      	b.n	80031d8 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80031cc:	4b1b      	ldr	r3, [pc, #108]	; (800323c <RCC_PLL_GetFreqDomain_SYS+0x98>)
 80031ce:	617b      	str	r3, [r7, #20]
      break;
 80031d0:	e005      	b.n	80031de <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80031d2:	4b1b      	ldr	r3, [pc, #108]	; (8003240 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 80031d4:	617b      	str	r3, [r7, #20]
      break;
 80031d6:	e002      	b.n	80031de <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 80031d8:	4b18      	ldr	r3, [pc, #96]	; (800323c <RCC_PLL_GetFreqDomain_SYS+0x98>)
 80031da:	617b      	str	r3, [r7, #20]
      break;
 80031dc:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d114      	bne.n	800320e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80031e4:	f7ff ff28 	bl	8003038 <LL_RCC_PLL_GetDivider>
 80031e8:	4602      	mov	r2, r0
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	fbb3 f4f2 	udiv	r4, r3, r2
 80031f0:	f7ff fef8 	bl	8002fe4 <LL_RCC_PLL_GetN>
 80031f4:	4603      	mov	r3, r0
 80031f6:	fb03 f404 	mul.w	r4, r3, r4
 80031fa:	f7ff ff01 	bl	8003000 <LL_RCC_PLL_GetP>
 80031fe:	4603      	mov	r3, r0
 8003200:	0c1b      	lsrs	r3, r3, #16
 8003202:	3301      	adds	r3, #1
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	fbb4 f3f3 	udiv	r3, r4, r3
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	e011      	b.n	8003232 <RCC_PLL_GetFreqDomain_SYS+0x8e>
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800320e:	f7ff ff13 	bl	8003038 <LL_RCC_PLL_GetDivider>
 8003212:	4602      	mov	r2, r0
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	fbb3 f4f2 	udiv	r4, r3, r2
 800321a:	f7ff fee3 	bl	8002fe4 <LL_RCC_PLL_GetN>
 800321e:	4603      	mov	r3, r0
 8003220:	fb03 f404 	mul.w	r4, r3, r4
 8003224:	f7ff fefa 	bl	800301c <LL_RCC_PLL_GetR>
 8003228:	4603      	mov	r3, r0
 800322a:	0f1b      	lsrs	r3, r3, #28
 800322c:	fbb4 f3f3 	udiv	r3, r4, r3
 8003230:	613b      	str	r3, [r7, #16]
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003232:	693b      	ldr	r3, [r7, #16]
}
 8003234:	4618      	mov	r0, r3
 8003236:	371c      	adds	r7, #28
 8003238:	46bd      	mov	sp, r7
 800323a:	bd90      	pop	{r4, r7, pc}
 800323c:	00f42400 	.word	0x00f42400
 8003240:	007a1200 	.word	0x007a1200

08003244 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	641a      	str	r2, [r3, #64]	; 0x40
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f043 0201 	orr.w	r2, r3, #1
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	615a      	str	r2, [r3, #20]
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a3d      	ldr	r2, [pc, #244]	; (8003430 <LL_TIM_Init+0x108>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d013      	beq.n	8003368 <LL_TIM_Init+0x40>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003346:	d00f      	beq.n	8003368 <LL_TIM_Init+0x40>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a3a      	ldr	r2, [pc, #232]	; (8003434 <LL_TIM_Init+0x10c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d00b      	beq.n	8003368 <LL_TIM_Init+0x40>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a39      	ldr	r2, [pc, #228]	; (8003438 <LL_TIM_Init+0x110>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d007      	beq.n	8003368 <LL_TIM_Init+0x40>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a38      	ldr	r2, [pc, #224]	; (800343c <LL_TIM_Init+0x114>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d003      	beq.n	8003368 <LL_TIM_Init+0x40>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a37      	ldr	r2, [pc, #220]	; (8003440 <LL_TIM_Init+0x118>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d106      	bne.n	8003376 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4313      	orrs	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a2d      	ldr	r2, [pc, #180]	; (8003430 <LL_TIM_Init+0x108>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d02b      	beq.n	80033d6 <LL_TIM_Init+0xae>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003384:	d027      	beq.n	80033d6 <LL_TIM_Init+0xae>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a2a      	ldr	r2, [pc, #168]	; (8003434 <LL_TIM_Init+0x10c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d023      	beq.n	80033d6 <LL_TIM_Init+0xae>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a29      	ldr	r2, [pc, #164]	; (8003438 <LL_TIM_Init+0x110>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d01f      	beq.n	80033d6 <LL_TIM_Init+0xae>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a28      	ldr	r2, [pc, #160]	; (800343c <LL_TIM_Init+0x114>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d01b      	beq.n	80033d6 <LL_TIM_Init+0xae>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a27      	ldr	r2, [pc, #156]	; (8003440 <LL_TIM_Init+0x118>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d017      	beq.n	80033d6 <LL_TIM_Init+0xae>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a26      	ldr	r2, [pc, #152]	; (8003444 <LL_TIM_Init+0x11c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d013      	beq.n	80033d6 <LL_TIM_Init+0xae>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a25      	ldr	r2, [pc, #148]	; (8003448 <LL_TIM_Init+0x120>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00f      	beq.n	80033d6 <LL_TIM_Init+0xae>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a24      	ldr	r2, [pc, #144]	; (800344c <LL_TIM_Init+0x124>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d00b      	beq.n	80033d6 <LL_TIM_Init+0xae>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a23      	ldr	r2, [pc, #140]	; (8003450 <LL_TIM_Init+0x128>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d007      	beq.n	80033d6 <LL_TIM_Init+0xae>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a22      	ldr	r2, [pc, #136]	; (8003454 <LL_TIM_Init+0x12c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d003      	beq.n	80033d6 <LL_TIM_Init+0xae>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a21      	ldr	r2, [pc, #132]	; (8003458 <LL_TIM_Init+0x130>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d106      	bne.n	80033e4 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	4619      	mov	r1, r3
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff ff35 	bl	8003260 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	4619      	mov	r1, r3
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff ff21 	bl	8003244 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a0a      	ldr	r2, [pc, #40]	; (8003430 <LL_TIM_Init+0x108>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d003      	beq.n	8003412 <LL_TIM_Init+0xea>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a0c      	ldr	r2, [pc, #48]	; (8003440 <LL_TIM_Init+0x118>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d105      	bne.n	800341e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	7c1b      	ldrb	r3, [r3, #16]
 8003416:	4619      	mov	r1, r3
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7ff ff2f 	bl	800327c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff ff72 	bl	8003308 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40010000 	.word	0x40010000
 8003434:	40000400 	.word	0x40000400
 8003438:	40000800 	.word	0x40000800
 800343c:	40000c00 	.word	0x40000c00
 8003440:	40010400 	.word	0x40010400
 8003444:	40014000 	.word	0x40014000
 8003448:	40014400 	.word	0x40014400
 800344c:	40014800 	.word	0x40014800
 8003450:	40001800 	.word	0x40001800
 8003454:	40001c00 	.word	0x40001c00
 8003458:	40002000 	.word	0x40002000

0800345c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2b10      	cmp	r3, #16
 8003470:	d012      	beq.n	8003498 <LL_TIM_OC_Init+0x3c>
 8003472:	2b10      	cmp	r3, #16
 8003474:	d802      	bhi.n	800347c <LL_TIM_OC_Init+0x20>
 8003476:	2b01      	cmp	r3, #1
 8003478:	d007      	beq.n	800348a <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800347a:	e022      	b.n	80034c2 <LL_TIM_OC_Init+0x66>
  switch (Channel)
 800347c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003480:	d011      	beq.n	80034a6 <LL_TIM_OC_Init+0x4a>
 8003482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003486:	d015      	beq.n	80034b4 <LL_TIM_OC_Init+0x58>
      break;
 8003488:	e01b      	b.n	80034c2 <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f867 	bl	8003560 <OC1Config>
 8003492:	4603      	mov	r3, r0
 8003494:	75fb      	strb	r3, [r7, #23]
      break;
 8003496:	e014      	b.n	80034c2 <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 f8cc 	bl	8003638 <OC2Config>
 80034a0:	4603      	mov	r3, r0
 80034a2:	75fb      	strb	r3, [r7, #23]
      break;
 80034a4:	e00d      	b.n	80034c2 <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 f935 	bl	8003718 <OC3Config>
 80034ae:	4603      	mov	r3, r0
 80034b0:	75fb      	strb	r3, [r7, #23]
      break;
 80034b2:	e006      	b.n	80034c2 <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 f99e 	bl	80037f8 <OC4Config>
 80034bc:	4603      	mov	r3, r0
 80034be:	75fb      	strb	r3, [r7, #23]
      break;
 80034c0:	bf00      	nop
  }

  return result;
 80034c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	7b12      	ldrb	r2, [r2, #12]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4313      	orrs	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	89d2      	ldrh	r2, [r2, #14]
 800351c:	4313      	orrs	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	4313      	orrs	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	4313      	orrs	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
	...

08003560 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	f023 0201 	bic.w	r2, r3, #1
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0303 	bic.w	r3, r3, #3
 800358e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f023 0202 	bic.w	r2, r3, #2
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f023 0201 	bic.w	r2, r3, #1
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a1c      	ldr	r2, [pc, #112]	; (8003630 <OC1Config+0xd0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d003      	beq.n	80035ca <OC1Config+0x6a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a1b      	ldr	r2, [pc, #108]	; (8003634 <OC1Config+0xd4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d11e      	bne.n	8003608 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f023 0208 	bic.w	r2, r3, #8
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4313      	orrs	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f023 0204 	bic.w	r2, r3, #4
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4313      	orrs	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	4313      	orrs	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	4619      	mov	r1, r3
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7ff fe3c 	bl	8003298 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40010000 	.word	0x40010000
 8003634:	40010400 	.word	0x40010400

08003638 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	f023 0210 	bic.w	r2, r3, #16
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	021b      	lsls	r3, r3, #8
 8003674:	4313      	orrs	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f023 0220 	bic.w	r2, r3, #32
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	4313      	orrs	r3, r2
 8003686:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f023 0210 	bic.w	r2, r3, #16
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a1d      	ldr	r2, [pc, #116]	; (8003710 <OC2Config+0xd8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <OC2Config+0x70>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a1c      	ldr	r2, [pc, #112]	; (8003714 <OC2Config+0xdc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d11f      	bne.n	80036e8 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	019b      	lsls	r3, r3, #6
 80036b4:	4313      	orrs	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	019b      	lsls	r3, r3, #6
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	4619      	mov	r1, r3
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff fdda 	bl	80032b4 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40010000 	.word	0x40010000
 8003714:	40010400 	.word	0x40010400

08003718 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0303 	bic.w	r3, r3, #3
 8003746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4313      	orrs	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	021b      	lsls	r3, r3, #8
 8003762:	4313      	orrs	r3, r2
 8003764:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	021b      	lsls	r3, r3, #8
 8003772:	4313      	orrs	r3, r2
 8003774:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a1d      	ldr	r2, [pc, #116]	; (80037f0 <OC3Config+0xd8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d003      	beq.n	8003786 <OC3Config+0x6e>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a1c      	ldr	r2, [pc, #112]	; (80037f4 <OC3Config+0xdc>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d11f      	bne.n	80037c6 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	029b      	lsls	r3, r3, #10
 8003792:	4313      	orrs	r3, r2
 8003794:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	029b      	lsls	r3, r3, #10
 80037a2:	4313      	orrs	r3, r2
 80037a4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	011b      	lsls	r3, r3, #4
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	015b      	lsls	r3, r3, #5
 80037c2:	4313      	orrs	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	4619      	mov	r1, r3
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff fd79 	bl	80032d0 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3718      	adds	r7, #24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40010000 	.word	0x40010000
 80037f4:	40010400 	.word	0x40010400

080037f8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	021b      	lsls	r3, r3, #8
 8003834:	4313      	orrs	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	031b      	lsls	r3, r3, #12
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	031b      	lsls	r3, r3, #12
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a11      	ldr	r2, [pc, #68]	; (80038a0 <OC4Config+0xa8>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d003      	beq.n	8003868 <OC4Config+0x70>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a10      	ldr	r2, [pc, #64]	; (80038a4 <OC4Config+0xac>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d107      	bne.n	8003878 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	019b      	lsls	r3, r3, #6
 8003874:	4313      	orrs	r3, r2
 8003876:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	4619      	mov	r1, r3
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7ff fd2e 	bl	80032ec <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40010000 	.word	0x40010000
 80038a4:	40010400 	.word	0x40010400

080038a8 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038bc:	bf0c      	ite	eq
 80038be:	2301      	moveq	r3, #1
 80038c0:	2300      	movne	r3, #0
 80038c2:	b2db      	uxtb	r3, r3
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	611a      	str	r2, [r3, #16]
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	615a      	str	r2, [r3, #20]
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003930:	d152      	bne.n	80039d8 <LL_USART_SetBaudRate+0xbc>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	009a      	lsls	r2, r3, #2
 800393c:	441a      	add	r2, r3
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	fbb2 f3f3 	udiv	r3, r2, r3
 8003946:	4a4f      	ldr	r2, [pc, #316]	; (8003a84 <LL_USART_SetBaudRate+0x168>)
 8003948:	fba2 2303 	umull	r2, r3, r2, r3
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	b29b      	uxth	r3, r3
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	b299      	uxth	r1, r3
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	4613      	mov	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	009a      	lsls	r2, r3, #2
 800395e:	441a      	add	r2, r3
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	fbb2 f2f3 	udiv	r2, r2, r3
 8003968:	4b46      	ldr	r3, [pc, #280]	; (8003a84 <LL_USART_SetBaudRate+0x168>)
 800396a:	fba3 0302 	umull	r0, r3, r3, r2
 800396e:	095b      	lsrs	r3, r3, #5
 8003970:	2064      	movs	r0, #100	; 0x64
 8003972:	fb00 f303 	mul.w	r3, r0, r3
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	3332      	adds	r3, #50	; 0x32
 800397c:	4a41      	ldr	r2, [pc, #260]	; (8003a84 <LL_USART_SetBaudRate+0x168>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	095b      	lsrs	r3, r3, #5
 8003984:	b29b      	uxth	r3, r3
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	b29b      	uxth	r3, r3
 800398a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800398e:	b29b      	uxth	r3, r3
 8003990:	440b      	add	r3, r1
 8003992:	b299      	uxth	r1, r3
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	009a      	lsls	r2, r3, #2
 800399e:	441a      	add	r2, r3
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039a8:	4b36      	ldr	r3, [pc, #216]	; (8003a84 <LL_USART_SetBaudRate+0x168>)
 80039aa:	fba3 0302 	umull	r0, r3, r3, r2
 80039ae:	095b      	lsrs	r3, r3, #5
 80039b0:	2064      	movs	r0, #100	; 0x64
 80039b2:	fb00 f303 	mul.w	r3, r0, r3
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	3332      	adds	r3, #50	; 0x32
 80039bc:	4a31      	ldr	r2, [pc, #196]	; (8003a84 <LL_USART_SetBaudRate+0x168>)
 80039be:	fba2 2303 	umull	r2, r3, r2, r3
 80039c2:	095b      	lsrs	r3, r3, #5
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	440b      	add	r3, r1
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	461a      	mov	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 80039d6:	e04f      	b.n	8003a78 <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	4613      	mov	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4413      	add	r3, r2
 80039e0:	009a      	lsls	r2, r3, #2
 80039e2:	441a      	add	r2, r3
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ec:	4a25      	ldr	r2, [pc, #148]	; (8003a84 <LL_USART_SetBaudRate+0x168>)
 80039ee:	fba2 2303 	umull	r2, r3, r2, r3
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	b299      	uxth	r1, r3
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	4613      	mov	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	009a      	lsls	r2, r3, #2
 8003a04:	441a      	add	r2, r3
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a0e:	4b1d      	ldr	r3, [pc, #116]	; (8003a84 <LL_USART_SetBaudRate+0x168>)
 8003a10:	fba3 0302 	umull	r0, r3, r3, r2
 8003a14:	095b      	lsrs	r3, r3, #5
 8003a16:	2064      	movs	r0, #100	; 0x64
 8003a18:	fb00 f303 	mul.w	r3, r0, r3
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	3332      	adds	r3, #50	; 0x32
 8003a22:	4a18      	ldr	r2, [pc, #96]	; (8003a84 <LL_USART_SetBaudRate+0x168>)
 8003a24:	fba2 2303 	umull	r2, r3, r2, r3
 8003a28:	095b      	lsrs	r3, r3, #5
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	440b      	add	r3, r1
 8003a34:	b299      	uxth	r1, r3
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009a      	lsls	r2, r3, #2
 8003a40:	441a      	add	r2, r3
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a4a:	4b0e      	ldr	r3, [pc, #56]	; (8003a84 <LL_USART_SetBaudRate+0x168>)
 8003a4c:	fba3 0302 	umull	r0, r3, r3, r2
 8003a50:	095b      	lsrs	r3, r3, #5
 8003a52:	2064      	movs	r0, #100	; 0x64
 8003a54:	fb00 f303 	mul.w	r3, r0, r3
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	3332      	adds	r3, #50	; 0x32
 8003a5e:	4a09      	ldr	r2, [pc, #36]	; (8003a84 <LL_USART_SetBaudRate+0x168>)
 8003a60:	fba2 2303 	umull	r2, r3, r2, r3
 8003a64:	095b      	lsrs	r3, r3, #5
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	440b      	add	r3, r1
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	461a      	mov	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	609a      	str	r2, [r3, #8]
}
 8003a78:	bf00      	nop
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	51eb851f 	.word	0x51eb851f

08003a88 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003a96:	2300      	movs	r3, #0
 8003a98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff ff04 	bl	80038a8 <LL_USART_IsEnabled>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d15e      	bne.n	8003b64 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003aae:	f023 030c 	bic.w	r3, r3, #12
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	6851      	ldr	r1, [r2, #4]
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	68d2      	ldr	r2, [r2, #12]
 8003aba:	4311      	orrs	r1, r2
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	6912      	ldr	r2, [r2, #16]
 8003ac0:	4311      	orrs	r1, r2
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	6992      	ldr	r2, [r2, #24]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7ff fefb 	bl	80038d0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	4619      	mov	r1, r3
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff ff08 	bl	80038f6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003ae6:	f107 0308 	add.w	r3, r7, #8
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff fab2 	bl	8003054 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a1f      	ldr	r2, [pc, #124]	; (8003b70 <LL_USART_Init+0xe8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d102      	bne.n	8003afe <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	61bb      	str	r3, [r7, #24]
 8003afc:	e021      	b.n	8003b42 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a1c      	ldr	r2, [pc, #112]	; (8003b74 <LL_USART_Init+0xec>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d102      	bne.n	8003b0c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	61bb      	str	r3, [r7, #24]
 8003b0a:	e01a      	b.n	8003b42 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a1a      	ldr	r2, [pc, #104]	; (8003b78 <LL_USART_Init+0xf0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d102      	bne.n	8003b1a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	61bb      	str	r3, [r7, #24]
 8003b18:	e013      	b.n	8003b42 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a17      	ldr	r2, [pc, #92]	; (8003b7c <LL_USART_Init+0xf4>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d102      	bne.n	8003b28 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	61bb      	str	r3, [r7, #24]
 8003b26:	e00c      	b.n	8003b42 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a15      	ldr	r2, [pc, #84]	; (8003b80 <LL_USART_Init+0xf8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d102      	bne.n	8003b36 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	61bb      	str	r3, [r7, #24]
 8003b34:	e005      	b.n	8003b42 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a12      	ldr	r2, [pc, #72]	; (8003b84 <LL_USART_Init+0xfc>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d101      	bne.n	8003b42 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00d      	beq.n	8003b64 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d009      	beq.n	8003b64 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8003b50:	2300      	movs	r3, #0
 8003b52:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	699a      	ldr	r2, [r3, #24]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69b9      	ldr	r1, [r7, #24]
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7ff fedc 	bl	800391c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003b64:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3720      	adds	r7, #32
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40011000 	.word	0x40011000
 8003b74:	40004400 	.word	0x40004400
 8003b78:	40004800 	.word	0x40004800
 8003b7c:	40011400 	.word	0x40011400
 8003b80:	40004c00 	.word	0x40004c00
 8003b84:	40005000 	.word	0x40005000

08003b88 <_ZN9ArgSensorC1Ev>:
 */

#include "ArgSensor.hpp"
#include "math.h"

ArgSensor::ArgSensor() {
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	4a0b      	ldr	r2, [pc, #44]	; (8003bc0 <_ZN9ArgSensorC1Ev+0x38>)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	mArg = 0;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	605a      	str	r2, [r3, #4]
	mImArgcount = 0;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	615a      	str	r2, [r3, #20]
	mArg_delta = 0;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	60da      	str	r2, [r3, #12]
	mFCisON = 0;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	741a      	strb	r2, [r3, #16]
}
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	0800ce44 	.word	0x0800ce44

08003bc4 <_ZN9ArgSensorD1Ev>:

ArgSensor::~ArgSensor() {
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	4a04      	ldr	r2, [pc, #16]	; (8003be0 <_ZN9ArgSensorD1Ev+0x1c>)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	0800ce44 	.word	0x0800ce44

08003be4 <_ZN9ArgSensorD0Ev>:
ArgSensor::~ArgSensor() {
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
}
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff ffe9 	bl	8003bc4 <_ZN9ArgSensorD1Ev>
 8003bf2:	2118      	movs	r1, #24
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f005 fc1a 	bl	800942e <_ZdlPvj>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <_ZN9ArgSensor6getArgEv>:
	mArgOld = mArg;
	mArg = mArg - pArg + (2*M_PI);
	mArg = fmodl(mArg, (2*M_PI));
}

float ArgSensor::getArg(void){
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
	return mArg;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	ee07 3a90 	vmov	s15, r3
}
 8003c14:	eeb0 0a67 	vmov.f32	s0, s15
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <_ZN9ArgSensor9getArgOldEv>:

float ArgSensor::getArgOld(void){
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
	return mArgOld;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	ee07 3a90 	vmov	s15, r3
}
 8003c32:	eeb0 0a67 	vmov.f32	s0, s15
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <_ZN9ArgSensor12getArg_deltaEv>:

float ArgSensor::getArg_delta(void){
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
	return mArg_delta;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	ee07 3a90 	vmov	s15, r3
}
 8003c50:	eeb0 0a67 	vmov.f32	s0, s15
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <_ZN9ArgSensor13FC_Start_StopEb>:

void ArgSensor::FC_Start_Stop(bool pIsON){
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
 8003c66:	460b      	mov	r3, r1
 8003c68:	70fb      	strb	r3, [r7, #3]
		mFCisON = pIsON;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	78fa      	ldrb	r2, [r7, #3]
 8003c6e:	741a      	strb	r2, [r3, #16]
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <_ZN9ArgSensor17GetIsAcceleratingEv>:

bool ArgSensor::GetIsAccelerating(void){
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
	return mIsAccelerating;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	7c5b      	ldrb	r3, [r3, #17]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	0000      	movs	r0, r0
	...

08003c98 <_ZN9ArgSensor11ForceComArgEv>:

void ArgSensor::ForceComArg(void){
 8003c98:	b590      	push	{r4, r7, lr}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
	if(mFCisON){
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	7c1b      	ldrb	r3, [r3, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d060      	beq.n	8003d6a <_ZN9ArgSensor11ForceComArgEv+0xd2>
		if(mImArgcount < 25000){
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	dc08      	bgt.n	8003cc6 <_ZN9ArgSensor11ForceComArgEv+0x2e>
			mImArgcount = mImArgcount + 4;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	1d1a      	adds	r2, r3, #4
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	615a      	str	r2, [r3, #20]
			mIsAccelerating = true;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	745a      	strb	r2, [r3, #17]
 8003cc4:	e002      	b.n	8003ccc <_ZN9ArgSensor11ForceComArgEv+0x34>
		} else {
			mIsAccelerating = false;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	745a      	strb	r2, [r3, #17]
		}
		float arg_add;
		arg_add = mImArgcount*0.0000125f*M_PI;//進む差分角
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	ee07 3a90 	vmov	s15, r3
 8003cd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cd8:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8003e40 <_ZN9ArgSensor11ForceComArgEv+0x1a8>
 8003cdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ce0:	ee17 0a90 	vmov	r0, s15
 8003ce4:	f7fc fc50 	bl	8000588 <__aeabi_f2d>
 8003ce8:	a351      	add	r3, pc, #324	; (adr r3, 8003e30 <_ZN9ArgSensor11ForceComArgEv+0x198>)
 8003cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cee:	f7fc fca3 	bl	8000638 <__aeabi_dmul>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	460c      	mov	r4, r1
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	4621      	mov	r1, r4
 8003cfa:	f7fc ff75 	bl	8000be8 <__aeabi_d2f>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	60bb      	str	r3, [r7, #8]
		mArgOld = mArg;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	609a      	str	r2, [r3, #8]
		mArg = mArg + arg_add + (2*M_PI);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003d10:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d18:	ee17 0a90 	vmov	r0, s15
 8003d1c:	f7fc fc34 	bl	8000588 <__aeabi_f2d>
 8003d20:	a345      	add	r3, pc, #276	; (adr r3, 8003e38 <_ZN9ArgSensor11ForceComArgEv+0x1a0>)
 8003d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d26:	f7fc fad1 	bl	80002cc <__adddf3>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	460c      	mov	r4, r1
 8003d2e:	4618      	mov	r0, r3
 8003d30:	4621      	mov	r1, r4
 8003d32:	f7fc ff59 	bl	8000be8 <__aeabi_d2f>
 8003d36:	4602      	mov	r2, r0
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	605a      	str	r2, [r3, #4]
		mArg = fmodl(mArg, (2*M_PI));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fc fc21 	bl	8000588 <__aeabi_f2d>
 8003d46:	4603      	mov	r3, r0
 8003d48:	460c      	mov	r4, r1
 8003d4a:	ed9f 1b3b 	vldr	d1, [pc, #236]	; 8003e38 <_ZN9ArgSensor11ForceComArgEv+0x1a0>
 8003d4e:	ec44 3b10 	vmov	d0, r3, r4
 8003d52:	f005 fb81 	bl	8009458 <fmodl>
 8003d56:	ec54 3b10 	vmov	r3, r4, d0
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	4621      	mov	r1, r4
 8003d5e:	f7fc ff43 	bl	8000be8 <__aeabi_d2f>
 8003d62:	4602      	mov	r2, r0
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	605a      	str	r2, [r3, #4]
		arg_add = mImArgcount*0.0000125f*M_PI;
		mArgOld = mArg;
		mArg = mArg + arg_add + (2*M_PI);
		mArg = fmodl(mArg, (2*M_PI));
	}
}
 8003d68:	e05d      	b.n	8003e26 <_ZN9ArgSensor11ForceComArgEv+0x18e>
		if(mImArgcount > 0){
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	dd08      	ble.n	8003d84 <_ZN9ArgSensor11ForceComArgEv+0xec>
			mImArgcount = mImArgcount - 4;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	1f1a      	subs	r2, r3, #4
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	615a      	str	r2, [r3, #20]
			mIsAccelerating = true;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	745a      	strb	r2, [r3, #17]
 8003d82:	e002      	b.n	8003d8a <_ZN9ArgSensor11ForceComArgEv+0xf2>
			mIsAccelerating = false;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	745a      	strb	r2, [r3, #17]
		arg_add = mImArgcount*0.0000125f*M_PI;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	ee07 3a90 	vmov	s15, r3
 8003d92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d96:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003e40 <_ZN9ArgSensor11ForceComArgEv+0x1a8>
 8003d9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d9e:	ee17 0a90 	vmov	r0, s15
 8003da2:	f7fc fbf1 	bl	8000588 <__aeabi_f2d>
 8003da6:	a322      	add	r3, pc, #136	; (adr r3, 8003e30 <_ZN9ArgSensor11ForceComArgEv+0x198>)
 8003da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dac:	f7fc fc44 	bl	8000638 <__aeabi_dmul>
 8003db0:	4603      	mov	r3, r0
 8003db2:	460c      	mov	r4, r1
 8003db4:	4618      	mov	r0, r3
 8003db6:	4621      	mov	r1, r4
 8003db8:	f7fc ff16 	bl	8000be8 <__aeabi_d2f>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	60fb      	str	r3, [r7, #12]
		mArgOld = mArg;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	609a      	str	r2, [r3, #8]
		mArg = mArg + arg_add + (2*M_PI);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	ed93 7a01 	vldr	s14, [r3, #4]
 8003dce:	edd7 7a03 	vldr	s15, [r7, #12]
 8003dd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dd6:	ee17 0a90 	vmov	r0, s15
 8003dda:	f7fc fbd5 	bl	8000588 <__aeabi_f2d>
 8003dde:	a316      	add	r3, pc, #88	; (adr r3, 8003e38 <_ZN9ArgSensor11ForceComArgEv+0x1a0>)
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	f7fc fa72 	bl	80002cc <__adddf3>
 8003de8:	4603      	mov	r3, r0
 8003dea:	460c      	mov	r4, r1
 8003dec:	4618      	mov	r0, r3
 8003dee:	4621      	mov	r1, r4
 8003df0:	f7fc fefa 	bl	8000be8 <__aeabi_d2f>
 8003df4:	4602      	mov	r2, r0
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	605a      	str	r2, [r3, #4]
		mArg = fmodl(mArg, (2*M_PI));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fc fbc2 	bl	8000588 <__aeabi_f2d>
 8003e04:	4603      	mov	r3, r0
 8003e06:	460c      	mov	r4, r1
 8003e08:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 8003e38 <_ZN9ArgSensor11ForceComArgEv+0x1a0>
 8003e0c:	ec44 3b10 	vmov	d0, r3, r4
 8003e10:	f005 fb22 	bl	8009458 <fmodl>
 8003e14:	ec54 3b10 	vmov	r3, r4, d0
 8003e18:	4618      	mov	r0, r3
 8003e1a:	4621      	mov	r1, r4
 8003e1c:	f7fc fee4 	bl	8000be8 <__aeabi_d2f>
 8003e20:	4602      	mov	r2, r0
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	605a      	str	r2, [r3, #4]
}
 8003e26:	bf00      	nop
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd90      	pop	{r4, r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	54442d18 	.word	0x54442d18
 8003e34:	400921fb 	.word	0x400921fb
 8003e38:	54442d18 	.word	0x54442d18
 8003e3c:	401921fb 	.word	0x401921fb
 8003e40:	3751b717 	.word	0x3751b717

08003e44 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <_ZN9DebugInfo13SendMotorDataC1Effff>:
 mVd(pVd), mVq(pVq), mEArg(pEArg)
{
	//constructor
}

DebugInfo::SendMotorData::SendMotorData(float pIu, float pIv, float pIw, float pEArg)
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6178      	str	r0, [r7, #20]
 8003e64:	ed87 0a04 	vstr	s0, [r7, #16]
 8003e68:	edc7 0a03 	vstr	s1, [r7, #12]
 8003e6c:	ed87 1a02 	vstr	s2, [r7, #8]
 8003e70:	edc7 1a01 	vstr	s3, [r7, #4]
:mIu(pIu), mIv(pIv), mIw(pIw), mEArg(pEArg)
 8003e74:	4a0a      	ldr	r2, [pc, #40]	; (8003ea0 <_ZN9DebugInfo13SendMotorDataC1Effff+0x44>)
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	605a      	str	r2, [r3, #4]
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	609a      	str	r2, [r3, #8]
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	60da      	str	r2, [r3, #12]
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	63da      	str	r2, [r3, #60]	; 0x3c
{
	//constructor
}
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	4618      	mov	r0, r3
 8003e96:	371c      	adds	r7, #28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	0800ce64 	.word	0x0800ce64

08003ea4 <_ZN9DebugInfo13SendMotorDataD1Ev>:

DebugInfo::SendMotorData::~SendMotorData(){
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	4a04      	ldr	r2, [pc, #16]	; (8003ec0 <_ZN9DebugInfo13SendMotorDataD1Ev+0x1c>)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	601a      	str	r2, [r3, #0]
	//destructor
}
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	0800ce64 	.word	0x0800ce64

08003ec4 <_ZN9DebugInfo13SendMotorDataD0Ev>:
DebugInfo::SendMotorData::~SendMotorData(){
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
}
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7ff ffe9 	bl	8003ea4 <_ZN9DebugInfo13SendMotorDataD1Ev>
 8003ed2:	2140      	movs	r1, #64	; 0x40
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f005 faaa 	bl	800942e <_ZdlPvj>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4618      	mov	r0, r3
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <_ZN9DebugInfoC1Ev>:

DebugInfo::DebugInfo() {
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	4a06      	ldr	r2, [pc, #24]	; (8003f08 <_ZN9DebugInfoC1Ev+0x24>)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 f858 	bl	8003fac <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>
	// TODO Auto-generated constructor stub
}
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4618      	mov	r0, r3
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	0800ce54 	.word	0x0800ce54

08003f0c <_ZN9DebugInfoD1Ev>:

DebugInfo::~DebugInfo() {
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	4a06      	ldr	r2, [pc, #24]	; (8003f30 <_ZN9DebugInfoD1Ev+0x24>)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 f851 	bl	8003fc6 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>
	// TODO Auto-generated destructor stub
}
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	0800ce54 	.word	0x0800ce54

08003f34 <_ZN9DebugInfoD0Ev>:
DebugInfo::~DebugInfo() {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
}
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff ffe5 	bl	8003f0c <_ZN9DebugInfoD1Ev>
 8003f42:	2110      	movs	r1, #16
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f005 fa72 	bl	800942e <_ZdlPvj>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <_ZN9DebugInfo12SetMotorDataEPNS_13SendMotorDataE>:

void DebugInfo::SetMotorData(DebugInfo::SendMotorData* pMotorData){
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
	mSendDataVect.push_back(*pMotorData);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3304      	adds	r3, #4
 8003f62:	6839      	ldr	r1, [r7, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 f849 	bl	8003ffc <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE9push_backERKS1_>
}
 8003f6a:	bf00      	nop
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <_ZN9DebugInfo7GetVectEv>:

//getter
std::vector<DebugInfo::SendMotorData> DebugInfo::GetVect(void){
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b082      	sub	sp, #8
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
 8003f7a:	6039      	str	r1, [r7, #0]
	return mSendDataVect;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	3304      	adds	r3, #4
 8003f80:	4619      	mov	r1, r3
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f860 	bl	8004048 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EEC1ERKS3_>
}
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <_ZN9DebugInfo11GetVectSizeEv>:

int DebugInfo::GetVectSize(void){
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
	return mSendDataVect.size();
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	3304      	adds	r3, #4
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 f890 	bl	80040c2 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE4sizeEv>
 8003fa2:	4603      	mov	r3, r0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 f8a0 	bl	80040fc <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8003fc6:	b5b0      	push	{r4, r5, r7, lr}
 8003fc8:	b082      	sub	sp, #8
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681c      	ldr	r4, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 f8b6 	bl	800414a <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>
 8003fde:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	4629      	mov	r1, r5
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	f000 f8bb 	bl	8004160 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataES1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 f892 	bl	8004116 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bdb0      	pop	{r4, r5, r7, pc}

08003ffc <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE9push_backERKS1_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	429a      	cmp	r2, r3
 8004010:	d00d      	beq.n	800402e <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE9push_backERKS1_+0x32>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	4619      	mov	r1, r3
 800401c:	f000 f8b9 	bl	8004192 <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	605a      	str	r2, [r3, #4]
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 800402c:	e008      	b.n	8004040 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE9push_backERKS1_+0x44>
	  _M_realloc_insert(end(), __x);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f8c2 	bl	80041b8 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE3endEv>
 8004034:	4603      	mov	r3, r0
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	4619      	mov	r1, r3
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f8ce 	bl	80041dc <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8004040:	bf00      	nop
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EEC1ERKS3_>:
      vector(const vector& __x)
 8004048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8004052:	687c      	ldr	r4, [r7, #4]
 8004054:	6838      	ldr	r0, [r7, #0]
 8004056:	f000 f834 	bl	80040c2 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE4sizeEv>
 800405a:	4605      	mov	r5, r0
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	4618      	mov	r0, r3
 8004060:	f000 f956 	bl	8004310 <_ZNKSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>
 8004064:	4602      	mov	r2, r0
 8004066:	f107 030c 	add.w	r3, r7, #12
 800406a:	4611      	mov	r1, r2
 800406c:	4618      	mov	r0, r3
 800406e:	f000 f941 	bl	80042f4 <_ZN9__gnu_cxx14__alloc_traitsISaIN9DebugInfo13SendMotorDataEEE17_S_select_on_copyERKS3_>
 8004072:	f107 030c 	add.w	r3, r7, #12
 8004076:	461a      	mov	r2, r3
 8004078:	4629      	mov	r1, r5
 800407a:	4620      	mov	r0, r4
 800407c:	f000 f95f 	bl	800433e <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EEC1EjRKS2_>
 8004080:	f107 030c 	add.w	r3, r7, #12
 8004084:	4618      	mov	r0, r3
 8004086:	f000 f94e 	bl	8004326 <_ZNSaIN9DebugInfo13SendMotorDataEED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800408a:	6838      	ldr	r0, [r7, #0]
 800408c:	f000 f96b 	bl	8004366 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE5beginEv>
 8004090:	4605      	mov	r5, r0
 8004092:	6838      	ldr	r0, [r7, #0]
 8004094:	f000 f97b 	bl	800438e <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE3endEv>
 8004098:	4606      	mov	r6, r0
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 f852 	bl	800414a <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>
 80040a6:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80040a8:	4622      	mov	r2, r4
 80040aa:	4631      	mov	r1, r6
 80040ac:	4628      	mov	r0, r5
 80040ae:	f000 f982 	bl	80043b6 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
 80040b2:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	605a      	str	r2, [r3, #4]
      }
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040c2 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	461a      	mov	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	119b      	asrs	r3, r3, #6
 80040d8:	4618      	mov	r0, r3
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f91a 	bl	8004326 <_ZNSaIN9DebugInfo13SendMotorDataEED1Ev>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4618      	mov	r0, r3
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>:
      _Vector_base()
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4618      	mov	r0, r3
 8004108:	f000 f966 	bl	80043d8 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implC1Ev>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8004116:	b580      	push	{r7, lr}
 8004118:	b082      	sub	sp, #8
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6819      	ldr	r1, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8004126:	461a      	mov	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	119b      	asrs	r3, r3, #6
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8004130:	461a      	mov	r2, r3
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f965 	bl	8004402 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff ffd2 	bl	80040e4 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implD1Ev>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4618      	mov	r0, r3
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4618      	mov	r0, r3
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataES1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800416c:	68b9      	ldr	r1, [r7, #8]
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 f95a 	bl	8004428 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataEEvT_S3_>
    }
 8004174:	bf00      	nop
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <_ZSt7forwardIRKN9DebugInfo13SendMotorDataEEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4618      	mov	r0, r3
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8004192:	b580      	push	{r7, lr}
 8004194:	b084      	sub	sp, #16
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7ff ffec 	bl	800417c <_ZSt7forwardIRKN9DebugInfo13SendMotorDataEEOT_RNSt16remove_referenceIS4_E4typeE>
 80041a4:	4603      	mov	r3, r0
 80041a6:	461a      	mov	r2, r3
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 f998 	bl	80044e0 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
 80041b0:	bf00      	nop
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	1d1a      	adds	r2, r3, #4
 80041c4:	f107 030c 	add.w	r3, r7, #12
 80041c8:	4611      	mov	r1, r2
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 f9a2 	bl	8004514 <_ZN9__gnu_cxx17__normal_iteratorIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80041dc:	b5b0      	push	{r4, r5, r7, lr}
 80041de:	b08a      	sub	sp, #40	; 0x28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 80041e8:	4a41      	ldr	r2, [pc, #260]	; (80042f0 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x114>)
 80041ea:	2101      	movs	r1, #1
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f9a1 	bl	8004534 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE12_M_check_lenEjPKc>
 80041f2:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 f9e5 	bl	80045c4 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE5beginEv>
 80041fa:	4603      	mov	r3, r0
 80041fc:	617b      	str	r3, [r7, #20]
 80041fe:	f107 0214 	add.w	r2, r7, #20
 8004202:	f107 0308 	add.w	r3, r7, #8
 8004206:	4611      	mov	r1, r2
 8004208:	4618      	mov	r0, r3
 800420a:	f000 f9eb 	bl	80045e4 <_ZN9__gnu_cxxmiIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800420e:	4603      	mov	r3, r0
 8004210:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004216:	4618      	mov	r0, r3
 8004218:	f000 f9fa 	bl	8004610 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE11_M_allocateEj>
 800421c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8004222:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	019b      	lsls	r3, r3, #6
	  _Alloc_traits::construct(this->_M_impl,
 8004228:	69fa      	ldr	r2, [r7, #28]
 800422a:	18d5      	adds	r5, r2, r3
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7ff ffa5 	bl	800417c <_ZSt7forwardIRKN9DebugInfo13SendMotorDataEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004232:	4603      	mov	r3, r0
 8004234:	461a      	mov	r2, r3
 8004236:	4629      	mov	r1, r5
 8004238:	4620      	mov	r0, r4
 800423a:	f7ff ffaa 	bl	8004192 <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800423e:	2300      	movs	r3, #0
 8004240:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681c      	ldr	r4, [r3, #0]
 8004246:	f107 0308 	add.w	r3, r7, #8
 800424a:	4618      	mov	r0, r3
 800424c:	f000 f9f4 	bl	8004638 <_ZNK9__gnu_cxx17__normal_iteratorIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEE4baseEv>
 8004250:	4603      	mov	r3, r0
 8004252:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff ff77 	bl	800414a <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>
 800425c:	4603      	mov	r3, r0
	  __new_finish
 800425e:	69fa      	ldr	r2, [r7, #28]
 8004260:	4629      	mov	r1, r5
 8004262:	4620      	mov	r0, r4
 8004264:	f000 f9f3 	bl	800464e <_ZSt34__uninitialized_move_if_noexcept_aIPN9DebugInfo13SendMotorDataES2_SaIS1_EET0_T_S5_S4_RT1_>
 8004268:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	3340      	adds	r3, #64	; 0x40
 800426e:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 8004270:	f107 0308 	add.w	r3, r7, #8
 8004274:	4618      	mov	r0, r3
 8004276:	f000 f9df 	bl	8004638 <_ZNK9__gnu_cxx17__normal_iteratorIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEE4baseEv>
 800427a:	4603      	mov	r3, r0
 800427c:	681c      	ldr	r4, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff ff60 	bl	800414a <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>
 800428a:	4603      	mov	r3, r0
	  __new_finish
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4629      	mov	r1, r5
 8004290:	4620      	mov	r0, r4
 8004292:	f000 f9dc 	bl	800464e <_ZSt34__uninitialized_move_if_noexcept_aIPN9DebugInfo13SendMotorDataES2_SaIS1_EET0_T_S5_S4_RT1_>
 8004296:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681c      	ldr	r4, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff ff51 	bl	800414a <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>
 80042a8:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80042aa:	461a      	mov	r2, r3
 80042ac:	4629      	mov	r1, r5
 80042ae:	4620      	mov	r0, r4
 80042b0:	f7ff ff56 	bl	8004160 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataES1_EvT_S3_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 80042be:	461a      	mov	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	119b      	asrs	r3, r3, #6
      _M_deallocate(this->_M_impl._M_start,
 80042c8:	461a      	mov	r2, r3
 80042ca:	f000 f89a 	bl	8004402 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	69fa      	ldr	r2, [r7, #28]
 80042d2:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	019b      	lsls	r3, r3, #6
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	441a      	add	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	609a      	str	r2, [r3, #8]
    }
 80042e6:	bf00      	nop
 80042e8:	3728      	adds	r7, #40	; 0x28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bdb0      	pop	{r4, r5, r7, pc}
 80042ee:	bf00      	nop
 80042f0:	0800cd80 	.word	0x0800cd80

080042f4 <_ZN9__gnu_cxx14__alloc_traitsISaIN9DebugInfo13SendMotorDataEEE17_S_select_on_copyERKS3_>:
    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::addressof(*__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6839      	ldr	r1, [r7, #0]
 8004302:	4618      	mov	r0, r3
 8004304:	f000 f9bc 	bl	8004680 <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE37select_on_container_copy_constructionERKS2_>
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <_ZNKSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4618      	mov	r0, r3
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <_ZNSaIN9DebugInfo13SendMotorDataEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 8004326:	b580      	push	{r7, lr}
 8004328:	b082      	sub	sp, #8
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f9c1 	bl	80046b6 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEED1Ev>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4618      	mov	r0, r3
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EEC1EjRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800433e:	b580      	push	{r7, lr}
 8004340:	b084      	sub	sp, #16
 8004342:	af00      	add	r7, sp, #0
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	60b9      	str	r1, [r7, #8]
 8004348:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	4618      	mov	r0, r3
 8004350:	f000 f9bc 	bl	80046cc <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
 8004354:	68b9      	ldr	r1, [r7, #8]
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 f9cf 	bl	80046fa <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE17_M_create_storageEj>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8004366:	b580      	push	{r7, lr}
 8004368:	b084      	sub	sp, #16
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	f107 020c 	add.w	r2, r7, #12
 8004378:	f107 0308 	add.w	r3, r7, #8
 800437c:	4611      	mov	r1, r2
 800437e:	4618      	mov	r0, r3
 8004380:	f000 f9d6 	bl	8004730 <_ZN9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800438e:	b580      	push	{r7, lr}
 8004390:	b084      	sub	sp, #16
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	f107 020c 	add.w	r2, r7, #12
 80043a0:	f107 0308 	add.w	r3, r7, #8
 80043a4:	4611      	mov	r1, r2
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 f9c2 	bl	8004730 <_ZN9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b084      	sub	sp, #16
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	607a      	str	r2, [r7, #4]
 80043c2:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	68b9      	ldr	r1, [r7, #8]
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 f9c1 	bl	8004750 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
 80043ce:	4603      	mov	r3, r0
 80043d0:	4618      	mov	r0, r3
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f9c7 	bl	8004774 <_ZNSaIN9DebugInfo13SendMotorDataEEC1Ev>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	605a      	str	r2, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	609a      	str	r2, [r3, #8]
	{ }
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8004402:	b580      	push	{r7, lr}
 8004404:	b084      	sub	sp, #16
 8004406:	af00      	add	r7, sp, #0
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	607a      	str	r2, [r7, #4]
	if (__p)
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d005      	beq.n	8004420 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	68b9      	ldr	r1, [r7, #8]
 800441a:	4618      	mov	r0, r3
 800441c:	f000 f9b6 	bl	800478c <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE10deallocateERS2_PS1_j>
      }
 8004420:	bf00      	nop
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8004432:	6839      	ldr	r1, [r7, #0]
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f9c3 	bl	80047c0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_>
    }
 800443a:	bf00      	nop
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
	...

08004444 <_ZN9DebugInfo13SendMotorDataC1ERKS0_>:



class DebugInfo {
public:
	class SendMotorData{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
 800444e:	4a23      	ldr	r2, [pc, #140]	; (80044dc <_ZN9DebugInfo13SendMotorDataC1ERKS0_+0x98>)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	605a      	str	r2, [r3, #4]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	609a      	str	r2, [r3, #8]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	60da      	str	r2, [r3, #12]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	611a      	str	r2, [r3, #16]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	695a      	ldr	r2, [r3, #20]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	615a      	str	r2, [r3, #20]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	699a      	ldr	r2, [r3, #24]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	619a      	str	r2, [r3, #24]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	69da      	ldr	r2, [r3, #28]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	61da      	str	r2, [r3, #28]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	6a1a      	ldr	r2, [r3, #32]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	621a      	str	r2, [r3, #32]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	625a      	str	r2, [r3, #36]	; 0x24
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	629a      	str	r2, [r3, #40]	; 0x28
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	631a      	str	r2, [r3, #48]	; 0x30
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	635a      	str	r2, [r3, #52]	; 0x34
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	639a      	str	r2, [r3, #56]	; 0x38
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4618      	mov	r0, r3
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	0800ce64 	.word	0x0800ce64

080044e0 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80044e0:	b590      	push	{r4, r7, lr}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7ff fe45 	bl	800417c <_ZSt7forwardIRKN9DebugInfo13SendMotorDataEEOT_RNSt16remove_referenceIS4_E4typeE>
 80044f2:	4604      	mov	r4, r0
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4619      	mov	r1, r3
 80044f8:	2040      	movs	r0, #64	; 0x40
 80044fa:	f7ff fca3 	bl	8003e44 <_ZnwjPv>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE9constructIS2_JRKS2_EEEvPT_DpOT0_+0x2c>
 8004504:	4621      	mov	r1, r4
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff ff9c 	bl	8004444 <_ZN9DebugInfo13SendMotorDataC1ERKS0_>
 800450c:	bf00      	nop
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	bd90      	pop	{r4, r7, pc}

08004514 <_ZN9__gnu_cxx17__normal_iteratorIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEC1ERKS3_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4618      	mov	r0, r3
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8004534:	b590      	push	{r4, r7, lr}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 f955 	bl	80047f0 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE8max_sizeEv>
 8004546:	4604      	mov	r4, r0
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f7ff fdba 	bl	80040c2 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE4sizeEv>
 800454e:	4603      	mov	r3, r0
 8004550:	1ae2      	subs	r2, r4, r3
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	429a      	cmp	r2, r3
 8004556:	bf34      	ite	cc
 8004558:	2301      	movcc	r3, #1
 800455a:	2300      	movcs	r3, #0
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4618      	mov	r0, r3
 8004566:	f004 ff7f 	bl	8009468 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + std::max(size(), __n);
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f7ff fda9 	bl	80040c2 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE4sizeEv>
 8004570:	4604      	mov	r4, r0
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f7ff fda5 	bl	80040c2 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE4sizeEv>
 8004578:	4603      	mov	r3, r0
 800457a:	613b      	str	r3, [r7, #16]
 800457c:	f107 0208 	add.w	r2, r7, #8
 8004580:	f107 0310 	add.w	r3, r7, #16
 8004584:	4611      	mov	r1, r2
 8004586:	4618      	mov	r0, r3
 8004588:	f000 f943 	bl	8004812 <_ZSt3maxIjERKT_S2_S2_>
 800458c:	4603      	mov	r3, r0
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4423      	add	r3, r4
 8004592:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f7ff fd94 	bl	80040c2 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE4sizeEv>
 800459a:	4602      	mov	r2, r0
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	4293      	cmp	r3, r2
 80045a0:	d306      	bcc.n	80045b0 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE12_M_check_lenEjPKc+0x7c>
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f000 f924 	bl	80047f0 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE8max_sizeEv>
 80045a8:	4602      	mov	r2, r0
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d904      	bls.n	80045ba <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE12_M_check_lenEjPKc+0x86>
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 f91d 	bl	80047f0 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE8max_sizeEv>
 80045b6:	4603      	mov	r3, r0
 80045b8:	e000      	b.n	80045bc <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE12_M_check_lenEjPKc+0x88>
 80045ba:	697b      	ldr	r3, [r7, #20]
      }
 80045bc:	4618      	mov	r0, r3
 80045be:	371c      	adds	r7, #28
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd90      	pop	{r4, r7, pc}

080045c4 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	f107 030c 	add.w	r3, r7, #12
 80045d2:	4611      	mov	r1, r2
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff ff9d 	bl	8004514 <_ZN9__gnu_cxx17__normal_iteratorIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <_ZN9__gnu_cxxmiIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80045e4:	b590      	push	{r4, r7, lr}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f822 	bl	8004638 <_ZNK9__gnu_cxx17__normal_iteratorIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEE4baseEv>
 80045f4:	4603      	mov	r3, r0
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	461c      	mov	r4, r3
 80045fa:	6838      	ldr	r0, [r7, #0]
 80045fc:	f000 f81c 	bl	8004638 <_ZNK9__gnu_cxx17__normal_iteratorIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEE4baseEv>
 8004600:	4603      	mov	r3, r0
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	1ae3      	subs	r3, r4, r3
 8004606:	119b      	asrs	r3, r3, #6
 8004608:	4618      	mov	r0, r3
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	bd90      	pop	{r4, r7, pc}

08004610 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d006      	beq.n	800462e <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE11_M_allocateEj+0x1e>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6839      	ldr	r1, [r7, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f000 f908 	bl	800483a <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE8allocateERS2_j>
 800462a:	4603      	mov	r3, r0
 800462c:	e000      	b.n	8004630 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE11_M_allocateEj+0x20>
 800462e:	2300      	movs	r3, #0
      }
 8004630:	4618      	mov	r0, r3
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <_ZNK9__gnu_cxx17__normal_iteratorIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4618      	mov	r0, r3
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <_ZSt34__uninitialized_move_if_noexcept_aIPN9DebugInfo13SendMotorDataES2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800464e:	b590      	push	{r4, r7, lr}
 8004650:	b085      	sub	sp, #20
 8004652:	af00      	add	r7, sp, #0
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	607a      	str	r2, [r7, #4]
 800465a:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 f8fb 	bl	8004858 <_ZSt32__make_move_if_noexcept_iteratorIN9DebugInfo13SendMotorDataESt13move_iteratorIPS1_EET0_PT_>
 8004662:	4604      	mov	r4, r0
 8004664:	68b8      	ldr	r0, [r7, #8]
 8004666:	f000 f8f7 	bl	8004858 <_ZSt32__make_move_if_noexcept_iteratorIN9DebugInfo13SendMotorDataESt13move_iteratorIPS1_EET0_PT_>
 800466a:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	4620      	mov	r0, r4
 8004672:	f000 f900 	bl	8004876 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN9DebugInfo13SendMotorDataEES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8004676:	4603      	mov	r3, r0
    }
 8004678:	4618      	mov	r0, r3
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	bd90      	pop	{r4, r7, pc}

08004680 <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE37select_on_container_copy_constructionERKS2_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800468a:	6839      	ldr	r1, [r7, #0]
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f804 	bl	800469a <_ZNSaIN9DebugInfo13SendMotorDataEEC1ERKS1_>
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <_ZNSaIN9DebugInfo13SendMotorDataEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 800469a:	b580      	push	{r7, lr}
 800469c:	b082      	sub	sp, #8
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80046a4:	6839      	ldr	r1, [r7, #0]
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f8f6 	bl	8004898 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEEC1ERKS3_>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4618      	mov	r0, r3
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4618      	mov	r0, r3
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 80046d6:	6839      	ldr	r1, [r7, #0]
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f7ff ffde 	bl	800469a <_ZNSaIN9DebugInfo13SendMotorDataEEC1ERKS1_>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	605a      	str	r2, [r3, #4]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	609a      	str	r2, [r3, #8]
	{ }
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4618      	mov	r0, r3
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b082      	sub	sp, #8
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
 8004702:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8004704:	6839      	ldr	r1, [r7, #0]
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7ff ff82 	bl	8004610 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE11_M_allocateEj>
 800470c:	4602      	mov	r2, r0
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	019b      	lsls	r3, r3, #6
 8004722:	441a      	add	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	609a      	str	r2, [r3, #8]
      }
 8004728:	bf00      	nop
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <_ZN9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4618      	mov	r0, r3
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800475c:	2301      	movs	r3, #1
 800475e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	68b9      	ldr	r1, [r7, #8]
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 f8a3 	bl	80048b0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>
 800476a:	4603      	mov	r3, r0
    }
 800476c:	4618      	mov	r0, r3
 800476e:	3718      	adds	r7, #24
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <_ZNSaIN9DebugInfo13SendMotorDataEEC1Ev>:
      allocator() throw() { }
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f8c6 	bl	800490e <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEEC1Ev>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4618      	mov	r0, r3
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 f8c1 	bl	8004924 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE10deallocateEPS2_j>
 80047a2:	bf00      	nop
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <_ZSt11__addressofIN9DebugInfo13SendMotorDataEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4618      	mov	r0, r3
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d00a      	beq.n	80047e8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7ff ffe9 	bl	80047aa <_ZSt11__addressofIN9DebugInfo13SendMotorDataEEPT_RS2_>
 80047d8:	4603      	mov	r3, r0
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 f8af 	bl	800493e <_ZSt8_DestroyIN9DebugInfo13SendMotorDataEEvPT_>
	  for (; __first != __last; ++__first)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3340      	adds	r3, #64	; 0x40
 80047e4:	607b      	str	r3, [r7, #4]
 80047e6:	e7f0      	b.n	80047ca <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_+0xa>
	}
 80047e8:	bf00      	nop
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <_ZNKSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff fd88 	bl	8004310 <_ZNKSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>
 8004800:	4603      	mov	r3, r0
 8004802:	4618      	mov	r0, r3
 8004804:	f000 f8a8 	bl	8004958 <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE8max_sizeERKS2_>
 8004808:	4603      	mov	r3, r0
 800480a:	4618      	mov	r0, r3
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d201      	bcs.n	800482c <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	e000      	b.n	800482e <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800482c:	687b      	ldr	r3, [r7, #4]
    }
 800482e:	4618      	mov	r0, r3
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800483a:	b580      	push	{r7, lr}
 800483c:	b082      	sub	sp, #8
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004844:	2200      	movs	r2, #0
 8004846:	6839      	ldr	r1, [r7, #0]
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f891 	bl	8004970 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE8allocateEjPKv>
 800484e:	4603      	mov	r3, r0
 8004850:	4618      	mov	r0, r3
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <_ZSt32__make_move_if_noexcept_iteratorIN9DebugInfo13SendMotorDataESt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8004860:	f107 030c 	add.w	r3, r7, #12
 8004864:	6879      	ldr	r1, [r7, #4]
 8004866:	4618      	mov	r0, r3
 8004868:	f000 f8a0 	bl	80049ac <_ZNSt13move_iteratorIPN9DebugInfo13SendMotorDataEEC1ES2_>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN9DebugInfo13SendMotorDataEES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8004876:	b580      	push	{r7, lr}
 8004878:	b084      	sub	sp, #16
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	607a      	str	r2, [r7, #4]
 8004882:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	68b9      	ldr	r1, [r7, #8]
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 f89e 	bl	80049ca <_ZSt18uninitialized_copyISt13move_iteratorIPN9DebugInfo13SendMotorDataEES3_ET0_T_S6_S5_>
 800488e:	4603      	mov	r3, r0
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4618      	mov	r0, r3
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80048b0:	b590      	push	{r4, r7, lr}
 80048b2:	b087      	sub	sp, #28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 80048c0:	f107 0208 	add.w	r2, r7, #8
 80048c4:	f107 030c 	add.w	r3, r7, #12
 80048c8:	4611      	mov	r1, r2
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 f88f 	bl	80049ee <_ZN9__gnu_cxxneIPKN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d016      	beq.n	8004904 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 80048d6:	6978      	ldr	r0, [r7, #20]
 80048d8:	f7ff ff67 	bl	80047aa <_ZSt11__addressofIN9DebugInfo13SendMotorDataEEPT_RS2_>
 80048dc:	4604      	mov	r4, r0
 80048de:	f107 030c 	add.w	r3, r7, #12
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 f8ac 	bl	8004a40 <_ZNK9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEdeEv>
 80048e8:	4603      	mov	r3, r0
 80048ea:	4619      	mov	r1, r3
 80048ec:	4620      	mov	r0, r4
 80048ee:	f000 f8b3 	bl	8004a58 <_ZSt10_ConstructIN9DebugInfo13SendMotorDataEJRKS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 80048f2:	f107 030c 	add.w	r3, r7, #12
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 f891 	bl	8004a1e <_ZN9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEppEv>
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	3340      	adds	r3, #64	; 0x40
 8004900:	617b      	str	r3, [r7, #20]
 8004902:	e7dd      	b.n	80048c0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x10>
	      return __cur;
 8004904:	697b      	ldr	r3, [r7, #20]
	}
 8004906:	4618      	mov	r0, r3
 8004908:	371c      	adds	r7, #28
 800490a:	46bd      	mov	sp, r7
 800490c:	bd90      	pop	{r4, r7, pc}

0800490e <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4618      	mov	r0, r3
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8004930:	68b8      	ldr	r0, [r7, #8]
 8004932:	f004 fd7a 	bl	800942a <_ZdlPv>
      }
 8004936:	bf00      	nop
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <_ZSt8_DestroyIN9DebugInfo13SendMotorDataEEvPT_>:
    _Destroy(_Tp* __pointer)
 800493e:	b580      	push	{r7, lr}
 8004940:	b082      	sub	sp, #8
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	4798      	blx	r3
 8004950:	bf00      	nop
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f892 	bl	8004a8a <_ZNK9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE8max_sizeEv>
 8004966:	4603      	mov	r3, r0
 8004968:	4618      	mov	r0, r3
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 f884 	bl	8004a8a <_ZNK9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE8max_sizeEv>
 8004982:	4602      	mov	r2, r0
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	4293      	cmp	r3, r2
 8004988:	bf8c      	ite	hi
 800498a:	2301      	movhi	r3, #1
 800498c:	2300      	movls	r3, #0
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004994:	f004 fd62 	bl	800945c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	019b      	lsls	r3, r3, #6
 800499c:	4618      	mov	r0, r3
 800499e:	f004 fd48 	bl	8009432 <_Znwj>
 80049a2:	4603      	mov	r3, r0
      }
 80049a4:	4618      	mov	r0, r3
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <_ZNSt13move_iteratorIPN9DebugInfo13SendMotorDataEEC1ES2_>:
      move_iterator(iterator_type __i)
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4618      	mov	r0, r3
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <_ZSt18uninitialized_copyISt13move_iteratorIPN9DebugInfo13SendMotorDataEES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b086      	sub	sp, #24
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	60f8      	str	r0, [r7, #12]
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80049d6:	2301      	movs	r3, #1
 80049d8:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	68b9      	ldr	r1, [r7, #8]
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 f85f 	bl	8004aa2 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPN9DebugInfo13SendMotorDataEES5_EET0_T_S8_S7_>
 80049e4:	4603      	mov	r3, r0
    }
 80049e6:	4618      	mov	r0, r3
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <_ZN9__gnu_cxxneIPKN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80049ee:	b590      	push	{r4, r7, lr}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 f881 	bl	8004b00 <_ZNK9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEE4baseEv>
 80049fe:	4603      	mov	r3, r0
 8004a00:	681c      	ldr	r4, [r3, #0]
 8004a02:	6838      	ldr	r0, [r7, #0]
 8004a04:	f000 f87c 	bl	8004b00 <_ZNK9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEE4baseEv>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	429c      	cmp	r4, r3
 8004a0e:	bf14      	ite	ne
 8004a10:	2301      	movne	r3, #1
 8004a12:	2300      	moveq	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	4618      	mov	r0, r3
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd90      	pop	{r4, r7, pc}

08004a1e <_ZN9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	601a      	str	r2, [r3, #0]
	return *this;
 8004a32:	687b      	ldr	r3, [r7, #4]
      }
 8004a34:	4618      	mov	r0, r3
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <_ZNK9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <_ZSt10_ConstructIN9DebugInfo13SendMotorDataEJRKS1_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 8004a58:	b590      	push	{r4, r7, lr}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 8004a62:	6838      	ldr	r0, [r7, #0]
 8004a64:	f7ff fb8a 	bl	800417c <_ZSt7forwardIRKN9DebugInfo13SendMotorDataEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004a68:	4604      	mov	r4, r0
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	2040      	movs	r0, #64	; 0x40
 8004a70:	f7ff f9e8 	bl	8003e44 <_ZnwjPv>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <_ZSt10_ConstructIN9DebugInfo13SendMotorDataEJRKS1_EEvPT_DpOT0_+0x2a>
 8004a7a:	4621      	mov	r1, r4
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7ff fce1 	bl	8004444 <_ZN9DebugInfo13SendMotorDataC1ERKS0_>
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd90      	pop	{r4, r7, pc}

08004a8a <_ZNK9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8004a92:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 8004a96:	4618      	mov	r0, r3
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPN9DebugInfo13SendMotorDataEES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004aa2:	b590      	push	{r4, r7, lr}
 8004aa4:	b087      	sub	sp, #28
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	60f8      	str	r0, [r7, #12]
 8004aaa:	60b9      	str	r1, [r7, #8]
 8004aac:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8004ab2:	f107 0208 	add.w	r2, r7, #8
 8004ab6:	f107 030c 	add.w	r3, r7, #12
 8004aba:	4611      	mov	r1, r2
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 f82a 	bl	8004b16 <_ZStneIPN9DebugInfo13SendMotorDataEEbRKSt13move_iteratorIT_ES7_>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d016      	beq.n	8004af6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPN9DebugInfo13SendMotorDataEES5_EET0_T_S8_S7_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8004ac8:	6978      	ldr	r0, [r7, #20]
 8004aca:	f7ff fe6e 	bl	80047aa <_ZSt11__addressofIN9DebugInfo13SendMotorDataEEPT_RS2_>
 8004ace:	4604      	mov	r4, r0
 8004ad0:	f107 030c 	add.w	r3, r7, #12
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 f840 	bl	8004b5a <_ZNKSt13move_iteratorIPN9DebugInfo13SendMotorDataEEdeEv>
 8004ada:	4603      	mov	r3, r0
 8004adc:	4619      	mov	r1, r3
 8004ade:	4620      	mov	r0, r4
 8004ae0:	f000 f852 	bl	8004b88 <_ZSt10_ConstructIN9DebugInfo13SendMotorDataEJS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8004ae4:	f107 030c 	add.w	r3, r7, #12
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 f825 	bl	8004b38 <_ZNSt13move_iteratorIPN9DebugInfo13SendMotorDataEEppEv>
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	3340      	adds	r3, #64	; 0x40
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	e7dd      	b.n	8004ab2 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPN9DebugInfo13SendMotorDataEES5_EET0_T_S8_S7_+0x10>
	      return __cur;
 8004af6:	697b      	ldr	r3, [r7, #20]
	}
 8004af8:	4618      	mov	r0, r3
 8004afa:	371c      	adds	r7, #28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd90      	pop	{r4, r7, pc}

08004b00 <_ZNK9__gnu_cxx17__normal_iteratorIPKN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <_ZStneIPN9DebugInfo13SendMotorDataEEbRKSt13move_iteratorIT_ES7_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b082      	sub	sp, #8
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8004b20:	6839      	ldr	r1, [r7, #0]
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f849 	bl	8004bba <_ZSteqIPN9DebugInfo13SendMotorDataEEbRKSt13move_iteratorIT_ES7_>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	f083 0301 	eor.w	r3, r3, #1
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	4618      	mov	r0, r3
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <_ZNSt13move_iteratorIPN9DebugInfo13SendMotorDataEEppEv>:
      operator++()
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	601a      	str	r2, [r3, #0]
	return *this;
 8004b4c:	687b      	ldr	r3, [r7, #4]
      }
 8004b4e:	4618      	mov	r0, r3
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <_ZNKSt13move_iteratorIPN9DebugInfo13SendMotorDataEEdeEv>:
      operator*() const
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4618      	mov	r0, r3
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <_ZSt7forwardIN9DebugInfo13SendMotorDataEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <_ZSt10_ConstructIN9DebugInfo13SendMotorDataEJS1_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 8004b88:	b590      	push	{r4, r7, lr}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 8004b92:	6838      	ldr	r0, [r7, #0]
 8004b94:	f7ff ffed 	bl	8004b72 <_ZSt7forwardIN9DebugInfo13SendMotorDataEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004b98:	4604      	mov	r4, r0
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	2040      	movs	r0, #64	; 0x40
 8004ba0:	f7ff f950 	bl	8003e44 <_ZnwjPv>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <_ZSt10_ConstructIN9DebugInfo13SendMotorDataEJS1_EEvPT_DpOT0_+0x2a>
 8004baa:	4621      	mov	r1, r4
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7ff fc49 	bl	8004444 <_ZN9DebugInfo13SendMotorDataC1ERKS0_>
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd90      	pop	{r4, r7, pc}

08004bba <_ZSteqIPN9DebugInfo13SendMotorDataEEbRKSt13move_iteratorIT_ES7_>:
    operator==(const move_iterator<_Iterator>& __x,
 8004bba:	b590      	push	{r4, r7, lr}
 8004bbc:	b083      	sub	sp, #12
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
 8004bc2:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f80e 	bl	8004be6 <_ZNKSt13move_iteratorIPN9DebugInfo13SendMotorDataEE4baseEv>
 8004bca:	4604      	mov	r4, r0
 8004bcc:	6838      	ldr	r0, [r7, #0]
 8004bce:	f000 f80a 	bl	8004be6 <_ZNKSt13move_iteratorIPN9DebugInfo13SendMotorDataEE4baseEv>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	429c      	cmp	r4, r3
 8004bd6:	bf0c      	ite	eq
 8004bd8:	2301      	moveq	r3, #1
 8004bda:	2300      	movne	r3, #0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	4618      	mov	r0, r3
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd90      	pop	{r4, r7, pc}

08004be6 <_ZNKSt13move_iteratorIPN9DebugInfo13SendMotorDataEE4baseEv>:
      base() const
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
	...

08004c00 <_ZN7MathLibC1Ev>:

#include "MathLib.hpp"
#include <vector>
#include "math.h"

MathLib::MathLib() {
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	4a0a      	ldr	r2, [pc, #40]	; (8004c34 <_ZN7MathLibC1Ev+0x34>)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	3304      	adds	r3, #4
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 f9a0 	bl	8004f58 <_ZNSt6vectorIfSaIfEEC1Ev>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	3310      	adds	r3, #16
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 f99b 	bl	8004f58 <_ZNSt6vectorIfSaIfEEC1Ev>
	mSize = 0;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	61da      	str	r2, [r3, #28]
}
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3708      	adds	r7, #8
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	0800ce74 	.word	0x0800ce74

08004c38 <_ZN7MathLibD1Ev>:

MathLib::~MathLib() {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	4a0f      	ldr	r2, [pc, #60]	; (8004c80 <_ZN7MathLibD1Ev+0x48>)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	601a      	str	r2, [r3, #0]
	mSize = 0;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	61da      	str	r2, [r3, #28]
	mSinList.clear();
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3304      	adds	r3, #4
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 f9a9 	bl	8004fa8 <_ZNSt6vectorIfSaIfEE5clearEv>
	mCosList.clear();
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	3310      	adds	r3, #16
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 f9a4 	bl	8004fa8 <_ZNSt6vectorIfSaIfEE5clearEv>
MathLib::~MathLib() {
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	3310      	adds	r3, #16
 8004c64:	4618      	mov	r0, r3
 8004c66:	f000 f984 	bl	8004f72 <_ZNSt6vectorIfSaIfEED1Ev>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 f97f 	bl	8004f72 <_ZNSt6vectorIfSaIfEED1Ev>
}
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4618      	mov	r0, r3
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	0800ce74 	.word	0x0800ce74

08004c84 <_ZN7MathLibD0Ev>:
MathLib::~MathLib() {
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
}
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7ff ffd3 	bl	8004c38 <_ZN7MathLibD1Ev>
 8004c92:	2124      	movs	r1, #36	; 0x24
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f004 fbca 	bl	800942e <_ZdlPvj>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <_ZN7MathLib10setLibSizeEi>:

void MathLib::setLibSize(int pSize){
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
	mSize = pSize;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	61da      	str	r2, [r3, #28]
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <_ZN7MathLib5fInitEi>:

void MathLib::fInit(int pSize){
 8004cc0:	b590      	push	{r4, r7, lr}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
	setLibSize(pSize);
 8004cca:	6839      	ldr	r1, [r7, #0]
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff ffe9 	bl	8004ca4 <_ZN7MathLib10setLibSizeEi>
	if(mSize == 0){
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d100      	bne.n	8004cdc <_ZN7MathLib5fInitEi+0x1c>
		while(1){}//error check
 8004cda:	e7fe      	b.n	8004cda <_ZN7MathLib5fInitEi+0x1a>
	}
	mRadvsSize = mSize / (2*M_PI);//サイズと1radianの比
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fb fc3f 	bl	8000564 <__aeabi_i2d>
 8004ce6:	a310      	add	r3, pc, #64	; (adr r3, 8004d28 <_ZN7MathLib5fInitEi+0x68>)
 8004ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cec:	f7fb fdce 	bl	800088c <__aeabi_ddiv>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	460c      	mov	r4, r1
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	4621      	mov	r1, r4
 8004cf8:	f7fb ff76 	bl	8000be8 <__aeabi_d2f>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	621a      	str	r2, [r3, #32]

	fSinVectorInit(&mSinList);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	3304      	adds	r3, #4
 8004d06:	4619      	mov	r1, r3
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f811 	bl	8004d30 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE>
	fCosVectorInit(&mCosList);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3310      	adds	r3, #16
 8004d12:	4619      	mov	r1, r3
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f85b 	bl	8004dd0 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE>
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd90      	pop	{r4, r7, pc}
 8004d22:	bf00      	nop
 8004d24:	f3af 8000 	nop.w
 8004d28:	54442d18 	.word	0x54442d18
 8004d2c:	401921fb 	.word	0x401921fb

08004d30 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE>:

int MathLib::getLibSize(void){return mSize;}

void MathLib::fSinVectorInit(std::vector<float> *pVector){
 8004d30:	b5b0      	push	{r4, r5, r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
	for(int i=0;i<mSize;i++){
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60fb      	str	r3, [r7, #12]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	da39      	bge.n	8004dbc <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE+0x8c>
		float fsinval = sin(i*2*M_PI/(float)mSize);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7fb fc09 	bl	8000564 <__aeabi_i2d>
 8004d52:	a31d      	add	r3, pc, #116	; (adr r3, 8004dc8 <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE+0x98>)
 8004d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d58:	f7fb fc6e 	bl	8000638 <__aeabi_dmul>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	460c      	mov	r4, r1
 8004d60:	4625      	mov	r5, r4
 8004d62:	461c      	mov	r4, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	ee07 3a90 	vmov	s15, r3
 8004d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d70:	ee17 0a90 	vmov	r0, s15
 8004d74:	f7fb fc08 	bl	8000588 <__aeabi_f2d>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4620      	mov	r0, r4
 8004d7e:	4629      	mov	r1, r5
 8004d80:	f7fb fd84 	bl	800088c <__aeabi_ddiv>
 8004d84:	4603      	mov	r3, r0
 8004d86:	460c      	mov	r4, r1
 8004d88:	ec44 3b17 	vmov	d7, r3, r4
 8004d8c:	eeb0 0a47 	vmov.f32	s0, s14
 8004d90:	eef0 0a67 	vmov.f32	s1, s15
 8004d94:	f004 fe80 	bl	8009a98 <sin>
 8004d98:	ec54 3b10 	vmov	r3, r4, d0
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	4621      	mov	r1, r4
 8004da0:	f7fb ff22 	bl	8000be8 <__aeabi_d2f>
 8004da4:	4603      	mov	r3, r0
 8004da6:	60bb      	str	r3, [r7, #8]
		pVector->push_back(fsinval);
 8004da8:	f107 0308 	add.w	r3, r7, #8
 8004dac:	4619      	mov	r1, r3
 8004dae:	6838      	ldr	r0, [r7, #0]
 8004db0:	f000 f908 	bl	8004fc4 <_ZNSt6vectorIfSaIfEE9push_backERKf>
	for(int i=0;i<mSize;i++){
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	3301      	adds	r3, #1
 8004db8:	60fb      	str	r3, [r7, #12]
 8004dba:	e7c0      	b.n	8004d3e <_ZN7MathLib14fSinVectorInitEPSt6vectorIfSaIfEE+0xe>
	}
}
 8004dbc:	bf00      	nop
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bdb0      	pop	{r4, r5, r7, pc}
 8004dc4:	f3af 8000 	nop.w
 8004dc8:	54442d18 	.word	0x54442d18
 8004dcc:	400921fb 	.word	0x400921fb

08004dd0 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE>:

void MathLib::fCosVectorInit(std::vector<float> *pVector){
 8004dd0:	b5b0      	push	{r4, r5, r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
	for(int i=0;i<mSize;i++){
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	da39      	bge.n	8004e5c <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE+0x8c>
		float fcosval = cos(i*2*M_PI/(float)mSize);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7fb fbb9 	bl	8000564 <__aeabi_i2d>
 8004df2:	a31d      	add	r3, pc, #116	; (adr r3, 8004e68 <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE+0x98>)
 8004df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df8:	f7fb fc1e 	bl	8000638 <__aeabi_dmul>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	460c      	mov	r4, r1
 8004e00:	4625      	mov	r5, r4
 8004e02:	461c      	mov	r4, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	ee07 3a90 	vmov	s15, r3
 8004e0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e10:	ee17 0a90 	vmov	r0, s15
 8004e14:	f7fb fbb8 	bl	8000588 <__aeabi_f2d>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	4629      	mov	r1, r5
 8004e20:	f7fb fd34 	bl	800088c <__aeabi_ddiv>
 8004e24:	4603      	mov	r3, r0
 8004e26:	460c      	mov	r4, r1
 8004e28:	ec44 3b17 	vmov	d7, r3, r4
 8004e2c:	eeb0 0a47 	vmov.f32	s0, s14
 8004e30:	eef0 0a67 	vmov.f32	s1, s15
 8004e34:	f004 fce4 	bl	8009800 <cos>
 8004e38:	ec54 3b10 	vmov	r3, r4, d0
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	4621      	mov	r1, r4
 8004e40:	f7fb fed2 	bl	8000be8 <__aeabi_d2f>
 8004e44:	4603      	mov	r3, r0
 8004e46:	60bb      	str	r3, [r7, #8]
		pVector->push_back(fcosval);
 8004e48:	f107 0308 	add.w	r3, r7, #8
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	6838      	ldr	r0, [r7, #0]
 8004e50:	f000 f8b8 	bl	8004fc4 <_ZNSt6vectorIfSaIfEE9push_backERKf>
	for(int i=0;i<mSize;i++){
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	3301      	adds	r3, #1
 8004e58:	60fb      	str	r3, [r7, #12]
 8004e5a:	e7c0      	b.n	8004dde <_ZN7MathLib14fCosVectorInitEPSt6vectorIfSaIfEE+0xe>
	}
}
 8004e5c:	bf00      	nop
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bdb0      	pop	{r4, r5, r7, pc}
 8004e64:	f3af 8000 	nop.w
 8004e68:	54442d18 	.word	0x54442d18
 8004e6c:	400921fb 	.word	0x400921fb

08004e70 <_ZN7MathLib10getSinListEv>:

std::vector<float> MathLib::getSinList(void){
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
	return mSinList;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	4619      	mov	r1, r3
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f8c4 	bl	800500e <_ZNSt6vectorIfSaIfEEC1ERKS1_>
}
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <_ZN7MathLib10getCosListEv>:

std::vector<float> MathLib::getCosList(void){
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b082      	sub	sp, #8
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	6039      	str	r1, [r7, #0]
	return mCosList;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	3310      	adds	r3, #16
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f8b5 	bl	800500e <_ZNSt6vectorIfSaIfEEC1ERKS1_>
}
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	0000      	movs	r0, r0
	...

08004eb0 <_ZN7MathLib14radToSizeCountEf>:

int MathLib::radToSizeCount(float pRadian){//0~2piのラジアンを、0~mSizeに変換する
 8004eb0:	b590      	push	{r4, r7, lr}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	ed87 0a00 	vstr	s0, [r7]
	pRadian = pRadian + (2*M_PI);
 8004ebc:	6838      	ldr	r0, [r7, #0]
 8004ebe:	f7fb fb63 	bl	8000588 <__aeabi_f2d>
 8004ec2:	a317      	add	r3, pc, #92	; (adr r3, 8004f20 <_ZN7MathLib14radToSizeCountEf+0x70>)
 8004ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec8:	f7fb fa00 	bl	80002cc <__adddf3>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	460c      	mov	r4, r1
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	4621      	mov	r1, r4
 8004ed4:	f7fb fe88 	bl	8000be8 <__aeabi_d2f>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	603b      	str	r3, [r7, #0]
	pRadian = fmodl(pRadian, (2*M_PI));
 8004edc:	6838      	ldr	r0, [r7, #0]
 8004ede:	f7fb fb53 	bl	8000588 <__aeabi_f2d>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	460c      	mov	r4, r1
 8004ee6:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8004f20 <_ZN7MathLib14radToSizeCountEf+0x70>
 8004eea:	ec44 3b10 	vmov	d0, r3, r4
 8004eee:	f004 fab3 	bl	8009458 <fmodl>
 8004ef2:	ec54 3b10 	vmov	r3, r4, d0
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	4621      	mov	r1, r4
 8004efa:	f7fb fe75 	bl	8000be8 <__aeabi_d2f>
 8004efe:	4603      	mov	r3, r0
 8004f00:	603b      	str	r3, [r7, #0]
	return pRadian * mRadvsSize;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	ed93 7a08 	vldr	s14, [r3, #32]
 8004f08:	edd7 7a00 	vldr	s15, [r7]
 8004f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f14:	ee17 3a90 	vmov	r3, s15
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd90      	pop	{r4, r7, pc}
 8004f20:	54442d18 	.word	0x54442d18
 8004f24:	401921fb 	.word	0x401921fb

08004f28 <_ZN7MathLib14sizeCountToRadEi>:

float MathLib::sizeCountToRad(int pSizecount){
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
	return (float)pSizecount / mRadvsSize;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	ee07 3a90 	vmov	s15, r3
 8004f38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	edd3 7a08 	vldr	s15, [r3, #32]
 8004f42:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004f46:	eef0 7a66 	vmov.f32	s15, s13
}
 8004f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <_ZNSt6vectorIfSaIfEEC1Ev>:
      vector()
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 f89c 	bl	80050a0 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <_ZNSt6vectorIfSaIfEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8004f72:	b5b0      	push	{r4, r5, r7, lr}
 8004f74:	b082      	sub	sp, #8
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681c      	ldr	r4, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 f8b2 	bl	80050ee <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8004f8a:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	4629      	mov	r1, r5
 8004f90:	4620      	mov	r0, r4
 8004f92:	f000 f8b7 	bl	8005104 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 f88e 	bl	80050ba <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bdb0      	pop	{r4, r5, r7, pc}

08004fa8 <_ZNSt6vectorIfSaIfEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f8b2 	bl	8005120 <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>
 8004fbc:	bf00      	nop
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <_ZNSt6vectorIfSaIfEE9push_backERKf>:
      push_back(const value_type& __x)
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d00c      	beq.n	8004ff4 <_ZNSt6vectorIfSaIfEE9push_backERKf+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	f000 f8bf 	bl	8005166 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	1d1a      	adds	r2, r3, #4
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	605a      	str	r2, [r3, #4]
      }
 8004ff2:	e008      	b.n	8005006 <_ZNSt6vectorIfSaIfEE9push_backERKf+0x42>
	  _M_realloc_insert(end(), __x);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f8c9 	bl	800518c <_ZNSt6vectorIfSaIfEE3endEv>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	4619      	mov	r1, r3
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f8d5 	bl	80051b0 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>
      }
 8005006:	bf00      	nop
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 800500e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005010:	b085      	sub	sp, #20
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
 8005016:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8005018:	687c      	ldr	r4, [r7, #4]
 800501a:	6838      	ldr	r0, [r7, #0]
 800501c:	f000 f954 	bl	80052c8 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8005020:	4605      	mov	r5, r0
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	4618      	mov	r0, r3
 8005026:	f000 f96e 	bl	8005306 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800502a:	4602      	mov	r2, r0
 800502c:	f107 030c 	add.w	r3, r7, #12
 8005030:	4611      	mov	r1, r2
 8005032:	4618      	mov	r0, r3
 8005034:	f000 f959 	bl	80052ea <_ZN9__gnu_cxx14__alloc_traitsISaIfEE17_S_select_on_copyERKS1_>
 8005038:	f107 030c 	add.w	r3, r7, #12
 800503c:	461a      	mov	r2, r3
 800503e:	4629      	mov	r1, r5
 8005040:	4620      	mov	r0, r4
 8005042:	f000 f977 	bl	8005334 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 8005046:	f107 030c 	add.w	r3, r7, #12
 800504a:	4618      	mov	r0, r3
 800504c:	f000 f966 	bl	800531c <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8005050:	6838      	ldr	r0, [r7, #0]
 8005052:	f000 f983 	bl	800535c <_ZNKSt6vectorIfSaIfEE5beginEv>
 8005056:	4605      	mov	r5, r0
 8005058:	6838      	ldr	r0, [r7, #0]
 800505a:	f000 f993 	bl	8005384 <_ZNKSt6vectorIfSaIfEE3endEv>
 800505e:	4606      	mov	r6, r0
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4618      	mov	r0, r3
 8005068:	f000 f841 	bl	80050ee <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800506c:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800506e:	4622      	mov	r2, r4
 8005070:	4631      	mov	r1, r6
 8005072:	4628      	mov	r0, r5
 8005074:	f000 f99a 	bl	80053ac <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 8005078:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	605a      	str	r2, [r3, #4]
      }
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4618      	mov	r0, r3
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005088 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f943 	bl	800531c <_ZNSaIfED1Ev>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4618      	mov	r0, r3
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      _Vector_base()
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 f98f 	bl	80053ce <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4618      	mov	r0, r3
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b082      	sub	sp, #8
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6819      	ldr	r1, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 80050ca:	461a      	mov	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80050d4:	461a      	mov	r2, r3
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f98e 	bl	80053f8 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
		      - this->_M_impl._M_start); }
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4618      	mov	r0, r3
 80050e0:	f7ff ffd2 	bl	8005088 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4618      	mov	r0, r3
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80050ee:	b480      	push	{r7}
 80050f0:	b083      	sub	sp, #12
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4618      	mov	r0, r3
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8005110:	68b9      	ldr	r1, [r7, #8]
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f000 f983 	bl	800541e <_ZSt8_DestroyIPfEvT_S1_>
    }
 8005118:	bf00      	nop
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8005120:	b590      	push	{r4, r7, lr}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685c      	ldr	r4, [r3, #4]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4618      	mov	r0, r3
 8005132:	f7ff ffdc 	bl	80050ee <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8005136:	4603      	mov	r3, r0
 8005138:	461a      	mov	r2, r3
 800513a:	4621      	mov	r1, r4
 800513c:	6838      	ldr	r0, [r7, #0]
 800513e:	f7ff ffe1 	bl	8005104 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	605a      	str	r2, [r3, #4]
      }
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	bd90      	pop	{r4, r7, pc}

08005150 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4618      	mov	r0, r3
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8005166:	b580      	push	{r7, lr}
 8005168:	b084      	sub	sp, #16
 800516a:	af00      	add	r7, sp, #0
 800516c:	60f8      	str	r0, [r7, #12]
 800516e:	60b9      	str	r1, [r7, #8]
 8005170:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff ffec 	bl	8005150 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8005178:	4603      	mov	r3, r0
 800517a:	461a      	mov	r2, r3
 800517c:	68b9      	ldr	r1, [r7, #8]
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 f95a 	bl	8005438 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_>
 8005184:	bf00      	nop
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <_ZNSt6vectorIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	1d1a      	adds	r2, r3, #4
 8005198:	f107 030c 	add.w	r3, r7, #12
 800519c:	4611      	mov	r1, r2
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 f962 	bl	8005468 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	4618      	mov	r0, r3
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
	...

080051b0 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80051b0:	b5b0      	push	{r4, r5, r7, lr}
 80051b2:	b08a      	sub	sp, #40	; 0x28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
      const size_type __len =
 80051bc:	4a41      	ldr	r2, [pc, #260]	; (80052c4 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x114>)
 80051be:	2101      	movs	r1, #1
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f000 f961 	bl	8005488 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 80051c6:	6278      	str	r0, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 f9a5 	bl	8005518 <_ZNSt6vectorIfSaIfEE5beginEv>
 80051ce:	4603      	mov	r3, r0
 80051d0:	617b      	str	r3, [r7, #20]
 80051d2:	f107 0214 	add.w	r2, r7, #20
 80051d6:	f107 0308 	add.w	r3, r7, #8
 80051da:	4611      	mov	r1, r2
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 f9ab 	bl	8005538 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80051e2:	4603      	mov	r3, r0
 80051e4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 f9ba 	bl	8005564 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 80051f0:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 80051f6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	18d5      	adds	r5, r2, r3
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7ff ffa5 	bl	8005150 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8005206:	4603      	mov	r3, r0
 8005208:	461a      	mov	r2, r3
 800520a:	4629      	mov	r1, r5
 800520c:	4620      	mov	r0, r4
 800520e:	f7ff ffaa 	bl	8005166 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
	  __new_finish = pointer();
 8005212:	2300      	movs	r3, #0
 8005214:	61bb      	str	r3, [r7, #24]
	    (this->_M_impl._M_start, __position.base(),
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681c      	ldr	r4, [r3, #0]
 800521a:	f107 0308 	add.w	r3, r7, #8
 800521e:	4618      	mov	r0, r3
 8005220:	f000 f9b4 	bl	800558c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8005224:	4603      	mov	r3, r0
 8005226:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4618      	mov	r0, r3
 800522c:	f7ff ff5f 	bl	80050ee <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8005230:	4603      	mov	r3, r0
	  __new_finish
 8005232:	69fa      	ldr	r2, [r7, #28]
 8005234:	4629      	mov	r1, r5
 8005236:	4620      	mov	r0, r4
 8005238:	f000 f9b3 	bl	80055a2 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 800523c:	61b8      	str	r0, [r7, #24]
	  ++__new_finish;
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	3304      	adds	r3, #4
 8005242:	61bb      	str	r3, [r7, #24]
	    (__position.base(), this->_M_impl._M_finish,
 8005244:	f107 0308 	add.w	r3, r7, #8
 8005248:	4618      	mov	r0, r3
 800524a:	f000 f99f 	bl	800558c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800524e:	4603      	mov	r3, r0
 8005250:	681c      	ldr	r4, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff ff48 	bl	80050ee <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800525e:	4603      	mov	r3, r0
	  __new_finish
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	4629      	mov	r1, r5
 8005264:	4620      	mov	r0, r4
 8005266:	f000 f99c 	bl	80055a2 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 800526a:	61b8      	str	r0, [r7, #24]
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681c      	ldr	r4, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4618      	mov	r0, r3
 8005278:	f7ff ff39 	bl	80050ee <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800527c:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800527e:	461a      	mov	r2, r3
 8005280:	4629      	mov	r1, r5
 8005282:	4620      	mov	r0, r4
 8005284:	f7ff ff3e 	bl	8005104 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8005292:	461a      	mov	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 800529c:	461a      	mov	r2, r3
 800529e:	f000 f8ab 	bl	80053f8 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	69fa      	ldr	r2, [r7, #28]
 80052a6:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	69fa      	ldr	r2, [r7, #28]
 80052b4:	441a      	add	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	609a      	str	r2, [r3, #8]
    }
 80052ba:	bf00      	nop
 80052bc:	3728      	adds	r7, #40	; 0x28
 80052be:	46bd      	mov	sp, r7
 80052c0:	bdb0      	pop	{r4, r5, r7, pc}
 80052c2:	bf00      	nop
 80052c4:	0800cd9c 	.word	0x0800cd9c

080052c8 <_ZNKSt6vectorIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	461a      	mov	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	109b      	asrs	r3, r3, #2
 80052de:	4618      	mov	r0, r3
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <_ZN9__gnu_cxx14__alloc_traitsISaIfEE17_S_select_on_copyERKS1_>:
    static _Alloc _S_select_on_copy(const _Alloc& __a)
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b082      	sub	sp, #8
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
 80052f2:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6839      	ldr	r1, [r7, #0]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f000 f96b 	bl	80055d4 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8005306:	b480      	push	{r7}
 8005308:	b083      	sub	sp, #12
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4618      	mov	r0, r3
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <_ZNSaIfED1Ev>:
      ~allocator() throw() { }
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 f970 	bl	800560a <_ZN9__gnu_cxx13new_allocatorIfED1Ev>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4618      	mov	r0, r3
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6879      	ldr	r1, [r7, #4]
 8005344:	4618      	mov	r0, r3
 8005346:	f000 f96b 	bl	8005620 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 800534a:	68b9      	ldr	r1, [r7, #8]
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f000 f97e 	bl	800564e <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	60fb      	str	r3, [r7, #12]
 800536a:	f107 020c 	add.w	r2, r7, #12
 800536e:	f107 0308 	add.w	r3, r7, #8
 8005372:	4611      	mov	r1, r2
 8005374:	4618      	mov	r0, r3
 8005376:	f000 f985 	bl	8005684 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	4618      	mov	r0, r3
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	60fb      	str	r3, [r7, #12]
 8005392:	f107 020c 	add.w	r2, r7, #12
 8005396:	f107 0308 	add.w	r3, r7, #8
 800539a:	4611      	mov	r1, r2
 800539c:	4618      	mov	r0, r3
 800539e:	f000 f971 	bl	8005684 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	4618      	mov	r0, r3
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	68b9      	ldr	r1, [r7, #8]
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 f970 	bl	80056a4 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 80053c4:	4603      	mov	r3, r0
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl()
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b082      	sub	sp, #8
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f976 	bl	80056c8 <_ZNSaIfEC1Ev>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	605a      	str	r2, [r3, #4]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	609a      	str	r2, [r3, #8]
	{ }
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4618      	mov	r0, r3
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
	if (__p)
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d005      	beq.n	8005416 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	68b9      	ldr	r1, [r7, #8]
 8005410:	4618      	mov	r0, r3
 8005412:	f000 f965 	bl	80056e0 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 8005416:	bf00      	nop
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <_ZSt8_DestroyIPfEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800541e:	b580      	push	{r7, lr}
 8005420:	b082      	sub	sp, #8
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8005428:	6839      	ldr	r1, [r7, #0]
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f967 	bl	80056fe <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 8005430:	bf00      	nop
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8005438:	b590      	push	{r4, r7, lr}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f7ff fe83 	bl	8005150 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800544a:	4603      	mov	r3, r0
 800544c:	681c      	ldr	r4, [r3, #0]
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	4619      	mov	r1, r3
 8005452:	2004      	movs	r0, #4
 8005454:	f7fe fcf6 	bl	8003e44 <_ZnwjPv>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d000      	beq.n	8005460 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_+0x28>
 800545e:	601c      	str	r4, [r3, #0]
 8005460:	bf00      	nop
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	bd90      	pop	{r4, r7, pc}

08005468 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4618      	mov	r0, r3
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8005488:	b590      	push	{r4, r7, lr}
 800548a:	b087      	sub	sp, #28
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 f93d 	bl	8005714 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 800549a:	4604      	mov	r4, r0
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f7ff ff13 	bl	80052c8 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80054a2:	4603      	mov	r3, r0
 80054a4:	1ae2      	subs	r2, r4, r3
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	bf34      	ite	cc
 80054ac:	2301      	movcc	r3, #1
 80054ae:	2300      	movcs	r3, #0
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f003 ffd5 	bl	8009468 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f7ff ff02 	bl	80052c8 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80054c4:	4604      	mov	r4, r0
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f7ff fefe 	bl	80052c8 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80054cc:	4603      	mov	r3, r0
 80054ce:	613b      	str	r3, [r7, #16]
 80054d0:	f107 0208 	add.w	r2, r7, #8
 80054d4:	f107 0310 	add.w	r3, r7, #16
 80054d8:	4611      	mov	r1, r2
 80054da:	4618      	mov	r0, r3
 80054dc:	f7ff f999 	bl	8004812 <_ZSt3maxIjERKT_S2_S2_>
 80054e0:	4603      	mov	r3, r0
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4423      	add	r3, r4
 80054e6:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f7ff feed 	bl	80052c8 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80054ee:	4602      	mov	r2, r0
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d306      	bcc.n	8005504 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x7c>
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 f90c 	bl	8005714 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 80054fc:	4602      	mov	r2, r0
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	4293      	cmp	r3, r2
 8005502:	d904      	bls.n	800550e <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x86>
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f000 f905 	bl	8005714 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 800550a:	4603      	mov	r3, r0
 800550c:	e000      	b.n	8005510 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x88>
 800550e:	697b      	ldr	r3, [r7, #20]
      }
 8005510:	4618      	mov	r0, r3
 8005512:	371c      	adds	r7, #28
 8005514:	46bd      	mov	sp, r7
 8005516:	bd90      	pop	{r4, r7, pc}

08005518 <_ZNSt6vectorIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	f107 030c 	add.w	r3, r7, #12
 8005526:	4611      	mov	r1, r2
 8005528:	4618      	mov	r0, r3
 800552a:	f7ff ff9d 	bl	8005468 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005538:	b590      	push	{r4, r7, lr}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f822 	bl	800558c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8005548:	4603      	mov	r3, r0
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	461c      	mov	r4, r3
 800554e:	6838      	ldr	r0, [r7, #0]
 8005550:	f000 f81c 	bl	800558c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8005554:	4603      	mov	r3, r0
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	1ae3      	subs	r3, r4, r3
 800555a:	109b      	asrs	r3, r3, #2
 800555c:	4618      	mov	r0, r3
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	bd90      	pop	{r4, r7, pc}

08005564 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d006      	beq.n	8005582 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6839      	ldr	r1, [r7, #0]
 8005578:	4618      	mov	r0, r3
 800557a:	f000 f8dc 	bl	8005736 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 800557e:	4603      	mov	r3, r0
 8005580:	e000      	b.n	8005584 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 8005582:	2300      	movs	r3, #0
      }
 8005584:	4618      	mov	r0, r3
 8005586:	3708      	adds	r7, #8
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4618      	mov	r0, r3
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80055a2:	b590      	push	{r4, r7, lr}
 80055a4:	b085      	sub	sp, #20
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	60f8      	str	r0, [r7, #12]
 80055aa:	60b9      	str	r1, [r7, #8]
 80055ac:	607a      	str	r2, [r7, #4]
 80055ae:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 f8cf 	bl	8005754 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 80055b6:	4604      	mov	r4, r0
 80055b8:	68b8      	ldr	r0, [r7, #8]
 80055ba:	f000 f8cb 	bl	8005754 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 80055be:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	4620      	mov	r0, r4
 80055c6:	f000 f8d4 	bl	8005772 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>
 80055ca:	4603      	mov	r3, r0
    }
 80055cc:	4618      	mov	r0, r3
 80055ce:	3714      	adds	r7, #20
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd90      	pop	{r4, r7, pc}

080055d4 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 80055de:	6839      	ldr	r1, [r7, #0]
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f804 	bl	80055ee <_ZNSaIfEC1ERKS_>
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) throw()
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b082      	sub	sp, #8
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
 80055f6:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80055f8:	6839      	ldr	r1, [r7, #0]
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f8ca 	bl	8005794 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4618      	mov	r0, r3
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <_ZN9__gnu_cxx13new_allocatorIfED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4618      	mov	r0, r3
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 800562a:	6839      	ldr	r1, [r7, #0]
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7ff ffde 	bl	80055ee <_ZNSaIfEC1ERKS_>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	605a      	str	r2, [r3, #4]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	609a      	str	r2, [r3, #8]
	{ }
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800564e:	b580      	push	{r7, lr}
 8005650:	b082      	sub	sp, #8
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8005658:	6839      	ldr	r1, [r7, #0]
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7ff ff82 	bl	8005564 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8005660:	4602      	mov	r2, r0
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	441a      	add	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	609a      	str	r2, [r3, #8]
      }
 800567c:	bf00      	nop
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	601a      	str	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4618      	mov	r0, r3
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80056b0:	2301      	movs	r3, #1
 80056b2:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	68b9      	ldr	r1, [r7, #8]
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f000 f877 	bl	80057ac <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 80056be:	4603      	mov	r3, r0
    }
 80056c0:	4618      	mov	r0, r3
 80056c2:	3718      	adds	r7, #24
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <_ZNSaIfEC1Ev>:
      allocator() throw() { }
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f87b 	bl	80057cc <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4618      	mov	r0, r3
 80056da:	3708      	adds	r7, #8
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	68b9      	ldr	r1, [r7, #8]
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 f876 	bl	80057e2 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
 80056f6:	bf00      	nop
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80056fe:	b480      	push	{r7}
 8005700:	b083      	sub	sp, #12
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
 8005706:	6039      	str	r1, [r7, #0]
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4618      	mov	r0, r3
 8005720:	f7ff fdf1 	bl	8005306 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8005724:	4603      	mov	r3, r0
 8005726:	4618      	mov	r0, r3
 8005728:	f000 f868 	bl	80057fc <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 800572c:	4603      	mov	r3, r0
 800572e:	4618      	mov	r0, r3
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8005736:	b580      	push	{r7, lr}
 8005738:	b082      	sub	sp, #8
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
 800573e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005740:	2200      	movs	r2, #0
 8005742:	6839      	ldr	r1, [r7, #0]
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f865 	bl	8005814 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 800574a:	4603      	mov	r3, r0
 800574c:	4618      	mov	r0, r3
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800575c:	f107 030c 	add.w	r3, r7, #12
 8005760:	6879      	ldr	r1, [r7, #4]
 8005762:	4618      	mov	r0, r3
 8005764:	f000 f874 	bl	8005850 <_ZNSt13move_iteratorIPfEC1ES0_>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8005772:	b580      	push	{r7, lr}
 8005774:	b084      	sub	sp, #16
 8005776:	af00      	add	r7, sp, #0
 8005778:	60f8      	str	r0, [r7, #12]
 800577a:	60b9      	str	r1, [r7, #8]
 800577c:	607a      	str	r2, [r7, #4]
 800577e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	68b9      	ldr	r1, [r7, #8]
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f000 f872 	bl	800586e <_ZSt18uninitialized_copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>
 800578a:	4603      	mov	r3, r0
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4618      	mov	r0, r3
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	68b9      	ldr	r1, [r7, #8]
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 f868 	bl	8005892 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 80057c2:	4603      	mov	r3, r0
 80057c4:	4618      	mov	r0, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4618      	mov	r0, r3
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
      deallocate(pointer __p, size_type)
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b084      	sub	sp, #16
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	60f8      	str	r0, [r7, #12]
 80057ea:	60b9      	str	r1, [r7, #8]
 80057ec:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80057ee:	68b8      	ldr	r0, [r7, #8]
 80057f0:	f003 fe1b 	bl	800942a <_ZdlPv>
      }
 80057f4:	bf00      	nop
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f85c 	bl	80058c2 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 800580a:	4603      	mov	r3, r0
 800580c:	4618      	mov	r0, r3
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 f84e 	bl	80058c2 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 8005826:	4602      	mov	r2, r0
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	4293      	cmp	r3, r2
 800582c:	bf8c      	ite	hi
 800582e:	2301      	movhi	r3, #1
 8005830:	2300      	movls	r3, #0
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	d001      	beq.n	800583c <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005838:	f003 fe10 	bl	800945c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4618      	mov	r0, r3
 8005842:	f003 fdf6 	bl	8009432 <_Znwj>
 8005846:	4603      	mov	r3, r0
      }
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <_ZNSt13move_iteratorIPfEC1ES0_>:
      move_iterator(iterator_type __i)
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4618      	mov	r0, r3
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <_ZSt18uninitialized_copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800586e:	b580      	push	{r7, lr}
 8005870:	b086      	sub	sp, #24
 8005872:	af00      	add	r7, sp, #0
 8005874:	60f8      	str	r0, [r7, #12]
 8005876:	60b9      	str	r1, [r7, #8]
 8005878:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800587a:	2301      	movs	r3, #1
 800587c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	68b9      	ldr	r1, [r7, #8]
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f000 f829 	bl	80058da <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPfES3_EET0_T_S6_S5_>
 8005888:	4603      	mov	r3, r0
    }
 800588a:	4618      	mov	r0, r3
 800588c:	3718      	adds	r7, #24
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8005892:	b590      	push	{r4, r7, lr}
 8005894:	b085      	sub	sp, #20
 8005896:	af00      	add	r7, sp, #0
 8005898:	60f8      	str	r0, [r7, #12]
 800589a:	60b9      	str	r1, [r7, #8]
 800589c:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f000 f82b 	bl	80058fa <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 80058a4:	4604      	mov	r4, r0
 80058a6:	68b8      	ldr	r0, [r7, #8]
 80058a8:	f000 f827 	bl	80058fa <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 80058ac:	4603      	mov	r3, r0
	       __result));
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	4619      	mov	r1, r3
 80058b2:	4620      	mov	r0, r4
 80058b4:	f000 f82c 	bl	8005910 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 80058b8:	4603      	mov	r3, r0
    }
 80058ba:	4618      	mov	r0, r3
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd90      	pop	{r4, r7, pc}

080058c2 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80058c2:	b480      	push	{r7}
 80058c4:	b083      	sub	sp, #12
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80058ca:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80058ce:	4618      	mov	r0, r3
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPfES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80058da:	b580      	push	{r7, lr}
 80058dc:	b084      	sub	sp, #16
 80058de:	af00      	add	r7, sp, #0
 80058e0:	60f8      	str	r0, [r7, #12]
 80058e2:	60b9      	str	r1, [r7, #8]
 80058e4:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	68b9      	ldr	r1, [r7, #8]
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f000 f82c 	bl	8005948 <_ZSt4copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>
 80058f0:	4603      	mov	r3, r0
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 80058fa:	b480      	push	{r7}
 80058fc:	b083      	sub	sp, #12
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4618      	mov	r0, r3
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8005910:	b5b0      	push	{r4, r5, r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 f82b 	bl	8005978 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8005922:	4604      	mov	r4, r0
 8005924:	68b8      	ldr	r0, [r7, #8]
 8005926:	f000 f827 	bl	8005978 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800592a:	4605      	mov	r5, r0
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f831 	bl	8005994 <_ZSt12__niter_baseIPfET_S1_>
 8005932:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8005934:	461a      	mov	r2, r3
 8005936:	4629      	mov	r1, r5
 8005938:	4620      	mov	r0, r4
 800593a:	f000 f836 	bl	80059aa <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 800593e:	4603      	mov	r3, r0
    }
 8005940:	4618      	mov	r0, r3
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bdb0      	pop	{r4, r5, r7, pc}

08005948 <_ZSt4copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8005948:	b590      	push	{r4, r7, lr}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 f83a 	bl	80059ce <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800595a:	4604      	mov	r4, r0
 800595c:	68b8      	ldr	r0, [r7, #8]
 800595e:	f000 f836 	bl	80059ce <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8005962:	4603      	mov	r3, r0
	       __result));
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	4619      	mov	r1, r3
 8005968:	4620      	mov	r0, r4
 800596a:	f000 f841 	bl	80059f0 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>
 800596e:	4603      	mov	r3, r0
    }
 8005970:	4618      	mov	r0, r3
 8005972:	3714      	adds	r7, #20
 8005974:	46bd      	mov	sp, r7
 8005976:	bd90      	pop	{r4, r7, pc}

08005978 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8005980:	1d3b      	adds	r3, r7, #4
 8005982:	4618      	mov	r0, r3
 8005984:	f000 f850 	bl	8005a28 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 8005988:	4603      	mov	r3, r0
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4618      	mov	r0, r3
 800598e:	3708      	adds	r7, #8
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4618      	mov	r0, r3
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b086      	sub	sp, #24
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	60f8      	str	r0, [r7, #12]
 80059b2:	60b9      	str	r1, [r7, #8]
 80059b4:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 80059b6:	2301      	movs	r3, #1
 80059b8:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	68b9      	ldr	r1, [r7, #8]
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f000 f83d 	bl	8005a3e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 80059c4:	4603      	mov	r3, r0
    }
 80059c6:	4618      	mov	r0, r3
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b082      	sub	sp, #8
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 80059d6:	1d3b      	adds	r3, r7, #4
 80059d8:	4618      	mov	r0, r3
 80059da:	f000 f84d 	bl	8005a78 <_ZNKSt13move_iteratorIPfE4baseEv>
 80059de:	4603      	mov	r3, r0
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 f855 	bl	8005a90 <_ZSt12__miter_baseIPfET_S1_>
 80059e6:	4603      	mov	r3, r0
 80059e8:	4618      	mov	r0, r3
 80059ea:	3708      	adds	r7, #8
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80059f0:	b5b0      	push	{r4, r5, r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f7ff ffc9 	bl	8005994 <_ZSt12__niter_baseIPfET_S1_>
 8005a02:	4604      	mov	r4, r0
 8005a04:	68b8      	ldr	r0, [r7, #8]
 8005a06:	f7ff ffc5 	bl	8005994 <_ZSt12__niter_baseIPfET_S1_>
 8005a0a:	4605      	mov	r5, r0
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7ff ffc1 	bl	8005994 <_ZSt12__niter_baseIPfET_S1_>
 8005a12:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8005a14:	461a      	mov	r2, r3
 8005a16:	4629      	mov	r1, r5
 8005a18:	4620      	mov	r0, r4
 8005a1a:	f000 f844 	bl	8005aa6 <_ZSt13__copy_move_aILb1EPfS0_ET1_T0_S2_S1_>
 8005a1e:	4603      	mov	r3, r0
    }
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bdb0      	pop	{r4, r5, r7, pc}

08005a28 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4618      	mov	r0, r3
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b086      	sub	sp, #24
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	60f8      	str	r0, [r7, #12]
 8005a46:	60b9      	str	r1, [r7, #8]
 8005a48:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	109b      	asrs	r3, r3, #2
 8005a52:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d006      	beq.n	8005a68 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	461a      	mov	r2, r3
 8005a60:	68f9      	ldr	r1, [r7, #12]
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f005 f8eb 	bl	800ac3e <memmove>
	  return __result + _Num;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	4413      	add	r3, r2
	}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3718      	adds	r7, #24
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <_ZNKSt13move_iteratorIPfE4baseEv>:
      base() const
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4618      	mov	r0, r3
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <_ZSt12__miter_baseIPfET_S1_>:
    __miter_base(_Iterator __it)
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <_ZSt13__copy_move_aILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b086      	sub	sp, #24
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	60f8      	str	r0, [r7, #12]
 8005aae:	60b9      	str	r1, [r7, #8]
 8005ab0:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	68b9      	ldr	r1, [r7, #8]
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f000 f805 	bl	8005aca <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8005ac0:	4603      	mov	r3, r0
    }
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3718      	adds	r7, #24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b086      	sub	sp, #24
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	60f8      	str	r0, [r7, #12]
 8005ad2:	60b9      	str	r1, [r7, #8]
 8005ad4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	109b      	asrs	r3, r3, #2
 8005ade:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d006      	beq.n	8005af4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	461a      	mov	r2, r3
 8005aec:	68f9      	ldr	r1, [r7, #12]
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f005 f8a5 	bl	800ac3e <memmove>
	  return __result + _Num;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	4413      	add	r3, r2
	}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3718      	adds	r7, #24
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <_ZN9MotorInfoC1Ev>:

#include "MotorInfo.hpp"

//Init

MotorInfo::MotorInfo() {
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	4a16      	ldr	r2, [pc, #88]	; (8005b68 <_ZN9MotorInfoC1Ev+0x64>)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	334c      	adds	r3, #76	; 0x4c
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7ff f872 	bl	8004c00 <_ZN7MathLibC1Ev>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	337c      	adds	r3, #124	; 0x7c
 8005b20:	4618      	mov	r0, r3
 8005b22:	f001 fbc5 	bl	80072b0 <_ZN7TimInfoC1Ev>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	3390      	adds	r3, #144	; 0x90
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 ff3c 	bl	80069a8 <_ZN3PIDC1Ev>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	33b8      	adds	r3, #184	; 0xb8
 8005b34:	4618      	mov	r0, r3
 8005b36:	f000 ff37 	bl	80069a8 <_ZN3PIDC1Ev>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	33e0      	adds	r3, #224	; 0xe0
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 ff32 	bl	80069a8 <_ZN3PIDC1Ev>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 ff2c 	bl	80069a8 <_ZN3PIDC1Ev>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fe f816 	bl	8003b88 <_ZN9ArgSensorC1Ev>
	// TODO Auto-generated constructor stub

}
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	0800ce84 	.word	0x0800ce84

08005b6c <_ZN9MotorInfoD1Ev>:

MotorInfo::~MotorInfo() {
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	4a16      	ldr	r2, [pc, #88]	; (8005bd0 <_ZN9MotorInfoD1Ev+0x64>)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7fe f81f 	bl	8003bc4 <_ZN9ArgSensorD1Ev>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f000 ff1b 	bl	80069c8 <_ZN3PIDD1Ev>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	33e0      	adds	r3, #224	; 0xe0
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 ff16 	bl	80069c8 <_ZN3PIDD1Ev>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	33b8      	adds	r3, #184	; 0xb8
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f000 ff11 	bl	80069c8 <_ZN3PIDD1Ev>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	3390      	adds	r3, #144	; 0x90
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 ff0c 	bl	80069c8 <_ZN3PIDD1Ev>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	337c      	adds	r3, #124	; 0x7c
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f001 fb8b 	bl	80072d0 <_ZN7TimInfoD1Ev>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	334c      	adds	r3, #76	; 0x4c
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7ff f83a 	bl	8004c38 <_ZN7MathLibD1Ev>
	// TODO Auto-generated destructor stub
}
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	0800ce84 	.word	0x0800ce84

08005bd4 <_ZN9MotorInfoD0Ev>:
MotorInfo::~MotorInfo() {
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
}
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f7ff ffc5 	bl	8005b6c <_ZN9MotorInfoD1Ev>
 8005be2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f003 fc21 	bl	800942e <_ZdlPvj>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <_ZN7MathLibaSERKS_>:
#ifndef MATHLIB_HPP_
#define MATHLIB_HPP_

#include <vector>

class MathLib {
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b082      	sub	sp, #8
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	6039      	str	r1, [r7, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	1d1a      	adds	r2, r3, #4
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	3304      	adds	r3, #4
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	f000 fc55 	bl	80064ba <_ZNSt6vectorIfSaIfEEaSERKS1_>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f103 0210 	add.w	r2, r3, #16
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	3310      	adds	r3, #16
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	f000 fc4c 	bl	80064ba <_ZNSt6vectorIfSaIfEEaSERKS1_>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	69da      	ldr	r2, [r3, #28]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	61da      	str	r2, [r3, #28]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	6a1a      	ldr	r2, [r3, #32]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	621a      	str	r2, [r3, #32]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4618      	mov	r0, r3
 8005c36:	3708      	adds	r7, #8
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <_ZN9MotorInfo10setMathLibE7MathLib>:

void MotorInfo::setMathLib(MathLib pLib){
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
	mLib = pLib;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	334c      	adds	r3, #76	; 0x4c
 8005c4a:	6839      	ldr	r1, [r7, #0]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7ff ffd2 	bl	8005bf6 <_ZN7MathLibaSERKS_>
}
 8005c52:	bf00      	nop
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <_ZN7MathLibC1ERKS_>:
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
 8005c66:	4a10      	ldr	r2, [pc, #64]	; (8005ca8 <_ZN7MathLibC1ERKS_+0x4c>)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	601a      	str	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	1d1a      	adds	r2, r3, #4
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	3304      	adds	r3, #4
 8005c74:	4619      	mov	r1, r3
 8005c76:	4610      	mov	r0, r2
 8005c78:	f7ff f9c9 	bl	800500e <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f103 0210 	add.w	r2, r3, #16
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	3310      	adds	r3, #16
 8005c86:	4619      	mov	r1, r3
 8005c88:	4610      	mov	r0, r2
 8005c8a:	f7ff f9c0 	bl	800500e <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	69da      	ldr	r2, [r3, #28]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	61da      	str	r2, [r3, #28]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	6a1a      	ldr	r2, [r3, #32]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	621a      	str	r2, [r3, #32]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3708      	adds	r7, #8
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	0800ce74 	.word	0x0800ce74

08005cac <_ZN9ArgSensoraSERKS_>:
 */

#ifndef ARGSENSOR_HPP_
#define ARGSENSOR_HPP_

class ArgSensor {
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	605a      	str	r2, [r3, #4]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	689a      	ldr	r2, [r3, #8]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	609a      	str	r2, [r3, #8]
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	60da      	str	r2, [r3, #12]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	7c1a      	ldrb	r2, [r3, #16]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	741a      	strb	r2, [r3, #16]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	7c5a      	ldrb	r2, [r3, #17]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	745a      	strb	r2, [r3, #17]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	695a      	ldr	r2, [r3, #20]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	615a      	str	r2, [r3, #20]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <_ZN9MotorInfo12setArgSensorE9ArgSensor>:

MathLib MotorInfo::getMathLib(void){return mLib;}

void MotorInfo::setArgSensor(ArgSensor pSensor){
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
	mSensor = pSensor;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8005d04:	6839      	ldr	r1, [r7, #0]
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7ff ffd0 	bl	8005cac <_ZN9ArgSensoraSERKS_>
}
 8005d0c:	bf00      	nop
 8005d0e:	3708      	adds	r7, #8
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <_ZN7TimInfoaSERKS_>:
#define TIMINFO_HPP_


#include "stm32f4xx_ll_tim.h"//need

class TimInfo {
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	605a      	str	r2, [r3, #4]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	689a      	ldr	r2, [r3, #8]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	609a      	str	r2, [r3, #8]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	68da      	ldr	r2, [r3, #12]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	60da      	str	r2, [r3, #12]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	691a      	ldr	r2, [r3, #16]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	611a      	str	r2, [r3, #16]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4618      	mov	r0, r3
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <_ZN9MotorInfo10setTimInfoE7TimInfo>:

void MotorInfo::setTimInfo(TimInfo pTimInfo) {
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
	mTimInfo = pTimInfo;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	337c      	adds	r3, #124	; 0x7c
 8005d5a:	6839      	ldr	r1, [r7, #0]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7ff ffd9 	bl	8005d14 <_ZN7TimInfoaSERKS_>
}
 8005d62:	bf00      	nop
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <_ZN3PIDaSERKS_>:
#ifndef PID_HPP_
#define PID_HPP_

#include <array>

class PID {
 8005d6a:	b480      	push	{r7}
 8005d6c:	b083      	sub	sp, #12
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
 8005d72:	6039      	str	r1, [r7, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	3304      	adds	r3, #4
 8005d7a:	3204      	adds	r2, #4
 8005d7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8005d7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	691a      	ldr	r2, [r3, #16]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	611a      	str	r2, [r3, #16]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	695a      	ldr	r2, [r3, #20]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	615a      	str	r2, [r3, #20]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	699a      	ldr	r2, [r3, #24]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	619a      	str	r2, [r3, #24]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	69da      	ldr	r2, [r3, #28]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	61da      	str	r2, [r3, #28]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	6a1a      	ldr	r2, [r3, #32]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	621a      	str	r2, [r3, #32]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	625a      	str	r2, [r3, #36]	; 0x24
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4618      	mov	r0, r3
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <_ZN9MotorInfo12setIdqPIDLibE3PIDS0_>:


void MotorInfo::setIdqPIDLib(PID pdPID, PID pqPID){
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
	mIdPID = pdPID;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	3390      	adds	r3, #144	; 0x90
 8005dd0:	68b9      	ldr	r1, [r7, #8]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7ff ffc9 	bl	8005d6a <_ZN3PIDaSERKS_>
	mIqPID = pqPID;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	33b8      	adds	r3, #184	; 0xb8
 8005ddc:	6879      	ldr	r1, [r7, #4]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7ff ffc3 	bl	8005d6a <_ZN3PIDaSERKS_>
}
 8005de4:	bf00      	nop
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <_ZN9MotorInfo21startForceCommutationEv>:
//void MotorInfo::setVu(float pVu):mVu(pVu){};
//void MotorInfo::setVv(float pVv):mVv(pVv){};
//void MotorInfo::setVw(float pVw):mVw(pVw){};

//Start,Stop
void MotorInfo::startForceCommutation(void){
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
	mSensor.FC_Start_Stop(true);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7fd ff2e 	bl	8003c5e <_ZN9ArgSensor13FC_Start_StopEb>
}
 8005e02:	bf00      	nop
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <_ZN9MotorInfo20stopForceCommutationEv>:

void MotorInfo::stopForceCommutation(void){
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b082      	sub	sp, #8
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
	mSensor.FC_Start_Stop(false);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8005e18:	2100      	movs	r1, #0
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fd ff1f 	bl	8003c5e <_ZN9ArgSensor13FC_Start_StopEb>
}
 8005e20:	bf00      	nop
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <_ZN9MotorInfo7setIuvwEfff>:
//Update

void MotorInfo::setIu(float pIu){mIu=pIu;};
void MotorInfo::setIv(float pIv){mIv=pIv;};
void MotorInfo::setIw(float pIw){mIw=pIw;};
void MotorInfo::setIuvw(float pIu, float pIv, float pIw){
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	ed87 0a02 	vstr	s0, [r7, #8]
 8005e34:	edc7 0a01 	vstr	s1, [r7, #4]
 8005e38:	ed87 1a00 	vstr	s2, [r7]
	mIu = pIu;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	605a      	str	r2, [r3, #4]
	mIv = pIv;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	609a      	str	r2, [r3, #8]
	mIw = pIw;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	60da      	str	r2, [r3, #12]
}
 8005e4e:	bf00      	nop
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <_ZN9MotorInfo9getArgRadEv>:

void MotorInfo::setArgDelta(int pArg){
	mArg_delta = pArg;
}

float MotorInfo::getArgRad(void){
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b082      	sub	sp, #8
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
	return mLib.sizeCountToRad(mArg);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	4610      	mov	r0, r2
 8005e70:	f7ff f85a 	bl	8004f28 <_ZN7MathLib14sizeCountToRadEi>
 8005e74:	eef0 7a40 	vmov.f32	s15, s0
}
 8005e78:	eeb0 0a67 	vmov.f32	s0, s15
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <_ZN9MotorInfo16ForceCommutationEv>:


void MotorInfo::culcArg(void){
}

void MotorInfo::ForceCommutation(void){
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b086      	sub	sp, #24
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
	mSensor.ForceComArg();
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7fd ff01 	bl	8003c98 <_ZN9ArgSensor11ForceComArgEv>
	float ArgOld = mSensor.getArgOld();
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7fd fec0 	bl	8003c22 <_ZN9ArgSensor9getArgOldEv>
 8005ea2:	ed87 0a05 	vstr	s0, [r7, #20]
	float ArgDlt = mSensor.getArg_delta();
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fd fec7 	bl	8003c40 <_ZN9ArgSensor12getArg_deltaEv>
 8005eb2:	ed87 0a04 	vstr	s0, [r7, #16]
	int arg_count = mLib.radToSizeCount(ArgOld);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	334c      	adds	r3, #76	; 0x4c
 8005eba:	ed97 0a05 	vldr	s0, [r7, #20]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fe fff6 	bl	8004eb0 <_ZN7MathLib14radToSizeCountEf>
 8005ec4:	60f8      	str	r0, [r7, #12]
	int argdelta_count = mLib.radToSizeCount(-1 * ArgDlt);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	334c      	adds	r3, #76	; 0x4c
 8005eca:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ece:	eef1 7a67 	vneg.f32	s15, s15
 8005ed2:	eeb0 0a67 	vmov.f32	s0, s15
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7fe ffea 	bl	8004eb0 <_ZN7MathLib14radToSizeCountEf>
 8005edc:	60b8      	str	r0, [r7, #8]
	mArg = arg_count;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	671a      	str	r2, [r3, #112]	; 0x70
	mArg_delta = argdelta_count; //回転方向より符号は反転する
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	675a      	str	r2, [r3, #116]	; 0x74
	setRPM();
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f804 	bl	8005ef8 <_ZN9MotorInfo6setRPMEv>
}
 8005ef0:	bf00      	nop
 8005ef2:	3718      	adds	r7, #24
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <_ZN9MotorInfo6setRPMEv>:

void MotorInfo::setRPM(void){
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	ed2d 8b02 	vpush	{d8}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
	mRPM = (float)(mSensor.getArg() - mSensor.getArgOld()) / (2*3.14f) * 20 * 1000;//適当なパラメータを入れている
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7fd fe7a 	bl	8003c04 <_ZN9ArgSensor6getArgEv>
 8005f10:	eeb0 8a40 	vmov.f32	s16, s0
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7fd fe81 	bl	8003c22 <_ZN9ArgSensor9getArgOldEv>
 8005f20:	eef0 7a40 	vmov.f32	s15, s0
 8005f24:	ee38 7a67 	vsub.f32	s14, s16, s15
 8005f28:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8005f54 <_ZN9MotorInfo6setRPMEv+0x5c>
 8005f2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f30:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005f34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f38:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8005f58 <_ZN9MotorInfo6setRPMEv+0x60>
 8005f3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
}
 8005f46:	bf00      	nop
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	ecbd 8b02 	vpop	{d8}
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	40c8f5c3 	.word	0x40c8f5c3
 8005f58:	447a0000 	.word	0x447a0000

08005f5c <_ZN9MotorInfo13parkTransformEv>:

void MotorInfo::parkTransform(void){
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
	mIalpha = mIu - (mIv + mIw)/2;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	ed93 7a01 	vldr	s14, [r3, #4]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	edd3 7a03 	vldr	s15, [r3, #12]
 8005f76:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005f7a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8005f7e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	edc3 7a04 	vstr	s15, [r3, #16]
	mIbeta = (mIv - mIw)* 1.7320508f/2;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	ed93 7a02 	vldr	s14, [r3, #8]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	edd3 7a03 	vldr	s15, [r3, #12]
 8005f98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f9c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005fc0 <_ZN9MotorInfo13parkTransformEv+0x64>
 8005fa0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005fa4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005fa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	edc3 7a05 	vstr	s15, [r3, #20]
};
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	3fddb3d7 	.word	0x3fddb3d7

08005fc4 <_ZN9MotorInfo14clarkTransformEv>:

void MotorInfo::clarkTransform(void){//反時計回り回転
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	ed2d 8b02 	vpush	{d8}
 8005fca:	b08e      	sub	sp, #56	; 0x38
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
	mId =  mLib.getCosList().at(mArg) * mIalpha + mLib.getSinList().at(mArg) * mIbeta;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8005fd6:	f107 0308 	add.w	r3, r7, #8
 8005fda:	4611      	mov	r1, r2
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7fe ff56 	bl	8004e8e <_ZN7MathLib10getCosListEv>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f107 0308 	add.w	r3, r7, #8
 8005fec:	4611      	mov	r1, r2
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 fb5a 	bl	80066a8 <_ZNSt6vectorIfSaIfEE2atEj>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	ed93 7a00 	vldr	s14, [r3]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	edd3 7a04 	vldr	s15, [r3, #16]
 8006000:	ee27 8a27 	vmul.f32	s16, s14, s15
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800600a:	f107 0314 	add.w	r3, r7, #20
 800600e:	4611      	mov	r1, r2
 8006010:	4618      	mov	r0, r3
 8006012:	f7fe ff2d 	bl	8004e70 <_ZN7MathLib10getSinListEv>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601a:	461a      	mov	r2, r3
 800601c:	f107 0314 	add.w	r3, r7, #20
 8006020:	4611      	mov	r1, r2
 8006022:	4618      	mov	r0, r3
 8006024:	f000 fb40 	bl	80066a8 <_ZNSt6vectorIfSaIfEE2atEj>
 8006028:	4603      	mov	r3, r0
 800602a:	ed93 7a00 	vldr	s14, [r3]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	edd3 7a05 	vldr	s15, [r3, #20]
 8006034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006038:	ee78 7a27 	vadd.f32	s15, s16, s15
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	edc3 7a06 	vstr	s15, [r3, #24]
 8006042:	f107 0314 	add.w	r3, r7, #20
 8006046:	4618      	mov	r0, r3
 8006048:	f7fe ff93 	bl	8004f72 <_ZNSt6vectorIfSaIfEED1Ev>
 800604c:	f107 0308 	add.w	r3, r7, #8
 8006050:	4618      	mov	r0, r3
 8006052:	f7fe ff8e 	bl	8004f72 <_ZNSt6vectorIfSaIfEED1Ev>
	mIq = -mLib.getSinList().at(mArg) * mIalpha + mLib.getCosList().at(mArg) * mIbeta;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800605c:	f107 0320 	add.w	r3, r7, #32
 8006060:	4611      	mov	r1, r2
 8006062:	4618      	mov	r0, r3
 8006064:	f7fe ff04 	bl	8004e70 <_ZN7MathLib10getSinListEv>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800606c:	461a      	mov	r2, r3
 800606e:	f107 0320 	add.w	r3, r7, #32
 8006072:	4611      	mov	r1, r2
 8006074:	4618      	mov	r0, r3
 8006076:	f000 fb17 	bl	80066a8 <_ZNSt6vectorIfSaIfEE2atEj>
 800607a:	4603      	mov	r3, r0
 800607c:	edd3 7a00 	vldr	s15, [r3]
 8006080:	eeb1 7a67 	vneg.f32	s14, s15
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	edd3 7a04 	vldr	s15, [r3, #16]
 800608a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8006094:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006098:	4611      	mov	r1, r2
 800609a:	4618      	mov	r0, r3
 800609c:	f7fe fef7 	bl	8004e8e <_ZN7MathLib10getCosListEv>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a4:	461a      	mov	r2, r3
 80060a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80060aa:	4611      	mov	r1, r2
 80060ac:	4618      	mov	r0, r3
 80060ae:	f000 fafb 	bl	80066a8 <_ZNSt6vectorIfSaIfEE2atEj>
 80060b2:	4603      	mov	r3, r0
 80060b4:	ed93 7a00 	vldr	s14, [r3]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	edd3 7a05 	vldr	s15, [r3, #20]
 80060be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	edc3 7a07 	vstr	s15, [r3, #28]
 80060cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fe ff4e 	bl	8004f72 <_ZNSt6vectorIfSaIfEED1Ev>
 80060d6:	f107 0320 	add.w	r3, r7, #32
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fe ff49 	bl	8004f72 <_ZNSt6vectorIfSaIfEED1Ev>
};
 80060e0:	bf00      	nop
 80060e2:	3738      	adds	r7, #56	; 0x38
 80060e4:	46bd      	mov	sp, r7
 80060e6:	ecbd 8b02 	vpop	{d8}
 80060ea:	bd80      	pop	{r7, pc}

080060ec <_ZN9MotorInfo9setVganmaEf>:
	mVdelta = mVdelta + mIdeltaPID.OutPut();
}

void MotorInfo::setVd(float pVd){mVd = pVd;}
void MotorInfo::setVq(float pVq){mVq = pVq;}
void MotorInfo::setVganma(float pVganma){mVganma = pVganma;}
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	ed87 0a00 	vstr	s0, [r7]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	645a      	str	r2, [r3, #68]	; 0x44
 80060fe:	bf00      	nop
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <_ZN9MotorInfo9setVdeltaEf>:
void MotorInfo::setVdelta(float pVdelta){mVdelta = pVdelta;}
 800610a:	b480      	push	{r7}
 800610c:	b083      	sub	sp, #12
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
 8006112:	ed87 0a00 	vstr	s0, [r7]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	649a      	str	r2, [r3, #72]	; 0x48
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <_ZN9MotorInfo18invClarkGanmaDeltaEv>:

void MotorInfo::invClarkGanmaDelta(void){
 8006128:	b580      	push	{r7, lr}
 800612a:	ed2d 8b02 	vpush	{d8}
 800612e:	b08e      	sub	sp, #56	; 0x38
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
	mVd =  mLib.getCosList().at(mArg) * mVganma + mLib.getSinList().at(mArg) * mVdelta;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800613a:	f107 0308 	add.w	r3, r7, #8
 800613e:	4611      	mov	r1, r2
 8006140:	4618      	mov	r0, r3
 8006142:	f7fe fea4 	bl	8004e8e <_ZN7MathLib10getCosListEv>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800614a:	461a      	mov	r2, r3
 800614c:	f107 0308 	add.w	r3, r7, #8
 8006150:	4611      	mov	r1, r2
 8006152:	4618      	mov	r0, r3
 8006154:	f000 faa8 	bl	80066a8 <_ZNSt6vectorIfSaIfEE2atEj>
 8006158:	4603      	mov	r3, r0
 800615a:	ed93 7a00 	vldr	s14, [r3]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006164:	ee27 8a27 	vmul.f32	s16, s14, s15
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800616e:	f107 0314 	add.w	r3, r7, #20
 8006172:	4611      	mov	r1, r2
 8006174:	4618      	mov	r0, r3
 8006176:	f7fe fe7b 	bl	8004e70 <_ZN7MathLib10getSinListEv>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617e:	461a      	mov	r2, r3
 8006180:	f107 0314 	add.w	r3, r7, #20
 8006184:	4611      	mov	r1, r2
 8006186:	4618      	mov	r0, r3
 8006188:	f000 fa8e 	bl	80066a8 <_ZNSt6vectorIfSaIfEE2atEj>
 800618c:	4603      	mov	r3, r0
 800618e:	ed93 7a00 	vldr	s14, [r3]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8006198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800619c:	ee78 7a27 	vadd.f32	s15, s16, s15
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 80061a6:	f107 0314 	add.w	r3, r7, #20
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fe fee1 	bl	8004f72 <_ZNSt6vectorIfSaIfEED1Ev>
 80061b0:	f107 0308 	add.w	r3, r7, #8
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7fe fedc 	bl	8004f72 <_ZNSt6vectorIfSaIfEED1Ev>
	mVq = -mLib.getSinList().at(mArg) * mVganma + mLib.getCosList().at(mArg) * mVdelta;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80061c0:	f107 0320 	add.w	r3, r7, #32
 80061c4:	4611      	mov	r1, r2
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fe fe52 	bl	8004e70 <_ZN7MathLib10getSinListEv>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d0:	461a      	mov	r2, r3
 80061d2:	f107 0320 	add.w	r3, r7, #32
 80061d6:	4611      	mov	r1, r2
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 fa65 	bl	80066a8 <_ZNSt6vectorIfSaIfEE2atEj>
 80061de:	4603      	mov	r3, r0
 80061e0:	edd3 7a00 	vldr	s15, [r3]
 80061e4:	eeb1 7a67 	vneg.f32	s14, s15
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80061ee:	ee27 8a27 	vmul.f32	s16, s14, s15
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80061f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80061fc:	4611      	mov	r1, r2
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fe fe45 	bl	8004e8e <_ZN7MathLib10getCosListEv>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006208:	461a      	mov	r2, r3
 800620a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800620e:	4611      	mov	r1, r2
 8006210:	4618      	mov	r0, r3
 8006212:	f000 fa49 	bl	80066a8 <_ZNSt6vectorIfSaIfEE2atEj>
 8006216:	4603      	mov	r3, r0
 8006218:	ed93 7a00 	vldr	s14, [r3]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8006222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006226:	ee78 7a27 	vadd.f32	s15, s16, s15
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
 8006230:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006234:	4618      	mov	r0, r3
 8006236:	f7fe fe9c 	bl	8004f72 <_ZNSt6vectorIfSaIfEED1Ev>
 800623a:	f107 0320 	add.w	r3, r7, #32
 800623e:	4618      	mov	r0, r3
 8006240:	f7fe fe97 	bl	8004f72 <_ZNSt6vectorIfSaIfEED1Ev>
}
 8006244:	bf00      	nop
 8006246:	3738      	adds	r7, #56	; 0x38
 8006248:	46bd      	mov	sp, r7
 800624a:	ecbd 8b02 	vpop	{d8}
 800624e:	bd80      	pop	{r7, pc}

08006250 <_ZN9MotorInfo17invClarkTransformEv>:

void MotorInfo::invClarkTransform(void){
 8006250:	b580      	push	{r7, lr}
 8006252:	ed2d 8b02 	vpush	{d8}
 8006256:	b08e      	sub	sp, #56	; 0x38
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
	mValpha = mLib.getCosList().at(mArg_delta) * mVd - mLib.getSinList().at(mArg_delta) * mVq;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8006262:	f107 0308 	add.w	r3, r7, #8
 8006266:	4611      	mov	r1, r2
 8006268:	4618      	mov	r0, r3
 800626a:	f7fe fe10 	bl	8004e8e <_ZN7MathLib10getCosListEv>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006272:	461a      	mov	r2, r3
 8006274:	f107 0308 	add.w	r3, r7, #8
 8006278:	4611      	mov	r1, r2
 800627a:	4618      	mov	r0, r3
 800627c:	f000 fa14 	bl	80066a8 <_ZNSt6vectorIfSaIfEE2atEj>
 8006280:	4603      	mov	r3, r0
 8006282:	ed93 7a00 	vldr	s14, [r3]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800628c:	ee27 8a27 	vmul.f32	s16, s14, s15
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8006296:	f107 0314 	add.w	r3, r7, #20
 800629a:	4611      	mov	r1, r2
 800629c:	4618      	mov	r0, r3
 800629e:	f7fe fde7 	bl	8004e70 <_ZN7MathLib10getSinListEv>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062a6:	461a      	mov	r2, r3
 80062a8:	f107 0314 	add.w	r3, r7, #20
 80062ac:	4611      	mov	r1, r2
 80062ae:	4618      	mov	r0, r3
 80062b0:	f000 f9fa 	bl	80066a8 <_ZNSt6vectorIfSaIfEE2atEj>
 80062b4:	4603      	mov	r3, r0
 80062b6:	ed93 7a00 	vldr	s14, [r3]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80062c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062c4:	ee78 7a67 	vsub.f32	s15, s16, s15
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 80062ce:	f107 0314 	add.w	r3, r7, #20
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fe fe4d 	bl	8004f72 <_ZNSt6vectorIfSaIfEED1Ev>
 80062d8:	f107 0308 	add.w	r3, r7, #8
 80062dc:	4618      	mov	r0, r3
 80062de:	f7fe fe48 	bl	8004f72 <_ZNSt6vectorIfSaIfEED1Ev>
	mVbeta  = mLib.getSinList().at(mArg_delta) * mVd + mLib.getCosList().at(mArg_delta) * mVq;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80062e8:	f107 0320 	add.w	r3, r7, #32
 80062ec:	4611      	mov	r1, r2
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7fe fdbe 	bl	8004e70 <_ZN7MathLib10getSinListEv>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062f8:	461a      	mov	r2, r3
 80062fa:	f107 0320 	add.w	r3, r7, #32
 80062fe:	4611      	mov	r1, r2
 8006300:	4618      	mov	r0, r3
 8006302:	f000 f9d1 	bl	80066a8 <_ZNSt6vectorIfSaIfEE2atEj>
 8006306:	4603      	mov	r3, r0
 8006308:	ed93 7a00 	vldr	s14, [r3]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8006312:	ee27 8a27 	vmul.f32	s16, s14, s15
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800631c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006320:	4611      	mov	r1, r2
 8006322:	4618      	mov	r0, r3
 8006324:	f7fe fdb3 	bl	8004e8e <_ZN7MathLib10getCosListEv>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800632c:	461a      	mov	r2, r3
 800632e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006332:	4611      	mov	r1, r2
 8006334:	4618      	mov	r0, r3
 8006336:	f000 f9b7 	bl	80066a8 <_ZNSt6vectorIfSaIfEE2atEj>
 800633a:	4603      	mov	r3, r0
 800633c:	ed93 7a00 	vldr	s14, [r3]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800634a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
 8006354:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006358:	4618      	mov	r0, r3
 800635a:	f7fe fe0a 	bl	8004f72 <_ZNSt6vectorIfSaIfEED1Ev>
 800635e:	f107 0320 	add.w	r3, r7, #32
 8006362:	4618      	mov	r0, r3
 8006364:	f7fe fe05 	bl	8004f72 <_ZNSt6vectorIfSaIfEED1Ev>
};
 8006368:	bf00      	nop
 800636a:	3738      	adds	r7, #56	; 0x38
 800636c:	46bd      	mov	sp, r7
 800636e:	ecbd 8b02 	vpop	{d8}
 8006372:	bd80      	pop	{r7, pc}

08006374 <_ZN9MotorInfo16invParkTransformEv>:

void MotorInfo::invParkTransform(void){
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
	mVu = 0.75f * mValpha;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006382:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8006386:	ee67 7a87 	vmul.f32	s15, s15, s14
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	mVv = -0.75f * mValpha + mValpha / 3 + mVbeta / 1.7320508f;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006396:	eebe 7a08 	vmov.f32	s14, #232	; 0xbf400000 -0.750
 800639a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80063a4:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 80063a8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80063ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80063b6:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8006400 <_ZN9MotorInfo16invParkTransformEv+0x8c>
 80063ba:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80063be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	mVw = - mValpha / 3 - mVbeta / 1.7320508f;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80063ce:	eef1 7a67 	vneg.f32	s15, s15
 80063d2:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80063d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80063e0:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8006400 <_ZN9MotorInfo16invParkTransformEv+0x8c>
 80063e4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80063e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
//	Iu + Iv - Iw = -2*Iw;
//	Ialpha * 2/3 + Ibeta * 2/sqrt(3) = -2 Iw;
//
//
//	Iv = -Iu - Iw;
};
 80063f2:	bf00      	nop
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	3fddb3d7 	.word	0x3fddb3d7

08006404 <_ZN9MotorInfo5getIdEv>:

float MotorInfo::getIganma(void){return mIganma;};
float MotorInfo::getIdelta(void){return mIdelta;};

float MotorInfo::getId(void){return mId;};
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	ee07 3a90 	vmov	s15, r3
 8006414:	eeb0 0a67 	vmov.f32	s0, s15
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <_ZN9MotorInfo5getIqEv>:
float MotorInfo::getIq(void){return mIq;};
 8006422:	b480      	push	{r7}
 8006424:	b083      	sub	sp, #12
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	ee07 3a90 	vmov	s15, r3
 8006432:	eeb0 0a67 	vmov.f32	s0, s15
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <_ZN9MotorInfo5getVuEv>:
float MotorInfo::getVq(void){return mVq;};

float MotorInfo::getValpha(void){return mValpha;};
float MotorInfo::getVbeta(void){return mVbeta;};

float MotorInfo::getVu(void){return mVu;};
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644c:	ee07 3a90 	vmov	s15, r3
 8006450:	eeb0 0a67 	vmov.f32	s0, s15
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <_ZN9MotorInfo5getVvEv>:
float MotorInfo::getVv(void){return mVv;};
 800645e:	b480      	push	{r7}
 8006460:	b083      	sub	sp, #12
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646a:	ee07 3a90 	vmov	s15, r3
 800646e:	eeb0 0a67 	vmov.f32	s0, s15
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <_ZN9MotorInfo5getVwEv>:
float MotorInfo::getVw(void){return mVw;};
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006488:	ee07 3a90 	vmov	s15, r3
 800648c:	eeb0 0a67 	vmov.f32	s0, s15
 8006490:	370c      	adds	r7, #12
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <_ZN9__gnu_cxx14__alloc_traitsISaIfEE27_S_propagate_on_copy_assignEv>:

    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
 800649a:	b480      	push	{r7}
 800649c:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 800649e:	2300      	movs	r3, #0
 80064a0:	4618      	mov	r0, r3
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <_ZN9__gnu_cxx14__alloc_traitsISaIfEE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 80064aa:	b480      	push	{r7}
 80064ac:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 80064ae:	2301      	movs	r3, #1
 80064b0:	4618      	mov	r0, r3
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <_ZNSt6vectorIfSaIfEEaSERKS1_>:
    vector<_Tp, _Alloc>::
 80064ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064bc:	b085      	sub	sp, #20
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	6039      	str	r1, [r7, #0]
      if (&__x != this)
 80064c4:	683a      	ldr	r2, [r7, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	f000 80e8 	beq.w	800669e <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1e4>
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 80064ce:	f7ff ffe4 	bl	800649a <_ZN9__gnu_cxx14__alloc_traitsISaIfEE27_S_propagate_on_copy_assignEv>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d044      	beq.n	8006562 <_ZNSt6vectorIfSaIfEEaSERKS1_+0xa8>
	      if (!_Alloc_traits::_S_always_equal()
 80064d8:	f7ff ffe7 	bl	80064aa <_ZN9__gnu_cxx14__alloc_traitsISaIfEE15_S_always_equalEv>
 80064dc:	4603      	mov	r3, r0
 80064de:	f083 0301 	eor.w	r3, r3, #1
 80064e2:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d012      	beq.n	800650e <_ZNSt6vectorIfSaIfEEaSERKS1_+0x54>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7fe fdff 	bl	80050ee <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80064f0:	4604      	mov	r4, r0
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7fe ff06 	bl	8005306 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80064fa:	4603      	mov	r3, r0
 80064fc:	4619      	mov	r1, r3
 80064fe:	4620      	mov	r0, r4
 8006500:	f000 f8e4 	bl	80066cc <_ZStneIfEbRKSaIT_ES3_>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d001      	beq.n	800650e <_ZNSt6vectorIfSaIfEEaSERKS1_+0x54>
 800650a:	2301      	movs	r3, #1
 800650c:	e000      	b.n	8006510 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x56>
 800650e:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 8006510:	2b00      	cmp	r3, #0
 8006512:	d018      	beq.n	8006546 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x8c>
		  this->clear();
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f7fe fd47 	bl	8004fa8 <_ZNSt6vectorIfSaIfEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689b      	ldr	r3, [r3, #8]
				- this->_M_impl._M_start);
 8006524:	461a      	mov	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	109b      	asrs	r3, r3, #2
		  _M_deallocate(this->_M_impl._M_start,
 800652e:	461a      	mov	r2, r3
 8006530:	f7fe ff62 	bl	80053f8 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
		  this->_M_impl._M_start = nullptr;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	609a      	str	r2, [r3, #8]
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4618      	mov	r0, r3
 800654a:	f7fe fdd0 	bl	80050ee <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800654e:	4604      	mov	r4, r0
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	4618      	mov	r0, r3
 8006554:	f7fe fed7 	bl	8005306 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8006558:	4603      	mov	r3, r0
 800655a:	4619      	mov	r1, r3
 800655c:	4620      	mov	r0, r4
 800655e:	f000 f8c1 	bl	80066e4 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>
	  const size_type __xlen = __x.size();
 8006562:	6838      	ldr	r0, [r7, #0]
 8006564:	f7fe feb0 	bl	80052c8 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8006568:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f8c8 	bl	8006700 <_ZNKSt6vectorIfSaIfEE8capacityEv>
 8006570:	4602      	mov	r2, r0
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4293      	cmp	r3, r2
 8006576:	bf8c      	ite	hi
 8006578:	2301      	movhi	r3, #1
 800657a:	2300      	movls	r3, #0
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d033      	beq.n	80065ea <_ZNSt6vectorIfSaIfEEaSERKS1_+0x130>
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 8006582:	6838      	ldr	r0, [r7, #0]
 8006584:	f7fe feea 	bl	800535c <_ZNKSt6vectorIfSaIfEE5beginEv>
 8006588:	4604      	mov	r4, r0
 800658a:	6838      	ldr	r0, [r7, #0]
 800658c:	f7fe fefa 	bl	8005384 <_ZNKSt6vectorIfSaIfEE3endEv>
 8006590:	4603      	mov	r3, r0
 8006592:	4622      	mov	r2, r4
 8006594:	68f9      	ldr	r1, [r7, #12]
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f8c3 	bl	8006722 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>
 800659c:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681c      	ldr	r4, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4618      	mov	r0, r3
 80065aa:	f7fe fda0 	bl	80050ee <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80065ae:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80065b0:	461a      	mov	r2, r3
 80065b2:	4629      	mov	r1, r5
 80065b4:	4620      	mov	r0, r4
 80065b6:	f7fe fda5 	bl	8005104 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	689b      	ldr	r3, [r3, #8]
			    - this->_M_impl._M_start);
 80065c4:	461a      	mov	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 80065ce:	461a      	mov	r2, r3
 80065d0:	f7fe ff12 	bl	80053f8 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
	      this->_M_impl._M_start = __tmp;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	441a      	add	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	609a      	str	r2, [r3, #8]
 80065e8:	e052      	b.n	8006690 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d6>
	  else if (size() >= __xlen)
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7fe fe6c 	bl	80052c8 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80065f0:	4602      	mov	r2, r0
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	4293      	cmp	r3, r2
 80065f6:	bf94      	ite	ls
 80065f8:	2301      	movls	r3, #1
 80065fa:	2300      	movhi	r3, #0
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d020      	beq.n	8006644 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x18a>
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8006602:	6838      	ldr	r0, [r7, #0]
 8006604:	f7fe feaa 	bl	800535c <_ZNKSt6vectorIfSaIfEE5beginEv>
 8006608:	4604      	mov	r4, r0
 800660a:	6838      	ldr	r0, [r7, #0]
 800660c:	f7fe feba 	bl	8005384 <_ZNKSt6vectorIfSaIfEE3endEv>
 8006610:	4605      	mov	r5, r0
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7fe ff80 	bl	8005518 <_ZNSt6vectorIfSaIfEE5beginEv>
 8006618:	4603      	mov	r3, r0
 800661a:	461a      	mov	r2, r3
 800661c:	4629      	mov	r1, r5
 800661e:	4620      	mov	r0, r4
 8006620:	f000 f89b 	bl	800675a <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>
 8006624:	4604      	mov	r4, r0
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7fe fdb0 	bl	800518c <_ZNSt6vectorIfSaIfEE3endEv>
 800662c:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4618      	mov	r0, r3
 8006632:	f7fe fd5c 	bl	80050ee <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8006636:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8006638:	461a      	mov	r2, r3
 800663a:	4629      	mov	r1, r5
 800663c:	4620      	mov	r0, r4
 800663e:	f000 f8a4 	bl	800678a <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>
 8006642:	e025      	b.n	8006690 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d6>
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681d      	ldr	r5, [r3, #0]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	681c      	ldr	r4, [r3, #0]
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7fe fe3b 	bl	80052c8 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8006652:	4603      	mov	r3, r0
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	18e1      	adds	r1, r4, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	461a      	mov	r2, r3
 800665e:	4628      	mov	r0, r5
 8006660:	f000 f8a1 	bl	80067a6 <_ZSt4copyIPfS0_ET0_T_S2_S1_>
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681c      	ldr	r4, [r3, #0]
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f7fe fe2d 	bl	80052c8 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800666e:	4603      	mov	r3, r0
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685e      	ldr	r6, [r3, #4]
					  _M_get_Tp_allocator());
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4618      	mov	r0, r3
 8006680:	f7fe fd35 	bl	80050ee <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8006684:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8006686:	4632      	mov	r2, r6
 8006688:	4629      	mov	r1, r5
 800668a:	4620      	mov	r0, r4
 800668c:	f000 f8a3 	bl	80067d6 <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	441a      	add	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	605a      	str	r2, [r3, #4]
      return *this;
 800669e:	687b      	ldr	r3, [r7, #4]
    }
 80066a0:	4618      	mov	r0, r3
 80066a2:	3714      	adds	r7, #20
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080066a8 <_ZNSt6vectorIfSaIfEE2atEj>:
      at(size_type __n)
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
	_M_range_check(__n);
 80066b2:	6839      	ldr	r1, [r7, #0]
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f89f 	bl	80067f8 <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj>
	return (*this)[__n];
 80066ba:	6839      	ldr	r1, [r7, #0]
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 f8bb 	bl	8006838 <_ZNSt6vectorIfSaIfEEixEj>
 80066c2:	4603      	mov	r3, r0
      }
 80066c4:	4618      	mov	r0, r3
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <_ZStneIfEbRKSaIT_ES3_>:
    _GLIBCXX_USE_NOEXCEPT
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
    _GLIBCXX_USE_NOEXCEPT
    { return false; }
 80066d6:	2300      	movs	r3, #0
 80066d8:	4618      	mov	r0, r3
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>:
    inline void
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_copy_assignment __pocca;
      __do_alloc_on_copy(__one, __two, __pocca());
 80066ee:	461a      	mov	r2, r3
 80066f0:	6839      	ldr	r1, [r7, #0]
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f8b0 	bl	8006858 <_ZSt18__do_alloc_on_copyISaIfEEvRT_RKS1_St17integral_constantIbLb0EE>
    }
 80066f8:	bf00      	nop
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <_ZNKSt6vectorIfSaIfEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	689b      	ldr	r3, [r3, #8]
			 - this->_M_impl._M_start); }
 800670c:	461a      	mov	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	109b      	asrs	r3, r3, #2
 8006716:	4618      	mov	r0, r3
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>:
	_M_allocate_and_copy(size_type __n,
 8006722:	b580      	push	{r7, lr}
 8006724:	b086      	sub	sp, #24
 8006726:	af00      	add	r7, sp, #0
 8006728:	60f8      	str	r0, [r7, #12]
 800672a:	60b9      	str	r1, [r7, #8]
 800672c:	607a      	str	r2, [r7, #4]
 800672e:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	68b9      	ldr	r1, [r7, #8]
 8006734:	4618      	mov	r0, r3
 8006736:	f7fe ff15 	bl	8005564 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 800673a:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4618      	mov	r0, r3
 8006740:	f7fe fcd5 	bl	80050ee <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8006744:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	6839      	ldr	r1, [r7, #0]
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7fe fe2e 	bl	80053ac <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
	      return __result;
 8006750:	697b      	ldr	r3, [r7, #20]
	}
 8006752:	4618      	mov	r0, r3
 8006754:	3718      	adds	r7, #24
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 800675a:	b590      	push	{r4, r7, lr}
 800675c:	b085      	sub	sp, #20
 800675e:	af00      	add	r7, sp, #0
 8006760:	60f8      	str	r0, [r7, #12]
 8006762:	60b9      	str	r1, [r7, #8]
 8006764:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f7ff f8c7 	bl	80058fa <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 800676c:	4604      	mov	r4, r0
 800676e:	68b8      	ldr	r0, [r7, #8]
 8006770:	f7ff f8c3 	bl	80058fa <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8006774:	4603      	mov	r3, r0
	       __result));
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	4619      	mov	r1, r3
 800677a:	4620      	mov	r0, r4
 800677c:	f000 f878 	bl	8006870 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>
 8006780:	4603      	mov	r3, r0
    }
 8006782:	4618      	mov	r0, r3
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	bd90      	pop	{r4, r7, pc}

0800678a <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800678a:	b580      	push	{r7, lr}
 800678c:	b084      	sub	sp, #16
 800678e:	af00      	add	r7, sp, #0
 8006790:	60f8      	str	r0, [r7, #12]
 8006792:	60b9      	str	r1, [r7, #8]
 8006794:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8006796:	68b9      	ldr	r1, [r7, #8]
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f000 f88f 	bl	80068bc <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>
    }
 800679e:	bf00      	nop
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <_ZSt4copyIPfS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 80067a6:	b590      	push	{r4, r7, lr}
 80067a8:	b085      	sub	sp, #20
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	60f8      	str	r0, [r7, #12]
 80067ae:	60b9      	str	r1, [r7, #8]
 80067b0:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f7ff f96c 	bl	8005a90 <_ZSt12__miter_baseIPfET_S1_>
 80067b8:	4604      	mov	r4, r0
 80067ba:	68b8      	ldr	r0, [r7, #8]
 80067bc:	f7ff f968 	bl	8005a90 <_ZSt12__miter_baseIPfET_S1_>
 80067c0:	4603      	mov	r3, r0
	       __result));
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	4619      	mov	r1, r3
 80067c6:	4620      	mov	r0, r4
 80067c8:	f000 f885 	bl	80068d6 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>
 80067cc:	4603      	mov	r3, r0
    }
 80067ce:	4618      	mov	r0, r3
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd90      	pop	{r4, r7, pc}

080067d6 <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b084      	sub	sp, #16
 80067da:	af00      	add	r7, sp, #0
 80067dc:	60f8      	str	r0, [r7, #12]
 80067de:	60b9      	str	r1, [r7, #8]
 80067e0:	607a      	str	r2, [r7, #4]
 80067e2:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	68b9      	ldr	r1, [r7, #8]
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 f890 	bl	800690e <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>
 80067ee:	4603      	mov	r3, r0
 80067f0:	4618      	mov	r0, r3
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj>:
      _M_range_check(size_type __n) const
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
	if (__n >= this->size())
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7fe fd60 	bl	80052c8 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8006808:	4602      	mov	r2, r0
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	4293      	cmp	r3, r2
 800680e:	bf2c      	ite	cs
 8006810:	2301      	movcs	r3, #1
 8006812:	2300      	movcc	r3, #0
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d008      	beq.n	800682c <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj+0x34>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7fe fd54 	bl	80052c8 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8006820:	4603      	mov	r3, r0
 8006822:	461a      	mov	r2, r3
 8006824:	6839      	ldr	r1, [r7, #0]
 8006826:	4803      	ldr	r0, [pc, #12]	; (8006834 <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj+0x3c>)
 8006828:	f002 fe21 	bl	800946e <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 800682c:	bf00      	nop
 800682e:	3708      	adds	r7, #8
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	0800cdb8 	.word	0x0800cdb8

08006838 <_ZNSt6vectorIfSaIfEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
      }
 800684c:	4618      	mov	r0, r3
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <_ZSt18__do_alloc_on_copyISaIfEEvRT_RKS1_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	713a      	strb	r2, [r7, #4]
    { }
 8006864:	bf00      	nop
 8006866:	3714      	adds	r7, #20
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8006870:	b5b0      	push	{r4, r5, r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f7ff f87b 	bl	8005978 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8006882:	4604      	mov	r4, r0
 8006884:	68b8      	ldr	r0, [r7, #8]
 8006886:	f7ff f877 	bl	8005978 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800688a:	4605      	mov	r5, r0
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f850 	bl	8006932 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8006892:	4603      	mov	r3, r0
 8006894:	461a      	mov	r2, r3
 8006896:	4629      	mov	r1, r5
 8006898:	4620      	mov	r0, r4
 800689a:	f7ff f886 	bl	80059aa <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 800689e:	4603      	mov	r3, r0
 80068a0:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 80068a2:	f107 0214 	add.w	r2, r7, #20
 80068a6:	f107 0310 	add.w	r3, r7, #16
 80068aa:	4611      	mov	r1, r2
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7fe fddb 	bl	8005468 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 80068b2:	693b      	ldr	r3, [r7, #16]
    }
 80068b4:	4618      	mov	r0, r3
 80068b6:	3718      	adds	r7, #24
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bdb0      	pop	{r4, r5, r7, pc}

080068bc <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80068c6:	6839      	ldr	r1, [r7, #0]
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f840 	bl	800694e <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>
    }
 80068ce:	bf00      	nop
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80068d6:	b5b0      	push	{r4, r5, r7, lr}
 80068d8:	b084      	sub	sp, #16
 80068da:	af00      	add	r7, sp, #0
 80068dc:	60f8      	str	r0, [r7, #12]
 80068de:	60b9      	str	r1, [r7, #8]
 80068e0:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f7ff f856 	bl	8005994 <_ZSt12__niter_baseIPfET_S1_>
 80068e8:	4604      	mov	r4, r0
 80068ea:	68b8      	ldr	r0, [r7, #8]
 80068ec:	f7ff f852 	bl	8005994 <_ZSt12__niter_baseIPfET_S1_>
 80068f0:	4605      	mov	r5, r0
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7ff f84e 	bl	8005994 <_ZSt12__niter_baseIPfET_S1_>
 80068f8:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 80068fa:	461a      	mov	r2, r3
 80068fc:	4629      	mov	r1, r5
 80068fe:	4620      	mov	r0, r4
 8006900:	f000 f830 	bl	8006964 <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>
 8006904:	4603      	mov	r3, r0
    }
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bdb0      	pop	{r4, r5, r7, pc}

0800690e <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800690e:	b580      	push	{r7, lr}
 8006910:	b086      	sub	sp, #24
 8006912:	af00      	add	r7, sp, #0
 8006914:	60f8      	str	r0, [r7, #12]
 8006916:	60b9      	str	r1, [r7, #8]
 8006918:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800691a:	2301      	movs	r3, #1
 800691c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	68b9      	ldr	r1, [r7, #8]
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f000 f830 	bl	8006988 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>
 8006928:	4603      	mov	r3, r0
    }
 800692a:	4618      	mov	r0, r3
 800692c:	3718      	adds	r7, #24
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8006932:	b580      	push	{r7, lr}
 8006934:	b082      	sub	sp, #8
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800693a:	1d3b      	adds	r3, r7, #4
 800693c:	4618      	mov	r0, r3
 800693e:	f7fe fe25 	bl	800558c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8006942:	4603      	mov	r3, r0
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4618      	mov	r0, r3
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800694e:	b480      	push	{r7}
 8006950:	b083      	sub	sp, #12
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
 8006956:	6039      	str	r1, [r7, #0]
 8006958:	bf00      	nop
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006964:	b580      	push	{r7, lr}
 8006966:	b086      	sub	sp, #24
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8006970:	2301      	movs	r3, #1
 8006972:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	68b9      	ldr	r1, [r7, #8]
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f7ff f860 	bl	8005a3e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 800697e:	4603      	mov	r3, r0
    }
 8006980:	4618      	mov	r0, r3
 8006982:	3718      	adds	r7, #24
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	68b9      	ldr	r1, [r7, #8]
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f7ff ff04 	bl	80067a6 <_ZSt4copyIPfS0_ET0_T_S2_S1_>
 800699e:	4603      	mov	r3, r0
 80069a0:	4618      	mov	r0, r3
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <_ZN3PIDC1Ev>:
 * OutPut()でFloatを取り出せば速度型のPID制御が簡単にできるはず。
 */

#include "PID.hpp"

PID::PID(){
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	4a04      	ldr	r2, [pc, #16]	; (80069c4 <_ZN3PIDC1Ev+0x1c>)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	601a      	str	r2, [r3, #0]

}
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4618      	mov	r0, r3
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	0800ce94 	.word	0x0800ce94

080069c8 <_ZN3PIDD1Ev>:
	// TODO Auto-generated constructor stub

	mError.fill(0);
}

PID::~PID() {
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	4a04      	ldr	r2, [pc, #16]	; (80069e4 <_ZN3PIDD1Ev+0x1c>)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4618      	mov	r0, r3
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	0800ce94 	.word	0x0800ce94

080069e8 <_ZN3PIDD0Ev>:
PID::~PID() {
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
}
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7ff ffe9 	bl	80069c8 <_ZN3PIDD1Ev>
 80069f6:	2128      	movs	r1, #40	; 0x28
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f002 fd18 	bl	800942e <_ZdlPvj>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4618      	mov	r0, r3
 8006a02:	3708      	adds	r7, #8
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <_ZN3PID8SetParamEfff>:

void PID::SetParam(float pGain_p, float pGain_i, float pGain_d){
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	ed87 0a02 	vstr	s0, [r7, #8]
 8006a14:	edc7 0a01 	vstr	s1, [r7, #4]
 8006a18:	ed87 1a00 	vstr	s2, [r7]
	mGain_p = pGain_p;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	615a      	str	r2, [r3, #20]
	mGain_i = pGain_i;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	619a      	str	r2, [r3, #24]
	mGain_d = pGain_d;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	61da      	str	r2, [r3, #28]
}
 8006a2e:	bf00      	nop
 8006a30:	3714      	adds	r7, #20
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <LL_TIM_EnableCounter>:
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b083      	sub	sp, #12
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f043 0201 	orr.w	r2, r3, #1
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	601a      	str	r2, [r3, #0]
}
 8006a4e:	bf00      	nop
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <LL_TIM_DisableARRPreload>:
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b083      	sub	sp, #12
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	601a      	str	r2, [r3, #0]
}
 8006a6e:	bf00      	nop
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <LL_TIM_SetAutoReload>:
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b083      	sub	sp, #12
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8006a84:	683a      	ldr	r2, [r7, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006a8a:	bf00      	nop
 8006a8c:	370c      	adds	r7, #12
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr

08006a96 <LL_TIM_CC_EnableChannel>:
{
 8006a96:	b480      	push	{r7}
 8006a98:	b083      	sub	sp, #12
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a1a      	ldr	r2, [r3, #32]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	431a      	orrs	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	621a      	str	r2, [r3, #32]
}
 8006aac:	bf00      	nop
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <LL_TIM_EnableAllOutputs>:
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	645a      	str	r2, [r3, #68]	; 0x44
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <_ZN3PWM6setTIMEP11TIM_TypeDef>:

#include "PWM.hpp"
#include "stm32f4xx_hal.h"
//#include "tim.h"

void PWM::setTIM(TIM_TypeDef* pTIMx){
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
	mTIMx = pTIMx;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	601a      	str	r2, [r3, #0]
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <_ZN3PWM5setCHEi>:

//void PWM::setCH(__IO uint32_t pCCR);

void PWM::setCH(int pCH){
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
	mCH = pCH;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	605a      	str	r2, [r3, #4]
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <_ZN3PWM5fInitEi>:
	LL_TIM_EnableAllOutputs(mTIMx);// need
	//PWM TIM Init end

}

void PWM::fInit(int pTimReload){
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]

	mTimReload = pTimReload;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	609a      	str	r2, [r3, #8]

	if(mCH==0){//error check
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d100      	bne.n	8006b2a <_ZN3PWM5fInitEi+0x1a>
		while(1){}
 8006b28:	e7fe      	b.n	8006b28 <_ZN3PWM5fInitEi+0x18>
	}

	//mREG Init
	if (mCH == 1){
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d105      	bne.n	8006b3e <_ZN3PWM5fInitEi+0x2e>
		mREG=&(mTIMx->CCR1);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 2){
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d105      	bne.n	8006b52 <_ZN3PWM5fInitEi+0x42>
		mREG=&(mTIMx->CCR2);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 3){
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d105      	bne.n	8006b66 <_ZN3PWM5fInitEi+0x56>
		mREG=&(mTIMx->CCR3);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 4){
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	2b04      	cmp	r3, #4
 8006b6c:	d105      	bne.n	8006b7a <_ZN3PWM5fInitEi+0x6a>
		mREG=&(mTIMx->CCR4);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	60da      	str	r2, [r3, #12]
	}

	if(mREG==NULL){//error check
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d100      	bne.n	8006b84 <_ZN3PWM5fInitEi+0x74>
		while(1){}
 8006b82:	e7fe      	b.n	8006b82 <_ZN3PWM5fInitEi+0x72>
	}
	//mREG Init end

	//PWM Channel Init
	if(mTIMx==NULL){//error check
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d100      	bne.n	8006b8e <_ZN3PWM5fInitEi+0x7e>
		while(1){}
 8006b8c:	e7fe      	b.n	8006b8c <_ZN3PWM5fInitEi+0x7c>
	}
	if (mCH == 1){
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d105      	bne.n	8006ba2 <_ZN3PWM5fInitEi+0x92>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH1);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7ff ff7a 	bl	8006a96 <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 2){
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d105      	bne.n	8006bb6 <_ZN3PWM5fInitEi+0xa6>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH2);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2110      	movs	r1, #16
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7ff ff70 	bl	8006a96 <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 3){
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	2b03      	cmp	r3, #3
 8006bbc:	d106      	bne.n	8006bcc <_ZN3PWM5fInitEi+0xbc>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH3);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7ff ff65 	bl	8006a96 <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 4){
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	2b04      	cmp	r3, #4
 8006bd2:	d106      	bne.n	8006be2 <_ZN3PWM5fInitEi+0xd2>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH4);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7ff ff5a 	bl	8006a96 <LL_TIM_CC_EnableChannel>
	}
	//PWM Channel Init end

	//PWM TIM Init
	LL_TIM_EnableCounter(mTIMx);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7ff ff27 	bl	8006a3a <LL_TIM_EnableCounter>

	//auto reload Init
	LL_TIM_SetAutoReload(mTIMx, pTimReload);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	683a      	ldr	r2, [r7, #0]
 8006bf2:	4611      	mov	r1, r2
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7ff ff40 	bl	8006a7a <LL_TIM_SetAutoReload>

	//LL_TIM_GenerateEvent_UPDATE(TIM1);//
	LL_TIM_EnableAllOutputs(mTIMx);// need
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7ff ff5a 	bl	8006ab8 <LL_TIM_EnableAllOutputs>
	//PWM TIM Init end

}
 8006c04:	bf00      	nop
 8006c06:	3708      	adds	r7, #8
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <_ZN3PWM6f2DutyEf>:
void PWM::fDuty(float pfDuty){
	int pDuty = pfDuty * (float)mTimReload;
	WRITE_REG(*mREG, pDuty);
}

void PWM::f2Duty(float pfDuty){
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	ed87 0a00 	vstr	s0, [r7]
	int pDuty = (pfDuty + 1)/2 * (float)mTimReload;
 8006c18:	edd7 7a00 	vldr	s15, [r7]
 8006c1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006c24:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006c28:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	ee07 3a90 	vmov	s15, r3
 8006c34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c40:	ee17 3a90 	vmov	r3, s15
 8006c44:	60fb      	str	r3, [r7, #12]
	WRITE_REG(*mREG, pDuty);
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	601a      	str	r2, [r3, #0]
}
 8006c4e:	bf00      	nop
 8006c50:	3714      	adds	r7, #20
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <_ZN3PWM7DisableEv>:

void PWM::Disable(void){
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b082      	sub	sp, #8
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
	  LL_TIM_DisableARRPreload(mTIMx);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7ff fef7 	bl	8006a5a <LL_TIM_DisableARRPreload>
}
 8006c6c:	bf00      	nop
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <__NVIC_GetPriorityGrouping>:
{
 8006c74:	b480      	push	{r7}
 8006c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c78:	4b04      	ldr	r3, [pc, #16]	; (8006c8c <__NVIC_GetPriorityGrouping+0x18>)
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	0a1b      	lsrs	r3, r3, #8
 8006c7e:	f003 0307 	and.w	r3, r3, #7
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr
 8006c8c:	e000ed00 	.word	0xe000ed00

08006c90 <__NVIC_EnableIRQ>:
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	4603      	mov	r3, r0
 8006c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	db0d      	blt.n	8006cbe <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	f003 021f 	and.w	r2, r3, #31
 8006cac:	4907      	ldr	r1, [pc, #28]	; (8006ccc <__NVIC_EnableIRQ+0x3c>)
 8006cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cb2:	095b      	lsrs	r3, r3, #5
 8006cb4:	2001      	movs	r0, #1
 8006cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8006cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006cbe:	bf00      	nop
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	e000e100 	.word	0xe000e100

08006cd0 <__NVIC_SetPriority>:
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	6039      	str	r1, [r7, #0]
 8006cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	db0c      	blt.n	8006cfe <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	4a0e      	ldr	r2, [pc, #56]	; (8006d24 <__NVIC_SetPriority+0x54>)
 8006cea:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8006cee:	4608      	mov	r0, r1
 8006cf0:	011b      	lsls	r3, r3, #4
 8006cf2:	b2d9      	uxtb	r1, r3
 8006cf4:	1813      	adds	r3, r2, r0
 8006cf6:	460a      	mov	r2, r1
 8006cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006cfc:	e00c      	b.n	8006d18 <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	b2da      	uxtb	r2, r3
 8006d02:	4909      	ldr	r1, [pc, #36]	; (8006d28 <__NVIC_SetPriority+0x58>)
 8006d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	f003 030f 	and.w	r3, r3, #15
 8006d0e:	3b04      	subs	r3, #4
 8006d10:	0112      	lsls	r2, r2, #4
 8006d12:	b2d2      	uxtb	r2, r2
 8006d14:	440b      	add	r3, r1
 8006d16:	761a      	strb	r2, [r3, #24]
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	e000e100 	.word	0xe000e100
 8006d28:	e000ed00 	.word	0xe000ed00

08006d2c <NVIC_EncodePriority>:
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b089      	sub	sp, #36	; 0x24
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f003 0307 	and.w	r3, r3, #7
 8006d3e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	f1c3 0307 	rsb	r3, r3, #7
 8006d46:	2b04      	cmp	r3, #4
 8006d48:	bf28      	it	cs
 8006d4a:	2304      	movcs	r3, #4
 8006d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	3304      	adds	r3, #4
 8006d52:	2b06      	cmp	r3, #6
 8006d54:	d902      	bls.n	8006d5c <NVIC_EncodePriority+0x30>
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	3b03      	subs	r3, #3
 8006d5a:	e000      	b.n	8006d5e <NVIC_EncodePriority+0x32>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	2201      	movs	r2, #1
 8006d64:	fa02 f303 	lsl.w	r3, r2, r3
 8006d68:	1e5a      	subs	r2, r3, #1
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	401a      	ands	r2, r3
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	2101      	movs	r1, #1
 8006d76:	fa01 f303 	lsl.w	r3, r1, r3
 8006d7a:	1e59      	subs	r1, r3, #1
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	400b      	ands	r3, r1
         );
 8006d80:	4313      	orrs	r3, r2
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3724      	adds	r7, #36	; 0x24
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <LL_TIM_DisableARRPreload>:
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	601a      	str	r2, [r3, #0]
}
 8006da2:	bf00      	nop
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
	...

08006db0 <LL_TIM_OC_DisableFast>:
{
 8006db0:	b4b0      	push	{r4, r5, r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d01c      	beq.n	8006dfa <LL_TIM_OC_DisableFast+0x4a>
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	2b04      	cmp	r3, #4
 8006dc4:	d017      	beq.n	8006df6 <LL_TIM_OC_DisableFast+0x46>
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	2b10      	cmp	r3, #16
 8006dca:	d012      	beq.n	8006df2 <LL_TIM_OC_DisableFast+0x42>
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	2b40      	cmp	r3, #64	; 0x40
 8006dd0:	d00d      	beq.n	8006dee <LL_TIM_OC_DisableFast+0x3e>
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dd8:	d007      	beq.n	8006dea <LL_TIM_OC_DisableFast+0x3a>
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006de0:	d101      	bne.n	8006de6 <LL_TIM_OC_DisableFast+0x36>
 8006de2:	2305      	movs	r3, #5
 8006de4:	e00a      	b.n	8006dfc <LL_TIM_OC_DisableFast+0x4c>
 8006de6:	2306      	movs	r3, #6
 8006de8:	e008      	b.n	8006dfc <LL_TIM_OC_DisableFast+0x4c>
 8006dea:	2304      	movs	r3, #4
 8006dec:	e006      	b.n	8006dfc <LL_TIM_OC_DisableFast+0x4c>
 8006dee:	2303      	movs	r3, #3
 8006df0:	e004      	b.n	8006dfc <LL_TIM_OC_DisableFast+0x4c>
 8006df2:	2302      	movs	r3, #2
 8006df4:	e002      	b.n	8006dfc <LL_TIM_OC_DisableFast+0x4c>
 8006df6:	2301      	movs	r3, #1
 8006df8:	e000      	b.n	8006dfc <LL_TIM_OC_DisableFast+0x4c>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	3318      	adds	r3, #24
 8006e02:	461a      	mov	r2, r3
 8006e04:	4629      	mov	r1, r5
 8006e06:	4b09      	ldr	r3, [pc, #36]	; (8006e2c <LL_TIM_OC_DisableFast+0x7c>)
 8006e08:	5c5b      	ldrb	r3, [r3, r1]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8006e0e:	6822      	ldr	r2, [r4, #0]
 8006e10:	4629      	mov	r1, r5
 8006e12:	4b07      	ldr	r3, [pc, #28]	; (8006e30 <LL_TIM_OC_DisableFast+0x80>)
 8006e14:	5c5b      	ldrb	r3, [r3, r1]
 8006e16:	4619      	mov	r1, r3
 8006e18:	2304      	movs	r3, #4
 8006e1a:	408b      	lsls	r3, r1
 8006e1c:	43db      	mvns	r3, r3
 8006e1e:	4013      	ands	r3, r2
 8006e20:	6023      	str	r3, [r4, #0]
}
 8006e22:	bf00      	nop
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bcb0      	pop	{r4, r5, r7}
 8006e2a:	4770      	bx	lr
 8006e2c:	0800ce9c 	.word	0x0800ce9c
 8006e30:	0800cea4 	.word	0x0800cea4

08006e34 <LL_TIM_OC_EnablePreload>:
{
 8006e34:	b4b0      	push	{r4, r5, r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d01c      	beq.n	8006e7e <LL_TIM_OC_EnablePreload+0x4a>
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	2b04      	cmp	r3, #4
 8006e48:	d017      	beq.n	8006e7a <LL_TIM_OC_EnablePreload+0x46>
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b10      	cmp	r3, #16
 8006e4e:	d012      	beq.n	8006e76 <LL_TIM_OC_EnablePreload+0x42>
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	2b40      	cmp	r3, #64	; 0x40
 8006e54:	d00d      	beq.n	8006e72 <LL_TIM_OC_EnablePreload+0x3e>
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e5c:	d007      	beq.n	8006e6e <LL_TIM_OC_EnablePreload+0x3a>
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e64:	d101      	bne.n	8006e6a <LL_TIM_OC_EnablePreload+0x36>
 8006e66:	2305      	movs	r3, #5
 8006e68:	e00a      	b.n	8006e80 <LL_TIM_OC_EnablePreload+0x4c>
 8006e6a:	2306      	movs	r3, #6
 8006e6c:	e008      	b.n	8006e80 <LL_TIM_OC_EnablePreload+0x4c>
 8006e6e:	2304      	movs	r3, #4
 8006e70:	e006      	b.n	8006e80 <LL_TIM_OC_EnablePreload+0x4c>
 8006e72:	2303      	movs	r3, #3
 8006e74:	e004      	b.n	8006e80 <LL_TIM_OC_EnablePreload+0x4c>
 8006e76:	2302      	movs	r3, #2
 8006e78:	e002      	b.n	8006e80 <LL_TIM_OC_EnablePreload+0x4c>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e000      	b.n	8006e80 <LL_TIM_OC_EnablePreload+0x4c>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	3318      	adds	r3, #24
 8006e86:	461a      	mov	r2, r3
 8006e88:	4629      	mov	r1, r5
 8006e8a:	4b09      	ldr	r3, [pc, #36]	; (8006eb0 <LL_TIM_OC_EnablePreload+0x7c>)
 8006e8c:	5c5b      	ldrb	r3, [r3, r1]
 8006e8e:	4413      	add	r3, r2
 8006e90:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8006e92:	6822      	ldr	r2, [r4, #0]
 8006e94:	4629      	mov	r1, r5
 8006e96:	4b07      	ldr	r3, [pc, #28]	; (8006eb4 <LL_TIM_OC_EnablePreload+0x80>)
 8006e98:	5c5b      	ldrb	r3, [r3, r1]
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	2308      	movs	r3, #8
 8006e9e:	408b      	lsls	r3, r1
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	6023      	str	r3, [r4, #0]
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bcb0      	pop	{r4, r5, r7}
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	0800ce9c 	.word	0x0800ce9c
 8006eb4:	0800cea4 	.word	0x0800cea4

08006eb8 <LL_TIM_SetTriggerOutput>:
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	431a      	orrs	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	605a      	str	r2, [r3, #4]
}
 8006ed2:	bf00      	nop
 8006ed4:	370c      	adds	r7, #12
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr

08006ede <LL_TIM_SetSlaveMode>:
{
 8006ede:	b480      	push	{r7}
 8006ee0:	b083      	sub	sp, #12
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
 8006ee6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f023 0207 	bic.w	r2, r3, #7
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	431a      	orrs	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	609a      	str	r2, [r3, #8]
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <LL_TIM_SetTriggerInput>:
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	431a      	orrs	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	609a      	str	r2, [r3, #8]
}
 8006f1e:	bf00      	nop
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <LL_TIM_DisableMasterSlaveMode>:
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b083      	sub	sp, #12
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	609a      	str	r2, [r3, #8]
}
 8006f3e:	bf00      	nop
 8006f40:	370c      	adds	r7, #12
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr

08006f4a <LL_TIM_DisableIT_TRIG>:
{
 8006f4a:	b480      	push	{r7}
 8006f4c:	b083      	sub	sp, #12
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TIE);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	60da      	str	r2, [r3, #12]
}
 8006f5e:	bf00      	nop
 8006f60:	370c      	adds	r7, #12
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <LL_TIM_DisableDMAReq_TRIG>:
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b083      	sub	sp, #12
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TDE);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	60da      	str	r2, [r3, #12]
}
 8006f7e:	bf00      	nop
 8006f80:	370c      	adds	r7, #12
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
	...

08006f8c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8006f94:	4b08      	ldr	r3, [pc, #32]	; (8006fb8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4907      	ldr	r1, [pc, #28]	; (8006fb8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8006fa0:	4b05      	ldr	r3, [pc, #20]	; (8006fb8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006fa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006faa:	68fb      	ldr	r3, [r7, #12]
}
 8006fac:	bf00      	nop
 8006fae:	3714      	adds	r7, #20
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	40023800 	.word	0x40023800

08006fbc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8006fc4:	4b08      	ldr	r3, [pc, #32]	; (8006fe8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006fc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4907      	ldr	r1, [pc, #28]	; (8006fe8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006fd0:	4b05      	ldr	r3, [pc, #20]	; (8006fe8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006fd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006fda:	68fb      	ldr	r3, [r7, #12]
}
 8006fdc:	bf00      	nop
 8006fde:	3714      	adds	r7, #20
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	40023800 	.word	0x40023800

08006fec <_ZN7TIMInitC1Ev>:
 *      Author: watashi
 */

#include "TIMInit.hpp"

TIMInit::TIMInit() {
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	4a04      	ldr	r2, [pc, #16]	; (8007008 <_ZN7TIMInitC1Ev+0x1c>)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr
 8007008:	0800ceb4 	.word	0x0800ceb4

0800700c <_ZN7TIMInitD1Ev>:

TIMInit::~TIMInit() {
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	4a04      	ldr	r2, [pc, #16]	; (8007028 <_ZN7TIMInitD1Ev+0x1c>)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4618      	mov	r0, r3
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr
 8007028:	0800ceb4 	.word	0x0800ceb4

0800702c <_ZN7TIMInitD0Ev>:
TIMInit::~TIMInit() {
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
}
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f7ff ffe9 	bl	800700c <_ZN7TIMInitD1Ev>
 800703a:	2104      	movs	r1, #4
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f002 f9f6 	bl	800942e <_ZdlPvj>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4618      	mov	r0, r3
 8007046:	3708      	adds	r7, #8
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <_ZN7TIMInit4InitEv>:

void MX_TIM1_Init(void);


void TIMInit::Init() {
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
	MX_TIM1_Init();
 8007054:	f000 f804 	bl	8007060 <_Z12MX_TIM1_Initv>
}
 8007058:	bf00      	nop
 800705a:	3708      	adds	r7, #8
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <_Z12MX_TIM1_Initv>:

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b09a      	sub	sp, #104	; 0x68
 8007064:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8007066:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800706a:	2200      	movs	r2, #0
 800706c:	601a      	str	r2, [r3, #0]
 800706e:	605a      	str	r2, [r3, #4]
 8007070:	609a      	str	r2, [r3, #8]
 8007072:	60da      	str	r2, [r3, #12]
 8007074:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8007076:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800707a:	2220      	movs	r2, #32
 800707c:	2100      	movs	r1, #0
 800707e:	4618      	mov	r0, r3
 8007080:	f003 fdf6 	bl	800ac70 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8007084:	f107 031c 	add.w	r3, r7, #28
 8007088:	2200      	movs	r2, #0
 800708a:	601a      	str	r2, [r3, #0]
 800708c:	605a      	str	r2, [r3, #4]
 800708e:	609a      	str	r2, [r3, #8]
 8007090:	60da      	str	r2, [r3, #12]
 8007092:	611a      	str	r2, [r3, #16]
 8007094:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007096:	1d3b      	adds	r3, r7, #4
 8007098:	2200      	movs	r2, #0
 800709a:	601a      	str	r2, [r3, #0]
 800709c:	605a      	str	r2, [r3, #4]
 800709e:	609a      	str	r2, [r3, #8]
 80070a0:	60da      	str	r2, [r3, #12]
 80070a2:	611a      	str	r2, [r3, #16]
 80070a4:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80070a6:	2001      	movs	r0, #1
 80070a8:	f7ff ff88 	bl	8006fbc <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80070ac:	2001      	movs	r0, #1
 80070ae:	f7ff ff6d 	bl	8006f8c <LL_AHB1_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA6   ------> TIM1_BKIN
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80070b2:	2340      	movs	r3, #64	; 0x40
 80070b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80070b6:	2302      	movs	r3, #2
 80070b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80070ba:	2300      	movs	r3, #0
 80070bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80070be:	2300      	movs	r3, #0
 80070c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80070c2:	2302      	movs	r3, #2
 80070c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80070c6:	2301      	movs	r3, #1
 80070c8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070ca:	1d3b      	adds	r3, r7, #4
 80070cc:	4619      	mov	r1, r3
 80070ce:	4870      	ldr	r0, [pc, #448]	; (8007290 <_Z12MX_TIM1_Initv+0x230>)
 80070d0:	f7fb fec5 	bl	8002e5e <LL_GPIO_Init>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 1));
 80070d4:	f7ff fdce 	bl	8006c74 <__NVIC_GetPriorityGrouping>
 80070d8:	4603      	mov	r3, r0
 80070da:	2201      	movs	r2, #1
 80070dc:	2104      	movs	r1, #4
 80070de:	4618      	mov	r0, r3
 80070e0:	f7ff fe24 	bl	8006d2c <NVIC_EncodePriority>
 80070e4:	4603      	mov	r3, r0
 80070e6:	4619      	mov	r1, r3
 80070e8:	2018      	movs	r0, #24
 80070ea:	f7ff fdf1 	bl	8006cd0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80070ee:	2018      	movs	r0, #24
 80070f0:	f7ff fdce 	bl	8006c90 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80070f4:	f7ff fdbe 	bl	8006c74 <__NVIC_GetPriorityGrouping>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2200      	movs	r2, #0
 80070fc:	2100      	movs	r1, #0
 80070fe:	4618      	mov	r0, r3
 8007100:	f7ff fe14 	bl	8006d2c <NVIC_EncodePriority>
 8007104:	4603      	mov	r3, r0
 8007106:	4619      	mov	r1, r3
 8007108:	2019      	movs	r0, #25
 800710a:	f7ff fde1 	bl	8006cd0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800710e:	2019      	movs	r0, #25
 8007110:	f7ff fdbe 	bl	8006c90 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 0;
 8007114:	2300      	movs	r3, #0
 8007116:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_UP;
 800711a:	2320      	movs	r3, #32
 800711c:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 4000;
 800711e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8007122:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV2;
 8007124:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007128:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 800712a:	2300      	movs	r3, #0
 800712c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8007130:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007134:	4619      	mov	r1, r3
 8007136:	4857      	ldr	r0, [pc, #348]	; (8007294 <_Z12MX_TIM1_Initv+0x234>)
 8007138:	f7fc f8f6 	bl	8003328 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 800713c:	4855      	ldr	r0, [pc, #340]	; (8007294 <_Z12MX_TIM1_Initv+0x234>)
 800713e:	f7ff fe26 	bl	8006d8e <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8007142:	2101      	movs	r1, #1
 8007144:	4853      	ldr	r0, [pc, #332]	; (8007294 <_Z12MX_TIM1_Initv+0x234>)
 8007146:	f7ff fe75 	bl	8006e34 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800714a:	2360      	movs	r3, #96	; 0x60
 800714c:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800714e:	2300      	movs	r3, #0
 8007150:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8007152:	2300      	movs	r3, #0
 8007154:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 8007156:	2300      	movs	r3, #0
 8007158:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800715a:	2300      	movs	r3, #0
 800715c:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 800715e:	2300      	movs	r3, #0
 8007160:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8007162:	2300      	movs	r3, #0
 8007164:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8007166:	2300      	movs	r3, #0
 8007168:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800716a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800716e:	461a      	mov	r2, r3
 8007170:	2101      	movs	r1, #1
 8007172:	4848      	ldr	r0, [pc, #288]	; (8007294 <_Z12MX_TIM1_Initv+0x234>)
 8007174:	f7fc f972 	bl	800345c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8007178:	2101      	movs	r1, #1
 800717a:	4846      	ldr	r0, [pc, #280]	; (8007294 <_Z12MX_TIM1_Initv+0x234>)
 800717c:	f7ff fe18 	bl	8006db0 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 8007180:	2110      	movs	r1, #16
 8007182:	4844      	ldr	r0, [pc, #272]	; (8007294 <_Z12MX_TIM1_Initv+0x234>)
 8007184:	f7ff fe56 	bl	8006e34 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8007188:	2300      	movs	r3, #0
 800718a:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800718c:	2300      	movs	r3, #0
 800718e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8007190:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007194:	461a      	mov	r2, r3
 8007196:	2110      	movs	r1, #16
 8007198:	483e      	ldr	r0, [pc, #248]	; (8007294 <_Z12MX_TIM1_Initv+0x234>)
 800719a:	f7fc f95f 	bl	800345c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 800719e:	2110      	movs	r1, #16
 80071a0:	483c      	ldr	r0, [pc, #240]	; (8007294 <_Z12MX_TIM1_Initv+0x234>)
 80071a2:	f7ff fe05 	bl	8006db0 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 80071a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80071aa:	483a      	ldr	r0, [pc, #232]	; (8007294 <_Z12MX_TIM1_Initv+0x234>)
 80071ac:	f7ff fe42 	bl	8006e34 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80071b0:	2300      	movs	r3, #0
 80071b2:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80071b4:	2300      	movs	r3, #0
 80071b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80071b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80071bc:	461a      	mov	r2, r3
 80071be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80071c2:	4834      	ldr	r0, [pc, #208]	; (8007294 <_Z12MX_TIM1_Initv+0x234>)
 80071c4:	f7fc f94a 	bl	800345c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 80071c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80071cc:	4831      	ldr	r0, [pc, #196]	; (8007294 <_Z12MX_TIM1_Initv+0x234>)
 80071ce:	f7ff fdef 	bl	8006db0 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 80071d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80071d6:	482f      	ldr	r0, [pc, #188]	; (8007294 <_Z12MX_TIM1_Initv+0x234>)
 80071d8:	f7ff fe2c 	bl	8006e34 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 80071dc:	2370      	movs	r3, #112	; 0x70
 80071de:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80071e0:	2300      	movs	r3, #0
 80071e2:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80071e4:	2300      	movs	r3, #0
 80071e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80071e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80071ec:	461a      	mov	r2, r3
 80071ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80071f2:	4828      	ldr	r0, [pc, #160]	; (8007294 <_Z12MX_TIM1_Initv+0x234>)
 80071f4:	f7fc f932 	bl	800345c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 80071f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80071fc:	4825      	ldr	r0, [pc, #148]	; (8007294 <_Z12MX_TIM1_Initv+0x234>)
 80071fe:	f7ff fdd7 	bl	8006db0 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerInput(TIM1, LL_TIM_TS_ITR1);
 8007202:	2110      	movs	r1, #16
 8007204:	4823      	ldr	r0, [pc, #140]	; (8007294 <_Z12MX_TIM1_Initv+0x234>)
 8007206:	f7ff fe7d 	bl	8006f04 <LL_TIM_SetTriggerInput>
  LL_TIM_SetSlaveMode(TIM1, LL_TIM_SLAVEMODE_TRIGGER);
 800720a:	2106      	movs	r1, #6
 800720c:	4821      	ldr	r0, [pc, #132]	; (8007294 <_Z12MX_TIM1_Initv+0x234>)
 800720e:	f7ff fe66 	bl	8006ede <LL_TIM_SetSlaveMode>
  LL_TIM_DisableIT_TRIG(TIM1);
 8007212:	4820      	ldr	r0, [pc, #128]	; (8007294 <_Z12MX_TIM1_Initv+0x234>)
 8007214:	f7ff fe99 	bl	8006f4a <LL_TIM_DisableIT_TRIG>
  LL_TIM_DisableDMAReq_TRIG(TIM1);
 8007218:	481e      	ldr	r0, [pc, #120]	; (8007294 <_Z12MX_TIM1_Initv+0x234>)
 800721a:	f7ff fea6 	bl	8006f6a <LL_TIM_DisableDMAReq_TRIG>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 800721e:	2100      	movs	r1, #0
 8007220:	481c      	ldr	r0, [pc, #112]	; (8007294 <_Z12MX_TIM1_Initv+0x234>)
 8007222:	f7ff fe49 	bl	8006eb8 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8007226:	481b      	ldr	r0, [pc, #108]	; (8007294 <_Z12MX_TIM1_Initv+0x234>)
 8007228:	f7ff fe7f 	bl	8006f2a <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_ENABLE;
 800722c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007230:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_ENABLE;
 8007232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007236:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_1;
 8007238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800723c:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 800723e:	2300      	movs	r3, #0
 8007240:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8007244:	2300      	movs	r3, #0
 8007246:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8007248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800724c:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 800724e:	2300      	movs	r3, #0
 8007250:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8007252:	f107 031c 	add.w	r3, r7, #28
 8007256:	4619      	mov	r1, r3
 8007258:	480e      	ldr	r0, [pc, #56]	; (8007294 <_Z12MX_TIM1_Initv+0x234>)
 800725a:	f7fc f937 	bl	80034cc <LL_TIM_BDTR_Init>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800725e:	2001      	movs	r0, #1
 8007260:	f7ff fe94 	bl	8006f8c <LL_AHB1_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8007264:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8007268:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800726a:	2302      	movs	r3, #2
 800726c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800726e:	2302      	movs	r3, #2
 8007270:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007272:	2300      	movs	r3, #0
 8007274:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007276:	2302      	movs	r3, #2
 8007278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800727a:	2301      	movs	r3, #1
 800727c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800727e:	1d3b      	adds	r3, r7, #4
 8007280:	4619      	mov	r1, r3
 8007282:	4803      	ldr	r0, [pc, #12]	; (8007290 <_Z12MX_TIM1_Initv+0x230>)
 8007284:	f7fb fdeb 	bl	8002e5e <LL_GPIO_Init>

}
 8007288:	bf00      	nop
 800728a:	3768      	adds	r7, #104	; 0x68
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	40020000 	.word	0x40020000
 8007294:	40010000 	.word	0x40010000

08007298 <LL_TIM_GetAutoReload>:
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->ARR));
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <_ZN7TimInfoC1Ev>:
#include "stm32f4xx_ll_dma.h"

#include "TimInfo.hpp"


TimInfo::TimInfo() {
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	4a04      	ldr	r2, [pc, #16]	; (80072cc <_ZN7TimInfoC1Ev+0x1c>)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4618      	mov	r0, r3
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	0800cec4 	.word	0x0800cec4

080072d0 <_ZN7TimInfoD1Ev>:

TimInfo::~TimInfo() {
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	4a04      	ldr	r2, [pc, #16]	; (80072ec <_ZN7TimInfoD1Ev+0x1c>)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4618      	mov	r0, r3
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr
 80072ec:	0800cec4 	.word	0x0800cec4

080072f0 <_ZN7TimInfoD0Ev>:
TimInfo::~TimInfo() {
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
}
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f7ff ffe9 	bl	80072d0 <_ZN7TimInfoD1Ev>
 80072fe:	2114      	movs	r1, #20
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f002 f894 	bl	800942e <_ZdlPvj>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4618      	mov	r0, r3
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <_ZN7TimInfo4InitEP11TIM_TypeDef>:

void TimInfo::Init(TIM_TypeDef *pTIMx) {
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]

	if(pTIMx == NULL) {
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d100      	bne.n	8007322 <_ZN7TimInfo4InitEP11TIM_TypeDef+0x12>
		//null ptr error
		while(1){}
 8007320:	e7fe      	b.n	8007320 <_ZN7TimInfo4InitEP11TIM_TypeDef+0x10>
	}

	mReload = 0;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	609a      	str	r2, [r3, #8]
	mStartTime = 0;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	60da      	str	r2, [r3, #12]
	mStopTime = 0;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	611a      	str	r2, [r3, #16]

	mTIMx = pTIMx;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	605a      	str	r2, [r3, #4]
	mReload = LL_TIM_GetAutoReload(pTIMx);
 800733a:	6838      	ldr	r0, [r7, #0]
 800733c:	f7ff ffac 	bl	8007298 <LL_TIM_GetAutoReload>
 8007340:	4603      	mov	r3, r0
 8007342:	461a      	mov	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	609a      	str	r2, [r3, #8]

}
 8007348:	bf00      	nop
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	460b      	mov	r3, r1
 800735a:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800735c:	78fa      	ldrb	r2, [r7, #3]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	605a      	str	r2, [r3, #4]
}
 8007362:	bf00      	nop
 8007364:	370c      	adds	r7, #12
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
	...

08007370 <_ZN4UARTC1Ev>:
#include "stm32f4xx_ll_dma.h"

#include <string>


UART::UART() {
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	4a08      	ldr	r2, [pc, #32]	; (800739c <_ZN4UARTC1Ev+0x2c>)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	601a      	str	r2, [r3, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	3304      	adds	r3, #4
 8007382:	4618      	mov	r0, r3
 8007384:	f002 f9d0 	bl	8009728 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	// TODO Auto-generated constructor stub

	mTimeout = 1000;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800738e:	621a      	str	r2, [r3, #32]
}
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4618      	mov	r0, r3
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	0800ced4 	.word	0x0800ced4

080073a0 <_ZN4UARTD1Ev>:

UART::UART(int pTimeout) : mTimeout(pTimeout) {}

UART::~UART() {
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	4a06      	ldr	r2, [pc, #24]	; (80073c4 <_ZN4UARTD1Ev+0x24>)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	601a      	str	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	3304      	adds	r3, #4
 80073b2:	4618      	mov	r0, r3
 80073b4:	f002 f9bf 	bl	8009736 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	// TODO Auto-generated destructor stub
}
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4618      	mov	r0, r3
 80073bc:	3708      	adds	r7, #8
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	0800ced4 	.word	0x0800ced4

080073c8 <_ZN4UARTD0Ev>:
UART::~UART() {
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
}
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f7ff ffe5 	bl	80073a0 <_ZN4UARTD1Ev>
 80073d6:	2124      	movs	r1, #36	; 0x24
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f002 f828 	bl	800942e <_ZdlPvj>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4618      	mov	r0, r3
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <_ZN4UART8TransmitENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	for(int i = 0; *(str + i) != '/0'; i++){
		LL_USART_TransmitData8(USART2, *(str + i));
	}
}

void UART::Transmit(std::string	pStr){
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
	mStr = pStr;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	3304      	adds	r3, #4
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f002 f9a2 	bl	8009742 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	const char* str = mStr.c_str();
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	3304      	adds	r3, #4
 8007402:	4618      	mov	r0, r3
 8007404:	f002 f9e2 	bl	80097cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8007408:	60b8      	str	r0, [r7, #8]
	for(int i = 0; *(str + i) != '/0'; i++){
 800740a:	2300      	movs	r3, #0
 800740c:	60fb      	str	r3, [r7, #12]
		LL_USART_TransmitData8(USART2, *(str + i));
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	4413      	add	r3, r2
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	4619      	mov	r1, r3
 8007418:	4803      	ldr	r0, [pc, #12]	; (8007428 <_ZN4UART8TransmitENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x40>)
 800741a:	f7ff ff99 	bl	8007350 <LL_USART_TransmitData8>
	for(int i = 0; *(str + i) != '/0'; i++){
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	3301      	adds	r3, #1
 8007422:	60fb      	str	r3, [r7, #12]
		LL_USART_TransmitData8(USART2, *(str + i));
 8007424:	e7f3      	b.n	800740e <_ZN4UART8TransmitENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x26>
 8007426:	bf00      	nop
 8007428:	40004400 	.word	0x40004400

0800742c <_ZN6UiCtrlC1Ev>:
 * (逆に機能が動作するClassに個別にこれらを処理する関数を持たせると、カプセル化しにくい。)
 */

#include "UiCtrl.hpp"

UiCtrl::UiCtrl() {
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	4a06      	ldr	r2, [pc, #24]	; (8007450 <_ZN6UiCtrlC1Ev+0x24>)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	isONBtnState = false;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	711a      	strb	r2, [r3, #4]
}
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4618      	mov	r0, r3
 8007444:	370c      	adds	r7, #12
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	0800cee4 	.word	0x0800cee4

08007454 <_ZN6UiCtrlD1Ev>:

UiCtrl::~UiCtrl() {
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	4a04      	ldr	r2, [pc, #16]	; (8007470 <_ZN6UiCtrlD1Ev+0x1c>)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4618      	mov	r0, r3
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr
 8007470:	0800cee4 	.word	0x0800cee4

08007474 <_ZN6UiCtrlD0Ev>:
UiCtrl::~UiCtrl() {
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
}
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f7ff ffe9 	bl	8007454 <_ZN6UiCtrlD1Ev>
 8007482:	2108      	movs	r1, #8
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f001 ffd2 	bl	800942e <_ZdlPvj>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4618      	mov	r0, r3
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <_ZN6UiCtrl9BtnToggleEv>:

void UiCtrl::BtnToggle(){
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
	if(isONBtnState == true){//ONの時
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	791b      	ldrb	r3, [r3, #4]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d003      	beq.n	80074ac <_ZN6UiCtrl9BtnToggleEv+0x18>
		isONBtnState = false;//offにするタスク
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	711a      	strb	r2, [r3, #4]
	} else {
		isONBtnState = true;//ONにするタスク
	}
}
 80074aa:	e002      	b.n	80074b2 <_ZN6UiCtrl9BtnToggleEv+0x1e>
		isONBtnState = true;//ONにするタスク
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	711a      	strb	r2, [r3, #4]
}
 80074b2:	bf00      	nop
 80074b4:	370c      	adds	r7, #12
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <_ZN6UiCtrl9BtnActOFFEv>:

void UiCtrl::BtnActOFF(){
 80074be:	b480      	push	{r7}
 80074c0:	b083      	sub	sp, #12
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
	isONBtnState = false;//問答無用でoffにするタスク
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	711a      	strb	r2, [r3, #4]
}
 80074cc:	bf00      	nop
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <_ZN6UiCtrl8getStateEv>:
void UiCtrl::BtnActON(){
	isONBtnState = true;//問答無用でonにするタスク
}


bool UiCtrl::getState(void){return isONBtnState;}
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	791b      	ldrb	r3, [r3, #4]
 80074e4:	4618      	mov	r0, r3
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <__NVIC_GetPriorityGrouping>:
{
 80074f0:	b480      	push	{r7}
 80074f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80074f4:	4b04      	ldr	r3, [pc, #16]	; (8007508 <__NVIC_GetPriorityGrouping+0x18>)
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	0a1b      	lsrs	r3, r3, #8
 80074fa:	f003 0307 	and.w	r3, r3, #7
}
 80074fe:	4618      	mov	r0, r3
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr
 8007508:	e000ed00 	.word	0xe000ed00

0800750c <__NVIC_EnableIRQ>:
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	4603      	mov	r3, r0
 8007514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800751a:	2b00      	cmp	r3, #0
 800751c:	db0b      	blt.n	8007536 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800751e:	79fb      	ldrb	r3, [r7, #7]
 8007520:	f003 021f 	and.w	r2, r3, #31
 8007524:	4907      	ldr	r1, [pc, #28]	; (8007544 <__NVIC_EnableIRQ+0x38>)
 8007526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800752a:	095b      	lsrs	r3, r3, #5
 800752c:	2001      	movs	r0, #1
 800752e:	fa00 f202 	lsl.w	r2, r0, r2
 8007532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007536:	bf00      	nop
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	e000e100 	.word	0xe000e100

08007548 <__NVIC_SetPriority>:
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	4603      	mov	r3, r0
 8007550:	6039      	str	r1, [r7, #0]
 8007552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007558:	2b00      	cmp	r3, #0
 800755a:	db0a      	blt.n	8007572 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	b2da      	uxtb	r2, r3
 8007560:	490c      	ldr	r1, [pc, #48]	; (8007594 <__NVIC_SetPriority+0x4c>)
 8007562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007566:	0112      	lsls	r2, r2, #4
 8007568:	b2d2      	uxtb	r2, r2
 800756a:	440b      	add	r3, r1
 800756c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007570:	e00a      	b.n	8007588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	b2da      	uxtb	r2, r3
 8007576:	4908      	ldr	r1, [pc, #32]	; (8007598 <__NVIC_SetPriority+0x50>)
 8007578:	79fb      	ldrb	r3, [r7, #7]
 800757a:	f003 030f 	and.w	r3, r3, #15
 800757e:	3b04      	subs	r3, #4
 8007580:	0112      	lsls	r2, r2, #4
 8007582:	b2d2      	uxtb	r2, r2
 8007584:	440b      	add	r3, r1
 8007586:	761a      	strb	r2, [r3, #24]
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr
 8007594:	e000e100 	.word	0xe000e100
 8007598:	e000ed00 	.word	0xe000ed00

0800759c <NVIC_EncodePriority>:
{
 800759c:	b480      	push	{r7}
 800759e:	b089      	sub	sp, #36	; 0x24
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f003 0307 	and.w	r3, r3, #7
 80075ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	f1c3 0307 	rsb	r3, r3, #7
 80075b6:	2b04      	cmp	r3, #4
 80075b8:	bf28      	it	cs
 80075ba:	2304      	movcs	r3, #4
 80075bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	3304      	adds	r3, #4
 80075c2:	2b06      	cmp	r3, #6
 80075c4:	d902      	bls.n	80075cc <NVIC_EncodePriority+0x30>
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	3b03      	subs	r3, #3
 80075ca:	e000      	b.n	80075ce <NVIC_EncodePriority+0x32>
 80075cc:	2300      	movs	r3, #0
 80075ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	fa02 f303 	lsl.w	r3, r2, r3
 80075da:	43da      	mvns	r2, r3
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	401a      	ands	r2, r3
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80075e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	fa01 f303 	lsl.w	r3, r1, r3
 80075ee:	43d9      	mvns	r1, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075f4:	4313      	orrs	r3, r2
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3724      	adds	r7, #36	; 0x24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr

08007602 <LL_ADC_REG_SetSequencerRanks>:
{
 8007602:	b490      	push	{r4, r7}
 8007604:	b086      	sub	sp, #24
 8007606:	af00      	add	r7, sp, #0
 8007608:	60f8      	str	r0, [r7, #12]
 800760a:	60b9      	str	r1, [r7, #8]
 800760c:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	332c      	adds	r3, #44	; 0x2c
 8007612:	4619      	mov	r1, r3
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800761a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800761e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007620:	697a      	ldr	r2, [r7, #20]
 8007622:	fa92 f2a2 	rbit	r2, r2
 8007626:	613a      	str	r2, [r7, #16]
  return result;
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	fab2 f282 	clz	r2, r2
 800762e:	b2d2      	uxtb	r2, r2
 8007630:	40d3      	lsrs	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	440b      	add	r3, r1
 8007636:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8007638:	6822      	ldr	r2, [r4, #0]
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	f003 031f 	and.w	r3, r3, #31
 8007640:	211f      	movs	r1, #31
 8007642:	fa01 f303 	lsl.w	r3, r1, r3
 8007646:	43db      	mvns	r3, r3
 8007648:	401a      	ands	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f003 011f 	and.w	r1, r3, #31
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	f003 031f 	and.w	r3, r3, #31
 8007656:	fa01 f303 	lsl.w	r3, r1, r3
 800765a:	4313      	orrs	r3, r2
 800765c:	6023      	str	r3, [r4, #0]
}
 800765e:	bf00      	nop
 8007660:	3718      	adds	r7, #24
 8007662:	46bd      	mov	sp, r7
 8007664:	bc90      	pop	{r4, r7}
 8007666:	4770      	bx	lr

08007668 <LL_ADC_REG_SetFlagEndOfConversion>:
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	431a      	orrs	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	609a      	str	r2, [r3, #8]
}
 8007682:	bf00      	nop
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr

0800768e <LL_ADC_INJ_SetSequencerRanks>:
{
 800768e:	b490      	push	{r4, r7}
 8007690:	b084      	sub	sp, #16
 8007692:	af00      	add	r7, sp, #0
 8007694:	60f8      	str	r0, [r7, #12]
 8007696:	60b9      	str	r1, [r7, #8]
 8007698:	607a      	str	r2, [r7, #4]
  register uint32_t tmpreg1 = (READ_BIT(ADCx->JSQR, ADC_JSQR_JL) >> ADC_JSQR_JL_Pos) + 1U;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769e:	0d1b      	lsrs	r3, r3, #20
 80076a0:	f003 0303 	and.w	r3, r3, #3
 80076a4:	1c5c      	adds	r4, r3, #1
  MODIFY_REG(ADCx->JSQR,
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	b2d9      	uxtb	r1, r3
 80076ae:	b2e3      	uxtb	r3, r4
 80076b0:	1acb      	subs	r3, r1, r3
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	3303      	adds	r3, #3
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	4619      	mov	r1, r3
 80076ba:	460b      	mov	r3, r1
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	440b      	add	r3, r1
 80076c0:	211f      	movs	r1, #31
 80076c2:	fa01 f303 	lsl.w	r3, r1, r3
 80076c6:	43db      	mvns	r3, r3
 80076c8:	401a      	ands	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f003 011f 	and.w	r1, r3, #31
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	b2d8      	uxtb	r0, r3
 80076d4:	b2e3      	uxtb	r3, r4
 80076d6:	1ac3      	subs	r3, r0, r3
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	3303      	adds	r3, #3
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	4618      	mov	r0, r3
 80076e0:	4603      	mov	r3, r0
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	4403      	add	r3, r0
 80076e6:	fa01 f303 	lsl.w	r3, r1, r3
 80076ea:	431a      	orrs	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	639a      	str	r2, [r3, #56]	; 0x38
}
 80076f0:	bf00      	nop
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bc90      	pop	{r4, r7}
 80076f8:	4770      	bx	lr

080076fa <LL_ADC_INJ_SetOffset>:
{
 80076fa:	b490      	push	{r4, r7}
 80076fc:	b086      	sub	sp, #24
 80076fe:	af00      	add	r7, sp, #0
 8007700:	60f8      	str	r0, [r7, #12]
 8007702:	60b9      	str	r1, [r7, #8]
 8007704:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JOFR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JOFRX_REGOFFSET_MASK));
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	3314      	adds	r3, #20
 800770a:	4619      	mov	r1, r3
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007712:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8007716:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	fa92 f2a2 	rbit	r2, r2
 800771e:	613a      	str	r2, [r7, #16]
  return result;
 8007720:	693a      	ldr	r2, [r7, #16]
 8007722:	fab2 f282 	clz	r2, r2
 8007726:	b2d2      	uxtb	r2, r2
 8007728:	40d3      	lsrs	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	440b      	add	r3, r1
 800772e:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007736:	f023 030f 	bic.w	r3, r3, #15
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	4313      	orrs	r3, r2
 800773e:	6023      	str	r3, [r4, #0]
}
 8007740:	bf00      	nop
 8007742:	3718      	adds	r7, #24
 8007744:	46bd      	mov	sp, r7
 8007746:	bc90      	pop	{r4, r7}
 8007748:	4770      	bx	lr

0800774a <LL_ADC_SetChannelSamplingTime>:
{
 800774a:	b490      	push	{r4, r7}
 800774c:	b08a      	sub	sp, #40	; 0x28
 800774e:	af00      	add	r7, sp, #0
 8007750:	60f8      	str	r0, [r7, #12]
 8007752:	60b9      	str	r1, [r7, #8]
 8007754:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	330c      	adds	r3, #12
 800775a:	4619      	mov	r1, r3
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007762:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007766:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007768:	697a      	ldr	r2, [r7, #20]
 800776a:	fa92 f2a2 	rbit	r2, r2
 800776e:	613a      	str	r2, [r7, #16]
  return result;
 8007770:	693a      	ldr	r2, [r7, #16]
 8007772:	fab2 f282 	clz	r2, r2
 8007776:	b2d2      	uxtb	r2, r2
 8007778:	40d3      	lsrs	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	440b      	add	r3, r1
 800777e:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8007780:	6822      	ldr	r2, [r4, #0]
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8007788:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800778c:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800778e:	69f9      	ldr	r1, [r7, #28]
 8007790:	fa91 f1a1 	rbit	r1, r1
 8007794:	61b9      	str	r1, [r7, #24]
  return result;
 8007796:	69b9      	ldr	r1, [r7, #24]
 8007798:	fab1 f181 	clz	r1, r1
 800779c:	b2c9      	uxtb	r1, r1
 800779e:	40cb      	lsrs	r3, r1
 80077a0:	2107      	movs	r1, #7
 80077a2:	fa01 f303 	lsl.w	r3, r1, r3
 80077a6:	43db      	mvns	r3, r3
 80077a8:	401a      	ands	r2, r3
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80077b0:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80077b4:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077b8:	fa91 f1a1 	rbit	r1, r1
 80077bc:	6239      	str	r1, [r7, #32]
  return result;
 80077be:	6a39      	ldr	r1, [r7, #32]
 80077c0:	fab1 f181 	clz	r1, r1
 80077c4:	b2c9      	uxtb	r1, r1
 80077c6:	40cb      	lsrs	r3, r1
 80077c8:	6879      	ldr	r1, [r7, #4]
 80077ca:	fa01 f303 	lsl.w	r3, r1, r3
 80077ce:	4313      	orrs	r3, r2
 80077d0:	6023      	str	r3, [r4, #0]
}
 80077d2:	bf00      	nop
 80077d4:	3728      	adds	r7, #40	; 0x28
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bc90      	pop	{r4, r7}
 80077da:	4770      	bx	lr

080077dc <LL_ADC_INJ_StartConversionExtTrig>:
  *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISINGFALLING
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StartConversionExtTrig(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	689a      	ldr	r2, [r3, #8]
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	431a      	orrs	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	609a      	str	r2, [r3, #8]
}
 80077f2:	bf00      	nop
 80077f4:	370c      	adds	r7, #12
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <LL_ADC_DisableIT_EOCS>:
  * @rmtoll CR1      EOCIE          LL_ADC_DisableIT_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
 80077fe:	b480      	push	{r7}
 8007800:	b083      	sub	sp, #12
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	f023 0220 	bic.w	r2, r3, #32
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	605a      	str	r2, [r3, #4]
}
 8007812:	bf00      	nop
 8007814:	370c      	adds	r7, #12
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr

0800781e <LL_ADC_DisableIT_JEOS>:
  * @rmtoll CR1      JEOCIE         LL_ADC_EnableIT_JEOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOS(ADC_TypeDef *ADCx)
{
 800781e:	b480      	push	{r7}
 8007820:	b083      	sub	sp, #12
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	605a      	str	r2, [r3, #4]
}
 8007832:	bf00      	nop
 8007834:	370c      	adds	r7, #12
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
	...

08007840 <LL_AHB1_GRP1_EnableClock>:
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8007848:	4b08      	ldr	r3, [pc, #32]	; (800786c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800784a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800784c:	4907      	ldr	r1, [pc, #28]	; (800786c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4313      	orrs	r3, r2
 8007852:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8007854:	4b05      	ldr	r3, [pc, #20]	; (800786c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007856:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4013      	ands	r3, r2
 800785c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800785e:	68fb      	ldr	r3, [r7, #12]
}
 8007860:	bf00      	nop
 8007862:	3714      	adds	r7, #20
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	40023800 	.word	0x40023800

08007870 <LL_APB2_GRP1_EnableClock>:
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8007878:	4b08      	ldr	r3, [pc, #32]	; (800789c <LL_APB2_GRP1_EnableClock+0x2c>)
 800787a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800787c:	4907      	ldr	r1, [pc, #28]	; (800789c <LL_APB2_GRP1_EnableClock+0x2c>)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4313      	orrs	r3, r2
 8007882:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007884:	4b05      	ldr	r3, [pc, #20]	; (800789c <LL_APB2_GRP1_EnableClock+0x2c>)
 8007886:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4013      	ands	r3, r2
 800788c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800788e:	68fb      	ldr	r3, [r7, #12]
}
 8007890:	bf00      	nop
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr
 800789c:	40023800 	.word	0x40023800

080078a0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b096      	sub	sp, #88	; 0x58
 80078a4:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80078a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80078aa:	2200      	movs	r2, #0
 80078ac:	601a      	str	r2, [r3, #0]
 80078ae:	605a      	str	r2, [r3, #4]
 80078b0:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80078b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80078b6:	2200      	movs	r2, #0
 80078b8:	601a      	str	r2, [r3, #0]
 80078ba:	605a      	str	r2, [r3, #4]
 80078bc:	609a      	str	r2, [r3, #8]
 80078be:	60da      	str	r2, [r3, #12]
 80078c0:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80078c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80078c6:	2200      	movs	r2, #0
 80078c8:	601a      	str	r2, [r3, #0]
 80078ca:	605a      	str	r2, [r3, #4]
 80078cc:	609a      	str	r2, [r3, #8]
 80078ce:	60da      	str	r2, [r3, #12]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 80078d0:	f107 0318 	add.w	r3, r7, #24
 80078d4:	2200      	movs	r2, #0
 80078d6:	601a      	str	r2, [r3, #0]
 80078d8:	605a      	str	r2, [r3, #4]
 80078da:	609a      	str	r2, [r3, #8]
 80078dc:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078de:	463b      	mov	r3, r7
 80078e0:	2200      	movs	r2, #0
 80078e2:	601a      	str	r2, [r3, #0]
 80078e4:	605a      	str	r2, [r3, #4]
 80078e6:	609a      	str	r2, [r3, #8]
 80078e8:	60da      	str	r2, [r3, #12]
 80078ea:	611a      	str	r2, [r3, #16]
 80078ec:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80078ee:	f44f 7080 	mov.w	r0, #256	; 0x100
 80078f2:	f7ff ffbd 	bl	8007870 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80078f6:	2004      	movs	r0, #4
 80078f8:	f7ff ffa2 	bl	8007840 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80078fc:	2001      	movs	r0, #1
 80078fe:	f7ff ff9f 	bl	8007840 <LL_AHB1_GRP1_EnableClock>
  PC1   ------> ADC1_IN11
  PC2   ------> ADC1_IN12
  PA0-WKUP   ------> ADC1_IN0
  PA1   ------> ADC1_IN1 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 8007902:	2307      	movs	r3, #7
 8007904:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8007906:	2303      	movs	r3, #3
 8007908:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800790a:	2300      	movs	r3, #0
 800790c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800790e:	463b      	mov	r3, r7
 8007910:	4619      	mov	r1, r3
 8007912:	4869      	ldr	r0, [pc, #420]	; (8007ab8 <MX_ADC1_Init+0x218>)
 8007914:	f7fb faa3 	bl	8002e5e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8007918:	2303      	movs	r3, #3
 800791a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800791c:	2303      	movs	r3, #3
 800791e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007920:	2300      	movs	r3, #0
 8007922:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007924:	463b      	mov	r3, r7
 8007926:	4619      	mov	r1, r3
 8007928:	4864      	ldr	r0, [pc, #400]	; (8007abc <MX_ADC1_Init+0x21c>)
 800792a:	f7fb fa98 	bl	8002e5e <LL_GPIO_Init>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 800792e:	f7ff fddf 	bl	80074f0 <__NVIC_GetPriorityGrouping>
 8007932:	4603      	mov	r3, r0
 8007934:	2200      	movs	r2, #0
 8007936:	2102      	movs	r1, #2
 8007938:	4618      	mov	r0, r3
 800793a:	f7ff fe2f 	bl	800759c <NVIC_EncodePriority>
 800793e:	4603      	mov	r3, r0
 8007940:	4619      	mov	r1, r3
 8007942:	2012      	movs	r0, #18
 8007944:	f7ff fe00 	bl	8007548 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 8007948:	2012      	movs	r0, #18
 800794a:	f7ff fddf 	bl	800750c <__NVIC_EnableIRQ>

  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800794e:	2300      	movs	r3, #0
 8007950:	64fb      	str	r3, [r7, #76]	; 0x4c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8007952:	2300      	movs	r3, #0
 8007954:	653b      	str	r3, [r7, #80]	; 0x50
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8007956:	f44f 7380 	mov.w	r3, #256	; 0x100
 800795a:	657b      	str	r3, [r7, #84]	; 0x54
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800795c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007960:	4619      	mov	r1, r3
 8007962:	4857      	ldr	r0, [pc, #348]	; (8007ac0 <MX_ADC1_Init+0x220>)
 8007964:	f7fa ffae 	bl	80028c4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8007968:	2300      	movs	r3, #0
 800796a:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 800796c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007970:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8007972:	2300      	movs	r3, #0
 8007974:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8007976:	2300      	movs	r3, #0
 8007978:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 800797a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800797e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8007980:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007984:	4619      	mov	r1, r3
 8007986:	484e      	ldr	r0, [pc, #312]	; (8007ac0 <MX_ADC1_Init+0x220>)
 8007988:	f7fa ffc8 	bl	800291c <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 800798c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007990:	484b      	ldr	r0, [pc, #300]	; (8007ac0 <MX_ADC1_Init+0x220>)
 8007992:	f7ff fe69 	bl	8007668 <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC1);
 8007996:	484a      	ldr	r0, [pc, #296]	; (8007ac0 <MX_ADC1_Init+0x220>)
 8007998:	f7ff ff31 	bl	80077fe <LL_ADC_DisableIT_EOCS>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 800799c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80079a0:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80079a2:	2300      	movs	r3, #0
 80079a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80079a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80079aa:	4619      	mov	r1, r3
 80079ac:	4845      	ldr	r0, [pc, #276]	; (8007ac4 <MX_ADC1_Init+0x224>)
 80079ae:	f7fa ff41 	bl	8002834 <LL_ADC_CommonInit>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 80079b2:	4a45      	ldr	r2, [pc, #276]	; (8007ac8 <MX_ADC1_Init+0x228>)
 80079b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80079b8:	4841      	ldr	r0, [pc, #260]	; (8007ac0 <MX_ADC1_Init+0x220>)
 80079ba:	f7ff fe22 	bl	8007602 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_28CYCLES);
 80079be:	2202      	movs	r2, #2
 80079c0:	4941      	ldr	r1, [pc, #260]	; (8007ac8 <MX_ADC1_Init+0x228>)
 80079c2:	483f      	ldr	r0, [pc, #252]	; (8007ac0 <MX_ADC1_Init+0x220>)
 80079c4:	f7ff fec1 	bl	800774a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_12);
 80079c8:	4a40      	ldr	r2, [pc, #256]	; (8007acc <MX_ADC1_Init+0x22c>)
 80079ca:	f240 2105 	movw	r1, #517	; 0x205
 80079ce:	483c      	ldr	r0, [pc, #240]	; (8007ac0 <MX_ADC1_Init+0x220>)
 80079d0:	f7ff fe17 	bl	8007602 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_28CYCLES);
 80079d4:	2202      	movs	r2, #2
 80079d6:	493d      	ldr	r1, [pc, #244]	; (8007acc <MX_ADC1_Init+0x22c>)
 80079d8:	4839      	ldr	r0, [pc, #228]	; (8007ac0 <MX_ADC1_Init+0x220>)
 80079da:	f7ff feb6 	bl	800774a <LL_ADC_SetChannelSamplingTime>
  /** Configure Injected Channel 
  */
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 80079de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80079e2:	61bb      	str	r3, [r7, #24]
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 80079e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80079e8:	61fb      	str	r3, [r7, #28]
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_1RANK;
 80079ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079ee:	623b      	str	r3, [r7, #32]
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 80079f0:	2300      	movs	r3, #0
 80079f2:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 80079f4:	f107 0318 	add.w	r3, r7, #24
 80079f8:	4619      	mov	r1, r3
 80079fa:	4831      	ldr	r0, [pc, #196]	; (8007ac0 <MX_ADC1_Init+0x220>)
 80079fc:	f7fa ffd6 	bl	80029ac <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 8007a00:	482f      	ldr	r0, [pc, #188]	; (8007ac0 <MX_ADC1_Init+0x220>)
 8007a02:	f7ff ff0c 	bl	800781e <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_0);
 8007a06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	482c      	ldr	r0, [pc, #176]	; (8007ac0 <MX_ADC1_Init+0x220>)
 8007a0e:	f7ff fe3e 	bl	800768e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 8007a12:	2200      	movs	r2, #0
 8007a14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007a18:	4829      	ldr	r0, [pc, #164]	; (8007ac0 <MX_ADC1_Init+0x220>)
 8007a1a:	f7ff fe96 	bl	800774a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_1, 0);
 8007a1e:	2200      	movs	r2, #0
 8007a20:	2101      	movs	r1, #1
 8007a22:	4827      	ldr	r0, [pc, #156]	; (8007ac0 <MX_ADC1_Init+0x220>)
 8007a24:	f7ff fe69 	bl	80076fa <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8007a28:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8007a2c:	4824      	ldr	r0, [pc, #144]	; (8007ac0 <MX_ADC1_Init+0x220>)
 8007a2e:	f7ff fed5 	bl	80077dc <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8007a32:	f107 0318 	add.w	r3, r7, #24
 8007a36:	4619      	mov	r1, r3
 8007a38:	4821      	ldr	r0, [pc, #132]	; (8007ac0 <MX_ADC1_Init+0x220>)
 8007a3a:	f7fa ffb7 	bl	80029ac <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 8007a3e:	4820      	ldr	r0, [pc, #128]	; (8007ac0 <MX_ADC1_Init+0x220>)
 8007a40:	f7ff feed 	bl	800781e <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_11);
 8007a44:	4a22      	ldr	r2, [pc, #136]	; (8007ad0 <MX_ADC1_Init+0x230>)
 8007a46:	f241 1102 	movw	r1, #4354	; 0x1102
 8007a4a:	481d      	ldr	r0, [pc, #116]	; (8007ac0 <MX_ADC1_Init+0x220>)
 8007a4c:	f7ff fe1f 	bl	800768e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 8007a50:	2200      	movs	r2, #0
 8007a52:	491f      	ldr	r1, [pc, #124]	; (8007ad0 <MX_ADC1_Init+0x230>)
 8007a54:	481a      	ldr	r0, [pc, #104]	; (8007ac0 <MX_ADC1_Init+0x220>)
 8007a56:	f7ff fe78 	bl	800774a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_2, 0);
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f241 1102 	movw	r1, #4354	; 0x1102
 8007a60:	4817      	ldr	r0, [pc, #92]	; (8007ac0 <MX_ADC1_Init+0x220>)
 8007a62:	f7ff fe4a 	bl	80076fa <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8007a66:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8007a6a:	4815      	ldr	r0, [pc, #84]	; (8007ac0 <MX_ADC1_Init+0x220>)
 8007a6c:	f7ff feb6 	bl	80077dc <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8007a70:	f107 0318 	add.w	r3, r7, #24
 8007a74:	4619      	mov	r1, r3
 8007a76:	4812      	ldr	r0, [pc, #72]	; (8007ac0 <MX_ADC1_Init+0x220>)
 8007a78:	f7fa ff98 	bl	80029ac <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 8007a7c:	4810      	ldr	r0, [pc, #64]	; (8007ac0 <MX_ADC1_Init+0x220>)
 8007a7e:	f7ff fece 	bl	800781e <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_10);
 8007a82:	220a      	movs	r2, #10
 8007a84:	f242 2103 	movw	r1, #8707	; 0x2203
 8007a88:	480d      	ldr	r0, [pc, #52]	; (8007ac0 <MX_ADC1_Init+0x220>)
 8007a8a:	f7ff fe00 	bl	800768e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_3CYCLES);
 8007a8e:	2200      	movs	r2, #0
 8007a90:	210a      	movs	r1, #10
 8007a92:	480b      	ldr	r0, [pc, #44]	; (8007ac0 <MX_ADC1_Init+0x220>)
 8007a94:	f7ff fe59 	bl	800774a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_3, 0);
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f242 2103 	movw	r1, #8707	; 0x2203
 8007a9e:	4808      	ldr	r0, [pc, #32]	; (8007ac0 <MX_ADC1_Init+0x220>)
 8007aa0:	f7ff fe2b 	bl	80076fa <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8007aa4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8007aa8:	4805      	ldr	r0, [pc, #20]	; (8007ac0 <MX_ADC1_Init+0x220>)
 8007aaa:	f7ff fe97 	bl	80077dc <LL_ADC_INJ_StartConversionExtTrig>

}
 8007aae:	bf00      	nop
 8007ab0:	3758      	adds	r7, #88	; 0x58
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	40020800 	.word	0x40020800
 8007abc:	40020000 	.word	0x40020000
 8007ac0:	40012000 	.word	0x40012000
 8007ac4:	40012300 	.word	0x40012300
 8007ac8:	02300001 	.word	0x02300001
 8007acc:	0060000c 	.word	0x0060000c
 8007ad0:	0030000b 	.word	0x0030000b

08007ad4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b092      	sub	sp, #72	; 0x48
 8007ad8:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8007ada:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007ade:	2200      	movs	r2, #0
 8007ae0:	601a      	str	r2, [r3, #0]
 8007ae2:	605a      	str	r2, [r3, #4]
 8007ae4:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8007ae6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007aea:	2200      	movs	r2, #0
 8007aec:	601a      	str	r2, [r3, #0]
 8007aee:	605a      	str	r2, [r3, #4]
 8007af0:	609a      	str	r2, [r3, #8]
 8007af2:	60da      	str	r2, [r3, #12]
 8007af4:	611a      	str	r2, [r3, #16]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 8007af6:	f107 0318 	add.w	r3, r7, #24
 8007afa:	2200      	movs	r2, #0
 8007afc:	601a      	str	r2, [r3, #0]
 8007afe:	605a      	str	r2, [r3, #4]
 8007b00:	609a      	str	r2, [r3, #8]
 8007b02:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b04:	463b      	mov	r3, r7
 8007b06:	2200      	movs	r2, #0
 8007b08:	601a      	str	r2, [r3, #0]
 8007b0a:	605a      	str	r2, [r3, #4]
 8007b0c:	609a      	str	r2, [r3, #8]
 8007b0e:	60da      	str	r2, [r3, #12]
 8007b10:	611a      	str	r2, [r3, #16]
 8007b12:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC2);
 8007b14:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007b18:	f7ff feaa 	bl	8007870 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8007b1c:	2004      	movs	r0, #4
 8007b1e:	f7ff fe8f 	bl	8007840 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8007b22:	2001      	movs	r0, #1
 8007b24:	f7ff fe8c 	bl	8007840 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8007b28:	2002      	movs	r0, #2
 8007b2a:	f7ff fe89 	bl	8007840 <LL_AHB1_GRP1_EnableClock>
  PC0   ------> ADC2_IN10
  PC1   ------> ADC2_IN11
  PA0-WKUP   ------> ADC2_IN0
  PB1   ------> ADC2_IN9 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8007b32:	2303      	movs	r3, #3
 8007b34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007b36:	2300      	movs	r3, #0
 8007b38:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b3a:	463b      	mov	r3, r7
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	4863      	ldr	r0, [pc, #396]	; (8007ccc <MX_ADC2_Init+0x1f8>)
 8007b40:	f7fb f98d 	bl	8002e5e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8007b44:	2301      	movs	r3, #1
 8007b46:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b50:	463b      	mov	r3, r7
 8007b52:	4619      	mov	r1, r3
 8007b54:	485e      	ldr	r0, [pc, #376]	; (8007cd0 <MX_ADC2_Init+0x1fc>)
 8007b56:	f7fb f982 	bl	8002e5e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007b62:	2300      	movs	r3, #0
 8007b64:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b66:	463b      	mov	r3, r7
 8007b68:	4619      	mov	r1, r3
 8007b6a:	485a      	ldr	r0, [pc, #360]	; (8007cd4 <MX_ADC2_Init+0x200>)
 8007b6c:	f7fb f977 	bl	8002e5e <LL_GPIO_Init>

  /* ADC2 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8007b70:	f7ff fcbe 	bl	80074f0 <__NVIC_GetPriorityGrouping>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2200      	movs	r2, #0
 8007b78:	2102      	movs	r1, #2
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7ff fd0e 	bl	800759c <NVIC_EncodePriority>
 8007b80:	4603      	mov	r3, r0
 8007b82:	4619      	mov	r1, r3
 8007b84:	2012      	movs	r0, #18
 8007b86:	f7ff fcdf 	bl	8007548 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 8007b8a:	2012      	movs	r0, #18
 8007b8c:	f7ff fcbe 	bl	800750c <__NVIC_EnableIRQ>

  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8007b90:	2300      	movs	r3, #0
 8007b92:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8007b94:	2300      	movs	r3, #0
 8007b96:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8007b98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b9c:	647b      	str	r3, [r7, #68]	; 0x44
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8007b9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	484c      	ldr	r0, [pc, #304]	; (8007cd8 <MX_ADC2_Init+0x204>)
 8007ba6:	f7fa fe8d 	bl	80028c4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8007baa:	2300      	movs	r3, #0
 8007bac:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8007bba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bbe:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8007bc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	4844      	ldr	r0, [pc, #272]	; (8007cd8 <MX_ADC2_Init+0x204>)
 8007bc8:	f7fa fea8 	bl	800291c <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC2, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8007bcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007bd0:	4841      	ldr	r0, [pc, #260]	; (8007cd8 <MX_ADC2_Init+0x204>)
 8007bd2:	f7ff fd49 	bl	8007668 <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC2);
 8007bd6:	4840      	ldr	r0, [pc, #256]	; (8007cd8 <MX_ADC2_Init+0x204>)
 8007bd8:	f7ff fe11 	bl	80077fe <LL_ADC_DisableIT_EOCS>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_9);
 8007bdc:	4a3f      	ldr	r2, [pc, #252]	; (8007cdc <MX_ADC2_Init+0x208>)
 8007bde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007be2:	483d      	ldr	r0, [pc, #244]	; (8007cd8 <MX_ADC2_Init+0x204>)
 8007be4:	f7ff fd0d 	bl	8007602 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_3CYCLES);
 8007be8:	2200      	movs	r2, #0
 8007bea:	493c      	ldr	r1, [pc, #240]	; (8007cdc <MX_ADC2_Init+0x208>)
 8007bec:	483a      	ldr	r0, [pc, #232]	; (8007cd8 <MX_ADC2_Init+0x204>)
 8007bee:	f7ff fdac 	bl	800774a <LL_ADC_SetChannelSamplingTime>
  /** Configure Injected Channel 
  */
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8007bf2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007bf6:	61bb      	str	r3, [r7, #24]
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 8007bf8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007bfc:	61fb      	str	r3, [r7, #28]
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_1RANK;
 8007bfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c02:	623b      	str	r3, [r7, #32]
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 8007c04:	2300      	movs	r3, #0
 8007c06:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 8007c08:	f107 0318 	add.w	r3, r7, #24
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	4832      	ldr	r0, [pc, #200]	; (8007cd8 <MX_ADC2_Init+0x204>)
 8007c10:	f7fa fecc 	bl	80029ac <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 8007c14:	4830      	ldr	r0, [pc, #192]	; (8007cd8 <MX_ADC2_Init+0x204>)
 8007c16:	f7ff fe02 	bl	800781e <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_0);
 8007c1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007c1e:	2101      	movs	r1, #1
 8007c20:	482d      	ldr	r0, [pc, #180]	; (8007cd8 <MX_ADC2_Init+0x204>)
 8007c22:	f7ff fd34 	bl	800768e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 8007c26:	2200      	movs	r2, #0
 8007c28:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007c2c:	482a      	ldr	r0, [pc, #168]	; (8007cd8 <MX_ADC2_Init+0x204>)
 8007c2e:	f7ff fd8c 	bl	800774a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_1, 0);
 8007c32:	2200      	movs	r2, #0
 8007c34:	2101      	movs	r1, #1
 8007c36:	4828      	ldr	r0, [pc, #160]	; (8007cd8 <MX_ADC2_Init+0x204>)
 8007c38:	f7ff fd5f 	bl	80076fa <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 8007c3c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8007c40:	4825      	ldr	r0, [pc, #148]	; (8007cd8 <MX_ADC2_Init+0x204>)
 8007c42:	f7ff fdcb 	bl	80077dc <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 8007c46:	f107 0318 	add.w	r3, r7, #24
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	4822      	ldr	r0, [pc, #136]	; (8007cd8 <MX_ADC2_Init+0x204>)
 8007c4e:	f7fa fead 	bl	80029ac <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 8007c52:	4821      	ldr	r0, [pc, #132]	; (8007cd8 <MX_ADC2_Init+0x204>)
 8007c54:	f7ff fde3 	bl	800781e <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_11);
 8007c58:	4a21      	ldr	r2, [pc, #132]	; (8007ce0 <MX_ADC2_Init+0x20c>)
 8007c5a:	f241 1102 	movw	r1, #4354	; 0x1102
 8007c5e:	481e      	ldr	r0, [pc, #120]	; (8007cd8 <MX_ADC2_Init+0x204>)
 8007c60:	f7ff fd15 	bl	800768e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 8007c64:	2200      	movs	r2, #0
 8007c66:	491e      	ldr	r1, [pc, #120]	; (8007ce0 <MX_ADC2_Init+0x20c>)
 8007c68:	481b      	ldr	r0, [pc, #108]	; (8007cd8 <MX_ADC2_Init+0x204>)
 8007c6a:	f7ff fd6e 	bl	800774a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_2, 0);
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f241 1102 	movw	r1, #4354	; 0x1102
 8007c74:	4818      	ldr	r0, [pc, #96]	; (8007cd8 <MX_ADC2_Init+0x204>)
 8007c76:	f7ff fd40 	bl	80076fa <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 8007c7a:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8007c7e:	4816      	ldr	r0, [pc, #88]	; (8007cd8 <MX_ADC2_Init+0x204>)
 8007c80:	f7ff fdac 	bl	80077dc <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel 
  */
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 8007c84:	f107 0318 	add.w	r3, r7, #24
 8007c88:	4619      	mov	r1, r3
 8007c8a:	4813      	ldr	r0, [pc, #76]	; (8007cd8 <MX_ADC2_Init+0x204>)
 8007c8c:	f7fa fe8e 	bl	80029ac <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 8007c90:	4811      	ldr	r0, [pc, #68]	; (8007cd8 <MX_ADC2_Init+0x204>)
 8007c92:	f7ff fdc4 	bl	800781e <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_10);
 8007c96:	220a      	movs	r2, #10
 8007c98:	f242 2103 	movw	r1, #8707	; 0x2203
 8007c9c:	480e      	ldr	r0, [pc, #56]	; (8007cd8 <MX_ADC2_Init+0x204>)
 8007c9e:	f7ff fcf6 	bl	800768e <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_3CYCLES);
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	210a      	movs	r1, #10
 8007ca6:	480c      	ldr	r0, [pc, #48]	; (8007cd8 <MX_ADC2_Init+0x204>)
 8007ca8:	f7ff fd4f 	bl	800774a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_3, 0);
 8007cac:	2200      	movs	r2, #0
 8007cae:	f242 2103 	movw	r1, #8707	; 0x2203
 8007cb2:	4809      	ldr	r0, [pc, #36]	; (8007cd8 <MX_ADC2_Init+0x204>)
 8007cb4:	f7ff fd21 	bl	80076fa <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 8007cb8:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8007cbc:	4806      	ldr	r0, [pc, #24]	; (8007cd8 <MX_ADC2_Init+0x204>)
 8007cbe:	f7ff fd8d 	bl	80077dc <LL_ADC_INJ_StartConversionExtTrig>

}
 8007cc2:	bf00      	nop
 8007cc4:	3748      	adds	r7, #72	; 0x48
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	40020800 	.word	0x40020800
 8007cd0:	40020000 	.word	0x40020000
 8007cd4:	40020400 	.word	0x40020400
 8007cd8:	40012100 	.word	0x40012100
 8007cdc:	03b00009 	.word	0x03b00009
 8007ce0:	0030000b 	.word	0x0030000b

08007ce4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8007cea:	463b      	mov	r3, r7
 8007cec:	2200      	movs	r2, #0
 8007cee:	601a      	str	r2, [r3, #0]
 8007cf0:	605a      	str	r2, [r3, #4]
 8007cf2:	609a      	str	r2, [r3, #8]
 8007cf4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8007cf6:	4b21      	ldr	r3, [pc, #132]	; (8007d7c <MX_ADC3_Init+0x98>)
 8007cf8:	4a21      	ldr	r2, [pc, #132]	; (8007d80 <MX_ADC3_Init+0x9c>)
 8007cfa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007cfc:	4b1f      	ldr	r3, [pc, #124]	; (8007d7c <MX_ADC3_Init+0x98>)
 8007cfe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007d02:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8007d04:	4b1d      	ldr	r3, [pc, #116]	; (8007d7c <MX_ADC3_Init+0x98>)
 8007d06:	2200      	movs	r2, #0
 8007d08:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8007d0a:	4b1c      	ldr	r3, [pc, #112]	; (8007d7c <MX_ADC3_Init+0x98>)
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8007d10:	4b1a      	ldr	r3, [pc, #104]	; (8007d7c <MX_ADC3_Init+0x98>)
 8007d12:	2200      	movs	r2, #0
 8007d14:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8007d16:	4b19      	ldr	r3, [pc, #100]	; (8007d7c <MX_ADC3_Init+0x98>)
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007d1e:	4b17      	ldr	r3, [pc, #92]	; (8007d7c <MX_ADC3_Init+0x98>)
 8007d20:	2200      	movs	r2, #0
 8007d22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007d24:	4b15      	ldr	r3, [pc, #84]	; (8007d7c <MX_ADC3_Init+0x98>)
 8007d26:	4a17      	ldr	r2, [pc, #92]	; (8007d84 <MX_ADC3_Init+0xa0>)
 8007d28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007d2a:	4b14      	ldr	r3, [pc, #80]	; (8007d7c <MX_ADC3_Init+0x98>)
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8007d30:	4b12      	ldr	r3, [pc, #72]	; (8007d7c <MX_ADC3_Init+0x98>)
 8007d32:	2201      	movs	r2, #1
 8007d34:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8007d36:	4b11      	ldr	r3, [pc, #68]	; (8007d7c <MX_ADC3_Init+0x98>)
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007d3e:	4b0f      	ldr	r3, [pc, #60]	; (8007d7c <MX_ADC3_Init+0x98>)
 8007d40:	2201      	movs	r2, #1
 8007d42:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8007d44:	480d      	ldr	r0, [pc, #52]	; (8007d7c <MX_ADC3_Init+0x98>)
 8007d46:	f7f9 f991 	bl	800106c <HAL_ADC_Init>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d001      	beq.n	8007d54 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8007d50:	f000 faa6 	bl	80082a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8007d54:	230d      	movs	r3, #13
 8007d56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8007d60:	463b      	mov	r3, r7
 8007d62:	4619      	mov	r1, r3
 8007d64:	4805      	ldr	r0, [pc, #20]	; (8007d7c <MX_ADC3_Init+0x98>)
 8007d66:	f7f9 fb23 	bl	80013b0 <HAL_ADC_ConfigChannel>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8007d70:	f000 fa96 	bl	80082a0 <Error_Handler>
  }

}
 8007d74:	bf00      	nop
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	200003e0 	.word	0x200003e0
 8007d80:	40012200 	.word	0x40012200
 8007d84:	0f000001 	.word	0x0f000001

08007d88 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b08a      	sub	sp, #40	; 0x28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d90:	f107 0314 	add.w	r3, r7, #20
 8007d94:	2200      	movs	r2, #0
 8007d96:	601a      	str	r2, [r3, #0]
 8007d98:	605a      	str	r2, [r3, #4]
 8007d9a:	609a      	str	r2, [r3, #8]
 8007d9c:	60da      	str	r2, [r3, #12]
 8007d9e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a1b      	ldr	r2, [pc, #108]	; (8007e14 <HAL_ADC_MspInit+0x8c>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d12f      	bne.n	8007e0a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8007daa:	2300      	movs	r3, #0
 8007dac:	613b      	str	r3, [r7, #16]
 8007dae:	4b1a      	ldr	r3, [pc, #104]	; (8007e18 <HAL_ADC_MspInit+0x90>)
 8007db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007db2:	4a19      	ldr	r2, [pc, #100]	; (8007e18 <HAL_ADC_MspInit+0x90>)
 8007db4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007db8:	6453      	str	r3, [r2, #68]	; 0x44
 8007dba:	4b17      	ldr	r3, [pc, #92]	; (8007e18 <HAL_ADC_MspInit+0x90>)
 8007dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dc2:	613b      	str	r3, [r7, #16]
 8007dc4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	60fb      	str	r3, [r7, #12]
 8007dca:	4b13      	ldr	r3, [pc, #76]	; (8007e18 <HAL_ADC_MspInit+0x90>)
 8007dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dce:	4a12      	ldr	r2, [pc, #72]	; (8007e18 <HAL_ADC_MspInit+0x90>)
 8007dd0:	f043 0304 	orr.w	r3, r3, #4
 8007dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8007dd6:	4b10      	ldr	r3, [pc, #64]	; (8007e18 <HAL_ADC_MspInit+0x90>)
 8007dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dda:	f003 0304 	and.w	r3, r3, #4
 8007dde:	60fb      	str	r3, [r7, #12]
 8007de0:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration    
    PC3     ------> ADC3_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007de2:	2308      	movs	r3, #8
 8007de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007de6:	2303      	movs	r3, #3
 8007de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dea:	2300      	movs	r3, #0
 8007dec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007dee:	f107 0314 	add.w	r3, r7, #20
 8007df2:	4619      	mov	r1, r3
 8007df4:	4809      	ldr	r0, [pc, #36]	; (8007e1c <HAL_ADC_MspInit+0x94>)
 8007df6:	f7f9 fe25 	bl	8001a44 <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	2102      	movs	r1, #2
 8007dfe:	2012      	movs	r0, #18
 8007e00:	f7f9 fde9 	bl	80019d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8007e04:	2012      	movs	r0, #18
 8007e06:	f7f9 fe02 	bl	8001a0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8007e0a:	bf00      	nop
 8007e0c:	3728      	adds	r7, #40	; 0x28
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	40012200 	.word	0x40012200
 8007e18:	40023800 	.word	0x40023800
 8007e1c:	40020800 	.word	0x40020800

08007e20 <__NVIC_GetPriorityGrouping>:
{
 8007e20:	b480      	push	{r7}
 8007e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e24:	4b04      	ldr	r3, [pc, #16]	; (8007e38 <__NVIC_GetPriorityGrouping+0x18>)
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	0a1b      	lsrs	r3, r3, #8
 8007e2a:	f003 0307 	and.w	r3, r3, #7
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr
 8007e38:	e000ed00 	.word	0xe000ed00

08007e3c <__NVIC_EnableIRQ>:
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	4603      	mov	r3, r0
 8007e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	db0b      	blt.n	8007e66 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e4e:	79fb      	ldrb	r3, [r7, #7]
 8007e50:	f003 021f 	and.w	r2, r3, #31
 8007e54:	4907      	ldr	r1, [pc, #28]	; (8007e74 <__NVIC_EnableIRQ+0x38>)
 8007e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e5a:	095b      	lsrs	r3, r3, #5
 8007e5c:	2001      	movs	r0, #1
 8007e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8007e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007e66:	bf00      	nop
 8007e68:	370c      	adds	r7, #12
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	e000e100 	.word	0xe000e100

08007e78 <__NVIC_SetPriority>:
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	4603      	mov	r3, r0
 8007e80:	6039      	str	r1, [r7, #0]
 8007e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	db0a      	blt.n	8007ea2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	b2da      	uxtb	r2, r3
 8007e90:	490c      	ldr	r1, [pc, #48]	; (8007ec4 <__NVIC_SetPriority+0x4c>)
 8007e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e96:	0112      	lsls	r2, r2, #4
 8007e98:	b2d2      	uxtb	r2, r2
 8007e9a:	440b      	add	r3, r1
 8007e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007ea0:	e00a      	b.n	8007eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	b2da      	uxtb	r2, r3
 8007ea6:	4908      	ldr	r1, [pc, #32]	; (8007ec8 <__NVIC_SetPriority+0x50>)
 8007ea8:	79fb      	ldrb	r3, [r7, #7]
 8007eaa:	f003 030f 	and.w	r3, r3, #15
 8007eae:	3b04      	subs	r3, #4
 8007eb0:	0112      	lsls	r2, r2, #4
 8007eb2:	b2d2      	uxtb	r2, r2
 8007eb4:	440b      	add	r3, r1
 8007eb6:	761a      	strb	r2, [r3, #24]
}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr
 8007ec4:	e000e100 	.word	0xe000e100
 8007ec8:	e000ed00 	.word	0xe000ed00

08007ecc <NVIC_EncodePriority>:
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b089      	sub	sp, #36	; 0x24
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f003 0307 	and.w	r3, r3, #7
 8007ede:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	f1c3 0307 	rsb	r3, r3, #7
 8007ee6:	2b04      	cmp	r3, #4
 8007ee8:	bf28      	it	cs
 8007eea:	2304      	movcs	r3, #4
 8007eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	3304      	adds	r3, #4
 8007ef2:	2b06      	cmp	r3, #6
 8007ef4:	d902      	bls.n	8007efc <NVIC_EncodePriority+0x30>
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	3b03      	subs	r3, #3
 8007efa:	e000      	b.n	8007efe <NVIC_EncodePriority+0x32>
 8007efc:	2300      	movs	r3, #0
 8007efe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0a:	43da      	mvns	r2, r3
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	401a      	ands	r2, r3
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f1e:	43d9      	mvns	r1, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f24:	4313      	orrs	r3, r2
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3724      	adds	r7, #36	; 0x24
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
	...

08007f34 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8007f3e:	4a13      	ldr	r2, [pc, #76]	; (8007f8c <LL_SYSCFG_SetEXTISource+0x58>)
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	3302      	adds	r3, #2
 8007f46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	0c1b      	lsrs	r3, r3, #16
 8007f4e:	43db      	mvns	r3, r3
 8007f50:	ea02 0103 	and.w	r1, r2, r3
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	0c1b      	lsrs	r3, r3, #16
 8007f58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	fa93 f3a3 	rbit	r3, r3
 8007f60:	60bb      	str	r3, [r7, #8]
  return result;
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	fab3 f383 	clz	r3, r3
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	fa03 f202 	lsl.w	r2, r3, r2
 8007f72:	4806      	ldr	r0, [pc, #24]	; (8007f8c <LL_SYSCFG_SetEXTISource+0x58>)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	430a      	orrs	r2, r1
 8007f7a:	3302      	adds	r3, #2
 8007f7c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8007f80:	bf00      	nop
 8007f82:	3714      	adds	r7, #20
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr
 8007f8c:	40013800 	.word	0x40013800

08007f90 <LL_GPIO_SetPinMode>:
{
 8007f90:	b480      	push	{r7}
 8007f92:	b089      	sub	sp, #36	; 0x24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	fa93 f3a3 	rbit	r3, r3
 8007faa:	613b      	str	r3, [r7, #16]
  return result;
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	fab3 f383 	clz	r3, r3
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	005b      	lsls	r3, r3, #1
 8007fb6:	2103      	movs	r1, #3
 8007fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8007fbc:	43db      	mvns	r3, r3
 8007fbe:	401a      	ands	r2, r3
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	fa93 f3a3 	rbit	r3, r3
 8007fca:	61bb      	str	r3, [r7, #24]
  return result;
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	fab3 f383 	clz	r3, r3
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	005b      	lsls	r3, r3, #1
 8007fd6:	6879      	ldr	r1, [r7, #4]
 8007fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8007fdc:	431a      	orrs	r2, r3
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	601a      	str	r2, [r3, #0]
}
 8007fe2:	bf00      	nop
 8007fe4:	3724      	adds	r7, #36	; 0x24
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <LL_GPIO_SetPinPull>:
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b089      	sub	sp, #36	; 0x24
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	60f8      	str	r0, [r7, #12]
 8007ff6:	60b9      	str	r1, [r7, #8]
 8007ff8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	68da      	ldr	r2, [r3, #12]
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	fa93 f3a3 	rbit	r3, r3
 8008008:	613b      	str	r3, [r7, #16]
  return result;
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	fab3 f383 	clz	r3, r3
 8008010:	b2db      	uxtb	r3, r3
 8008012:	005b      	lsls	r3, r3, #1
 8008014:	2103      	movs	r1, #3
 8008016:	fa01 f303 	lsl.w	r3, r1, r3
 800801a:	43db      	mvns	r3, r3
 800801c:	401a      	ands	r2, r3
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	fa93 f3a3 	rbit	r3, r3
 8008028:	61bb      	str	r3, [r7, #24]
  return result;
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	fab3 f383 	clz	r3, r3
 8008030:	b2db      	uxtb	r3, r3
 8008032:	005b      	lsls	r3, r3, #1
 8008034:	6879      	ldr	r1, [r7, #4]
 8008036:	fa01 f303 	lsl.w	r3, r1, r3
 800803a:	431a      	orrs	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	60da      	str	r2, [r3, #12]
}
 8008040:	bf00      	nop
 8008042:	3724      	adds	r7, #36	; 0x24
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	041a      	lsls	r2, r3, #16
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	619a      	str	r2, [r3, #24]
}
 800805e:	bf00      	nop
 8008060:	370c      	adds	r7, #12
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
	...

0800806c <LL_AHB1_GRP1_EnableClock>:
{
 800806c:	b480      	push	{r7}
 800806e:	b085      	sub	sp, #20
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8008074:	4b08      	ldr	r3, [pc, #32]	; (8008098 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008076:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008078:	4907      	ldr	r1, [pc, #28]	; (8008098 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4313      	orrs	r3, r2
 800807e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8008080:	4b05      	ldr	r3, [pc, #20]	; (8008098 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008082:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4013      	ands	r3, r2
 8008088:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800808a:	68fb      	ldr	r3, [r7, #12]
}
 800808c:	bf00      	nop
 800808e:	3714      	adds	r7, #20
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr
 8008098:	40023800 	.word	0x40023800

0800809c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b088      	sub	sp, #32
 80080a0:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80080a2:	f107 0318 	add.w	r3, r7, #24
 80080a6:	2200      	movs	r2, #0
 80080a8:	601a      	str	r2, [r3, #0]
 80080aa:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080ac:	463b      	mov	r3, r7
 80080ae:	2200      	movs	r2, #0
 80080b0:	601a      	str	r2, [r3, #0]
 80080b2:	605a      	str	r2, [r3, #4]
 80080b4:	609a      	str	r2, [r3, #8]
 80080b6:	60da      	str	r2, [r3, #12]
 80080b8:	611a      	str	r2, [r3, #16]
 80080ba:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80080bc:	2004      	movs	r0, #4
 80080be:	f7ff ffd5 	bl	800806c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80080c2:	2080      	movs	r0, #128	; 0x80
 80080c4:	f7ff ffd2 	bl	800806c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80080c8:	2001      	movs	r0, #1
 80080ca:	f7ff ffcf 	bl	800806c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80080ce:	2002      	movs	r0, #2
 80080d0:	f7ff ffcc 	bl	800806c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 80080d4:	2120      	movs	r1, #32
 80080d6:	482c      	ldr	r0, [pc, #176]	; (8008188 <MX_GPIO_Init+0xec>)
 80080d8:	f7ff ffb8 	bl	800804c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12);
 80080dc:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80080e0:	482a      	ldr	r0, [pc, #168]	; (800818c <MX_GPIO_Init+0xf0>)
 80080e2:	f7ff ffb3 	bl	800804c <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80080e6:	492a      	ldr	r1, [pc, #168]	; (8008190 <MX_GPIO_Init+0xf4>)
 80080e8:	2002      	movs	r0, #2
 80080ea:	f7ff ff23 	bl	8007f34 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80080ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80080f2:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80080f4:	2301      	movs	r3, #1
 80080f6:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80080f8:	2300      	movs	r3, #0
 80080fa:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80080fc:	2302      	movs	r3, #2
 80080fe:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8008100:	f107 0318 	add.w	r3, r7, #24
 8008104:	4618      	mov	r0, r3
 8008106:	f7fa fd29 	bl	8002b5c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 800810a:	2200      	movs	r2, #0
 800810c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008110:	481e      	ldr	r0, [pc, #120]	; (800818c <MX_GPIO_Init+0xf0>)
 8008112:	f7ff ff6c 	bl	8007fee <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8008116:	2200      	movs	r2, #0
 8008118:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800811c:	481b      	ldr	r0, [pc, #108]	; (800818c <MX_GPIO_Init+0xf0>)
 800811e:	f7ff ff37 	bl	8007f90 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8008122:	2320      	movs	r3, #32
 8008124:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008126:	2301      	movs	r3, #1
 8008128:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800812a:	2300      	movs	r3, #0
 800812c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800812e:	2300      	movs	r3, #0
 8008130:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008132:	2300      	movs	r3, #0
 8008134:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8008136:	463b      	mov	r3, r7
 8008138:	4619      	mov	r1, r3
 800813a:	4813      	ldr	r0, [pc, #76]	; (8008188 <MX_GPIO_Init+0xec>)
 800813c:	f7fa fe8f 	bl	8002e5e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8008140:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008144:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008146:	2301      	movs	r3, #1
 8008148:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800814a:	2300      	movs	r3, #0
 800814c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800814e:	2300      	movs	r3, #0
 8008150:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008152:	2300      	movs	r3, #0
 8008154:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008156:	463b      	mov	r3, r7
 8008158:	4619      	mov	r1, r3
 800815a:	480c      	ldr	r0, [pc, #48]	; (800818c <MX_GPIO_Init+0xf0>)
 800815c:	f7fa fe7f 	bl	8002e5e <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008160:	f7ff fe5e 	bl	8007e20 <__NVIC_GetPriorityGrouping>
 8008164:	4603      	mov	r3, r0
 8008166:	2200      	movs	r2, #0
 8008168:	2100      	movs	r1, #0
 800816a:	4618      	mov	r0, r3
 800816c:	f7ff feae 	bl	8007ecc <NVIC_EncodePriority>
 8008170:	4603      	mov	r3, r0
 8008172:	4619      	mov	r1, r3
 8008174:	2028      	movs	r0, #40	; 0x28
 8008176:	f7ff fe7f 	bl	8007e78 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 800817a:	2028      	movs	r0, #40	; 0x28
 800817c:	f7ff fe5e 	bl	8007e3c <__NVIC_EnableIRQ>

}
 8008180:	bf00      	nop
 8008182:	3720      	adds	r7, #32
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	40020000 	.word	0x40020000
 800818c:	40020800 	.word	0x40020800
 8008190:	00f00003 	.word	0x00f00003

08008194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008198:	f7f8 fef6 	bl	8000f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800819c:	f000 f80e 	bl	80081bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80081a0:	f7ff ff7c 	bl	800809c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80081a4:	f000 fa06 	bl	80085b4 <MX_USART2_UART_Init>
  //MX_TIM1_Init();
  MX_ADC1_Init();
 80081a8:	f7ff fb7a 	bl	80078a0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80081ac:	f7ff fc92 	bl	8007ad4 <MX_ADC2_Init>
  MX_ADC3_Init();
 80081b0:	f7ff fd98 	bl	8007ce4 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  cppwrapper();
 80081b4:	f000 fb88 	bl	80088c8 <cppwrapper>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80081b8:	e7fe      	b.n	80081b8 <main+0x24>
	...

080081bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b094      	sub	sp, #80	; 0x50
 80081c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80081c2:	f107 031c 	add.w	r3, r7, #28
 80081c6:	2234      	movs	r2, #52	; 0x34
 80081c8:	2100      	movs	r1, #0
 80081ca:	4618      	mov	r0, r3
 80081cc:	f002 fd50 	bl	800ac70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80081d0:	f107 0308 	add.w	r3, r7, #8
 80081d4:	2200      	movs	r2, #0
 80081d6:	601a      	str	r2, [r3, #0]
 80081d8:	605a      	str	r2, [r3, #4]
 80081da:	609a      	str	r2, [r3, #8]
 80081dc:	60da      	str	r2, [r3, #12]
 80081de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80081e0:	2300      	movs	r3, #0
 80081e2:	607b      	str	r3, [r7, #4]
 80081e4:	4b2c      	ldr	r3, [pc, #176]	; (8008298 <SystemClock_Config+0xdc>)
 80081e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e8:	4a2b      	ldr	r2, [pc, #172]	; (8008298 <SystemClock_Config+0xdc>)
 80081ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081ee:	6413      	str	r3, [r2, #64]	; 0x40
 80081f0:	4b29      	ldr	r3, [pc, #164]	; (8008298 <SystemClock_Config+0xdc>)
 80081f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081f8:	607b      	str	r3, [r7, #4]
 80081fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80081fc:	2300      	movs	r3, #0
 80081fe:	603b      	str	r3, [r7, #0]
 8008200:	4b26      	ldr	r3, [pc, #152]	; (800829c <SystemClock_Config+0xe0>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a25      	ldr	r2, [pc, #148]	; (800829c <SystemClock_Config+0xe0>)
 8008206:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800820a:	6013      	str	r3, [r2, #0]
 800820c:	4b23      	ldr	r3, [pc, #140]	; (800829c <SystemClock_Config+0xe0>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008214:	603b      	str	r3, [r7, #0]
 8008216:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008218:	2301      	movs	r3, #1
 800821a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800821c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008220:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008222:	2302      	movs	r3, #2
 8008224:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008226:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800822a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800822c:	2304      	movs	r3, #4
 800822e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8008230:	23b4      	movs	r3, #180	; 0xb4
 8008232:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008234:	2302      	movs	r3, #2
 8008236:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8008238:	2302      	movs	r3, #2
 800823a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800823c:	2302      	movs	r3, #2
 800823e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008240:	f107 031c 	add.w	r3, r7, #28
 8008244:	4618      	mov	r0, r3
 8008246:	f7fa f861 	bl	800230c <HAL_RCC_OscConfig>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d001      	beq.n	8008254 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8008250:	f000 f826 	bl	80082a0 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8008254:	f7f9 fd88 	bl	8001d68 <HAL_PWREx_EnableOverDrive>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d001      	beq.n	8008262 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800825e:	f000 f81f 	bl	80082a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008262:	230f      	movs	r3, #15
 8008264:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008266:	2302      	movs	r3, #2
 8008268:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800826a:	2300      	movs	r3, #0
 800826c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800826e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008272:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008278:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800827a:	f107 0308 	add.w	r3, r7, #8
 800827e:	2105      	movs	r1, #5
 8008280:	4618      	mov	r0, r3
 8008282:	f7f9 fdc1 	bl	8001e08 <HAL_RCC_ClockConfig>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d001      	beq.n	8008290 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800828c:	f000 f808 	bl	80082a0 <Error_Handler>
  }
}
 8008290:	bf00      	nop
 8008292:	3750      	adds	r7, #80	; 0x50
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	40023800 	.word	0x40023800
 800829c:	40007000 	.word	0x40007000

080082a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80082a0:	b480      	push	{r7}
 80082a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80082a4:	bf00      	nop
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
	...

080082b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082b6:	2300      	movs	r3, #0
 80082b8:	607b      	str	r3, [r7, #4]
 80082ba:	4b10      	ldr	r3, [pc, #64]	; (80082fc <HAL_MspInit+0x4c>)
 80082bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082be:	4a0f      	ldr	r2, [pc, #60]	; (80082fc <HAL_MspInit+0x4c>)
 80082c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082c4:	6453      	str	r3, [r2, #68]	; 0x44
 80082c6:	4b0d      	ldr	r3, [pc, #52]	; (80082fc <HAL_MspInit+0x4c>)
 80082c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082ce:	607b      	str	r3, [r7, #4]
 80082d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80082d2:	2300      	movs	r3, #0
 80082d4:	603b      	str	r3, [r7, #0]
 80082d6:	4b09      	ldr	r3, [pc, #36]	; (80082fc <HAL_MspInit+0x4c>)
 80082d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082da:	4a08      	ldr	r2, [pc, #32]	; (80082fc <HAL_MspInit+0x4c>)
 80082dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082e0:	6413      	str	r3, [r2, #64]	; 0x40
 80082e2:	4b06      	ldr	r3, [pc, #24]	; (80082fc <HAL_MspInit+0x4c>)
 80082e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082ea:	603b      	str	r3, [r7, #0]
 80082ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80082ee:	2004      	movs	r0, #4
 80082f0:	f7f9 fb66 	bl	80019c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80082f4:	bf00      	nop
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	40023800 	.word	0x40023800

08008300 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8008308:	4b07      	ldr	r3, [pc, #28]	; (8008328 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800830a:	695a      	ldr	r2, [r3, #20]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4013      	ands	r3, r2
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	429a      	cmp	r2, r3
 8008314:	bf0c      	ite	eq
 8008316:	2301      	moveq	r3, #1
 8008318:	2300      	movne	r3, #0
 800831a:	b2db      	uxtb	r3, r3
}
 800831c:	4618      	mov	r0, r3
 800831e:	370c      	adds	r7, #12
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr
 8008328:	40013c00 	.word	0x40013c00

0800832c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8008334:	4a04      	ldr	r2, [pc, #16]	; (8008348 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6153      	str	r3, [r2, #20]
}
 800833a:	bf00      	nop
 800833c:	370c      	adds	r7, #12
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop
 8008348:	40013c00 	.word	0x40013c00

0800834c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800834c:	b480      	push	{r7}
 800834e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008350:	bf00      	nop
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800835a:	b480      	push	{r7}
 800835c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800835e:	e7fe      	b.n	800835e <HardFault_Handler+0x4>

08008360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008360:	b480      	push	{r7}
 8008362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008364:	e7fe      	b.n	8008364 <MemManage_Handler+0x4>

08008366 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008366:	b480      	push	{r7}
 8008368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800836a:	e7fe      	b.n	800836a <BusFault_Handler+0x4>

0800836c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800836c:	b480      	push	{r7}
 800836e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008370:	e7fe      	b.n	8008370 <UsageFault_Handler+0x4>

08008372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008372:	b480      	push	{r7}
 8008374:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008376:	bf00      	nop
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008380:	b480      	push	{r7}
 8008382:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008384:	bf00      	nop
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr

0800838e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800838e:	b480      	push	{r7}
 8008390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008392:	bf00      	nop
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80083a0:	f7f8 fe44 	bl	800102c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80083a4:	bf00      	nop
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
	HighFreqTask();
 80083ac:	f000 fbe4 	bl	8008b78 <HighFreqTask>
  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80083b0:	4802      	ldr	r0, [pc, #8]	; (80083bc <ADC_IRQHandler+0x14>)
 80083b2:	f7f8 fe9e 	bl	80010f2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80083b6:	bf00      	nop
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	200003e0 	.word	0x200003e0

080083c0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80083c0:	b480      	push	{r7}
 80083c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80083c4:	bf00      	nop
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr

080083ce <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80083ce:	b480      	push	{r7}
 80083d0:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80083d2:	bf00      	nop
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 80083e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80083e4:	f7ff ff8c 	bl	8008300 <LL_EXTI_IsActiveFlag_0_31>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d005      	beq.n	80083fa <EXTI15_10_IRQHandler+0x1e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 80083ee:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80083f2:	f7ff ff9b 	bl	800832c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */
    BtnAct();
 80083f6:	f000 fe1b 	bl	8009030 <BtnAct>
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80083fa:	bf00      	nop
 80083fc:	bd80      	pop	{r7, pc}

080083fe <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80083fe:	b480      	push	{r7}
 8008400:	af00      	add	r7, sp, #0
	return 1;
 8008402:	2301      	movs	r3, #1
}
 8008404:	4618      	mov	r0, r3
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <_kill>:

int _kill(int pid, int sig)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b082      	sub	sp, #8
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008418:	f002 fbcc 	bl	800abb4 <__errno>
 800841c:	4602      	mov	r2, r0
 800841e:	2316      	movs	r3, #22
 8008420:	6013      	str	r3, [r2, #0]
	return -1;
 8008422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008426:	4618      	mov	r0, r3
 8008428:	3708      	adds	r7, #8
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <_exit>:

void _exit (int status)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b082      	sub	sp, #8
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008436:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f7ff ffe7 	bl	800840e <_kill>
	while (1) {}		/* Make sure we hang here */
 8008440:	e7fe      	b.n	8008440 <_exit+0x12>
	...

08008444 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800844c:	4b11      	ldr	r3, [pc, #68]	; (8008494 <_sbrk+0x50>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d102      	bne.n	800845a <_sbrk+0x16>
		heap_end = &end;
 8008454:	4b0f      	ldr	r3, [pc, #60]	; (8008494 <_sbrk+0x50>)
 8008456:	4a10      	ldr	r2, [pc, #64]	; (8008498 <_sbrk+0x54>)
 8008458:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800845a:	4b0e      	ldr	r3, [pc, #56]	; (8008494 <_sbrk+0x50>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008460:	4b0c      	ldr	r3, [pc, #48]	; (8008494 <_sbrk+0x50>)
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4413      	add	r3, r2
 8008468:	466a      	mov	r2, sp
 800846a:	4293      	cmp	r3, r2
 800846c:	d907      	bls.n	800847e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800846e:	f002 fba1 	bl	800abb4 <__errno>
 8008472:	4602      	mov	r2, r0
 8008474:	230c      	movs	r3, #12
 8008476:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008478:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800847c:	e006      	b.n	800848c <_sbrk+0x48>
	}

	heap_end += incr;
 800847e:	4b05      	ldr	r3, [pc, #20]	; (8008494 <_sbrk+0x50>)
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4413      	add	r3, r2
 8008486:	4a03      	ldr	r2, [pc, #12]	; (8008494 <_sbrk+0x50>)
 8008488:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800848a:	68fb      	ldr	r3, [r7, #12]
}
 800848c:	4618      	mov	r0, r3
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}
 8008494:	20000200 	.word	0x20000200
 8008498:	20000430 	.word	0x20000430

0800849c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800849c:	b480      	push	{r7}
 800849e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80084a0:	4b16      	ldr	r3, [pc, #88]	; (80084fc <SystemInit+0x60>)
 80084a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084a6:	4a15      	ldr	r2, [pc, #84]	; (80084fc <SystemInit+0x60>)
 80084a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80084ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80084b0:	4b13      	ldr	r3, [pc, #76]	; (8008500 <SystemInit+0x64>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a12      	ldr	r2, [pc, #72]	; (8008500 <SystemInit+0x64>)
 80084b6:	f043 0301 	orr.w	r3, r3, #1
 80084ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80084bc:	4b10      	ldr	r3, [pc, #64]	; (8008500 <SystemInit+0x64>)
 80084be:	2200      	movs	r2, #0
 80084c0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80084c2:	4b0f      	ldr	r3, [pc, #60]	; (8008500 <SystemInit+0x64>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a0e      	ldr	r2, [pc, #56]	; (8008500 <SystemInit+0x64>)
 80084c8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80084cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084d0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80084d2:	4b0b      	ldr	r3, [pc, #44]	; (8008500 <SystemInit+0x64>)
 80084d4:	4a0b      	ldr	r2, [pc, #44]	; (8008504 <SystemInit+0x68>)
 80084d6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80084d8:	4b09      	ldr	r3, [pc, #36]	; (8008500 <SystemInit+0x64>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a08      	ldr	r2, [pc, #32]	; (8008500 <SystemInit+0x64>)
 80084de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80084e4:	4b06      	ldr	r3, [pc, #24]	; (8008500 <SystemInit+0x64>)
 80084e6:	2200      	movs	r2, #0
 80084e8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80084ea:	4b04      	ldr	r3, [pc, #16]	; (80084fc <SystemInit+0x60>)
 80084ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80084f0:	609a      	str	r2, [r3, #8]
#endif
}
 80084f2:	bf00      	nop
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr
 80084fc:	e000ed00 	.word	0xe000ed00
 8008500:	40023800 	.word	0x40023800
 8008504:	24003010 	.word	0x24003010

08008508 <LL_USART_Enable>:
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	60da      	str	r2, [r3, #12]
}
 800851c:	bf00      	nop
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <LL_USART_ConfigAsyncMode>:
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	695b      	ldr	r3, [r3, #20]
 8008540:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	615a      	str	r2, [r3, #20]
}
 8008548:	bf00      	nop
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <LL_AHB1_GRP1_EnableClock>:
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800855c:	4b08      	ldr	r3, [pc, #32]	; (8008580 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800855e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008560:	4907      	ldr	r1, [pc, #28]	; (8008580 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4313      	orrs	r3, r2
 8008566:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8008568:	4b05      	ldr	r3, [pc, #20]	; (8008580 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800856a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4013      	ands	r3, r2
 8008570:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008572:	68fb      	ldr	r3, [r7, #12]
}
 8008574:	bf00      	nop
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr
 8008580:	40023800 	.word	0x40023800

08008584 <LL_APB1_GRP1_EnableClock>:
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800858c:	4b08      	ldr	r3, [pc, #32]	; (80085b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800858e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008590:	4907      	ldr	r1, [pc, #28]	; (80085b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4313      	orrs	r3, r2
 8008596:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8008598:	4b05      	ldr	r3, [pc, #20]	; (80085b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800859a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4013      	ands	r3, r2
 80085a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80085a2:	68fb      	ldr	r3, [r7, #12]
}
 80085a4:	bf00      	nop
 80085a6:	3714      	adds	r7, #20
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr
 80085b0:	40023800 	.word	0x40023800

080085b4 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b08e      	sub	sp, #56	; 0x38
 80085b8:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80085ba:	f107 031c 	add.w	r3, r7, #28
 80085be:	2200      	movs	r2, #0
 80085c0:	601a      	str	r2, [r3, #0]
 80085c2:	605a      	str	r2, [r3, #4]
 80085c4:	609a      	str	r2, [r3, #8]
 80085c6:	60da      	str	r2, [r3, #12]
 80085c8:	611a      	str	r2, [r3, #16]
 80085ca:	615a      	str	r2, [r3, #20]
 80085cc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085ce:	1d3b      	adds	r3, r7, #4
 80085d0:	2200      	movs	r2, #0
 80085d2:	601a      	str	r2, [r3, #0]
 80085d4:	605a      	str	r2, [r3, #4]
 80085d6:	609a      	str	r2, [r3, #8]
 80085d8:	60da      	str	r2, [r3, #12]
 80085da:	611a      	str	r2, [r3, #16]
 80085dc:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80085de:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80085e2:	f7ff ffcf 	bl	8008584 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80085e6:	2001      	movs	r0, #1
 80085e8:	f7ff ffb4 	bl	8008554 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80085ec:	230c      	movs	r3, #12
 80085ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80085f0:	2302      	movs	r3, #2
 80085f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80085f4:	2303      	movs	r3, #3
 80085f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80085f8:	2300      	movs	r3, #0
 80085fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80085fc:	2301      	movs	r3, #1
 80085fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8008600:	2307      	movs	r3, #7
 8008602:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008604:	1d3b      	adds	r3, r7, #4
 8008606:	4619      	mov	r1, r3
 8008608:	4810      	ldr	r0, [pc, #64]	; (800864c <MX_USART2_UART_Init+0x98>)
 800860a:	f7fa fc28 	bl	8002e5e <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 800860e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8008612:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8008614:	2300      	movs	r3, #0
 8008616:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8008618:	2300      	movs	r3, #0
 800861a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800861c:	2300      	movs	r3, #0
 800861e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8008620:	230c      	movs	r3, #12
 8008622:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8008624:	2300      	movs	r3, #0
 8008626:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8008628:	2300      	movs	r3, #0
 800862a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800862c:	f107 031c 	add.w	r3, r7, #28
 8008630:	4619      	mov	r1, r3
 8008632:	4807      	ldr	r0, [pc, #28]	; (8008650 <MX_USART2_UART_Init+0x9c>)
 8008634:	f7fb fa28 	bl	8003a88 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8008638:	4805      	ldr	r0, [pc, #20]	; (8008650 <MX_USART2_UART_Init+0x9c>)
 800863a:	f7ff ff75 	bl	8008528 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800863e:	4804      	ldr	r0, [pc, #16]	; (8008650 <MX_USART2_UART_Init+0x9c>)
 8008640:	f7ff ff62 	bl	8008508 <LL_USART_Enable>

}
 8008644:	bf00      	nop
 8008646:	3738      	adds	r7, #56	; 0x38
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	40020000 	.word	0x40020000
 8008650:	40004400 	.word	0x40004400

08008654 <LL_ADC_Enable>:
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	f043 0201 	orr.w	r2, r3, #1
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	609a      	str	r2, [r3, #8]
}
 8008668:	bf00      	nop
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <LL_ADC_REG_StartConversionSWStart>:
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	609a      	str	r2, [r3, #8]
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <LL_ADC_REG_ReadConversionData12>:
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086a0:	b29b      	uxth	r3, r3
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	370c      	adds	r7, #12
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <LL_ADC_INJ_ReadConversionData12>:
{
 80086ae:	b490      	push	{r4, r7}
 80086b0:	b084      	sub	sp, #16
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	6039      	str	r1, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JDRX_REGOFFSET_MASK));
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	333c      	adds	r3, #60	; 0x3c
 80086bc:	4619      	mov	r1, r3
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086c4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80086c8:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086ca:	68fa      	ldr	r2, [r7, #12]
 80086cc:	fa92 f2a2 	rbit	r2, r2
 80086d0:	60ba      	str	r2, [r7, #8]
  return result;
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	fab2 f282 	clz	r2, r2
 80086d8:	b2d2      	uxtb	r2, r2
 80086da:	40d3      	lsrs	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	440b      	add	r3, r1
 80086e0:	461c      	mov	r4, r3
  return (uint16_t)(READ_BIT(*preg,
 80086e2:	6823      	ldr	r3, [r4, #0]
                   );
 80086e4:	b29b      	uxth	r3, r3
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bc90      	pop	{r4, r7}
 80086ee:	4770      	bx	lr

080086f0 <LL_ADC_IsActiveFlag_JEOS>:
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 0304 	and.w	r3, r3, #4
 8008700:	2b04      	cmp	r3, #4
 8008702:	bf0c      	ite	eq
 8008704:	2301      	moveq	r3, #1
 8008706:	2300      	movne	r3, #0
 8008708:	b2db      	uxtb	r3, r3
}
 800870a:	4618      	mov	r0, r3
 800870c:	370c      	adds	r7, #12
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <LL_ADC_ClearFlag_JEOS>:
{
 8008716:	b480      	push	{r7}
 8008718:	b083      	sub	sp, #12
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f06f 0204 	mvn.w	r2, #4
 8008724:	601a      	str	r2, [r3, #0]
}
 8008726:	bf00      	nop
 8008728:	370c      	adds	r7, #12
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr

08008732 <LL_ADC_EnableIT_JEOS>:
{
 8008732:	b480      	push	{r7}
 8008734:	b083      	sub	sp, #12
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	605a      	str	r2, [r3, #4]
}
 8008746:	bf00      	nop
 8008748:	370c      	adds	r7, #12
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr

08008752 <LL_GPIO_SetOutputPin>:
{
 8008752:	b480      	push	{r7}
 8008754:	b083      	sub	sp, #12
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
 800875a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800875c:	683a      	ldr	r2, [r7, #0]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	619a      	str	r2, [r3, #24]
}
 8008762:	bf00      	nop
 8008764:	370c      	adds	r7, #12
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
	...

08008770 <_ZNSt7__cxx119to_stringEf>:
					   4 * sizeof(unsigned long long),
					   "%llu", __val); }

  inline string
  to_string(float __val)
  {
 8008770:	b590      	push	{r4, r7, lr}
 8008772:	b087      	sub	sp, #28
 8008774:	af02      	add	r7, sp, #8
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	ed87 0a00 	vstr	s0, [r7]
    const int __n = 
 800877c:	233a      	movs	r3, #58	; 0x3a
 800877e:	60fb      	str	r3, [r7, #12]
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
					   "%f", __val);
 8008780:	6838      	ldr	r0, [r7, #0]
 8008782:	f7f7 ff01 	bl	8000588 <__aeabi_f2d>
 8008786:	4603      	mov	r3, r0
 8008788:	460c      	mov	r4, r1
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	e9cd 3400 	strd	r3, r4, [sp]
 8008790:	4b04      	ldr	r3, [pc, #16]	; (80087a4 <_ZNSt7__cxx119to_stringEf+0x34>)
 8008792:	223a      	movs	r2, #58	; 0x3a
 8008794:	4904      	ldr	r1, [pc, #16]	; (80087a8 <_ZNSt7__cxx119to_stringEf+0x38>)
 8008796:	f000 fc8b 	bl	80090b0 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
  }
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	3714      	adds	r7, #20
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd90      	pop	{r4, r7, pc}
 80087a2:	bf00      	nop
 80087a4:	0800ce04 	.word	0x0800ce04
 80087a8:	0800b789 	.word	0x0800b789

080087ac <_ZN3PWMC1Ev>:
#ifndef PWM_HPP_
#define PWM_HPP_

#include "stm32f4xx_ll_tim.h"//need

class PWM {
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	605a      	str	r2, [r3, #4]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	609a      	str	r2, [r3, #8]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4618      	mov	r0, r3
 80087c4:	370c      	adds	r7, #12
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
	...

080087d0 <_ZN9ArgSensorC1ERKS_>:
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
 80087da:	4a11      	ldr	r2, [pc, #68]	; (8008820 <_ZN9ArgSensorC1ERKS_+0x50>)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	601a      	str	r2, [r3, #0]
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	685a      	ldr	r2, [r3, #4]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	605a      	str	r2, [r3, #4]
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	689a      	ldr	r2, [r3, #8]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	609a      	str	r2, [r3, #8]
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	68da      	ldr	r2, [r3, #12]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	60da      	str	r2, [r3, #12]
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	7c1a      	ldrb	r2, [r3, #16]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	741a      	strb	r2, [r3, #16]
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	7c5a      	ldrb	r2, [r3, #17]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	745a      	strb	r2, [r3, #17]
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	695a      	ldr	r2, [r3, #20]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	615a      	str	r2, [r3, #20]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4618      	mov	r0, r3
 8008814:	370c      	adds	r7, #12
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	0800ce44 	.word	0x0800ce44

08008824 <_ZN7TimInfoC1ERKS_>:
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
 800882e:	4a0d      	ldr	r2, [pc, #52]	; (8008864 <_ZN7TimInfoC1ERKS_+0x40>)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	601a      	str	r2, [r3, #0]
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	685a      	ldr	r2, [r3, #4]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	605a      	str	r2, [r3, #4]
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	689a      	ldr	r2, [r3, #8]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	609a      	str	r2, [r3, #8]
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	68da      	ldr	r2, [r3, #12]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	60da      	str	r2, [r3, #12]
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	691a      	ldr	r2, [r3, #16]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	611a      	str	r2, [r3, #16]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4618      	mov	r0, r3
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	0800cec4 	.word	0x0800cec4

08008868 <_ZN3PIDC1ERKS_>:
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
 8008872:	4a14      	ldr	r2, [pc, #80]	; (80088c4 <_ZN3PIDC1ERKS_+0x5c>)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	601a      	str	r2, [r3, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	683a      	ldr	r2, [r7, #0]
 800887c:	3304      	adds	r3, #4
 800887e:	3204      	adds	r2, #4
 8008880:	ca07      	ldmia	r2, {r0, r1, r2}
 8008882:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	691a      	ldr	r2, [r3, #16]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	611a      	str	r2, [r3, #16]
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	695a      	ldr	r2, [r3, #20]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	615a      	str	r2, [r3, #20]
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	699a      	ldr	r2, [r3, #24]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	619a      	str	r2, [r3, #24]
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	69da      	ldr	r2, [r3, #28]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	61da      	str	r2, [r3, #28]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	6a1a      	ldr	r2, [r3, #32]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	621a      	str	r2, [r3, #32]
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	625a      	str	r2, [r3, #36]	; 0x24
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	4618      	mov	r0, r3
 80088ba:	370c      	adds	r7, #12
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr
 80088c4:	0800ce94 	.word	0x0800ce94

080088c8 <cppwrapper>:
MotorInfo Motor; //モータの電圧・電流等を管理、及び座標変換のClass
UiCtrl ui_ctrl; //UI入力を処理するclass
DebugInfo Debug;//デバッグ情報かき集め


void cppwrapper(void){
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b0c8      	sub	sp, #288	; 0x120
 80088cc:	af00      	add	r7, sp, #0
	TimerInit.Init();//CubeMXに頼らないタイマ定義
 80088ce:	4886      	ldr	r0, [pc, #536]	; (8008ae8 <cppwrapper+0x220>)
 80088d0:	f7fe fbbc 	bl	800704c <_ZN7TIMInit4InitEv>
	{//MathLibの生存時間調整(メモリ空けてくれ!!)
		MathLib mathlibrary;//三角関数を取得
 80088d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80088d8:	4618      	mov	r0, r3
 80088da:	f7fc f991 	bl	8004c00 <_ZN7MathLibC1Ev>
		int mathlib_size = 512;//ライブラリのサイズを指定
 80088de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		mathlibrary.fInit(mathlib_size);
 80088e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80088ea:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7fc f9e6 	bl	8004cc0 <_ZN7MathLib5fInitEi>
		Motor.setMathLib(mathlibrary);//モータクラスに算術ライブラリを渡す
 80088f4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80088f8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80088fc:	4611      	mov	r1, r2
 80088fe:	4618      	mov	r0, r3
 8008900:	f7fd f9ac 	bl	8005c5c <_ZN7MathLibC1ERKS_>
 8008904:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008908:	4619      	mov	r1, r3
 800890a:	4878      	ldr	r0, [pc, #480]	; (8008aec <cppwrapper+0x224>)
 800890c:	f7fd f996 	bl	8005c3c <_ZN9MotorInfo10setMathLibE7MathLib>
 8008910:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008914:	4618      	mov	r0, r3
 8008916:	f7fc f98f 	bl	8004c38 <_ZN7MathLibD1Ev>
		MathLib mathlibrary;//三角関数を取得
 800891a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800891e:	4618      	mov	r0, r3
 8008920:	f7fc f98a 	bl	8004c38 <_ZN7MathLibD1Ev>
	}
	{
		ArgSensor sensor; //角度を求める機能を持ったclass
 8008924:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008928:	4618      	mov	r0, r3
 800892a:	f7fb f92d 	bl	8003b88 <_ZN9ArgSensorC1Ev>
		Motor.setArgSensor(sensor);
 800892e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8008932:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008936:	4611      	mov	r1, r2
 8008938:	4618      	mov	r0, r3
 800893a:	f7ff ff49 	bl	80087d0 <_ZN9ArgSensorC1ERKS_>
 800893e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008942:	4619      	mov	r1, r3
 8008944:	4869      	ldr	r0, [pc, #420]	; (8008aec <cppwrapper+0x224>)
 8008946:	f7fd f9d5 	bl	8005cf4 <_ZN9MotorInfo12setArgSensorE9ArgSensor>
 800894a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800894e:	4618      	mov	r0, r3
 8008950:	f7fb f938 	bl	8003bc4 <_ZN9ArgSensorD1Ev>
		ArgSensor sensor; //角度を求める機能を持ったclass
 8008954:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008958:	4618      	mov	r0, r3
 800895a:	f7fb f933 	bl	8003bc4 <_ZN9ArgSensorD1Ev>
	}
	{
		TimInfo Tim_Info;//タイマの経過時間測定Class
 800895e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008962:	4618      	mov	r0, r3
 8008964:	f7fe fca4 	bl	80072b0 <_ZN7TimInfoC1Ev>
		Tim_Info.Init(TIM1);
 8008968:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800896c:	4960      	ldr	r1, [pc, #384]	; (8008af0 <cppwrapper+0x228>)
 800896e:	4618      	mov	r0, r3
 8008970:	f7fe fcce 	bl	8007310 <_ZN7TimInfo4InitEP11TIM_TypeDef>
		Motor.setTimInfo(Tim_Info);
 8008974:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008978:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800897c:	4611      	mov	r1, r2
 800897e:	4618      	mov	r0, r3
 8008980:	f7ff ff50 	bl	8008824 <_ZN7TimInfoC1ERKS_>
 8008984:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8008988:	4619      	mov	r1, r3
 800898a:	4858      	ldr	r0, [pc, #352]	; (8008aec <cppwrapper+0x224>)
 800898c:	f7fd f9de 	bl	8005d4c <_ZN9MotorInfo10setTimInfoE7TimInfo>
 8008990:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8008994:	4618      	mov	r0, r3
 8008996:	f7fe fc9b 	bl	80072d0 <_ZN7TimInfoD1Ev>
		TimInfo Tim_Info;//タイマの経過時間測定Class
 800899a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fe fc96 	bl	80072d0 <_ZN7TimInfoD1Ev>
	}
	{//PIDLibの生存時間調整(代入後メモリを解放する)
		PID IqPID;
 80089a4:	463b      	mov	r3, r7
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7fd fffe 	bl	80069a8 <_ZN3PIDC1Ev>
		PID IdPID;
 80089ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7fd fff9 	bl	80069a8 <_ZN3PIDC1Ev>
		IdPID.SetParam(PID_GAIN_ID_P, PID_GAIN_ID_I, PID_GAIN_ID_D);
 80089b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80089ba:	ed9f 1a4e 	vldr	s2, [pc, #312]	; 8008af4 <cppwrapper+0x22c>
 80089be:	eddf 0a4d 	vldr	s1, [pc, #308]	; 8008af4 <cppwrapper+0x22c>
 80089c2:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8008af4 <cppwrapper+0x22c>
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7fe f81e 	bl	8006a08 <_ZN3PID8SetParamEfff>
		IqPID.SetParam(PID_GAIN_IQ_P, PID_GAIN_IQ_I, PID_GAIN_IQ_D);
 80089cc:	463b      	mov	r3, r7
 80089ce:	ed9f 1a49 	vldr	s2, [pc, #292]	; 8008af4 <cppwrapper+0x22c>
 80089d2:	eddf 0a48 	vldr	s1, [pc, #288]	; 8008af4 <cppwrapper+0x22c>
 80089d6:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8008af4 <cppwrapper+0x22c>
 80089da:	4618      	mov	r0, r3
 80089dc:	f7fe f814 	bl	8006a08 <_ZN3PID8SetParamEfff>
		Motor.setIdqPIDLib(IdPID, IqPID);
 80089e0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80089e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80089e8:	4611      	mov	r1, r2
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7ff ff3c 	bl	8008868 <_ZN3PIDC1ERKS_>
 80089f0:	463a      	mov	r2, r7
 80089f2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80089f6:	4611      	mov	r1, r2
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7ff ff35 	bl	8008868 <_ZN3PIDC1ERKS_>
 80089fe:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8008a02:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008a06:	4619      	mov	r1, r3
 8008a08:	4838      	ldr	r0, [pc, #224]	; (8008aec <cppwrapper+0x224>)
 8008a0a:	f7fd f9d9 	bl	8005dc0 <_ZN9MotorInfo12setIdqPIDLibE3PIDS0_>
 8008a0e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7fd ffd8 	bl	80069c8 <_ZN3PIDD1Ev>
 8008a18:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7fd ffd3 	bl	80069c8 <_ZN3PIDD1Ev>
		PID IdPID;
 8008a22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7fd ffce 	bl	80069c8 <_ZN3PIDD1Ev>
		PID IqPID;
 8008a2c:	463b      	mov	r3, r7
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fd ffca 	bl	80069c8 <_ZN3PIDD1Ev>
	}

	//LL_TIM_DisableBRK(TIM1);//こっちは未検証
	//LL_TIM_DisableIT_BRK(TIM1);//効かない

	PWM_Object1.setTIM(TIM1);
 8008a34:	492e      	ldr	r1, [pc, #184]	; (8008af0 <cppwrapper+0x228>)
 8008a36:	4830      	ldr	r0, [pc, #192]	; (8008af8 <cppwrapper+0x230>)
 8008a38:	f7fe f84e 	bl	8006ad8 <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object2.setTIM(TIM1);
 8008a3c:	492c      	ldr	r1, [pc, #176]	; (8008af0 <cppwrapper+0x228>)
 8008a3e:	482f      	ldr	r0, [pc, #188]	; (8008afc <cppwrapper+0x234>)
 8008a40:	f7fe f84a 	bl	8006ad8 <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object3.setTIM(TIM1);
 8008a44:	492a      	ldr	r1, [pc, #168]	; (8008af0 <cppwrapper+0x228>)
 8008a46:	482e      	ldr	r0, [pc, #184]	; (8008b00 <cppwrapper+0x238>)
 8008a48:	f7fe f846 	bl	8006ad8 <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object4.setTIM(TIM1);
 8008a4c:	4928      	ldr	r1, [pc, #160]	; (8008af0 <cppwrapper+0x228>)
 8008a4e:	482d      	ldr	r0, [pc, #180]	; (8008b04 <cppwrapper+0x23c>)
 8008a50:	f7fe f842 	bl	8006ad8 <_ZN3PWM6setTIMEP11TIM_TypeDef>

	PWM_Object1.setCH(1);
 8008a54:	2101      	movs	r1, #1
 8008a56:	4828      	ldr	r0, [pc, #160]	; (8008af8 <cppwrapper+0x230>)
 8008a58:	f7fe f84c 	bl	8006af4 <_ZN3PWM5setCHEi>
	PWM_Object2.setCH(2);
 8008a5c:	2102      	movs	r1, #2
 8008a5e:	4827      	ldr	r0, [pc, #156]	; (8008afc <cppwrapper+0x234>)
 8008a60:	f7fe f848 	bl	8006af4 <_ZN3PWM5setCHEi>
	PWM_Object3.setCH(3);
 8008a64:	2103      	movs	r1, #3
 8008a66:	4826      	ldr	r0, [pc, #152]	; (8008b00 <cppwrapper+0x238>)
 8008a68:	f7fe f844 	bl	8006af4 <_ZN3PWM5setCHEi>
	PWM_Object4.setCH(4);
 8008a6c:	2104      	movs	r1, #4
 8008a6e:	4825      	ldr	r0, [pc, #148]	; (8008b04 <cppwrapper+0x23c>)
 8008a70:	f7fe f840 	bl	8006af4 <_ZN3PWM5setCHEi>

	PWM_Object1.fInit(PWM_COUNT);
 8008a74:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8008a78:	481f      	ldr	r0, [pc, #124]	; (8008af8 <cppwrapper+0x230>)
 8008a7a:	f7fe f849 	bl	8006b10 <_ZN3PWM5fInitEi>
	PWM_Object2.fInit(PWM_COUNT);
 8008a7e:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8008a82:	481e      	ldr	r0, [pc, #120]	; (8008afc <cppwrapper+0x234>)
 8008a84:	f7fe f844 	bl	8006b10 <_ZN3PWM5fInitEi>
	PWM_Object3.fInit(PWM_COUNT);
 8008a88:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8008a8c:	481c      	ldr	r0, [pc, #112]	; (8008b00 <cppwrapper+0x238>)
 8008a8e:	f7fe f83f 	bl	8006b10 <_ZN3PWM5fInitEi>
	PWM_Object4.fInit(PWM_COUNT);
 8008a92:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8008a96:	481b      	ldr	r0, [pc, #108]	; (8008b04 <cppwrapper+0x23c>)
 8008a98:	f7fe f83a 	bl	8006b10 <_ZN3PWM5fInitEi>

	PWM_Object1.f2Duty(0);//50%duty
 8008a9c:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8008b08 <cppwrapper+0x240>
 8008aa0:	4815      	ldr	r0, [pc, #84]	; (8008af8 <cppwrapper+0x230>)
 8008aa2:	f7fe f8b3 	bl	8006c0c <_ZN3PWM6f2DutyEf>
	PWM_Object2.f2Duty(0);
 8008aa6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8008b08 <cppwrapper+0x240>
 8008aaa:	4814      	ldr	r0, [pc, #80]	; (8008afc <cppwrapper+0x234>)
 8008aac:	f7fe f8ae 	bl	8006c0c <_ZN3PWM6f2DutyEf>
	PWM_Object3.f2Duty(0);
 8008ab0:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8008b08 <cppwrapper+0x240>
 8008ab4:	4812      	ldr	r0, [pc, #72]	; (8008b00 <cppwrapper+0x238>)
 8008ab6:	f7fe f8a9 	bl	8006c0c <_ZN3PWM6f2DutyEf>
	PWM_Object4.f2Duty(0);
 8008aba:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8008b08 <cppwrapper+0x240>
 8008abe:	4811      	ldr	r0, [pc, #68]	; (8008b04 <cppwrapper+0x23c>)
 8008ac0:	f7fe f8a4 	bl	8006c0c <_ZN3PWM6f2DutyEf>

	LL_GPIO_SetOutputPin(GPIOC, GPIO_PIN_10);
 8008ac4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008ac8:	4810      	ldr	r0, [pc, #64]	; (8008b0c <cppwrapper+0x244>)
 8008aca:	f7ff fe42 	bl	8008752 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOC, GPIO_PIN_11);
 8008ace:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008ad2:	480e      	ldr	r0, [pc, #56]	; (8008b0c <cppwrapper+0x244>)
 8008ad4:	f7ff fe3d 	bl	8008752 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOC, GPIO_PIN_12);
 8008ad8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008adc:	480b      	ldr	r0, [pc, #44]	; (8008b0c <cppwrapper+0x244>)
 8008ade:	f7ff fe38 	bl	8008752 <LL_GPIO_SetOutputPin>

	ADC_Init();
 8008ae2:	f000 facb 	bl	800907c <ADC_Init>

	while(1){}
 8008ae6:	e7fe      	b.n	8008ae6 <cppwrapper+0x21e>
 8008ae8:	20000208 	.word	0x20000208
 8008aec:	20000270 	.word	0x20000270
 8008af0:	40010000 	.word	0x40010000
 8008af4:	3dcccccd 	.word	0x3dcccccd
 8008af8:	2000020c 	.word	0x2000020c
 8008afc:	2000021c 	.word	0x2000021c
 8008b00:	2000022c 	.word	0x2000022c
 8008b04:	2000023c 	.word	0x2000023c
 8008b08:	00000000 	.word	0x00000000
 8008b0c:	40020800 	.word	0x40020800

08008b10 <_Z15MotorOutputTaskv>:
}

void MotorOutputTask(void){
 8008b10:	b580      	push	{r7, lr}
 8008b12:	af00      	add	r7, sp, #0
	Motor.invClarkGanmaDelta();
 8008b14:	4814      	ldr	r0, [pc, #80]	; (8008b68 <_Z15MotorOutputTaskv+0x58>)
 8008b16:	f7fd fb07 	bl	8006128 <_ZN9MotorInfo18invClarkGanmaDeltaEv>
	Motor.invClarkTransform();
 8008b1a:	4813      	ldr	r0, [pc, #76]	; (8008b68 <_Z15MotorOutputTaskv+0x58>)
 8008b1c:	f7fd fb98 	bl	8006250 <_ZN9MotorInfo17invClarkTransformEv>
	Motor.invParkTransform();
 8008b20:	4811      	ldr	r0, [pc, #68]	; (8008b68 <_Z15MotorOutputTaskv+0x58>)
 8008b22:	f7fd fc27 	bl	8006374 <_ZN9MotorInfo16invParkTransformEv>

	PWM_Object1.f2Duty(Motor.getVu());
 8008b26:	4810      	ldr	r0, [pc, #64]	; (8008b68 <_Z15MotorOutputTaskv+0x58>)
 8008b28:	f7fd fc8a 	bl	8006440 <_ZN9MotorInfo5getVuEv>
 8008b2c:	eef0 7a40 	vmov.f32	s15, s0
 8008b30:	eeb0 0a67 	vmov.f32	s0, s15
 8008b34:	480d      	ldr	r0, [pc, #52]	; (8008b6c <_Z15MotorOutputTaskv+0x5c>)
 8008b36:	f7fe f869 	bl	8006c0c <_ZN3PWM6f2DutyEf>
	PWM_Object2.f2Duty(Motor.getVv());
 8008b3a:	480b      	ldr	r0, [pc, #44]	; (8008b68 <_Z15MotorOutputTaskv+0x58>)
 8008b3c:	f7fd fc8f 	bl	800645e <_ZN9MotorInfo5getVvEv>
 8008b40:	eef0 7a40 	vmov.f32	s15, s0
 8008b44:	eeb0 0a67 	vmov.f32	s0, s15
 8008b48:	4809      	ldr	r0, [pc, #36]	; (8008b70 <_Z15MotorOutputTaskv+0x60>)
 8008b4a:	f7fe f85f 	bl	8006c0c <_ZN3PWM6f2DutyEf>
	PWM_Object3.f2Duty(Motor.getVw());
 8008b4e:	4806      	ldr	r0, [pc, #24]	; (8008b68 <_Z15MotorOutputTaskv+0x58>)
 8008b50:	f7fd fc94 	bl	800647c <_ZN9MotorInfo5getVwEv>
 8008b54:	eef0 7a40 	vmov.f32	s15, s0
 8008b58:	eeb0 0a67 	vmov.f32	s0, s15
 8008b5c:	4805      	ldr	r0, [pc, #20]	; (8008b74 <_Z15MotorOutputTaskv+0x64>)
 8008b5e:	f7fe f855 	bl	8006c0c <_ZN3PWM6f2DutyEf>
}
 8008b62:	bf00      	nop
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	20000270 	.word	0x20000270
 8008b6c:	2000020c 	.word	0x2000020c
 8008b70:	2000021c 	.word	0x2000021c
 8008b74:	2000022c 	.word	0x2000022c

08008b78 <HighFreqTask>:



void HighFreqTask(void){
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b08a      	sub	sp, #40	; 0x28
 8008b7c:	af00      	add	r7, sp, #0

	if (LL_ADC_IsActiveFlag_JEOS(ADC1) == 1)
 8008b7e:	4861      	ldr	r0, [pc, #388]	; (8008d04 <HighFreqTask+0x18c>)
 8008b80:	f7ff fdb6 	bl	80086f0 <LL_ADC_IsActiveFlag_JEOS>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	bf0c      	ite	eq
 8008b8a:	2301      	moveq	r3, #1
 8008b8c:	2300      	movne	r3, #0
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f000 80b2 	beq.w	8008cfa <HighFreqTask+0x182>
		{
			LL_ADC_ClearFlag_JEOS(ADC1);
 8008b96:	485b      	ldr	r0, [pc, #364]	; (8008d04 <HighFreqTask+0x18c>)
 8008b98:	f7ff fdbd 	bl	8008716 <LL_ADC_ClearFlag_JEOS>

			//エンコーダ読み取り
			float Iu,Iv,Iw;
			//増幅率のバイアス考慮してない。あとで計算すること。
			Iu = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_1)/4095;
 8008b9c:	2101      	movs	r1, #1
 8008b9e:	4859      	ldr	r0, [pc, #356]	; (8008d04 <HighFreqTask+0x18c>)
 8008ba0:	f7ff fd85 	bl	80086ae <LL_ADC_INJ_ReadConversionData12>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	4b57      	ldr	r3, [pc, #348]	; (8008d08 <HighFreqTask+0x190>)
 8008baa:	fba3 1302 	umull	r1, r3, r3, r2
 8008bae:	1ad2      	subs	r2, r2, r3
 8008bb0:	0852      	lsrs	r2, r2, #1
 8008bb2:	4413      	add	r3, r2
 8008bb4:	0adb      	lsrs	r3, r3, #11
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	ee07 3a90 	vmov	s15, r3
 8008bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008bc0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			Iv = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_2)/4095;
 8008bc4:	f241 1102 	movw	r1, #4354	; 0x1102
 8008bc8:	484e      	ldr	r0, [pc, #312]	; (8008d04 <HighFreqTask+0x18c>)
 8008bca:	f7ff fd70 	bl	80086ae <LL_ADC_INJ_ReadConversionData12>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	4b4d      	ldr	r3, [pc, #308]	; (8008d08 <HighFreqTask+0x190>)
 8008bd4:	fba3 1302 	umull	r1, r3, r3, r2
 8008bd8:	1ad2      	subs	r2, r2, r3
 8008bda:	0852      	lsrs	r2, r2, #1
 8008bdc:	4413      	add	r3, r2
 8008bde:	0adb      	lsrs	r3, r3, #11
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	ee07 3a90 	vmov	s15, r3
 8008be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008bea:	edc7 7a08 	vstr	s15, [r7, #32]
			Iw = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_3)/4095;
 8008bee:	f242 2103 	movw	r1, #8707	; 0x2203
 8008bf2:	4844      	ldr	r0, [pc, #272]	; (8008d04 <HighFreqTask+0x18c>)
 8008bf4:	f7ff fd5b 	bl	80086ae <LL_ADC_INJ_ReadConversionData12>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	4b42      	ldr	r3, [pc, #264]	; (8008d08 <HighFreqTask+0x190>)
 8008bfe:	fba3 1302 	umull	r1, r3, r3, r2
 8008c02:	1ad2      	subs	r2, r2, r3
 8008c04:	0852      	lsrs	r2, r2, #1
 8008c06:	4413      	add	r3, r2
 8008c08:	0adb      	lsrs	r3, r3, #11
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	ee07 3a90 	vmov	s15, r3
 8008c10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c14:	edc7 7a07 	vstr	s15, [r7, #28]
			Motor.setIuvw(Iu, Iv, Iw);
 8008c18:	ed97 1a07 	vldr	s2, [r7, #28]
 8008c1c:	edd7 0a08 	vldr	s1, [r7, #32]
 8008c20:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8008c24:	4839      	ldr	r0, [pc, #228]	; (8008d0c <HighFreqTask+0x194>)
 8008c26:	f7fd f8ff 	bl	8005e28 <_ZN9MotorInfo7setIuvwEfff>
			//推定誤差計算

			//推定位置計算(センサを叩く)
			//Motor.culcArg();

			Motor.ForceCommutation();
 8008c2a:	4838      	ldr	r0, [pc, #224]	; (8008d0c <HighFreqTask+0x194>)
 8008c2c:	f7fd f929 	bl	8005e82 <_ZN9MotorInfo16ForceCommutationEv>

			//Iuvw -> Idqに変換 (Park,Clark変換)
			Motor.parkTransform();
 8008c30:	4836      	ldr	r0, [pc, #216]	; (8008d0c <HighFreqTask+0x194>)
 8008c32:	f7fd f993 	bl	8005f5c <_ZN9MotorInfo13parkTransformEv>
			Motor.clarkTransform();
 8008c36:	4835      	ldr	r0, [pc, #212]	; (8008d0c <HighFreqTask+0x194>)
 8008c38:	f7fd f9c4 	bl	8005fc4 <_ZN9MotorInfo14clarkTransformEv>

			float Id, Iq;//あとで使う　今は未使用だからエラー吐くはず。
			Id = Motor.getId();
 8008c3c:	4833      	ldr	r0, [pc, #204]	; (8008d0c <HighFreqTask+0x194>)
 8008c3e:	f7fd fbe1 	bl	8006404 <_ZN9MotorInfo5getIdEv>
 8008c42:	ed87 0a06 	vstr	s0, [r7, #24]
			Iq = Motor.getIq();
 8008c46:	4831      	ldr	r0, [pc, #196]	; (8008d0c <HighFreqTask+0x194>)
 8008c48:	f7fd fbeb 	bl	8006422 <_ZN9MotorInfo5getIqEv>
 8008c4c:	ed87 0a05 	vstr	s0, [r7, #20]

			//指令値入力
//			float Vd_input = 0;
//			float Vq_input = 0.5f;

			float Vganma_input = 0;
 8008c50:	f04f 0300 	mov.w	r3, #0
 8008c54:	613b      	str	r3, [r7, #16]
			float Vdelta_input = 0;
 8008c56:	f04f 0300 	mov.w	r3, #0
 8008c5a:	60fb      	str	r3, [r7, #12]

			float Id_error;
			float Iq_error;

			Id_error = 0;
 8008c5c:	f04f 0300 	mov.w	r3, #0
 8008c60:	60bb      	str	r3, [r7, #8]
			Iq_error = 0;
 8008c62:	f04f 0300 	mov.w	r3, #0
 8008c66:	607b      	str	r3, [r7, #4]
			//Motor.PIDdq_control(Id_error, Iq_error, 0.1);
			//Vd_input = Motor.getVd();
			//Vq_input = Motor.getVq();

			//IO入力?
			LL_ADC_REG_StartConversionSWStart(ADC2);
 8008c68:	4829      	ldr	r0, [pc, #164]	; (8008d10 <HighFreqTask+0x198>)
 8008c6a:	f7ff fd03 	bl	8008674 <LL_ADC_REG_StartConversionSWStart>
			float adc2_input = (float)LL_ADC_REG_ReadConversionData12(ADC2)/4095;
 8008c6e:	4828      	ldr	r0, [pc, #160]	; (8008d10 <HighFreqTask+0x198>)
 8008c70:	f7ff fd10 	bl	8008694 <LL_ADC_REG_ReadConversionData12>
 8008c74:	4603      	mov	r3, r0
 8008c76:	ee07 3a90 	vmov	s15, r3
 8008c7a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c7e:	eddf 6a25 	vldr	s13, [pc, #148]	; 8008d14 <HighFreqTask+0x19c>
 8008c82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008c86:	edc7 7a00 	vstr	s15, [r7]
//			Vq_input = 0;
//			Vd_input = adc_speed;//連れ回し運転

			Vganma_input = adc2_input;//連れ回し運転
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	613b      	str	r3, [r7, #16]
			Vdelta_input = 0;
 8008c8e:	f04f 0300 	mov.w	r3, #0
 8008c92:	60fb      	str	r3, [r7, #12]

			Motor.setVganma(Vganma_input);
 8008c94:	ed97 0a04 	vldr	s0, [r7, #16]
 8008c98:	481c      	ldr	r0, [pc, #112]	; (8008d0c <HighFreqTask+0x194>)
 8008c9a:	f7fd fa27 	bl	80060ec <_ZN9MotorInfo9setVganmaEf>
			Motor.setVdelta(Vdelta_input);
 8008c9e:	ed97 0a03 	vldr	s0, [r7, #12]
 8008ca2:	481a      	ldr	r0, [pc, #104]	; (8008d0c <HighFreqTask+0x194>)
 8008ca4:	f7fd fa31 	bl	800610a <_ZN9MotorInfo9setVdeltaEf>

			//PWM出力
			MotorOutputTask();
 8008ca8:	f7ff ff32 	bl	8008b10 <_Z15MotorOutputTaskv>

			if(isDebugMode){//デバッグモードで入る処理
 8008cac:	4b1a      	ldr	r3, [pc, #104]	; (8008d18 <HighFreqTask+0x1a0>)
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d022      	beq.n	8008cfa <HighFreqTask+0x182>
				if( (ui_ctrl.getState()) && (!Motor.mSensor.GetIsAccelerating()) ){//起動後停止の確認処理
 8008cb4:	4819      	ldr	r0, [pc, #100]	; (8008d1c <HighFreqTask+0x1a4>)
 8008cb6:	f7fe fc0f 	bl	80074d8 <_ZN6UiCtrl8getStateEv>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d00a      	beq.n	8008cd6 <HighFreqTask+0x15e>
 8008cc0:	4817      	ldr	r0, [pc, #92]	; (8008d20 <HighFreqTask+0x1a8>)
 8008cc2:	f7fa ffdb 	bl	8003c7c <_ZN9ArgSensor17GetIsAcceleratingEv>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	f083 0301 	eor.w	r3, r3, #1
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d001      	beq.n	8008cd6 <HighFreqTask+0x15e>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e000      	b.n	8008cd8 <HighFreqTask+0x160>
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00e      	beq.n	8008cfa <HighFreqTask+0x182>
					DebugTask(Iu, Iv, Iw, Motor.getArgRad());
 8008cdc:	480b      	ldr	r0, [pc, #44]	; (8008d0c <HighFreqTask+0x194>)
 8008cde:	f7fd f8bc 	bl	8005e5a <_ZN9MotorInfo9getArgRadEv>
 8008ce2:	eef0 7a40 	vmov.f32	s15, s0
 8008ce6:	eef0 1a67 	vmov.f32	s3, s15
 8008cea:	ed97 1a07 	vldr	s2, [r7, #28]
 8008cee:	edd7 0a08 	vldr	s1, [r7, #32]
 8008cf2:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8008cf6:	f000 f815 	bl	8008d24 <DebugTask>
		}
/*	else
		{
			LL_ADC_WriteReg(ADC1,ISR,0);
		}*/
}
 8008cfa:	bf00      	nop
 8008cfc:	3728      	adds	r7, #40	; 0x28
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	40012000 	.word	0x40012000
 8008d08:	00100101 	.word	0x00100101
 8008d0c:	20000270 	.word	0x20000270
 8008d10:	40012100 	.word	0x40012100
 8008d14:	457ff000 	.word	0x457ff000
 8008d18:	20000204 	.word	0x20000204
 8008d1c:	200003b8 	.word	0x200003b8
 8008d20:	200003a0 	.word	0x200003a0

08008d24 <DebugTask>:

void DebugTask(float pIu, float pIv, float pIw, float pArg){
 8008d24:	b590      	push	{r4, r7, lr}
 8008d26:	ed2d 8b02 	vpush	{d8}
 8008d2a:	b0bd      	sub	sp, #244	; 0xf4
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	ed87 0a03 	vstr	s0, [r7, #12]
 8008d32:	edc7 0a02 	vstr	s1, [r7, #8]
 8008d36:	ed87 1a01 	vstr	s2, [r7, #4]
 8008d3a:	edc7 1a00 	vstr	s3, [r7]
	//他のclass内に持って行く時には、UARTとかDebugのクラスを渡さないとダメかも。
	//Wrapperが持つ関数にしてしまうのが一番うまく行くと思った。

	Debug.SetMotorData(new DebugInfo::SendMotorData(pIu,pIv,pIw,pArg));//デバッグの種類増やしたい時はここで変えてね
 8008d3e:	2040      	movs	r0, #64	; 0x40
 8008d40:	f000 fb77 	bl	8009432 <_Znwj>
 8008d44:	4603      	mov	r3, r0
 8008d46:	461c      	mov	r4, r3
 8008d48:	edd7 1a00 	vldr	s3, [r7]
 8008d4c:	ed97 1a01 	vldr	s2, [r7, #4]
 8008d50:	edd7 0a02 	vldr	s1, [r7, #8]
 8008d54:	ed97 0a03 	vldr	s0, [r7, #12]
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f7fb f87f 	bl	8003e5c <_ZN9DebugInfo13SendMotorDataC1Effff>
 8008d5e:	4621      	mov	r1, r4
 8008d60:	48a8      	ldr	r0, [pc, #672]	; (8009004 <DebugTask+0x2e0>)
 8008d62:	f7fb f8f7 	bl	8003f54 <_ZN9DebugInfo12SetMotorDataEPNS_13SendMotorDataE>
	unsigned int VectCount = Debug.GetVectSize();//Debug用にブチ込んだデータの個数
 8008d66:	48a7      	ldr	r0, [pc, #668]	; (8009004 <DebugTask+0x2e0>)
 8008d68:	f7fb f912 	bl	8003f90 <_ZN9DebugInfo11GetVectSizeEv>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	if(VectCount < debugCount){
 8008d72:	4ba5      	ldr	r3, [pc, #660]	; (8009008 <DebugTask+0x2e4>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	f080 813c 	bcs.w	8008ff8 <DebugTask+0x2d4>
		//モータ停止の動作
		BtnActOFF();
 8008d80:	f000 f96e 	bl	8009060 <BtnActOFF>
		//モータ停止を確認する動作
		if(Motor.mSensor.getArg() == Motor.mSensor.getArgOld()){
 8008d84:	48a1      	ldr	r0, [pc, #644]	; (800900c <DebugTask+0x2e8>)
 8008d86:	f7fa ff3d 	bl	8003c04 <_ZN9ArgSensor6getArgEv>
 8008d8a:	eeb0 8a40 	vmov.f32	s16, s0
 8008d8e:	489f      	ldr	r0, [pc, #636]	; (800900c <DebugTask+0x2e8>)
 8008d90:	f7fa ff47 	bl	8003c22 <_ZN9ArgSensor9getArgOldEv>
 8008d94:	eef0 7a40 	vmov.f32	s15, s0
 8008d98:	eeb4 8a67 	vcmp.f32	s16, s15
 8008d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008da0:	bf0c      	ite	eq
 8008da2:	2301      	moveq	r3, #1
 8008da4:	2300      	movne	r3, #0
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f000 8125 	beq.w	8008ff8 <DebugTask+0x2d4>
			//タイマ停止する動作(何回もこれ呼ばれちゃうから)

			PWM_Object1.f2Duty(0);//50%duty
 8008dae:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8009010 <DebugTask+0x2ec>
 8008db2:	4898      	ldr	r0, [pc, #608]	; (8009014 <DebugTask+0x2f0>)
 8008db4:	f7fd ff2a 	bl	8006c0c <_ZN3PWM6f2DutyEf>
			PWM_Object2.f2Duty(0);
 8008db8:	ed9f 0a95 	vldr	s0, [pc, #596]	; 8009010 <DebugTask+0x2ec>
 8008dbc:	4896      	ldr	r0, [pc, #600]	; (8009018 <DebugTask+0x2f4>)
 8008dbe:	f7fd ff25 	bl	8006c0c <_ZN3PWM6f2DutyEf>
			PWM_Object3.f2Duty(0);
 8008dc2:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8009010 <DebugTask+0x2ec>
 8008dc6:	4895      	ldr	r0, [pc, #596]	; (800901c <DebugTask+0x2f8>)
 8008dc8:	f7fd ff20 	bl	8006c0c <_ZN3PWM6f2DutyEf>
			PWM_Object4.f2Duty(0);
 8008dcc:	ed9f 0a90 	vldr	s0, [pc, #576]	; 8009010 <DebugTask+0x2ec>
 8008dd0:	4893      	ldr	r0, [pc, #588]	; (8009020 <DebugTask+0x2fc>)
 8008dd2:	f7fd ff1b 	bl	8006c0c <_ZN3PWM6f2DutyEf>

			PWM_Object1.Disable();
 8008dd6:	488f      	ldr	r0, [pc, #572]	; (8009014 <DebugTask+0x2f0>)
 8008dd8:	f7fd ff3f 	bl	8006c5a <_ZN3PWM7DisableEv>
			PWM_Object2.Disable();
 8008ddc:	488e      	ldr	r0, [pc, #568]	; (8009018 <DebugTask+0x2f4>)
 8008dde:	f7fd ff3c 	bl	8006c5a <_ZN3PWM7DisableEv>
			PWM_Object3.Disable();
 8008de2:	488e      	ldr	r0, [pc, #568]	; (800901c <DebugTask+0x2f8>)
 8008de4:	f7fd ff39 	bl	8006c5a <_ZN3PWM7DisableEv>
			PWM_Object4.Disable();
 8008de8:	488d      	ldr	r0, [pc, #564]	; (8009020 <DebugTask+0x2fc>)
 8008dea:	f7fd ff36 	bl	8006c5a <_ZN3PWM7DisableEv>
			//UARTで転送する動作
			std::vector<DebugInfo::SendMotorData> vectorbuf = Debug.GetVect();
 8008dee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008df2:	4984      	ldr	r1, [pc, #528]	; (8009004 <DebugTask+0x2e0>)
 8008df4:	4618      	mov	r0, r3
 8008df6:	f7fb f8bc 	bl	8003f72 <_ZN9DebugInfo7GetVectEv>
			for(const auto& num : vectorbuf){
 8008dfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008dfe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008e02:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8008e06:	f7fb fbdd 	bl	80045c4 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE5beginEv>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e0e:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8008e12:	f7fb f9d1 	bl	80041b8 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EE3endEv>
 8008e16:	4603      	mov	r3, r0
 8008e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008e1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008e22:	4611      	mov	r1, r2
 8008e24:	4618      	mov	r0, r3
 8008e26:	f000 f97b 	bl	8009120 <_ZN9__gnu_cxxneIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f000 80de 	beq.w	8008fee <DebugTask+0x2ca>
 8008e32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008e36:	4618      	mov	r0, r3
 8008e38:	f000 f99b 	bl	8009172 <_ZNK9__gnu_cxx17__normal_iteratorIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEdeEv>
 8008e3c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
				std::string strbuf;
 8008e40:	f107 0310 	add.w	r3, r7, #16
 8008e44:	4618      	mov	r0, r3
 8008e46:	f000 fc6f 	bl	8009728 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>

				strbuf.append(std::to_string(num.mIu));
 8008e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e4e:	edd3 7a01 	vldr	s15, [r3, #4]
 8008e52:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008e56:	eeb0 0a67 	vmov.f32	s0, s15
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7ff fc88 	bl	8008770 <_ZNSt7__cxx119to_stringEf>
 8008e60:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8008e64:	f107 0310 	add.w	r3, r7, #16
 8008e68:	4611      	mov	r1, r2
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f000 fc91 	bl	8009792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8008e70:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008e74:	4618      	mov	r0, r3
 8008e76:	f000 fc5e 	bl	8009736 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				strbuf.append(",");
 8008e7a:	f107 0310 	add.w	r3, r7, #16
 8008e7e:	4969      	ldr	r1, [pc, #420]	; (8009024 <DebugTask+0x300>)
 8008e80:	4618      	mov	r0, r3
 8008e82:	f000 fc8d 	bl	80097a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
				strbuf.append(std::to_string(num.mIv));
 8008e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e8a:	edd3 7a02 	vldr	s15, [r3, #8]
 8008e8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008e92:	eeb0 0a67 	vmov.f32	s0, s15
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7ff fc6a 	bl	8008770 <_ZNSt7__cxx119to_stringEf>
 8008e9c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8008ea0:	f107 0310 	add.w	r3, r7, #16
 8008ea4:	4611      	mov	r1, r2
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 fc73 	bl	8009792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8008eac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f000 fc40 	bl	8009736 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				strbuf.append(",");
 8008eb6:	f107 0310 	add.w	r3, r7, #16
 8008eba:	495a      	ldr	r1, [pc, #360]	; (8009024 <DebugTask+0x300>)
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f000 fc6f 	bl	80097a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
				strbuf.append(std::to_string(num.mIw));
 8008ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ec6:	edd3 7a03 	vldr	s15, [r3, #12]
 8008eca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008ece:	eeb0 0a67 	vmov.f32	s0, s15
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7ff fc4c 	bl	8008770 <_ZNSt7__cxx119to_stringEf>
 8008ed8:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8008edc:	f107 0310 	add.w	r3, r7, #16
 8008ee0:	4611      	mov	r1, r2
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f000 fc55 	bl	8009792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8008ee8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008eec:	4618      	mov	r0, r3
 8008eee:	f000 fc22 	bl	8009736 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				strbuf.append(",");
 8008ef2:	f107 0310 	add.w	r3, r7, #16
 8008ef6:	494b      	ldr	r1, [pc, #300]	; (8009024 <DebugTask+0x300>)
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f000 fc51 	bl	80097a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
				strbuf.append(std::to_string(num.mEArg));
 8008efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f02:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8008f06:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7ff fc2e 	bl	8008770 <_ZNSt7__cxx119to_stringEf>
 8008f14:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8008f18:	f107 0310 	add.w	r3, r7, #16
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f000 fc37 	bl	8009792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8008f24:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f000 fc04 	bl	8009736 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				strbuf.append(",");
 8008f2e:	f107 0310 	add.w	r3, r7, #16
 8008f32:	493c      	ldr	r1, [pc, #240]	; (8009024 <DebugTask+0x300>)
 8008f34:	4618      	mov	r0, r3
 8008f36:	f000 fc33 	bl	80097a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
				strbuf.append(std::to_string(num.mIalpha));
				strbuf.append(",");
				strbuf.append(std::to_string(num.mIbeta));
				strbuf.append(",");
#endif
				strbuf.append(std::to_string(num.mId));
 8008f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f3e:	edd3 7a06 	vldr	s15, [r3, #24]
 8008f42:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008f46:	eeb0 0a67 	vmov.f32	s0, s15
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7ff fc10 	bl	8008770 <_ZNSt7__cxx119to_stringEf>
 8008f50:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8008f54:	f107 0310 	add.w	r3, r7, #16
 8008f58:	4611      	mov	r1, r2
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f000 fc19 	bl	8009792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8008f60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008f64:	4618      	mov	r0, r3
 8008f66:	f000 fbe6 	bl	8009736 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				strbuf.append(",");
 8008f6a:	f107 0310 	add.w	r3, r7, #16
 8008f6e:	492d      	ldr	r1, [pc, #180]	; (8009024 <DebugTask+0x300>)
 8008f70:	4618      	mov	r0, r3
 8008f72:	f000 fc15 	bl	80097a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
				strbuf.append(std::to_string(num.mIq));
 8008f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f7a:	edd3 7a07 	vldr	s15, [r3, #28]
 8008f7e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008f82:	eeb0 0a67 	vmov.f32	s0, s15
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7ff fbf2 	bl	8008770 <_ZNSt7__cxx119to_stringEf>
 8008f8c:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8008f90:	f107 0310 	add.w	r3, r7, #16
 8008f94:	4611      	mov	r1, r2
 8008f96:	4618      	mov	r0, r3
 8008f98:	f000 fbfb 	bl	8009792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8008f9c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f000 fbc8 	bl	8009736 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				strbuf.append("/n");
 8008fa6:	f107 0310 	add.w	r3, r7, #16
 8008faa:	491f      	ldr	r1, [pc, #124]	; (8009028 <DebugTask+0x304>)
 8008fac:	4618      	mov	r0, r3
 8008fae:	f000 fbf7 	bl	80097a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
				uartob.Transmit(strbuf);
 8008fb2:	f107 0210 	add.w	r2, r7, #16
 8008fb6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008fba:	4611      	mov	r1, r2
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f000 fc09 	bl	80097d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8008fc2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	4818      	ldr	r0, [pc, #96]	; (800902c <DebugTask+0x308>)
 8008fca:	f7fe fa0d 	bl	80073e8 <_ZN4UART8TransmitENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8008fce:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f000 fbaf 	bl	8009736 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				std::string strbuf;
 8008fd8:	f107 0310 	add.w	r3, r7, #16
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f000 fbaa 	bl	8009736 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			for(const auto& num : vectorbuf){
 8008fe2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f000 f8b2 	bl	8009150 <_ZN9__gnu_cxx17__normal_iteratorIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEppEv>
 8008fec:	e715      	b.n	8008e1a <DebugTask+0xf6>
			std::vector<DebugInfo::SendMotorData> vectorbuf = Debug.GetVect();
 8008fee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7fa ffe7 	bl	8003fc6 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>
			}
			//while(1){}//ここで止める？要検討
		}
	}
	//暫定で作る
}
 8008ff8:	bf00      	nop
 8008ffa:	37f4      	adds	r7, #244	; 0xf4
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	ecbd 8b02 	vpop	{d8}
 8009002:	bd90      	pop	{r4, r7, pc}
 8009004:	200003c0 	.word	0x200003c0
 8009008:	2000000c 	.word	0x2000000c
 800900c:	200003a0 	.word	0x200003a0
 8009010:	00000000 	.word	0x00000000
 8009014:	2000020c 	.word	0x2000020c
 8009018:	2000021c 	.word	0x2000021c
 800901c:	2000022c 	.word	0x2000022c
 8009020:	2000023c 	.word	0x2000023c
 8009024:	0800ce08 	.word	0x0800ce08
 8009028:	0800ce0c 	.word	0x0800ce0c
 800902c:	2000024c 	.word	0x2000024c

08009030 <BtnAct>:

void BtnAct(void){//強制転流開始へのトリガ 割り込みから叩くためにここでラッパする
 8009030:	b580      	push	{r7, lr}
 8009032:	af00      	add	r7, sp, #0
	ui_ctrl.BtnToggle(); // ON/OFFのトグルスイッチ　BtnActで書き込み、getStateで状態を読む
 8009034:	4808      	ldr	r0, [pc, #32]	; (8009058 <BtnAct+0x28>)
 8009036:	f7fe fa2d 	bl	8007494 <_ZN6UiCtrl9BtnToggleEv>
	if(ui_ctrl.getState()){
 800903a:	4807      	ldr	r0, [pc, #28]	; (8009058 <BtnAct+0x28>)
 800903c:	f7fe fa4c 	bl	80074d8 <_ZN6UiCtrl8getStateEv>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d003      	beq.n	800904e <BtnAct+0x1e>
		Motor.startForceCommutation();
 8009046:	4805      	ldr	r0, [pc, #20]	; (800905c <BtnAct+0x2c>)
 8009048:	f7fc fed0 	bl	8005dec <_ZN9MotorInfo21startForceCommutationEv>
	} else {
		Motor.stopForceCommutation();
	}
}
 800904c:	e002      	b.n	8009054 <BtnAct+0x24>
		Motor.stopForceCommutation();
 800904e:	4803      	ldr	r0, [pc, #12]	; (800905c <BtnAct+0x2c>)
 8009050:	f7fc fedb 	bl	8005e0a <_ZN9MotorInfo20stopForceCommutationEv>
}
 8009054:	bf00      	nop
 8009056:	bd80      	pop	{r7, pc}
 8009058:	200003b8 	.word	0x200003b8
 800905c:	20000270 	.word	0x20000270

08009060 <BtnActOFF>:

void BtnActOFF(void){//強制転流開始へのトリガOFF 割り込みから叩かないから本来UiCtrlで定義するべき
 8009060:	b580      	push	{r7, lr}
 8009062:	af00      	add	r7, sp, #0
	ui_ctrl.BtnActOFF(); // OFFのスイッチ　BtnActOFFで書き込み、getStateで状態を読む
 8009064:	4803      	ldr	r0, [pc, #12]	; (8009074 <BtnActOFF+0x14>)
 8009066:	f7fe fa2a 	bl	80074be <_ZN6UiCtrl9BtnActOFFEv>
	Motor.stopForceCommutation();
 800906a:	4803      	ldr	r0, [pc, #12]	; (8009078 <BtnActOFF+0x18>)
 800906c:	f7fc fecd 	bl	8005e0a <_ZN9MotorInfo20stopForceCommutationEv>
}
 8009070:	bf00      	nop
 8009072:	bd80      	pop	{r7, pc}
 8009074:	200003b8 	.word	0x200003b8
 8009078:	20000270 	.word	0x20000270

0800907c <ADC_Init>:
	ui_ctrl.BtnActON(); // ONのトグルスイッチ　BtnActONで書き込み、getStateで状態を読む
	Motor.startForceCommutation();
}

void ADC_Init()
{
 800907c:	b580      	push	{r7, lr}
 800907e:	af00      	add	r7, sp, #0
    LL_ADC_Enable( ADC1 );
 8009080:	4808      	ldr	r0, [pc, #32]	; (80090a4 <ADC_Init+0x28>)
 8009082:	f7ff fae7 	bl	8008654 <LL_ADC_Enable>
    LL_ADC_Enable( ADC2 );
 8009086:	4808      	ldr	r0, [pc, #32]	; (80090a8 <ADC_Init+0x2c>)
 8009088:	f7ff fae4 	bl	8008654 <LL_ADC_Enable>
    LL_ADC_Enable( ADC3 );
 800908c:	4807      	ldr	r0, [pc, #28]	; (80090ac <ADC_Init+0x30>)
 800908e:	f7ff fae1 	bl	8008654 <LL_ADC_Enable>
    /* ADC1 Injected conversions end interrupt enabling */
    LL_ADC_ClearFlag_JEOS( ADC1 );
 8009092:	4804      	ldr	r0, [pc, #16]	; (80090a4 <ADC_Init+0x28>)
 8009094:	f7ff fb3f 	bl	8008716 <LL_ADC_ClearFlag_JEOS>
    LL_ADC_EnableIT_JEOS( ADC1 );
 8009098:	4802      	ldr	r0, [pc, #8]	; (80090a4 <ADC_Init+0x28>)
 800909a:	f7ff fb4a 	bl	8008732 <LL_ADC_EnableIT_JEOS>
}
 800909e:	bf00      	nop
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	40012000 	.word	0x40012000
 80090a8:	40012100 	.word	0x40012100
 80090ac:	40012200 	.word	0x40012200

080090b0 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 80090b0:	b408      	push	{r3}
 80090b2:	b590      	push	{r4, r7, lr}
 80090b4:	b088      	sub	sp, #32
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	60f8      	str	r0, [r7, #12]
 80090ba:	60b9      	str	r1, [r7, #8]
 80090bc:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	3307      	adds	r3, #7
 80090c2:	3307      	adds	r3, #7
 80090c4:	08db      	lsrs	r3, r3, #3
 80090c6:	00db      	lsls	r3, r3, #3
 80090c8:	ebad 0d03 	sub.w	sp, sp, r3
 80090cc:	466b      	mov	r3, sp
 80090ce:	3307      	adds	r3, #7
 80090d0:	08db      	lsrs	r3, r3, #3
 80090d2:	00db      	lsls	r3, r3, #3
 80090d4:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 80090d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80090da:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 80090dc:	68bc      	ldr	r4, [r7, #8]
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090e2:	6879      	ldr	r1, [r7, #4]
 80090e4:	69f8      	ldr	r0, [r7, #28]
 80090e6:	47a0      	blx	r4
 80090e8:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	69fa      	ldr	r2, [r7, #28]
 80090ee:	18d4      	adds	r4, r2, r3
 80090f0:	f107 0314 	add.w	r3, r7, #20
 80090f4:	4618      	mov	r0, r3
 80090f6:	f000 f9ad 	bl	8009454 <_ZNSaIcEC1Ev>
 80090fa:	f107 0314 	add.w	r3, r7, #20
 80090fe:	4622      	mov	r2, r4
 8009100:	69f9      	ldr	r1, [r7, #28]
 8009102:	68f8      	ldr	r0, [r7, #12]
 8009104:	f000 f841 	bl	800918a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8009108:	f107 0314 	add.w	r3, r7, #20
 800910c:	4618      	mov	r0, r3
 800910e:	f000 f9a2 	bl	8009456 <_ZNSaIcED1Ev>
    }
 8009112:	68f8      	ldr	r0, [r7, #12]
 8009114:	3720      	adds	r7, #32
 8009116:	46bd      	mov	sp, r7
 8009118:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800911c:	b001      	add	sp, #4
 800911e:	4770      	bx	lr

08009120 <_ZN9__gnu_cxxneIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8009120:	b590      	push	{r4, r7, lr}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f7fb fa84 	bl	8004638 <_ZNK9__gnu_cxx17__normal_iteratorIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEE4baseEv>
 8009130:	4603      	mov	r3, r0
 8009132:	681c      	ldr	r4, [r3, #0]
 8009134:	6838      	ldr	r0, [r7, #0]
 8009136:	f7fb fa7f 	bl	8004638 <_ZNK9__gnu_cxx17__normal_iteratorIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEE4baseEv>
 800913a:	4603      	mov	r3, r0
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	429c      	cmp	r4, r3
 8009140:	bf14      	ite	ne
 8009142:	2301      	movne	r3, #1
 8009144:	2300      	moveq	r3, #0
 8009146:	b2db      	uxtb	r3, r3
 8009148:	4618      	mov	r0, r3
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	bd90      	pop	{r4, r7, pc}

08009150 <_ZN9__gnu_cxx17__normal_iteratorIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
	++_M_current;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	601a      	str	r2, [r3, #0]
	return *this;
 8009164:	687b      	ldr	r3, [r7, #4]
      }
 8009166:	4618      	mov	r0, r3
 8009168:	370c      	adds	r7, #12
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr

08009172 <_ZNK9__gnu_cxx17__normal_iteratorIPN9DebugInfo13SendMotorDataESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8009172:	b480      	push	{r7}
 8009174:	b083      	sub	sp, #12
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4618      	mov	r0, r3
 8009180:	370c      	adds	r7, #12
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr

0800918a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 800918a:	b590      	push	{r4, r7, lr}
 800918c:	b085      	sub	sp, #20
 800918e:	af00      	add	r7, sp, #0
 8009190:	60f8      	str	r0, [r7, #12]
 8009192:	60b9      	str	r1, [r7, #8]
 8009194:	607a      	str	r2, [r7, #4]
 8009196:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 8009198:	68fc      	ldr	r4, [r7, #12]
 800919a:	68f8      	ldr	r0, [r7, #12]
 800919c:	f000 fa18 	bl	80095d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80091a0:	4603      	mov	r3, r0
 80091a2:	683a      	ldr	r2, [r7, #0]
 80091a4:	4619      	mov	r1, r3
 80091a6:	4620      	mov	r0, r4
 80091a8:	f000 fb12 	bl	80097d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	68b9      	ldr	r1, [r7, #8]
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f000 f805 	bl	80091c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	4618      	mov	r0, r3
 80091ba:	3714      	adds	r7, #20
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd90      	pop	{r4, r7, pc}

080091c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b086      	sub	sp, #24
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	68b9      	ldr	r1, [r7, #8]
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f000 f804 	bl	80091de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 80091d6:	bf00      	nop
 80091d8:	3718      	adds	r7, #24
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 80091de:	b590      	push	{r4, r7, lr}
 80091e0:	b087      	sub	sp, #28
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	60f8      	str	r0, [r7, #12]
 80091e6:	60b9      	str	r1, [r7, #8]
 80091e8:	607a      	str	r2, [r7, #4]
 80091ea:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 80091ec:	4623      	mov	r3, r4
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	68b9      	ldr	r1, [r7, #8]
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	f000 f804 	bl	8009200 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 80091f8:	bf00      	nop
 80091fa:	371c      	adds	r7, #28
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd90      	pop	{r4, r7, pc}

08009200 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8009200:	b580      	push	{r7, lr}
 8009202:	b086      	sub	sp, #24
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	607a      	str	r2, [r7, #4]
 800920c:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 800920e:	68b8      	ldr	r0, [r7, #8]
 8009210:	f000 f83e 	bl	8009290 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 8009214:	4603      	mov	r3, r0
 8009216:	2b00      	cmp	r3, #0
 8009218:	d005      	beq.n	8009226 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	429a      	cmp	r2, r3
 8009220:	d001      	beq.n	8009226 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8009222:	2301      	movs	r3, #1
 8009224:	e000      	b.n	8009228 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 8009226:	2300      	movs	r3, #0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d002      	beq.n	8009232 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 800922c:	4817      	ldr	r0, [pc, #92]	; (800928c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 800922e:	f000 f918 	bl	8009462 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8009232:	6879      	ldr	r1, [r7, #4]
 8009234:	68b8      	ldr	r0, [r7, #8]
 8009236:	f000 f845 	bl	80092c4 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 800923a:	4603      	mov	r3, r0
 800923c:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	2b0f      	cmp	r3, #15
 8009242:	d910      	bls.n	8009266 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8009244:	f107 0314 	add.w	r3, r7, #20
 8009248:	2200      	movs	r2, #0
 800924a:	4619      	mov	r1, r3
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f000 f9c9 	bl	80095e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009252:	4603      	mov	r3, r0
 8009254:	4619      	mov	r1, r3
 8009256:	68f8      	ldr	r0, [r7, #12]
 8009258:	f000 f9b6 	bl	80095c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	4619      	mov	r1, r3
 8009260:	68f8      	ldr	r0, [r7, #12]
 8009262:	f000 f9b7 	bl	80095d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8009266:	68f8      	ldr	r0, [r7, #12]
 8009268:	f000 f9b0 	bl	80095cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800926c:	4603      	mov	r3, r0
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	68b9      	ldr	r1, [r7, #8]
 8009272:	4618      	mov	r0, r3
 8009274:	f000 f9ed 	bl	8009652 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	4619      	mov	r1, r3
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f000 f9ab 	bl	80095d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8009282:	bf00      	nop
 8009284:	3718      	adds	r7, #24
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	0800ce10 	.word	0x0800ce10

08009290 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2b00      	cmp	r3, #0
 800929c:	bf0c      	ite	eq
 800929e:	2301      	moveq	r3, #1
 80092a0:	2300      	movne	r3, #0
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	4618      	mov	r0, r3
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80092b8:	4618      	mov	r0, r3
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80092c4:	b5b0      	push	{r4, r5, r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80092ce:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80092d0:	1d3b      	adds	r3, r7, #4
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7ff ffec 	bl	80092b0 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 80092d8:	462a      	mov	r2, r5
 80092da:	6839      	ldr	r1, [r7, #0]
 80092dc:	4620      	mov	r0, r4
 80092de:	f000 f805 	bl	80092ec <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 80092e2:	4603      	mov	r3, r0
    }
 80092e4:	4618      	mov	r0, r3
 80092e6:	3710      	adds	r7, #16
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bdb0      	pop	{r4, r5, r7, pc}

080092ec <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80092ec:	b480      	push	{r7}
 80092ee:	b085      	sub	sp, #20
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80092f8:	68ba      	ldr	r2, [r7, #8]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	1ad3      	subs	r3, r2, r3
    }
 80092fe:	4618      	mov	r0, r3
 8009300:	3714      	adds	r7, #20
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr
	...

0800930c <_Z41__static_initialization_and_destruction_0ii>:
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2b01      	cmp	r3, #1
 800931a:	d11f      	bne.n	800935c <_Z41__static_initialization_and_destruction_0ii+0x50>
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009322:	4293      	cmp	r3, r2
 8009324:	d11a      	bne.n	800935c <_Z41__static_initialization_and_destruction_0ii+0x50>
TIMInit TimerInit;
 8009326:	481b      	ldr	r0, [pc, #108]	; (8009394 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8009328:	f7fd fe60 	bl	8006fec <_ZN7TIMInitC1Ev>
PWM PWM_Object1; //PWMのHWを叩くClass
 800932c:	481a      	ldr	r0, [pc, #104]	; (8009398 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800932e:	f7ff fa3d 	bl	80087ac <_ZN3PWMC1Ev>
PWM PWM_Object2;
 8009332:	481a      	ldr	r0, [pc, #104]	; (800939c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8009334:	f7ff fa3a 	bl	80087ac <_ZN3PWMC1Ev>
PWM PWM_Object3;
 8009338:	4819      	ldr	r0, [pc, #100]	; (80093a0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800933a:	f7ff fa37 	bl	80087ac <_ZN3PWMC1Ev>
PWM PWM_Object4;
 800933e:	4819      	ldr	r0, [pc, #100]	; (80093a4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8009340:	f7ff fa34 	bl	80087ac <_ZN3PWMC1Ev>
UART uartob;
 8009344:	4818      	ldr	r0, [pc, #96]	; (80093a8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8009346:	f7fe f813 	bl	8007370 <_ZN4UARTC1Ev>
MotorInfo Motor; //モータの電圧・電流等を管理、及び座標変換のClass
 800934a:	4818      	ldr	r0, [pc, #96]	; (80093ac <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800934c:	f7fc fbda 	bl	8005b04 <_ZN9MotorInfoC1Ev>
UiCtrl ui_ctrl; //UI入力を処理するclass
 8009350:	4817      	ldr	r0, [pc, #92]	; (80093b0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009352:	f7fe f86b 	bl	800742c <_ZN6UiCtrlC1Ev>
DebugInfo Debug;//デバッグ情報かき集め
 8009356:	4817      	ldr	r0, [pc, #92]	; (80093b4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009358:	f7fa fdc4 	bl	8003ee4 <_ZN9DebugInfoC1Ev>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d113      	bne.n	800938a <_Z41__static_initialization_and_destruction_0ii+0x7e>
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009368:	4293      	cmp	r3, r2
 800936a:	d10e      	bne.n	800938a <_Z41__static_initialization_and_destruction_0ii+0x7e>
 800936c:	4811      	ldr	r0, [pc, #68]	; (80093b4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800936e:	f7fa fdcd 	bl	8003f0c <_ZN9DebugInfoD1Ev>
UiCtrl ui_ctrl; //UI入力を処理するclass
 8009372:	480f      	ldr	r0, [pc, #60]	; (80093b0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009374:	f7fe f86e 	bl	8007454 <_ZN6UiCtrlD1Ev>
MotorInfo Motor; //モータの電圧・電流等を管理、及び座標変換のClass
 8009378:	480c      	ldr	r0, [pc, #48]	; (80093ac <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800937a:	f7fc fbf7 	bl	8005b6c <_ZN9MotorInfoD1Ev>
UART uartob;
 800937e:	480a      	ldr	r0, [pc, #40]	; (80093a8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8009380:	f7fe f80e 	bl	80073a0 <_ZN4UARTD1Ev>
TIMInit TimerInit;
 8009384:	4803      	ldr	r0, [pc, #12]	; (8009394 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8009386:	f7fd fe41 	bl	800700c <_ZN7TIMInitD1Ev>
}
 800938a:	bf00      	nop
 800938c:	3708      	adds	r7, #8
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	20000208 	.word	0x20000208
 8009398:	2000020c 	.word	0x2000020c
 800939c:	2000021c 	.word	0x2000021c
 80093a0:	2000022c 	.word	0x2000022c
 80093a4:	2000023c 	.word	0x2000023c
 80093a8:	2000024c 	.word	0x2000024c
 80093ac:	20000270 	.word	0x20000270
 80093b0:	200003b8 	.word	0x200003b8
 80093b4:	200003c0 	.word	0x200003c0

080093b8 <_GLOBAL__sub_I_isDebugMode>:
 80093b8:	b580      	push	{r7, lr}
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80093c0:	2001      	movs	r0, #1
 80093c2:	f7ff ffa3 	bl	800930c <_Z41__static_initialization_and_destruction_0ii>
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <_GLOBAL__sub_D_isDebugMode>:
 80093c8:	b580      	push	{r7, lr}
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80093d0:	2000      	movs	r0, #0
 80093d2:	f7ff ff9b 	bl	800930c <_Z41__static_initialization_and_destruction_0ii>
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80093d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009410 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80093dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80093de:	e003      	b.n	80093e8 <LoopCopyDataInit>

080093e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80093e0:	4b0c      	ldr	r3, [pc, #48]	; (8009414 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80093e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80093e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80093e6:	3104      	adds	r1, #4

080093e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80093e8:	480b      	ldr	r0, [pc, #44]	; (8009418 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80093ea:	4b0c      	ldr	r3, [pc, #48]	; (800941c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80093ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80093ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80093f0:	d3f6      	bcc.n	80093e0 <CopyDataInit>
  ldr  r2, =_sbss
 80093f2:	4a0b      	ldr	r2, [pc, #44]	; (8009420 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80093f4:	e002      	b.n	80093fc <LoopFillZerobss>

080093f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80093f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80093f8:	f842 3b04 	str.w	r3, [r2], #4

080093fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80093fc:	4b09      	ldr	r3, [pc, #36]	; (8009424 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80093fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009400:	d3f9      	bcc.n	80093f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009402:	f7ff f84b 	bl	800849c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009406:	f001 fbdb 	bl	800abc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800940a:	f7fe fec3 	bl	8008194 <main>
  bx  lr    
 800940e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009410:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 8009414:	0800d410 	.word	0x0800d410
  ldr  r0, =_sdata
 8009418:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800941c:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8009420:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8009424:	2000042c 	.word	0x2000042c

08009428 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009428:	e7fe      	b.n	8009428 <CAN1_RX0_IRQHandler>

0800942a <_ZdlPv>:
 800942a:	f001 bbf5 	b.w	800ac18 <free>

0800942e <_ZdlPvj>:
 800942e:	f7ff bffc 	b.w	800942a <_ZdlPv>

08009432 <_Znwj>:
 8009432:	b510      	push	{r4, lr}
 8009434:	2800      	cmp	r0, #0
 8009436:	bf14      	ite	ne
 8009438:	4604      	movne	r4, r0
 800943a:	2401      	moveq	r4, #1
 800943c:	4620      	mov	r0, r4
 800943e:	f001 fbe3 	bl	800ac08 <malloc>
 8009442:	b930      	cbnz	r0, 8009452 <_Znwj+0x20>
 8009444:	f000 f9d4 	bl	80097f0 <_ZSt15get_new_handlerv>
 8009448:	b908      	cbnz	r0, 800944e <_Znwj+0x1c>
 800944a:	f001 fbac 	bl	800aba6 <abort>
 800944e:	4780      	blx	r0
 8009450:	e7f4      	b.n	800943c <_Znwj+0xa>
 8009452:	bd10      	pop	{r4, pc}

08009454 <_ZNSaIcEC1Ev>:
 8009454:	4770      	bx	lr

08009456 <_ZNSaIcED1Ev>:
 8009456:	4770      	bx	lr

08009458 <fmodl>:
 8009458:	f000 bb66 	b.w	8009b28 <fmod>

0800945c <_ZSt17__throw_bad_allocv>:
 800945c:	b508      	push	{r3, lr}
 800945e:	f001 fba2 	bl	800aba6 <abort>

08009462 <_ZSt19__throw_logic_errorPKc>:
 8009462:	b508      	push	{r3, lr}
 8009464:	f001 fb9f 	bl	800aba6 <abort>

08009468 <_ZSt20__throw_length_errorPKc>:
 8009468:	b508      	push	{r3, lr}
 800946a:	f001 fb9c 	bl	800aba6 <abort>

0800946e <_ZSt24__throw_out_of_range_fmtPKcz>:
 800946e:	b40f      	push	{r0, r1, r2, r3}
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	f107 0410 	add.w	r4, r7, #16
 800947a:	f854 5b04 	ldr.w	r5, [r4], #4
 800947e:	4628      	mov	r0, r5
 8009480:	f7f6 ff16 	bl	80002b0 <strlen>
 8009484:	f200 230e 	addw	r3, r0, #526	; 0x20e
 8009488:	f023 0307 	bic.w	r3, r3, #7
 800948c:	ebad 0d03 	sub.w	sp, sp, r3
 8009490:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8009494:	4623      	mov	r3, r4
 8009496:	462a      	mov	r2, r5
 8009498:	4668      	mov	r0, sp
 800949a:	607c      	str	r4, [r7, #4]
 800949c:	f000 f850 	bl	8009540 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 80094a0:	f001 fb81 	bl	800aba6 <abort>

080094a4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b09c      	sub	sp, #112	; 0x70
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	1a0e      	subs	r6, r1, r0
 80094ac:	4680      	mov	r8, r0
 80094ae:	2269      	movs	r2, #105	; 0x69
 80094b0:	490e      	ldr	r1, [pc, #56]	; (80094ec <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 80094b2:	1d38      	adds	r0, r7, #4
 80094b4:	f001 fbb8 	bl	800ac28 <memcpy>
 80094b8:	f106 0377 	add.w	r3, r6, #119	; 0x77
 80094bc:	f023 0307 	bic.w	r3, r3, #7
 80094c0:	ebad 0d03 	sub.w	sp, sp, r3
 80094c4:	466c      	mov	r4, sp
 80094c6:	2268      	movs	r2, #104	; 0x68
 80094c8:	1d39      	adds	r1, r7, #4
 80094ca:	1c75      	adds	r5, r6, #1
 80094cc:	4620      	mov	r0, r4
 80094ce:	f001 fbab 	bl	800ac28 <memcpy>
 80094d2:	4425      	add	r5, r4
 80094d4:	4632      	mov	r2, r6
 80094d6:	4641      	mov	r1, r8
 80094d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80094dc:	f001 fba4 	bl	800ac28 <memcpy>
 80094e0:	2300      	movs	r3, #0
 80094e2:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 80094e6:	4620      	mov	r0, r4
 80094e8:	f7ff ffbb 	bl	8009462 <_ZSt19__throw_logic_errorPKc>
 80094ec:	0800cf0f 	.word	0x0800cf0f

080094f0 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 80094f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	b086      	sub	sp, #24
 80094f6:	466d      	mov	r5, sp
 80094f8:	f105 040c 	add.w	r4, r5, #12
 80094fc:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800953c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8009500:	4623      	mov	r3, r4
 8009502:	f04f 0c0a 	mov.w	ip, #10
 8009506:	fbb2 f6fc 	udiv	r6, r2, ip
 800950a:	fb0c 2216 	mls	r2, ip, r6, r2
 800950e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8009512:	f803 2d01 	strb.w	r2, [r3, #-1]!
 8009516:	4632      	mov	r2, r6
 8009518:	2e00      	cmp	r6, #0
 800951a:	d1f4      	bne.n	8009506 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 800951c:	1ae4      	subs	r4, r4, r3
 800951e:	428c      	cmp	r4, r1
 8009520:	d808      	bhi.n	8009534 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 8009522:	f1c4 010c 	rsb	r1, r4, #12
 8009526:	4622      	mov	r2, r4
 8009528:	4429      	add	r1, r5
 800952a:	f001 fb7d 	bl	800ac28 <memcpy>
 800952e:	4620      	mov	r0, r4
 8009530:	46bd      	mov	sp, r7
 8009532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009534:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009538:	e7f9      	b.n	800952e <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 800953a:	bf00      	nop
 800953c:	0800cf04 	.word	0x0800cf04

08009540 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8009540:	3901      	subs	r1, #1
 8009542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009546:	4606      	mov	r6, r0
 8009548:	4615      	mov	r5, r2
 800954a:	1847      	adds	r7, r0, r1
 800954c:	4604      	mov	r4, r0
 800954e:	782a      	ldrb	r2, [r5, #0]
 8009550:	b392      	cbz	r2, 80095b8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x78>
 8009552:	42bc      	cmp	r4, r7
 8009554:	d22c      	bcs.n	80095b0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 8009556:	2a25      	cmp	r2, #37	; 0x25
 8009558:	d107      	bne.n	800956a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 800955a:	786a      	ldrb	r2, [r5, #1]
 800955c:	2a73      	cmp	r2, #115	; 0x73
 800955e:	d009      	beq.n	8009574 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x34>
 8009560:	2a7a      	cmp	r2, #122	; 0x7a
 8009562:	d012      	beq.n	800958a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4a>
 8009564:	2a25      	cmp	r2, #37	; 0x25
 8009566:	d100      	bne.n	800956a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8009568:	3501      	adds	r5, #1
 800956a:	782a      	ldrb	r2, [r5, #0]
 800956c:	7022      	strb	r2, [r4, #0]
 800956e:	3501      	adds	r5, #1
 8009570:	3401      	adds	r4, #1
 8009572:	e7ec      	b.n	800954e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8009574:	1d19      	adds	r1, r3, #4
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	3b01      	subs	r3, #1
 800957a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800957e:	b1a2      	cbz	r2, 80095aa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6a>
 8009580:	42bc      	cmp	r4, r7
 8009582:	d015      	beq.n	80095b0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 8009584:	f804 2b01 	strb.w	r2, [r4], #1
 8009588:	e7f7      	b.n	800957a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3a>
 800958a:	78aa      	ldrb	r2, [r5, #2]
 800958c:	2a75      	cmp	r2, #117	; 0x75
 800958e:	d1ec      	bne.n	800956a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	1b39      	subs	r1, r7, r4
 8009594:	4620      	mov	r0, r4
 8009596:	f103 0804 	add.w	r8, r3, #4
 800959a:	f7ff ffa9 	bl	80094f0 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 800959e:	2800      	cmp	r0, #0
 80095a0:	dd06      	ble.n	80095b0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 80095a2:	4404      	add	r4, r0
 80095a4:	3503      	adds	r5, #3
 80095a6:	4643      	mov	r3, r8
 80095a8:	e7d1      	b.n	800954e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80095aa:	3502      	adds	r5, #2
 80095ac:	460b      	mov	r3, r1
 80095ae:	e7ce      	b.n	800954e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80095b0:	4621      	mov	r1, r4
 80095b2:	4630      	mov	r0, r6
 80095b4:	f7ff ff76 	bl	80094a4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 80095b8:	7022      	strb	r2, [r4, #0]
 80095ba:	1ba0      	subs	r0, r4, r6
 80095bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080095c0 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80095c0:	b10a      	cbz	r2, 80095c6 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80095c2:	f001 bb31 	b.w	800ac28 <memcpy>
 80095c6:	4770      	bx	lr

080095c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 80095c8:	6001      	str	r1, [r0, #0]
 80095ca:	4770      	bx	lr

080095cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 80095cc:	6800      	ldr	r0, [r0, #0]
 80095ce:	4770      	bx	lr

080095d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 80095d0:	3008      	adds	r0, #8
 80095d2:	4770      	bx	lr

080095d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 80095d4:	6081      	str	r1, [r0, #8]
 80095d6:	4770      	bx	lr

080095d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 80095d8:	6803      	ldr	r3, [r0, #0]
 80095da:	6041      	str	r1, [r0, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	545a      	strb	r2, [r3, r1]
 80095e0:	4770      	bx	lr
	...

080095e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80095e4:	b508      	push	{r3, lr}
 80095e6:	680b      	ldr	r3, [r1, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	da02      	bge.n	80095f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 80095ec:	4809      	ldr	r0, [pc, #36]	; (8009614 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 80095ee:	f7ff ff3b 	bl	8009468 <_ZSt20__throw_length_errorPKc>
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d908      	bls.n	8009608 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 80095f6:	0052      	lsls	r2, r2, #1
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d205      	bcs.n	8009608 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 80095fc:	2a00      	cmp	r2, #0
 80095fe:	bfb6      	itet	lt
 8009600:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8009604:	600a      	strge	r2, [r1, #0]
 8009606:	600b      	strlt	r3, [r1, #0]
 8009608:	6808      	ldr	r0, [r1, #0]
 800960a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800960e:	3001      	adds	r0, #1
 8009610:	f7ff bf0f 	b.w	8009432 <_Znwj>
 8009614:	0800cf8d 	.word	0x0800cf8d

08009618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8009618:	4603      	mov	r3, r0
 800961a:	f853 0b08 	ldr.w	r0, [r3], #8
 800961e:	4298      	cmp	r0, r3
 8009620:	d001      	beq.n	8009626 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8009622:	f7ff bf02 	b.w	800942a <_ZdlPv>
 8009626:	4770      	bx	lr

08009628 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8009628:	b508      	push	{r3, lr}
 800962a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800962e:	6840      	ldr	r0, [r0, #4]
 8009630:	3901      	subs	r1, #1
 8009632:	1a09      	subs	r1, r1, r0
 8009634:	4291      	cmp	r1, r2
 8009636:	d202      	bcs.n	800963e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8009638:	4618      	mov	r0, r3
 800963a:	f7ff ff15 	bl	8009468 <_ZSt20__throw_length_errorPKc>
 800963e:	bd08      	pop	{r3, pc}

08009640 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8009640:	2a01      	cmp	r2, #1
 8009642:	b510      	push	{r4, lr}
 8009644:	d102      	bne.n	800964c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8009646:	780a      	ldrb	r2, [r1, #0]
 8009648:	7002      	strb	r2, [r0, #0]
 800964a:	bd10      	pop	{r4, pc}
 800964c:	f7ff ffb8 	bl	80095c0 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8009650:	e7fb      	b.n	800964a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08009652 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8009652:	b508      	push	{r3, lr}
 8009654:	1a52      	subs	r2, r2, r1
 8009656:	f7ff fff3 	bl	8009640 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800965a:	bd08      	pop	{r3, pc}

0800965c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 800965c:	4288      	cmp	r0, r1
 800965e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009660:	4604      	mov	r4, r0
 8009662:	460e      	mov	r6, r1
 8009664:	d01f      	beq.n	80096a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4a>
 8009666:	6802      	ldr	r2, [r0, #0]
 8009668:	684d      	ldr	r5, [r1, #4]
 800966a:	f100 0308 	add.w	r3, r0, #8
 800966e:	429a      	cmp	r2, r3
 8009670:	bf14      	ite	ne
 8009672:	6882      	ldrne	r2, [r0, #8]
 8009674:	220f      	moveq	r2, #15
 8009676:	42aa      	cmp	r2, r5
 8009678:	d20b      	bcs.n	8009692 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x36>
 800967a:	a902      	add	r1, sp, #8
 800967c:	f841 5d04 	str.w	r5, [r1, #-4]!
 8009680:	f7ff ffb0 	bl	80095e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009684:	4607      	mov	r7, r0
 8009686:	4620      	mov	r0, r4
 8009688:	f7ff ffc6 	bl	8009618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800968c:	9b01      	ldr	r3, [sp, #4]
 800968e:	6027      	str	r7, [r4, #0]
 8009690:	60a3      	str	r3, [r4, #8]
 8009692:	b125      	cbz	r5, 800969e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x42>
 8009694:	462a      	mov	r2, r5
 8009696:	6831      	ldr	r1, [r6, #0]
 8009698:	6820      	ldr	r0, [r4, #0]
 800969a:	f7ff ffd1 	bl	8009640 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800969e:	6823      	ldr	r3, [r4, #0]
 80096a0:	6065      	str	r5, [r4, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	555a      	strb	r2, [r3, r5]
 80096a6:	b003      	add	sp, #12
 80096a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080096aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80096aa:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80096ae:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80096b2:	4616      	mov	r6, r2
 80096b4:	6842      	ldr	r2, [r0, #4]
 80096b6:	469a      	mov	sl, r3
 80096b8:	eba8 0306 	sub.w	r3, r8, r6
 80096bc:	1a57      	subs	r7, r2, r1
 80096be:	4413      	add	r3, r2
 80096c0:	6802      	ldr	r2, [r0, #0]
 80096c2:	9301      	str	r3, [sp, #4]
 80096c4:	f100 0308 	add.w	r3, r0, #8
 80096c8:	429a      	cmp	r2, r3
 80096ca:	460d      	mov	r5, r1
 80096cc:	bf14      	ite	ne
 80096ce:	6882      	ldrne	r2, [r0, #8]
 80096d0:	220f      	moveq	r2, #15
 80096d2:	a901      	add	r1, sp, #4
 80096d4:	4604      	mov	r4, r0
 80096d6:	f7ff ff85 	bl	80095e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80096da:	1bbf      	subs	r7, r7, r6
 80096dc:	4681      	mov	r9, r0
 80096de:	b11d      	cbz	r5, 80096e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 80096e0:	462a      	mov	r2, r5
 80096e2:	6821      	ldr	r1, [r4, #0]
 80096e4:	f7ff ffac 	bl	8009640 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80096e8:	f1ba 0f00 	cmp.w	sl, #0
 80096ec:	d008      	beq.n	8009700 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 80096ee:	f1b8 0f00 	cmp.w	r8, #0
 80096f2:	d005      	beq.n	8009700 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 80096f4:	4642      	mov	r2, r8
 80096f6:	4651      	mov	r1, sl
 80096f8:	eb09 0005 	add.w	r0, r9, r5
 80096fc:	f7ff ffa0 	bl	8009640 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009700:	b147      	cbz	r7, 8009714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 8009702:	6821      	ldr	r1, [r4, #0]
 8009704:	442e      	add	r6, r5
 8009706:	eb05 0008 	add.w	r0, r5, r8
 800970a:	463a      	mov	r2, r7
 800970c:	4431      	add	r1, r6
 800970e:	4448      	add	r0, r9
 8009710:	f7ff ff96 	bl	8009640 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009714:	4620      	mov	r0, r4
 8009716:	f7ff ff7f 	bl	8009618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800971a:	9b01      	ldr	r3, [sp, #4]
 800971c:	f8c4 9000 	str.w	r9, [r4]
 8009720:	60a3      	str	r3, [r4, #8]
 8009722:	b002      	add	sp, #8
 8009724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009728 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8009728:	f100 0208 	add.w	r2, r0, #8
 800972c:	6002      	str	r2, [r0, #0]
 800972e:	2200      	movs	r2, #0
 8009730:	6042      	str	r2, [r0, #4]
 8009732:	7202      	strb	r2, [r0, #8]
 8009734:	4770      	bx	lr

08009736 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8009736:	b510      	push	{r4, lr}
 8009738:	4604      	mov	r4, r0
 800973a:	f7ff ff6d 	bl	8009618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800973e:	4620      	mov	r0, r4
 8009740:	bd10      	pop	{r4, pc}

08009742 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 8009742:	b510      	push	{r4, lr}
 8009744:	4604      	mov	r4, r0
 8009746:	f7ff ff89 	bl	800965c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 800974a:	4620      	mov	r0, r4
 800974c:	bd10      	pop	{r4, pc}

0800974e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800974e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009750:	4604      	mov	r4, r0
 8009752:	4626      	mov	r6, r4
 8009754:	6840      	ldr	r0, [r0, #4]
 8009756:	f856 3b08 	ldr.w	r3, [r6], #8
 800975a:	42b3      	cmp	r3, r6
 800975c:	bf18      	it	ne
 800975e:	68a6      	ldrne	r6, [r4, #8]
 8009760:	eb00 0502 	add.w	r5, r0, r2
 8009764:	bf08      	it	eq
 8009766:	260f      	moveq	r6, #15
 8009768:	42b5      	cmp	r5, r6
 800976a:	d80a      	bhi.n	8009782 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 800976c:	b112      	cbz	r2, 8009774 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 800976e:	4418      	add	r0, r3
 8009770:	f7ff ff66 	bl	8009640 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009774:	6823      	ldr	r3, [r4, #0]
 8009776:	6065      	str	r5, [r4, #4]
 8009778:	2200      	movs	r2, #0
 800977a:	4620      	mov	r0, r4
 800977c:	555a      	strb	r2, [r3, r5]
 800977e:	b002      	add	sp, #8
 8009780:	bd70      	pop	{r4, r5, r6, pc}
 8009782:	9200      	str	r2, [sp, #0]
 8009784:	460b      	mov	r3, r1
 8009786:	2200      	movs	r2, #0
 8009788:	4601      	mov	r1, r0
 800978a:	4620      	mov	r0, r4
 800978c:	f7ff ff8d 	bl	80096aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8009790:	e7f0      	b.n	8009774 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

08009792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8009792:	b508      	push	{r3, lr}
 8009794:	e9d1 1200 	ldrd	r1, r2, [r1]
 8009798:	f7ff ffd9 	bl	800974e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800979c:	bd08      	pop	{r3, pc}
	...

080097a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 80097a0:	b570      	push	{r4, r5, r6, lr}
 80097a2:	4604      	mov	r4, r0
 80097a4:	4608      	mov	r0, r1
 80097a6:	460d      	mov	r5, r1
 80097a8:	f7f6 fd82 	bl	80002b0 <strlen>
 80097ac:	4b06      	ldr	r3, [pc, #24]	; (80097c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 80097ae:	4606      	mov	r6, r0
 80097b0:	4602      	mov	r2, r0
 80097b2:	2100      	movs	r1, #0
 80097b4:	4620      	mov	r0, r4
 80097b6:	f7ff ff37 	bl	8009628 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80097ba:	4632      	mov	r2, r6
 80097bc:	4629      	mov	r1, r5
 80097be:	4620      	mov	r0, r4
 80097c0:	f7ff ffc5 	bl	800974e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80097c4:	bd70      	pop	{r4, r5, r6, pc}
 80097c6:	bf00      	nop
 80097c8:	0800cf78 	.word	0x0800cf78

080097cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80097cc:	6800      	ldr	r0, [r0, #0]
 80097ce:	4770      	bx	lr

080097d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 80097d0:	6001      	str	r1, [r0, #0]
 80097d2:	4770      	bx	lr

080097d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 80097d4:	b510      	push	{r4, lr}
 80097d6:	f100 0208 	add.w	r2, r0, #8
 80097da:	6002      	str	r2, [r0, #0]
 80097dc:	e9d1 1200 	ldrd	r1, r2, [r1]
 80097e0:	4604      	mov	r4, r0
 80097e2:	f04f 0300 	mov.w	r3, #0
 80097e6:	440a      	add	r2, r1
 80097e8:	f7ff fd0a 	bl	8009200 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 80097ec:	4620      	mov	r0, r4
 80097ee:	bd10      	pop	{r4, pc}

080097f0 <_ZSt15get_new_handlerv>:
 80097f0:	4b02      	ldr	r3, [pc, #8]	; (80097fc <_ZSt15get_new_handlerv+0xc>)
 80097f2:	6818      	ldr	r0, [r3, #0]
 80097f4:	f3bf 8f5b 	dmb	ish
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	200003d0 	.word	0x200003d0

08009800 <cos>:
 8009800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009802:	ec51 0b10 	vmov	r0, r1, d0
 8009806:	4a1e      	ldr	r2, [pc, #120]	; (8009880 <cos+0x80>)
 8009808:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800980c:	4293      	cmp	r3, r2
 800980e:	dc06      	bgt.n	800981e <cos+0x1e>
 8009810:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8009878 <cos+0x78>
 8009814:	f000 fcf4 	bl	800a200 <__kernel_cos>
 8009818:	ec51 0b10 	vmov	r0, r1, d0
 800981c:	e007      	b.n	800982e <cos+0x2e>
 800981e:	4a19      	ldr	r2, [pc, #100]	; (8009884 <cos+0x84>)
 8009820:	4293      	cmp	r3, r2
 8009822:	dd09      	ble.n	8009838 <cos+0x38>
 8009824:	ee10 2a10 	vmov	r2, s0
 8009828:	460b      	mov	r3, r1
 800982a:	f7f6 fd4d 	bl	80002c8 <__aeabi_dsub>
 800982e:	ec41 0b10 	vmov	d0, r0, r1
 8009832:	b005      	add	sp, #20
 8009834:	f85d fb04 	ldr.w	pc, [sp], #4
 8009838:	4668      	mov	r0, sp
 800983a:	f000 faed 	bl	8009e18 <__ieee754_rem_pio2>
 800983e:	f000 0003 	and.w	r0, r0, #3
 8009842:	2801      	cmp	r0, #1
 8009844:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009848:	ed9d 0b00 	vldr	d0, [sp]
 800984c:	d007      	beq.n	800985e <cos+0x5e>
 800984e:	2802      	cmp	r0, #2
 8009850:	d00e      	beq.n	8009870 <cos+0x70>
 8009852:	2800      	cmp	r0, #0
 8009854:	d0de      	beq.n	8009814 <cos+0x14>
 8009856:	2001      	movs	r0, #1
 8009858:	f001 f8da 	bl	800aa10 <__kernel_sin>
 800985c:	e7dc      	b.n	8009818 <cos+0x18>
 800985e:	f001 f8d7 	bl	800aa10 <__kernel_sin>
 8009862:	ec53 2b10 	vmov	r2, r3, d0
 8009866:	ee10 0a10 	vmov	r0, s0
 800986a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800986e:	e7de      	b.n	800982e <cos+0x2e>
 8009870:	f000 fcc6 	bl	800a200 <__kernel_cos>
 8009874:	e7f5      	b.n	8009862 <cos+0x62>
 8009876:	bf00      	nop
	...
 8009880:	3fe921fb 	.word	0x3fe921fb
 8009884:	7fefffff 	.word	0x7fefffff

08009888 <fabs>:
 8009888:	ec51 0b10 	vmov	r0, r1, d0
 800988c:	ee10 2a10 	vmov	r2, s0
 8009890:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009894:	ec43 2b10 	vmov	d0, r2, r3
 8009898:	4770      	bx	lr
 800989a:	0000      	movs	r0, r0
 800989c:	0000      	movs	r0, r0
	...

080098a0 <floor>:
 80098a0:	ec51 0b10 	vmov	r0, r1, d0
 80098a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80098ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80098b0:	2e13      	cmp	r6, #19
 80098b2:	460c      	mov	r4, r1
 80098b4:	ee10 5a10 	vmov	r5, s0
 80098b8:	4680      	mov	r8, r0
 80098ba:	dc34      	bgt.n	8009926 <floor+0x86>
 80098bc:	2e00      	cmp	r6, #0
 80098be:	da16      	bge.n	80098ee <floor+0x4e>
 80098c0:	a335      	add	r3, pc, #212	; (adr r3, 8009998 <floor+0xf8>)
 80098c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c6:	f7f6 fd01 	bl	80002cc <__adddf3>
 80098ca:	2200      	movs	r2, #0
 80098cc:	2300      	movs	r3, #0
 80098ce:	f7f7 f943 	bl	8000b58 <__aeabi_dcmpgt>
 80098d2:	b148      	cbz	r0, 80098e8 <floor+0x48>
 80098d4:	2c00      	cmp	r4, #0
 80098d6:	da59      	bge.n	800998c <floor+0xec>
 80098d8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80098dc:	4a30      	ldr	r2, [pc, #192]	; (80099a0 <floor+0x100>)
 80098de:	432b      	orrs	r3, r5
 80098e0:	2500      	movs	r5, #0
 80098e2:	42ab      	cmp	r3, r5
 80098e4:	bf18      	it	ne
 80098e6:	4614      	movne	r4, r2
 80098e8:	4621      	mov	r1, r4
 80098ea:	4628      	mov	r0, r5
 80098ec:	e025      	b.n	800993a <floor+0x9a>
 80098ee:	4f2d      	ldr	r7, [pc, #180]	; (80099a4 <floor+0x104>)
 80098f0:	4137      	asrs	r7, r6
 80098f2:	ea01 0307 	and.w	r3, r1, r7
 80098f6:	4303      	orrs	r3, r0
 80098f8:	d01f      	beq.n	800993a <floor+0x9a>
 80098fa:	a327      	add	r3, pc, #156	; (adr r3, 8009998 <floor+0xf8>)
 80098fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009900:	f7f6 fce4 	bl	80002cc <__adddf3>
 8009904:	2200      	movs	r2, #0
 8009906:	2300      	movs	r3, #0
 8009908:	f7f7 f926 	bl	8000b58 <__aeabi_dcmpgt>
 800990c:	2800      	cmp	r0, #0
 800990e:	d0eb      	beq.n	80098e8 <floor+0x48>
 8009910:	2c00      	cmp	r4, #0
 8009912:	bfbe      	ittt	lt
 8009914:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009918:	fa43 f606 	asrlt.w	r6, r3, r6
 800991c:	19a4      	addlt	r4, r4, r6
 800991e:	ea24 0407 	bic.w	r4, r4, r7
 8009922:	2500      	movs	r5, #0
 8009924:	e7e0      	b.n	80098e8 <floor+0x48>
 8009926:	2e33      	cmp	r6, #51	; 0x33
 8009928:	dd0b      	ble.n	8009942 <floor+0xa2>
 800992a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800992e:	d104      	bne.n	800993a <floor+0x9a>
 8009930:	ee10 2a10 	vmov	r2, s0
 8009934:	460b      	mov	r3, r1
 8009936:	f7f6 fcc9 	bl	80002cc <__adddf3>
 800993a:	ec41 0b10 	vmov	d0, r0, r1
 800993e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009942:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800994a:	fa23 f707 	lsr.w	r7, r3, r7
 800994e:	4207      	tst	r7, r0
 8009950:	d0f3      	beq.n	800993a <floor+0x9a>
 8009952:	a311      	add	r3, pc, #68	; (adr r3, 8009998 <floor+0xf8>)
 8009954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009958:	f7f6 fcb8 	bl	80002cc <__adddf3>
 800995c:	2200      	movs	r2, #0
 800995e:	2300      	movs	r3, #0
 8009960:	f7f7 f8fa 	bl	8000b58 <__aeabi_dcmpgt>
 8009964:	2800      	cmp	r0, #0
 8009966:	d0bf      	beq.n	80098e8 <floor+0x48>
 8009968:	2c00      	cmp	r4, #0
 800996a:	da02      	bge.n	8009972 <floor+0xd2>
 800996c:	2e14      	cmp	r6, #20
 800996e:	d103      	bne.n	8009978 <floor+0xd8>
 8009970:	3401      	adds	r4, #1
 8009972:	ea25 0507 	bic.w	r5, r5, r7
 8009976:	e7b7      	b.n	80098e8 <floor+0x48>
 8009978:	2301      	movs	r3, #1
 800997a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800997e:	fa03 f606 	lsl.w	r6, r3, r6
 8009982:	4435      	add	r5, r6
 8009984:	4545      	cmp	r5, r8
 8009986:	bf38      	it	cc
 8009988:	18e4      	addcc	r4, r4, r3
 800998a:	e7f2      	b.n	8009972 <floor+0xd2>
 800998c:	2500      	movs	r5, #0
 800998e:	462c      	mov	r4, r5
 8009990:	e7aa      	b.n	80098e8 <floor+0x48>
 8009992:	bf00      	nop
 8009994:	f3af 8000 	nop.w
 8009998:	8800759c 	.word	0x8800759c
 800999c:	7e37e43c 	.word	0x7e37e43c
 80099a0:	bff00000 	.word	0xbff00000
 80099a4:	000fffff 	.word	0x000fffff

080099a8 <scalbn>:
 80099a8:	b570      	push	{r4, r5, r6, lr}
 80099aa:	ec55 4b10 	vmov	r4, r5, d0
 80099ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80099b2:	4606      	mov	r6, r0
 80099b4:	462b      	mov	r3, r5
 80099b6:	b9aa      	cbnz	r2, 80099e4 <scalbn+0x3c>
 80099b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80099bc:	4323      	orrs	r3, r4
 80099be:	d03b      	beq.n	8009a38 <scalbn+0x90>
 80099c0:	4b31      	ldr	r3, [pc, #196]	; (8009a88 <scalbn+0xe0>)
 80099c2:	4629      	mov	r1, r5
 80099c4:	2200      	movs	r2, #0
 80099c6:	ee10 0a10 	vmov	r0, s0
 80099ca:	f7f6 fe35 	bl	8000638 <__aeabi_dmul>
 80099ce:	4b2f      	ldr	r3, [pc, #188]	; (8009a8c <scalbn+0xe4>)
 80099d0:	429e      	cmp	r6, r3
 80099d2:	4604      	mov	r4, r0
 80099d4:	460d      	mov	r5, r1
 80099d6:	da12      	bge.n	80099fe <scalbn+0x56>
 80099d8:	a327      	add	r3, pc, #156	; (adr r3, 8009a78 <scalbn+0xd0>)
 80099da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099de:	f7f6 fe2b 	bl	8000638 <__aeabi_dmul>
 80099e2:	e009      	b.n	80099f8 <scalbn+0x50>
 80099e4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80099e8:	428a      	cmp	r2, r1
 80099ea:	d10c      	bne.n	8009a06 <scalbn+0x5e>
 80099ec:	ee10 2a10 	vmov	r2, s0
 80099f0:	4620      	mov	r0, r4
 80099f2:	4629      	mov	r1, r5
 80099f4:	f7f6 fc6a 	bl	80002cc <__adddf3>
 80099f8:	4604      	mov	r4, r0
 80099fa:	460d      	mov	r5, r1
 80099fc:	e01c      	b.n	8009a38 <scalbn+0x90>
 80099fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009a02:	460b      	mov	r3, r1
 8009a04:	3a36      	subs	r2, #54	; 0x36
 8009a06:	4432      	add	r2, r6
 8009a08:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009a0c:	428a      	cmp	r2, r1
 8009a0e:	dd0b      	ble.n	8009a28 <scalbn+0x80>
 8009a10:	ec45 4b11 	vmov	d1, r4, r5
 8009a14:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009a80 <scalbn+0xd8>
 8009a18:	f001 f8b4 	bl	800ab84 <copysign>
 8009a1c:	a318      	add	r3, pc, #96	; (adr r3, 8009a80 <scalbn+0xd8>)
 8009a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a22:	ec51 0b10 	vmov	r0, r1, d0
 8009a26:	e7da      	b.n	80099de <scalbn+0x36>
 8009a28:	2a00      	cmp	r2, #0
 8009a2a:	dd08      	ble.n	8009a3e <scalbn+0x96>
 8009a2c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009a30:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009a34:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009a38:	ec45 4b10 	vmov	d0, r4, r5
 8009a3c:	bd70      	pop	{r4, r5, r6, pc}
 8009a3e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009a42:	da0d      	bge.n	8009a60 <scalbn+0xb8>
 8009a44:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009a48:	429e      	cmp	r6, r3
 8009a4a:	ec45 4b11 	vmov	d1, r4, r5
 8009a4e:	dce1      	bgt.n	8009a14 <scalbn+0x6c>
 8009a50:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8009a78 <scalbn+0xd0>
 8009a54:	f001 f896 	bl	800ab84 <copysign>
 8009a58:	a307      	add	r3, pc, #28	; (adr r3, 8009a78 <scalbn+0xd0>)
 8009a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5e:	e7e0      	b.n	8009a22 <scalbn+0x7a>
 8009a60:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009a64:	3236      	adds	r2, #54	; 0x36
 8009a66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009a6a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009a6e:	4620      	mov	r0, r4
 8009a70:	4629      	mov	r1, r5
 8009a72:	2200      	movs	r2, #0
 8009a74:	4b06      	ldr	r3, [pc, #24]	; (8009a90 <scalbn+0xe8>)
 8009a76:	e7b2      	b.n	80099de <scalbn+0x36>
 8009a78:	c2f8f359 	.word	0xc2f8f359
 8009a7c:	01a56e1f 	.word	0x01a56e1f
 8009a80:	8800759c 	.word	0x8800759c
 8009a84:	7e37e43c 	.word	0x7e37e43c
 8009a88:	43500000 	.word	0x43500000
 8009a8c:	ffff3cb0 	.word	0xffff3cb0
 8009a90:	3c900000 	.word	0x3c900000
 8009a94:	00000000 	.word	0x00000000

08009a98 <sin>:
 8009a98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a9a:	ec51 0b10 	vmov	r0, r1, d0
 8009a9e:	4a20      	ldr	r2, [pc, #128]	; (8009b20 <sin+0x88>)
 8009aa0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	dc07      	bgt.n	8009ab8 <sin+0x20>
 8009aa8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8009b18 <sin+0x80>
 8009aac:	2000      	movs	r0, #0
 8009aae:	f000 ffaf 	bl	800aa10 <__kernel_sin>
 8009ab2:	ec51 0b10 	vmov	r0, r1, d0
 8009ab6:	e007      	b.n	8009ac8 <sin+0x30>
 8009ab8:	4a1a      	ldr	r2, [pc, #104]	; (8009b24 <sin+0x8c>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	dd09      	ble.n	8009ad2 <sin+0x3a>
 8009abe:	ee10 2a10 	vmov	r2, s0
 8009ac2:	460b      	mov	r3, r1
 8009ac4:	f7f6 fc00 	bl	80002c8 <__aeabi_dsub>
 8009ac8:	ec41 0b10 	vmov	d0, r0, r1
 8009acc:	b005      	add	sp, #20
 8009ace:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ad2:	4668      	mov	r0, sp
 8009ad4:	f000 f9a0 	bl	8009e18 <__ieee754_rem_pio2>
 8009ad8:	f000 0003 	and.w	r0, r0, #3
 8009adc:	2801      	cmp	r0, #1
 8009ade:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009ae2:	ed9d 0b00 	vldr	d0, [sp]
 8009ae6:	d004      	beq.n	8009af2 <sin+0x5a>
 8009ae8:	2802      	cmp	r0, #2
 8009aea:	d005      	beq.n	8009af8 <sin+0x60>
 8009aec:	b970      	cbnz	r0, 8009b0c <sin+0x74>
 8009aee:	2001      	movs	r0, #1
 8009af0:	e7dd      	b.n	8009aae <sin+0x16>
 8009af2:	f000 fb85 	bl	800a200 <__kernel_cos>
 8009af6:	e7dc      	b.n	8009ab2 <sin+0x1a>
 8009af8:	2001      	movs	r0, #1
 8009afa:	f000 ff89 	bl	800aa10 <__kernel_sin>
 8009afe:	ec53 2b10 	vmov	r2, r3, d0
 8009b02:	ee10 0a10 	vmov	r0, s0
 8009b06:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009b0a:	e7dd      	b.n	8009ac8 <sin+0x30>
 8009b0c:	f000 fb78 	bl	800a200 <__kernel_cos>
 8009b10:	e7f5      	b.n	8009afe <sin+0x66>
 8009b12:	bf00      	nop
 8009b14:	f3af 8000 	nop.w
	...
 8009b20:	3fe921fb 	.word	0x3fe921fb
 8009b24:	7fefffff 	.word	0x7fefffff

08009b28 <fmod>:
 8009b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b2c:	ed2d 8b02 	vpush	{d8}
 8009b30:	b08b      	sub	sp, #44	; 0x2c
 8009b32:	ec55 4b10 	vmov	r4, r5, d0
 8009b36:	ec57 6b11 	vmov	r6, r7, d1
 8009b3a:	f000 f859 	bl	8009bf0 <__ieee754_fmod>
 8009b3e:	4b2a      	ldr	r3, [pc, #168]	; (8009be8 <fmod+0xc0>)
 8009b40:	eeb0 8a40 	vmov.f32	s16, s0
 8009b44:	eef0 8a60 	vmov.f32	s17, s1
 8009b48:	f993 8000 	ldrsb.w	r8, [r3]
 8009b4c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8009b50:	d030      	beq.n	8009bb4 <fmod+0x8c>
 8009b52:	4632      	mov	r2, r6
 8009b54:	463b      	mov	r3, r7
 8009b56:	4630      	mov	r0, r6
 8009b58:	4639      	mov	r1, r7
 8009b5a:	f7f7 f807 	bl	8000b6c <__aeabi_dcmpun>
 8009b5e:	bb48      	cbnz	r0, 8009bb4 <fmod+0x8c>
 8009b60:	4622      	mov	r2, r4
 8009b62:	462b      	mov	r3, r5
 8009b64:	4620      	mov	r0, r4
 8009b66:	4629      	mov	r1, r5
 8009b68:	f7f7 f800 	bl	8000b6c <__aeabi_dcmpun>
 8009b6c:	4681      	mov	r9, r0
 8009b6e:	bb08      	cbnz	r0, 8009bb4 <fmod+0x8c>
 8009b70:	2200      	movs	r2, #0
 8009b72:	2300      	movs	r3, #0
 8009b74:	4630      	mov	r0, r6
 8009b76:	4639      	mov	r1, r7
 8009b78:	f7f6 ffc6 	bl	8000b08 <__aeabi_dcmpeq>
 8009b7c:	b1d0      	cbz	r0, 8009bb4 <fmod+0x8c>
 8009b7e:	2301      	movs	r3, #1
 8009b80:	9300      	str	r3, [sp, #0]
 8009b82:	4b1a      	ldr	r3, [pc, #104]	; (8009bec <fmod+0xc4>)
 8009b84:	9301      	str	r3, [sp, #4]
 8009b86:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009b8a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009b8e:	f8cd 9020 	str.w	r9, [sp, #32]
 8009b92:	f1b8 0f00 	cmp.w	r8, #0
 8009b96:	d116      	bne.n	8009bc6 <fmod+0x9e>
 8009b98:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009b9c:	4668      	mov	r0, sp
 8009b9e:	f001 f800 	bl	800aba2 <matherr>
 8009ba2:	b1d8      	cbz	r0, 8009bdc <fmod+0xb4>
 8009ba4:	9b08      	ldr	r3, [sp, #32]
 8009ba6:	b11b      	cbz	r3, 8009bb0 <fmod+0x88>
 8009ba8:	f001 f804 	bl	800abb4 <__errno>
 8009bac:	9b08      	ldr	r3, [sp, #32]
 8009bae:	6003      	str	r3, [r0, #0]
 8009bb0:	ed9d 8b06 	vldr	d8, [sp, #24]
 8009bb4:	eeb0 0a48 	vmov.f32	s0, s16
 8009bb8:	eef0 0a68 	vmov.f32	s1, s17
 8009bbc:	b00b      	add	sp, #44	; 0x2c
 8009bbe:	ecbd 8b02 	vpop	{d8}
 8009bc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	2300      	movs	r3, #0
 8009bca:	4610      	mov	r0, r2
 8009bcc:	4619      	mov	r1, r3
 8009bce:	f7f6 fe5d 	bl	800088c <__aeabi_ddiv>
 8009bd2:	f1b8 0f02 	cmp.w	r8, #2
 8009bd6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009bda:	d1df      	bne.n	8009b9c <fmod+0x74>
 8009bdc:	f000 ffea 	bl	800abb4 <__errno>
 8009be0:	2321      	movs	r3, #33	; 0x21
 8009be2:	6003      	str	r3, [r0, #0]
 8009be4:	e7de      	b.n	8009ba4 <fmod+0x7c>
 8009be6:	bf00      	nop
 8009be8:	20000010 	.word	0x20000010
 8009bec:	0800cfa5 	.word	0x0800cfa5

08009bf0 <__ieee754_fmod>:
 8009bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bf4:	ec53 2b11 	vmov	r2, r3, d1
 8009bf8:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8009bfc:	ea5e 0402 	orrs.w	r4, lr, r2
 8009c00:	ec51 0b10 	vmov	r0, r1, d0
 8009c04:	461e      	mov	r6, r3
 8009c06:	ee11 5a10 	vmov	r5, s2
 8009c0a:	4694      	mov	ip, r2
 8009c0c:	d00c      	beq.n	8009c28 <__ieee754_fmod+0x38>
 8009c0e:	4c7a      	ldr	r4, [pc, #488]	; (8009df8 <__ieee754_fmod+0x208>)
 8009c10:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8009c14:	45a0      	cmp	r8, r4
 8009c16:	4689      	mov	r9, r1
 8009c18:	dc06      	bgt.n	8009c28 <__ieee754_fmod+0x38>
 8009c1a:	4254      	negs	r4, r2
 8009c1c:	4314      	orrs	r4, r2
 8009c1e:	4f77      	ldr	r7, [pc, #476]	; (8009dfc <__ieee754_fmod+0x20c>)
 8009c20:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8009c24:	42bc      	cmp	r4, r7
 8009c26:	d909      	bls.n	8009c3c <__ieee754_fmod+0x4c>
 8009c28:	f7f6 fd06 	bl	8000638 <__aeabi_dmul>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	460b      	mov	r3, r1
 8009c30:	f7f6 fe2c 	bl	800088c <__aeabi_ddiv>
 8009c34:	ec41 0b10 	vmov	d0, r0, r1
 8009c38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c3c:	45f0      	cmp	r8, lr
 8009c3e:	ee10 2a10 	vmov	r2, s0
 8009c42:	4607      	mov	r7, r0
 8009c44:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 8009c48:	dc0a      	bgt.n	8009c60 <__ieee754_fmod+0x70>
 8009c4a:	dbf3      	blt.n	8009c34 <__ieee754_fmod+0x44>
 8009c4c:	42a8      	cmp	r0, r5
 8009c4e:	d3f1      	bcc.n	8009c34 <__ieee754_fmod+0x44>
 8009c50:	d106      	bne.n	8009c60 <__ieee754_fmod+0x70>
 8009c52:	496b      	ldr	r1, [pc, #428]	; (8009e00 <__ieee754_fmod+0x210>)
 8009c54:	0fe4      	lsrs	r4, r4, #31
 8009c56:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8009c5a:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009c5e:	e7e9      	b.n	8009c34 <__ieee754_fmod+0x44>
 8009c60:	4b68      	ldr	r3, [pc, #416]	; (8009e04 <__ieee754_fmod+0x214>)
 8009c62:	4598      	cmp	r8, r3
 8009c64:	dc49      	bgt.n	8009cfa <__ieee754_fmod+0x10a>
 8009c66:	f1b8 0f00 	cmp.w	r8, #0
 8009c6a:	d13d      	bne.n	8009ce8 <__ieee754_fmod+0xf8>
 8009c6c:	4866      	ldr	r0, [pc, #408]	; (8009e08 <__ieee754_fmod+0x218>)
 8009c6e:	4611      	mov	r1, r2
 8009c70:	2900      	cmp	r1, #0
 8009c72:	dc36      	bgt.n	8009ce2 <__ieee754_fmod+0xf2>
 8009c74:	459e      	cmp	lr, r3
 8009c76:	dc51      	bgt.n	8009d1c <__ieee754_fmod+0x12c>
 8009c78:	f1be 0f00 	cmp.w	lr, #0
 8009c7c:	d145      	bne.n	8009d0a <__ieee754_fmod+0x11a>
 8009c7e:	4b62      	ldr	r3, [pc, #392]	; (8009e08 <__ieee754_fmod+0x218>)
 8009c80:	4629      	mov	r1, r5
 8009c82:	2900      	cmp	r1, #0
 8009c84:	dc3e      	bgt.n	8009d04 <__ieee754_fmod+0x114>
 8009c86:	4961      	ldr	r1, [pc, #388]	; (8009e0c <__ieee754_fmod+0x21c>)
 8009c88:	4288      	cmp	r0, r1
 8009c8a:	db4c      	blt.n	8009d26 <__ieee754_fmod+0x136>
 8009c8c:	f3c9 0113 	ubfx	r1, r9, #0, #20
 8009c90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009c94:	4a5d      	ldr	r2, [pc, #372]	; (8009e0c <__ieee754_fmod+0x21c>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	db59      	blt.n	8009d4e <__ieee754_fmod+0x15e>
 8009c9a:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8009c9e:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8009ca2:	1ac0      	subs	r0, r0, r3
 8009ca4:	1b8a      	subs	r2, r1, r6
 8009ca6:	eba7 050c 	sub.w	r5, r7, ip
 8009caa:	2800      	cmp	r0, #0
 8009cac:	d166      	bne.n	8009d7c <__ieee754_fmod+0x18c>
 8009cae:	4567      	cmp	r7, ip
 8009cb0:	bf38      	it	cc
 8009cb2:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 8009cb6:	2a00      	cmp	r2, #0
 8009cb8:	bfbc      	itt	lt
 8009cba:	463d      	movlt	r5, r7
 8009cbc:	460a      	movlt	r2, r1
 8009cbe:	ea52 0105 	orrs.w	r1, r2, r5
 8009cc2:	d0c6      	beq.n	8009c52 <__ieee754_fmod+0x62>
 8009cc4:	494f      	ldr	r1, [pc, #316]	; (8009e04 <__ieee754_fmod+0x214>)
 8009cc6:	428a      	cmp	r2, r1
 8009cc8:	dd6d      	ble.n	8009da6 <__ieee754_fmod+0x1b6>
 8009cca:	4950      	ldr	r1, [pc, #320]	; (8009e0c <__ieee754_fmod+0x21c>)
 8009ccc:	428b      	cmp	r3, r1
 8009cce:	db70      	blt.n	8009db2 <__ieee754_fmod+0x1c2>
 8009cd0:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8009cd4:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8009cd8:	4314      	orrs	r4, r2
 8009cda:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 8009cde:	4628      	mov	r0, r5
 8009ce0:	e7a8      	b.n	8009c34 <__ieee754_fmod+0x44>
 8009ce2:	3801      	subs	r0, #1
 8009ce4:	0049      	lsls	r1, r1, #1
 8009ce6:	e7c3      	b.n	8009c70 <__ieee754_fmod+0x80>
 8009ce8:	4848      	ldr	r0, [pc, #288]	; (8009e0c <__ieee754_fmod+0x21c>)
 8009cea:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8009cee:	0049      	lsls	r1, r1, #1
 8009cf0:	2900      	cmp	r1, #0
 8009cf2:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8009cf6:	dcfa      	bgt.n	8009cee <__ieee754_fmod+0xfe>
 8009cf8:	e7bc      	b.n	8009c74 <__ieee754_fmod+0x84>
 8009cfa:	ea4f 5028 	mov.w	r0, r8, asr #20
 8009cfe:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8009d02:	e7b7      	b.n	8009c74 <__ieee754_fmod+0x84>
 8009d04:	3b01      	subs	r3, #1
 8009d06:	0049      	lsls	r1, r1, #1
 8009d08:	e7bb      	b.n	8009c82 <__ieee754_fmod+0x92>
 8009d0a:	4b40      	ldr	r3, [pc, #256]	; (8009e0c <__ieee754_fmod+0x21c>)
 8009d0c:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 8009d10:	0049      	lsls	r1, r1, #1
 8009d12:	2900      	cmp	r1, #0
 8009d14:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009d18:	dcfa      	bgt.n	8009d10 <__ieee754_fmod+0x120>
 8009d1a:	e7b4      	b.n	8009c86 <__ieee754_fmod+0x96>
 8009d1c:	ea4f 532e 	mov.w	r3, lr, asr #20
 8009d20:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009d24:	e7af      	b.n	8009c86 <__ieee754_fmod+0x96>
 8009d26:	1a0f      	subs	r7, r1, r0
 8009d28:	2f1f      	cmp	r7, #31
 8009d2a:	dc0a      	bgt.n	8009d42 <__ieee754_fmod+0x152>
 8009d2c:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8009d30:	fa08 f807 	lsl.w	r8, r8, r7
 8009d34:	fa22 f101 	lsr.w	r1, r2, r1
 8009d38:	ea41 0108 	orr.w	r1, r1, r8
 8009d3c:	fa02 f707 	lsl.w	r7, r2, r7
 8009d40:	e7a8      	b.n	8009c94 <__ieee754_fmod+0xa4>
 8009d42:	4933      	ldr	r1, [pc, #204]	; (8009e10 <__ieee754_fmod+0x220>)
 8009d44:	1a09      	subs	r1, r1, r0
 8009d46:	fa02 f101 	lsl.w	r1, r2, r1
 8009d4a:	2700      	movs	r7, #0
 8009d4c:	e7a2      	b.n	8009c94 <__ieee754_fmod+0xa4>
 8009d4e:	eba2 0c03 	sub.w	ip, r2, r3
 8009d52:	f1bc 0f1f 	cmp.w	ip, #31
 8009d56:	dc0a      	bgt.n	8009d6e <__ieee754_fmod+0x17e>
 8009d58:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8009d5c:	fa0e fe0c 	lsl.w	lr, lr, ip
 8009d60:	fa25 f606 	lsr.w	r6, r5, r6
 8009d64:	ea46 060e 	orr.w	r6, r6, lr
 8009d68:	fa05 fc0c 	lsl.w	ip, r5, ip
 8009d6c:	e799      	b.n	8009ca2 <__ieee754_fmod+0xb2>
 8009d6e:	4e28      	ldr	r6, [pc, #160]	; (8009e10 <__ieee754_fmod+0x220>)
 8009d70:	1af6      	subs	r6, r6, r3
 8009d72:	fa05 f606 	lsl.w	r6, r5, r6
 8009d76:	f04f 0c00 	mov.w	ip, #0
 8009d7a:	e792      	b.n	8009ca2 <__ieee754_fmod+0xb2>
 8009d7c:	4567      	cmp	r7, ip
 8009d7e:	bf38      	it	cc
 8009d80:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 8009d84:	2a00      	cmp	r2, #0
 8009d86:	da05      	bge.n	8009d94 <__ieee754_fmod+0x1a4>
 8009d88:	0ffa      	lsrs	r2, r7, #31
 8009d8a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009d8e:	007f      	lsls	r7, r7, #1
 8009d90:	3801      	subs	r0, #1
 8009d92:	e787      	b.n	8009ca4 <__ieee754_fmod+0xb4>
 8009d94:	ea52 0105 	orrs.w	r1, r2, r5
 8009d98:	f43f af5b 	beq.w	8009c52 <__ieee754_fmod+0x62>
 8009d9c:	0fe9      	lsrs	r1, r5, #31
 8009d9e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8009da2:	006f      	lsls	r7, r5, #1
 8009da4:	e7f4      	b.n	8009d90 <__ieee754_fmod+0x1a0>
 8009da6:	0fe8      	lsrs	r0, r5, #31
 8009da8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8009dac:	006d      	lsls	r5, r5, #1
 8009dae:	3b01      	subs	r3, #1
 8009db0:	e789      	b.n	8009cc6 <__ieee754_fmod+0xd6>
 8009db2:	1ac9      	subs	r1, r1, r3
 8009db4:	2914      	cmp	r1, #20
 8009db6:	dc0a      	bgt.n	8009dce <__ieee754_fmod+0x1de>
 8009db8:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8009dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8009dc0:	40cd      	lsrs	r5, r1
 8009dc2:	432b      	orrs	r3, r5
 8009dc4:	410a      	asrs	r2, r1
 8009dc6:	ea42 0104 	orr.w	r1, r2, r4
 8009dca:	4618      	mov	r0, r3
 8009dcc:	e732      	b.n	8009c34 <__ieee754_fmod+0x44>
 8009dce:	291f      	cmp	r1, #31
 8009dd0:	dc07      	bgt.n	8009de2 <__ieee754_fmod+0x1f2>
 8009dd2:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8009dd6:	40cd      	lsrs	r5, r1
 8009dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8009ddc:	432b      	orrs	r3, r5
 8009dde:	4622      	mov	r2, r4
 8009de0:	e7f1      	b.n	8009dc6 <__ieee754_fmod+0x1d6>
 8009de2:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8009de6:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8009dea:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8009dee:	33e2      	adds	r3, #226	; 0xe2
 8009df0:	fa42 f303 	asr.w	r3, r2, r3
 8009df4:	e7f3      	b.n	8009dde <__ieee754_fmod+0x1ee>
 8009df6:	bf00      	nop
 8009df8:	7fefffff 	.word	0x7fefffff
 8009dfc:	7ff00000 	.word	0x7ff00000
 8009e00:	0800cfb0 	.word	0x0800cfb0
 8009e04:	000fffff 	.word	0x000fffff
 8009e08:	fffffbed 	.word	0xfffffbed
 8009e0c:	fffffc02 	.word	0xfffffc02
 8009e10:	fffffbe2 	.word	0xfffffbe2
 8009e14:	00000000 	.word	0x00000000

08009e18 <__ieee754_rem_pio2>:
 8009e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e1c:	ec57 6b10 	vmov	r6, r7, d0
 8009e20:	4bc3      	ldr	r3, [pc, #780]	; (800a130 <__ieee754_rem_pio2+0x318>)
 8009e22:	b08d      	sub	sp, #52	; 0x34
 8009e24:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009e28:	4598      	cmp	r8, r3
 8009e2a:	4604      	mov	r4, r0
 8009e2c:	9704      	str	r7, [sp, #16]
 8009e2e:	dc07      	bgt.n	8009e40 <__ieee754_rem_pio2+0x28>
 8009e30:	2200      	movs	r2, #0
 8009e32:	2300      	movs	r3, #0
 8009e34:	ed84 0b00 	vstr	d0, [r4]
 8009e38:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009e3c:	2500      	movs	r5, #0
 8009e3e:	e027      	b.n	8009e90 <__ieee754_rem_pio2+0x78>
 8009e40:	4bbc      	ldr	r3, [pc, #752]	; (800a134 <__ieee754_rem_pio2+0x31c>)
 8009e42:	4598      	cmp	r8, r3
 8009e44:	dc75      	bgt.n	8009f32 <__ieee754_rem_pio2+0x11a>
 8009e46:	9b04      	ldr	r3, [sp, #16]
 8009e48:	4dbb      	ldr	r5, [pc, #748]	; (800a138 <__ieee754_rem_pio2+0x320>)
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	ee10 0a10 	vmov	r0, s0
 8009e50:	a3a9      	add	r3, pc, #676	; (adr r3, 800a0f8 <__ieee754_rem_pio2+0x2e0>)
 8009e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e56:	4639      	mov	r1, r7
 8009e58:	dd36      	ble.n	8009ec8 <__ieee754_rem_pio2+0xb0>
 8009e5a:	f7f6 fa35 	bl	80002c8 <__aeabi_dsub>
 8009e5e:	45a8      	cmp	r8, r5
 8009e60:	4606      	mov	r6, r0
 8009e62:	460f      	mov	r7, r1
 8009e64:	d018      	beq.n	8009e98 <__ieee754_rem_pio2+0x80>
 8009e66:	a3a6      	add	r3, pc, #664	; (adr r3, 800a100 <__ieee754_rem_pio2+0x2e8>)
 8009e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6c:	f7f6 fa2c 	bl	80002c8 <__aeabi_dsub>
 8009e70:	4602      	mov	r2, r0
 8009e72:	460b      	mov	r3, r1
 8009e74:	e9c4 2300 	strd	r2, r3, [r4]
 8009e78:	4630      	mov	r0, r6
 8009e7a:	4639      	mov	r1, r7
 8009e7c:	f7f6 fa24 	bl	80002c8 <__aeabi_dsub>
 8009e80:	a39f      	add	r3, pc, #636	; (adr r3, 800a100 <__ieee754_rem_pio2+0x2e8>)
 8009e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e86:	f7f6 fa1f 	bl	80002c8 <__aeabi_dsub>
 8009e8a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009e8e:	2501      	movs	r5, #1
 8009e90:	4628      	mov	r0, r5
 8009e92:	b00d      	add	sp, #52	; 0x34
 8009e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e98:	a39b      	add	r3, pc, #620	; (adr r3, 800a108 <__ieee754_rem_pio2+0x2f0>)
 8009e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9e:	f7f6 fa13 	bl	80002c8 <__aeabi_dsub>
 8009ea2:	a39b      	add	r3, pc, #620	; (adr r3, 800a110 <__ieee754_rem_pio2+0x2f8>)
 8009ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea8:	4606      	mov	r6, r0
 8009eaa:	460f      	mov	r7, r1
 8009eac:	f7f6 fa0c 	bl	80002c8 <__aeabi_dsub>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	e9c4 2300 	strd	r2, r3, [r4]
 8009eb8:	4630      	mov	r0, r6
 8009eba:	4639      	mov	r1, r7
 8009ebc:	f7f6 fa04 	bl	80002c8 <__aeabi_dsub>
 8009ec0:	a393      	add	r3, pc, #588	; (adr r3, 800a110 <__ieee754_rem_pio2+0x2f8>)
 8009ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec6:	e7de      	b.n	8009e86 <__ieee754_rem_pio2+0x6e>
 8009ec8:	f7f6 fa00 	bl	80002cc <__adddf3>
 8009ecc:	45a8      	cmp	r8, r5
 8009ece:	4606      	mov	r6, r0
 8009ed0:	460f      	mov	r7, r1
 8009ed2:	d016      	beq.n	8009f02 <__ieee754_rem_pio2+0xea>
 8009ed4:	a38a      	add	r3, pc, #552	; (adr r3, 800a100 <__ieee754_rem_pio2+0x2e8>)
 8009ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eda:	f7f6 f9f7 	bl	80002cc <__adddf3>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	e9c4 2300 	strd	r2, r3, [r4]
 8009ee6:	4630      	mov	r0, r6
 8009ee8:	4639      	mov	r1, r7
 8009eea:	f7f6 f9ed 	bl	80002c8 <__aeabi_dsub>
 8009eee:	a384      	add	r3, pc, #528	; (adr r3, 800a100 <__ieee754_rem_pio2+0x2e8>)
 8009ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef4:	f7f6 f9ea 	bl	80002cc <__adddf3>
 8009ef8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009efc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009f00:	e7c6      	b.n	8009e90 <__ieee754_rem_pio2+0x78>
 8009f02:	a381      	add	r3, pc, #516	; (adr r3, 800a108 <__ieee754_rem_pio2+0x2f0>)
 8009f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f08:	f7f6 f9e0 	bl	80002cc <__adddf3>
 8009f0c:	a380      	add	r3, pc, #512	; (adr r3, 800a110 <__ieee754_rem_pio2+0x2f8>)
 8009f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f12:	4606      	mov	r6, r0
 8009f14:	460f      	mov	r7, r1
 8009f16:	f7f6 f9d9 	bl	80002cc <__adddf3>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	e9c4 2300 	strd	r2, r3, [r4]
 8009f22:	4630      	mov	r0, r6
 8009f24:	4639      	mov	r1, r7
 8009f26:	f7f6 f9cf 	bl	80002c8 <__aeabi_dsub>
 8009f2a:	a379      	add	r3, pc, #484	; (adr r3, 800a110 <__ieee754_rem_pio2+0x2f8>)
 8009f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f30:	e7e0      	b.n	8009ef4 <__ieee754_rem_pio2+0xdc>
 8009f32:	4b82      	ldr	r3, [pc, #520]	; (800a13c <__ieee754_rem_pio2+0x324>)
 8009f34:	4598      	cmp	r8, r3
 8009f36:	f300 80d0 	bgt.w	800a0da <__ieee754_rem_pio2+0x2c2>
 8009f3a:	f7ff fca5 	bl	8009888 <fabs>
 8009f3e:	ec57 6b10 	vmov	r6, r7, d0
 8009f42:	ee10 0a10 	vmov	r0, s0
 8009f46:	a374      	add	r3, pc, #464	; (adr r3, 800a118 <__ieee754_rem_pio2+0x300>)
 8009f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4c:	4639      	mov	r1, r7
 8009f4e:	f7f6 fb73 	bl	8000638 <__aeabi_dmul>
 8009f52:	2200      	movs	r2, #0
 8009f54:	4b7a      	ldr	r3, [pc, #488]	; (800a140 <__ieee754_rem_pio2+0x328>)
 8009f56:	f7f6 f9b9 	bl	80002cc <__adddf3>
 8009f5a:	f7f6 fe1d 	bl	8000b98 <__aeabi_d2iz>
 8009f5e:	4605      	mov	r5, r0
 8009f60:	f7f6 fb00 	bl	8000564 <__aeabi_i2d>
 8009f64:	a364      	add	r3, pc, #400	; (adr r3, 800a0f8 <__ieee754_rem_pio2+0x2e0>)
 8009f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f6e:	f7f6 fb63 	bl	8000638 <__aeabi_dmul>
 8009f72:	4602      	mov	r2, r0
 8009f74:	460b      	mov	r3, r1
 8009f76:	4630      	mov	r0, r6
 8009f78:	4639      	mov	r1, r7
 8009f7a:	f7f6 f9a5 	bl	80002c8 <__aeabi_dsub>
 8009f7e:	a360      	add	r3, pc, #384	; (adr r3, 800a100 <__ieee754_rem_pio2+0x2e8>)
 8009f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f84:	4682      	mov	sl, r0
 8009f86:	468b      	mov	fp, r1
 8009f88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f8c:	f7f6 fb54 	bl	8000638 <__aeabi_dmul>
 8009f90:	2d1f      	cmp	r5, #31
 8009f92:	4606      	mov	r6, r0
 8009f94:	460f      	mov	r7, r1
 8009f96:	dc0c      	bgt.n	8009fb2 <__ieee754_rem_pio2+0x19a>
 8009f98:	1e6a      	subs	r2, r5, #1
 8009f9a:	4b6a      	ldr	r3, [pc, #424]	; (800a144 <__ieee754_rem_pio2+0x32c>)
 8009f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fa0:	4543      	cmp	r3, r8
 8009fa2:	d006      	beq.n	8009fb2 <__ieee754_rem_pio2+0x19a>
 8009fa4:	4632      	mov	r2, r6
 8009fa6:	463b      	mov	r3, r7
 8009fa8:	4650      	mov	r0, sl
 8009faa:	4659      	mov	r1, fp
 8009fac:	f7f6 f98c 	bl	80002c8 <__aeabi_dsub>
 8009fb0:	e00e      	b.n	8009fd0 <__ieee754_rem_pio2+0x1b8>
 8009fb2:	4632      	mov	r2, r6
 8009fb4:	463b      	mov	r3, r7
 8009fb6:	4650      	mov	r0, sl
 8009fb8:	4659      	mov	r1, fp
 8009fba:	f7f6 f985 	bl	80002c8 <__aeabi_dsub>
 8009fbe:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009fc2:	9305      	str	r3, [sp, #20]
 8009fc4:	9a05      	ldr	r2, [sp, #20]
 8009fc6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009fca:	1ad3      	subs	r3, r2, r3
 8009fcc:	2b10      	cmp	r3, #16
 8009fce:	dc02      	bgt.n	8009fd6 <__ieee754_rem_pio2+0x1be>
 8009fd0:	e9c4 0100 	strd	r0, r1, [r4]
 8009fd4:	e039      	b.n	800a04a <__ieee754_rem_pio2+0x232>
 8009fd6:	a34c      	add	r3, pc, #304	; (adr r3, 800a108 <__ieee754_rem_pio2+0x2f0>)
 8009fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fe0:	f7f6 fb2a 	bl	8000638 <__aeabi_dmul>
 8009fe4:	4606      	mov	r6, r0
 8009fe6:	460f      	mov	r7, r1
 8009fe8:	4602      	mov	r2, r0
 8009fea:	460b      	mov	r3, r1
 8009fec:	4650      	mov	r0, sl
 8009fee:	4659      	mov	r1, fp
 8009ff0:	f7f6 f96a 	bl	80002c8 <__aeabi_dsub>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	4680      	mov	r8, r0
 8009ffa:	4689      	mov	r9, r1
 8009ffc:	4650      	mov	r0, sl
 8009ffe:	4659      	mov	r1, fp
 800a000:	f7f6 f962 	bl	80002c8 <__aeabi_dsub>
 800a004:	4632      	mov	r2, r6
 800a006:	463b      	mov	r3, r7
 800a008:	f7f6 f95e 	bl	80002c8 <__aeabi_dsub>
 800a00c:	a340      	add	r3, pc, #256	; (adr r3, 800a110 <__ieee754_rem_pio2+0x2f8>)
 800a00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a012:	4606      	mov	r6, r0
 800a014:	460f      	mov	r7, r1
 800a016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a01a:	f7f6 fb0d 	bl	8000638 <__aeabi_dmul>
 800a01e:	4632      	mov	r2, r6
 800a020:	463b      	mov	r3, r7
 800a022:	f7f6 f951 	bl	80002c8 <__aeabi_dsub>
 800a026:	4602      	mov	r2, r0
 800a028:	460b      	mov	r3, r1
 800a02a:	4606      	mov	r6, r0
 800a02c:	460f      	mov	r7, r1
 800a02e:	4640      	mov	r0, r8
 800a030:	4649      	mov	r1, r9
 800a032:	f7f6 f949 	bl	80002c8 <__aeabi_dsub>
 800a036:	9a05      	ldr	r2, [sp, #20]
 800a038:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a03c:	1ad3      	subs	r3, r2, r3
 800a03e:	2b31      	cmp	r3, #49	; 0x31
 800a040:	dc20      	bgt.n	800a084 <__ieee754_rem_pio2+0x26c>
 800a042:	e9c4 0100 	strd	r0, r1, [r4]
 800a046:	46c2      	mov	sl, r8
 800a048:	46cb      	mov	fp, r9
 800a04a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a04e:	4650      	mov	r0, sl
 800a050:	4642      	mov	r2, r8
 800a052:	464b      	mov	r3, r9
 800a054:	4659      	mov	r1, fp
 800a056:	f7f6 f937 	bl	80002c8 <__aeabi_dsub>
 800a05a:	463b      	mov	r3, r7
 800a05c:	4632      	mov	r2, r6
 800a05e:	f7f6 f933 	bl	80002c8 <__aeabi_dsub>
 800a062:	9b04      	ldr	r3, [sp, #16]
 800a064:	2b00      	cmp	r3, #0
 800a066:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a06a:	f6bf af11 	bge.w	8009e90 <__ieee754_rem_pio2+0x78>
 800a06e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a072:	6063      	str	r3, [r4, #4]
 800a074:	f8c4 8000 	str.w	r8, [r4]
 800a078:	60a0      	str	r0, [r4, #8]
 800a07a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a07e:	60e3      	str	r3, [r4, #12]
 800a080:	426d      	negs	r5, r5
 800a082:	e705      	b.n	8009e90 <__ieee754_rem_pio2+0x78>
 800a084:	a326      	add	r3, pc, #152	; (adr r3, 800a120 <__ieee754_rem_pio2+0x308>)
 800a086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a08e:	f7f6 fad3 	bl	8000638 <__aeabi_dmul>
 800a092:	4606      	mov	r6, r0
 800a094:	460f      	mov	r7, r1
 800a096:	4602      	mov	r2, r0
 800a098:	460b      	mov	r3, r1
 800a09a:	4640      	mov	r0, r8
 800a09c:	4649      	mov	r1, r9
 800a09e:	f7f6 f913 	bl	80002c8 <__aeabi_dsub>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	4682      	mov	sl, r0
 800a0a8:	468b      	mov	fp, r1
 800a0aa:	4640      	mov	r0, r8
 800a0ac:	4649      	mov	r1, r9
 800a0ae:	f7f6 f90b 	bl	80002c8 <__aeabi_dsub>
 800a0b2:	4632      	mov	r2, r6
 800a0b4:	463b      	mov	r3, r7
 800a0b6:	f7f6 f907 	bl	80002c8 <__aeabi_dsub>
 800a0ba:	a31b      	add	r3, pc, #108	; (adr r3, 800a128 <__ieee754_rem_pio2+0x310>)
 800a0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c0:	4606      	mov	r6, r0
 800a0c2:	460f      	mov	r7, r1
 800a0c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0c8:	f7f6 fab6 	bl	8000638 <__aeabi_dmul>
 800a0cc:	4632      	mov	r2, r6
 800a0ce:	463b      	mov	r3, r7
 800a0d0:	f7f6 f8fa 	bl	80002c8 <__aeabi_dsub>
 800a0d4:	4606      	mov	r6, r0
 800a0d6:	460f      	mov	r7, r1
 800a0d8:	e764      	b.n	8009fa4 <__ieee754_rem_pio2+0x18c>
 800a0da:	4b1b      	ldr	r3, [pc, #108]	; (800a148 <__ieee754_rem_pio2+0x330>)
 800a0dc:	4598      	cmp	r8, r3
 800a0de:	dd35      	ble.n	800a14c <__ieee754_rem_pio2+0x334>
 800a0e0:	ee10 2a10 	vmov	r2, s0
 800a0e4:	463b      	mov	r3, r7
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	4639      	mov	r1, r7
 800a0ea:	f7f6 f8ed 	bl	80002c8 <__aeabi_dsub>
 800a0ee:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a0f2:	e9c4 0100 	strd	r0, r1, [r4]
 800a0f6:	e6a1      	b.n	8009e3c <__ieee754_rem_pio2+0x24>
 800a0f8:	54400000 	.word	0x54400000
 800a0fc:	3ff921fb 	.word	0x3ff921fb
 800a100:	1a626331 	.word	0x1a626331
 800a104:	3dd0b461 	.word	0x3dd0b461
 800a108:	1a600000 	.word	0x1a600000
 800a10c:	3dd0b461 	.word	0x3dd0b461
 800a110:	2e037073 	.word	0x2e037073
 800a114:	3ba3198a 	.word	0x3ba3198a
 800a118:	6dc9c883 	.word	0x6dc9c883
 800a11c:	3fe45f30 	.word	0x3fe45f30
 800a120:	2e000000 	.word	0x2e000000
 800a124:	3ba3198a 	.word	0x3ba3198a
 800a128:	252049c1 	.word	0x252049c1
 800a12c:	397b839a 	.word	0x397b839a
 800a130:	3fe921fb 	.word	0x3fe921fb
 800a134:	4002d97b 	.word	0x4002d97b
 800a138:	3ff921fb 	.word	0x3ff921fb
 800a13c:	413921fb 	.word	0x413921fb
 800a140:	3fe00000 	.word	0x3fe00000
 800a144:	0800cfc0 	.word	0x0800cfc0
 800a148:	7fefffff 	.word	0x7fefffff
 800a14c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a150:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800a154:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a158:	4630      	mov	r0, r6
 800a15a:	460f      	mov	r7, r1
 800a15c:	f7f6 fd1c 	bl	8000b98 <__aeabi_d2iz>
 800a160:	f7f6 fa00 	bl	8000564 <__aeabi_i2d>
 800a164:	4602      	mov	r2, r0
 800a166:	460b      	mov	r3, r1
 800a168:	4630      	mov	r0, r6
 800a16a:	4639      	mov	r1, r7
 800a16c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a170:	f7f6 f8aa 	bl	80002c8 <__aeabi_dsub>
 800a174:	2200      	movs	r2, #0
 800a176:	4b1f      	ldr	r3, [pc, #124]	; (800a1f4 <__ieee754_rem_pio2+0x3dc>)
 800a178:	f7f6 fa5e 	bl	8000638 <__aeabi_dmul>
 800a17c:	460f      	mov	r7, r1
 800a17e:	4606      	mov	r6, r0
 800a180:	f7f6 fd0a 	bl	8000b98 <__aeabi_d2iz>
 800a184:	f7f6 f9ee 	bl	8000564 <__aeabi_i2d>
 800a188:	4602      	mov	r2, r0
 800a18a:	460b      	mov	r3, r1
 800a18c:	4630      	mov	r0, r6
 800a18e:	4639      	mov	r1, r7
 800a190:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a194:	f7f6 f898 	bl	80002c8 <__aeabi_dsub>
 800a198:	2200      	movs	r2, #0
 800a19a:	4b16      	ldr	r3, [pc, #88]	; (800a1f4 <__ieee754_rem_pio2+0x3dc>)
 800a19c:	f7f6 fa4c 	bl	8000638 <__aeabi_dmul>
 800a1a0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a1a4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800a1a8:	f04f 0803 	mov.w	r8, #3
 800a1ac:	2600      	movs	r6, #0
 800a1ae:	2700      	movs	r7, #0
 800a1b0:	4632      	mov	r2, r6
 800a1b2:	463b      	mov	r3, r7
 800a1b4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a1b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800a1bc:	f7f6 fca4 	bl	8000b08 <__aeabi_dcmpeq>
 800a1c0:	b9b0      	cbnz	r0, 800a1f0 <__ieee754_rem_pio2+0x3d8>
 800a1c2:	4b0d      	ldr	r3, [pc, #52]	; (800a1f8 <__ieee754_rem_pio2+0x3e0>)
 800a1c4:	9301      	str	r3, [sp, #4]
 800a1c6:	2302      	movs	r3, #2
 800a1c8:	9300      	str	r3, [sp, #0]
 800a1ca:	462a      	mov	r2, r5
 800a1cc:	4643      	mov	r3, r8
 800a1ce:	4621      	mov	r1, r4
 800a1d0:	a806      	add	r0, sp, #24
 800a1d2:	f000 f8dd 	bl	800a390 <__kernel_rem_pio2>
 800a1d6:	9b04      	ldr	r3, [sp, #16]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	4605      	mov	r5, r0
 800a1dc:	f6bf ae58 	bge.w	8009e90 <__ieee754_rem_pio2+0x78>
 800a1e0:	6863      	ldr	r3, [r4, #4]
 800a1e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a1e6:	6063      	str	r3, [r4, #4]
 800a1e8:	68e3      	ldr	r3, [r4, #12]
 800a1ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a1ee:	e746      	b.n	800a07e <__ieee754_rem_pio2+0x266>
 800a1f0:	46d0      	mov	r8, sl
 800a1f2:	e7dd      	b.n	800a1b0 <__ieee754_rem_pio2+0x398>
 800a1f4:	41700000 	.word	0x41700000
 800a1f8:	0800d040 	.word	0x0800d040
 800a1fc:	00000000 	.word	0x00000000

0800a200 <__kernel_cos>:
 800a200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a204:	ec59 8b10 	vmov	r8, r9, d0
 800a208:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800a20c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800a210:	ed2d 8b02 	vpush	{d8}
 800a214:	eeb0 8a41 	vmov.f32	s16, s2
 800a218:	eef0 8a61 	vmov.f32	s17, s3
 800a21c:	da07      	bge.n	800a22e <__kernel_cos+0x2e>
 800a21e:	ee10 0a10 	vmov	r0, s0
 800a222:	4649      	mov	r1, r9
 800a224:	f7f6 fcb8 	bl	8000b98 <__aeabi_d2iz>
 800a228:	2800      	cmp	r0, #0
 800a22a:	f000 8089 	beq.w	800a340 <__kernel_cos+0x140>
 800a22e:	4642      	mov	r2, r8
 800a230:	464b      	mov	r3, r9
 800a232:	4640      	mov	r0, r8
 800a234:	4649      	mov	r1, r9
 800a236:	f7f6 f9ff 	bl	8000638 <__aeabi_dmul>
 800a23a:	2200      	movs	r2, #0
 800a23c:	4b4e      	ldr	r3, [pc, #312]	; (800a378 <__kernel_cos+0x178>)
 800a23e:	4604      	mov	r4, r0
 800a240:	460d      	mov	r5, r1
 800a242:	f7f6 f9f9 	bl	8000638 <__aeabi_dmul>
 800a246:	a340      	add	r3, pc, #256	; (adr r3, 800a348 <__kernel_cos+0x148>)
 800a248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24c:	4682      	mov	sl, r0
 800a24e:	468b      	mov	fp, r1
 800a250:	4620      	mov	r0, r4
 800a252:	4629      	mov	r1, r5
 800a254:	f7f6 f9f0 	bl	8000638 <__aeabi_dmul>
 800a258:	a33d      	add	r3, pc, #244	; (adr r3, 800a350 <__kernel_cos+0x150>)
 800a25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25e:	f7f6 f835 	bl	80002cc <__adddf3>
 800a262:	4622      	mov	r2, r4
 800a264:	462b      	mov	r3, r5
 800a266:	f7f6 f9e7 	bl	8000638 <__aeabi_dmul>
 800a26a:	a33b      	add	r3, pc, #236	; (adr r3, 800a358 <__kernel_cos+0x158>)
 800a26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a270:	f7f6 f82a 	bl	80002c8 <__aeabi_dsub>
 800a274:	4622      	mov	r2, r4
 800a276:	462b      	mov	r3, r5
 800a278:	f7f6 f9de 	bl	8000638 <__aeabi_dmul>
 800a27c:	a338      	add	r3, pc, #224	; (adr r3, 800a360 <__kernel_cos+0x160>)
 800a27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a282:	f7f6 f823 	bl	80002cc <__adddf3>
 800a286:	4622      	mov	r2, r4
 800a288:	462b      	mov	r3, r5
 800a28a:	f7f6 f9d5 	bl	8000638 <__aeabi_dmul>
 800a28e:	a336      	add	r3, pc, #216	; (adr r3, 800a368 <__kernel_cos+0x168>)
 800a290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a294:	f7f6 f818 	bl	80002c8 <__aeabi_dsub>
 800a298:	4622      	mov	r2, r4
 800a29a:	462b      	mov	r3, r5
 800a29c:	f7f6 f9cc 	bl	8000638 <__aeabi_dmul>
 800a2a0:	a333      	add	r3, pc, #204	; (adr r3, 800a370 <__kernel_cos+0x170>)
 800a2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a6:	f7f6 f811 	bl	80002cc <__adddf3>
 800a2aa:	4622      	mov	r2, r4
 800a2ac:	462b      	mov	r3, r5
 800a2ae:	f7f6 f9c3 	bl	8000638 <__aeabi_dmul>
 800a2b2:	4622      	mov	r2, r4
 800a2b4:	462b      	mov	r3, r5
 800a2b6:	f7f6 f9bf 	bl	8000638 <__aeabi_dmul>
 800a2ba:	ec53 2b18 	vmov	r2, r3, d8
 800a2be:	4604      	mov	r4, r0
 800a2c0:	460d      	mov	r5, r1
 800a2c2:	4640      	mov	r0, r8
 800a2c4:	4649      	mov	r1, r9
 800a2c6:	f7f6 f9b7 	bl	8000638 <__aeabi_dmul>
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	4629      	mov	r1, r5
 800a2d0:	4620      	mov	r0, r4
 800a2d2:	f7f5 fff9 	bl	80002c8 <__aeabi_dsub>
 800a2d6:	4b29      	ldr	r3, [pc, #164]	; (800a37c <__kernel_cos+0x17c>)
 800a2d8:	429e      	cmp	r6, r3
 800a2da:	4680      	mov	r8, r0
 800a2dc:	4689      	mov	r9, r1
 800a2de:	dc11      	bgt.n	800a304 <__kernel_cos+0x104>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	460b      	mov	r3, r1
 800a2e4:	4650      	mov	r0, sl
 800a2e6:	4659      	mov	r1, fp
 800a2e8:	f7f5 ffee 	bl	80002c8 <__aeabi_dsub>
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	4924      	ldr	r1, [pc, #144]	; (800a380 <__kernel_cos+0x180>)
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	2000      	movs	r0, #0
 800a2f4:	f7f5 ffe8 	bl	80002c8 <__aeabi_dsub>
 800a2f8:	ecbd 8b02 	vpop	{d8}
 800a2fc:	ec41 0b10 	vmov	d0, r0, r1
 800a300:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a304:	4b1f      	ldr	r3, [pc, #124]	; (800a384 <__kernel_cos+0x184>)
 800a306:	491e      	ldr	r1, [pc, #120]	; (800a380 <__kernel_cos+0x180>)
 800a308:	429e      	cmp	r6, r3
 800a30a:	bfcc      	ite	gt
 800a30c:	4d1e      	ldrgt	r5, [pc, #120]	; (800a388 <__kernel_cos+0x188>)
 800a30e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800a312:	2400      	movs	r4, #0
 800a314:	4622      	mov	r2, r4
 800a316:	462b      	mov	r3, r5
 800a318:	2000      	movs	r0, #0
 800a31a:	f7f5 ffd5 	bl	80002c8 <__aeabi_dsub>
 800a31e:	4622      	mov	r2, r4
 800a320:	4606      	mov	r6, r0
 800a322:	460f      	mov	r7, r1
 800a324:	462b      	mov	r3, r5
 800a326:	4650      	mov	r0, sl
 800a328:	4659      	mov	r1, fp
 800a32a:	f7f5 ffcd 	bl	80002c8 <__aeabi_dsub>
 800a32e:	4642      	mov	r2, r8
 800a330:	464b      	mov	r3, r9
 800a332:	f7f5 ffc9 	bl	80002c8 <__aeabi_dsub>
 800a336:	4602      	mov	r2, r0
 800a338:	460b      	mov	r3, r1
 800a33a:	4630      	mov	r0, r6
 800a33c:	4639      	mov	r1, r7
 800a33e:	e7d9      	b.n	800a2f4 <__kernel_cos+0xf4>
 800a340:	2000      	movs	r0, #0
 800a342:	490f      	ldr	r1, [pc, #60]	; (800a380 <__kernel_cos+0x180>)
 800a344:	e7d8      	b.n	800a2f8 <__kernel_cos+0xf8>
 800a346:	bf00      	nop
 800a348:	be8838d4 	.word	0xbe8838d4
 800a34c:	bda8fae9 	.word	0xbda8fae9
 800a350:	bdb4b1c4 	.word	0xbdb4b1c4
 800a354:	3e21ee9e 	.word	0x3e21ee9e
 800a358:	809c52ad 	.word	0x809c52ad
 800a35c:	3e927e4f 	.word	0x3e927e4f
 800a360:	19cb1590 	.word	0x19cb1590
 800a364:	3efa01a0 	.word	0x3efa01a0
 800a368:	16c15177 	.word	0x16c15177
 800a36c:	3f56c16c 	.word	0x3f56c16c
 800a370:	5555554c 	.word	0x5555554c
 800a374:	3fa55555 	.word	0x3fa55555
 800a378:	3fe00000 	.word	0x3fe00000
 800a37c:	3fd33332 	.word	0x3fd33332
 800a380:	3ff00000 	.word	0x3ff00000
 800a384:	3fe90000 	.word	0x3fe90000
 800a388:	3fd20000 	.word	0x3fd20000
 800a38c:	00000000 	.word	0x00000000

0800a390 <__kernel_rem_pio2>:
 800a390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a394:	ed2d 8b02 	vpush	{d8}
 800a398:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a39c:	1ed4      	subs	r4, r2, #3
 800a39e:	9308      	str	r3, [sp, #32]
 800a3a0:	9101      	str	r1, [sp, #4]
 800a3a2:	4bc5      	ldr	r3, [pc, #788]	; (800a6b8 <__kernel_rem_pio2+0x328>)
 800a3a4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a3a6:	9009      	str	r0, [sp, #36]	; 0x24
 800a3a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a3ac:	9304      	str	r3, [sp, #16]
 800a3ae:	9b08      	ldr	r3, [sp, #32]
 800a3b0:	3b01      	subs	r3, #1
 800a3b2:	9307      	str	r3, [sp, #28]
 800a3b4:	2318      	movs	r3, #24
 800a3b6:	fb94 f4f3 	sdiv	r4, r4, r3
 800a3ba:	f06f 0317 	mvn.w	r3, #23
 800a3be:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800a3c2:	fb04 3303 	mla	r3, r4, r3, r3
 800a3c6:	eb03 0a02 	add.w	sl, r3, r2
 800a3ca:	9b04      	ldr	r3, [sp, #16]
 800a3cc:	9a07      	ldr	r2, [sp, #28]
 800a3ce:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800a6a8 <__kernel_rem_pio2+0x318>
 800a3d2:	eb03 0802 	add.w	r8, r3, r2
 800a3d6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a3d8:	1aa7      	subs	r7, r4, r2
 800a3da:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a3de:	ae22      	add	r6, sp, #136	; 0x88
 800a3e0:	2500      	movs	r5, #0
 800a3e2:	4545      	cmp	r5, r8
 800a3e4:	dd13      	ble.n	800a40e <__kernel_rem_pio2+0x7e>
 800a3e6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800a6a8 <__kernel_rem_pio2+0x318>
 800a3ea:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a3ee:	2600      	movs	r6, #0
 800a3f0:	9b04      	ldr	r3, [sp, #16]
 800a3f2:	429e      	cmp	r6, r3
 800a3f4:	dc32      	bgt.n	800a45c <__kernel_rem_pio2+0xcc>
 800a3f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3f8:	9302      	str	r3, [sp, #8]
 800a3fa:	9b08      	ldr	r3, [sp, #32]
 800a3fc:	199d      	adds	r5, r3, r6
 800a3fe:	ab22      	add	r3, sp, #136	; 0x88
 800a400:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a404:	9306      	str	r3, [sp, #24]
 800a406:	ec59 8b18 	vmov	r8, r9, d8
 800a40a:	2700      	movs	r7, #0
 800a40c:	e01f      	b.n	800a44e <__kernel_rem_pio2+0xbe>
 800a40e:	42ef      	cmn	r7, r5
 800a410:	d407      	bmi.n	800a422 <__kernel_rem_pio2+0x92>
 800a412:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a416:	f7f6 f8a5 	bl	8000564 <__aeabi_i2d>
 800a41a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a41e:	3501      	adds	r5, #1
 800a420:	e7df      	b.n	800a3e2 <__kernel_rem_pio2+0x52>
 800a422:	ec51 0b18 	vmov	r0, r1, d8
 800a426:	e7f8      	b.n	800a41a <__kernel_rem_pio2+0x8a>
 800a428:	9906      	ldr	r1, [sp, #24]
 800a42a:	9d02      	ldr	r5, [sp, #8]
 800a42c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800a430:	9106      	str	r1, [sp, #24]
 800a432:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800a436:	9502      	str	r5, [sp, #8]
 800a438:	f7f6 f8fe 	bl	8000638 <__aeabi_dmul>
 800a43c:	4602      	mov	r2, r0
 800a43e:	460b      	mov	r3, r1
 800a440:	4640      	mov	r0, r8
 800a442:	4649      	mov	r1, r9
 800a444:	f7f5 ff42 	bl	80002cc <__adddf3>
 800a448:	3701      	adds	r7, #1
 800a44a:	4680      	mov	r8, r0
 800a44c:	4689      	mov	r9, r1
 800a44e:	9b07      	ldr	r3, [sp, #28]
 800a450:	429f      	cmp	r7, r3
 800a452:	dde9      	ble.n	800a428 <__kernel_rem_pio2+0x98>
 800a454:	e8eb 8902 	strd	r8, r9, [fp], #8
 800a458:	3601      	adds	r6, #1
 800a45a:	e7c9      	b.n	800a3f0 <__kernel_rem_pio2+0x60>
 800a45c:	9b04      	ldr	r3, [sp, #16]
 800a45e:	aa0e      	add	r2, sp, #56	; 0x38
 800a460:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a464:	930c      	str	r3, [sp, #48]	; 0x30
 800a466:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a468:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a46c:	9c04      	ldr	r4, [sp, #16]
 800a46e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a470:	ab9a      	add	r3, sp, #616	; 0x268
 800a472:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800a476:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a47a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a47e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800a482:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800a486:	ab9a      	add	r3, sp, #616	; 0x268
 800a488:	445b      	add	r3, fp
 800a48a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800a48e:	2500      	movs	r5, #0
 800a490:	1b63      	subs	r3, r4, r5
 800a492:	2b00      	cmp	r3, #0
 800a494:	dc78      	bgt.n	800a588 <__kernel_rem_pio2+0x1f8>
 800a496:	4650      	mov	r0, sl
 800a498:	ec49 8b10 	vmov	d0, r8, r9
 800a49c:	f7ff fa84 	bl	80099a8 <scalbn>
 800a4a0:	ec57 6b10 	vmov	r6, r7, d0
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a4aa:	ee10 0a10 	vmov	r0, s0
 800a4ae:	4639      	mov	r1, r7
 800a4b0:	f7f6 f8c2 	bl	8000638 <__aeabi_dmul>
 800a4b4:	ec41 0b10 	vmov	d0, r0, r1
 800a4b8:	f7ff f9f2 	bl	80098a0 <floor>
 800a4bc:	2200      	movs	r2, #0
 800a4be:	ec51 0b10 	vmov	r0, r1, d0
 800a4c2:	4b7e      	ldr	r3, [pc, #504]	; (800a6bc <__kernel_rem_pio2+0x32c>)
 800a4c4:	f7f6 f8b8 	bl	8000638 <__aeabi_dmul>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	4630      	mov	r0, r6
 800a4ce:	4639      	mov	r1, r7
 800a4d0:	f7f5 fefa 	bl	80002c8 <__aeabi_dsub>
 800a4d4:	460f      	mov	r7, r1
 800a4d6:	4606      	mov	r6, r0
 800a4d8:	f7f6 fb5e 	bl	8000b98 <__aeabi_d2iz>
 800a4dc:	9006      	str	r0, [sp, #24]
 800a4de:	f7f6 f841 	bl	8000564 <__aeabi_i2d>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	4630      	mov	r0, r6
 800a4e8:	4639      	mov	r1, r7
 800a4ea:	f7f5 feed 	bl	80002c8 <__aeabi_dsub>
 800a4ee:	f1ba 0f00 	cmp.w	sl, #0
 800a4f2:	4606      	mov	r6, r0
 800a4f4:	460f      	mov	r7, r1
 800a4f6:	dd6c      	ble.n	800a5d2 <__kernel_rem_pio2+0x242>
 800a4f8:	1e62      	subs	r2, r4, #1
 800a4fa:	ab0e      	add	r3, sp, #56	; 0x38
 800a4fc:	f1ca 0118 	rsb	r1, sl, #24
 800a500:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a504:	9d06      	ldr	r5, [sp, #24]
 800a506:	fa40 f301 	asr.w	r3, r0, r1
 800a50a:	441d      	add	r5, r3
 800a50c:	408b      	lsls	r3, r1
 800a50e:	1ac0      	subs	r0, r0, r3
 800a510:	ab0e      	add	r3, sp, #56	; 0x38
 800a512:	9506      	str	r5, [sp, #24]
 800a514:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a518:	f1ca 0317 	rsb	r3, sl, #23
 800a51c:	fa40 f303 	asr.w	r3, r0, r3
 800a520:	9302      	str	r3, [sp, #8]
 800a522:	9b02      	ldr	r3, [sp, #8]
 800a524:	2b00      	cmp	r3, #0
 800a526:	dd62      	ble.n	800a5ee <__kernel_rem_pio2+0x25e>
 800a528:	9b06      	ldr	r3, [sp, #24]
 800a52a:	2200      	movs	r2, #0
 800a52c:	3301      	adds	r3, #1
 800a52e:	9306      	str	r3, [sp, #24]
 800a530:	4615      	mov	r5, r2
 800a532:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a536:	4294      	cmp	r4, r2
 800a538:	f300 8095 	bgt.w	800a666 <__kernel_rem_pio2+0x2d6>
 800a53c:	f1ba 0f00 	cmp.w	sl, #0
 800a540:	dd07      	ble.n	800a552 <__kernel_rem_pio2+0x1c2>
 800a542:	f1ba 0f01 	cmp.w	sl, #1
 800a546:	f000 80a2 	beq.w	800a68e <__kernel_rem_pio2+0x2fe>
 800a54a:	f1ba 0f02 	cmp.w	sl, #2
 800a54e:	f000 80c1 	beq.w	800a6d4 <__kernel_rem_pio2+0x344>
 800a552:	9b02      	ldr	r3, [sp, #8]
 800a554:	2b02      	cmp	r3, #2
 800a556:	d14a      	bne.n	800a5ee <__kernel_rem_pio2+0x25e>
 800a558:	4632      	mov	r2, r6
 800a55a:	463b      	mov	r3, r7
 800a55c:	2000      	movs	r0, #0
 800a55e:	4958      	ldr	r1, [pc, #352]	; (800a6c0 <__kernel_rem_pio2+0x330>)
 800a560:	f7f5 feb2 	bl	80002c8 <__aeabi_dsub>
 800a564:	4606      	mov	r6, r0
 800a566:	460f      	mov	r7, r1
 800a568:	2d00      	cmp	r5, #0
 800a56a:	d040      	beq.n	800a5ee <__kernel_rem_pio2+0x25e>
 800a56c:	4650      	mov	r0, sl
 800a56e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800a6b0 <__kernel_rem_pio2+0x320>
 800a572:	f7ff fa19 	bl	80099a8 <scalbn>
 800a576:	4630      	mov	r0, r6
 800a578:	4639      	mov	r1, r7
 800a57a:	ec53 2b10 	vmov	r2, r3, d0
 800a57e:	f7f5 fea3 	bl	80002c8 <__aeabi_dsub>
 800a582:	4606      	mov	r6, r0
 800a584:	460f      	mov	r7, r1
 800a586:	e032      	b.n	800a5ee <__kernel_rem_pio2+0x25e>
 800a588:	2200      	movs	r2, #0
 800a58a:	4b4e      	ldr	r3, [pc, #312]	; (800a6c4 <__kernel_rem_pio2+0x334>)
 800a58c:	4640      	mov	r0, r8
 800a58e:	4649      	mov	r1, r9
 800a590:	f7f6 f852 	bl	8000638 <__aeabi_dmul>
 800a594:	f7f6 fb00 	bl	8000b98 <__aeabi_d2iz>
 800a598:	f7f5 ffe4 	bl	8000564 <__aeabi_i2d>
 800a59c:	2200      	movs	r2, #0
 800a59e:	4b4a      	ldr	r3, [pc, #296]	; (800a6c8 <__kernel_rem_pio2+0x338>)
 800a5a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5a4:	f7f6 f848 	bl	8000638 <__aeabi_dmul>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	4640      	mov	r0, r8
 800a5ae:	4649      	mov	r1, r9
 800a5b0:	f7f5 fe8a 	bl	80002c8 <__aeabi_dsub>
 800a5b4:	f7f6 faf0 	bl	8000b98 <__aeabi_d2iz>
 800a5b8:	ab0e      	add	r3, sp, #56	; 0x38
 800a5ba:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800a5be:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800a5c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5c6:	f7f5 fe81 	bl	80002cc <__adddf3>
 800a5ca:	3501      	adds	r5, #1
 800a5cc:	4680      	mov	r8, r0
 800a5ce:	4689      	mov	r9, r1
 800a5d0:	e75e      	b.n	800a490 <__kernel_rem_pio2+0x100>
 800a5d2:	d105      	bne.n	800a5e0 <__kernel_rem_pio2+0x250>
 800a5d4:	1e63      	subs	r3, r4, #1
 800a5d6:	aa0e      	add	r2, sp, #56	; 0x38
 800a5d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a5dc:	15c3      	asrs	r3, r0, #23
 800a5de:	e79f      	b.n	800a520 <__kernel_rem_pio2+0x190>
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	4b3a      	ldr	r3, [pc, #232]	; (800a6cc <__kernel_rem_pio2+0x33c>)
 800a5e4:	f7f6 faae 	bl	8000b44 <__aeabi_dcmpge>
 800a5e8:	2800      	cmp	r0, #0
 800a5ea:	d139      	bne.n	800a660 <__kernel_rem_pio2+0x2d0>
 800a5ec:	9002      	str	r0, [sp, #8]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	4630      	mov	r0, r6
 800a5f4:	4639      	mov	r1, r7
 800a5f6:	f7f6 fa87 	bl	8000b08 <__aeabi_dcmpeq>
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	f000 80c7 	beq.w	800a78e <__kernel_rem_pio2+0x3fe>
 800a600:	1e65      	subs	r5, r4, #1
 800a602:	462b      	mov	r3, r5
 800a604:	2200      	movs	r2, #0
 800a606:	9904      	ldr	r1, [sp, #16]
 800a608:	428b      	cmp	r3, r1
 800a60a:	da6a      	bge.n	800a6e2 <__kernel_rem_pio2+0x352>
 800a60c:	2a00      	cmp	r2, #0
 800a60e:	f000 8088 	beq.w	800a722 <__kernel_rem_pio2+0x392>
 800a612:	ab0e      	add	r3, sp, #56	; 0x38
 800a614:	f1aa 0a18 	sub.w	sl, sl, #24
 800a618:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	f000 80b4 	beq.w	800a78a <__kernel_rem_pio2+0x3fa>
 800a622:	4650      	mov	r0, sl
 800a624:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800a6b0 <__kernel_rem_pio2+0x320>
 800a628:	f7ff f9be 	bl	80099a8 <scalbn>
 800a62c:	00ec      	lsls	r4, r5, #3
 800a62e:	ab72      	add	r3, sp, #456	; 0x1c8
 800a630:	191e      	adds	r6, r3, r4
 800a632:	ec59 8b10 	vmov	r8, r9, d0
 800a636:	f106 0a08 	add.w	sl, r6, #8
 800a63a:	462f      	mov	r7, r5
 800a63c:	2f00      	cmp	r7, #0
 800a63e:	f280 80df 	bge.w	800a800 <__kernel_rem_pio2+0x470>
 800a642:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800a6a8 <__kernel_rem_pio2+0x318>
 800a646:	f04f 0a00 	mov.w	sl, #0
 800a64a:	eba5 030a 	sub.w	r3, r5, sl
 800a64e:	2b00      	cmp	r3, #0
 800a650:	f2c0 810a 	blt.w	800a868 <__kernel_rem_pio2+0x4d8>
 800a654:	f8df b078 	ldr.w	fp, [pc, #120]	; 800a6d0 <__kernel_rem_pio2+0x340>
 800a658:	ec59 8b18 	vmov	r8, r9, d8
 800a65c:	2700      	movs	r7, #0
 800a65e:	e0f5      	b.n	800a84c <__kernel_rem_pio2+0x4bc>
 800a660:	2302      	movs	r3, #2
 800a662:	9302      	str	r3, [sp, #8]
 800a664:	e760      	b.n	800a528 <__kernel_rem_pio2+0x198>
 800a666:	ab0e      	add	r3, sp, #56	; 0x38
 800a668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a66c:	b94d      	cbnz	r5, 800a682 <__kernel_rem_pio2+0x2f2>
 800a66e:	b12b      	cbz	r3, 800a67c <__kernel_rem_pio2+0x2ec>
 800a670:	a80e      	add	r0, sp, #56	; 0x38
 800a672:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a676:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a67a:	2301      	movs	r3, #1
 800a67c:	3201      	adds	r2, #1
 800a67e:	461d      	mov	r5, r3
 800a680:	e759      	b.n	800a536 <__kernel_rem_pio2+0x1a6>
 800a682:	a80e      	add	r0, sp, #56	; 0x38
 800a684:	1acb      	subs	r3, r1, r3
 800a686:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a68a:	462b      	mov	r3, r5
 800a68c:	e7f6      	b.n	800a67c <__kernel_rem_pio2+0x2ec>
 800a68e:	1e62      	subs	r2, r4, #1
 800a690:	ab0e      	add	r3, sp, #56	; 0x38
 800a692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a696:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a69a:	a90e      	add	r1, sp, #56	; 0x38
 800a69c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a6a0:	e757      	b.n	800a552 <__kernel_rem_pio2+0x1c2>
 800a6a2:	bf00      	nop
 800a6a4:	f3af 8000 	nop.w
	...
 800a6b4:	3ff00000 	.word	0x3ff00000
 800a6b8:	0800d188 	.word	0x0800d188
 800a6bc:	40200000 	.word	0x40200000
 800a6c0:	3ff00000 	.word	0x3ff00000
 800a6c4:	3e700000 	.word	0x3e700000
 800a6c8:	41700000 	.word	0x41700000
 800a6cc:	3fe00000 	.word	0x3fe00000
 800a6d0:	0800d148 	.word	0x0800d148
 800a6d4:	1e62      	subs	r2, r4, #1
 800a6d6:	ab0e      	add	r3, sp, #56	; 0x38
 800a6d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6dc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a6e0:	e7db      	b.n	800a69a <__kernel_rem_pio2+0x30a>
 800a6e2:	a90e      	add	r1, sp, #56	; 0x38
 800a6e4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	430a      	orrs	r2, r1
 800a6ec:	e78b      	b.n	800a606 <__kernel_rem_pio2+0x276>
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a6f4:	2900      	cmp	r1, #0
 800a6f6:	d0fa      	beq.n	800a6ee <__kernel_rem_pio2+0x35e>
 800a6f8:	9a08      	ldr	r2, [sp, #32]
 800a6fa:	4422      	add	r2, r4
 800a6fc:	00d2      	lsls	r2, r2, #3
 800a6fe:	a922      	add	r1, sp, #136	; 0x88
 800a700:	18e3      	adds	r3, r4, r3
 800a702:	9206      	str	r2, [sp, #24]
 800a704:	440a      	add	r2, r1
 800a706:	9302      	str	r3, [sp, #8]
 800a708:	f10b 0108 	add.w	r1, fp, #8
 800a70c:	f102 0308 	add.w	r3, r2, #8
 800a710:	1c66      	adds	r6, r4, #1
 800a712:	910a      	str	r1, [sp, #40]	; 0x28
 800a714:	2500      	movs	r5, #0
 800a716:	930d      	str	r3, [sp, #52]	; 0x34
 800a718:	9b02      	ldr	r3, [sp, #8]
 800a71a:	42b3      	cmp	r3, r6
 800a71c:	da04      	bge.n	800a728 <__kernel_rem_pio2+0x398>
 800a71e:	461c      	mov	r4, r3
 800a720:	e6a6      	b.n	800a470 <__kernel_rem_pio2+0xe0>
 800a722:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a724:	2301      	movs	r3, #1
 800a726:	e7e3      	b.n	800a6f0 <__kernel_rem_pio2+0x360>
 800a728:	9b06      	ldr	r3, [sp, #24]
 800a72a:	18ef      	adds	r7, r5, r3
 800a72c:	ab22      	add	r3, sp, #136	; 0x88
 800a72e:	441f      	add	r7, r3
 800a730:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a732:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a736:	f7f5 ff15 	bl	8000564 <__aeabi_i2d>
 800a73a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a73c:	461c      	mov	r4, r3
 800a73e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a740:	e9c7 0100 	strd	r0, r1, [r7]
 800a744:	eb03 0b05 	add.w	fp, r3, r5
 800a748:	2700      	movs	r7, #0
 800a74a:	f04f 0800 	mov.w	r8, #0
 800a74e:	f04f 0900 	mov.w	r9, #0
 800a752:	9b07      	ldr	r3, [sp, #28]
 800a754:	429f      	cmp	r7, r3
 800a756:	dd08      	ble.n	800a76a <__kernel_rem_pio2+0x3da>
 800a758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a75a:	aa72      	add	r2, sp, #456	; 0x1c8
 800a75c:	18eb      	adds	r3, r5, r3
 800a75e:	4413      	add	r3, r2
 800a760:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800a764:	3601      	adds	r6, #1
 800a766:	3508      	adds	r5, #8
 800a768:	e7d6      	b.n	800a718 <__kernel_rem_pio2+0x388>
 800a76a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a76e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a772:	f7f5 ff61 	bl	8000638 <__aeabi_dmul>
 800a776:	4602      	mov	r2, r0
 800a778:	460b      	mov	r3, r1
 800a77a:	4640      	mov	r0, r8
 800a77c:	4649      	mov	r1, r9
 800a77e:	f7f5 fda5 	bl	80002cc <__adddf3>
 800a782:	3701      	adds	r7, #1
 800a784:	4680      	mov	r8, r0
 800a786:	4689      	mov	r9, r1
 800a788:	e7e3      	b.n	800a752 <__kernel_rem_pio2+0x3c2>
 800a78a:	3d01      	subs	r5, #1
 800a78c:	e741      	b.n	800a612 <__kernel_rem_pio2+0x282>
 800a78e:	f1ca 0000 	rsb	r0, sl, #0
 800a792:	ec47 6b10 	vmov	d0, r6, r7
 800a796:	f7ff f907 	bl	80099a8 <scalbn>
 800a79a:	ec57 6b10 	vmov	r6, r7, d0
 800a79e:	2200      	movs	r2, #0
 800a7a0:	4b99      	ldr	r3, [pc, #612]	; (800aa08 <__kernel_rem_pio2+0x678>)
 800a7a2:	ee10 0a10 	vmov	r0, s0
 800a7a6:	4639      	mov	r1, r7
 800a7a8:	f7f6 f9cc 	bl	8000b44 <__aeabi_dcmpge>
 800a7ac:	b1f8      	cbz	r0, 800a7ee <__kernel_rem_pio2+0x45e>
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	4b96      	ldr	r3, [pc, #600]	; (800aa0c <__kernel_rem_pio2+0x67c>)
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	4639      	mov	r1, r7
 800a7b6:	f7f5 ff3f 	bl	8000638 <__aeabi_dmul>
 800a7ba:	f7f6 f9ed 	bl	8000b98 <__aeabi_d2iz>
 800a7be:	4680      	mov	r8, r0
 800a7c0:	f7f5 fed0 	bl	8000564 <__aeabi_i2d>
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	4b90      	ldr	r3, [pc, #576]	; (800aa08 <__kernel_rem_pio2+0x678>)
 800a7c8:	f7f5 ff36 	bl	8000638 <__aeabi_dmul>
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	4639      	mov	r1, r7
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	f7f5 fd78 	bl	80002c8 <__aeabi_dsub>
 800a7d8:	f7f6 f9de 	bl	8000b98 <__aeabi_d2iz>
 800a7dc:	1c65      	adds	r5, r4, #1
 800a7de:	ab0e      	add	r3, sp, #56	; 0x38
 800a7e0:	f10a 0a18 	add.w	sl, sl, #24
 800a7e4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a7e8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a7ec:	e719      	b.n	800a622 <__kernel_rem_pio2+0x292>
 800a7ee:	4630      	mov	r0, r6
 800a7f0:	4639      	mov	r1, r7
 800a7f2:	f7f6 f9d1 	bl	8000b98 <__aeabi_d2iz>
 800a7f6:	ab0e      	add	r3, sp, #56	; 0x38
 800a7f8:	4625      	mov	r5, r4
 800a7fa:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a7fe:	e710      	b.n	800a622 <__kernel_rem_pio2+0x292>
 800a800:	ab0e      	add	r3, sp, #56	; 0x38
 800a802:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800a806:	f7f5 fead 	bl	8000564 <__aeabi_i2d>
 800a80a:	4642      	mov	r2, r8
 800a80c:	464b      	mov	r3, r9
 800a80e:	f7f5 ff13 	bl	8000638 <__aeabi_dmul>
 800a812:	2200      	movs	r2, #0
 800a814:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800a818:	4b7c      	ldr	r3, [pc, #496]	; (800aa0c <__kernel_rem_pio2+0x67c>)
 800a81a:	4640      	mov	r0, r8
 800a81c:	4649      	mov	r1, r9
 800a81e:	f7f5 ff0b 	bl	8000638 <__aeabi_dmul>
 800a822:	3f01      	subs	r7, #1
 800a824:	4680      	mov	r8, r0
 800a826:	4689      	mov	r9, r1
 800a828:	e708      	b.n	800a63c <__kernel_rem_pio2+0x2ac>
 800a82a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800a82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a832:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800a836:	f7f5 feff 	bl	8000638 <__aeabi_dmul>
 800a83a:	4602      	mov	r2, r0
 800a83c:	460b      	mov	r3, r1
 800a83e:	4640      	mov	r0, r8
 800a840:	4649      	mov	r1, r9
 800a842:	f7f5 fd43 	bl	80002cc <__adddf3>
 800a846:	3701      	adds	r7, #1
 800a848:	4680      	mov	r8, r0
 800a84a:	4689      	mov	r9, r1
 800a84c:	9b04      	ldr	r3, [sp, #16]
 800a84e:	429f      	cmp	r7, r3
 800a850:	dc01      	bgt.n	800a856 <__kernel_rem_pio2+0x4c6>
 800a852:	45ba      	cmp	sl, r7
 800a854:	dae9      	bge.n	800a82a <__kernel_rem_pio2+0x49a>
 800a856:	ab4a      	add	r3, sp, #296	; 0x128
 800a858:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a85c:	e9c3 8900 	strd	r8, r9, [r3]
 800a860:	f10a 0a01 	add.w	sl, sl, #1
 800a864:	3e08      	subs	r6, #8
 800a866:	e6f0      	b.n	800a64a <__kernel_rem_pio2+0x2ba>
 800a868:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a86a:	2b03      	cmp	r3, #3
 800a86c:	d85b      	bhi.n	800a926 <__kernel_rem_pio2+0x596>
 800a86e:	e8df f003 	tbb	[pc, r3]
 800a872:	264a      	.short	0x264a
 800a874:	0226      	.short	0x0226
 800a876:	ab9a      	add	r3, sp, #616	; 0x268
 800a878:	441c      	add	r4, r3
 800a87a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a87e:	46a2      	mov	sl, r4
 800a880:	46ab      	mov	fp, r5
 800a882:	f1bb 0f00 	cmp.w	fp, #0
 800a886:	dc6c      	bgt.n	800a962 <__kernel_rem_pio2+0x5d2>
 800a888:	46a2      	mov	sl, r4
 800a88a:	46ab      	mov	fp, r5
 800a88c:	f1bb 0f01 	cmp.w	fp, #1
 800a890:	f300 8086 	bgt.w	800a9a0 <__kernel_rem_pio2+0x610>
 800a894:	2000      	movs	r0, #0
 800a896:	2100      	movs	r1, #0
 800a898:	2d01      	cmp	r5, #1
 800a89a:	f300 80a0 	bgt.w	800a9de <__kernel_rem_pio2+0x64e>
 800a89e:	9b02      	ldr	r3, [sp, #8]
 800a8a0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800a8a4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	f040 809e 	bne.w	800a9ea <__kernel_rem_pio2+0x65a>
 800a8ae:	9b01      	ldr	r3, [sp, #4]
 800a8b0:	e9c3 7800 	strd	r7, r8, [r3]
 800a8b4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a8b8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a8bc:	e033      	b.n	800a926 <__kernel_rem_pio2+0x596>
 800a8be:	3408      	adds	r4, #8
 800a8c0:	ab4a      	add	r3, sp, #296	; 0x128
 800a8c2:	441c      	add	r4, r3
 800a8c4:	462e      	mov	r6, r5
 800a8c6:	2000      	movs	r0, #0
 800a8c8:	2100      	movs	r1, #0
 800a8ca:	2e00      	cmp	r6, #0
 800a8cc:	da3a      	bge.n	800a944 <__kernel_rem_pio2+0x5b4>
 800a8ce:	9b02      	ldr	r3, [sp, #8]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d03d      	beq.n	800a950 <__kernel_rem_pio2+0x5c0>
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a8da:	9c01      	ldr	r4, [sp, #4]
 800a8dc:	e9c4 2300 	strd	r2, r3, [r4]
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	460b      	mov	r3, r1
 800a8e4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a8e8:	f7f5 fcee 	bl	80002c8 <__aeabi_dsub>
 800a8ec:	ae4c      	add	r6, sp, #304	; 0x130
 800a8ee:	2401      	movs	r4, #1
 800a8f0:	42a5      	cmp	r5, r4
 800a8f2:	da30      	bge.n	800a956 <__kernel_rem_pio2+0x5c6>
 800a8f4:	9b02      	ldr	r3, [sp, #8]
 800a8f6:	b113      	cbz	r3, 800a8fe <__kernel_rem_pio2+0x56e>
 800a8f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	9b01      	ldr	r3, [sp, #4]
 800a900:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a904:	e00f      	b.n	800a926 <__kernel_rem_pio2+0x596>
 800a906:	ab9a      	add	r3, sp, #616	; 0x268
 800a908:	441c      	add	r4, r3
 800a90a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a90e:	2000      	movs	r0, #0
 800a910:	2100      	movs	r1, #0
 800a912:	2d00      	cmp	r5, #0
 800a914:	da10      	bge.n	800a938 <__kernel_rem_pio2+0x5a8>
 800a916:	9b02      	ldr	r3, [sp, #8]
 800a918:	b113      	cbz	r3, 800a920 <__kernel_rem_pio2+0x590>
 800a91a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a91e:	4619      	mov	r1, r3
 800a920:	9b01      	ldr	r3, [sp, #4]
 800a922:	e9c3 0100 	strd	r0, r1, [r3]
 800a926:	9b06      	ldr	r3, [sp, #24]
 800a928:	f003 0007 	and.w	r0, r3, #7
 800a92c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a930:	ecbd 8b02 	vpop	{d8}
 800a934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a938:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a93c:	f7f5 fcc6 	bl	80002cc <__adddf3>
 800a940:	3d01      	subs	r5, #1
 800a942:	e7e6      	b.n	800a912 <__kernel_rem_pio2+0x582>
 800a944:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a948:	f7f5 fcc0 	bl	80002cc <__adddf3>
 800a94c:	3e01      	subs	r6, #1
 800a94e:	e7bc      	b.n	800a8ca <__kernel_rem_pio2+0x53a>
 800a950:	4602      	mov	r2, r0
 800a952:	460b      	mov	r3, r1
 800a954:	e7c1      	b.n	800a8da <__kernel_rem_pio2+0x54a>
 800a956:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a95a:	f7f5 fcb7 	bl	80002cc <__adddf3>
 800a95e:	3401      	adds	r4, #1
 800a960:	e7c6      	b.n	800a8f0 <__kernel_rem_pio2+0x560>
 800a962:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800a966:	ed3a 7b02 	vldmdb	sl!, {d7}
 800a96a:	4640      	mov	r0, r8
 800a96c:	ec53 2b17 	vmov	r2, r3, d7
 800a970:	4649      	mov	r1, r9
 800a972:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a976:	f7f5 fca9 	bl	80002cc <__adddf3>
 800a97a:	4602      	mov	r2, r0
 800a97c:	460b      	mov	r3, r1
 800a97e:	4606      	mov	r6, r0
 800a980:	460f      	mov	r7, r1
 800a982:	4640      	mov	r0, r8
 800a984:	4649      	mov	r1, r9
 800a986:	f7f5 fc9f 	bl	80002c8 <__aeabi_dsub>
 800a98a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a98e:	f7f5 fc9d 	bl	80002cc <__adddf3>
 800a992:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a996:	e9ca 0100 	strd	r0, r1, [sl]
 800a99a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800a99e:	e770      	b.n	800a882 <__kernel_rem_pio2+0x4f2>
 800a9a0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800a9a4:	ed3a 7b02 	vldmdb	sl!, {d7}
 800a9a8:	4630      	mov	r0, r6
 800a9aa:	ec53 2b17 	vmov	r2, r3, d7
 800a9ae:	4639      	mov	r1, r7
 800a9b0:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a9b4:	f7f5 fc8a 	bl	80002cc <__adddf3>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	4680      	mov	r8, r0
 800a9be:	4689      	mov	r9, r1
 800a9c0:	4630      	mov	r0, r6
 800a9c2:	4639      	mov	r1, r7
 800a9c4:	f7f5 fc80 	bl	80002c8 <__aeabi_dsub>
 800a9c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9cc:	f7f5 fc7e 	bl	80002cc <__adddf3>
 800a9d0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a9d4:	e9ca 0100 	strd	r0, r1, [sl]
 800a9d8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800a9dc:	e756      	b.n	800a88c <__kernel_rem_pio2+0x4fc>
 800a9de:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a9e2:	f7f5 fc73 	bl	80002cc <__adddf3>
 800a9e6:	3d01      	subs	r5, #1
 800a9e8:	e756      	b.n	800a898 <__kernel_rem_pio2+0x508>
 800a9ea:	9b01      	ldr	r3, [sp, #4]
 800a9ec:	9a01      	ldr	r2, [sp, #4]
 800a9ee:	601f      	str	r7, [r3, #0]
 800a9f0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800a9f4:	605c      	str	r4, [r3, #4]
 800a9f6:	609d      	str	r5, [r3, #8]
 800a9f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a9fc:	60d3      	str	r3, [r2, #12]
 800a9fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa02:	6110      	str	r0, [r2, #16]
 800aa04:	6153      	str	r3, [r2, #20]
 800aa06:	e78e      	b.n	800a926 <__kernel_rem_pio2+0x596>
 800aa08:	41700000 	.word	0x41700000
 800aa0c:	3e700000 	.word	0x3e700000

0800aa10 <__kernel_sin>:
 800aa10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa14:	ec55 4b10 	vmov	r4, r5, d0
 800aa18:	b085      	sub	sp, #20
 800aa1a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800aa1e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800aa22:	ed8d 1b00 	vstr	d1, [sp]
 800aa26:	9002      	str	r0, [sp, #8]
 800aa28:	da06      	bge.n	800aa38 <__kernel_sin+0x28>
 800aa2a:	ee10 0a10 	vmov	r0, s0
 800aa2e:	4629      	mov	r1, r5
 800aa30:	f7f6 f8b2 	bl	8000b98 <__aeabi_d2iz>
 800aa34:	2800      	cmp	r0, #0
 800aa36:	d051      	beq.n	800aadc <__kernel_sin+0xcc>
 800aa38:	4622      	mov	r2, r4
 800aa3a:	462b      	mov	r3, r5
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	4629      	mov	r1, r5
 800aa40:	f7f5 fdfa 	bl	8000638 <__aeabi_dmul>
 800aa44:	4682      	mov	sl, r0
 800aa46:	468b      	mov	fp, r1
 800aa48:	4602      	mov	r2, r0
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	4629      	mov	r1, r5
 800aa50:	f7f5 fdf2 	bl	8000638 <__aeabi_dmul>
 800aa54:	a341      	add	r3, pc, #260	; (adr r3, 800ab5c <__kernel_sin+0x14c>)
 800aa56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5a:	4680      	mov	r8, r0
 800aa5c:	4689      	mov	r9, r1
 800aa5e:	4650      	mov	r0, sl
 800aa60:	4659      	mov	r1, fp
 800aa62:	f7f5 fde9 	bl	8000638 <__aeabi_dmul>
 800aa66:	a33f      	add	r3, pc, #252	; (adr r3, 800ab64 <__kernel_sin+0x154>)
 800aa68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6c:	f7f5 fc2c 	bl	80002c8 <__aeabi_dsub>
 800aa70:	4652      	mov	r2, sl
 800aa72:	465b      	mov	r3, fp
 800aa74:	f7f5 fde0 	bl	8000638 <__aeabi_dmul>
 800aa78:	a33c      	add	r3, pc, #240	; (adr r3, 800ab6c <__kernel_sin+0x15c>)
 800aa7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7e:	f7f5 fc25 	bl	80002cc <__adddf3>
 800aa82:	4652      	mov	r2, sl
 800aa84:	465b      	mov	r3, fp
 800aa86:	f7f5 fdd7 	bl	8000638 <__aeabi_dmul>
 800aa8a:	a33a      	add	r3, pc, #232	; (adr r3, 800ab74 <__kernel_sin+0x164>)
 800aa8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa90:	f7f5 fc1a 	bl	80002c8 <__aeabi_dsub>
 800aa94:	4652      	mov	r2, sl
 800aa96:	465b      	mov	r3, fp
 800aa98:	f7f5 fdce 	bl	8000638 <__aeabi_dmul>
 800aa9c:	a337      	add	r3, pc, #220	; (adr r3, 800ab7c <__kernel_sin+0x16c>)
 800aa9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa2:	f7f5 fc13 	bl	80002cc <__adddf3>
 800aaa6:	9b02      	ldr	r3, [sp, #8]
 800aaa8:	4606      	mov	r6, r0
 800aaaa:	460f      	mov	r7, r1
 800aaac:	b9db      	cbnz	r3, 800aae6 <__kernel_sin+0xd6>
 800aaae:	4602      	mov	r2, r0
 800aab0:	460b      	mov	r3, r1
 800aab2:	4650      	mov	r0, sl
 800aab4:	4659      	mov	r1, fp
 800aab6:	f7f5 fdbf 	bl	8000638 <__aeabi_dmul>
 800aaba:	a325      	add	r3, pc, #148	; (adr r3, 800ab50 <__kernel_sin+0x140>)
 800aabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac0:	f7f5 fc02 	bl	80002c8 <__aeabi_dsub>
 800aac4:	4642      	mov	r2, r8
 800aac6:	464b      	mov	r3, r9
 800aac8:	f7f5 fdb6 	bl	8000638 <__aeabi_dmul>
 800aacc:	4602      	mov	r2, r0
 800aace:	460b      	mov	r3, r1
 800aad0:	4620      	mov	r0, r4
 800aad2:	4629      	mov	r1, r5
 800aad4:	f7f5 fbfa 	bl	80002cc <__adddf3>
 800aad8:	4604      	mov	r4, r0
 800aada:	460d      	mov	r5, r1
 800aadc:	ec45 4b10 	vmov	d0, r4, r5
 800aae0:	b005      	add	sp, #20
 800aae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae6:	2200      	movs	r2, #0
 800aae8:	4b1b      	ldr	r3, [pc, #108]	; (800ab58 <__kernel_sin+0x148>)
 800aaea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aaee:	f7f5 fda3 	bl	8000638 <__aeabi_dmul>
 800aaf2:	4632      	mov	r2, r6
 800aaf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aaf8:	463b      	mov	r3, r7
 800aafa:	4640      	mov	r0, r8
 800aafc:	4649      	mov	r1, r9
 800aafe:	f7f5 fd9b 	bl	8000638 <__aeabi_dmul>
 800ab02:	4602      	mov	r2, r0
 800ab04:	460b      	mov	r3, r1
 800ab06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab0a:	f7f5 fbdd 	bl	80002c8 <__aeabi_dsub>
 800ab0e:	4652      	mov	r2, sl
 800ab10:	465b      	mov	r3, fp
 800ab12:	f7f5 fd91 	bl	8000638 <__aeabi_dmul>
 800ab16:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab1a:	f7f5 fbd5 	bl	80002c8 <__aeabi_dsub>
 800ab1e:	a30c      	add	r3, pc, #48	; (adr r3, 800ab50 <__kernel_sin+0x140>)
 800ab20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab24:	4606      	mov	r6, r0
 800ab26:	460f      	mov	r7, r1
 800ab28:	4640      	mov	r0, r8
 800ab2a:	4649      	mov	r1, r9
 800ab2c:	f7f5 fd84 	bl	8000638 <__aeabi_dmul>
 800ab30:	4602      	mov	r2, r0
 800ab32:	460b      	mov	r3, r1
 800ab34:	4630      	mov	r0, r6
 800ab36:	4639      	mov	r1, r7
 800ab38:	f7f5 fbc8 	bl	80002cc <__adddf3>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	460b      	mov	r3, r1
 800ab40:	4620      	mov	r0, r4
 800ab42:	4629      	mov	r1, r5
 800ab44:	f7f5 fbc0 	bl	80002c8 <__aeabi_dsub>
 800ab48:	e7c6      	b.n	800aad8 <__kernel_sin+0xc8>
 800ab4a:	bf00      	nop
 800ab4c:	f3af 8000 	nop.w
 800ab50:	55555549 	.word	0x55555549
 800ab54:	3fc55555 	.word	0x3fc55555
 800ab58:	3fe00000 	.word	0x3fe00000
 800ab5c:	5acfd57c 	.word	0x5acfd57c
 800ab60:	3de5d93a 	.word	0x3de5d93a
 800ab64:	8a2b9ceb 	.word	0x8a2b9ceb
 800ab68:	3e5ae5e6 	.word	0x3e5ae5e6
 800ab6c:	57b1fe7d 	.word	0x57b1fe7d
 800ab70:	3ec71de3 	.word	0x3ec71de3
 800ab74:	19c161d5 	.word	0x19c161d5
 800ab78:	3f2a01a0 	.word	0x3f2a01a0
 800ab7c:	1110f8a6 	.word	0x1110f8a6
 800ab80:	3f811111 	.word	0x3f811111

0800ab84 <copysign>:
 800ab84:	ec51 0b10 	vmov	r0, r1, d0
 800ab88:	ee11 0a90 	vmov	r0, s3
 800ab8c:	ee10 2a10 	vmov	r2, s0
 800ab90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ab94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800ab98:	ea41 0300 	orr.w	r3, r1, r0
 800ab9c:	ec43 2b10 	vmov	d0, r2, r3
 800aba0:	4770      	bx	lr

0800aba2 <matherr>:
 800aba2:	2000      	movs	r0, #0
 800aba4:	4770      	bx	lr

0800aba6 <abort>:
 800aba6:	b508      	push	{r3, lr}
 800aba8:	2006      	movs	r0, #6
 800abaa:	f000 fda5 	bl	800b6f8 <raise>
 800abae:	2001      	movs	r0, #1
 800abb0:	f7fd fc3d 	bl	800842e <_exit>

0800abb4 <__errno>:
 800abb4:	4b01      	ldr	r3, [pc, #4]	; (800abbc <__errno+0x8>)
 800abb6:	6818      	ldr	r0, [r3, #0]
 800abb8:	4770      	bx	lr
 800abba:	bf00      	nop
 800abbc:	20000014 	.word	0x20000014

0800abc0 <__libc_init_array>:
 800abc0:	b570      	push	{r4, r5, r6, lr}
 800abc2:	4e0d      	ldr	r6, [pc, #52]	; (800abf8 <__libc_init_array+0x38>)
 800abc4:	4c0d      	ldr	r4, [pc, #52]	; (800abfc <__libc_init_array+0x3c>)
 800abc6:	1ba4      	subs	r4, r4, r6
 800abc8:	10a4      	asrs	r4, r4, #2
 800abca:	2500      	movs	r5, #0
 800abcc:	42a5      	cmp	r5, r4
 800abce:	d109      	bne.n	800abe4 <__libc_init_array+0x24>
 800abd0:	4e0b      	ldr	r6, [pc, #44]	; (800ac00 <__libc_init_array+0x40>)
 800abd2:	4c0c      	ldr	r4, [pc, #48]	; (800ac04 <__libc_init_array+0x44>)
 800abd4:	f002 f8c6 	bl	800cd64 <_init>
 800abd8:	1ba4      	subs	r4, r4, r6
 800abda:	10a4      	asrs	r4, r4, #2
 800abdc:	2500      	movs	r5, #0
 800abde:	42a5      	cmp	r5, r4
 800abe0:	d105      	bne.n	800abee <__libc_init_array+0x2e>
 800abe2:	bd70      	pop	{r4, r5, r6, pc}
 800abe4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800abe8:	4798      	blx	r3
 800abea:	3501      	adds	r5, #1
 800abec:	e7ee      	b.n	800abcc <__libc_init_array+0xc>
 800abee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800abf2:	4798      	blx	r3
 800abf4:	3501      	adds	r5, #1
 800abf6:	e7f2      	b.n	800abde <__libc_init_array+0x1e>
 800abf8:	0800d400 	.word	0x0800d400
 800abfc:	0800d400 	.word	0x0800d400
 800ac00:	0800d400 	.word	0x0800d400
 800ac04:	0800d408 	.word	0x0800d408

0800ac08 <malloc>:
 800ac08:	4b02      	ldr	r3, [pc, #8]	; (800ac14 <malloc+0xc>)
 800ac0a:	4601      	mov	r1, r0
 800ac0c:	6818      	ldr	r0, [r3, #0]
 800ac0e:	f000 b885 	b.w	800ad1c <_malloc_r>
 800ac12:	bf00      	nop
 800ac14:	20000014 	.word	0x20000014

0800ac18 <free>:
 800ac18:	4b02      	ldr	r3, [pc, #8]	; (800ac24 <free+0xc>)
 800ac1a:	4601      	mov	r1, r0
 800ac1c:	6818      	ldr	r0, [r3, #0]
 800ac1e:	f000 b82f 	b.w	800ac80 <_free_r>
 800ac22:	bf00      	nop
 800ac24:	20000014 	.word	0x20000014

0800ac28 <memcpy>:
 800ac28:	b510      	push	{r4, lr}
 800ac2a:	1e43      	subs	r3, r0, #1
 800ac2c:	440a      	add	r2, r1
 800ac2e:	4291      	cmp	r1, r2
 800ac30:	d100      	bne.n	800ac34 <memcpy+0xc>
 800ac32:	bd10      	pop	{r4, pc}
 800ac34:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac38:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac3c:	e7f7      	b.n	800ac2e <memcpy+0x6>

0800ac3e <memmove>:
 800ac3e:	4288      	cmp	r0, r1
 800ac40:	b510      	push	{r4, lr}
 800ac42:	eb01 0302 	add.w	r3, r1, r2
 800ac46:	d807      	bhi.n	800ac58 <memmove+0x1a>
 800ac48:	1e42      	subs	r2, r0, #1
 800ac4a:	4299      	cmp	r1, r3
 800ac4c:	d00a      	beq.n	800ac64 <memmove+0x26>
 800ac4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac52:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ac56:	e7f8      	b.n	800ac4a <memmove+0xc>
 800ac58:	4283      	cmp	r3, r0
 800ac5a:	d9f5      	bls.n	800ac48 <memmove+0xa>
 800ac5c:	1881      	adds	r1, r0, r2
 800ac5e:	1ad2      	subs	r2, r2, r3
 800ac60:	42d3      	cmn	r3, r2
 800ac62:	d100      	bne.n	800ac66 <memmove+0x28>
 800ac64:	bd10      	pop	{r4, pc}
 800ac66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac6a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ac6e:	e7f7      	b.n	800ac60 <memmove+0x22>

0800ac70 <memset>:
 800ac70:	4402      	add	r2, r0
 800ac72:	4603      	mov	r3, r0
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d100      	bne.n	800ac7a <memset+0xa>
 800ac78:	4770      	bx	lr
 800ac7a:	f803 1b01 	strb.w	r1, [r3], #1
 800ac7e:	e7f9      	b.n	800ac74 <memset+0x4>

0800ac80 <_free_r>:
 800ac80:	b538      	push	{r3, r4, r5, lr}
 800ac82:	4605      	mov	r5, r0
 800ac84:	2900      	cmp	r1, #0
 800ac86:	d045      	beq.n	800ad14 <_free_r+0x94>
 800ac88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac8c:	1f0c      	subs	r4, r1, #4
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	bfb8      	it	lt
 800ac92:	18e4      	addlt	r4, r4, r3
 800ac94:	f001 fbda 	bl	800c44c <__malloc_lock>
 800ac98:	4a1f      	ldr	r2, [pc, #124]	; (800ad18 <_free_r+0x98>)
 800ac9a:	6813      	ldr	r3, [r2, #0]
 800ac9c:	4610      	mov	r0, r2
 800ac9e:	b933      	cbnz	r3, 800acae <_free_r+0x2e>
 800aca0:	6063      	str	r3, [r4, #4]
 800aca2:	6014      	str	r4, [r2, #0]
 800aca4:	4628      	mov	r0, r5
 800aca6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acaa:	f001 bbd0 	b.w	800c44e <__malloc_unlock>
 800acae:	42a3      	cmp	r3, r4
 800acb0:	d90c      	bls.n	800accc <_free_r+0x4c>
 800acb2:	6821      	ldr	r1, [r4, #0]
 800acb4:	1862      	adds	r2, r4, r1
 800acb6:	4293      	cmp	r3, r2
 800acb8:	bf04      	itt	eq
 800acba:	681a      	ldreq	r2, [r3, #0]
 800acbc:	685b      	ldreq	r3, [r3, #4]
 800acbe:	6063      	str	r3, [r4, #4]
 800acc0:	bf04      	itt	eq
 800acc2:	1852      	addeq	r2, r2, r1
 800acc4:	6022      	streq	r2, [r4, #0]
 800acc6:	6004      	str	r4, [r0, #0]
 800acc8:	e7ec      	b.n	800aca4 <_free_r+0x24>
 800acca:	4613      	mov	r3, r2
 800accc:	685a      	ldr	r2, [r3, #4]
 800acce:	b10a      	cbz	r2, 800acd4 <_free_r+0x54>
 800acd0:	42a2      	cmp	r2, r4
 800acd2:	d9fa      	bls.n	800acca <_free_r+0x4a>
 800acd4:	6819      	ldr	r1, [r3, #0]
 800acd6:	1858      	adds	r0, r3, r1
 800acd8:	42a0      	cmp	r0, r4
 800acda:	d10b      	bne.n	800acf4 <_free_r+0x74>
 800acdc:	6820      	ldr	r0, [r4, #0]
 800acde:	4401      	add	r1, r0
 800ace0:	1858      	adds	r0, r3, r1
 800ace2:	4282      	cmp	r2, r0
 800ace4:	6019      	str	r1, [r3, #0]
 800ace6:	d1dd      	bne.n	800aca4 <_free_r+0x24>
 800ace8:	6810      	ldr	r0, [r2, #0]
 800acea:	6852      	ldr	r2, [r2, #4]
 800acec:	605a      	str	r2, [r3, #4]
 800acee:	4401      	add	r1, r0
 800acf0:	6019      	str	r1, [r3, #0]
 800acf2:	e7d7      	b.n	800aca4 <_free_r+0x24>
 800acf4:	d902      	bls.n	800acfc <_free_r+0x7c>
 800acf6:	230c      	movs	r3, #12
 800acf8:	602b      	str	r3, [r5, #0]
 800acfa:	e7d3      	b.n	800aca4 <_free_r+0x24>
 800acfc:	6820      	ldr	r0, [r4, #0]
 800acfe:	1821      	adds	r1, r4, r0
 800ad00:	428a      	cmp	r2, r1
 800ad02:	bf04      	itt	eq
 800ad04:	6811      	ldreq	r1, [r2, #0]
 800ad06:	6852      	ldreq	r2, [r2, #4]
 800ad08:	6062      	str	r2, [r4, #4]
 800ad0a:	bf04      	itt	eq
 800ad0c:	1809      	addeq	r1, r1, r0
 800ad0e:	6021      	streq	r1, [r4, #0]
 800ad10:	605c      	str	r4, [r3, #4]
 800ad12:	e7c7      	b.n	800aca4 <_free_r+0x24>
 800ad14:	bd38      	pop	{r3, r4, r5, pc}
 800ad16:	bf00      	nop
 800ad18:	200003d4 	.word	0x200003d4

0800ad1c <_malloc_r>:
 800ad1c:	b570      	push	{r4, r5, r6, lr}
 800ad1e:	1ccd      	adds	r5, r1, #3
 800ad20:	f025 0503 	bic.w	r5, r5, #3
 800ad24:	3508      	adds	r5, #8
 800ad26:	2d0c      	cmp	r5, #12
 800ad28:	bf38      	it	cc
 800ad2a:	250c      	movcc	r5, #12
 800ad2c:	2d00      	cmp	r5, #0
 800ad2e:	4606      	mov	r6, r0
 800ad30:	db01      	blt.n	800ad36 <_malloc_r+0x1a>
 800ad32:	42a9      	cmp	r1, r5
 800ad34:	d903      	bls.n	800ad3e <_malloc_r+0x22>
 800ad36:	230c      	movs	r3, #12
 800ad38:	6033      	str	r3, [r6, #0]
 800ad3a:	2000      	movs	r0, #0
 800ad3c:	bd70      	pop	{r4, r5, r6, pc}
 800ad3e:	f001 fb85 	bl	800c44c <__malloc_lock>
 800ad42:	4a21      	ldr	r2, [pc, #132]	; (800adc8 <_malloc_r+0xac>)
 800ad44:	6814      	ldr	r4, [r2, #0]
 800ad46:	4621      	mov	r1, r4
 800ad48:	b991      	cbnz	r1, 800ad70 <_malloc_r+0x54>
 800ad4a:	4c20      	ldr	r4, [pc, #128]	; (800adcc <_malloc_r+0xb0>)
 800ad4c:	6823      	ldr	r3, [r4, #0]
 800ad4e:	b91b      	cbnz	r3, 800ad58 <_malloc_r+0x3c>
 800ad50:	4630      	mov	r0, r6
 800ad52:	f000 fc99 	bl	800b688 <_sbrk_r>
 800ad56:	6020      	str	r0, [r4, #0]
 800ad58:	4629      	mov	r1, r5
 800ad5a:	4630      	mov	r0, r6
 800ad5c:	f000 fc94 	bl	800b688 <_sbrk_r>
 800ad60:	1c43      	adds	r3, r0, #1
 800ad62:	d124      	bne.n	800adae <_malloc_r+0x92>
 800ad64:	230c      	movs	r3, #12
 800ad66:	6033      	str	r3, [r6, #0]
 800ad68:	4630      	mov	r0, r6
 800ad6a:	f001 fb70 	bl	800c44e <__malloc_unlock>
 800ad6e:	e7e4      	b.n	800ad3a <_malloc_r+0x1e>
 800ad70:	680b      	ldr	r3, [r1, #0]
 800ad72:	1b5b      	subs	r3, r3, r5
 800ad74:	d418      	bmi.n	800ada8 <_malloc_r+0x8c>
 800ad76:	2b0b      	cmp	r3, #11
 800ad78:	d90f      	bls.n	800ad9a <_malloc_r+0x7e>
 800ad7a:	600b      	str	r3, [r1, #0]
 800ad7c:	50cd      	str	r5, [r1, r3]
 800ad7e:	18cc      	adds	r4, r1, r3
 800ad80:	4630      	mov	r0, r6
 800ad82:	f001 fb64 	bl	800c44e <__malloc_unlock>
 800ad86:	f104 000b 	add.w	r0, r4, #11
 800ad8a:	1d23      	adds	r3, r4, #4
 800ad8c:	f020 0007 	bic.w	r0, r0, #7
 800ad90:	1ac3      	subs	r3, r0, r3
 800ad92:	d0d3      	beq.n	800ad3c <_malloc_r+0x20>
 800ad94:	425a      	negs	r2, r3
 800ad96:	50e2      	str	r2, [r4, r3]
 800ad98:	e7d0      	b.n	800ad3c <_malloc_r+0x20>
 800ad9a:	428c      	cmp	r4, r1
 800ad9c:	684b      	ldr	r3, [r1, #4]
 800ad9e:	bf16      	itet	ne
 800ada0:	6063      	strne	r3, [r4, #4]
 800ada2:	6013      	streq	r3, [r2, #0]
 800ada4:	460c      	movne	r4, r1
 800ada6:	e7eb      	b.n	800ad80 <_malloc_r+0x64>
 800ada8:	460c      	mov	r4, r1
 800adaa:	6849      	ldr	r1, [r1, #4]
 800adac:	e7cc      	b.n	800ad48 <_malloc_r+0x2c>
 800adae:	1cc4      	adds	r4, r0, #3
 800adb0:	f024 0403 	bic.w	r4, r4, #3
 800adb4:	42a0      	cmp	r0, r4
 800adb6:	d005      	beq.n	800adc4 <_malloc_r+0xa8>
 800adb8:	1a21      	subs	r1, r4, r0
 800adba:	4630      	mov	r0, r6
 800adbc:	f000 fc64 	bl	800b688 <_sbrk_r>
 800adc0:	3001      	adds	r0, #1
 800adc2:	d0cf      	beq.n	800ad64 <_malloc_r+0x48>
 800adc4:	6025      	str	r5, [r4, #0]
 800adc6:	e7db      	b.n	800ad80 <_malloc_r+0x64>
 800adc8:	200003d4 	.word	0x200003d4
 800adcc:	200003d8 	.word	0x200003d8

0800add0 <__cvt>:
 800add0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800add4:	ec55 4b10 	vmov	r4, r5, d0
 800add8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800adda:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800adde:	2d00      	cmp	r5, #0
 800ade0:	460e      	mov	r6, r1
 800ade2:	4691      	mov	r9, r2
 800ade4:	4619      	mov	r1, r3
 800ade6:	bfb8      	it	lt
 800ade8:	4622      	movlt	r2, r4
 800adea:	462b      	mov	r3, r5
 800adec:	f027 0720 	bic.w	r7, r7, #32
 800adf0:	bfbb      	ittet	lt
 800adf2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800adf6:	461d      	movlt	r5, r3
 800adf8:	2300      	movge	r3, #0
 800adfa:	232d      	movlt	r3, #45	; 0x2d
 800adfc:	bfb8      	it	lt
 800adfe:	4614      	movlt	r4, r2
 800ae00:	2f46      	cmp	r7, #70	; 0x46
 800ae02:	700b      	strb	r3, [r1, #0]
 800ae04:	d004      	beq.n	800ae10 <__cvt+0x40>
 800ae06:	2f45      	cmp	r7, #69	; 0x45
 800ae08:	d100      	bne.n	800ae0c <__cvt+0x3c>
 800ae0a:	3601      	adds	r6, #1
 800ae0c:	2102      	movs	r1, #2
 800ae0e:	e000      	b.n	800ae12 <__cvt+0x42>
 800ae10:	2103      	movs	r1, #3
 800ae12:	ab03      	add	r3, sp, #12
 800ae14:	9301      	str	r3, [sp, #4]
 800ae16:	ab02      	add	r3, sp, #8
 800ae18:	9300      	str	r3, [sp, #0]
 800ae1a:	4632      	mov	r2, r6
 800ae1c:	4653      	mov	r3, sl
 800ae1e:	ec45 4b10 	vmov	d0, r4, r5
 800ae22:	f000 fd4d 	bl	800b8c0 <_dtoa_r>
 800ae26:	2f47      	cmp	r7, #71	; 0x47
 800ae28:	4680      	mov	r8, r0
 800ae2a:	d102      	bne.n	800ae32 <__cvt+0x62>
 800ae2c:	f019 0f01 	tst.w	r9, #1
 800ae30:	d026      	beq.n	800ae80 <__cvt+0xb0>
 800ae32:	2f46      	cmp	r7, #70	; 0x46
 800ae34:	eb08 0906 	add.w	r9, r8, r6
 800ae38:	d111      	bne.n	800ae5e <__cvt+0x8e>
 800ae3a:	f898 3000 	ldrb.w	r3, [r8]
 800ae3e:	2b30      	cmp	r3, #48	; 0x30
 800ae40:	d10a      	bne.n	800ae58 <__cvt+0x88>
 800ae42:	2200      	movs	r2, #0
 800ae44:	2300      	movs	r3, #0
 800ae46:	4620      	mov	r0, r4
 800ae48:	4629      	mov	r1, r5
 800ae4a:	f7f5 fe5d 	bl	8000b08 <__aeabi_dcmpeq>
 800ae4e:	b918      	cbnz	r0, 800ae58 <__cvt+0x88>
 800ae50:	f1c6 0601 	rsb	r6, r6, #1
 800ae54:	f8ca 6000 	str.w	r6, [sl]
 800ae58:	f8da 3000 	ldr.w	r3, [sl]
 800ae5c:	4499      	add	r9, r3
 800ae5e:	2200      	movs	r2, #0
 800ae60:	2300      	movs	r3, #0
 800ae62:	4620      	mov	r0, r4
 800ae64:	4629      	mov	r1, r5
 800ae66:	f7f5 fe4f 	bl	8000b08 <__aeabi_dcmpeq>
 800ae6a:	b938      	cbnz	r0, 800ae7c <__cvt+0xac>
 800ae6c:	2230      	movs	r2, #48	; 0x30
 800ae6e:	9b03      	ldr	r3, [sp, #12]
 800ae70:	454b      	cmp	r3, r9
 800ae72:	d205      	bcs.n	800ae80 <__cvt+0xb0>
 800ae74:	1c59      	adds	r1, r3, #1
 800ae76:	9103      	str	r1, [sp, #12]
 800ae78:	701a      	strb	r2, [r3, #0]
 800ae7a:	e7f8      	b.n	800ae6e <__cvt+0x9e>
 800ae7c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ae80:	9b03      	ldr	r3, [sp, #12]
 800ae82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae84:	eba3 0308 	sub.w	r3, r3, r8
 800ae88:	4640      	mov	r0, r8
 800ae8a:	6013      	str	r3, [r2, #0]
 800ae8c:	b004      	add	sp, #16
 800ae8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ae92 <__exponent>:
 800ae92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae94:	2900      	cmp	r1, #0
 800ae96:	4604      	mov	r4, r0
 800ae98:	bfba      	itte	lt
 800ae9a:	4249      	neglt	r1, r1
 800ae9c:	232d      	movlt	r3, #45	; 0x2d
 800ae9e:	232b      	movge	r3, #43	; 0x2b
 800aea0:	2909      	cmp	r1, #9
 800aea2:	f804 2b02 	strb.w	r2, [r4], #2
 800aea6:	7043      	strb	r3, [r0, #1]
 800aea8:	dd20      	ble.n	800aeec <__exponent+0x5a>
 800aeaa:	f10d 0307 	add.w	r3, sp, #7
 800aeae:	461f      	mov	r7, r3
 800aeb0:	260a      	movs	r6, #10
 800aeb2:	fb91 f5f6 	sdiv	r5, r1, r6
 800aeb6:	fb06 1115 	mls	r1, r6, r5, r1
 800aeba:	3130      	adds	r1, #48	; 0x30
 800aebc:	2d09      	cmp	r5, #9
 800aebe:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aec2:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800aec6:	4629      	mov	r1, r5
 800aec8:	dc09      	bgt.n	800aede <__exponent+0x4c>
 800aeca:	3130      	adds	r1, #48	; 0x30
 800aecc:	3b02      	subs	r3, #2
 800aece:	f802 1c01 	strb.w	r1, [r2, #-1]
 800aed2:	42bb      	cmp	r3, r7
 800aed4:	4622      	mov	r2, r4
 800aed6:	d304      	bcc.n	800aee2 <__exponent+0x50>
 800aed8:	1a10      	subs	r0, r2, r0
 800aeda:	b003      	add	sp, #12
 800aedc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aede:	4613      	mov	r3, r2
 800aee0:	e7e7      	b.n	800aeb2 <__exponent+0x20>
 800aee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aee6:	f804 2b01 	strb.w	r2, [r4], #1
 800aeea:	e7f2      	b.n	800aed2 <__exponent+0x40>
 800aeec:	2330      	movs	r3, #48	; 0x30
 800aeee:	4419      	add	r1, r3
 800aef0:	7083      	strb	r3, [r0, #2]
 800aef2:	1d02      	adds	r2, r0, #4
 800aef4:	70c1      	strb	r1, [r0, #3]
 800aef6:	e7ef      	b.n	800aed8 <__exponent+0x46>

0800aef8 <_printf_float>:
 800aef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aefc:	b08d      	sub	sp, #52	; 0x34
 800aefe:	460c      	mov	r4, r1
 800af00:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800af04:	4616      	mov	r6, r2
 800af06:	461f      	mov	r7, r3
 800af08:	4605      	mov	r5, r0
 800af0a:	f001 fa91 	bl	800c430 <_localeconv_r>
 800af0e:	6803      	ldr	r3, [r0, #0]
 800af10:	9304      	str	r3, [sp, #16]
 800af12:	4618      	mov	r0, r3
 800af14:	f7f5 f9cc 	bl	80002b0 <strlen>
 800af18:	2300      	movs	r3, #0
 800af1a:	930a      	str	r3, [sp, #40]	; 0x28
 800af1c:	f8d8 3000 	ldr.w	r3, [r8]
 800af20:	9005      	str	r0, [sp, #20]
 800af22:	3307      	adds	r3, #7
 800af24:	f023 0307 	bic.w	r3, r3, #7
 800af28:	f103 0208 	add.w	r2, r3, #8
 800af2c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800af30:	f8d4 b000 	ldr.w	fp, [r4]
 800af34:	f8c8 2000 	str.w	r2, [r8]
 800af38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800af40:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800af44:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af48:	9307      	str	r3, [sp, #28]
 800af4a:	f8cd 8018 	str.w	r8, [sp, #24]
 800af4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af52:	4ba7      	ldr	r3, [pc, #668]	; (800b1f0 <_printf_float+0x2f8>)
 800af54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af58:	f7f5 fe08 	bl	8000b6c <__aeabi_dcmpun>
 800af5c:	bb70      	cbnz	r0, 800afbc <_printf_float+0xc4>
 800af5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af62:	4ba3      	ldr	r3, [pc, #652]	; (800b1f0 <_printf_float+0x2f8>)
 800af64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af68:	f7f5 fde2 	bl	8000b30 <__aeabi_dcmple>
 800af6c:	bb30      	cbnz	r0, 800afbc <_printf_float+0xc4>
 800af6e:	2200      	movs	r2, #0
 800af70:	2300      	movs	r3, #0
 800af72:	4640      	mov	r0, r8
 800af74:	4649      	mov	r1, r9
 800af76:	f7f5 fdd1 	bl	8000b1c <__aeabi_dcmplt>
 800af7a:	b110      	cbz	r0, 800af82 <_printf_float+0x8a>
 800af7c:	232d      	movs	r3, #45	; 0x2d
 800af7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af82:	4a9c      	ldr	r2, [pc, #624]	; (800b1f4 <_printf_float+0x2fc>)
 800af84:	4b9c      	ldr	r3, [pc, #624]	; (800b1f8 <_printf_float+0x300>)
 800af86:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800af8a:	bf8c      	ite	hi
 800af8c:	4690      	movhi	r8, r2
 800af8e:	4698      	movls	r8, r3
 800af90:	2303      	movs	r3, #3
 800af92:	f02b 0204 	bic.w	r2, fp, #4
 800af96:	6123      	str	r3, [r4, #16]
 800af98:	6022      	str	r2, [r4, #0]
 800af9a:	f04f 0900 	mov.w	r9, #0
 800af9e:	9700      	str	r7, [sp, #0]
 800afa0:	4633      	mov	r3, r6
 800afa2:	aa0b      	add	r2, sp, #44	; 0x2c
 800afa4:	4621      	mov	r1, r4
 800afa6:	4628      	mov	r0, r5
 800afa8:	f000 f9e6 	bl	800b378 <_printf_common>
 800afac:	3001      	adds	r0, #1
 800afae:	f040 808d 	bne.w	800b0cc <_printf_float+0x1d4>
 800afb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afb6:	b00d      	add	sp, #52	; 0x34
 800afb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afbc:	4642      	mov	r2, r8
 800afbe:	464b      	mov	r3, r9
 800afc0:	4640      	mov	r0, r8
 800afc2:	4649      	mov	r1, r9
 800afc4:	f7f5 fdd2 	bl	8000b6c <__aeabi_dcmpun>
 800afc8:	b110      	cbz	r0, 800afd0 <_printf_float+0xd8>
 800afca:	4a8c      	ldr	r2, [pc, #560]	; (800b1fc <_printf_float+0x304>)
 800afcc:	4b8c      	ldr	r3, [pc, #560]	; (800b200 <_printf_float+0x308>)
 800afce:	e7da      	b.n	800af86 <_printf_float+0x8e>
 800afd0:	6861      	ldr	r1, [r4, #4]
 800afd2:	1c4b      	adds	r3, r1, #1
 800afd4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800afd8:	a80a      	add	r0, sp, #40	; 0x28
 800afda:	d13e      	bne.n	800b05a <_printf_float+0x162>
 800afdc:	2306      	movs	r3, #6
 800afde:	6063      	str	r3, [r4, #4]
 800afe0:	2300      	movs	r3, #0
 800afe2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800afe6:	ab09      	add	r3, sp, #36	; 0x24
 800afe8:	9300      	str	r3, [sp, #0]
 800afea:	ec49 8b10 	vmov	d0, r8, r9
 800afee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aff2:	6022      	str	r2, [r4, #0]
 800aff4:	f8cd a004 	str.w	sl, [sp, #4]
 800aff8:	6861      	ldr	r1, [r4, #4]
 800affa:	4628      	mov	r0, r5
 800affc:	f7ff fee8 	bl	800add0 <__cvt>
 800b000:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800b004:	2b47      	cmp	r3, #71	; 0x47
 800b006:	4680      	mov	r8, r0
 800b008:	d109      	bne.n	800b01e <_printf_float+0x126>
 800b00a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b00c:	1cd8      	adds	r0, r3, #3
 800b00e:	db02      	blt.n	800b016 <_printf_float+0x11e>
 800b010:	6862      	ldr	r2, [r4, #4]
 800b012:	4293      	cmp	r3, r2
 800b014:	dd47      	ble.n	800b0a6 <_printf_float+0x1ae>
 800b016:	f1aa 0a02 	sub.w	sl, sl, #2
 800b01a:	fa5f fa8a 	uxtb.w	sl, sl
 800b01e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b022:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b024:	d824      	bhi.n	800b070 <_printf_float+0x178>
 800b026:	3901      	subs	r1, #1
 800b028:	4652      	mov	r2, sl
 800b02a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b02e:	9109      	str	r1, [sp, #36]	; 0x24
 800b030:	f7ff ff2f 	bl	800ae92 <__exponent>
 800b034:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b036:	1813      	adds	r3, r2, r0
 800b038:	2a01      	cmp	r2, #1
 800b03a:	4681      	mov	r9, r0
 800b03c:	6123      	str	r3, [r4, #16]
 800b03e:	dc02      	bgt.n	800b046 <_printf_float+0x14e>
 800b040:	6822      	ldr	r2, [r4, #0]
 800b042:	07d1      	lsls	r1, r2, #31
 800b044:	d501      	bpl.n	800b04a <_printf_float+0x152>
 800b046:	3301      	adds	r3, #1
 800b048:	6123      	str	r3, [r4, #16]
 800b04a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d0a5      	beq.n	800af9e <_printf_float+0xa6>
 800b052:	232d      	movs	r3, #45	; 0x2d
 800b054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b058:	e7a1      	b.n	800af9e <_printf_float+0xa6>
 800b05a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800b05e:	f000 8177 	beq.w	800b350 <_printf_float+0x458>
 800b062:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b066:	d1bb      	bne.n	800afe0 <_printf_float+0xe8>
 800b068:	2900      	cmp	r1, #0
 800b06a:	d1b9      	bne.n	800afe0 <_printf_float+0xe8>
 800b06c:	2301      	movs	r3, #1
 800b06e:	e7b6      	b.n	800afde <_printf_float+0xe6>
 800b070:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800b074:	d119      	bne.n	800b0aa <_printf_float+0x1b2>
 800b076:	2900      	cmp	r1, #0
 800b078:	6863      	ldr	r3, [r4, #4]
 800b07a:	dd0c      	ble.n	800b096 <_printf_float+0x19e>
 800b07c:	6121      	str	r1, [r4, #16]
 800b07e:	b913      	cbnz	r3, 800b086 <_printf_float+0x18e>
 800b080:	6822      	ldr	r2, [r4, #0]
 800b082:	07d2      	lsls	r2, r2, #31
 800b084:	d502      	bpl.n	800b08c <_printf_float+0x194>
 800b086:	3301      	adds	r3, #1
 800b088:	440b      	add	r3, r1
 800b08a:	6123      	str	r3, [r4, #16]
 800b08c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b08e:	65a3      	str	r3, [r4, #88]	; 0x58
 800b090:	f04f 0900 	mov.w	r9, #0
 800b094:	e7d9      	b.n	800b04a <_printf_float+0x152>
 800b096:	b913      	cbnz	r3, 800b09e <_printf_float+0x1a6>
 800b098:	6822      	ldr	r2, [r4, #0]
 800b09a:	07d0      	lsls	r0, r2, #31
 800b09c:	d501      	bpl.n	800b0a2 <_printf_float+0x1aa>
 800b09e:	3302      	adds	r3, #2
 800b0a0:	e7f3      	b.n	800b08a <_printf_float+0x192>
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e7f1      	b.n	800b08a <_printf_float+0x192>
 800b0a6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800b0aa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	db05      	blt.n	800b0be <_printf_float+0x1c6>
 800b0b2:	6822      	ldr	r2, [r4, #0]
 800b0b4:	6123      	str	r3, [r4, #16]
 800b0b6:	07d1      	lsls	r1, r2, #31
 800b0b8:	d5e8      	bpl.n	800b08c <_printf_float+0x194>
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	e7e5      	b.n	800b08a <_printf_float+0x192>
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	bfd4      	ite	le
 800b0c2:	f1c3 0302 	rsble	r3, r3, #2
 800b0c6:	2301      	movgt	r3, #1
 800b0c8:	4413      	add	r3, r2
 800b0ca:	e7de      	b.n	800b08a <_printf_float+0x192>
 800b0cc:	6823      	ldr	r3, [r4, #0]
 800b0ce:	055a      	lsls	r2, r3, #21
 800b0d0:	d407      	bmi.n	800b0e2 <_printf_float+0x1ea>
 800b0d2:	6923      	ldr	r3, [r4, #16]
 800b0d4:	4642      	mov	r2, r8
 800b0d6:	4631      	mov	r1, r6
 800b0d8:	4628      	mov	r0, r5
 800b0da:	47b8      	blx	r7
 800b0dc:	3001      	adds	r0, #1
 800b0de:	d12b      	bne.n	800b138 <_printf_float+0x240>
 800b0e0:	e767      	b.n	800afb2 <_printf_float+0xba>
 800b0e2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b0e6:	f240 80dc 	bls.w	800b2a2 <_printf_float+0x3aa>
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b0f2:	f7f5 fd09 	bl	8000b08 <__aeabi_dcmpeq>
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	d033      	beq.n	800b162 <_printf_float+0x26a>
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	4a41      	ldr	r2, [pc, #260]	; (800b204 <_printf_float+0x30c>)
 800b0fe:	4631      	mov	r1, r6
 800b100:	4628      	mov	r0, r5
 800b102:	47b8      	blx	r7
 800b104:	3001      	adds	r0, #1
 800b106:	f43f af54 	beq.w	800afb2 <_printf_float+0xba>
 800b10a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b10e:	429a      	cmp	r2, r3
 800b110:	db02      	blt.n	800b118 <_printf_float+0x220>
 800b112:	6823      	ldr	r3, [r4, #0]
 800b114:	07d8      	lsls	r0, r3, #31
 800b116:	d50f      	bpl.n	800b138 <_printf_float+0x240>
 800b118:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b11c:	4631      	mov	r1, r6
 800b11e:	4628      	mov	r0, r5
 800b120:	47b8      	blx	r7
 800b122:	3001      	adds	r0, #1
 800b124:	f43f af45 	beq.w	800afb2 <_printf_float+0xba>
 800b128:	f04f 0800 	mov.w	r8, #0
 800b12c:	f104 091a 	add.w	r9, r4, #26
 800b130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b132:	3b01      	subs	r3, #1
 800b134:	4543      	cmp	r3, r8
 800b136:	dc09      	bgt.n	800b14c <_printf_float+0x254>
 800b138:	6823      	ldr	r3, [r4, #0]
 800b13a:	079b      	lsls	r3, r3, #30
 800b13c:	f100 8103 	bmi.w	800b346 <_printf_float+0x44e>
 800b140:	68e0      	ldr	r0, [r4, #12]
 800b142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b144:	4298      	cmp	r0, r3
 800b146:	bfb8      	it	lt
 800b148:	4618      	movlt	r0, r3
 800b14a:	e734      	b.n	800afb6 <_printf_float+0xbe>
 800b14c:	2301      	movs	r3, #1
 800b14e:	464a      	mov	r2, r9
 800b150:	4631      	mov	r1, r6
 800b152:	4628      	mov	r0, r5
 800b154:	47b8      	blx	r7
 800b156:	3001      	adds	r0, #1
 800b158:	f43f af2b 	beq.w	800afb2 <_printf_float+0xba>
 800b15c:	f108 0801 	add.w	r8, r8, #1
 800b160:	e7e6      	b.n	800b130 <_printf_float+0x238>
 800b162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b164:	2b00      	cmp	r3, #0
 800b166:	dc2b      	bgt.n	800b1c0 <_printf_float+0x2c8>
 800b168:	2301      	movs	r3, #1
 800b16a:	4a26      	ldr	r2, [pc, #152]	; (800b204 <_printf_float+0x30c>)
 800b16c:	4631      	mov	r1, r6
 800b16e:	4628      	mov	r0, r5
 800b170:	47b8      	blx	r7
 800b172:	3001      	adds	r0, #1
 800b174:	f43f af1d 	beq.w	800afb2 <_printf_float+0xba>
 800b178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b17a:	b923      	cbnz	r3, 800b186 <_printf_float+0x28e>
 800b17c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b17e:	b913      	cbnz	r3, 800b186 <_printf_float+0x28e>
 800b180:	6823      	ldr	r3, [r4, #0]
 800b182:	07d9      	lsls	r1, r3, #31
 800b184:	d5d8      	bpl.n	800b138 <_printf_float+0x240>
 800b186:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b18a:	4631      	mov	r1, r6
 800b18c:	4628      	mov	r0, r5
 800b18e:	47b8      	blx	r7
 800b190:	3001      	adds	r0, #1
 800b192:	f43f af0e 	beq.w	800afb2 <_printf_float+0xba>
 800b196:	f04f 0900 	mov.w	r9, #0
 800b19a:	f104 0a1a 	add.w	sl, r4, #26
 800b19e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1a0:	425b      	negs	r3, r3
 800b1a2:	454b      	cmp	r3, r9
 800b1a4:	dc01      	bgt.n	800b1aa <_printf_float+0x2b2>
 800b1a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1a8:	e794      	b.n	800b0d4 <_printf_float+0x1dc>
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	4652      	mov	r2, sl
 800b1ae:	4631      	mov	r1, r6
 800b1b0:	4628      	mov	r0, r5
 800b1b2:	47b8      	blx	r7
 800b1b4:	3001      	adds	r0, #1
 800b1b6:	f43f aefc 	beq.w	800afb2 <_printf_float+0xba>
 800b1ba:	f109 0901 	add.w	r9, r9, #1
 800b1be:	e7ee      	b.n	800b19e <_printf_float+0x2a6>
 800b1c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	bfa8      	it	ge
 800b1c8:	461a      	movge	r2, r3
 800b1ca:	2a00      	cmp	r2, #0
 800b1cc:	4691      	mov	r9, r2
 800b1ce:	dd07      	ble.n	800b1e0 <_printf_float+0x2e8>
 800b1d0:	4613      	mov	r3, r2
 800b1d2:	4631      	mov	r1, r6
 800b1d4:	4642      	mov	r2, r8
 800b1d6:	4628      	mov	r0, r5
 800b1d8:	47b8      	blx	r7
 800b1da:	3001      	adds	r0, #1
 800b1dc:	f43f aee9 	beq.w	800afb2 <_printf_float+0xba>
 800b1e0:	f104 031a 	add.w	r3, r4, #26
 800b1e4:	f04f 0b00 	mov.w	fp, #0
 800b1e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1ec:	9306      	str	r3, [sp, #24]
 800b1ee:	e015      	b.n	800b21c <_printf_float+0x324>
 800b1f0:	7fefffff 	.word	0x7fefffff
 800b1f4:	0800d19c 	.word	0x0800d19c
 800b1f8:	0800d198 	.word	0x0800d198
 800b1fc:	0800d1a4 	.word	0x0800d1a4
 800b200:	0800d1a0 	.word	0x0800d1a0
 800b204:	0800d1a8 	.word	0x0800d1a8
 800b208:	2301      	movs	r3, #1
 800b20a:	9a06      	ldr	r2, [sp, #24]
 800b20c:	4631      	mov	r1, r6
 800b20e:	4628      	mov	r0, r5
 800b210:	47b8      	blx	r7
 800b212:	3001      	adds	r0, #1
 800b214:	f43f aecd 	beq.w	800afb2 <_printf_float+0xba>
 800b218:	f10b 0b01 	add.w	fp, fp, #1
 800b21c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b220:	ebaa 0309 	sub.w	r3, sl, r9
 800b224:	455b      	cmp	r3, fp
 800b226:	dcef      	bgt.n	800b208 <_printf_float+0x310>
 800b228:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b22c:	429a      	cmp	r2, r3
 800b22e:	44d0      	add	r8, sl
 800b230:	db15      	blt.n	800b25e <_printf_float+0x366>
 800b232:	6823      	ldr	r3, [r4, #0]
 800b234:	07da      	lsls	r2, r3, #31
 800b236:	d412      	bmi.n	800b25e <_printf_float+0x366>
 800b238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b23a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b23c:	eba3 020a 	sub.w	r2, r3, sl
 800b240:	eba3 0a01 	sub.w	sl, r3, r1
 800b244:	4592      	cmp	sl, r2
 800b246:	bfa8      	it	ge
 800b248:	4692      	movge	sl, r2
 800b24a:	f1ba 0f00 	cmp.w	sl, #0
 800b24e:	dc0e      	bgt.n	800b26e <_printf_float+0x376>
 800b250:	f04f 0800 	mov.w	r8, #0
 800b254:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b258:	f104 091a 	add.w	r9, r4, #26
 800b25c:	e019      	b.n	800b292 <_printf_float+0x39a>
 800b25e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b262:	4631      	mov	r1, r6
 800b264:	4628      	mov	r0, r5
 800b266:	47b8      	blx	r7
 800b268:	3001      	adds	r0, #1
 800b26a:	d1e5      	bne.n	800b238 <_printf_float+0x340>
 800b26c:	e6a1      	b.n	800afb2 <_printf_float+0xba>
 800b26e:	4653      	mov	r3, sl
 800b270:	4642      	mov	r2, r8
 800b272:	4631      	mov	r1, r6
 800b274:	4628      	mov	r0, r5
 800b276:	47b8      	blx	r7
 800b278:	3001      	adds	r0, #1
 800b27a:	d1e9      	bne.n	800b250 <_printf_float+0x358>
 800b27c:	e699      	b.n	800afb2 <_printf_float+0xba>
 800b27e:	2301      	movs	r3, #1
 800b280:	464a      	mov	r2, r9
 800b282:	4631      	mov	r1, r6
 800b284:	4628      	mov	r0, r5
 800b286:	47b8      	blx	r7
 800b288:	3001      	adds	r0, #1
 800b28a:	f43f ae92 	beq.w	800afb2 <_printf_float+0xba>
 800b28e:	f108 0801 	add.w	r8, r8, #1
 800b292:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b296:	1a9b      	subs	r3, r3, r2
 800b298:	eba3 030a 	sub.w	r3, r3, sl
 800b29c:	4543      	cmp	r3, r8
 800b29e:	dcee      	bgt.n	800b27e <_printf_float+0x386>
 800b2a0:	e74a      	b.n	800b138 <_printf_float+0x240>
 800b2a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2a4:	2a01      	cmp	r2, #1
 800b2a6:	dc01      	bgt.n	800b2ac <_printf_float+0x3b4>
 800b2a8:	07db      	lsls	r3, r3, #31
 800b2aa:	d53a      	bpl.n	800b322 <_printf_float+0x42a>
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	4642      	mov	r2, r8
 800b2b0:	4631      	mov	r1, r6
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	47b8      	blx	r7
 800b2b6:	3001      	adds	r0, #1
 800b2b8:	f43f ae7b 	beq.w	800afb2 <_printf_float+0xba>
 800b2bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2c0:	4631      	mov	r1, r6
 800b2c2:	4628      	mov	r0, r5
 800b2c4:	47b8      	blx	r7
 800b2c6:	3001      	adds	r0, #1
 800b2c8:	f108 0801 	add.w	r8, r8, #1
 800b2cc:	f43f ae71 	beq.w	800afb2 <_printf_float+0xba>
 800b2d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800b2d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b2dc:	2300      	movs	r3, #0
 800b2de:	f7f5 fc13 	bl	8000b08 <__aeabi_dcmpeq>
 800b2e2:	b9c8      	cbnz	r0, 800b318 <_printf_float+0x420>
 800b2e4:	4653      	mov	r3, sl
 800b2e6:	4642      	mov	r2, r8
 800b2e8:	4631      	mov	r1, r6
 800b2ea:	4628      	mov	r0, r5
 800b2ec:	47b8      	blx	r7
 800b2ee:	3001      	adds	r0, #1
 800b2f0:	d10e      	bne.n	800b310 <_printf_float+0x418>
 800b2f2:	e65e      	b.n	800afb2 <_printf_float+0xba>
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	4652      	mov	r2, sl
 800b2f8:	4631      	mov	r1, r6
 800b2fa:	4628      	mov	r0, r5
 800b2fc:	47b8      	blx	r7
 800b2fe:	3001      	adds	r0, #1
 800b300:	f43f ae57 	beq.w	800afb2 <_printf_float+0xba>
 800b304:	f108 0801 	add.w	r8, r8, #1
 800b308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b30a:	3b01      	subs	r3, #1
 800b30c:	4543      	cmp	r3, r8
 800b30e:	dcf1      	bgt.n	800b2f4 <_printf_float+0x3fc>
 800b310:	464b      	mov	r3, r9
 800b312:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b316:	e6de      	b.n	800b0d6 <_printf_float+0x1de>
 800b318:	f04f 0800 	mov.w	r8, #0
 800b31c:	f104 0a1a 	add.w	sl, r4, #26
 800b320:	e7f2      	b.n	800b308 <_printf_float+0x410>
 800b322:	2301      	movs	r3, #1
 800b324:	e7df      	b.n	800b2e6 <_printf_float+0x3ee>
 800b326:	2301      	movs	r3, #1
 800b328:	464a      	mov	r2, r9
 800b32a:	4631      	mov	r1, r6
 800b32c:	4628      	mov	r0, r5
 800b32e:	47b8      	blx	r7
 800b330:	3001      	adds	r0, #1
 800b332:	f43f ae3e 	beq.w	800afb2 <_printf_float+0xba>
 800b336:	f108 0801 	add.w	r8, r8, #1
 800b33a:	68e3      	ldr	r3, [r4, #12]
 800b33c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b33e:	1a9b      	subs	r3, r3, r2
 800b340:	4543      	cmp	r3, r8
 800b342:	dcf0      	bgt.n	800b326 <_printf_float+0x42e>
 800b344:	e6fc      	b.n	800b140 <_printf_float+0x248>
 800b346:	f04f 0800 	mov.w	r8, #0
 800b34a:	f104 0919 	add.w	r9, r4, #25
 800b34e:	e7f4      	b.n	800b33a <_printf_float+0x442>
 800b350:	2900      	cmp	r1, #0
 800b352:	f43f ae8b 	beq.w	800b06c <_printf_float+0x174>
 800b356:	2300      	movs	r3, #0
 800b358:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b35c:	ab09      	add	r3, sp, #36	; 0x24
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	ec49 8b10 	vmov	d0, r8, r9
 800b364:	6022      	str	r2, [r4, #0]
 800b366:	f8cd a004 	str.w	sl, [sp, #4]
 800b36a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b36e:	4628      	mov	r0, r5
 800b370:	f7ff fd2e 	bl	800add0 <__cvt>
 800b374:	4680      	mov	r8, r0
 800b376:	e648      	b.n	800b00a <_printf_float+0x112>

0800b378 <_printf_common>:
 800b378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b37c:	4691      	mov	r9, r2
 800b37e:	461f      	mov	r7, r3
 800b380:	688a      	ldr	r2, [r1, #8]
 800b382:	690b      	ldr	r3, [r1, #16]
 800b384:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b388:	4293      	cmp	r3, r2
 800b38a:	bfb8      	it	lt
 800b38c:	4613      	movlt	r3, r2
 800b38e:	f8c9 3000 	str.w	r3, [r9]
 800b392:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b396:	4606      	mov	r6, r0
 800b398:	460c      	mov	r4, r1
 800b39a:	b112      	cbz	r2, 800b3a2 <_printf_common+0x2a>
 800b39c:	3301      	adds	r3, #1
 800b39e:	f8c9 3000 	str.w	r3, [r9]
 800b3a2:	6823      	ldr	r3, [r4, #0]
 800b3a4:	0699      	lsls	r1, r3, #26
 800b3a6:	bf42      	ittt	mi
 800b3a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b3ac:	3302      	addmi	r3, #2
 800b3ae:	f8c9 3000 	strmi.w	r3, [r9]
 800b3b2:	6825      	ldr	r5, [r4, #0]
 800b3b4:	f015 0506 	ands.w	r5, r5, #6
 800b3b8:	d107      	bne.n	800b3ca <_printf_common+0x52>
 800b3ba:	f104 0a19 	add.w	sl, r4, #25
 800b3be:	68e3      	ldr	r3, [r4, #12]
 800b3c0:	f8d9 2000 	ldr.w	r2, [r9]
 800b3c4:	1a9b      	subs	r3, r3, r2
 800b3c6:	42ab      	cmp	r3, r5
 800b3c8:	dc28      	bgt.n	800b41c <_printf_common+0xa4>
 800b3ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b3ce:	6822      	ldr	r2, [r4, #0]
 800b3d0:	3300      	adds	r3, #0
 800b3d2:	bf18      	it	ne
 800b3d4:	2301      	movne	r3, #1
 800b3d6:	0692      	lsls	r2, r2, #26
 800b3d8:	d42d      	bmi.n	800b436 <_printf_common+0xbe>
 800b3da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b3de:	4639      	mov	r1, r7
 800b3e0:	4630      	mov	r0, r6
 800b3e2:	47c0      	blx	r8
 800b3e4:	3001      	adds	r0, #1
 800b3e6:	d020      	beq.n	800b42a <_printf_common+0xb2>
 800b3e8:	6823      	ldr	r3, [r4, #0]
 800b3ea:	68e5      	ldr	r5, [r4, #12]
 800b3ec:	f8d9 2000 	ldr.w	r2, [r9]
 800b3f0:	f003 0306 	and.w	r3, r3, #6
 800b3f4:	2b04      	cmp	r3, #4
 800b3f6:	bf08      	it	eq
 800b3f8:	1aad      	subeq	r5, r5, r2
 800b3fa:	68a3      	ldr	r3, [r4, #8]
 800b3fc:	6922      	ldr	r2, [r4, #16]
 800b3fe:	bf0c      	ite	eq
 800b400:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b404:	2500      	movne	r5, #0
 800b406:	4293      	cmp	r3, r2
 800b408:	bfc4      	itt	gt
 800b40a:	1a9b      	subgt	r3, r3, r2
 800b40c:	18ed      	addgt	r5, r5, r3
 800b40e:	f04f 0900 	mov.w	r9, #0
 800b412:	341a      	adds	r4, #26
 800b414:	454d      	cmp	r5, r9
 800b416:	d11a      	bne.n	800b44e <_printf_common+0xd6>
 800b418:	2000      	movs	r0, #0
 800b41a:	e008      	b.n	800b42e <_printf_common+0xb6>
 800b41c:	2301      	movs	r3, #1
 800b41e:	4652      	mov	r2, sl
 800b420:	4639      	mov	r1, r7
 800b422:	4630      	mov	r0, r6
 800b424:	47c0      	blx	r8
 800b426:	3001      	adds	r0, #1
 800b428:	d103      	bne.n	800b432 <_printf_common+0xba>
 800b42a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b42e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b432:	3501      	adds	r5, #1
 800b434:	e7c3      	b.n	800b3be <_printf_common+0x46>
 800b436:	18e1      	adds	r1, r4, r3
 800b438:	1c5a      	adds	r2, r3, #1
 800b43a:	2030      	movs	r0, #48	; 0x30
 800b43c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b440:	4422      	add	r2, r4
 800b442:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b446:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b44a:	3302      	adds	r3, #2
 800b44c:	e7c5      	b.n	800b3da <_printf_common+0x62>
 800b44e:	2301      	movs	r3, #1
 800b450:	4622      	mov	r2, r4
 800b452:	4639      	mov	r1, r7
 800b454:	4630      	mov	r0, r6
 800b456:	47c0      	blx	r8
 800b458:	3001      	adds	r0, #1
 800b45a:	d0e6      	beq.n	800b42a <_printf_common+0xb2>
 800b45c:	f109 0901 	add.w	r9, r9, #1
 800b460:	e7d8      	b.n	800b414 <_printf_common+0x9c>
	...

0800b464 <_printf_i>:
 800b464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b468:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b46c:	460c      	mov	r4, r1
 800b46e:	7e09      	ldrb	r1, [r1, #24]
 800b470:	b085      	sub	sp, #20
 800b472:	296e      	cmp	r1, #110	; 0x6e
 800b474:	4617      	mov	r7, r2
 800b476:	4606      	mov	r6, r0
 800b478:	4698      	mov	r8, r3
 800b47a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b47c:	f000 80b3 	beq.w	800b5e6 <_printf_i+0x182>
 800b480:	d822      	bhi.n	800b4c8 <_printf_i+0x64>
 800b482:	2963      	cmp	r1, #99	; 0x63
 800b484:	d036      	beq.n	800b4f4 <_printf_i+0x90>
 800b486:	d80a      	bhi.n	800b49e <_printf_i+0x3a>
 800b488:	2900      	cmp	r1, #0
 800b48a:	f000 80b9 	beq.w	800b600 <_printf_i+0x19c>
 800b48e:	2958      	cmp	r1, #88	; 0x58
 800b490:	f000 8083 	beq.w	800b59a <_printf_i+0x136>
 800b494:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b498:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b49c:	e032      	b.n	800b504 <_printf_i+0xa0>
 800b49e:	2964      	cmp	r1, #100	; 0x64
 800b4a0:	d001      	beq.n	800b4a6 <_printf_i+0x42>
 800b4a2:	2969      	cmp	r1, #105	; 0x69
 800b4a4:	d1f6      	bne.n	800b494 <_printf_i+0x30>
 800b4a6:	6820      	ldr	r0, [r4, #0]
 800b4a8:	6813      	ldr	r3, [r2, #0]
 800b4aa:	0605      	lsls	r5, r0, #24
 800b4ac:	f103 0104 	add.w	r1, r3, #4
 800b4b0:	d52a      	bpl.n	800b508 <_printf_i+0xa4>
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	6011      	str	r1, [r2, #0]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	da03      	bge.n	800b4c2 <_printf_i+0x5e>
 800b4ba:	222d      	movs	r2, #45	; 0x2d
 800b4bc:	425b      	negs	r3, r3
 800b4be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b4c2:	486f      	ldr	r0, [pc, #444]	; (800b680 <_printf_i+0x21c>)
 800b4c4:	220a      	movs	r2, #10
 800b4c6:	e039      	b.n	800b53c <_printf_i+0xd8>
 800b4c8:	2973      	cmp	r1, #115	; 0x73
 800b4ca:	f000 809d 	beq.w	800b608 <_printf_i+0x1a4>
 800b4ce:	d808      	bhi.n	800b4e2 <_printf_i+0x7e>
 800b4d0:	296f      	cmp	r1, #111	; 0x6f
 800b4d2:	d020      	beq.n	800b516 <_printf_i+0xb2>
 800b4d4:	2970      	cmp	r1, #112	; 0x70
 800b4d6:	d1dd      	bne.n	800b494 <_printf_i+0x30>
 800b4d8:	6823      	ldr	r3, [r4, #0]
 800b4da:	f043 0320 	orr.w	r3, r3, #32
 800b4de:	6023      	str	r3, [r4, #0]
 800b4e0:	e003      	b.n	800b4ea <_printf_i+0x86>
 800b4e2:	2975      	cmp	r1, #117	; 0x75
 800b4e4:	d017      	beq.n	800b516 <_printf_i+0xb2>
 800b4e6:	2978      	cmp	r1, #120	; 0x78
 800b4e8:	d1d4      	bne.n	800b494 <_printf_i+0x30>
 800b4ea:	2378      	movs	r3, #120	; 0x78
 800b4ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b4f0:	4864      	ldr	r0, [pc, #400]	; (800b684 <_printf_i+0x220>)
 800b4f2:	e055      	b.n	800b5a0 <_printf_i+0x13c>
 800b4f4:	6813      	ldr	r3, [r2, #0]
 800b4f6:	1d19      	adds	r1, r3, #4
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	6011      	str	r1, [r2, #0]
 800b4fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b500:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b504:	2301      	movs	r3, #1
 800b506:	e08c      	b.n	800b622 <_printf_i+0x1be>
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	6011      	str	r1, [r2, #0]
 800b50c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b510:	bf18      	it	ne
 800b512:	b21b      	sxthne	r3, r3
 800b514:	e7cf      	b.n	800b4b6 <_printf_i+0x52>
 800b516:	6813      	ldr	r3, [r2, #0]
 800b518:	6825      	ldr	r5, [r4, #0]
 800b51a:	1d18      	adds	r0, r3, #4
 800b51c:	6010      	str	r0, [r2, #0]
 800b51e:	0628      	lsls	r0, r5, #24
 800b520:	d501      	bpl.n	800b526 <_printf_i+0xc2>
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	e002      	b.n	800b52c <_printf_i+0xc8>
 800b526:	0668      	lsls	r0, r5, #25
 800b528:	d5fb      	bpl.n	800b522 <_printf_i+0xbe>
 800b52a:	881b      	ldrh	r3, [r3, #0]
 800b52c:	4854      	ldr	r0, [pc, #336]	; (800b680 <_printf_i+0x21c>)
 800b52e:	296f      	cmp	r1, #111	; 0x6f
 800b530:	bf14      	ite	ne
 800b532:	220a      	movne	r2, #10
 800b534:	2208      	moveq	r2, #8
 800b536:	2100      	movs	r1, #0
 800b538:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b53c:	6865      	ldr	r5, [r4, #4]
 800b53e:	60a5      	str	r5, [r4, #8]
 800b540:	2d00      	cmp	r5, #0
 800b542:	f2c0 8095 	blt.w	800b670 <_printf_i+0x20c>
 800b546:	6821      	ldr	r1, [r4, #0]
 800b548:	f021 0104 	bic.w	r1, r1, #4
 800b54c:	6021      	str	r1, [r4, #0]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d13d      	bne.n	800b5ce <_printf_i+0x16a>
 800b552:	2d00      	cmp	r5, #0
 800b554:	f040 808e 	bne.w	800b674 <_printf_i+0x210>
 800b558:	4665      	mov	r5, ip
 800b55a:	2a08      	cmp	r2, #8
 800b55c:	d10b      	bne.n	800b576 <_printf_i+0x112>
 800b55e:	6823      	ldr	r3, [r4, #0]
 800b560:	07db      	lsls	r3, r3, #31
 800b562:	d508      	bpl.n	800b576 <_printf_i+0x112>
 800b564:	6923      	ldr	r3, [r4, #16]
 800b566:	6862      	ldr	r2, [r4, #4]
 800b568:	429a      	cmp	r2, r3
 800b56a:	bfde      	ittt	le
 800b56c:	2330      	movle	r3, #48	; 0x30
 800b56e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b572:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b576:	ebac 0305 	sub.w	r3, ip, r5
 800b57a:	6123      	str	r3, [r4, #16]
 800b57c:	f8cd 8000 	str.w	r8, [sp]
 800b580:	463b      	mov	r3, r7
 800b582:	aa03      	add	r2, sp, #12
 800b584:	4621      	mov	r1, r4
 800b586:	4630      	mov	r0, r6
 800b588:	f7ff fef6 	bl	800b378 <_printf_common>
 800b58c:	3001      	adds	r0, #1
 800b58e:	d14d      	bne.n	800b62c <_printf_i+0x1c8>
 800b590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b594:	b005      	add	sp, #20
 800b596:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b59a:	4839      	ldr	r0, [pc, #228]	; (800b680 <_printf_i+0x21c>)
 800b59c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b5a0:	6813      	ldr	r3, [r2, #0]
 800b5a2:	6821      	ldr	r1, [r4, #0]
 800b5a4:	1d1d      	adds	r5, r3, #4
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	6015      	str	r5, [r2, #0]
 800b5aa:	060a      	lsls	r2, r1, #24
 800b5ac:	d50b      	bpl.n	800b5c6 <_printf_i+0x162>
 800b5ae:	07ca      	lsls	r2, r1, #31
 800b5b0:	bf44      	itt	mi
 800b5b2:	f041 0120 	orrmi.w	r1, r1, #32
 800b5b6:	6021      	strmi	r1, [r4, #0]
 800b5b8:	b91b      	cbnz	r3, 800b5c2 <_printf_i+0x15e>
 800b5ba:	6822      	ldr	r2, [r4, #0]
 800b5bc:	f022 0220 	bic.w	r2, r2, #32
 800b5c0:	6022      	str	r2, [r4, #0]
 800b5c2:	2210      	movs	r2, #16
 800b5c4:	e7b7      	b.n	800b536 <_printf_i+0xd2>
 800b5c6:	064d      	lsls	r5, r1, #25
 800b5c8:	bf48      	it	mi
 800b5ca:	b29b      	uxthmi	r3, r3
 800b5cc:	e7ef      	b.n	800b5ae <_printf_i+0x14a>
 800b5ce:	4665      	mov	r5, ip
 800b5d0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b5d4:	fb02 3311 	mls	r3, r2, r1, r3
 800b5d8:	5cc3      	ldrb	r3, [r0, r3]
 800b5da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b5de:	460b      	mov	r3, r1
 800b5e0:	2900      	cmp	r1, #0
 800b5e2:	d1f5      	bne.n	800b5d0 <_printf_i+0x16c>
 800b5e4:	e7b9      	b.n	800b55a <_printf_i+0xf6>
 800b5e6:	6813      	ldr	r3, [r2, #0]
 800b5e8:	6825      	ldr	r5, [r4, #0]
 800b5ea:	6961      	ldr	r1, [r4, #20]
 800b5ec:	1d18      	adds	r0, r3, #4
 800b5ee:	6010      	str	r0, [r2, #0]
 800b5f0:	0628      	lsls	r0, r5, #24
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	d501      	bpl.n	800b5fa <_printf_i+0x196>
 800b5f6:	6019      	str	r1, [r3, #0]
 800b5f8:	e002      	b.n	800b600 <_printf_i+0x19c>
 800b5fa:	066a      	lsls	r2, r5, #25
 800b5fc:	d5fb      	bpl.n	800b5f6 <_printf_i+0x192>
 800b5fe:	8019      	strh	r1, [r3, #0]
 800b600:	2300      	movs	r3, #0
 800b602:	6123      	str	r3, [r4, #16]
 800b604:	4665      	mov	r5, ip
 800b606:	e7b9      	b.n	800b57c <_printf_i+0x118>
 800b608:	6813      	ldr	r3, [r2, #0]
 800b60a:	1d19      	adds	r1, r3, #4
 800b60c:	6011      	str	r1, [r2, #0]
 800b60e:	681d      	ldr	r5, [r3, #0]
 800b610:	6862      	ldr	r2, [r4, #4]
 800b612:	2100      	movs	r1, #0
 800b614:	4628      	mov	r0, r5
 800b616:	f7f4 fdfb 	bl	8000210 <memchr>
 800b61a:	b108      	cbz	r0, 800b620 <_printf_i+0x1bc>
 800b61c:	1b40      	subs	r0, r0, r5
 800b61e:	6060      	str	r0, [r4, #4]
 800b620:	6863      	ldr	r3, [r4, #4]
 800b622:	6123      	str	r3, [r4, #16]
 800b624:	2300      	movs	r3, #0
 800b626:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b62a:	e7a7      	b.n	800b57c <_printf_i+0x118>
 800b62c:	6923      	ldr	r3, [r4, #16]
 800b62e:	462a      	mov	r2, r5
 800b630:	4639      	mov	r1, r7
 800b632:	4630      	mov	r0, r6
 800b634:	47c0      	blx	r8
 800b636:	3001      	adds	r0, #1
 800b638:	d0aa      	beq.n	800b590 <_printf_i+0x12c>
 800b63a:	6823      	ldr	r3, [r4, #0]
 800b63c:	079b      	lsls	r3, r3, #30
 800b63e:	d413      	bmi.n	800b668 <_printf_i+0x204>
 800b640:	68e0      	ldr	r0, [r4, #12]
 800b642:	9b03      	ldr	r3, [sp, #12]
 800b644:	4298      	cmp	r0, r3
 800b646:	bfb8      	it	lt
 800b648:	4618      	movlt	r0, r3
 800b64a:	e7a3      	b.n	800b594 <_printf_i+0x130>
 800b64c:	2301      	movs	r3, #1
 800b64e:	464a      	mov	r2, r9
 800b650:	4639      	mov	r1, r7
 800b652:	4630      	mov	r0, r6
 800b654:	47c0      	blx	r8
 800b656:	3001      	adds	r0, #1
 800b658:	d09a      	beq.n	800b590 <_printf_i+0x12c>
 800b65a:	3501      	adds	r5, #1
 800b65c:	68e3      	ldr	r3, [r4, #12]
 800b65e:	9a03      	ldr	r2, [sp, #12]
 800b660:	1a9b      	subs	r3, r3, r2
 800b662:	42ab      	cmp	r3, r5
 800b664:	dcf2      	bgt.n	800b64c <_printf_i+0x1e8>
 800b666:	e7eb      	b.n	800b640 <_printf_i+0x1dc>
 800b668:	2500      	movs	r5, #0
 800b66a:	f104 0919 	add.w	r9, r4, #25
 800b66e:	e7f5      	b.n	800b65c <_printf_i+0x1f8>
 800b670:	2b00      	cmp	r3, #0
 800b672:	d1ac      	bne.n	800b5ce <_printf_i+0x16a>
 800b674:	7803      	ldrb	r3, [r0, #0]
 800b676:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b67a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b67e:	e76c      	b.n	800b55a <_printf_i+0xf6>
 800b680:	0800d1aa 	.word	0x0800d1aa
 800b684:	0800d1bb 	.word	0x0800d1bb

0800b688 <_sbrk_r>:
 800b688:	b538      	push	{r3, r4, r5, lr}
 800b68a:	4c06      	ldr	r4, [pc, #24]	; (800b6a4 <_sbrk_r+0x1c>)
 800b68c:	2300      	movs	r3, #0
 800b68e:	4605      	mov	r5, r0
 800b690:	4608      	mov	r0, r1
 800b692:	6023      	str	r3, [r4, #0]
 800b694:	f7fc fed6 	bl	8008444 <_sbrk>
 800b698:	1c43      	adds	r3, r0, #1
 800b69a:	d102      	bne.n	800b6a2 <_sbrk_r+0x1a>
 800b69c:	6823      	ldr	r3, [r4, #0]
 800b69e:	b103      	cbz	r3, 800b6a2 <_sbrk_r+0x1a>
 800b6a0:	602b      	str	r3, [r5, #0]
 800b6a2:	bd38      	pop	{r3, r4, r5, pc}
 800b6a4:	20000428 	.word	0x20000428

0800b6a8 <_raise_r>:
 800b6a8:	291f      	cmp	r1, #31
 800b6aa:	b538      	push	{r3, r4, r5, lr}
 800b6ac:	4604      	mov	r4, r0
 800b6ae:	460d      	mov	r5, r1
 800b6b0:	d904      	bls.n	800b6bc <_raise_r+0x14>
 800b6b2:	2316      	movs	r3, #22
 800b6b4:	6003      	str	r3, [r0, #0]
 800b6b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6ba:	bd38      	pop	{r3, r4, r5, pc}
 800b6bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b6be:	b112      	cbz	r2, 800b6c6 <_raise_r+0x1e>
 800b6c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b6c4:	b94b      	cbnz	r3, 800b6da <_raise_r+0x32>
 800b6c6:	4620      	mov	r0, r4
 800b6c8:	f000 f830 	bl	800b72c <_getpid_r>
 800b6cc:	462a      	mov	r2, r5
 800b6ce:	4601      	mov	r1, r0
 800b6d0:	4620      	mov	r0, r4
 800b6d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6d6:	f000 b817 	b.w	800b708 <_kill_r>
 800b6da:	2b01      	cmp	r3, #1
 800b6dc:	d00a      	beq.n	800b6f4 <_raise_r+0x4c>
 800b6de:	1c59      	adds	r1, r3, #1
 800b6e0:	d103      	bne.n	800b6ea <_raise_r+0x42>
 800b6e2:	2316      	movs	r3, #22
 800b6e4:	6003      	str	r3, [r0, #0]
 800b6e6:	2001      	movs	r0, #1
 800b6e8:	e7e7      	b.n	800b6ba <_raise_r+0x12>
 800b6ea:	2400      	movs	r4, #0
 800b6ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	4798      	blx	r3
 800b6f4:	2000      	movs	r0, #0
 800b6f6:	e7e0      	b.n	800b6ba <_raise_r+0x12>

0800b6f8 <raise>:
 800b6f8:	4b02      	ldr	r3, [pc, #8]	; (800b704 <raise+0xc>)
 800b6fa:	4601      	mov	r1, r0
 800b6fc:	6818      	ldr	r0, [r3, #0]
 800b6fe:	f7ff bfd3 	b.w	800b6a8 <_raise_r>
 800b702:	bf00      	nop
 800b704:	20000014 	.word	0x20000014

0800b708 <_kill_r>:
 800b708:	b538      	push	{r3, r4, r5, lr}
 800b70a:	4c07      	ldr	r4, [pc, #28]	; (800b728 <_kill_r+0x20>)
 800b70c:	2300      	movs	r3, #0
 800b70e:	4605      	mov	r5, r0
 800b710:	4608      	mov	r0, r1
 800b712:	4611      	mov	r1, r2
 800b714:	6023      	str	r3, [r4, #0]
 800b716:	f7fc fe7a 	bl	800840e <_kill>
 800b71a:	1c43      	adds	r3, r0, #1
 800b71c:	d102      	bne.n	800b724 <_kill_r+0x1c>
 800b71e:	6823      	ldr	r3, [r4, #0]
 800b720:	b103      	cbz	r3, 800b724 <_kill_r+0x1c>
 800b722:	602b      	str	r3, [r5, #0]
 800b724:	bd38      	pop	{r3, r4, r5, pc}
 800b726:	bf00      	nop
 800b728:	20000428 	.word	0x20000428

0800b72c <_getpid_r>:
 800b72c:	f7fc be67 	b.w	80083fe <_getpid>

0800b730 <_vsniprintf_r>:
 800b730:	b530      	push	{r4, r5, lr}
 800b732:	1e14      	subs	r4, r2, #0
 800b734:	4605      	mov	r5, r0
 800b736:	b09b      	sub	sp, #108	; 0x6c
 800b738:	4618      	mov	r0, r3
 800b73a:	da05      	bge.n	800b748 <_vsniprintf_r+0x18>
 800b73c:	238b      	movs	r3, #139	; 0x8b
 800b73e:	602b      	str	r3, [r5, #0]
 800b740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b744:	b01b      	add	sp, #108	; 0x6c
 800b746:	bd30      	pop	{r4, r5, pc}
 800b748:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b74c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b750:	bf14      	ite	ne
 800b752:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800b756:	4623      	moveq	r3, r4
 800b758:	9302      	str	r3, [sp, #8]
 800b75a:	9305      	str	r3, [sp, #20]
 800b75c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b760:	9100      	str	r1, [sp, #0]
 800b762:	9104      	str	r1, [sp, #16]
 800b764:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b768:	4602      	mov	r2, r0
 800b76a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b76c:	4669      	mov	r1, sp
 800b76e:	4628      	mov	r0, r5
 800b770:	f001 f9b2 	bl	800cad8 <_svfiprintf_r>
 800b774:	1c43      	adds	r3, r0, #1
 800b776:	bfbc      	itt	lt
 800b778:	238b      	movlt	r3, #139	; 0x8b
 800b77a:	602b      	strlt	r3, [r5, #0]
 800b77c:	2c00      	cmp	r4, #0
 800b77e:	d0e1      	beq.n	800b744 <_vsniprintf_r+0x14>
 800b780:	9b00      	ldr	r3, [sp, #0]
 800b782:	2200      	movs	r2, #0
 800b784:	701a      	strb	r2, [r3, #0]
 800b786:	e7dd      	b.n	800b744 <_vsniprintf_r+0x14>

0800b788 <vsniprintf>:
 800b788:	b507      	push	{r0, r1, r2, lr}
 800b78a:	9300      	str	r3, [sp, #0]
 800b78c:	4613      	mov	r3, r2
 800b78e:	460a      	mov	r2, r1
 800b790:	4601      	mov	r1, r0
 800b792:	4803      	ldr	r0, [pc, #12]	; (800b7a0 <vsniprintf+0x18>)
 800b794:	6800      	ldr	r0, [r0, #0]
 800b796:	f7ff ffcb 	bl	800b730 <_vsniprintf_r>
 800b79a:	b003      	add	sp, #12
 800b79c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b7a0:	20000014 	.word	0x20000014

0800b7a4 <quorem>:
 800b7a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a8:	6903      	ldr	r3, [r0, #16]
 800b7aa:	690c      	ldr	r4, [r1, #16]
 800b7ac:	42a3      	cmp	r3, r4
 800b7ae:	4680      	mov	r8, r0
 800b7b0:	f2c0 8082 	blt.w	800b8b8 <quorem+0x114>
 800b7b4:	3c01      	subs	r4, #1
 800b7b6:	f101 0714 	add.w	r7, r1, #20
 800b7ba:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b7be:	f100 0614 	add.w	r6, r0, #20
 800b7c2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b7c6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b7ca:	eb06 030c 	add.w	r3, r6, ip
 800b7ce:	3501      	adds	r5, #1
 800b7d0:	eb07 090c 	add.w	r9, r7, ip
 800b7d4:	9301      	str	r3, [sp, #4]
 800b7d6:	fbb0 f5f5 	udiv	r5, r0, r5
 800b7da:	b395      	cbz	r5, 800b842 <quorem+0x9e>
 800b7dc:	f04f 0a00 	mov.w	sl, #0
 800b7e0:	4638      	mov	r0, r7
 800b7e2:	46b6      	mov	lr, r6
 800b7e4:	46d3      	mov	fp, sl
 800b7e6:	f850 2b04 	ldr.w	r2, [r0], #4
 800b7ea:	b293      	uxth	r3, r2
 800b7ec:	fb05 a303 	mla	r3, r5, r3, sl
 800b7f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	ebab 0303 	sub.w	r3, fp, r3
 800b7fa:	0c12      	lsrs	r2, r2, #16
 800b7fc:	f8de b000 	ldr.w	fp, [lr]
 800b800:	fb05 a202 	mla	r2, r5, r2, sl
 800b804:	fa13 f38b 	uxtah	r3, r3, fp
 800b808:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b80c:	fa1f fb82 	uxth.w	fp, r2
 800b810:	f8de 2000 	ldr.w	r2, [lr]
 800b814:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b818:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b81c:	b29b      	uxth	r3, r3
 800b81e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b822:	4581      	cmp	r9, r0
 800b824:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b828:	f84e 3b04 	str.w	r3, [lr], #4
 800b82c:	d2db      	bcs.n	800b7e6 <quorem+0x42>
 800b82e:	f856 300c 	ldr.w	r3, [r6, ip]
 800b832:	b933      	cbnz	r3, 800b842 <quorem+0x9e>
 800b834:	9b01      	ldr	r3, [sp, #4]
 800b836:	3b04      	subs	r3, #4
 800b838:	429e      	cmp	r6, r3
 800b83a:	461a      	mov	r2, r3
 800b83c:	d330      	bcc.n	800b8a0 <quorem+0xfc>
 800b83e:	f8c8 4010 	str.w	r4, [r8, #16]
 800b842:	4640      	mov	r0, r8
 800b844:	f001 f81a 	bl	800c87c <__mcmp>
 800b848:	2800      	cmp	r0, #0
 800b84a:	db25      	blt.n	800b898 <quorem+0xf4>
 800b84c:	3501      	adds	r5, #1
 800b84e:	4630      	mov	r0, r6
 800b850:	f04f 0c00 	mov.w	ip, #0
 800b854:	f857 2b04 	ldr.w	r2, [r7], #4
 800b858:	f8d0 e000 	ldr.w	lr, [r0]
 800b85c:	b293      	uxth	r3, r2
 800b85e:	ebac 0303 	sub.w	r3, ip, r3
 800b862:	0c12      	lsrs	r2, r2, #16
 800b864:	fa13 f38e 	uxtah	r3, r3, lr
 800b868:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b86c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b870:	b29b      	uxth	r3, r3
 800b872:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b876:	45b9      	cmp	r9, r7
 800b878:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b87c:	f840 3b04 	str.w	r3, [r0], #4
 800b880:	d2e8      	bcs.n	800b854 <quorem+0xb0>
 800b882:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b886:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b88a:	b92a      	cbnz	r2, 800b898 <quorem+0xf4>
 800b88c:	3b04      	subs	r3, #4
 800b88e:	429e      	cmp	r6, r3
 800b890:	461a      	mov	r2, r3
 800b892:	d30b      	bcc.n	800b8ac <quorem+0x108>
 800b894:	f8c8 4010 	str.w	r4, [r8, #16]
 800b898:	4628      	mov	r0, r5
 800b89a:	b003      	add	sp, #12
 800b89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8a0:	6812      	ldr	r2, [r2, #0]
 800b8a2:	3b04      	subs	r3, #4
 800b8a4:	2a00      	cmp	r2, #0
 800b8a6:	d1ca      	bne.n	800b83e <quorem+0x9a>
 800b8a8:	3c01      	subs	r4, #1
 800b8aa:	e7c5      	b.n	800b838 <quorem+0x94>
 800b8ac:	6812      	ldr	r2, [r2, #0]
 800b8ae:	3b04      	subs	r3, #4
 800b8b0:	2a00      	cmp	r2, #0
 800b8b2:	d1ef      	bne.n	800b894 <quorem+0xf0>
 800b8b4:	3c01      	subs	r4, #1
 800b8b6:	e7ea      	b.n	800b88e <quorem+0xea>
 800b8b8:	2000      	movs	r0, #0
 800b8ba:	e7ee      	b.n	800b89a <quorem+0xf6>
 800b8bc:	0000      	movs	r0, r0
	...

0800b8c0 <_dtoa_r>:
 800b8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c4:	ec57 6b10 	vmov	r6, r7, d0
 800b8c8:	b097      	sub	sp, #92	; 0x5c
 800b8ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b8cc:	9106      	str	r1, [sp, #24]
 800b8ce:	4604      	mov	r4, r0
 800b8d0:	920b      	str	r2, [sp, #44]	; 0x2c
 800b8d2:	9312      	str	r3, [sp, #72]	; 0x48
 800b8d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b8d8:	e9cd 6700 	strd	r6, r7, [sp]
 800b8dc:	b93d      	cbnz	r5, 800b8ee <_dtoa_r+0x2e>
 800b8de:	2010      	movs	r0, #16
 800b8e0:	f7ff f992 	bl	800ac08 <malloc>
 800b8e4:	6260      	str	r0, [r4, #36]	; 0x24
 800b8e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b8ea:	6005      	str	r5, [r0, #0]
 800b8ec:	60c5      	str	r5, [r0, #12]
 800b8ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8f0:	6819      	ldr	r1, [r3, #0]
 800b8f2:	b151      	cbz	r1, 800b90a <_dtoa_r+0x4a>
 800b8f4:	685a      	ldr	r2, [r3, #4]
 800b8f6:	604a      	str	r2, [r1, #4]
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	4093      	lsls	r3, r2
 800b8fc:	608b      	str	r3, [r1, #8]
 800b8fe:	4620      	mov	r0, r4
 800b900:	f000 fdda 	bl	800c4b8 <_Bfree>
 800b904:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b906:	2200      	movs	r2, #0
 800b908:	601a      	str	r2, [r3, #0]
 800b90a:	1e3b      	subs	r3, r7, #0
 800b90c:	bfbb      	ittet	lt
 800b90e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b912:	9301      	strlt	r3, [sp, #4]
 800b914:	2300      	movge	r3, #0
 800b916:	2201      	movlt	r2, #1
 800b918:	bfac      	ite	ge
 800b91a:	f8c8 3000 	strge.w	r3, [r8]
 800b91e:	f8c8 2000 	strlt.w	r2, [r8]
 800b922:	4baf      	ldr	r3, [pc, #700]	; (800bbe0 <_dtoa_r+0x320>)
 800b924:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b928:	ea33 0308 	bics.w	r3, r3, r8
 800b92c:	d114      	bne.n	800b958 <_dtoa_r+0x98>
 800b92e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b930:	f242 730f 	movw	r3, #9999	; 0x270f
 800b934:	6013      	str	r3, [r2, #0]
 800b936:	9b00      	ldr	r3, [sp, #0]
 800b938:	b923      	cbnz	r3, 800b944 <_dtoa_r+0x84>
 800b93a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b93e:	2800      	cmp	r0, #0
 800b940:	f000 8542 	beq.w	800c3c8 <_dtoa_r+0xb08>
 800b944:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b946:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800bbf4 <_dtoa_r+0x334>
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	f000 8544 	beq.w	800c3d8 <_dtoa_r+0xb18>
 800b950:	f10b 0303 	add.w	r3, fp, #3
 800b954:	f000 bd3e 	b.w	800c3d4 <_dtoa_r+0xb14>
 800b958:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b95c:	2200      	movs	r2, #0
 800b95e:	2300      	movs	r3, #0
 800b960:	4630      	mov	r0, r6
 800b962:	4639      	mov	r1, r7
 800b964:	f7f5 f8d0 	bl	8000b08 <__aeabi_dcmpeq>
 800b968:	4681      	mov	r9, r0
 800b96a:	b168      	cbz	r0, 800b988 <_dtoa_r+0xc8>
 800b96c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b96e:	2301      	movs	r3, #1
 800b970:	6013      	str	r3, [r2, #0]
 800b972:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b974:	2b00      	cmp	r3, #0
 800b976:	f000 8524 	beq.w	800c3c2 <_dtoa_r+0xb02>
 800b97a:	4b9a      	ldr	r3, [pc, #616]	; (800bbe4 <_dtoa_r+0x324>)
 800b97c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b97e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800b982:	6013      	str	r3, [r2, #0]
 800b984:	f000 bd28 	b.w	800c3d8 <_dtoa_r+0xb18>
 800b988:	aa14      	add	r2, sp, #80	; 0x50
 800b98a:	a915      	add	r1, sp, #84	; 0x54
 800b98c:	ec47 6b10 	vmov	d0, r6, r7
 800b990:	4620      	mov	r0, r4
 800b992:	f000 ffea 	bl	800c96a <__d2b>
 800b996:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b99a:	9004      	str	r0, [sp, #16]
 800b99c:	2d00      	cmp	r5, #0
 800b99e:	d07c      	beq.n	800ba9a <_dtoa_r+0x1da>
 800b9a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b9a4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800b9a8:	46b2      	mov	sl, r6
 800b9aa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800b9ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b9b2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	4b8b      	ldr	r3, [pc, #556]	; (800bbe8 <_dtoa_r+0x328>)
 800b9ba:	4650      	mov	r0, sl
 800b9bc:	4659      	mov	r1, fp
 800b9be:	f7f4 fc83 	bl	80002c8 <__aeabi_dsub>
 800b9c2:	a381      	add	r3, pc, #516	; (adr r3, 800bbc8 <_dtoa_r+0x308>)
 800b9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c8:	f7f4 fe36 	bl	8000638 <__aeabi_dmul>
 800b9cc:	a380      	add	r3, pc, #512	; (adr r3, 800bbd0 <_dtoa_r+0x310>)
 800b9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d2:	f7f4 fc7b 	bl	80002cc <__adddf3>
 800b9d6:	4606      	mov	r6, r0
 800b9d8:	4628      	mov	r0, r5
 800b9da:	460f      	mov	r7, r1
 800b9dc:	f7f4 fdc2 	bl	8000564 <__aeabi_i2d>
 800b9e0:	a37d      	add	r3, pc, #500	; (adr r3, 800bbd8 <_dtoa_r+0x318>)
 800b9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e6:	f7f4 fe27 	bl	8000638 <__aeabi_dmul>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	4630      	mov	r0, r6
 800b9f0:	4639      	mov	r1, r7
 800b9f2:	f7f4 fc6b 	bl	80002cc <__adddf3>
 800b9f6:	4606      	mov	r6, r0
 800b9f8:	460f      	mov	r7, r1
 800b9fa:	f7f5 f8cd 	bl	8000b98 <__aeabi_d2iz>
 800b9fe:	2200      	movs	r2, #0
 800ba00:	4682      	mov	sl, r0
 800ba02:	2300      	movs	r3, #0
 800ba04:	4630      	mov	r0, r6
 800ba06:	4639      	mov	r1, r7
 800ba08:	f7f5 f888 	bl	8000b1c <__aeabi_dcmplt>
 800ba0c:	b148      	cbz	r0, 800ba22 <_dtoa_r+0x162>
 800ba0e:	4650      	mov	r0, sl
 800ba10:	f7f4 fda8 	bl	8000564 <__aeabi_i2d>
 800ba14:	4632      	mov	r2, r6
 800ba16:	463b      	mov	r3, r7
 800ba18:	f7f5 f876 	bl	8000b08 <__aeabi_dcmpeq>
 800ba1c:	b908      	cbnz	r0, 800ba22 <_dtoa_r+0x162>
 800ba1e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ba22:	f1ba 0f16 	cmp.w	sl, #22
 800ba26:	d859      	bhi.n	800badc <_dtoa_r+0x21c>
 800ba28:	4970      	ldr	r1, [pc, #448]	; (800bbec <_dtoa_r+0x32c>)
 800ba2a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ba2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba32:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba36:	f7f5 f88f 	bl	8000b58 <__aeabi_dcmpgt>
 800ba3a:	2800      	cmp	r0, #0
 800ba3c:	d050      	beq.n	800bae0 <_dtoa_r+0x220>
 800ba3e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ba42:	2300      	movs	r3, #0
 800ba44:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ba48:	1b5d      	subs	r5, r3, r5
 800ba4a:	f1b5 0801 	subs.w	r8, r5, #1
 800ba4e:	bf49      	itett	mi
 800ba50:	f1c5 0301 	rsbmi	r3, r5, #1
 800ba54:	2300      	movpl	r3, #0
 800ba56:	9305      	strmi	r3, [sp, #20]
 800ba58:	f04f 0800 	movmi.w	r8, #0
 800ba5c:	bf58      	it	pl
 800ba5e:	9305      	strpl	r3, [sp, #20]
 800ba60:	f1ba 0f00 	cmp.w	sl, #0
 800ba64:	db3e      	blt.n	800bae4 <_dtoa_r+0x224>
 800ba66:	2300      	movs	r3, #0
 800ba68:	44d0      	add	r8, sl
 800ba6a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ba6e:	9307      	str	r3, [sp, #28]
 800ba70:	9b06      	ldr	r3, [sp, #24]
 800ba72:	2b09      	cmp	r3, #9
 800ba74:	f200 8090 	bhi.w	800bb98 <_dtoa_r+0x2d8>
 800ba78:	2b05      	cmp	r3, #5
 800ba7a:	bfc4      	itt	gt
 800ba7c:	3b04      	subgt	r3, #4
 800ba7e:	9306      	strgt	r3, [sp, #24]
 800ba80:	9b06      	ldr	r3, [sp, #24]
 800ba82:	f1a3 0302 	sub.w	r3, r3, #2
 800ba86:	bfcc      	ite	gt
 800ba88:	2500      	movgt	r5, #0
 800ba8a:	2501      	movle	r5, #1
 800ba8c:	2b03      	cmp	r3, #3
 800ba8e:	f200 808f 	bhi.w	800bbb0 <_dtoa_r+0x2f0>
 800ba92:	e8df f003 	tbb	[pc, r3]
 800ba96:	7f7d      	.short	0x7f7d
 800ba98:	7131      	.short	0x7131
 800ba9a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800ba9e:	441d      	add	r5, r3
 800baa0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800baa4:	2820      	cmp	r0, #32
 800baa6:	dd13      	ble.n	800bad0 <_dtoa_r+0x210>
 800baa8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800baac:	9b00      	ldr	r3, [sp, #0]
 800baae:	fa08 f800 	lsl.w	r8, r8, r0
 800bab2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800bab6:	fa23 f000 	lsr.w	r0, r3, r0
 800baba:	ea48 0000 	orr.w	r0, r8, r0
 800babe:	f7f4 fd41 	bl	8000544 <__aeabi_ui2d>
 800bac2:	2301      	movs	r3, #1
 800bac4:	4682      	mov	sl, r0
 800bac6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800baca:	3d01      	subs	r5, #1
 800bacc:	9313      	str	r3, [sp, #76]	; 0x4c
 800bace:	e772      	b.n	800b9b6 <_dtoa_r+0xf6>
 800bad0:	9b00      	ldr	r3, [sp, #0]
 800bad2:	f1c0 0020 	rsb	r0, r0, #32
 800bad6:	fa03 f000 	lsl.w	r0, r3, r0
 800bada:	e7f0      	b.n	800babe <_dtoa_r+0x1fe>
 800badc:	2301      	movs	r3, #1
 800bade:	e7b1      	b.n	800ba44 <_dtoa_r+0x184>
 800bae0:	900f      	str	r0, [sp, #60]	; 0x3c
 800bae2:	e7b0      	b.n	800ba46 <_dtoa_r+0x186>
 800bae4:	9b05      	ldr	r3, [sp, #20]
 800bae6:	eba3 030a 	sub.w	r3, r3, sl
 800baea:	9305      	str	r3, [sp, #20]
 800baec:	f1ca 0300 	rsb	r3, sl, #0
 800baf0:	9307      	str	r3, [sp, #28]
 800baf2:	2300      	movs	r3, #0
 800baf4:	930e      	str	r3, [sp, #56]	; 0x38
 800baf6:	e7bb      	b.n	800ba70 <_dtoa_r+0x1b0>
 800baf8:	2301      	movs	r3, #1
 800bafa:	930a      	str	r3, [sp, #40]	; 0x28
 800bafc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	dd59      	ble.n	800bbb6 <_dtoa_r+0x2f6>
 800bb02:	9302      	str	r3, [sp, #8]
 800bb04:	4699      	mov	r9, r3
 800bb06:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bb08:	2200      	movs	r2, #0
 800bb0a:	6072      	str	r2, [r6, #4]
 800bb0c:	2204      	movs	r2, #4
 800bb0e:	f102 0014 	add.w	r0, r2, #20
 800bb12:	4298      	cmp	r0, r3
 800bb14:	6871      	ldr	r1, [r6, #4]
 800bb16:	d953      	bls.n	800bbc0 <_dtoa_r+0x300>
 800bb18:	4620      	mov	r0, r4
 800bb1a:	f000 fc99 	bl	800c450 <_Balloc>
 800bb1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb20:	6030      	str	r0, [r6, #0]
 800bb22:	f1b9 0f0e 	cmp.w	r9, #14
 800bb26:	f8d3 b000 	ldr.w	fp, [r3]
 800bb2a:	f200 80e6 	bhi.w	800bcfa <_dtoa_r+0x43a>
 800bb2e:	2d00      	cmp	r5, #0
 800bb30:	f000 80e3 	beq.w	800bcfa <_dtoa_r+0x43a>
 800bb34:	ed9d 7b00 	vldr	d7, [sp]
 800bb38:	f1ba 0f00 	cmp.w	sl, #0
 800bb3c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800bb40:	dd74      	ble.n	800bc2c <_dtoa_r+0x36c>
 800bb42:	4a2a      	ldr	r2, [pc, #168]	; (800bbec <_dtoa_r+0x32c>)
 800bb44:	f00a 030f 	and.w	r3, sl, #15
 800bb48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bb4c:	ed93 7b00 	vldr	d7, [r3]
 800bb50:	ea4f 162a 	mov.w	r6, sl, asr #4
 800bb54:	06f0      	lsls	r0, r6, #27
 800bb56:	ed8d 7b08 	vstr	d7, [sp, #32]
 800bb5a:	d565      	bpl.n	800bc28 <_dtoa_r+0x368>
 800bb5c:	4b24      	ldr	r3, [pc, #144]	; (800bbf0 <_dtoa_r+0x330>)
 800bb5e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bb62:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb66:	f7f4 fe91 	bl	800088c <__aeabi_ddiv>
 800bb6a:	e9cd 0100 	strd	r0, r1, [sp]
 800bb6e:	f006 060f 	and.w	r6, r6, #15
 800bb72:	2503      	movs	r5, #3
 800bb74:	4f1e      	ldr	r7, [pc, #120]	; (800bbf0 <_dtoa_r+0x330>)
 800bb76:	e04c      	b.n	800bc12 <_dtoa_r+0x352>
 800bb78:	2301      	movs	r3, #1
 800bb7a:	930a      	str	r3, [sp, #40]	; 0x28
 800bb7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb7e:	4453      	add	r3, sl
 800bb80:	f103 0901 	add.w	r9, r3, #1
 800bb84:	9302      	str	r3, [sp, #8]
 800bb86:	464b      	mov	r3, r9
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	bfb8      	it	lt
 800bb8c:	2301      	movlt	r3, #1
 800bb8e:	e7ba      	b.n	800bb06 <_dtoa_r+0x246>
 800bb90:	2300      	movs	r3, #0
 800bb92:	e7b2      	b.n	800bafa <_dtoa_r+0x23a>
 800bb94:	2300      	movs	r3, #0
 800bb96:	e7f0      	b.n	800bb7a <_dtoa_r+0x2ba>
 800bb98:	2501      	movs	r5, #1
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	9306      	str	r3, [sp, #24]
 800bb9e:	950a      	str	r5, [sp, #40]	; 0x28
 800bba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bba4:	9302      	str	r3, [sp, #8]
 800bba6:	4699      	mov	r9, r3
 800bba8:	2200      	movs	r2, #0
 800bbaa:	2312      	movs	r3, #18
 800bbac:	920b      	str	r2, [sp, #44]	; 0x2c
 800bbae:	e7aa      	b.n	800bb06 <_dtoa_r+0x246>
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	930a      	str	r3, [sp, #40]	; 0x28
 800bbb4:	e7f4      	b.n	800bba0 <_dtoa_r+0x2e0>
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	9302      	str	r3, [sp, #8]
 800bbba:	4699      	mov	r9, r3
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	e7f5      	b.n	800bbac <_dtoa_r+0x2ec>
 800bbc0:	3101      	adds	r1, #1
 800bbc2:	6071      	str	r1, [r6, #4]
 800bbc4:	0052      	lsls	r2, r2, #1
 800bbc6:	e7a2      	b.n	800bb0e <_dtoa_r+0x24e>
 800bbc8:	636f4361 	.word	0x636f4361
 800bbcc:	3fd287a7 	.word	0x3fd287a7
 800bbd0:	8b60c8b3 	.word	0x8b60c8b3
 800bbd4:	3fc68a28 	.word	0x3fc68a28
 800bbd8:	509f79fb 	.word	0x509f79fb
 800bbdc:	3fd34413 	.word	0x3fd34413
 800bbe0:	7ff00000 	.word	0x7ff00000
 800bbe4:	0800d1a9 	.word	0x0800d1a9
 800bbe8:	3ff80000 	.word	0x3ff80000
 800bbec:	0800d208 	.word	0x0800d208
 800bbf0:	0800d1e0 	.word	0x0800d1e0
 800bbf4:	0800d1d5 	.word	0x0800d1d5
 800bbf8:	07f1      	lsls	r1, r6, #31
 800bbfa:	d508      	bpl.n	800bc0e <_dtoa_r+0x34e>
 800bbfc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bc00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc04:	f7f4 fd18 	bl	8000638 <__aeabi_dmul>
 800bc08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bc0c:	3501      	adds	r5, #1
 800bc0e:	1076      	asrs	r6, r6, #1
 800bc10:	3708      	adds	r7, #8
 800bc12:	2e00      	cmp	r6, #0
 800bc14:	d1f0      	bne.n	800bbf8 <_dtoa_r+0x338>
 800bc16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bc1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc1e:	f7f4 fe35 	bl	800088c <__aeabi_ddiv>
 800bc22:	e9cd 0100 	strd	r0, r1, [sp]
 800bc26:	e01a      	b.n	800bc5e <_dtoa_r+0x39e>
 800bc28:	2502      	movs	r5, #2
 800bc2a:	e7a3      	b.n	800bb74 <_dtoa_r+0x2b4>
 800bc2c:	f000 80a0 	beq.w	800bd70 <_dtoa_r+0x4b0>
 800bc30:	f1ca 0600 	rsb	r6, sl, #0
 800bc34:	4b9f      	ldr	r3, [pc, #636]	; (800beb4 <_dtoa_r+0x5f4>)
 800bc36:	4fa0      	ldr	r7, [pc, #640]	; (800beb8 <_dtoa_r+0x5f8>)
 800bc38:	f006 020f 	and.w	r2, r6, #15
 800bc3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bc48:	f7f4 fcf6 	bl	8000638 <__aeabi_dmul>
 800bc4c:	e9cd 0100 	strd	r0, r1, [sp]
 800bc50:	1136      	asrs	r6, r6, #4
 800bc52:	2300      	movs	r3, #0
 800bc54:	2502      	movs	r5, #2
 800bc56:	2e00      	cmp	r6, #0
 800bc58:	d17f      	bne.n	800bd5a <_dtoa_r+0x49a>
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d1e1      	bne.n	800bc22 <_dtoa_r+0x362>
 800bc5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	f000 8087 	beq.w	800bd74 <_dtoa_r+0x4b4>
 800bc66:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	4b93      	ldr	r3, [pc, #588]	; (800bebc <_dtoa_r+0x5fc>)
 800bc6e:	4630      	mov	r0, r6
 800bc70:	4639      	mov	r1, r7
 800bc72:	f7f4 ff53 	bl	8000b1c <__aeabi_dcmplt>
 800bc76:	2800      	cmp	r0, #0
 800bc78:	d07c      	beq.n	800bd74 <_dtoa_r+0x4b4>
 800bc7a:	f1b9 0f00 	cmp.w	r9, #0
 800bc7e:	d079      	beq.n	800bd74 <_dtoa_r+0x4b4>
 800bc80:	9b02      	ldr	r3, [sp, #8]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	dd35      	ble.n	800bcf2 <_dtoa_r+0x432>
 800bc86:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800bc8a:	9308      	str	r3, [sp, #32]
 800bc8c:	4639      	mov	r1, r7
 800bc8e:	2200      	movs	r2, #0
 800bc90:	4b8b      	ldr	r3, [pc, #556]	; (800bec0 <_dtoa_r+0x600>)
 800bc92:	4630      	mov	r0, r6
 800bc94:	f7f4 fcd0 	bl	8000638 <__aeabi_dmul>
 800bc98:	e9cd 0100 	strd	r0, r1, [sp]
 800bc9c:	9f02      	ldr	r7, [sp, #8]
 800bc9e:	3501      	adds	r5, #1
 800bca0:	4628      	mov	r0, r5
 800bca2:	f7f4 fc5f 	bl	8000564 <__aeabi_i2d>
 800bca6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcaa:	f7f4 fcc5 	bl	8000638 <__aeabi_dmul>
 800bcae:	2200      	movs	r2, #0
 800bcb0:	4b84      	ldr	r3, [pc, #528]	; (800bec4 <_dtoa_r+0x604>)
 800bcb2:	f7f4 fb0b 	bl	80002cc <__adddf3>
 800bcb6:	4605      	mov	r5, r0
 800bcb8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bcbc:	2f00      	cmp	r7, #0
 800bcbe:	d15d      	bne.n	800bd7c <_dtoa_r+0x4bc>
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	4b81      	ldr	r3, [pc, #516]	; (800bec8 <_dtoa_r+0x608>)
 800bcc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcc8:	f7f4 fafe 	bl	80002c8 <__aeabi_dsub>
 800bccc:	462a      	mov	r2, r5
 800bcce:	4633      	mov	r3, r6
 800bcd0:	e9cd 0100 	strd	r0, r1, [sp]
 800bcd4:	f7f4 ff40 	bl	8000b58 <__aeabi_dcmpgt>
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	f040 8288 	bne.w	800c1ee <_dtoa_r+0x92e>
 800bcde:	462a      	mov	r2, r5
 800bce0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bce4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bce8:	f7f4 ff18 	bl	8000b1c <__aeabi_dcmplt>
 800bcec:	2800      	cmp	r0, #0
 800bcee:	f040 827c 	bne.w	800c1ea <_dtoa_r+0x92a>
 800bcf2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bcf6:	e9cd 2300 	strd	r2, r3, [sp]
 800bcfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	f2c0 8150 	blt.w	800bfa2 <_dtoa_r+0x6e2>
 800bd02:	f1ba 0f0e 	cmp.w	sl, #14
 800bd06:	f300 814c 	bgt.w	800bfa2 <_dtoa_r+0x6e2>
 800bd0a:	4b6a      	ldr	r3, [pc, #424]	; (800beb4 <_dtoa_r+0x5f4>)
 800bd0c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bd10:	ed93 7b00 	vldr	d7, [r3]
 800bd14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bd1c:	f280 80d8 	bge.w	800bed0 <_dtoa_r+0x610>
 800bd20:	f1b9 0f00 	cmp.w	r9, #0
 800bd24:	f300 80d4 	bgt.w	800bed0 <_dtoa_r+0x610>
 800bd28:	f040 825e 	bne.w	800c1e8 <_dtoa_r+0x928>
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	4b66      	ldr	r3, [pc, #408]	; (800bec8 <_dtoa_r+0x608>)
 800bd30:	ec51 0b17 	vmov	r0, r1, d7
 800bd34:	f7f4 fc80 	bl	8000638 <__aeabi_dmul>
 800bd38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd3c:	f7f4 ff02 	bl	8000b44 <__aeabi_dcmpge>
 800bd40:	464f      	mov	r7, r9
 800bd42:	464e      	mov	r6, r9
 800bd44:	2800      	cmp	r0, #0
 800bd46:	f040 8234 	bne.w	800c1b2 <_dtoa_r+0x8f2>
 800bd4a:	2331      	movs	r3, #49	; 0x31
 800bd4c:	f10b 0501 	add.w	r5, fp, #1
 800bd50:	f88b 3000 	strb.w	r3, [fp]
 800bd54:	f10a 0a01 	add.w	sl, sl, #1
 800bd58:	e22f      	b.n	800c1ba <_dtoa_r+0x8fa>
 800bd5a:	07f2      	lsls	r2, r6, #31
 800bd5c:	d505      	bpl.n	800bd6a <_dtoa_r+0x4aa>
 800bd5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd62:	f7f4 fc69 	bl	8000638 <__aeabi_dmul>
 800bd66:	3501      	adds	r5, #1
 800bd68:	2301      	movs	r3, #1
 800bd6a:	1076      	asrs	r6, r6, #1
 800bd6c:	3708      	adds	r7, #8
 800bd6e:	e772      	b.n	800bc56 <_dtoa_r+0x396>
 800bd70:	2502      	movs	r5, #2
 800bd72:	e774      	b.n	800bc5e <_dtoa_r+0x39e>
 800bd74:	f8cd a020 	str.w	sl, [sp, #32]
 800bd78:	464f      	mov	r7, r9
 800bd7a:	e791      	b.n	800bca0 <_dtoa_r+0x3e0>
 800bd7c:	4b4d      	ldr	r3, [pc, #308]	; (800beb4 <_dtoa_r+0x5f4>)
 800bd7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bd82:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800bd86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d047      	beq.n	800be1c <_dtoa_r+0x55c>
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	460b      	mov	r3, r1
 800bd90:	2000      	movs	r0, #0
 800bd92:	494e      	ldr	r1, [pc, #312]	; (800becc <_dtoa_r+0x60c>)
 800bd94:	f7f4 fd7a 	bl	800088c <__aeabi_ddiv>
 800bd98:	462a      	mov	r2, r5
 800bd9a:	4633      	mov	r3, r6
 800bd9c:	f7f4 fa94 	bl	80002c8 <__aeabi_dsub>
 800bda0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bda4:	465d      	mov	r5, fp
 800bda6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdaa:	f7f4 fef5 	bl	8000b98 <__aeabi_d2iz>
 800bdae:	4606      	mov	r6, r0
 800bdb0:	f7f4 fbd8 	bl	8000564 <__aeabi_i2d>
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	460b      	mov	r3, r1
 800bdb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdbc:	f7f4 fa84 	bl	80002c8 <__aeabi_dsub>
 800bdc0:	3630      	adds	r6, #48	; 0x30
 800bdc2:	f805 6b01 	strb.w	r6, [r5], #1
 800bdc6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bdca:	e9cd 0100 	strd	r0, r1, [sp]
 800bdce:	f7f4 fea5 	bl	8000b1c <__aeabi_dcmplt>
 800bdd2:	2800      	cmp	r0, #0
 800bdd4:	d163      	bne.n	800be9e <_dtoa_r+0x5de>
 800bdd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdda:	2000      	movs	r0, #0
 800bddc:	4937      	ldr	r1, [pc, #220]	; (800bebc <_dtoa_r+0x5fc>)
 800bdde:	f7f4 fa73 	bl	80002c8 <__aeabi_dsub>
 800bde2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bde6:	f7f4 fe99 	bl	8000b1c <__aeabi_dcmplt>
 800bdea:	2800      	cmp	r0, #0
 800bdec:	f040 80b7 	bne.w	800bf5e <_dtoa_r+0x69e>
 800bdf0:	eba5 030b 	sub.w	r3, r5, fp
 800bdf4:	429f      	cmp	r7, r3
 800bdf6:	f77f af7c 	ble.w	800bcf2 <_dtoa_r+0x432>
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	4b30      	ldr	r3, [pc, #192]	; (800bec0 <_dtoa_r+0x600>)
 800bdfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800be02:	f7f4 fc19 	bl	8000638 <__aeabi_dmul>
 800be06:	2200      	movs	r2, #0
 800be08:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800be0c:	4b2c      	ldr	r3, [pc, #176]	; (800bec0 <_dtoa_r+0x600>)
 800be0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be12:	f7f4 fc11 	bl	8000638 <__aeabi_dmul>
 800be16:	e9cd 0100 	strd	r0, r1, [sp]
 800be1a:	e7c4      	b.n	800bda6 <_dtoa_r+0x4e6>
 800be1c:	462a      	mov	r2, r5
 800be1e:	4633      	mov	r3, r6
 800be20:	f7f4 fc0a 	bl	8000638 <__aeabi_dmul>
 800be24:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800be28:	eb0b 0507 	add.w	r5, fp, r7
 800be2c:	465e      	mov	r6, fp
 800be2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be32:	f7f4 feb1 	bl	8000b98 <__aeabi_d2iz>
 800be36:	4607      	mov	r7, r0
 800be38:	f7f4 fb94 	bl	8000564 <__aeabi_i2d>
 800be3c:	3730      	adds	r7, #48	; 0x30
 800be3e:	4602      	mov	r2, r0
 800be40:	460b      	mov	r3, r1
 800be42:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be46:	f7f4 fa3f 	bl	80002c8 <__aeabi_dsub>
 800be4a:	f806 7b01 	strb.w	r7, [r6], #1
 800be4e:	42ae      	cmp	r6, r5
 800be50:	e9cd 0100 	strd	r0, r1, [sp]
 800be54:	f04f 0200 	mov.w	r2, #0
 800be58:	d126      	bne.n	800bea8 <_dtoa_r+0x5e8>
 800be5a:	4b1c      	ldr	r3, [pc, #112]	; (800becc <_dtoa_r+0x60c>)
 800be5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800be60:	f7f4 fa34 	bl	80002cc <__adddf3>
 800be64:	4602      	mov	r2, r0
 800be66:	460b      	mov	r3, r1
 800be68:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be6c:	f7f4 fe74 	bl	8000b58 <__aeabi_dcmpgt>
 800be70:	2800      	cmp	r0, #0
 800be72:	d174      	bne.n	800bf5e <_dtoa_r+0x69e>
 800be74:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800be78:	2000      	movs	r0, #0
 800be7a:	4914      	ldr	r1, [pc, #80]	; (800becc <_dtoa_r+0x60c>)
 800be7c:	f7f4 fa24 	bl	80002c8 <__aeabi_dsub>
 800be80:	4602      	mov	r2, r0
 800be82:	460b      	mov	r3, r1
 800be84:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be88:	f7f4 fe48 	bl	8000b1c <__aeabi_dcmplt>
 800be8c:	2800      	cmp	r0, #0
 800be8e:	f43f af30 	beq.w	800bcf2 <_dtoa_r+0x432>
 800be92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800be96:	2b30      	cmp	r3, #48	; 0x30
 800be98:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800be9c:	d002      	beq.n	800bea4 <_dtoa_r+0x5e4>
 800be9e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bea2:	e04a      	b.n	800bf3a <_dtoa_r+0x67a>
 800bea4:	4615      	mov	r5, r2
 800bea6:	e7f4      	b.n	800be92 <_dtoa_r+0x5d2>
 800bea8:	4b05      	ldr	r3, [pc, #20]	; (800bec0 <_dtoa_r+0x600>)
 800beaa:	f7f4 fbc5 	bl	8000638 <__aeabi_dmul>
 800beae:	e9cd 0100 	strd	r0, r1, [sp]
 800beb2:	e7bc      	b.n	800be2e <_dtoa_r+0x56e>
 800beb4:	0800d208 	.word	0x0800d208
 800beb8:	0800d1e0 	.word	0x0800d1e0
 800bebc:	3ff00000 	.word	0x3ff00000
 800bec0:	40240000 	.word	0x40240000
 800bec4:	401c0000 	.word	0x401c0000
 800bec8:	40140000 	.word	0x40140000
 800becc:	3fe00000 	.word	0x3fe00000
 800bed0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bed4:	465d      	mov	r5, fp
 800bed6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800beda:	4630      	mov	r0, r6
 800bedc:	4639      	mov	r1, r7
 800bede:	f7f4 fcd5 	bl	800088c <__aeabi_ddiv>
 800bee2:	f7f4 fe59 	bl	8000b98 <__aeabi_d2iz>
 800bee6:	4680      	mov	r8, r0
 800bee8:	f7f4 fb3c 	bl	8000564 <__aeabi_i2d>
 800beec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bef0:	f7f4 fba2 	bl	8000638 <__aeabi_dmul>
 800bef4:	4602      	mov	r2, r0
 800bef6:	460b      	mov	r3, r1
 800bef8:	4630      	mov	r0, r6
 800befa:	4639      	mov	r1, r7
 800befc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800bf00:	f7f4 f9e2 	bl	80002c8 <__aeabi_dsub>
 800bf04:	f805 6b01 	strb.w	r6, [r5], #1
 800bf08:	eba5 060b 	sub.w	r6, r5, fp
 800bf0c:	45b1      	cmp	r9, r6
 800bf0e:	4602      	mov	r2, r0
 800bf10:	460b      	mov	r3, r1
 800bf12:	d139      	bne.n	800bf88 <_dtoa_r+0x6c8>
 800bf14:	f7f4 f9da 	bl	80002cc <__adddf3>
 800bf18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf1c:	4606      	mov	r6, r0
 800bf1e:	460f      	mov	r7, r1
 800bf20:	f7f4 fe1a 	bl	8000b58 <__aeabi_dcmpgt>
 800bf24:	b9c8      	cbnz	r0, 800bf5a <_dtoa_r+0x69a>
 800bf26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf2a:	4630      	mov	r0, r6
 800bf2c:	4639      	mov	r1, r7
 800bf2e:	f7f4 fdeb 	bl	8000b08 <__aeabi_dcmpeq>
 800bf32:	b110      	cbz	r0, 800bf3a <_dtoa_r+0x67a>
 800bf34:	f018 0f01 	tst.w	r8, #1
 800bf38:	d10f      	bne.n	800bf5a <_dtoa_r+0x69a>
 800bf3a:	9904      	ldr	r1, [sp, #16]
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	f000 fabb 	bl	800c4b8 <_Bfree>
 800bf42:	2300      	movs	r3, #0
 800bf44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bf46:	702b      	strb	r3, [r5, #0]
 800bf48:	f10a 0301 	add.w	r3, sl, #1
 800bf4c:	6013      	str	r3, [r2, #0]
 800bf4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	f000 8241 	beq.w	800c3d8 <_dtoa_r+0xb18>
 800bf56:	601d      	str	r5, [r3, #0]
 800bf58:	e23e      	b.n	800c3d8 <_dtoa_r+0xb18>
 800bf5a:	f8cd a020 	str.w	sl, [sp, #32]
 800bf5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bf62:	2a39      	cmp	r2, #57	; 0x39
 800bf64:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800bf68:	d108      	bne.n	800bf7c <_dtoa_r+0x6bc>
 800bf6a:	459b      	cmp	fp, r3
 800bf6c:	d10a      	bne.n	800bf84 <_dtoa_r+0x6c4>
 800bf6e:	9b08      	ldr	r3, [sp, #32]
 800bf70:	3301      	adds	r3, #1
 800bf72:	9308      	str	r3, [sp, #32]
 800bf74:	2330      	movs	r3, #48	; 0x30
 800bf76:	f88b 3000 	strb.w	r3, [fp]
 800bf7a:	465b      	mov	r3, fp
 800bf7c:	781a      	ldrb	r2, [r3, #0]
 800bf7e:	3201      	adds	r2, #1
 800bf80:	701a      	strb	r2, [r3, #0]
 800bf82:	e78c      	b.n	800be9e <_dtoa_r+0x5de>
 800bf84:	461d      	mov	r5, r3
 800bf86:	e7ea      	b.n	800bf5e <_dtoa_r+0x69e>
 800bf88:	2200      	movs	r2, #0
 800bf8a:	4b9b      	ldr	r3, [pc, #620]	; (800c1f8 <_dtoa_r+0x938>)
 800bf8c:	f7f4 fb54 	bl	8000638 <__aeabi_dmul>
 800bf90:	2200      	movs	r2, #0
 800bf92:	2300      	movs	r3, #0
 800bf94:	4606      	mov	r6, r0
 800bf96:	460f      	mov	r7, r1
 800bf98:	f7f4 fdb6 	bl	8000b08 <__aeabi_dcmpeq>
 800bf9c:	2800      	cmp	r0, #0
 800bf9e:	d09a      	beq.n	800bed6 <_dtoa_r+0x616>
 800bfa0:	e7cb      	b.n	800bf3a <_dtoa_r+0x67a>
 800bfa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bfa4:	2a00      	cmp	r2, #0
 800bfa6:	f000 808b 	beq.w	800c0c0 <_dtoa_r+0x800>
 800bfaa:	9a06      	ldr	r2, [sp, #24]
 800bfac:	2a01      	cmp	r2, #1
 800bfae:	dc6e      	bgt.n	800c08e <_dtoa_r+0x7ce>
 800bfb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bfb2:	2a00      	cmp	r2, #0
 800bfb4:	d067      	beq.n	800c086 <_dtoa_r+0x7c6>
 800bfb6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bfba:	9f07      	ldr	r7, [sp, #28]
 800bfbc:	9d05      	ldr	r5, [sp, #20]
 800bfbe:	9a05      	ldr	r2, [sp, #20]
 800bfc0:	2101      	movs	r1, #1
 800bfc2:	441a      	add	r2, r3
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	9205      	str	r2, [sp, #20]
 800bfc8:	4498      	add	r8, r3
 800bfca:	f000 fb15 	bl	800c5f8 <__i2b>
 800bfce:	4606      	mov	r6, r0
 800bfd0:	2d00      	cmp	r5, #0
 800bfd2:	dd0c      	ble.n	800bfee <_dtoa_r+0x72e>
 800bfd4:	f1b8 0f00 	cmp.w	r8, #0
 800bfd8:	dd09      	ble.n	800bfee <_dtoa_r+0x72e>
 800bfda:	4545      	cmp	r5, r8
 800bfdc:	9a05      	ldr	r2, [sp, #20]
 800bfde:	462b      	mov	r3, r5
 800bfe0:	bfa8      	it	ge
 800bfe2:	4643      	movge	r3, r8
 800bfe4:	1ad2      	subs	r2, r2, r3
 800bfe6:	9205      	str	r2, [sp, #20]
 800bfe8:	1aed      	subs	r5, r5, r3
 800bfea:	eba8 0803 	sub.w	r8, r8, r3
 800bfee:	9b07      	ldr	r3, [sp, #28]
 800bff0:	b1eb      	cbz	r3, 800c02e <_dtoa_r+0x76e>
 800bff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d067      	beq.n	800c0c8 <_dtoa_r+0x808>
 800bff8:	b18f      	cbz	r7, 800c01e <_dtoa_r+0x75e>
 800bffa:	4631      	mov	r1, r6
 800bffc:	463a      	mov	r2, r7
 800bffe:	4620      	mov	r0, r4
 800c000:	f000 fb9a 	bl	800c738 <__pow5mult>
 800c004:	9a04      	ldr	r2, [sp, #16]
 800c006:	4601      	mov	r1, r0
 800c008:	4606      	mov	r6, r0
 800c00a:	4620      	mov	r0, r4
 800c00c:	f000 fafd 	bl	800c60a <__multiply>
 800c010:	9904      	ldr	r1, [sp, #16]
 800c012:	9008      	str	r0, [sp, #32]
 800c014:	4620      	mov	r0, r4
 800c016:	f000 fa4f 	bl	800c4b8 <_Bfree>
 800c01a:	9b08      	ldr	r3, [sp, #32]
 800c01c:	9304      	str	r3, [sp, #16]
 800c01e:	9b07      	ldr	r3, [sp, #28]
 800c020:	1bda      	subs	r2, r3, r7
 800c022:	d004      	beq.n	800c02e <_dtoa_r+0x76e>
 800c024:	9904      	ldr	r1, [sp, #16]
 800c026:	4620      	mov	r0, r4
 800c028:	f000 fb86 	bl	800c738 <__pow5mult>
 800c02c:	9004      	str	r0, [sp, #16]
 800c02e:	2101      	movs	r1, #1
 800c030:	4620      	mov	r0, r4
 800c032:	f000 fae1 	bl	800c5f8 <__i2b>
 800c036:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c038:	4607      	mov	r7, r0
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	f000 81d0 	beq.w	800c3e0 <_dtoa_r+0xb20>
 800c040:	461a      	mov	r2, r3
 800c042:	4601      	mov	r1, r0
 800c044:	4620      	mov	r0, r4
 800c046:	f000 fb77 	bl	800c738 <__pow5mult>
 800c04a:	9b06      	ldr	r3, [sp, #24]
 800c04c:	2b01      	cmp	r3, #1
 800c04e:	4607      	mov	r7, r0
 800c050:	dc40      	bgt.n	800c0d4 <_dtoa_r+0x814>
 800c052:	9b00      	ldr	r3, [sp, #0]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d139      	bne.n	800c0cc <_dtoa_r+0x80c>
 800c058:	9b01      	ldr	r3, [sp, #4]
 800c05a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d136      	bne.n	800c0d0 <_dtoa_r+0x810>
 800c062:	9b01      	ldr	r3, [sp, #4]
 800c064:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c068:	0d1b      	lsrs	r3, r3, #20
 800c06a:	051b      	lsls	r3, r3, #20
 800c06c:	b12b      	cbz	r3, 800c07a <_dtoa_r+0x7ba>
 800c06e:	9b05      	ldr	r3, [sp, #20]
 800c070:	3301      	adds	r3, #1
 800c072:	9305      	str	r3, [sp, #20]
 800c074:	f108 0801 	add.w	r8, r8, #1
 800c078:	2301      	movs	r3, #1
 800c07a:	9307      	str	r3, [sp, #28]
 800c07c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d12a      	bne.n	800c0d8 <_dtoa_r+0x818>
 800c082:	2001      	movs	r0, #1
 800c084:	e030      	b.n	800c0e8 <_dtoa_r+0x828>
 800c086:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c088:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c08c:	e795      	b.n	800bfba <_dtoa_r+0x6fa>
 800c08e:	9b07      	ldr	r3, [sp, #28]
 800c090:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800c094:	42bb      	cmp	r3, r7
 800c096:	bfbf      	itttt	lt
 800c098:	9b07      	ldrlt	r3, [sp, #28]
 800c09a:	9707      	strlt	r7, [sp, #28]
 800c09c:	1afa      	sublt	r2, r7, r3
 800c09e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c0a0:	bfbb      	ittet	lt
 800c0a2:	189b      	addlt	r3, r3, r2
 800c0a4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c0a6:	1bdf      	subge	r7, r3, r7
 800c0a8:	2700      	movlt	r7, #0
 800c0aa:	f1b9 0f00 	cmp.w	r9, #0
 800c0ae:	bfb5      	itete	lt
 800c0b0:	9b05      	ldrlt	r3, [sp, #20]
 800c0b2:	9d05      	ldrge	r5, [sp, #20]
 800c0b4:	eba3 0509 	sublt.w	r5, r3, r9
 800c0b8:	464b      	movge	r3, r9
 800c0ba:	bfb8      	it	lt
 800c0bc:	2300      	movlt	r3, #0
 800c0be:	e77e      	b.n	800bfbe <_dtoa_r+0x6fe>
 800c0c0:	9f07      	ldr	r7, [sp, #28]
 800c0c2:	9d05      	ldr	r5, [sp, #20]
 800c0c4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c0c6:	e783      	b.n	800bfd0 <_dtoa_r+0x710>
 800c0c8:	9a07      	ldr	r2, [sp, #28]
 800c0ca:	e7ab      	b.n	800c024 <_dtoa_r+0x764>
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	e7d4      	b.n	800c07a <_dtoa_r+0x7ba>
 800c0d0:	9b00      	ldr	r3, [sp, #0]
 800c0d2:	e7d2      	b.n	800c07a <_dtoa_r+0x7ba>
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	9307      	str	r3, [sp, #28]
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c0de:	6918      	ldr	r0, [r3, #16]
 800c0e0:	f000 fa3c 	bl	800c55c <__hi0bits>
 800c0e4:	f1c0 0020 	rsb	r0, r0, #32
 800c0e8:	4440      	add	r0, r8
 800c0ea:	f010 001f 	ands.w	r0, r0, #31
 800c0ee:	d047      	beq.n	800c180 <_dtoa_r+0x8c0>
 800c0f0:	f1c0 0320 	rsb	r3, r0, #32
 800c0f4:	2b04      	cmp	r3, #4
 800c0f6:	dd3b      	ble.n	800c170 <_dtoa_r+0x8b0>
 800c0f8:	9b05      	ldr	r3, [sp, #20]
 800c0fa:	f1c0 001c 	rsb	r0, r0, #28
 800c0fe:	4403      	add	r3, r0
 800c100:	9305      	str	r3, [sp, #20]
 800c102:	4405      	add	r5, r0
 800c104:	4480      	add	r8, r0
 800c106:	9b05      	ldr	r3, [sp, #20]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	dd05      	ble.n	800c118 <_dtoa_r+0x858>
 800c10c:	461a      	mov	r2, r3
 800c10e:	9904      	ldr	r1, [sp, #16]
 800c110:	4620      	mov	r0, r4
 800c112:	f000 fb5f 	bl	800c7d4 <__lshift>
 800c116:	9004      	str	r0, [sp, #16]
 800c118:	f1b8 0f00 	cmp.w	r8, #0
 800c11c:	dd05      	ble.n	800c12a <_dtoa_r+0x86a>
 800c11e:	4639      	mov	r1, r7
 800c120:	4642      	mov	r2, r8
 800c122:	4620      	mov	r0, r4
 800c124:	f000 fb56 	bl	800c7d4 <__lshift>
 800c128:	4607      	mov	r7, r0
 800c12a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c12c:	b353      	cbz	r3, 800c184 <_dtoa_r+0x8c4>
 800c12e:	4639      	mov	r1, r7
 800c130:	9804      	ldr	r0, [sp, #16]
 800c132:	f000 fba3 	bl	800c87c <__mcmp>
 800c136:	2800      	cmp	r0, #0
 800c138:	da24      	bge.n	800c184 <_dtoa_r+0x8c4>
 800c13a:	2300      	movs	r3, #0
 800c13c:	220a      	movs	r2, #10
 800c13e:	9904      	ldr	r1, [sp, #16]
 800c140:	4620      	mov	r0, r4
 800c142:	f000 f9d0 	bl	800c4e6 <__multadd>
 800c146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c148:	9004      	str	r0, [sp, #16]
 800c14a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c14e:	2b00      	cmp	r3, #0
 800c150:	f000 814d 	beq.w	800c3ee <_dtoa_r+0xb2e>
 800c154:	2300      	movs	r3, #0
 800c156:	4631      	mov	r1, r6
 800c158:	220a      	movs	r2, #10
 800c15a:	4620      	mov	r0, r4
 800c15c:	f000 f9c3 	bl	800c4e6 <__multadd>
 800c160:	9b02      	ldr	r3, [sp, #8]
 800c162:	2b00      	cmp	r3, #0
 800c164:	4606      	mov	r6, r0
 800c166:	dc4f      	bgt.n	800c208 <_dtoa_r+0x948>
 800c168:	9b06      	ldr	r3, [sp, #24]
 800c16a:	2b02      	cmp	r3, #2
 800c16c:	dd4c      	ble.n	800c208 <_dtoa_r+0x948>
 800c16e:	e011      	b.n	800c194 <_dtoa_r+0x8d4>
 800c170:	d0c9      	beq.n	800c106 <_dtoa_r+0x846>
 800c172:	9a05      	ldr	r2, [sp, #20]
 800c174:	331c      	adds	r3, #28
 800c176:	441a      	add	r2, r3
 800c178:	9205      	str	r2, [sp, #20]
 800c17a:	441d      	add	r5, r3
 800c17c:	4498      	add	r8, r3
 800c17e:	e7c2      	b.n	800c106 <_dtoa_r+0x846>
 800c180:	4603      	mov	r3, r0
 800c182:	e7f6      	b.n	800c172 <_dtoa_r+0x8b2>
 800c184:	f1b9 0f00 	cmp.w	r9, #0
 800c188:	dc38      	bgt.n	800c1fc <_dtoa_r+0x93c>
 800c18a:	9b06      	ldr	r3, [sp, #24]
 800c18c:	2b02      	cmp	r3, #2
 800c18e:	dd35      	ble.n	800c1fc <_dtoa_r+0x93c>
 800c190:	f8cd 9008 	str.w	r9, [sp, #8]
 800c194:	9b02      	ldr	r3, [sp, #8]
 800c196:	b963      	cbnz	r3, 800c1b2 <_dtoa_r+0x8f2>
 800c198:	4639      	mov	r1, r7
 800c19a:	2205      	movs	r2, #5
 800c19c:	4620      	mov	r0, r4
 800c19e:	f000 f9a2 	bl	800c4e6 <__multadd>
 800c1a2:	4601      	mov	r1, r0
 800c1a4:	4607      	mov	r7, r0
 800c1a6:	9804      	ldr	r0, [sp, #16]
 800c1a8:	f000 fb68 	bl	800c87c <__mcmp>
 800c1ac:	2800      	cmp	r0, #0
 800c1ae:	f73f adcc 	bgt.w	800bd4a <_dtoa_r+0x48a>
 800c1b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1b4:	465d      	mov	r5, fp
 800c1b6:	ea6f 0a03 	mvn.w	sl, r3
 800c1ba:	f04f 0900 	mov.w	r9, #0
 800c1be:	4639      	mov	r1, r7
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	f000 f979 	bl	800c4b8 <_Bfree>
 800c1c6:	2e00      	cmp	r6, #0
 800c1c8:	f43f aeb7 	beq.w	800bf3a <_dtoa_r+0x67a>
 800c1cc:	f1b9 0f00 	cmp.w	r9, #0
 800c1d0:	d005      	beq.n	800c1de <_dtoa_r+0x91e>
 800c1d2:	45b1      	cmp	r9, r6
 800c1d4:	d003      	beq.n	800c1de <_dtoa_r+0x91e>
 800c1d6:	4649      	mov	r1, r9
 800c1d8:	4620      	mov	r0, r4
 800c1da:	f000 f96d 	bl	800c4b8 <_Bfree>
 800c1de:	4631      	mov	r1, r6
 800c1e0:	4620      	mov	r0, r4
 800c1e2:	f000 f969 	bl	800c4b8 <_Bfree>
 800c1e6:	e6a8      	b.n	800bf3a <_dtoa_r+0x67a>
 800c1e8:	2700      	movs	r7, #0
 800c1ea:	463e      	mov	r6, r7
 800c1ec:	e7e1      	b.n	800c1b2 <_dtoa_r+0x8f2>
 800c1ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c1f2:	463e      	mov	r6, r7
 800c1f4:	e5a9      	b.n	800bd4a <_dtoa_r+0x48a>
 800c1f6:	bf00      	nop
 800c1f8:	40240000 	.word	0x40240000
 800c1fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1fe:	f8cd 9008 	str.w	r9, [sp, #8]
 800c202:	2b00      	cmp	r3, #0
 800c204:	f000 80fa 	beq.w	800c3fc <_dtoa_r+0xb3c>
 800c208:	2d00      	cmp	r5, #0
 800c20a:	dd05      	ble.n	800c218 <_dtoa_r+0x958>
 800c20c:	4631      	mov	r1, r6
 800c20e:	462a      	mov	r2, r5
 800c210:	4620      	mov	r0, r4
 800c212:	f000 fadf 	bl	800c7d4 <__lshift>
 800c216:	4606      	mov	r6, r0
 800c218:	9b07      	ldr	r3, [sp, #28]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d04c      	beq.n	800c2b8 <_dtoa_r+0x9f8>
 800c21e:	6871      	ldr	r1, [r6, #4]
 800c220:	4620      	mov	r0, r4
 800c222:	f000 f915 	bl	800c450 <_Balloc>
 800c226:	6932      	ldr	r2, [r6, #16]
 800c228:	3202      	adds	r2, #2
 800c22a:	4605      	mov	r5, r0
 800c22c:	0092      	lsls	r2, r2, #2
 800c22e:	f106 010c 	add.w	r1, r6, #12
 800c232:	300c      	adds	r0, #12
 800c234:	f7fe fcf8 	bl	800ac28 <memcpy>
 800c238:	2201      	movs	r2, #1
 800c23a:	4629      	mov	r1, r5
 800c23c:	4620      	mov	r0, r4
 800c23e:	f000 fac9 	bl	800c7d4 <__lshift>
 800c242:	9b00      	ldr	r3, [sp, #0]
 800c244:	f8cd b014 	str.w	fp, [sp, #20]
 800c248:	f003 0301 	and.w	r3, r3, #1
 800c24c:	46b1      	mov	r9, r6
 800c24e:	9307      	str	r3, [sp, #28]
 800c250:	4606      	mov	r6, r0
 800c252:	4639      	mov	r1, r7
 800c254:	9804      	ldr	r0, [sp, #16]
 800c256:	f7ff faa5 	bl	800b7a4 <quorem>
 800c25a:	4649      	mov	r1, r9
 800c25c:	4605      	mov	r5, r0
 800c25e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c262:	9804      	ldr	r0, [sp, #16]
 800c264:	f000 fb0a 	bl	800c87c <__mcmp>
 800c268:	4632      	mov	r2, r6
 800c26a:	9000      	str	r0, [sp, #0]
 800c26c:	4639      	mov	r1, r7
 800c26e:	4620      	mov	r0, r4
 800c270:	f000 fb1e 	bl	800c8b0 <__mdiff>
 800c274:	68c3      	ldr	r3, [r0, #12]
 800c276:	4602      	mov	r2, r0
 800c278:	bb03      	cbnz	r3, 800c2bc <_dtoa_r+0x9fc>
 800c27a:	4601      	mov	r1, r0
 800c27c:	9008      	str	r0, [sp, #32]
 800c27e:	9804      	ldr	r0, [sp, #16]
 800c280:	f000 fafc 	bl	800c87c <__mcmp>
 800c284:	9a08      	ldr	r2, [sp, #32]
 800c286:	4603      	mov	r3, r0
 800c288:	4611      	mov	r1, r2
 800c28a:	4620      	mov	r0, r4
 800c28c:	9308      	str	r3, [sp, #32]
 800c28e:	f000 f913 	bl	800c4b8 <_Bfree>
 800c292:	9b08      	ldr	r3, [sp, #32]
 800c294:	b9a3      	cbnz	r3, 800c2c0 <_dtoa_r+0xa00>
 800c296:	9a06      	ldr	r2, [sp, #24]
 800c298:	b992      	cbnz	r2, 800c2c0 <_dtoa_r+0xa00>
 800c29a:	9a07      	ldr	r2, [sp, #28]
 800c29c:	b982      	cbnz	r2, 800c2c0 <_dtoa_r+0xa00>
 800c29e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c2a2:	d029      	beq.n	800c2f8 <_dtoa_r+0xa38>
 800c2a4:	9b00      	ldr	r3, [sp, #0]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	dd01      	ble.n	800c2ae <_dtoa_r+0x9ee>
 800c2aa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c2ae:	9b05      	ldr	r3, [sp, #20]
 800c2b0:	1c5d      	adds	r5, r3, #1
 800c2b2:	f883 8000 	strb.w	r8, [r3]
 800c2b6:	e782      	b.n	800c1be <_dtoa_r+0x8fe>
 800c2b8:	4630      	mov	r0, r6
 800c2ba:	e7c2      	b.n	800c242 <_dtoa_r+0x982>
 800c2bc:	2301      	movs	r3, #1
 800c2be:	e7e3      	b.n	800c288 <_dtoa_r+0x9c8>
 800c2c0:	9a00      	ldr	r2, [sp, #0]
 800c2c2:	2a00      	cmp	r2, #0
 800c2c4:	db04      	blt.n	800c2d0 <_dtoa_r+0xa10>
 800c2c6:	d125      	bne.n	800c314 <_dtoa_r+0xa54>
 800c2c8:	9a06      	ldr	r2, [sp, #24]
 800c2ca:	bb1a      	cbnz	r2, 800c314 <_dtoa_r+0xa54>
 800c2cc:	9a07      	ldr	r2, [sp, #28]
 800c2ce:	bb0a      	cbnz	r2, 800c314 <_dtoa_r+0xa54>
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	ddec      	ble.n	800c2ae <_dtoa_r+0x9ee>
 800c2d4:	2201      	movs	r2, #1
 800c2d6:	9904      	ldr	r1, [sp, #16]
 800c2d8:	4620      	mov	r0, r4
 800c2da:	f000 fa7b 	bl	800c7d4 <__lshift>
 800c2de:	4639      	mov	r1, r7
 800c2e0:	9004      	str	r0, [sp, #16]
 800c2e2:	f000 facb 	bl	800c87c <__mcmp>
 800c2e6:	2800      	cmp	r0, #0
 800c2e8:	dc03      	bgt.n	800c2f2 <_dtoa_r+0xa32>
 800c2ea:	d1e0      	bne.n	800c2ae <_dtoa_r+0x9ee>
 800c2ec:	f018 0f01 	tst.w	r8, #1
 800c2f0:	d0dd      	beq.n	800c2ae <_dtoa_r+0x9ee>
 800c2f2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c2f6:	d1d8      	bne.n	800c2aa <_dtoa_r+0x9ea>
 800c2f8:	9b05      	ldr	r3, [sp, #20]
 800c2fa:	9a05      	ldr	r2, [sp, #20]
 800c2fc:	1c5d      	adds	r5, r3, #1
 800c2fe:	2339      	movs	r3, #57	; 0x39
 800c300:	7013      	strb	r3, [r2, #0]
 800c302:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c306:	2b39      	cmp	r3, #57	; 0x39
 800c308:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c30c:	d04f      	beq.n	800c3ae <_dtoa_r+0xaee>
 800c30e:	3301      	adds	r3, #1
 800c310:	7013      	strb	r3, [r2, #0]
 800c312:	e754      	b.n	800c1be <_dtoa_r+0x8fe>
 800c314:	9a05      	ldr	r2, [sp, #20]
 800c316:	2b00      	cmp	r3, #0
 800c318:	f102 0501 	add.w	r5, r2, #1
 800c31c:	dd06      	ble.n	800c32c <_dtoa_r+0xa6c>
 800c31e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c322:	d0e9      	beq.n	800c2f8 <_dtoa_r+0xa38>
 800c324:	f108 0801 	add.w	r8, r8, #1
 800c328:	9b05      	ldr	r3, [sp, #20]
 800c32a:	e7c2      	b.n	800c2b2 <_dtoa_r+0x9f2>
 800c32c:	9a02      	ldr	r2, [sp, #8]
 800c32e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c332:	eba5 030b 	sub.w	r3, r5, fp
 800c336:	4293      	cmp	r3, r2
 800c338:	d021      	beq.n	800c37e <_dtoa_r+0xabe>
 800c33a:	2300      	movs	r3, #0
 800c33c:	220a      	movs	r2, #10
 800c33e:	9904      	ldr	r1, [sp, #16]
 800c340:	4620      	mov	r0, r4
 800c342:	f000 f8d0 	bl	800c4e6 <__multadd>
 800c346:	45b1      	cmp	r9, r6
 800c348:	9004      	str	r0, [sp, #16]
 800c34a:	f04f 0300 	mov.w	r3, #0
 800c34e:	f04f 020a 	mov.w	r2, #10
 800c352:	4649      	mov	r1, r9
 800c354:	4620      	mov	r0, r4
 800c356:	d105      	bne.n	800c364 <_dtoa_r+0xaa4>
 800c358:	f000 f8c5 	bl	800c4e6 <__multadd>
 800c35c:	4681      	mov	r9, r0
 800c35e:	4606      	mov	r6, r0
 800c360:	9505      	str	r5, [sp, #20]
 800c362:	e776      	b.n	800c252 <_dtoa_r+0x992>
 800c364:	f000 f8bf 	bl	800c4e6 <__multadd>
 800c368:	4631      	mov	r1, r6
 800c36a:	4681      	mov	r9, r0
 800c36c:	2300      	movs	r3, #0
 800c36e:	220a      	movs	r2, #10
 800c370:	4620      	mov	r0, r4
 800c372:	f000 f8b8 	bl	800c4e6 <__multadd>
 800c376:	4606      	mov	r6, r0
 800c378:	e7f2      	b.n	800c360 <_dtoa_r+0xaa0>
 800c37a:	f04f 0900 	mov.w	r9, #0
 800c37e:	2201      	movs	r2, #1
 800c380:	9904      	ldr	r1, [sp, #16]
 800c382:	4620      	mov	r0, r4
 800c384:	f000 fa26 	bl	800c7d4 <__lshift>
 800c388:	4639      	mov	r1, r7
 800c38a:	9004      	str	r0, [sp, #16]
 800c38c:	f000 fa76 	bl	800c87c <__mcmp>
 800c390:	2800      	cmp	r0, #0
 800c392:	dcb6      	bgt.n	800c302 <_dtoa_r+0xa42>
 800c394:	d102      	bne.n	800c39c <_dtoa_r+0xadc>
 800c396:	f018 0f01 	tst.w	r8, #1
 800c39a:	d1b2      	bne.n	800c302 <_dtoa_r+0xa42>
 800c39c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c3a0:	2b30      	cmp	r3, #48	; 0x30
 800c3a2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c3a6:	f47f af0a 	bne.w	800c1be <_dtoa_r+0x8fe>
 800c3aa:	4615      	mov	r5, r2
 800c3ac:	e7f6      	b.n	800c39c <_dtoa_r+0xadc>
 800c3ae:	4593      	cmp	fp, r2
 800c3b0:	d105      	bne.n	800c3be <_dtoa_r+0xafe>
 800c3b2:	2331      	movs	r3, #49	; 0x31
 800c3b4:	f10a 0a01 	add.w	sl, sl, #1
 800c3b8:	f88b 3000 	strb.w	r3, [fp]
 800c3bc:	e6ff      	b.n	800c1be <_dtoa_r+0x8fe>
 800c3be:	4615      	mov	r5, r2
 800c3c0:	e79f      	b.n	800c302 <_dtoa_r+0xa42>
 800c3c2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c428 <_dtoa_r+0xb68>
 800c3c6:	e007      	b.n	800c3d8 <_dtoa_r+0xb18>
 800c3c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3ca:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c42c <_dtoa_r+0xb6c>
 800c3ce:	b11b      	cbz	r3, 800c3d8 <_dtoa_r+0xb18>
 800c3d0:	f10b 0308 	add.w	r3, fp, #8
 800c3d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c3d6:	6013      	str	r3, [r2, #0]
 800c3d8:	4658      	mov	r0, fp
 800c3da:	b017      	add	sp, #92	; 0x5c
 800c3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3e0:	9b06      	ldr	r3, [sp, #24]
 800c3e2:	2b01      	cmp	r3, #1
 800c3e4:	f77f ae35 	ble.w	800c052 <_dtoa_r+0x792>
 800c3e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3ea:	9307      	str	r3, [sp, #28]
 800c3ec:	e649      	b.n	800c082 <_dtoa_r+0x7c2>
 800c3ee:	9b02      	ldr	r3, [sp, #8]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	dc03      	bgt.n	800c3fc <_dtoa_r+0xb3c>
 800c3f4:	9b06      	ldr	r3, [sp, #24]
 800c3f6:	2b02      	cmp	r3, #2
 800c3f8:	f73f aecc 	bgt.w	800c194 <_dtoa_r+0x8d4>
 800c3fc:	465d      	mov	r5, fp
 800c3fe:	4639      	mov	r1, r7
 800c400:	9804      	ldr	r0, [sp, #16]
 800c402:	f7ff f9cf 	bl	800b7a4 <quorem>
 800c406:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c40a:	f805 8b01 	strb.w	r8, [r5], #1
 800c40e:	9a02      	ldr	r2, [sp, #8]
 800c410:	eba5 030b 	sub.w	r3, r5, fp
 800c414:	429a      	cmp	r2, r3
 800c416:	ddb0      	ble.n	800c37a <_dtoa_r+0xaba>
 800c418:	2300      	movs	r3, #0
 800c41a:	220a      	movs	r2, #10
 800c41c:	9904      	ldr	r1, [sp, #16]
 800c41e:	4620      	mov	r0, r4
 800c420:	f000 f861 	bl	800c4e6 <__multadd>
 800c424:	9004      	str	r0, [sp, #16]
 800c426:	e7ea      	b.n	800c3fe <_dtoa_r+0xb3e>
 800c428:	0800d1a8 	.word	0x0800d1a8
 800c42c:	0800d1cc 	.word	0x0800d1cc

0800c430 <_localeconv_r>:
 800c430:	4b04      	ldr	r3, [pc, #16]	; (800c444 <_localeconv_r+0x14>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	6a18      	ldr	r0, [r3, #32]
 800c436:	4b04      	ldr	r3, [pc, #16]	; (800c448 <_localeconv_r+0x18>)
 800c438:	2800      	cmp	r0, #0
 800c43a:	bf08      	it	eq
 800c43c:	4618      	moveq	r0, r3
 800c43e:	30f0      	adds	r0, #240	; 0xf0
 800c440:	4770      	bx	lr
 800c442:	bf00      	nop
 800c444:	20000014 	.word	0x20000014
 800c448:	20000078 	.word	0x20000078

0800c44c <__malloc_lock>:
 800c44c:	4770      	bx	lr

0800c44e <__malloc_unlock>:
 800c44e:	4770      	bx	lr

0800c450 <_Balloc>:
 800c450:	b570      	push	{r4, r5, r6, lr}
 800c452:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c454:	4604      	mov	r4, r0
 800c456:	460e      	mov	r6, r1
 800c458:	b93d      	cbnz	r5, 800c46a <_Balloc+0x1a>
 800c45a:	2010      	movs	r0, #16
 800c45c:	f7fe fbd4 	bl	800ac08 <malloc>
 800c460:	6260      	str	r0, [r4, #36]	; 0x24
 800c462:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c466:	6005      	str	r5, [r0, #0]
 800c468:	60c5      	str	r5, [r0, #12]
 800c46a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c46c:	68eb      	ldr	r3, [r5, #12]
 800c46e:	b183      	cbz	r3, 800c492 <_Balloc+0x42>
 800c470:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c472:	68db      	ldr	r3, [r3, #12]
 800c474:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c478:	b9b8      	cbnz	r0, 800c4aa <_Balloc+0x5a>
 800c47a:	2101      	movs	r1, #1
 800c47c:	fa01 f506 	lsl.w	r5, r1, r6
 800c480:	1d6a      	adds	r2, r5, #5
 800c482:	0092      	lsls	r2, r2, #2
 800c484:	4620      	mov	r0, r4
 800c486:	f000 fabf 	bl	800ca08 <_calloc_r>
 800c48a:	b160      	cbz	r0, 800c4a6 <_Balloc+0x56>
 800c48c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c490:	e00e      	b.n	800c4b0 <_Balloc+0x60>
 800c492:	2221      	movs	r2, #33	; 0x21
 800c494:	2104      	movs	r1, #4
 800c496:	4620      	mov	r0, r4
 800c498:	f000 fab6 	bl	800ca08 <_calloc_r>
 800c49c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c49e:	60e8      	str	r0, [r5, #12]
 800c4a0:	68db      	ldr	r3, [r3, #12]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d1e4      	bne.n	800c470 <_Balloc+0x20>
 800c4a6:	2000      	movs	r0, #0
 800c4a8:	bd70      	pop	{r4, r5, r6, pc}
 800c4aa:	6802      	ldr	r2, [r0, #0]
 800c4ac:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c4b6:	e7f7      	b.n	800c4a8 <_Balloc+0x58>

0800c4b8 <_Bfree>:
 800c4b8:	b570      	push	{r4, r5, r6, lr}
 800c4ba:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c4bc:	4606      	mov	r6, r0
 800c4be:	460d      	mov	r5, r1
 800c4c0:	b93c      	cbnz	r4, 800c4d2 <_Bfree+0x1a>
 800c4c2:	2010      	movs	r0, #16
 800c4c4:	f7fe fba0 	bl	800ac08 <malloc>
 800c4c8:	6270      	str	r0, [r6, #36]	; 0x24
 800c4ca:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c4ce:	6004      	str	r4, [r0, #0]
 800c4d0:	60c4      	str	r4, [r0, #12]
 800c4d2:	b13d      	cbz	r5, 800c4e4 <_Bfree+0x2c>
 800c4d4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c4d6:	686a      	ldr	r2, [r5, #4]
 800c4d8:	68db      	ldr	r3, [r3, #12]
 800c4da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c4de:	6029      	str	r1, [r5, #0]
 800c4e0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c4e4:	bd70      	pop	{r4, r5, r6, pc}

0800c4e6 <__multadd>:
 800c4e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4ea:	690d      	ldr	r5, [r1, #16]
 800c4ec:	461f      	mov	r7, r3
 800c4ee:	4606      	mov	r6, r0
 800c4f0:	460c      	mov	r4, r1
 800c4f2:	f101 0c14 	add.w	ip, r1, #20
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	f8dc 0000 	ldr.w	r0, [ip]
 800c4fc:	b281      	uxth	r1, r0
 800c4fe:	fb02 7101 	mla	r1, r2, r1, r7
 800c502:	0c0f      	lsrs	r7, r1, #16
 800c504:	0c00      	lsrs	r0, r0, #16
 800c506:	fb02 7000 	mla	r0, r2, r0, r7
 800c50a:	b289      	uxth	r1, r1
 800c50c:	3301      	adds	r3, #1
 800c50e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c512:	429d      	cmp	r5, r3
 800c514:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c518:	f84c 1b04 	str.w	r1, [ip], #4
 800c51c:	dcec      	bgt.n	800c4f8 <__multadd+0x12>
 800c51e:	b1d7      	cbz	r7, 800c556 <__multadd+0x70>
 800c520:	68a3      	ldr	r3, [r4, #8]
 800c522:	42ab      	cmp	r3, r5
 800c524:	dc12      	bgt.n	800c54c <__multadd+0x66>
 800c526:	6861      	ldr	r1, [r4, #4]
 800c528:	4630      	mov	r0, r6
 800c52a:	3101      	adds	r1, #1
 800c52c:	f7ff ff90 	bl	800c450 <_Balloc>
 800c530:	6922      	ldr	r2, [r4, #16]
 800c532:	3202      	adds	r2, #2
 800c534:	f104 010c 	add.w	r1, r4, #12
 800c538:	4680      	mov	r8, r0
 800c53a:	0092      	lsls	r2, r2, #2
 800c53c:	300c      	adds	r0, #12
 800c53e:	f7fe fb73 	bl	800ac28 <memcpy>
 800c542:	4621      	mov	r1, r4
 800c544:	4630      	mov	r0, r6
 800c546:	f7ff ffb7 	bl	800c4b8 <_Bfree>
 800c54a:	4644      	mov	r4, r8
 800c54c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c550:	3501      	adds	r5, #1
 800c552:	615f      	str	r7, [r3, #20]
 800c554:	6125      	str	r5, [r4, #16]
 800c556:	4620      	mov	r0, r4
 800c558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c55c <__hi0bits>:
 800c55c:	0c02      	lsrs	r2, r0, #16
 800c55e:	0412      	lsls	r2, r2, #16
 800c560:	4603      	mov	r3, r0
 800c562:	b9b2      	cbnz	r2, 800c592 <__hi0bits+0x36>
 800c564:	0403      	lsls	r3, r0, #16
 800c566:	2010      	movs	r0, #16
 800c568:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c56c:	bf04      	itt	eq
 800c56e:	021b      	lsleq	r3, r3, #8
 800c570:	3008      	addeq	r0, #8
 800c572:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c576:	bf04      	itt	eq
 800c578:	011b      	lsleq	r3, r3, #4
 800c57a:	3004      	addeq	r0, #4
 800c57c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c580:	bf04      	itt	eq
 800c582:	009b      	lsleq	r3, r3, #2
 800c584:	3002      	addeq	r0, #2
 800c586:	2b00      	cmp	r3, #0
 800c588:	db06      	blt.n	800c598 <__hi0bits+0x3c>
 800c58a:	005b      	lsls	r3, r3, #1
 800c58c:	d503      	bpl.n	800c596 <__hi0bits+0x3a>
 800c58e:	3001      	adds	r0, #1
 800c590:	4770      	bx	lr
 800c592:	2000      	movs	r0, #0
 800c594:	e7e8      	b.n	800c568 <__hi0bits+0xc>
 800c596:	2020      	movs	r0, #32
 800c598:	4770      	bx	lr

0800c59a <__lo0bits>:
 800c59a:	6803      	ldr	r3, [r0, #0]
 800c59c:	f013 0207 	ands.w	r2, r3, #7
 800c5a0:	4601      	mov	r1, r0
 800c5a2:	d00b      	beq.n	800c5bc <__lo0bits+0x22>
 800c5a4:	07da      	lsls	r2, r3, #31
 800c5a6:	d423      	bmi.n	800c5f0 <__lo0bits+0x56>
 800c5a8:	0798      	lsls	r0, r3, #30
 800c5aa:	bf49      	itett	mi
 800c5ac:	085b      	lsrmi	r3, r3, #1
 800c5ae:	089b      	lsrpl	r3, r3, #2
 800c5b0:	2001      	movmi	r0, #1
 800c5b2:	600b      	strmi	r3, [r1, #0]
 800c5b4:	bf5c      	itt	pl
 800c5b6:	600b      	strpl	r3, [r1, #0]
 800c5b8:	2002      	movpl	r0, #2
 800c5ba:	4770      	bx	lr
 800c5bc:	b298      	uxth	r0, r3
 800c5be:	b9a8      	cbnz	r0, 800c5ec <__lo0bits+0x52>
 800c5c0:	0c1b      	lsrs	r3, r3, #16
 800c5c2:	2010      	movs	r0, #16
 800c5c4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c5c8:	bf04      	itt	eq
 800c5ca:	0a1b      	lsreq	r3, r3, #8
 800c5cc:	3008      	addeq	r0, #8
 800c5ce:	071a      	lsls	r2, r3, #28
 800c5d0:	bf04      	itt	eq
 800c5d2:	091b      	lsreq	r3, r3, #4
 800c5d4:	3004      	addeq	r0, #4
 800c5d6:	079a      	lsls	r2, r3, #30
 800c5d8:	bf04      	itt	eq
 800c5da:	089b      	lsreq	r3, r3, #2
 800c5dc:	3002      	addeq	r0, #2
 800c5de:	07da      	lsls	r2, r3, #31
 800c5e0:	d402      	bmi.n	800c5e8 <__lo0bits+0x4e>
 800c5e2:	085b      	lsrs	r3, r3, #1
 800c5e4:	d006      	beq.n	800c5f4 <__lo0bits+0x5a>
 800c5e6:	3001      	adds	r0, #1
 800c5e8:	600b      	str	r3, [r1, #0]
 800c5ea:	4770      	bx	lr
 800c5ec:	4610      	mov	r0, r2
 800c5ee:	e7e9      	b.n	800c5c4 <__lo0bits+0x2a>
 800c5f0:	2000      	movs	r0, #0
 800c5f2:	4770      	bx	lr
 800c5f4:	2020      	movs	r0, #32
 800c5f6:	4770      	bx	lr

0800c5f8 <__i2b>:
 800c5f8:	b510      	push	{r4, lr}
 800c5fa:	460c      	mov	r4, r1
 800c5fc:	2101      	movs	r1, #1
 800c5fe:	f7ff ff27 	bl	800c450 <_Balloc>
 800c602:	2201      	movs	r2, #1
 800c604:	6144      	str	r4, [r0, #20]
 800c606:	6102      	str	r2, [r0, #16]
 800c608:	bd10      	pop	{r4, pc}

0800c60a <__multiply>:
 800c60a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c60e:	4614      	mov	r4, r2
 800c610:	690a      	ldr	r2, [r1, #16]
 800c612:	6923      	ldr	r3, [r4, #16]
 800c614:	429a      	cmp	r2, r3
 800c616:	bfb8      	it	lt
 800c618:	460b      	movlt	r3, r1
 800c61a:	4688      	mov	r8, r1
 800c61c:	bfbc      	itt	lt
 800c61e:	46a0      	movlt	r8, r4
 800c620:	461c      	movlt	r4, r3
 800c622:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c626:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c62a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c62e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c632:	eb07 0609 	add.w	r6, r7, r9
 800c636:	42b3      	cmp	r3, r6
 800c638:	bfb8      	it	lt
 800c63a:	3101      	addlt	r1, #1
 800c63c:	f7ff ff08 	bl	800c450 <_Balloc>
 800c640:	f100 0514 	add.w	r5, r0, #20
 800c644:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c648:	462b      	mov	r3, r5
 800c64a:	2200      	movs	r2, #0
 800c64c:	4573      	cmp	r3, lr
 800c64e:	d316      	bcc.n	800c67e <__multiply+0x74>
 800c650:	f104 0214 	add.w	r2, r4, #20
 800c654:	f108 0114 	add.w	r1, r8, #20
 800c658:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c65c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c660:	9300      	str	r3, [sp, #0]
 800c662:	9b00      	ldr	r3, [sp, #0]
 800c664:	9201      	str	r2, [sp, #4]
 800c666:	4293      	cmp	r3, r2
 800c668:	d80c      	bhi.n	800c684 <__multiply+0x7a>
 800c66a:	2e00      	cmp	r6, #0
 800c66c:	dd03      	ble.n	800c676 <__multiply+0x6c>
 800c66e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c672:	2b00      	cmp	r3, #0
 800c674:	d05d      	beq.n	800c732 <__multiply+0x128>
 800c676:	6106      	str	r6, [r0, #16]
 800c678:	b003      	add	sp, #12
 800c67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c67e:	f843 2b04 	str.w	r2, [r3], #4
 800c682:	e7e3      	b.n	800c64c <__multiply+0x42>
 800c684:	f8b2 b000 	ldrh.w	fp, [r2]
 800c688:	f1bb 0f00 	cmp.w	fp, #0
 800c68c:	d023      	beq.n	800c6d6 <__multiply+0xcc>
 800c68e:	4689      	mov	r9, r1
 800c690:	46ac      	mov	ip, r5
 800c692:	f04f 0800 	mov.w	r8, #0
 800c696:	f859 4b04 	ldr.w	r4, [r9], #4
 800c69a:	f8dc a000 	ldr.w	sl, [ip]
 800c69e:	b2a3      	uxth	r3, r4
 800c6a0:	fa1f fa8a 	uxth.w	sl, sl
 800c6a4:	fb0b a303 	mla	r3, fp, r3, sl
 800c6a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c6ac:	f8dc 4000 	ldr.w	r4, [ip]
 800c6b0:	4443      	add	r3, r8
 800c6b2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c6b6:	fb0b 840a 	mla	r4, fp, sl, r8
 800c6ba:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c6be:	46e2      	mov	sl, ip
 800c6c0:	b29b      	uxth	r3, r3
 800c6c2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c6c6:	454f      	cmp	r7, r9
 800c6c8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c6cc:	f84a 3b04 	str.w	r3, [sl], #4
 800c6d0:	d82b      	bhi.n	800c72a <__multiply+0x120>
 800c6d2:	f8cc 8004 	str.w	r8, [ip, #4]
 800c6d6:	9b01      	ldr	r3, [sp, #4]
 800c6d8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c6dc:	3204      	adds	r2, #4
 800c6de:	f1ba 0f00 	cmp.w	sl, #0
 800c6e2:	d020      	beq.n	800c726 <__multiply+0x11c>
 800c6e4:	682b      	ldr	r3, [r5, #0]
 800c6e6:	4689      	mov	r9, r1
 800c6e8:	46a8      	mov	r8, r5
 800c6ea:	f04f 0b00 	mov.w	fp, #0
 800c6ee:	f8b9 c000 	ldrh.w	ip, [r9]
 800c6f2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c6f6:	fb0a 440c 	mla	r4, sl, ip, r4
 800c6fa:	445c      	add	r4, fp
 800c6fc:	46c4      	mov	ip, r8
 800c6fe:	b29b      	uxth	r3, r3
 800c700:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c704:	f84c 3b04 	str.w	r3, [ip], #4
 800c708:	f859 3b04 	ldr.w	r3, [r9], #4
 800c70c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c710:	0c1b      	lsrs	r3, r3, #16
 800c712:	fb0a b303 	mla	r3, sl, r3, fp
 800c716:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c71a:	454f      	cmp	r7, r9
 800c71c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c720:	d805      	bhi.n	800c72e <__multiply+0x124>
 800c722:	f8c8 3004 	str.w	r3, [r8, #4]
 800c726:	3504      	adds	r5, #4
 800c728:	e79b      	b.n	800c662 <__multiply+0x58>
 800c72a:	46d4      	mov	ip, sl
 800c72c:	e7b3      	b.n	800c696 <__multiply+0x8c>
 800c72e:	46e0      	mov	r8, ip
 800c730:	e7dd      	b.n	800c6ee <__multiply+0xe4>
 800c732:	3e01      	subs	r6, #1
 800c734:	e799      	b.n	800c66a <__multiply+0x60>
	...

0800c738 <__pow5mult>:
 800c738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c73c:	4615      	mov	r5, r2
 800c73e:	f012 0203 	ands.w	r2, r2, #3
 800c742:	4606      	mov	r6, r0
 800c744:	460f      	mov	r7, r1
 800c746:	d007      	beq.n	800c758 <__pow5mult+0x20>
 800c748:	3a01      	subs	r2, #1
 800c74a:	4c21      	ldr	r4, [pc, #132]	; (800c7d0 <__pow5mult+0x98>)
 800c74c:	2300      	movs	r3, #0
 800c74e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c752:	f7ff fec8 	bl	800c4e6 <__multadd>
 800c756:	4607      	mov	r7, r0
 800c758:	10ad      	asrs	r5, r5, #2
 800c75a:	d035      	beq.n	800c7c8 <__pow5mult+0x90>
 800c75c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c75e:	b93c      	cbnz	r4, 800c770 <__pow5mult+0x38>
 800c760:	2010      	movs	r0, #16
 800c762:	f7fe fa51 	bl	800ac08 <malloc>
 800c766:	6270      	str	r0, [r6, #36]	; 0x24
 800c768:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c76c:	6004      	str	r4, [r0, #0]
 800c76e:	60c4      	str	r4, [r0, #12]
 800c770:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c774:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c778:	b94c      	cbnz	r4, 800c78e <__pow5mult+0x56>
 800c77a:	f240 2171 	movw	r1, #625	; 0x271
 800c77e:	4630      	mov	r0, r6
 800c780:	f7ff ff3a 	bl	800c5f8 <__i2b>
 800c784:	2300      	movs	r3, #0
 800c786:	f8c8 0008 	str.w	r0, [r8, #8]
 800c78a:	4604      	mov	r4, r0
 800c78c:	6003      	str	r3, [r0, #0]
 800c78e:	f04f 0800 	mov.w	r8, #0
 800c792:	07eb      	lsls	r3, r5, #31
 800c794:	d50a      	bpl.n	800c7ac <__pow5mult+0x74>
 800c796:	4639      	mov	r1, r7
 800c798:	4622      	mov	r2, r4
 800c79a:	4630      	mov	r0, r6
 800c79c:	f7ff ff35 	bl	800c60a <__multiply>
 800c7a0:	4639      	mov	r1, r7
 800c7a2:	4681      	mov	r9, r0
 800c7a4:	4630      	mov	r0, r6
 800c7a6:	f7ff fe87 	bl	800c4b8 <_Bfree>
 800c7aa:	464f      	mov	r7, r9
 800c7ac:	106d      	asrs	r5, r5, #1
 800c7ae:	d00b      	beq.n	800c7c8 <__pow5mult+0x90>
 800c7b0:	6820      	ldr	r0, [r4, #0]
 800c7b2:	b938      	cbnz	r0, 800c7c4 <__pow5mult+0x8c>
 800c7b4:	4622      	mov	r2, r4
 800c7b6:	4621      	mov	r1, r4
 800c7b8:	4630      	mov	r0, r6
 800c7ba:	f7ff ff26 	bl	800c60a <__multiply>
 800c7be:	6020      	str	r0, [r4, #0]
 800c7c0:	f8c0 8000 	str.w	r8, [r0]
 800c7c4:	4604      	mov	r4, r0
 800c7c6:	e7e4      	b.n	800c792 <__pow5mult+0x5a>
 800c7c8:	4638      	mov	r0, r7
 800c7ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7ce:	bf00      	nop
 800c7d0:	0800d2d0 	.word	0x0800d2d0

0800c7d4 <__lshift>:
 800c7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7d8:	460c      	mov	r4, r1
 800c7da:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c7de:	6923      	ldr	r3, [r4, #16]
 800c7e0:	6849      	ldr	r1, [r1, #4]
 800c7e2:	eb0a 0903 	add.w	r9, sl, r3
 800c7e6:	68a3      	ldr	r3, [r4, #8]
 800c7e8:	4607      	mov	r7, r0
 800c7ea:	4616      	mov	r6, r2
 800c7ec:	f109 0501 	add.w	r5, r9, #1
 800c7f0:	42ab      	cmp	r3, r5
 800c7f2:	db32      	blt.n	800c85a <__lshift+0x86>
 800c7f4:	4638      	mov	r0, r7
 800c7f6:	f7ff fe2b 	bl	800c450 <_Balloc>
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	4680      	mov	r8, r0
 800c7fe:	f100 0114 	add.w	r1, r0, #20
 800c802:	461a      	mov	r2, r3
 800c804:	4553      	cmp	r3, sl
 800c806:	db2b      	blt.n	800c860 <__lshift+0x8c>
 800c808:	6920      	ldr	r0, [r4, #16]
 800c80a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c80e:	f104 0314 	add.w	r3, r4, #20
 800c812:	f016 021f 	ands.w	r2, r6, #31
 800c816:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c81a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c81e:	d025      	beq.n	800c86c <__lshift+0x98>
 800c820:	f1c2 0e20 	rsb	lr, r2, #32
 800c824:	2000      	movs	r0, #0
 800c826:	681e      	ldr	r6, [r3, #0]
 800c828:	468a      	mov	sl, r1
 800c82a:	4096      	lsls	r6, r2
 800c82c:	4330      	orrs	r0, r6
 800c82e:	f84a 0b04 	str.w	r0, [sl], #4
 800c832:	f853 0b04 	ldr.w	r0, [r3], #4
 800c836:	459c      	cmp	ip, r3
 800c838:	fa20 f00e 	lsr.w	r0, r0, lr
 800c83c:	d814      	bhi.n	800c868 <__lshift+0x94>
 800c83e:	6048      	str	r0, [r1, #4]
 800c840:	b108      	cbz	r0, 800c846 <__lshift+0x72>
 800c842:	f109 0502 	add.w	r5, r9, #2
 800c846:	3d01      	subs	r5, #1
 800c848:	4638      	mov	r0, r7
 800c84a:	f8c8 5010 	str.w	r5, [r8, #16]
 800c84e:	4621      	mov	r1, r4
 800c850:	f7ff fe32 	bl	800c4b8 <_Bfree>
 800c854:	4640      	mov	r0, r8
 800c856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c85a:	3101      	adds	r1, #1
 800c85c:	005b      	lsls	r3, r3, #1
 800c85e:	e7c7      	b.n	800c7f0 <__lshift+0x1c>
 800c860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c864:	3301      	adds	r3, #1
 800c866:	e7cd      	b.n	800c804 <__lshift+0x30>
 800c868:	4651      	mov	r1, sl
 800c86a:	e7dc      	b.n	800c826 <__lshift+0x52>
 800c86c:	3904      	subs	r1, #4
 800c86e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c872:	f841 2f04 	str.w	r2, [r1, #4]!
 800c876:	459c      	cmp	ip, r3
 800c878:	d8f9      	bhi.n	800c86e <__lshift+0x9a>
 800c87a:	e7e4      	b.n	800c846 <__lshift+0x72>

0800c87c <__mcmp>:
 800c87c:	6903      	ldr	r3, [r0, #16]
 800c87e:	690a      	ldr	r2, [r1, #16]
 800c880:	1a9b      	subs	r3, r3, r2
 800c882:	b530      	push	{r4, r5, lr}
 800c884:	d10c      	bne.n	800c8a0 <__mcmp+0x24>
 800c886:	0092      	lsls	r2, r2, #2
 800c888:	3014      	adds	r0, #20
 800c88a:	3114      	adds	r1, #20
 800c88c:	1884      	adds	r4, r0, r2
 800c88e:	4411      	add	r1, r2
 800c890:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c894:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c898:	4295      	cmp	r5, r2
 800c89a:	d003      	beq.n	800c8a4 <__mcmp+0x28>
 800c89c:	d305      	bcc.n	800c8aa <__mcmp+0x2e>
 800c89e:	2301      	movs	r3, #1
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	bd30      	pop	{r4, r5, pc}
 800c8a4:	42a0      	cmp	r0, r4
 800c8a6:	d3f3      	bcc.n	800c890 <__mcmp+0x14>
 800c8a8:	e7fa      	b.n	800c8a0 <__mcmp+0x24>
 800c8aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c8ae:	e7f7      	b.n	800c8a0 <__mcmp+0x24>

0800c8b0 <__mdiff>:
 800c8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8b4:	460d      	mov	r5, r1
 800c8b6:	4607      	mov	r7, r0
 800c8b8:	4611      	mov	r1, r2
 800c8ba:	4628      	mov	r0, r5
 800c8bc:	4614      	mov	r4, r2
 800c8be:	f7ff ffdd 	bl	800c87c <__mcmp>
 800c8c2:	1e06      	subs	r6, r0, #0
 800c8c4:	d108      	bne.n	800c8d8 <__mdiff+0x28>
 800c8c6:	4631      	mov	r1, r6
 800c8c8:	4638      	mov	r0, r7
 800c8ca:	f7ff fdc1 	bl	800c450 <_Balloc>
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c8d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8d8:	bfa4      	itt	ge
 800c8da:	4623      	movge	r3, r4
 800c8dc:	462c      	movge	r4, r5
 800c8de:	4638      	mov	r0, r7
 800c8e0:	6861      	ldr	r1, [r4, #4]
 800c8e2:	bfa6      	itte	ge
 800c8e4:	461d      	movge	r5, r3
 800c8e6:	2600      	movge	r6, #0
 800c8e8:	2601      	movlt	r6, #1
 800c8ea:	f7ff fdb1 	bl	800c450 <_Balloc>
 800c8ee:	692b      	ldr	r3, [r5, #16]
 800c8f0:	60c6      	str	r6, [r0, #12]
 800c8f2:	6926      	ldr	r6, [r4, #16]
 800c8f4:	f105 0914 	add.w	r9, r5, #20
 800c8f8:	f104 0214 	add.w	r2, r4, #20
 800c8fc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c900:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c904:	f100 0514 	add.w	r5, r0, #20
 800c908:	f04f 0e00 	mov.w	lr, #0
 800c90c:	f852 ab04 	ldr.w	sl, [r2], #4
 800c910:	f859 4b04 	ldr.w	r4, [r9], #4
 800c914:	fa1e f18a 	uxtah	r1, lr, sl
 800c918:	b2a3      	uxth	r3, r4
 800c91a:	1ac9      	subs	r1, r1, r3
 800c91c:	0c23      	lsrs	r3, r4, #16
 800c91e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c922:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c926:	b289      	uxth	r1, r1
 800c928:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c92c:	45c8      	cmp	r8, r9
 800c92e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c932:	4694      	mov	ip, r2
 800c934:	f845 3b04 	str.w	r3, [r5], #4
 800c938:	d8e8      	bhi.n	800c90c <__mdiff+0x5c>
 800c93a:	45bc      	cmp	ip, r7
 800c93c:	d304      	bcc.n	800c948 <__mdiff+0x98>
 800c93e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c942:	b183      	cbz	r3, 800c966 <__mdiff+0xb6>
 800c944:	6106      	str	r6, [r0, #16]
 800c946:	e7c5      	b.n	800c8d4 <__mdiff+0x24>
 800c948:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c94c:	fa1e f381 	uxtah	r3, lr, r1
 800c950:	141a      	asrs	r2, r3, #16
 800c952:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c956:	b29b      	uxth	r3, r3
 800c958:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c95c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c960:	f845 3b04 	str.w	r3, [r5], #4
 800c964:	e7e9      	b.n	800c93a <__mdiff+0x8a>
 800c966:	3e01      	subs	r6, #1
 800c968:	e7e9      	b.n	800c93e <__mdiff+0x8e>

0800c96a <__d2b>:
 800c96a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c96e:	460e      	mov	r6, r1
 800c970:	2101      	movs	r1, #1
 800c972:	ec59 8b10 	vmov	r8, r9, d0
 800c976:	4615      	mov	r5, r2
 800c978:	f7ff fd6a 	bl	800c450 <_Balloc>
 800c97c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c980:	4607      	mov	r7, r0
 800c982:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c986:	bb34      	cbnz	r4, 800c9d6 <__d2b+0x6c>
 800c988:	9301      	str	r3, [sp, #4]
 800c98a:	f1b8 0300 	subs.w	r3, r8, #0
 800c98e:	d027      	beq.n	800c9e0 <__d2b+0x76>
 800c990:	a802      	add	r0, sp, #8
 800c992:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c996:	f7ff fe00 	bl	800c59a <__lo0bits>
 800c99a:	9900      	ldr	r1, [sp, #0]
 800c99c:	b1f0      	cbz	r0, 800c9dc <__d2b+0x72>
 800c99e:	9a01      	ldr	r2, [sp, #4]
 800c9a0:	f1c0 0320 	rsb	r3, r0, #32
 800c9a4:	fa02 f303 	lsl.w	r3, r2, r3
 800c9a8:	430b      	orrs	r3, r1
 800c9aa:	40c2      	lsrs	r2, r0
 800c9ac:	617b      	str	r3, [r7, #20]
 800c9ae:	9201      	str	r2, [sp, #4]
 800c9b0:	9b01      	ldr	r3, [sp, #4]
 800c9b2:	61bb      	str	r3, [r7, #24]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	bf14      	ite	ne
 800c9b8:	2102      	movne	r1, #2
 800c9ba:	2101      	moveq	r1, #1
 800c9bc:	6139      	str	r1, [r7, #16]
 800c9be:	b1c4      	cbz	r4, 800c9f2 <__d2b+0x88>
 800c9c0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c9c4:	4404      	add	r4, r0
 800c9c6:	6034      	str	r4, [r6, #0]
 800c9c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c9cc:	6028      	str	r0, [r5, #0]
 800c9ce:	4638      	mov	r0, r7
 800c9d0:	b003      	add	sp, #12
 800c9d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c9da:	e7d5      	b.n	800c988 <__d2b+0x1e>
 800c9dc:	6179      	str	r1, [r7, #20]
 800c9de:	e7e7      	b.n	800c9b0 <__d2b+0x46>
 800c9e0:	a801      	add	r0, sp, #4
 800c9e2:	f7ff fdda 	bl	800c59a <__lo0bits>
 800c9e6:	9b01      	ldr	r3, [sp, #4]
 800c9e8:	617b      	str	r3, [r7, #20]
 800c9ea:	2101      	movs	r1, #1
 800c9ec:	6139      	str	r1, [r7, #16]
 800c9ee:	3020      	adds	r0, #32
 800c9f0:	e7e5      	b.n	800c9be <__d2b+0x54>
 800c9f2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c9f6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c9fa:	6030      	str	r0, [r6, #0]
 800c9fc:	6918      	ldr	r0, [r3, #16]
 800c9fe:	f7ff fdad 	bl	800c55c <__hi0bits>
 800ca02:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ca06:	e7e1      	b.n	800c9cc <__d2b+0x62>

0800ca08 <_calloc_r>:
 800ca08:	b538      	push	{r3, r4, r5, lr}
 800ca0a:	fb02 f401 	mul.w	r4, r2, r1
 800ca0e:	4621      	mov	r1, r4
 800ca10:	f7fe f984 	bl	800ad1c <_malloc_r>
 800ca14:	4605      	mov	r5, r0
 800ca16:	b118      	cbz	r0, 800ca20 <_calloc_r+0x18>
 800ca18:	4622      	mov	r2, r4
 800ca1a:	2100      	movs	r1, #0
 800ca1c:	f7fe f928 	bl	800ac70 <memset>
 800ca20:	4628      	mov	r0, r5
 800ca22:	bd38      	pop	{r3, r4, r5, pc}

0800ca24 <__ssputs_r>:
 800ca24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca28:	688e      	ldr	r6, [r1, #8]
 800ca2a:	429e      	cmp	r6, r3
 800ca2c:	4682      	mov	sl, r0
 800ca2e:	460c      	mov	r4, r1
 800ca30:	4690      	mov	r8, r2
 800ca32:	4699      	mov	r9, r3
 800ca34:	d837      	bhi.n	800caa6 <__ssputs_r+0x82>
 800ca36:	898a      	ldrh	r2, [r1, #12]
 800ca38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ca3c:	d031      	beq.n	800caa2 <__ssputs_r+0x7e>
 800ca3e:	6825      	ldr	r5, [r4, #0]
 800ca40:	6909      	ldr	r1, [r1, #16]
 800ca42:	1a6f      	subs	r7, r5, r1
 800ca44:	6965      	ldr	r5, [r4, #20]
 800ca46:	2302      	movs	r3, #2
 800ca48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca4c:	fb95 f5f3 	sdiv	r5, r5, r3
 800ca50:	f109 0301 	add.w	r3, r9, #1
 800ca54:	443b      	add	r3, r7
 800ca56:	429d      	cmp	r5, r3
 800ca58:	bf38      	it	cc
 800ca5a:	461d      	movcc	r5, r3
 800ca5c:	0553      	lsls	r3, r2, #21
 800ca5e:	d530      	bpl.n	800cac2 <__ssputs_r+0x9e>
 800ca60:	4629      	mov	r1, r5
 800ca62:	f7fe f95b 	bl	800ad1c <_malloc_r>
 800ca66:	4606      	mov	r6, r0
 800ca68:	b950      	cbnz	r0, 800ca80 <__ssputs_r+0x5c>
 800ca6a:	230c      	movs	r3, #12
 800ca6c:	f8ca 3000 	str.w	r3, [sl]
 800ca70:	89a3      	ldrh	r3, [r4, #12]
 800ca72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca76:	81a3      	strh	r3, [r4, #12]
 800ca78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca80:	463a      	mov	r2, r7
 800ca82:	6921      	ldr	r1, [r4, #16]
 800ca84:	f7fe f8d0 	bl	800ac28 <memcpy>
 800ca88:	89a3      	ldrh	r3, [r4, #12]
 800ca8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ca8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca92:	81a3      	strh	r3, [r4, #12]
 800ca94:	6126      	str	r6, [r4, #16]
 800ca96:	6165      	str	r5, [r4, #20]
 800ca98:	443e      	add	r6, r7
 800ca9a:	1bed      	subs	r5, r5, r7
 800ca9c:	6026      	str	r6, [r4, #0]
 800ca9e:	60a5      	str	r5, [r4, #8]
 800caa0:	464e      	mov	r6, r9
 800caa2:	454e      	cmp	r6, r9
 800caa4:	d900      	bls.n	800caa8 <__ssputs_r+0x84>
 800caa6:	464e      	mov	r6, r9
 800caa8:	4632      	mov	r2, r6
 800caaa:	4641      	mov	r1, r8
 800caac:	6820      	ldr	r0, [r4, #0]
 800caae:	f7fe f8c6 	bl	800ac3e <memmove>
 800cab2:	68a3      	ldr	r3, [r4, #8]
 800cab4:	1b9b      	subs	r3, r3, r6
 800cab6:	60a3      	str	r3, [r4, #8]
 800cab8:	6823      	ldr	r3, [r4, #0]
 800caba:	441e      	add	r6, r3
 800cabc:	6026      	str	r6, [r4, #0]
 800cabe:	2000      	movs	r0, #0
 800cac0:	e7dc      	b.n	800ca7c <__ssputs_r+0x58>
 800cac2:	462a      	mov	r2, r5
 800cac4:	f000 f912 	bl	800ccec <_realloc_r>
 800cac8:	4606      	mov	r6, r0
 800caca:	2800      	cmp	r0, #0
 800cacc:	d1e2      	bne.n	800ca94 <__ssputs_r+0x70>
 800cace:	6921      	ldr	r1, [r4, #16]
 800cad0:	4650      	mov	r0, sl
 800cad2:	f7fe f8d5 	bl	800ac80 <_free_r>
 800cad6:	e7c8      	b.n	800ca6a <__ssputs_r+0x46>

0800cad8 <_svfiprintf_r>:
 800cad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cadc:	461d      	mov	r5, r3
 800cade:	898b      	ldrh	r3, [r1, #12]
 800cae0:	061f      	lsls	r7, r3, #24
 800cae2:	b09d      	sub	sp, #116	; 0x74
 800cae4:	4680      	mov	r8, r0
 800cae6:	460c      	mov	r4, r1
 800cae8:	4616      	mov	r6, r2
 800caea:	d50f      	bpl.n	800cb0c <_svfiprintf_r+0x34>
 800caec:	690b      	ldr	r3, [r1, #16]
 800caee:	b96b      	cbnz	r3, 800cb0c <_svfiprintf_r+0x34>
 800caf0:	2140      	movs	r1, #64	; 0x40
 800caf2:	f7fe f913 	bl	800ad1c <_malloc_r>
 800caf6:	6020      	str	r0, [r4, #0]
 800caf8:	6120      	str	r0, [r4, #16]
 800cafa:	b928      	cbnz	r0, 800cb08 <_svfiprintf_r+0x30>
 800cafc:	230c      	movs	r3, #12
 800cafe:	f8c8 3000 	str.w	r3, [r8]
 800cb02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb06:	e0c8      	b.n	800cc9a <_svfiprintf_r+0x1c2>
 800cb08:	2340      	movs	r3, #64	; 0x40
 800cb0a:	6163      	str	r3, [r4, #20]
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	9309      	str	r3, [sp, #36]	; 0x24
 800cb10:	2320      	movs	r3, #32
 800cb12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb16:	2330      	movs	r3, #48	; 0x30
 800cb18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb1c:	9503      	str	r5, [sp, #12]
 800cb1e:	f04f 0b01 	mov.w	fp, #1
 800cb22:	4637      	mov	r7, r6
 800cb24:	463d      	mov	r5, r7
 800cb26:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cb2a:	b10b      	cbz	r3, 800cb30 <_svfiprintf_r+0x58>
 800cb2c:	2b25      	cmp	r3, #37	; 0x25
 800cb2e:	d13e      	bne.n	800cbae <_svfiprintf_r+0xd6>
 800cb30:	ebb7 0a06 	subs.w	sl, r7, r6
 800cb34:	d00b      	beq.n	800cb4e <_svfiprintf_r+0x76>
 800cb36:	4653      	mov	r3, sl
 800cb38:	4632      	mov	r2, r6
 800cb3a:	4621      	mov	r1, r4
 800cb3c:	4640      	mov	r0, r8
 800cb3e:	f7ff ff71 	bl	800ca24 <__ssputs_r>
 800cb42:	3001      	adds	r0, #1
 800cb44:	f000 80a4 	beq.w	800cc90 <_svfiprintf_r+0x1b8>
 800cb48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb4a:	4453      	add	r3, sl
 800cb4c:	9309      	str	r3, [sp, #36]	; 0x24
 800cb4e:	783b      	ldrb	r3, [r7, #0]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	f000 809d 	beq.w	800cc90 <_svfiprintf_r+0x1b8>
 800cb56:	2300      	movs	r3, #0
 800cb58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb60:	9304      	str	r3, [sp, #16]
 800cb62:	9307      	str	r3, [sp, #28]
 800cb64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb68:	931a      	str	r3, [sp, #104]	; 0x68
 800cb6a:	462f      	mov	r7, r5
 800cb6c:	2205      	movs	r2, #5
 800cb6e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800cb72:	4850      	ldr	r0, [pc, #320]	; (800ccb4 <_svfiprintf_r+0x1dc>)
 800cb74:	f7f3 fb4c 	bl	8000210 <memchr>
 800cb78:	9b04      	ldr	r3, [sp, #16]
 800cb7a:	b9d0      	cbnz	r0, 800cbb2 <_svfiprintf_r+0xda>
 800cb7c:	06d9      	lsls	r1, r3, #27
 800cb7e:	bf44      	itt	mi
 800cb80:	2220      	movmi	r2, #32
 800cb82:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cb86:	071a      	lsls	r2, r3, #28
 800cb88:	bf44      	itt	mi
 800cb8a:	222b      	movmi	r2, #43	; 0x2b
 800cb8c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cb90:	782a      	ldrb	r2, [r5, #0]
 800cb92:	2a2a      	cmp	r2, #42	; 0x2a
 800cb94:	d015      	beq.n	800cbc2 <_svfiprintf_r+0xea>
 800cb96:	9a07      	ldr	r2, [sp, #28]
 800cb98:	462f      	mov	r7, r5
 800cb9a:	2000      	movs	r0, #0
 800cb9c:	250a      	movs	r5, #10
 800cb9e:	4639      	mov	r1, r7
 800cba0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cba4:	3b30      	subs	r3, #48	; 0x30
 800cba6:	2b09      	cmp	r3, #9
 800cba8:	d94d      	bls.n	800cc46 <_svfiprintf_r+0x16e>
 800cbaa:	b1b8      	cbz	r0, 800cbdc <_svfiprintf_r+0x104>
 800cbac:	e00f      	b.n	800cbce <_svfiprintf_r+0xf6>
 800cbae:	462f      	mov	r7, r5
 800cbb0:	e7b8      	b.n	800cb24 <_svfiprintf_r+0x4c>
 800cbb2:	4a40      	ldr	r2, [pc, #256]	; (800ccb4 <_svfiprintf_r+0x1dc>)
 800cbb4:	1a80      	subs	r0, r0, r2
 800cbb6:	fa0b f000 	lsl.w	r0, fp, r0
 800cbba:	4318      	orrs	r0, r3
 800cbbc:	9004      	str	r0, [sp, #16]
 800cbbe:	463d      	mov	r5, r7
 800cbc0:	e7d3      	b.n	800cb6a <_svfiprintf_r+0x92>
 800cbc2:	9a03      	ldr	r2, [sp, #12]
 800cbc4:	1d11      	adds	r1, r2, #4
 800cbc6:	6812      	ldr	r2, [r2, #0]
 800cbc8:	9103      	str	r1, [sp, #12]
 800cbca:	2a00      	cmp	r2, #0
 800cbcc:	db01      	blt.n	800cbd2 <_svfiprintf_r+0xfa>
 800cbce:	9207      	str	r2, [sp, #28]
 800cbd0:	e004      	b.n	800cbdc <_svfiprintf_r+0x104>
 800cbd2:	4252      	negs	r2, r2
 800cbd4:	f043 0302 	orr.w	r3, r3, #2
 800cbd8:	9207      	str	r2, [sp, #28]
 800cbda:	9304      	str	r3, [sp, #16]
 800cbdc:	783b      	ldrb	r3, [r7, #0]
 800cbde:	2b2e      	cmp	r3, #46	; 0x2e
 800cbe0:	d10c      	bne.n	800cbfc <_svfiprintf_r+0x124>
 800cbe2:	787b      	ldrb	r3, [r7, #1]
 800cbe4:	2b2a      	cmp	r3, #42	; 0x2a
 800cbe6:	d133      	bne.n	800cc50 <_svfiprintf_r+0x178>
 800cbe8:	9b03      	ldr	r3, [sp, #12]
 800cbea:	1d1a      	adds	r2, r3, #4
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	9203      	str	r2, [sp, #12]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	bfb8      	it	lt
 800cbf4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cbf8:	3702      	adds	r7, #2
 800cbfa:	9305      	str	r3, [sp, #20]
 800cbfc:	4d2e      	ldr	r5, [pc, #184]	; (800ccb8 <_svfiprintf_r+0x1e0>)
 800cbfe:	7839      	ldrb	r1, [r7, #0]
 800cc00:	2203      	movs	r2, #3
 800cc02:	4628      	mov	r0, r5
 800cc04:	f7f3 fb04 	bl	8000210 <memchr>
 800cc08:	b138      	cbz	r0, 800cc1a <_svfiprintf_r+0x142>
 800cc0a:	2340      	movs	r3, #64	; 0x40
 800cc0c:	1b40      	subs	r0, r0, r5
 800cc0e:	fa03 f000 	lsl.w	r0, r3, r0
 800cc12:	9b04      	ldr	r3, [sp, #16]
 800cc14:	4303      	orrs	r3, r0
 800cc16:	3701      	adds	r7, #1
 800cc18:	9304      	str	r3, [sp, #16]
 800cc1a:	7839      	ldrb	r1, [r7, #0]
 800cc1c:	4827      	ldr	r0, [pc, #156]	; (800ccbc <_svfiprintf_r+0x1e4>)
 800cc1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc22:	2206      	movs	r2, #6
 800cc24:	1c7e      	adds	r6, r7, #1
 800cc26:	f7f3 faf3 	bl	8000210 <memchr>
 800cc2a:	2800      	cmp	r0, #0
 800cc2c:	d038      	beq.n	800cca0 <_svfiprintf_r+0x1c8>
 800cc2e:	4b24      	ldr	r3, [pc, #144]	; (800ccc0 <_svfiprintf_r+0x1e8>)
 800cc30:	bb13      	cbnz	r3, 800cc78 <_svfiprintf_r+0x1a0>
 800cc32:	9b03      	ldr	r3, [sp, #12]
 800cc34:	3307      	adds	r3, #7
 800cc36:	f023 0307 	bic.w	r3, r3, #7
 800cc3a:	3308      	adds	r3, #8
 800cc3c:	9303      	str	r3, [sp, #12]
 800cc3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc40:	444b      	add	r3, r9
 800cc42:	9309      	str	r3, [sp, #36]	; 0x24
 800cc44:	e76d      	b.n	800cb22 <_svfiprintf_r+0x4a>
 800cc46:	fb05 3202 	mla	r2, r5, r2, r3
 800cc4a:	2001      	movs	r0, #1
 800cc4c:	460f      	mov	r7, r1
 800cc4e:	e7a6      	b.n	800cb9e <_svfiprintf_r+0xc6>
 800cc50:	2300      	movs	r3, #0
 800cc52:	3701      	adds	r7, #1
 800cc54:	9305      	str	r3, [sp, #20]
 800cc56:	4619      	mov	r1, r3
 800cc58:	250a      	movs	r5, #10
 800cc5a:	4638      	mov	r0, r7
 800cc5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc60:	3a30      	subs	r2, #48	; 0x30
 800cc62:	2a09      	cmp	r2, #9
 800cc64:	d903      	bls.n	800cc6e <_svfiprintf_r+0x196>
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d0c8      	beq.n	800cbfc <_svfiprintf_r+0x124>
 800cc6a:	9105      	str	r1, [sp, #20]
 800cc6c:	e7c6      	b.n	800cbfc <_svfiprintf_r+0x124>
 800cc6e:	fb05 2101 	mla	r1, r5, r1, r2
 800cc72:	2301      	movs	r3, #1
 800cc74:	4607      	mov	r7, r0
 800cc76:	e7f0      	b.n	800cc5a <_svfiprintf_r+0x182>
 800cc78:	ab03      	add	r3, sp, #12
 800cc7a:	9300      	str	r3, [sp, #0]
 800cc7c:	4622      	mov	r2, r4
 800cc7e:	4b11      	ldr	r3, [pc, #68]	; (800ccc4 <_svfiprintf_r+0x1ec>)
 800cc80:	a904      	add	r1, sp, #16
 800cc82:	4640      	mov	r0, r8
 800cc84:	f7fe f938 	bl	800aef8 <_printf_float>
 800cc88:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800cc8c:	4681      	mov	r9, r0
 800cc8e:	d1d6      	bne.n	800cc3e <_svfiprintf_r+0x166>
 800cc90:	89a3      	ldrh	r3, [r4, #12]
 800cc92:	065b      	lsls	r3, r3, #25
 800cc94:	f53f af35 	bmi.w	800cb02 <_svfiprintf_r+0x2a>
 800cc98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc9a:	b01d      	add	sp, #116	; 0x74
 800cc9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cca0:	ab03      	add	r3, sp, #12
 800cca2:	9300      	str	r3, [sp, #0]
 800cca4:	4622      	mov	r2, r4
 800cca6:	4b07      	ldr	r3, [pc, #28]	; (800ccc4 <_svfiprintf_r+0x1ec>)
 800cca8:	a904      	add	r1, sp, #16
 800ccaa:	4640      	mov	r0, r8
 800ccac:	f7fe fbda 	bl	800b464 <_printf_i>
 800ccb0:	e7ea      	b.n	800cc88 <_svfiprintf_r+0x1b0>
 800ccb2:	bf00      	nop
 800ccb4:	0800d2dc 	.word	0x0800d2dc
 800ccb8:	0800d2e2 	.word	0x0800d2e2
 800ccbc:	0800d2e6 	.word	0x0800d2e6
 800ccc0:	0800aef9 	.word	0x0800aef9
 800ccc4:	0800ca25 	.word	0x0800ca25

0800ccc8 <__ascii_mbtowc>:
 800ccc8:	b082      	sub	sp, #8
 800ccca:	b901      	cbnz	r1, 800ccce <__ascii_mbtowc+0x6>
 800cccc:	a901      	add	r1, sp, #4
 800ccce:	b142      	cbz	r2, 800cce2 <__ascii_mbtowc+0x1a>
 800ccd0:	b14b      	cbz	r3, 800cce6 <__ascii_mbtowc+0x1e>
 800ccd2:	7813      	ldrb	r3, [r2, #0]
 800ccd4:	600b      	str	r3, [r1, #0]
 800ccd6:	7812      	ldrb	r2, [r2, #0]
 800ccd8:	1c10      	adds	r0, r2, #0
 800ccda:	bf18      	it	ne
 800ccdc:	2001      	movne	r0, #1
 800ccde:	b002      	add	sp, #8
 800cce0:	4770      	bx	lr
 800cce2:	4610      	mov	r0, r2
 800cce4:	e7fb      	b.n	800ccde <__ascii_mbtowc+0x16>
 800cce6:	f06f 0001 	mvn.w	r0, #1
 800ccea:	e7f8      	b.n	800ccde <__ascii_mbtowc+0x16>

0800ccec <_realloc_r>:
 800ccec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccee:	4607      	mov	r7, r0
 800ccf0:	4614      	mov	r4, r2
 800ccf2:	460e      	mov	r6, r1
 800ccf4:	b921      	cbnz	r1, 800cd00 <_realloc_r+0x14>
 800ccf6:	4611      	mov	r1, r2
 800ccf8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ccfc:	f7fe b80e 	b.w	800ad1c <_malloc_r>
 800cd00:	b922      	cbnz	r2, 800cd0c <_realloc_r+0x20>
 800cd02:	f7fd ffbd 	bl	800ac80 <_free_r>
 800cd06:	4625      	mov	r5, r4
 800cd08:	4628      	mov	r0, r5
 800cd0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd0c:	f000 f821 	bl	800cd52 <_malloc_usable_size_r>
 800cd10:	42a0      	cmp	r0, r4
 800cd12:	d20f      	bcs.n	800cd34 <_realloc_r+0x48>
 800cd14:	4621      	mov	r1, r4
 800cd16:	4638      	mov	r0, r7
 800cd18:	f7fe f800 	bl	800ad1c <_malloc_r>
 800cd1c:	4605      	mov	r5, r0
 800cd1e:	2800      	cmp	r0, #0
 800cd20:	d0f2      	beq.n	800cd08 <_realloc_r+0x1c>
 800cd22:	4631      	mov	r1, r6
 800cd24:	4622      	mov	r2, r4
 800cd26:	f7fd ff7f 	bl	800ac28 <memcpy>
 800cd2a:	4631      	mov	r1, r6
 800cd2c:	4638      	mov	r0, r7
 800cd2e:	f7fd ffa7 	bl	800ac80 <_free_r>
 800cd32:	e7e9      	b.n	800cd08 <_realloc_r+0x1c>
 800cd34:	4635      	mov	r5, r6
 800cd36:	e7e7      	b.n	800cd08 <_realloc_r+0x1c>

0800cd38 <__ascii_wctomb>:
 800cd38:	b149      	cbz	r1, 800cd4e <__ascii_wctomb+0x16>
 800cd3a:	2aff      	cmp	r2, #255	; 0xff
 800cd3c:	bf85      	ittet	hi
 800cd3e:	238a      	movhi	r3, #138	; 0x8a
 800cd40:	6003      	strhi	r3, [r0, #0]
 800cd42:	700a      	strbls	r2, [r1, #0]
 800cd44:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800cd48:	bf98      	it	ls
 800cd4a:	2001      	movls	r0, #1
 800cd4c:	4770      	bx	lr
 800cd4e:	4608      	mov	r0, r1
 800cd50:	4770      	bx	lr

0800cd52 <_malloc_usable_size_r>:
 800cd52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd56:	1f18      	subs	r0, r3, #4
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	bfbc      	itt	lt
 800cd5c:	580b      	ldrlt	r3, [r1, r0]
 800cd5e:	18c0      	addlt	r0, r0, r3
 800cd60:	4770      	bx	lr
	...

0800cd64 <_init>:
 800cd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd66:	bf00      	nop
 800cd68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd6a:	bc08      	pop	{r3}
 800cd6c:	469e      	mov	lr, r3
 800cd6e:	4770      	bx	lr

0800cd70 <_fini>:
 800cd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd72:	bf00      	nop
 800cd74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd76:	bc08      	pop	{r3}
 800cd78:	469e      	mov	lr, r3
 800cd7a:	4770      	bx	lr
