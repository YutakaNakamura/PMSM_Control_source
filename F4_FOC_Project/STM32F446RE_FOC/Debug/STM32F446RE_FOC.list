
STM32F446RE_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af54  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c78  0800b120  0800b120  0001b120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd98  0800bd98  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd98  0800bd98  0001bd98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bda0  0800bda0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800bda0  0800bda0  0001bda0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800bda8  0800bda8  0001bda8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800bdb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034a0  200001e0  0800bf90  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003680  0800bf90  00023680  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00052290  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009aea  00000000  00000000  000724a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001cc0  00000000  00000000  0007bf90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019d8  00000000  00000000  0007dc50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000325d2  00000000  00000000  0007f628  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000210c9  00000000  00000000  000b1bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010358c  00000000  00000000  000d2cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000e9  00000000  00000000  001d624f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008450  00000000  00000000  001d6338  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000018a  00000000  00000000  001de788  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001e0 	.word	0x200001e0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800b104 	.word	0x0800b104

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001e4 	.word	0x200001e4
 8000204:	0800b104 	.word	0x0800b104

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bf4:	f000 b972 	b.w	8000edc <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9e08      	ldr	r6, [sp, #32]
 8000c16:	4604      	mov	r4, r0
 8000c18:	4688      	mov	r8, r1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d14b      	bne.n	8000cb6 <__udivmoddi4+0xa6>
 8000c1e:	428a      	cmp	r2, r1
 8000c20:	4615      	mov	r5, r2
 8000c22:	d967      	bls.n	8000cf4 <__udivmoddi4+0xe4>
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	b14a      	cbz	r2, 8000c3e <__udivmoddi4+0x2e>
 8000c2a:	f1c2 0720 	rsb	r7, r2, #32
 8000c2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c32:	fa20 f707 	lsr.w	r7, r0, r7
 8000c36:	4095      	lsls	r5, r2
 8000c38:	ea47 0803 	orr.w	r8, r7, r3
 8000c3c:	4094      	lsls	r4, r2
 8000c3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c42:	0c23      	lsrs	r3, r4, #16
 8000c44:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c48:	fa1f fc85 	uxth.w	ip, r5
 8000c4c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c50:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c54:	fb07 f10c 	mul.w	r1, r7, ip
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	d909      	bls.n	8000c70 <__udivmoddi4+0x60>
 8000c5c:	18eb      	adds	r3, r5, r3
 8000c5e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c62:	f080 811b 	bcs.w	8000e9c <__udivmoddi4+0x28c>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 8118 	bls.w	8000e9c <__udivmoddi4+0x28c>
 8000c6c:	3f02      	subs	r7, #2
 8000c6e:	442b      	add	r3, r5
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c84:	45a4      	cmp	ip, r4
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x8c>
 8000c88:	192c      	adds	r4, r5, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8e:	f080 8107 	bcs.w	8000ea0 <__udivmoddi4+0x290>
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	f240 8104 	bls.w	8000ea0 <__udivmoddi4+0x290>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	442c      	add	r4, r5
 8000c9c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca0:	eba4 040c 	sub.w	r4, r4, ip
 8000ca4:	2700      	movs	r7, #0
 8000ca6:	b11e      	cbz	r6, 8000cb0 <__udivmoddi4+0xa0>
 8000ca8:	40d4      	lsrs	r4, r2
 8000caa:	2300      	movs	r3, #0
 8000cac:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d909      	bls.n	8000cce <__udivmoddi4+0xbe>
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	f000 80eb 	beq.w	8000e96 <__udivmoddi4+0x286>
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	e9c6 0100 	strd	r0, r1, [r6]
 8000cc6:	4638      	mov	r0, r7
 8000cc8:	4639      	mov	r1, r7
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	fab3 f783 	clz	r7, r3
 8000cd2:	2f00      	cmp	r7, #0
 8000cd4:	d147      	bne.n	8000d66 <__udivmoddi4+0x156>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xd0>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 80fa 	bhi.w	8000ed4 <__udivmoddi4+0x2c4>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4698      	mov	r8, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d0e0      	beq.n	8000cb0 <__udivmoddi4+0xa0>
 8000cee:	e9c6 4800 	strd	r4, r8, [r6]
 8000cf2:	e7dd      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000cf4:	b902      	cbnz	r2, 8000cf8 <__udivmoddi4+0xe8>
 8000cf6:	deff      	udf	#255	; 0xff
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	2a00      	cmp	r2, #0
 8000cfe:	f040 808f 	bne.w	8000e20 <__udivmoddi4+0x210>
 8000d02:	1b49      	subs	r1, r1, r5
 8000d04:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d08:	fa1f f885 	uxth.w	r8, r5
 8000d0c:	2701      	movs	r7, #1
 8000d0e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d12:	0c23      	lsrs	r3, r4, #16
 8000d14:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb08 f10c 	mul.w	r1, r8, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x124>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x122>
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2bc>
 8000d32:	4684      	mov	ip, r0
 8000d34:	1a59      	subs	r1, r3, r1
 8000d36:	b2a3      	uxth	r3, r4
 8000d38:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d3c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d44:	fb08 f800 	mul.w	r8, r8, r0
 8000d48:	45a0      	cmp	r8, r4
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x14c>
 8000d4c:	192c      	adds	r4, r5, r4
 8000d4e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x14a>
 8000d54:	45a0      	cmp	r8, r4
 8000d56:	f200 80b6 	bhi.w	8000ec6 <__udivmoddi4+0x2b6>
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	eba4 0408 	sub.w	r4, r4, r8
 8000d60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d64:	e79f      	b.n	8000ca6 <__udivmoddi4+0x96>
 8000d66:	f1c7 0c20 	rsb	ip, r7, #32
 8000d6a:	40bb      	lsls	r3, r7
 8000d6c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d70:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d74:	fa01 f407 	lsl.w	r4, r1, r7
 8000d78:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d7c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d80:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d84:	4325      	orrs	r5, r4
 8000d86:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d8a:	0c2c      	lsrs	r4, r5, #16
 8000d8c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d90:	fa1f fa8e 	uxth.w	sl, lr
 8000d94:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d98:	fb09 f40a 	mul.w	r4, r9, sl
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	fa02 f207 	lsl.w	r2, r2, r7
 8000da2:	fa00 f107 	lsl.w	r1, r0, r7
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b0>
 8000da8:	eb1e 0303 	adds.w	r3, lr, r3
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000db0:	f080 8087 	bcs.w	8000ec2 <__udivmoddi4+0x2b2>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f240 8084 	bls.w	8000ec2 <__udivmoddi4+0x2b2>
 8000dba:	f1a9 0902 	sub.w	r9, r9, #2
 8000dbe:	4473      	add	r3, lr
 8000dc0:	1b1b      	subs	r3, r3, r4
 8000dc2:	b2ad      	uxth	r5, r5
 8000dc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000dcc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dd4:	45a2      	cmp	sl, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1da>
 8000dd8:	eb1e 0404 	adds.w	r4, lr, r4
 8000ddc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de0:	d26b      	bcs.n	8000eba <__udivmoddi4+0x2aa>
 8000de2:	45a2      	cmp	sl, r4
 8000de4:	d969      	bls.n	8000eba <__udivmoddi4+0x2aa>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4474      	add	r4, lr
 8000dea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	eba4 040a 	sub.w	r4, r4, sl
 8000df6:	454c      	cmp	r4, r9
 8000df8:	46c2      	mov	sl, r8
 8000dfa:	464b      	mov	r3, r9
 8000dfc:	d354      	bcc.n	8000ea8 <__udivmoddi4+0x298>
 8000dfe:	d051      	beq.n	8000ea4 <__udivmoddi4+0x294>
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d069      	beq.n	8000ed8 <__udivmoddi4+0x2c8>
 8000e04:	ebb1 050a 	subs.w	r5, r1, sl
 8000e08:	eb64 0403 	sbc.w	r4, r4, r3
 8000e0c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e10:	40fd      	lsrs	r5, r7
 8000e12:	40fc      	lsrs	r4, r7
 8000e14:	ea4c 0505 	orr.w	r5, ip, r5
 8000e18:	e9c6 5400 	strd	r5, r4, [r6]
 8000e1c:	2700      	movs	r7, #0
 8000e1e:	e747      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e20:	f1c2 0320 	rsb	r3, r2, #32
 8000e24:	fa20 f703 	lsr.w	r7, r0, r3
 8000e28:	4095      	lsls	r5, r2
 8000e2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e36:	4338      	orrs	r0, r7
 8000e38:	0c01      	lsrs	r1, r0, #16
 8000e3a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e3e:	fa1f f885 	uxth.w	r8, r5
 8000e42:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4a:	fb07 f308 	mul.w	r3, r7, r8
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x256>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e5c:	d22f      	bcs.n	8000ebe <__udivmoddi4+0x2ae>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d92d      	bls.n	8000ebe <__udivmoddi4+0x2ae>
 8000e62:	3f02      	subs	r7, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1acb      	subs	r3, r1, r3
 8000e68:	b281      	uxth	r1, r0
 8000e6a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e76:	fb00 f308 	mul.w	r3, r0, r8
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x27e>
 8000e7e:	1869      	adds	r1, r5, r1
 8000e80:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e84:	d217      	bcs.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d915      	bls.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	4429      	add	r1, r5
 8000e8e:	1ac9      	subs	r1, r1, r3
 8000e90:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e94:	e73b      	b.n	8000d0e <__udivmoddi4+0xfe>
 8000e96:	4637      	mov	r7, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e709      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e9c:	4607      	mov	r7, r0
 8000e9e:	e6e7      	b.n	8000c70 <__udivmoddi4+0x60>
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	e6fb      	b.n	8000c9c <__udivmoddi4+0x8c>
 8000ea4:	4541      	cmp	r1, r8
 8000ea6:	d2ab      	bcs.n	8000e00 <__udivmoddi4+0x1f0>
 8000ea8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eac:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb0:	3801      	subs	r0, #1
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	e7a4      	b.n	8000e00 <__udivmoddi4+0x1f0>
 8000eb6:	4660      	mov	r0, ip
 8000eb8:	e7e9      	b.n	8000e8e <__udivmoddi4+0x27e>
 8000eba:	4618      	mov	r0, r3
 8000ebc:	e795      	b.n	8000dea <__udivmoddi4+0x1da>
 8000ebe:	4667      	mov	r7, ip
 8000ec0:	e7d1      	b.n	8000e66 <__udivmoddi4+0x256>
 8000ec2:	4681      	mov	r9, r0
 8000ec4:	e77c      	b.n	8000dc0 <__udivmoddi4+0x1b0>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	442c      	add	r4, r5
 8000eca:	e747      	b.n	8000d5c <__udivmoddi4+0x14c>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	442b      	add	r3, r5
 8000ed2:	e72f      	b.n	8000d34 <__udivmoddi4+0x124>
 8000ed4:	4638      	mov	r0, r7
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xda>
 8000ed8:	4637      	mov	r7, r6
 8000eda:	e6e9      	b.n	8000cb0 <__udivmoddi4+0xa0>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <HAL_Init>:
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	; (8000f20 <HAL_Init+0x40>)
 8000eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <HAL_Init+0x40>)
 8000ef6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <HAL_Init+0x40>)
 8000f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f000 fd05 	bl	8001918 <HAL_NVIC_SetPriorityGrouping>
 8000f0e:	2004      	movs	r0, #4
 8000f10:	f000 f808 	bl	8000f24 <HAL_InitTick>
 8000f14:	f006 fa14 	bl	8007340 <HAL_MspInit>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40023c00 	.word	0x40023c00

08000f24 <HAL_InitTick>:
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_InitTick+0x54>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_InitTick+0x58>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 fd1d 	bl	8001982 <HAL_SYSTICK_Config>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_InitTick+0x2e>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00e      	b.n	8000f70 <HAL_InitTick+0x4c>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d80a      	bhi.n	8000f6e <HAL_InitTick+0x4a>
 8000f58:	2200      	movs	r2, #0
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f60:	f000 fce5 	bl	800192e <HAL_NVIC_SetPriority>
 8000f64:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <HAL_InitTick+0x5c>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <HAL_InitTick+0x4c>
 8000f6e:	2301      	movs	r3, #1
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	20000004 	.word	0x20000004
 8000f80:	20000000 	.word	0x20000000

08000f84 <HAL_IncTick>:
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_IncTick+0x20>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000004 	.word	0x20000004
 8000fa8:	200035d0 	.word	0x200035d0

08000fac <HAL_GetTick>:
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <HAL_GetTick+0x14>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	200035d0 	.word	0x200035d0

08000fc4 <HAL_ADC_Init>:
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	2300      	movs	r3, #0
 8000fce:	73fb      	strb	r3, [r7, #15]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d101      	bne.n	8000fda <HAL_ADC_Init+0x16>
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e033      	b.n	8001042 <HAL_ADC_Init+0x7e>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d109      	bne.n	8000ff6 <HAL_ADC_Init+0x32>
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f006 f8dc 	bl	80071a0 <HAL_ADC_MspInit>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	645a      	str	r2, [r3, #68]	; 0x44
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	f003 0310 	and.w	r3, r3, #16
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d118      	bne.n	8001034 <HAL_ADC_Init+0x70>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800100a:	f023 0302 	bic.w	r3, r3, #2
 800100e:	f043 0202 	orr.w	r2, r3, #2
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	641a      	str	r2, [r3, #64]	; 0x40
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 faa8 	bl	800156c <ADC_Init>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	645a      	str	r2, [r3, #68]	; 0x44
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	f023 0303 	bic.w	r3, r3, #3
 800102a:	f043 0201 	orr.w	r2, r3, #1
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	641a      	str	r2, [r3, #64]	; 0x40
 8001032:	e001      	b.n	8001038 <HAL_ADC_Init+0x74>
 8001034:	2301      	movs	r3, #1
 8001036:	73fb      	strb	r3, [r7, #15]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_ADC_IRQHandler>:
 800104a:	b580      	push	{r7, lr}
 800104c:	b084      	sub	sp, #16
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b02      	cmp	r3, #2
 8001066:	bf0c      	ite	eq
 8001068:	2301      	moveq	r3, #1
 800106a:	2300      	movne	r3, #0
 800106c:	b2db      	uxtb	r3, r3
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f003 0320 	and.w	r3, r3, #32
 800107a:	2b20      	cmp	r3, #32
 800107c:	bf0c      	ite	eq
 800107e:	2301      	moveq	r3, #1
 8001080:	2300      	movne	r3, #0
 8001082:	b2db      	uxtb	r3, r3
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d049      	beq.n	8001120 <HAL_ADC_IRQHandler+0xd6>
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d046      	beq.n	8001120 <HAL_ADC_IRQHandler+0xd6>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	2b00      	cmp	r3, #0
 800109c:	d105      	bne.n	80010aa <HAL_ADC_IRQHandler+0x60>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	641a      	str	r2, [r3, #64]	; 0x40
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d12b      	bne.n	8001110 <HAL_ADC_IRQHandler+0xc6>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7e1b      	ldrb	r3, [r3, #24]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d127      	bne.n	8001110 <HAL_ADC_IRQHandler+0xc6>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d006      	beq.n	80010dc <HAL_ADC_IRQHandler+0x92>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d119      	bne.n	8001110 <HAL_ADC_IRQHandler+0xc6>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 0220 	bic.w	r2, r2, #32
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	641a      	str	r2, [r3, #64]	; 0x40
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d105      	bne.n	8001110 <HAL_ADC_IRQHandler+0xc6>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	f043 0201 	orr.w	r2, r3, #1
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	641a      	str	r2, [r3, #64]	; 0x40
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 f8db 	bl	80012cc <HAL_ADC_ConvCpltCallback>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f06f 0212 	mvn.w	r2, #18
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0304 	and.w	r3, r3, #4
 800112a:	2b04      	cmp	r3, #4
 800112c:	bf0c      	ite	eq
 800112e:	2301      	moveq	r3, #1
 8001130:	2300      	movne	r3, #0
 8001132:	b2db      	uxtb	r3, r3
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001140:	2b80      	cmp	r3, #128	; 0x80
 8001142:	bf0c      	ite	eq
 8001144:	2301      	moveq	r3, #1
 8001146:	2300      	movne	r3, #0
 8001148:	b2db      	uxtb	r3, r3
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d057      	beq.n	8001202 <HAL_ADC_IRQHandler+0x1b8>
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d054      	beq.n	8001202 <HAL_ADC_IRQHandler+0x1b8>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f003 0310 	and.w	r3, r3, #16
 8001160:	2b00      	cmp	r3, #0
 8001162:	d105      	bne.n	8001170 <HAL_ADC_IRQHandler+0x126>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	641a      	str	r2, [r3, #64]	; 0x40
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d139      	bne.n	80011f2 <HAL_ADC_IRQHandler+0x1a8>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001184:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d006      	beq.n	800119a <HAL_ADC_IRQHandler+0x150>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001196:	2b00      	cmp	r3, #0
 8001198:	d12b      	bne.n	80011f2 <HAL_ADC_IRQHandler+0x1a8>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d124      	bne.n	80011f2 <HAL_ADC_IRQHandler+0x1a8>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d11d      	bne.n	80011f2 <HAL_ADC_IRQHandler+0x1a8>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7e1b      	ldrb	r3, [r3, #24]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d119      	bne.n	80011f2 <HAL_ADC_IRQHandler+0x1a8>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	641a      	str	r2, [r3, #64]	; 0x40
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d105      	bne.n	80011f2 <HAL_ADC_IRQHandler+0x1a8>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	f043 0201 	orr.w	r2, r3, #1
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	641a      	str	r2, [r3, #64]	; 0x40
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f000 fab6 	bl	8001764 <HAL_ADCEx_InjectedConvCpltCallback>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f06f 020c 	mvn.w	r2, #12
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b01      	cmp	r3, #1
 800120e:	bf0c      	ite	eq
 8001210:	2301      	moveq	r3, #1
 8001212:	2300      	movne	r3, #0
 8001214:	b2db      	uxtb	r3, r3
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001222:	2b40      	cmp	r3, #64	; 0x40
 8001224:	bf0c      	ite	eq
 8001226:	2301      	moveq	r3, #1
 8001228:	2300      	movne	r3, #0
 800122a:	b2db      	uxtb	r3, r3
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d017      	beq.n	8001264 <HAL_ADC_IRQHandler+0x21a>
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d014      	beq.n	8001264 <HAL_ADC_IRQHandler+0x21a>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b01      	cmp	r3, #1
 8001246:	d10d      	bne.n	8001264 <HAL_ADC_IRQHandler+0x21a>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	641a      	str	r2, [r3, #64]	; 0x40
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 f843 	bl	80012e0 <HAL_ADC_LevelOutOfWindowCallback>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f06f 0201 	mvn.w	r2, #1
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0320 	and.w	r3, r3, #32
 800126e:	2b20      	cmp	r3, #32
 8001270:	bf0c      	ite	eq
 8001272:	2301      	moveq	r3, #1
 8001274:	2300      	movne	r3, #0
 8001276:	b2db      	uxtb	r3, r3
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001284:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001288:	bf0c      	ite	eq
 800128a:	2301      	moveq	r3, #1
 800128c:	2300      	movne	r3, #0
 800128e:	b2db      	uxtb	r3, r3
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d015      	beq.n	80012c4 <HAL_ADC_IRQHandler+0x27a>
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d012      	beq.n	80012c4 <HAL_ADC_IRQHandler+0x27a>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	f043 0202 	orr.w	r2, r3, #2
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	645a      	str	r2, [r3, #68]	; 0x44
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f06f 0220 	mvn.w	r2, #32
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 f81d 	bl	80012f4 <HAL_ADC_ErrorCallback>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f06f 0220 	mvn.w	r2, #32
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <HAL_ADC_ConvCpltCallback>:
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <HAL_ADC_LevelOutOfWindowCallback>:
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <HAL_ADC_ErrorCallback>:
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <HAL_ADC_ConfigChannel>:
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800131c:	2b01      	cmp	r3, #1
 800131e:	d101      	bne.n	8001324 <HAL_ADC_ConfigChannel+0x1c>
 8001320:	2302      	movs	r3, #2
 8001322:	e113      	b.n	800154c <HAL_ADC_ConfigChannel+0x244>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b09      	cmp	r3, #9
 8001332:	d925      	bls.n	8001380 <HAL_ADC_ConfigChannel+0x78>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68d9      	ldr	r1, [r3, #12]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	b29b      	uxth	r3, r3
 8001340:	461a      	mov	r2, r3
 8001342:	4613      	mov	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	3b1e      	subs	r3, #30
 800134a:	2207      	movs	r2, #7
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43da      	mvns	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	400a      	ands	r2, r1
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68d9      	ldr	r1, [r3, #12]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	b29b      	uxth	r3, r3
 800136a:	4618      	mov	r0, r3
 800136c:	4603      	mov	r3, r0
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4403      	add	r3, r0
 8001372:	3b1e      	subs	r3, #30
 8001374:	409a      	lsls	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	430a      	orrs	r2, r1
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	e022      	b.n	80013c6 <HAL_ADC_ConfigChannel+0xbe>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6919      	ldr	r1, [r3, #16]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	b29b      	uxth	r3, r3
 800138c:	461a      	mov	r2, r3
 800138e:	4613      	mov	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	2207      	movs	r2, #7
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	400a      	ands	r2, r1
 80013a2:	611a      	str	r2, [r3, #16]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6919      	ldr	r1, [r3, #16]
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	4618      	mov	r0, r3
 80013b6:	4603      	mov	r3, r0
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4403      	add	r3, r0
 80013bc:	409a      	lsls	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	611a      	str	r2, [r3, #16]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d824      	bhi.n	8001418 <HAL_ADC_ConfigChannel+0x110>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	3b05      	subs	r3, #5
 80013e0:	221f      	movs	r2, #31
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43da      	mvns	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	400a      	ands	r2, r1
 80013ee:	635a      	str	r2, [r3, #52]	; 0x34
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	4618      	mov	r0, r3
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	3b05      	subs	r3, #5
 800140a:	fa00 f203 	lsl.w	r2, r0, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	430a      	orrs	r2, r1
 8001414:	635a      	str	r2, [r3, #52]	; 0x34
 8001416:	e04c      	b.n	80014b2 <HAL_ADC_ConfigChannel+0x1aa>
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b0c      	cmp	r3, #12
 800141e:	d824      	bhi.n	800146a <HAL_ADC_ConfigChannel+0x162>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	3b23      	subs	r3, #35	; 0x23
 8001432:	221f      	movs	r2, #31
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43da      	mvns	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	400a      	ands	r2, r1
 8001440:	631a      	str	r2, [r3, #48]	; 0x30
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	b29b      	uxth	r3, r3
 800144e:	4618      	mov	r0, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	4613      	mov	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	3b23      	subs	r3, #35	; 0x23
 800145c:	fa00 f203 	lsl.w	r2, r0, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	430a      	orrs	r2, r1
 8001466:	631a      	str	r2, [r3, #48]	; 0x30
 8001468:	e023      	b.n	80014b2 <HAL_ADC_ConfigChannel+0x1aa>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	3b41      	subs	r3, #65	; 0x41
 800147c:	221f      	movs	r2, #31
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43da      	mvns	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	400a      	ands	r2, r1
 800148a:	62da      	str	r2, [r3, #44]	; 0x2c
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	b29b      	uxth	r3, r3
 8001498:	4618      	mov	r0, r3
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	3b41      	subs	r3, #65	; 0x41
 80014a6:	fa00 f203 	lsl.w	r2, r0, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80014b2:	4b29      	ldr	r3, [pc, #164]	; (8001558 <HAL_ADC_ConfigChannel+0x250>)
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a28      	ldr	r2, [pc, #160]	; (800155c <HAL_ADC_ConfigChannel+0x254>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d10f      	bne.n	80014e0 <HAL_ADC_ConfigChannel+0x1d8>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b12      	cmp	r3, #18
 80014c6:	d10b      	bne.n	80014e0 <HAL_ADC_ConfigChannel+0x1d8>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a1d      	ldr	r2, [pc, #116]	; (800155c <HAL_ADC_ConfigChannel+0x254>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d12b      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x23a>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a1c      	ldr	r2, [pc, #112]	; (8001560 <HAL_ADC_ConfigChannel+0x258>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d003      	beq.n	80014fc <HAL_ADC_ConfigChannel+0x1f4>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b11      	cmp	r3, #17
 80014fa:	d122      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x23a>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a11      	ldr	r2, [pc, #68]	; (8001560 <HAL_ADC_ConfigChannel+0x258>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d111      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x23a>
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <HAL_ADC_ConfigChannel+0x25c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a11      	ldr	r2, [pc, #68]	; (8001568 <HAL_ADC_ConfigChannel+0x260>)
 8001524:	fba2 2303 	umull	r2, r3, r2, r3
 8001528:	0c9a      	lsrs	r2, r3, #18
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	e002      	b.n	800153c <HAL_ADC_ConfigChannel+0x234>
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	3b01      	subs	r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f9      	bne.n	8001536 <HAL_ADC_ConfigChannel+0x22e>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800154a:	2300      	movs	r3, #0
 800154c:	4618      	mov	r0, r3
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	40012300 	.word	0x40012300
 800155c:	40012000 	.word	0x40012000
 8001560:	10000012 	.word	0x10000012
 8001564:	20000008 	.word	0x20000008
 8001568:	431bde83 	.word	0x431bde83

0800156c <ADC_Init>:
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	4b79      	ldr	r3, [pc, #484]	; (800175c <ADC_Init+0x1f0>)
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	431a      	orrs	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6859      	ldr	r1, [r3, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	021a      	lsls	r2, r3, #8
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6859      	ldr	r1, [r3, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6899      	ldr	r1, [r3, #8]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68da      	ldr	r2, [r3, #12]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fe:	4a58      	ldr	r2, [pc, #352]	; (8001760 <ADC_Init+0x1f4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d022      	beq.n	800164a <ADC_Init+0xde>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6899      	ldr	r1, [r3, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6899      	ldr	r1, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	e00f      	b.n	800166a <ADC_Init+0xfe>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0202 	bic.w	r2, r2, #2
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6899      	ldr	r1, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	7e1b      	ldrb	r3, [r3, #24]
 8001684:	005a      	lsls	r2, r3, #1
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	430a      	orrs	r2, r1
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d01b      	beq.n	80016d0 <ADC_Init+0x164>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6859      	ldr	r1, [r3, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c2:	3b01      	subs	r3, #1
 80016c4:	035a      	lsls	r2, r3, #13
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	e007      	b.n	80016e0 <ADC_Init+0x174>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	051a      	lsls	r2, r3, #20
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	62da      	str	r2, [r3, #44]	; 0x2c
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6899      	ldr	r1, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001722:	025a      	lsls	r2, r3, #9
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6899      	ldr	r1, [r3, #8]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	029a      	lsls	r2, r3, #10
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	bf00      	nop
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	40012300 	.word	0x40012300
 8001760:	0f000001 	.word	0x0f000001

08001764 <HAL_ADCEx_InjectedConvCpltCallback>:
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <__NVIC_SetPriorityGrouping>:
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001794:	4013      	ands	r3, r2
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	021a      	lsls	r2, r3, #8
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4313      	orrs	r3, r2
 80017a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	4a04      	ldr	r2, [pc, #16]	; (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	60d3      	str	r3, [r2, #12]
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_GetPriorityGrouping>:
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <__NVIC_GetPriorityGrouping+0x18>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_EnableIRQ>:
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db0b      	blt.n	8001806 <__NVIC_EnableIRQ+0x2a>
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	f003 021f 	and.w	r2, r3, #31
 80017f4:	4907      	ldr	r1, [pc, #28]	; (8001814 <__NVIC_EnableIRQ+0x38>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	2001      	movs	r0, #1
 80017fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000e100 	.word	0xe000e100

08001818 <__NVIC_SetPriority>:
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	6039      	str	r1, [r7, #0]
 8001822:	71fb      	strb	r3, [r7, #7]
 8001824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001828:	2b00      	cmp	r3, #0
 800182a:	db0a      	blt.n	8001842 <__NVIC_SetPriority+0x2a>
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	b2da      	uxtb	r2, r3
 8001830:	490c      	ldr	r1, [pc, #48]	; (8001864 <__NVIC_SetPriority+0x4c>)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	0112      	lsls	r2, r2, #4
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	440b      	add	r3, r1
 800183c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001840:	e00a      	b.n	8001858 <__NVIC_SetPriority+0x40>
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4908      	ldr	r1, [pc, #32]	; (8001868 <__NVIC_SetPriority+0x50>)
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	3b04      	subs	r3, #4
 8001850:	0112      	lsls	r2, r2, #4
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	440b      	add	r3, r1
 8001856:	761a      	strb	r2, [r3, #24]
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000e100 	.word	0xe000e100
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <NVIC_EncodePriority>:
 800186c:	b480      	push	{r7}
 800186e:	b089      	sub	sp, #36	; 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	61fb      	str	r3, [r7, #28]
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f1c3 0307 	rsb	r3, r3, #7
 8001886:	2b04      	cmp	r3, #4
 8001888:	bf28      	it	cs
 800188a:	2304      	movcs	r3, #4
 800188c:	61bb      	str	r3, [r7, #24]
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3304      	adds	r3, #4
 8001892:	2b06      	cmp	r3, #6
 8001894:	d902      	bls.n	800189c <NVIC_EncodePriority+0x30>
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3b03      	subs	r3, #3
 800189a:	e000      	b.n	800189e <NVIC_EncodePriority+0x32>
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43da      	mvns	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	401a      	ands	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	409a      	lsls	r2, r3
 80018b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	43d9      	mvns	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	400b      	ands	r3, r1
 80018c4:	4313      	orrs	r3, r2
 80018c6:	4618      	mov	r0, r3
 80018c8:	3724      	adds	r7, #36	; 0x24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <SysTick_Config>:
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e4:	d301      	bcc.n	80018ea <SysTick_Config+0x16>
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00f      	b.n	800190a <SysTick_Config+0x36>
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <SysTick_Config+0x40>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	6053      	str	r3, [r2, #4]
 80018f2:	210f      	movs	r1, #15
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018f8:	f7ff ff8e 	bl	8001818 <__NVIC_SetPriority>
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <SysTick_Config+0x40>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	4b04      	ldr	r3, [pc, #16]	; (8001914 <SysTick_Config+0x40>)
 8001904:	2207      	movs	r2, #7
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	2300      	movs	r3, #0
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	e000e010 	.word	0xe000e010

08001918 <HAL_NVIC_SetPriorityGrouping>:
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ff29 	bl	8001778 <__NVIC_SetPriorityGrouping>
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_SetPriority>:
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	73fb      	strb	r3, [r7, #15]
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	f7ff ff3e 	bl	80017c0 <__NVIC_GetPriorityGrouping>
 8001944:	6178      	str	r0, [r7, #20]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	6978      	ldr	r0, [r7, #20]
 800194c:	f7ff ff8e 	bl	800186c <NVIC_EncodePriority>
 8001950:	4602      	mov	r2, r0
 8001952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff5d 	bl	8001818 <__NVIC_SetPriority>
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_EnableIRQ>:
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	71fb      	strb	r3, [r7, #7]
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff31 	bl	80017dc <__NVIC_EnableIRQ>
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_SYSTICK_Config>:
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ffa2 	bl	80018d4 <SysTick_Config>
 8001990:	4603      	mov	r3, r0
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_GPIO_Init>:
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	; 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
 80019b6:	e165      	b.n	8001c84 <HAL_GPIO_Init+0x2e8>
 80019b8:	2201      	movs	r2, #1
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	f040 8154 	bne.w	8001c7e <HAL_GPIO_Init+0x2e2>
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_Init+0x4a>
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b12      	cmp	r3, #18
 80019e4:	d123      	bne.n	8001a2e <HAL_GPIO_Init+0x92>
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	08da      	lsrs	r2, r3, #3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3208      	adds	r2, #8
 80019ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f2:	61bb      	str	r3, [r7, #24]
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	220f      	movs	r2, #15
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	691a      	ldr	r2, [r3, #16]
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	08da      	lsrs	r2, r3, #3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3208      	adds	r2, #8
 8001a28:	69b9      	ldr	r1, [r7, #24]
 8001a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	61bb      	str	r3, [r7, #24]
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	2203      	movs	r2, #3
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 0203 	and.w	r2, r3, #3
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d00b      	beq.n	8001a82 <HAL_GPIO_Init+0xe6>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d007      	beq.n	8001a82 <HAL_GPIO_Init+0xe6>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b11      	cmp	r3, #17
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0xe6>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b12      	cmp	r3, #18
 8001a80:	d130      	bne.n	8001ae4 <HAL_GPIO_Init+0x148>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	61bb      	str	r3, [r7, #24]
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4013      	ands	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	61bb      	str	r3, [r7, #24]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	091b      	lsrs	r3, r3, #4
 8001ace:	f003 0201 	and.w	r2, r3, #1
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	61bb      	str	r3, [r7, #24]
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	2203      	movs	r2, #3
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	60da      	str	r2, [r3, #12]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 80ae 	beq.w	8001c7e <HAL_GPIO_Init+0x2e2>
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b5c      	ldr	r3, [pc, #368]	; (8001c98 <HAL_GPIO_Init+0x2fc>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	4a5b      	ldr	r2, [pc, #364]	; (8001c98 <HAL_GPIO_Init+0x2fc>)
 8001b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b30:	6453      	str	r3, [r2, #68]	; 0x44
 8001b32:	4b59      	ldr	r3, [pc, #356]	; (8001c98 <HAL_GPIO_Init+0x2fc>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4a57      	ldr	r2, [pc, #348]	; (8001c9c <HAL_GPIO_Init+0x300>)
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	089b      	lsrs	r3, r3, #2
 8001b44:	3302      	adds	r3, #2
 8001b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4a:	61bb      	str	r3, [r7, #24]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	220f      	movs	r2, #15
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a4e      	ldr	r2, [pc, #312]	; (8001ca0 <HAL_GPIO_Init+0x304>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d025      	beq.n	8001bb6 <HAL_GPIO_Init+0x21a>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a4d      	ldr	r2, [pc, #308]	; (8001ca4 <HAL_GPIO_Init+0x308>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d01f      	beq.n	8001bb2 <HAL_GPIO_Init+0x216>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4c      	ldr	r2, [pc, #304]	; (8001ca8 <HAL_GPIO_Init+0x30c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d019      	beq.n	8001bae <HAL_GPIO_Init+0x212>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4b      	ldr	r2, [pc, #300]	; (8001cac <HAL_GPIO_Init+0x310>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d013      	beq.n	8001baa <HAL_GPIO_Init+0x20e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4a      	ldr	r2, [pc, #296]	; (8001cb0 <HAL_GPIO_Init+0x314>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d00d      	beq.n	8001ba6 <HAL_GPIO_Init+0x20a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a49      	ldr	r2, [pc, #292]	; (8001cb4 <HAL_GPIO_Init+0x318>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d007      	beq.n	8001ba2 <HAL_GPIO_Init+0x206>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a48      	ldr	r2, [pc, #288]	; (8001cb8 <HAL_GPIO_Init+0x31c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d101      	bne.n	8001b9e <HAL_GPIO_Init+0x202>
 8001b9a:	2306      	movs	r3, #6
 8001b9c:	e00c      	b.n	8001bb8 <HAL_GPIO_Init+0x21c>
 8001b9e:	2307      	movs	r3, #7
 8001ba0:	e00a      	b.n	8001bb8 <HAL_GPIO_Init+0x21c>
 8001ba2:	2305      	movs	r3, #5
 8001ba4:	e008      	b.n	8001bb8 <HAL_GPIO_Init+0x21c>
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	e006      	b.n	8001bb8 <HAL_GPIO_Init+0x21c>
 8001baa:	2303      	movs	r3, #3
 8001bac:	e004      	b.n	8001bb8 <HAL_GPIO_Init+0x21c>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e002      	b.n	8001bb8 <HAL_GPIO_Init+0x21c>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_GPIO_Init+0x21c>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	69fa      	ldr	r2, [r7, #28]
 8001bba:	f002 0203 	and.w	r2, r2, #3
 8001bbe:	0092      	lsls	r2, r2, #2
 8001bc0:	4093      	lsls	r3, r2
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
 8001bc8:	4934      	ldr	r1, [pc, #208]	; (8001c9c <HAL_GPIO_Init+0x300>)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	089b      	lsrs	r3, r3, #2
 8001bce:	3302      	adds	r3, #2
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001bd6:	4b39      	ldr	r3, [pc, #228]	; (8001cbc <HAL_GPIO_Init+0x320>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	61bb      	str	r3, [r7, #24]
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4013      	ands	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x25e>
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
 8001bfa:	4a30      	ldr	r2, [pc, #192]	; (8001cbc <HAL_GPIO_Init+0x320>)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	4b2e      	ldr	r3, [pc, #184]	; (8001cbc <HAL_GPIO_Init+0x320>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	61bb      	str	r3, [r7, #24]
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x288>
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
 8001c24:	4a25      	ldr	r2, [pc, #148]	; (8001cbc <HAL_GPIO_Init+0x320>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	6053      	str	r3, [r2, #4]
 8001c2a:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <HAL_GPIO_Init+0x320>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	61bb      	str	r3, [r7, #24]
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x2b2>
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
 8001c4e:	4a1b      	ldr	r2, [pc, #108]	; (8001cbc <HAL_GPIO_Init+0x320>)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	6093      	str	r3, [r2, #8]
 8001c54:	4b19      	ldr	r3, [pc, #100]	; (8001cbc <HAL_GPIO_Init+0x320>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	61bb      	str	r3, [r7, #24]
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x2dc>
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
 8001c78:	4a10      	ldr	r2, [pc, #64]	; (8001cbc <HAL_GPIO_Init+0x320>)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	60d3      	str	r3, [r2, #12]
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3301      	adds	r3, #1
 8001c82:	61fb      	str	r3, [r7, #28]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	2b0f      	cmp	r3, #15
 8001c88:	f67f ae96 	bls.w	80019b8 <HAL_GPIO_Init+0x1c>
 8001c8c:	bf00      	nop
 8001c8e:	3724      	adds	r7, #36	; 0x24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40013800 	.word	0x40013800
 8001ca0:	40020000 	.word	0x40020000
 8001ca4:	40020400 	.word	0x40020400
 8001ca8:	40020800 	.word	0x40020800
 8001cac:	40020c00 	.word	0x40020c00
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40021400 	.word	0x40021400
 8001cb8:	40021800 	.word	0x40021800
 8001cbc:	40013c00 	.word	0x40013c00

08001cc0 <HAL_PWREx_EnableOverDrive>:
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	607b      	str	r3, [r7, #4]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	603b      	str	r3, [r7, #0]
 8001cce:	4b20      	ldr	r3, [pc, #128]	; (8001d50 <HAL_PWREx_EnableOverDrive+0x90>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	4a1f      	ldr	r2, [pc, #124]	; (8001d50 <HAL_PWREx_EnableOverDrive+0x90>)
 8001cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cda:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <HAL_PWREx_EnableOverDrive+0x90>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_PWREx_EnableOverDrive+0x94>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	f7ff f95e 	bl	8000fac <HAL_GetTick>
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	e009      	b.n	8001d08 <HAL_PWREx_EnableOverDrive+0x48>
 8001cf4:	f7ff f95a 	bl	8000fac <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d02:	d901      	bls.n	8001d08 <HAL_PWREx_EnableOverDrive+0x48>
 8001d04:	2303      	movs	r3, #3
 8001d06:	e01f      	b.n	8001d48 <HAL_PWREx_EnableOverDrive+0x88>
 8001d08:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d14:	d1ee      	bne.n	8001cf4 <HAL_PWREx_EnableOverDrive+0x34>
 8001d16:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	f7ff f946 	bl	8000fac <HAL_GetTick>
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	e009      	b.n	8001d38 <HAL_PWREx_EnableOverDrive+0x78>
 8001d24:	f7ff f942 	bl	8000fac <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d32:	d901      	bls.n	8001d38 <HAL_PWREx_EnableOverDrive+0x78>
 8001d34:	2303      	movs	r3, #3
 8001d36:	e007      	b.n	8001d48 <HAL_PWREx_EnableOverDrive+0x88>
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d44:	d1ee      	bne.n	8001d24 <HAL_PWREx_EnableOverDrive+0x64>
 8001d46:	2300      	movs	r3, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40023800 	.word	0x40023800
 8001d54:	420e0040 	.word	0x420e0040
 8001d58:	40007000 	.word	0x40007000
 8001d5c:	420e0044 	.word	0x420e0044

08001d60 <HAL_RCC_ClockConfig>:
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x14>
 8001d70:	2301      	movs	r3, #1
 8001d72:	e0ca      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1aa>
 8001d74:	4b67      	ldr	r3, [pc, #412]	; (8001f14 <HAL_RCC_ClockConfig+0x1b4>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 030f 	and.w	r3, r3, #15
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d90c      	bls.n	8001d9c <HAL_RCC_ClockConfig+0x3c>
 8001d82:	4b64      	ldr	r3, [pc, #400]	; (8001f14 <HAL_RCC_ClockConfig+0x1b4>)
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	701a      	strb	r2, [r3, #0]
 8001d8a:	4b62      	ldr	r3, [pc, #392]	; (8001f14 <HAL_RCC_ClockConfig+0x1b4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d001      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x3c>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0b6      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1aa>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d020      	beq.n	8001dea <HAL_RCC_ClockConfig+0x8a>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d005      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x60>
 8001db4:	4b58      	ldr	r3, [pc, #352]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	4a57      	ldr	r2, [pc, #348]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001dba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dbe:	6093      	str	r3, [r2, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0308 	and.w	r3, r3, #8
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d005      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x78>
 8001dcc:	4b52      	ldr	r3, [pc, #328]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	4a51      	ldr	r2, [pc, #324]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dd6:	6093      	str	r3, [r2, #8]
 8001dd8:	4b4f      	ldr	r3, [pc, #316]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	494c      	ldr	r1, [pc, #304]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	608b      	str	r3, [r1, #8]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d044      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x120>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d107      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xae>
 8001dfe:	4b46      	ldr	r3, [pc, #280]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d119      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xde>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e07d      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1aa>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d003      	beq.n	8001e1e <HAL_RCC_ClockConfig+0xbe>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b03      	cmp	r3, #3
 8001e1c:	d107      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xce>
 8001e1e:	4b3e      	ldr	r3, [pc, #248]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d109      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xde>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e06d      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1aa>
 8001e2e:	4b3a      	ldr	r3, [pc, #232]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xde>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e065      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1aa>
 8001e3e:	4b36      	ldr	r3, [pc, #216]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f023 0203 	bic.w	r2, r3, #3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	4933      	ldr	r1, [pc, #204]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	608b      	str	r3, [r1, #8]
 8001e50:	f7ff f8ac 	bl	8000fac <HAL_GetTick>
 8001e54:	60f8      	str	r0, [r7, #12]
 8001e56:	e00a      	b.n	8001e6e <HAL_RCC_ClockConfig+0x10e>
 8001e58:	f7ff f8a8 	bl	8000fac <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_ClockConfig+0x10e>
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e04d      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1aa>
 8001e6e:	4b2a      	ldr	r3, [pc, #168]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 020c 	and.w	r2, r3, #12
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d1eb      	bne.n	8001e58 <HAL_RCC_ClockConfig+0xf8>
 8001e80:	4b24      	ldr	r3, [pc, #144]	; (8001f14 <HAL_RCC_ClockConfig+0x1b4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 030f 	and.w	r3, r3, #15
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d20c      	bcs.n	8001ea8 <HAL_RCC_ClockConfig+0x148>
 8001e8e:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <HAL_RCC_ClockConfig+0x1b4>)
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	701a      	strb	r2, [r3, #0]
 8001e96:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <HAL_RCC_ClockConfig+0x1b4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d001      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x148>
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e030      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1aa>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d008      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x166>
 8001eb4:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	4915      	ldr	r1, [pc, #84]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	608b      	str	r3, [r1, #8]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d009      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x186>
 8001ed2:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	490d      	ldr	r1, [pc, #52]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	608b      	str	r3, [r1, #8]
 8001ee6:	f000 f81d 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 8001eea:	4601      	mov	r1, r0
 8001eec:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <HAL_RCC_ClockConfig+0x1b8>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	091b      	lsrs	r3, r3, #4
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	4a09      	ldr	r2, [pc, #36]	; (8001f1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef8:	5cd3      	ldrb	r3, [r2, r3]
 8001efa:	fa21 f303 	lsr.w	r3, r1, r3
 8001efe:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <HAL_RCC_ClockConfig+0x1c0>)
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	2004      	movs	r0, #4
 8001f04:	f7ff f80e 	bl	8000f24 <HAL_InitTick>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40023c00 	.word	0x40023c00
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	0800b294 	.word	0x0800b294
 8001f20:	20000008 	.word	0x20000008

08001f24 <HAL_RCC_GetSysClockFreq>:
 8001f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	2300      	movs	r3, #0
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	2300      	movs	r3, #0
 8001f38:	607b      	str	r3, [r7, #4]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	4bc6      	ldr	r3, [pc, #792]	; (8002258 <HAL_RCC_GetSysClockFreq+0x334>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	2b0c      	cmp	r3, #12
 8001f48:	f200 817e 	bhi.w	8002248 <HAL_RCC_GetSysClockFreq+0x324>
 8001f4c:	a201      	add	r2, pc, #4	; (adr r2, 8001f54 <HAL_RCC_GetSysClockFreq+0x30>)
 8001f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f52:	bf00      	nop
 8001f54:	08001f89 	.word	0x08001f89
 8001f58:	08002249 	.word	0x08002249
 8001f5c:	08002249 	.word	0x08002249
 8001f60:	08002249 	.word	0x08002249
 8001f64:	08001f8f 	.word	0x08001f8f
 8001f68:	08002249 	.word	0x08002249
 8001f6c:	08002249 	.word	0x08002249
 8001f70:	08002249 	.word	0x08002249
 8001f74:	08001f95 	.word	0x08001f95
 8001f78:	08002249 	.word	0x08002249
 8001f7c:	08002249 	.word	0x08002249
 8001f80:	08002249 	.word	0x08002249
 8001f84:	080020f1 	.word	0x080020f1
 8001f88:	4bb4      	ldr	r3, [pc, #720]	; (800225c <HAL_RCC_GetSysClockFreq+0x338>)
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	e15f      	b.n	800224e <HAL_RCC_GetSysClockFreq+0x32a>
 8001f8e:	4bb4      	ldr	r3, [pc, #720]	; (8002260 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	e15c      	b.n	800224e <HAL_RCC_GetSysClockFreq+0x32a>
 8001f94:	4bb0      	ldr	r3, [pc, #704]	; (8002258 <HAL_RCC_GetSysClockFreq+0x334>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	4bae      	ldr	r3, [pc, #696]	; (8002258 <HAL_RCC_GetSysClockFreq+0x334>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d04a      	beq.n	8002040 <HAL_RCC_GetSysClockFreq+0x11c>
 8001faa:	4bab      	ldr	r3, [pc, #684]	; (8002258 <HAL_RCC_GetSysClockFreq+0x334>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	099b      	lsrs	r3, r3, #6
 8001fb0:	f04f 0400 	mov.w	r4, #0
 8001fb4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	ea03 0501 	and.w	r5, r3, r1
 8001fc0:	ea04 0602 	and.w	r6, r4, r2
 8001fc4:	4629      	mov	r1, r5
 8001fc6:	4632      	mov	r2, r6
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	f04f 0400 	mov.w	r4, #0
 8001fd0:	0154      	lsls	r4, r2, #5
 8001fd2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fd6:	014b      	lsls	r3, r1, #5
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4622      	mov	r2, r4
 8001fdc:	1b49      	subs	r1, r1, r5
 8001fde:	eb62 0206 	sbc.w	r2, r2, r6
 8001fe2:	f04f 0300 	mov.w	r3, #0
 8001fe6:	f04f 0400 	mov.w	r4, #0
 8001fea:	0194      	lsls	r4, r2, #6
 8001fec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ff0:	018b      	lsls	r3, r1, #6
 8001ff2:	1a5b      	subs	r3, r3, r1
 8001ff4:	eb64 0402 	sbc.w	r4, r4, r2
 8001ff8:	f04f 0100 	mov.w	r1, #0
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	00e2      	lsls	r2, r4, #3
 8002002:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002006:	00d9      	lsls	r1, r3, #3
 8002008:	460b      	mov	r3, r1
 800200a:	4614      	mov	r4, r2
 800200c:	195b      	adds	r3, r3, r5
 800200e:	eb44 0406 	adc.w	r4, r4, r6
 8002012:	f04f 0100 	mov.w	r1, #0
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	0262      	lsls	r2, r4, #9
 800201c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002020:	0259      	lsls	r1, r3, #9
 8002022:	460b      	mov	r3, r1
 8002024:	4614      	mov	r4, r2
 8002026:	4618      	mov	r0, r3
 8002028:	4621      	mov	r1, r4
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f04f 0400 	mov.w	r4, #0
 8002030:	461a      	mov	r2, r3
 8002032:	4623      	mov	r3, r4
 8002034:	f7fe fdd4 	bl	8000be0 <__aeabi_uldivmod>
 8002038:	4603      	mov	r3, r0
 800203a:	460c      	mov	r4, r1
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	e049      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0x1b0>
 8002040:	4b85      	ldr	r3, [pc, #532]	; (8002258 <HAL_RCC_GetSysClockFreq+0x334>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	099b      	lsrs	r3, r3, #6
 8002046:	f04f 0400 	mov.w	r4, #0
 800204a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	ea03 0501 	and.w	r5, r3, r1
 8002056:	ea04 0602 	and.w	r6, r4, r2
 800205a:	4629      	mov	r1, r5
 800205c:	4632      	mov	r2, r6
 800205e:	f04f 0300 	mov.w	r3, #0
 8002062:	f04f 0400 	mov.w	r4, #0
 8002066:	0154      	lsls	r4, r2, #5
 8002068:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800206c:	014b      	lsls	r3, r1, #5
 800206e:	4619      	mov	r1, r3
 8002070:	4622      	mov	r2, r4
 8002072:	1b49      	subs	r1, r1, r5
 8002074:	eb62 0206 	sbc.w	r2, r2, r6
 8002078:	f04f 0300 	mov.w	r3, #0
 800207c:	f04f 0400 	mov.w	r4, #0
 8002080:	0194      	lsls	r4, r2, #6
 8002082:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002086:	018b      	lsls	r3, r1, #6
 8002088:	1a5b      	subs	r3, r3, r1
 800208a:	eb64 0402 	sbc.w	r4, r4, r2
 800208e:	f04f 0100 	mov.w	r1, #0
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	00e2      	lsls	r2, r4, #3
 8002098:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800209c:	00d9      	lsls	r1, r3, #3
 800209e:	460b      	mov	r3, r1
 80020a0:	4614      	mov	r4, r2
 80020a2:	195b      	adds	r3, r3, r5
 80020a4:	eb44 0406 	adc.w	r4, r4, r6
 80020a8:	f04f 0100 	mov.w	r1, #0
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	02a2      	lsls	r2, r4, #10
 80020b2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80020b6:	0299      	lsls	r1, r3, #10
 80020b8:	460b      	mov	r3, r1
 80020ba:	4614      	mov	r4, r2
 80020bc:	4618      	mov	r0, r3
 80020be:	4621      	mov	r1, r4
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f04f 0400 	mov.w	r4, #0
 80020c6:	461a      	mov	r2, r3
 80020c8:	4623      	mov	r3, r4
 80020ca:	f7fe fd89 	bl	8000be0 <__aeabi_uldivmod>
 80020ce:	4603      	mov	r3, r0
 80020d0:	460c      	mov	r4, r1
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	4b60      	ldr	r3, [pc, #384]	; (8002258 <HAL_RCC_GetSysClockFreq+0x334>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	0c1b      	lsrs	r3, r3, #16
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	3301      	adds	r3, #1
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	e0ae      	b.n	800224e <HAL_RCC_GetSysClockFreq+0x32a>
 80020f0:	4b59      	ldr	r3, [pc, #356]	; (8002258 <HAL_RCC_GetSysClockFreq+0x334>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	4b57      	ldr	r3, [pc, #348]	; (8002258 <HAL_RCC_GetSysClockFreq+0x334>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d04a      	beq.n	800219c <HAL_RCC_GetSysClockFreq+0x278>
 8002106:	4b54      	ldr	r3, [pc, #336]	; (8002258 <HAL_RCC_GetSysClockFreq+0x334>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	099b      	lsrs	r3, r3, #6
 800210c:	f04f 0400 	mov.w	r4, #0
 8002110:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	ea03 0501 	and.w	r5, r3, r1
 800211c:	ea04 0602 	and.w	r6, r4, r2
 8002120:	4629      	mov	r1, r5
 8002122:	4632      	mov	r2, r6
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	f04f 0400 	mov.w	r4, #0
 800212c:	0154      	lsls	r4, r2, #5
 800212e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002132:	014b      	lsls	r3, r1, #5
 8002134:	4619      	mov	r1, r3
 8002136:	4622      	mov	r2, r4
 8002138:	1b49      	subs	r1, r1, r5
 800213a:	eb62 0206 	sbc.w	r2, r2, r6
 800213e:	f04f 0300 	mov.w	r3, #0
 8002142:	f04f 0400 	mov.w	r4, #0
 8002146:	0194      	lsls	r4, r2, #6
 8002148:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800214c:	018b      	lsls	r3, r1, #6
 800214e:	1a5b      	subs	r3, r3, r1
 8002150:	eb64 0402 	sbc.w	r4, r4, r2
 8002154:	f04f 0100 	mov.w	r1, #0
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	00e2      	lsls	r2, r4, #3
 800215e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002162:	00d9      	lsls	r1, r3, #3
 8002164:	460b      	mov	r3, r1
 8002166:	4614      	mov	r4, r2
 8002168:	195b      	adds	r3, r3, r5
 800216a:	eb44 0406 	adc.w	r4, r4, r6
 800216e:	f04f 0100 	mov.w	r1, #0
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	0262      	lsls	r2, r4, #9
 8002178:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800217c:	0259      	lsls	r1, r3, #9
 800217e:	460b      	mov	r3, r1
 8002180:	4614      	mov	r4, r2
 8002182:	4618      	mov	r0, r3
 8002184:	4621      	mov	r1, r4
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f04f 0400 	mov.w	r4, #0
 800218c:	461a      	mov	r2, r3
 800218e:	4623      	mov	r3, r4
 8002190:	f7fe fd26 	bl	8000be0 <__aeabi_uldivmod>
 8002194:	4603      	mov	r3, r0
 8002196:	460c      	mov	r4, r1
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	e049      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0x30c>
 800219c:	4b2e      	ldr	r3, [pc, #184]	; (8002258 <HAL_RCC_GetSysClockFreq+0x334>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	099b      	lsrs	r3, r3, #6
 80021a2:	f04f 0400 	mov.w	r4, #0
 80021a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	ea03 0501 	and.w	r5, r3, r1
 80021b2:	ea04 0602 	and.w	r6, r4, r2
 80021b6:	4629      	mov	r1, r5
 80021b8:	4632      	mov	r2, r6
 80021ba:	f04f 0300 	mov.w	r3, #0
 80021be:	f04f 0400 	mov.w	r4, #0
 80021c2:	0154      	lsls	r4, r2, #5
 80021c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021c8:	014b      	lsls	r3, r1, #5
 80021ca:	4619      	mov	r1, r3
 80021cc:	4622      	mov	r2, r4
 80021ce:	1b49      	subs	r1, r1, r5
 80021d0:	eb62 0206 	sbc.w	r2, r2, r6
 80021d4:	f04f 0300 	mov.w	r3, #0
 80021d8:	f04f 0400 	mov.w	r4, #0
 80021dc:	0194      	lsls	r4, r2, #6
 80021de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021e2:	018b      	lsls	r3, r1, #6
 80021e4:	1a5b      	subs	r3, r3, r1
 80021e6:	eb64 0402 	sbc.w	r4, r4, r2
 80021ea:	f04f 0100 	mov.w	r1, #0
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	00e2      	lsls	r2, r4, #3
 80021f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80021f8:	00d9      	lsls	r1, r3, #3
 80021fa:	460b      	mov	r3, r1
 80021fc:	4614      	mov	r4, r2
 80021fe:	195b      	adds	r3, r3, r5
 8002200:	eb44 0406 	adc.w	r4, r4, r6
 8002204:	f04f 0100 	mov.w	r1, #0
 8002208:	f04f 0200 	mov.w	r2, #0
 800220c:	02a2      	lsls	r2, r4, #10
 800220e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002212:	0299      	lsls	r1, r3, #10
 8002214:	460b      	mov	r3, r1
 8002216:	4614      	mov	r4, r2
 8002218:	4618      	mov	r0, r3
 800221a:	4621      	mov	r1, r4
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f04f 0400 	mov.w	r4, #0
 8002222:	461a      	mov	r2, r3
 8002224:	4623      	mov	r3, r4
 8002226:	f7fe fcdb 	bl	8000be0 <__aeabi_uldivmod>
 800222a:	4603      	mov	r3, r0
 800222c:	460c      	mov	r4, r1
 800222e:	617b      	str	r3, [r7, #20]
 8002230:	4b09      	ldr	r3, [pc, #36]	; (8002258 <HAL_RCC_GetSysClockFreq+0x334>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	0f1b      	lsrs	r3, r3, #28
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	607b      	str	r3, [r7, #4]
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	fbb2 f3f3 	udiv	r3, r2, r3
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	e002      	b.n	800224e <HAL_RCC_GetSysClockFreq+0x32a>
 8002248:	4b04      	ldr	r3, [pc, #16]	; (800225c <HAL_RCC_GetSysClockFreq+0x338>)
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	bf00      	nop
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4618      	mov	r0, r3
 8002252:	371c      	adds	r7, #28
 8002254:	46bd      	mov	sp, r7
 8002256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002258:	40023800 	.word	0x40023800
 800225c:	00f42400 	.word	0x00f42400
 8002260:	007a1200 	.word	0x007a1200

08002264 <HAL_RCC_OscConfig>:
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	2300      	movs	r3, #0
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 8083 	beq.w	8002384 <HAL_RCC_OscConfig+0x120>
 800227e:	4b95      	ldr	r3, [pc, #596]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 030c 	and.w	r3, r3, #12
 8002286:	2b04      	cmp	r3, #4
 8002288:	d019      	beq.n	80022be <HAL_RCC_OscConfig+0x5a>
 800228a:	4b92      	ldr	r3, [pc, #584]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	2b08      	cmp	r3, #8
 8002294:	d106      	bne.n	80022a4 <HAL_RCC_OscConfig+0x40>
 8002296:	4b8f      	ldr	r3, [pc, #572]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800229e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022a2:	d00c      	beq.n	80022be <HAL_RCC_OscConfig+0x5a>
 80022a4:	4b8b      	ldr	r3, [pc, #556]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 030c 	and.w	r3, r3, #12
 80022ac:	2b0c      	cmp	r3, #12
 80022ae:	d112      	bne.n	80022d6 <HAL_RCC_OscConfig+0x72>
 80022b0:	4b88      	ldr	r3, [pc, #544]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022bc:	d10b      	bne.n	80022d6 <HAL_RCC_OscConfig+0x72>
 80022be:	4b85      	ldr	r3, [pc, #532]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d05b      	beq.n	8002382 <HAL_RCC_OscConfig+0x11e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d157      	bne.n	8002382 <HAL_RCC_OscConfig+0x11e>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e216      	b.n	8002704 <HAL_RCC_OscConfig+0x4a0>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022de:	d106      	bne.n	80022ee <HAL_RCC_OscConfig+0x8a>
 80022e0:	4b7c      	ldr	r3, [pc, #496]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a7b      	ldr	r2, [pc, #492]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80022e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	e01d      	b.n	800232a <HAL_RCC_OscConfig+0xc6>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022f6:	d10c      	bne.n	8002312 <HAL_RCC_OscConfig+0xae>
 80022f8:	4b76      	ldr	r3, [pc, #472]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a75      	ldr	r2, [pc, #468]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80022fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	4b73      	ldr	r3, [pc, #460]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a72      	ldr	r2, [pc, #456]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 800230a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	e00b      	b.n	800232a <HAL_RCC_OscConfig+0xc6>
 8002312:	4b70      	ldr	r3, [pc, #448]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a6f      	ldr	r2, [pc, #444]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	4b6d      	ldr	r3, [pc, #436]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a6c      	ldr	r2, [pc, #432]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002324:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d013      	beq.n	800235a <HAL_RCC_OscConfig+0xf6>
 8002332:	f7fe fe3b 	bl	8000fac <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0xe8>
 800233a:	f7fe fe37 	bl	8000fac <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b64      	cmp	r3, #100	; 0x64
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0xe8>
 8002348:	2303      	movs	r3, #3
 800234a:	e1db      	b.n	8002704 <HAL_RCC_OscConfig+0x4a0>
 800234c:	4b61      	ldr	r3, [pc, #388]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0f0      	beq.n	800233a <HAL_RCC_OscConfig+0xd6>
 8002358:	e014      	b.n	8002384 <HAL_RCC_OscConfig+0x120>
 800235a:	f7fe fe27 	bl	8000fac <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x110>
 8002362:	f7fe fe23 	bl	8000fac <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b64      	cmp	r3, #100	; 0x64
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x110>
 8002370:	2303      	movs	r3, #3
 8002372:	e1c7      	b.n	8002704 <HAL_RCC_OscConfig+0x4a0>
 8002374:	4b57      	ldr	r3, [pc, #348]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1f0      	bne.n	8002362 <HAL_RCC_OscConfig+0xfe>
 8002380:	e000      	b.n	8002384 <HAL_RCC_OscConfig+0x120>
 8002382:	bf00      	nop
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d06f      	beq.n	8002470 <HAL_RCC_OscConfig+0x20c>
 8002390:	4b50      	ldr	r3, [pc, #320]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 030c 	and.w	r3, r3, #12
 8002398:	2b00      	cmp	r3, #0
 800239a:	d017      	beq.n	80023cc <HAL_RCC_OscConfig+0x168>
 800239c:	4b4d      	ldr	r3, [pc, #308]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 030c 	and.w	r3, r3, #12
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d105      	bne.n	80023b4 <HAL_RCC_OscConfig+0x150>
 80023a8:	4b4a      	ldr	r3, [pc, #296]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00b      	beq.n	80023cc <HAL_RCC_OscConfig+0x168>
 80023b4:	4b47      	ldr	r3, [pc, #284]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 030c 	and.w	r3, r3, #12
 80023bc:	2b0c      	cmp	r3, #12
 80023be:	d11c      	bne.n	80023fa <HAL_RCC_OscConfig+0x196>
 80023c0:	4b44      	ldr	r3, [pc, #272]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d116      	bne.n	80023fa <HAL_RCC_OscConfig+0x196>
 80023cc:	4b41      	ldr	r3, [pc, #260]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d005      	beq.n	80023e4 <HAL_RCC_OscConfig+0x180>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d001      	beq.n	80023e4 <HAL_RCC_OscConfig+0x180>
 80023e0:	2301      	movs	r3, #1
 80023e2:	e18f      	b.n	8002704 <HAL_RCC_OscConfig+0x4a0>
 80023e4:	4b3b      	ldr	r3, [pc, #236]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	4938      	ldr	r1, [pc, #224]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	600b      	str	r3, [r1, #0]
 80023f8:	e03a      	b.n	8002470 <HAL_RCC_OscConfig+0x20c>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d020      	beq.n	8002444 <HAL_RCC_OscConfig+0x1e0>
 8002402:	4b35      	ldr	r3, [pc, #212]	; (80024d8 <HAL_RCC_OscConfig+0x274>)
 8002404:	2201      	movs	r2, #1
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	f7fe fdd0 	bl	8000fac <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x1be>
 8002410:	f7fe fdcc 	bl	8000fac <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x1be>
 800241e:	2303      	movs	r3, #3
 8002420:	e170      	b.n	8002704 <HAL_RCC_OscConfig+0x4a0>
 8002422:	4b2c      	ldr	r3, [pc, #176]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f0      	beq.n	8002410 <HAL_RCC_OscConfig+0x1ac>
 800242e:	4b29      	ldr	r3, [pc, #164]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	4925      	ldr	r1, [pc, #148]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 800243e:	4313      	orrs	r3, r2
 8002440:	600b      	str	r3, [r1, #0]
 8002442:	e015      	b.n	8002470 <HAL_RCC_OscConfig+0x20c>
 8002444:	4b24      	ldr	r3, [pc, #144]	; (80024d8 <HAL_RCC_OscConfig+0x274>)
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	f7fe fdaf 	bl	8000fac <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x200>
 8002452:	f7fe fdab 	bl	8000fac <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x200>
 8002460:	2303      	movs	r3, #3
 8002462:	e14f      	b.n	8002704 <HAL_RCC_OscConfig+0x4a0>
 8002464:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f0      	bne.n	8002452 <HAL_RCC_OscConfig+0x1ee>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0308 	and.w	r3, r3, #8
 8002478:	2b00      	cmp	r3, #0
 800247a:	d037      	beq.n	80024ec <HAL_RCC_OscConfig+0x288>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d016      	beq.n	80024b2 <HAL_RCC_OscConfig+0x24e>
 8002484:	4b15      	ldr	r3, [pc, #84]	; (80024dc <HAL_RCC_OscConfig+0x278>)
 8002486:	2201      	movs	r2, #1
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	f7fe fd8f 	bl	8000fac <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x240>
 8002492:	f7fe fd8b 	bl	8000fac <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x240>
 80024a0:	2303      	movs	r3, #3
 80024a2:	e12f      	b.n	8002704 <HAL_RCC_OscConfig+0x4a0>
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80024a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0x22e>
 80024b0:	e01c      	b.n	80024ec <HAL_RCC_OscConfig+0x288>
 80024b2:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <HAL_RCC_OscConfig+0x278>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	f7fe fd78 	bl	8000fac <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]
 80024be:	e00f      	b.n	80024e0 <HAL_RCC_OscConfig+0x27c>
 80024c0:	f7fe fd74 	bl	8000fac <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d908      	bls.n	80024e0 <HAL_RCC_OscConfig+0x27c>
 80024ce:	2303      	movs	r3, #3
 80024d0:	e118      	b.n	8002704 <HAL_RCC_OscConfig+0x4a0>
 80024d2:	bf00      	nop
 80024d4:	40023800 	.word	0x40023800
 80024d8:	42470000 	.word	0x42470000
 80024dc:	42470e80 	.word	0x42470e80
 80024e0:	4b8a      	ldr	r3, [pc, #552]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 80024e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1e9      	bne.n	80024c0 <HAL_RCC_OscConfig+0x25c>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 8097 	beq.w	8002628 <HAL_RCC_OscConfig+0x3c4>
 80024fa:	2300      	movs	r3, #0
 80024fc:	75fb      	strb	r3, [r7, #23]
 80024fe:	4b83      	ldr	r3, [pc, #524]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10f      	bne.n	800252a <HAL_RCC_OscConfig+0x2c6>
 800250a:	2300      	movs	r3, #0
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	4b7f      	ldr	r3, [pc, #508]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	4a7e      	ldr	r2, [pc, #504]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 8002514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002518:	6413      	str	r3, [r2, #64]	; 0x40
 800251a:	4b7c      	ldr	r3, [pc, #496]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2301      	movs	r3, #1
 8002528:	75fb      	strb	r3, [r7, #23]
 800252a:	4b79      	ldr	r3, [pc, #484]	; (8002710 <HAL_RCC_OscConfig+0x4ac>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002532:	2b00      	cmp	r3, #0
 8002534:	d118      	bne.n	8002568 <HAL_RCC_OscConfig+0x304>
 8002536:	4b76      	ldr	r3, [pc, #472]	; (8002710 <HAL_RCC_OscConfig+0x4ac>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a75      	ldr	r2, [pc, #468]	; (8002710 <HAL_RCC_OscConfig+0x4ac>)
 800253c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	f7fe fd33 	bl	8000fac <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x2f8>
 800254a:	f7fe fd2f 	bl	8000fac <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x2f8>
 8002558:	2303      	movs	r3, #3
 800255a:	e0d3      	b.n	8002704 <HAL_RCC_OscConfig+0x4a0>
 800255c:	4b6c      	ldr	r3, [pc, #432]	; (8002710 <HAL_RCC_OscConfig+0x4ac>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f0      	beq.n	800254a <HAL_RCC_OscConfig+0x2e6>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d106      	bne.n	800257e <HAL_RCC_OscConfig+0x31a>
 8002570:	4b66      	ldr	r3, [pc, #408]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 8002572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002574:	4a65      	ldr	r2, [pc, #404]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	6713      	str	r3, [r2, #112]	; 0x70
 800257c:	e01c      	b.n	80025b8 <HAL_RCC_OscConfig+0x354>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b05      	cmp	r3, #5
 8002584:	d10c      	bne.n	80025a0 <HAL_RCC_OscConfig+0x33c>
 8002586:	4b61      	ldr	r3, [pc, #388]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258a:	4a60      	ldr	r2, [pc, #384]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 800258c:	f043 0304 	orr.w	r3, r3, #4
 8002590:	6713      	str	r3, [r2, #112]	; 0x70
 8002592:	4b5e      	ldr	r3, [pc, #376]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 8002594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002596:	4a5d      	ldr	r2, [pc, #372]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	6713      	str	r3, [r2, #112]	; 0x70
 800259e:	e00b      	b.n	80025b8 <HAL_RCC_OscConfig+0x354>
 80025a0:	4b5a      	ldr	r3, [pc, #360]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 80025a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a4:	4a59      	ldr	r2, [pc, #356]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 80025a6:	f023 0301 	bic.w	r3, r3, #1
 80025aa:	6713      	str	r3, [r2, #112]	; 0x70
 80025ac:	4b57      	ldr	r3, [pc, #348]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 80025ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b0:	4a56      	ldr	r2, [pc, #344]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 80025b2:	f023 0304 	bic.w	r3, r3, #4
 80025b6:	6713      	str	r3, [r2, #112]	; 0x70
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d015      	beq.n	80025ec <HAL_RCC_OscConfig+0x388>
 80025c0:	f7fe fcf4 	bl	8000fac <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]
 80025c6:	e00a      	b.n	80025de <HAL_RCC_OscConfig+0x37a>
 80025c8:	f7fe fcf0 	bl	8000fac <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x37a>
 80025da:	2303      	movs	r3, #3
 80025dc:	e092      	b.n	8002704 <HAL_RCC_OscConfig+0x4a0>
 80025de:	4b4b      	ldr	r3, [pc, #300]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0ee      	beq.n	80025c8 <HAL_RCC_OscConfig+0x364>
 80025ea:	e014      	b.n	8002616 <HAL_RCC_OscConfig+0x3b2>
 80025ec:	f7fe fcde 	bl	8000fac <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]
 80025f2:	e00a      	b.n	800260a <HAL_RCC_OscConfig+0x3a6>
 80025f4:	f7fe fcda 	bl	8000fac <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002602:	4293      	cmp	r3, r2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x3a6>
 8002606:	2303      	movs	r3, #3
 8002608:	e07c      	b.n	8002704 <HAL_RCC_OscConfig+0x4a0>
 800260a:	4b40      	ldr	r3, [pc, #256]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 800260c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1ee      	bne.n	80025f4 <HAL_RCC_OscConfig+0x390>
 8002616:	7dfb      	ldrb	r3, [r7, #23]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d105      	bne.n	8002628 <HAL_RCC_OscConfig+0x3c4>
 800261c:	4b3b      	ldr	r3, [pc, #236]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 800261e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002620:	4a3a      	ldr	r2, [pc, #232]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 8002622:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002626:	6413      	str	r3, [r2, #64]	; 0x40
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d068      	beq.n	8002702 <HAL_RCC_OscConfig+0x49e>
 8002630:	4b36      	ldr	r3, [pc, #216]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 030c 	and.w	r3, r3, #12
 8002638:	2b08      	cmp	r3, #8
 800263a:	d060      	beq.n	80026fe <HAL_RCC_OscConfig+0x49a>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d145      	bne.n	80026d0 <HAL_RCC_OscConfig+0x46c>
 8002644:	4b33      	ldr	r3, [pc, #204]	; (8002714 <HAL_RCC_OscConfig+0x4b0>)
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	f7fe fcaf 	bl	8000fac <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x400>
 8002652:	f7fe fcab 	bl	8000fac <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x400>
 8002660:	2303      	movs	r3, #3
 8002662:	e04f      	b.n	8002704 <HAL_RCC_OscConfig+0x4a0>
 8002664:	4b29      	ldr	r3, [pc, #164]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1f0      	bne.n	8002652 <HAL_RCC_OscConfig+0x3ee>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69da      	ldr	r2, [r3, #28]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	019b      	lsls	r3, r3, #6
 8002680:	431a      	orrs	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002686:	085b      	lsrs	r3, r3, #1
 8002688:	3b01      	subs	r3, #1
 800268a:	041b      	lsls	r3, r3, #16
 800268c:	431a      	orrs	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002692:	061b      	lsls	r3, r3, #24
 8002694:	431a      	orrs	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	071b      	lsls	r3, r3, #28
 800269c:	491b      	ldr	r1, [pc, #108]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	604b      	str	r3, [r1, #4]
 80026a2:	4b1c      	ldr	r3, [pc, #112]	; (8002714 <HAL_RCC_OscConfig+0x4b0>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	f7fe fc80 	bl	8000fac <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x45e>
 80026b0:	f7fe fc7c 	bl	8000fac <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x45e>
 80026be:	2303      	movs	r3, #3
 80026c0:	e020      	b.n	8002704 <HAL_RCC_OscConfig+0x4a0>
 80026c2:	4b12      	ldr	r3, [pc, #72]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0x44c>
 80026ce:	e018      	b.n	8002702 <HAL_RCC_OscConfig+0x49e>
 80026d0:	4b10      	ldr	r3, [pc, #64]	; (8002714 <HAL_RCC_OscConfig+0x4b0>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	f7fe fc69 	bl	8000fac <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x48c>
 80026de:	f7fe fc65 	bl	8000fac <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x48c>
 80026ec:	2303      	movs	r3, #3
 80026ee:	e009      	b.n	8002704 <HAL_RCC_OscConfig+0x4a0>
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_RCC_OscConfig+0x4a8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1f0      	bne.n	80026de <HAL_RCC_OscConfig+0x47a>
 80026fc:	e001      	b.n	8002702 <HAL_RCC_OscConfig+0x49e>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_RCC_OscConfig+0x4a0>
 8002702:	2300      	movs	r3, #0
 8002704:	4618      	mov	r0, r3
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40023800 	.word	0x40023800
 8002710:	40007000 	.word	0x40007000
 8002714:	42470060 	.word	0x42470060

08002718 <LL_ADC_REG_SetSequencerLength>:
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002726:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	62da      	str	r2, [r3, #44]	; 0x2c
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <LL_ADC_INJ_SetSequencerLength>:
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	6039      	str	r1, [r7, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	639a      	str	r2, [r3, #56]	; 0x38
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <LL_ADC_IsEnabled>:
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b01      	cmp	r3, #1
 8002776:	bf0c      	ite	eq
 8002778:	2301      	moveq	r3, #1
 800277a:	2300      	movne	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	4618      	mov	r0, r3
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <LL_ADC_CommonInit>:
 800278c:	b590      	push	{r4, r7, lr}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
 8002796:	2300      	movs	r3, #0
 8002798:	73fb      	strb	r3, [r7, #15]
 800279a:	481c      	ldr	r0, [pc, #112]	; (800280c <LL_ADC_CommonInit+0x80>)
 800279c:	f7ff ffe2 	bl	8002764 <LL_ADC_IsEnabled>
 80027a0:	4604      	mov	r4, r0
 80027a2:	481b      	ldr	r0, [pc, #108]	; (8002810 <LL_ADC_CommonInit+0x84>)
 80027a4:	f7ff ffde 	bl	8002764 <LL_ADC_IsEnabled>
 80027a8:	4603      	mov	r3, r0
 80027aa:	431c      	orrs	r4, r3
 80027ac:	4819      	ldr	r0, [pc, #100]	; (8002814 <LL_ADC_CommonInit+0x88>)
 80027ae:	f7ff ffd9 	bl	8002764 <LL_ADC_IsEnabled>
 80027b2:	4603      	mov	r3, r0
 80027b4:	4323      	orrs	r3, r4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d120      	bne.n	80027fc <LL_ADC_CommonInit+0x70>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d012      	beq.n	80027e8 <LL_ADC_CommonInit+0x5c>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	4b14      	ldr	r3, [pc, #80]	; (8002818 <LL_ADC_CommonInit+0x8c>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	6811      	ldr	r1, [r2, #0]
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	6852      	ldr	r2, [r2, #4]
 80027d2:	4311      	orrs	r1, r2
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	6892      	ldr	r2, [r2, #8]
 80027d8:	4311      	orrs	r1, r2
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	68d2      	ldr	r2, [r2, #12]
 80027de:	430a      	orrs	r2, r1
 80027e0:	431a      	orrs	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	e00b      	b.n	8002800 <LL_ADC_CommonInit+0x74>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <LL_ADC_CommonInit+0x8c>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	e001      	b.n	8002800 <LL_ADC_CommonInit+0x74>
 80027fc:	2301      	movs	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
 8002800:	7bfb      	ldrb	r3, [r7, #15]
 8002802:	4618      	mov	r0, r3
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	bd90      	pop	{r4, r7, pc}
 800280a:	bf00      	nop
 800280c:	40012000 	.word	0x40012000
 8002810:	40012100 	.word	0x40012100
 8002814:	40012200 	.word	0x40012200
 8002818:	fffc10e0 	.word	0xfffc10e0

0800281c <LL_ADC_Init>:
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
 8002826:	2300      	movs	r3, #0
 8002828:	73fb      	strb	r3, [r7, #15]
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7ff ff9a 	bl	8002764 <LL_ADC_IsEnabled>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d117      	bne.n	8002866 <LL_ADC_Init+0x4a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800283e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	6811      	ldr	r1, [r2, #0]
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	6892      	ldr	r2, [r2, #8]
 800284a:	430a      	orrs	r2, r1
 800284c:	431a      	orrs	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	e001      	b.n	800286a <LL_ADC_Init+0x4e>
 8002866:	2301      	movs	r3, #1
 8002868:	73fb      	strb	r3, [r7, #15]
 800286a:	7bfb      	ldrb	r3, [r7, #15]
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <LL_ADC_REG_Init>:
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
 800287e:	2300      	movs	r3, #0
 8002880:	73fb      	strb	r3, [r7, #15]
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff ff6e 	bl	8002764 <LL_ADC_IsEnabled>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d131      	bne.n	80028f2 <LL_ADC_REG_Init+0x7e>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00c      	beq.n	80028b0 <LL_ADC_REG_Init+0x3c>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	6859      	ldr	r1, [r3, #4]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	430b      	orrs	r3, r1
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	e008      	b.n	80028c2 <LL_ADC_REG_Init+0x4e>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	431a      	orrs	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <LL_ADC_REG_Init+0x8c>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	6812      	ldr	r2, [r2, #0]
 80028ce:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	68d2      	ldr	r2, [r2, #12]
 80028d6:	4311      	orrs	r1, r2
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	6912      	ldr	r2, [r2, #16]
 80028dc:	430a      	orrs	r2, r1
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	4619      	mov	r1, r3
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff ff14 	bl	8002718 <LL_ADC_REG_SetSequencerLength>
 80028f0:	e001      	b.n	80028f6 <LL_ADC_REG_Init+0x82>
 80028f2:	2301      	movs	r3, #1
 80028f4:	73fb      	strb	r3, [r7, #15]
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	c0fffcfd 	.word	0xc0fffcfd

08002904 <LL_ADC_INJ_Init>:
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
 800290e:	2300      	movs	r3, #0
 8002910:	73fb      	strb	r3, [r7, #15]
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff ff26 	bl	8002764 <LL_ADC_IsEnabled>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d12b      	bne.n	8002976 <LL_ADC_INJ_Init+0x72>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00c      	beq.n	8002940 <LL_ADC_INJ_Init+0x3c>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f423 52a0 	bic.w	r2, r3, #5120	; 0x1400
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	6899      	ldr	r1, [r3, #8]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	430b      	orrs	r3, r1
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	e008      	b.n	8002952 <LL_ADC_INJ_Init+0x4e>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f423 52a0 	bic.w	r2, r3, #5120	; 0x1400
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4619      	mov	r1, r3
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7ff fee5 	bl	800273e <LL_ADC_INJ_SetSequencerLength>
 8002974:	e001      	b.n	800297a <LL_ADC_INJ_Init+0x76>
 8002976:	2301      	movs	r3, #1
 8002978:	73fb      	strb	r3, [r7, #15]
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <LL_EXTI_EnableIT_0_31>:
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <LL_EXTI_EnableIT_0_31+0x20>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4904      	ldr	r1, [pc, #16]	; (80029a4 <LL_EXTI_EnableIT_0_31+0x20>)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4313      	orrs	r3, r2
 8002996:	600b      	str	r3, [r1, #0]
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	40013c00 	.word	0x40013c00

080029a8 <LL_EXTI_DisableIT_0_31>:
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	4b06      	ldr	r3, [pc, #24]	; (80029cc <LL_EXTI_DisableIT_0_31+0x24>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	43db      	mvns	r3, r3
 80029b8:	4904      	ldr	r1, [pc, #16]	; (80029cc <LL_EXTI_DisableIT_0_31+0x24>)
 80029ba:	4013      	ands	r3, r2
 80029bc:	600b      	str	r3, [r1, #0]
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40013c00 	.word	0x40013c00

080029d0 <LL_EXTI_EnableEvent_0_31>:
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	4904      	ldr	r1, [pc, #16]	; (80029f0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	604b      	str	r3, [r1, #4]
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	40013c00 	.word	0x40013c00

080029f4 <LL_EXTI_DisableEvent_0_31>:
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <LL_EXTI_DisableEvent_0_31+0x24>)
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	43db      	mvns	r3, r3
 8002a04:	4904      	ldr	r1, [pc, #16]	; (8002a18 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002a06:	4013      	ands	r3, r2
 8002a08:	604b      	str	r3, [r1, #4]
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40013c00 	.word	0x40013c00

08002a1c <LL_EXTI_EnableRisingTrig_0_31>:
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	4904      	ldr	r1, [pc, #16]	; (8002a3c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	608b      	str	r3, [r1, #8]
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	40013c00 	.word	0x40013c00

08002a40 <LL_EXTI_DisableRisingTrig_0_31>:
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	4904      	ldr	r1, [pc, #16]	; (8002a64 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	608b      	str	r3, [r1, #8]
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40013c00 	.word	0x40013c00

08002a68 <LL_EXTI_EnableFallingTrig_0_31>:
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	4904      	ldr	r1, [pc, #16]	; (8002a88 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	60cb      	str	r3, [r1, #12]
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	40013c00 	.word	0x40013c00

08002a8c <LL_EXTI_DisableFallingTrig_0_31>:
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	4904      	ldr	r1, [pc, #16]	; (8002ab0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	60cb      	str	r3, [r1, #12]
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40013c00 	.word	0x40013c00

08002ab4 <LL_EXTI_Init>:
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	2300      	movs	r3, #0
 8002abe:	73fb      	strb	r3, [r7, #15]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	791b      	ldrb	r3, [r3, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d060      	beq.n	8002b8a <LL_EXTI_Init+0xd6>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d067      	beq.n	8002ba0 <LL_EXTI_Init+0xec>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	795b      	ldrb	r3, [r3, #5]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d00e      	beq.n	8002af6 <LL_EXTI_Init+0x42>
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d017      	beq.n	8002b0c <LL_EXTI_Init+0x58>
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d120      	bne.n	8002b22 <LL_EXTI_Init+0x6e>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff ff85 	bl	80029f4 <LL_EXTI_DisableEvent_0_31>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff ff48 	bl	8002984 <LL_EXTI_EnableIT_0_31>
 8002af4:	e018      	b.n	8002b28 <LL_EXTI_Init+0x74>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff ff54 	bl	80029a8 <LL_EXTI_DisableIT_0_31>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff ff63 	bl	80029d0 <LL_EXTI_EnableEvent_0_31>
 8002b0a:	e00d      	b.n	8002b28 <LL_EXTI_Init+0x74>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff ff37 	bl	8002984 <LL_EXTI_EnableIT_0_31>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff ff58 	bl	80029d0 <LL_EXTI_EnableEvent_0_31>
 8002b20:	e002      	b.n	8002b28 <LL_EXTI_Init+0x74>
 8002b22:	2301      	movs	r3, #1
 8002b24:	73fb      	strb	r3, [r7, #15]
 8002b26:	bf00      	nop
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	799b      	ldrb	r3, [r3, #6]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d037      	beq.n	8002ba0 <LL_EXTI_Init+0xec>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	799b      	ldrb	r3, [r3, #6]
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d00e      	beq.n	8002b56 <LL_EXTI_Init+0xa2>
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d017      	beq.n	8002b6c <LL_EXTI_Init+0xb8>
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d120      	bne.n	8002b82 <LL_EXTI_Init+0xce>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff ffa1 	bl	8002a8c <LL_EXTI_DisableFallingTrig_0_31>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff ff64 	bl	8002a1c <LL_EXTI_EnableRisingTrig_0_31>
 8002b54:	e025      	b.n	8002ba2 <LL_EXTI_Init+0xee>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff ff70 	bl	8002a40 <LL_EXTI_DisableRisingTrig_0_31>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff ff7f 	bl	8002a68 <LL_EXTI_EnableFallingTrig_0_31>
 8002b6a:	e01a      	b.n	8002ba2 <LL_EXTI_Init+0xee>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff ff53 	bl	8002a1c <LL_EXTI_EnableRisingTrig_0_31>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff ff74 	bl	8002a68 <LL_EXTI_EnableFallingTrig_0_31>
 8002b80:	e00f      	b.n	8002ba2 <LL_EXTI_Init+0xee>
 8002b82:	2301      	movs	r3, #1
 8002b84:	73fb      	strb	r3, [r7, #15]
 8002b86:	bf00      	nop
 8002b88:	e00b      	b.n	8002ba2 <LL_EXTI_Init+0xee>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff ff0a 	bl	80029a8 <LL_EXTI_DisableIT_0_31>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff ff2b 	bl	80029f4 <LL_EXTI_DisableEvent_0_31>
 8002b9e:	e000      	b.n	8002ba2 <LL_EXTI_Init+0xee>
 8002ba0:	bf00      	nop
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <LL_GPIO_SetPinMode>:
 8002bac:	b480      	push	{r7}
 8002bae:	b089      	sub	sp, #36	; 0x24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	fa93 f3a3 	rbit	r3, r3
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	fab3 f383 	clz	r3, r3
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	2103      	movs	r1, #3
 8002bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	401a      	ands	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	61fb      	str	r3, [r7, #28]
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	61bb      	str	r3, [r7, #24]
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	bf00      	nop
 8002c00:	3724      	adds	r7, #36	; 0x24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <LL_GPIO_SetPinOutputType>:
 8002c0a:	b480      	push	{r7}
 8002c0c:	b085      	sub	sp, #20
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	607a      	str	r2, [r7, #4]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	401a      	ands	r2, r3
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	fb01 f303 	mul.w	r3, r1, r3
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	bf00      	nop
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <LL_GPIO_SetPinSpeed>:
 8002c3a:	b480      	push	{r7}
 8002c3c:	b089      	sub	sp, #36	; 0x24
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	607a      	str	r2, [r7, #4]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	fa93 f3a3 	rbit	r3, r3
 8002c54:	613b      	str	r3, [r7, #16]
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	fab3 f383 	clz	r3, r3
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	2103      	movs	r1, #3
 8002c62:	fa01 f303 	lsl.w	r3, r1, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	401a      	ands	r2, r3
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	61fb      	str	r3, [r7, #28]
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	fa93 f3a3 	rbit	r3, r3
 8002c74:	61bb      	str	r3, [r7, #24]
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	fab3 f383 	clz	r3, r3
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	fa01 f303 	lsl.w	r3, r1, r3
 8002c86:	431a      	orrs	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	bf00      	nop
 8002c8e:	3724      	adds	r7, #36	; 0x24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <LL_GPIO_SetPinPull>:
 8002c98:	b480      	push	{r7}
 8002c9a:	b089      	sub	sp, #36	; 0x24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	fa93 f3a3 	rbit	r3, r3
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	fab3 f383 	clz	r3, r3
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	2103      	movs	r1, #3
 8002cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	61fb      	str	r3, [r7, #28]
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	fa93 f3a3 	rbit	r3, r3
 8002cd2:	61bb      	str	r3, [r7, #24]
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	60da      	str	r2, [r3, #12]
 8002cea:	bf00      	nop
 8002cec:	3724      	adds	r7, #36	; 0x24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <LL_GPIO_SetAFPin_0_7>:
 8002cf6:	b480      	push	{r7}
 8002cf8:	b089      	sub	sp, #36	; 0x24
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	607a      	str	r2, [r7, #4]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a1a      	ldr	r2, [r3, #32]
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	fa93 f3a3 	rbit	r3, r3
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	fab3 f383 	clz	r3, r3
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	210f      	movs	r1, #15
 8002d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d22:	43db      	mvns	r3, r3
 8002d24:	401a      	ands	r2, r3
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	61fb      	str	r3, [r7, #28]
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	fa93 f3a3 	rbit	r3, r3
 8002d30:	61bb      	str	r3, [r7, #24]
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	fab3 f383 	clz	r3, r3
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d42:	431a      	orrs	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	621a      	str	r2, [r3, #32]
 8002d48:	bf00      	nop
 8002d4a:	3724      	adds	r7, #36	; 0x24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <LL_GPIO_SetAFPin_8_15>:
 8002d54:	b480      	push	{r7}
 8002d56:	b089      	sub	sp, #36	; 0x24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	0a1b      	lsrs	r3, r3, #8
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	fa93 f3a3 	rbit	r3, r3
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	fab3 f383 	clz	r3, r3
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	210f      	movs	r1, #15
 8002d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d82:	43db      	mvns	r3, r3
 8002d84:	401a      	ands	r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	0a1b      	lsrs	r3, r3, #8
 8002d8a:	61fb      	str	r3, [r7, #28]
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	fa93 f3a3 	rbit	r3, r3
 8002d92:	61bb      	str	r3, [r7, #24]
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	fab3 f383 	clz	r3, r3
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	fa01 f303 	lsl.w	r3, r1, r3
 8002da4:	431a      	orrs	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	625a      	str	r2, [r3, #36]	; 0x24
 8002daa:	bf00      	nop
 8002dac:	3724      	adds	r7, #36	; 0x24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <LL_GPIO_Init>:
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b088      	sub	sp, #32
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
 8002dbe:	6039      	str	r1, [r7, #0]
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	61fb      	str	r3, [r7, #28]
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61bb      	str	r3, [r7, #24]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	fa93 f3a3 	rbit	r3, r3
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	fab3 f383 	clz	r3, r3
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	61fb      	str	r3, [r7, #28]
 8002de0:	e049      	b.n	8002e76 <LL_GPIO_Init+0xc0>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	2101      	movs	r1, #1
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	fa01 f303 	lsl.w	r3, r1, r3
 8002dee:	4013      	ands	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d03b      	beq.n	8002e70 <LL_GPIO_Init+0xba>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	69b9      	ldr	r1, [r7, #24]
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f7ff fed3 	bl	8002bac <LL_GPIO_SetPinMode>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d003      	beq.n	8002e16 <LL_GPIO_Init+0x60>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d106      	bne.n	8002e24 <LL_GPIO_Init+0x6e>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	69b9      	ldr	r1, [r7, #24]
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff ff0b 	bl	8002c3a <LL_GPIO_SetPinSpeed>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	69b9      	ldr	r1, [r7, #24]
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7ff ff33 	bl	8002c98 <LL_GPIO_SetPinPull>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d11a      	bne.n	8002e70 <LL_GPIO_Init+0xba>
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	fa93 f3a3 	rbit	r3, r3
 8002e44:	60bb      	str	r3, [r7, #8]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	fab3 f383 	clz	r3, r3
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b07      	cmp	r3, #7
 8002e50:	d807      	bhi.n	8002e62 <LL_GPIO_Init+0xac>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	461a      	mov	r2, r3
 8002e58:	69b9      	ldr	r1, [r7, #24]
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff ff4b 	bl	8002cf6 <LL_GPIO_SetAFPin_0_7>
 8002e60:	e006      	b.n	8002e70 <LL_GPIO_Init+0xba>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	461a      	mov	r2, r3
 8002e68:	69b9      	ldr	r1, [r7, #24]
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff ff72 	bl	8002d54 <LL_GPIO_SetAFPin_8_15>
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	3301      	adds	r3, #1
 8002e74:	61fb      	str	r3, [r7, #28]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1ae      	bne.n	8002de2 <LL_GPIO_Init+0x2c>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d003      	beq.n	8002e94 <LL_GPIO_Init+0xde>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d107      	bne.n	8002ea4 <LL_GPIO_Init+0xee>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	6819      	ldr	r1, [r3, #0]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7ff feb3 	bl	8002c0a <LL_GPIO_SetPinOutputType>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3720      	adds	r7, #32
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
	...

08002eb0 <LL_RCC_GetSysClkSource>:
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <LL_RCC_GetSysClkSource+0x18>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 030c 	and.w	r3, r3, #12
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800

08002ecc <LL_RCC_GetAHBPrescaler>:
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <LL_RCC_GetAHBPrescaler+0x18>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800

08002ee8 <LL_RCC_GetAPB1Prescaler>:
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	4b04      	ldr	r3, [pc, #16]	; (8002f00 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40023800 	.word	0x40023800

08002f04 <LL_RCC_GetAPB2Prescaler>:
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <LL_RCC_GetAPB2Prescaler+0x18>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002f10:	4618      	mov	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800

08002f20 <LL_RCC_PLL_GetMainSource>:
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <LL_RCC_PLL_GetMainSource+0x18>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	40023800 	.word	0x40023800

08002f3c <LL_RCC_PLL_GetN>:
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	4b04      	ldr	r3, [pc, #16]	; (8002f54 <LL_RCC_PLL_GetN+0x18>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	099b      	lsrs	r3, r3, #6
 8002f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	40023800 	.word	0x40023800

08002f58 <LL_RCC_PLL_GetP>:
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <LL_RCC_PLL_GetP+0x18>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f64:	4618      	mov	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40023800 	.word	0x40023800

08002f74 <LL_RCC_PLL_GetR>:
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <LL_RCC_PLL_GetR+0x18>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8002f80:	4618      	mov	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40023800 	.word	0x40023800

08002f90 <LL_RCC_PLL_GetDivider>:
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <LL_RCC_PLL_GetDivider+0x18>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40023800 	.word	0x40023800

08002fac <LL_RCC_GetSystemClocksFreq>:
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	f000 f820 	bl	8002ff8 <RCC_GetSystemClockFreq>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 f85c 	bl	8003080 <RCC_GetHCLKClockFreq>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 f86a 	bl	80030ac <RCC_GetPCLK1ClockFreq>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	609a      	str	r2, [r3, #8]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 f876 	bl	80030d4 <RCC_GetPCLK2ClockFreq>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	bf00      	nop
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <RCC_GetSystemClockFreq>:
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	2300      	movs	r3, #0
 8003000:	607b      	str	r3, [r7, #4]
 8003002:	f7ff ff55 	bl	8002eb0 <LL_RCC_GetSysClkSource>
 8003006:	4603      	mov	r3, r0
 8003008:	2b0c      	cmp	r3, #12
 800300a:	d82d      	bhi.n	8003068 <RCC_GetSystemClockFreq+0x70>
 800300c:	a201      	add	r2, pc, #4	; (adr r2, 8003014 <RCC_GetSystemClockFreq+0x1c>)
 800300e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003012:	bf00      	nop
 8003014:	08003049 	.word	0x08003049
 8003018:	08003069 	.word	0x08003069
 800301c:	08003069 	.word	0x08003069
 8003020:	08003069 	.word	0x08003069
 8003024:	0800304f 	.word	0x0800304f
 8003028:	08003069 	.word	0x08003069
 800302c:	08003069 	.word	0x08003069
 8003030:	08003069 	.word	0x08003069
 8003034:	08003055 	.word	0x08003055
 8003038:	08003069 	.word	0x08003069
 800303c:	08003069 	.word	0x08003069
 8003040:	08003069 	.word	0x08003069
 8003044:	0800305f 	.word	0x0800305f
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <RCC_GetSystemClockFreq+0x80>)
 800304a:	607b      	str	r3, [r7, #4]
 800304c:	e00f      	b.n	800306e <RCC_GetSystemClockFreq+0x76>
 800304e:	4b0b      	ldr	r3, [pc, #44]	; (800307c <RCC_GetSystemClockFreq+0x84>)
 8003050:	607b      	str	r3, [r7, #4]
 8003052:	e00c      	b.n	800306e <RCC_GetSystemClockFreq+0x76>
 8003054:	2008      	movs	r0, #8
 8003056:	f000 f851 	bl	80030fc <RCC_PLL_GetFreqDomain_SYS>
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	e007      	b.n	800306e <RCC_GetSystemClockFreq+0x76>
 800305e:	200c      	movs	r0, #12
 8003060:	f000 f84c 	bl	80030fc <RCC_PLL_GetFreqDomain_SYS>
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	e002      	b.n	800306e <RCC_GetSystemClockFreq+0x76>
 8003068:	4b03      	ldr	r3, [pc, #12]	; (8003078 <RCC_GetSystemClockFreq+0x80>)
 800306a:	607b      	str	r3, [r7, #4]
 800306c:	bf00      	nop
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4618      	mov	r0, r3
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	00f42400 	.word	0x00f42400
 800307c:	007a1200 	.word	0x007a1200

08003080 <RCC_GetHCLKClockFreq>:
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	f7ff ff20 	bl	8002ecc <LL_RCC_GetAHBPrescaler>
 800308c:	4603      	mov	r3, r0
 800308e:	091b      	lsrs	r3, r3, #4
 8003090:	f003 030f 	and.w	r3, r3, #15
 8003094:	4a04      	ldr	r2, [pc, #16]	; (80030a8 <RCC_GetHCLKClockFreq+0x28>)
 8003096:	5cd3      	ldrb	r3, [r2, r3]
 8003098:	461a      	mov	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	40d3      	lsrs	r3, r2
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	0800b294 	.word	0x0800b294

080030ac <RCC_GetPCLK1ClockFreq>:
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	f7ff ff18 	bl	8002ee8 <LL_RCC_GetAPB1Prescaler>
 80030b8:	4603      	mov	r3, r0
 80030ba:	0a9b      	lsrs	r3, r3, #10
 80030bc:	4a04      	ldr	r2, [pc, #16]	; (80030d0 <RCC_GetPCLK1ClockFreq+0x24>)
 80030be:	5cd3      	ldrb	r3, [r2, r3]
 80030c0:	461a      	mov	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	40d3      	lsrs	r3, r2
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	0800b2a4 	.word	0x0800b2a4

080030d4 <RCC_GetPCLK2ClockFreq>:
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	f7ff ff12 	bl	8002f04 <LL_RCC_GetAPB2Prescaler>
 80030e0:	4603      	mov	r3, r0
 80030e2:	0b5b      	lsrs	r3, r3, #13
 80030e4:	4a04      	ldr	r2, [pc, #16]	; (80030f8 <RCC_GetPCLK2ClockFreq+0x24>)
 80030e6:	5cd3      	ldrb	r3, [r2, r3]
 80030e8:	461a      	mov	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	40d3      	lsrs	r3, r2
 80030ee:	4618      	mov	r0, r3
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	0800b2a4 	.word	0x0800b2a4

080030fc <RCC_PLL_GetFreqDomain_SYS>:
 80030fc:	b590      	push	{r4, r7, lr}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	2300      	movs	r3, #0
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	2300      	movs	r3, #0
 800310e:	613b      	str	r3, [r7, #16]
 8003110:	f7ff ff06 	bl	8002f20 <LL_RCC_PLL_GetMainSource>
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <RCC_PLL_GetFreqDomain_SYS+0x28>
 800311c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003120:	d003      	beq.n	800312a <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8003122:	e005      	b.n	8003130 <RCC_PLL_GetFreqDomain_SYS+0x34>
 8003124:	4b1b      	ldr	r3, [pc, #108]	; (8003194 <RCC_PLL_GetFreqDomain_SYS+0x98>)
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	e005      	b.n	8003136 <RCC_PLL_GetFreqDomain_SYS+0x3a>
 800312a:	4b1b      	ldr	r3, [pc, #108]	; (8003198 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 800312c:	617b      	str	r3, [r7, #20]
 800312e:	e002      	b.n	8003136 <RCC_PLL_GetFreqDomain_SYS+0x3a>
 8003130:	4b18      	ldr	r3, [pc, #96]	; (8003194 <RCC_PLL_GetFreqDomain_SYS+0x98>)
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	bf00      	nop
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b08      	cmp	r3, #8
 800313a:	d114      	bne.n	8003166 <RCC_PLL_GetFreqDomain_SYS+0x6a>
 800313c:	f7ff ff28 	bl	8002f90 <LL_RCC_PLL_GetDivider>
 8003140:	4602      	mov	r2, r0
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	fbb3 f4f2 	udiv	r4, r3, r2
 8003148:	f7ff fef8 	bl	8002f3c <LL_RCC_PLL_GetN>
 800314c:	4603      	mov	r3, r0
 800314e:	fb03 f404 	mul.w	r4, r3, r4
 8003152:	f7ff ff01 	bl	8002f58 <LL_RCC_PLL_GetP>
 8003156:	4603      	mov	r3, r0
 8003158:	0c1b      	lsrs	r3, r3, #16
 800315a:	3301      	adds	r3, #1
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	fbb4 f3f3 	udiv	r3, r4, r3
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	e011      	b.n	800318a <RCC_PLL_GetFreqDomain_SYS+0x8e>
 8003166:	f7ff ff13 	bl	8002f90 <LL_RCC_PLL_GetDivider>
 800316a:	4602      	mov	r2, r0
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	fbb3 f4f2 	udiv	r4, r3, r2
 8003172:	f7ff fee3 	bl	8002f3c <LL_RCC_PLL_GetN>
 8003176:	4603      	mov	r3, r0
 8003178:	fb03 f404 	mul.w	r4, r3, r4
 800317c:	f7ff fefa 	bl	8002f74 <LL_RCC_PLL_GetR>
 8003180:	4603      	mov	r3, r0
 8003182:	0f1b      	lsrs	r3, r3, #28
 8003184:	fbb4 f3f3 	udiv	r3, r4, r3
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4618      	mov	r0, r3
 800318e:	371c      	adds	r7, #28
 8003190:	46bd      	mov	sp, r7
 8003192:	bd90      	pop	{r4, r7, pc}
 8003194:	00f42400 	.word	0x00f42400
 8003198:	007a1200 	.word	0x007a1200

0800319c <LL_TIM_SetPrescaler>:
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	629a      	str	r2, [r3, #40]	; 0x28
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <LL_TIM_SetAutoReload>:
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <LL_TIM_SetRepetitionCounter>:
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <LL_TIM_OC_SetCompareCH1>:
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	635a      	str	r2, [r3, #52]	; 0x34
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <LL_TIM_OC_SetCompareCH2>:
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	639a      	str	r2, [r3, #56]	; 0x38
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <LL_TIM_OC_SetCompareCH3>:
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	63da      	str	r2, [r3, #60]	; 0x3c
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <LL_TIM_OC_SetCompareCH4>:
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	641a      	str	r2, [r3, #64]	; 0x40
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <LL_TIM_GenerateEvent_UPDATE>:
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	f043 0201 	orr.w	r2, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	615a      	str	r2, [r3, #20]
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <LL_TIM_Init>:
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a3d      	ldr	r2, [pc, #244]	; (8003388 <LL_TIM_Init+0x108>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d013      	beq.n	80032c0 <LL_TIM_Init+0x40>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800329e:	d00f      	beq.n	80032c0 <LL_TIM_Init+0x40>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a3a      	ldr	r2, [pc, #232]	; (800338c <LL_TIM_Init+0x10c>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d00b      	beq.n	80032c0 <LL_TIM_Init+0x40>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a39      	ldr	r2, [pc, #228]	; (8003390 <LL_TIM_Init+0x110>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d007      	beq.n	80032c0 <LL_TIM_Init+0x40>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a38      	ldr	r2, [pc, #224]	; (8003394 <LL_TIM_Init+0x114>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d003      	beq.n	80032c0 <LL_TIM_Init+0x40>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a37      	ldr	r2, [pc, #220]	; (8003398 <LL_TIM_Init+0x118>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d106      	bne.n	80032ce <LL_TIM_Init+0x4e>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a2d      	ldr	r2, [pc, #180]	; (8003388 <LL_TIM_Init+0x108>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d02b      	beq.n	800332e <LL_TIM_Init+0xae>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032dc:	d027      	beq.n	800332e <LL_TIM_Init+0xae>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a2a      	ldr	r2, [pc, #168]	; (800338c <LL_TIM_Init+0x10c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d023      	beq.n	800332e <LL_TIM_Init+0xae>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a29      	ldr	r2, [pc, #164]	; (8003390 <LL_TIM_Init+0x110>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d01f      	beq.n	800332e <LL_TIM_Init+0xae>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a28      	ldr	r2, [pc, #160]	; (8003394 <LL_TIM_Init+0x114>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d01b      	beq.n	800332e <LL_TIM_Init+0xae>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a27      	ldr	r2, [pc, #156]	; (8003398 <LL_TIM_Init+0x118>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d017      	beq.n	800332e <LL_TIM_Init+0xae>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a26      	ldr	r2, [pc, #152]	; (800339c <LL_TIM_Init+0x11c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d013      	beq.n	800332e <LL_TIM_Init+0xae>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a25      	ldr	r2, [pc, #148]	; (80033a0 <LL_TIM_Init+0x120>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00f      	beq.n	800332e <LL_TIM_Init+0xae>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a24      	ldr	r2, [pc, #144]	; (80033a4 <LL_TIM_Init+0x124>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00b      	beq.n	800332e <LL_TIM_Init+0xae>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a23      	ldr	r2, [pc, #140]	; (80033a8 <LL_TIM_Init+0x128>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d007      	beq.n	800332e <LL_TIM_Init+0xae>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a22      	ldr	r2, [pc, #136]	; (80033ac <LL_TIM_Init+0x12c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d003      	beq.n	800332e <LL_TIM_Init+0xae>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a21      	ldr	r2, [pc, #132]	; (80033b0 <LL_TIM_Init+0x130>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d106      	bne.n	800333c <LL_TIM_Init+0xbc>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	4313      	orrs	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	4619      	mov	r1, r3
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff ff35 	bl	80031b8 <LL_TIM_SetAutoReload>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	881b      	ldrh	r3, [r3, #0]
 8003352:	4619      	mov	r1, r3
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff ff21 	bl	800319c <LL_TIM_SetPrescaler>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a0a      	ldr	r2, [pc, #40]	; (8003388 <LL_TIM_Init+0x108>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d003      	beq.n	800336a <LL_TIM_Init+0xea>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a0c      	ldr	r2, [pc, #48]	; (8003398 <LL_TIM_Init+0x118>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d105      	bne.n	8003376 <LL_TIM_Init+0xf6>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	7c1b      	ldrb	r3, [r3, #16]
 800336e:	4619      	mov	r1, r3
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7ff ff2f 	bl	80031d4 <LL_TIM_SetRepetitionCounter>
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7ff ff72 	bl	8003260 <LL_TIM_GenerateEvent_UPDATE>
 800337c:	2300      	movs	r3, #0
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40010000 	.word	0x40010000
 800338c:	40000400 	.word	0x40000400
 8003390:	40000800 	.word	0x40000800
 8003394:	40000c00 	.word	0x40000c00
 8003398:	40010400 	.word	0x40010400
 800339c:	40014000 	.word	0x40014000
 80033a0:	40014400 	.word	0x40014400
 80033a4:	40014800 	.word	0x40014800
 80033a8:	40001800 	.word	0x40001800
 80033ac:	40001c00 	.word	0x40001c00
 80033b0:	40002000 	.word	0x40002000

080033b4 <LL_TIM_OC_Init>:
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
 80033c0:	2301      	movs	r3, #1
 80033c2:	75fb      	strb	r3, [r7, #23]
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b10      	cmp	r3, #16
 80033c8:	d012      	beq.n	80033f0 <LL_TIM_OC_Init+0x3c>
 80033ca:	2b10      	cmp	r3, #16
 80033cc:	d802      	bhi.n	80033d4 <LL_TIM_OC_Init+0x20>
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d007      	beq.n	80033e2 <LL_TIM_OC_Init+0x2e>
 80033d2:	e022      	b.n	800341a <LL_TIM_OC_Init+0x66>
 80033d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033d8:	d011      	beq.n	80033fe <LL_TIM_OC_Init+0x4a>
 80033da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033de:	d015      	beq.n	800340c <LL_TIM_OC_Init+0x58>
 80033e0:	e01b      	b.n	800341a <LL_TIM_OC_Init+0x66>
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 f867 	bl	80034b8 <OC1Config>
 80033ea:	4603      	mov	r3, r0
 80033ec:	75fb      	strb	r3, [r7, #23]
 80033ee:	e014      	b.n	800341a <LL_TIM_OC_Init+0x66>
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 f8cc 	bl	8003590 <OC2Config>
 80033f8:	4603      	mov	r3, r0
 80033fa:	75fb      	strb	r3, [r7, #23]
 80033fc:	e00d      	b.n	800341a <LL_TIM_OC_Init+0x66>
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 f935 	bl	8003670 <OC3Config>
 8003406:	4603      	mov	r3, r0
 8003408:	75fb      	strb	r3, [r7, #23]
 800340a:	e006      	b.n	800341a <LL_TIM_OC_Init+0x66>
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 f99e 	bl	8003750 <OC4Config>
 8003414:	4603      	mov	r3, r0
 8003416:	75fb      	strb	r3, [r7, #23]
 8003418:	bf00      	nop
 800341a:	7dfb      	ldrb	r3, [r7, #23]
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <LL_TIM_BDTR_Init>:
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	7b12      	ldrb	r2, [r2, #12]
 800343c:	4313      	orrs	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	4313      	orrs	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	4313      	orrs	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4313      	orrs	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	89d2      	ldrh	r2, [r2, #14]
 8003474:	4313      	orrs	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	4313      	orrs	r3, r2
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	645a      	str	r2, [r3, #68]	; 0x44
 80034a8:	2300      	movs	r3, #0
 80034aa:	4618      	mov	r0, r3
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
	...

080034b8 <OC1Config>:
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	f023 0201 	bic.w	r2, r3, #1
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	621a      	str	r2, [r3, #32]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	617b      	str	r3, [r7, #20]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	613b      	str	r3, [r7, #16]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f023 0303 	bic.w	r3, r3, #3
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f023 0202 	bic.w	r2, r3, #2
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	4313      	orrs	r3, r2
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f023 0201 	bic.w	r2, r3, #1
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	4313      	orrs	r3, r2
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a1c      	ldr	r2, [pc, #112]	; (8003588 <OC1Config+0xd0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d003      	beq.n	8003522 <OC1Config+0x6a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a1b      	ldr	r2, [pc, #108]	; (800358c <OC1Config+0xd4>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d11e      	bne.n	8003560 <OC1Config+0xa8>
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f023 0208 	bic.w	r2, r3, #8
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4313      	orrs	r3, r2
 8003530:	617b      	str	r3, [r7, #20]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f023 0204 	bic.w	r2, r3, #4
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4313      	orrs	r3, r2
 8003540:	617b      	str	r3, [r7, #20]
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	4313      	orrs	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	619a      	str	r2, [r3, #24]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	4619      	mov	r1, r3
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff fe3c 	bl	80031f0 <LL_TIM_OC_SetCompareCH1>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	621a      	str	r2, [r3, #32]
 800357e:	2300      	movs	r3, #0
 8003580:	4618      	mov	r0, r3
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40010000 	.word	0x40010000
 800358c:	40010400 	.word	0x40010400

08003590 <OC2Config>:
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	f023 0210 	bic.w	r2, r3, #16
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	621a      	str	r2, [r3, #32]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	021b      	lsls	r3, r3, #8
 80035cc:	4313      	orrs	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f023 0220 	bic.w	r2, r3, #32
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	4313      	orrs	r3, r2
 80035de:	617b      	str	r3, [r7, #20]
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f023 0210 	bic.w	r2, r3, #16
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	4313      	orrs	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a1d      	ldr	r2, [pc, #116]	; (8003668 <OC2Config+0xd8>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d003      	beq.n	8003600 <OC2Config+0x70>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a1c      	ldr	r2, [pc, #112]	; (800366c <OC2Config+0xdc>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d11f      	bne.n	8003640 <OC2Config+0xb0>
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	019b      	lsls	r3, r3, #6
 800360c:	4313      	orrs	r3, r2
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	019b      	lsls	r3, r3, #6
 800361c:	4313      	orrs	r3, r2
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	4313      	orrs	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	619a      	str	r2, [r3, #24]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	4619      	mov	r1, r3
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff fdda 	bl	800320c <LL_TIM_OC_SetCompareCH2>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	621a      	str	r2, [r3, #32]
 800365e:	2300      	movs	r3, #0
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40010000 	.word	0x40010000
 800366c:	40010400 	.word	0x40010400

08003670 <OC3Config>:
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	621a      	str	r2, [r3, #32]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f023 0303 	bic.w	r3, r3, #3
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	021b      	lsls	r3, r3, #8
 80036ba:	4313      	orrs	r3, r2
 80036bc:	617b      	str	r3, [r7, #20]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	021b      	lsls	r3, r3, #8
 80036ca:	4313      	orrs	r3, r2
 80036cc:	617b      	str	r3, [r7, #20]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a1d      	ldr	r2, [pc, #116]	; (8003748 <OC3Config+0xd8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d003      	beq.n	80036de <OC3Config+0x6e>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a1c      	ldr	r2, [pc, #112]	; (800374c <OC3Config+0xdc>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d11f      	bne.n	800371e <OC3Config+0xae>
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	029b      	lsls	r3, r3, #10
 80036ea:	4313      	orrs	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	029b      	lsls	r3, r3, #10
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	011b      	lsls	r3, r3, #4
 800370a:	4313      	orrs	r3, r2
 800370c:	613b      	str	r3, [r7, #16]
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	015b      	lsls	r3, r3, #5
 800371a:	4313      	orrs	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	605a      	str	r2, [r3, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	61da      	str	r2, [r3, #28]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	4619      	mov	r1, r3
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f7ff fd79 	bl	8003228 <LL_TIM_OC_SetCompareCH3>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	621a      	str	r2, [r3, #32]
 800373c:	2300      	movs	r3, #0
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40010000 	.word	0x40010000
 800374c:	40010400 	.word	0x40010400

08003750 <OC4Config>:
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	621a      	str	r2, [r3, #32]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	613b      	str	r3, [r7, #16]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	021b      	lsls	r3, r3, #8
 800378c:	4313      	orrs	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	031b      	lsls	r3, r3, #12
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	031b      	lsls	r3, r3, #12
 80037ac:	4313      	orrs	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a11      	ldr	r2, [pc, #68]	; (80037f8 <OC4Config+0xa8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d003      	beq.n	80037c0 <OC4Config+0x70>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a10      	ldr	r2, [pc, #64]	; (80037fc <OC4Config+0xac>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d107      	bne.n	80037d0 <OC4Config+0x80>
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	019b      	lsls	r3, r3, #6
 80037cc:	4313      	orrs	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	61da      	str	r2, [r3, #28]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	4619      	mov	r1, r3
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7ff fd2e 	bl	8003244 <LL_TIM_OC_SetCompareCH4>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	621a      	str	r2, [r3, #32]
 80037ee:	2300      	movs	r3, #0
 80037f0:	4618      	mov	r0, r3
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40010000 	.word	0x40010000
 80037fc:	40010400 	.word	0x40010400

08003800 <LL_USART_IsEnabled>:
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003814:	bf0c      	ite	eq
 8003816:	2301      	moveq	r3, #1
 8003818:	2300      	movne	r3, #0
 800381a:	b2db      	uxtb	r3, r3
 800381c:	4618      	mov	r0, r3
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <LL_USART_SetStopBitsLength>:
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	431a      	orrs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	611a      	str	r2, [r3, #16]
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <LL_USART_SetHWFlowCtrl>:
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	6039      	str	r1, [r7, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	615a      	str	r2, [r3, #20]
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <LL_USART_SetBaudRate>:
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003888:	d152      	bne.n	8003930 <LL_USART_SetBaudRate+0xbc>
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	009a      	lsls	r2, r3, #2
 8003894:	441a      	add	r2, r3
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	fbb2 f3f3 	udiv	r3, r2, r3
 800389e:	4a4f      	ldr	r2, [pc, #316]	; (80039dc <LL_USART_SetBaudRate+0x168>)
 80038a0:	fba2 2303 	umull	r2, r3, r2, r3
 80038a4:	095b      	lsrs	r3, r3, #5
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	b299      	uxth	r1, r3
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	4613      	mov	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	009a      	lsls	r2, r3, #2
 80038b6:	441a      	add	r2, r3
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80038c0:	4b46      	ldr	r3, [pc, #280]	; (80039dc <LL_USART_SetBaudRate+0x168>)
 80038c2:	fba3 0302 	umull	r0, r3, r3, r2
 80038c6:	095b      	lsrs	r3, r3, #5
 80038c8:	2064      	movs	r0, #100	; 0x64
 80038ca:	fb00 f303 	mul.w	r3, r0, r3
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	3332      	adds	r3, #50	; 0x32
 80038d4:	4a41      	ldr	r2, [pc, #260]	; (80039dc <LL_USART_SetBaudRate+0x168>)
 80038d6:	fba2 2303 	umull	r2, r3, r2, r3
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	b29b      	uxth	r3, r3
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	440b      	add	r3, r1
 80038ea:	b299      	uxth	r1, r3
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	4613      	mov	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	009a      	lsls	r2, r3, #2
 80038f6:	441a      	add	r2, r3
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003900:	4b36      	ldr	r3, [pc, #216]	; (80039dc <LL_USART_SetBaudRate+0x168>)
 8003902:	fba3 0302 	umull	r0, r3, r3, r2
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	2064      	movs	r0, #100	; 0x64
 800390a:	fb00 f303 	mul.w	r3, r0, r3
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	3332      	adds	r3, #50	; 0x32
 8003914:	4a31      	ldr	r2, [pc, #196]	; (80039dc <LL_USART_SetBaudRate+0x168>)
 8003916:	fba2 2303 	umull	r2, r3, r2, r3
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	b29b      	uxth	r3, r3
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	b29b      	uxth	r3, r3
 8003924:	440b      	add	r3, r1
 8003926:	b29b      	uxth	r3, r3
 8003928:	461a      	mov	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	609a      	str	r2, [r3, #8]
 800392e:	e04f      	b.n	80039d0 <LL_USART_SetBaudRate+0x15c>
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	4613      	mov	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	009a      	lsls	r2, r3, #2
 800393a:	441a      	add	r2, r3
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	fbb2 f3f3 	udiv	r3, r2, r3
 8003944:	4a25      	ldr	r2, [pc, #148]	; (80039dc <LL_USART_SetBaudRate+0x168>)
 8003946:	fba2 2303 	umull	r2, r3, r2, r3
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	b29b      	uxth	r3, r3
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	b299      	uxth	r1, r3
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	4613      	mov	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	009a      	lsls	r2, r3, #2
 800395c:	441a      	add	r2, r3
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	fbb2 f2f3 	udiv	r2, r2, r3
 8003966:	4b1d      	ldr	r3, [pc, #116]	; (80039dc <LL_USART_SetBaudRate+0x168>)
 8003968:	fba3 0302 	umull	r0, r3, r3, r2
 800396c:	095b      	lsrs	r3, r3, #5
 800396e:	2064      	movs	r0, #100	; 0x64
 8003970:	fb00 f303 	mul.w	r3, r0, r3
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	3332      	adds	r3, #50	; 0x32
 800397a:	4a18      	ldr	r2, [pc, #96]	; (80039dc <LL_USART_SetBaudRate+0x168>)
 800397c:	fba2 2303 	umull	r2, r3, r2, r3
 8003980:	095b      	lsrs	r3, r3, #5
 8003982:	b29b      	uxth	r3, r3
 8003984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003988:	b29b      	uxth	r3, r3
 800398a:	440b      	add	r3, r1
 800398c:	b299      	uxth	r1, r3
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	4613      	mov	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	009a      	lsls	r2, r3, #2
 8003998:	441a      	add	r2, r3
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	fbb2 f2f3 	udiv	r2, r2, r3
 80039a2:	4b0e      	ldr	r3, [pc, #56]	; (80039dc <LL_USART_SetBaudRate+0x168>)
 80039a4:	fba3 0302 	umull	r0, r3, r3, r2
 80039a8:	095b      	lsrs	r3, r3, #5
 80039aa:	2064      	movs	r0, #100	; 0x64
 80039ac:	fb00 f303 	mul.w	r3, r0, r3
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	3332      	adds	r3, #50	; 0x32
 80039b6:	4a09      	ldr	r2, [pc, #36]	; (80039dc <LL_USART_SetBaudRate+0x168>)
 80039b8:	fba2 2303 	umull	r2, r3, r2, r3
 80039bc:	095b      	lsrs	r3, r3, #5
 80039be:	b29b      	uxth	r3, r3
 80039c0:	f003 030f 	and.w	r3, r3, #15
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	440b      	add	r3, r1
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	461a      	mov	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	609a      	str	r2, [r3, #8]
 80039d0:	bf00      	nop
 80039d2:	3714      	adds	r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	51eb851f 	.word	0x51eb851f

080039e0 <LL_USART_Init>:
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
 80039ea:	2301      	movs	r3, #1
 80039ec:	77fb      	strb	r3, [r7, #31]
 80039ee:	2300      	movs	r3, #0
 80039f0:	61bb      	str	r3, [r7, #24]
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff ff04 	bl	8003800 <LL_USART_IsEnabled>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d15e      	bne.n	8003abc <LL_USART_Init+0xdc>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003a06:	f023 030c 	bic.w	r3, r3, #12
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	6851      	ldr	r1, [r2, #4]
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	68d2      	ldr	r2, [r2, #12]
 8003a12:	4311      	orrs	r1, r2
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	6912      	ldr	r2, [r2, #16]
 8003a18:	4311      	orrs	r1, r2
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	6992      	ldr	r2, [r2, #24]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	60da      	str	r2, [r3, #12]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff fefb 	bl	8003828 <LL_USART_SetStopBitsLength>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	4619      	mov	r1, r3
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7ff ff08 	bl	800384e <LL_USART_SetHWFlowCtrl>
 8003a3e:	f107 0308 	add.w	r3, r7, #8
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff fab2 	bl	8002fac <LL_RCC_GetSystemClocksFreq>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a1f      	ldr	r2, [pc, #124]	; (8003ac8 <LL_USART_Init+0xe8>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d102      	bne.n	8003a56 <LL_USART_Init+0x76>
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	61bb      	str	r3, [r7, #24]
 8003a54:	e021      	b.n	8003a9a <LL_USART_Init+0xba>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a1c      	ldr	r2, [pc, #112]	; (8003acc <LL_USART_Init+0xec>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d102      	bne.n	8003a64 <LL_USART_Init+0x84>
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	61bb      	str	r3, [r7, #24]
 8003a62:	e01a      	b.n	8003a9a <LL_USART_Init+0xba>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a1a      	ldr	r2, [pc, #104]	; (8003ad0 <LL_USART_Init+0xf0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d102      	bne.n	8003a72 <LL_USART_Init+0x92>
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	61bb      	str	r3, [r7, #24]
 8003a70:	e013      	b.n	8003a9a <LL_USART_Init+0xba>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a17      	ldr	r2, [pc, #92]	; (8003ad4 <LL_USART_Init+0xf4>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d102      	bne.n	8003a80 <LL_USART_Init+0xa0>
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	61bb      	str	r3, [r7, #24]
 8003a7e:	e00c      	b.n	8003a9a <LL_USART_Init+0xba>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a15      	ldr	r2, [pc, #84]	; (8003ad8 <LL_USART_Init+0xf8>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d102      	bne.n	8003a8e <LL_USART_Init+0xae>
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	61bb      	str	r3, [r7, #24]
 8003a8c:	e005      	b.n	8003a9a <LL_USART_Init+0xba>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a12      	ldr	r2, [pc, #72]	; (8003adc <LL_USART_Init+0xfc>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d101      	bne.n	8003a9a <LL_USART_Init+0xba>
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	61bb      	str	r3, [r7, #24]
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00d      	beq.n	8003abc <LL_USART_Init+0xdc>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d009      	beq.n	8003abc <LL_USART_Init+0xdc>
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	77fb      	strb	r3, [r7, #31]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	699a      	ldr	r2, [r3, #24]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	69b9      	ldr	r1, [r7, #24]
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7ff fedc 	bl	8003874 <LL_USART_SetBaudRate>
 8003abc:	7ffb      	ldrb	r3, [r7, #31]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3720      	adds	r7, #32
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40011000 	.word	0x40011000
 8003acc:	40004400 	.word	0x40004400
 8003ad0:	40004800 	.word	0x40004800
 8003ad4:	40011400 	.word	0x40011400
 8003ad8:	40004c00 	.word	0x40004c00
 8003adc:	40005000 	.word	0x40005000

08003ae0 <_ZN6Matrix17MatrixMultiple2x2EffffSt5arrayIfLj2EE>:
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	ed2d 8b02 	vpush	{d8}
 8003ae6:	b08c      	sub	sp, #48	; 0x30
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	ed87 0a07 	vstr	s0, [r7, #28]
 8003aee:	edc7 0a06 	vstr	s1, [r7, #24]
 8003af2:	ed87 1a05 	vstr	s2, [r7, #20]
 8003af6:	edc7 1a04 	vstr	s3, [r7, #16]
 8003afa:	eeb0 7a42 	vmov.f32	s14, s4
 8003afe:	eef0 7a62 	vmov.f32	s15, s5
 8003b02:	ed87 7a02 	vstr	s14, [r7, #8]
 8003b06:	edc7 7a03 	vstr	s15, [r7, #12]
 8003b0a:	f107 0308 	add.w	r3, r7, #8
 8003b0e:	2100      	movs	r1, #0
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 f997 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8003b16:	4603      	mov	r3, r0
 8003b18:	ed93 7a00 	vldr	s14, [r3]
 8003b1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b20:	ee67 8a27 	vmul.f32	s17, s14, s15
 8003b24:	f107 0308 	add.w	r3, r7, #8
 8003b28:	2101      	movs	r1, #1
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 f98a 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8003b30:	4603      	mov	r3, r0
 8003b32:	ed93 7a00 	vldr	s14, [r3]
 8003b36:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b3a:	ee27 8a27 	vmul.f32	s16, s14, s15
 8003b3e:	f107 0320 	add.w	r3, r7, #32
 8003b42:	2100      	movs	r1, #0
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 f97d 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	ee78 7a88 	vadd.f32	s15, s17, s16
 8003b50:	edc3 7a00 	vstr	s15, [r3]
 8003b54:	f107 0308 	add.w	r3, r7, #8
 8003b58:	2100      	movs	r1, #0
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 f972 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8003b60:	4603      	mov	r3, r0
 8003b62:	ed93 7a00 	vldr	s14, [r3]
 8003b66:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b6a:	ee67 8a27 	vmul.f32	s17, s14, s15
 8003b6e:	f107 0308 	add.w	r3, r7, #8
 8003b72:	2101      	movs	r1, #1
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 f965 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	ed93 7a00 	vldr	s14, [r3]
 8003b80:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b84:	ee27 8a27 	vmul.f32	s16, s14, s15
 8003b88:	f107 0320 	add.w	r3, r7, #32
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 f958 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8003b94:	4603      	mov	r3, r0
 8003b96:	ee78 7a88 	vadd.f32	s15, s17, s16
 8003b9a:	edc3 7a00 	vstr	s15, [r3]
 8003b9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ba2:	f107 0220 	add.w	r2, r7, #32
 8003ba6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003baa:	e883 0003 	stmia.w	r3, {r0, r1}
 8003bae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb2:	ee07 2a10 	vmov	s14, r2
 8003bb6:	ee07 3a90 	vmov	s15, r3
 8003bba:	eeb0 0a47 	vmov.f32	s0, s14
 8003bbe:	eef0 0a67 	vmov.f32	s1, s15
 8003bc2:	3730      	adds	r7, #48	; 0x30
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	ecbd 8b02 	vpop	{d8}
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <_ZN6Matrix17VectorMultiple2x1EfSt5arrayIfLj2EE>:
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	ed2d 8b02 	vpush	{d8}
 8003bd2:	b08a      	sub	sp, #40	; 0x28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	ed87 0a05 	vstr	s0, [r7, #20]
 8003bda:	eeb0 7a60 	vmov.f32	s14, s1
 8003bde:	eef0 7a41 	vmov.f32	s15, s2
 8003be2:	ed87 7a03 	vstr	s14, [r7, #12]
 8003be6:	edc7 7a04 	vstr	s15, [r7, #16]
 8003bea:	f107 030c 	add.w	r3, r7, #12
 8003bee:	2100      	movs	r1, #0
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 f927 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	ed93 8a00 	vldr	s16, [r3]
 8003bfc:	f107 0318 	add.w	r3, r7, #24
 8003c00:	2100      	movs	r1, #0
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 f91e 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c0e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003c12:	edc3 7a00 	vstr	s15, [r3]
 8003c16:	f107 030c 	add.w	r3, r7, #12
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 f911 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8003c22:	4603      	mov	r3, r0
 8003c24:	ed93 8a00 	vldr	s16, [r3]
 8003c28:	f107 0318 	add.w	r3, r7, #24
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 f908 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8003c34:	4603      	mov	r3, r0
 8003c36:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c3a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003c3e:	edc3 7a00 	vstr	s15, [r3]
 8003c42:	f107 0320 	add.w	r3, r7, #32
 8003c46:	f107 0218 	add.w	r2, r7, #24
 8003c4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c4e:	e883 0003 	stmia.w	r3, {r0, r1}
 8003c52:	6a3a      	ldr	r2, [r7, #32]
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	ee07 2a10 	vmov	s14, r2
 8003c5a:	ee07 3a90 	vmov	s15, r3
 8003c5e:	eeb0 0a47 	vmov.f32	s0, s14
 8003c62:	eef0 0a67 	vmov.f32	s1, s15
 8003c66:	3728      	adds	r7, #40	; 0x28
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	ecbd 8b02 	vpop	{d8}
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <_ZN6Matrix12VectorAdd2x1ESt5arrayIfLj2EES1_>:
 8003c70:	b580      	push	{r7, lr}
 8003c72:	ed2d 8b02 	vpush	{d8}
 8003c76:	b08a      	sub	sp, #40	; 0x28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	eeb0 6a40 	vmov.f32	s12, s0
 8003c7e:	eef0 6a60 	vmov.f32	s13, s1
 8003c82:	eeb0 7a41 	vmov.f32	s14, s2
 8003c86:	eef0 7a61 	vmov.f32	s15, s3
 8003c8a:	ed87 6a04 	vstr	s12, [r7, #16]
 8003c8e:	edc7 6a05 	vstr	s13, [r7, #20]
 8003c92:	ed87 7a02 	vstr	s14, [r7, #8]
 8003c96:	edc7 7a03 	vstr	s15, [r7, #12]
 8003c9a:	f107 0310 	add.w	r3, r7, #16
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 f8cf 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	edd3 8a00 	vldr	s17, [r3]
 8003cac:	f107 0308 	add.w	r3, r7, #8
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 f8c6 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	ed93 8a00 	vldr	s16, [r3]
 8003cbe:	f107 0318 	add.w	r3, r7, #24
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 f8bd 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	ee78 7a88 	vadd.f32	s15, s17, s16
 8003cd0:	edc3 7a00 	vstr	s15, [r3]
 8003cd4:	f107 0310 	add.w	r3, r7, #16
 8003cd8:	2101      	movs	r1, #1
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 f8b2 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	edd3 8a00 	vldr	s17, [r3]
 8003ce6:	f107 0308 	add.w	r3, r7, #8
 8003cea:	2101      	movs	r1, #1
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 f8a9 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	ed93 8a00 	vldr	s16, [r3]
 8003cf8:	f107 0318 	add.w	r3, r7, #24
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 f8a0 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8003d04:	4603      	mov	r3, r0
 8003d06:	ee78 7a88 	vadd.f32	s15, s17, s16
 8003d0a:	edc3 7a00 	vstr	s15, [r3]
 8003d0e:	f107 0320 	add.w	r3, r7, #32
 8003d12:	f107 0218 	add.w	r2, r7, #24
 8003d16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d1a:	e883 0003 	stmia.w	r3, {r0, r1}
 8003d1e:	6a3a      	ldr	r2, [r7, #32]
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	ee07 2a10 	vmov	s14, r2
 8003d26:	ee07 3a90 	vmov	s15, r3
 8003d2a:	eeb0 0a47 	vmov.f32	s0, s14
 8003d2e:	eef0 0a67 	vmov.f32	s1, s15
 8003d32:	3728      	adds	r7, #40	; 0x28
 8003d34:	46bd      	mov	sp, r7
 8003d36:	ecbd 8b02 	vpop	{d8}
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <_ZN6Matrix12VectorAdd2x1ESt5arrayIfLj2EES1_S1_>:
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	ed2d 8b02 	vpush	{d8}
 8003d42:	b08c      	sub	sp, #48	; 0x30
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	eeb0 5a40 	vmov.f32	s10, s0
 8003d4a:	eef0 5a60 	vmov.f32	s11, s1
 8003d4e:	eeb0 6a41 	vmov.f32	s12, s2
 8003d52:	eef0 6a61 	vmov.f32	s13, s3
 8003d56:	eeb0 7a42 	vmov.f32	s14, s4
 8003d5a:	eef0 7a62 	vmov.f32	s15, s5
 8003d5e:	ed87 5a06 	vstr	s10, [r7, #24]
 8003d62:	edc7 5a07 	vstr	s11, [r7, #28]
 8003d66:	ed87 6a04 	vstr	s12, [r7, #16]
 8003d6a:	edc7 6a05 	vstr	s13, [r7, #20]
 8003d6e:	ed87 7a02 	vstr	s14, [r7, #8]
 8003d72:	edc7 7a03 	vstr	s15, [r7, #12]
 8003d76:	f107 0318 	add.w	r3, r7, #24
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 f861 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8003d82:	4603      	mov	r3, r0
 8003d84:	ed93 8a00 	vldr	s16, [r3]
 8003d88:	f107 0310 	add.w	r3, r7, #16
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 f858 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8003d94:	4603      	mov	r3, r0
 8003d96:	edd3 7a00 	vldr	s15, [r3]
 8003d9a:	ee78 8a27 	vadd.f32	s17, s16, s15
 8003d9e:	f107 0308 	add.w	r3, r7, #8
 8003da2:	2100      	movs	r1, #0
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 f84d 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8003daa:	4603      	mov	r3, r0
 8003dac:	ed93 8a00 	vldr	s16, [r3]
 8003db0:	f107 0320 	add.w	r3, r7, #32
 8003db4:	2100      	movs	r1, #0
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 f844 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	ee78 7a88 	vadd.f32	s15, s17, s16
 8003dc2:	edc3 7a00 	vstr	s15, [r3]
 8003dc6:	f107 0318 	add.w	r3, r7, #24
 8003dca:	2101      	movs	r1, #1
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 f839 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	ed93 8a00 	vldr	s16, [r3]
 8003dd8:	f107 0310 	add.w	r3, r7, #16
 8003ddc:	2101      	movs	r1, #1
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 f830 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8003de4:	4603      	mov	r3, r0
 8003de6:	edd3 7a00 	vldr	s15, [r3]
 8003dea:	ee78 8a27 	vadd.f32	s17, s16, s15
 8003dee:	f107 0308 	add.w	r3, r7, #8
 8003df2:	2101      	movs	r1, #1
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 f825 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	ed93 8a00 	vldr	s16, [r3]
 8003e00:	f107 0320 	add.w	r3, r7, #32
 8003e04:	2101      	movs	r1, #1
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 f81c 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	ee78 7a88 	vadd.f32	s15, s17, s16
 8003e12:	edc3 7a00 	vstr	s15, [r3]
 8003e16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e1a:	f107 0220 	add.w	r2, r7, #32
 8003e1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e22:	e883 0003 	stmia.w	r3, {r0, r1}
 8003e26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2a:	ee07 2a10 	vmov	s14, r2
 8003e2e:	ee07 3a90 	vmov	s15, r3
 8003e32:	eeb0 0a47 	vmov.f32	s0, s14
 8003e36:	eef0 0a67 	vmov.f32	s1, s15
 8003e3a:	3730      	adds	r7, #48	; 0x30
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	ecbd 8b02 	vpop	{d8}
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <_ZNSt5arrayIfLj2EE2atEj>:
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d904      	bls.n	8003e5e <_ZNSt5arrayIfLj2EE2atEj+0x1a>
 8003e54:	2202      	movs	r2, #2
 8003e56:	6839      	ldr	r1, [r7, #0]
 8003e58:	4806      	ldr	r0, [pc, #24]	; (8003e74 <_ZNSt5arrayIfLj2EE2atEj+0x30>)
 8003e5a:	f004 ffac 	bl	8008db6 <_ZSt24__throw_out_of_range_fmtPKcz>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6839      	ldr	r1, [r7, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 f808 	bl	8003e78 <_ZNSt14__array_traitsIfLj2EE6_S_refERA2_Kfj>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	0800b120 	.word	0x0800b120

08003e78 <_ZNSt14__array_traitsIfLj2EE6_S_refERA2_Kfj>:
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	4413      	add	r3, r2
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
	...

08003e98 <_ZN9MotorMath14clarkTransformESt5arrayIfLj3EE>:
}


//input [u,v,w]
//output [a,b]
std::array<float, 2> MotorMath::clarkTransform (std::array<float, 3> pVector) {
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	ed2d 8b02 	vpush	{d8}
 8003e9e:	b08a      	sub	sp, #40	; 0x28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	eef0 6a40 	vmov.f32	s13, s0
 8003ea6:	eeb0 7a60 	vmov.f32	s14, s1
 8003eaa:	eef0 7a41 	vmov.f32	s15, s2
 8003eae:	edc7 6a03 	vstr	s13, [r7, #12]
 8003eb2:	ed87 7a04 	vstr	s14, [r7, #16]
 8003eb6:	edc7 7a05 	vstr	s15, [r7, #20]
	std::array<float ,2> RtnArr;
	//mIalpha = mIu - (mIv + mIw)/2;
	//mIbeta = (mIv - mIw)* 1.7320508f/2;
	RtnArr.at(0) = pVector.at(0) - ((pVector.at(1) + pVector.at(2))/2) ;
 8003eba:	f107 030c 	add.w	r3, r7, #12
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 fa77 	bl	80043b4 <_ZNSt5arrayIfLj3EE2atEj>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	edd3 8a00 	vldr	s17, [r3]
 8003ecc:	f107 030c 	add.w	r3, r7, #12
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 fa6e 	bl	80043b4 <_ZNSt5arrayIfLj3EE2atEj>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	ed93 8a00 	vldr	s16, [r3]
 8003ede:	f107 030c 	add.w	r3, r7, #12
 8003ee2:	2102      	movs	r1, #2
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 fa65 	bl	80043b4 <_ZNSt5arrayIfLj3EE2atEj>
 8003eea:	4603      	mov	r3, r0
 8003eec:	edd3 7a00 	vldr	s15, [r3]
 8003ef0:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003ef4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003ef8:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8003efc:	f107 0318 	add.w	r3, r7, #24
 8003f00:	2100      	movs	r1, #0
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7ff ff9e 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	ee78 7ac8 	vsub.f32	s15, s17, s16
 8003f0e:	edc3 7a00 	vstr	s15, [r3]
	RtnArr.at(1) = (pVector.at(1) - pVector.at(2)) * 1.7320508f/2;
 8003f12:	f107 030c 	add.w	r3, r7, #12
 8003f16:	2101      	movs	r1, #1
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 fa4b 	bl	80043b4 <_ZNSt5arrayIfLj3EE2atEj>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	ed93 8a00 	vldr	s16, [r3]
 8003f24:	f107 030c 	add.w	r3, r7, #12
 8003f28:	2102      	movs	r1, #2
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fa42 	bl	80043b4 <_ZNSt5arrayIfLj3EE2atEj>
 8003f30:	4603      	mov	r3, r0
 8003f32:	edd3 7a00 	vldr	s15, [r3]
 8003f36:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003f3a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003fe4 <_ZN9MotorMath14clarkTransformESt5arrayIfLj3EE+0x14c>
 8003f3e:	ee27 8a87 	vmul.f32	s16, s15, s14
 8003f42:	f107 0318 	add.w	r3, r7, #24
 8003f46:	2101      	movs	r1, #1
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff ff7b 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003f54:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8003f58:	edc3 7a00 	vstr	s15, [r3]
	RtnArr.at(0) = RtnArr.at(0) * 0.81649658f;//√2/3
 8003f5c:	f107 0318 	add.w	r3, r7, #24
 8003f60:	2100      	movs	r1, #0
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff ff6e 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	ed93 8a00 	vldr	s16, [r3]
 8003f6e:	f107 0318 	add.w	r3, r7, #24
 8003f72:	2100      	movs	r1, #0
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff ff65 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8003fe8 <_ZN9MotorMath14clarkTransformESt5arrayIfLj3EE+0x150>
 8003f80:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003f84:	edc3 7a00 	vstr	s15, [r3]
	RtnArr.at(1) = RtnArr.at(1) * 0.81649658f;//√2/3
 8003f88:	f107 0318 	add.w	r3, r7, #24
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff ff58 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8003f94:	4603      	mov	r3, r0
 8003f96:	ed93 8a00 	vldr	s16, [r3]
 8003f9a:	f107 0318 	add.w	r3, r7, #24
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff ff4f 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8003fe8 <_ZN9MotorMath14clarkTransformESt5arrayIfLj3EE+0x150>
 8003fac:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003fb0:	edc3 7a00 	vstr	s15, [r3]
	return RtnArr;
 8003fb4:	f107 0320 	add.w	r3, r7, #32
 8003fb8:	f107 0218 	add.w	r2, r7, #24
 8003fbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fc0:	e883 0003 	stmia.w	r3, {r0, r1}
 8003fc4:	6a3a      	ldr	r2, [r7, #32]
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	ee07 2a10 	vmov	s14, r2
 8003fcc:	ee07 3a90 	vmov	s15, r3
};
 8003fd0:	eeb0 0a47 	vmov.f32	s0, s14
 8003fd4:	eef0 0a67 	vmov.f32	s1, s15
 8003fd8:	3728      	adds	r7, #40	; 0x28
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	ecbd 8b02 	vpop	{d8}
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	3fddb3d7 	.word	0x3fddb3d7
 8003fe8:	3f5105eb 	.word	0x3f5105eb

08003fec <_ZN9MotorMath13parkTransformEfSt5arrayIfLj2EE>:


std::array<float, 2> MotorMath::parkTransform(fp_rad pRadian, std::array<float, 2> pVector) {
 8003fec:	b580      	push	{r7, lr}
 8003fee:	ed2d 8b02 	vpush	{d8}
 8003ff2:	b08e      	sub	sp, #56	; 0x38
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	ed87 0a05 	vstr	s0, [r7, #20]
 8003ffa:	eeb0 7a60 	vmov.f32	s14, s1
 8003ffe:	eef0 7a41 	vmov.f32	s15, s2
 8004002:	ed87 7a03 	vstr	s14, [r7, #12]
 8004006:	edc7 7a04 	vstr	s15, [r7, #16]
	//mId =  mLib.getCosList().at(mArg) * mIalpha + mLib.getSinList().at(mArg) * mIbeta;
	//mIq = -mLib.getSinList().at(mArg) * mIalpha + mLib.getCosList().at(mArg) * mIbeta;
	float sinVal = Trigonometric::sin(pRadian);
 800400a:	ed97 0a05 	vldr	s0, [r7, #20]
 800400e:	f000 faec 	bl	80045ea <_ZN13Trigonometric3sinEf>
 8004012:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	float cosVal = Trigonometric::cos(pRadian);
 8004016:	ed97 0a05 	vldr	s0, [r7, #20]
 800401a:	f000 faf6 	bl	800460a <_ZN13Trigonometric3cosEf>
 800401e:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
	float Invsin = -1.0f * sinVal;
 8004022:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004026:	eef1 7a67 	vneg.f32	s15, s15
 800402a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	std::array<float, 2> RtnArr;
	RtnArr.at(0) = cosVal * pVector.at(0) + sinVal * pVector.at(1);
 800402e:	f107 030c 	add.w	r3, r7, #12
 8004032:	2100      	movs	r1, #0
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff ff05 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 800403a:	4603      	mov	r3, r0
 800403c:	ed93 7a00 	vldr	s14, [r3]
 8004040:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004044:	ee67 8a27 	vmul.f32	s17, s14, s15
 8004048:	f107 030c 	add.w	r3, r7, #12
 800404c:	2101      	movs	r1, #1
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff fef8 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8004054:	4603      	mov	r3, r0
 8004056:	ed93 7a00 	vldr	s14, [r3]
 800405a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800405e:	ee27 8a27 	vmul.f32	s16, s14, s15
 8004062:	f107 031c 	add.w	r3, r7, #28
 8004066:	2100      	movs	r1, #0
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff feeb 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 800406e:	4603      	mov	r3, r0
 8004070:	ee78 7a88 	vadd.f32	s15, s17, s16
 8004074:	edc3 7a00 	vstr	s15, [r3]
	RtnArr.at(1) = Invsin * pVector.at(0) + cosVal * pVector.at(1);
 8004078:	f107 030c 	add.w	r3, r7, #12
 800407c:	2100      	movs	r1, #0
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff fee0 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8004084:	4603      	mov	r3, r0
 8004086:	ed93 7a00 	vldr	s14, [r3]
 800408a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800408e:	ee67 8a27 	vmul.f32	s17, s14, s15
 8004092:	f107 030c 	add.w	r3, r7, #12
 8004096:	2101      	movs	r1, #1
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff fed3 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 800409e:	4603      	mov	r3, r0
 80040a0:	ed93 7a00 	vldr	s14, [r3]
 80040a4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80040a8:	ee27 8a27 	vmul.f32	s16, s14, s15
 80040ac:	f107 031c 	add.w	r3, r7, #28
 80040b0:	2101      	movs	r1, #1
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7ff fec6 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 80040b8:	4603      	mov	r3, r0
 80040ba:	ee78 7a88 	vadd.f32	s15, s17, s16
 80040be:	edc3 7a00 	vstr	s15, [r3]

	return RtnArr;
 80040c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040c6:	f107 021c 	add.w	r2, r7, #28
 80040ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040ce:	e883 0003 	stmia.w	r3, {r0, r1}
 80040d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d6:	ee07 2a10 	vmov	s14, r2
 80040da:	ee07 3a90 	vmov	s15, r3
}
 80040de:	eeb0 0a47 	vmov.f32	s0, s14
 80040e2:	eef0 0a67 	vmov.f32	s1, s15
 80040e6:	3738      	adds	r7, #56	; 0x38
 80040e8:	46bd      	mov	sp, r7
 80040ea:	ecbd 8b02 	vpop	{d8}
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <_ZN9MotorMath16InvparkTransformEfSt5arrayIfLj2EE>:

std::array<float, 2> MotorMath::InvparkTransform(fp_rad pRadian, std::array<float, 2> pVector) {
 80040f0:	b580      	push	{r7, lr}
 80040f2:	ed2d 8b02 	vpush	{d8}
 80040f6:	b08e      	sub	sp, #56	; 0x38
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	ed87 0a05 	vstr	s0, [r7, #20]
 80040fe:	eeb0 7a60 	vmov.f32	s14, s1
 8004102:	eef0 7a41 	vmov.f32	s15, s2
 8004106:	ed87 7a03 	vstr	s14, [r7, #12]
 800410a:	edc7 7a04 	vstr	s15, [r7, #16]
	//mId =  mLib.getCosList().at(mArg) * mIalpha + mLib.getSinList().at(mArg) * mIbeta;
	//mIq = -mLib.getSinList().at(mArg) * mIalpha + mLib.getCosList().at(mArg) * mIbeta;
	float sinVal = Trigonometric::sin(pRadian);
 800410e:	ed97 0a05 	vldr	s0, [r7, #20]
 8004112:	f000 fa6a 	bl	80045ea <_ZN13Trigonometric3sinEf>
 8004116:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	float cosVal = Trigonometric::cos(pRadian);
 800411a:	ed97 0a05 	vldr	s0, [r7, #20]
 800411e:	f000 fa74 	bl	800460a <_ZN13Trigonometric3cosEf>
 8004122:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
	float Invsin = -1.0f * sinVal;
 8004126:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800412a:	eef1 7a67 	vneg.f32	s15, s15
 800412e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	std::array<float, 2> RtnArr;
	RtnArr.at(0) = cosVal * pVector.at(0) + Invsin * pVector.at(1);
 8004132:	f107 030c 	add.w	r3, r7, #12
 8004136:	2100      	movs	r1, #0
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff fe83 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 800413e:	4603      	mov	r3, r0
 8004140:	ed93 7a00 	vldr	s14, [r3]
 8004144:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004148:	ee67 8a27 	vmul.f32	s17, s14, s15
 800414c:	f107 030c 	add.w	r3, r7, #12
 8004150:	2101      	movs	r1, #1
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff fe76 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8004158:	4603      	mov	r3, r0
 800415a:	ed93 7a00 	vldr	s14, [r3]
 800415e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004162:	ee27 8a27 	vmul.f32	s16, s14, s15
 8004166:	f107 031c 	add.w	r3, r7, #28
 800416a:	2100      	movs	r1, #0
 800416c:	4618      	mov	r0, r3
 800416e:	f7ff fe69 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8004172:	4603      	mov	r3, r0
 8004174:	ee78 7a88 	vadd.f32	s15, s17, s16
 8004178:	edc3 7a00 	vstr	s15, [r3]
	RtnArr.at(1) = sinVal * pVector.at(0) + cosVal * pVector.at(1);
 800417c:	f107 030c 	add.w	r3, r7, #12
 8004180:	2100      	movs	r1, #0
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff fe5e 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8004188:	4603      	mov	r3, r0
 800418a:	ed93 7a00 	vldr	s14, [r3]
 800418e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004192:	ee67 8a27 	vmul.f32	s17, s14, s15
 8004196:	f107 030c 	add.w	r3, r7, #12
 800419a:	2101      	movs	r1, #1
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff fe51 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 80041a2:	4603      	mov	r3, r0
 80041a4:	ed93 7a00 	vldr	s14, [r3]
 80041a8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80041ac:	ee27 8a27 	vmul.f32	s16, s14, s15
 80041b0:	f107 031c 	add.w	r3, r7, #28
 80041b4:	2101      	movs	r1, #1
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff fe44 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 80041bc:	4603      	mov	r3, r0
 80041be:	ee78 7a88 	vadd.f32	s15, s17, s16
 80041c2:	edc3 7a00 	vstr	s15, [r3]

	return RtnArr;
 80041c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041ca:	f107 021c 	add.w	r2, r7, #28
 80041ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80041d2:	e883 0003 	stmia.w	r3, {r0, r1}
 80041d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041da:	ee07 2a10 	vmov	s14, r2
 80041de:	ee07 3a90 	vmov	s15, r3
}
 80041e2:	eeb0 0a47 	vmov.f32	s0, s14
 80041e6:	eef0 0a67 	vmov.f32	s1, s15
 80041ea:	3738      	adds	r7, #56	; 0x38
 80041ec:	46bd      	mov	sp, r7
 80041ee:	ecbd 8b02 	vpop	{d8}
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <_ZN9MotorMath17InvclarkTransformESt5arrayIfLj2EE>:

//input [a,b]
//output [u,v,w]
std::array<float, 3> MotorMath::InvclarkTransform (std::array<float, 2> pVector) {
 80041f4:	b580      	push	{r7, lr}
 80041f6:	ed2d 8b02 	vpush	{d8}
 80041fa:	b08c      	sub	sp, #48	; 0x30
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	eeb0 7a40 	vmov.f32	s14, s0
 8004202:	eef0 7a60 	vmov.f32	s15, s1
 8004206:	ed87 7a04 	vstr	s14, [r7, #16]
 800420a:	edc7 7a05 	vstr	s15, [r7, #20]
	//mVu = 0.75f * mValpha;
	//mVv = -0.75f * mValpha + mValpha / 3 + mVbeta / 1.7320508f;
	//mVw = - mValpha / 3 - mVbeta / 1.7320508f;
	std::array<float ,3> RtnArr;
	RtnArr.at(0) = 0.75f * pVector.at(0);
 800420e:	f107 0310 	add.w	r3, r7, #16
 8004212:	2100      	movs	r1, #0
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff fe15 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 800421a:	4603      	mov	r3, r0
 800421c:	ed93 8a00 	vldr	s16, [r3]
 8004220:	f107 0318 	add.w	r3, r7, #24
 8004224:	2100      	movs	r1, #0
 8004226:	4618      	mov	r0, r3
 8004228:	f000 f8c4 	bl	80043b4 <_ZNSt5arrayIfLj3EE2atEj>
 800422c:	4603      	mov	r3, r0
 800422e:	eef6 7a08 	vmov.f32	s15, #104	; 0x3f400000  0.750
 8004232:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004236:	edc3 7a00 	vstr	s15, [r3]
	RtnArr.at(1) = -0.75f * pVector.at(0) + pVector.at(0) / 3 + pVector.at(1) / 1.7320508f;
 800423a:	f107 0310 	add.w	r3, r7, #16
 800423e:	2100      	movs	r1, #0
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff fdff 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8004246:	4603      	mov	r3, r0
 8004248:	edd3 7a00 	vldr	s15, [r3]
 800424c:	eebe 7a08 	vmov.f32	s14, #232	; 0xbf400000 -0.750
 8004250:	ee27 8a87 	vmul.f32	s16, s15, s14
 8004254:	f107 0310 	add.w	r3, r7, #16
 8004258:	2100      	movs	r1, #0
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff fdf2 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8004260:	4603      	mov	r3, r0
 8004262:	ed93 7a00 	vldr	s14, [r3]
 8004266:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800426a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800426e:	ee78 8a27 	vadd.f32	s17, s16, s15
 8004272:	f107 0310 	add.w	r3, r7, #16
 8004276:	2101      	movs	r1, #1
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff fde3 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 800427e:	4603      	mov	r3, r0
 8004280:	edd3 7a00 	vldr	s15, [r3]
 8004284:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80043ac <_ZN9MotorMath17InvclarkTransformESt5arrayIfLj2EE+0x1b8>
 8004288:	ee87 8a87 	vdiv.f32	s16, s15, s14
 800428c:	f107 0318 	add.w	r3, r7, #24
 8004290:	2101      	movs	r1, #1
 8004292:	4618      	mov	r0, r3
 8004294:	f000 f88e 	bl	80043b4 <_ZNSt5arrayIfLj3EE2atEj>
 8004298:	4603      	mov	r3, r0
 800429a:	ee78 7a88 	vadd.f32	s15, s17, s16
 800429e:	edc3 7a00 	vstr	s15, [r3]
	RtnArr.at(2) = - pVector.at(0) / 3 - pVector.at(1) / 1.7320508f;
 80042a2:	f107 0310 	add.w	r3, r7, #16
 80042a6:	2100      	movs	r1, #0
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff fdcb 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 80042ae:	4603      	mov	r3, r0
 80042b0:	edd3 7a00 	vldr	s15, [r3]
 80042b4:	eef1 7a67 	vneg.f32	s15, s15
 80042b8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80042bc:	eec7 8a87 	vdiv.f32	s17, s15, s14
 80042c0:	f107 0310 	add.w	r3, r7, #16
 80042c4:	2101      	movs	r1, #1
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7ff fdbc 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 80042cc:	4603      	mov	r3, r0
 80042ce:	edd3 7a00 	vldr	s15, [r3]
 80042d2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80043ac <_ZN9MotorMath17InvclarkTransformESt5arrayIfLj2EE+0x1b8>
 80042d6:	ee87 8a87 	vdiv.f32	s16, s15, s14
 80042da:	f107 0318 	add.w	r3, r7, #24
 80042de:	2102      	movs	r1, #2
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 f867 	bl	80043b4 <_ZNSt5arrayIfLj3EE2atEj>
 80042e6:	4603      	mov	r3, r0
 80042e8:	ee78 7ac8 	vsub.f32	s15, s17, s16
 80042ec:	edc3 7a00 	vstr	s15, [r3]
	RtnArr.at(0) = RtnArr.at(0) * 0.81649658f;//√2/3
 80042f0:	f107 0318 	add.w	r3, r7, #24
 80042f4:	2100      	movs	r1, #0
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 f85c 	bl	80043b4 <_ZNSt5arrayIfLj3EE2atEj>
 80042fc:	4603      	mov	r3, r0
 80042fe:	ed93 8a00 	vldr	s16, [r3]
 8004302:	f107 0318 	add.w	r3, r7, #24
 8004306:	2100      	movs	r1, #0
 8004308:	4618      	mov	r0, r3
 800430a:	f000 f853 	bl	80043b4 <_ZNSt5arrayIfLj3EE2atEj>
 800430e:	4603      	mov	r3, r0
 8004310:	eddf 7a27 	vldr	s15, [pc, #156]	; 80043b0 <_ZN9MotorMath17InvclarkTransformESt5arrayIfLj2EE+0x1bc>
 8004314:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004318:	edc3 7a00 	vstr	s15, [r3]
	RtnArr.at(1) = RtnArr.at(1) * 0.81649658f;//√2/3
 800431c:	f107 0318 	add.w	r3, r7, #24
 8004320:	2101      	movs	r1, #1
 8004322:	4618      	mov	r0, r3
 8004324:	f000 f846 	bl	80043b4 <_ZNSt5arrayIfLj3EE2atEj>
 8004328:	4603      	mov	r3, r0
 800432a:	ed93 8a00 	vldr	s16, [r3]
 800432e:	f107 0318 	add.w	r3, r7, #24
 8004332:	2101      	movs	r1, #1
 8004334:	4618      	mov	r0, r3
 8004336:	f000 f83d 	bl	80043b4 <_ZNSt5arrayIfLj3EE2atEj>
 800433a:	4603      	mov	r3, r0
 800433c:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80043b0 <_ZN9MotorMath17InvclarkTransformESt5arrayIfLj2EE+0x1bc>
 8004340:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004344:	edc3 7a00 	vstr	s15, [r3]
	RtnArr.at(2) = RtnArr.at(2) * 0.81649658f;//√2/3
 8004348:	f107 0318 	add.w	r3, r7, #24
 800434c:	2102      	movs	r1, #2
 800434e:	4618      	mov	r0, r3
 8004350:	f000 f830 	bl	80043b4 <_ZNSt5arrayIfLj3EE2atEj>
 8004354:	4603      	mov	r3, r0
 8004356:	ed93 8a00 	vldr	s16, [r3]
 800435a:	f107 0318 	add.w	r3, r7, #24
 800435e:	2102      	movs	r1, #2
 8004360:	4618      	mov	r0, r3
 8004362:	f000 f827 	bl	80043b4 <_ZNSt5arrayIfLj3EE2atEj>
 8004366:	4603      	mov	r3, r0
 8004368:	eddf 7a11 	vldr	s15, [pc, #68]	; 80043b0 <_ZN9MotorMath17InvclarkTransformESt5arrayIfLj2EE+0x1bc>
 800436c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004370:	edc3 7a00 	vstr	s15, [r3]
	return RtnArr;
 8004374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004378:	f107 0218 	add.w	r2, r7, #24
 800437c:	ca07      	ldmia	r2, {r0, r1, r2}
 800437e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004382:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004384:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004388:	ee06 1a90 	vmov	s13, r1
 800438c:	ee07 2a10 	vmov	s14, r2
 8004390:	ee07 3a90 	vmov	s15, r3
};
 8004394:	eeb0 0a66 	vmov.f32	s0, s13
 8004398:	eef0 0a47 	vmov.f32	s1, s14
 800439c:	eeb0 1a67 	vmov.f32	s2, s15
 80043a0:	3730      	adds	r7, #48	; 0x30
 80043a2:	46bd      	mov	sp, r7
 80043a4:	ecbd 8b02 	vpop	{d8}
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	3fddb3d7 	.word	0x3fddb3d7
 80043b0:	3f5105eb 	.word	0x3f5105eb

080043b4 <_ZNSt5arrayIfLj3EE2atEj>:
      constexpr const_reference
      operator[](size_type __n) const noexcept
      { return _AT_Type::_S_ref(_M_elems, __n); }

      _GLIBCXX17_CONSTEXPR reference
      at(size_type __n)
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
      {
	if (__n >= _Nm)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d904      	bls.n	80043ce <_ZNSt5arrayIfLj3EE2atEj+0x1a>
	  std::__throw_out_of_range_fmt(__N("array::at: __n (which is %zu) "
 80043c4:	2203      	movs	r2, #3
 80043c6:	6839      	ldr	r1, [r7, #0]
 80043c8:	4806      	ldr	r0, [pc, #24]	; (80043e4 <_ZNSt5arrayIfLj3EE2atEj+0x30>)
 80043ca:	f004 fcf4 	bl	8008db6 <_ZSt24__throw_out_of_range_fmtPKcz>
					    ">= _Nm (which is %zu)"),
					__n, _Nm);
	return _AT_Type::_S_ref(_M_elems, __n);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6839      	ldr	r1, [r7, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 f808 	bl	80043e8 <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>
 80043d8:	4603      	mov	r3, r0
      }
 80043da:	4618      	mov	r0, r3
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	0800b154 	.word	0x0800b154

080043e8 <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	4413      	add	r3, r2
 80043fa:	4618      	mov	r0, r3
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
	...

08004408 <_ZN3PIDC1Ev>:
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	4a04      	ldr	r2, [pc, #16]	; (8004424 <_ZN3PIDC1Ev+0x1c>)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4618      	mov	r0, r3
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	0800b1fc 	.word	0x0800b1fc

08004428 <_ZN3PIDD1Ev>:
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	4a04      	ldr	r2, [pc, #16]	; (8004444 <_ZN3PIDD1Ev+0x1c>)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4618      	mov	r0, r3
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr
 8004444:	0800b1fc 	.word	0x0800b1fc

08004448 <_ZN3PIDD0Ev>:
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7ff ffe9 	bl	8004428 <_ZN3PIDD1Ev>
 8004456:	2128      	movs	r1, #40	; 0x28
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f004 fca5 	bl	8008da8 <_ZdlPvj>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4618      	mov	r0, r3
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <_ZN3PID8SetParamEfff>:
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	ed87 0a02 	vstr	s0, [r7, #8]
 8004474:	edc7 0a01 	vstr	s1, [r7, #4]
 8004478:	ed87 1a00 	vstr	s2, [r7]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	615a      	str	r2, [r3, #20]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	619a      	str	r2, [r3, #24]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	61da      	str	r2, [r3, #28]
 800448e:	bf00      	nop
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <_ZN3PID18ErrorAndTimeUpdateEff>:
 800449a:	b590      	push	{r4, r7, lr}
 800449c:	b085      	sub	sp, #20
 800449e:	af00      	add	r7, sp, #0
 80044a0:	60f8      	str	r0, [r7, #12]
 80044a2:	ed87 0a02 	vstr	s0, [r7, #8]
 80044a6:	edc7 0a01 	vstr	s1, [r7, #4]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	3304      	adds	r3, #4
 80044ae:	2101      	movs	r1, #1
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 f88b 	bl	80045cc <_ZNSt5arrayIfLj3EEixEj>
 80044b6:	4603      	mov	r3, r0
 80044b8:	681c      	ldr	r4, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	3304      	adds	r3, #4
 80044be:	2102      	movs	r1, #2
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 f883 	bl	80045cc <_ZNSt5arrayIfLj3EEixEj>
 80044c6:	4603      	mov	r3, r0
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	68b9      	ldr	r1, [r7, #8]
 80044ce:	6059      	str	r1, [r3, #4]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	609c      	str	r4, [r3, #8]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	60da      	str	r2, [r3, #12]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	621a      	str	r2, [r3, #32]
 80044de:	bf00      	nop
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd90      	pop	{r4, r7, pc}

080044e6 <_ZN3PID6OutPutEv>:
 80044e6:	b580      	push	{r7, lr}
 80044e8:	ed2d 8b04 	vpush	{d8-d9}
 80044ec:	b082      	sub	sp, #8
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	ed93 8a05 	vldr	s16, [r3, #20]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	3304      	adds	r3, #4
 80044fc:	2101      	movs	r1, #1
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 f864 	bl	80045cc <_ZNSt5arrayIfLj3EEixEj>
 8004504:	4603      	mov	r3, r0
 8004506:	edd3 8a00 	vldr	s17, [r3]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	3304      	adds	r3, #4
 800450e:	2102      	movs	r1, #2
 8004510:	4618      	mov	r0, r3
 8004512:	f000 f85b 	bl	80045cc <_ZNSt5arrayIfLj3EEixEj>
 8004516:	4603      	mov	r3, r0
 8004518:	edd3 7a00 	vldr	s15, [r3]
 800451c:	ee78 8ae7 	vsub.f32	s17, s17, s15
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	ed93 7a06 	vldr	s14, [r3, #24]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	edd3 7a08 	vldr	s15, [r3, #32]
 800452c:	ee87 9a27 	vdiv.f32	s18, s14, s15
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3304      	adds	r3, #4
 8004534:	2101      	movs	r1, #1
 8004536:	4618      	mov	r0, r3
 8004538:	f000 f848 	bl	80045cc <_ZNSt5arrayIfLj3EEixEj>
 800453c:	4603      	mov	r3, r0
 800453e:	edd3 7a00 	vldr	s15, [r3]
 8004542:	ee69 7a27 	vmul.f32	s15, s18, s15
 8004546:	ee78 8aa7 	vadd.f32	s17, s17, s15
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	ed93 7a07 	vldr	s14, [r3, #28]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	edd3 7a08 	vldr	s15, [r3, #32]
 8004556:	ee87 9a27 	vdiv.f32	s18, s14, s15
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	3304      	adds	r3, #4
 800455e:	2101      	movs	r1, #1
 8004560:	4618      	mov	r0, r3
 8004562:	f000 f833 	bl	80045cc <_ZNSt5arrayIfLj3EEixEj>
 8004566:	4603      	mov	r3, r0
 8004568:	edd3 9a00 	vldr	s19, [r3]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3304      	adds	r3, #4
 8004570:	2102      	movs	r1, #2
 8004572:	4618      	mov	r0, r3
 8004574:	f000 f82a 	bl	80045cc <_ZNSt5arrayIfLj3EEixEj>
 8004578:	4603      	mov	r3, r0
 800457a:	edd3 7a00 	vldr	s15, [r3]
 800457e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004582:	ee79 9ae7 	vsub.f32	s19, s19, s15
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	3304      	adds	r3, #4
 800458a:	2103      	movs	r1, #3
 800458c:	4618      	mov	r0, r3
 800458e:	f000 f81d 	bl	80045cc <_ZNSt5arrayIfLj3EEixEj>
 8004592:	4603      	mov	r3, r0
 8004594:	edd3 7a00 	vldr	s15, [r3]
 8004598:	ee79 7aa7 	vadd.f32	s15, s19, s15
 800459c:	ee69 7a27 	vmul.f32	s15, s18, s15
 80045a0:	ee78 7aa7 	vadd.f32	s15, s17, s15
 80045a4:	ee68 7a27 	vmul.f32	s15, s16, s15
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	ed93 7a04 	vldr	s14, [r3, #16]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80045ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045be:	eeb0 0a67 	vmov.f32	s0, s15
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	ecbd 8b04 	vpop	{d8-d9}
 80045ca:	bd80      	pop	{r7, pc}

080045cc <_ZNSt5arrayIfLj3EEixEj>:
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6839      	ldr	r1, [r7, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff ff04 	bl	80043e8 <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>
 80045e0:	4603      	mov	r3, r0
 80045e2:	4618      	mov	r0, r3
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <_ZN13Trigonometric3sinEf>:

Trigonometric::~Trigonometric() {
	// TODO Auto-generated destructor stub
}

float Trigonometric::sin(float pVal) {
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b082      	sub	sp, #8
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	ed87 0a01 	vstr	s0, [r7, #4]
	return arm_sin_f32(pVal);
 80045f4:	ed97 0a01 	vldr	s0, [r7, #4]
 80045f8:	f004 fb46 	bl	8008c88 <arm_sin_f32>
 80045fc:	eef0 7a40 	vmov.f32	s15, s0
}
 8004600:	eeb0 0a67 	vmov.f32	s0, s15
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <_ZN13Trigonometric3cosEf>:

float Trigonometric::cos(float pVal) {
 800460a:	b580      	push	{r7, lr}
 800460c:	b082      	sub	sp, #8
 800460e:	af00      	add	r7, sp, #0
 8004610:	ed87 0a01 	vstr	s0, [r7, #4]
	return arm_cos_f32(pVal);
 8004614:	ed97 0a01 	vldr	s0, [r7, #4]
 8004618:	f004 fb84 	bl	8008d24 <arm_cos_f32>
 800461c:	eef0 7a40 	vmov.f32	s15, s0
}
 8004620:	eeb0 0a67 	vmov.f32	s0, s15
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <_ZN13Trigonometric5atan2Eff>:

float Trigonometric::atan2(float pNumerator, float pDenominator){
 800462a:	b580      	push	{r7, lr}
 800462c:	b082      	sub	sp, #8
 800462e:	af00      	add	r7, sp, #0
 8004630:	ed87 0a01 	vstr	s0, [r7, #4]
 8004634:	edc7 0a00 	vstr	s1, [r7]
	return atan2f(pNumerator, pDenominator);
 8004638:	edd7 0a00 	vldr	s1, [r7]
 800463c:	ed97 0a01 	vldr	s0, [r7, #4]
 8004640:	f004 fcc6 	bl	8008fd0 <atan2f>
 8004644:	eef0 7a40 	vmov.f32	s15, s0
}
 8004648:	eeb0 0a67 	vmov.f32	s0, s15
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <_ZN12Zintegrate1n9integrateEff>:
 8004652:	b480      	push	{r7}
 8004654:	b085      	sub	sp, #20
 8004656:	af00      	add	r7, sp, #0
 8004658:	60f8      	str	r0, [r7, #12]
 800465a:	ed87 0a02 	vstr	s0, [r7, #8]
 800465e:	edc7 0a01 	vstr	s1, [r7, #4]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	609a      	str	r2, [r3, #8]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	edd3 6a00 	vldr	s13, [r3]
 8004676:	edd7 7a02 	vldr	s15, [r7, #8]
 800467a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800467e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004682:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004686:	ee77 7a27 	vadd.f32	s15, s14, s15
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	edc3 7a01 	vstr	s15, [r3, #4]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	ee07 3a90 	vmov	s15, r3
 8004698:	eeb0 0a67 	vmov.f32	s0, s15
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <_ZN12Zintegrate2n9integrateEfSt5arrayIfLj2EE>:
 80046a6:	b590      	push	{r4, r7, lr}
 80046a8:	ed2d 8b02 	vpush	{d8}
 80046ac:	b089      	sub	sp, #36	; 0x24
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6178      	str	r0, [r7, #20]
 80046b2:	ed87 0a04 	vstr	s0, [r7, #16]
 80046b6:	eeb0 7a60 	vmov.f32	s14, s1
 80046ba:	eef0 7a41 	vmov.f32	s15, s2
 80046be:	ed87 7a02 	vstr	s14, [r7, #8]
 80046c2:	edc7 7a03 	vstr	s15, [r7, #12]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	3304      	adds	r3, #4
 80046ca:	2100      	movs	r1, #0
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff fbb9 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 80046d2:	4604      	mov	r4, r0
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	330c      	adds	r3, #12
 80046d8:	2100      	movs	r1, #0
 80046da:	4618      	mov	r0, r3
 80046dc:	f7ff fbb2 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 80046e0:	4602      	mov	r2, r0
 80046e2:	6823      	ldr	r3, [r4, #0]
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	3304      	adds	r3, #4
 80046ea:	2101      	movs	r1, #1
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff fba9 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 80046f2:	4604      	mov	r4, r0
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	330c      	adds	r3, #12
 80046f8:	2101      	movs	r1, #1
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7ff fba2 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8004700:	4602      	mov	r2, r0
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	330c      	adds	r3, #12
 800470a:	2100      	movs	r1, #0
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff fb99 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8004712:	4603      	mov	r3, r0
 8004714:	edd3 8a00 	vldr	s17, [r3]
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	ed93 7a00 	vldr	s14, [r3]
 800471e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004722:	ee27 8a27 	vmul.f32	s16, s14, s15
 8004726:	f107 0308 	add.w	r3, r7, #8
 800472a:	2100      	movs	r1, #0
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff fb89 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8004732:	4603      	mov	r3, r0
 8004734:	edd3 7a00 	vldr	s15, [r3]
 8004738:	ee28 8a27 	vmul.f32	s16, s16, s15
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	3304      	adds	r3, #4
 8004740:	2100      	movs	r1, #0
 8004742:	4618      	mov	r0, r3
 8004744:	f7ff fb7e 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8004748:	4603      	mov	r3, r0
 800474a:	ee78 7a88 	vadd.f32	s15, s17, s16
 800474e:	edc3 7a00 	vstr	s15, [r3]
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	330c      	adds	r3, #12
 8004756:	2101      	movs	r1, #1
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff fb73 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 800475e:	4603      	mov	r3, r0
 8004760:	edd3 8a00 	vldr	s17, [r3]
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	ed93 7a00 	vldr	s14, [r3]
 800476a:	edd7 7a04 	vldr	s15, [r7, #16]
 800476e:	ee27 8a27 	vmul.f32	s16, s14, s15
 8004772:	f107 0308 	add.w	r3, r7, #8
 8004776:	2101      	movs	r1, #1
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff fb63 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 800477e:	4603      	mov	r3, r0
 8004780:	edd3 7a00 	vldr	s15, [r3]
 8004784:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	3304      	adds	r3, #4
 800478c:	2101      	movs	r1, #1
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff fb58 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8004794:	4603      	mov	r3, r0
 8004796:	ee78 7a88 	vadd.f32	s15, s17, s16
 800479a:	edc3 7a00 	vstr	s15, [r3]
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	f107 0318 	add.w	r3, r7, #24
 80047a4:	320c      	adds	r2, #12
 80047a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047aa:	e883 0003 	stmia.w	r3, {r0, r1}
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	ee07 2a10 	vmov	s14, r2
 80047b6:	ee07 3a90 	vmov	s15, r3
 80047ba:	eeb0 0a47 	vmov.f32	s0, s14
 80047be:	eef0 0a67 	vmov.f32	s1, s15
 80047c2:	3724      	adds	r7, #36	; 0x24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	ecbd 8b02 	vpop	{d8}
 80047ca:	bd90      	pop	{r4, r7, pc}

080047cc <_ZN7ArgCtrlC1Ev>:
 *      Author: watashi
 */

#include "ArgCtrl.hpp"

ArgCtrl::ArgCtrl() {
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	4a0c      	ldr	r2, [pc, #48]	; (8004808 <_ZN7ArgCtrlC1Ev+0x3c>)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	mArg = 0;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f04f 0200 	mov.w	r2, #0
 80047e0:	605a      	str	r2, [r3, #4]
	mArgOld = 0;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	609a      	str	r2, [r3, #8]
	mOmega = 0;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	60da      	str	r2, [r3, #12]
	mArgErr = 0;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f04f 0200 	mov.w	r2, #0
 80047f8:	611a      	str	r2, [r3, #16]
}
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4618      	mov	r0, r3
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	0800b20c 	.word	0x0800b20c

0800480c <_ZN7ArgCtrlD1Ev>:

ArgCtrl::~ArgCtrl() {
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	4a0c      	ldr	r2, [pc, #48]	; (8004848 <_ZN7ArgCtrlD1Ev+0x3c>)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
	mArg = 0;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f04f 0200 	mov.w	r2, #0
 8004820:	605a      	str	r2, [r3, #4]
	mArgOld = 0;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	609a      	str	r2, [r3, #8]
	mOmega = 0;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f04f 0200 	mov.w	r2, #0
 8004830:	60da      	str	r2, [r3, #12]
	mArgErr = 0;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f04f 0200 	mov.w	r2, #0
 8004838:	611a      	str	r2, [r3, #16]
}
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4618      	mov	r0, r3
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	0800b20c 	.word	0x0800b20c

0800484c <_ZN7ArgCtrlD0Ev>:
ArgCtrl::~ArgCtrl() {
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
}
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff ffd9 	bl	800480c <_ZN7ArgCtrlD1Ev>
 800485a:	211c      	movs	r1, #28
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f004 faa3 	bl	8008da8 <_ZdlPvj>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4618      	mov	r0, r3
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <_ZN7ArgCtrl4InitEv>:

void ArgCtrl::Init(void) {
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
	mArg = 0;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	605a      	str	r2, [r3, #4]
	mArgOld = 0;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f04f 0200 	mov.w	r2, #0
 8004882:	609a      	str	r2, [r3, #8]
	mOmega = 0;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f04f 0200 	mov.w	r2, #0
 800488a:	60da      	str	r2, [r3, #12]
	mArgErr = 0;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f04f 0200 	mov.w	r2, #0
 8004892:	611a      	str	r2, [r3, #16]
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <_ZN7ArgCtrl9incrementEf>:

void ArgCtrl::increment(fp_rad pArg) {
 80048a0:	b590      	push	{r4, r7, lr}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	ed87 0a00 	vstr	s0, [r7]
	mArgOld = mArg;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	609a      	str	r2, [r3, #8]
	mArg = mArg + pArg + (2*M_PI);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80048ba:	edd7 7a00 	vldr	s15, [r7]
 80048be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048c2:	ee17 0a90 	vmov	r0, s15
 80048c6:	f7fb fe0b 	bl	80004e0 <__aeabi_f2d>
 80048ca:	a315      	add	r3, pc, #84	; (adr r3, 8004920 <_ZN7ArgCtrl9incrementEf+0x80>)
 80048cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d0:	f7fb fca8 	bl	8000224 <__adddf3>
 80048d4:	4603      	mov	r3, r0
 80048d6:	460c      	mov	r4, r1
 80048d8:	4618      	mov	r0, r3
 80048da:	4621      	mov	r1, r4
 80048dc:	f7fc f930 	bl	8000b40 <__aeabi_d2f>
 80048e0:	4602      	mov	r2, r0
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	605a      	str	r2, [r3, #4]
	mArg = fmodl(mArg, (2*M_PI));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fb fdf8 	bl	80004e0 <__aeabi_f2d>
 80048f0:	4603      	mov	r3, r0
 80048f2:	460c      	mov	r4, r1
 80048f4:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 8004920 <_ZN7ArgCtrl9incrementEf+0x80>
 80048f8:	ec44 3b10 	vmov	d0, r3, r4
 80048fc:	f004 fa56 	bl	8008dac <fmodl>
 8004900:	ec54 3b10 	vmov	r3, r4, d0
 8004904:	4618      	mov	r0, r3
 8004906:	4621      	mov	r1, r4
 8004908:	f7fc f91a 	bl	8000b40 <__aeabi_d2f>
 800490c:	4602      	mov	r2, r0
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	605a      	str	r2, [r3, #4]
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	bd90      	pop	{r4, r7, pc}
 800491a:	bf00      	nop
 800491c:	f3af 8000 	nop.w
 8004920:	54442d18 	.word	0x54442d18
 8004924:	401921fb 	.word	0x401921fb

08004928 <_ZN7ArgCtrl6getArgEv>:
	mArgOld = mArg;
	mArg = mArg - pArg + (2*M_PI);
	mArg = fmodl(mArg, (2*M_PI));
}

fp_rad ArgCtrl::getArg(void) {
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
	return mArg;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	ee07 3a90 	vmov	s15, r3
}
 8004938:	eeb0 0a67 	vmov.f32	s0, s15
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <_ZN7ArgCtrl9getArgErrEv>:

fp_rad ArgCtrl::getArgErr(void) {
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
	return mArgErr;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	ee07 3a90 	vmov	s15, r3
}
 8004956:	eeb0 0a67 	vmov.f32	s0, s15
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	0000      	movs	r0, r0
	...

08004968 <_ZN7ArgCtrl14FCaccelerationEv>:

void ArgCtrl::FCInit(fp_rad pFCtargetSPD){
	ForceCom.mFCtargetSPD = pFCtargetSPD;
}

ForceCom_Status ArgCtrl::FCacceleration(void) {
 8004968:	b590      	push	{r4, r7, lr}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
	//if(ForceCom.mAccelSPD < ForceCom.mFCtargetSPD){
	if(ForceCom.mAccelSPD < 30000){
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	edd3 7a06 	vldr	s15, [r3, #24]
 8004976:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8004a28 <_ZN7ArgCtrl14FCaccelerationEv+0xc0>
 800497a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800497e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004982:	d528      	bpl.n	80049d6 <_ZN7ArgCtrl14FCaccelerationEv+0x6e>
		ForceCom.mAccelSPD = ForceCom.mAccelSPD + 0.5;//ここ加速度を制御してる
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	edd3 7a06 	vldr	s15, [r3, #24]
 800498a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800498e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	edc3 7a06 	vstr	s15, [r3, #24]
		fp_rad arg_add;
		arg_add = ForceCom.mAccelSPD*0.00000125f*M_PI;//進む差分角
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	edd3 7a06 	vldr	s15, [r3, #24]
 800499e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004a2c <_ZN7ArgCtrl14FCaccelerationEv+0xc4>
 80049a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049a6:	ee17 0a90 	vmov	r0, s15
 80049aa:	f7fb fd99 	bl	80004e0 <__aeabi_f2d>
 80049ae:	a31c      	add	r3, pc, #112	; (adr r3, 8004a20 <_ZN7ArgCtrl14FCaccelerationEv+0xb8>)
 80049b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b4:	f7fb fdec 	bl	8000590 <__aeabi_dmul>
 80049b8:	4603      	mov	r3, r0
 80049ba:	460c      	mov	r4, r1
 80049bc:	4618      	mov	r0, r3
 80049be:	4621      	mov	r1, r4
 80049c0:	f7fc f8be 	bl	8000b40 <__aeabi_d2f>
 80049c4:	4603      	mov	r3, r0
 80049c6:	60bb      	str	r3, [r7, #8]
		increment(arg_add);
 80049c8:	ed97 0a02 	vldr	s0, [r7, #8]
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7ff ff67 	bl	80048a0 <_ZN7ArgCtrl9incrementEf>
		return 0;
 80049d2:	2300      	movs	r3, #0
 80049d4:	e01d      	b.n	8004a12 <_ZN7ArgCtrl14FCaccelerationEv+0xaa>
	} else {
		fp_rad arg_add;
		arg_add = ForceCom.mAccelSPD*0.00000125f*M_PI;//進む差分角
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	edd3 7a06 	vldr	s15, [r3, #24]
 80049dc:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8004a2c <_ZN7ArgCtrl14FCaccelerationEv+0xc4>
 80049e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049e4:	ee17 0a90 	vmov	r0, s15
 80049e8:	f7fb fd7a 	bl	80004e0 <__aeabi_f2d>
 80049ec:	a30c      	add	r3, pc, #48	; (adr r3, 8004a20 <_ZN7ArgCtrl14FCaccelerationEv+0xb8>)
 80049ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f2:	f7fb fdcd 	bl	8000590 <__aeabi_dmul>
 80049f6:	4603      	mov	r3, r0
 80049f8:	460c      	mov	r4, r1
 80049fa:	4618      	mov	r0, r3
 80049fc:	4621      	mov	r1, r4
 80049fe:	f7fc f89f 	bl	8000b40 <__aeabi_d2f>
 8004a02:	4603      	mov	r3, r0
 8004a04:	60fb      	str	r3, [r7, #12]
		increment(arg_add);
 8004a06:	ed97 0a03 	vldr	s0, [r7, #12]
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7ff ff48 	bl	80048a0 <_ZN7ArgCtrl9incrementEf>
		return 1;
 8004a10:	2301      	movs	r3, #1
	}
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd90      	pop	{r4, r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	f3af 8000 	nop.w
 8004a20:	54442d18 	.word	0x54442d18
 8004a24:	400921fb 	.word	0x400921fb
 8004a28:	46ea6000 	.word	0x46ea6000
 8004a2c:	35a7c5ac 	.word	0x35a7c5ac

08004a30 <_ZN7ArgCtrl14FCdecelerationEv>:

ForceCom_Status ArgCtrl::FCdeceleration(void) {
 8004a30:	b590      	push	{r4, r7, lr}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
	if(ForceCom.mAccelSPD >= 0){
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	edd3 7a06 	vldr	s15, [r3, #24]
 8004a3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a46:	db28      	blt.n	8004a9a <_ZN7ArgCtrl14FCdecelerationEv+0x6a>
		ForceCom.mAccelSPD = ForceCom.mAccelSPD - 1;//ここ加速度を制御してる
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	edd3 7a06 	vldr	s15, [r3, #24]
 8004a4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	edc3 7a06 	vstr	s15, [r3, #24]
		float arg_add;
		arg_add = ForceCom.mAccelSPD*0.00000125f*M_PI;//進む差分角
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	edd3 7a06 	vldr	s15, [r3, #24]
 8004a62:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004af0 <_ZN7ArgCtrl14FCdecelerationEv+0xc0>
 8004a66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a6a:	ee17 0a90 	vmov	r0, s15
 8004a6e:	f7fb fd37 	bl	80004e0 <__aeabi_f2d>
 8004a72:	a31d      	add	r3, pc, #116	; (adr r3, 8004ae8 <_ZN7ArgCtrl14FCdecelerationEv+0xb8>)
 8004a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a78:	f7fb fd8a 	bl	8000590 <__aeabi_dmul>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	460c      	mov	r4, r1
 8004a80:	4618      	mov	r0, r3
 8004a82:	4621      	mov	r1, r4
 8004a84:	f7fc f85c 	bl	8000b40 <__aeabi_d2f>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	60bb      	str	r3, [r7, #8]
		increment(arg_add);
 8004a8c:	ed97 0a02 	vldr	s0, [r7, #8]
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f7ff ff05 	bl	80048a0 <_ZN7ArgCtrl9incrementEf>
		return 0;
 8004a96:	2300      	movs	r3, #0
 8004a98:	e021      	b.n	8004ade <_ZN7ArgCtrl14FCdecelerationEv+0xae>
	} else {
		ForceCom.mAccelSPD = 0;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f04f 0200 	mov.w	r2, #0
 8004aa0:	619a      	str	r2, [r3, #24]
		float arg_add;
		arg_add = ForceCom.mAccelSPD*0.00000125f*M_PI;//進む差分角
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	edd3 7a06 	vldr	s15, [r3, #24]
 8004aa8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004af0 <_ZN7ArgCtrl14FCdecelerationEv+0xc0>
 8004aac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ab0:	ee17 0a90 	vmov	r0, s15
 8004ab4:	f7fb fd14 	bl	80004e0 <__aeabi_f2d>
 8004ab8:	a30b      	add	r3, pc, #44	; (adr r3, 8004ae8 <_ZN7ArgCtrl14FCdecelerationEv+0xb8>)
 8004aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abe:	f7fb fd67 	bl	8000590 <__aeabi_dmul>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	460c      	mov	r4, r1
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	4621      	mov	r1, r4
 8004aca:	f7fc f839 	bl	8000b40 <__aeabi_d2f>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	60fb      	str	r3, [r7, #12]
		increment(arg_add);
 8004ad2:	ed97 0a03 	vldr	s0, [r7, #12]
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7ff fee2 	bl	80048a0 <_ZN7ArgCtrl9incrementEf>
		return 1;
 8004adc:	2301      	movs	r3, #1
	}
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd90      	pop	{r4, r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	54442d18 	.word	0x54442d18
 8004aec:	400921fb 	.word	0x400921fb
 8004af0:	35a7c5ac 	.word	0x35a7c5ac

08004af4 <_ZN9DebugCtrlC1Ev>:
 *      Author: watashi
 */

#include "DebugCtrl.hpp"

DebugCtrl::DebugCtrl() {
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	4a0b      	ldr	r2, [pc, #44]	; (8004b2c <_ZN9DebugCtrlC1Ev+0x38>)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	3304      	adds	r3, #4
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 f918 	bl	8004d3c <_ZN9DebugInfoC1Ev>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	3314      	adds	r3, #20
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 f991 	bl	8004e38 <_ZN13DebugInfoTinyC1Ev>
	// TODO Auto-generated constructor stub
	mDebugStatus = 0;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f503 5334 	add.w	r3, r3, #11520	; 0x2d00
 8004b1c:	3320      	adds	r3, #32
 8004b1e:	2200      	movs	r2, #0
 8004b20:	601a      	str	r2, [r3, #0]
}
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4618      	mov	r0, r3
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	0800b21c 	.word	0x0800b21c

08004b30 <_ZN9DebugCtrlD1Ev>:

DebugCtrl::~DebugCtrl() {
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	4a08      	ldr	r2, [pc, #32]	; (8004b5c <_ZN9DebugCtrlD1Ev+0x2c>)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3314      	adds	r3, #20
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 f98c 	bl	8004e60 <_ZN13DebugInfoTinyD1Ev>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 f909 	bl	8004d64 <_ZN9DebugInfoD1Ev>
	// TODO Auto-generated destructor stub
}
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4618      	mov	r0, r3
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	0800b21c 	.word	0x0800b21c

08004b60 <_ZN9DebugCtrlD0Ev>:
DebugCtrl::~DebugCtrl() {
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
}
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7ff ffe1 	bl	8004b30 <_ZN9DebugCtrlD1Ev>
 8004b6e:	f642 5124 	movw	r1, #11556	; 0x2d24
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f004 f918 	bl	8008da8 <_ZdlPvj>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3708      	adds	r7, #8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8004b82:	b5b0      	push	{r4, r5, r7, lr}
 8004b84:	b082      	sub	sp, #8
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681c      	ldr	r4, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 f835 	bl	8004c04 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>
 8004b9a:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	4629      	mov	r1, r5
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	f000 f83a 	bl	8004c1a <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataES1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 f811 	bl	8004bd0 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bdb0      	pop	{r4, r5, r7, pc}

08004bb8 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f838 	bl	8004c36 <_ZNSaIN9DebugInfo13SendMotorDataEED1Ev>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6819      	ldr	r1, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8004be0:	461a      	mov	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	119b      	asrs	r3, r3, #6
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8004bea:	461a      	mov	r2, r3
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f82e 	bl	8004c4e <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7ff ffdf 	bl	8004bb8 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implD1Ev>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3708      	adds	r7, #8
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataES1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b084      	sub	sp, #16
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	60f8      	str	r0, [r7, #12]
 8004c22:	60b9      	str	r1, [r7, #8]
 8004c24:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8004c26:	68b9      	ldr	r1, [r7, #8]
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 f823 	bl	8004c74 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataEEvT_S3_>
    }
 8004c2e:	bf00      	nop
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <_ZNSaIN9DebugInfo13SendMotorDataEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b082      	sub	sp, #8
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f825 	bl	8004c8e <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEED1Ev>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4618      	mov	r0, r3
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b084      	sub	sp, #16
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	60f8      	str	r0, [r7, #12]
 8004c56:	60b9      	str	r1, [r7, #8]
 8004c58:	607a      	str	r2, [r7, #4]
	if (__p)
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	68b9      	ldr	r1, [r7, #8]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 f81c 	bl	8004ca4 <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE10deallocateERS2_PS1_j>
      }
 8004c6c:	bf00      	nop
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <_ZSt8_DestroyIPN9DebugInfo13SendMotorDataEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8004c7e:	6839      	ldr	r1, [r7, #0]
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f829 	bl	8004cd8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_>
    }
 8004c86:	bf00      	nop
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <_ZNSt16allocator_traitsISaIN9DebugInfo13SendMotorDataEEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	68b9      	ldr	r1, [r7, #8]
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 f827 	bl	8004d08 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE10deallocateEPS2_j>
 8004cba:	bf00      	nop
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <_ZSt11__addressofIN9DebugInfo13SendMotorDataEEPT_RS2_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d00a      	beq.n	8004d00 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7ff ffe9 	bl	8004cc2 <_ZSt11__addressofIN9DebugInfo13SendMotorDataEEPT_RS2_>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 f815 	bl	8004d22 <_ZSt8_DestroyIN9DebugInfo13SendMotorDataEEvPT_>
	  for (; __first != __last; ++__first)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3340      	adds	r3, #64	; 0x40
 8004cfc:	607b      	str	r3, [r7, #4]
 8004cfe:	e7f0      	b.n	8004ce2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN9DebugInfo13SendMotorDataEEEvT_S5_+0xa>
	}
 8004d00:	bf00      	nop
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8004d14:	68b8      	ldr	r0, [r7, #8]
 8004d16:	f004 f845 	bl	8008da4 <_ZdlPv>
      }
 8004d1a:	bf00      	nop
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <_ZSt8_DestroyIN9DebugInfo13SendMotorDataEEvPT_>:
    _Destroy(_Tp* __pointer)
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b082      	sub	sp, #8
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	4798      	blx	r3
 8004d34:	bf00      	nop
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <_ZN9DebugInfoC1Ev>:
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	4a06      	ldr	r2, [pc, #24]	; (8004d60 <_ZN9DebugInfoC1Ev+0x24>)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 f82c 	bl	8004dac <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4618      	mov	r0, r3
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	0800b22c 	.word	0x0800b22c

08004d64 <_ZN9DebugInfoD1Ev>:
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	4a06      	ldr	r2, [pc, #24]	; (8004d88 <_ZN9DebugInfoD1Ev+0x24>)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	3304      	adds	r3, #4
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff ff03 	bl	8004b82 <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EED1Ev>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	0800b22c 	.word	0x0800b22c

08004d8c <_ZN9DebugInfoD0Ev>:
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7ff ffe5 	bl	8004d64 <_ZN9DebugInfoD1Ev>
 8004d9a:	2110      	movs	r1, #16
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f004 f803 	bl	8008da8 <_ZdlPvj>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4618      	mov	r0, r3
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <_ZNSt6vectorIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>:
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 f805 	bl	8004dc6 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EEC1Ev>:
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b082      	sub	sp, #8
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f000 f805 	bl	8004de0 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implC1Ev>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <_ZNSt12_Vector_baseIN9DebugInfo13SendMotorDataESaIS1_EE12_Vector_implC1Ev>:
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f80e 	bl	8004e0a <_ZNSaIN9DebugInfo13SendMotorDataEEC1Ev>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	605a      	str	r2, [r3, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	609a      	str	r2, [r3, #8]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <_ZNSaIN9DebugInfo13SendMotorDataEEC1Ev>:
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b082      	sub	sp, #8
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f805 	bl	8004e22 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEEC1Ev>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <_ZN9__gnu_cxx13new_allocatorIN9DebugInfo13SendMotorDataEEC1Ev>:
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <_ZN13DebugInfoTinyC1Ev>:
 * 読み出しがVector型であるのは(float型でないのは)データの個数の変化に対応するため。
 *(配列のfor使って調理してください(にっこり))
 */
#include "DebugInfoTiny.hpp"

DebugInfoTiny::DebugInfoTiny() {
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	4a06      	ldr	r2, [pc, #24]	; (8004e5c <_ZN13DebugInfoTinyC1Ev+0x24>)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	mCNT = 0;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	605a      	str	r2, [r3, #4]
}
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	0800b23c 	.word	0x0800b23c

08004e60 <_ZN13DebugInfoTinyD1Ev>:

DebugInfoTiny::~DebugInfoTiny() {
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	4a04      	ldr	r2, [pc, #16]	; (8004e7c <_ZN13DebugInfoTinyD1Ev+0x1c>)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4618      	mov	r0, r3
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	0800b23c 	.word	0x0800b23c

08004e80 <_ZN13DebugInfoTinyD0Ev>:
DebugInfoTiny::~DebugInfoTiny() {
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
}
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f7ff ffe9 	bl	8004e60 <_ZN13DebugInfoTinyD1Ev>
 8004e8e:	f642 5108 	movw	r1, #11528	; 0x2d08
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f003 ff88 	bl	8008da8 <_ZdlPvj>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f043 0201 	orr.w	r2, r3, #1
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	609a      	str	r2, [r3, #8]
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	609a      	str	r2, [r3, #8]
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eee:	b29b      	uxth	r3, r3
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <LL_ADC_INJ_ReadConversionData12>:
  *         @arg @ref LL_ADC_INJ_RANK_3
  *         @arg @ref LL_ADC_INJ_RANK_4
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_INJ_ReadConversionData12(ADC_TypeDef *ADCx, uint32_t Rank)
{
 8004efc:	b490      	push	{r4, r7}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JDRX_REGOFFSET_MASK));
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	333c      	adds	r3, #60	; 0x3c
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f12:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004f16:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	fa92 f2a2 	rbit	r2, r2
 8004f1e:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	fab2 f282 	clz	r2, r2
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	40d3      	lsrs	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	440b      	add	r3, r1
 8004f2e:	461c      	mov	r4, r3
  
  return (uint16_t)(READ_BIT(*preg,
 8004f30:	6823      	ldr	r3, [r4, #0]
                             ADC_JDR1_JDATA)
                   );
 8004f32:	b29b      	uxth	r3, r3
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bc90      	pop	{r4, r7}
 8004f3c:	4770      	bx	lr

08004f3e <LL_ADC_ClearFlag_JEOS>:
  * @rmtoll SR       JEOC           LL_ADC_ClearFlag_JEOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_JEOS(ADC_TypeDef *ADCx)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b083      	sub	sp, #12
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f06f 0204 	mvn.w	r2, #4
 8004f4c:	601a      	str	r2, [r3, #0]
}
 8004f4e:	bf00      	nop
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <LL_ADC_EnableIT_JEOS>:
  * @rmtoll CR1      JEOCIE         LL_ADC_EnableIT_JEOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_JEOS(ADC_TypeDef *ADCx)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	605a      	str	r2, [r3, #4]
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	619a      	str	r2, [r3, #24]
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
 8004f9e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	041a      	lsls	r2, r3, #16
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	619a      	str	r2, [r3, #24]
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <_ZN3PWMC1Ev>:

#include "STM32SystemPack.h"
#include "paramsetting.h"
//#include "stm32f4xx_ll_tim.h"//need

class PWM {
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	605a      	str	r2, [r3, #4]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	609a      	str	r2, [r3, #8]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
	...

08004fd8 <_ZN9MotorCtrlC1Ev>:
 *      Author: watashi
 */

#include "MotorCtrl.hpp"

MotorCtrl::MotorCtrl() {
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	4a24      	ldr	r2, [pc, #144]	; (8005074 <_ZN9MotorCtrlC1Ev+0x9c>)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	3354      	adds	r3, #84	; 0x54
 8004fea:	4618      	mov	r0, r3
 8004fec:	f001 f9cc 	bl	8006388 <_ZN8ObserverC1Ev>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7ff ffdc 	bl	8004fb4 <_ZN3PWMC1Ev>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8005002:	4618      	mov	r0, r3
 8005004:	f7ff ffd6 	bl	8004fb4 <_ZN3PWMC1Ev>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800500e:	4618      	mov	r0, r3
 8005010:	f7ff ffd0 	bl	8004fb4 <_ZN3PWMC1Ev>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800501a:	4618      	mov	r0, r3
 800501c:	f7ff ffca 	bl	8004fb4 <_ZN3PWMC1Ev>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff f9ee 	bl	8004408 <_ZN3PIDC1Ev>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8005032:	4618      	mov	r0, r3
 8005034:	f7ff f9e8 	bl	8004408 <_ZN3PIDC1Ev>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800503e:	4618      	mov	r0, r3
 8005040:	f7ff f9e2 	bl	8004408 <_ZN3PIDC1Ev>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800504a:	4618      	mov	r0, r3
 800504c:	f7ff f9dc 	bl	8004408 <_ZN3PIDC1Ev>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8005056:	4618      	mov	r0, r3
 8005058:	f7ff fbb8 	bl	80047cc <_ZN7ArgCtrlC1Ev>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff fd46 	bl	8004af4 <_ZN9DebugCtrlC1Ev>
	// TODO Auto-generated constructor stub

}
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	0800b24c 	.word	0x0800b24c

08005078 <_ZN9MotorCtrlD1Ev>:

MotorCtrl::~MotorCtrl() {
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	4a18      	ldr	r2, [pc, #96]	; (80050e4 <_ZN9MotorCtrlD1Ev+0x6c>)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800508c:	4618      	mov	r0, r3
 800508e:	f7ff fd4f 	bl	8004b30 <_ZN9DebugCtrlD1Ev>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8005098:	4618      	mov	r0, r3
 800509a:	f7ff fbb7 	bl	800480c <_ZN7ArgCtrlD1Ev>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7ff f9bf 	bl	8004428 <_ZN3PIDD1Ev>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7ff f9b9 	bl	8004428 <_ZN3PIDD1Ev>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff f9b3 	bl	8004428 <_ZN3PIDD1Ev>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7ff f9ad 	bl	8004428 <_ZN3PIDD1Ev>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3354      	adds	r3, #84	; 0x54
 80050d2:	4618      	mov	r0, r3
 80050d4:	f001 f970 	bl	80063b8 <_ZN8ObserverD1Ev>
	// TODO Auto-generated destructor stub
}
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4618      	mov	r0, r3
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	0800b24c 	.word	0x0800b24c

080050e8 <_ZN9MotorCtrlD0Ev>:
MotorCtrl::~MotorCtrl() {
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
}
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f7ff ffc1 	bl	8005078 <_ZN9MotorCtrlD1Ev>
 80050f6:	f642 7170 	movw	r1, #12144	; 0x2f70
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f003 fe54 	bl	8008da8 <_ZdlPvj>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4618      	mov	r0, r3
 8005104:	3708      	adds	r7, #8
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <_ZN9MotorCtrl10InitSystemEv>:

void MotorCtrl::InitSystem(void) {
 800510a:	b580      	push	{r7, lr}
 800510c:	b082      	sub	sp, #8
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
	//以下CubeMXに頼らない定義たち
	//mainで既に定義されているとうまく動かないから、Mainで定義する前に呼び出すこと。
	GPIOInit::Init();
 8005112:	f002 fff1 	bl	80080f8 <_ZN8GPIOInit4InitEv>
	USARTInit::Init();
 8005116:	f003 fd61 	bl	8008bdc <_ZN9USARTInit4InitEv>
	ADCInit::Init();
 800511a:	f002 fc1f 	bl	800795c <_ZN7ADCInit4InitEv>
	TIMInit::Init();
 800511e:	f003 fbd3 	bl	80088c8 <_ZN7TIMInit4InitEv>
}
 8005122:	bf00      	nop
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
	...

0800512c <_ZN9MotorCtrl7InitPWMEv>:

void MotorCtrl::InitPWM(void) {
 800512c:	b590      	push	{r4, r7, lr}
 800512e:	b093      	sub	sp, #76	; 0x4c
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
	PWM PWM_Object1; //PWMのHWを叩くClass
 8005134:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005138:	4618      	mov	r0, r3
 800513a:	f7ff ff3b 	bl	8004fb4 <_ZN3PWMC1Ev>
	PWM PWM_Object2;
 800513e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005142:	4618      	mov	r0, r3
 8005144:	f7ff ff36 	bl	8004fb4 <_ZN3PWMC1Ev>
	PWM PWM_Object3;
 8005148:	f107 0318 	add.w	r3, r7, #24
 800514c:	4618      	mov	r0, r3
 800514e:	f7ff ff31 	bl	8004fb4 <_ZN3PWMC1Ev>
	PWM PWM_Object4;
 8005152:	f107 0308 	add.w	r3, r7, #8
 8005156:	4618      	mov	r0, r3
 8005158:	f7ff ff2c 	bl	8004fb4 <_ZN3PWMC1Ev>

	//LL_TIM_DisableBRK(TIM1);//こっちは未検証
	//LL_TIM_DisableIT_BRK(TIM1);//効かない

	PWM_Object1.setTIM(TIM1);
 800515c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005160:	4957      	ldr	r1, [pc, #348]	; (80052c0 <_ZN9MotorCtrl7InitPWMEv+0x194>)
 8005162:	4618      	mov	r0, r3
 8005164:	f003 f933 	bl	80083ce <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object2.setTIM(TIM1);
 8005168:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800516c:	4954      	ldr	r1, [pc, #336]	; (80052c0 <_ZN9MotorCtrl7InitPWMEv+0x194>)
 800516e:	4618      	mov	r0, r3
 8005170:	f003 f92d 	bl	80083ce <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object3.setTIM(TIM1);
 8005174:	f107 0318 	add.w	r3, r7, #24
 8005178:	4951      	ldr	r1, [pc, #324]	; (80052c0 <_ZN9MotorCtrl7InitPWMEv+0x194>)
 800517a:	4618      	mov	r0, r3
 800517c:	f003 f927 	bl	80083ce <_ZN3PWM6setTIMEP11TIM_TypeDef>
	PWM_Object4.setTIM(TIM1);
 8005180:	f107 0308 	add.w	r3, r7, #8
 8005184:	494e      	ldr	r1, [pc, #312]	; (80052c0 <_ZN9MotorCtrl7InitPWMEv+0x194>)
 8005186:	4618      	mov	r0, r3
 8005188:	f003 f921 	bl	80083ce <_ZN3PWM6setTIMEP11TIM_TypeDef>

	PWM_Object1.setCH(1);
 800518c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005190:	2101      	movs	r1, #1
 8005192:	4618      	mov	r0, r3
 8005194:	f003 f929 	bl	80083ea <_ZN3PWM5setCHEi>
	PWM_Object2.setCH(2);
 8005198:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800519c:	2102      	movs	r1, #2
 800519e:	4618      	mov	r0, r3
 80051a0:	f003 f923 	bl	80083ea <_ZN3PWM5setCHEi>
	PWM_Object3.setCH(3);
 80051a4:	f107 0318 	add.w	r3, r7, #24
 80051a8:	2103      	movs	r1, #3
 80051aa:	4618      	mov	r0, r3
 80051ac:	f003 f91d 	bl	80083ea <_ZN3PWM5setCHEi>
	PWM_Object4.setCH(4);
 80051b0:	f107 0308 	add.w	r3, r7, #8
 80051b4:	2104      	movs	r1, #4
 80051b6:	4618      	mov	r0, r3
 80051b8:	f003 f917 	bl	80083ea <_ZN3PWM5setCHEi>

	PWM_Object1.fInit(PWM_PERIOD_COUNT);
 80051bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80051c0:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80051c4:	4618      	mov	r0, r3
 80051c6:	f003 f91e 	bl	8008406 <_ZN3PWM5fInitEi>
	PWM_Object2.fInit(PWM_PERIOD_COUNT);
 80051ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051ce:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80051d2:	4618      	mov	r0, r3
 80051d4:	f003 f917 	bl	8008406 <_ZN3PWM5fInitEi>
	PWM_Object3.fInit(PWM_PERIOD_COUNT);
 80051d8:	f107 0318 	add.w	r3, r7, #24
 80051dc:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80051e0:	4618      	mov	r0, r3
 80051e2:	f003 f910 	bl	8008406 <_ZN3PWM5fInitEi>
	PWM_Object4.fInit(PWM_PERIOD_COUNT);
 80051e6:	f107 0308 	add.w	r3, r7, #8
 80051ea:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80051ee:	4618      	mov	r0, r3
 80051f0:	f003 f909 	bl	8008406 <_ZN3PWM5fInitEi>

	PWM_Object1.f2Duty(0);//50%duty
 80051f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80051f8:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80052c4 <_ZN9MotorCtrl7InitPWMEv+0x198>
 80051fc:	4618      	mov	r0, r3
 80051fe:	f003 f980 	bl	8008502 <_ZN3PWM6f2DutyEf>
	PWM_Object2.f2Duty(0);
 8005202:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005206:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 80052c4 <_ZN9MotorCtrl7InitPWMEv+0x198>
 800520a:	4618      	mov	r0, r3
 800520c:	f003 f979 	bl	8008502 <_ZN3PWM6f2DutyEf>
	PWM_Object3.f2Duty(0);
 8005210:	f107 0318 	add.w	r3, r7, #24
 8005214:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 80052c4 <_ZN9MotorCtrl7InitPWMEv+0x198>
 8005218:	4618      	mov	r0, r3
 800521a:	f003 f972 	bl	8008502 <_ZN3PWM6f2DutyEf>
	PWM_Object4.f2Duty(0);
 800521e:	f107 0308 	add.w	r3, r7, #8
 8005222:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80052c4 <_ZN9MotorCtrl7InitPWMEv+0x198>
 8005226:	4618      	mov	r0, r3
 8005228:	f003 f96b 	bl	8008502 <_ZN3PWM6f2DutyEf>

	LL_GPIO_SetOutputPin(GPIOC, GPIO_PIN_10);
 800522c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005230:	4825      	ldr	r0, [pc, #148]	; (80052c8 <_ZN9MotorCtrl7InitPWMEv+0x19c>)
 8005232:	f7ff fea2 	bl	8004f7a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOC, GPIO_PIN_11);
 8005236:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800523a:	4823      	ldr	r0, [pc, #140]	; (80052c8 <_ZN9MotorCtrl7InitPWMEv+0x19c>)
 800523c:	f7ff fe9d 	bl	8004f7a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOC, GPIO_PIN_12);
 8005240:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005244:	4820      	ldr	r0, [pc, #128]	; (80052c8 <_ZN9MotorCtrl7InitPWMEv+0x19c>)
 8005246:	f7ff fe98 	bl	8004f7a <LL_GPIO_SetOutputPin>

	mPWMch1 = PWM_Object1;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8005250:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005254:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005256:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mPWMch2 = PWM_Object2;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f503 74ae 	add.w	r4, r3, #348	; 0x15c
 8005260:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005264:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005266:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mPWMch3 = PWM_Object3;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f503 74b6 	add.w	r4, r3, #364	; 0x16c
 8005270:	f107 0318 	add.w	r3, r7, #24
 8005274:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005276:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mPWMch4 = PWM_Object4;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f503 74be 	add.w	r4, r3, #380	; 0x17c
 8005280:	f107 0308 	add.w	r3, r7, #8
 8005284:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005286:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    PWM_Object4.f2Duty(0.9);
 800528a:	f107 0308 	add.w	r3, r7, #8
 800528e:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80052cc <_ZN9MotorCtrl7InitPWMEv+0x1a0>
 8005292:	4618      	mov	r0, r3
 8005294:	f003 f935 	bl	8008502 <_ZN3PWM6f2DutyEf>

    //ADC Start
    LL_ADC_Enable( ADC1 );
 8005298:	480d      	ldr	r0, [pc, #52]	; (80052d0 <_ZN9MotorCtrl7InitPWMEv+0x1a4>)
 800529a:	f7ff fe02 	bl	8004ea2 <LL_ADC_Enable>
    LL_ADC_Enable( ADC2 );
 800529e:	480d      	ldr	r0, [pc, #52]	; (80052d4 <_ZN9MotorCtrl7InitPWMEv+0x1a8>)
 80052a0:	f7ff fdff 	bl	8004ea2 <LL_ADC_Enable>
    LL_ADC_Enable( ADC3 );
 80052a4:	480c      	ldr	r0, [pc, #48]	; (80052d8 <_ZN9MotorCtrl7InitPWMEv+0x1ac>)
 80052a6:	f7ff fdfc 	bl	8004ea2 <LL_ADC_Enable>
    /* ADC1 Injected conversions end interrupt enabling */
    LL_ADC_ClearFlag_JEOS( ADC1 );
 80052aa:	4809      	ldr	r0, [pc, #36]	; (80052d0 <_ZN9MotorCtrl7InitPWMEv+0x1a4>)
 80052ac:	f7ff fe47 	bl	8004f3e <LL_ADC_ClearFlag_JEOS>
    LL_ADC_EnableIT_JEOS( ADC1 );
 80052b0:	4807      	ldr	r0, [pc, #28]	; (80052d0 <_ZN9MotorCtrl7InitPWMEv+0x1a4>)
 80052b2:	f7ff fe52 	bl	8004f5a <LL_ADC_EnableIT_JEOS>

}
 80052b6:	bf00      	nop
 80052b8:	374c      	adds	r7, #76	; 0x4c
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd90      	pop	{r4, r7, pc}
 80052be:	bf00      	nop
 80052c0:	40010000 	.word	0x40010000
 80052c4:	00000000 	.word	0x00000000
 80052c8:	40020800 	.word	0x40020800
 80052cc:	3f666666 	.word	0x3f666666
 80052d0:	40012000 	.word	0x40012000
 80052d4:	40012100 	.word	0x40012100
 80052d8:	40012200 	.word	0x40012200

080052dc <_ZN7ArgCtrlaSERKS_>:

#include "MotorLibDefPack.hpp"
#include "math.h"
#include "Observer.hpp"

class ArgCtrl {
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	605a      	str	r2, [r3, #4]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	689a      	ldr	r2, [r3, #8]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	609a      	str	r2, [r3, #8]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	68da      	ldr	r2, [r3, #12]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	60da      	str	r2, [r3, #12]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	691a      	ldr	r2, [r3, #16]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	611a      	str	r2, [r3, #16]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	3314      	adds	r3, #20
 800530c:	3214      	adds	r2, #20
 800530e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005312:	e883 0003 	stmia.w	r3, {r0, r1}
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4618      	mov	r0, r3
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <_ZN3PIDaSERKS_>:
#ifndef PID_HPP_
#define PID_HPP_

#include <array>

class PID {
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	3304      	adds	r3, #4
 8005334:	3204      	adds	r2, #4
 8005336:	ca07      	ldmia	r2, {r0, r1, r2}
 8005338:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	691a      	ldr	r2, [r3, #16]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	611a      	str	r2, [r3, #16]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	695a      	ldr	r2, [r3, #20]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	615a      	str	r2, [r3, #20]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	699a      	ldr	r2, [r3, #24]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	619a      	str	r2, [r3, #24]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	69da      	ldr	r2, [r3, #28]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	61da      	str	r2, [r3, #28]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	6a1a      	ldr	r2, [r3, #32]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	621a      	str	r2, [r3, #32]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	625a      	str	r2, [r3, #36]	; 0x24
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4618      	mov	r0, r3
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
	...

0800537c <_ZN9MotorCtrl13InitMotorInfoEv>:

void MotorCtrl::InitMotorInfo(void) {
 800537c:	b580      	push	{r7, lr}
 800537e:	b09e      	sub	sp, #120	; 0x78
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]

	{
		ArgCtrl ArgCtrl; //角度を求める機能を持ったclass
 8005384:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005388:	4618      	mov	r0, r3
 800538a:	f7ff fa1f 	bl	80047cc <_ZN7ArgCtrlC1Ev>
		ArgCtrl.Init();
 800538e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005392:	4618      	mov	r0, r3
 8005394:	f7ff fa6a 	bl	800486c <_ZN7ArgCtrl4InitEv>
		mArgCtrl = ArgCtrl;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 800539e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80053a2:	4611      	mov	r1, r2
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7ff ff99 	bl	80052dc <_ZN7ArgCtrlaSERKS_>
		ArgCtrl ArgCtrl; //角度を求める機能を持ったclass
 80053aa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7ff fa2c 	bl	800480c <_ZN7ArgCtrlD1Ev>
//		TimInfo Tim_Info;//タイマの経過時間測定Class
//		Tim_Info.Init(TIM1);
//		mMotorInfo.setTimInfo(Tim_Info);
//	}
	{//PIDLibの生存時間調整(代入後メモリを解放する)
		PID IdPID;
 80053b4:	f107 030c 	add.w	r3, r7, #12
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7ff f825 	bl	8004408 <_ZN3PIDC1Ev>
		PID IqPID;
 80053be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7ff f820 	bl	8004408 <_ZN3PIDC1Ev>
		IdPID.SetParam(PID_GAIN_ID_P, PID_GAIN_ID_I, PID_GAIN_ID_D);
 80053c8:	f107 030c 	add.w	r3, r7, #12
 80053cc:	ed9f 1a19 	vldr	s2, [pc, #100]	; 8005434 <_ZN9MotorCtrl13InitMotorInfoEv+0xb8>
 80053d0:	eddf 0a18 	vldr	s1, [pc, #96]	; 8005434 <_ZN9MotorCtrl13InitMotorInfoEv+0xb8>
 80053d4:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8005434 <_ZN9MotorCtrl13InitMotorInfoEv+0xb8>
 80053d8:	4618      	mov	r0, r3
 80053da:	f7ff f845 	bl	8004468 <_ZN3PID8SetParamEfff>
		IqPID.SetParam(PID_GAIN_IQ_P, PID_GAIN_IQ_I, PID_GAIN_IQ_D);
 80053de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80053e2:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8005434 <_ZN9MotorCtrl13InitMotorInfoEv+0xb8>
 80053e6:	eddf 0a13 	vldr	s1, [pc, #76]	; 8005434 <_ZN9MotorCtrl13InitMotorInfoEv+0xb8>
 80053ea:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8005434 <_ZN9MotorCtrl13InitMotorInfoEv+0xb8>
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7ff f83a 	bl	8004468 <_ZN3PID8SetParamEfff>
		mIdPID = IdPID;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80053fa:	f107 020c 	add.w	r2, r7, #12
 80053fe:	4611      	mov	r1, r2
 8005400:	4618      	mov	r0, r3
 8005402:	f7ff ff8f 	bl	8005324 <_ZN3PIDaSERKS_>
		mIqPID = IqPID;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800540c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005410:	4611      	mov	r1, r2
 8005412:	4618      	mov	r0, r3
 8005414:	f7ff ff86 	bl	8005324 <_ZN3PIDaSERKS_>
		PID IqPID;
 8005418:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800541c:	4618      	mov	r0, r3
 800541e:	f7ff f803 	bl	8004428 <_ZN3PIDD1Ev>
		PID IdPID;
 8005422:	f107 030c 	add.w	r3, r7, #12
 8005426:	4618      	mov	r0, r3
 8005428:	f7fe fffe 	bl	8004428 <_ZN3PIDD1Ev>
		//mMotorInfo.setIdqPIDLib(IdPID, IqPID);
		//mMotorInfo.setIganmadeltaPIDLib(IganmaPID, IdeltaPID);
	}
}
 800542c:	bf00      	nop
 800542e:	3778      	adds	r7, #120	; 0x78
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	3dcccccd 	.word	0x3dcccccd

08005438 <_ZN6EMFObsaSERKS_>:

#include "Matrix.hpp"
#include "ZIntegrate.hpp"
#include "Trigonometric.hpp"

class EMFObs {
 8005438:	b4b0      	push	{r4, r5, r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	605a      	str	r2, [r3, #4]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	3308      	adds	r3, #8
 8005450:	3208      	adds	r2, #8
 8005452:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005456:	e883 0003 	stmia.w	r3, {r0, r1}
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	3310      	adds	r3, #16
 8005460:	3210      	adds	r2, #16
 8005462:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005466:	e883 0003 	stmia.w	r3, {r0, r1}
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	699a      	ldr	r2, [r3, #24]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	619a      	str	r2, [r3, #24]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	69da      	ldr	r2, [r3, #28]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	61da      	str	r2, [r3, #28]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	6a1a      	ldr	r2, [r3, #32]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	621a      	str	r2, [r3, #32]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	625a      	str	r2, [r3, #36]	; 0x24
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	629a      	str	r2, [r3, #40]	; 0x28
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	62da      	str	r2, [r3, #44]	; 0x2c
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	3330      	adds	r3, #48	; 0x30
 80054a0:	3230      	adds	r2, #48	; 0x30
 80054a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054a6:	e883 0003 	stmia.w	r3, {r0, r1}
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	3338      	adds	r3, #56	; 0x38
 80054b0:	3238      	adds	r2, #56	; 0x38
 80054b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054b6:	e883 0003 	stmia.w	r3, {r0, r1}
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	3340      	adds	r3, #64	; 0x40
 80054c0:	3240      	adds	r2, #64	; 0x40
 80054c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054c6:	e883 0003 	stmia.w	r3, {r0, r1}
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	683a      	ldr	r2, [r7, #0]
 80054ce:	3348      	adds	r3, #72	; 0x48
 80054d0:	3248      	adds	r2, #72	; 0x48
 80054d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054d6:	e883 0003 	stmia.w	r3, {r0, r1}
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	3350      	adds	r3, #80	; 0x50
 80054e0:	3250      	adds	r2, #80	; 0x50
 80054e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	3358      	adds	r3, #88	; 0x58
 80054f0:	3258      	adds	r2, #88	; 0x58
 80054f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054f6:	e883 0003 	stmia.w	r3, {r0, r1}
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	f102 0460 	add.w	r4, r2, #96	; 0x60
 8005502:	f103 0560 	add.w	r5, r3, #96	; 0x60
 8005506:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005508:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800550a:	682b      	ldr	r3, [r5, #0]
 800550c:	6023      	str	r3, [r4, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	3374      	adds	r3, #116	; 0x74
 8005514:	3274      	adds	r2, #116	; 0x74
 8005516:	e892 0003 	ldmia.w	r2, {r0, r1}
 800551a:	e883 0003 	stmia.w	r3, {r0, r1}
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	337c      	adds	r3, #124	; 0x7c
 8005524:	327c      	adds	r2, #124	; 0x7c
 8005526:	e892 0003 	ldmia.w	r2, {r0, r1}
 800552a:	e883 0003 	stmia.w	r3, {r0, r1}
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	3384      	adds	r3, #132	; 0x84
 8005534:	3284      	adds	r2, #132	; 0x84
 8005536:	e892 0003 	ldmia.w	r2, {r0, r1}
 800553a:	e883 0003 	stmia.w	r3, {r0, r1}
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4618      	mov	r0, r3
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	bcb0      	pop	{r4, r5, r7}
 8005548:	4770      	bx	lr

0800554a <_ZN4PII2aSERKS_>:
#ifndef INC_PII2_HPP_
#define INC_PII2_HPP_

#include "ZIntegrate.hpp"

class PII2 {
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
 8005552:	6039      	str	r1, [r7, #0]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	605a      	str	r2, [r3, #4]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	609a      	str	r2, [r3, #8]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	60da      	str	r2, [r3, #12]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	691a      	ldr	r2, [r3, #16]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	611a      	str	r2, [r3, #16]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	695a      	ldr	r2, [r3, #20]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	615a      	str	r2, [r3, #20]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	699a      	ldr	r2, [r3, #24]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	619a      	str	r2, [r3, #24]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	69da      	ldr	r2, [r3, #28]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	61da      	str	r2, [r3, #28]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	6a1a      	ldr	r2, [r3, #32]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	621a      	str	r2, [r3, #32]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	3324      	adds	r3, #36	; 0x24
 800559a:	3224      	adds	r2, #36	; 0x24
 800559c:	ca07      	ldmia	r2, {r0, r1, r2}
 800559e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	631a      	str	r2, [r3, #48]	; 0x30
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	635a      	str	r2, [r3, #52]	; 0x34
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	3338      	adds	r3, #56	; 0x38
 80055b8:	3238      	adds	r2, #56	; 0x38
 80055ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80055bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	645a      	str	r2, [r3, #68]	; 0x44
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	649a      	str	r2, [r3, #72]	; 0x48
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4618      	mov	r0, r3
 80055d4:	370c      	adds	r7, #12
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <_ZN8ObserveraSERKS_>:
#include "AdaptVelEst.hpp"
#include "EMFObs.hpp"
#include "EstimatedAxisError.hpp"
#include "PII2.hpp"

class Observer {
 80055de:	b580      	push	{r7, lr}
 80055e0:	b082      	sub	sp, #8
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
 80055e6:	6039      	str	r1, [r7, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	1d1a      	adds	r2, r3, #4
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	3304      	adds	r3, #4
 80055f0:	4619      	mov	r1, r3
 80055f2:	4610      	mov	r0, r2
 80055f4:	f7ff ff20 	bl	8005438 <_ZN6EMFObsaSERKS_>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f103 0290 	add.w	r2, r3, #144	; 0x90
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	3390      	adds	r3, #144	; 0x90
 8005602:	4619      	mov	r1, r3
 8005604:	4610      	mov	r0, r2
 8005606:	f7ff ffa0 	bl	800554a <_ZN4PII2aSERKS_>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	33dc      	adds	r3, #220	; 0xdc
 8005610:	32dc      	adds	r2, #220	; 0xdc
 8005612:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005616:	e883 0003 	stmia.w	r3, {r0, r1}
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	33e4      	adds	r3, #228	; 0xe4
 8005620:	32e4      	adds	r2, #228	; 0xe4
 8005622:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005626:	e883 0003 	stmia.w	r3, {r0, r1}
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4618      	mov	r0, r3
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <_ZN9MotorCtrl12InitObserverEv>:

void MotorCtrl::InitObserver(void) {
 8005658:	b580      	push	{r7, lr}
 800565a:	b0c0      	sub	sp, #256	; 0x100
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]

	{
		Observer Observer; //オブザーバのInit
 8005660:	f107 0308 	add.w	r3, r7, #8
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fe8f 	bl	8006388 <_ZN8ObserverC1Ev>
		Observer.InitEMFObs(OBSERVER_CYCLE_TIME, M_PARAM_R, M_PARAM_LD, M_PARAM_LQ, OBSERVER_GAIN_G1, OBSERVER_GAIN_ALPHA);
 800566a:	f107 0308 	add.w	r3, r7, #8
 800566e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8005672:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8005676:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800567a:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800567e:	eddf 0a13 	vldr	s1, [pc, #76]	; 80056cc <_ZN9MotorCtrl12InitObserverEv+0x74>
 8005682:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80056d0 <_ZN9MotorCtrl12InitObserverEv+0x78>
 8005686:	4618      	mov	r0, r3
 8005688:	f000 febe 	bl	8006408 <_ZN8Observer10InitEMFObsEffffff>
		Observer.InitPII2(OBSERVER_CYCLE_TIME, OBSERVER_GAIN_K1, OBSERVER_GAIN_K2, OBSERVER_GAIN_K3);
 800568c:	f107 0308 	add.w	r3, r7, #8
 8005690:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8005694:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005698:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800569c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80056d0 <_ZN9MotorCtrl12InitObserverEv+0x78>
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 fee5 	bl	8006470 <_ZN8Observer8InitPII2Effff>
		mObserver = Observer;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	3354      	adds	r3, #84	; 0x54
 80056aa:	f107 0208 	add.w	r2, r7, #8
 80056ae:	4611      	mov	r1, r2
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7ff ff94 	bl	80055de <_ZN8ObserveraSERKS_>
		Observer Observer; //オブザーバのInit
 80056b6:	f107 0308 	add.w	r3, r7, #8
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 fe7c 	bl	80063b8 <_ZN8ObserverD1Ev>
	}
}
 80056c0:	bf00      	nop
 80056c2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	3ca3d70a 	.word	0x3ca3d70a
 80056d0:	3727c5ac 	.word	0x3727c5ac

080056d4 <_ZN9MotorCtrl12HighFreqTaskEv>:



void MotorCtrl::HighFreqTask(void) {
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b09c      	sub	sp, #112	; 0x70
 80056d8:	af02      	add	r7, sp, #8
 80056da:	6078      	str	r0, [r7, #4]
	LL_GPIO_SetOutputPin(GPIOA, GPIO_PIN_5);
 80056dc:	2120      	movs	r1, #32
 80056de:	4884      	ldr	r0, [pc, #528]	; (80058f0 <_ZN9MotorCtrl12HighFreqTaskEv+0x21c>)
 80056e0:	f7ff fc4b 	bl	8004f7a <LL_GPIO_SetOutputPin>


	//エンコーダ読み取り
	float Iu,Iv,Iw;
	//増幅率のバイアス考慮してない。あとで計算すること。
	Iu = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_1);
 80056e4:	2101      	movs	r1, #1
 80056e6:	4883      	ldr	r0, [pc, #524]	; (80058f4 <_ZN9MotorCtrl12HighFreqTaskEv+0x220>)
 80056e8:	f7ff fc08 	bl	8004efc <LL_ADC_INJ_ReadConversionData12>
 80056ec:	4603      	mov	r3, r0
 80056ee:	ee07 3a90 	vmov	s15, r3
 80056f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	Iv = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_2);
 80056fa:	f241 1102 	movw	r1, #4354	; 0x1102
 80056fe:	487d      	ldr	r0, [pc, #500]	; (80058f4 <_ZN9MotorCtrl12HighFreqTaskEv+0x220>)
 8005700:	f7ff fbfc 	bl	8004efc <LL_ADC_INJ_ReadConversionData12>
 8005704:	4603      	mov	r3, r0
 8005706:	ee07 3a90 	vmov	s15, r3
 800570a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800570e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	Iw = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_3);
 8005712:	f242 2103 	movw	r1, #8707	; 0x2203
 8005716:	4877      	ldr	r0, [pc, #476]	; (80058f4 <_ZN9MotorCtrl12HighFreqTaskEv+0x220>)
 8005718:	f7ff fbf0 	bl	8004efc <LL_ADC_INJ_ReadConversionData12>
 800571c:	4603      	mov	r3, r0
 800571e:	ee07 3a90 	vmov	s15, r3
 8005722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005726:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
//		Iu = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_1)/4095;
//		Iv = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_2)/4095;
//		Iw = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_3)/4095;
	setIuvw(Iu, Iv, Iw);
 800572a:	ed97 1a17 	vldr	s2, [r7, #92]	; 0x5c
 800572e:	edd7 0a18 	vldr	s1, [r7, #96]	; 0x60
 8005732:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f923 	bl	8005982 <_ZN9MotorCtrl7setIuvwEfff>
		//推定誤差計算

		//推定位置計算(センサを叩く)
		//Motor.culcArg();

	ForceCommutation();
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f949 	bl	80059d4 <_ZN9MotorCtrl16ForceCommutationEv>

	//Iuvw -> Iab
	clarkTransform();
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f976 	bl	8005a34 <_ZN9MotorCtrl14clarkTransformEv>
	//Iab -> Idq
	parkTransform();
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f9c5 	bl	8005ad8 <_ZN9MotorCtrl13parkTransformEv>
	//Idq -> Igd
	parkGanmaDelta();
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 fa15 	bl	8005b7e <_ZN9MotorCtrl14parkGanmaDeltaEv>

	//オブザーバセット・計算・値取得
	mObserver.SetIGanmaDelta(mMotorInfo.mIgd);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	ed93 7a08 	vldr	s14, [r3, #32]
 8005760:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005764:	eeb0 0a47 	vmov.f32	s0, s14
 8005768:	eef0 0a67 	vmov.f32	s1, s15
 800576c:	4610      	mov	r0, r2
 800576e:	f000 feab 	bl	80064c8 <_ZN8Observer14SetIGanmaDeltaESt5arrayIfLj2EE>
	mObserver.SetVGanmaDelta(mMotorInfo.mVgd);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800577e:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8005782:	eeb0 0a47 	vmov.f32	s0, s14
 8005786:	eef0 0a67 	vmov.f32	s1, s15
 800578a:	4610      	mov	r0, r2
 800578c:	f000 feb5 	bl	80064fa <_ZN8Observer14SetVGanmaDeltaESt5arrayIfLj2EE>
	mObserver.Calculate();
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	3354      	adds	r3, #84	; 0x54
 8005794:	4618      	mov	r0, r3
 8005796:	f000 fec9 	bl	800652c <_ZN8Observer9CalculateEv>
	float EstArgE = mObserver.GetEstTheta();
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	3354      	adds	r3, #84	; 0x54
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 ff2a 	bl	80065f8 <_ZN8Observer11GetEstThetaEv>
 80057a4:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58

	std::array<float, 2> Idq = getIdq();
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 fa41 	bl	8005c30 <_ZN9MotorCtrl6getIdqEv>
 80057ae:	eeb0 7a40 	vmov.f32	s14, s0
 80057b2:	eef0 7a60 	vmov.f32	s15, s1
 80057b6:	ed87 7a07 	vstr	s14, [r7, #28]
 80057ba:	edc7 7a08 	vstr	s15, [r7, #32]
	float Id, Iq;//あとで使う　今は未使用だからエラー吐くはず。
	Id = Idq.at(0);
 80057be:	f107 031c 	add.w	r3, r7, #28
 80057c2:	2100      	movs	r1, #0
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7fe fb3d 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 80057ca:	4603      	mov	r3, r0
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	657b      	str	r3, [r7, #84]	; 0x54
	Iq = Idq.at(1);
 80057d0:	f107 031c 	add.w	r3, r7, #28
 80057d4:	2101      	movs	r1, #1
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fe fb34 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 80057dc:	4603      	mov	r3, r0
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	653b      	str	r3, [r7, #80]	; 0x50
	//指令値入力
	//本当はここをpIdqTargetにして入力にする
	//float Vd_input = 0;
	//float Vq_input = 0.5f;

	float Vganma_input = 0;
 80057e2:	f04f 0300 	mov.w	r3, #0
 80057e6:	64fb      	str	r3, [r7, #76]	; 0x4c
	float Vdelta_input = 0;
 80057e8:	f04f 0300 	mov.w	r3, #0
 80057ec:	64bb      	str	r3, [r7, #72]	; 0x48
	float Iq_error;

	float Id_target;
	float Iq_target;

	Id_target = 0;
 80057ee:	f04f 0300 	mov.w	r3, #0
 80057f2:	647b      	str	r3, [r7, #68]	; 0x44
	Iq_target = 0;//ここに目標値を入れる(外部から入れるからSetter必要かも)
 80057f4:	f04f 0300 	mov.w	r3, #0
 80057f8:	643b      	str	r3, [r7, #64]	; 0x40

	Id_error = Id_target - Id;
 80057fa:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80057fe:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005802:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005806:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	Iq_error = Iq_target - Iq;
 800580a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800580e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005816:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	std::array<float, 2> IdqErr = {Id_error, Iq_error};
 800581a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800581c:	617b      	str	r3, [r7, #20]
 800581e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005820:	61bb      	str	r3, [r7, #24]
	//Id,IqのPID制御

	//第二引数に制御周期を入力する。これも計算で出すか、パラメタとして入力すること
	PIDdq_control(IdqErr, 0.1);
 8005822:	ed97 7a05 	vldr	s14, [r7, #20]
 8005826:	edd7 7a06 	vldr	s15, [r7, #24]
 800582a:	ed9f 1a33 	vldr	s2, [pc, #204]	; 80058f8 <_ZN9MotorCtrl12HighFreqTaskEv+0x224>
 800582e:	eeb0 0a47 	vmov.f32	s0, s14
 8005832:	eef0 0a67 	vmov.f32	s1, s15
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fa15 	bl	8005c66 <_ZN9MotorCtrl13PIDdq_controlESt5arrayIfLj2EEf>

	//IO入力?
	LL_ADC_REG_StartConversionSWStart(ADC2);
 800583c:	482f      	ldr	r0, [pc, #188]	; (80058fc <_ZN9MotorCtrl12HighFreqTaskEv+0x228>)
 800583e:	f7ff fb40 	bl	8004ec2 <LL_ADC_REG_StartConversionSWStart>
	float adc2_input = (float)LL_ADC_REG_ReadConversionData12(ADC2)/4095;
 8005842:	482e      	ldr	r0, [pc, #184]	; (80058fc <_ZN9MotorCtrl12HighFreqTaskEv+0x228>)
 8005844:	f7ff fb4d 	bl	8004ee2 <LL_ADC_REG_ReadConversionData12>
 8005848:	4603      	mov	r3, r0
 800584a:	ee07 3a90 	vmov	s15, r3
 800584e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005852:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8005900 <_ZN9MotorCtrl12HighFreqTaskEv+0x22c>
 8005856:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800585a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	//Vq_input = 0;
	//Vd_input = adc_speed;//連れ回し運転

	Vganma_input = adc2_input;//連れ回し運転
 800585e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005860:	64fb      	str	r3, [r7, #76]	; 0x4c
	Vdelta_input = 0;
 8005862:	f04f 0300 	mov.w	r3, #0
 8005866:	64bb      	str	r3, [r7, #72]	; 0x48

	std::array<float, 2> inputVgd = {Vganma_input,Vdelta_input};
 8005868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800586e:	613b      	str	r3, [r7, #16]
	setVgd(inputVgd);
 8005870:	ed97 7a03 	vldr	s14, [r7, #12]
 8005874:	edd7 7a04 	vldr	s15, [r7, #16]
 8005878:	eeb0 0a47 	vmov.f32	s0, s14
 800587c:	eef0 0a67 	vmov.f32	s1, s15
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 fa5a 	bl	8005d3a <_ZN9MotorCtrl6setVgdESt5arrayIfLj2EE>

	//Vgd -> Vdq
	invParkGanmaDelta();
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fa70 	bl	8005d6c <_ZN9MotorCtrl17invParkGanmaDeltaEv>
	//Vdq -> Vab
	invParkTransform();
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 faa2 	bl	8005dd6 <_ZN9MotorCtrl16invParkTransformEv>
	//Vab -> Vuvw
	invClarkTransform();
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 face 	bl	8005e34 <_ZN9MotorCtrl17invClarkTransformEv>
	//PWM出力
	MotorOutputTask();
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f837 	bl	800590c <_ZN9MotorCtrl15MotorOutputTaskEv>

	{
		//SEGGER RTT DEBUG
		int adc_u = (int)Iu;
 800589e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80058a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058a6:	ee17 3a90 	vmov	r3, s15
 80058aa:	633b      	str	r3, [r7, #48]	; 0x30
		int adc_v = (int)Iv;
 80058ac:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80058b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058b4:	ee17 3a90 	vmov	r3, s15
 80058b8:	62fb      	str	r3, [r7, #44]	; 0x2c
		int adc_w = (int)Iw;
 80058ba:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80058be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058c2:	ee17 3a90 	vmov	r3, s15
 80058c6:	62bb      	str	r3, [r7, #40]	; 0x28
//		char str[8];
//		float val = 2.334563;
//		sprintf(str, "%f", val);
		//SEGGER_RTT_printf(0, "val = %s\n", str);

		char* str2 = "2.334563";
 80058c8:	4b0e      	ldr	r3, [pc, #56]	; (8005904 <_ZN9MotorCtrl12HighFreqTaskEv+0x230>)
 80058ca:	627b      	str	r3, [r7, #36]	; 0x24
		SEGGER_RTT_printf(0, "adcVal:%d,%d,%d,%s\n" ,adc_u, adc_v, adc_w, str2);
 80058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ce:	9301      	str	r3, [sp, #4]
 80058d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058d8:	490b      	ldr	r1, [pc, #44]	; (8005908 <_ZN9MotorCtrl12HighFreqTaskEv+0x234>)
 80058da:	2000      	movs	r0, #0
 80058dc:	f001 fc48 	bl	8007170 <SEGGER_RTT_printf>
	}
	if(DEBUG_MODE){//デバッグモードで入る処理
		//DebugTask(mMotorInfo.mArg, mMotorInfo.mArgErr, mMotorInfo.mIuvw, mMotorInfo.mIab, mMotorInfo.mIdq, mMotorInfo.mIgd);
	}
	LL_GPIO_ResetOutputPin(GPIOA, GPIO_PIN_5);
 80058e0:	2120      	movs	r1, #32
 80058e2:	4803      	ldr	r0, [pc, #12]	; (80058f0 <_ZN9MotorCtrl12HighFreqTaskEv+0x21c>)
 80058e4:	f7ff fb57 	bl	8004f96 <LL_GPIO_ResetOutputPin>
}
 80058e8:	bf00      	nop
 80058ea:	3768      	adds	r7, #104	; 0x68
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	40020000 	.word	0x40020000
 80058f4:	40012000 	.word	0x40012000
 80058f8:	3dcccccd 	.word	0x3dcccccd
 80058fc:	40012100 	.word	0x40012100
 8005900:	457ff000 	.word	0x457ff000
 8005904:	0800b188 	.word	0x0800b188
 8005908:	0800b194 	.word	0x0800b194

0800590c <_ZN9MotorCtrl15MotorOutputTaskEv>:

void MotorCtrl::MotorOutputTask(void){
 800590c:	b590      	push	{r4, r7, lr}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
	mPWMch1.f2Duty(mMotorInfo.mVuvw.at(0));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	3328      	adds	r3, #40	; 0x28
 800591e:	2100      	movs	r1, #0
 8005920:	4618      	mov	r0, r3
 8005922:	f7fe fd47 	bl	80043b4 <_ZNSt5arrayIfLj3EE2atEj>
 8005926:	4603      	mov	r3, r0
 8005928:	edd3 7a00 	vldr	s15, [r3]
 800592c:	eeb0 0a67 	vmov.f32	s0, s15
 8005930:	4620      	mov	r0, r4
 8005932:	f002 fde6 	bl	8008502 <_ZN3PWM6f2DutyEf>
	mPWMch2.f2Duty(mMotorInfo.mVuvw.at(1));
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f503 74ae 	add.w	r4, r3, #348	; 0x15c
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	3328      	adds	r3, #40	; 0x28
 8005940:	2101      	movs	r1, #1
 8005942:	4618      	mov	r0, r3
 8005944:	f7fe fd36 	bl	80043b4 <_ZNSt5arrayIfLj3EE2atEj>
 8005948:	4603      	mov	r3, r0
 800594a:	edd3 7a00 	vldr	s15, [r3]
 800594e:	eeb0 0a67 	vmov.f32	s0, s15
 8005952:	4620      	mov	r0, r4
 8005954:	f002 fdd5 	bl	8008502 <_ZN3PWM6f2DutyEf>
	mPWMch3.f2Duty(mMotorInfo.mVuvw.at(2));
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f503 74b6 	add.w	r4, r3, #364	; 0x16c
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	3328      	adds	r3, #40	; 0x28
 8005962:	2102      	movs	r1, #2
 8005964:	4618      	mov	r0, r3
 8005966:	f7fe fd25 	bl	80043b4 <_ZNSt5arrayIfLj3EE2atEj>
 800596a:	4603      	mov	r3, r0
 800596c:	edd3 7a00 	vldr	s15, [r3]
 8005970:	eeb0 0a67 	vmov.f32	s0, s15
 8005974:	4620      	mov	r0, r4
 8005976:	f002 fdc4 	bl	8008502 <_ZN3PWM6f2DutyEf>
}
 800597a:	bf00      	nop
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	bd90      	pop	{r4, r7, pc}

08005982 <_ZN9MotorCtrl7setIuvwEfff>:

//Motor
void MotorCtrl::setIuvw(float pIu, float pIv, float pIw){
 8005982:	b580      	push	{r7, lr}
 8005984:	b084      	sub	sp, #16
 8005986:	af00      	add	r7, sp, #0
 8005988:	60f8      	str	r0, [r7, #12]
 800598a:	ed87 0a02 	vstr	s0, [r7, #8]
 800598e:	edc7 0a01 	vstr	s1, [r7, #4]
 8005992:	ed87 1a00 	vstr	s2, [r7]
	mMotorInfo.mIuvw.at(0) = pIu;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	3304      	adds	r3, #4
 800599a:	2100      	movs	r1, #0
 800599c:	4618      	mov	r0, r3
 800599e:	f7fe fd09 	bl	80043b4 <_ZNSt5arrayIfLj3EE2atEj>
 80059a2:	4602      	mov	r2, r0
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	6013      	str	r3, [r2, #0]
	mMotorInfo.mIuvw.at(1) = pIv;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	3304      	adds	r3, #4
 80059ac:	2101      	movs	r1, #1
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fe fd00 	bl	80043b4 <_ZNSt5arrayIfLj3EE2atEj>
 80059b4:	4602      	mov	r2, r0
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6013      	str	r3, [r2, #0]
	mMotorInfo.mIuvw.at(2) = pIw;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	3304      	adds	r3, #4
 80059be:	2102      	movs	r1, #2
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7fe fcf7 	bl	80043b4 <_ZNSt5arrayIfLj3EE2atEj>
 80059c6:	4602      	mov	r2, r0
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	6013      	str	r3, [r2, #0]
}
 80059cc:	bf00      	nop
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <_ZN9MotorCtrl16ForceCommutationEv>:

void MotorCtrl::ForceCommutation(void) {
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
	if(mUIStatus.mStartStopTRG) {
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 3248 	ldrb.w	r3, [r3, #584]	; 0x248
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d006      	beq.n	80059f4 <_ZN9MotorCtrl16ForceCommutationEv+0x20>
	mArgCtrl.FCacceleration();
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7fe ffbb 	bl	8004968 <_ZN7ArgCtrl14FCaccelerationEv>
 80059f2:	e005      	b.n	8005a00 <_ZN9MotorCtrl16ForceCommutationEv+0x2c>
	} else {
	mArgCtrl.FCdeceleration();
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7ff f818 	bl	8004a30 <_ZN7ArgCtrl14FCdecelerationEv>
	}
	mMotorInfo.mArg = mArgCtrl.getArg();
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fe ff8e 	bl	8004928 <_ZN7ArgCtrl6getArgEv>
 8005a0c:	eef0 7a40 	vmov.f32	s15, s0
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	mMotorInfo.mArgErr = mArgCtrl.getArgErr(); //回転方向より符号は反転する
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fe ff92 	bl	8004946 <_ZN7ArgCtrl9getArgErrEv>
 8005a22:	eef0 7a40 	vmov.f32	s15, s0
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
}
 8005a2c:	bf00      	nop
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <_ZN9MotorCtrl14clarkTransformEv>:

void MotorCtrl::clarkTransform(void) {
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08c      	sub	sp, #48	; 0x30
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
	std::array<float, 3> Iuvw = mMotorInfo.mIuvw;
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a42:	3204      	adds	r2, #4
 8005a44:	ca07      	ldmia	r2, {r0, r1, r2}
 8005a46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	std::array<float, 3> Vuvw = mMotorInfo.mVuvw;
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	f107 0318 	add.w	r3, r7, #24
 8005a50:	3228      	adds	r2, #40	; 0x28
 8005a52:	ca07      	ldmia	r2, {r0, r1, r2}
 8005a54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	std::array<float, 2> Iab = MotorMath::clarkTransform(Iuvw);
 8005a58:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005a5c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005a60:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005a64:	eeb0 0a66 	vmov.f32	s0, s13
 8005a68:	eef0 0a47 	vmov.f32	s1, s14
 8005a6c:	eeb0 1a67 	vmov.f32	s2, s15
 8005a70:	f7fe fa12 	bl	8003e98 <_ZN9MotorMath14clarkTransformESt5arrayIfLj3EE>
 8005a74:	eeb0 7a40 	vmov.f32	s14, s0
 8005a78:	eef0 7a60 	vmov.f32	s15, s1
 8005a7c:	ed87 7a04 	vstr	s14, [r7, #16]
 8005a80:	edc7 7a05 	vstr	s15, [r7, #20]
	std::array<float, 2> Vab = MotorMath::clarkTransform(Vuvw);
 8005a84:	edd7 6a06 	vldr	s13, [r7, #24]
 8005a88:	ed97 7a07 	vldr	s14, [r7, #28]
 8005a8c:	edd7 7a08 	vldr	s15, [r7, #32]
 8005a90:	eeb0 0a66 	vmov.f32	s0, s13
 8005a94:	eef0 0a47 	vmov.f32	s1, s14
 8005a98:	eeb0 1a67 	vmov.f32	s2, s15
 8005a9c:	f7fe f9fc 	bl	8003e98 <_ZN9MotorMath14clarkTransformESt5arrayIfLj3EE>
 8005aa0:	eeb0 7a40 	vmov.f32	s14, s0
 8005aa4:	eef0 7a60 	vmov.f32	s15, s1
 8005aa8:	ed87 7a02 	vstr	s14, [r7, #8]
 8005aac:	edc7 7a03 	vstr	s15, [r7, #12]
	mMotorInfo.mIab = Iab;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	3310      	adds	r3, #16
 8005ab4:	f107 0210 	add.w	r2, r7, #16
 8005ab8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005abc:	e883 0003 	stmia.w	r3, {r0, r1}
	mMotorInfo.mVab = Vab;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3334      	adds	r3, #52	; 0x34
 8005ac4:	f107 0208 	add.w	r2, r7, #8
 8005ac8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005acc:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8005ad0:	bf00      	nop
 8005ad2:	3730      	adds	r7, #48	; 0x30
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <_ZN9MotorCtrl13parkTransformEv>:

void MotorCtrl::parkTransform(void) {
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08c      	sub	sp, #48	; 0x30
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
	fp_rad Arg = mMotorInfo.mArg;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
	std::array<float, 2> Iab = mMotorInfo.mIab;
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005aec:	3210      	adds	r2, #16
 8005aee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005af2:	e883 0003 	stmia.w	r3, {r0, r1}
	std::array<float, 2> Vab = mMotorInfo.mVab;
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	f107 031c 	add.w	r3, r7, #28
 8005afc:	3234      	adds	r2, #52	; 0x34
 8005afe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b02:	e883 0003 	stmia.w	r3, {r0, r1}
	std::array<float, 2> Idq = MotorMath::parkTransform(Arg, Iab);
 8005b06:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005b0a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005b0e:	eef0 0a47 	vmov.f32	s1, s14
 8005b12:	eeb0 1a67 	vmov.f32	s2, s15
 8005b16:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8005b1a:	f7fe fa67 	bl	8003fec <_ZN9MotorMath13parkTransformEfSt5arrayIfLj2EE>
 8005b1e:	eeb0 7a40 	vmov.f32	s14, s0
 8005b22:	eef0 7a60 	vmov.f32	s15, s1
 8005b26:	ed87 7a05 	vstr	s14, [r7, #20]
 8005b2a:	edc7 7a06 	vstr	s15, [r7, #24]
	std::array<float, 2> Vdq = MotorMath::parkTransform(Arg, Vab);
 8005b2e:	ed97 7a07 	vldr	s14, [r7, #28]
 8005b32:	edd7 7a08 	vldr	s15, [r7, #32]
 8005b36:	eef0 0a47 	vmov.f32	s1, s14
 8005b3a:	eeb0 1a67 	vmov.f32	s2, s15
 8005b3e:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8005b42:	f7fe fa53 	bl	8003fec <_ZN9MotorMath13parkTransformEfSt5arrayIfLj2EE>
 8005b46:	eeb0 7a40 	vmov.f32	s14, s0
 8005b4a:	eef0 7a60 	vmov.f32	s15, s1
 8005b4e:	ed87 7a03 	vstr	s14, [r7, #12]
 8005b52:	edc7 7a04 	vstr	s15, [r7, #16]
	mMotorInfo.mIdq = Idq;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	3318      	adds	r3, #24
 8005b5a:	f107 0214 	add.w	r2, r7, #20
 8005b5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b62:	e883 0003 	stmia.w	r3, {r0, r1}
	mMotorInfo.mVdq = Vdq;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	333c      	adds	r3, #60	; 0x3c
 8005b6a:	f107 020c 	add.w	r2, r7, #12
 8005b6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b72:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8005b76:	bf00      	nop
 8005b78:	3730      	adds	r7, #48	; 0x30
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <_ZN9MotorCtrl14parkGanmaDeltaEv>:

void MotorCtrl::parkGanmaDelta(void) {
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b08c      	sub	sp, #48	; 0x30
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
	fp_rad ArgErr = mMotorInfo.mArgErr;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	std::array<float, 2> Idq = mMotorInfo.mIdq;
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	f107 0320 	add.w	r3, r7, #32
 8005b92:	3218      	adds	r2, #24
 8005b94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b98:	e883 0003 	stmia.w	r3, {r0, r1}
	std::array<float, 2> Vdq = mMotorInfo.mVdq;
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	f107 0318 	add.w	r3, r7, #24
 8005ba2:	323c      	adds	r2, #60	; 0x3c
 8005ba4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ba8:	e883 0003 	stmia.w	r3, {r0, r1}
	fp_rad InvArgErr = -1.0f * ArgErr;
 8005bac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005bb0:	eef1 7a67 	vneg.f32	s15, s15
 8005bb4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	std::array<float, 2> Igd = MotorMath::parkTransform(InvArgErr, Idq);
 8005bb8:	ed97 7a08 	vldr	s14, [r7, #32]
 8005bbc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005bc0:	eef0 0a47 	vmov.f32	s1, s14
 8005bc4:	eeb0 1a67 	vmov.f32	s2, s15
 8005bc8:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8005bcc:	f7fe fa0e 	bl	8003fec <_ZN9MotorMath13parkTransformEfSt5arrayIfLj2EE>
 8005bd0:	eeb0 7a40 	vmov.f32	s14, s0
 8005bd4:	eef0 7a60 	vmov.f32	s15, s1
 8005bd8:	ed87 7a04 	vstr	s14, [r7, #16]
 8005bdc:	edc7 7a05 	vstr	s15, [r7, #20]
	std::array<float, 2> Vgd = MotorMath::parkTransform(InvArgErr, Vdq);
 8005be0:	ed97 7a06 	vldr	s14, [r7, #24]
 8005be4:	edd7 7a07 	vldr	s15, [r7, #28]
 8005be8:	eef0 0a47 	vmov.f32	s1, s14
 8005bec:	eeb0 1a67 	vmov.f32	s2, s15
 8005bf0:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8005bf4:	f7fe f9fa 	bl	8003fec <_ZN9MotorMath13parkTransformEfSt5arrayIfLj2EE>
 8005bf8:	eeb0 7a40 	vmov.f32	s14, s0
 8005bfc:	eef0 7a60 	vmov.f32	s15, s1
 8005c00:	ed87 7a02 	vstr	s14, [r7, #8]
 8005c04:	edc7 7a03 	vstr	s15, [r7, #12]
	mMotorInfo.mIgd = Igd;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	3320      	adds	r3, #32
 8005c0c:	f107 0210 	add.w	r2, r7, #16
 8005c10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c14:	e883 0003 	stmia.w	r3, {r0, r1}
	mMotorInfo.mVgd = Vgd;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	3344      	adds	r3, #68	; 0x44
 8005c1c:	f107 0208 	add.w	r2, r7, #8
 8005c20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c24:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8005c28:	bf00      	nop
 8005c2a:	3730      	adds	r7, #48	; 0x30
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <_ZN9MotorCtrl6getIdqEv>:

std::array<float, 2> MotorCtrl::getIdq() {
 8005c30:	b480      	push	{r7}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
	return mMotorInfo.mIdq;
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	f107 0310 	add.w	r3, r7, #16
 8005c3e:	3218      	adds	r2, #24
 8005c40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c44:	e883 0003 	stmia.w	r3, {r0, r1}
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	ee07 2a10 	vmov	s14, r2
 8005c50:	ee07 3a90 	vmov	s15, r3
}
 8005c54:	eeb0 0a47 	vmov.f32	s0, s14
 8005c58:	eef0 0a67 	vmov.f32	s1, s15
 8005c5c:	371c      	adds	r7, #28
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <_ZN9MotorCtrl13PIDdq_controlESt5arrayIfLj2EEf>:

std::array<float, 2> MotorCtrl::getIgd() {
	return mMotorInfo.mIgd;
}

void MotorCtrl::PIDdq_control(std::array<float, 2> pErrIdq, float pTime) {
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b088      	sub	sp, #32
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	60f8      	str	r0, [r7, #12]
 8005c6e:	eeb0 7a40 	vmov.f32	s14, s0
 8005c72:	eef0 7a60 	vmov.f32	s15, s1
 8005c76:	ed87 1a00 	vstr	s2, [r7]
 8005c7a:	ed87 7a01 	vstr	s14, [r7, #4]
 8005c7e:	edc7 7a02 	vstr	s15, [r7, #8]
	float ErrId = pErrIdq.at(0);
 8005c82:	1d3b      	adds	r3, r7, #4
 8005c84:	2100      	movs	r1, #0
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fe f8dc 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	61fb      	str	r3, [r7, #28]
	float ErrIq = pErrIdq.at(1);
 8005c92:	1d3b      	adds	r3, r7, #4
 8005c94:	2101      	movs	r1, #1
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fe f8d4 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	61bb      	str	r3, [r7, #24]
	mIdPID.ErrorAndTimeUpdate(ErrId, pTime);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005ca8:	edd7 0a00 	vldr	s1, [r7]
 8005cac:	ed97 0a07 	vldr	s0, [r7, #28]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7fe fbf2 	bl	800449a <_ZN3PID18ErrorAndTimeUpdateEff>
	mIqPID.ErrorAndTimeUpdate(ErrIq, pTime);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8005cbc:	edd7 0a00 	vldr	s1, [r7]
 8005cc0:	ed97 0a06 	vldr	s0, [r7, #24]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7fe fbe8 	bl	800449a <_ZN3PID18ErrorAndTimeUpdateEff>

	float Vd = mMotorInfo.mVdq.at(0);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	333c      	adds	r3, #60	; 0x3c
 8005cce:	2100      	movs	r1, #0
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7fe f8b7 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	617b      	str	r3, [r7, #20]
	float Vq = mMotorInfo.mVdq.at(1);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	333c      	adds	r3, #60	; 0x3c
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fe f8ae 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	613b      	str	r3, [r7, #16]

	Vd = Vd + mIdPID.OutPut();
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7fe fbf6 	bl	80044e6 <_ZN3PID6OutPutEv>
 8005cfa:	eeb0 7a40 	vmov.f32	s14, s0
 8005cfe:	edd7 7a05 	vldr	s15, [r7, #20]
 8005d02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d06:	edc7 7a05 	vstr	s15, [r7, #20]
	Vq = Vq + mIqPID.OutPut();
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7fe fbe8 	bl	80044e6 <_ZN3PID6OutPutEv>
 8005d16:	eeb0 7a40 	vmov.f32	s14, s0
 8005d1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d22:	edc7 7a04 	vstr	s15, [r7, #16]
	mMotorInfo.mVdq = {Vd, Vq};
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	63da      	str	r2, [r3, #60]	; 0x3c
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005d32:	bf00      	nop
 8005d34:	3720      	adds	r7, #32
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <_ZN9MotorCtrl6setVgdESt5arrayIfLj2EE>:
void MotorCtrl::setVdq(std::array<float, 2> pVdq) {
	//強制転流用
	mMotorInfo.mVdq = pVdq;
}

void MotorCtrl::setVgd(std::array<float, 2> pVgd) {
 8005d3a:	b480      	push	{r7}
 8005d3c:	b085      	sub	sp, #20
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	60f8      	str	r0, [r7, #12]
 8005d42:	eeb0 7a40 	vmov.f32	s14, s0
 8005d46:	eef0 7a60 	vmov.f32	s15, s1
 8005d4a:	ed87 7a01 	vstr	s14, [r7, #4]
 8005d4e:	edc7 7a02 	vstr	s15, [r7, #8]
	mMotorInfo.mVgd = pVgd;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	3344      	adds	r3, #68	; 0x44
 8005d56:	1d3a      	adds	r2, r7, #4
 8005d58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d5c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8005d60:	bf00      	nop
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <_ZN9MotorCtrl17invParkGanmaDeltaEv>:

void MotorCtrl::invParkGanmaDelta(void) {
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b088      	sub	sp, #32
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
	std::array<float, 2> Vgd = mMotorInfo.mVgd;
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	f107 0310 	add.w	r3, r7, #16
 8005d7a:	3244      	adds	r2, #68	; 0x44
 8005d7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d80:	e883 0003 	stmia.w	r3, {r0, r1}
	fp_rad ArgErr = mMotorInfo.mArgErr;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d88:	61fb      	str	r3, [r7, #28]
	fp_rad InvArgErr = -1.0f * ArgErr;
 8005d8a:	edd7 7a07 	vldr	s15, [r7, #28]
 8005d8e:	eef1 7a67 	vneg.f32	s15, s15
 8005d92:	edc7 7a06 	vstr	s15, [r7, #24]
	std::array<float, 2> Vdq = MotorMath::InvparkTransform(InvArgErr, Vgd);
 8005d96:	ed97 7a04 	vldr	s14, [r7, #16]
 8005d9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8005d9e:	eef0 0a47 	vmov.f32	s1, s14
 8005da2:	eeb0 1a67 	vmov.f32	s2, s15
 8005da6:	ed97 0a06 	vldr	s0, [r7, #24]
 8005daa:	f7fe f9a1 	bl	80040f0 <_ZN9MotorMath16InvparkTransformEfSt5arrayIfLj2EE>
 8005dae:	eeb0 7a40 	vmov.f32	s14, s0
 8005db2:	eef0 7a60 	vmov.f32	s15, s1
 8005db6:	ed87 7a02 	vstr	s14, [r7, #8]
 8005dba:	edc7 7a03 	vstr	s15, [r7, #12]
	mMotorInfo.mVdq = Vdq;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	333c      	adds	r3, #60	; 0x3c
 8005dc2:	f107 0208 	add.w	r2, r7, #8
 8005dc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005dca:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8005dce:	bf00      	nop
 8005dd0:	3720      	adds	r7, #32
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <_ZN9MotorCtrl16invParkTransformEv>:
void MotorCtrl::invParkTransform(void) {
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b088      	sub	sp, #32
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
	fp_rad Arg = mMotorInfo.mArg;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005de2:	61fb      	str	r3, [r7, #28]
	std::array<float, 2> Vdq= mMotorInfo.mVdq;
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	f107 0314 	add.w	r3, r7, #20
 8005dea:	323c      	adds	r2, #60	; 0x3c
 8005dec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005df0:	e883 0003 	stmia.w	r3, {r0, r1}
	std::array<float, 2> Vab = MotorMath::InvparkTransform(Arg, Vdq);
 8005df4:	ed97 7a05 	vldr	s14, [r7, #20]
 8005df8:	edd7 7a06 	vldr	s15, [r7, #24]
 8005dfc:	eef0 0a47 	vmov.f32	s1, s14
 8005e00:	eeb0 1a67 	vmov.f32	s2, s15
 8005e04:	ed97 0a07 	vldr	s0, [r7, #28]
 8005e08:	f7fe f972 	bl	80040f0 <_ZN9MotorMath16InvparkTransformEfSt5arrayIfLj2EE>
 8005e0c:	eeb0 7a40 	vmov.f32	s14, s0
 8005e10:	eef0 7a60 	vmov.f32	s15, s1
 8005e14:	ed87 7a03 	vstr	s14, [r7, #12]
 8005e18:	edc7 7a04 	vstr	s15, [r7, #16]
	mMotorInfo.mVab = Vab;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3334      	adds	r3, #52	; 0x34
 8005e20:	f107 020c 	add.w	r2, r7, #12
 8005e24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e28:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8005e2c:	bf00      	nop
 8005e2e:	3720      	adds	r7, #32
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <_ZN9MotorCtrl17invClarkTransformEv>:

void MotorCtrl::invClarkTransform(void) {
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b088      	sub	sp, #32
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
	std::array<float, 2> Vab = mMotorInfo.mVab;
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	f107 0318 	add.w	r3, r7, #24
 8005e42:	3234      	adds	r2, #52	; 0x34
 8005e44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e48:	e883 0003 	stmia.w	r3, {r0, r1}
	std::array<float, 3> Vuvw = MotorMath::InvclarkTransform(Vab);
 8005e4c:	ed97 7a06 	vldr	s14, [r7, #24]
 8005e50:	edd7 7a07 	vldr	s15, [r7, #28]
 8005e54:	eeb0 0a47 	vmov.f32	s0, s14
 8005e58:	eef0 0a67 	vmov.f32	s1, s15
 8005e5c:	f7fe f9ca 	bl	80041f4 <_ZN9MotorMath17InvclarkTransformESt5arrayIfLj2EE>
 8005e60:	eef0 6a40 	vmov.f32	s13, s0
 8005e64:	eeb0 7a60 	vmov.f32	s14, s1
 8005e68:	eef0 7a41 	vmov.f32	s15, s2
 8005e6c:	edc7 6a03 	vstr	s13, [r7, #12]
 8005e70:	ed87 7a04 	vstr	s14, [r7, #16]
 8005e74:	edc7 7a05 	vstr	s15, [r7, #20]
	mMotorInfo.mVuvw = Vuvw;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	3328      	adds	r3, #40	; 0x28
 8005e7c:	f107 020c 	add.w	r2, r7, #12
 8005e80:	ca07      	ldmia	r2, {r0, r1, r2}
 8005e82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8005e86:	bf00      	nop
 8005e88:	3720      	adds	r7, #32
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <_ZN9MotorCtrl6BtnActEv>:
	}
}


//UICtrl
void MotorCtrl::BtnAct(void){//強制転流開始へのトリガ 割り込みから叩くためにここでラッパする
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b082      	sub	sp, #8
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
	if(mUIStatus.mStartStopTRG){
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 3248 	ldrb.w	r3, [r3, #584]	; 0x248
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d003      	beq.n	8005ea8 <_ZN9MotorCtrl6BtnActEv+0x1a>
		BtnActOFF();
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 f808 	bl	8005eb6 <_ZN9MotorCtrl9BtnActOFFEv>
	} else {
		BtnActON();
	}
}
 8005ea6:	e002      	b.n	8005eae <_ZN9MotorCtrl6BtnActEv+0x20>
		BtnActON();
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 f812 	bl	8005ed2 <_ZN9MotorCtrl8BtnActONEv>
}
 8005eae:	bf00      	nop
 8005eb0:	3708      	adds	r7, #8
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <_ZN9MotorCtrl9BtnActOFFEv>:

void MotorCtrl::BtnActOFF(void){//強制転流開始へのトリガOFF
 8005eb6:	b480      	push	{r7}
 8005eb8:	b083      	sub	sp, #12
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
	mUIStatus.mStartStopTRG = MotorStop;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
}
 8005ec6:	bf00      	nop
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <_ZN9MotorCtrl8BtnActONEv>:

void MotorCtrl::BtnActON(void){//強制転流開始へのトリガON
 8005ed2:	b480      	push	{r7}
 8005ed4:	b083      	sub	sp, #12
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
	mUIStatus.mStartStopTRG = MotorStart;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
}
 8005ee2:	bf00      	nop
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
	...

08005ef0 <_ZN6EMFObsC1Ev>:
 *      Author: watashi
 */

#include "EMFObs.hpp"

EMFObs::EMFObs() {
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	4a04      	ldr	r2, [pc, #16]	; (8005f0c <_ZN6EMFObsC1Ev+0x1c>)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4618      	mov	r0, r3
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	0800b25c 	.word	0x0800b25c

08005f10 <_ZN6EMFObsD1Ev>:

EMFObs::~EMFObs() {
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	4a04      	ldr	r2, [pc, #16]	; (8005f2c <_ZN6EMFObsD1Ev+0x1c>)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4618      	mov	r0, r3
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	0800b25c 	.word	0x0800b25c

08005f30 <_ZN6EMFObsD0Ev>:
EMFObs::~EMFObs() {
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
}
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7ff ffe9 	bl	8005f10 <_ZN6EMFObsD1Ev>
 8005f3e:	218c      	movs	r1, #140	; 0x8c
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f002 ff31 	bl	8008da8 <_ZdlPvj>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <_ZN6EMFObs14InitMotorParamEfff>:

//Initializer
void EMFObs::InitMotorParam(float pR,float pLd, float pLq) {
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	ed87 0a02 	vstr	s0, [r7, #8]
 8005f5c:	edc7 0a01 	vstr	s1, [r7, #4]
 8005f60:	ed87 1a00 	vstr	s2, [r7]
	mR = pR;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	619a      	str	r2, [r3, #24]
	mLd = pLd;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	61da      	str	r2, [r3, #28]
	mLq = pLq;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	621a      	str	r2, [r3, #32]
}
 8005f76:	bf00      	nop
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <_ZN6EMFObs13InitCycleTimeEf>:

void EMFObs::InitCycleTime(float pCycleTime) {
 8005f82:	b480      	push	{r7}
 8005f84:	b083      	sub	sp, #12
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	ed87 0a00 	vstr	s0, [r7]
	mCycleTime = pCycleTime;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <_ZN6EMFObs11InitObsGainEf>:

void EMFObs::InitObsGain(float pGainAlpha) {
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	ed87 0a00 	vstr	s0, [r7]
	mGainAlpha = pGainAlpha;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	683a      	ldr	r2, [r7, #0]
 8005fb0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <_ZN6EMFObs13InitModelGainEf>:

void EMFObs::InitModelGain(float pG1) {
 8005fbe:	b480      	push	{r7}
 8005fc0:	b083      	sub	sp, #12
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
 8005fc6:	ed87 0a00 	vstr	s0, [r7]
	mG1 = pG1;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <_ZN6EMFObs6SetIgdESt5arrayIfLj2EE>:

//Setter
void EMFObs::SetIgd(std::array<float, 2> pIGanmaDelta) {
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	eeb0 7a40 	vmov.f32	s14, s0
 8005fe8:	eef0 7a60 	vmov.f32	s15, s1
 8005fec:	ed87 7a01 	vstr	s14, [r7, #4]
 8005ff0:	edc7 7a02 	vstr	s15, [r7, #8]
	mIGanmaDelta = pIGanmaDelta;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	3310      	adds	r3, #16
 8005ff8:	1d3a      	adds	r2, r7, #4
 8005ffa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ffe:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8006002:	bf00      	nop
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <_ZN6EMFObs6SetVgdESt5arrayIfLj2EE>:
void EMFObs::SetVgd(std::array<float, 2> pVGanmaDelta) {
 800600e:	b480      	push	{r7}
 8006010:	b085      	sub	sp, #20
 8006012:	af00      	add	r7, sp, #0
 8006014:	60f8      	str	r0, [r7, #12]
 8006016:	eeb0 7a40 	vmov.f32	s14, s0
 800601a:	eef0 7a60 	vmov.f32	s15, s1
 800601e:	ed87 7a01 	vstr	s14, [r7, #4]
 8006022:	edc7 7a02 	vstr	s15, [r7, #8]
	mVGanmaDelta = pVGanmaDelta;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	3308      	adds	r3, #8
 800602a:	1d3a      	adds	r2, r7, #4
 800602c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006030:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8006034:	bf00      	nop
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <_ZN6EMFObs12SetEstOmegaEEf>:
void EMFObs::SetEstOmegaE(float pEstOmegaE) {
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	ed87 0a00 	vstr	s0, [r7]
	mEstOmegaE = pEstOmegaE;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	605a      	str	r2, [r3, #4]
}
 8006052:	bf00      	nop
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <_ZN6EMFObs11EMFObserverEv>:

//Calculator
void EMFObs::EMFObserver() {
 800605e:	b590      	push	{r4, r7, lr}
 8006060:	b083      	sub	sp, #12
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
	//拡張誘起電圧オブザーバ
	mBufVec1 = Matrix::MatrixMultiple2x2(       -1 * mR / mLd * mG1, -1 * (1 - mLq/mLd) * mEstOmegaE,
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	edd3 7a06 	vldr	s15, [r3, #24]
 800606c:	eef1 6a67 	vneg.f32	s13, s15
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	edd3 7a07 	vldr	s15, [r3, #28]
 8006076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
										 (1 - mLq/mLd) * mEstOmegaE, -1 * mR / mLd * mG1,
										 mIGanmaDelta);
 8006080:	ee27 6a27 	vmul.f32	s12, s14, s15
	mBufVec1 = Matrix::MatrixMultiple2x2(       -1 * mR / mLd * mG1, -1 * (1 - mLq/mLd) * mEstOmegaE,
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	edd3 6a08 	vldr	s13, [r3, #32]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	ed93 7a07 	vldr	s14, [r3, #28]
 8006090:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006094:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800609c:	eeb1 7a67 	vneg.f32	s14, s15
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	edd3 7a01 	vldr	s15, [r3, #4]
										 mIGanmaDelta);
 80060a6:	ee67 5a27 	vmul.f32	s11, s14, s15
										 (1 - mLq/mLd) * mEstOmegaE, -1 * mR / mLd * mG1,
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	edd3 6a08 	vldr	s13, [r3, #32]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	ed93 7a07 	vldr	s14, [r3, #28]
 80060b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	edd3 7a01 	vldr	s15, [r3, #4]
										 mIGanmaDelta);
 80060c8:	ee27 5a27 	vmul.f32	s10, s14, s15
										 (1 - mLq/mLd) * mEstOmegaE, -1 * mR / mLd * mG1,
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	edd3 7a06 	vldr	s15, [r3, #24]
 80060d2:	eef1 6a67 	vneg.f32	s13, s15
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	edd3 7a07 	vldr	s15, [r3, #28]
 80060dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
										 mIGanmaDelta);
 80060e6:	ee67 7a27 	vmul.f32	s15, s14, s15
	mBufVec1 = Matrix::MatrixMultiple2x2(       -1 * mR / mLd * mG1, -1 * (1 - mLq/mLd) * mEstOmegaE,
 80060ea:	687c      	ldr	r4, [r7, #4]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	edd3 6a04 	vldr	s13, [r3, #16]
 80060f2:	ed93 7a05 	vldr	s14, [r3, #20]
 80060f6:	eeb0 2a66 	vmov.f32	s4, s13
 80060fa:	eef0 2a47 	vmov.f32	s5, s14
 80060fe:	eef0 1a67 	vmov.f32	s3, s15
 8006102:	eeb0 1a45 	vmov.f32	s2, s10
 8006106:	eef0 0a65 	vmov.f32	s1, s11
 800610a:	eeb0 0a46 	vmov.f32	s0, s12
 800610e:	f7fd fce7 	bl	8003ae0 <_ZN6Matrix17MatrixMultiple2x2EffffSt5arrayIfLj2EE>
 8006112:	eeb0 7a40 	vmov.f32	s14, s0
 8006116:	eef0 7a60 	vmov.f32	s15, s1
 800611a:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
 800611e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
	//このA11が正しいか検証すること.

	mBufVec2 = Matrix::VectorMultiple2x1(mGainAlpha, mIGanmaDelta);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006128:	687c      	ldr	r4, [r7, #4]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	edd3 6a04 	vldr	s13, [r3, #16]
 8006130:	ed93 7a05 	vldr	s14, [r3, #20]
 8006134:	eef0 0a66 	vmov.f32	s1, s13
 8006138:	eeb0 1a47 	vmov.f32	s2, s14
 800613c:	eeb0 0a67 	vmov.f32	s0, s15
 8006140:	f7fd fd44 	bl	8003bcc <_ZN6Matrix17VectorMultiple2x1EfSt5arrayIfLj2EE>
 8006144:	eeb0 7a40 	vmov.f32	s14, s0
 8006148:	eef0 7a60 	vmov.f32	s15, s1
 800614c:	ed84 7a0e 	vstr	s14, [r4, #56]	; 0x38
 8006150:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c

	mBufVec3 = Matrix::VectorAdd2x1(mBufVec1, mBufVec2);
 8006154:	687c      	ldr	r4, [r7, #4]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 800615c:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8006166:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800616a:	eeb0 1a46 	vmov.f32	s2, s12
 800616e:	eef0 1a66 	vmov.f32	s3, s13
 8006172:	eeb0 0a47 	vmov.f32	s0, s14
 8006176:	eef0 0a67 	vmov.f32	s1, s15
 800617a:	f7fd fd79 	bl	8003c70 <_ZN6Matrix12VectorAdd2x1ESt5arrayIfLj2EES1_>
 800617e:	eeb0 7a40 	vmov.f32	s14, s0
 8006182:	eef0 7a60 	vmov.f32	s15, s1
 8006186:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
 800618a:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44

	mBufVec4 = Matrix::VectorMultiple2x1(mGainAlpha * mLd, mBufVec3);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	edd3 7a07 	vldr	s15, [r3, #28]
 800619a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800619e:	687c      	ldr	r4, [r7, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80061a6:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80061aa:	eef0 0a66 	vmov.f32	s1, s13
 80061ae:	eeb0 1a47 	vmov.f32	s2, s14
 80061b2:	eeb0 0a67 	vmov.f32	s0, s15
 80061b6:	f7fd fd09 	bl	8003bcc <_ZN6Matrix17VectorMultiple2x1EfSt5arrayIfLj2EE>
 80061ba:	eeb0 7a40 	vmov.f32	s14, s0
 80061be:	eef0 7a60 	vmov.f32	s15, s1
 80061c2:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
 80061c6:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c

	mBufVec5 = Matrix::VectorMultiple2x1(mGainAlpha, mVGanmaDelta);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80061d0:	687c      	ldr	r4, [r7, #4]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	edd3 6a02 	vldr	s13, [r3, #8]
 80061d8:	ed93 7a03 	vldr	s14, [r3, #12]
 80061dc:	eef0 0a66 	vmov.f32	s1, s13
 80061e0:	eeb0 1a47 	vmov.f32	s2, s14
 80061e4:	eeb0 0a67 	vmov.f32	s0, s15
 80061e8:	f7fd fcf0 	bl	8003bcc <_ZN6Matrix17VectorMultiple2x1EfSt5arrayIfLj2EE>
 80061ec:	eeb0 7a40 	vmov.f32	s14, s0
 80061f0:	eef0 7a60 	vmov.f32	s15, s1
 80061f4:	ed84 7a14 	vstr	s14, [r4, #80]	; 0x50
 80061f8:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54

	mBufVec6 = Matrix::VectorAdd2x1(mBufVec4, mBufVec5, mBufVec8);
 80061fc:	687c      	ldr	r4, [r7, #4]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	ed93 5a1f 	vldr	s10, [r3, #124]	; 0x7c
 8006204:	edd3 5a20 	vldr	s11, [r3, #128]	; 0x80
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	ed93 6a14 	vldr	s12, [r3, #80]	; 0x50
 800620e:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8006218:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800621c:	eeb0 2a45 	vmov.f32	s4, s10
 8006220:	eef0 2a65 	vmov.f32	s5, s11
 8006224:	eeb0 1a46 	vmov.f32	s2, s12
 8006228:	eef0 1a66 	vmov.f32	s3, s13
 800622c:	eeb0 0a47 	vmov.f32	s0, s14
 8006230:	eef0 0a67 	vmov.f32	s1, s15
 8006234:	f7fd fd82 	bl	8003d3c <_ZN6Matrix12VectorAdd2x1ESt5arrayIfLj2EES1_S1_>
 8006238:	eeb0 7a40 	vmov.f32	s14, s0
 800623c:	eef0 7a60 	vmov.f32	s15, s1
 8006240:	ed84 7a16 	vstr	s14, [r4, #88]	; 0x58
 8006244:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c

	mBufVec7 = mBufVec7ITG.integrate(mCycleTime, mBufVec6);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8006254:	687c      	ldr	r4, [r7, #4]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 800625c:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8006260:	eef0 0a66 	vmov.f32	s1, s13
 8006264:	eeb0 1a47 	vmov.f32	s2, s14
 8006268:	eeb0 0a67 	vmov.f32	s0, s15
 800626c:	4610      	mov	r0, r2
 800626e:	f7fe fa1a 	bl	80046a6 <_ZN12Zintegrate2n9integrateEfSt5arrayIfLj2EE>
 8006272:	eeb0 7a40 	vmov.f32	s14, s0
 8006276:	eef0 7a60 	vmov.f32	s15, s1
 800627a:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 800627e:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78

	mBufVec8 = Matrix::VectorMultiple2x1(-1.0f * mGainAlpha, mBufVec7);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006288:	eef1 7a67 	vneg.f32	s15, s15
 800628c:	687c      	ldr	r4, [r7, #4]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8006294:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8006298:	eef0 0a66 	vmov.f32	s1, s13
 800629c:	eeb0 1a47 	vmov.f32	s2, s14
 80062a0:	eeb0 0a67 	vmov.f32	s0, s15
 80062a4:	f7fd fc92 	bl	8003bcc <_ZN6Matrix17VectorMultiple2x1EfSt5arrayIfLj2EE>
 80062a8:	eeb0 7a40 	vmov.f32	s14, s0
 80062ac:	eef0 7a60 	vmov.f32	s15, s1
 80062b0:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
 80062b4:	edc4 7a20 	vstr	s15, [r4, #128]	; 0x80

	mEstEMFgd = Matrix::VectorAdd2x1(mBufVec2, mBufVec7);
 80062b8:	687c      	ldr	r4, [r7, #4]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	ed93 6a1d 	vldr	s12, [r3, #116]	; 0x74
 80062c0:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80062ca:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80062ce:	eeb0 1a46 	vmov.f32	s2, s12
 80062d2:	eef0 1a66 	vmov.f32	s3, s13
 80062d6:	eeb0 0a47 	vmov.f32	s0, s14
 80062da:	eef0 0a67 	vmov.f32	s1, s15
 80062de:	f7fd fcc7 	bl	8003c70 <_ZN6Matrix12VectorAdd2x1ESt5arrayIfLj2EES1_>
 80062e2:	eeb0 7a40 	vmov.f32	s14, s0
 80062e6:	eef0 7a60 	vmov.f32	s15, s1
 80062ea:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 80062ee:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
}
 80062f2:	bf00      	nop
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd90      	pop	{r4, r7, pc}

080062fa <_ZN6EMFObs11GetEstEMFgdEv>:

//Getter
std::array<float, 2> EMFObs::GetEstEMFgd(void) {
 80062fa:	b480      	push	{r7}
 80062fc:	b087      	sub	sp, #28
 80062fe:	af00      	add	r7, sp, #0
 8006300:	60f8      	str	r0, [r7, #12]
	return mEstEMFgd;
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	f107 0310 	add.w	r3, r7, #16
 8006308:	3284      	adds	r2, #132	; 0x84
 800630a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800630e:	e883 0003 	stmia.w	r3, {r0, r1}
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	ee07 2a10 	vmov	s14, r2
 800631a:	ee07 3a90 	vmov	s15, r3
}
 800631e:	eeb0 0a47 	vmov.f32	s0, s14
 8006322:	eef0 0a67 	vmov.f32	s1, s15
 8006326:	371c      	adds	r7, #28
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <_ZN18EstimatedAxisError8GetErrorESt5arrayIfLj2EE>:

EstimatedAxisError::~EstimatedAxisError() {
	// TODO Auto-generated destructor stub
}

float EstimatedAxisError::GetError(std::array<float, 2> pEstEMFgd) {
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	eeb0 7a40 	vmov.f32	s14, s0
 800633a:	eef0 7a60 	vmov.f32	s15, s1
 800633e:	ed87 7a00 	vstr	s14, [r7]
 8006342:	edc7 7a01 	vstr	s15, [r7, #4]
	float EstEMFg = pEstEMFgd.at(0);
 8006346:	463b      	mov	r3, r7
 8006348:	2100      	movs	r1, #0
 800634a:	4618      	mov	r0, r3
 800634c:	f7fd fd7a 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8006350:	4603      	mov	r3, r0
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	60fb      	str	r3, [r7, #12]
	float EstEMFd = pEstEMFgd.at(1);
 8006356:	463b      	mov	r3, r7
 8006358:	2101      	movs	r1, #1
 800635a:	4618      	mov	r0, r3
 800635c:	f7fd fd72 	bl	8003e44 <_ZNSt5arrayIfLj2EE2atEj>
 8006360:	4603      	mov	r3, r0
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	60bb      	str	r3, [r7, #8]
	return Trigonometric::atan2(-1.0f * EstEMFg, EstEMFd);
 8006366:	edd7 7a03 	vldr	s15, [r7, #12]
 800636a:	eef1 7a67 	vneg.f32	s15, s15
 800636e:	edd7 0a02 	vldr	s1, [r7, #8]
 8006372:	eeb0 0a67 	vmov.f32	s0, s15
 8006376:	f7fe f958 	bl	800462a <_ZN13Trigonometric5atan2Eff>
 800637a:	eef0 7a40 	vmov.f32	s15, s0
}
 800637e:	eeb0 0a67 	vmov.f32	s0, s15
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <_ZN8ObserverC1Ev>:
 *      Author: watashi
 */

#include "Observer.hpp"

Observer::Observer() {
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	4a08      	ldr	r2, [pc, #32]	; (80063b4 <_ZN8ObserverC1Ev+0x2c>)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	601a      	str	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	3304      	adds	r3, #4
 800639a:	4618      	mov	r0, r3
 800639c:	f7ff fda8 	bl	8005ef0 <_ZN6EMFObsC1Ev>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	3390      	adds	r3, #144	; 0x90
 80063a4:	4618      	mov	r0, r3
 80063a6:	f000 f937 	bl	8006618 <_ZN4PII2C1Ev>
	// TODO Auto-generated constructor stub
}
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4618      	mov	r0, r3
 80063ae:	3708      	adds	r7, #8
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	0800b26c 	.word	0x0800b26c

080063b8 <_ZN8ObserverD1Ev>:

Observer::~Observer() {
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	4a08      	ldr	r2, [pc, #32]	; (80063e4 <_ZN8ObserverD1Ev+0x2c>)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	601a      	str	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	3390      	adds	r3, #144	; 0x90
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 f934 	bl	8006638 <_ZN4PII2D1Ev>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3304      	adds	r3, #4
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7ff fd9b 	bl	8005f10 <_ZN6EMFObsD1Ev>
	// TODO Auto-generated destructor stub
}
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4618      	mov	r0, r3
 80063de:	3708      	adds	r7, #8
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	0800b26c 	.word	0x0800b26c

080063e8 <_ZN8ObserverD0Ev>:
Observer::~Observer() {
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
}
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7ff ffe1 	bl	80063b8 <_ZN8ObserverD1Ev>
 80063f6:	21f8      	movs	r1, #248	; 0xf8
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f002 fcd5 	bl	8008da8 <_ZdlPvj>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4618      	mov	r0, r3
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <_ZN8Observer10InitEMFObsEffffff>:

//Initializer
void Observer::InitEMFObs(float pCycleTime, float pR, float pLd, float pLq, float pG1, float pGainAlpha) {
 8006408:	b580      	push	{r7, lr}
 800640a:	b088      	sub	sp, #32
 800640c:	af00      	add	r7, sp, #0
 800640e:	61f8      	str	r0, [r7, #28]
 8006410:	ed87 0a06 	vstr	s0, [r7, #24]
 8006414:	edc7 0a05 	vstr	s1, [r7, #20]
 8006418:	ed87 1a04 	vstr	s2, [r7, #16]
 800641c:	edc7 1a03 	vstr	s3, [r7, #12]
 8006420:	ed87 2a02 	vstr	s4, [r7, #8]
 8006424:	edc7 2a01 	vstr	s5, [r7, #4]
	mEMFObserver.InitCycleTime(pCycleTime);
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	3304      	adds	r3, #4
 800642c:	ed97 0a06 	vldr	s0, [r7, #24]
 8006430:	4618      	mov	r0, r3
 8006432:	f7ff fda6 	bl	8005f82 <_ZN6EMFObs13InitCycleTimeEf>
	mEMFObserver.InitMotorParam(pR, pLd, pLq);
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	3304      	adds	r3, #4
 800643a:	ed97 1a03 	vldr	s2, [r7, #12]
 800643e:	edd7 0a04 	vldr	s1, [r7, #16]
 8006442:	ed97 0a05 	vldr	s0, [r7, #20]
 8006446:	4618      	mov	r0, r3
 8006448:	f7ff fd82 	bl	8005f50 <_ZN6EMFObs14InitMotorParamEfff>
	mEMFObserver.InitModelGain(pG1);
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	3304      	adds	r3, #4
 8006450:	ed97 0a02 	vldr	s0, [r7, #8]
 8006454:	4618      	mov	r0, r3
 8006456:	f7ff fdb2 	bl	8005fbe <_ZN6EMFObs13InitModelGainEf>
	mEMFObserver.InitObsGain(pGainAlpha);
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	3304      	adds	r3, #4
 800645e:	ed97 0a01 	vldr	s0, [r7, #4]
 8006462:	4618      	mov	r0, r3
 8006464:	f7ff fd9c 	bl	8005fa0 <_ZN6EMFObs11InitObsGainEf>
}
 8006468:	bf00      	nop
 800646a:	3720      	adds	r7, #32
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <_ZN8Observer8InitPII2Effff>:

void Observer::InitPII2(float pCycleTime, float pK1, float pK2, float pK3) {
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	6178      	str	r0, [r7, #20]
 8006478:	ed87 0a04 	vstr	s0, [r7, #16]
 800647c:	edc7 0a03 	vstr	s1, [r7, #12]
 8006480:	ed87 1a02 	vstr	s2, [r7, #8]
 8006484:	edc7 1a01 	vstr	s3, [r7, #4]
	mEstThetaPII2.InitCycleTime(pCycleTime);
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	3390      	adds	r3, #144	; 0x90
 800648c:	ed97 0a04 	vldr	s0, [r7, #16]
 8006490:	4618      	mov	r0, r3
 8006492:	f000 f8f1 	bl	8006678 <_ZN4PII213InitCycleTimeEf>
	mEstThetaPII2.InitGainK1(pK1);
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	3390      	adds	r3, #144	; 0x90
 800649a:	ed97 0a03 	vldr	s0, [r7, #12]
 800649e:	4618      	mov	r0, r3
 80064a0:	f000 f8f9 	bl	8006696 <_ZN4PII210InitGainK1Ef>
	mEstThetaPII2.InitGainK2(pK2);
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	3390      	adds	r3, #144	; 0x90
 80064a8:	ed97 0a02 	vldr	s0, [r7, #8]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 f901 	bl	80066b4 <_ZN4PII210InitGainK2Ef>
	mEstThetaPII2.InitGainK3(pK3);
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	3390      	adds	r3, #144	; 0x90
 80064b6:	ed97 0a01 	vldr	s0, [r7, #4]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 f909 	bl	80066d2 <_ZN4PII210InitGainK3Ef>
}
 80064c0:	bf00      	nop
 80064c2:	3718      	adds	r7, #24
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <_ZN8Observer14SetIGanmaDeltaESt5arrayIfLj2EE>:

//Setter
void Observer::SetIGanmaDelta(std::array<float, 2> pIGanmaDelta) {
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	eeb0 7a40 	vmov.f32	s14, s0
 80064d4:	eef0 7a60 	vmov.f32	s15, s1
 80064d8:	ed87 7a01 	vstr	s14, [r7, #4]
 80064dc:	edc7 7a02 	vstr	s15, [r7, #8]
	mIGanmaDelta = pIGanmaDelta;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	33dc      	adds	r3, #220	; 0xdc
 80064e4:	1d3a      	adds	r2, r7, #4
 80064e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80064ea:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80064ee:	bf00      	nop
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <_ZN8Observer14SetVGanmaDeltaESt5arrayIfLj2EE>:
void Observer::SetVGanmaDelta(std::array<float, 2> pVGanmaDelta) {
 80064fa:	b480      	push	{r7}
 80064fc:	b085      	sub	sp, #20
 80064fe:	af00      	add	r7, sp, #0
 8006500:	60f8      	str	r0, [r7, #12]
 8006502:	eeb0 7a40 	vmov.f32	s14, s0
 8006506:	eef0 7a60 	vmov.f32	s15, s1
 800650a:	ed87 7a01 	vstr	s14, [r7, #4]
 800650e:	edc7 7a02 	vstr	s15, [r7, #8]
	mVGanmaDelta = pVGanmaDelta;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	33e4      	adds	r3, #228	; 0xe4
 8006516:	1d3a      	adds	r2, r7, #4
 8006518:	e892 0003 	ldmia.w	r2, {r0, r1}
 800651c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8006520:	bf00      	nop
 8006522:	3714      	adds	r7, #20
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <_ZN8Observer9CalculateEv>:

//Calculator
void Observer::Calculate() {
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
	mEMFObserver.SetIgd(mIGanmaDelta);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	1d1a      	adds	r2, r3, #4
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 800653e:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8006542:	eeb0 0a47 	vmov.f32	s0, s14
 8006546:	eef0 0a67 	vmov.f32	s1, s15
 800654a:	4610      	mov	r0, r2
 800654c:	f7ff fd46 	bl	8005fdc <_ZN6EMFObs6SetIgdESt5arrayIfLj2EE>
	mEMFObserver.SetVgd(mVGanmaDelta);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	1d1a      	adds	r2, r3, #4
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	ed93 7a39 	vldr	s14, [r3, #228]	; 0xe4
 800655a:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 800655e:	eeb0 0a47 	vmov.f32	s0, s14
 8006562:	eef0 0a67 	vmov.f32	s1, s15
 8006566:	4610      	mov	r0, r2
 8006568:	f7ff fd51 	bl	800600e <_ZN6EMFObs6SetVgdESt5arrayIfLj2EE>
	mEMFObserver.EMFObserver();
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	3304      	adds	r3, #4
 8006570:	4618      	mov	r0, r3
 8006572:	f7ff fd74 	bl	800605e <_ZN6EMFObs11EMFObserverEv>
	std::array<float, 2> EstEMFgd = mEMFObserver.GetEstEMFgd();
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	3304      	adds	r3, #4
 800657a:	4618      	mov	r0, r3
 800657c:	f7ff febd 	bl	80062fa <_ZN6EMFObs11GetEstEMFgdEv>
 8006580:	eeb0 7a40 	vmov.f32	s14, s0
 8006584:	eef0 7a60 	vmov.f32	s15, s1
 8006588:	ed87 7a02 	vstr	s14, [r7, #8]
 800658c:	edc7 7a03 	vstr	s15, [r7, #12]
	float EstAxiErr = EstimatedAxisError::GetError(EstEMFgd);
 8006590:	ed97 7a02 	vldr	s14, [r7, #8]
 8006594:	edd7 7a03 	vldr	s15, [r7, #12]
 8006598:	eeb0 0a47 	vmov.f32	s0, s14
 800659c:	eef0 0a67 	vmov.f32	s1, s15
 80065a0:	f7ff fec6 	bl	8006330 <_ZN18EstimatedAxisError8GetErrorESt5arrayIfLj2EE>
 80065a4:	ed87 0a05 	vstr	s0, [r7, #20]
	mEstThetaPII2.SetValue(EstAxiErr);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	3390      	adds	r3, #144	; 0x90
 80065ac:	ed97 0a05 	vldr	s0, [r7, #20]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f000 f89d 	bl	80066f0 <_ZN4PII28SetValueEf>
	mEstThetaPII2.Calculate();
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	3390      	adds	r3, #144	; 0x90
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 f8a7 	bl	800670e <_ZN4PII29CalculateEv>
	float EstOmegaE = mEstThetaPII2.GetPIVal();
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	3390      	adds	r3, #144	; 0x90
 80065c4:	4618      	mov	r0, r3
 80065c6:	f000 f91a 	bl	80067fe <_ZN4PII28GetPIValEv>
 80065ca:	ed87 0a04 	vstr	s0, [r7, #16]
	mEMFObserver.SetEstOmegaE(EstOmegaE);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	3304      	adds	r3, #4
 80065d2:	ed97 0a04 	vldr	s0, [r7, #16]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7ff fd32 	bl	8006040 <_ZN6EMFObs12SetEstOmegaEEf>
	mEstTheta = mEstThetaPII2.GetValue();
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	3390      	adds	r3, #144	; 0x90
 80065e0:	4618      	mov	r0, r3
 80065e2:	f000 f8fd 	bl	80067e0 <_ZN4PII28GetValueEv>
 80065e6:	eef0 7a40 	vmov.f32	s15, s0
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
}
 80065f0:	bf00      	nop
 80065f2:	3718      	adds	r7, #24
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <_ZN8Observer11GetEstThetaEv>:

//Getter
float Observer::GetEstTheta(void) {
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
	return mEstTheta;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006606:	ee07 3a90 	vmov	s15, r3
}
 800660a:	eeb0 0a67 	vmov.f32	s0, s15
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <_ZN4PII2C1Ev>:
 *      Author: watashi
 */

#include "PII2.hpp"

PII2::PII2() {
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	4a04      	ldr	r2, [pc, #16]	; (8006634 <_ZN4PII2C1Ev+0x1c>)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4618      	mov	r0, r3
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	0800b27c 	.word	0x0800b27c

08006638 <_ZN4PII2D1Ev>:

PII2::~PII2() {
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	4a04      	ldr	r2, [pc, #16]	; (8006654 <_ZN4PII2D1Ev+0x1c>)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4618      	mov	r0, r3
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr
 8006654:	0800b27c 	.word	0x0800b27c

08006658 <_ZN4PII2D0Ev>:
PII2::~PII2() {
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
}
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7ff ffe9 	bl	8006638 <_ZN4PII2D1Ev>
 8006666:	214c      	movs	r1, #76	; 0x4c
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f002 fb9d 	bl	8008da8 <_ZdlPvj>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4618      	mov	r0, r3
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <_ZN4PII213InitCycleTimeEf>:

//Initializer
void PII2::InitCycleTime(float pCycleTime) {
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	ed87 0a00 	vstr	s0, [r7]
	mCycleTime = pCycleTime;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	605a      	str	r2, [r3, #4]
}
 800668a:	bf00      	nop
 800668c:	370c      	adds	r7, #12
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr

08006696 <_ZN4PII210InitGainK1Ef>:
void PII2::InitGainK1(float pK1) {
 8006696:	b480      	push	{r7}
 8006698:	b083      	sub	sp, #12
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
 800669e:	ed87 0a00 	vstr	s0, [r7]
	mK1 = pK1;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	683a      	ldr	r2, [r7, #0]
 80066a6:	609a      	str	r2, [r3, #8]
}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <_ZN4PII210InitGainK2Ef>:
void PII2::InitGainK2(float pK2) {
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	ed87 0a00 	vstr	s0, [r7]
	mK2 = pK2;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	60da      	str	r2, [r3, #12]
}
 80066c6:	bf00      	nop
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <_ZN4PII210InitGainK3Ef>:
void PII2::InitGainK3(float pK3) {
 80066d2:	b480      	push	{r7}
 80066d4:	b083      	sub	sp, #12
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	ed87 0a00 	vstr	s0, [r7]
	mK3 = pK3;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	683a      	ldr	r2, [r7, #0]
 80066e2:	611a      	str	r2, [r3, #16]
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <_ZN4PII28SetValueEf>:

//Setter
void PII2::SetValue(float pInputVal) {
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	ed87 0a00 	vstr	s0, [r7]
	mInputVal = pInputVal;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	615a      	str	r2, [r3, #20]
}
 8006702:	bf00      	nop
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <_ZN4PII29CalculateEv>:

//Calculator
void PII2::Calculate() {
 800670e:	b580      	push	{r7, lr}
 8006710:	b082      	sub	sp, #8
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
	mBufVal1 = mK1 * mInputVal;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	ed93 7a02 	vldr	s14, [r3, #8]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	edd3 7a05 	vldr	s15, [r3, #20]
 8006722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	edc3 7a06 	vstr	s15, [r3, #24]
	mBufVal2 = mK2 * mInputVal;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	ed93 7a03 	vldr	s14, [r3, #12]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	edd3 7a05 	vldr	s15, [r3, #20]
 8006738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	edc3 7a07 	vstr	s15, [r3, #28]
	mBufVal3 = mK3 * mInputVal;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	ed93 7a04 	vldr	s14, [r3, #16]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	edd3 7a05 	vldr	s15, [r3, #20]
 800674e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	edc3 7a08 	vstr	s15, [r3, #32]

	mBufVal4 = mBufVal4ITG.integrate(mCycleTime, mBufVal3);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	edd3 7a01 	vldr	s15, [r3, #4]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	ed93 7a08 	vldr	s14, [r3, #32]
 800676a:	eef0 0a47 	vmov.f32	s1, s14
 800676e:	eeb0 0a67 	vmov.f32	s0, s15
 8006772:	4610      	mov	r0, r2
 8006774:	f7fd ff6d 	bl	8004652 <_ZN12Zintegrate1n9integrateEff>
 8006778:	eef0 7a40 	vmov.f32	s15, s0
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	mBufVal5 = mBufVal2 + mBufVal4;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	ed93 7a07 	vldr	s14, [r3, #28]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800678e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	mBufVal6 = mBufVal6ITG.integrate(mCycleTime, mBufVal5);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80067aa:	eef0 0a47 	vmov.f32	s1, s14
 80067ae:	eeb0 0a67 	vmov.f32	s0, s15
 80067b2:	4610      	mov	r0, r2
 80067b4:	f7fd ff4d 	bl	8004652 <_ZN12Zintegrate1n9integrateEff>
 80067b8:	eef0 7a40 	vmov.f32	s15, s0
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	mOutputVal = mBufVal1 + mBufVal6;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	ed93 7a06 	vldr	s14, [r3, #24]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80067ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
}
 80067d8:	bf00      	nop
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <_ZN4PII28GetValueEv>:

//Getter
float PII2::GetValue() {
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
	return mOutputVal;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ec:	ee07 3a90 	vmov	s15, r3
}
 80067f0:	eeb0 0a67 	vmov.f32	s0, s15
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <_ZN4PII28GetPIValEv>:

float PII2::GetPIVal() {
 80067fe:	b480      	push	{r7}
 8006800:	b083      	sub	sp, #12
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
	return mBufVal5;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800680a:	ee07 3a90 	vmov	s15, r3
}
 800680e:	eeb0 0a67 	vmov.f32	s0, s15
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8006822:	4b21      	ldr	r3, [pc, #132]	; (80068a8 <_DoInit+0x8c>)
 8006824:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2203      	movs	r2, #3
 800682a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2203      	movs	r2, #3
 8006830:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a1d      	ldr	r2, [pc, #116]	; (80068ac <_DoInit+0x90>)
 8006836:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a1d      	ldr	r2, [pc, #116]	; (80068b0 <_DoInit+0x94>)
 800683c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006844:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a14      	ldr	r2, [pc, #80]	; (80068ac <_DoInit+0x90>)
 800685c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a14      	ldr	r2, [pc, #80]	; (80068b4 <_DoInit+0x98>)
 8006862:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2210      	movs	r2, #16
 8006868:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	3307      	adds	r3, #7
 8006880:	4a0d      	ldr	r2, [pc, #52]	; (80068b8 <_DoInit+0x9c>)
 8006882:	6810      	ldr	r0, [r2, #0]
 8006884:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a0c      	ldr	r2, [pc, #48]	; (80068bc <_DoInit+0xa0>)
 800688a:	6810      	ldr	r0, [r2, #0]
 800688c:	6018      	str	r0, [r3, #0]
 800688e:	8891      	ldrh	r1, [r2, #4]
 8006890:	7992      	ldrb	r2, [r2, #6]
 8006892:	8099      	strh	r1, [r3, #4]
 8006894:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2220      	movs	r2, #32
 800689a:	719a      	strb	r2, [r3, #6]
}
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr
 80068a8:	200035d4 	.word	0x200035d4
 80068ac:	0800b1dc 	.word	0x0800b1dc
 80068b0:	200001fc 	.word	0x200001fc
 80068b4:	200005fc 	.word	0x200005fc
 80068b8:	0800b1e8 	.word	0x0800b1e8
 80068bc:	0800b1ec 	.word	0x0800b1ec

080068c0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b088      	sub	sp, #32
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80068cc:	2300      	movs	r3, #0
 80068ce:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d905      	bls.n	80068f0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	3b01      	subs	r3, #1
 80068ec:	61fb      	str	r3, [r7, #28]
 80068ee:	e007      	b.n	8006900 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	689a      	ldr	r2, [r3, #8]
 80068f4:	6939      	ldr	r1, [r7, #16]
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	1acb      	subs	r3, r1, r3
 80068fa:	4413      	add	r3, r2
 80068fc:	3b01      	subs	r3, #1
 80068fe:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	689a      	ldr	r2, [r3, #8]
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	69fa      	ldr	r2, [r7, #28]
 800690a:	4293      	cmp	r3, r2
 800690c:	bf28      	it	cs
 800690e:	4613      	movcs	r3, r2
 8006910:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8006912:	69fa      	ldr	r2, [r7, #28]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4293      	cmp	r3, r2
 8006918:	bf28      	it	cs
 800691a:	4613      	movcs	r3, r2
 800691c:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	685a      	ldr	r2, [r3, #4]
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	4413      	add	r3, r2
 8006926:	69fa      	ldr	r2, [r7, #28]
 8006928:	68b9      	ldr	r1, [r7, #8]
 800692a:	4618      	mov	r0, r3
 800692c:	f002 fe30 	bl	8009590 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	4413      	add	r3, r2
 8006936:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	4413      	add	r3, r2
 800693e:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	4413      	add	r3, r2
 800694e:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	429a      	cmp	r2, r3
 8006958:	d101      	bne.n	800695e <_WriteBlocking+0x9e>
      WrOff = 0u;
 800695a:	2300      	movs	r3, #0
 800695c:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1b5      	bne.n	80068d6 <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 800696a:	69bb      	ldr	r3, [r7, #24]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3720      	adds	r7, #32
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8006974:	b580      	push	{r7, lr}
 8006976:	b088      	sub	sp, #32
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	689a      	ldr	r2, [r3, #8]
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8006990:	69ba      	ldr	r2, [r7, #24]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	429a      	cmp	r2, r3
 8006996:	d90e      	bls.n	80069b6 <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	4413      	add	r3, r2
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	68b9      	ldr	r1, [r7, #8]
 80069a4:	4618      	mov	r0, r3
 80069a6:	f002 fdf3 	bl	8009590 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 80069aa:	69fa      	ldr	r2, [r7, #28]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	441a      	add	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80069b4:	e01a      	b.n	80069ec <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	4413      	add	r3, r2
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	68b9      	ldr	r1, [r7, #8]
 80069c6:	4618      	mov	r0, r3
 80069c8:	f002 fde2 	bl	8009590 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6858      	ldr	r0, [r3, #4]
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	4413      	add	r3, r2
 80069de:	697a      	ldr	r2, [r7, #20]
 80069e0:	4619      	mov	r1, r3
 80069e2:	f002 fdd5 	bl	8009590 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	60da      	str	r2, [r3, #12]
}
 80069ec:	bf00      	nop
 80069ee:	3720      	adds	r7, #32
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80069f4:	b480      	push	{r7}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d808      	bhi.n	8006a22 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	689a      	ldr	r2, [r3, #8]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	1ad2      	subs	r2, r2, r3
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	617b      	str	r3, [r7, #20]
 8006a20:	e004      	b.n	8006a2c <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	617b      	str	r3, [r7, #20]
  }
  return r;
 8006a2c:	697b      	ldr	r3, [r7, #20]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	371c      	adds	r7, #28
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
	...

08006a3c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b088      	sub	sp, #32
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	1c5a      	adds	r2, r3, #1
 8006a50:	4613      	mov	r3, r2
 8006a52:	005b      	lsls	r3, r3, #1
 8006a54:	4413      	add	r3, r2
 8006a56:	00db      	lsls	r3, r3, #3
 8006a58:	4a1e      	ldr	r2, [pc, #120]	; (8006ad4 <SEGGER_RTT_WriteNoLock+0x98>)
 8006a5a:	4413      	add	r3, r2
 8006a5c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d017      	beq.n	8006a96 <SEGGER_RTT_WriteNoLock+0x5a>
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d302      	bcc.n	8006a70 <SEGGER_RTT_WriteNoLock+0x34>
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d023      	beq.n	8006ab6 <SEGGER_RTT_WriteNoLock+0x7a>
 8006a6e:	e029      	b.n	8006ac4 <SEGGER_RTT_WriteNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8006a70:	6978      	ldr	r0, [r7, #20]
 8006a72:	f7ff ffbf 	bl	80069f4 <_GetAvailWriteSpace>
 8006a76:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d202      	bcs.n	8006a86 <SEGGER_RTT_WriteNoLock+0x4a>
      Status = 0u;
 8006a80:	2300      	movs	r3, #0
 8006a82:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8006a84:	e021      	b.n	8006aca <SEGGER_RTT_WriteNoLock+0x8e>
      Status = NumBytes;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	69b9      	ldr	r1, [r7, #24]
 8006a8e:	6978      	ldr	r0, [r7, #20]
 8006a90:	f7ff ff70 	bl	8006974 <_WriteNoCheck>
    break;
 8006a94:	e019      	b.n	8006aca <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8006a96:	6978      	ldr	r0, [r7, #20]
 8006a98:	f7ff ffac 	bl	80069f4 <_GetAvailWriteSpace>
 8006a9c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	bf28      	it	cs
 8006aa6:	4613      	movcs	r3, r2
 8006aa8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8006aaa:	69fa      	ldr	r2, [r7, #28]
 8006aac:	69b9      	ldr	r1, [r7, #24]
 8006aae:	6978      	ldr	r0, [r7, #20]
 8006ab0:	f7ff ff60 	bl	8006974 <_WriteNoCheck>
    break;
 8006ab4:	e009      	b.n	8006aca <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	69b9      	ldr	r1, [r7, #24]
 8006aba:	6978      	ldr	r0, [r7, #20]
 8006abc:	f7ff ff00 	bl	80068c0 <_WriteBlocking>
 8006ac0:	61f8      	str	r0, [r7, #28]
    break;
 8006ac2:	e002      	b.n	8006aca <SEGGER_RTT_WriteNoLock+0x8e>
  default:
    Status = 0u;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	61fb      	str	r3, [r7, #28]
    break;
 8006ac8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8006aca:	69fb      	ldr	r3, [r7, #28]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3720      	adds	r7, #32
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	200035d4 	.word	0x200035d4

08006ad8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 8006ae4:	4b0d      	ldr	r3, [pc, #52]	; (8006b1c <SEGGER_RTT_Write+0x44>)
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d101      	bne.n	8006af0 <SEGGER_RTT_Write+0x18>
 8006aec:	f7ff fe96 	bl	800681c <_DoInit>
  SEGGER_RTT_LOCK();
 8006af0:	f3ef 8311 	mrs	r3, BASEPRI
 8006af4:	f04f 0120 	mov.w	r1, #32
 8006af8:	f381 8811 	msr	BASEPRI, r1
 8006afc:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	68b9      	ldr	r1, [r7, #8]
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f7ff ff9a 	bl	8006a3c <SEGGER_RTT_WriteNoLock>
 8006b08:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 8006b10:	693b      	ldr	r3, [r7, #16]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3718      	adds	r7, #24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	200035d4 	.word	0x200035d4

08006b20 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	460b      	mov	r3, r1
 8006b2a:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	1c5a      	adds	r2, r3, #1
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d80e      	bhi.n	8006b5c <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	4413      	add	r3, r2
 8006b46:	78fa      	ldrb	r2, [r7, #3]
 8006b48:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	1c5a      	adds	r2, r3, #1
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	1c5a      	adds	r2, r3, #1
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	689a      	ldr	r2, [r3, #8]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d115      	bne.n	8006b94 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6918      	ldr	r0, [r3, #16]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6819      	ldr	r1, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	461a      	mov	r2, r3
 8006b76:	f7ff ffaf 	bl	8006ad8 <SEGGER_RTT_Write>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d004      	beq.n	8006b8e <_StoreChar+0x6e>
      p->ReturnValue = -1;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b8a:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8006b8c:	e002      	b.n	8006b94 <_StoreChar+0x74>
      p->Cnt = 0u;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	609a      	str	r2, [r3, #8]
}
 8006b94:	bf00      	nop
 8006b96:	3710      	adds	r7, #16
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b08a      	sub	sp, #40	; 0x28
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
 8006ba8:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006bb6:	e007      	b.n	8006bc8 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8006bb8:	6a3a      	ldr	r2, [r7, #32]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc0:	623b      	str	r3, [r7, #32]
    Width++;
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006bc8:	6a3a      	ldr	r2, [r7, #32]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d2f3      	bcs.n	8006bb8 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8006bd0:	683a      	ldr	r2, [r7, #0]
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d901      	bls.n	8006bdc <_PrintUnsigned+0x40>
    Width = NumDigits;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8006bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d125      	bne.n	8006c32 <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 8006be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d022      	beq.n	8006c32 <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8006bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bee:	f003 0302 	and.w	r3, r3, #2
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d005      	beq.n	8006c02 <_PrintUnsigned+0x66>
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d102      	bne.n	8006c02 <_PrintUnsigned+0x66>
        c = '0';
 8006bfc:	2330      	movs	r3, #48	; 0x30
 8006bfe:	76fb      	strb	r3, [r7, #27]
 8006c00:	e001      	b.n	8006c06 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8006c02:	2320      	movs	r3, #32
 8006c04:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006c06:	e00b      	b.n	8006c20 <_PrintUnsigned+0x84>
        FieldWidth--;
 8006c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8006c0e:	7efb      	ldrb	r3, [r7, #27]
 8006c10:	4619      	mov	r1, r3
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f7ff ff84 	bl	8006b20 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	db07      	blt.n	8006c30 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d005      	beq.n	8006c32 <_PrintUnsigned+0x96>
 8006c26:	69fa      	ldr	r2, [r7, #28]
 8006c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d3ec      	bcc.n	8006c08 <_PrintUnsigned+0x6c>
 8006c2e:	e000      	b.n	8006c32 <_PrintUnsigned+0x96>
          break;
 8006c30:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	db55      	blt.n	8006ce6 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d903      	bls.n	8006c48 <_PrintUnsigned+0xac>
        NumDigits--;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	3b01      	subs	r3, #1
 8006c44:	603b      	str	r3, [r7, #0]
 8006c46:	e009      	b.n	8006c5c <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c50:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d200      	bcs.n	8006c5c <_PrintUnsigned+0xc0>
          break;
 8006c5a:	e005      	b.n	8006c68 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	fb02 f303 	mul.w	r3, r2, r3
 8006c64:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006c66:	e7e8      	b.n	8006c3a <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c70:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c76:	fb02 f303 	mul.w	r3, r2, r3
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8006c80:	4a1b      	ldr	r2, [pc, #108]	; (8006cf0 <_PrintUnsigned+0x154>)
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	4413      	add	r3, r2
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	4619      	mov	r1, r3
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f7ff ff48 	bl	8006b20 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	db08      	blt.n	8006caa <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8006c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca0:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1df      	bne.n	8006c68 <_PrintUnsigned+0xcc>
 8006ca8:	e000      	b.n	8006cac <_PrintUnsigned+0x110>
        break;
 8006caa:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8006cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d017      	beq.n	8006ce6 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 8006cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d014      	beq.n	8006ce6 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006cbc:	e00a      	b.n	8006cd4 <_PrintUnsigned+0x138>
          FieldWidth--;
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 8006cc4:	2120      	movs	r1, #32
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f7ff ff2a 	bl	8006b20 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	db07      	blt.n	8006ce4 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d005      	beq.n	8006ce6 <_PrintUnsigned+0x14a>
 8006cda:	69fa      	ldr	r2, [r7, #28]
 8006cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d3ed      	bcc.n	8006cbe <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 8006ce2:	e000      	b.n	8006ce6 <_PrintUnsigned+0x14a>
            break;
 8006ce4:	bf00      	nop
}
 8006ce6:	bf00      	nop
 8006ce8:	3728      	adds	r7, #40	; 0x28
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	0800b284 	.word	0x0800b284

08006cf4 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b088      	sub	sp, #32
 8006cf8:	af02      	add	r7, sp, #8
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
 8006d00:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	bfb8      	it	lt
 8006d08:	425b      	neglt	r3, r3
 8006d0a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006d10:	e007      	b.n	8006d22 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	fb92 f3f3 	sdiv	r3, r2, r3
 8006d1a:	613b      	str	r3, [r7, #16]
    Width++;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	daf3      	bge.n	8006d12 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d901      	bls.n	8006d36 <_PrintInt+0x42>
    Width = NumDigits;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00a      	beq.n	8006d52 <_PrintInt+0x5e>
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	db04      	blt.n	8006d4c <_PrintInt+0x58>
 8006d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d44:	f003 0304 	and.w	r3, r3, #4
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d002      	beq.n	8006d52 <_PrintInt+0x5e>
    FieldWidth--;
 8006d4c:	6a3b      	ldr	r3, [r7, #32]
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	f003 0302 	and.w	r3, r3, #2
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d002      	beq.n	8006d62 <_PrintInt+0x6e>
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d01c      	beq.n	8006d9c <_PrintInt+0xa8>
 8006d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d117      	bne.n	8006d9c <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d014      	beq.n	8006d9c <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006d72:	e00a      	b.n	8006d8a <_PrintInt+0x96>
        FieldWidth--;
 8006d74:	6a3b      	ldr	r3, [r7, #32]
 8006d76:	3b01      	subs	r3, #1
 8006d78:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8006d7a:	2120      	movs	r1, #32
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f7ff fecf 	bl	8006b20 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	db07      	blt.n	8006d9a <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d005      	beq.n	8006d9c <_PrintInt+0xa8>
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	6a3b      	ldr	r3, [r7, #32]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d3ed      	bcc.n	8006d74 <_PrintInt+0x80>
 8006d98:	e000      	b.n	8006d9c <_PrintInt+0xa8>
          break;
 8006d9a:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	db4a      	blt.n	8006e3a <_PrintInt+0x146>
    if (v < 0) {
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	da07      	bge.n	8006dba <_PrintInt+0xc6>
      v = -v;
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	425b      	negs	r3, r3
 8006dae:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8006db0:	212d      	movs	r1, #45	; 0x2d
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f7ff feb4 	bl	8006b20 <_StoreChar>
 8006db8:	e008      	b.n	8006dcc <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8006dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbc:	f003 0304 	and.w	r3, r3, #4
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d003      	beq.n	8006dcc <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 8006dc4:	212b      	movs	r1, #43	; 0x2b
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f7ff feaa 	bl	8006b20 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	db32      	blt.n	8006e3a <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d01f      	beq.n	8006e1e <_PrintInt+0x12a>
 8006dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de0:	f003 0301 	and.w	r3, r3, #1
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d11a      	bne.n	8006e1e <_PrintInt+0x12a>
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d117      	bne.n	8006e1e <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 8006dee:	6a3b      	ldr	r3, [r7, #32]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d014      	beq.n	8006e1e <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006df4:	e00a      	b.n	8006e0c <_PrintInt+0x118>
            FieldWidth--;
 8006df6:	6a3b      	ldr	r3, [r7, #32]
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8006dfc:	2130      	movs	r1, #48	; 0x30
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f7ff fe8e 	bl	8006b20 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	db07      	blt.n	8006e1c <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d005      	beq.n	8006e1e <_PrintInt+0x12a>
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d3ed      	bcc.n	8006df6 <_PrintInt+0x102>
 8006e1a:	e000      	b.n	8006e1e <_PrintInt+0x12a>
              break;
 8006e1c:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	db09      	blt.n	8006e3a <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 8006e26:	68b9      	ldr	r1, [r7, #8]
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	9301      	str	r3, [sp, #4]
 8006e2c:	6a3b      	ldr	r3, [r7, #32]
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f7ff feb1 	bl	8006b9c <_PrintUnsigned>
      }
    }
  }
}
 8006e3a:	bf00      	nop
 8006e3c:	3718      	adds	r7, #24
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
	...

08006e44 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b0a2      	sub	sp, #136	; 0x88
 8006e48:	af02      	add	r7, sp, #8
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8006e50:	f107 0310 	add.w	r3, r7, #16
 8006e54:	653b      	str	r3, [r7, #80]	; 0x50
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8006e56:	2340      	movs	r3, #64	; 0x40
 8006e58:	657b      	str	r3, [r7, #84]	; 0x54
  BufferDesc.Cnt            = 0u;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	65bb      	str	r3, [r7, #88]	; 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	663b      	str	r3, [r7, #96]	; 0x60
  BufferDesc.ReturnValue    = 0;
 8006e62:	2300      	movs	r3, #0
 8006e64:	65fb      	str	r3, [r7, #92]	; 0x5c

  do {
    c = *sFormat;
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    sFormat++;
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	3301      	adds	r3, #1
 8006e72:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8006e74:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f000 8161 	beq.w	8007140 <SEGGER_RTT_vprintf+0x2fc>
      break;
    }
    if (c == '%') {
 8006e7e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006e82:	2b25      	cmp	r3, #37	; 0x25
 8006e84:	f040 814f 	bne.w	8007126 <SEGGER_RTT_vprintf+0x2e2>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	673b      	str	r3, [r7, #112]	; 0x70
      v = 1;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	67bb      	str	r3, [r7, #120]	; 0x78
      do {
        c = *sFormat;
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        switch (c) {
 8006e98:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006e9c:	3b23      	subs	r3, #35	; 0x23
 8006e9e:	2b0d      	cmp	r3, #13
 8006ea0:	d83e      	bhi.n	8006f20 <SEGGER_RTT_vprintf+0xdc>
 8006ea2:	a201      	add	r2, pc, #4	; (adr r2, 8006ea8 <SEGGER_RTT_vprintf+0x64>)
 8006ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea8:	08006f11 	.word	0x08006f11
 8006eac:	08006f21 	.word	0x08006f21
 8006eb0:	08006f21 	.word	0x08006f21
 8006eb4:	08006f21 	.word	0x08006f21
 8006eb8:	08006f21 	.word	0x08006f21
 8006ebc:	08006f21 	.word	0x08006f21
 8006ec0:	08006f21 	.word	0x08006f21
 8006ec4:	08006f21 	.word	0x08006f21
 8006ec8:	08006f01 	.word	0x08006f01
 8006ecc:	08006f21 	.word	0x08006f21
 8006ed0:	08006ee1 	.word	0x08006ee1
 8006ed4:	08006f21 	.word	0x08006f21
 8006ed8:	08006f21 	.word	0x08006f21
 8006edc:	08006ef1 	.word	0x08006ef1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006ee0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ee2:	f043 0301 	orr.w	r3, r3, #1
 8006ee6:	673b      	str	r3, [r7, #112]	; 0x70
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	3301      	adds	r3, #1
 8006eec:	60bb      	str	r3, [r7, #8]
 8006eee:	e01a      	b.n	8006f26 <SEGGER_RTT_vprintf+0xe2>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006ef0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ef2:	f043 0302 	orr.w	r3, r3, #2
 8006ef6:	673b      	str	r3, [r7, #112]	; 0x70
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	3301      	adds	r3, #1
 8006efc:	60bb      	str	r3, [r7, #8]
 8006efe:	e012      	b.n	8006f26 <SEGGER_RTT_vprintf+0xe2>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006f00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f02:	f043 0304 	orr.w	r3, r3, #4
 8006f06:	673b      	str	r3, [r7, #112]	; 0x70
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	60bb      	str	r3, [r7, #8]
 8006f0e:	e00a      	b.n	8006f26 <SEGGER_RTT_vprintf+0xe2>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006f10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f12:	f043 0308 	orr.w	r3, r3, #8
 8006f16:	673b      	str	r3, [r7, #112]	; 0x70
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	60bb      	str	r3, [r7, #8]
 8006f1e:	e002      	b.n	8006f26 <SEGGER_RTT_vprintf+0xe2>
        default:  v = 0; break;
 8006f20:	2300      	movs	r3, #0
 8006f22:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f24:	bf00      	nop
        }
      } while (v);
 8006f26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1b1      	bne.n	8006e90 <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	66fb      	str	r3, [r7, #108]	; 0x6c
      do {
        c = *sFormat;
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c < '0') || (c > '9')) {
 8006f38:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006f3c:	2b2f      	cmp	r3, #47	; 0x2f
 8006f3e:	d912      	bls.n	8006f66 <SEGGER_RTT_vprintf+0x122>
 8006f40:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006f44:	2b39      	cmp	r3, #57	; 0x39
 8006f46:	d80e      	bhi.n	8006f66 <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8006f4e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f50:	4613      	mov	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	005b      	lsls	r3, r3, #1
 8006f58:	461a      	mov	r2, r3
 8006f5a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006f5e:	4413      	add	r3, r2
 8006f60:	3b30      	subs	r3, #48	; 0x30
 8006f62:	66fb      	str	r3, [r7, #108]	; 0x6c
        c = *sFormat;
 8006f64:	e7e4      	b.n	8006f30 <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006f66:	2300      	movs	r3, #0
 8006f68:	677b      	str	r3, [r7, #116]	; 0x74
      c = *sFormat;
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      if (c == '.') {
 8006f72:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006f76:	2b2e      	cmp	r3, #46	; 0x2e
 8006f78:	d11d      	bne.n	8006fb6 <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
          if ((c < '0') || (c > '9')) {
 8006f88:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006f8c:	2b2f      	cmp	r3, #47	; 0x2f
 8006f8e:	d912      	bls.n	8006fb6 <SEGGER_RTT_vprintf+0x172>
 8006f90:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006f94:	2b39      	cmp	r3, #57	; 0x39
 8006f96:	d80e      	bhi.n	8006fb6 <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 8006f9e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	005b      	lsls	r3, r3, #1
 8006fa8:	461a      	mov	r2, r3
 8006faa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006fae:	4413      	add	r3, r2
 8006fb0:	3b30      	subs	r3, #48	; 0x30
 8006fb2:	677b      	str	r3, [r7, #116]	; 0x74
          c = *sFormat;
 8006fb4:	e7e4      	b.n	8006f80 <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 8006fbe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006fc2:	2b6c      	cmp	r3, #108	; 0x6c
 8006fc4:	d003      	beq.n	8006fce <SEGGER_RTT_vprintf+0x18a>
 8006fc6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006fca:	2b68      	cmp	r3, #104	; 0x68
 8006fcc:	d107      	bne.n	8006fde <SEGGER_RTT_vprintf+0x19a>
          sFormat++;
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c == 'l') || (c == 'h')) {
 8006fdc:	e7ef      	b.n	8006fbe <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006fde:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006fe2:	2b64      	cmp	r3, #100	; 0x64
 8006fe4:	d028      	beq.n	8007038 <SEGGER_RTT_vprintf+0x1f4>
 8006fe6:	2b64      	cmp	r3, #100	; 0x64
 8006fe8:	dc07      	bgt.n	8006ffa <SEGGER_RTT_vprintf+0x1b6>
 8006fea:	2b58      	cmp	r3, #88	; 0x58
 8006fec:	d04a      	beq.n	8007084 <SEGGER_RTT_vprintf+0x240>
 8006fee:	2b63      	cmp	r3, #99	; 0x63
 8006ff0:	d00f      	beq.n	8007012 <SEGGER_RTT_vprintf+0x1ce>
 8006ff2:	2b25      	cmp	r3, #37	; 0x25
 8006ff4:	f000 808c 	beq.w	8007110 <SEGGER_RTT_vprintf+0x2cc>
        break;
      case '%':
        _StoreChar(&BufferDesc, '%');
        break;
      default:
        break;
 8006ff8:	e091      	b.n	800711e <SEGGER_RTT_vprintf+0x2da>
      switch (c) {
 8006ffa:	2b73      	cmp	r3, #115	; 0x73
 8006ffc:	d055      	beq.n	80070aa <SEGGER_RTT_vprintf+0x266>
 8006ffe:	2b73      	cmp	r3, #115	; 0x73
 8007000:	dc02      	bgt.n	8007008 <SEGGER_RTT_vprintf+0x1c4>
 8007002:	2b70      	cmp	r3, #112	; 0x70
 8007004:	d071      	beq.n	80070ea <SEGGER_RTT_vprintf+0x2a6>
        break;
 8007006:	e08a      	b.n	800711e <SEGGER_RTT_vprintf+0x2da>
      switch (c) {
 8007008:	2b75      	cmp	r3, #117	; 0x75
 800700a:	d028      	beq.n	800705e <SEGGER_RTT_vprintf+0x21a>
 800700c:	2b78      	cmp	r3, #120	; 0x78
 800700e:	d039      	beq.n	8007084 <SEGGER_RTT_vprintf+0x240>
        break;
 8007010:	e085      	b.n	800711e <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	1d19      	adds	r1, r3, #4
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	6011      	str	r1, [r2, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	67bb      	str	r3, [r7, #120]	; 0x78
        c0 = (char)v;
 8007020:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007022:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        _StoreChar(&BufferDesc, c0);
 8007026:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800702a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800702e:	4611      	mov	r1, r2
 8007030:	4618      	mov	r0, r3
 8007032:	f7ff fd75 	bl	8006b20 <_StoreChar>
        break;
 8007036:	e072      	b.n	800711e <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	1d19      	adds	r1, r3, #4
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	6011      	str	r1, [r2, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8007046:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800704a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800704c:	9301      	str	r3, [sp, #4]
 800704e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007054:	220a      	movs	r2, #10
 8007056:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007058:	f7ff fe4c 	bl	8006cf4 <_PrintInt>
        break;
 800705c:	e05f      	b.n	800711e <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	1d19      	adds	r1, r3, #4
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	6011      	str	r1, [r2, #0]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800706c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800706e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8007072:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007074:	9301      	str	r3, [sp, #4]
 8007076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800707c:	220a      	movs	r2, #10
 800707e:	f7ff fd8d 	bl	8006b9c <_PrintUnsigned>
        break;
 8007082:	e04c      	b.n	800711e <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	1d19      	adds	r1, r3, #4
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	6011      	str	r1, [r2, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8007092:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007094:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8007098:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800709a:	9301      	str	r3, [sp, #4]
 800709c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800709e:	9300      	str	r3, [sp, #0]
 80070a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070a2:	2210      	movs	r2, #16
 80070a4:	f7ff fd7a 	bl	8006b9c <_PrintUnsigned>
        break;
 80070a8:	e039      	b.n	800711e <SEGGER_RTT_vprintf+0x2da>
          const char * s = va_arg(*pParamList, const char *);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	1d19      	adds	r1, r3, #4
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	6011      	str	r1, [r2, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	66bb      	str	r3, [r7, #104]	; 0x68
            c = *s;
 80070b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            s++;
 80070c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80070c2:	3301      	adds	r3, #1
 80070c4:	66bb      	str	r3, [r7, #104]	; 0x68
            if (c == '\0') {
 80070c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00b      	beq.n	80070e6 <SEGGER_RTT_vprintf+0x2a2>
           _StoreChar(&BufferDesc, c);
 80070ce:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 80070d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80070d6:	4611      	mov	r1, r2
 80070d8:	4618      	mov	r0, r3
 80070da:	f7ff fd21 	bl	8006b20 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 80070de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	dae9      	bge.n	80070b8 <SEGGER_RTT_vprintf+0x274>
        break;
 80070e4:	e01b      	b.n	800711e <SEGGER_RTT_vprintf+0x2da>
              break;
 80070e6:	bf00      	nop
        break;
 80070e8:	e019      	b.n	800711e <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	1d19      	adds	r1, r3, #4
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	6011      	str	r1, [r2, #0]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 80070f8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80070fa:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80070fe:	2300      	movs	r3, #0
 8007100:	9301      	str	r3, [sp, #4]
 8007102:	2308      	movs	r3, #8
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	2308      	movs	r3, #8
 8007108:	2210      	movs	r2, #16
 800710a:	f7ff fd47 	bl	8006b9c <_PrintUnsigned>
        break;
 800710e:	e006      	b.n	800711e <SEGGER_RTT_vprintf+0x2da>
        _StoreChar(&BufferDesc, '%');
 8007110:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007114:	2125      	movs	r1, #37	; 0x25
 8007116:	4618      	mov	r0, r3
 8007118:	f7ff fd02 	bl	8006b20 <_StoreChar>
        break;
 800711c:	bf00      	nop
      }
      sFormat++;
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	3301      	adds	r3, #1
 8007122:	60bb      	str	r3, [r7, #8]
 8007124:	e007      	b.n	8007136 <SEGGER_RTT_vprintf+0x2f2>
    } else {
      _StoreChar(&BufferDesc, c);
 8007126:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800712a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800712e:	4611      	mov	r1, r2
 8007130:	4618      	mov	r0, r3
 8007132:	f7ff fcf5 	bl	8006b20 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8007136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007138:	2b00      	cmp	r3, #0
 800713a:	f6bf ae94 	bge.w	8006e66 <SEGGER_RTT_vprintf+0x22>
 800713e:	e000      	b.n	8007142 <SEGGER_RTT_vprintf+0x2fe>
      break;
 8007140:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8007142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007144:	2b00      	cmp	r3, #0
 8007146:	dd0d      	ble.n	8007164 <SEGGER_RTT_vprintf+0x320>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8007148:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800714a:	2b00      	cmp	r3, #0
 800714c:	d006      	beq.n	800715c <SEGGER_RTT_vprintf+0x318>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 800714e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007150:	f107 0310 	add.w	r3, r7, #16
 8007154:	4619      	mov	r1, r3
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f7ff fcbe 	bl	8006ad8 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 800715c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800715e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007160:	4413      	add	r3, r2
 8007162:	65fb      	str	r3, [r7, #92]	; 0x5c
  }
  return BufferDesc.ReturnValue;
 8007164:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8007166:	4618      	mov	r0, r3
 8007168:	3780      	adds	r7, #128	; 0x80
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop

08007170 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8007170:	b40e      	push	{r1, r2, r3}
 8007172:	b580      	push	{r7, lr}
 8007174:	b085      	sub	sp, #20
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 800717a:	f107 0320 	add.w	r3, r7, #32
 800717e:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8007180:	f107 0308 	add.w	r3, r7, #8
 8007184:	461a      	mov	r2, r3
 8007186:	69f9      	ldr	r1, [r7, #28]
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7ff fe5b 	bl	8006e44 <SEGGER_RTT_vprintf>
 800718e:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 8007190:	68fb      	ldr	r3, [r7, #12]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800719c:	b003      	add	sp, #12
 800719e:	4770      	bx	lr

080071a0 <HAL_ADC_MspInit>:
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b08a      	sub	sp, #40	; 0x28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	f107 0314 	add.w	r3, r7, #20
 80071ac:	2200      	movs	r2, #0
 80071ae:	601a      	str	r2, [r3, #0]
 80071b0:	605a      	str	r2, [r3, #4]
 80071b2:	609a      	str	r2, [r3, #8]
 80071b4:	60da      	str	r2, [r3, #12]
 80071b6:	611a      	str	r2, [r3, #16]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a1b      	ldr	r2, [pc, #108]	; (800722c <HAL_ADC_MspInit+0x8c>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d12f      	bne.n	8007222 <HAL_ADC_MspInit+0x82>
 80071c2:	2300      	movs	r3, #0
 80071c4:	613b      	str	r3, [r7, #16]
 80071c6:	4b1a      	ldr	r3, [pc, #104]	; (8007230 <HAL_ADC_MspInit+0x90>)
 80071c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ca:	4a19      	ldr	r2, [pc, #100]	; (8007230 <HAL_ADC_MspInit+0x90>)
 80071cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80071d0:	6453      	str	r3, [r2, #68]	; 0x44
 80071d2:	4b17      	ldr	r3, [pc, #92]	; (8007230 <HAL_ADC_MspInit+0x90>)
 80071d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071da:	613b      	str	r3, [r7, #16]
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	2300      	movs	r3, #0
 80071e0:	60fb      	str	r3, [r7, #12]
 80071e2:	4b13      	ldr	r3, [pc, #76]	; (8007230 <HAL_ADC_MspInit+0x90>)
 80071e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e6:	4a12      	ldr	r2, [pc, #72]	; (8007230 <HAL_ADC_MspInit+0x90>)
 80071e8:	f043 0304 	orr.w	r3, r3, #4
 80071ec:	6313      	str	r3, [r2, #48]	; 0x30
 80071ee:	4b10      	ldr	r3, [pc, #64]	; (8007230 <HAL_ADC_MspInit+0x90>)
 80071f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f2:	f003 0304 	and.w	r3, r3, #4
 80071f6:	60fb      	str	r3, [r7, #12]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2308      	movs	r3, #8
 80071fc:	617b      	str	r3, [r7, #20]
 80071fe:	2303      	movs	r3, #3
 8007200:	61bb      	str	r3, [r7, #24]
 8007202:	2300      	movs	r3, #0
 8007204:	61fb      	str	r3, [r7, #28]
 8007206:	f107 0314 	add.w	r3, r7, #20
 800720a:	4619      	mov	r1, r3
 800720c:	4809      	ldr	r0, [pc, #36]	; (8007234 <HAL_ADC_MspInit+0x94>)
 800720e:	f7fa fbc5 	bl	800199c <HAL_GPIO_Init>
 8007212:	2200      	movs	r2, #0
 8007214:	2102      	movs	r1, #2
 8007216:	2012      	movs	r0, #18
 8007218:	f7fa fb89 	bl	800192e <HAL_NVIC_SetPriority>
 800721c:	2012      	movs	r0, #18
 800721e:	f7fa fba2 	bl	8001966 <HAL_NVIC_EnableIRQ>
 8007222:	bf00      	nop
 8007224:	3728      	adds	r7, #40	; 0x28
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	40012200 	.word	0x40012200
 8007230:	40023800 	.word	0x40023800
 8007234:	40020800 	.word	0x40020800

08007238 <main>:
 8007238:	b580      	push	{r7, lr}
 800723a:	af00      	add	r7, sp, #0
 800723c:	f7f9 fe50 	bl	8000ee0 <HAL_Init>
 8007240:	f000 f804 	bl	800724c <SystemClock_Config>
 8007244:	f000 f928 	bl	8007498 <cppwrapper>
 8007248:	e7fe      	b.n	8007248 <main+0x10>
	...

0800724c <SystemClock_Config>:
 800724c:	b580      	push	{r7, lr}
 800724e:	b094      	sub	sp, #80	; 0x50
 8007250:	af00      	add	r7, sp, #0
 8007252:	f107 031c 	add.w	r3, r7, #28
 8007256:	2234      	movs	r2, #52	; 0x34
 8007258:	2100      	movs	r1, #0
 800725a:	4618      	mov	r0, r3
 800725c:	f002 f9a3 	bl	80095a6 <memset>
 8007260:	f107 0308 	add.w	r3, r7, #8
 8007264:	2200      	movs	r2, #0
 8007266:	601a      	str	r2, [r3, #0]
 8007268:	605a      	str	r2, [r3, #4]
 800726a:	609a      	str	r2, [r3, #8]
 800726c:	60da      	str	r2, [r3, #12]
 800726e:	611a      	str	r2, [r3, #16]
 8007270:	2300      	movs	r3, #0
 8007272:	607b      	str	r3, [r7, #4]
 8007274:	4b2c      	ldr	r3, [pc, #176]	; (8007328 <SystemClock_Config+0xdc>)
 8007276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007278:	4a2b      	ldr	r2, [pc, #172]	; (8007328 <SystemClock_Config+0xdc>)
 800727a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800727e:	6413      	str	r3, [r2, #64]	; 0x40
 8007280:	4b29      	ldr	r3, [pc, #164]	; (8007328 <SystemClock_Config+0xdc>)
 8007282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007288:	607b      	str	r3, [r7, #4]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2300      	movs	r3, #0
 800728e:	603b      	str	r3, [r7, #0]
 8007290:	4b26      	ldr	r3, [pc, #152]	; (800732c <SystemClock_Config+0xe0>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a25      	ldr	r2, [pc, #148]	; (800732c <SystemClock_Config+0xe0>)
 8007296:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800729a:	6013      	str	r3, [r2, #0]
 800729c:	4b23      	ldr	r3, [pc, #140]	; (800732c <SystemClock_Config+0xe0>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80072a4:	603b      	str	r3, [r7, #0]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2301      	movs	r3, #1
 80072aa:	61fb      	str	r3, [r7, #28]
 80072ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80072b0:	623b      	str	r3, [r7, #32]
 80072b2:	2302      	movs	r3, #2
 80072b4:	637b      	str	r3, [r7, #52]	; 0x34
 80072b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80072ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80072bc:	2304      	movs	r3, #4
 80072be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072c0:	23b4      	movs	r3, #180	; 0xb4
 80072c2:	643b      	str	r3, [r7, #64]	; 0x40
 80072c4:	2302      	movs	r3, #2
 80072c6:	647b      	str	r3, [r7, #68]	; 0x44
 80072c8:	2302      	movs	r3, #2
 80072ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80072cc:	2302      	movs	r3, #2
 80072ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072d0:	f107 031c 	add.w	r3, r7, #28
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7fa ffc5 	bl	8002264 <HAL_RCC_OscConfig>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d001      	beq.n	80072e4 <SystemClock_Config+0x98>
 80072e0:	f000 f826 	bl	8007330 <Error_Handler>
 80072e4:	f7fa fcec 	bl	8001cc0 <HAL_PWREx_EnableOverDrive>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <SystemClock_Config+0xa6>
 80072ee:	f000 f81f 	bl	8007330 <Error_Handler>
 80072f2:	230f      	movs	r3, #15
 80072f4:	60bb      	str	r3, [r7, #8]
 80072f6:	2302      	movs	r3, #2
 80072f8:	60fb      	str	r3, [r7, #12]
 80072fa:	2300      	movs	r3, #0
 80072fc:	613b      	str	r3, [r7, #16]
 80072fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007302:	617b      	str	r3, [r7, #20]
 8007304:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007308:	61bb      	str	r3, [r7, #24]
 800730a:	f107 0308 	add.w	r3, r7, #8
 800730e:	2105      	movs	r1, #5
 8007310:	4618      	mov	r0, r3
 8007312:	f7fa fd25 	bl	8001d60 <HAL_RCC_ClockConfig>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d001      	beq.n	8007320 <SystemClock_Config+0xd4>
 800731c:	f000 f808 	bl	8007330 <Error_Handler>
 8007320:	bf00      	nop
 8007322:	3750      	adds	r7, #80	; 0x50
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	40023800 	.word	0x40023800
 800732c:	40007000 	.word	0x40007000

08007330 <Error_Handler>:
 8007330:	b480      	push	{r7}
 8007332:	af00      	add	r7, sp, #0
 8007334:	bf00      	nop
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
	...

08007340 <HAL_MspInit>:
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	2300      	movs	r3, #0
 8007348:	607b      	str	r3, [r7, #4]
 800734a:	4b10      	ldr	r3, [pc, #64]	; (800738c <HAL_MspInit+0x4c>)
 800734c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800734e:	4a0f      	ldr	r2, [pc, #60]	; (800738c <HAL_MspInit+0x4c>)
 8007350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007354:	6453      	str	r3, [r2, #68]	; 0x44
 8007356:	4b0d      	ldr	r3, [pc, #52]	; (800738c <HAL_MspInit+0x4c>)
 8007358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800735a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800735e:	607b      	str	r3, [r7, #4]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2300      	movs	r3, #0
 8007364:	603b      	str	r3, [r7, #0]
 8007366:	4b09      	ldr	r3, [pc, #36]	; (800738c <HAL_MspInit+0x4c>)
 8007368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736a:	4a08      	ldr	r2, [pc, #32]	; (800738c <HAL_MspInit+0x4c>)
 800736c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007370:	6413      	str	r3, [r2, #64]	; 0x40
 8007372:	4b06      	ldr	r3, [pc, #24]	; (800738c <HAL_MspInit+0x4c>)
 8007374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800737a:	603b      	str	r3, [r7, #0]
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	2004      	movs	r0, #4
 8007380:	f7fa faca 	bl	8001918 <HAL_NVIC_SetPriorityGrouping>
 8007384:	bf00      	nop
 8007386:	3708      	adds	r7, #8
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	40023800 	.word	0x40023800

08007390 <_getpid>:
 8007390:	b480      	push	{r7}
 8007392:	af00      	add	r7, sp, #0
 8007394:	2301      	movs	r3, #1
 8007396:	4618      	mov	r0, r3
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <_kill>:
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
 80073aa:	f002 f8b7 	bl	800951c <__errno>
 80073ae:	4602      	mov	r2, r0
 80073b0:	2316      	movs	r3, #22
 80073b2:	6013      	str	r3, [r2, #0]
 80073b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073b8:	4618      	mov	r0, r3
 80073ba:	3708      	adds	r7, #8
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <_exit>:
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7ff ffe7 	bl	80073a0 <_kill>
 80073d2:	e7fe      	b.n	80073d2 <_exit+0x12>

080073d4 <_sbrk>:
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	4b11      	ldr	r3, [pc, #68]	; (8007424 <_sbrk+0x50>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d102      	bne.n	80073ea <_sbrk+0x16>
 80073e4:	4b0f      	ldr	r3, [pc, #60]	; (8007424 <_sbrk+0x50>)
 80073e6:	4a10      	ldr	r2, [pc, #64]	; (8007428 <_sbrk+0x54>)
 80073e8:	601a      	str	r2, [r3, #0]
 80073ea:	4b0e      	ldr	r3, [pc, #56]	; (8007424 <_sbrk+0x50>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	60fb      	str	r3, [r7, #12]
 80073f0:	4b0c      	ldr	r3, [pc, #48]	; (8007424 <_sbrk+0x50>)
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4413      	add	r3, r2
 80073f8:	466a      	mov	r2, sp
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d907      	bls.n	800740e <_sbrk+0x3a>
 80073fe:	f002 f88d 	bl	800951c <__errno>
 8007402:	4602      	mov	r2, r0
 8007404:	230c      	movs	r3, #12
 8007406:	6013      	str	r3, [r2, #0]
 8007408:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800740c:	e006      	b.n	800741c <_sbrk+0x48>
 800740e:	4b05      	ldr	r3, [pc, #20]	; (8007424 <_sbrk+0x50>)
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4413      	add	r3, r2
 8007416:	4a03      	ldr	r2, [pc, #12]	; (8007424 <_sbrk+0x50>)
 8007418:	6013      	str	r3, [r2, #0]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	2000060c 	.word	0x2000060c
 8007428:	20003680 	.word	0x20003680

0800742c <SystemInit>:
 800742c:	b480      	push	{r7}
 800742e:	af00      	add	r7, sp, #0
 8007430:	4b16      	ldr	r3, [pc, #88]	; (800748c <SystemInit+0x60>)
 8007432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007436:	4a15      	ldr	r2, [pc, #84]	; (800748c <SystemInit+0x60>)
 8007438:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800743c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8007440:	4b13      	ldr	r3, [pc, #76]	; (8007490 <SystemInit+0x64>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a12      	ldr	r2, [pc, #72]	; (8007490 <SystemInit+0x64>)
 8007446:	f043 0301 	orr.w	r3, r3, #1
 800744a:	6013      	str	r3, [r2, #0]
 800744c:	4b10      	ldr	r3, [pc, #64]	; (8007490 <SystemInit+0x64>)
 800744e:	2200      	movs	r2, #0
 8007450:	609a      	str	r2, [r3, #8]
 8007452:	4b0f      	ldr	r3, [pc, #60]	; (8007490 <SystemInit+0x64>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a0e      	ldr	r2, [pc, #56]	; (8007490 <SystemInit+0x64>)
 8007458:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800745c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007460:	6013      	str	r3, [r2, #0]
 8007462:	4b0b      	ldr	r3, [pc, #44]	; (8007490 <SystemInit+0x64>)
 8007464:	4a0b      	ldr	r2, [pc, #44]	; (8007494 <SystemInit+0x68>)
 8007466:	605a      	str	r2, [r3, #4]
 8007468:	4b09      	ldr	r3, [pc, #36]	; (8007490 <SystemInit+0x64>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a08      	ldr	r2, [pc, #32]	; (8007490 <SystemInit+0x64>)
 800746e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007472:	6013      	str	r3, [r2, #0]
 8007474:	4b06      	ldr	r3, [pc, #24]	; (8007490 <SystemInit+0x64>)
 8007476:	2200      	movs	r2, #0
 8007478:	60da      	str	r2, [r3, #12]
 800747a:	4b04      	ldr	r3, [pc, #16]	; (800748c <SystemInit+0x60>)
 800747c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007480:	609a      	str	r2, [r3, #8]
 8007482:	bf00      	nop
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	e000ed00 	.word	0xe000ed00
 8007490:	40023800 	.word	0x40023800
 8007494:	24003010 	.word	0x24003010

08007498 <cppwrapper>:
//unsigned int debugCount = DEBUG_COUNT;

MotorCtrl M_Ctrl;


void cppwrapper(void){
 8007498:	b580      	push	{r7, lr}
 800749a:	af00      	add	r7, sp, #0

	M_Ctrl.InitSystem();
 800749c:	4806      	ldr	r0, [pc, #24]	; (80074b8 <cppwrapper+0x20>)
 800749e:	f7fd fe34 	bl	800510a <_ZN9MotorCtrl10InitSystemEv>
//	DbgStr.append("testnum:");
//	DbgStr.append(std::to_string(Dbgint));
//	DbgStr.append("\r\n");
//	M_Ctrl.DbgUart(DbgStr);

	M_Ctrl.InitMotorInfo();
 80074a2:	4805      	ldr	r0, [pc, #20]	; (80074b8 <cppwrapper+0x20>)
 80074a4:	f7fd ff6a 	bl	800537c <_ZN9MotorCtrl13InitMotorInfoEv>
	M_Ctrl.InitObserver();
 80074a8:	4803      	ldr	r0, [pc, #12]	; (80074b8 <cppwrapper+0x20>)
 80074aa:	f7fe f8d5 	bl	8005658 <_ZN9MotorCtrl12InitObserverEv>
	M_Ctrl.InitPWM();
 80074ae:	4802      	ldr	r0, [pc, #8]	; (80074b8 <cppwrapper+0x20>)
 80074b0:	f7fd fe3c 	bl	800512c <_ZN9MotorCtrl7InitPWMEv>

	while(1){}
 80074b4:	e7fe      	b.n	80074b4 <cppwrapper+0x1c>
 80074b6:	bf00      	nop
 80074b8:	20000610 	.word	0x20000610

080074bc <HighFreqTask>:

}

void HighFreqTask(){
 80074bc:	b580      	push	{r7, lr}
 80074be:	af00      	add	r7, sp, #0
	M_Ctrl.HighFreqTask();
 80074c0:	4802      	ldr	r0, [pc, #8]	; (80074cc <HighFreqTask+0x10>)
 80074c2:	f7fe f907 	bl	80056d4 <_ZN9MotorCtrl12HighFreqTaskEv>
}
 80074c6:	bf00      	nop
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	20000610 	.word	0x20000610

080074d0 <BtnAct>:


void BtnAct(void) { //割り込みラッパ
 80074d0:	b580      	push	{r7, lr}
 80074d2:	af00      	add	r7, sp, #0
	M_Ctrl.BtnAct();
 80074d4:	4802      	ldr	r0, [pc, #8]	; (80074e0 <BtnAct+0x10>)
 80074d6:	f7fe fcda 	bl	8005e8e <_ZN9MotorCtrl6BtnActEv>
}
 80074da:	bf00      	nop
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	20000610 	.word	0x20000610

080074e4 <_Z41__static_initialization_and_destruction_0ii>:
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d107      	bne.n	8007504 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d102      	bne.n	8007504 <_Z41__static_initialization_and_destruction_0ii+0x20>
MotorCtrl M_Ctrl;
 80074fe:	4809      	ldr	r0, [pc, #36]	; (8007524 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8007500:	f7fd fd6a 	bl	8004fd8 <_ZN9MotorCtrlC1Ev>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d107      	bne.n	800751a <_Z41__static_initialization_and_destruction_0ii+0x36>
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007510:	4293      	cmp	r3, r2
 8007512:	d102      	bne.n	800751a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8007514:	4803      	ldr	r0, [pc, #12]	; (8007524 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8007516:	f7fd fdaf 	bl	8005078 <_ZN9MotorCtrlD1Ev>
}
 800751a:	bf00      	nop
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	20000610 	.word	0x20000610

08007528 <_GLOBAL__sub_I_M_Ctrl>:
 8007528:	b580      	push	{r7, lr}
 800752a:	af00      	add	r7, sp, #0
 800752c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007530:	2001      	movs	r0, #1
 8007532:	f7ff ffd7 	bl	80074e4 <_Z41__static_initialization_and_destruction_0ii>
 8007536:	bd80      	pop	{r7, pc}

08007538 <_GLOBAL__sub_D_M_Ctrl>:
 8007538:	b580      	push	{r7, lr}
 800753a:	af00      	add	r7, sp, #0
 800753c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007540:	2000      	movs	r0, #0
 8007542:	f7ff ffcf 	bl	80074e4 <_Z41__static_initialization_and_destruction_0ii>
 8007546:	bd80      	pop	{r7, pc}

08007548 <Reset_Handler>:
 8007548:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007580 <LoopFillZerobss+0x14>
 800754c:	2100      	movs	r1, #0
 800754e:	e003      	b.n	8007558 <LoopCopyDataInit>

08007550 <CopyDataInit>:
 8007550:	4b0c      	ldr	r3, [pc, #48]	; (8007584 <LoopFillZerobss+0x18>)
 8007552:	585b      	ldr	r3, [r3, r1]
 8007554:	5043      	str	r3, [r0, r1]
 8007556:	3104      	adds	r1, #4

08007558 <LoopCopyDataInit>:
 8007558:	480b      	ldr	r0, [pc, #44]	; (8007588 <LoopFillZerobss+0x1c>)
 800755a:	4b0c      	ldr	r3, [pc, #48]	; (800758c <LoopFillZerobss+0x20>)
 800755c:	1842      	adds	r2, r0, r1
 800755e:	429a      	cmp	r2, r3
 8007560:	d3f6      	bcc.n	8007550 <CopyDataInit>
 8007562:	4a0b      	ldr	r2, [pc, #44]	; (8007590 <LoopFillZerobss+0x24>)
 8007564:	e002      	b.n	800756c <LoopFillZerobss>

08007566 <FillZerobss>:
 8007566:	2300      	movs	r3, #0
 8007568:	f842 3b04 	str.w	r3, [r2], #4

0800756c <LoopFillZerobss>:
 800756c:	4b09      	ldr	r3, [pc, #36]	; (8007594 <LoopFillZerobss+0x28>)
 800756e:	429a      	cmp	r2, r3
 8007570:	d3f9      	bcc.n	8007566 <FillZerobss>
 8007572:	f7ff ff5b 	bl	800742c <SystemInit>
 8007576:	f001 ffd7 	bl	8009528 <__libc_init_array>
 800757a:	f7ff fe5d 	bl	8007238 <main>
 800757e:	4770      	bx	lr
 8007580:	2001ffff 	.word	0x2001ffff
 8007584:	0800bdb0 	.word	0x0800bdb0
 8007588:	20000000 	.word	0x20000000
 800758c:	200001e0 	.word	0x200001e0
 8007590:	200001e0 	.word	0x200001e0
 8007594:	20003680 	.word	0x20003680

08007598 <CAN1_RX0_IRQHandler>:
 8007598:	e7fe      	b.n	8007598 <CAN1_RX0_IRQHandler>
	...

0800759c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800759c:	b480      	push	{r7}
 800759e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80075a0:	4b04      	ldr	r3, [pc, #16]	; (80075b4 <__NVIC_GetPriorityGrouping+0x18>)
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	0a1b      	lsrs	r3, r3, #8
 80075a6:	f003 0307 	and.w	r3, r3, #7
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr
 80075b4:	e000ed00 	.word	0xe000ed00

080075b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	4603      	mov	r3, r0
 80075c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	db0d      	blt.n	80075e6 <__NVIC_EnableIRQ+0x2e>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80075ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	f003 021f 	and.w	r2, r3, #31
 80075d4:	4907      	ldr	r1, [pc, #28]	; (80075f4 <__NVIC_EnableIRQ+0x3c>)
 80075d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075da:	095b      	lsrs	r3, r3, #5
 80075dc:	2001      	movs	r0, #1
 80075de:	fa00 f202 	lsl.w	r2, r0, r2
 80075e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80075e6:	bf00      	nop
 80075e8:	370c      	adds	r7, #12
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	e000e100 	.word	0xe000e100

080075f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	4603      	mov	r3, r0
 8007600:	6039      	str	r1, [r7, #0]
 8007602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007608:	2b00      	cmp	r3, #0
 800760a:	db0c      	blt.n	8007626 <__NVIC_SetPriority+0x2e>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	b2db      	uxtb	r3, r3
 8007610:	4a0e      	ldr	r2, [pc, #56]	; (800764c <__NVIC_SetPriority+0x54>)
 8007612:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8007616:	4608      	mov	r0, r1
 8007618:	011b      	lsls	r3, r3, #4
 800761a:	b2d9      	uxtb	r1, r3
 800761c:	1813      	adds	r3, r2, r0
 800761e:	460a      	mov	r2, r1
 8007620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007624:	e00c      	b.n	8007640 <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	b2da      	uxtb	r2, r3
 800762a:	4909      	ldr	r1, [pc, #36]	; (8007650 <__NVIC_SetPriority+0x58>)
 800762c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007630:	b2db      	uxtb	r3, r3
 8007632:	f003 030f 	and.w	r3, r3, #15
 8007636:	3b04      	subs	r3, #4
 8007638:	0112      	lsls	r2, r2, #4
 800763a:	b2d2      	uxtb	r2, r2
 800763c:	440b      	add	r3, r1
 800763e:	761a      	strb	r2, [r3, #24]
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr
 800764c:	e000e100 	.word	0xe000e100
 8007650:	e000ed00 	.word	0xe000ed00

08007654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007654:	b480      	push	{r7}
 8007656:	b089      	sub	sp, #36	; 0x24
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f003 0307 	and.w	r3, r3, #7
 8007666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	f1c3 0307 	rsb	r3, r3, #7
 800766e:	2b04      	cmp	r3, #4
 8007670:	bf28      	it	cs
 8007672:	2304      	movcs	r3, #4
 8007674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	3304      	adds	r3, #4
 800767a:	2b06      	cmp	r3, #6
 800767c:	d902      	bls.n	8007684 <NVIC_EncodePriority+0x30>
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	3b03      	subs	r3, #3
 8007682:	e000      	b.n	8007686 <NVIC_EncodePriority+0x32>
 8007684:	2300      	movs	r3, #0
 8007686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	2201      	movs	r2, #1
 800768c:	fa02 f303 	lsl.w	r3, r2, r3
 8007690:	1e5a      	subs	r2, r3, #1
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	401a      	ands	r2, r3
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	2101      	movs	r1, #1
 800769e:	fa01 f303 	lsl.w	r3, r1, r3
 80076a2:	1e59      	subs	r1, r3, #1
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	400b      	ands	r3, r1
         );
 80076a8:	4313      	orrs	r3, r2
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3724      	adds	r7, #36	; 0x24
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <LL_ADC_REG_SetSequencerRanks>:
{
 80076b6:	b490      	push	{r4, r7}
 80076b8:	b086      	sub	sp, #24
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	60f8      	str	r0, [r7, #12]
 80076be:	60b9      	str	r1, [r7, #8]
 80076c0:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	332c      	adds	r3, #44	; 0x2c
 80076c6:	4619      	mov	r1, r3
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076ce:	f44f 7240 	mov.w	r2, #768	; 0x300
 80076d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076d4:	697a      	ldr	r2, [r7, #20]
 80076d6:	fa92 f2a2 	rbit	r2, r2
 80076da:	613a      	str	r2, [r7, #16]
  return result;
 80076dc:	693a      	ldr	r2, [r7, #16]
 80076de:	fab2 f282 	clz	r2, r2
 80076e2:	b2d2      	uxtb	r2, r2
 80076e4:	40d3      	lsrs	r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	440b      	add	r3, r1
 80076ea:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80076ec:	6822      	ldr	r2, [r4, #0]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	f003 031f 	and.w	r3, r3, #31
 80076f4:	211f      	movs	r1, #31
 80076f6:	fa01 f303 	lsl.w	r3, r1, r3
 80076fa:	43db      	mvns	r3, r3
 80076fc:	401a      	ands	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f003 011f 	and.w	r1, r3, #31
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	f003 031f 	and.w	r3, r3, #31
 800770a:	fa01 f303 	lsl.w	r3, r1, r3
 800770e:	4313      	orrs	r3, r2
 8007710:	6023      	str	r3, [r4, #0]
}
 8007712:	bf00      	nop
 8007714:	3718      	adds	r7, #24
 8007716:	46bd      	mov	sp, r7
 8007718:	bc90      	pop	{r4, r7}
 800771a:	4770      	bx	lr

0800771c <LL_ADC_REG_SetFlagEndOfConversion>:
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	431a      	orrs	r2, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	609a      	str	r2, [r3, #8]
}
 8007736:	bf00      	nop
 8007738:	370c      	adds	r7, #12
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <LL_ADC_INJ_SetSequencerRanks>:
{
 8007742:	b480      	push	{r7}
 8007744:	b087      	sub	sp, #28
 8007746:	af00      	add	r7, sp, #0
 8007748:	60f8      	str	r0, [r7, #12]
 800774a:	60b9      	str	r1, [r7, #8]
 800774c:	607a      	str	r2, [r7, #4]
  register uint32_t tmpreg1 = (READ_BIT(ADCx->JSQR, ADC_JSQR_JL) >> ADC_JSQR_JL_Pos) + 1U;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007752:	0d1b      	lsrs	r3, r3, #20
 8007754:	f003 0303 	and.w	r3, r3, #3
 8007758:	3301      	adds	r3, #1
 800775a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(ADCx->JSQR,
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	b2d9      	uxtb	r1, r3
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	b2db      	uxtb	r3, r3
 8007768:	1acb      	subs	r3, r1, r3
 800776a:	b2db      	uxtb	r3, r3
 800776c:	3303      	adds	r3, #3
 800776e:	b2db      	uxtb	r3, r3
 8007770:	4619      	mov	r1, r3
 8007772:	460b      	mov	r3, r1
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	440b      	add	r3, r1
 8007778:	211f      	movs	r1, #31
 800777a:	fa01 f303 	lsl.w	r3, r1, r3
 800777e:	43db      	mvns	r3, r3
 8007780:	401a      	ands	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f003 011f 	and.w	r1, r3, #31
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	b2d8      	uxtb	r0, r3
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	b2db      	uxtb	r3, r3
 8007790:	1ac3      	subs	r3, r0, r3
 8007792:	b2db      	uxtb	r3, r3
 8007794:	3303      	adds	r3, #3
 8007796:	b2db      	uxtb	r3, r3
 8007798:	4618      	mov	r0, r3
 800779a:	4603      	mov	r3, r0
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4403      	add	r3, r0
 80077a0:	fa01 f303 	lsl.w	r3, r1, r3
 80077a4:	431a      	orrs	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80077aa:	bf00      	nop
 80077ac:	371c      	adds	r7, #28
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <LL_ADC_INJ_SetOffset>:
{
 80077b6:	b490      	push	{r4, r7}
 80077b8:	b086      	sub	sp, #24
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	60f8      	str	r0, [r7, #12]
 80077be:	60b9      	str	r1, [r7, #8]
 80077c0:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JOFR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JOFRX_REGOFFSET_MASK));
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	3314      	adds	r3, #20
 80077c6:	4619      	mov	r1, r3
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80077ce:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80077d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077d4:	697a      	ldr	r2, [r7, #20]
 80077d6:	fa92 f2a2 	rbit	r2, r2
 80077da:	613a      	str	r2, [r7, #16]
  return result;
 80077dc:	693a      	ldr	r2, [r7, #16]
 80077de:	fab2 f282 	clz	r2, r2
 80077e2:	b2d2      	uxtb	r2, r2
 80077e4:	40d3      	lsrs	r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	440b      	add	r3, r1
 80077ea:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80077ec:	6823      	ldr	r3, [r4, #0]
 80077ee:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80077f2:	f023 030f 	bic.w	r3, r3, #15
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	6023      	str	r3, [r4, #0]
}
 80077fc:	bf00      	nop
 80077fe:	3718      	adds	r7, #24
 8007800:	46bd      	mov	sp, r7
 8007802:	bc90      	pop	{r4, r7}
 8007804:	4770      	bx	lr

08007806 <LL_ADC_SetChannelSamplingTime>:
{
 8007806:	b490      	push	{r4, r7}
 8007808:	b08a      	sub	sp, #40	; 0x28
 800780a:	af00      	add	r7, sp, #0
 800780c:	60f8      	str	r0, [r7, #12]
 800780e:	60b9      	str	r1, [r7, #8]
 8007810:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	330c      	adds	r3, #12
 8007816:	4619      	mov	r1, r3
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800781e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007822:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007824:	697a      	ldr	r2, [r7, #20]
 8007826:	fa92 f2a2 	rbit	r2, r2
 800782a:	613a      	str	r2, [r7, #16]
  return result;
 800782c:	693a      	ldr	r2, [r7, #16]
 800782e:	fab2 f282 	clz	r2, r2
 8007832:	b2d2      	uxtb	r2, r2
 8007834:	40d3      	lsrs	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	440b      	add	r3, r1
 800783a:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 800783c:	6822      	ldr	r2, [r4, #0]
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8007844:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8007848:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800784a:	69f9      	ldr	r1, [r7, #28]
 800784c:	fa91 f1a1 	rbit	r1, r1
 8007850:	61b9      	str	r1, [r7, #24]
  return result;
 8007852:	69b9      	ldr	r1, [r7, #24]
 8007854:	fab1 f181 	clz	r1, r1
 8007858:	b2c9      	uxtb	r1, r1
 800785a:	40cb      	lsrs	r3, r1
 800785c:	2107      	movs	r1, #7
 800785e:	fa01 f303 	lsl.w	r3, r1, r3
 8007862:	43db      	mvns	r3, r3
 8007864:	401a      	ands	r2, r3
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800786c:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8007870:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007872:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007874:	fa91 f1a1 	rbit	r1, r1
 8007878:	6239      	str	r1, [r7, #32]
  return result;
 800787a:	6a39      	ldr	r1, [r7, #32]
 800787c:	fab1 f181 	clz	r1, r1
 8007880:	b2c9      	uxtb	r1, r1
 8007882:	40cb      	lsrs	r3, r1
 8007884:	6879      	ldr	r1, [r7, #4]
 8007886:	fa01 f303 	lsl.w	r3, r1, r3
 800788a:	4313      	orrs	r3, r2
 800788c:	6023      	str	r3, [r4, #0]
}
 800788e:	bf00      	nop
 8007890:	3728      	adds	r7, #40	; 0x28
 8007892:	46bd      	mov	sp, r7
 8007894:	bc90      	pop	{r4, r7}
 8007896:	4770      	bx	lr

08007898 <LL_ADC_INJ_StartConversionExtTrig>:
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	689a      	ldr	r2, [r3, #8]
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	431a      	orrs	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	609a      	str	r2, [r3, #8]
}
 80078ae:	bf00      	nop
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <LL_ADC_DisableIT_EOCS>:
  * @rmtoll CR1      EOCIE          LL_ADC_DisableIT_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b083      	sub	sp, #12
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	f023 0220 	bic.w	r2, r3, #32
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	605a      	str	r2, [r3, #4]
}
 80078ce:	bf00      	nop
 80078d0:	370c      	adds	r7, #12
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <LL_ADC_DisableIT_JEOS>:
  * @rmtoll CR1      JEOCIE         LL_ADC_EnableIT_JEOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOS(ADC_TypeDef *ADCx)
{
 80078da:	b480      	push	{r7}
 80078dc:	b083      	sub	sp, #12
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	605a      	str	r2, [r3, #4]
}
 80078ee:	bf00      	nop
 80078f0:	370c      	adds	r7, #12
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
	...

080078fc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8007904:	4b08      	ldr	r3, [pc, #32]	; (8007928 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4907      	ldr	r1, [pc, #28]	; (8007928 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800790c:	4313      	orrs	r3, r2
 800790e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8007910:	4b05      	ldr	r3, [pc, #20]	; (8007928 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4013      	ands	r3, r2
 8007918:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800791a:	68fb      	ldr	r3, [r7, #12]
}
 800791c:	bf00      	nop
 800791e:	3714      	adds	r7, #20
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr
 8007928:	40023800 	.word	0x40023800

0800792c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8007934:	4b08      	ldr	r3, [pc, #32]	; (8007958 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007936:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4907      	ldr	r1, [pc, #28]	; (8007958 <LL_APB2_GRP1_EnableClock+0x2c>)
 800793c:	4313      	orrs	r3, r2
 800793e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007940:	4b05      	ldr	r3, [pc, #20]	; (8007958 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007942:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4013      	ands	r3, r2
 8007948:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800794a:	68fb      	ldr	r3, [r7, #12]
}
 800794c:	bf00      	nop
 800794e:	3714      	adds	r7, #20
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr
 8007958:	40023800 	.word	0x40023800

0800795c <_ZN7ADCInit4InitEv>:
void MX_ADC3_Init(void);
ADC_HandleTypeDef hadc3;
//void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle);
//void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle);

void ADCInit::Init() {
 800795c:	b580      	push	{r7, lr}
 800795e:	af00      	add	r7, sp, #0
	MX_ADC1_Init();
 8007960:	f000 f806 	bl	8007970 <_Z12MX_ADC1_Initv>
	MX_ADC2_Init();
 8007964:	f000 f91e 	bl	8007ba4 <_Z12MX_ADC2_Initv>
	MX_ADC3_Init();
 8007968:	f000 fa24 	bl	8007db4 <_Z12MX_ADC3_Initv>
}
 800796c:	bf00      	nop
 800796e:	bd80      	pop	{r7, pc}

08007970 <_Z12MX_ADC1_Initv>:



/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b096      	sub	sp, #88	; 0x58
 8007974:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8007976:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800797a:	2200      	movs	r2, #0
 800797c:	601a      	str	r2, [r3, #0]
 800797e:	605a      	str	r2, [r3, #4]
 8007980:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8007982:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007986:	2200      	movs	r2, #0
 8007988:	601a      	str	r2, [r3, #0]
 800798a:	605a      	str	r2, [r3, #4]
 800798c:	609a      	str	r2, [r3, #8]
 800798e:	60da      	str	r2, [r3, #12]
 8007990:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8007992:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007996:	2200      	movs	r2, #0
 8007998:	601a      	str	r2, [r3, #0]
 800799a:	605a      	str	r2, [r3, #4]
 800799c:	609a      	str	r2, [r3, #8]
 800799e:	60da      	str	r2, [r3, #12]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 80079a0:	f107 0318 	add.w	r3, r7, #24
 80079a4:	2200      	movs	r2, #0
 80079a6:	601a      	str	r2, [r3, #0]
 80079a8:	605a      	str	r2, [r3, #4]
 80079aa:	609a      	str	r2, [r3, #8]
 80079ac:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079ae:	463b      	mov	r3, r7
 80079b0:	2200      	movs	r2, #0
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	605a      	str	r2, [r3, #4]
 80079b6:	609a      	str	r2, [r3, #8]
 80079b8:	60da      	str	r2, [r3, #12]
 80079ba:	611a      	str	r2, [r3, #16]
 80079bc:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80079be:	f44f 7080 	mov.w	r0, #256	; 0x100
 80079c2:	f7ff ffb3 	bl	800792c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80079c6:	2004      	movs	r0, #4
 80079c8:	f7ff ff98 	bl	80078fc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80079cc:	2001      	movs	r0, #1
 80079ce:	f7ff ff95 	bl	80078fc <LL_AHB1_GRP1_EnableClock>
  PC1   ------> ADC1_IN11
  PC2   ------> ADC1_IN12
  PA0-WKUP   ------> ADC1_IN0
  PA1   ------> ADC1_IN1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 80079d2:	2307      	movs	r3, #7
 80079d4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80079d6:	2303      	movs	r3, #3
 80079d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80079da:	2300      	movs	r3, #0
 80079dc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80079de:	463b      	mov	r3, r7
 80079e0:	4619      	mov	r1, r3
 80079e2:	4869      	ldr	r0, [pc, #420]	; (8007b88 <_Z12MX_ADC1_Initv+0x218>)
 80079e4:	f7fb f9e7 	bl	8002db6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 80079e8:	2303      	movs	r3, #3
 80079ea:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80079ec:	2303      	movs	r3, #3
 80079ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80079f0:	2300      	movs	r3, #0
 80079f2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079f4:	463b      	mov	r3, r7
 80079f6:	4619      	mov	r1, r3
 80079f8:	4864      	ldr	r0, [pc, #400]	; (8007b8c <_Z12MX_ADC1_Initv+0x21c>)
 80079fa:	f7fb f9dc 	bl	8002db6 <LL_GPIO_Init>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 80079fe:	f7ff fdcd 	bl	800759c <__NVIC_GetPriorityGrouping>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2200      	movs	r2, #0
 8007a06:	2102      	movs	r1, #2
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7ff fe23 	bl	8007654 <NVIC_EncodePriority>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	4619      	mov	r1, r3
 8007a12:	2012      	movs	r0, #18
 8007a14:	f7ff fdf0 	bl	80075f8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 8007a18:	2012      	movs	r0, #18
 8007a1a:	f7ff fdcd 	bl	80075b8 <__NVIC_EnableIRQ>

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	64fb      	str	r3, [r7, #76]	; 0x4c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8007a22:	2300      	movs	r3, #0
 8007a24:	653b      	str	r3, [r7, #80]	; 0x50
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8007a26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a2a:	657b      	str	r3, [r7, #84]	; 0x54
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8007a2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007a30:	4619      	mov	r1, r3
 8007a32:	4857      	ldr	r0, [pc, #348]	; (8007b90 <_Z12MX_ADC1_Initv+0x220>)
 8007a34:	f7fa fef2 	bl	800281c <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8007a3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007a40:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8007a42:	2300      	movs	r3, #0
 8007a44:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8007a46:	2300      	movs	r3, #0
 8007a48:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8007a4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a4e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8007a50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007a54:	4619      	mov	r1, r3
 8007a56:	484e      	ldr	r0, [pc, #312]	; (8007b90 <_Z12MX_ADC1_Initv+0x220>)
 8007a58:	f7fa ff0c 	bl	8002874 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8007a5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007a60:	484b      	ldr	r0, [pc, #300]	; (8007b90 <_Z12MX_ADC1_Initv+0x220>)
 8007a62:	f7ff fe5b 	bl	800771c <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC1);
 8007a66:	484a      	ldr	r0, [pc, #296]	; (8007b90 <_Z12MX_ADC1_Initv+0x220>)
 8007a68:	f7ff ff27 	bl	80078ba <LL_ADC_DisableIT_EOCS>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8007a6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007a70:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8007a72:	2300      	movs	r3, #0
 8007a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8007a76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	4845      	ldr	r0, [pc, #276]	; (8007b94 <_Z12MX_ADC1_Initv+0x224>)
 8007a7e:	f7fa fe85 	bl	800278c <LL_ADC_CommonInit>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8007a82:	4a45      	ldr	r2, [pc, #276]	; (8007b98 <_Z12MX_ADC1_Initv+0x228>)
 8007a84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a88:	4841      	ldr	r0, [pc, #260]	; (8007b90 <_Z12MX_ADC1_Initv+0x220>)
 8007a8a:	f7ff fe14 	bl	80076b6 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_28CYCLES);
 8007a8e:	2202      	movs	r2, #2
 8007a90:	4941      	ldr	r1, [pc, #260]	; (8007b98 <_Z12MX_ADC1_Initv+0x228>)
 8007a92:	483f      	ldr	r0, [pc, #252]	; (8007b90 <_Z12MX_ADC1_Initv+0x220>)
 8007a94:	f7ff feb7 	bl	8007806 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_12);
 8007a98:	4a40      	ldr	r2, [pc, #256]	; (8007b9c <_Z12MX_ADC1_Initv+0x22c>)
 8007a9a:	f240 2105 	movw	r1, #517	; 0x205
 8007a9e:	483c      	ldr	r0, [pc, #240]	; (8007b90 <_Z12MX_ADC1_Initv+0x220>)
 8007aa0:	f7ff fe09 	bl	80076b6 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_28CYCLES);
 8007aa4:	2202      	movs	r2, #2
 8007aa6:	493d      	ldr	r1, [pc, #244]	; (8007b9c <_Z12MX_ADC1_Initv+0x22c>)
 8007aa8:	4839      	ldr	r0, [pc, #228]	; (8007b90 <_Z12MX_ADC1_Initv+0x220>)
 8007aaa:	f7ff feac 	bl	8007806 <LL_ADC_SetChannelSamplingTime>
  /** Configure Injected Channel
  */
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8007aae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007ab2:	61bb      	str	r3, [r7, #24]
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 8007ab4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007ab8:	61fb      	str	r3, [r7, #28]
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_1RANK;
 8007aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007abe:	623b      	str	r3, [r7, #32]
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8007ac4:	f107 0318 	add.w	r3, r7, #24
 8007ac8:	4619      	mov	r1, r3
 8007aca:	4831      	ldr	r0, [pc, #196]	; (8007b90 <_Z12MX_ADC1_Initv+0x220>)
 8007acc:	f7fa ff1a 	bl	8002904 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 8007ad0:	482f      	ldr	r0, [pc, #188]	; (8007b90 <_Z12MX_ADC1_Initv+0x220>)
 8007ad2:	f7ff ff02 	bl	80078da <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_0);
 8007ad6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007ada:	2101      	movs	r1, #1
 8007adc:	482c      	ldr	r0, [pc, #176]	; (8007b90 <_Z12MX_ADC1_Initv+0x220>)
 8007ade:	f7ff fe30 	bl	8007742 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007ae8:	4829      	ldr	r0, [pc, #164]	; (8007b90 <_Z12MX_ADC1_Initv+0x220>)
 8007aea:	f7ff fe8c 	bl	8007806 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_1, 0);
 8007aee:	2200      	movs	r2, #0
 8007af0:	2101      	movs	r1, #1
 8007af2:	4827      	ldr	r0, [pc, #156]	; (8007b90 <_Z12MX_ADC1_Initv+0x220>)
 8007af4:	f7ff fe5f 	bl	80077b6 <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8007af8:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8007afc:	4824      	ldr	r0, [pc, #144]	; (8007b90 <_Z12MX_ADC1_Initv+0x220>)
 8007afe:	f7ff fecb 	bl	8007898 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8007b02:	f107 0318 	add.w	r3, r7, #24
 8007b06:	4619      	mov	r1, r3
 8007b08:	4821      	ldr	r0, [pc, #132]	; (8007b90 <_Z12MX_ADC1_Initv+0x220>)
 8007b0a:	f7fa fefb 	bl	8002904 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 8007b0e:	4820      	ldr	r0, [pc, #128]	; (8007b90 <_Z12MX_ADC1_Initv+0x220>)
 8007b10:	f7ff fee3 	bl	80078da <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_11);
 8007b14:	4a22      	ldr	r2, [pc, #136]	; (8007ba0 <_Z12MX_ADC1_Initv+0x230>)
 8007b16:	f241 1102 	movw	r1, #4354	; 0x1102
 8007b1a:	481d      	ldr	r0, [pc, #116]	; (8007b90 <_Z12MX_ADC1_Initv+0x220>)
 8007b1c:	f7ff fe11 	bl	8007742 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 8007b20:	2200      	movs	r2, #0
 8007b22:	491f      	ldr	r1, [pc, #124]	; (8007ba0 <_Z12MX_ADC1_Initv+0x230>)
 8007b24:	481a      	ldr	r0, [pc, #104]	; (8007b90 <_Z12MX_ADC1_Initv+0x220>)
 8007b26:	f7ff fe6e 	bl	8007806 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_2, 0);
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f241 1102 	movw	r1, #4354	; 0x1102
 8007b30:	4817      	ldr	r0, [pc, #92]	; (8007b90 <_Z12MX_ADC1_Initv+0x220>)
 8007b32:	f7ff fe40 	bl	80077b6 <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8007b36:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8007b3a:	4815      	ldr	r0, [pc, #84]	; (8007b90 <_Z12MX_ADC1_Initv+0x220>)
 8007b3c:	f7ff feac 	bl	8007898 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel
  */
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8007b40:	f107 0318 	add.w	r3, r7, #24
 8007b44:	4619      	mov	r1, r3
 8007b46:	4812      	ldr	r0, [pc, #72]	; (8007b90 <_Z12MX_ADC1_Initv+0x220>)
 8007b48:	f7fa fedc 	bl	8002904 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC1);
 8007b4c:	4810      	ldr	r0, [pc, #64]	; (8007b90 <_Z12MX_ADC1_Initv+0x220>)
 8007b4e:	f7ff fec4 	bl	80078da <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC1, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_10);
 8007b52:	220a      	movs	r2, #10
 8007b54:	f242 2103 	movw	r1, #8707	; 0x2203
 8007b58:	480d      	ldr	r0, [pc, #52]	; (8007b90 <_Z12MX_ADC1_Initv+0x220>)
 8007b5a:	f7ff fdf2 	bl	8007742 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_3CYCLES);
 8007b5e:	2200      	movs	r2, #0
 8007b60:	210a      	movs	r1, #10
 8007b62:	480b      	ldr	r0, [pc, #44]	; (8007b90 <_Z12MX_ADC1_Initv+0x220>)
 8007b64:	f7ff fe4f 	bl	8007806 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC1, LL_ADC_INJ_RANK_3, 0);
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f242 2103 	movw	r1, #8707	; 0x2203
 8007b6e:	4808      	ldr	r0, [pc, #32]	; (8007b90 <_Z12MX_ADC1_Initv+0x220>)
 8007b70:	f7ff fe21 	bl	80077b6 <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8007b74:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8007b78:	4805      	ldr	r0, [pc, #20]	; (8007b90 <_Z12MX_ADC1_Initv+0x220>)
 8007b7a:	f7ff fe8d 	bl	8007898 <LL_ADC_INJ_StartConversionExtTrig>

}
 8007b7e:	bf00      	nop
 8007b80:	3758      	adds	r7, #88	; 0x58
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	40020800 	.word	0x40020800
 8007b8c:	40020000 	.word	0x40020000
 8007b90:	40012000 	.word	0x40012000
 8007b94:	40012300 	.word	0x40012300
 8007b98:	02300001 	.word	0x02300001
 8007b9c:	0060000c 	.word	0x0060000c
 8007ba0:	0030000b 	.word	0x0030000b

08007ba4 <_Z12MX_ADC2_Initv>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b092      	sub	sp, #72	; 0x48
 8007ba8:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8007baa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007bae:	2200      	movs	r2, #0
 8007bb0:	601a      	str	r2, [r3, #0]
 8007bb2:	605a      	str	r2, [r3, #4]
 8007bb4:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8007bb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007bba:	2200      	movs	r2, #0
 8007bbc:	601a      	str	r2, [r3, #0]
 8007bbe:	605a      	str	r2, [r3, #4]
 8007bc0:	609a      	str	r2, [r3, #8]
 8007bc2:	60da      	str	r2, [r3, #12]
 8007bc4:	611a      	str	r2, [r3, #16]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 8007bc6:	f107 0318 	add.w	r3, r7, #24
 8007bca:	2200      	movs	r2, #0
 8007bcc:	601a      	str	r2, [r3, #0]
 8007bce:	605a      	str	r2, [r3, #4]
 8007bd0:	609a      	str	r2, [r3, #8]
 8007bd2:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bd4:	463b      	mov	r3, r7
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	601a      	str	r2, [r3, #0]
 8007bda:	605a      	str	r2, [r3, #4]
 8007bdc:	609a      	str	r2, [r3, #8]
 8007bde:	60da      	str	r2, [r3, #12]
 8007be0:	611a      	str	r2, [r3, #16]
 8007be2:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC2);
 8007be4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007be8:	f7ff fea0 	bl	800792c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8007bec:	2004      	movs	r0, #4
 8007bee:	f7ff fe85 	bl	80078fc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8007bf2:	2001      	movs	r0, #1
 8007bf4:	f7ff fe82 	bl	80078fc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8007bf8:	2002      	movs	r0, #2
 8007bfa:	f7ff fe7f 	bl	80078fc <LL_AHB1_GRP1_EnableClock>
  PC0   ------> ADC2_IN10
  PC1   ------> ADC2_IN11
  PA0-WKUP   ------> ADC2_IN0
  PB1   ------> ADC2_IN9
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8007c02:	2303      	movs	r3, #3
 8007c04:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007c06:	2300      	movs	r3, #0
 8007c08:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c0a:	463b      	mov	r3, r7
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	4863      	ldr	r0, [pc, #396]	; (8007d9c <_Z12MX_ADC2_Initv+0x1f8>)
 8007c10:	f7fb f8d1 	bl	8002db6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8007c14:	2301      	movs	r3, #1
 8007c16:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c20:	463b      	mov	r3, r7
 8007c22:	4619      	mov	r1, r3
 8007c24:	485e      	ldr	r0, [pc, #376]	; (8007da0 <_Z12MX_ADC2_Initv+0x1fc>)
 8007c26:	f7fb f8c6 	bl	8002db6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007c32:	2300      	movs	r3, #0
 8007c34:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c36:	463b      	mov	r3, r7
 8007c38:	4619      	mov	r1, r3
 8007c3a:	485a      	ldr	r0, [pc, #360]	; (8007da4 <_Z12MX_ADC2_Initv+0x200>)
 8007c3c:	f7fb f8bb 	bl	8002db6 <LL_GPIO_Init>

  /* ADC2 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8007c40:	f7ff fcac 	bl	800759c <__NVIC_GetPriorityGrouping>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2200      	movs	r2, #0
 8007c48:	2102      	movs	r1, #2
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7ff fd02 	bl	8007654 <NVIC_EncodePriority>
 8007c50:	4603      	mov	r3, r0
 8007c52:	4619      	mov	r1, r3
 8007c54:	2012      	movs	r0, #18
 8007c56:	f7ff fccf 	bl	80075f8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 8007c5a:	2012      	movs	r0, #18
 8007c5c:	f7ff fcac 	bl	80075b8 <__NVIC_EnableIRQ>

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8007c60:	2300      	movs	r3, #0
 8007c62:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8007c64:	2300      	movs	r3, #0
 8007c66:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8007c68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c6c:	647b      	str	r3, [r7, #68]	; 0x44
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8007c6e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007c72:	4619      	mov	r1, r3
 8007c74:	484c      	ldr	r0, [pc, #304]	; (8007da8 <_Z12MX_ADC2_Initv+0x204>)
 8007c76:	f7fa fdd1 	bl	800281c <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8007c82:	2300      	movs	r3, #0
 8007c84:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8007c86:	2300      	movs	r3, #0
 8007c88:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8007c8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c8e:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8007c90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007c94:	4619      	mov	r1, r3
 8007c96:	4844      	ldr	r0, [pc, #272]	; (8007da8 <_Z12MX_ADC2_Initv+0x204>)
 8007c98:	f7fa fdec 	bl	8002874 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC2, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8007c9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007ca0:	4841      	ldr	r0, [pc, #260]	; (8007da8 <_Z12MX_ADC2_Initv+0x204>)
 8007ca2:	f7ff fd3b 	bl	800771c <LL_ADC_REG_SetFlagEndOfConversion>
  //LL_ADC_REG_SetFlagEndOfConversion(ADC2, LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV);
  LL_ADC_DisableIT_EOCS(ADC2);
 8007ca6:	4840      	ldr	r0, [pc, #256]	; (8007da8 <_Z12MX_ADC2_Initv+0x204>)
 8007ca8:	f7ff fe07 	bl	80078ba <LL_ADC_DisableIT_EOCS>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_9);
 8007cac:	4a3f      	ldr	r2, [pc, #252]	; (8007dac <_Z12MX_ADC2_Initv+0x208>)
 8007cae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007cb2:	483d      	ldr	r0, [pc, #244]	; (8007da8 <_Z12MX_ADC2_Initv+0x204>)
 8007cb4:	f7ff fcff 	bl	80076b6 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_3CYCLES);
 8007cb8:	2200      	movs	r2, #0
 8007cba:	493c      	ldr	r1, [pc, #240]	; (8007dac <_Z12MX_ADC2_Initv+0x208>)
 8007cbc:	483a      	ldr	r0, [pc, #232]	; (8007da8 <_Z12MX_ADC2_Initv+0x204>)
 8007cbe:	f7ff fda2 	bl	8007806 <LL_ADC_SetChannelSamplingTime>
  /** Configure Injected Channel
  */
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8007cc2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007cc6:	61bb      	str	r3, [r7, #24]
  ADC_INJ_InitStruct.SequencerLength = LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS;
 8007cc8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007ccc:	61fb      	str	r3, [r7, #28]
  ADC_INJ_InitStruct.SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_1RANK;
 8007cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cd2:	623b      	str	r3, [r7, #32]
  ADC_INJ_InitStruct.TrigAuto = LL_ADC_INJ_TRIG_INDEPENDENT;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 8007cd8:	f107 0318 	add.w	r3, r7, #24
 8007cdc:	4619      	mov	r1, r3
 8007cde:	4832      	ldr	r0, [pc, #200]	; (8007da8 <_Z12MX_ADC2_Initv+0x204>)
 8007ce0:	f7fa fe10 	bl	8002904 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 8007ce4:	4830      	ldr	r0, [pc, #192]	; (8007da8 <_Z12MX_ADC2_Initv+0x204>)
 8007ce6:	f7ff fdf8 	bl	80078da <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_1, LL_ADC_CHANNEL_0);
 8007cea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007cee:	2101      	movs	r1, #1
 8007cf0:	482d      	ldr	r0, [pc, #180]	; (8007da8 <_Z12MX_ADC2_Initv+0x204>)
 8007cf2:	f7ff fd26 	bl	8007742 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007cfc:	482a      	ldr	r0, [pc, #168]	; (8007da8 <_Z12MX_ADC2_Initv+0x204>)
 8007cfe:	f7ff fd82 	bl	8007806 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_1, 0);
 8007d02:	2200      	movs	r2, #0
 8007d04:	2101      	movs	r1, #1
 8007d06:	4828      	ldr	r0, [pc, #160]	; (8007da8 <_Z12MX_ADC2_Initv+0x204>)
 8007d08:	f7ff fd55 	bl	80077b6 <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 8007d0c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8007d10:	4825      	ldr	r0, [pc, #148]	; (8007da8 <_Z12MX_ADC2_Initv+0x204>)
 8007d12:	f7ff fdc1 	bl	8007898 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel
  */
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 8007d16:	f107 0318 	add.w	r3, r7, #24
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	4822      	ldr	r0, [pc, #136]	; (8007da8 <_Z12MX_ADC2_Initv+0x204>)
 8007d1e:	f7fa fdf1 	bl	8002904 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 8007d22:	4821      	ldr	r0, [pc, #132]	; (8007da8 <_Z12MX_ADC2_Initv+0x204>)
 8007d24:	f7ff fdd9 	bl	80078da <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_2, LL_ADC_CHANNEL_11);
 8007d28:	4a21      	ldr	r2, [pc, #132]	; (8007db0 <_Z12MX_ADC2_Initv+0x20c>)
 8007d2a:	f241 1102 	movw	r1, #4354	; 0x1102
 8007d2e:	481e      	ldr	r0, [pc, #120]	; (8007da8 <_Z12MX_ADC2_Initv+0x204>)
 8007d30:	f7ff fd07 	bl	8007742 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 8007d34:	2200      	movs	r2, #0
 8007d36:	491e      	ldr	r1, [pc, #120]	; (8007db0 <_Z12MX_ADC2_Initv+0x20c>)
 8007d38:	481b      	ldr	r0, [pc, #108]	; (8007da8 <_Z12MX_ADC2_Initv+0x204>)
 8007d3a:	f7ff fd64 	bl	8007806 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_2, 0);
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f241 1102 	movw	r1, #4354	; 0x1102
 8007d44:	4818      	ldr	r0, [pc, #96]	; (8007da8 <_Z12MX_ADC2_Initv+0x204>)
 8007d46:	f7ff fd36 	bl	80077b6 <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 8007d4a:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8007d4e:	4816      	ldr	r0, [pc, #88]	; (8007da8 <_Z12MX_ADC2_Initv+0x204>)
 8007d50:	f7ff fda2 	bl	8007898 <LL_ADC_INJ_StartConversionExtTrig>
  /** Configure Injected Channel
  */
  LL_ADC_INJ_Init(ADC2, &ADC_INJ_InitStruct);
 8007d54:	f107 0318 	add.w	r3, r7, #24
 8007d58:	4619      	mov	r1, r3
 8007d5a:	4813      	ldr	r0, [pc, #76]	; (8007da8 <_Z12MX_ADC2_Initv+0x204>)
 8007d5c:	f7fa fdd2 	bl	8002904 <LL_ADC_INJ_Init>
  LL_ADC_DisableIT_JEOS(ADC2);
 8007d60:	4811      	ldr	r0, [pc, #68]	; (8007da8 <_Z12MX_ADC2_Initv+0x204>)
 8007d62:	f7ff fdba 	bl	80078da <LL_ADC_DisableIT_JEOS>
  LL_ADC_INJ_SetSequencerRanks(ADC2, LL_ADC_INJ_RANK_3, LL_ADC_CHANNEL_10);
 8007d66:	220a      	movs	r2, #10
 8007d68:	f242 2103 	movw	r1, #8707	; 0x2203
 8007d6c:	480e      	ldr	r0, [pc, #56]	; (8007da8 <_Z12MX_ADC2_Initv+0x204>)
 8007d6e:	f7ff fce8 	bl	8007742 <LL_ADC_INJ_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_3CYCLES);
 8007d72:	2200      	movs	r2, #0
 8007d74:	210a      	movs	r1, #10
 8007d76:	480c      	ldr	r0, [pc, #48]	; (8007da8 <_Z12MX_ADC2_Initv+0x204>)
 8007d78:	f7ff fd45 	bl	8007806 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_INJ_SetOffset(ADC2, LL_ADC_INJ_RANK_3, 0);
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f242 2103 	movw	r1, #8707	; 0x2203
 8007d82:	4809      	ldr	r0, [pc, #36]	; (8007da8 <_Z12MX_ADC2_Initv+0x204>)
 8007d84:	f7ff fd17 	bl	80077b6 <LL_ADC_INJ_SetOffset>
  LL_ADC_INJ_StartConversionExtTrig(ADC2, LL_ADC_INJ_TRIG_EXT_RISING);
 8007d88:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8007d8c:	4806      	ldr	r0, [pc, #24]	; (8007da8 <_Z12MX_ADC2_Initv+0x204>)
 8007d8e:	f7ff fd83 	bl	8007898 <LL_ADC_INJ_StartConversionExtTrig>

}
 8007d92:	bf00      	nop
 8007d94:	3748      	adds	r7, #72	; 0x48
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	40020800 	.word	0x40020800
 8007da0:	40020000 	.word	0x40020000
 8007da4:	40020400 	.word	0x40020400
 8007da8:	40012100 	.word	0x40012100
 8007dac:	03b00009 	.word	0x03b00009
 8007db0:	0030000b 	.word	0x0030000b

08007db4 <_Z12MX_ADC3_Initv>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8007dba:	463b      	mov	r3, r7
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	601a      	str	r2, [r3, #0]
 8007dc0:	605a      	str	r2, [r3, #4]
 8007dc2:	609a      	str	r2, [r3, #8]
 8007dc4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8007dc6:	4b26      	ldr	r3, [pc, #152]	; (8007e60 <_Z12MX_ADC3_Initv+0xac>)
 8007dc8:	4a26      	ldr	r2, [pc, #152]	; (8007e64 <_Z12MX_ADC3_Initv+0xb0>)
 8007dca:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007dcc:	4b24      	ldr	r3, [pc, #144]	; (8007e60 <_Z12MX_ADC3_Initv+0xac>)
 8007dce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007dd2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8007dd4:	4b22      	ldr	r3, [pc, #136]	; (8007e60 <_Z12MX_ADC3_Initv+0xac>)
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8007dda:	4b21      	ldr	r3, [pc, #132]	; (8007e60 <_Z12MX_ADC3_Initv+0xac>)
 8007ddc:	2201      	movs	r2, #1
 8007dde:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8007de0:	4b1f      	ldr	r3, [pc, #124]	; (8007e60 <_Z12MX_ADC3_Initv+0xac>)
 8007de2:	2200      	movs	r2, #0
 8007de4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8007de6:	4b1e      	ldr	r3, [pc, #120]	; (8007e60 <_Z12MX_ADC3_Initv+0xac>)
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007dee:	4b1c      	ldr	r3, [pc, #112]	; (8007e60 <_Z12MX_ADC3_Initv+0xac>)
 8007df0:	2200      	movs	r2, #0
 8007df2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007df4:	4b1a      	ldr	r3, [pc, #104]	; (8007e60 <_Z12MX_ADC3_Initv+0xac>)
 8007df6:	4a1c      	ldr	r2, [pc, #112]	; (8007e68 <_Z12MX_ADC3_Initv+0xb4>)
 8007df8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007dfa:	4b19      	ldr	r3, [pc, #100]	; (8007e60 <_Z12MX_ADC3_Initv+0xac>)
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8007e00:	4b17      	ldr	r3, [pc, #92]	; (8007e60 <_Z12MX_ADC3_Initv+0xac>)
 8007e02:	2201      	movs	r2, #1
 8007e04:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8007e06:	4b16      	ldr	r3, [pc, #88]	; (8007e60 <_Z12MX_ADC3_Initv+0xac>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007e0e:	4b14      	ldr	r3, [pc, #80]	; (8007e60 <_Z12MX_ADC3_Initv+0xac>)
 8007e10:	2201      	movs	r2, #1
 8007e12:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8007e14:	4812      	ldr	r0, [pc, #72]	; (8007e60 <_Z12MX_ADC3_Initv+0xac>)
 8007e16:	f7f9 f8d5 	bl	8000fc4 <HAL_ADC_Init>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	bf14      	ite	ne
 8007e20:	2301      	movne	r3, #1
 8007e22:	2300      	moveq	r3, #0
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d001      	beq.n	8007e2e <_Z12MX_ADC3_Initv+0x7a>
  {
	  ErrorHandler::ADC_Error_Handler();
 8007e2a:	f000 f81f 	bl	8007e6c <_ZN12ErrorHandler17ADC_Error_HandlerEv>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8007e2e:	230d      	movs	r3, #13
 8007e30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8007e32:	2301      	movs	r3, #1
 8007e34:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8007e36:	2300      	movs	r3, #0
 8007e38:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8007e3a:	463b      	mov	r3, r7
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	4808      	ldr	r0, [pc, #32]	; (8007e60 <_Z12MX_ADC3_Initv+0xac>)
 8007e40:	f7f9 fa62 	bl	8001308 <HAL_ADC_ConfigChannel>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	bf14      	ite	ne
 8007e4a:	2301      	movne	r3, #1
 8007e4c:	2300      	moveq	r3, #0
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d001      	beq.n	8007e58 <_Z12MX_ADC3_Initv+0xa4>
  {
	  ErrorHandler::ADC_Error_Handler();
 8007e54:	f000 f80a 	bl	8007e6c <_ZN12ErrorHandler17ADC_Error_HandlerEv>
  }

}
 8007e58:	bf00      	nop
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	20003580 	.word	0x20003580
 8007e64:	40012200 	.word	0x40012200
 8007e68:	0f000001 	.word	0x0f000001

08007e6c <_ZN12ErrorHandler17ADC_Error_HandlerEv>:
 8007e6c:	b480      	push	{r7}
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	e7fe      	b.n	8007e70 <_ZN12ErrorHandler17ADC_Error_HandlerEv+0x4>
	...

08007e74 <__NVIC_GetPriorityGrouping>:
 8007e74:	b480      	push	{r7}
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	4b04      	ldr	r3, [pc, #16]	; (8007e8c <__NVIC_GetPriorityGrouping+0x18>)
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	0a1b      	lsrs	r3, r3, #8
 8007e7e:	f003 0307 	and.w	r3, r3, #7
 8007e82:	4618      	mov	r0, r3
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr
 8007e8c:	e000ed00 	.word	0xe000ed00

08007e90 <__NVIC_EnableIRQ>:
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	4603      	mov	r3, r0
 8007e98:	71fb      	strb	r3, [r7, #7]
 8007e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	db0d      	blt.n	8007ebe <__NVIC_EnableIRQ+0x2e>
 8007ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	f003 021f 	and.w	r2, r3, #31
 8007eac:	4907      	ldr	r1, [pc, #28]	; (8007ecc <__NVIC_EnableIRQ+0x3c>)
 8007eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eb2:	095b      	lsrs	r3, r3, #5
 8007eb4:	2001      	movs	r0, #1
 8007eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8007eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007ebe:	bf00      	nop
 8007ec0:	370c      	adds	r7, #12
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop
 8007ecc:	e000e100 	.word	0xe000e100

08007ed0 <__NVIC_SetPriority>:
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	6039      	str	r1, [r7, #0]
 8007eda:	71fb      	strb	r3, [r7, #7]
 8007edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	db0c      	blt.n	8007efe <__NVIC_SetPriority+0x2e>
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	4a0e      	ldr	r2, [pc, #56]	; (8007f24 <__NVIC_SetPriority+0x54>)
 8007eea:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8007eee:	4608      	mov	r0, r1
 8007ef0:	011b      	lsls	r3, r3, #4
 8007ef2:	b2d9      	uxtb	r1, r3
 8007ef4:	1813      	adds	r3, r2, r0
 8007ef6:	460a      	mov	r2, r1
 8007ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8007efc:	e00c      	b.n	8007f18 <__NVIC_SetPriority+0x48>
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	b2da      	uxtb	r2, r3
 8007f02:	4909      	ldr	r1, [pc, #36]	; (8007f28 <__NVIC_SetPriority+0x58>)
 8007f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	f003 030f 	and.w	r3, r3, #15
 8007f0e:	3b04      	subs	r3, #4
 8007f10:	0112      	lsls	r2, r2, #4
 8007f12:	b2d2      	uxtb	r2, r2
 8007f14:	440b      	add	r3, r1
 8007f16:	761a      	strb	r2, [r3, #24]
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr
 8007f24:	e000e100 	.word	0xe000e100
 8007f28:	e000ed00 	.word	0xe000ed00

08007f2c <NVIC_EncodePriority>:
 8007f2c:	b480      	push	{r7}
 8007f2e:	b089      	sub	sp, #36	; 0x24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	607a      	str	r2, [r7, #4]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f003 0307 	and.w	r3, r3, #7
 8007f3e:	61fb      	str	r3, [r7, #28]
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	f1c3 0307 	rsb	r3, r3, #7
 8007f46:	2b04      	cmp	r3, #4
 8007f48:	bf28      	it	cs
 8007f4a:	2304      	movcs	r3, #4
 8007f4c:	61bb      	str	r3, [r7, #24]
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	3304      	adds	r3, #4
 8007f52:	2b06      	cmp	r3, #6
 8007f54:	d902      	bls.n	8007f5c <NVIC_EncodePriority+0x30>
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	3b03      	subs	r3, #3
 8007f5a:	e000      	b.n	8007f5e <NVIC_EncodePriority+0x32>
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	617b      	str	r3, [r7, #20]
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	2201      	movs	r2, #1
 8007f64:	fa02 f303 	lsl.w	r3, r2, r3
 8007f68:	1e5a      	subs	r2, r3, #1
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	401a      	ands	r2, r3
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	409a      	lsls	r2, r3
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	2101      	movs	r1, #1
 8007f76:	fa01 f303 	lsl.w	r3, r1, r3
 8007f7a:	1e59      	subs	r1, r3, #1
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	400b      	ands	r3, r1
 8007f80:	4313      	orrs	r3, r2
 8007f82:	4618      	mov	r0, r3
 8007f84:	3724      	adds	r7, #36	; 0x24
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
	...

08007f90 <LL_SYSCFG_SetEXTISource>:
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
 8007f9a:	4a13      	ldr	r2, [pc, #76]	; (8007fe8 <LL_SYSCFG_SetEXTISource+0x58>)
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	3302      	adds	r3, #2
 8007fa2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	0c1b      	lsrs	r3, r3, #16
 8007faa:	43db      	mvns	r3, r3
 8007fac:	ea02 0103 	and.w	r1, r2, r3
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	0c1b      	lsrs	r3, r3, #16
 8007fb4:	60fb      	str	r3, [r7, #12]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	fa93 f3a3 	rbit	r3, r3
 8007fbc:	60bb      	str	r3, [r7, #8]
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	fab3 f383 	clz	r3, r3
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	fa03 f202 	lsl.w	r2, r3, r2
 8007fce:	4806      	ldr	r0, [pc, #24]	; (8007fe8 <LL_SYSCFG_SetEXTISource+0x58>)
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	430a      	orrs	r2, r1
 8007fd6:	3302      	adds	r3, #2
 8007fd8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8007fdc:	bf00      	nop
 8007fde:	3714      	adds	r7, #20
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr
 8007fe8:	40013800 	.word	0x40013800

08007fec <LL_GPIO_SetPinMode>:
 8007fec:	b480      	push	{r7}
 8007fee:	b089      	sub	sp, #36	; 0x24
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	617b      	str	r3, [r7, #20]
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	fa93 f3a3 	rbit	r3, r3
 8008006:	613b      	str	r3, [r7, #16]
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	fab3 f383 	clz	r3, r3
 800800e:	b2db      	uxtb	r3, r3
 8008010:	005b      	lsls	r3, r3, #1
 8008012:	2103      	movs	r1, #3
 8008014:	fa01 f303 	lsl.w	r3, r1, r3
 8008018:	43db      	mvns	r3, r3
 800801a:	401a      	ands	r2, r3
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	61fb      	str	r3, [r7, #28]
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	fa93 f3a3 	rbit	r3, r3
 8008026:	61bb      	str	r3, [r7, #24]
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	fab3 f383 	clz	r3, r3
 800802e:	b2db      	uxtb	r3, r3
 8008030:	005b      	lsls	r3, r3, #1
 8008032:	6879      	ldr	r1, [r7, #4]
 8008034:	fa01 f303 	lsl.w	r3, r1, r3
 8008038:	431a      	orrs	r2, r3
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	601a      	str	r2, [r3, #0]
 800803e:	bf00      	nop
 8008040:	3724      	adds	r7, #36	; 0x24
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <LL_GPIO_SetPinPull>:
 800804a:	b480      	push	{r7}
 800804c:	b089      	sub	sp, #36	; 0x24
 800804e:	af00      	add	r7, sp, #0
 8008050:	60f8      	str	r0, [r7, #12]
 8008052:	60b9      	str	r1, [r7, #8]
 8008054:	607a      	str	r2, [r7, #4]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	68da      	ldr	r2, [r3, #12]
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	617b      	str	r3, [r7, #20]
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	fa93 f3a3 	rbit	r3, r3
 8008064:	613b      	str	r3, [r7, #16]
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	fab3 f383 	clz	r3, r3
 800806c:	b2db      	uxtb	r3, r3
 800806e:	005b      	lsls	r3, r3, #1
 8008070:	2103      	movs	r1, #3
 8008072:	fa01 f303 	lsl.w	r3, r1, r3
 8008076:	43db      	mvns	r3, r3
 8008078:	401a      	ands	r2, r3
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	61fb      	str	r3, [r7, #28]
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	fa93 f3a3 	rbit	r3, r3
 8008084:	61bb      	str	r3, [r7, #24]
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	fab3 f383 	clz	r3, r3
 800808c:	b2db      	uxtb	r3, r3
 800808e:	005b      	lsls	r3, r3, #1
 8008090:	6879      	ldr	r1, [r7, #4]
 8008092:	fa01 f303 	lsl.w	r3, r1, r3
 8008096:	431a      	orrs	r2, r3
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	60da      	str	r2, [r3, #12]
 800809c:	bf00      	nop
 800809e:	3724      	adds	r7, #36	; 0x24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <LL_GPIO_ResetOutputPin>:
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	041a      	lsls	r2, r3, #16
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	619a      	str	r2, [r3, #24]
 80080ba:	bf00      	nop
 80080bc:	370c      	adds	r7, #12
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
	...

080080c8 <LL_AHB1_GRP1_EnableClock>:
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	4b08      	ldr	r3, [pc, #32]	; (80080f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80080d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4907      	ldr	r1, [pc, #28]	; (80080f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80080d8:	4313      	orrs	r3, r2
 80080da:	630b      	str	r3, [r1, #48]	; 0x30
 80080dc:	4b05      	ldr	r3, [pc, #20]	; (80080f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80080de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4013      	ands	r3, r2
 80080e4:	60fb      	str	r3, [r7, #12]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	bf00      	nop
 80080ea:	3714      	adds	r7, #20
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr
 80080f4:	40023800 	.word	0x40023800

080080f8 <_ZN8GPIOInit4InitEv>:
 80080f8:	b580      	push	{r7, lr}
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	f000 f802 	bl	8008104 <_Z12MX_GPIO_Initv>
 8008100:	bf00      	nop
 8008102:	bd80      	pop	{r7, pc}

08008104 <_Z12MX_GPIO_Initv>:
 8008104:	b580      	push	{r7, lr}
 8008106:	b088      	sub	sp, #32
 8008108:	af00      	add	r7, sp, #0
 800810a:	f107 0318 	add.w	r3, r7, #24
 800810e:	2200      	movs	r2, #0
 8008110:	601a      	str	r2, [r3, #0]
 8008112:	605a      	str	r2, [r3, #4]
 8008114:	463b      	mov	r3, r7
 8008116:	2200      	movs	r2, #0
 8008118:	601a      	str	r2, [r3, #0]
 800811a:	605a      	str	r2, [r3, #4]
 800811c:	609a      	str	r2, [r3, #8]
 800811e:	60da      	str	r2, [r3, #12]
 8008120:	611a      	str	r2, [r3, #16]
 8008122:	615a      	str	r2, [r3, #20]
 8008124:	2004      	movs	r0, #4
 8008126:	f7ff ffcf 	bl	80080c8 <LL_AHB1_GRP1_EnableClock>
 800812a:	2080      	movs	r0, #128	; 0x80
 800812c:	f7ff ffcc 	bl	80080c8 <LL_AHB1_GRP1_EnableClock>
 8008130:	2001      	movs	r0, #1
 8008132:	f7ff ffc9 	bl	80080c8 <LL_AHB1_GRP1_EnableClock>
 8008136:	2002      	movs	r0, #2
 8008138:	f7ff ffc6 	bl	80080c8 <LL_AHB1_GRP1_EnableClock>
 800813c:	2120      	movs	r1, #32
 800813e:	482c      	ldr	r0, [pc, #176]	; (80081f0 <_Z12MX_GPIO_Initv+0xec>)
 8008140:	f7ff ffb2 	bl	80080a8 <LL_GPIO_ResetOutputPin>
 8008144:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8008148:	482a      	ldr	r0, [pc, #168]	; (80081f4 <_Z12MX_GPIO_Initv+0xf0>)
 800814a:	f7ff ffad 	bl	80080a8 <LL_GPIO_ResetOutputPin>
 800814e:	492a      	ldr	r1, [pc, #168]	; (80081f8 <_Z12MX_GPIO_Initv+0xf4>)
 8008150:	2002      	movs	r0, #2
 8008152:	f7ff ff1d 	bl	8007f90 <LL_SYSCFG_SetEXTISource>
 8008156:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800815a:	61bb      	str	r3, [r7, #24]
 800815c:	2301      	movs	r3, #1
 800815e:	773b      	strb	r3, [r7, #28]
 8008160:	2300      	movs	r3, #0
 8008162:	777b      	strb	r3, [r7, #29]
 8008164:	2302      	movs	r3, #2
 8008166:	77bb      	strb	r3, [r7, #30]
 8008168:	f107 0318 	add.w	r3, r7, #24
 800816c:	4618      	mov	r0, r3
 800816e:	f7fa fca1 	bl	8002ab4 <LL_EXTI_Init>
 8008172:	2200      	movs	r2, #0
 8008174:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008178:	481e      	ldr	r0, [pc, #120]	; (80081f4 <_Z12MX_GPIO_Initv+0xf0>)
 800817a:	f7ff ff66 	bl	800804a <LL_GPIO_SetPinPull>
 800817e:	2200      	movs	r2, #0
 8008180:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008184:	481b      	ldr	r0, [pc, #108]	; (80081f4 <_Z12MX_GPIO_Initv+0xf0>)
 8008186:	f7ff ff31 	bl	8007fec <LL_GPIO_SetPinMode>
 800818a:	2320      	movs	r3, #32
 800818c:	603b      	str	r3, [r7, #0]
 800818e:	2301      	movs	r3, #1
 8008190:	607b      	str	r3, [r7, #4]
 8008192:	2300      	movs	r3, #0
 8008194:	60bb      	str	r3, [r7, #8]
 8008196:	2300      	movs	r3, #0
 8008198:	60fb      	str	r3, [r7, #12]
 800819a:	2300      	movs	r3, #0
 800819c:	613b      	str	r3, [r7, #16]
 800819e:	463b      	mov	r3, r7
 80081a0:	4619      	mov	r1, r3
 80081a2:	4813      	ldr	r0, [pc, #76]	; (80081f0 <_Z12MX_GPIO_Initv+0xec>)
 80081a4:	f7fa fe07 	bl	8002db6 <LL_GPIO_Init>
 80081a8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80081ac:	603b      	str	r3, [r7, #0]
 80081ae:	2301      	movs	r3, #1
 80081b0:	607b      	str	r3, [r7, #4]
 80081b2:	2300      	movs	r3, #0
 80081b4:	60bb      	str	r3, [r7, #8]
 80081b6:	2300      	movs	r3, #0
 80081b8:	60fb      	str	r3, [r7, #12]
 80081ba:	2300      	movs	r3, #0
 80081bc:	613b      	str	r3, [r7, #16]
 80081be:	463b      	mov	r3, r7
 80081c0:	4619      	mov	r1, r3
 80081c2:	480c      	ldr	r0, [pc, #48]	; (80081f4 <_Z12MX_GPIO_Initv+0xf0>)
 80081c4:	f7fa fdf7 	bl	8002db6 <LL_GPIO_Init>
 80081c8:	f7ff fe54 	bl	8007e74 <__NVIC_GetPriorityGrouping>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2200      	movs	r2, #0
 80081d0:	2100      	movs	r1, #0
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7ff feaa 	bl	8007f2c <NVIC_EncodePriority>
 80081d8:	4603      	mov	r3, r0
 80081da:	4619      	mov	r1, r3
 80081dc:	2028      	movs	r0, #40	; 0x28
 80081de:	f7ff fe77 	bl	8007ed0 <__NVIC_SetPriority>
 80081e2:	2028      	movs	r0, #40	; 0x28
 80081e4:	f7ff fe54 	bl	8007e90 <__NVIC_EnableIRQ>
 80081e8:	bf00      	nop
 80081ea:	3720      	adds	r7, #32
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	40020000 	.word	0x40020000
 80081f4:	40020800 	.word	0x40020800
 80081f8:	00f00003 	.word	0x00f00003

080081fc <LL_ADC_IsActiveFlag_JEOS>:
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 0304 	and.w	r3, r3, #4
 800820c:	2b04      	cmp	r3, #4
 800820e:	bf0c      	ite	eq
 8008210:	2301      	moveq	r3, #1
 8008212:	2300      	movne	r3, #0
 8008214:	b2db      	uxtb	r3, r3
}
 8008216:	4618      	mov	r0, r3
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
	...

08008224 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 800822c:	4b07      	ldr	r3, [pc, #28]	; (800824c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800822e:	695a      	ldr	r2, [r3, #20]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	401a      	ands	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	429a      	cmp	r2, r3
 8008238:	bf0c      	ite	eq
 800823a:	2301      	moveq	r3, #1
 800823c:	2300      	movne	r3, #0
 800823e:	b2db      	uxtb	r3, r3
}
 8008240:	4618      	mov	r0, r3
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr
 800824c:	40013c00 	.word	0x40013c00

08008250 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8008258:	4a04      	ldr	r2, [pc, #16]	; (800826c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6153      	str	r3, [r2, #20]
}
 800825e:	bf00      	nop
 8008260:	370c      	adds	r7, #12
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	40013c00 	.word	0x40013c00

08008270 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void) {
 8008270:	b480      	push	{r7}
 8008272:	af00      	add	r7, sp, #0
}
 8008274:	bf00      	nop
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <HardFault_Handler>:


void HardFault_Handler(void) {
 800827e:	b480      	push	{r7}
 8008280:	af00      	add	r7, sp, #0
  while (1){}
 8008282:	e7fe      	b.n	8008282 <HardFault_Handler+0x4>

08008284 <MemManage_Handler>:
}

void MemManage_Handler(void) {
 8008284:	b480      	push	{r7}
 8008286:	af00      	add	r7, sp, #0
  while (1){}
 8008288:	e7fe      	b.n	8008288 <MemManage_Handler+0x4>

0800828a <BusFault_Handler>:
}

void BusFault_Handler(void) {
 800828a:	b480      	push	{r7}
 800828c:	af00      	add	r7, sp, #0
  while (1){}
 800828e:	e7fe      	b.n	800828e <BusFault_Handler+0x4>

08008290 <UsageFault_Handler>:
}

void UsageFault_Handler(void) {
 8008290:	b480      	push	{r7}
 8008292:	af00      	add	r7, sp, #0
  while (1){}
 8008294:	e7fe      	b.n	8008294 <UsageFault_Handler+0x4>

08008296 <SVC_Handler>:
}

void SVC_Handler(void) {
 8008296:	b480      	push	{r7}
 8008298:	af00      	add	r7, sp, #0
}
 800829a:	bf00      	nop
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <DebugMon_Handler>:

void DebugMon_Handler(void) {
 80082a4:	b480      	push	{r7}
 80082a6:	af00      	add	r7, sp, #0
}
 80082a8:	bf00      	nop
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <PendSV_Handler>:

void PendSV_Handler(void) {
 80082b2:	b480      	push	{r7}
 80082b4:	af00      	add	r7, sp, #0
}
 80082b6:	bf00      	nop
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <SysTick_Handler>:

void SysTick_Handler(void) {
 80082c0:	b580      	push	{r7, lr}
 80082c2:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80082c4:	f7f8 fe5e 	bl	8000f84 <HAL_IncTick>
}
 80082c8:	bf00      	nop
 80082ca:	bd80      	pop	{r7, pc}

080082cc <ADC_IRQHandler>:
/******************************************************************************/

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void) {
 80082cc:	b580      	push	{r7, lr}
 80082ce:	af00      	add	r7, sp, #0
	if(LL_ADC_IsActiveFlag_JEOS(ADC1)) {
 80082d0:	480b      	ldr	r0, [pc, #44]	; (8008300 <ADC_IRQHandler+0x34>)
 80082d2:	f7ff ff93 	bl	80081fc <LL_ADC_IsActiveFlag_JEOS>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	bf14      	ite	ne
 80082dc:	2301      	movne	r3, #1
 80082de:	2300      	moveq	r3, #0
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00a      	beq.n	80082fc <ADC_IRQHandler+0x30>
		ADC1 -> SR &= ~(uint32_t)( LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT );
 80082e6:	4b06      	ldr	r3, [pc, #24]	; (8008300 <ADC_IRQHandler+0x34>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a05      	ldr	r2, [pc, #20]	; (8008300 <ADC_IRQHandler+0x34>)
 80082ec:	f023 030c 	bic.w	r3, r3, #12
 80082f0:	6013      	str	r3, [r2, #0]
		HighFreqTask();
 80082f2:	f7ff f8e3 	bl	80074bc <HighFreqTask>
		HAL_ADC_IRQHandler(&hadc3);
 80082f6:	4803      	ldr	r0, [pc, #12]	; (8008304 <ADC_IRQHandler+0x38>)
 80082f8:	f7f8 fea7 	bl	800104a <HAL_ADC_IRQHandler>
	} else {
	}
}
 80082fc:	bf00      	nop
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	40012000 	.word	0x40012000
 8008304:	20003580 	.word	0x20003580

08008308 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void) {
 8008308:	b480      	push	{r7}
 800830a:	af00      	add	r7, sp, #0
}
 800830c:	bf00      	nop
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr

08008316 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void) {
 8008316:	b480      	push	{r7}
 8008318:	af00      	add	r7, sp, #0

}
 800831a:	bf00      	nop
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void) {
 8008324:	b580      	push	{r7, lr}
 8008326:	af00      	add	r7, sp, #0
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET) {
 8008328:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800832c:	f7ff ff7a 	bl	8008224 <LL_EXTI_IsActiveFlag_0_31>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	bf14      	ite	ne
 8008336:	2301      	movne	r3, #1
 8008338:	2300      	moveq	r3, #0
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b00      	cmp	r3, #0
 800833e:	d005      	beq.n	800834c <EXTI15_10_IRQHandler+0x28>
	  LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8008340:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008344:	f7ff ff84 	bl	8008250 <LL_EXTI_ClearFlag_0_31>
	  BtnAct();
 8008348:	f7ff f8c2 	bl	80074d0 <BtnAct>
  }

}
 800834c:	bf00      	nop
 800834e:	bd80      	pop	{r7, pc}

08008350 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f043 0201 	orr.w	r2, r3, #1
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	601a      	str	r2, [r3, #0]
}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800837a:	683a      	ldr	r2, [r7, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a1a      	ldr	r2, [r3, #32]
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	431a      	orrs	r2, r3
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	621a      	str	r2, [r3, #32]
}
 80083a2:	bf00      	nop
 80083a4:	370c      	adds	r7, #12
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 80083ae:	b480      	push	{r7}
 80083b0:	b083      	sub	sp, #12
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ba:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	645a      	str	r2, [r3, #68]	; 0x44
}
 80083c2:	bf00      	nop
 80083c4:	370c      	adds	r7, #12
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr

080083ce <_ZN3PWM6setTIMEP11TIM_TypeDef>:


#include "PWM.hpp"


void PWM::setTIM(TIM_TypeDef* pTIMx){
 80083ce:	b480      	push	{r7}
 80083d0:	b083      	sub	sp, #12
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
 80083d6:	6039      	str	r1, [r7, #0]
	mTIMx = pTIMx;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	683a      	ldr	r2, [r7, #0]
 80083dc:	601a      	str	r2, [r3, #0]
}
 80083de:	bf00      	nop
 80083e0:	370c      	adds	r7, #12
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr

080083ea <_ZN3PWM5setCHEi>:

//void PWM::setCH(__IO uint32_t pCCR);

void PWM::setCH(int pCH){
 80083ea:	b480      	push	{r7}
 80083ec:	b083      	sub	sp, #12
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	6039      	str	r1, [r7, #0]
	mCH = pCH;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	605a      	str	r2, [r3, #4]
}
 80083fa:	bf00      	nop
 80083fc:	370c      	adds	r7, #12
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <_ZN3PWM5fInitEi>:
	LL_TIM_EnableAllOutputs(mTIMx);// need
	//PWM TIM Init end

}

void PWM::fInit(int pTimReload){
 8008406:	b580      	push	{r7, lr}
 8008408:	b082      	sub	sp, #8
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
 800840e:	6039      	str	r1, [r7, #0]

	mTimReload = pTimReload;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	683a      	ldr	r2, [r7, #0]
 8008414:	609a      	str	r2, [r3, #8]

	if(mCH==0){//error check
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d100      	bne.n	8008420 <_ZN3PWM5fInitEi+0x1a>
		while(1){}
 800841e:	e7fe      	b.n	800841e <_ZN3PWM5fInitEi+0x18>
	}

	//mREG Init
	if (mCH == 1){
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d105      	bne.n	8008434 <_ZN3PWM5fInitEi+0x2e>
		mREG=&(mTIMx->CCR1);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 2){
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	2b02      	cmp	r3, #2
 800843a:	d105      	bne.n	8008448 <_ZN3PWM5fInitEi+0x42>
		mREG=&(mTIMx->CCR2);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 3){
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	2b03      	cmp	r3, #3
 800844e:	d105      	bne.n	800845c <_ZN3PWM5fInitEi+0x56>
		mREG=&(mTIMx->CCR3);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	60da      	str	r2, [r3, #12]
	}
	if (mCH == 4){
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	2b04      	cmp	r3, #4
 8008462:	d105      	bne.n	8008470 <_ZN3PWM5fInitEi+0x6a>
		mREG=&(mTIMx->CCR4);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	60da      	str	r2, [r3, #12]
	}

	if(mREG==NULL){//error check
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d100      	bne.n	800847a <_ZN3PWM5fInitEi+0x74>
		while(1){}
 8008478:	e7fe      	b.n	8008478 <_ZN3PWM5fInitEi+0x72>
	}
	//mREG Init end

	//PWM Channel Init
	if(mTIMx==NULL){//error check
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d100      	bne.n	8008484 <_ZN3PWM5fInitEi+0x7e>
		while(1){}
 8008482:	e7fe      	b.n	8008482 <_ZN3PWM5fInitEi+0x7c>
	}
	if (mCH == 1){
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d105      	bne.n	8008498 <_ZN3PWM5fInitEi+0x92>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH1);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2101      	movs	r1, #1
 8008492:	4618      	mov	r0, r3
 8008494:	f7ff ff7a 	bl	800838c <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 2){
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	2b02      	cmp	r3, #2
 800849e:	d105      	bne.n	80084ac <_ZN3PWM5fInitEi+0xa6>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH2);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2110      	movs	r1, #16
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7ff ff70 	bl	800838c <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 3){
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	2b03      	cmp	r3, #3
 80084b2:	d106      	bne.n	80084c2 <_ZN3PWM5fInitEi+0xbc>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH3);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80084bc:	4618      	mov	r0, r3
 80084be:	f7ff ff65 	bl	800838c <LL_TIM_CC_EnableChannel>
	}
	if (mCH == 4){
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	2b04      	cmp	r3, #4
 80084c8:	d106      	bne.n	80084d8 <_ZN3PWM5fInitEi+0xd2>
		LL_TIM_CC_EnableChannel(mTIMx, LL_TIM_CHANNEL_CH4);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7ff ff5a 	bl	800838c <LL_TIM_CC_EnableChannel>
	}
	//PWM Channel Init end

	//PWM TIM Init
	LL_TIM_EnableCounter(mTIMx);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4618      	mov	r0, r3
 80084de:	f7ff ff37 	bl	8008350 <LL_TIM_EnableCounter>

	//auto reload Init
	LL_TIM_SetAutoReload(mTIMx, pTimReload);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	683a      	ldr	r2, [r7, #0]
 80084e8:	4611      	mov	r1, r2
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7ff ff40 	bl	8008370 <LL_TIM_SetAutoReload>

	//LL_TIM_GenerateEvent_UPDATE(TIM1);//
	LL_TIM_EnableAllOutputs(mTIMx);// need
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7ff ff5a 	bl	80083ae <LL_TIM_EnableAllOutputs>
	//PWM TIM Init end

}
 80084fa:	bf00      	nop
 80084fc:	3708      	adds	r7, #8
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <_ZN3PWM6f2DutyEf>:
void PWM::fDuty(float pfDuty){
	int pDuty = pfDuty * (float)mTimReload;
	WRITE_REG(*mREG, pDuty);
}

void PWM::f2Duty(float pfDuty){
 8008502:	b480      	push	{r7}
 8008504:	b085      	sub	sp, #20
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
 800850a:	ed87 0a00 	vstr	s0, [r7]
	int pDuty = (pfDuty + 1)/2 * (float)mTimReload;
 800850e:	edd7 7a00 	vldr	s15, [r7]
 8008512:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008516:	ee77 7a87 	vadd.f32	s15, s15, s14
 800851a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800851e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	ee07 3a90 	vmov	s15, r3
 800852a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800852e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008532:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008536:	ee17 3a90 	vmov	r3, s15
 800853a:	60fb      	str	r3, [r7, #12]
	WRITE_REG(*mREG, pDuty);
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	601a      	str	r2, [r3, #0]
}
 8008544:	bf00      	nop
 8008546:	3714      	adds	r7, #20
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <__NVIC_GetPriorityGrouping>:
{
 8008550:	b480      	push	{r7}
 8008552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008554:	4b04      	ldr	r3, [pc, #16]	; (8008568 <__NVIC_GetPriorityGrouping+0x18>)
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	0a1b      	lsrs	r3, r3, #8
 800855a:	f003 0307 	and.w	r3, r3, #7
}
 800855e:	4618      	mov	r0, r3
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr
 8008568:	e000ed00 	.word	0xe000ed00

0800856c <__NVIC_EnableIRQ>:
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	4603      	mov	r3, r0
 8008574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800857a:	2b00      	cmp	r3, #0
 800857c:	db0d      	blt.n	800859a <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800857e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008582:	b2db      	uxtb	r3, r3
 8008584:	f003 021f 	and.w	r2, r3, #31
 8008588:	4907      	ldr	r1, [pc, #28]	; (80085a8 <__NVIC_EnableIRQ+0x3c>)
 800858a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800858e:	095b      	lsrs	r3, r3, #5
 8008590:	2001      	movs	r0, #1
 8008592:	fa00 f202 	lsl.w	r2, r0, r2
 8008596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800859a:	bf00      	nop
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	e000e100 	.word	0xe000e100

080085ac <__NVIC_SetPriority>:
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	4603      	mov	r3, r0
 80085b4:	6039      	str	r1, [r7, #0]
 80085b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80085b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	db0c      	blt.n	80085da <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	4a0e      	ldr	r2, [pc, #56]	; (8008600 <__NVIC_SetPriority+0x54>)
 80085c6:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80085ca:	4608      	mov	r0, r1
 80085cc:	011b      	lsls	r3, r3, #4
 80085ce:	b2d9      	uxtb	r1, r3
 80085d0:	1813      	adds	r3, r2, r0
 80085d2:	460a      	mov	r2, r1
 80085d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80085d8:	e00c      	b.n	80085f4 <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	b2da      	uxtb	r2, r3
 80085de:	4909      	ldr	r1, [pc, #36]	; (8008604 <__NVIC_SetPriority+0x58>)
 80085e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	f003 030f 	and.w	r3, r3, #15
 80085ea:	3b04      	subs	r3, #4
 80085ec:	0112      	lsls	r2, r2, #4
 80085ee:	b2d2      	uxtb	r2, r2
 80085f0:	440b      	add	r3, r1
 80085f2:	761a      	strb	r2, [r3, #24]
}
 80085f4:	bf00      	nop
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	e000e100 	.word	0xe000e100
 8008604:	e000ed00 	.word	0xe000ed00

08008608 <NVIC_EncodePriority>:
{
 8008608:	b480      	push	{r7}
 800860a:	b089      	sub	sp, #36	; 0x24
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f003 0307 	and.w	r3, r3, #7
 800861a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	f1c3 0307 	rsb	r3, r3, #7
 8008622:	2b04      	cmp	r3, #4
 8008624:	bf28      	it	cs
 8008626:	2304      	movcs	r3, #4
 8008628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	3304      	adds	r3, #4
 800862e:	2b06      	cmp	r3, #6
 8008630:	d902      	bls.n	8008638 <NVIC_EncodePriority+0x30>
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	3b03      	subs	r3, #3
 8008636:	e000      	b.n	800863a <NVIC_EncodePriority+0x32>
 8008638:	2300      	movs	r3, #0
 800863a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	2201      	movs	r2, #1
 8008640:	fa02 f303 	lsl.w	r3, r2, r3
 8008644:	1e5a      	subs	r2, r3, #1
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	401a      	ands	r2, r3
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	2101      	movs	r1, #1
 8008652:	fa01 f303 	lsl.w	r3, r1, r3
 8008656:	1e59      	subs	r1, r3, #1
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	400b      	ands	r3, r1
         );
 800865c:	4313      	orrs	r3, r2
}
 800865e:	4618      	mov	r0, r3
 8008660:	3724      	adds	r7, #36	; 0x24
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr

0800866a <LL_TIM_DisableARRPreload>:
{
 800866a:	b480      	push	{r7}
 800866c:	b083      	sub	sp, #12
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	601a      	str	r2, [r3, #0]
}
 800867e:	bf00      	nop
 8008680:	370c      	adds	r7, #12
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr
	...

0800868c <LL_TIM_OC_DisableFast>:
{
 800868c:	b4b0      	push	{r4, r5, r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	2b01      	cmp	r3, #1
 800869a:	d01c      	beq.n	80086d6 <LL_TIM_OC_DisableFast+0x4a>
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	2b04      	cmp	r3, #4
 80086a0:	d017      	beq.n	80086d2 <LL_TIM_OC_DisableFast+0x46>
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	2b10      	cmp	r3, #16
 80086a6:	d012      	beq.n	80086ce <LL_TIM_OC_DisableFast+0x42>
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	2b40      	cmp	r3, #64	; 0x40
 80086ac:	d00d      	beq.n	80086ca <LL_TIM_OC_DisableFast+0x3e>
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086b4:	d007      	beq.n	80086c6 <LL_TIM_OC_DisableFast+0x3a>
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086bc:	d101      	bne.n	80086c2 <LL_TIM_OC_DisableFast+0x36>
 80086be:	2305      	movs	r3, #5
 80086c0:	e00a      	b.n	80086d8 <LL_TIM_OC_DisableFast+0x4c>
 80086c2:	2306      	movs	r3, #6
 80086c4:	e008      	b.n	80086d8 <LL_TIM_OC_DisableFast+0x4c>
 80086c6:	2304      	movs	r3, #4
 80086c8:	e006      	b.n	80086d8 <LL_TIM_OC_DisableFast+0x4c>
 80086ca:	2303      	movs	r3, #3
 80086cc:	e004      	b.n	80086d8 <LL_TIM_OC_DisableFast+0x4c>
 80086ce:	2302      	movs	r3, #2
 80086d0:	e002      	b.n	80086d8 <LL_TIM_OC_DisableFast+0x4c>
 80086d2:	2301      	movs	r3, #1
 80086d4:	e000      	b.n	80086d8 <LL_TIM_OC_DisableFast+0x4c>
 80086d6:	2300      	movs	r3, #0
 80086d8:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	3318      	adds	r3, #24
 80086de:	461a      	mov	r2, r3
 80086e0:	4629      	mov	r1, r5
 80086e2:	4b09      	ldr	r3, [pc, #36]	; (8008708 <LL_TIM_OC_DisableFast+0x7c>)
 80086e4:	5c5b      	ldrb	r3, [r3, r1]
 80086e6:	4413      	add	r3, r2
 80086e8:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80086ea:	6822      	ldr	r2, [r4, #0]
 80086ec:	4629      	mov	r1, r5
 80086ee:	4b07      	ldr	r3, [pc, #28]	; (800870c <LL_TIM_OC_DisableFast+0x80>)
 80086f0:	5c5b      	ldrb	r3, [r3, r1]
 80086f2:	4619      	mov	r1, r3
 80086f4:	2304      	movs	r3, #4
 80086f6:	408b      	lsls	r3, r1
 80086f8:	43db      	mvns	r3, r3
 80086fa:	4013      	ands	r3, r2
 80086fc:	6023      	str	r3, [r4, #0]
}
 80086fe:	bf00      	nop
 8008700:	370c      	adds	r7, #12
 8008702:	46bd      	mov	sp, r7
 8008704:	bcb0      	pop	{r4, r5, r7}
 8008706:	4770      	bx	lr
 8008708:	0800b2ac 	.word	0x0800b2ac
 800870c:	0800b2b4 	.word	0x0800b2b4

08008710 <LL_TIM_OC_EnablePreload>:
{
 8008710:	b4b0      	push	{r4, r5, r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d01c      	beq.n	800875a <LL_TIM_OC_EnablePreload+0x4a>
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	2b04      	cmp	r3, #4
 8008724:	d017      	beq.n	8008756 <LL_TIM_OC_EnablePreload+0x46>
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	2b10      	cmp	r3, #16
 800872a:	d012      	beq.n	8008752 <LL_TIM_OC_EnablePreload+0x42>
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	2b40      	cmp	r3, #64	; 0x40
 8008730:	d00d      	beq.n	800874e <LL_TIM_OC_EnablePreload+0x3e>
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008738:	d007      	beq.n	800874a <LL_TIM_OC_EnablePreload+0x3a>
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008740:	d101      	bne.n	8008746 <LL_TIM_OC_EnablePreload+0x36>
 8008742:	2305      	movs	r3, #5
 8008744:	e00a      	b.n	800875c <LL_TIM_OC_EnablePreload+0x4c>
 8008746:	2306      	movs	r3, #6
 8008748:	e008      	b.n	800875c <LL_TIM_OC_EnablePreload+0x4c>
 800874a:	2304      	movs	r3, #4
 800874c:	e006      	b.n	800875c <LL_TIM_OC_EnablePreload+0x4c>
 800874e:	2303      	movs	r3, #3
 8008750:	e004      	b.n	800875c <LL_TIM_OC_EnablePreload+0x4c>
 8008752:	2302      	movs	r3, #2
 8008754:	e002      	b.n	800875c <LL_TIM_OC_EnablePreload+0x4c>
 8008756:	2301      	movs	r3, #1
 8008758:	e000      	b.n	800875c <LL_TIM_OC_EnablePreload+0x4c>
 800875a:	2300      	movs	r3, #0
 800875c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	3318      	adds	r3, #24
 8008762:	461a      	mov	r2, r3
 8008764:	4629      	mov	r1, r5
 8008766:	4b09      	ldr	r3, [pc, #36]	; (800878c <LL_TIM_OC_EnablePreload+0x7c>)
 8008768:	5c5b      	ldrb	r3, [r3, r1]
 800876a:	4413      	add	r3, r2
 800876c:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800876e:	6822      	ldr	r2, [r4, #0]
 8008770:	4629      	mov	r1, r5
 8008772:	4b07      	ldr	r3, [pc, #28]	; (8008790 <LL_TIM_OC_EnablePreload+0x80>)
 8008774:	5c5b      	ldrb	r3, [r3, r1]
 8008776:	4619      	mov	r1, r3
 8008778:	2308      	movs	r3, #8
 800877a:	408b      	lsls	r3, r1
 800877c:	4313      	orrs	r3, r2
 800877e:	6023      	str	r3, [r4, #0]
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	bcb0      	pop	{r4, r5, r7}
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop
 800878c:	0800b2ac 	.word	0x0800b2ac
 8008790:	0800b2b4 	.word	0x0800b2b4

08008794 <LL_TIM_SetTriggerOutput>:
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	431a      	orrs	r2, r3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	605a      	str	r2, [r3, #4]
}
 80087ae:	bf00      	nop
 80087b0:	370c      	adds	r7, #12
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr

080087ba <LL_TIM_SetSlaveMode>:
{
 80087ba:	b480      	push	{r7}
 80087bc:	b083      	sub	sp, #12
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
 80087c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	f023 0207 	bic.w	r2, r3, #7
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	431a      	orrs	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	609a      	str	r2, [r3, #8]
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <LL_TIM_SetTriggerInput>:
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	431a      	orrs	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	609a      	str	r2, [r3, #8]
}
 80087fa:	bf00      	nop
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <LL_TIM_DisableMasterSlaveMode>:
{
 8008806:	b480      	push	{r7}
 8008808:	b083      	sub	sp, #12
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	609a      	str	r2, [r3, #8]
}
 800881a:	bf00      	nop
 800881c:	370c      	adds	r7, #12
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <LL_TIM_DisableIT_TRIG>:
  * @rmtoll DIER         TIE           LL_TIM_DisableIT_TRIG
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_TRIG(TIM_TypeDef *TIMx)
{
 8008826:	b480      	push	{r7}
 8008828:	b083      	sub	sp, #12
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TIE);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	60da      	str	r2, [r3, #12]
}
 800883a:	bf00      	nop
 800883c:	370c      	adds	r7, #12
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr

08008846 <LL_TIM_DisableDMAReq_TRIG>:
  * @rmtoll DIER         TDE           LL_TIM_DisableDMAReq_TRIG
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableDMAReq_TRIG(TIM_TypeDef *TIMx)
{
 8008846:	b480      	push	{r7}
 8008848:	b083      	sub	sp, #12
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TDE);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	60da      	str	r2, [r3, #12]
}
 800885a:	bf00      	nop
 800885c:	370c      	adds	r7, #12
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
	...

08008868 <LL_AHB1_GRP1_EnableClock>:
{
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8008870:	4b08      	ldr	r3, [pc, #32]	; (8008894 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4907      	ldr	r1, [pc, #28]	; (8008894 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008878:	4313      	orrs	r3, r2
 800887a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800887c:	4b05      	ldr	r3, [pc, #20]	; (8008894 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800887e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4013      	ands	r3, r2
 8008884:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008886:	68fb      	ldr	r3, [r7, #12]
}
 8008888:	bf00      	nop
 800888a:	3714      	adds	r7, #20
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr
 8008894:	40023800 	.word	0x40023800

08008898 <LL_APB2_GRP1_EnableClock>:
{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80088a0:	4b08      	ldr	r3, [pc, #32]	; (80088c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80088a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4907      	ldr	r1, [pc, #28]	; (80088c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80088a8:	4313      	orrs	r3, r2
 80088aa:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80088ac:	4b05      	ldr	r3, [pc, #20]	; (80088c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80088ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4013      	ands	r3, r2
 80088b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80088b6:	68fb      	ldr	r3, [r7, #12]
}
 80088b8:	bf00      	nop
 80088ba:	3714      	adds	r7, #20
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr
 80088c4:	40023800 	.word	0x40023800

080088c8 <_ZN7TIMInit4InitEv>:
}

void MX_TIM1_Init(void);


void TIMInit::Init() {
 80088c8:	b580      	push	{r7, lr}
 80088ca:	af00      	add	r7, sp, #0
	MX_TIM1_Init();
 80088cc:	f000 f802 	bl	80088d4 <_Z12MX_TIM1_Initv>
}
 80088d0:	bf00      	nop
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <_Z12MX_TIM1_Initv>:

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b09a      	sub	sp, #104	; 0x68
 80088d8:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80088da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80088de:	2200      	movs	r2, #0
 80088e0:	601a      	str	r2, [r3, #0]
 80088e2:	605a      	str	r2, [r3, #4]
 80088e4:	609a      	str	r2, [r3, #8]
 80088e6:	60da      	str	r2, [r3, #12]
 80088e8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80088ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80088ee:	2220      	movs	r2, #32
 80088f0:	2100      	movs	r1, #0
 80088f2:	4618      	mov	r0, r3
 80088f4:	f000 fe57 	bl	80095a6 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 80088f8:	f107 031c 	add.w	r3, r7, #28
 80088fc:	2200      	movs	r2, #0
 80088fe:	601a      	str	r2, [r3, #0]
 8008900:	605a      	str	r2, [r3, #4]
 8008902:	609a      	str	r2, [r3, #8]
 8008904:	60da      	str	r2, [r3, #12]
 8008906:	611a      	str	r2, [r3, #16]
 8008908:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800890a:	1d3b      	adds	r3, r7, #4
 800890c:	2200      	movs	r2, #0
 800890e:	601a      	str	r2, [r3, #0]
 8008910:	605a      	str	r2, [r3, #4]
 8008912:	609a      	str	r2, [r3, #8]
 8008914:	60da      	str	r2, [r3, #12]
 8008916:	611a      	str	r2, [r3, #16]
 8008918:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 800891a:	2001      	movs	r0, #1
 800891c:	f7ff ffbc 	bl	8008898 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8008920:	2001      	movs	r0, #1
 8008922:	f7ff ffa1 	bl	8008868 <LL_AHB1_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA6   ------> TIM1_BKIN
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8008926:	2340      	movs	r3, #64	; 0x40
 8008928:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800892a:	2302      	movs	r3, #2
 800892c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800892e:	2300      	movs	r3, #0
 8008930:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008932:	2300      	movs	r3, #0
 8008934:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8008936:	2302      	movs	r3, #2
 8008938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800893a:	2301      	movs	r3, #1
 800893c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800893e:	1d3b      	adds	r3, r7, #4
 8008940:	4619      	mov	r1, r3
 8008942:	4879      	ldr	r0, [pc, #484]	; (8008b28 <_Z12MX_TIM1_Initv+0x254>)
 8008944:	f7fa fa37 	bl	8002db6 <LL_GPIO_Init>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 1));
 8008948:	f7ff fe02 	bl	8008550 <__NVIC_GetPriorityGrouping>
 800894c:	4603      	mov	r3, r0
 800894e:	2201      	movs	r2, #1
 8008950:	2104      	movs	r1, #4
 8008952:	4618      	mov	r0, r3
 8008954:	f7ff fe58 	bl	8008608 <NVIC_EncodePriority>
 8008958:	4603      	mov	r3, r0
 800895a:	4619      	mov	r1, r3
 800895c:	2018      	movs	r0, #24
 800895e:	f7ff fe25 	bl	80085ac <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8008962:	2018      	movs	r0, #24
 8008964:	f7ff fe02 	bl	800856c <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008968:	f7ff fdf2 	bl	8008550 <__NVIC_GetPriorityGrouping>
 800896c:	4603      	mov	r3, r0
 800896e:	2200      	movs	r2, #0
 8008970:	2100      	movs	r1, #0
 8008972:	4618      	mov	r0, r3
 8008974:	f7ff fe48 	bl	8008608 <NVIC_EncodePriority>
 8008978:	4603      	mov	r3, r0
 800897a:	4619      	mov	r1, r3
 800897c:	2019      	movs	r0, #25
 800897e:	f7ff fe15 	bl	80085ac <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8008982:	2019      	movs	r0, #25
 8008984:	f7ff fdf2 	bl	800856c <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = ( TIM_CLOCK_DIVIDER - 1 );
 8008988:	2300      	movs	r3, #0
 800898a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_UP;
 800898e:	2320      	movs	r3, #32
 8008990:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = PWM_PERIOD_COUNT;
 8008992:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008996:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV2;
 8008998:	f44f 7380 	mov.w	r3, #256	; 0x100
 800899c:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 800899e:	2300      	movs	r3, #0
 80089a0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 80089a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80089a8:	4619      	mov	r1, r3
 80089aa:	4860      	ldr	r0, [pc, #384]	; (8008b2c <_Z12MX_TIM1_Initv+0x258>)
 80089ac:	f7fa fc68 	bl	8003280 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 80089b0:	485e      	ldr	r0, [pc, #376]	; (8008b2c <_Z12MX_TIM1_Initv+0x258>)
 80089b2:	f7ff fe5a 	bl	800866a <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 80089b6:	2101      	movs	r1, #1
 80089b8:	485c      	ldr	r0, [pc, #368]	; (8008b2c <_Z12MX_TIM1_Initv+0x258>)
 80089ba:	f7ff fea9 	bl	8008710 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80089be:	2360      	movs	r3, #96	; 0x60
 80089c0:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80089c2:	2300      	movs	r3, #0
 80089c4:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80089c6:	2300      	movs	r3, #0
 80089c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 80089ca:	2300      	movs	r3, #0
 80089cc:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80089ce:	2300      	movs	r3, #0
 80089d0:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 80089d2:	2300      	movs	r3, #0
 80089d4:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80089d6:	2300      	movs	r3, #0
 80089d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80089da:	2300      	movs	r3, #0
 80089dc:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80089de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80089e2:	461a      	mov	r2, r3
 80089e4:	2101      	movs	r1, #1
 80089e6:	4851      	ldr	r0, [pc, #324]	; (8008b2c <_Z12MX_TIM1_Initv+0x258>)
 80089e8:	f7fa fce4 	bl	80033b4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 80089ec:	2101      	movs	r1, #1
 80089ee:	484f      	ldr	r0, [pc, #316]	; (8008b2c <_Z12MX_TIM1_Initv+0x258>)
 80089f0:	f7ff fe4c 	bl	800868c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 80089f4:	2110      	movs	r1, #16
 80089f6:	484d      	ldr	r0, [pc, #308]	; (8008b2c <_Z12MX_TIM1_Initv+0x258>)
 80089f8:	f7ff fe8a 	bl	8008710 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80089fc:	2300      	movs	r3, #0
 80089fe:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8008a00:	2300      	movs	r3, #0
 8008a02:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8008a04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008a08:	461a      	mov	r2, r3
 8008a0a:	2110      	movs	r1, #16
 8008a0c:	4847      	ldr	r0, [pc, #284]	; (8008b2c <_Z12MX_TIM1_Initv+0x258>)
 8008a0e:	f7fa fcd1 	bl	80033b4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 8008a12:	2110      	movs	r1, #16
 8008a14:	4845      	ldr	r0, [pc, #276]	; (8008b2c <_Z12MX_TIM1_Initv+0x258>)
 8008a16:	f7ff fe39 	bl	800868c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8008a1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008a1e:	4843      	ldr	r0, [pc, #268]	; (8008b2c <_Z12MX_TIM1_Initv+0x258>)
 8008a20:	f7ff fe76 	bl	8008710 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8008a24:	2300      	movs	r3, #0
 8008a26:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8008a2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008a30:	461a      	mov	r2, r3
 8008a32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008a36:	483d      	ldr	r0, [pc, #244]	; (8008b2c <_Z12MX_TIM1_Initv+0x258>)
 8008a38:	f7fa fcbc 	bl	80033b4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8008a3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008a40:	483a      	ldr	r0, [pc, #232]	; (8008b2c <_Z12MX_TIM1_Initv+0x258>)
 8008a42:	f7ff fe23 	bl	800868c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 8008a46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008a4a:	4838      	ldr	r0, [pc, #224]	; (8008b2c <_Z12MX_TIM1_Initv+0x258>)
 8008a4c:	f7ff fe60 	bl	8008710 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 8008a50:	2370      	movs	r3, #112	; 0x70
 8008a52:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8008a54:	2300      	movs	r3, #0
 8008a56:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8008a5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008a60:	461a      	mov	r2, r3
 8008a62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008a66:	4831      	ldr	r0, [pc, #196]	; (8008b2c <_Z12MX_TIM1_Initv+0x258>)
 8008a68:	f7fa fca4 	bl	80033b4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 8008a6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008a70:	482e      	ldr	r0, [pc, #184]	; (8008b2c <_Z12MX_TIM1_Initv+0x258>)
 8008a72:	f7ff fe0b 	bl	800868c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerInput(TIM1, LL_TIM_TS_ITR1);
 8008a76:	2110      	movs	r1, #16
 8008a78:	482c      	ldr	r0, [pc, #176]	; (8008b2c <_Z12MX_TIM1_Initv+0x258>)
 8008a7a:	f7ff feb1 	bl	80087e0 <LL_TIM_SetTriggerInput>
  LL_TIM_SetSlaveMode(TIM1, LL_TIM_SLAVEMODE_TRIGGER);
 8008a7e:	2106      	movs	r1, #6
 8008a80:	482a      	ldr	r0, [pc, #168]	; (8008b2c <_Z12MX_TIM1_Initv+0x258>)
 8008a82:	f7ff fe9a 	bl	80087ba <LL_TIM_SetSlaveMode>
  LL_TIM_DisableIT_TRIG(TIM1);
 8008a86:	4829      	ldr	r0, [pc, #164]	; (8008b2c <_Z12MX_TIM1_Initv+0x258>)
 8008a88:	f7ff fecd 	bl	8008826 <LL_TIM_DisableIT_TRIG>
  LL_TIM_DisableDMAReq_TRIG(TIM1);
 8008a8c:	4827      	ldr	r0, [pc, #156]	; (8008b2c <_Z12MX_TIM1_Initv+0x258>)
 8008a8e:	f7ff feda 	bl	8008846 <LL_TIM_DisableDMAReq_TRIG>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8008a92:	2100      	movs	r1, #0
 8008a94:	4825      	ldr	r0, [pc, #148]	; (8008b2c <_Z12MX_TIM1_Initv+0x258>)
 8008a96:	f7ff fe7d 	bl	8008794 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8008a9a:	4824      	ldr	r0, [pc, #144]	; (8008b2c <_Z12MX_TIM1_Initv+0x258>)
 8008a9c:	f7ff feb3 	bl	8008806 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_ENABLE;
 8008aa0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008aa4:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_ENABLE;
 8008aa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008aaa:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_1;
 8008aac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ab0:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8008abc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8008ac6:	f107 031c 	add.w	r3, r7, #28
 8008aca:	4619      	mov	r1, r3
 8008acc:	4817      	ldr	r0, [pc, #92]	; (8008b2c <_Z12MX_TIM1_Initv+0x258>)
 8008ace:	f7fa fca9 	bl	8003424 <LL_TIM_BDTR_Init>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8008ad2:	2001      	movs	r0, #1
 8008ad4:	f7ff fec8 	bl	8008868 <LL_AHB1_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8008ad8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8008adc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008ade:	2302      	movs	r3, #2
 8008ae0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8008ae2:	2302      	movs	r3, #2
 8008ae4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8008aea:	2302      	movs	r3, #2
 8008aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8008aee:	2301      	movs	r3, #1
 8008af0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008af2:	1d3b      	adds	r3, r7, #4
 8008af4:	4619      	mov	r1, r3
 8008af6:	480c      	ldr	r0, [pc, #48]	; (8008b28 <_Z12MX_TIM1_Initv+0x254>)
 8008af8:	f7fa f95d 	bl	8002db6 <LL_GPIO_Init>

#ifdef DEBUG_ADC_TRIG_PWM_OUT
  //ch4 Init
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8008afc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008b02:	2302      	movs	r3, #2
 8008b04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8008b06:	2302      	movs	r3, #2
 8008b08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8008b12:	2301      	movs	r3, #1
 8008b14:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b16:	1d3b      	adds	r3, r7, #4
 8008b18:	4619      	mov	r1, r3
 8008b1a:	4803      	ldr	r0, [pc, #12]	; (8008b28 <_Z12MX_TIM1_Initv+0x254>)
 8008b1c:	f7fa f94b 	bl	8002db6 <LL_GPIO_Init>
#endif
}
 8008b20:	bf00      	nop
 8008b22:	3768      	adds	r7, #104	; 0x68
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	40020000 	.word	0x40020000
 8008b2c:	40010000 	.word	0x40010000

08008b30 <LL_USART_Enable>:
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	60da      	str	r2, [r3, #12]
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <LL_USART_ConfigAsyncMode>:
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	691b      	ldr	r3, [r3, #16]
 8008b5c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	611a      	str	r2, [r3, #16]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	695b      	ldr	r3, [r3, #20]
 8008b68:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	615a      	str	r2, [r3, #20]
 8008b70:	bf00      	nop
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <LL_AHB1_GRP1_EnableClock>:
 8008b7c:	b480      	push	{r7}
 8008b7e:	b085      	sub	sp, #20
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	4b08      	ldr	r3, [pc, #32]	; (8008ba8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008b86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4907      	ldr	r1, [pc, #28]	; (8008ba8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	630b      	str	r3, [r1, #48]	; 0x30
 8008b90:	4b05      	ldr	r3, [pc, #20]	; (8008ba8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4013      	ands	r3, r2
 8008b98:	60fb      	str	r3, [r7, #12]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	bf00      	nop
 8008b9e:	3714      	adds	r7, #20
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr
 8008ba8:	40023800 	.word	0x40023800

08008bac <LL_APB1_GRP1_EnableClock>:
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	4b08      	ldr	r3, [pc, #32]	; (8008bd8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8008bb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4907      	ldr	r1, [pc, #28]	; (8008bd8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	640b      	str	r3, [r1, #64]	; 0x40
 8008bc0:	4b05      	ldr	r3, [pc, #20]	; (8008bd8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8008bc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	60fb      	str	r3, [r7, #12]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	bf00      	nop
 8008bce:	3714      	adds	r7, #20
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr
 8008bd8:	40023800 	.word	0x40023800

08008bdc <_ZN9USARTInit4InitEv>:
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	f000 f802 	bl	8008be8 <_Z22MX_USART2_LL_UART_Initv>
 8008be4:	bf00      	nop
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <_Z22MX_USART2_LL_UART_Initv>:
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b08e      	sub	sp, #56	; 0x38
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	f107 031c 	add.w	r3, r7, #28
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	601a      	str	r2, [r3, #0]
 8008bf6:	605a      	str	r2, [r3, #4]
 8008bf8:	609a      	str	r2, [r3, #8]
 8008bfa:	60da      	str	r2, [r3, #12]
 8008bfc:	611a      	str	r2, [r3, #16]
 8008bfe:	615a      	str	r2, [r3, #20]
 8008c00:	619a      	str	r2, [r3, #24]
 8008c02:	1d3b      	adds	r3, r7, #4
 8008c04:	2200      	movs	r2, #0
 8008c06:	601a      	str	r2, [r3, #0]
 8008c08:	605a      	str	r2, [r3, #4]
 8008c0a:	609a      	str	r2, [r3, #8]
 8008c0c:	60da      	str	r2, [r3, #12]
 8008c0e:	611a      	str	r2, [r3, #16]
 8008c10:	615a      	str	r2, [r3, #20]
 8008c12:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8008c16:	f7ff ffc9 	bl	8008bac <LL_APB1_GRP1_EnableClock>
 8008c1a:	2001      	movs	r0, #1
 8008c1c:	f7ff ffae 	bl	8008b7c <LL_AHB1_GRP1_EnableClock>
 8008c20:	230c      	movs	r3, #12
 8008c22:	607b      	str	r3, [r7, #4]
 8008c24:	2302      	movs	r3, #2
 8008c26:	60bb      	str	r3, [r7, #8]
 8008c28:	2303      	movs	r3, #3
 8008c2a:	60fb      	str	r3, [r7, #12]
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	613b      	str	r3, [r7, #16]
 8008c30:	2301      	movs	r3, #1
 8008c32:	617b      	str	r3, [r7, #20]
 8008c34:	2307      	movs	r3, #7
 8008c36:	61bb      	str	r3, [r7, #24]
 8008c38:	1d3b      	adds	r3, r7, #4
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	4810      	ldr	r0, [pc, #64]	; (8008c80 <_Z22MX_USART2_LL_UART_Initv+0x98>)
 8008c3e:	f7fa f8ba 	bl	8002db6 <LL_GPIO_Init>
 8008c42:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8008c46:	61fb      	str	r3, [r7, #28]
 8008c48:	2300      	movs	r3, #0
 8008c4a:	623b      	str	r3, [r7, #32]
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8008c50:	2300      	movs	r3, #0
 8008c52:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c54:	230c      	movs	r3, #12
 8008c56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c58:	2300      	movs	r3, #0
 8008c5a:	633b      	str	r3, [r7, #48]	; 0x30
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c60:	f107 031c 	add.w	r3, r7, #28
 8008c64:	4619      	mov	r1, r3
 8008c66:	4807      	ldr	r0, [pc, #28]	; (8008c84 <_Z22MX_USART2_LL_UART_Initv+0x9c>)
 8008c68:	f7fa feba 	bl	80039e0 <LL_USART_Init>
 8008c6c:	4805      	ldr	r0, [pc, #20]	; (8008c84 <_Z22MX_USART2_LL_UART_Initv+0x9c>)
 8008c6e:	f7ff ff6f 	bl	8008b50 <LL_USART_ConfigAsyncMode>
 8008c72:	4804      	ldr	r0, [pc, #16]	; (8008c84 <_Z22MX_USART2_LL_UART_Initv+0x9c>)
 8008c74:	f7ff ff5c 	bl	8008b30 <LL_USART_Enable>
 8008c78:	bf00      	nop
 8008c7a:	3738      	adds	r7, #56	; 0x38
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	40020000 	.word	0x40020000
 8008c84:	40004400 	.word	0x40004400

08008c88 <arm_sin_f32>:
 8008c88:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c90:	d42c      	bmi.n	8008cec <arm_sin_f32+0x64>
 8008c92:	eddf 7a20 	vldr	s15, [pc, #128]	; 8008d14 <arm_sin_f32+0x8c>
 8008c96:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008c9a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008c9e:	d432      	bmi.n	8008d06 <arm_sin_f32+0x7e>
 8008ca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ca4:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8008d18 <arm_sin_f32+0x90>
 8008ca8:	4a1c      	ldr	r2, [pc, #112]	; (8008d1c <arm_sin_f32+0x94>)
 8008caa:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008cae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cb2:	ee20 0a26 	vmul.f32	s0, s0, s13
 8008cb6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8008cba:	ee17 3a90 	vmov	r3, s15
 8008cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cc2:	ee07 3a90 	vmov	s15, r3
 8008cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cca:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8008cce:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008cd2:	edd1 6a01 	vldr	s13, [r1, #4]
 8008cd6:	ed91 0a00 	vldr	s0, [r1]
 8008cda:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008cde:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008ce2:	ee27 0a00 	vmul.f32	s0, s14, s0
 8008ce6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008cea:	4770      	bx	lr
 8008cec:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8008d20 <arm_sin_f32+0x98>
 8008cf0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cf8:	da0b      	bge.n	8008d12 <arm_sin_f32+0x8a>
 8008cfa:	eddf 7a06 	vldr	s15, [pc, #24]	; 8008d14 <arm_sin_f32+0x8c>
 8008cfe:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008d02:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008d06:	ee17 3a90 	vmov	r3, s15
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	ee07 3a90 	vmov	s15, r3
 8008d10:	e7c6      	b.n	8008ca0 <arm_sin_f32+0x18>
 8008d12:	4770      	bx	lr
 8008d14:	3e22f983 	.word	0x3e22f983
 8008d18:	44000000 	.word	0x44000000
 8008d1c:	0800b2bc 	.word	0x0800b2bc
 8008d20:	b44c02cd 	.word	0xb44c02cd

08008d24 <arm_cos_f32>:
 8008d24:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8008d98 <arm_cos_f32+0x74>
 8008d28:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008d2c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8008d30:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008d34:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d3c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008d40:	d504      	bpl.n	8008d4c <arm_cos_f32+0x28>
 8008d42:	ee17 3a90 	vmov	r3, s15
 8008d46:	3b01      	subs	r3, #1
 8008d48:	ee07 3a90 	vmov	s15, r3
 8008d4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d50:	eddf 6a12 	vldr	s13, [pc, #72]	; 8008d9c <arm_cos_f32+0x78>
 8008d54:	4a12      	ldr	r2, [pc, #72]	; (8008da0 <arm_cos_f32+0x7c>)
 8008d56:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008d5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d5e:	ee20 0a26 	vmul.f32	s0, s0, s13
 8008d62:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8008d66:	ee17 3a90 	vmov	r3, s15
 8008d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d6e:	ee07 3a90 	vmov	s15, r3
 8008d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d76:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8008d7a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008d7e:	edd1 6a01 	vldr	s13, [r1, #4]
 8008d82:	ed91 0a00 	vldr	s0, [r1]
 8008d86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008d8a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008d8e:	ee27 0a00 	vmul.f32	s0, s14, s0
 8008d92:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008d96:	4770      	bx	lr
 8008d98:	3e22f983 	.word	0x3e22f983
 8008d9c:	44000000 	.word	0x44000000
 8008da0:	0800b2bc 	.word	0x0800b2bc

08008da4 <_ZdlPv>:
 8008da4:	f000 bbec 	b.w	8009580 <free>

08008da8 <_ZdlPvj>:
 8008da8:	f7ff bffc 	b.w	8008da4 <_ZdlPv>

08008dac <fmodl>:
 8008dac:	f000 b8ac 	b.w	8008f08 <fmod>

08008db0 <_ZSt19__throw_logic_errorPKc>:
 8008db0:	b508      	push	{r3, lr}
 8008db2:	f000 fbac 	bl	800950e <abort>

08008db6 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8008db6:	b40f      	push	{r0, r1, r2, r3}
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	f107 0410 	add.w	r4, r7, #16
 8008dc2:	f854 5b04 	ldr.w	r5, [r4], #4
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	f7f7 fa1e 	bl	8000208 <strlen>
 8008dcc:	f200 230e 	addw	r3, r0, #526	; 0x20e
 8008dd0:	f023 0307 	bic.w	r3, r3, #7
 8008dd4:	ebad 0d03 	sub.w	sp, sp, r3
 8008dd8:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8008ddc:	4623      	mov	r3, r4
 8008dde:	462a      	mov	r2, r5
 8008de0:	4668      	mov	r0, sp
 8008de2:	607c      	str	r4, [r7, #4]
 8008de4:	f000 f850 	bl	8008e88 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8008de8:	f000 fb91 	bl	800950e <abort>

08008dec <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b09c      	sub	sp, #112	; 0x70
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	1a0e      	subs	r6, r1, r0
 8008df4:	4680      	mov	r8, r0
 8008df6:	2269      	movs	r2, #105	; 0x69
 8008df8:	490e      	ldr	r1, [pc, #56]	; (8008e34 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8008dfa:	1d38      	adds	r0, r7, #4
 8008dfc:	f000 fbc8 	bl	8009590 <memcpy>
 8008e00:	f106 0377 	add.w	r3, r6, #119	; 0x77
 8008e04:	f023 0307 	bic.w	r3, r3, #7
 8008e08:	ebad 0d03 	sub.w	sp, sp, r3
 8008e0c:	466c      	mov	r4, sp
 8008e0e:	2268      	movs	r2, #104	; 0x68
 8008e10:	1d39      	adds	r1, r7, #4
 8008e12:	1c75      	adds	r5, r6, #1
 8008e14:	4620      	mov	r0, r4
 8008e16:	f000 fbbb 	bl	8009590 <memcpy>
 8008e1a:	4425      	add	r5, r4
 8008e1c:	4632      	mov	r2, r6
 8008e1e:	4641      	mov	r1, r8
 8008e20:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008e24:	f000 fbb4 	bl	8009590 <memcpy>
 8008e28:	2300      	movs	r3, #0
 8008e2a:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 8008e2e:	4620      	mov	r0, r4
 8008e30:	f7ff ffbe 	bl	8008db0 <_ZSt19__throw_logic_errorPKc>
 8008e34:	0800bacb 	.word	0x0800bacb

08008e38 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8008e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	b086      	sub	sp, #24
 8008e3e:	466d      	mov	r5, sp
 8008e40:	f105 040c 	add.w	r4, r5, #12
 8008e44:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8008e84 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8008e48:	4623      	mov	r3, r4
 8008e4a:	f04f 0c0a 	mov.w	ip, #10
 8008e4e:	fbb2 f6fc 	udiv	r6, r2, ip
 8008e52:	fb0c 2216 	mls	r2, ip, r6, r2
 8008e56:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8008e5a:	f803 2d01 	strb.w	r2, [r3, #-1]!
 8008e5e:	4632      	mov	r2, r6
 8008e60:	2e00      	cmp	r6, #0
 8008e62:	d1f4      	bne.n	8008e4e <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 8008e64:	1ae4      	subs	r4, r4, r3
 8008e66:	428c      	cmp	r4, r1
 8008e68:	d808      	bhi.n	8008e7c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 8008e6a:	f1c4 010c 	rsb	r1, r4, #12
 8008e6e:	4622      	mov	r2, r4
 8008e70:	4429      	add	r1, r5
 8008e72:	f000 fb8d 	bl	8009590 <memcpy>
 8008e76:	4620      	mov	r0, r4
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008e80:	e7f9      	b.n	8008e76 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 8008e82:	bf00      	nop
 8008e84:	0800bac0 	.word	0x0800bac0

08008e88 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8008e88:	3901      	subs	r1, #1
 8008e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e8e:	4606      	mov	r6, r0
 8008e90:	4615      	mov	r5, r2
 8008e92:	1847      	adds	r7, r0, r1
 8008e94:	4604      	mov	r4, r0
 8008e96:	782a      	ldrb	r2, [r5, #0]
 8008e98:	b392      	cbz	r2, 8008f00 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x78>
 8008e9a:	42bc      	cmp	r4, r7
 8008e9c:	d22c      	bcs.n	8008ef8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 8008e9e:	2a25      	cmp	r2, #37	; 0x25
 8008ea0:	d107      	bne.n	8008eb2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8008ea2:	786a      	ldrb	r2, [r5, #1]
 8008ea4:	2a73      	cmp	r2, #115	; 0x73
 8008ea6:	d009      	beq.n	8008ebc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x34>
 8008ea8:	2a7a      	cmp	r2, #122	; 0x7a
 8008eaa:	d012      	beq.n	8008ed2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4a>
 8008eac:	2a25      	cmp	r2, #37	; 0x25
 8008eae:	d100      	bne.n	8008eb2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8008eb0:	3501      	adds	r5, #1
 8008eb2:	782a      	ldrb	r2, [r5, #0]
 8008eb4:	7022      	strb	r2, [r4, #0]
 8008eb6:	3501      	adds	r5, #1
 8008eb8:	3401      	adds	r4, #1
 8008eba:	e7ec      	b.n	8008e96 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8008ebc:	1d19      	adds	r1, r3, #4
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	3b01      	subs	r3, #1
 8008ec2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8008ec6:	b1a2      	cbz	r2, 8008ef2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6a>
 8008ec8:	42bc      	cmp	r4, r7
 8008eca:	d015      	beq.n	8008ef8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 8008ecc:	f804 2b01 	strb.w	r2, [r4], #1
 8008ed0:	e7f7      	b.n	8008ec2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3a>
 8008ed2:	78aa      	ldrb	r2, [r5, #2]
 8008ed4:	2a75      	cmp	r2, #117	; 0x75
 8008ed6:	d1ec      	bne.n	8008eb2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	1b39      	subs	r1, r7, r4
 8008edc:	4620      	mov	r0, r4
 8008ede:	f103 0804 	add.w	r8, r3, #4
 8008ee2:	f7ff ffa9 	bl	8008e38 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	dd06      	ble.n	8008ef8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 8008eea:	4404      	add	r4, r0
 8008eec:	3503      	adds	r5, #3
 8008eee:	4643      	mov	r3, r8
 8008ef0:	e7d1      	b.n	8008e96 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8008ef2:	3502      	adds	r5, #2
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	e7ce      	b.n	8008e96 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8008ef8:	4621      	mov	r1, r4
 8008efa:	4630      	mov	r0, r6
 8008efc:	f7ff ff76 	bl	8008dec <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8008f00:	7022      	strb	r2, [r4, #0]
 8008f02:	1ba0      	subs	r0, r4, r6
 8008f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008f08 <fmod>:
 8008f08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f0c:	ed2d 8b02 	vpush	{d8}
 8008f10:	b08b      	sub	sp, #44	; 0x2c
 8008f12:	ec55 4b10 	vmov	r4, r5, d0
 8008f16:	ec57 6b11 	vmov	r6, r7, d1
 8008f1a:	f000 f85b 	bl	8008fd4 <__ieee754_fmod>
 8008f1e:	4b2a      	ldr	r3, [pc, #168]	; (8008fc8 <fmod+0xc0>)
 8008f20:	eeb0 8a40 	vmov.f32	s16, s0
 8008f24:	eef0 8a60 	vmov.f32	s17, s1
 8008f28:	f993 8000 	ldrsb.w	r8, [r3]
 8008f2c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8008f30:	d030      	beq.n	8008f94 <fmod+0x8c>
 8008f32:	4632      	mov	r2, r6
 8008f34:	463b      	mov	r3, r7
 8008f36:	4630      	mov	r0, r6
 8008f38:	4639      	mov	r1, r7
 8008f3a:	f7f7 fdc3 	bl	8000ac4 <__aeabi_dcmpun>
 8008f3e:	bb48      	cbnz	r0, 8008f94 <fmod+0x8c>
 8008f40:	4622      	mov	r2, r4
 8008f42:	462b      	mov	r3, r5
 8008f44:	4620      	mov	r0, r4
 8008f46:	4629      	mov	r1, r5
 8008f48:	f7f7 fdbc 	bl	8000ac4 <__aeabi_dcmpun>
 8008f4c:	4681      	mov	r9, r0
 8008f4e:	bb08      	cbnz	r0, 8008f94 <fmod+0x8c>
 8008f50:	2200      	movs	r2, #0
 8008f52:	2300      	movs	r3, #0
 8008f54:	4630      	mov	r0, r6
 8008f56:	4639      	mov	r1, r7
 8008f58:	f7f7 fd82 	bl	8000a60 <__aeabi_dcmpeq>
 8008f5c:	b1d0      	cbz	r0, 8008f94 <fmod+0x8c>
 8008f5e:	2301      	movs	r3, #1
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	4b1a      	ldr	r3, [pc, #104]	; (8008fcc <fmod+0xc4>)
 8008f64:	9301      	str	r3, [sp, #4]
 8008f66:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008f6a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008f6e:	f8cd 9020 	str.w	r9, [sp, #32]
 8008f72:	f1b8 0f00 	cmp.w	r8, #0
 8008f76:	d116      	bne.n	8008fa6 <fmod+0x9e>
 8008f78:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008f7c:	4668      	mov	r0, sp
 8008f7e:	f000 f9e9 	bl	8009354 <matherr>
 8008f82:	b1d8      	cbz	r0, 8008fbc <fmod+0xb4>
 8008f84:	9b08      	ldr	r3, [sp, #32]
 8008f86:	b11b      	cbz	r3, 8008f90 <fmod+0x88>
 8008f88:	f000 fac8 	bl	800951c <__errno>
 8008f8c:	9b08      	ldr	r3, [sp, #32]
 8008f8e:	6003      	str	r3, [r0, #0]
 8008f90:	ed9d 8b06 	vldr	d8, [sp, #24]
 8008f94:	eeb0 0a48 	vmov.f32	s0, s16
 8008f98:	eef0 0a68 	vmov.f32	s1, s17
 8008f9c:	b00b      	add	sp, #44	; 0x2c
 8008f9e:	ecbd 8b02 	vpop	{d8}
 8008fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	2300      	movs	r3, #0
 8008faa:	4610      	mov	r0, r2
 8008fac:	4619      	mov	r1, r3
 8008fae:	f7f7 fc19 	bl	80007e4 <__aeabi_ddiv>
 8008fb2:	f1b8 0f02 	cmp.w	r8, #2
 8008fb6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008fba:	d1df      	bne.n	8008f7c <fmod+0x74>
 8008fbc:	f000 faae 	bl	800951c <__errno>
 8008fc0:	2321      	movs	r3, #33	; 0x21
 8008fc2:	6003      	str	r3, [r0, #0]
 8008fc4:	e7de      	b.n	8008f84 <fmod+0x7c>
 8008fc6:	bf00      	nop
 8008fc8:	2000000c 	.word	0x2000000c
 8008fcc:	0800bb34 	.word	0x0800bb34

08008fd0 <atan2f>:
 8008fd0:	f000 b912 	b.w	80091f8 <__ieee754_atan2f>

08008fd4 <__ieee754_fmod>:
 8008fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fd8:	ec53 2b11 	vmov	r2, r3, d1
 8008fdc:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8008fe0:	ea5e 0402 	orrs.w	r4, lr, r2
 8008fe4:	ec51 0b10 	vmov	r0, r1, d0
 8008fe8:	461e      	mov	r6, r3
 8008fea:	ee11 5a10 	vmov	r5, s2
 8008fee:	4694      	mov	ip, r2
 8008ff0:	d00c      	beq.n	800900c <__ieee754_fmod+0x38>
 8008ff2:	4c7a      	ldr	r4, [pc, #488]	; (80091dc <__ieee754_fmod+0x208>)
 8008ff4:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8008ff8:	45a0      	cmp	r8, r4
 8008ffa:	4689      	mov	r9, r1
 8008ffc:	dc06      	bgt.n	800900c <__ieee754_fmod+0x38>
 8008ffe:	4254      	negs	r4, r2
 8009000:	4314      	orrs	r4, r2
 8009002:	4f77      	ldr	r7, [pc, #476]	; (80091e0 <__ieee754_fmod+0x20c>)
 8009004:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8009008:	42bc      	cmp	r4, r7
 800900a:	d909      	bls.n	8009020 <__ieee754_fmod+0x4c>
 800900c:	f7f7 fac0 	bl	8000590 <__aeabi_dmul>
 8009010:	4602      	mov	r2, r0
 8009012:	460b      	mov	r3, r1
 8009014:	f7f7 fbe6 	bl	80007e4 <__aeabi_ddiv>
 8009018:	ec41 0b10 	vmov	d0, r0, r1
 800901c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009020:	45f0      	cmp	r8, lr
 8009022:	ee10 2a10 	vmov	r2, s0
 8009026:	4607      	mov	r7, r0
 8009028:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 800902c:	dc0a      	bgt.n	8009044 <__ieee754_fmod+0x70>
 800902e:	dbf3      	blt.n	8009018 <__ieee754_fmod+0x44>
 8009030:	42a8      	cmp	r0, r5
 8009032:	d3f1      	bcc.n	8009018 <__ieee754_fmod+0x44>
 8009034:	d106      	bne.n	8009044 <__ieee754_fmod+0x70>
 8009036:	496b      	ldr	r1, [pc, #428]	; (80091e4 <__ieee754_fmod+0x210>)
 8009038:	0fe4      	lsrs	r4, r4, #31
 800903a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800903e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009042:	e7e9      	b.n	8009018 <__ieee754_fmod+0x44>
 8009044:	4b68      	ldr	r3, [pc, #416]	; (80091e8 <__ieee754_fmod+0x214>)
 8009046:	4598      	cmp	r8, r3
 8009048:	dc49      	bgt.n	80090de <__ieee754_fmod+0x10a>
 800904a:	f1b8 0f00 	cmp.w	r8, #0
 800904e:	d13d      	bne.n	80090cc <__ieee754_fmod+0xf8>
 8009050:	4866      	ldr	r0, [pc, #408]	; (80091ec <__ieee754_fmod+0x218>)
 8009052:	4611      	mov	r1, r2
 8009054:	2900      	cmp	r1, #0
 8009056:	dc36      	bgt.n	80090c6 <__ieee754_fmod+0xf2>
 8009058:	459e      	cmp	lr, r3
 800905a:	dc51      	bgt.n	8009100 <__ieee754_fmod+0x12c>
 800905c:	f1be 0f00 	cmp.w	lr, #0
 8009060:	d145      	bne.n	80090ee <__ieee754_fmod+0x11a>
 8009062:	4b62      	ldr	r3, [pc, #392]	; (80091ec <__ieee754_fmod+0x218>)
 8009064:	4629      	mov	r1, r5
 8009066:	2900      	cmp	r1, #0
 8009068:	dc3e      	bgt.n	80090e8 <__ieee754_fmod+0x114>
 800906a:	4961      	ldr	r1, [pc, #388]	; (80091f0 <__ieee754_fmod+0x21c>)
 800906c:	4288      	cmp	r0, r1
 800906e:	db4c      	blt.n	800910a <__ieee754_fmod+0x136>
 8009070:	f3c9 0113 	ubfx	r1, r9, #0, #20
 8009074:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009078:	4a5d      	ldr	r2, [pc, #372]	; (80091f0 <__ieee754_fmod+0x21c>)
 800907a:	4293      	cmp	r3, r2
 800907c:	db59      	blt.n	8009132 <__ieee754_fmod+0x15e>
 800907e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8009082:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8009086:	1ac0      	subs	r0, r0, r3
 8009088:	1b8a      	subs	r2, r1, r6
 800908a:	eba7 050c 	sub.w	r5, r7, ip
 800908e:	2800      	cmp	r0, #0
 8009090:	d166      	bne.n	8009160 <__ieee754_fmod+0x18c>
 8009092:	4567      	cmp	r7, ip
 8009094:	bf38      	it	cc
 8009096:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 800909a:	2a00      	cmp	r2, #0
 800909c:	bfbc      	itt	lt
 800909e:	463d      	movlt	r5, r7
 80090a0:	460a      	movlt	r2, r1
 80090a2:	ea52 0105 	orrs.w	r1, r2, r5
 80090a6:	d0c6      	beq.n	8009036 <__ieee754_fmod+0x62>
 80090a8:	494f      	ldr	r1, [pc, #316]	; (80091e8 <__ieee754_fmod+0x214>)
 80090aa:	428a      	cmp	r2, r1
 80090ac:	dd6d      	ble.n	800918a <__ieee754_fmod+0x1b6>
 80090ae:	4950      	ldr	r1, [pc, #320]	; (80091f0 <__ieee754_fmod+0x21c>)
 80090b0:	428b      	cmp	r3, r1
 80090b2:	db70      	blt.n	8009196 <__ieee754_fmod+0x1c2>
 80090b4:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 80090b8:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80090bc:	4314      	orrs	r4, r2
 80090be:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 80090c2:	4628      	mov	r0, r5
 80090c4:	e7a8      	b.n	8009018 <__ieee754_fmod+0x44>
 80090c6:	3801      	subs	r0, #1
 80090c8:	0049      	lsls	r1, r1, #1
 80090ca:	e7c3      	b.n	8009054 <__ieee754_fmod+0x80>
 80090cc:	4848      	ldr	r0, [pc, #288]	; (80091f0 <__ieee754_fmod+0x21c>)
 80090ce:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 80090d2:	0049      	lsls	r1, r1, #1
 80090d4:	2900      	cmp	r1, #0
 80090d6:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 80090da:	dcfa      	bgt.n	80090d2 <__ieee754_fmod+0xfe>
 80090dc:	e7bc      	b.n	8009058 <__ieee754_fmod+0x84>
 80090de:	ea4f 5028 	mov.w	r0, r8, asr #20
 80090e2:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80090e6:	e7b7      	b.n	8009058 <__ieee754_fmod+0x84>
 80090e8:	3b01      	subs	r3, #1
 80090ea:	0049      	lsls	r1, r1, #1
 80090ec:	e7bb      	b.n	8009066 <__ieee754_fmod+0x92>
 80090ee:	4b40      	ldr	r3, [pc, #256]	; (80091f0 <__ieee754_fmod+0x21c>)
 80090f0:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 80090f4:	0049      	lsls	r1, r1, #1
 80090f6:	2900      	cmp	r1, #0
 80090f8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80090fc:	dcfa      	bgt.n	80090f4 <__ieee754_fmod+0x120>
 80090fe:	e7b4      	b.n	800906a <__ieee754_fmod+0x96>
 8009100:	ea4f 532e 	mov.w	r3, lr, asr #20
 8009104:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009108:	e7af      	b.n	800906a <__ieee754_fmod+0x96>
 800910a:	1a0f      	subs	r7, r1, r0
 800910c:	2f1f      	cmp	r7, #31
 800910e:	dc0a      	bgt.n	8009126 <__ieee754_fmod+0x152>
 8009110:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8009114:	fa08 f807 	lsl.w	r8, r8, r7
 8009118:	fa22 f101 	lsr.w	r1, r2, r1
 800911c:	ea41 0108 	orr.w	r1, r1, r8
 8009120:	fa02 f707 	lsl.w	r7, r2, r7
 8009124:	e7a8      	b.n	8009078 <__ieee754_fmod+0xa4>
 8009126:	4933      	ldr	r1, [pc, #204]	; (80091f4 <__ieee754_fmod+0x220>)
 8009128:	1a09      	subs	r1, r1, r0
 800912a:	fa02 f101 	lsl.w	r1, r2, r1
 800912e:	2700      	movs	r7, #0
 8009130:	e7a2      	b.n	8009078 <__ieee754_fmod+0xa4>
 8009132:	eba2 0c03 	sub.w	ip, r2, r3
 8009136:	f1bc 0f1f 	cmp.w	ip, #31
 800913a:	dc0a      	bgt.n	8009152 <__ieee754_fmod+0x17e>
 800913c:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8009140:	fa0e fe0c 	lsl.w	lr, lr, ip
 8009144:	fa25 f606 	lsr.w	r6, r5, r6
 8009148:	ea46 060e 	orr.w	r6, r6, lr
 800914c:	fa05 fc0c 	lsl.w	ip, r5, ip
 8009150:	e799      	b.n	8009086 <__ieee754_fmod+0xb2>
 8009152:	4e28      	ldr	r6, [pc, #160]	; (80091f4 <__ieee754_fmod+0x220>)
 8009154:	1af6      	subs	r6, r6, r3
 8009156:	fa05 f606 	lsl.w	r6, r5, r6
 800915a:	f04f 0c00 	mov.w	ip, #0
 800915e:	e792      	b.n	8009086 <__ieee754_fmod+0xb2>
 8009160:	4567      	cmp	r7, ip
 8009162:	bf38      	it	cc
 8009164:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 8009168:	2a00      	cmp	r2, #0
 800916a:	da05      	bge.n	8009178 <__ieee754_fmod+0x1a4>
 800916c:	0ffa      	lsrs	r2, r7, #31
 800916e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009172:	007f      	lsls	r7, r7, #1
 8009174:	3801      	subs	r0, #1
 8009176:	e787      	b.n	8009088 <__ieee754_fmod+0xb4>
 8009178:	ea52 0105 	orrs.w	r1, r2, r5
 800917c:	f43f af5b 	beq.w	8009036 <__ieee754_fmod+0x62>
 8009180:	0fe9      	lsrs	r1, r5, #31
 8009182:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8009186:	006f      	lsls	r7, r5, #1
 8009188:	e7f4      	b.n	8009174 <__ieee754_fmod+0x1a0>
 800918a:	0fe8      	lsrs	r0, r5, #31
 800918c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8009190:	006d      	lsls	r5, r5, #1
 8009192:	3b01      	subs	r3, #1
 8009194:	e789      	b.n	80090aa <__ieee754_fmod+0xd6>
 8009196:	1ac9      	subs	r1, r1, r3
 8009198:	2914      	cmp	r1, #20
 800919a:	dc0a      	bgt.n	80091b2 <__ieee754_fmod+0x1de>
 800919c:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80091a0:	fa02 f303 	lsl.w	r3, r2, r3
 80091a4:	40cd      	lsrs	r5, r1
 80091a6:	432b      	orrs	r3, r5
 80091a8:	410a      	asrs	r2, r1
 80091aa:	ea42 0104 	orr.w	r1, r2, r4
 80091ae:	4618      	mov	r0, r3
 80091b0:	e732      	b.n	8009018 <__ieee754_fmod+0x44>
 80091b2:	291f      	cmp	r1, #31
 80091b4:	dc07      	bgt.n	80091c6 <__ieee754_fmod+0x1f2>
 80091b6:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80091ba:	40cd      	lsrs	r5, r1
 80091bc:	fa02 f303 	lsl.w	r3, r2, r3
 80091c0:	432b      	orrs	r3, r5
 80091c2:	4622      	mov	r2, r4
 80091c4:	e7f1      	b.n	80091aa <__ieee754_fmod+0x1d6>
 80091c6:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80091ca:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80091ce:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80091d2:	33e2      	adds	r3, #226	; 0xe2
 80091d4:	fa42 f303 	asr.w	r3, r2, r3
 80091d8:	e7f3      	b.n	80091c2 <__ieee754_fmod+0x1ee>
 80091da:	bf00      	nop
 80091dc:	7fefffff 	.word	0x7fefffff
 80091e0:	7ff00000 	.word	0x7ff00000
 80091e4:	0800bb40 	.word	0x0800bb40
 80091e8:	000fffff 	.word	0x000fffff
 80091ec:	fffffbed 	.word	0xfffffbed
 80091f0:	fffffc02 	.word	0xfffffc02
 80091f4:	fffffbe2 	.word	0xfffffbe2

080091f8 <__ieee754_atan2f>:
 80091f8:	ee10 2a90 	vmov	r2, s1
 80091fc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8009200:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009204:	b510      	push	{r4, lr}
 8009206:	eef0 7a40 	vmov.f32	s15, s0
 800920a:	dc06      	bgt.n	800921a <__ieee754_atan2f+0x22>
 800920c:	ee10 0a10 	vmov	r0, s0
 8009210:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8009214:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009218:	dd04      	ble.n	8009224 <__ieee754_atan2f+0x2c>
 800921a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800921e:	eeb0 0a67 	vmov.f32	s0, s15
 8009222:	bd10      	pop	{r4, pc}
 8009224:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8009228:	d103      	bne.n	8009232 <__ieee754_atan2f+0x3a>
 800922a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800922e:	f000 b893 	b.w	8009358 <atanf>
 8009232:	1794      	asrs	r4, r2, #30
 8009234:	f004 0402 	and.w	r4, r4, #2
 8009238:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800923c:	b943      	cbnz	r3, 8009250 <__ieee754_atan2f+0x58>
 800923e:	2c02      	cmp	r4, #2
 8009240:	d06e      	beq.n	8009320 <__ieee754_atan2f+0x128>
 8009242:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8009328 <__ieee754_atan2f+0x130>
 8009246:	2c03      	cmp	r4, #3
 8009248:	bf08      	it	eq
 800924a:	eef0 7a47 	vmoveq.f32	s15, s14
 800924e:	e7e6      	b.n	800921e <__ieee754_atan2f+0x26>
 8009250:	b941      	cbnz	r1, 8009264 <__ieee754_atan2f+0x6c>
 8009252:	eddf 7a36 	vldr	s15, [pc, #216]	; 800932c <__ieee754_atan2f+0x134>
 8009256:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8009330 <__ieee754_atan2f+0x138>
 800925a:	2800      	cmp	r0, #0
 800925c:	bfb8      	it	lt
 800925e:	eef0 7a47 	vmovlt.f32	s15, s14
 8009262:	e7dc      	b.n	800921e <__ieee754_atan2f+0x26>
 8009264:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009268:	d122      	bne.n	80092b0 <__ieee754_atan2f+0xb8>
 800926a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800926e:	d112      	bne.n	8009296 <__ieee754_atan2f+0x9e>
 8009270:	2c02      	cmp	r4, #2
 8009272:	d00a      	beq.n	800928a <__ieee754_atan2f+0x92>
 8009274:	2c03      	cmp	r4, #3
 8009276:	d00b      	beq.n	8009290 <__ieee754_atan2f+0x98>
 8009278:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8009334 <__ieee754_atan2f+0x13c>
 800927c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8009338 <__ieee754_atan2f+0x140>
 8009280:	2c01      	cmp	r4, #1
 8009282:	bf18      	it	ne
 8009284:	eef0 7a47 	vmovne.f32	s15, s14
 8009288:	e7c9      	b.n	800921e <__ieee754_atan2f+0x26>
 800928a:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800933c <__ieee754_atan2f+0x144>
 800928e:	e7c6      	b.n	800921e <__ieee754_atan2f+0x26>
 8009290:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8009340 <__ieee754_atan2f+0x148>
 8009294:	e7c3      	b.n	800921e <__ieee754_atan2f+0x26>
 8009296:	2c02      	cmp	r4, #2
 8009298:	d042      	beq.n	8009320 <__ieee754_atan2f+0x128>
 800929a:	2c03      	cmp	r4, #3
 800929c:	d005      	beq.n	80092aa <__ieee754_atan2f+0xb2>
 800929e:	2c01      	cmp	r4, #1
 80092a0:	eddf 7a28 	vldr	s15, [pc, #160]	; 8009344 <__ieee754_atan2f+0x14c>
 80092a4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8009348 <__ieee754_atan2f+0x150>
 80092a8:	e7eb      	b.n	8009282 <__ieee754_atan2f+0x8a>
 80092aa:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009328 <__ieee754_atan2f+0x130>
 80092ae:	e7b6      	b.n	800921e <__ieee754_atan2f+0x26>
 80092b0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80092b4:	d0cd      	beq.n	8009252 <__ieee754_atan2f+0x5a>
 80092b6:	1a5b      	subs	r3, r3, r1
 80092b8:	15db      	asrs	r3, r3, #23
 80092ba:	2b3c      	cmp	r3, #60	; 0x3c
 80092bc:	dc1a      	bgt.n	80092f4 <__ieee754_atan2f+0xfc>
 80092be:	2a00      	cmp	r2, #0
 80092c0:	da01      	bge.n	80092c6 <__ieee754_atan2f+0xce>
 80092c2:	333c      	adds	r3, #60	; 0x3c
 80092c4:	db19      	blt.n	80092fa <__ieee754_atan2f+0x102>
 80092c6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80092ca:	f000 f919 	bl	8009500 <fabsf>
 80092ce:	f000 f843 	bl	8009358 <atanf>
 80092d2:	eef0 7a40 	vmov.f32	s15, s0
 80092d6:	2c01      	cmp	r4, #1
 80092d8:	d012      	beq.n	8009300 <__ieee754_atan2f+0x108>
 80092da:	2c02      	cmp	r4, #2
 80092dc:	d017      	beq.n	800930e <__ieee754_atan2f+0x116>
 80092de:	2c00      	cmp	r4, #0
 80092e0:	d09d      	beq.n	800921e <__ieee754_atan2f+0x26>
 80092e2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800934c <__ieee754_atan2f+0x154>
 80092e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80092ea:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8009350 <__ieee754_atan2f+0x158>
 80092ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80092f2:	e794      	b.n	800921e <__ieee754_atan2f+0x26>
 80092f4:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800932c <__ieee754_atan2f+0x134>
 80092f8:	e7ed      	b.n	80092d6 <__ieee754_atan2f+0xde>
 80092fa:	eddf 7a13 	vldr	s15, [pc, #76]	; 8009348 <__ieee754_atan2f+0x150>
 80092fe:	e7ea      	b.n	80092d6 <__ieee754_atan2f+0xde>
 8009300:	ee17 3a90 	vmov	r3, s15
 8009304:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009308:	ee07 3a90 	vmov	s15, r3
 800930c:	e787      	b.n	800921e <__ieee754_atan2f+0x26>
 800930e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800934c <__ieee754_atan2f+0x154>
 8009312:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009316:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8009350 <__ieee754_atan2f+0x158>
 800931a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800931e:	e77e      	b.n	800921e <__ieee754_atan2f+0x26>
 8009320:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8009350 <__ieee754_atan2f+0x158>
 8009324:	e77b      	b.n	800921e <__ieee754_atan2f+0x26>
 8009326:	bf00      	nop
 8009328:	c0490fdb 	.word	0xc0490fdb
 800932c:	3fc90fdb 	.word	0x3fc90fdb
 8009330:	bfc90fdb 	.word	0xbfc90fdb
 8009334:	bf490fdb 	.word	0xbf490fdb
 8009338:	3f490fdb 	.word	0x3f490fdb
 800933c:	4016cbe4 	.word	0x4016cbe4
 8009340:	c016cbe4 	.word	0xc016cbe4
 8009344:	80000000 	.word	0x80000000
 8009348:	00000000 	.word	0x00000000
 800934c:	33bbbd2e 	.word	0x33bbbd2e
 8009350:	40490fdb 	.word	0x40490fdb

08009354 <matherr>:
 8009354:	2000      	movs	r0, #0
 8009356:	4770      	bx	lr

08009358 <atanf>:
 8009358:	b538      	push	{r3, r4, r5, lr}
 800935a:	ee10 5a10 	vmov	r5, s0
 800935e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8009362:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8009366:	eef0 7a40 	vmov.f32	s15, s0
 800936a:	db10      	blt.n	800938e <atanf+0x36>
 800936c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009370:	dd04      	ble.n	800937c <atanf+0x24>
 8009372:	ee70 7a00 	vadd.f32	s15, s0, s0
 8009376:	eeb0 0a67 	vmov.f32	s0, s15
 800937a:	bd38      	pop	{r3, r4, r5, pc}
 800937c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80094b4 <atanf+0x15c>
 8009380:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80094b8 <atanf+0x160>
 8009384:	2d00      	cmp	r5, #0
 8009386:	bfd8      	it	le
 8009388:	eef0 7a47 	vmovle.f32	s15, s14
 800938c:	e7f3      	b.n	8009376 <atanf+0x1e>
 800938e:	4b4b      	ldr	r3, [pc, #300]	; (80094bc <atanf+0x164>)
 8009390:	429c      	cmp	r4, r3
 8009392:	dc10      	bgt.n	80093b6 <atanf+0x5e>
 8009394:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8009398:	da0a      	bge.n	80093b0 <atanf+0x58>
 800939a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80094c0 <atanf+0x168>
 800939e:	ee30 7a07 	vadd.f32	s14, s0, s14
 80093a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093a6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80093aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093ae:	dce2      	bgt.n	8009376 <atanf+0x1e>
 80093b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093b4:	e013      	b.n	80093de <atanf+0x86>
 80093b6:	f000 f8a3 	bl	8009500 <fabsf>
 80093ba:	4b42      	ldr	r3, [pc, #264]	; (80094c4 <atanf+0x16c>)
 80093bc:	429c      	cmp	r4, r3
 80093be:	dc4f      	bgt.n	8009460 <atanf+0x108>
 80093c0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80093c4:	429c      	cmp	r4, r3
 80093c6:	dc41      	bgt.n	800944c <atanf+0xf4>
 80093c8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80093cc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80093d0:	eea0 7a27 	vfma.f32	s14, s0, s15
 80093d4:	2300      	movs	r3, #0
 80093d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80093da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80093de:	1c5a      	adds	r2, r3, #1
 80093e0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80093e4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80094c8 <atanf+0x170>
 80093e8:	eddf 5a38 	vldr	s11, [pc, #224]	; 80094cc <atanf+0x174>
 80093ec:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80094d0 <atanf+0x178>
 80093f0:	ee66 6a06 	vmul.f32	s13, s12, s12
 80093f4:	eee6 5a87 	vfma.f32	s11, s13, s14
 80093f8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80094d4 <atanf+0x17c>
 80093fc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009400:	eddf 5a35 	vldr	s11, [pc, #212]	; 80094d8 <atanf+0x180>
 8009404:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009408:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80094dc <atanf+0x184>
 800940c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009410:	eddf 5a33 	vldr	s11, [pc, #204]	; 80094e0 <atanf+0x188>
 8009414:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009418:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80094e4 <atanf+0x18c>
 800941c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8009420:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80094e8 <atanf+0x190>
 8009424:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009428:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80094ec <atanf+0x194>
 800942c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8009430:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80094f0 <atanf+0x198>
 8009434:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009438:	ee27 7a26 	vmul.f32	s14, s14, s13
 800943c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8009440:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009444:	d121      	bne.n	800948a <atanf+0x132>
 8009446:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800944a:	e794      	b.n	8009376 <atanf+0x1e>
 800944c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009450:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009454:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009458:	2301      	movs	r3, #1
 800945a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800945e:	e7be      	b.n	80093de <atanf+0x86>
 8009460:	4b24      	ldr	r3, [pc, #144]	; (80094f4 <atanf+0x19c>)
 8009462:	429c      	cmp	r4, r3
 8009464:	dc0b      	bgt.n	800947e <atanf+0x126>
 8009466:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800946a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800946e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009472:	2302      	movs	r3, #2
 8009474:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800947c:	e7af      	b.n	80093de <atanf+0x86>
 800947e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009482:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009486:	2303      	movs	r3, #3
 8009488:	e7a9      	b.n	80093de <atanf+0x86>
 800948a:	4a1b      	ldr	r2, [pc, #108]	; (80094f8 <atanf+0x1a0>)
 800948c:	491b      	ldr	r1, [pc, #108]	; (80094fc <atanf+0x1a4>)
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	441a      	add	r2, r3
 8009492:	440b      	add	r3, r1
 8009494:	edd3 6a00 	vldr	s13, [r3]
 8009498:	ee37 7a66 	vsub.f32	s14, s14, s13
 800949c:	2d00      	cmp	r5, #0
 800949e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80094a2:	ed92 7a00 	vldr	s14, [r2]
 80094a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80094aa:	bfb8      	it	lt
 80094ac:	eef1 7a67 	vneglt.f32	s15, s15
 80094b0:	e761      	b.n	8009376 <atanf+0x1e>
 80094b2:	bf00      	nop
 80094b4:	bfc90fdb 	.word	0xbfc90fdb
 80094b8:	3fc90fdb 	.word	0x3fc90fdb
 80094bc:	3edfffff 	.word	0x3edfffff
 80094c0:	7149f2ca 	.word	0x7149f2ca
 80094c4:	3f97ffff 	.word	0x3f97ffff
 80094c8:	3c8569d7 	.word	0x3c8569d7
 80094cc:	3d4bda59 	.word	0x3d4bda59
 80094d0:	bd6ef16b 	.word	0xbd6ef16b
 80094d4:	3d886b35 	.word	0x3d886b35
 80094d8:	3dba2e6e 	.word	0x3dba2e6e
 80094dc:	3e124925 	.word	0x3e124925
 80094e0:	3eaaaaab 	.word	0x3eaaaaab
 80094e4:	bd15a221 	.word	0xbd15a221
 80094e8:	bd9d8795 	.word	0xbd9d8795
 80094ec:	bde38e38 	.word	0xbde38e38
 80094f0:	be4ccccd 	.word	0xbe4ccccd
 80094f4:	401bffff 	.word	0x401bffff
 80094f8:	0800bb50 	.word	0x0800bb50
 80094fc:	0800bb60 	.word	0x0800bb60

08009500 <fabsf>:
 8009500:	ee10 3a10 	vmov	r3, s0
 8009504:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009508:	ee00 3a10 	vmov	s0, r3
 800950c:	4770      	bx	lr

0800950e <abort>:
 800950e:	b508      	push	{r3, lr}
 8009510:	2006      	movs	r0, #6
 8009512:	f000 fc7b 	bl	8009e0c <raise>
 8009516:	2001      	movs	r0, #1
 8009518:	f7fd ff52 	bl	80073c0 <_exit>

0800951c <__errno>:
 800951c:	4b01      	ldr	r3, [pc, #4]	; (8009524 <__errno+0x8>)
 800951e:	6818      	ldr	r0, [r3, #0]
 8009520:	4770      	bx	lr
 8009522:	bf00      	nop
 8009524:	20000010 	.word	0x20000010

08009528 <__libc_init_array>:
 8009528:	b570      	push	{r4, r5, r6, lr}
 800952a:	4e0d      	ldr	r6, [pc, #52]	; (8009560 <__libc_init_array+0x38>)
 800952c:	4c0d      	ldr	r4, [pc, #52]	; (8009564 <__libc_init_array+0x3c>)
 800952e:	1ba4      	subs	r4, r4, r6
 8009530:	10a4      	asrs	r4, r4, #2
 8009532:	2500      	movs	r5, #0
 8009534:	42a5      	cmp	r5, r4
 8009536:	d109      	bne.n	800954c <__libc_init_array+0x24>
 8009538:	4e0b      	ldr	r6, [pc, #44]	; (8009568 <__libc_init_array+0x40>)
 800953a:	4c0c      	ldr	r4, [pc, #48]	; (800956c <__libc_init_array+0x44>)
 800953c:	f001 fde2 	bl	800b104 <_init>
 8009540:	1ba4      	subs	r4, r4, r6
 8009542:	10a4      	asrs	r4, r4, #2
 8009544:	2500      	movs	r5, #0
 8009546:	42a5      	cmp	r5, r4
 8009548:	d105      	bne.n	8009556 <__libc_init_array+0x2e>
 800954a:	bd70      	pop	{r4, r5, r6, pc}
 800954c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009550:	4798      	blx	r3
 8009552:	3501      	adds	r5, #1
 8009554:	e7ee      	b.n	8009534 <__libc_init_array+0xc>
 8009556:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800955a:	4798      	blx	r3
 800955c:	3501      	adds	r5, #1
 800955e:	e7f2      	b.n	8009546 <__libc_init_array+0x1e>
 8009560:	0800bda0 	.word	0x0800bda0
 8009564:	0800bda0 	.word	0x0800bda0
 8009568:	0800bda0 	.word	0x0800bda0
 800956c:	0800bda8 	.word	0x0800bda8

08009570 <malloc>:
 8009570:	4b02      	ldr	r3, [pc, #8]	; (800957c <malloc+0xc>)
 8009572:	4601      	mov	r1, r0
 8009574:	6818      	ldr	r0, [r3, #0]
 8009576:	f000 b86d 	b.w	8009654 <_malloc_r>
 800957a:	bf00      	nop
 800957c:	20000010 	.word	0x20000010

08009580 <free>:
 8009580:	4b02      	ldr	r3, [pc, #8]	; (800958c <free+0xc>)
 8009582:	4601      	mov	r1, r0
 8009584:	6818      	ldr	r0, [r3, #0]
 8009586:	f000 b817 	b.w	80095b8 <_free_r>
 800958a:	bf00      	nop
 800958c:	20000010 	.word	0x20000010

08009590 <memcpy>:
 8009590:	b510      	push	{r4, lr}
 8009592:	1e43      	subs	r3, r0, #1
 8009594:	440a      	add	r2, r1
 8009596:	4291      	cmp	r1, r2
 8009598:	d100      	bne.n	800959c <memcpy+0xc>
 800959a:	bd10      	pop	{r4, pc}
 800959c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095a4:	e7f7      	b.n	8009596 <memcpy+0x6>

080095a6 <memset>:
 80095a6:	4402      	add	r2, r0
 80095a8:	4603      	mov	r3, r0
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d100      	bne.n	80095b0 <memset+0xa>
 80095ae:	4770      	bx	lr
 80095b0:	f803 1b01 	strb.w	r1, [r3], #1
 80095b4:	e7f9      	b.n	80095aa <memset+0x4>
	...

080095b8 <_free_r>:
 80095b8:	b538      	push	{r3, r4, r5, lr}
 80095ba:	4605      	mov	r5, r0
 80095bc:	2900      	cmp	r1, #0
 80095be:	d045      	beq.n	800964c <_free_r+0x94>
 80095c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095c4:	1f0c      	subs	r4, r1, #4
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	bfb8      	it	lt
 80095ca:	18e4      	addlt	r4, r4, r3
 80095cc:	f001 fa8e 	bl	800aaec <__malloc_lock>
 80095d0:	4a1f      	ldr	r2, [pc, #124]	; (8009650 <_free_r+0x98>)
 80095d2:	6813      	ldr	r3, [r2, #0]
 80095d4:	4610      	mov	r0, r2
 80095d6:	b933      	cbnz	r3, 80095e6 <_free_r+0x2e>
 80095d8:	6063      	str	r3, [r4, #4]
 80095da:	6014      	str	r4, [r2, #0]
 80095dc:	4628      	mov	r0, r5
 80095de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095e2:	f001 ba84 	b.w	800aaee <__malloc_unlock>
 80095e6:	42a3      	cmp	r3, r4
 80095e8:	d90c      	bls.n	8009604 <_free_r+0x4c>
 80095ea:	6821      	ldr	r1, [r4, #0]
 80095ec:	1862      	adds	r2, r4, r1
 80095ee:	4293      	cmp	r3, r2
 80095f0:	bf04      	itt	eq
 80095f2:	681a      	ldreq	r2, [r3, #0]
 80095f4:	685b      	ldreq	r3, [r3, #4]
 80095f6:	6063      	str	r3, [r4, #4]
 80095f8:	bf04      	itt	eq
 80095fa:	1852      	addeq	r2, r2, r1
 80095fc:	6022      	streq	r2, [r4, #0]
 80095fe:	6004      	str	r4, [r0, #0]
 8009600:	e7ec      	b.n	80095dc <_free_r+0x24>
 8009602:	4613      	mov	r3, r2
 8009604:	685a      	ldr	r2, [r3, #4]
 8009606:	b10a      	cbz	r2, 800960c <_free_r+0x54>
 8009608:	42a2      	cmp	r2, r4
 800960a:	d9fa      	bls.n	8009602 <_free_r+0x4a>
 800960c:	6819      	ldr	r1, [r3, #0]
 800960e:	1858      	adds	r0, r3, r1
 8009610:	42a0      	cmp	r0, r4
 8009612:	d10b      	bne.n	800962c <_free_r+0x74>
 8009614:	6820      	ldr	r0, [r4, #0]
 8009616:	4401      	add	r1, r0
 8009618:	1858      	adds	r0, r3, r1
 800961a:	4282      	cmp	r2, r0
 800961c:	6019      	str	r1, [r3, #0]
 800961e:	d1dd      	bne.n	80095dc <_free_r+0x24>
 8009620:	6810      	ldr	r0, [r2, #0]
 8009622:	6852      	ldr	r2, [r2, #4]
 8009624:	605a      	str	r2, [r3, #4]
 8009626:	4401      	add	r1, r0
 8009628:	6019      	str	r1, [r3, #0]
 800962a:	e7d7      	b.n	80095dc <_free_r+0x24>
 800962c:	d902      	bls.n	8009634 <_free_r+0x7c>
 800962e:	230c      	movs	r3, #12
 8009630:	602b      	str	r3, [r5, #0]
 8009632:	e7d3      	b.n	80095dc <_free_r+0x24>
 8009634:	6820      	ldr	r0, [r4, #0]
 8009636:	1821      	adds	r1, r4, r0
 8009638:	428a      	cmp	r2, r1
 800963a:	bf04      	itt	eq
 800963c:	6811      	ldreq	r1, [r2, #0]
 800963e:	6852      	ldreq	r2, [r2, #4]
 8009640:	6062      	str	r2, [r4, #4]
 8009642:	bf04      	itt	eq
 8009644:	1809      	addeq	r1, r1, r0
 8009646:	6021      	streq	r1, [r4, #0]
 8009648:	605c      	str	r4, [r3, #4]
 800964a:	e7c7      	b.n	80095dc <_free_r+0x24>
 800964c:	bd38      	pop	{r3, r4, r5, pc}
 800964e:	bf00      	nop
 8009650:	200035c8 	.word	0x200035c8

08009654 <_malloc_r>:
 8009654:	b570      	push	{r4, r5, r6, lr}
 8009656:	1ccd      	adds	r5, r1, #3
 8009658:	f025 0503 	bic.w	r5, r5, #3
 800965c:	3508      	adds	r5, #8
 800965e:	2d0c      	cmp	r5, #12
 8009660:	bf38      	it	cc
 8009662:	250c      	movcc	r5, #12
 8009664:	2d00      	cmp	r5, #0
 8009666:	4606      	mov	r6, r0
 8009668:	db01      	blt.n	800966e <_malloc_r+0x1a>
 800966a:	42a9      	cmp	r1, r5
 800966c:	d903      	bls.n	8009676 <_malloc_r+0x22>
 800966e:	230c      	movs	r3, #12
 8009670:	6033      	str	r3, [r6, #0]
 8009672:	2000      	movs	r0, #0
 8009674:	bd70      	pop	{r4, r5, r6, pc}
 8009676:	f001 fa39 	bl	800aaec <__malloc_lock>
 800967a:	4a21      	ldr	r2, [pc, #132]	; (8009700 <_malloc_r+0xac>)
 800967c:	6814      	ldr	r4, [r2, #0]
 800967e:	4621      	mov	r1, r4
 8009680:	b991      	cbnz	r1, 80096a8 <_malloc_r+0x54>
 8009682:	4c20      	ldr	r4, [pc, #128]	; (8009704 <_malloc_r+0xb0>)
 8009684:	6823      	ldr	r3, [r4, #0]
 8009686:	b91b      	cbnz	r3, 8009690 <_malloc_r+0x3c>
 8009688:	4630      	mov	r0, r6
 800968a:	f000 fb87 	bl	8009d9c <_sbrk_r>
 800968e:	6020      	str	r0, [r4, #0]
 8009690:	4629      	mov	r1, r5
 8009692:	4630      	mov	r0, r6
 8009694:	f000 fb82 	bl	8009d9c <_sbrk_r>
 8009698:	1c43      	adds	r3, r0, #1
 800969a:	d124      	bne.n	80096e6 <_malloc_r+0x92>
 800969c:	230c      	movs	r3, #12
 800969e:	6033      	str	r3, [r6, #0]
 80096a0:	4630      	mov	r0, r6
 80096a2:	f001 fa24 	bl	800aaee <__malloc_unlock>
 80096a6:	e7e4      	b.n	8009672 <_malloc_r+0x1e>
 80096a8:	680b      	ldr	r3, [r1, #0]
 80096aa:	1b5b      	subs	r3, r3, r5
 80096ac:	d418      	bmi.n	80096e0 <_malloc_r+0x8c>
 80096ae:	2b0b      	cmp	r3, #11
 80096b0:	d90f      	bls.n	80096d2 <_malloc_r+0x7e>
 80096b2:	600b      	str	r3, [r1, #0]
 80096b4:	50cd      	str	r5, [r1, r3]
 80096b6:	18cc      	adds	r4, r1, r3
 80096b8:	4630      	mov	r0, r6
 80096ba:	f001 fa18 	bl	800aaee <__malloc_unlock>
 80096be:	f104 000b 	add.w	r0, r4, #11
 80096c2:	1d23      	adds	r3, r4, #4
 80096c4:	f020 0007 	bic.w	r0, r0, #7
 80096c8:	1ac3      	subs	r3, r0, r3
 80096ca:	d0d3      	beq.n	8009674 <_malloc_r+0x20>
 80096cc:	425a      	negs	r2, r3
 80096ce:	50e2      	str	r2, [r4, r3]
 80096d0:	e7d0      	b.n	8009674 <_malloc_r+0x20>
 80096d2:	428c      	cmp	r4, r1
 80096d4:	684b      	ldr	r3, [r1, #4]
 80096d6:	bf16      	itet	ne
 80096d8:	6063      	strne	r3, [r4, #4]
 80096da:	6013      	streq	r3, [r2, #0]
 80096dc:	460c      	movne	r4, r1
 80096de:	e7eb      	b.n	80096b8 <_malloc_r+0x64>
 80096e0:	460c      	mov	r4, r1
 80096e2:	6849      	ldr	r1, [r1, #4]
 80096e4:	e7cc      	b.n	8009680 <_malloc_r+0x2c>
 80096e6:	1cc4      	adds	r4, r0, #3
 80096e8:	f024 0403 	bic.w	r4, r4, #3
 80096ec:	42a0      	cmp	r0, r4
 80096ee:	d005      	beq.n	80096fc <_malloc_r+0xa8>
 80096f0:	1a21      	subs	r1, r4, r0
 80096f2:	4630      	mov	r0, r6
 80096f4:	f000 fb52 	bl	8009d9c <_sbrk_r>
 80096f8:	3001      	adds	r0, #1
 80096fa:	d0cf      	beq.n	800969c <_malloc_r+0x48>
 80096fc:	6025      	str	r5, [r4, #0]
 80096fe:	e7db      	b.n	80096b8 <_malloc_r+0x64>
 8009700:	200035c8 	.word	0x200035c8
 8009704:	200035cc 	.word	0x200035cc

08009708 <__cvt>:
 8009708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800970c:	ec55 4b10 	vmov	r4, r5, d0
 8009710:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009712:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009716:	2d00      	cmp	r5, #0
 8009718:	460e      	mov	r6, r1
 800971a:	4691      	mov	r9, r2
 800971c:	4619      	mov	r1, r3
 800971e:	bfb8      	it	lt
 8009720:	4622      	movlt	r2, r4
 8009722:	462b      	mov	r3, r5
 8009724:	f027 0720 	bic.w	r7, r7, #32
 8009728:	bfbb      	ittet	lt
 800972a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800972e:	461d      	movlt	r5, r3
 8009730:	2300      	movge	r3, #0
 8009732:	232d      	movlt	r3, #45	; 0x2d
 8009734:	bfb8      	it	lt
 8009736:	4614      	movlt	r4, r2
 8009738:	2f46      	cmp	r7, #70	; 0x46
 800973a:	700b      	strb	r3, [r1, #0]
 800973c:	d004      	beq.n	8009748 <__cvt+0x40>
 800973e:	2f45      	cmp	r7, #69	; 0x45
 8009740:	d100      	bne.n	8009744 <__cvt+0x3c>
 8009742:	3601      	adds	r6, #1
 8009744:	2102      	movs	r1, #2
 8009746:	e000      	b.n	800974a <__cvt+0x42>
 8009748:	2103      	movs	r1, #3
 800974a:	ab03      	add	r3, sp, #12
 800974c:	9301      	str	r3, [sp, #4]
 800974e:	ab02      	add	r3, sp, #8
 8009750:	9300      	str	r3, [sp, #0]
 8009752:	4632      	mov	r2, r6
 8009754:	4653      	mov	r3, sl
 8009756:	ec45 4b10 	vmov	d0, r4, r5
 800975a:	f000 fc01 	bl	8009f60 <_dtoa_r>
 800975e:	2f47      	cmp	r7, #71	; 0x47
 8009760:	4680      	mov	r8, r0
 8009762:	d102      	bne.n	800976a <__cvt+0x62>
 8009764:	f019 0f01 	tst.w	r9, #1
 8009768:	d026      	beq.n	80097b8 <__cvt+0xb0>
 800976a:	2f46      	cmp	r7, #70	; 0x46
 800976c:	eb08 0906 	add.w	r9, r8, r6
 8009770:	d111      	bne.n	8009796 <__cvt+0x8e>
 8009772:	f898 3000 	ldrb.w	r3, [r8]
 8009776:	2b30      	cmp	r3, #48	; 0x30
 8009778:	d10a      	bne.n	8009790 <__cvt+0x88>
 800977a:	2200      	movs	r2, #0
 800977c:	2300      	movs	r3, #0
 800977e:	4620      	mov	r0, r4
 8009780:	4629      	mov	r1, r5
 8009782:	f7f7 f96d 	bl	8000a60 <__aeabi_dcmpeq>
 8009786:	b918      	cbnz	r0, 8009790 <__cvt+0x88>
 8009788:	f1c6 0601 	rsb	r6, r6, #1
 800978c:	f8ca 6000 	str.w	r6, [sl]
 8009790:	f8da 3000 	ldr.w	r3, [sl]
 8009794:	4499      	add	r9, r3
 8009796:	2200      	movs	r2, #0
 8009798:	2300      	movs	r3, #0
 800979a:	4620      	mov	r0, r4
 800979c:	4629      	mov	r1, r5
 800979e:	f7f7 f95f 	bl	8000a60 <__aeabi_dcmpeq>
 80097a2:	b938      	cbnz	r0, 80097b4 <__cvt+0xac>
 80097a4:	2230      	movs	r2, #48	; 0x30
 80097a6:	9b03      	ldr	r3, [sp, #12]
 80097a8:	454b      	cmp	r3, r9
 80097aa:	d205      	bcs.n	80097b8 <__cvt+0xb0>
 80097ac:	1c59      	adds	r1, r3, #1
 80097ae:	9103      	str	r1, [sp, #12]
 80097b0:	701a      	strb	r2, [r3, #0]
 80097b2:	e7f8      	b.n	80097a6 <__cvt+0x9e>
 80097b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80097b8:	9b03      	ldr	r3, [sp, #12]
 80097ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097bc:	eba3 0308 	sub.w	r3, r3, r8
 80097c0:	4640      	mov	r0, r8
 80097c2:	6013      	str	r3, [r2, #0]
 80097c4:	b004      	add	sp, #16
 80097c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080097ca <__exponent>:
 80097ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097cc:	2900      	cmp	r1, #0
 80097ce:	4604      	mov	r4, r0
 80097d0:	bfba      	itte	lt
 80097d2:	4249      	neglt	r1, r1
 80097d4:	232d      	movlt	r3, #45	; 0x2d
 80097d6:	232b      	movge	r3, #43	; 0x2b
 80097d8:	2909      	cmp	r1, #9
 80097da:	f804 2b02 	strb.w	r2, [r4], #2
 80097de:	7043      	strb	r3, [r0, #1]
 80097e0:	dd20      	ble.n	8009824 <__exponent+0x5a>
 80097e2:	f10d 0307 	add.w	r3, sp, #7
 80097e6:	461f      	mov	r7, r3
 80097e8:	260a      	movs	r6, #10
 80097ea:	fb91 f5f6 	sdiv	r5, r1, r6
 80097ee:	fb06 1115 	mls	r1, r6, r5, r1
 80097f2:	3130      	adds	r1, #48	; 0x30
 80097f4:	2d09      	cmp	r5, #9
 80097f6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80097fa:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80097fe:	4629      	mov	r1, r5
 8009800:	dc09      	bgt.n	8009816 <__exponent+0x4c>
 8009802:	3130      	adds	r1, #48	; 0x30
 8009804:	3b02      	subs	r3, #2
 8009806:	f802 1c01 	strb.w	r1, [r2, #-1]
 800980a:	42bb      	cmp	r3, r7
 800980c:	4622      	mov	r2, r4
 800980e:	d304      	bcc.n	800981a <__exponent+0x50>
 8009810:	1a10      	subs	r0, r2, r0
 8009812:	b003      	add	sp, #12
 8009814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009816:	4613      	mov	r3, r2
 8009818:	e7e7      	b.n	80097ea <__exponent+0x20>
 800981a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800981e:	f804 2b01 	strb.w	r2, [r4], #1
 8009822:	e7f2      	b.n	800980a <__exponent+0x40>
 8009824:	2330      	movs	r3, #48	; 0x30
 8009826:	4419      	add	r1, r3
 8009828:	7083      	strb	r3, [r0, #2]
 800982a:	1d02      	adds	r2, r0, #4
 800982c:	70c1      	strb	r1, [r0, #3]
 800982e:	e7ef      	b.n	8009810 <__exponent+0x46>

08009830 <_printf_float>:
 8009830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009834:	b08d      	sub	sp, #52	; 0x34
 8009836:	460c      	mov	r4, r1
 8009838:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800983c:	4616      	mov	r6, r2
 800983e:	461f      	mov	r7, r3
 8009840:	4605      	mov	r5, r0
 8009842:	f001 f945 	bl	800aad0 <_localeconv_r>
 8009846:	6803      	ldr	r3, [r0, #0]
 8009848:	9304      	str	r3, [sp, #16]
 800984a:	4618      	mov	r0, r3
 800984c:	f7f6 fcdc 	bl	8000208 <strlen>
 8009850:	2300      	movs	r3, #0
 8009852:	930a      	str	r3, [sp, #40]	; 0x28
 8009854:	f8d8 3000 	ldr.w	r3, [r8]
 8009858:	9005      	str	r0, [sp, #20]
 800985a:	3307      	adds	r3, #7
 800985c:	f023 0307 	bic.w	r3, r3, #7
 8009860:	f103 0208 	add.w	r2, r3, #8
 8009864:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009868:	f8d4 b000 	ldr.w	fp, [r4]
 800986c:	f8c8 2000 	str.w	r2, [r8]
 8009870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009874:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009878:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800987c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009880:	9307      	str	r3, [sp, #28]
 8009882:	f8cd 8018 	str.w	r8, [sp, #24]
 8009886:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800988a:	4ba7      	ldr	r3, [pc, #668]	; (8009b28 <_printf_float+0x2f8>)
 800988c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009890:	f7f7 f918 	bl	8000ac4 <__aeabi_dcmpun>
 8009894:	bb70      	cbnz	r0, 80098f4 <_printf_float+0xc4>
 8009896:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800989a:	4ba3      	ldr	r3, [pc, #652]	; (8009b28 <_printf_float+0x2f8>)
 800989c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098a0:	f7f7 f8f2 	bl	8000a88 <__aeabi_dcmple>
 80098a4:	bb30      	cbnz	r0, 80098f4 <_printf_float+0xc4>
 80098a6:	2200      	movs	r2, #0
 80098a8:	2300      	movs	r3, #0
 80098aa:	4640      	mov	r0, r8
 80098ac:	4649      	mov	r1, r9
 80098ae:	f7f7 f8e1 	bl	8000a74 <__aeabi_dcmplt>
 80098b2:	b110      	cbz	r0, 80098ba <_printf_float+0x8a>
 80098b4:	232d      	movs	r3, #45	; 0x2d
 80098b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098ba:	4a9c      	ldr	r2, [pc, #624]	; (8009b2c <_printf_float+0x2fc>)
 80098bc:	4b9c      	ldr	r3, [pc, #624]	; (8009b30 <_printf_float+0x300>)
 80098be:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80098c2:	bf8c      	ite	hi
 80098c4:	4690      	movhi	r8, r2
 80098c6:	4698      	movls	r8, r3
 80098c8:	2303      	movs	r3, #3
 80098ca:	f02b 0204 	bic.w	r2, fp, #4
 80098ce:	6123      	str	r3, [r4, #16]
 80098d0:	6022      	str	r2, [r4, #0]
 80098d2:	f04f 0900 	mov.w	r9, #0
 80098d6:	9700      	str	r7, [sp, #0]
 80098d8:	4633      	mov	r3, r6
 80098da:	aa0b      	add	r2, sp, #44	; 0x2c
 80098dc:	4621      	mov	r1, r4
 80098de:	4628      	mov	r0, r5
 80098e0:	f000 f9e6 	bl	8009cb0 <_printf_common>
 80098e4:	3001      	adds	r0, #1
 80098e6:	f040 808d 	bne.w	8009a04 <_printf_float+0x1d4>
 80098ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098ee:	b00d      	add	sp, #52	; 0x34
 80098f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f4:	4642      	mov	r2, r8
 80098f6:	464b      	mov	r3, r9
 80098f8:	4640      	mov	r0, r8
 80098fa:	4649      	mov	r1, r9
 80098fc:	f7f7 f8e2 	bl	8000ac4 <__aeabi_dcmpun>
 8009900:	b110      	cbz	r0, 8009908 <_printf_float+0xd8>
 8009902:	4a8c      	ldr	r2, [pc, #560]	; (8009b34 <_printf_float+0x304>)
 8009904:	4b8c      	ldr	r3, [pc, #560]	; (8009b38 <_printf_float+0x308>)
 8009906:	e7da      	b.n	80098be <_printf_float+0x8e>
 8009908:	6861      	ldr	r1, [r4, #4]
 800990a:	1c4b      	adds	r3, r1, #1
 800990c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009910:	a80a      	add	r0, sp, #40	; 0x28
 8009912:	d13e      	bne.n	8009992 <_printf_float+0x162>
 8009914:	2306      	movs	r3, #6
 8009916:	6063      	str	r3, [r4, #4]
 8009918:	2300      	movs	r3, #0
 800991a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800991e:	ab09      	add	r3, sp, #36	; 0x24
 8009920:	9300      	str	r3, [sp, #0]
 8009922:	ec49 8b10 	vmov	d0, r8, r9
 8009926:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800992a:	6022      	str	r2, [r4, #0]
 800992c:	f8cd a004 	str.w	sl, [sp, #4]
 8009930:	6861      	ldr	r1, [r4, #4]
 8009932:	4628      	mov	r0, r5
 8009934:	f7ff fee8 	bl	8009708 <__cvt>
 8009938:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800993c:	2b47      	cmp	r3, #71	; 0x47
 800993e:	4680      	mov	r8, r0
 8009940:	d109      	bne.n	8009956 <_printf_float+0x126>
 8009942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009944:	1cd8      	adds	r0, r3, #3
 8009946:	db02      	blt.n	800994e <_printf_float+0x11e>
 8009948:	6862      	ldr	r2, [r4, #4]
 800994a:	4293      	cmp	r3, r2
 800994c:	dd47      	ble.n	80099de <_printf_float+0x1ae>
 800994e:	f1aa 0a02 	sub.w	sl, sl, #2
 8009952:	fa5f fa8a 	uxtb.w	sl, sl
 8009956:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800995a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800995c:	d824      	bhi.n	80099a8 <_printf_float+0x178>
 800995e:	3901      	subs	r1, #1
 8009960:	4652      	mov	r2, sl
 8009962:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009966:	9109      	str	r1, [sp, #36]	; 0x24
 8009968:	f7ff ff2f 	bl	80097ca <__exponent>
 800996c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800996e:	1813      	adds	r3, r2, r0
 8009970:	2a01      	cmp	r2, #1
 8009972:	4681      	mov	r9, r0
 8009974:	6123      	str	r3, [r4, #16]
 8009976:	dc02      	bgt.n	800997e <_printf_float+0x14e>
 8009978:	6822      	ldr	r2, [r4, #0]
 800997a:	07d1      	lsls	r1, r2, #31
 800997c:	d501      	bpl.n	8009982 <_printf_float+0x152>
 800997e:	3301      	adds	r3, #1
 8009980:	6123      	str	r3, [r4, #16]
 8009982:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009986:	2b00      	cmp	r3, #0
 8009988:	d0a5      	beq.n	80098d6 <_printf_float+0xa6>
 800998a:	232d      	movs	r3, #45	; 0x2d
 800998c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009990:	e7a1      	b.n	80098d6 <_printf_float+0xa6>
 8009992:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009996:	f000 8177 	beq.w	8009c88 <_printf_float+0x458>
 800999a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800999e:	d1bb      	bne.n	8009918 <_printf_float+0xe8>
 80099a0:	2900      	cmp	r1, #0
 80099a2:	d1b9      	bne.n	8009918 <_printf_float+0xe8>
 80099a4:	2301      	movs	r3, #1
 80099a6:	e7b6      	b.n	8009916 <_printf_float+0xe6>
 80099a8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80099ac:	d119      	bne.n	80099e2 <_printf_float+0x1b2>
 80099ae:	2900      	cmp	r1, #0
 80099b0:	6863      	ldr	r3, [r4, #4]
 80099b2:	dd0c      	ble.n	80099ce <_printf_float+0x19e>
 80099b4:	6121      	str	r1, [r4, #16]
 80099b6:	b913      	cbnz	r3, 80099be <_printf_float+0x18e>
 80099b8:	6822      	ldr	r2, [r4, #0]
 80099ba:	07d2      	lsls	r2, r2, #31
 80099bc:	d502      	bpl.n	80099c4 <_printf_float+0x194>
 80099be:	3301      	adds	r3, #1
 80099c0:	440b      	add	r3, r1
 80099c2:	6123      	str	r3, [r4, #16]
 80099c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099c6:	65a3      	str	r3, [r4, #88]	; 0x58
 80099c8:	f04f 0900 	mov.w	r9, #0
 80099cc:	e7d9      	b.n	8009982 <_printf_float+0x152>
 80099ce:	b913      	cbnz	r3, 80099d6 <_printf_float+0x1a6>
 80099d0:	6822      	ldr	r2, [r4, #0]
 80099d2:	07d0      	lsls	r0, r2, #31
 80099d4:	d501      	bpl.n	80099da <_printf_float+0x1aa>
 80099d6:	3302      	adds	r3, #2
 80099d8:	e7f3      	b.n	80099c2 <_printf_float+0x192>
 80099da:	2301      	movs	r3, #1
 80099dc:	e7f1      	b.n	80099c2 <_printf_float+0x192>
 80099de:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80099e2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80099e6:	4293      	cmp	r3, r2
 80099e8:	db05      	blt.n	80099f6 <_printf_float+0x1c6>
 80099ea:	6822      	ldr	r2, [r4, #0]
 80099ec:	6123      	str	r3, [r4, #16]
 80099ee:	07d1      	lsls	r1, r2, #31
 80099f0:	d5e8      	bpl.n	80099c4 <_printf_float+0x194>
 80099f2:	3301      	adds	r3, #1
 80099f4:	e7e5      	b.n	80099c2 <_printf_float+0x192>
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	bfd4      	ite	le
 80099fa:	f1c3 0302 	rsble	r3, r3, #2
 80099fe:	2301      	movgt	r3, #1
 8009a00:	4413      	add	r3, r2
 8009a02:	e7de      	b.n	80099c2 <_printf_float+0x192>
 8009a04:	6823      	ldr	r3, [r4, #0]
 8009a06:	055a      	lsls	r2, r3, #21
 8009a08:	d407      	bmi.n	8009a1a <_printf_float+0x1ea>
 8009a0a:	6923      	ldr	r3, [r4, #16]
 8009a0c:	4642      	mov	r2, r8
 8009a0e:	4631      	mov	r1, r6
 8009a10:	4628      	mov	r0, r5
 8009a12:	47b8      	blx	r7
 8009a14:	3001      	adds	r0, #1
 8009a16:	d12b      	bne.n	8009a70 <_printf_float+0x240>
 8009a18:	e767      	b.n	80098ea <_printf_float+0xba>
 8009a1a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009a1e:	f240 80dc 	bls.w	8009bda <_printf_float+0x3aa>
 8009a22:	2200      	movs	r2, #0
 8009a24:	2300      	movs	r3, #0
 8009a26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a2a:	f7f7 f819 	bl	8000a60 <__aeabi_dcmpeq>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	d033      	beq.n	8009a9a <_printf_float+0x26a>
 8009a32:	2301      	movs	r3, #1
 8009a34:	4a41      	ldr	r2, [pc, #260]	; (8009b3c <_printf_float+0x30c>)
 8009a36:	4631      	mov	r1, r6
 8009a38:	4628      	mov	r0, r5
 8009a3a:	47b8      	blx	r7
 8009a3c:	3001      	adds	r0, #1
 8009a3e:	f43f af54 	beq.w	80098ea <_printf_float+0xba>
 8009a42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a46:	429a      	cmp	r2, r3
 8009a48:	db02      	blt.n	8009a50 <_printf_float+0x220>
 8009a4a:	6823      	ldr	r3, [r4, #0]
 8009a4c:	07d8      	lsls	r0, r3, #31
 8009a4e:	d50f      	bpl.n	8009a70 <_printf_float+0x240>
 8009a50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a54:	4631      	mov	r1, r6
 8009a56:	4628      	mov	r0, r5
 8009a58:	47b8      	blx	r7
 8009a5a:	3001      	adds	r0, #1
 8009a5c:	f43f af45 	beq.w	80098ea <_printf_float+0xba>
 8009a60:	f04f 0800 	mov.w	r8, #0
 8009a64:	f104 091a 	add.w	r9, r4, #26
 8009a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	4543      	cmp	r3, r8
 8009a6e:	dc09      	bgt.n	8009a84 <_printf_float+0x254>
 8009a70:	6823      	ldr	r3, [r4, #0]
 8009a72:	079b      	lsls	r3, r3, #30
 8009a74:	f100 8103 	bmi.w	8009c7e <_printf_float+0x44e>
 8009a78:	68e0      	ldr	r0, [r4, #12]
 8009a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a7c:	4298      	cmp	r0, r3
 8009a7e:	bfb8      	it	lt
 8009a80:	4618      	movlt	r0, r3
 8009a82:	e734      	b.n	80098ee <_printf_float+0xbe>
 8009a84:	2301      	movs	r3, #1
 8009a86:	464a      	mov	r2, r9
 8009a88:	4631      	mov	r1, r6
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	47b8      	blx	r7
 8009a8e:	3001      	adds	r0, #1
 8009a90:	f43f af2b 	beq.w	80098ea <_printf_float+0xba>
 8009a94:	f108 0801 	add.w	r8, r8, #1
 8009a98:	e7e6      	b.n	8009a68 <_printf_float+0x238>
 8009a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	dc2b      	bgt.n	8009af8 <_printf_float+0x2c8>
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	4a26      	ldr	r2, [pc, #152]	; (8009b3c <_printf_float+0x30c>)
 8009aa4:	4631      	mov	r1, r6
 8009aa6:	4628      	mov	r0, r5
 8009aa8:	47b8      	blx	r7
 8009aaa:	3001      	adds	r0, #1
 8009aac:	f43f af1d 	beq.w	80098ea <_printf_float+0xba>
 8009ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ab2:	b923      	cbnz	r3, 8009abe <_printf_float+0x28e>
 8009ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ab6:	b913      	cbnz	r3, 8009abe <_printf_float+0x28e>
 8009ab8:	6823      	ldr	r3, [r4, #0]
 8009aba:	07d9      	lsls	r1, r3, #31
 8009abc:	d5d8      	bpl.n	8009a70 <_printf_float+0x240>
 8009abe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ac2:	4631      	mov	r1, r6
 8009ac4:	4628      	mov	r0, r5
 8009ac6:	47b8      	blx	r7
 8009ac8:	3001      	adds	r0, #1
 8009aca:	f43f af0e 	beq.w	80098ea <_printf_float+0xba>
 8009ace:	f04f 0900 	mov.w	r9, #0
 8009ad2:	f104 0a1a 	add.w	sl, r4, #26
 8009ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ad8:	425b      	negs	r3, r3
 8009ada:	454b      	cmp	r3, r9
 8009adc:	dc01      	bgt.n	8009ae2 <_printf_float+0x2b2>
 8009ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ae0:	e794      	b.n	8009a0c <_printf_float+0x1dc>
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	4652      	mov	r2, sl
 8009ae6:	4631      	mov	r1, r6
 8009ae8:	4628      	mov	r0, r5
 8009aea:	47b8      	blx	r7
 8009aec:	3001      	adds	r0, #1
 8009aee:	f43f aefc 	beq.w	80098ea <_printf_float+0xba>
 8009af2:	f109 0901 	add.w	r9, r9, #1
 8009af6:	e7ee      	b.n	8009ad6 <_printf_float+0x2a6>
 8009af8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009afa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009afc:	429a      	cmp	r2, r3
 8009afe:	bfa8      	it	ge
 8009b00:	461a      	movge	r2, r3
 8009b02:	2a00      	cmp	r2, #0
 8009b04:	4691      	mov	r9, r2
 8009b06:	dd07      	ble.n	8009b18 <_printf_float+0x2e8>
 8009b08:	4613      	mov	r3, r2
 8009b0a:	4631      	mov	r1, r6
 8009b0c:	4642      	mov	r2, r8
 8009b0e:	4628      	mov	r0, r5
 8009b10:	47b8      	blx	r7
 8009b12:	3001      	adds	r0, #1
 8009b14:	f43f aee9 	beq.w	80098ea <_printf_float+0xba>
 8009b18:	f104 031a 	add.w	r3, r4, #26
 8009b1c:	f04f 0b00 	mov.w	fp, #0
 8009b20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b24:	9306      	str	r3, [sp, #24]
 8009b26:	e015      	b.n	8009b54 <_printf_float+0x324>
 8009b28:	7fefffff 	.word	0x7fefffff
 8009b2c:	0800bb74 	.word	0x0800bb74
 8009b30:	0800bb70 	.word	0x0800bb70
 8009b34:	0800bb7c 	.word	0x0800bb7c
 8009b38:	0800bb78 	.word	0x0800bb78
 8009b3c:	0800bb80 	.word	0x0800bb80
 8009b40:	2301      	movs	r3, #1
 8009b42:	9a06      	ldr	r2, [sp, #24]
 8009b44:	4631      	mov	r1, r6
 8009b46:	4628      	mov	r0, r5
 8009b48:	47b8      	blx	r7
 8009b4a:	3001      	adds	r0, #1
 8009b4c:	f43f aecd 	beq.w	80098ea <_printf_float+0xba>
 8009b50:	f10b 0b01 	add.w	fp, fp, #1
 8009b54:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009b58:	ebaa 0309 	sub.w	r3, sl, r9
 8009b5c:	455b      	cmp	r3, fp
 8009b5e:	dcef      	bgt.n	8009b40 <_printf_float+0x310>
 8009b60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b64:	429a      	cmp	r2, r3
 8009b66:	44d0      	add	r8, sl
 8009b68:	db15      	blt.n	8009b96 <_printf_float+0x366>
 8009b6a:	6823      	ldr	r3, [r4, #0]
 8009b6c:	07da      	lsls	r2, r3, #31
 8009b6e:	d412      	bmi.n	8009b96 <_printf_float+0x366>
 8009b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b74:	eba3 020a 	sub.w	r2, r3, sl
 8009b78:	eba3 0a01 	sub.w	sl, r3, r1
 8009b7c:	4592      	cmp	sl, r2
 8009b7e:	bfa8      	it	ge
 8009b80:	4692      	movge	sl, r2
 8009b82:	f1ba 0f00 	cmp.w	sl, #0
 8009b86:	dc0e      	bgt.n	8009ba6 <_printf_float+0x376>
 8009b88:	f04f 0800 	mov.w	r8, #0
 8009b8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b90:	f104 091a 	add.w	r9, r4, #26
 8009b94:	e019      	b.n	8009bca <_printf_float+0x39a>
 8009b96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b9a:	4631      	mov	r1, r6
 8009b9c:	4628      	mov	r0, r5
 8009b9e:	47b8      	blx	r7
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	d1e5      	bne.n	8009b70 <_printf_float+0x340>
 8009ba4:	e6a1      	b.n	80098ea <_printf_float+0xba>
 8009ba6:	4653      	mov	r3, sl
 8009ba8:	4642      	mov	r2, r8
 8009baa:	4631      	mov	r1, r6
 8009bac:	4628      	mov	r0, r5
 8009bae:	47b8      	blx	r7
 8009bb0:	3001      	adds	r0, #1
 8009bb2:	d1e9      	bne.n	8009b88 <_printf_float+0x358>
 8009bb4:	e699      	b.n	80098ea <_printf_float+0xba>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	464a      	mov	r2, r9
 8009bba:	4631      	mov	r1, r6
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	47b8      	blx	r7
 8009bc0:	3001      	adds	r0, #1
 8009bc2:	f43f ae92 	beq.w	80098ea <_printf_float+0xba>
 8009bc6:	f108 0801 	add.w	r8, r8, #1
 8009bca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bce:	1a9b      	subs	r3, r3, r2
 8009bd0:	eba3 030a 	sub.w	r3, r3, sl
 8009bd4:	4543      	cmp	r3, r8
 8009bd6:	dcee      	bgt.n	8009bb6 <_printf_float+0x386>
 8009bd8:	e74a      	b.n	8009a70 <_printf_float+0x240>
 8009bda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bdc:	2a01      	cmp	r2, #1
 8009bde:	dc01      	bgt.n	8009be4 <_printf_float+0x3b4>
 8009be0:	07db      	lsls	r3, r3, #31
 8009be2:	d53a      	bpl.n	8009c5a <_printf_float+0x42a>
 8009be4:	2301      	movs	r3, #1
 8009be6:	4642      	mov	r2, r8
 8009be8:	4631      	mov	r1, r6
 8009bea:	4628      	mov	r0, r5
 8009bec:	47b8      	blx	r7
 8009bee:	3001      	adds	r0, #1
 8009bf0:	f43f ae7b 	beq.w	80098ea <_printf_float+0xba>
 8009bf4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bf8:	4631      	mov	r1, r6
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	47b8      	blx	r7
 8009bfe:	3001      	adds	r0, #1
 8009c00:	f108 0801 	add.w	r8, r8, #1
 8009c04:	f43f ae71 	beq.w	80098ea <_printf_float+0xba>
 8009c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8009c10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c14:	2300      	movs	r3, #0
 8009c16:	f7f6 ff23 	bl	8000a60 <__aeabi_dcmpeq>
 8009c1a:	b9c8      	cbnz	r0, 8009c50 <_printf_float+0x420>
 8009c1c:	4653      	mov	r3, sl
 8009c1e:	4642      	mov	r2, r8
 8009c20:	4631      	mov	r1, r6
 8009c22:	4628      	mov	r0, r5
 8009c24:	47b8      	blx	r7
 8009c26:	3001      	adds	r0, #1
 8009c28:	d10e      	bne.n	8009c48 <_printf_float+0x418>
 8009c2a:	e65e      	b.n	80098ea <_printf_float+0xba>
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	4652      	mov	r2, sl
 8009c30:	4631      	mov	r1, r6
 8009c32:	4628      	mov	r0, r5
 8009c34:	47b8      	blx	r7
 8009c36:	3001      	adds	r0, #1
 8009c38:	f43f ae57 	beq.w	80098ea <_printf_float+0xba>
 8009c3c:	f108 0801 	add.w	r8, r8, #1
 8009c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c42:	3b01      	subs	r3, #1
 8009c44:	4543      	cmp	r3, r8
 8009c46:	dcf1      	bgt.n	8009c2c <_printf_float+0x3fc>
 8009c48:	464b      	mov	r3, r9
 8009c4a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009c4e:	e6de      	b.n	8009a0e <_printf_float+0x1de>
 8009c50:	f04f 0800 	mov.w	r8, #0
 8009c54:	f104 0a1a 	add.w	sl, r4, #26
 8009c58:	e7f2      	b.n	8009c40 <_printf_float+0x410>
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e7df      	b.n	8009c1e <_printf_float+0x3ee>
 8009c5e:	2301      	movs	r3, #1
 8009c60:	464a      	mov	r2, r9
 8009c62:	4631      	mov	r1, r6
 8009c64:	4628      	mov	r0, r5
 8009c66:	47b8      	blx	r7
 8009c68:	3001      	adds	r0, #1
 8009c6a:	f43f ae3e 	beq.w	80098ea <_printf_float+0xba>
 8009c6e:	f108 0801 	add.w	r8, r8, #1
 8009c72:	68e3      	ldr	r3, [r4, #12]
 8009c74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c76:	1a9b      	subs	r3, r3, r2
 8009c78:	4543      	cmp	r3, r8
 8009c7a:	dcf0      	bgt.n	8009c5e <_printf_float+0x42e>
 8009c7c:	e6fc      	b.n	8009a78 <_printf_float+0x248>
 8009c7e:	f04f 0800 	mov.w	r8, #0
 8009c82:	f104 0919 	add.w	r9, r4, #25
 8009c86:	e7f4      	b.n	8009c72 <_printf_float+0x442>
 8009c88:	2900      	cmp	r1, #0
 8009c8a:	f43f ae8b 	beq.w	80099a4 <_printf_float+0x174>
 8009c8e:	2300      	movs	r3, #0
 8009c90:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009c94:	ab09      	add	r3, sp, #36	; 0x24
 8009c96:	9300      	str	r3, [sp, #0]
 8009c98:	ec49 8b10 	vmov	d0, r8, r9
 8009c9c:	6022      	str	r2, [r4, #0]
 8009c9e:	f8cd a004 	str.w	sl, [sp, #4]
 8009ca2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	f7ff fd2e 	bl	8009708 <__cvt>
 8009cac:	4680      	mov	r8, r0
 8009cae:	e648      	b.n	8009942 <_printf_float+0x112>

08009cb0 <_printf_common>:
 8009cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cb4:	4691      	mov	r9, r2
 8009cb6:	461f      	mov	r7, r3
 8009cb8:	688a      	ldr	r2, [r1, #8]
 8009cba:	690b      	ldr	r3, [r1, #16]
 8009cbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	bfb8      	it	lt
 8009cc4:	4613      	movlt	r3, r2
 8009cc6:	f8c9 3000 	str.w	r3, [r9]
 8009cca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009cce:	4606      	mov	r6, r0
 8009cd0:	460c      	mov	r4, r1
 8009cd2:	b112      	cbz	r2, 8009cda <_printf_common+0x2a>
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	f8c9 3000 	str.w	r3, [r9]
 8009cda:	6823      	ldr	r3, [r4, #0]
 8009cdc:	0699      	lsls	r1, r3, #26
 8009cde:	bf42      	ittt	mi
 8009ce0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009ce4:	3302      	addmi	r3, #2
 8009ce6:	f8c9 3000 	strmi.w	r3, [r9]
 8009cea:	6825      	ldr	r5, [r4, #0]
 8009cec:	f015 0506 	ands.w	r5, r5, #6
 8009cf0:	d107      	bne.n	8009d02 <_printf_common+0x52>
 8009cf2:	f104 0a19 	add.w	sl, r4, #25
 8009cf6:	68e3      	ldr	r3, [r4, #12]
 8009cf8:	f8d9 2000 	ldr.w	r2, [r9]
 8009cfc:	1a9b      	subs	r3, r3, r2
 8009cfe:	42ab      	cmp	r3, r5
 8009d00:	dc28      	bgt.n	8009d54 <_printf_common+0xa4>
 8009d02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009d06:	6822      	ldr	r2, [r4, #0]
 8009d08:	3300      	adds	r3, #0
 8009d0a:	bf18      	it	ne
 8009d0c:	2301      	movne	r3, #1
 8009d0e:	0692      	lsls	r2, r2, #26
 8009d10:	d42d      	bmi.n	8009d6e <_printf_common+0xbe>
 8009d12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d16:	4639      	mov	r1, r7
 8009d18:	4630      	mov	r0, r6
 8009d1a:	47c0      	blx	r8
 8009d1c:	3001      	adds	r0, #1
 8009d1e:	d020      	beq.n	8009d62 <_printf_common+0xb2>
 8009d20:	6823      	ldr	r3, [r4, #0]
 8009d22:	68e5      	ldr	r5, [r4, #12]
 8009d24:	f8d9 2000 	ldr.w	r2, [r9]
 8009d28:	f003 0306 	and.w	r3, r3, #6
 8009d2c:	2b04      	cmp	r3, #4
 8009d2e:	bf08      	it	eq
 8009d30:	1aad      	subeq	r5, r5, r2
 8009d32:	68a3      	ldr	r3, [r4, #8]
 8009d34:	6922      	ldr	r2, [r4, #16]
 8009d36:	bf0c      	ite	eq
 8009d38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d3c:	2500      	movne	r5, #0
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	bfc4      	itt	gt
 8009d42:	1a9b      	subgt	r3, r3, r2
 8009d44:	18ed      	addgt	r5, r5, r3
 8009d46:	f04f 0900 	mov.w	r9, #0
 8009d4a:	341a      	adds	r4, #26
 8009d4c:	454d      	cmp	r5, r9
 8009d4e:	d11a      	bne.n	8009d86 <_printf_common+0xd6>
 8009d50:	2000      	movs	r0, #0
 8009d52:	e008      	b.n	8009d66 <_printf_common+0xb6>
 8009d54:	2301      	movs	r3, #1
 8009d56:	4652      	mov	r2, sl
 8009d58:	4639      	mov	r1, r7
 8009d5a:	4630      	mov	r0, r6
 8009d5c:	47c0      	blx	r8
 8009d5e:	3001      	adds	r0, #1
 8009d60:	d103      	bne.n	8009d6a <_printf_common+0xba>
 8009d62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d6a:	3501      	adds	r5, #1
 8009d6c:	e7c3      	b.n	8009cf6 <_printf_common+0x46>
 8009d6e:	18e1      	adds	r1, r4, r3
 8009d70:	1c5a      	adds	r2, r3, #1
 8009d72:	2030      	movs	r0, #48	; 0x30
 8009d74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d78:	4422      	add	r2, r4
 8009d7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d82:	3302      	adds	r3, #2
 8009d84:	e7c5      	b.n	8009d12 <_printf_common+0x62>
 8009d86:	2301      	movs	r3, #1
 8009d88:	4622      	mov	r2, r4
 8009d8a:	4639      	mov	r1, r7
 8009d8c:	4630      	mov	r0, r6
 8009d8e:	47c0      	blx	r8
 8009d90:	3001      	adds	r0, #1
 8009d92:	d0e6      	beq.n	8009d62 <_printf_common+0xb2>
 8009d94:	f109 0901 	add.w	r9, r9, #1
 8009d98:	e7d8      	b.n	8009d4c <_printf_common+0x9c>
	...

08009d9c <_sbrk_r>:
 8009d9c:	b538      	push	{r3, r4, r5, lr}
 8009d9e:	4c06      	ldr	r4, [pc, #24]	; (8009db8 <_sbrk_r+0x1c>)
 8009da0:	2300      	movs	r3, #0
 8009da2:	4605      	mov	r5, r0
 8009da4:	4608      	mov	r0, r1
 8009da6:	6023      	str	r3, [r4, #0]
 8009da8:	f7fd fb14 	bl	80073d4 <_sbrk>
 8009dac:	1c43      	adds	r3, r0, #1
 8009dae:	d102      	bne.n	8009db6 <_sbrk_r+0x1a>
 8009db0:	6823      	ldr	r3, [r4, #0]
 8009db2:	b103      	cbz	r3, 8009db6 <_sbrk_r+0x1a>
 8009db4:	602b      	str	r3, [r5, #0]
 8009db6:	bd38      	pop	{r3, r4, r5, pc}
 8009db8:	2000367c 	.word	0x2000367c

08009dbc <_raise_r>:
 8009dbc:	291f      	cmp	r1, #31
 8009dbe:	b538      	push	{r3, r4, r5, lr}
 8009dc0:	4604      	mov	r4, r0
 8009dc2:	460d      	mov	r5, r1
 8009dc4:	d904      	bls.n	8009dd0 <_raise_r+0x14>
 8009dc6:	2316      	movs	r3, #22
 8009dc8:	6003      	str	r3, [r0, #0]
 8009dca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dce:	bd38      	pop	{r3, r4, r5, pc}
 8009dd0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009dd2:	b112      	cbz	r2, 8009dda <_raise_r+0x1e>
 8009dd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009dd8:	b94b      	cbnz	r3, 8009dee <_raise_r+0x32>
 8009dda:	4620      	mov	r0, r4
 8009ddc:	f000 f830 	bl	8009e40 <_getpid_r>
 8009de0:	462a      	mov	r2, r5
 8009de2:	4601      	mov	r1, r0
 8009de4:	4620      	mov	r0, r4
 8009de6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dea:	f000 b817 	b.w	8009e1c <_kill_r>
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d00a      	beq.n	8009e08 <_raise_r+0x4c>
 8009df2:	1c59      	adds	r1, r3, #1
 8009df4:	d103      	bne.n	8009dfe <_raise_r+0x42>
 8009df6:	2316      	movs	r3, #22
 8009df8:	6003      	str	r3, [r0, #0]
 8009dfa:	2001      	movs	r0, #1
 8009dfc:	e7e7      	b.n	8009dce <_raise_r+0x12>
 8009dfe:	2400      	movs	r4, #0
 8009e00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e04:	4628      	mov	r0, r5
 8009e06:	4798      	blx	r3
 8009e08:	2000      	movs	r0, #0
 8009e0a:	e7e0      	b.n	8009dce <_raise_r+0x12>

08009e0c <raise>:
 8009e0c:	4b02      	ldr	r3, [pc, #8]	; (8009e18 <raise+0xc>)
 8009e0e:	4601      	mov	r1, r0
 8009e10:	6818      	ldr	r0, [r3, #0]
 8009e12:	f7ff bfd3 	b.w	8009dbc <_raise_r>
 8009e16:	bf00      	nop
 8009e18:	20000010 	.word	0x20000010

08009e1c <_kill_r>:
 8009e1c:	b538      	push	{r3, r4, r5, lr}
 8009e1e:	4c07      	ldr	r4, [pc, #28]	; (8009e3c <_kill_r+0x20>)
 8009e20:	2300      	movs	r3, #0
 8009e22:	4605      	mov	r5, r0
 8009e24:	4608      	mov	r0, r1
 8009e26:	4611      	mov	r1, r2
 8009e28:	6023      	str	r3, [r4, #0]
 8009e2a:	f7fd fab9 	bl	80073a0 <_kill>
 8009e2e:	1c43      	adds	r3, r0, #1
 8009e30:	d102      	bne.n	8009e38 <_kill_r+0x1c>
 8009e32:	6823      	ldr	r3, [r4, #0]
 8009e34:	b103      	cbz	r3, 8009e38 <_kill_r+0x1c>
 8009e36:	602b      	str	r3, [r5, #0]
 8009e38:	bd38      	pop	{r3, r4, r5, pc}
 8009e3a:	bf00      	nop
 8009e3c:	2000367c 	.word	0x2000367c

08009e40 <_getpid_r>:
 8009e40:	f7fd baa6 	b.w	8007390 <_getpid>

08009e44 <quorem>:
 8009e44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e48:	6903      	ldr	r3, [r0, #16]
 8009e4a:	690c      	ldr	r4, [r1, #16]
 8009e4c:	42a3      	cmp	r3, r4
 8009e4e:	4680      	mov	r8, r0
 8009e50:	f2c0 8082 	blt.w	8009f58 <quorem+0x114>
 8009e54:	3c01      	subs	r4, #1
 8009e56:	f101 0714 	add.w	r7, r1, #20
 8009e5a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009e5e:	f100 0614 	add.w	r6, r0, #20
 8009e62:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009e66:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009e6a:	eb06 030c 	add.w	r3, r6, ip
 8009e6e:	3501      	adds	r5, #1
 8009e70:	eb07 090c 	add.w	r9, r7, ip
 8009e74:	9301      	str	r3, [sp, #4]
 8009e76:	fbb0 f5f5 	udiv	r5, r0, r5
 8009e7a:	b395      	cbz	r5, 8009ee2 <quorem+0x9e>
 8009e7c:	f04f 0a00 	mov.w	sl, #0
 8009e80:	4638      	mov	r0, r7
 8009e82:	46b6      	mov	lr, r6
 8009e84:	46d3      	mov	fp, sl
 8009e86:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e8a:	b293      	uxth	r3, r2
 8009e8c:	fb05 a303 	mla	r3, r5, r3, sl
 8009e90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	ebab 0303 	sub.w	r3, fp, r3
 8009e9a:	0c12      	lsrs	r2, r2, #16
 8009e9c:	f8de b000 	ldr.w	fp, [lr]
 8009ea0:	fb05 a202 	mla	r2, r5, r2, sl
 8009ea4:	fa13 f38b 	uxtah	r3, r3, fp
 8009ea8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009eac:	fa1f fb82 	uxth.w	fp, r2
 8009eb0:	f8de 2000 	ldr.w	r2, [lr]
 8009eb4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009eb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ec2:	4581      	cmp	r9, r0
 8009ec4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009ec8:	f84e 3b04 	str.w	r3, [lr], #4
 8009ecc:	d2db      	bcs.n	8009e86 <quorem+0x42>
 8009ece:	f856 300c 	ldr.w	r3, [r6, ip]
 8009ed2:	b933      	cbnz	r3, 8009ee2 <quorem+0x9e>
 8009ed4:	9b01      	ldr	r3, [sp, #4]
 8009ed6:	3b04      	subs	r3, #4
 8009ed8:	429e      	cmp	r6, r3
 8009eda:	461a      	mov	r2, r3
 8009edc:	d330      	bcc.n	8009f40 <quorem+0xfc>
 8009ede:	f8c8 4010 	str.w	r4, [r8, #16]
 8009ee2:	4640      	mov	r0, r8
 8009ee4:	f001 f81a 	bl	800af1c <__mcmp>
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	db25      	blt.n	8009f38 <quorem+0xf4>
 8009eec:	3501      	adds	r5, #1
 8009eee:	4630      	mov	r0, r6
 8009ef0:	f04f 0c00 	mov.w	ip, #0
 8009ef4:	f857 2b04 	ldr.w	r2, [r7], #4
 8009ef8:	f8d0 e000 	ldr.w	lr, [r0]
 8009efc:	b293      	uxth	r3, r2
 8009efe:	ebac 0303 	sub.w	r3, ip, r3
 8009f02:	0c12      	lsrs	r2, r2, #16
 8009f04:	fa13 f38e 	uxtah	r3, r3, lr
 8009f08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009f0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f16:	45b9      	cmp	r9, r7
 8009f18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009f1c:	f840 3b04 	str.w	r3, [r0], #4
 8009f20:	d2e8      	bcs.n	8009ef4 <quorem+0xb0>
 8009f22:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009f26:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009f2a:	b92a      	cbnz	r2, 8009f38 <quorem+0xf4>
 8009f2c:	3b04      	subs	r3, #4
 8009f2e:	429e      	cmp	r6, r3
 8009f30:	461a      	mov	r2, r3
 8009f32:	d30b      	bcc.n	8009f4c <quorem+0x108>
 8009f34:	f8c8 4010 	str.w	r4, [r8, #16]
 8009f38:	4628      	mov	r0, r5
 8009f3a:	b003      	add	sp, #12
 8009f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f40:	6812      	ldr	r2, [r2, #0]
 8009f42:	3b04      	subs	r3, #4
 8009f44:	2a00      	cmp	r2, #0
 8009f46:	d1ca      	bne.n	8009ede <quorem+0x9a>
 8009f48:	3c01      	subs	r4, #1
 8009f4a:	e7c5      	b.n	8009ed8 <quorem+0x94>
 8009f4c:	6812      	ldr	r2, [r2, #0]
 8009f4e:	3b04      	subs	r3, #4
 8009f50:	2a00      	cmp	r2, #0
 8009f52:	d1ef      	bne.n	8009f34 <quorem+0xf0>
 8009f54:	3c01      	subs	r4, #1
 8009f56:	e7ea      	b.n	8009f2e <quorem+0xea>
 8009f58:	2000      	movs	r0, #0
 8009f5a:	e7ee      	b.n	8009f3a <quorem+0xf6>
 8009f5c:	0000      	movs	r0, r0
	...

08009f60 <_dtoa_r>:
 8009f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f64:	ec57 6b10 	vmov	r6, r7, d0
 8009f68:	b097      	sub	sp, #92	; 0x5c
 8009f6a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009f6c:	9106      	str	r1, [sp, #24]
 8009f6e:	4604      	mov	r4, r0
 8009f70:	920b      	str	r2, [sp, #44]	; 0x2c
 8009f72:	9312      	str	r3, [sp, #72]	; 0x48
 8009f74:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009f78:	e9cd 6700 	strd	r6, r7, [sp]
 8009f7c:	b93d      	cbnz	r5, 8009f8e <_dtoa_r+0x2e>
 8009f7e:	2010      	movs	r0, #16
 8009f80:	f7ff faf6 	bl	8009570 <malloc>
 8009f84:	6260      	str	r0, [r4, #36]	; 0x24
 8009f86:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f8a:	6005      	str	r5, [r0, #0]
 8009f8c:	60c5      	str	r5, [r0, #12]
 8009f8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f90:	6819      	ldr	r1, [r3, #0]
 8009f92:	b151      	cbz	r1, 8009faa <_dtoa_r+0x4a>
 8009f94:	685a      	ldr	r2, [r3, #4]
 8009f96:	604a      	str	r2, [r1, #4]
 8009f98:	2301      	movs	r3, #1
 8009f9a:	4093      	lsls	r3, r2
 8009f9c:	608b      	str	r3, [r1, #8]
 8009f9e:	4620      	mov	r0, r4
 8009fa0:	f000 fdda 	bl	800ab58 <_Bfree>
 8009fa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	601a      	str	r2, [r3, #0]
 8009faa:	1e3b      	subs	r3, r7, #0
 8009fac:	bfbb      	ittet	lt
 8009fae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009fb2:	9301      	strlt	r3, [sp, #4]
 8009fb4:	2300      	movge	r3, #0
 8009fb6:	2201      	movlt	r2, #1
 8009fb8:	bfac      	ite	ge
 8009fba:	f8c8 3000 	strge.w	r3, [r8]
 8009fbe:	f8c8 2000 	strlt.w	r2, [r8]
 8009fc2:	4baf      	ldr	r3, [pc, #700]	; (800a280 <_dtoa_r+0x320>)
 8009fc4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009fc8:	ea33 0308 	bics.w	r3, r3, r8
 8009fcc:	d114      	bne.n	8009ff8 <_dtoa_r+0x98>
 8009fce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009fd0:	f242 730f 	movw	r3, #9999	; 0x270f
 8009fd4:	6013      	str	r3, [r2, #0]
 8009fd6:	9b00      	ldr	r3, [sp, #0]
 8009fd8:	b923      	cbnz	r3, 8009fe4 <_dtoa_r+0x84>
 8009fda:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	f000 8542 	beq.w	800aa68 <_dtoa_r+0xb08>
 8009fe4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fe6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a294 <_dtoa_r+0x334>
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	f000 8544 	beq.w	800aa78 <_dtoa_r+0xb18>
 8009ff0:	f10b 0303 	add.w	r3, fp, #3
 8009ff4:	f000 bd3e 	b.w	800aa74 <_dtoa_r+0xb14>
 8009ff8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	2300      	movs	r3, #0
 800a000:	4630      	mov	r0, r6
 800a002:	4639      	mov	r1, r7
 800a004:	f7f6 fd2c 	bl	8000a60 <__aeabi_dcmpeq>
 800a008:	4681      	mov	r9, r0
 800a00a:	b168      	cbz	r0, 800a028 <_dtoa_r+0xc8>
 800a00c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a00e:	2301      	movs	r3, #1
 800a010:	6013      	str	r3, [r2, #0]
 800a012:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a014:	2b00      	cmp	r3, #0
 800a016:	f000 8524 	beq.w	800aa62 <_dtoa_r+0xb02>
 800a01a:	4b9a      	ldr	r3, [pc, #616]	; (800a284 <_dtoa_r+0x324>)
 800a01c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a01e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800a022:	6013      	str	r3, [r2, #0]
 800a024:	f000 bd28 	b.w	800aa78 <_dtoa_r+0xb18>
 800a028:	aa14      	add	r2, sp, #80	; 0x50
 800a02a:	a915      	add	r1, sp, #84	; 0x54
 800a02c:	ec47 6b10 	vmov	d0, r6, r7
 800a030:	4620      	mov	r0, r4
 800a032:	f000 ffea 	bl	800b00a <__d2b>
 800a036:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a03a:	9004      	str	r0, [sp, #16]
 800a03c:	2d00      	cmp	r5, #0
 800a03e:	d07c      	beq.n	800a13a <_dtoa_r+0x1da>
 800a040:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a044:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a048:	46b2      	mov	sl, r6
 800a04a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a04e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a052:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a056:	2200      	movs	r2, #0
 800a058:	4b8b      	ldr	r3, [pc, #556]	; (800a288 <_dtoa_r+0x328>)
 800a05a:	4650      	mov	r0, sl
 800a05c:	4659      	mov	r1, fp
 800a05e:	f7f6 f8df 	bl	8000220 <__aeabi_dsub>
 800a062:	a381      	add	r3, pc, #516	; (adr r3, 800a268 <_dtoa_r+0x308>)
 800a064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a068:	f7f6 fa92 	bl	8000590 <__aeabi_dmul>
 800a06c:	a380      	add	r3, pc, #512	; (adr r3, 800a270 <_dtoa_r+0x310>)
 800a06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a072:	f7f6 f8d7 	bl	8000224 <__adddf3>
 800a076:	4606      	mov	r6, r0
 800a078:	4628      	mov	r0, r5
 800a07a:	460f      	mov	r7, r1
 800a07c:	f7f6 fa1e 	bl	80004bc <__aeabi_i2d>
 800a080:	a37d      	add	r3, pc, #500	; (adr r3, 800a278 <_dtoa_r+0x318>)
 800a082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a086:	f7f6 fa83 	bl	8000590 <__aeabi_dmul>
 800a08a:	4602      	mov	r2, r0
 800a08c:	460b      	mov	r3, r1
 800a08e:	4630      	mov	r0, r6
 800a090:	4639      	mov	r1, r7
 800a092:	f7f6 f8c7 	bl	8000224 <__adddf3>
 800a096:	4606      	mov	r6, r0
 800a098:	460f      	mov	r7, r1
 800a09a:	f7f6 fd29 	bl	8000af0 <__aeabi_d2iz>
 800a09e:	2200      	movs	r2, #0
 800a0a0:	4682      	mov	sl, r0
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	4630      	mov	r0, r6
 800a0a6:	4639      	mov	r1, r7
 800a0a8:	f7f6 fce4 	bl	8000a74 <__aeabi_dcmplt>
 800a0ac:	b148      	cbz	r0, 800a0c2 <_dtoa_r+0x162>
 800a0ae:	4650      	mov	r0, sl
 800a0b0:	f7f6 fa04 	bl	80004bc <__aeabi_i2d>
 800a0b4:	4632      	mov	r2, r6
 800a0b6:	463b      	mov	r3, r7
 800a0b8:	f7f6 fcd2 	bl	8000a60 <__aeabi_dcmpeq>
 800a0bc:	b908      	cbnz	r0, 800a0c2 <_dtoa_r+0x162>
 800a0be:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a0c2:	f1ba 0f16 	cmp.w	sl, #22
 800a0c6:	d859      	bhi.n	800a17c <_dtoa_r+0x21c>
 800a0c8:	4970      	ldr	r1, [pc, #448]	; (800a28c <_dtoa_r+0x32c>)
 800a0ca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a0ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0d6:	f7f6 fceb 	bl	8000ab0 <__aeabi_dcmpgt>
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	d050      	beq.n	800a180 <_dtoa_r+0x220>
 800a0de:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a0e8:	1b5d      	subs	r5, r3, r5
 800a0ea:	f1b5 0801 	subs.w	r8, r5, #1
 800a0ee:	bf49      	itett	mi
 800a0f0:	f1c5 0301 	rsbmi	r3, r5, #1
 800a0f4:	2300      	movpl	r3, #0
 800a0f6:	9305      	strmi	r3, [sp, #20]
 800a0f8:	f04f 0800 	movmi.w	r8, #0
 800a0fc:	bf58      	it	pl
 800a0fe:	9305      	strpl	r3, [sp, #20]
 800a100:	f1ba 0f00 	cmp.w	sl, #0
 800a104:	db3e      	blt.n	800a184 <_dtoa_r+0x224>
 800a106:	2300      	movs	r3, #0
 800a108:	44d0      	add	r8, sl
 800a10a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a10e:	9307      	str	r3, [sp, #28]
 800a110:	9b06      	ldr	r3, [sp, #24]
 800a112:	2b09      	cmp	r3, #9
 800a114:	f200 8090 	bhi.w	800a238 <_dtoa_r+0x2d8>
 800a118:	2b05      	cmp	r3, #5
 800a11a:	bfc4      	itt	gt
 800a11c:	3b04      	subgt	r3, #4
 800a11e:	9306      	strgt	r3, [sp, #24]
 800a120:	9b06      	ldr	r3, [sp, #24]
 800a122:	f1a3 0302 	sub.w	r3, r3, #2
 800a126:	bfcc      	ite	gt
 800a128:	2500      	movgt	r5, #0
 800a12a:	2501      	movle	r5, #1
 800a12c:	2b03      	cmp	r3, #3
 800a12e:	f200 808f 	bhi.w	800a250 <_dtoa_r+0x2f0>
 800a132:	e8df f003 	tbb	[pc, r3]
 800a136:	7f7d      	.short	0x7f7d
 800a138:	7131      	.short	0x7131
 800a13a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a13e:	441d      	add	r5, r3
 800a140:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a144:	2820      	cmp	r0, #32
 800a146:	dd13      	ble.n	800a170 <_dtoa_r+0x210>
 800a148:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a14c:	9b00      	ldr	r3, [sp, #0]
 800a14e:	fa08 f800 	lsl.w	r8, r8, r0
 800a152:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a156:	fa23 f000 	lsr.w	r0, r3, r0
 800a15a:	ea48 0000 	orr.w	r0, r8, r0
 800a15e:	f7f6 f99d 	bl	800049c <__aeabi_ui2d>
 800a162:	2301      	movs	r3, #1
 800a164:	4682      	mov	sl, r0
 800a166:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a16a:	3d01      	subs	r5, #1
 800a16c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a16e:	e772      	b.n	800a056 <_dtoa_r+0xf6>
 800a170:	9b00      	ldr	r3, [sp, #0]
 800a172:	f1c0 0020 	rsb	r0, r0, #32
 800a176:	fa03 f000 	lsl.w	r0, r3, r0
 800a17a:	e7f0      	b.n	800a15e <_dtoa_r+0x1fe>
 800a17c:	2301      	movs	r3, #1
 800a17e:	e7b1      	b.n	800a0e4 <_dtoa_r+0x184>
 800a180:	900f      	str	r0, [sp, #60]	; 0x3c
 800a182:	e7b0      	b.n	800a0e6 <_dtoa_r+0x186>
 800a184:	9b05      	ldr	r3, [sp, #20]
 800a186:	eba3 030a 	sub.w	r3, r3, sl
 800a18a:	9305      	str	r3, [sp, #20]
 800a18c:	f1ca 0300 	rsb	r3, sl, #0
 800a190:	9307      	str	r3, [sp, #28]
 800a192:	2300      	movs	r3, #0
 800a194:	930e      	str	r3, [sp, #56]	; 0x38
 800a196:	e7bb      	b.n	800a110 <_dtoa_r+0x1b0>
 800a198:	2301      	movs	r3, #1
 800a19a:	930a      	str	r3, [sp, #40]	; 0x28
 800a19c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	dd59      	ble.n	800a256 <_dtoa_r+0x2f6>
 800a1a2:	9302      	str	r3, [sp, #8]
 800a1a4:	4699      	mov	r9, r3
 800a1a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	6072      	str	r2, [r6, #4]
 800a1ac:	2204      	movs	r2, #4
 800a1ae:	f102 0014 	add.w	r0, r2, #20
 800a1b2:	4298      	cmp	r0, r3
 800a1b4:	6871      	ldr	r1, [r6, #4]
 800a1b6:	d953      	bls.n	800a260 <_dtoa_r+0x300>
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	f000 fc99 	bl	800aaf0 <_Balloc>
 800a1be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1c0:	6030      	str	r0, [r6, #0]
 800a1c2:	f1b9 0f0e 	cmp.w	r9, #14
 800a1c6:	f8d3 b000 	ldr.w	fp, [r3]
 800a1ca:	f200 80e6 	bhi.w	800a39a <_dtoa_r+0x43a>
 800a1ce:	2d00      	cmp	r5, #0
 800a1d0:	f000 80e3 	beq.w	800a39a <_dtoa_r+0x43a>
 800a1d4:	ed9d 7b00 	vldr	d7, [sp]
 800a1d8:	f1ba 0f00 	cmp.w	sl, #0
 800a1dc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a1e0:	dd74      	ble.n	800a2cc <_dtoa_r+0x36c>
 800a1e2:	4a2a      	ldr	r2, [pc, #168]	; (800a28c <_dtoa_r+0x32c>)
 800a1e4:	f00a 030f 	and.w	r3, sl, #15
 800a1e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a1ec:	ed93 7b00 	vldr	d7, [r3]
 800a1f0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a1f4:	06f0      	lsls	r0, r6, #27
 800a1f6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a1fa:	d565      	bpl.n	800a2c8 <_dtoa_r+0x368>
 800a1fc:	4b24      	ldr	r3, [pc, #144]	; (800a290 <_dtoa_r+0x330>)
 800a1fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a202:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a206:	f7f6 faed 	bl	80007e4 <__aeabi_ddiv>
 800a20a:	e9cd 0100 	strd	r0, r1, [sp]
 800a20e:	f006 060f 	and.w	r6, r6, #15
 800a212:	2503      	movs	r5, #3
 800a214:	4f1e      	ldr	r7, [pc, #120]	; (800a290 <_dtoa_r+0x330>)
 800a216:	e04c      	b.n	800a2b2 <_dtoa_r+0x352>
 800a218:	2301      	movs	r3, #1
 800a21a:	930a      	str	r3, [sp, #40]	; 0x28
 800a21c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a21e:	4453      	add	r3, sl
 800a220:	f103 0901 	add.w	r9, r3, #1
 800a224:	9302      	str	r3, [sp, #8]
 800a226:	464b      	mov	r3, r9
 800a228:	2b01      	cmp	r3, #1
 800a22a:	bfb8      	it	lt
 800a22c:	2301      	movlt	r3, #1
 800a22e:	e7ba      	b.n	800a1a6 <_dtoa_r+0x246>
 800a230:	2300      	movs	r3, #0
 800a232:	e7b2      	b.n	800a19a <_dtoa_r+0x23a>
 800a234:	2300      	movs	r3, #0
 800a236:	e7f0      	b.n	800a21a <_dtoa_r+0x2ba>
 800a238:	2501      	movs	r5, #1
 800a23a:	2300      	movs	r3, #0
 800a23c:	9306      	str	r3, [sp, #24]
 800a23e:	950a      	str	r5, [sp, #40]	; 0x28
 800a240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a244:	9302      	str	r3, [sp, #8]
 800a246:	4699      	mov	r9, r3
 800a248:	2200      	movs	r2, #0
 800a24a:	2312      	movs	r3, #18
 800a24c:	920b      	str	r2, [sp, #44]	; 0x2c
 800a24e:	e7aa      	b.n	800a1a6 <_dtoa_r+0x246>
 800a250:	2301      	movs	r3, #1
 800a252:	930a      	str	r3, [sp, #40]	; 0x28
 800a254:	e7f4      	b.n	800a240 <_dtoa_r+0x2e0>
 800a256:	2301      	movs	r3, #1
 800a258:	9302      	str	r3, [sp, #8]
 800a25a:	4699      	mov	r9, r3
 800a25c:	461a      	mov	r2, r3
 800a25e:	e7f5      	b.n	800a24c <_dtoa_r+0x2ec>
 800a260:	3101      	adds	r1, #1
 800a262:	6071      	str	r1, [r6, #4]
 800a264:	0052      	lsls	r2, r2, #1
 800a266:	e7a2      	b.n	800a1ae <_dtoa_r+0x24e>
 800a268:	636f4361 	.word	0x636f4361
 800a26c:	3fd287a7 	.word	0x3fd287a7
 800a270:	8b60c8b3 	.word	0x8b60c8b3
 800a274:	3fc68a28 	.word	0x3fc68a28
 800a278:	509f79fb 	.word	0x509f79fb
 800a27c:	3fd34413 	.word	0x3fd34413
 800a280:	7ff00000 	.word	0x7ff00000
 800a284:	0800bb81 	.word	0x0800bb81
 800a288:	3ff80000 	.word	0x3ff80000
 800a28c:	0800bbb8 	.word	0x0800bbb8
 800a290:	0800bb90 	.word	0x0800bb90
 800a294:	0800bb8b 	.word	0x0800bb8b
 800a298:	07f1      	lsls	r1, r6, #31
 800a29a:	d508      	bpl.n	800a2ae <_dtoa_r+0x34e>
 800a29c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a2a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2a4:	f7f6 f974 	bl	8000590 <__aeabi_dmul>
 800a2a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a2ac:	3501      	adds	r5, #1
 800a2ae:	1076      	asrs	r6, r6, #1
 800a2b0:	3708      	adds	r7, #8
 800a2b2:	2e00      	cmp	r6, #0
 800a2b4:	d1f0      	bne.n	800a298 <_dtoa_r+0x338>
 800a2b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a2ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2be:	f7f6 fa91 	bl	80007e4 <__aeabi_ddiv>
 800a2c2:	e9cd 0100 	strd	r0, r1, [sp]
 800a2c6:	e01a      	b.n	800a2fe <_dtoa_r+0x39e>
 800a2c8:	2502      	movs	r5, #2
 800a2ca:	e7a3      	b.n	800a214 <_dtoa_r+0x2b4>
 800a2cc:	f000 80a0 	beq.w	800a410 <_dtoa_r+0x4b0>
 800a2d0:	f1ca 0600 	rsb	r6, sl, #0
 800a2d4:	4b9f      	ldr	r3, [pc, #636]	; (800a554 <_dtoa_r+0x5f4>)
 800a2d6:	4fa0      	ldr	r7, [pc, #640]	; (800a558 <_dtoa_r+0x5f8>)
 800a2d8:	f006 020f 	and.w	r2, r6, #15
 800a2dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a2e8:	f7f6 f952 	bl	8000590 <__aeabi_dmul>
 800a2ec:	e9cd 0100 	strd	r0, r1, [sp]
 800a2f0:	1136      	asrs	r6, r6, #4
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	2502      	movs	r5, #2
 800a2f6:	2e00      	cmp	r6, #0
 800a2f8:	d17f      	bne.n	800a3fa <_dtoa_r+0x49a>
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d1e1      	bne.n	800a2c2 <_dtoa_r+0x362>
 800a2fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a300:	2b00      	cmp	r3, #0
 800a302:	f000 8087 	beq.w	800a414 <_dtoa_r+0x4b4>
 800a306:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a30a:	2200      	movs	r2, #0
 800a30c:	4b93      	ldr	r3, [pc, #588]	; (800a55c <_dtoa_r+0x5fc>)
 800a30e:	4630      	mov	r0, r6
 800a310:	4639      	mov	r1, r7
 800a312:	f7f6 fbaf 	bl	8000a74 <__aeabi_dcmplt>
 800a316:	2800      	cmp	r0, #0
 800a318:	d07c      	beq.n	800a414 <_dtoa_r+0x4b4>
 800a31a:	f1b9 0f00 	cmp.w	r9, #0
 800a31e:	d079      	beq.n	800a414 <_dtoa_r+0x4b4>
 800a320:	9b02      	ldr	r3, [sp, #8]
 800a322:	2b00      	cmp	r3, #0
 800a324:	dd35      	ble.n	800a392 <_dtoa_r+0x432>
 800a326:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800a32a:	9308      	str	r3, [sp, #32]
 800a32c:	4639      	mov	r1, r7
 800a32e:	2200      	movs	r2, #0
 800a330:	4b8b      	ldr	r3, [pc, #556]	; (800a560 <_dtoa_r+0x600>)
 800a332:	4630      	mov	r0, r6
 800a334:	f7f6 f92c 	bl	8000590 <__aeabi_dmul>
 800a338:	e9cd 0100 	strd	r0, r1, [sp]
 800a33c:	9f02      	ldr	r7, [sp, #8]
 800a33e:	3501      	adds	r5, #1
 800a340:	4628      	mov	r0, r5
 800a342:	f7f6 f8bb 	bl	80004bc <__aeabi_i2d>
 800a346:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a34a:	f7f6 f921 	bl	8000590 <__aeabi_dmul>
 800a34e:	2200      	movs	r2, #0
 800a350:	4b84      	ldr	r3, [pc, #528]	; (800a564 <_dtoa_r+0x604>)
 800a352:	f7f5 ff67 	bl	8000224 <__adddf3>
 800a356:	4605      	mov	r5, r0
 800a358:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a35c:	2f00      	cmp	r7, #0
 800a35e:	d15d      	bne.n	800a41c <_dtoa_r+0x4bc>
 800a360:	2200      	movs	r2, #0
 800a362:	4b81      	ldr	r3, [pc, #516]	; (800a568 <_dtoa_r+0x608>)
 800a364:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a368:	f7f5 ff5a 	bl	8000220 <__aeabi_dsub>
 800a36c:	462a      	mov	r2, r5
 800a36e:	4633      	mov	r3, r6
 800a370:	e9cd 0100 	strd	r0, r1, [sp]
 800a374:	f7f6 fb9c 	bl	8000ab0 <__aeabi_dcmpgt>
 800a378:	2800      	cmp	r0, #0
 800a37a:	f040 8288 	bne.w	800a88e <_dtoa_r+0x92e>
 800a37e:	462a      	mov	r2, r5
 800a380:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a384:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a388:	f7f6 fb74 	bl	8000a74 <__aeabi_dcmplt>
 800a38c:	2800      	cmp	r0, #0
 800a38e:	f040 827c 	bne.w	800a88a <_dtoa_r+0x92a>
 800a392:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a396:	e9cd 2300 	strd	r2, r3, [sp]
 800a39a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f2c0 8150 	blt.w	800a642 <_dtoa_r+0x6e2>
 800a3a2:	f1ba 0f0e 	cmp.w	sl, #14
 800a3a6:	f300 814c 	bgt.w	800a642 <_dtoa_r+0x6e2>
 800a3aa:	4b6a      	ldr	r3, [pc, #424]	; (800a554 <_dtoa_r+0x5f4>)
 800a3ac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a3b0:	ed93 7b00 	vldr	d7, [r3]
 800a3b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a3bc:	f280 80d8 	bge.w	800a570 <_dtoa_r+0x610>
 800a3c0:	f1b9 0f00 	cmp.w	r9, #0
 800a3c4:	f300 80d4 	bgt.w	800a570 <_dtoa_r+0x610>
 800a3c8:	f040 825e 	bne.w	800a888 <_dtoa_r+0x928>
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	4b66      	ldr	r3, [pc, #408]	; (800a568 <_dtoa_r+0x608>)
 800a3d0:	ec51 0b17 	vmov	r0, r1, d7
 800a3d4:	f7f6 f8dc 	bl	8000590 <__aeabi_dmul>
 800a3d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3dc:	f7f6 fb5e 	bl	8000a9c <__aeabi_dcmpge>
 800a3e0:	464f      	mov	r7, r9
 800a3e2:	464e      	mov	r6, r9
 800a3e4:	2800      	cmp	r0, #0
 800a3e6:	f040 8234 	bne.w	800a852 <_dtoa_r+0x8f2>
 800a3ea:	2331      	movs	r3, #49	; 0x31
 800a3ec:	f10b 0501 	add.w	r5, fp, #1
 800a3f0:	f88b 3000 	strb.w	r3, [fp]
 800a3f4:	f10a 0a01 	add.w	sl, sl, #1
 800a3f8:	e22f      	b.n	800a85a <_dtoa_r+0x8fa>
 800a3fa:	07f2      	lsls	r2, r6, #31
 800a3fc:	d505      	bpl.n	800a40a <_dtoa_r+0x4aa>
 800a3fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a402:	f7f6 f8c5 	bl	8000590 <__aeabi_dmul>
 800a406:	3501      	adds	r5, #1
 800a408:	2301      	movs	r3, #1
 800a40a:	1076      	asrs	r6, r6, #1
 800a40c:	3708      	adds	r7, #8
 800a40e:	e772      	b.n	800a2f6 <_dtoa_r+0x396>
 800a410:	2502      	movs	r5, #2
 800a412:	e774      	b.n	800a2fe <_dtoa_r+0x39e>
 800a414:	f8cd a020 	str.w	sl, [sp, #32]
 800a418:	464f      	mov	r7, r9
 800a41a:	e791      	b.n	800a340 <_dtoa_r+0x3e0>
 800a41c:	4b4d      	ldr	r3, [pc, #308]	; (800a554 <_dtoa_r+0x5f4>)
 800a41e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a422:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d047      	beq.n	800a4bc <_dtoa_r+0x55c>
 800a42c:	4602      	mov	r2, r0
 800a42e:	460b      	mov	r3, r1
 800a430:	2000      	movs	r0, #0
 800a432:	494e      	ldr	r1, [pc, #312]	; (800a56c <_dtoa_r+0x60c>)
 800a434:	f7f6 f9d6 	bl	80007e4 <__aeabi_ddiv>
 800a438:	462a      	mov	r2, r5
 800a43a:	4633      	mov	r3, r6
 800a43c:	f7f5 fef0 	bl	8000220 <__aeabi_dsub>
 800a440:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a444:	465d      	mov	r5, fp
 800a446:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a44a:	f7f6 fb51 	bl	8000af0 <__aeabi_d2iz>
 800a44e:	4606      	mov	r6, r0
 800a450:	f7f6 f834 	bl	80004bc <__aeabi_i2d>
 800a454:	4602      	mov	r2, r0
 800a456:	460b      	mov	r3, r1
 800a458:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a45c:	f7f5 fee0 	bl	8000220 <__aeabi_dsub>
 800a460:	3630      	adds	r6, #48	; 0x30
 800a462:	f805 6b01 	strb.w	r6, [r5], #1
 800a466:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a46a:	e9cd 0100 	strd	r0, r1, [sp]
 800a46e:	f7f6 fb01 	bl	8000a74 <__aeabi_dcmplt>
 800a472:	2800      	cmp	r0, #0
 800a474:	d163      	bne.n	800a53e <_dtoa_r+0x5de>
 800a476:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a47a:	2000      	movs	r0, #0
 800a47c:	4937      	ldr	r1, [pc, #220]	; (800a55c <_dtoa_r+0x5fc>)
 800a47e:	f7f5 fecf 	bl	8000220 <__aeabi_dsub>
 800a482:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a486:	f7f6 faf5 	bl	8000a74 <__aeabi_dcmplt>
 800a48a:	2800      	cmp	r0, #0
 800a48c:	f040 80b7 	bne.w	800a5fe <_dtoa_r+0x69e>
 800a490:	eba5 030b 	sub.w	r3, r5, fp
 800a494:	429f      	cmp	r7, r3
 800a496:	f77f af7c 	ble.w	800a392 <_dtoa_r+0x432>
 800a49a:	2200      	movs	r2, #0
 800a49c:	4b30      	ldr	r3, [pc, #192]	; (800a560 <_dtoa_r+0x600>)
 800a49e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a4a2:	f7f6 f875 	bl	8000590 <__aeabi_dmul>
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a4ac:	4b2c      	ldr	r3, [pc, #176]	; (800a560 <_dtoa_r+0x600>)
 800a4ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4b2:	f7f6 f86d 	bl	8000590 <__aeabi_dmul>
 800a4b6:	e9cd 0100 	strd	r0, r1, [sp]
 800a4ba:	e7c4      	b.n	800a446 <_dtoa_r+0x4e6>
 800a4bc:	462a      	mov	r2, r5
 800a4be:	4633      	mov	r3, r6
 800a4c0:	f7f6 f866 	bl	8000590 <__aeabi_dmul>
 800a4c4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a4c8:	eb0b 0507 	add.w	r5, fp, r7
 800a4cc:	465e      	mov	r6, fp
 800a4ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4d2:	f7f6 fb0d 	bl	8000af0 <__aeabi_d2iz>
 800a4d6:	4607      	mov	r7, r0
 800a4d8:	f7f5 fff0 	bl	80004bc <__aeabi_i2d>
 800a4dc:	3730      	adds	r7, #48	; 0x30
 800a4de:	4602      	mov	r2, r0
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4e6:	f7f5 fe9b 	bl	8000220 <__aeabi_dsub>
 800a4ea:	f806 7b01 	strb.w	r7, [r6], #1
 800a4ee:	42ae      	cmp	r6, r5
 800a4f0:	e9cd 0100 	strd	r0, r1, [sp]
 800a4f4:	f04f 0200 	mov.w	r2, #0
 800a4f8:	d126      	bne.n	800a548 <_dtoa_r+0x5e8>
 800a4fa:	4b1c      	ldr	r3, [pc, #112]	; (800a56c <_dtoa_r+0x60c>)
 800a4fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a500:	f7f5 fe90 	bl	8000224 <__adddf3>
 800a504:	4602      	mov	r2, r0
 800a506:	460b      	mov	r3, r1
 800a508:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a50c:	f7f6 fad0 	bl	8000ab0 <__aeabi_dcmpgt>
 800a510:	2800      	cmp	r0, #0
 800a512:	d174      	bne.n	800a5fe <_dtoa_r+0x69e>
 800a514:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a518:	2000      	movs	r0, #0
 800a51a:	4914      	ldr	r1, [pc, #80]	; (800a56c <_dtoa_r+0x60c>)
 800a51c:	f7f5 fe80 	bl	8000220 <__aeabi_dsub>
 800a520:	4602      	mov	r2, r0
 800a522:	460b      	mov	r3, r1
 800a524:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a528:	f7f6 faa4 	bl	8000a74 <__aeabi_dcmplt>
 800a52c:	2800      	cmp	r0, #0
 800a52e:	f43f af30 	beq.w	800a392 <_dtoa_r+0x432>
 800a532:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a536:	2b30      	cmp	r3, #48	; 0x30
 800a538:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800a53c:	d002      	beq.n	800a544 <_dtoa_r+0x5e4>
 800a53e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a542:	e04a      	b.n	800a5da <_dtoa_r+0x67a>
 800a544:	4615      	mov	r5, r2
 800a546:	e7f4      	b.n	800a532 <_dtoa_r+0x5d2>
 800a548:	4b05      	ldr	r3, [pc, #20]	; (800a560 <_dtoa_r+0x600>)
 800a54a:	f7f6 f821 	bl	8000590 <__aeabi_dmul>
 800a54e:	e9cd 0100 	strd	r0, r1, [sp]
 800a552:	e7bc      	b.n	800a4ce <_dtoa_r+0x56e>
 800a554:	0800bbb8 	.word	0x0800bbb8
 800a558:	0800bb90 	.word	0x0800bb90
 800a55c:	3ff00000 	.word	0x3ff00000
 800a560:	40240000 	.word	0x40240000
 800a564:	401c0000 	.word	0x401c0000
 800a568:	40140000 	.word	0x40140000
 800a56c:	3fe00000 	.word	0x3fe00000
 800a570:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a574:	465d      	mov	r5, fp
 800a576:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a57a:	4630      	mov	r0, r6
 800a57c:	4639      	mov	r1, r7
 800a57e:	f7f6 f931 	bl	80007e4 <__aeabi_ddiv>
 800a582:	f7f6 fab5 	bl	8000af0 <__aeabi_d2iz>
 800a586:	4680      	mov	r8, r0
 800a588:	f7f5 ff98 	bl	80004bc <__aeabi_i2d>
 800a58c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a590:	f7f5 fffe 	bl	8000590 <__aeabi_dmul>
 800a594:	4602      	mov	r2, r0
 800a596:	460b      	mov	r3, r1
 800a598:	4630      	mov	r0, r6
 800a59a:	4639      	mov	r1, r7
 800a59c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a5a0:	f7f5 fe3e 	bl	8000220 <__aeabi_dsub>
 800a5a4:	f805 6b01 	strb.w	r6, [r5], #1
 800a5a8:	eba5 060b 	sub.w	r6, r5, fp
 800a5ac:	45b1      	cmp	r9, r6
 800a5ae:	4602      	mov	r2, r0
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	d139      	bne.n	800a628 <_dtoa_r+0x6c8>
 800a5b4:	f7f5 fe36 	bl	8000224 <__adddf3>
 800a5b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5bc:	4606      	mov	r6, r0
 800a5be:	460f      	mov	r7, r1
 800a5c0:	f7f6 fa76 	bl	8000ab0 <__aeabi_dcmpgt>
 800a5c4:	b9c8      	cbnz	r0, 800a5fa <_dtoa_r+0x69a>
 800a5c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5ca:	4630      	mov	r0, r6
 800a5cc:	4639      	mov	r1, r7
 800a5ce:	f7f6 fa47 	bl	8000a60 <__aeabi_dcmpeq>
 800a5d2:	b110      	cbz	r0, 800a5da <_dtoa_r+0x67a>
 800a5d4:	f018 0f01 	tst.w	r8, #1
 800a5d8:	d10f      	bne.n	800a5fa <_dtoa_r+0x69a>
 800a5da:	9904      	ldr	r1, [sp, #16]
 800a5dc:	4620      	mov	r0, r4
 800a5de:	f000 fabb 	bl	800ab58 <_Bfree>
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a5e6:	702b      	strb	r3, [r5, #0]
 800a5e8:	f10a 0301 	add.w	r3, sl, #1
 800a5ec:	6013      	str	r3, [r2, #0]
 800a5ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f000 8241 	beq.w	800aa78 <_dtoa_r+0xb18>
 800a5f6:	601d      	str	r5, [r3, #0]
 800a5f8:	e23e      	b.n	800aa78 <_dtoa_r+0xb18>
 800a5fa:	f8cd a020 	str.w	sl, [sp, #32]
 800a5fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a602:	2a39      	cmp	r2, #57	; 0x39
 800a604:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800a608:	d108      	bne.n	800a61c <_dtoa_r+0x6bc>
 800a60a:	459b      	cmp	fp, r3
 800a60c:	d10a      	bne.n	800a624 <_dtoa_r+0x6c4>
 800a60e:	9b08      	ldr	r3, [sp, #32]
 800a610:	3301      	adds	r3, #1
 800a612:	9308      	str	r3, [sp, #32]
 800a614:	2330      	movs	r3, #48	; 0x30
 800a616:	f88b 3000 	strb.w	r3, [fp]
 800a61a:	465b      	mov	r3, fp
 800a61c:	781a      	ldrb	r2, [r3, #0]
 800a61e:	3201      	adds	r2, #1
 800a620:	701a      	strb	r2, [r3, #0]
 800a622:	e78c      	b.n	800a53e <_dtoa_r+0x5de>
 800a624:	461d      	mov	r5, r3
 800a626:	e7ea      	b.n	800a5fe <_dtoa_r+0x69e>
 800a628:	2200      	movs	r2, #0
 800a62a:	4b9b      	ldr	r3, [pc, #620]	; (800a898 <_dtoa_r+0x938>)
 800a62c:	f7f5 ffb0 	bl	8000590 <__aeabi_dmul>
 800a630:	2200      	movs	r2, #0
 800a632:	2300      	movs	r3, #0
 800a634:	4606      	mov	r6, r0
 800a636:	460f      	mov	r7, r1
 800a638:	f7f6 fa12 	bl	8000a60 <__aeabi_dcmpeq>
 800a63c:	2800      	cmp	r0, #0
 800a63e:	d09a      	beq.n	800a576 <_dtoa_r+0x616>
 800a640:	e7cb      	b.n	800a5da <_dtoa_r+0x67a>
 800a642:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a644:	2a00      	cmp	r2, #0
 800a646:	f000 808b 	beq.w	800a760 <_dtoa_r+0x800>
 800a64a:	9a06      	ldr	r2, [sp, #24]
 800a64c:	2a01      	cmp	r2, #1
 800a64e:	dc6e      	bgt.n	800a72e <_dtoa_r+0x7ce>
 800a650:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a652:	2a00      	cmp	r2, #0
 800a654:	d067      	beq.n	800a726 <_dtoa_r+0x7c6>
 800a656:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a65a:	9f07      	ldr	r7, [sp, #28]
 800a65c:	9d05      	ldr	r5, [sp, #20]
 800a65e:	9a05      	ldr	r2, [sp, #20]
 800a660:	2101      	movs	r1, #1
 800a662:	441a      	add	r2, r3
 800a664:	4620      	mov	r0, r4
 800a666:	9205      	str	r2, [sp, #20]
 800a668:	4498      	add	r8, r3
 800a66a:	f000 fb15 	bl	800ac98 <__i2b>
 800a66e:	4606      	mov	r6, r0
 800a670:	2d00      	cmp	r5, #0
 800a672:	dd0c      	ble.n	800a68e <_dtoa_r+0x72e>
 800a674:	f1b8 0f00 	cmp.w	r8, #0
 800a678:	dd09      	ble.n	800a68e <_dtoa_r+0x72e>
 800a67a:	4545      	cmp	r5, r8
 800a67c:	9a05      	ldr	r2, [sp, #20]
 800a67e:	462b      	mov	r3, r5
 800a680:	bfa8      	it	ge
 800a682:	4643      	movge	r3, r8
 800a684:	1ad2      	subs	r2, r2, r3
 800a686:	9205      	str	r2, [sp, #20]
 800a688:	1aed      	subs	r5, r5, r3
 800a68a:	eba8 0803 	sub.w	r8, r8, r3
 800a68e:	9b07      	ldr	r3, [sp, #28]
 800a690:	b1eb      	cbz	r3, 800a6ce <_dtoa_r+0x76e>
 800a692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a694:	2b00      	cmp	r3, #0
 800a696:	d067      	beq.n	800a768 <_dtoa_r+0x808>
 800a698:	b18f      	cbz	r7, 800a6be <_dtoa_r+0x75e>
 800a69a:	4631      	mov	r1, r6
 800a69c:	463a      	mov	r2, r7
 800a69e:	4620      	mov	r0, r4
 800a6a0:	f000 fb9a 	bl	800add8 <__pow5mult>
 800a6a4:	9a04      	ldr	r2, [sp, #16]
 800a6a6:	4601      	mov	r1, r0
 800a6a8:	4606      	mov	r6, r0
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	f000 fafd 	bl	800acaa <__multiply>
 800a6b0:	9904      	ldr	r1, [sp, #16]
 800a6b2:	9008      	str	r0, [sp, #32]
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	f000 fa4f 	bl	800ab58 <_Bfree>
 800a6ba:	9b08      	ldr	r3, [sp, #32]
 800a6bc:	9304      	str	r3, [sp, #16]
 800a6be:	9b07      	ldr	r3, [sp, #28]
 800a6c0:	1bda      	subs	r2, r3, r7
 800a6c2:	d004      	beq.n	800a6ce <_dtoa_r+0x76e>
 800a6c4:	9904      	ldr	r1, [sp, #16]
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f000 fb86 	bl	800add8 <__pow5mult>
 800a6cc:	9004      	str	r0, [sp, #16]
 800a6ce:	2101      	movs	r1, #1
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	f000 fae1 	bl	800ac98 <__i2b>
 800a6d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6d8:	4607      	mov	r7, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	f000 81d0 	beq.w	800aa80 <_dtoa_r+0xb20>
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	4601      	mov	r1, r0
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	f000 fb77 	bl	800add8 <__pow5mult>
 800a6ea:	9b06      	ldr	r3, [sp, #24]
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	4607      	mov	r7, r0
 800a6f0:	dc40      	bgt.n	800a774 <_dtoa_r+0x814>
 800a6f2:	9b00      	ldr	r3, [sp, #0]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d139      	bne.n	800a76c <_dtoa_r+0x80c>
 800a6f8:	9b01      	ldr	r3, [sp, #4]
 800a6fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d136      	bne.n	800a770 <_dtoa_r+0x810>
 800a702:	9b01      	ldr	r3, [sp, #4]
 800a704:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a708:	0d1b      	lsrs	r3, r3, #20
 800a70a:	051b      	lsls	r3, r3, #20
 800a70c:	b12b      	cbz	r3, 800a71a <_dtoa_r+0x7ba>
 800a70e:	9b05      	ldr	r3, [sp, #20]
 800a710:	3301      	adds	r3, #1
 800a712:	9305      	str	r3, [sp, #20]
 800a714:	f108 0801 	add.w	r8, r8, #1
 800a718:	2301      	movs	r3, #1
 800a71a:	9307      	str	r3, [sp, #28]
 800a71c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d12a      	bne.n	800a778 <_dtoa_r+0x818>
 800a722:	2001      	movs	r0, #1
 800a724:	e030      	b.n	800a788 <_dtoa_r+0x828>
 800a726:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a728:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a72c:	e795      	b.n	800a65a <_dtoa_r+0x6fa>
 800a72e:	9b07      	ldr	r3, [sp, #28]
 800a730:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800a734:	42bb      	cmp	r3, r7
 800a736:	bfbf      	itttt	lt
 800a738:	9b07      	ldrlt	r3, [sp, #28]
 800a73a:	9707      	strlt	r7, [sp, #28]
 800a73c:	1afa      	sublt	r2, r7, r3
 800a73e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a740:	bfbb      	ittet	lt
 800a742:	189b      	addlt	r3, r3, r2
 800a744:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a746:	1bdf      	subge	r7, r3, r7
 800a748:	2700      	movlt	r7, #0
 800a74a:	f1b9 0f00 	cmp.w	r9, #0
 800a74e:	bfb5      	itete	lt
 800a750:	9b05      	ldrlt	r3, [sp, #20]
 800a752:	9d05      	ldrge	r5, [sp, #20]
 800a754:	eba3 0509 	sublt.w	r5, r3, r9
 800a758:	464b      	movge	r3, r9
 800a75a:	bfb8      	it	lt
 800a75c:	2300      	movlt	r3, #0
 800a75e:	e77e      	b.n	800a65e <_dtoa_r+0x6fe>
 800a760:	9f07      	ldr	r7, [sp, #28]
 800a762:	9d05      	ldr	r5, [sp, #20]
 800a764:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a766:	e783      	b.n	800a670 <_dtoa_r+0x710>
 800a768:	9a07      	ldr	r2, [sp, #28]
 800a76a:	e7ab      	b.n	800a6c4 <_dtoa_r+0x764>
 800a76c:	2300      	movs	r3, #0
 800a76e:	e7d4      	b.n	800a71a <_dtoa_r+0x7ba>
 800a770:	9b00      	ldr	r3, [sp, #0]
 800a772:	e7d2      	b.n	800a71a <_dtoa_r+0x7ba>
 800a774:	2300      	movs	r3, #0
 800a776:	9307      	str	r3, [sp, #28]
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a77e:	6918      	ldr	r0, [r3, #16]
 800a780:	f000 fa3c 	bl	800abfc <__hi0bits>
 800a784:	f1c0 0020 	rsb	r0, r0, #32
 800a788:	4440      	add	r0, r8
 800a78a:	f010 001f 	ands.w	r0, r0, #31
 800a78e:	d047      	beq.n	800a820 <_dtoa_r+0x8c0>
 800a790:	f1c0 0320 	rsb	r3, r0, #32
 800a794:	2b04      	cmp	r3, #4
 800a796:	dd3b      	ble.n	800a810 <_dtoa_r+0x8b0>
 800a798:	9b05      	ldr	r3, [sp, #20]
 800a79a:	f1c0 001c 	rsb	r0, r0, #28
 800a79e:	4403      	add	r3, r0
 800a7a0:	9305      	str	r3, [sp, #20]
 800a7a2:	4405      	add	r5, r0
 800a7a4:	4480      	add	r8, r0
 800a7a6:	9b05      	ldr	r3, [sp, #20]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	dd05      	ble.n	800a7b8 <_dtoa_r+0x858>
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	9904      	ldr	r1, [sp, #16]
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	f000 fb5f 	bl	800ae74 <__lshift>
 800a7b6:	9004      	str	r0, [sp, #16]
 800a7b8:	f1b8 0f00 	cmp.w	r8, #0
 800a7bc:	dd05      	ble.n	800a7ca <_dtoa_r+0x86a>
 800a7be:	4639      	mov	r1, r7
 800a7c0:	4642      	mov	r2, r8
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	f000 fb56 	bl	800ae74 <__lshift>
 800a7c8:	4607      	mov	r7, r0
 800a7ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7cc:	b353      	cbz	r3, 800a824 <_dtoa_r+0x8c4>
 800a7ce:	4639      	mov	r1, r7
 800a7d0:	9804      	ldr	r0, [sp, #16]
 800a7d2:	f000 fba3 	bl	800af1c <__mcmp>
 800a7d6:	2800      	cmp	r0, #0
 800a7d8:	da24      	bge.n	800a824 <_dtoa_r+0x8c4>
 800a7da:	2300      	movs	r3, #0
 800a7dc:	220a      	movs	r2, #10
 800a7de:	9904      	ldr	r1, [sp, #16]
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	f000 f9d0 	bl	800ab86 <__multadd>
 800a7e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7e8:	9004      	str	r0, [sp, #16]
 800a7ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	f000 814d 	beq.w	800aa8e <_dtoa_r+0xb2e>
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	4631      	mov	r1, r6
 800a7f8:	220a      	movs	r2, #10
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	f000 f9c3 	bl	800ab86 <__multadd>
 800a800:	9b02      	ldr	r3, [sp, #8]
 800a802:	2b00      	cmp	r3, #0
 800a804:	4606      	mov	r6, r0
 800a806:	dc4f      	bgt.n	800a8a8 <_dtoa_r+0x948>
 800a808:	9b06      	ldr	r3, [sp, #24]
 800a80a:	2b02      	cmp	r3, #2
 800a80c:	dd4c      	ble.n	800a8a8 <_dtoa_r+0x948>
 800a80e:	e011      	b.n	800a834 <_dtoa_r+0x8d4>
 800a810:	d0c9      	beq.n	800a7a6 <_dtoa_r+0x846>
 800a812:	9a05      	ldr	r2, [sp, #20]
 800a814:	331c      	adds	r3, #28
 800a816:	441a      	add	r2, r3
 800a818:	9205      	str	r2, [sp, #20]
 800a81a:	441d      	add	r5, r3
 800a81c:	4498      	add	r8, r3
 800a81e:	e7c2      	b.n	800a7a6 <_dtoa_r+0x846>
 800a820:	4603      	mov	r3, r0
 800a822:	e7f6      	b.n	800a812 <_dtoa_r+0x8b2>
 800a824:	f1b9 0f00 	cmp.w	r9, #0
 800a828:	dc38      	bgt.n	800a89c <_dtoa_r+0x93c>
 800a82a:	9b06      	ldr	r3, [sp, #24]
 800a82c:	2b02      	cmp	r3, #2
 800a82e:	dd35      	ble.n	800a89c <_dtoa_r+0x93c>
 800a830:	f8cd 9008 	str.w	r9, [sp, #8]
 800a834:	9b02      	ldr	r3, [sp, #8]
 800a836:	b963      	cbnz	r3, 800a852 <_dtoa_r+0x8f2>
 800a838:	4639      	mov	r1, r7
 800a83a:	2205      	movs	r2, #5
 800a83c:	4620      	mov	r0, r4
 800a83e:	f000 f9a2 	bl	800ab86 <__multadd>
 800a842:	4601      	mov	r1, r0
 800a844:	4607      	mov	r7, r0
 800a846:	9804      	ldr	r0, [sp, #16]
 800a848:	f000 fb68 	bl	800af1c <__mcmp>
 800a84c:	2800      	cmp	r0, #0
 800a84e:	f73f adcc 	bgt.w	800a3ea <_dtoa_r+0x48a>
 800a852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a854:	465d      	mov	r5, fp
 800a856:	ea6f 0a03 	mvn.w	sl, r3
 800a85a:	f04f 0900 	mov.w	r9, #0
 800a85e:	4639      	mov	r1, r7
 800a860:	4620      	mov	r0, r4
 800a862:	f000 f979 	bl	800ab58 <_Bfree>
 800a866:	2e00      	cmp	r6, #0
 800a868:	f43f aeb7 	beq.w	800a5da <_dtoa_r+0x67a>
 800a86c:	f1b9 0f00 	cmp.w	r9, #0
 800a870:	d005      	beq.n	800a87e <_dtoa_r+0x91e>
 800a872:	45b1      	cmp	r9, r6
 800a874:	d003      	beq.n	800a87e <_dtoa_r+0x91e>
 800a876:	4649      	mov	r1, r9
 800a878:	4620      	mov	r0, r4
 800a87a:	f000 f96d 	bl	800ab58 <_Bfree>
 800a87e:	4631      	mov	r1, r6
 800a880:	4620      	mov	r0, r4
 800a882:	f000 f969 	bl	800ab58 <_Bfree>
 800a886:	e6a8      	b.n	800a5da <_dtoa_r+0x67a>
 800a888:	2700      	movs	r7, #0
 800a88a:	463e      	mov	r6, r7
 800a88c:	e7e1      	b.n	800a852 <_dtoa_r+0x8f2>
 800a88e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a892:	463e      	mov	r6, r7
 800a894:	e5a9      	b.n	800a3ea <_dtoa_r+0x48a>
 800a896:	bf00      	nop
 800a898:	40240000 	.word	0x40240000
 800a89c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a89e:	f8cd 9008 	str.w	r9, [sp, #8]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	f000 80fa 	beq.w	800aa9c <_dtoa_r+0xb3c>
 800a8a8:	2d00      	cmp	r5, #0
 800a8aa:	dd05      	ble.n	800a8b8 <_dtoa_r+0x958>
 800a8ac:	4631      	mov	r1, r6
 800a8ae:	462a      	mov	r2, r5
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	f000 fadf 	bl	800ae74 <__lshift>
 800a8b6:	4606      	mov	r6, r0
 800a8b8:	9b07      	ldr	r3, [sp, #28]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d04c      	beq.n	800a958 <_dtoa_r+0x9f8>
 800a8be:	6871      	ldr	r1, [r6, #4]
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	f000 f915 	bl	800aaf0 <_Balloc>
 800a8c6:	6932      	ldr	r2, [r6, #16]
 800a8c8:	3202      	adds	r2, #2
 800a8ca:	4605      	mov	r5, r0
 800a8cc:	0092      	lsls	r2, r2, #2
 800a8ce:	f106 010c 	add.w	r1, r6, #12
 800a8d2:	300c      	adds	r0, #12
 800a8d4:	f7fe fe5c 	bl	8009590 <memcpy>
 800a8d8:	2201      	movs	r2, #1
 800a8da:	4629      	mov	r1, r5
 800a8dc:	4620      	mov	r0, r4
 800a8de:	f000 fac9 	bl	800ae74 <__lshift>
 800a8e2:	9b00      	ldr	r3, [sp, #0]
 800a8e4:	f8cd b014 	str.w	fp, [sp, #20]
 800a8e8:	f003 0301 	and.w	r3, r3, #1
 800a8ec:	46b1      	mov	r9, r6
 800a8ee:	9307      	str	r3, [sp, #28]
 800a8f0:	4606      	mov	r6, r0
 800a8f2:	4639      	mov	r1, r7
 800a8f4:	9804      	ldr	r0, [sp, #16]
 800a8f6:	f7ff faa5 	bl	8009e44 <quorem>
 800a8fa:	4649      	mov	r1, r9
 800a8fc:	4605      	mov	r5, r0
 800a8fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a902:	9804      	ldr	r0, [sp, #16]
 800a904:	f000 fb0a 	bl	800af1c <__mcmp>
 800a908:	4632      	mov	r2, r6
 800a90a:	9000      	str	r0, [sp, #0]
 800a90c:	4639      	mov	r1, r7
 800a90e:	4620      	mov	r0, r4
 800a910:	f000 fb1e 	bl	800af50 <__mdiff>
 800a914:	68c3      	ldr	r3, [r0, #12]
 800a916:	4602      	mov	r2, r0
 800a918:	bb03      	cbnz	r3, 800a95c <_dtoa_r+0x9fc>
 800a91a:	4601      	mov	r1, r0
 800a91c:	9008      	str	r0, [sp, #32]
 800a91e:	9804      	ldr	r0, [sp, #16]
 800a920:	f000 fafc 	bl	800af1c <__mcmp>
 800a924:	9a08      	ldr	r2, [sp, #32]
 800a926:	4603      	mov	r3, r0
 800a928:	4611      	mov	r1, r2
 800a92a:	4620      	mov	r0, r4
 800a92c:	9308      	str	r3, [sp, #32]
 800a92e:	f000 f913 	bl	800ab58 <_Bfree>
 800a932:	9b08      	ldr	r3, [sp, #32]
 800a934:	b9a3      	cbnz	r3, 800a960 <_dtoa_r+0xa00>
 800a936:	9a06      	ldr	r2, [sp, #24]
 800a938:	b992      	cbnz	r2, 800a960 <_dtoa_r+0xa00>
 800a93a:	9a07      	ldr	r2, [sp, #28]
 800a93c:	b982      	cbnz	r2, 800a960 <_dtoa_r+0xa00>
 800a93e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a942:	d029      	beq.n	800a998 <_dtoa_r+0xa38>
 800a944:	9b00      	ldr	r3, [sp, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	dd01      	ble.n	800a94e <_dtoa_r+0x9ee>
 800a94a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a94e:	9b05      	ldr	r3, [sp, #20]
 800a950:	1c5d      	adds	r5, r3, #1
 800a952:	f883 8000 	strb.w	r8, [r3]
 800a956:	e782      	b.n	800a85e <_dtoa_r+0x8fe>
 800a958:	4630      	mov	r0, r6
 800a95a:	e7c2      	b.n	800a8e2 <_dtoa_r+0x982>
 800a95c:	2301      	movs	r3, #1
 800a95e:	e7e3      	b.n	800a928 <_dtoa_r+0x9c8>
 800a960:	9a00      	ldr	r2, [sp, #0]
 800a962:	2a00      	cmp	r2, #0
 800a964:	db04      	blt.n	800a970 <_dtoa_r+0xa10>
 800a966:	d125      	bne.n	800a9b4 <_dtoa_r+0xa54>
 800a968:	9a06      	ldr	r2, [sp, #24]
 800a96a:	bb1a      	cbnz	r2, 800a9b4 <_dtoa_r+0xa54>
 800a96c:	9a07      	ldr	r2, [sp, #28]
 800a96e:	bb0a      	cbnz	r2, 800a9b4 <_dtoa_r+0xa54>
 800a970:	2b00      	cmp	r3, #0
 800a972:	ddec      	ble.n	800a94e <_dtoa_r+0x9ee>
 800a974:	2201      	movs	r2, #1
 800a976:	9904      	ldr	r1, [sp, #16]
 800a978:	4620      	mov	r0, r4
 800a97a:	f000 fa7b 	bl	800ae74 <__lshift>
 800a97e:	4639      	mov	r1, r7
 800a980:	9004      	str	r0, [sp, #16]
 800a982:	f000 facb 	bl	800af1c <__mcmp>
 800a986:	2800      	cmp	r0, #0
 800a988:	dc03      	bgt.n	800a992 <_dtoa_r+0xa32>
 800a98a:	d1e0      	bne.n	800a94e <_dtoa_r+0x9ee>
 800a98c:	f018 0f01 	tst.w	r8, #1
 800a990:	d0dd      	beq.n	800a94e <_dtoa_r+0x9ee>
 800a992:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a996:	d1d8      	bne.n	800a94a <_dtoa_r+0x9ea>
 800a998:	9b05      	ldr	r3, [sp, #20]
 800a99a:	9a05      	ldr	r2, [sp, #20]
 800a99c:	1c5d      	adds	r5, r3, #1
 800a99e:	2339      	movs	r3, #57	; 0x39
 800a9a0:	7013      	strb	r3, [r2, #0]
 800a9a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a9a6:	2b39      	cmp	r3, #57	; 0x39
 800a9a8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800a9ac:	d04f      	beq.n	800aa4e <_dtoa_r+0xaee>
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	7013      	strb	r3, [r2, #0]
 800a9b2:	e754      	b.n	800a85e <_dtoa_r+0x8fe>
 800a9b4:	9a05      	ldr	r2, [sp, #20]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	f102 0501 	add.w	r5, r2, #1
 800a9bc:	dd06      	ble.n	800a9cc <_dtoa_r+0xa6c>
 800a9be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a9c2:	d0e9      	beq.n	800a998 <_dtoa_r+0xa38>
 800a9c4:	f108 0801 	add.w	r8, r8, #1
 800a9c8:	9b05      	ldr	r3, [sp, #20]
 800a9ca:	e7c2      	b.n	800a952 <_dtoa_r+0x9f2>
 800a9cc:	9a02      	ldr	r2, [sp, #8]
 800a9ce:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a9d2:	eba5 030b 	sub.w	r3, r5, fp
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d021      	beq.n	800aa1e <_dtoa_r+0xabe>
 800a9da:	2300      	movs	r3, #0
 800a9dc:	220a      	movs	r2, #10
 800a9de:	9904      	ldr	r1, [sp, #16]
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	f000 f8d0 	bl	800ab86 <__multadd>
 800a9e6:	45b1      	cmp	r9, r6
 800a9e8:	9004      	str	r0, [sp, #16]
 800a9ea:	f04f 0300 	mov.w	r3, #0
 800a9ee:	f04f 020a 	mov.w	r2, #10
 800a9f2:	4649      	mov	r1, r9
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	d105      	bne.n	800aa04 <_dtoa_r+0xaa4>
 800a9f8:	f000 f8c5 	bl	800ab86 <__multadd>
 800a9fc:	4681      	mov	r9, r0
 800a9fe:	4606      	mov	r6, r0
 800aa00:	9505      	str	r5, [sp, #20]
 800aa02:	e776      	b.n	800a8f2 <_dtoa_r+0x992>
 800aa04:	f000 f8bf 	bl	800ab86 <__multadd>
 800aa08:	4631      	mov	r1, r6
 800aa0a:	4681      	mov	r9, r0
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	220a      	movs	r2, #10
 800aa10:	4620      	mov	r0, r4
 800aa12:	f000 f8b8 	bl	800ab86 <__multadd>
 800aa16:	4606      	mov	r6, r0
 800aa18:	e7f2      	b.n	800aa00 <_dtoa_r+0xaa0>
 800aa1a:	f04f 0900 	mov.w	r9, #0
 800aa1e:	2201      	movs	r2, #1
 800aa20:	9904      	ldr	r1, [sp, #16]
 800aa22:	4620      	mov	r0, r4
 800aa24:	f000 fa26 	bl	800ae74 <__lshift>
 800aa28:	4639      	mov	r1, r7
 800aa2a:	9004      	str	r0, [sp, #16]
 800aa2c:	f000 fa76 	bl	800af1c <__mcmp>
 800aa30:	2800      	cmp	r0, #0
 800aa32:	dcb6      	bgt.n	800a9a2 <_dtoa_r+0xa42>
 800aa34:	d102      	bne.n	800aa3c <_dtoa_r+0xadc>
 800aa36:	f018 0f01 	tst.w	r8, #1
 800aa3a:	d1b2      	bne.n	800a9a2 <_dtoa_r+0xa42>
 800aa3c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aa40:	2b30      	cmp	r3, #48	; 0x30
 800aa42:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800aa46:	f47f af0a 	bne.w	800a85e <_dtoa_r+0x8fe>
 800aa4a:	4615      	mov	r5, r2
 800aa4c:	e7f6      	b.n	800aa3c <_dtoa_r+0xadc>
 800aa4e:	4593      	cmp	fp, r2
 800aa50:	d105      	bne.n	800aa5e <_dtoa_r+0xafe>
 800aa52:	2331      	movs	r3, #49	; 0x31
 800aa54:	f10a 0a01 	add.w	sl, sl, #1
 800aa58:	f88b 3000 	strb.w	r3, [fp]
 800aa5c:	e6ff      	b.n	800a85e <_dtoa_r+0x8fe>
 800aa5e:	4615      	mov	r5, r2
 800aa60:	e79f      	b.n	800a9a2 <_dtoa_r+0xa42>
 800aa62:	f8df b064 	ldr.w	fp, [pc, #100]	; 800aac8 <_dtoa_r+0xb68>
 800aa66:	e007      	b.n	800aa78 <_dtoa_r+0xb18>
 800aa68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa6a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800aacc <_dtoa_r+0xb6c>
 800aa6e:	b11b      	cbz	r3, 800aa78 <_dtoa_r+0xb18>
 800aa70:	f10b 0308 	add.w	r3, fp, #8
 800aa74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aa76:	6013      	str	r3, [r2, #0]
 800aa78:	4658      	mov	r0, fp
 800aa7a:	b017      	add	sp, #92	; 0x5c
 800aa7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa80:	9b06      	ldr	r3, [sp, #24]
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	f77f ae35 	ble.w	800a6f2 <_dtoa_r+0x792>
 800aa88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa8a:	9307      	str	r3, [sp, #28]
 800aa8c:	e649      	b.n	800a722 <_dtoa_r+0x7c2>
 800aa8e:	9b02      	ldr	r3, [sp, #8]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	dc03      	bgt.n	800aa9c <_dtoa_r+0xb3c>
 800aa94:	9b06      	ldr	r3, [sp, #24]
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	f73f aecc 	bgt.w	800a834 <_dtoa_r+0x8d4>
 800aa9c:	465d      	mov	r5, fp
 800aa9e:	4639      	mov	r1, r7
 800aaa0:	9804      	ldr	r0, [sp, #16]
 800aaa2:	f7ff f9cf 	bl	8009e44 <quorem>
 800aaa6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800aaaa:	f805 8b01 	strb.w	r8, [r5], #1
 800aaae:	9a02      	ldr	r2, [sp, #8]
 800aab0:	eba5 030b 	sub.w	r3, r5, fp
 800aab4:	429a      	cmp	r2, r3
 800aab6:	ddb0      	ble.n	800aa1a <_dtoa_r+0xaba>
 800aab8:	2300      	movs	r3, #0
 800aaba:	220a      	movs	r2, #10
 800aabc:	9904      	ldr	r1, [sp, #16]
 800aabe:	4620      	mov	r0, r4
 800aac0:	f000 f861 	bl	800ab86 <__multadd>
 800aac4:	9004      	str	r0, [sp, #16]
 800aac6:	e7ea      	b.n	800aa9e <_dtoa_r+0xb3e>
 800aac8:	0800bb80 	.word	0x0800bb80
 800aacc:	0800bb82 	.word	0x0800bb82

0800aad0 <_localeconv_r>:
 800aad0:	4b04      	ldr	r3, [pc, #16]	; (800aae4 <_localeconv_r+0x14>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	6a18      	ldr	r0, [r3, #32]
 800aad6:	4b04      	ldr	r3, [pc, #16]	; (800aae8 <_localeconv_r+0x18>)
 800aad8:	2800      	cmp	r0, #0
 800aada:	bf08      	it	eq
 800aadc:	4618      	moveq	r0, r3
 800aade:	30f0      	adds	r0, #240	; 0xf0
 800aae0:	4770      	bx	lr
 800aae2:	bf00      	nop
 800aae4:	20000010 	.word	0x20000010
 800aae8:	20000074 	.word	0x20000074

0800aaec <__malloc_lock>:
 800aaec:	4770      	bx	lr

0800aaee <__malloc_unlock>:
 800aaee:	4770      	bx	lr

0800aaf0 <_Balloc>:
 800aaf0:	b570      	push	{r4, r5, r6, lr}
 800aaf2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aaf4:	4604      	mov	r4, r0
 800aaf6:	460e      	mov	r6, r1
 800aaf8:	b93d      	cbnz	r5, 800ab0a <_Balloc+0x1a>
 800aafa:	2010      	movs	r0, #16
 800aafc:	f7fe fd38 	bl	8009570 <malloc>
 800ab00:	6260      	str	r0, [r4, #36]	; 0x24
 800ab02:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ab06:	6005      	str	r5, [r0, #0]
 800ab08:	60c5      	str	r5, [r0, #12]
 800ab0a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ab0c:	68eb      	ldr	r3, [r5, #12]
 800ab0e:	b183      	cbz	r3, 800ab32 <_Balloc+0x42>
 800ab10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ab18:	b9b8      	cbnz	r0, 800ab4a <_Balloc+0x5a>
 800ab1a:	2101      	movs	r1, #1
 800ab1c:	fa01 f506 	lsl.w	r5, r1, r6
 800ab20:	1d6a      	adds	r2, r5, #5
 800ab22:	0092      	lsls	r2, r2, #2
 800ab24:	4620      	mov	r0, r4
 800ab26:	f000 fabf 	bl	800b0a8 <_calloc_r>
 800ab2a:	b160      	cbz	r0, 800ab46 <_Balloc+0x56>
 800ab2c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ab30:	e00e      	b.n	800ab50 <_Balloc+0x60>
 800ab32:	2221      	movs	r2, #33	; 0x21
 800ab34:	2104      	movs	r1, #4
 800ab36:	4620      	mov	r0, r4
 800ab38:	f000 fab6 	bl	800b0a8 <_calloc_r>
 800ab3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab3e:	60e8      	str	r0, [r5, #12]
 800ab40:	68db      	ldr	r3, [r3, #12]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d1e4      	bne.n	800ab10 <_Balloc+0x20>
 800ab46:	2000      	movs	r0, #0
 800ab48:	bd70      	pop	{r4, r5, r6, pc}
 800ab4a:	6802      	ldr	r2, [r0, #0]
 800ab4c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ab50:	2300      	movs	r3, #0
 800ab52:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab56:	e7f7      	b.n	800ab48 <_Balloc+0x58>

0800ab58 <_Bfree>:
 800ab58:	b570      	push	{r4, r5, r6, lr}
 800ab5a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ab5c:	4606      	mov	r6, r0
 800ab5e:	460d      	mov	r5, r1
 800ab60:	b93c      	cbnz	r4, 800ab72 <_Bfree+0x1a>
 800ab62:	2010      	movs	r0, #16
 800ab64:	f7fe fd04 	bl	8009570 <malloc>
 800ab68:	6270      	str	r0, [r6, #36]	; 0x24
 800ab6a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab6e:	6004      	str	r4, [r0, #0]
 800ab70:	60c4      	str	r4, [r0, #12]
 800ab72:	b13d      	cbz	r5, 800ab84 <_Bfree+0x2c>
 800ab74:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ab76:	686a      	ldr	r2, [r5, #4]
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab7e:	6029      	str	r1, [r5, #0]
 800ab80:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ab84:	bd70      	pop	{r4, r5, r6, pc}

0800ab86 <__multadd>:
 800ab86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab8a:	690d      	ldr	r5, [r1, #16]
 800ab8c:	461f      	mov	r7, r3
 800ab8e:	4606      	mov	r6, r0
 800ab90:	460c      	mov	r4, r1
 800ab92:	f101 0c14 	add.w	ip, r1, #20
 800ab96:	2300      	movs	r3, #0
 800ab98:	f8dc 0000 	ldr.w	r0, [ip]
 800ab9c:	b281      	uxth	r1, r0
 800ab9e:	fb02 7101 	mla	r1, r2, r1, r7
 800aba2:	0c0f      	lsrs	r7, r1, #16
 800aba4:	0c00      	lsrs	r0, r0, #16
 800aba6:	fb02 7000 	mla	r0, r2, r0, r7
 800abaa:	b289      	uxth	r1, r1
 800abac:	3301      	adds	r3, #1
 800abae:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800abb2:	429d      	cmp	r5, r3
 800abb4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800abb8:	f84c 1b04 	str.w	r1, [ip], #4
 800abbc:	dcec      	bgt.n	800ab98 <__multadd+0x12>
 800abbe:	b1d7      	cbz	r7, 800abf6 <__multadd+0x70>
 800abc0:	68a3      	ldr	r3, [r4, #8]
 800abc2:	42ab      	cmp	r3, r5
 800abc4:	dc12      	bgt.n	800abec <__multadd+0x66>
 800abc6:	6861      	ldr	r1, [r4, #4]
 800abc8:	4630      	mov	r0, r6
 800abca:	3101      	adds	r1, #1
 800abcc:	f7ff ff90 	bl	800aaf0 <_Balloc>
 800abd0:	6922      	ldr	r2, [r4, #16]
 800abd2:	3202      	adds	r2, #2
 800abd4:	f104 010c 	add.w	r1, r4, #12
 800abd8:	4680      	mov	r8, r0
 800abda:	0092      	lsls	r2, r2, #2
 800abdc:	300c      	adds	r0, #12
 800abde:	f7fe fcd7 	bl	8009590 <memcpy>
 800abe2:	4621      	mov	r1, r4
 800abe4:	4630      	mov	r0, r6
 800abe6:	f7ff ffb7 	bl	800ab58 <_Bfree>
 800abea:	4644      	mov	r4, r8
 800abec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800abf0:	3501      	adds	r5, #1
 800abf2:	615f      	str	r7, [r3, #20]
 800abf4:	6125      	str	r5, [r4, #16]
 800abf6:	4620      	mov	r0, r4
 800abf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800abfc <__hi0bits>:
 800abfc:	0c02      	lsrs	r2, r0, #16
 800abfe:	0412      	lsls	r2, r2, #16
 800ac00:	4603      	mov	r3, r0
 800ac02:	b9b2      	cbnz	r2, 800ac32 <__hi0bits+0x36>
 800ac04:	0403      	lsls	r3, r0, #16
 800ac06:	2010      	movs	r0, #16
 800ac08:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ac0c:	bf04      	itt	eq
 800ac0e:	021b      	lsleq	r3, r3, #8
 800ac10:	3008      	addeq	r0, #8
 800ac12:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ac16:	bf04      	itt	eq
 800ac18:	011b      	lsleq	r3, r3, #4
 800ac1a:	3004      	addeq	r0, #4
 800ac1c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ac20:	bf04      	itt	eq
 800ac22:	009b      	lsleq	r3, r3, #2
 800ac24:	3002      	addeq	r0, #2
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	db06      	blt.n	800ac38 <__hi0bits+0x3c>
 800ac2a:	005b      	lsls	r3, r3, #1
 800ac2c:	d503      	bpl.n	800ac36 <__hi0bits+0x3a>
 800ac2e:	3001      	adds	r0, #1
 800ac30:	4770      	bx	lr
 800ac32:	2000      	movs	r0, #0
 800ac34:	e7e8      	b.n	800ac08 <__hi0bits+0xc>
 800ac36:	2020      	movs	r0, #32
 800ac38:	4770      	bx	lr

0800ac3a <__lo0bits>:
 800ac3a:	6803      	ldr	r3, [r0, #0]
 800ac3c:	f013 0207 	ands.w	r2, r3, #7
 800ac40:	4601      	mov	r1, r0
 800ac42:	d00b      	beq.n	800ac5c <__lo0bits+0x22>
 800ac44:	07da      	lsls	r2, r3, #31
 800ac46:	d423      	bmi.n	800ac90 <__lo0bits+0x56>
 800ac48:	0798      	lsls	r0, r3, #30
 800ac4a:	bf49      	itett	mi
 800ac4c:	085b      	lsrmi	r3, r3, #1
 800ac4e:	089b      	lsrpl	r3, r3, #2
 800ac50:	2001      	movmi	r0, #1
 800ac52:	600b      	strmi	r3, [r1, #0]
 800ac54:	bf5c      	itt	pl
 800ac56:	600b      	strpl	r3, [r1, #0]
 800ac58:	2002      	movpl	r0, #2
 800ac5a:	4770      	bx	lr
 800ac5c:	b298      	uxth	r0, r3
 800ac5e:	b9a8      	cbnz	r0, 800ac8c <__lo0bits+0x52>
 800ac60:	0c1b      	lsrs	r3, r3, #16
 800ac62:	2010      	movs	r0, #16
 800ac64:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ac68:	bf04      	itt	eq
 800ac6a:	0a1b      	lsreq	r3, r3, #8
 800ac6c:	3008      	addeq	r0, #8
 800ac6e:	071a      	lsls	r2, r3, #28
 800ac70:	bf04      	itt	eq
 800ac72:	091b      	lsreq	r3, r3, #4
 800ac74:	3004      	addeq	r0, #4
 800ac76:	079a      	lsls	r2, r3, #30
 800ac78:	bf04      	itt	eq
 800ac7a:	089b      	lsreq	r3, r3, #2
 800ac7c:	3002      	addeq	r0, #2
 800ac7e:	07da      	lsls	r2, r3, #31
 800ac80:	d402      	bmi.n	800ac88 <__lo0bits+0x4e>
 800ac82:	085b      	lsrs	r3, r3, #1
 800ac84:	d006      	beq.n	800ac94 <__lo0bits+0x5a>
 800ac86:	3001      	adds	r0, #1
 800ac88:	600b      	str	r3, [r1, #0]
 800ac8a:	4770      	bx	lr
 800ac8c:	4610      	mov	r0, r2
 800ac8e:	e7e9      	b.n	800ac64 <__lo0bits+0x2a>
 800ac90:	2000      	movs	r0, #0
 800ac92:	4770      	bx	lr
 800ac94:	2020      	movs	r0, #32
 800ac96:	4770      	bx	lr

0800ac98 <__i2b>:
 800ac98:	b510      	push	{r4, lr}
 800ac9a:	460c      	mov	r4, r1
 800ac9c:	2101      	movs	r1, #1
 800ac9e:	f7ff ff27 	bl	800aaf0 <_Balloc>
 800aca2:	2201      	movs	r2, #1
 800aca4:	6144      	str	r4, [r0, #20]
 800aca6:	6102      	str	r2, [r0, #16]
 800aca8:	bd10      	pop	{r4, pc}

0800acaa <__multiply>:
 800acaa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acae:	4614      	mov	r4, r2
 800acb0:	690a      	ldr	r2, [r1, #16]
 800acb2:	6923      	ldr	r3, [r4, #16]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	bfb8      	it	lt
 800acb8:	460b      	movlt	r3, r1
 800acba:	4688      	mov	r8, r1
 800acbc:	bfbc      	itt	lt
 800acbe:	46a0      	movlt	r8, r4
 800acc0:	461c      	movlt	r4, r3
 800acc2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800acc6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800acca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800acce:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800acd2:	eb07 0609 	add.w	r6, r7, r9
 800acd6:	42b3      	cmp	r3, r6
 800acd8:	bfb8      	it	lt
 800acda:	3101      	addlt	r1, #1
 800acdc:	f7ff ff08 	bl	800aaf0 <_Balloc>
 800ace0:	f100 0514 	add.w	r5, r0, #20
 800ace4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ace8:	462b      	mov	r3, r5
 800acea:	2200      	movs	r2, #0
 800acec:	4573      	cmp	r3, lr
 800acee:	d316      	bcc.n	800ad1e <__multiply+0x74>
 800acf0:	f104 0214 	add.w	r2, r4, #20
 800acf4:	f108 0114 	add.w	r1, r8, #20
 800acf8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800acfc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ad00:	9300      	str	r3, [sp, #0]
 800ad02:	9b00      	ldr	r3, [sp, #0]
 800ad04:	9201      	str	r2, [sp, #4]
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d80c      	bhi.n	800ad24 <__multiply+0x7a>
 800ad0a:	2e00      	cmp	r6, #0
 800ad0c:	dd03      	ble.n	800ad16 <__multiply+0x6c>
 800ad0e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d05d      	beq.n	800add2 <__multiply+0x128>
 800ad16:	6106      	str	r6, [r0, #16]
 800ad18:	b003      	add	sp, #12
 800ad1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad1e:	f843 2b04 	str.w	r2, [r3], #4
 800ad22:	e7e3      	b.n	800acec <__multiply+0x42>
 800ad24:	f8b2 b000 	ldrh.w	fp, [r2]
 800ad28:	f1bb 0f00 	cmp.w	fp, #0
 800ad2c:	d023      	beq.n	800ad76 <__multiply+0xcc>
 800ad2e:	4689      	mov	r9, r1
 800ad30:	46ac      	mov	ip, r5
 800ad32:	f04f 0800 	mov.w	r8, #0
 800ad36:	f859 4b04 	ldr.w	r4, [r9], #4
 800ad3a:	f8dc a000 	ldr.w	sl, [ip]
 800ad3e:	b2a3      	uxth	r3, r4
 800ad40:	fa1f fa8a 	uxth.w	sl, sl
 800ad44:	fb0b a303 	mla	r3, fp, r3, sl
 800ad48:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ad4c:	f8dc 4000 	ldr.w	r4, [ip]
 800ad50:	4443      	add	r3, r8
 800ad52:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ad56:	fb0b 840a 	mla	r4, fp, sl, r8
 800ad5a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ad5e:	46e2      	mov	sl, ip
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ad66:	454f      	cmp	r7, r9
 800ad68:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ad6c:	f84a 3b04 	str.w	r3, [sl], #4
 800ad70:	d82b      	bhi.n	800adca <__multiply+0x120>
 800ad72:	f8cc 8004 	str.w	r8, [ip, #4]
 800ad76:	9b01      	ldr	r3, [sp, #4]
 800ad78:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ad7c:	3204      	adds	r2, #4
 800ad7e:	f1ba 0f00 	cmp.w	sl, #0
 800ad82:	d020      	beq.n	800adc6 <__multiply+0x11c>
 800ad84:	682b      	ldr	r3, [r5, #0]
 800ad86:	4689      	mov	r9, r1
 800ad88:	46a8      	mov	r8, r5
 800ad8a:	f04f 0b00 	mov.w	fp, #0
 800ad8e:	f8b9 c000 	ldrh.w	ip, [r9]
 800ad92:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ad96:	fb0a 440c 	mla	r4, sl, ip, r4
 800ad9a:	445c      	add	r4, fp
 800ad9c:	46c4      	mov	ip, r8
 800ad9e:	b29b      	uxth	r3, r3
 800ada0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ada4:	f84c 3b04 	str.w	r3, [ip], #4
 800ada8:	f859 3b04 	ldr.w	r3, [r9], #4
 800adac:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800adb0:	0c1b      	lsrs	r3, r3, #16
 800adb2:	fb0a b303 	mla	r3, sl, r3, fp
 800adb6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800adba:	454f      	cmp	r7, r9
 800adbc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800adc0:	d805      	bhi.n	800adce <__multiply+0x124>
 800adc2:	f8c8 3004 	str.w	r3, [r8, #4]
 800adc6:	3504      	adds	r5, #4
 800adc8:	e79b      	b.n	800ad02 <__multiply+0x58>
 800adca:	46d4      	mov	ip, sl
 800adcc:	e7b3      	b.n	800ad36 <__multiply+0x8c>
 800adce:	46e0      	mov	r8, ip
 800add0:	e7dd      	b.n	800ad8e <__multiply+0xe4>
 800add2:	3e01      	subs	r6, #1
 800add4:	e799      	b.n	800ad0a <__multiply+0x60>
	...

0800add8 <__pow5mult>:
 800add8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800addc:	4615      	mov	r5, r2
 800adde:	f012 0203 	ands.w	r2, r2, #3
 800ade2:	4606      	mov	r6, r0
 800ade4:	460f      	mov	r7, r1
 800ade6:	d007      	beq.n	800adf8 <__pow5mult+0x20>
 800ade8:	3a01      	subs	r2, #1
 800adea:	4c21      	ldr	r4, [pc, #132]	; (800ae70 <__pow5mult+0x98>)
 800adec:	2300      	movs	r3, #0
 800adee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800adf2:	f7ff fec8 	bl	800ab86 <__multadd>
 800adf6:	4607      	mov	r7, r0
 800adf8:	10ad      	asrs	r5, r5, #2
 800adfa:	d035      	beq.n	800ae68 <__pow5mult+0x90>
 800adfc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800adfe:	b93c      	cbnz	r4, 800ae10 <__pow5mult+0x38>
 800ae00:	2010      	movs	r0, #16
 800ae02:	f7fe fbb5 	bl	8009570 <malloc>
 800ae06:	6270      	str	r0, [r6, #36]	; 0x24
 800ae08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae0c:	6004      	str	r4, [r0, #0]
 800ae0e:	60c4      	str	r4, [r0, #12]
 800ae10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ae14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae18:	b94c      	cbnz	r4, 800ae2e <__pow5mult+0x56>
 800ae1a:	f240 2171 	movw	r1, #625	; 0x271
 800ae1e:	4630      	mov	r0, r6
 800ae20:	f7ff ff3a 	bl	800ac98 <__i2b>
 800ae24:	2300      	movs	r3, #0
 800ae26:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae2a:	4604      	mov	r4, r0
 800ae2c:	6003      	str	r3, [r0, #0]
 800ae2e:	f04f 0800 	mov.w	r8, #0
 800ae32:	07eb      	lsls	r3, r5, #31
 800ae34:	d50a      	bpl.n	800ae4c <__pow5mult+0x74>
 800ae36:	4639      	mov	r1, r7
 800ae38:	4622      	mov	r2, r4
 800ae3a:	4630      	mov	r0, r6
 800ae3c:	f7ff ff35 	bl	800acaa <__multiply>
 800ae40:	4639      	mov	r1, r7
 800ae42:	4681      	mov	r9, r0
 800ae44:	4630      	mov	r0, r6
 800ae46:	f7ff fe87 	bl	800ab58 <_Bfree>
 800ae4a:	464f      	mov	r7, r9
 800ae4c:	106d      	asrs	r5, r5, #1
 800ae4e:	d00b      	beq.n	800ae68 <__pow5mult+0x90>
 800ae50:	6820      	ldr	r0, [r4, #0]
 800ae52:	b938      	cbnz	r0, 800ae64 <__pow5mult+0x8c>
 800ae54:	4622      	mov	r2, r4
 800ae56:	4621      	mov	r1, r4
 800ae58:	4630      	mov	r0, r6
 800ae5a:	f7ff ff26 	bl	800acaa <__multiply>
 800ae5e:	6020      	str	r0, [r4, #0]
 800ae60:	f8c0 8000 	str.w	r8, [r0]
 800ae64:	4604      	mov	r4, r0
 800ae66:	e7e4      	b.n	800ae32 <__pow5mult+0x5a>
 800ae68:	4638      	mov	r0, r7
 800ae6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae6e:	bf00      	nop
 800ae70:	0800bc80 	.word	0x0800bc80

0800ae74 <__lshift>:
 800ae74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae78:	460c      	mov	r4, r1
 800ae7a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae7e:	6923      	ldr	r3, [r4, #16]
 800ae80:	6849      	ldr	r1, [r1, #4]
 800ae82:	eb0a 0903 	add.w	r9, sl, r3
 800ae86:	68a3      	ldr	r3, [r4, #8]
 800ae88:	4607      	mov	r7, r0
 800ae8a:	4616      	mov	r6, r2
 800ae8c:	f109 0501 	add.w	r5, r9, #1
 800ae90:	42ab      	cmp	r3, r5
 800ae92:	db32      	blt.n	800aefa <__lshift+0x86>
 800ae94:	4638      	mov	r0, r7
 800ae96:	f7ff fe2b 	bl	800aaf0 <_Balloc>
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	4680      	mov	r8, r0
 800ae9e:	f100 0114 	add.w	r1, r0, #20
 800aea2:	461a      	mov	r2, r3
 800aea4:	4553      	cmp	r3, sl
 800aea6:	db2b      	blt.n	800af00 <__lshift+0x8c>
 800aea8:	6920      	ldr	r0, [r4, #16]
 800aeaa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aeae:	f104 0314 	add.w	r3, r4, #20
 800aeb2:	f016 021f 	ands.w	r2, r6, #31
 800aeb6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aeba:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aebe:	d025      	beq.n	800af0c <__lshift+0x98>
 800aec0:	f1c2 0e20 	rsb	lr, r2, #32
 800aec4:	2000      	movs	r0, #0
 800aec6:	681e      	ldr	r6, [r3, #0]
 800aec8:	468a      	mov	sl, r1
 800aeca:	4096      	lsls	r6, r2
 800aecc:	4330      	orrs	r0, r6
 800aece:	f84a 0b04 	str.w	r0, [sl], #4
 800aed2:	f853 0b04 	ldr.w	r0, [r3], #4
 800aed6:	459c      	cmp	ip, r3
 800aed8:	fa20 f00e 	lsr.w	r0, r0, lr
 800aedc:	d814      	bhi.n	800af08 <__lshift+0x94>
 800aede:	6048      	str	r0, [r1, #4]
 800aee0:	b108      	cbz	r0, 800aee6 <__lshift+0x72>
 800aee2:	f109 0502 	add.w	r5, r9, #2
 800aee6:	3d01      	subs	r5, #1
 800aee8:	4638      	mov	r0, r7
 800aeea:	f8c8 5010 	str.w	r5, [r8, #16]
 800aeee:	4621      	mov	r1, r4
 800aef0:	f7ff fe32 	bl	800ab58 <_Bfree>
 800aef4:	4640      	mov	r0, r8
 800aef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aefa:	3101      	adds	r1, #1
 800aefc:	005b      	lsls	r3, r3, #1
 800aefe:	e7c7      	b.n	800ae90 <__lshift+0x1c>
 800af00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800af04:	3301      	adds	r3, #1
 800af06:	e7cd      	b.n	800aea4 <__lshift+0x30>
 800af08:	4651      	mov	r1, sl
 800af0a:	e7dc      	b.n	800aec6 <__lshift+0x52>
 800af0c:	3904      	subs	r1, #4
 800af0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800af12:	f841 2f04 	str.w	r2, [r1, #4]!
 800af16:	459c      	cmp	ip, r3
 800af18:	d8f9      	bhi.n	800af0e <__lshift+0x9a>
 800af1a:	e7e4      	b.n	800aee6 <__lshift+0x72>

0800af1c <__mcmp>:
 800af1c:	6903      	ldr	r3, [r0, #16]
 800af1e:	690a      	ldr	r2, [r1, #16]
 800af20:	1a9b      	subs	r3, r3, r2
 800af22:	b530      	push	{r4, r5, lr}
 800af24:	d10c      	bne.n	800af40 <__mcmp+0x24>
 800af26:	0092      	lsls	r2, r2, #2
 800af28:	3014      	adds	r0, #20
 800af2a:	3114      	adds	r1, #20
 800af2c:	1884      	adds	r4, r0, r2
 800af2e:	4411      	add	r1, r2
 800af30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800af34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800af38:	4295      	cmp	r5, r2
 800af3a:	d003      	beq.n	800af44 <__mcmp+0x28>
 800af3c:	d305      	bcc.n	800af4a <__mcmp+0x2e>
 800af3e:	2301      	movs	r3, #1
 800af40:	4618      	mov	r0, r3
 800af42:	bd30      	pop	{r4, r5, pc}
 800af44:	42a0      	cmp	r0, r4
 800af46:	d3f3      	bcc.n	800af30 <__mcmp+0x14>
 800af48:	e7fa      	b.n	800af40 <__mcmp+0x24>
 800af4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af4e:	e7f7      	b.n	800af40 <__mcmp+0x24>

0800af50 <__mdiff>:
 800af50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af54:	460d      	mov	r5, r1
 800af56:	4607      	mov	r7, r0
 800af58:	4611      	mov	r1, r2
 800af5a:	4628      	mov	r0, r5
 800af5c:	4614      	mov	r4, r2
 800af5e:	f7ff ffdd 	bl	800af1c <__mcmp>
 800af62:	1e06      	subs	r6, r0, #0
 800af64:	d108      	bne.n	800af78 <__mdiff+0x28>
 800af66:	4631      	mov	r1, r6
 800af68:	4638      	mov	r0, r7
 800af6a:	f7ff fdc1 	bl	800aaf0 <_Balloc>
 800af6e:	2301      	movs	r3, #1
 800af70:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800af74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af78:	bfa4      	itt	ge
 800af7a:	4623      	movge	r3, r4
 800af7c:	462c      	movge	r4, r5
 800af7e:	4638      	mov	r0, r7
 800af80:	6861      	ldr	r1, [r4, #4]
 800af82:	bfa6      	itte	ge
 800af84:	461d      	movge	r5, r3
 800af86:	2600      	movge	r6, #0
 800af88:	2601      	movlt	r6, #1
 800af8a:	f7ff fdb1 	bl	800aaf0 <_Balloc>
 800af8e:	692b      	ldr	r3, [r5, #16]
 800af90:	60c6      	str	r6, [r0, #12]
 800af92:	6926      	ldr	r6, [r4, #16]
 800af94:	f105 0914 	add.w	r9, r5, #20
 800af98:	f104 0214 	add.w	r2, r4, #20
 800af9c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800afa0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800afa4:	f100 0514 	add.w	r5, r0, #20
 800afa8:	f04f 0e00 	mov.w	lr, #0
 800afac:	f852 ab04 	ldr.w	sl, [r2], #4
 800afb0:	f859 4b04 	ldr.w	r4, [r9], #4
 800afb4:	fa1e f18a 	uxtah	r1, lr, sl
 800afb8:	b2a3      	uxth	r3, r4
 800afba:	1ac9      	subs	r1, r1, r3
 800afbc:	0c23      	lsrs	r3, r4, #16
 800afbe:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800afc2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800afc6:	b289      	uxth	r1, r1
 800afc8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800afcc:	45c8      	cmp	r8, r9
 800afce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800afd2:	4694      	mov	ip, r2
 800afd4:	f845 3b04 	str.w	r3, [r5], #4
 800afd8:	d8e8      	bhi.n	800afac <__mdiff+0x5c>
 800afda:	45bc      	cmp	ip, r7
 800afdc:	d304      	bcc.n	800afe8 <__mdiff+0x98>
 800afde:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800afe2:	b183      	cbz	r3, 800b006 <__mdiff+0xb6>
 800afe4:	6106      	str	r6, [r0, #16]
 800afe6:	e7c5      	b.n	800af74 <__mdiff+0x24>
 800afe8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800afec:	fa1e f381 	uxtah	r3, lr, r1
 800aff0:	141a      	asrs	r2, r3, #16
 800aff2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aff6:	b29b      	uxth	r3, r3
 800aff8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800affc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b000:	f845 3b04 	str.w	r3, [r5], #4
 800b004:	e7e9      	b.n	800afda <__mdiff+0x8a>
 800b006:	3e01      	subs	r6, #1
 800b008:	e7e9      	b.n	800afde <__mdiff+0x8e>

0800b00a <__d2b>:
 800b00a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b00e:	460e      	mov	r6, r1
 800b010:	2101      	movs	r1, #1
 800b012:	ec59 8b10 	vmov	r8, r9, d0
 800b016:	4615      	mov	r5, r2
 800b018:	f7ff fd6a 	bl	800aaf0 <_Balloc>
 800b01c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b020:	4607      	mov	r7, r0
 800b022:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b026:	bb34      	cbnz	r4, 800b076 <__d2b+0x6c>
 800b028:	9301      	str	r3, [sp, #4]
 800b02a:	f1b8 0300 	subs.w	r3, r8, #0
 800b02e:	d027      	beq.n	800b080 <__d2b+0x76>
 800b030:	a802      	add	r0, sp, #8
 800b032:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b036:	f7ff fe00 	bl	800ac3a <__lo0bits>
 800b03a:	9900      	ldr	r1, [sp, #0]
 800b03c:	b1f0      	cbz	r0, 800b07c <__d2b+0x72>
 800b03e:	9a01      	ldr	r2, [sp, #4]
 800b040:	f1c0 0320 	rsb	r3, r0, #32
 800b044:	fa02 f303 	lsl.w	r3, r2, r3
 800b048:	430b      	orrs	r3, r1
 800b04a:	40c2      	lsrs	r2, r0
 800b04c:	617b      	str	r3, [r7, #20]
 800b04e:	9201      	str	r2, [sp, #4]
 800b050:	9b01      	ldr	r3, [sp, #4]
 800b052:	61bb      	str	r3, [r7, #24]
 800b054:	2b00      	cmp	r3, #0
 800b056:	bf14      	ite	ne
 800b058:	2102      	movne	r1, #2
 800b05a:	2101      	moveq	r1, #1
 800b05c:	6139      	str	r1, [r7, #16]
 800b05e:	b1c4      	cbz	r4, 800b092 <__d2b+0x88>
 800b060:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b064:	4404      	add	r4, r0
 800b066:	6034      	str	r4, [r6, #0]
 800b068:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b06c:	6028      	str	r0, [r5, #0]
 800b06e:	4638      	mov	r0, r7
 800b070:	b003      	add	sp, #12
 800b072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b076:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b07a:	e7d5      	b.n	800b028 <__d2b+0x1e>
 800b07c:	6179      	str	r1, [r7, #20]
 800b07e:	e7e7      	b.n	800b050 <__d2b+0x46>
 800b080:	a801      	add	r0, sp, #4
 800b082:	f7ff fdda 	bl	800ac3a <__lo0bits>
 800b086:	9b01      	ldr	r3, [sp, #4]
 800b088:	617b      	str	r3, [r7, #20]
 800b08a:	2101      	movs	r1, #1
 800b08c:	6139      	str	r1, [r7, #16]
 800b08e:	3020      	adds	r0, #32
 800b090:	e7e5      	b.n	800b05e <__d2b+0x54>
 800b092:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b096:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b09a:	6030      	str	r0, [r6, #0]
 800b09c:	6918      	ldr	r0, [r3, #16]
 800b09e:	f7ff fdad 	bl	800abfc <__hi0bits>
 800b0a2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b0a6:	e7e1      	b.n	800b06c <__d2b+0x62>

0800b0a8 <_calloc_r>:
 800b0a8:	b538      	push	{r3, r4, r5, lr}
 800b0aa:	fb02 f401 	mul.w	r4, r2, r1
 800b0ae:	4621      	mov	r1, r4
 800b0b0:	f7fe fad0 	bl	8009654 <_malloc_r>
 800b0b4:	4605      	mov	r5, r0
 800b0b6:	b118      	cbz	r0, 800b0c0 <_calloc_r+0x18>
 800b0b8:	4622      	mov	r2, r4
 800b0ba:	2100      	movs	r1, #0
 800b0bc:	f7fe fa73 	bl	80095a6 <memset>
 800b0c0:	4628      	mov	r0, r5
 800b0c2:	bd38      	pop	{r3, r4, r5, pc}

0800b0c4 <__ascii_mbtowc>:
 800b0c4:	b082      	sub	sp, #8
 800b0c6:	b901      	cbnz	r1, 800b0ca <__ascii_mbtowc+0x6>
 800b0c8:	a901      	add	r1, sp, #4
 800b0ca:	b142      	cbz	r2, 800b0de <__ascii_mbtowc+0x1a>
 800b0cc:	b14b      	cbz	r3, 800b0e2 <__ascii_mbtowc+0x1e>
 800b0ce:	7813      	ldrb	r3, [r2, #0]
 800b0d0:	600b      	str	r3, [r1, #0]
 800b0d2:	7812      	ldrb	r2, [r2, #0]
 800b0d4:	1c10      	adds	r0, r2, #0
 800b0d6:	bf18      	it	ne
 800b0d8:	2001      	movne	r0, #1
 800b0da:	b002      	add	sp, #8
 800b0dc:	4770      	bx	lr
 800b0de:	4610      	mov	r0, r2
 800b0e0:	e7fb      	b.n	800b0da <__ascii_mbtowc+0x16>
 800b0e2:	f06f 0001 	mvn.w	r0, #1
 800b0e6:	e7f8      	b.n	800b0da <__ascii_mbtowc+0x16>

0800b0e8 <__ascii_wctomb>:
 800b0e8:	b149      	cbz	r1, 800b0fe <__ascii_wctomb+0x16>
 800b0ea:	2aff      	cmp	r2, #255	; 0xff
 800b0ec:	bf85      	ittet	hi
 800b0ee:	238a      	movhi	r3, #138	; 0x8a
 800b0f0:	6003      	strhi	r3, [r0, #0]
 800b0f2:	700a      	strbls	r2, [r1, #0]
 800b0f4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b0f8:	bf98      	it	ls
 800b0fa:	2001      	movls	r0, #1
 800b0fc:	4770      	bx	lr
 800b0fe:	4608      	mov	r0, r1
 800b100:	4770      	bx	lr
	...

0800b104 <_init>:
 800b104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b106:	bf00      	nop
 800b108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b10a:	bc08      	pop	{r3}
 800b10c:	469e      	mov	lr, r3
 800b10e:	4770      	bx	lr

0800b110 <_fini>:
 800b110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b112:	bf00      	nop
 800b114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b116:	bc08      	pop	{r3}
 800b118:	469e      	mov	lr, r3
 800b11a:	4770      	bx	lr
