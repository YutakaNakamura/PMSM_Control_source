
A2212 930KV F446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fa8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  0800716c  0800716c  0001716c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080073e0  080073e0  000173e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080073e8  080073e8  000173e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080073ec  080073ec  000173ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000006a8  20000000  080073f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000340  200006a8  08007a98  000206a8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200009e8  08007a98  000209e8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000206a8  2**0
                  CONTENTS, READONLY
 10 .debug_line   000112f2  00000000  00000000  000206d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0003d734  00000000  00000000  000319ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000068af  00000000  00000000  0006f0fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001770  00000000  00000000  000759b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000031d8  00000000  00000000  00077120  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000ad1b  00000000  00000000  0007a2f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00085013  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004244  00000000  00000000  00085090  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00017833  00000000  00000000  000892d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200006a8 	.word	0x200006a8
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007154 	.word	0x08007154

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200006ac 	.word	0x200006ac
 8000200:	08007154 	.word	0x08007154

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000514:	f8df d034 	ldr.w	sp, [pc, #52]	; 800054c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000518:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800051a:	e003      	b.n	8000524 <LoopCopyDataInit>

0800051c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800051e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000520:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000522:	3104      	adds	r1, #4

08000524 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000524:	480b      	ldr	r0, [pc, #44]	; (8000554 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000528:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800052a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800052c:	d3f6      	bcc.n	800051c <CopyDataInit>
  ldr  r2, =_sbss
 800052e:	4a0b      	ldr	r2, [pc, #44]	; (800055c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000530:	e002      	b.n	8000538 <LoopFillZerobss>

08000532 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000532:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000534:	f842 3b04 	str.w	r3, [r2], #4

08000538 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000538:	4b09      	ldr	r3, [pc, #36]	; (8000560 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800053a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800053c:	d3f9      	bcc.n	8000532 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800053e:	f002 fc1d 	bl	8002d7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000542:	f006 fddb 	bl	80070fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000546:	f000 f85d 	bl	8000604 <main>
  bx  lr    
 800054a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800054c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000550:	080073f0 	.word	0x080073f0
  ldr  r0, =_sdata
 8000554:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000558:	200006a8 	.word	0x200006a8
  ldr  r2, =_sbss
 800055c:	200006a8 	.word	0x200006a8
  ldr  r3, = _ebss
 8000560:	200009e8 	.word	0x200009e8

08000564 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000564:	e7fe      	b.n	8000564 <BusFault_Handler>
	...

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056c:	a807      	add	r0, sp, #28
 800056e:	2234      	movs	r2, #52	; 0x34
 8000570:	2100      	movs	r1, #0
 8000572:	f006 fde7 	bl	8007144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000576:	2400      	movs	r4, #0

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	4a20      	ldr	r2, [pc, #128]	; (80005fc <SystemClock_Config+0x94>)
 800057a:	9400      	str	r4, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	9403      	str	r4, [sp, #12]
 800057e:	9402      	str	r4, [sp, #8]
 8000580:	9404      	str	r4, [sp, #16]
 8000582:	9405      	str	r4, [sp, #20]
 8000584:	9406      	str	r4, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000586:	6c11      	ldr	r1, [r2, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <SystemClock_Config+0x98>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800058a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800058e:	6411      	str	r1, [r2, #64]	; 0x40
 8000590:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000592:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000596:	9200      	str	r2, [sp, #0]
 8000598:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059a:	9401      	str	r4, [sp, #4]
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005aa:	9301      	str	r3, [sp, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ac:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005b4:	2204      	movs	r2, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b6:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005ba:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005bc:	f44f 3680 	mov.w	r6, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c0:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c2:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005c4:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c6:	9608      	str	r6, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c8:	9f01      	ldr	r7, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005cc:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005ce:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005d0:	9513      	str	r5, [sp, #76]	; 0x4c
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	260f      	movs	r6, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d4:	f003 f968 	bl	80038a8 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005d8:	f003 f810 	bl	80035fc <HAL_PWREx_EnableOverDrive>
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005dc:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e4:	a802      	add	r0, sp, #8
 80005e6:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e8:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ea:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	9602      	str	r6, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ee:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f0:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005f2:	f003 f841 	bl	8003678 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80005f6:	b015      	add	sp, #84	; 0x54
 80005f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <main>:
{
 8000604:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000608:	b09d      	sub	sp, #116	; 0x74
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	2400      	movs	r4, #0
  HAL_Init();
 800060c:	f002 fc02 	bl	8002e14 <HAL_Init>
  SystemClock_Config();
 8000610:	f7ff ffaa 	bl	8000568 <SystemClock_Config>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000614:	4bb6      	ldr	r3, [pc, #728]	; (80008f0 <main+0x2ec>)
 8000616:	9403      	str	r4, [sp, #12]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	9415      	str	r4, [sp, #84]	; 0x54
 800061a:	9414      	str	r4, [sp, #80]	; 0x50
 800061c:	9416      	str	r4, [sp, #88]	; 0x58
 800061e:	9417      	str	r4, [sp, #92]	; 0x5c
 8000620:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 8000624:	48b3      	ldr	r0, [pc, #716]	; (80008f4 <main+0x2f0>)
  hadc1.Instance = ADC1;
 8000626:	4db4      	ldr	r5, [pc, #720]	; (80008f8 <main+0x2f4>)
  hadc2.Instance = ADC2;
 8000628:	f8df b2f0 	ldr.w	fp, [pc, #752]	; 800091c <main+0x318>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062c:	f042 0204 	orr.w	r2, r2, #4
 8000630:	631a      	str	r2, [r3, #48]	; 0x30
 8000632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000634:	f002 0204 	and.w	r2, r2, #4
 8000638:	9203      	str	r2, [sp, #12]
 800063a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063c:	9404      	str	r4, [sp, #16]
 800063e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000640:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000644:	631a      	str	r2, [r3, #48]	; 0x30
 8000646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000648:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800064c:	9204      	str	r2, [sp, #16]
 800064e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	9405      	str	r4, [sp, #20]
 8000652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000654:	f042 0201 	orr.w	r2, r2, #1
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
 800065a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065c:	f003 0301 	and.w	r3, r3, #1
 8000660:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 8000662:	4622      	mov	r2, r4
 8000664:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000668:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 800066a:	f002 ffc3 	bl	80035f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Start_Stop_Pin */
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 800066e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000672:	4ba2      	ldr	r3, [pc, #648]	; (80008fc <main+0x2f8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000674:	489f      	ldr	r0, [pc, #636]	; (80008f4 <main+0x2f0>)
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000676:	9214      	str	r2, [sp, #80]	; 0x50
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000678:	a914      	add	r1, sp, #80	; 0x50

  /*Configure GPIO pins : M1_PWM_EN_U_Pin M1_PWM_EN_V_Pin M1_PWM_EN_W_Pin */
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800067c:	2702      	movs	r7, #2
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800067e:	f04f 0920 	mov.w	r9, #32
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000682:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000686:	f002 fead 	bl	80033e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 800068a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800068e:	a914      	add	r1, sp, #80	; 0x50
 8000690:	4898      	ldr	r0, [pc, #608]	; (80008f4 <main+0x2f0>)
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 8000692:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	9615      	str	r6, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000696:	9716      	str	r7, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000698:	9717      	str	r7, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800069a:	f002 fea3 	bl	80033e4 <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800069e:	4621      	mov	r1, r4
 80006a0:	464a      	mov	r2, r9
 80006a2:	a814      	add	r0, sp, #80	; 0x50
 80006a4:	f006 fd4e 	bl	8007144 <memset>
  hadc1.Instance = ADC1;
 80006a8:	4a95      	ldr	r2, [pc, #596]	; (8000900 <main+0x2fc>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006aa:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b0:	e885 000c 	stmia.w	r5, {r2, r3}
 80006b4:	9301      	str	r3, [sp, #4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006b6:	4b93      	ldr	r3, [pc, #588]	; (8000904 <main+0x300>)
 80006b8:	62ab      	str	r3, [r5, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006ba:	4628      	mov	r0, r5
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80006bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  sConfigInjected.InjectedNbrOfConversion = 3;
 80006c0:	f04f 0803 	mov.w	r8, #3
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80006c4:	60eb      	str	r3, [r5, #12]
  hadc1.Init.ScanConvMode = ENABLE;
 80006c6:	612e      	str	r6, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006c8:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ca:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ce:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.NbrOfConversion = 2;
 80006d0:	61ef      	str	r7, [r5, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006d2:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d6:	616e      	str	r6, [r5, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006d8:	940d      	str	r4, [sp, #52]	; 0x34
 80006da:	940e      	str	r4, [sp, #56]	; 0x38
 80006dc:	940f      	str	r4, [sp, #60]	; 0x3c
 80006de:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e0:	f002 fbc4 	bl	8002e6c <HAL_ADC_Init>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80006ea:	a914      	add	r1, sp, #80	; 0x50
 80006ec:	4628      	mov	r0, r5
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80006ee:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 80006f2:	9414      	str	r4, [sp, #80]	; 0x50
  sConfigInjected.InjectedRank = 1;
 80006f4:	9615      	str	r6, [sp, #84]	; 0x54
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006f6:	9416      	str	r4, [sp, #88]	; 0x58
  sConfigInjected.AutoInjectedConv = DISABLE;
 80006f8:	f88d 4065 	strb.w	r4, [sp, #101]	; 0x65
  sConfigInjected.InjectedDiscontinuousConvMode = ENABLE;
 80006fc:	f88d 6064 	strb.w	r6, [sp, #100]	; 0x64
  sConfigInjected.InjectedOffset = 0;
 8000700:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000702:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000706:	f002 fd17 	bl	8003138 <HAL_ADCEx_InjectedConfigChannel>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 800070a:	230b      	movs	r3, #11
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800070c:	a914      	add	r1, sp, #80	; 0x50
 800070e:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8000710:	9314      	str	r3, [sp, #80]	; 0x50
  sConfigInjected.InjectedRank = 2;
 8000712:	9715      	str	r7, [sp, #84]	; 0x54
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000714:	f002 fd10 	bl	8003138 <HAL_ADCEx_InjectedConfigChannel>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8000718:	230a      	movs	r3, #10
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800071a:	a914      	add	r1, sp, #80	; 0x50
 800071c:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 800071e:	9314      	str	r3, [sp, #80]	; 0x50
  sConfigInjected.InjectedRank = 3;
 8000720:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000724:	f002 fd08 	bl	8003138 <HAL_ADCEx_InjectedConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000728:	a90d      	add	r1, sp, #52	; 0x34
 800072a:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_12;
 800072c:	f04f 0a0c 	mov.w	sl, #12
  sConfig.Channel = ADC_CHANNEL_1;
 8000730:	960d      	str	r6, [sp, #52]	; 0x34
  sConfig.Rank = 1;
 8000732:	960e      	str	r6, [sp, #56]	; 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000734:	970f      	str	r7, [sp, #60]	; 0x3c
  sConfig.Offset = 0;
 8000736:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000738:	f002 fc48 	bl	8002fcc <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073c:	4628      	mov	r0, r5
 800073e:	a90d      	add	r1, sp, #52	; 0x34
  sConfig.Rank = 2;
 8000740:	970e      	str	r7, [sp, #56]	; 0x38
  sConfig.Offset = 0;
 8000742:	9410      	str	r4, [sp, #64]	; 0x40
  sConfig.Channel = ADC_CHANNEL_12;
 8000744:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000748:	f002 fc40 	bl	8002fcc <HAL_ADC_ConfigChannel>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800074c:	4621      	mov	r1, r4
 800074e:	464a      	mov	r2, r9
 8000750:	a814      	add	r0, sp, #80	; 0x50
 8000752:	f006 fcf7 	bl	8007144 <memset>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000756:	9b01      	ldr	r3, [sp, #4]
 8000758:	f8cb 3004 	str.w	r3, [fp, #4]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800075c:	4b69      	ldr	r3, [pc, #420]	; (8000904 <main+0x300>)
  hadc2.Instance = ADC2;
 800075e:	4a6a      	ldr	r2, [pc, #424]	; (8000908 <main+0x304>)
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000760:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000764:	4658      	mov	r0, fp
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000766:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800076a:	f8cb 300c 	str.w	r3, [fp, #12]
  hadc2.Instance = ADC2;
 800076e:	f8cb 2000 	str.w	r2, [fp]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000772:	f8cb 4008 	str.w	r4, [fp, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8000776:	f8cb 6010 	str.w	r6, [fp, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800077a:	f88b 4018 	strb.w	r4, [fp, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800077e:	f88b 4020 	strb.w	r4, [fp, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000782:	f8cb 402c 	str.w	r4, [fp, #44]	; 0x2c
  hadc2.Init.NbrOfConversion = 1;
 8000786:	f8cb 601c 	str.w	r6, [fp, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800078a:	f88b 4030 	strb.w	r4, [fp, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800078e:	f8cb 6014 	str.w	r6, [fp, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000792:	940d      	str	r4, [sp, #52]	; 0x34
 8000794:	940e      	str	r4, [sp, #56]	; 0x38
 8000796:	940f      	str	r4, [sp, #60]	; 0x3c
 8000798:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800079a:	f002 fb67 	bl	8002e6c <HAL_ADC_Init>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80007a4:	a914      	add	r1, sp, #80	; 0x50
 80007a6:	4658      	mov	r0, fp
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80007a8:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 80007ac:	9414      	str	r4, [sp, #80]	; 0x50
  sConfigInjected.InjectedRank = 1;
 80007ae:	9615      	str	r6, [sp, #84]	; 0x54
  sConfigInjected.InjectedNbrOfConversion = 3;
 80007b0:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007b4:	9416      	str	r4, [sp, #88]	; 0x58
  sConfigInjected.AutoInjectedConv = DISABLE;
 80007b6:	f88d 4065 	strb.w	r4, [sp, #101]	; 0x65
  sConfigInjected.InjectedDiscontinuousConvMode = ENABLE;
 80007ba:	f88d 6064 	strb.w	r6, [sp, #100]	; 0x64
  sConfigInjected.InjectedOffset = 0;
 80007be:	9417      	str	r4, [sp, #92]	; 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80007c0:	f002 fcba 	bl	8003138 <HAL_ADCEx_InjectedConfigChannel>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 80007c4:	230b      	movs	r3, #11
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80007c6:	a914      	add	r1, sp, #80	; 0x50
 80007c8:	4658      	mov	r0, fp
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 80007ca:	9314      	str	r3, [sp, #80]	; 0x50
  sConfigInjected.InjectedRank = 2;
 80007cc:	9715      	str	r7, [sp, #84]	; 0x54
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80007ce:	f002 fcb3 	bl	8003138 <HAL_ADCEx_InjectedConfigChannel>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 80007d2:	230a      	movs	r3, #10
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80007d4:	a914      	add	r1, sp, #80	; 0x50
 80007d6:	4658      	mov	r0, fp
  htim1.Instance = TIM1;
 80007d8:	4d4c      	ldr	r5, [pc, #304]	; (800090c <main+0x308>)
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 80007da:	9314      	str	r3, [sp, #80]	; 0x50
  sConfigInjected.InjectedRank = 3;
 80007dc:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80007e0:	f002 fcaa 	bl	8003138 <HAL_ADCEx_InjectedConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007e4:	4658      	mov	r0, fp
 80007e6:	a90d      	add	r1, sp, #52	; 0x34
  sConfig.Channel = ADC_CHANNEL_0;
 80007e8:	940d      	str	r4, [sp, #52]	; 0x34
  sConfig.Rank = 1;
 80007ea:	960e      	str	r6, [sp, #56]	; 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007ec:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007ee:	f002 fbed 	bl	8002fcc <HAL_ADC_ConfigChannel>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007f2:	464a      	mov	r2, r9
 80007f4:	4621      	mov	r1, r4
 80007f6:	a814      	add	r0, sp, #80	; 0x50
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80007f8:	f44f 7b80 	mov.w	fp, #256	; 0x100
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80007fc:	9408      	str	r4, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fe:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000800:	940d      	str	r4, [sp, #52]	; 0x34
 8000802:	940e      	str	r4, [sp, #56]	; 0x38
 8000804:	940f      	str	r4, [sp, #60]	; 0x3c
 8000806:	9410      	str	r4, [sp, #64]	; 0x40
 8000808:	9411      	str	r4, [sp, #68]	; 0x44
 800080a:	9412      	str	r4, [sp, #72]	; 0x48
 800080c:	9413      	str	r4, [sp, #76]	; 0x4c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800080e:	9409      	str	r4, [sp, #36]	; 0x24
 8000810:	940a      	str	r4, [sp, #40]	; 0x28
 8000812:	940b      	str	r4, [sp, #44]	; 0x2c
 8000814:	940c      	str	r4, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000816:	9407      	str	r4, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000818:	f006 fc94 	bl	8007144 <memset>
  htim1.Instance = TIM1;
 800081c:	493c      	ldr	r1, [pc, #240]	; (8000910 <main+0x30c>)
 800081e:	6029      	str	r1, [r5, #0]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8000820:	f640 32b8 	movw	r2, #3000	; 0xbb8
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000824:	4628      	mov	r0, r5
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8000826:	60ea      	str	r2, [r5, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000828:	f8c5 9008 	str.w	r9, [r5, #8]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 800082c:	606c      	str	r4, [r5, #4]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 800082e:	616e      	str	r6, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000830:	61ac      	str	r4, [r5, #24]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000832:	f8c5 b010 	str.w	fp, [r5, #16]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000836:	f003 fa0d 	bl	8003c54 <HAL_TIM_Base_Init>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800083a:	4628      	mov	r0, r5
 800083c:	f003 faae 	bl	8003d9c <HAL_TIM_PWM_Init>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000840:	2306      	movs	r3, #6
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000842:	2210      	movs	r2, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000844:	eb0d 0109 	add.w	r1, sp, r9
 8000848:	4628      	mov	r0, r5
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800084a:	9308      	str	r3, [sp, #32]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800084c:	9209      	str	r2, [sp, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800084e:	f003 fc4d 	bl	80040ec <HAL_TIM_SlaveConfigSynchro>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000852:	a906      	add	r1, sp, #24
 8000854:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000856:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000858:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800085a:	f003 fcc3 	bl	80041e4 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800085e:	f04f 0c60 	mov.w	ip, #96	; 0x60
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8000862:	f240 53dc 	movw	r3, #1500	; 0x5dc
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000866:	4622      	mov	r2, r4
 8000868:	a90d      	add	r1, sp, #52	; 0x34
 800086a:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800086c:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8000870:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000872:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000874:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000876:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000878:	9412      	str	r4, [sp, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800087a:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800087c:	f003 fb30 	bl	8003ee0 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000880:	a90d      	add	r1, sp, #52	; 0x34
 8000882:	2204      	movs	r2, #4
 8000884:	4628      	mov	r0, r5
 8000886:	f003 fb2b 	bl	8003ee0 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800088a:	a90d      	add	r1, sp, #52	; 0x34
 800088c:	2208      	movs	r2, #8
 800088e:	4628      	mov	r0, r5
 8000890:	f003 fb26 	bl	8003ee0 <HAL_TIM_PWM_ConfigChannel>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000894:	f04f 0c70 	mov.w	ip, #112	; 0x70
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8000898:	f640 23a7 	movw	r3, #2727	; 0xaa7
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800089c:	a90d      	add	r1, sp, #52	; 0x34
 800089e:	4652      	mov	r2, sl
 80008a0:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80008a2:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 80008a6:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008a8:	f003 fb1a 	bl	8003ee0 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80008ac:	f44f 6e80 	mov.w	lr, #1024	; 0x400
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80008b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80008b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008b8:	a914      	add	r1, sp, #80	; 0x50
 80008ba:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80008bc:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80008c0:	9314      	str	r3, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80008c2:	9218      	str	r2, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 80008c4:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.DeadTime = 0;
 80008c8:	9417      	str	r4, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 80008ca:	9419      	str	r4, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008cc:	941b      	str	r4, [sp, #108]	; 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008ce:	f003 fcab 	bl	8004228 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 80008d2:	4628      	mov	r0, r5
 80008d4:	f001 fc24 	bl	8002120 <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 80008d8:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <main+0x310>)
 80008da:	490f      	ldr	r1, [pc, #60]	; (8000918 <main+0x314>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008dc:	f8c3 a014 	str.w	sl, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e0:	4618      	mov	r0, r3
  huart2.Init.BaudRate = 115200;
 80008e2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e6:	e883 0006 	stmia.w	r3, {r1, r2}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ea:	609c      	str	r4, [r3, #8]
 80008ec:	e018      	b.n	8000920 <main+0x31c>
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020800 	.word	0x40020800
 80008f8:	20000740 	.word	0x20000740
 80008fc:	10210000 	.word	0x10210000
 8000900:	40012000 	.word	0x40012000
 8000904:	0f000001 	.word	0x0f000001
 8000908:	40012100 	.word	0x40012100
 800090c:	20000788 	.word	0x20000788
 8000910:	40010000 	.word	0x40010000
 8000914:	200007c8 	.word	0x200007c8
 8000918:	40004400 	.word	0x40004400
 800091c:	200006f8 	.word	0x200006f8
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000920:	60dc      	str	r4, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000922:	611c      	str	r4, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000924:	619c      	str	r4, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000926:	61dc      	str	r4, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000928:	f003 fe28 	bl	800457c <HAL_UART_Init>
  MX_MotorControl_Init();
 800092c:	f001 f9c8 	bl	8001cc0 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8000930:	4622      	mov	r2, r4
 8000932:	4639      	mov	r1, r7
 8000934:	2012      	movs	r0, #18
 8000936:	f002 fcf1 	bl	800331c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 800093a:	2012      	movs	r0, #18
 800093c:	f002 fd24 	bl	8003388 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000940:	4622      	mov	r2, r4
 8000942:	4621      	mov	r1, r4
 8000944:	2019      	movs	r0, #25
 8000946:	f002 fce9 	bl	800331c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800094a:	2019      	movs	r0, #25
 800094c:	f002 fd1c 	bl	8003388 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 1);
 8000950:	4632      	mov	r2, r6
 8000952:	2104      	movs	r1, #4
 8000954:	2018      	movs	r0, #24
 8000956:	f002 fce1 	bl	800331c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800095a:	2018      	movs	r0, #24
 800095c:	f002 fd14 	bl	8003388 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8000960:	4632      	mov	r2, r6
 8000962:	4641      	mov	r1, r8
 8000964:	2026      	movs	r0, #38	; 0x26
 8000966:	f002 fcd9 	bl	800331c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800096a:	2026      	movs	r0, #38	; 0x26
 800096c:	f002 fd0c 	bl	8003388 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000970:	2028      	movs	r0, #40	; 0x28
 8000972:	4622      	mov	r2, r4
 8000974:	4621      	mov	r1, r4
 8000976:	f002 fcd1 	bl	800331c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800097a:	2028      	movs	r0, #40	; 0x28
 800097c:	f002 fd04 	bl	8003388 <HAL_NVIC_EnableIRQ>
 8000980:	e7fe      	b.n	8000980 <main+0x37c>
 8000982:	bf00      	nop

08000984 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8000984:	4b01      	ldr	r3, [pc, #4]	; (800098c <MC_StartMotor1+0x8>)
 8000986:	6818      	ldr	r0, [r3, #0]
 8000988:	f003 bec4 	b.w	8004714 <MCI_StartMotor>
 800098c:	200008ec 	.word	0x200008ec

08000990 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8000990:	4b01      	ldr	r3, [pc, #4]	; (8000998 <MC_StopMotor1+0x8>)
 8000992:	6818      	ldr	r0, [r3, #0]
 8000994:	f003 bec8 	b.w	8004728 <MCI_StopMotor>
 8000998:	200008ec 	.word	0x200008ec

0800099c <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 800099c:	4b01      	ldr	r3, [pc, #4]	; (80009a4 <MC_GetSTMStateMotor1+0x8>)
 800099e:	6818      	ldr	r0, [r3, #0]
 80009a0:	f003 bf0a 	b.w	80047b8 <MCI_GetSTMState>
 80009a4:	200008ec 	.word	0x200008ec

080009a8 <MCboot>:
  *         created and initialized. The vector must have length equal to the
  *         number of motor drives.
  * @retval None
  */
void MCboot( MCI_Handle_t* pMCIList[NBR_OF_MOTORS],MCT_Handle_t* pMCTList[NBR_OF_MOTORS] )
{
 80009a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pCLM[M1] = &CircleLimitationM1;

  /**********************************************************/
  /*    PWM and current sensing component initialization    */
  /**********************************************************/
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80009ac:	4b6f      	ldr	r3, [pc, #444]	; (8000b6c <MCboot+0x1c4>)
 80009ae:	4f70      	ldr	r7, [pc, #448]	; (8000b70 <MCboot+0x1c8>)
  pCLM[M1] = &CircleLimitationM1;
 80009b0:	4a70      	ldr	r2, [pc, #448]	; (8000b74 <MCboot+0x1cc>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80009b2:	603b      	str	r3, [r7, #0]
{
 80009b4:	b089      	sub	sp, #36	; 0x24
  bMCBootCompleted = 0;
 80009b6:	2400      	movs	r4, #0
{
 80009b8:	9004      	str	r0, [sp, #16]
  R3F4XX_Init(&PWM_Handle_M1);
 80009ba:	4618      	mov	r0, r3
  bMCBootCompleted = 0;
 80009bc:	4b6e      	ldr	r3, [pc, #440]	; (8000b78 <MCboot+0x1d0>)
  pCLM[M1] = &CircleLimitationM1;
 80009be:	4d6f      	ldr	r5, [pc, #444]	; (8000b7c <MCboot+0x1d4>)
{
 80009c0:	9105      	str	r1, [sp, #20]
  bMCBootCompleted = 0;
 80009c2:	701c      	strb	r4, [r3, #0]
  pCLM[M1] = &CircleLimitationM1;
 80009c4:	6015      	str	r5, [r2, #0]
  R3F4XX_Init(&PWM_Handle_M1);
 80009c6:	f004 fd95 	bl	80054f4 <R3F4XX_Init>
  /* USER CODE END MCboot 1 */

  /**************************************/
  /*    Start timers synchronously      */
  /**************************************/
  startTimers();    
 80009ca:	f004 f9d1 	bl	8004d70 <startTimers>

  /**************************************/
  /*    State machine initialization    */
  /**************************************/
  STM_Init(&STM[M1]);
 80009ce:	486c      	ldr	r0, [pc, #432]	; (8000b80 <MCboot+0x1d8>)
  
  /******************************************************/
  /*   Main speed sensor component initialization       */
  /******************************************************/
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
  pSTC[M1] = &SpeednTorqCtrlM1;
 80009d0:	4e6c      	ldr	r6, [pc, #432]	; (8000b84 <MCboot+0x1dc>)
      
  /********************************************************/
  /*   PID component initialization: current regulation   */
  /********************************************************/
  PID_HandleInit(&PIDIqHandle_M1);
  PID_HandleInit(&PIDIdHandle_M1);
 80009d2:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 8000bd0 <MCboot+0x228>
  pPIDIq[M1] = &PIDIqHandle_M1;
  pPIDId[M1] = &PIDIdHandle_M1;
 80009d6:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8000bd4 <MCboot+0x22c>
  
  /********************************************************/
  /*   Bus voltage sensor component initialization        */
  /********************************************************/
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 80009da:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 8000bd8 <MCboot+0x230>
  pMPM[M1]->pFOCVars = &FOCVars[M1];
  
  /*******************************************************/
  /*   Temperature measurement component initialization  */
  /*******************************************************/
  NTC_Init(&TempSensorParamsM1);    
 80009de:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 8000bdc <MCboot+0x234>
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 80009e2:	4d69      	ldr	r5, [pc, #420]	; (8000b88 <MCboot+0x1e0>)
  STM_Init(&STM[M1]);
 80009e4:	f005 fc58 	bl	8006298 <STM_Init>
  PID_HandleInit(&PIDSpeedHandle_M1);
 80009e8:	4868      	ldr	r0, [pc, #416]	; (8000b8c <MCboot+0x1e4>)
 80009ea:	f004 f929 	bl	8004c40 <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 80009ee:	4a68      	ldr	r2, [pc, #416]	; (8000b90 <MCboot+0x1e8>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 80009f0:	4b68      	ldr	r3, [pc, #416]	; (8000b94 <MCboot+0x1ec>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 80009f2:	4966      	ldr	r1, [pc, #408]	; (8000b8c <MCboot+0x1e4>)
  STO_PLL_Init (&STO_PLL_M1);
 80009f4:	4868      	ldr	r0, [pc, #416]	; (8000b98 <MCboot+0x1f0>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 80009f6:	6011      	str	r1, [r2, #0]
  pSTC[M1] = &SpeednTorqCtrlM1;
 80009f8:	6033      	str	r3, [r6, #0]
  STO_PLL_Init (&STO_PLL_M1);
 80009fa:	f005 ff79 	bl	80068f0 <STO_PLL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &STO_PLL_M1._Super);
 80009fe:	4b64      	ldr	r3, [pc, #400]	; (8000b90 <MCboot+0x1e8>)
 8000a00:	4a65      	ldr	r2, [pc, #404]	; (8000b98 <MCboot+0x1f0>)
 8000a02:	6819      	ldr	r1, [r3, #0]
 8000a04:	6830      	ldr	r0, [r6, #0]
 8000a06:	f005 fb77 	bl	80060f8 <STC_Init>
  VSS_Init (&VirtualSpeedSensorM1);
 8000a0a:	4864      	ldr	r0, [pc, #400]	; (8000b9c <MCboot+0x1f4>)
 8000a0c:	f005 fe5e 	bl	80066cc <VSS_Init>
  RUC_Init(&RevUpControlM1,pSTC[M1],&VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);  
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	6831      	ldr	r1, [r6, #0]
 8000a14:	4a61      	ldr	r2, [pc, #388]	; (8000b9c <MCboot+0x1f4>)
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	4861      	ldr	r0, [pc, #388]	; (8000ba0 <MCboot+0x1f8>)
 8000a1a:	4b62      	ldr	r3, [pc, #392]	; (8000ba4 <MCboot+0x1fc>)
 8000a1c:	f006 fa7a 	bl	8006f14 <RUC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8000a20:	4861      	ldr	r0, [pc, #388]	; (8000ba8 <MCboot+0x200>)
 8000a22:	f004 f90d 	bl	8004c40 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8000a26:	4648      	mov	r0, r9
 8000a28:	f004 f90a 	bl	8004c40 <PID_HandleInit>
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000a2c:	4b5f      	ldr	r3, [pc, #380]	; (8000bac <MCboot+0x204>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000a2e:	4a60      	ldr	r2, [pc, #384]	; (8000bb0 <MCboot+0x208>)
 8000a30:	495d      	ldr	r1, [pc, #372]	; (8000ba8 <MCboot+0x200>)
 8000a32:	6011      	str	r1, [r2, #0]
  RVBS_Init(pBusSensorM1);
 8000a34:	4618      	mov	r0, r3
  pPIDId[M1] = &PIDIdHandle_M1;
 8000a36:	f8cb 9000 	str.w	r9, [fp]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000a3a:	f8ca 3000 	str.w	r3, [sl]
  RVBS_Init(pBusSensorM1);
 8000a3e:	f005 fa09 	bl	8005e54 <RVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000a42:	4b5c      	ldr	r3, [pc, #368]	; (8000bb4 <MCboot+0x20c>)
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8000a44:	f8da 2000 	ldr.w	r2, [sl]
 8000a48:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000a4c:	4a5a      	ldr	r2, [pc, #360]	; (8000bb8 <MCboot+0x210>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000a4e:	f8c3 510c 	str.w	r5, [r3, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);    
 8000a52:	4640      	mov	r0, r8
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000a54:	6013      	str	r3, [r2, #0]
  NTC_Init(&TempSensorParamsM1);    
 8000a56:	f004 f8a3 	bl	8004ba0 <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
    

  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000a5a:	4b58      	ldr	r3, [pc, #352]	; (8000bbc <MCboot+0x214>)
 8000a5c:	4a58      	ldr	r2, [pc, #352]	; (8000bc0 <MCboot+0x218>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000a5e:	4959      	ldr	r1, [pc, #356]	; (8000bc4 <MCboot+0x21c>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000a60:	6013      	str	r3, [r2, #0]
  REMNG_Init(pREMNG[M1]);
 8000a62:	4618      	mov	r0, r3
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000a64:	f8c1 8000 	str.w	r8, [r1]
  REMNG_Init(pREMNG[M1]);
 8000a68:	f005 fa52 	bl	8005f10 <REMNG_Init>
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = Vnull;
  FOCVars[bMotor].Valphabeta = Vnull;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000a6c:	4b50      	ldr	r3, [pc, #320]	; (8000bb0 <MCboot+0x208>)
  FOCVars[bMotor].Iab = Inull;
 8000a6e:	602c      	str	r4, [r5, #0]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000a70:	6818      	ldr	r0, [r3, #0]
  FOCVars[bMotor].Iab = Inull;
 8000a72:	606c      	str	r4, [r5, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000a74:	4621      	mov	r1, r4
  FOCVars[bMotor].Iqd = Inull;
 8000a76:	60ec      	str	r4, [r5, #12]
 8000a78:	612c      	str	r4, [r5, #16]
  FOCVars[bMotor].Vqd = Vnull;
 8000a7a:	f8c5 4016 	str.w	r4, [r5, #22]
 8000a7e:	f8c5 401a 	str.w	r4, [r5, #26]
 8000a82:	f8c5 401e 	str.w	r4, [r5, #30]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000a86:	f004 f8ef 	bl	8004c68 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8000a8a:	4621      	mov	r1, r4
 8000a8c:	f8db 0000 	ldr.w	r0, [fp]
  oMCInterface[M1] = & Mci[M1];
 8000a90:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8000be0 <MCboot+0x238>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8000a94:	f004 f8e8 	bl	8004c68 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8000a98:	6830      	ldr	r0, [r6, #0]
 8000a9a:	f005 fb45 	bl	8006128 <STC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000a9e:	f04f 0901 	mov.w	r9, #1

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000aa2:	6838      	ldr	r0, [r7, #0]
 8000aa4:	f004 fa9e 	bl	8004fe4 <PWMC_SwitchOffPWM>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000aa8:	f885 9024 	strb.w	r9, [r5, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000aac:	6830      	ldr	r0, [r6, #0]
 8000aae:	f005 fbdf 	bl	8006270 <STC_GetDefaultIqdref>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	f3c0 420f 	ubfx	r2, r0, #16, #16
 8000ab8:	822b      	strh	r3, [r5, #16]
 8000aba:	826a      	strh	r2, [r5, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).qI_Component2;
 8000abc:	6830      	ldr	r0, [r6, #0]
 8000abe:	f005 fbd7 	bl	8006270 <STC_GetDefaultIqdref>
  oMCInterface[M1] = & Mci[M1];
 8000ac2:	4941      	ldr	r1, [pc, #260]	; (8000bc8 <MCboot+0x220>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1]);
 8000ac4:	6832      	ldr	r2, [r6, #0]
  oMCInterface[M1] = & Mci[M1];
 8000ac6:	f8c8 1000 	str.w	r1, [r8]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).qI_Component2;
 8000aca:	ea4f 4e10 	mov.w	lr, r0, lsr #16
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1]);
 8000ace:	462b      	mov	r3, r5
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).qI_Component2;
 8000ad0:	f8a5 e014 	strh.w	lr, [r5, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1]);
 8000ad4:	4608      	mov	r0, r1
 8000ad6:	492a      	ldr	r1, [pc, #168]	; (8000b80 <MCboot+0x1d8>)
 8000ad8:	f003 fdee 	bl	80046b8 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8000adc:	6830      	ldr	r0, [r6, #0]
 8000ade:	f8d8 5000 	ldr.w	r5, [r8]
 8000ae2:	f005 fbb3 	bl	800624c <STC_GetMecSpeedRef01HzDefault>
 8000ae6:	4622      	mov	r2, r4
 8000ae8:	4601      	mov	r1, r0
 8000aea:	4628      	mov	r0, r5
 8000aec:	f003 fdf0 	bl	80046d0 <MCI_ExecSpeedRamp>
  pMCIList[M1] = oMCInterface[M1];
 8000af0:	f8d8 2000 	ldr.w	r2, [r8]
 8000af4:	9203      	str	r2, [sp, #12]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8000af6:	6832      	ldr	r2, [r6, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000af8:	4e2f      	ldr	r6, [pc, #188]	; (8000bb8 <MCboot+0x210>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000afa:	4d25      	ldr	r5, [pc, #148]	; (8000b90 <MCboot+0x1e8>)
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000afc:	f8d6 c000 	ldr.w	ip, [r6]
  pMCIList[M1] = oMCInterface[M1];
 8000b00:	9e04      	ldr	r6, [sp, #16]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000b02:	4b32      	ldr	r3, [pc, #200]	; (8000bcc <MCboot+0x224>)
 8000b04:	f8d5 e000 	ldr.w	lr, [r5]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000b08:	6839      	ldr	r1, [r7, #0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000b0a:	4d29      	ldr	r5, [pc, #164]	; (8000bb0 <MCboot+0x208>)
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8000b0c:	4f2d      	ldr	r7, [pc, #180]	; (8000bc4 <MCboot+0x21c>)
  MCT[M1].pPIDId = pPIDId[M1];
 8000b0e:	f8db 0000 	ldr.w	r0, [fp]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000b12:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8000b14:	f8d7 b000 	ldr.w	fp, [r7]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8000b18:	f8da 7000 	ldr.w	r7, [sl]
  pMCIList[M1] = oMCInterface[M1];
 8000b1c:	46b0      	mov	r8, r6
 8000b1e:	9e03      	ldr	r6, [sp, #12]
 8000b20:	f8c8 6000 	str.w	r6, [r8]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8000b24:	625a      	str	r2, [r3, #36]	; 0x24
  MCT[M1].pRevupCtrl = &RevUpControlM1;              /* only if M1 is sensorless*/
 8000b26:	4a1e      	ldr	r2, [pc, #120]	; (8000ba0 <MCboot+0x1f8>)
 8000b28:	615a      	str	r2, [r3, #20]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &STO_PLL_M1; 
 8000b2a:	4a1b      	ldr	r2, [pc, #108]	; (8000b98 <MCboot+0x1f0>)
 8000b2c:	619a      	str	r2, [r3, #24]
  MCT[M1].pSpeedSensorVirtual = &VirtualSpeedSensorM1;  /* only if M1 is sensorless*/
 8000b2e:	4a1b      	ldr	r2, [pc, #108]	; (8000b9c <MCboot+0x1f4>)
 8000b30:	621a      	str	r2, [r3, #32]
  MCT[M1].pStateMachine = &STM[M1];
 8000b32:	4a13      	ldr	r2, [pc, #76]	; (8000b80 <MCboot+0x1d8>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000b34:	f8c3 e000 	str.w	lr, [r3]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000b38:	605d      	str	r5, [r3, #4]
  MCT[M1].pPIDId = pPIDId[M1];
 8000b3a:	6098      	str	r0, [r3, #8]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000b3c:	6119      	str	r1, [r3, #16]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8000b3e:	f8c3 b02c 	str.w	fp, [r3, #44]	; 0x2c
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8000b42:	631f      	str	r7, [r3, #48]	; 0x30
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000b44:	f8c3 c03c 	str.w	ip, [r3, #60]	; 0x3c
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 8000b48:	60dc      	str	r4, [r3, #12]
  MCT[M1].pSpeedSensorAux = MC_NULL;
 8000b4a:	61dc      	str	r4, [r3, #28]
  MCT[M1].pStateMachine = &STM[M1];
 8000b4c:	629a      	str	r2, [r3, #40]	; 0x28
  MCT[M1].pBrakeDigitalOutput = MC_NULL;   /* brake is defined, oBrakeM1*/
 8000b4e:	635c      	str	r4, [r3, #52]	; 0x34
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8000b50:	639c      	str	r4, [r3, #56]	; 0x38
  MCT[M1].pFW = MC_NULL;
 8000b52:	641c      	str	r4, [r3, #64]	; 0x40
  MCT[M1].pFF = MC_NULL;
 8000b54:	645c      	str	r4, [r3, #68]	; 0x44
  MCT[M1].pSCC = MC_NULL;
 8000b56:	649c      	str	r4, [r3, #72]	; 0x48
  MCT[M1].pOTT = MC_NULL;
 8000b58:	64dc      	str	r4, [r3, #76]	; 0x4c
  pMCTList[M1] = &MCT[M1];
 8000b5a:	9a05      	ldr	r2, [sp, #20]
 8000b5c:	6013      	str	r3, [r2, #0]
  bMCBootCompleted = 1;
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MCboot+0x1d0>)
 8000b60:	f883 9000 	strb.w	r9, [r3]
}
 8000b64:	b009      	add	sp, #36	; 0x24
 8000b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b6a:	bf00      	nop
 8000b6c:	2000024c 	.word	0x2000024c
 8000b70:	20000824 	.word	0x20000824
 8000b74:	200008b0 	.word	0x200008b0
 8000b78:	200006dc 	.word	0x200006dc
 8000b7c:	20000000 	.word	0x20000000
 8000b80:	200008d4 	.word	0x200008d4
 8000b84:	200008e8 	.word	0x200008e8
 8000b88:	20000838 	.word	0x20000838
 8000b8c:	2000010c 	.word	0x2000010c
 8000b90:	20000828 	.word	0x20000828
 8000b94:	200004cc 	.word	0x200004cc
 8000b98:	200003ac 	.word	0x200003ac
 8000b9c:	20000528 	.word	0x20000528
 8000ba0:	20000320 	.word	0x20000320
 8000ba4:	20000398 	.word	0x20000398
 8000ba8:	200000e0 	.word	0x200000e0
 8000bac:	200002f8 	.word	0x200002f8
 8000bb0:	2000082c 	.word	0x2000082c
 8000bb4:	20000138 	.word	0x20000138
 8000bb8:	200008e0 	.word	0x200008e0
 8000bbc:	200002e0 	.word	0x200002e0
 8000bc0:	200008dc 	.word	0x200008dc
 8000bc4:	20000820 	.word	0x20000820
 8000bc8:	200008b8 	.word	0x200008b8
 8000bcc:	20000860 	.word	0x20000860
 8000bd0:	200000b4 	.word	0x200000b4
 8000bd4:	200008e4 	.word	0x200008e4
 8000bd8:	200008b4 	.word	0x200008b4
 8000bdc:	20000500 	.word	0x20000500
 8000be0:	20000830 	.word	0x20000830

08000be4 <MC_RunMotorControlTasks>:
{
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if ( bMCBootCompleted ) {
 8000be8:	4caa      	ldr	r4, [pc, #680]	; (8000e94 <MC_RunMotorControlTasks+0x2b0>)
 8000bea:	7823      	ldrb	r3, [r4, #0]
{
 8000bec:	b082      	sub	sp, #8
  if ( bMCBootCompleted ) {
 8000bee:	b913      	cbnz	r3, 8000bf6 <MC_RunMotorControlTasks+0x12>
}
 8000bf0:	b002      	add	sp, #8
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (bMCBootCompleted == 1)
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d004      	beq.n	8000c04 <MC_RunMotorControlTasks+0x20>
    UI_Scheduler();
 8000bfa:	f001 fc01 	bl	8002400 <UI_Scheduler>
}
 8000bfe:	b002      	add	sp, #8
 8000c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(hMFTaskCounterM1 > 0u)
 8000c04:	4ea4      	ldr	r6, [pc, #656]	; (8000e98 <MC_RunMotorControlTasks+0x2b4>)
 8000c06:	8832      	ldrh	r2, [r6, #0]
 8000c08:	b292      	uxth	r2, r2
 8000c0a:	2a00      	cmp	r2, #0
 8000c0c:	d060      	beq.n	8000cd0 <MC_RunMotorControlTasks+0xec>
      hMFTaskCounterM1--;
 8000c0e:	8832      	ldrh	r2, [r6, #0]
 8000c10:	4fa2      	ldr	r7, [pc, #648]	; (8000e9c <MC_RunMotorControlTasks+0x2b8>)
 8000c12:	4da3      	ldr	r5, [pc, #652]	; (8000ea0 <MC_RunMotorControlTasks+0x2bc>)
 8000c14:	3a01      	subs	r2, #1
 8000c16:	b292      	uxth	r2, r2
 8000c18:	8032      	strh	r2, [r6, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8000c1a:	883a      	ldrh	r2, [r7, #0]
 8000c1c:	b292      	uxth	r2, r2
 8000c1e:	b11a      	cbz	r2, 8000c28 <MC_RunMotorControlTasks+0x44>
      hBootCapDelayCounterM1--;
 8000c20:	883a      	ldrh	r2, [r7, #0]
 8000c22:	3a01      	subs	r2, #1
 8000c24:	b292      	uxth	r2, r2
 8000c26:	803a      	strh	r2, [r7, #0]
    if(hStopPermanencyCounterM1 > 0u)
 8000c28:	882a      	ldrh	r2, [r5, #0]
 8000c2a:	b292      	uxth	r2, r2
 8000c2c:	b11a      	cbz	r2, 8000c36 <MC_RunMotorControlTasks+0x52>
      hStopPermanencyCounterM1--;
 8000c2e:	882a      	ldrh	r2, [r5, #0]
 8000c30:	3a01      	subs	r2, #1
 8000c32:	b292      	uxth	r2, r2
 8000c34:	802a      	strh	r2, [r5, #0]
void TSK_SafetyTask(void)
{
  /* USER CODE BEGIN TSK_SafetyTask 0 */

  /* USER CODE END TSK_SafetyTask 0 */
  if (bMCBootCompleted == 1)
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d1df      	bne.n	8000bfa <MC_RunMotorControlTasks+0x16>
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8000c3a:	4b9a      	ldr	r3, [pc, #616]	; (8000ea4 <MC_RunMotorControlTasks+0x2c0>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS 
 8000c3c:	4d9a      	ldr	r5, [pc, #616]	; (8000ea8 <MC_RunMotorControlTasks+0x2c4>)
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8000c3e:	6818      	ldr	r0, [r3, #0]
 8000c40:	f003 ffbe 	bl	8004bc0 <NTC_CalcAvTemp>
 8000c44:	4604      	mov	r4, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS 
 8000c46:	6828      	ldr	r0, [r5, #0]
 8000c48:	f004 f9f6 	bl	8005038 <PWMC_CheckOverCurrent>
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 8000c4c:	4b97      	ldr	r3, [pc, #604]	; (8000eac <MC_RunMotorControlTasks+0x2c8>)
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8000c4e:	f004 040e 	and.w	r4, r4, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS 
 8000c52:	4304      	orrs	r4, r0
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 8000c54:	6818      	ldr	r0, [r3, #0]
 8000c56:	f005 f91b 	bl	8005e90 <RVBS_CalcAvVbus>
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS 
 8000c5a:	b2a4      	uxth	r4, r4
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 8000c5c:	f000 010e 	and.w	r1, r0, #14
 8000c60:	4321      	orrs	r1, r4
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8000c62:	43ca      	mvns	r2, r1
 8000c64:	b292      	uxth	r2, r2
 8000c66:	4892      	ldr	r0, [pc, #584]	; (8000eb0 <MC_RunMotorControlTasks+0x2cc>)
 8000c68:	f005 fba2 	bl	80063b0 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 8000c6c:	4890      	ldr	r0, [pc, #576]	; (8000eb0 <MC_RunMotorControlTasks+0x2cc>)
 8000c6e:	f005 fbb9 	bl	80063e4 <STM_GetState>
 8000c72:	280a      	cmp	r0, #10
 8000c74:	d007      	beq.n	8000c86 <MC_RunMotorControlTasks+0xa2>
 8000c76:	280b      	cmp	r0, #11
 8000c78:	d102      	bne.n	8000c80 <MC_RunMotorControlTasks+0x9c>
    /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 1 */

    /* USER CODE END TSK_SafetyTask_PWMOFF 1 */
    break;
  case FAULT_OVER:
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000c7a:	6828      	ldr	r0, [r5, #0]
 8000c7c:	f004 f9b2 	bl	8004fe4 <PWMC_SwitchOffPWM>
    RCM_ExecUserConv ();
 8000c80:	f001 f924 	bl	8001ecc <RCM_ExecUserConv>
 8000c84:	e7b9      	b.n	8000bfa <MC_RunMotorControlTasks+0x16>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000c86:	6828      	ldr	r0, [r5, #0]
 8000c88:	f004 f9ac 	bl	8004fe4 <PWMC_SwitchOffPWM>
  FOCVars[bMotor].Iab = Inull;
 8000c8c:	4b89      	ldr	r3, [pc, #548]	; (8000eb4 <MC_RunMotorControlTasks+0x2d0>)
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000c8e:	4a8a      	ldr	r2, [pc, #552]	; (8000eb8 <MC_RunMotorControlTasks+0x2d4>)
  FOCVars[bMotor].Iab = Inull;
 8000c90:	2400      	movs	r4, #0
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000c92:	6810      	ldr	r0, [r2, #0]
  FOCVars[bMotor].Iab = Inull;
 8000c94:	601c      	str	r4, [r3, #0]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000c96:	4621      	mov	r1, r4
  FOCVars[bMotor].Iab = Inull;
 8000c98:	605c      	str	r4, [r3, #4]
  FOCVars[bMotor].Iqd = Inull;
 8000c9a:	60dc      	str	r4, [r3, #12]
 8000c9c:	611c      	str	r4, [r3, #16]
  FOCVars[bMotor].Vqd = Vnull;
 8000c9e:	f8c3 4016 	str.w	r4, [r3, #22]
 8000ca2:	f8c3 401a 	str.w	r4, [r3, #26]
 8000ca6:	f8c3 401e 	str.w	r4, [r3, #30]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000caa:	f003 ffdd 	bl	8004c68 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8000cae:	4b83      	ldr	r3, [pc, #524]	; (8000ebc <MC_RunMotorControlTasks+0x2d8>)
 8000cb0:	4621      	mov	r1, r4
 8000cb2:	6818      	ldr	r0, [r3, #0]
 8000cb4:	f003 ffd8 	bl	8004c68 <PID_SetIntegralTerm>
  STC_Clear(pSTC[bMotor]);
 8000cb8:	4b81      	ldr	r3, [pc, #516]	; (8000ec0 <MC_RunMotorControlTasks+0x2dc>)
 8000cba:	6818      	ldr	r0, [r3, #0]
 8000cbc:	f005 fa34 	bl	8006128 <STC_Clear>
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000cc0:	6828      	ldr	r0, [r5, #0]
 8000cc2:	f004 f98f 	bl	8004fe4 <PWMC_SwitchOffPWM>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8000cc6:	4b7f      	ldr	r3, [pc, #508]	; (8000ec4 <MC_RunMotorControlTasks+0x2e0>)
 8000cc8:	6818      	ldr	r0, [r3, #0]
 8000cca:	f003 ff39 	bl	8004b40 <MPM_Clear>
 8000cce:	e7d7      	b.n	8000c80 <MC_RunMotorControlTasks+0x9c>
  int16_t wAux = 0;
 8000cd0:	a902      	add	r1, sp, #8
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeed01Hz( &STO_PLL_M1, &wAux );
 8000cd2:	487d      	ldr	r0, [pc, #500]	; (8000ec8 <MC_RunMotorControlTasks+0x2e4>)
  int16_t wAux = 0;
 8000cd4:	f821 2d08 	strh.w	r2, [r1, #-8]!
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeed01Hz( &STO_PLL_M1, &wAux );
 8000cd8:	f005 ff54 	bl	8006b84 <STO_PLL_CalcAvrgMecSpeed01Hz>
  PQD_CalcElMotorPower( pMPM[M1] );
 8000cdc:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 8000ec4 <MC_RunMotorControlTasks+0x2e0>
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeed01Hz( &STO_PLL_M1, &wAux );
 8000ce0:	4605      	mov	r5, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 8000ce2:	f8d8 0000 	ldr.w	r0, [r8]
 8000ce6:	f004 f80d 	bl	8004d04 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8000cea:	4871      	ldr	r0, [pc, #452]	; (8000eb0 <MC_RunMotorControlTasks+0x2cc>)
 8000cec:	f005 fb7a 	bl	80063e4 <STM_GetState>
  switch ( StateM1 )
 8000cf0:	3803      	subs	r0, #3
 8000cf2:	2810      	cmp	r0, #16
 8000cf4:	d840      	bhi.n	8000d78 <MC_RunMotorControlTasks+0x194>
 8000cf6:	e8df f010 	tbh	[pc, r0, lsl #1]
 8000cfa:	00ef      	.short	0x00ef
 8000cfc:	00ad00fc 	.word	0x00ad00fc
 8000d00:	0076013f 	.word	0x0076013f
 8000d04:	005f006e 	.word	0x005f006e
 8000d08:	003f003f 	.word	0x003f003f
 8000d0c:	003f003f 	.word	0x003f003f
 8000d10:	003f003f 	.word	0x003f003f
 8000d14:	00420050 	.word	0x00420050
 8000d18:	00110022 	.word	0x00110022
      if( ! RUC_Exec( &RevUpControlM1 ) )
 8000d1c:	486b      	ldr	r0, [pc, #428]	; (8000ecc <MC_RunMotorControlTasks+0x2e8>)
 8000d1e:	f006 f97f 	bl	8007020 <RUC_Exec>
 8000d22:	2800      	cmp	r0, #0
 8000d24:	f040 8142 	bne.w	8000fac <MC_RunMotorControlTasks+0x3c8>
          STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );  
 8000d28:	4602      	mov	r2, r0
 8000d2a:	2110      	movs	r1, #16
 8000d2c:	4860      	ldr	r0, [pc, #384]	; (8000eb0 <MC_RunMotorControlTasks+0x2cc>)
 8000d2e:	4f5b      	ldr	r7, [pc, #364]	; (8000e9c <MC_RunMotorControlTasks+0x2b8>)
 8000d30:	4d5b      	ldr	r5, [pc, #364]	; (8000ea0 <MC_RunMotorControlTasks+0x2bc>)
 8000d32:	f005 fb3d 	bl	80063b0 <STM_FaultProcessing>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 8000d36:	2201      	movs	r2, #1
 8000d38:	7823      	ldrb	r3, [r4, #0]
 8000d3a:	8032      	strh	r2, [r6, #0]
 8000d3c:	e76d      	b.n	8000c1a <MC_RunMotorControlTasks+0x36>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8000d3e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8000ec0 <MC_RunMotorControlTasks+0x2dc>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8000d42:	4d5c      	ldr	r5, [pc, #368]	; (8000eb4 <MC_RunMotorControlTasks+0x2d0>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8000d44:	4962      	ldr	r1, [pc, #392]	; (8000ed0 <MC_RunMotorControlTasks+0x2ec>)
 8000d46:	f8d9 0000 	ldr.w	r0, [r9]
    FOCVars[M1].bDriveInput = EXTERNAL;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8000d50:	f005 f9e6 	bl	8006120 <STC_SetSpeedSensor>
    RUC_Clear( &RevUpControlM1, MCI_GetImposedMotorDirection( oMCInterface[M1] ) );
 8000d54:	4b5f      	ldr	r3, [pc, #380]	; (8000ed4 <MC_RunMotorControlTasks+0x2f0>)
 8000d56:	6818      	ldr	r0, [r3, #0]
 8000d58:	f003 fd34 	bl	80047c4 <MCI_GetImposedMotorDirection>
 8000d5c:	4601      	mov	r1, r0
 8000d5e:	485b      	ldr	r0, [pc, #364]	; (8000ecc <MC_RunMotorControlTasks+0x2e8>)
 8000d60:	f006 f916 	bl	8006f90 <RUC_Clear>
    STO_PLL_Clear( &STO_PLL_M1 );
 8000d64:	4858      	ldr	r0, [pc, #352]	; (8000ec8 <MC_RunMotorControlTasks+0x2e4>)
 8000d66:	f005 ffe5 	bl	8006d34 <STO_PLL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8000d6a:	2104      	movs	r1, #4
 8000d6c:	4850      	ldr	r0, [pc, #320]	; (8000eb0 <MC_RunMotorControlTasks+0x2cc>)
 8000d6e:	f005 fa99 	bl	80062a4 <STM_NextState>
 8000d72:	2800      	cmp	r0, #0
 8000d74:	f040 814b 	bne.w	800100e <MC_RunMotorControlTasks+0x42a>
 8000d78:	4f48      	ldr	r7, [pc, #288]	; (8000e9c <MC_RunMotorControlTasks+0x2b8>)
 8000d7a:	4d49      	ldr	r5, [pc, #292]	; (8000ea0 <MC_RunMotorControlTasks+0x2bc>)
 8000d7c:	e7db      	b.n	8000d36 <MC_RunMotorControlTasks+0x152>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8000d7e:	4b4a      	ldr	r3, [pc, #296]	; (8000ea8 <MC_RunMotorControlTasks+0x2c4>)
 8000d80:	2101      	movs	r1, #1
 8000d82:	6818      	ldr	r0, [r3, #0]
 8000d84:	f004 f930 	bl	8004fe8 <PWMC_CurrentReadingCalibr>
 8000d88:	2800      	cmp	r0, #0
 8000d8a:	d0f5      	beq.n	8000d78 <MC_RunMotorControlTasks+0x194>
      STM_NextState( &STM[M1], CLEAR );
 8000d8c:	2112      	movs	r1, #18
 8000d8e:	4848      	ldr	r0, [pc, #288]	; (8000eb0 <MC_RunMotorControlTasks+0x2cc>)
 8000d90:	4f42      	ldr	r7, [pc, #264]	; (8000e9c <MC_RunMotorControlTasks+0x2b8>)
 8000d92:	4d43      	ldr	r5, [pc, #268]	; (8000ea0 <MC_RunMotorControlTasks+0x2bc>)
 8000d94:	f005 fa86 	bl	80062a4 <STM_NextState>
 8000d98:	e7cd      	b.n	8000d36 <MC_RunMotorControlTasks+0x152>
  if (hBootCapDelayCounterM1 == 0)
 8000d9a:	4f40      	ldr	r7, [pc, #256]	; (8000e9c <MC_RunMotorControlTasks+0x2b8>)
 8000d9c:	8839      	ldrh	r1, [r7, #0]
 8000d9e:	b289      	uxth	r1, r1
 8000da0:	2900      	cmp	r1, #0
 8000da2:	d1ea      	bne.n	8000d7a <MC_RunMotorControlTasks+0x196>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8000da4:	4b40      	ldr	r3, [pc, #256]	; (8000ea8 <MC_RunMotorControlTasks+0x2c4>)
 8000da6:	4d3e      	ldr	r5, [pc, #248]	; (8000ea0 <MC_RunMotorControlTasks+0x2bc>)
 8000da8:	6818      	ldr	r0, [r3, #0]
 8000daa:	f004 f91d 	bl	8004fe8 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 8000dae:	2111      	movs	r1, #17
 8000db0:	483f      	ldr	r0, [pc, #252]	; (8000eb0 <MC_RunMotorControlTasks+0x2cc>)
 8000db2:	f005 fa77 	bl	80062a4 <STM_NextState>
 8000db6:	e7be      	b.n	8000d36 <MC_RunMotorControlTasks+0x152>
    STC_SetSpeedSensor( pSTC[M1],&VirtualSpeedSensorM1._Super );  	/*  sensor-less */
 8000db8:	4b41      	ldr	r3, [pc, #260]	; (8000ec0 <MC_RunMotorControlTasks+0x2dc>)
 8000dba:	4945      	ldr	r1, [pc, #276]	; (8000ed0 <MC_RunMotorControlTasks+0x2ec>)
 8000dbc:	6818      	ldr	r0, [r3, #0]
 8000dbe:	4f37      	ldr	r7, [pc, #220]	; (8000e9c <MC_RunMotorControlTasks+0x2b8>)
 8000dc0:	4d37      	ldr	r5, [pc, #220]	; (8000ea0 <MC_RunMotorControlTasks+0x2bc>)
 8000dc2:	f005 f9ad 	bl	8006120 <STC_SetSpeedSensor>
    VSS_Clear( &VirtualSpeedSensorM1 ); /* Reset measured speed in IDLE */
 8000dc6:	4842      	ldr	r0, [pc, #264]	; (8000ed0 <MC_RunMotorControlTasks+0x2ec>)
 8000dc8:	f005 fc96 	bl	80066f8 <VSS_Clear>
    STM_NextState( &STM[M1], IDLE );
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4838      	ldr	r0, [pc, #224]	; (8000eb0 <MC_RunMotorControlTasks+0x2cc>)
 8000dd0:	f005 fa68 	bl	80062a4 <STM_NextState>
 8000dd4:	e7af      	b.n	8000d36 <MC_RunMotorControlTasks+0x152>
  if (hStopPermanencyCounterM1 == 0)
 8000dd6:	4d32      	ldr	r5, [pc, #200]	; (8000ea0 <MC_RunMotorControlTasks+0x2bc>)
 8000dd8:	882b      	ldrh	r3, [r5, #0]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	f000 8106 	beq.w	8000fee <MC_RunMotorControlTasks+0x40a>
 8000de2:	4f2e      	ldr	r7, [pc, #184]	; (8000e9c <MC_RunMotorControlTasks+0x2b8>)
 8000de4:	e7a7      	b.n	8000d36 <MC_RunMotorControlTasks+0x152>
    R3F4XX_SwitchOffPWM( pwmcHandle[M1] );
 8000de6:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8000ea8 <MC_RunMotorControlTasks+0x2c4>
  hStopPermanencyCounterM1 = hTickCount;
 8000dea:	4d2d      	ldr	r5, [pc, #180]	; (8000ea0 <MC_RunMotorControlTasks+0x2bc>)
    R3F4XX_SwitchOffPWM( pwmcHandle[M1] );
 8000dec:	f8da 0000 	ldr.w	r0, [sl]
 8000df0:	4f2a      	ldr	r7, [pc, #168]	; (8000e9c <MC_RunMotorControlTasks+0x2b8>)
 8000df2:	f004 faaf 	bl	8005354 <R3F4XX_SwitchOffPWM>
  FOCVars[bMotor].Iab = Inull;
 8000df6:	4b2f      	ldr	r3, [pc, #188]	; (8000eb4 <MC_RunMotorControlTasks+0x2d0>)
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000df8:	4a2f      	ldr	r2, [pc, #188]	; (8000eb8 <MC_RunMotorControlTasks+0x2d4>)
  FOCVars[bMotor].Iab = Inull;
 8000dfa:	f04f 0900 	mov.w	r9, #0
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000dfe:	6810      	ldr	r0, [r2, #0]
  FOCVars[bMotor].Iab = Inull;
 8000e00:	f8c3 9000 	str.w	r9, [r3]
 8000e04:	f8c3 9004 	str.w	r9, [r3, #4]
  FOCVars[bMotor].Iqd = Inull;
 8000e08:	f8c3 900c 	str.w	r9, [r3, #12]
 8000e0c:	f8c3 9010 	str.w	r9, [r3, #16]
  FOCVars[bMotor].Vqd = Vnull;
 8000e10:	f8c3 9016 	str.w	r9, [r3, #22]
 8000e14:	f8c3 901a 	str.w	r9, [r3, #26]
 8000e18:	f8c3 901e 	str.w	r9, [r3, #30]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000e1c:	4649      	mov	r1, r9
 8000e1e:	f003 ff23 	bl	8004c68 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8000e22:	4b26      	ldr	r3, [pc, #152]	; (8000ebc <MC_RunMotorControlTasks+0x2d8>)
 8000e24:	4649      	mov	r1, r9
 8000e26:	6818      	ldr	r0, [r3, #0]
 8000e28:	f003 ff1e 	bl	8004c68 <PID_SetIntegralTerm>
  STC_Clear(pSTC[bMotor]);
 8000e2c:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <MC_RunMotorControlTasks+0x2dc>)
 8000e2e:	6818      	ldr	r0, [r3, #0]
 8000e30:	f005 f97a 	bl	8006128 <STC_Clear>
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000e34:	f8da 0000 	ldr.w	r0, [sl]
 8000e38:	f004 f8d4 	bl	8004fe4 <PWMC_SwitchOffPWM>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8000e3c:	f8d8 0000 	ldr.w	r0, [r8]
 8000e40:	f003 fe7e 	bl	8004b40 <MPM_Clear>
  hStopPermanencyCounterM1 = hTickCount;
 8000e44:	f44f 7348 	mov.w	r3, #800	; 0x320
    STM_NextState( &STM[M1], STOP );
 8000e48:	2108      	movs	r1, #8
 8000e4a:	4819      	ldr	r0, [pc, #100]	; (8000eb0 <MC_RunMotorControlTasks+0x2cc>)
  hStopPermanencyCounterM1 = hTickCount;
 8000e4c:	802b      	strh	r3, [r5, #0]
    STM_NextState( &STM[M1], STOP );
 8000e4e:	f005 fa29 	bl	80062a4 <STM_NextState>
 8000e52:	e770      	b.n	8000d36 <MC_RunMotorControlTasks+0x152>
    STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8000e54:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8000ec0 <MC_RunMotorControlTasks+0x2dc>
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8000e58:	4d16      	ldr	r5, [pc, #88]	; (8000eb4 <MC_RunMotorControlTasks+0x2d0>)
    STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8000e5a:	f8d8 0000 	ldr.w	r0, [r8]
 8000e5e:	491a      	ldr	r1, [pc, #104]	; (8000ec8 <MC_RunMotorControlTasks+0x2e4>)
 8000e60:	f005 f95e 	bl	8006120 <STC_SetSpeedSensor>
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8000e64:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8000e68:	b92b      	cbnz	r3, 8000e76 <MC_RunMotorControlTasks+0x292>
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8000e6a:	f8d8 0000 	ldr.w	r0, [r8]
 8000e6e:	f005 f9b9 	bl	80061e4 <STC_CalcTorqueReference>
 8000e72:	83e8      	strh	r0, [r5, #30]
    FOCVars[bMotor].Iqdref.qI_Component1 = FOCVars[bMotor].hTeref;
 8000e74:	8228      	strh	r0, [r5, #16]
      STM_NextState( &STM[M1], RUN );
 8000e76:	2106      	movs	r1, #6
 8000e78:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <MC_RunMotorControlTasks+0x2cc>)
 8000e7a:	4f08      	ldr	r7, [pc, #32]	; (8000e9c <MC_RunMotorControlTasks+0x2b8>)
 8000e7c:	4d08      	ldr	r5, [pc, #32]	; (8000ea0 <MC_RunMotorControlTasks+0x2bc>)
 8000e7e:	f005 fa11 	bl	80062a4 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8000e82:	f8d8 0000 	ldr.w	r0, [r8]
 8000e86:	f005 f9ff 	bl	8006288 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8000e8a:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <MC_RunMotorControlTasks+0x2f0>)
 8000e8c:	6818      	ldr	r0, [r3, #0]
 8000e8e:	f003 fc57 	bl	8004740 <MCI_ExecBufferedCommands>
 8000e92:	e750      	b.n	8000d36 <MC_RunMotorControlTasks+0x152>
 8000e94:	200006dc 	.word	0x200006dc
 8000e98:	200006e0 	.word	0x200006e0
 8000e9c:	200006de 	.word	0x200006de
 8000ea0:	200006e2 	.word	0x200006e2
 8000ea4:	20000820 	.word	0x20000820
 8000ea8:	20000824 	.word	0x20000824
 8000eac:	200008b4 	.word	0x200008b4
 8000eb0:	200008d4 	.word	0x200008d4
 8000eb4:	20000838 	.word	0x20000838
 8000eb8:	2000082c 	.word	0x2000082c
 8000ebc:	200008e4 	.word	0x200008e4
 8000ec0:	200008e8 	.word	0x200008e8
 8000ec4:	200008e0 	.word	0x200008e0
 8000ec8:	200003ac 	.word	0x200003ac
 8000ecc:	20000320 	.word	0x20000320
 8000ed0:	20000528 	.word	0x20000528
 8000ed4:	20000830 	.word	0x20000830
    R3F4XX_TurnOnLowSides( pwmcHandle[M1] );
 8000ed8:	4b62      	ldr	r3, [pc, #392]	; (8001064 <MC_RunMotorControlTasks+0x480>)
   hBootCapDelayCounterM1 = hTickCount;
 8000eda:	4f63      	ldr	r7, [pc, #396]	; (8001068 <MC_RunMotorControlTasks+0x484>)
    R3F4XX_TurnOnLowSides( pwmcHandle[M1] );
 8000edc:	6818      	ldr	r0, [r3, #0]
 8000ede:	4d63      	ldr	r5, [pc, #396]	; (800106c <MC_RunMotorControlTasks+0x488>)
 8000ee0:	f004 f9d0 	bl	8005284 <R3F4XX_TurnOnLowSides>
   hBootCapDelayCounterM1 = hTickCount;
 8000ee4:	2314      	movs	r3, #20
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8000ee6:	2110      	movs	r1, #16
 8000ee8:	4861      	ldr	r0, [pc, #388]	; (8001070 <MC_RunMotorControlTasks+0x48c>)
   hBootCapDelayCounterM1 = hTickCount;
 8000eea:	803b      	strh	r3, [r7, #0]
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8000eec:	f005 f9da 	bl	80062a4 <STM_NextState>
 8000ef0:	e721      	b.n	8000d36 <MC_RunMotorControlTasks+0x152>
      if( ! RUC_Exec( &RevUpControlM1 ) )
 8000ef2:	4860      	ldr	r0, [pc, #384]	; (8001074 <MC_RunMotorControlTasks+0x490>)
 8000ef4:	f006 f894 	bl	8007020 <RUC_Exec>
 8000ef8:	2800      	cmp	r0, #0
 8000efa:	d17e      	bne.n	8000ffa <MC_RunMotorControlTasks+0x416>
        STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );  
 8000efc:	4602      	mov	r2, r0
 8000efe:	2110      	movs	r1, #16
 8000f00:	485b      	ldr	r0, [pc, #364]	; (8001070 <MC_RunMotorControlTasks+0x48c>)
 8000f02:	f005 fa55 	bl	80063b0 <STM_FaultProcessing>
      (void) VSS_CalcAvrgMecSpeed01Hz( &VirtualSpeedSensorM1, &hForcedMecSpeed01Hz );
 8000f06:	f10d 0102 	add.w	r1, sp, #2
 8000f0a:	485b      	ldr	r0, [pc, #364]	; (8001078 <MC_RunMotorControlTasks+0x494>)
 8000f0c:	f005 fc58 	bl	80067c0 <VSS_CalcAvrgMecSpeed01Hz>
      ObserverConverged = STO_PLL_IsObserverConverged( &STO_PLL_M1,hForcedMecSpeed01Hz );
 8000f10:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8000f14:	4859      	ldr	r0, [pc, #356]	; (800107c <MC_RunMotorControlTasks+0x498>)
 8000f16:	f005 ff3d 	bl	8006d94 <STO_PLL_IsObserverConverged>
 8000f1a:	4605      	mov	r5, r0
      (void) VSS_SetStartTransition( &VirtualSpeedSensorM1, ObserverConverged );
 8000f1c:	4601      	mov	r1, r0
 8000f1e:	4856      	ldr	r0, [pc, #344]	; (8001078 <MC_RunMotorControlTasks+0x494>)
 8000f20:	f005 fcd4 	bl	80068cc <VSS_SetStartTransition>
      if ( ObserverConverged )
 8000f24:	2d00      	cmp	r5, #0
 8000f26:	f43f af27 	beq.w	8000d78 <MC_RunMotorControlTasks+0x194>
        Curr_Components StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8000f2a:	4854      	ldr	r0, [pc, #336]	; (800107c <MC_RunMotorControlTasks+0x498>)
 8000f2c:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8001084 <MC_RunMotorControlTasks+0x4a0>
        REMNG_Init( pREMNG[M1] );
 8000f30:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8001098 <MC_RunMotorControlTasks+0x4b4>
 8000f34:	4f4c      	ldr	r7, [pc, #304]	; (8001068 <MC_RunMotorControlTasks+0x484>)
        Curr_Components StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8000f36:	f005 f8a1 	bl	800607c <SPD_GetElAngle>
 8000f3a:	4601      	mov	r1, r0
 8000f3c:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8000f40:	f003 fce8 	bl	8004914 <MCM_Park>
 8000f44:	4605      	mov	r5, r0
        REMNG_Init( pREMNG[M1] );
 8000f46:	f8d8 0000 	ldr.w	r0, [r8]
        Curr_Components StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8000f4a:	9501      	str	r5, [sp, #4]
        REMNG_Init( pREMNG[M1] );
 8000f4c:	f004 ffe0 	bl	8005f10 <REMNG_Init>
        Iq = StatorCurrent.qI_Component1;
 8000f50:	b22d      	sxth	r5, r5
        REMNG_ExecRamp( pREMNG[M1], FOCVars[M1].Iqdref.qI_Component1, 0 );
 8000f52:	f9b9 1010 	ldrsh.w	r1, [r9, #16]
 8000f56:	f8d8 0000 	ldr.w	r0, [r8]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f004 fffc 	bl	8005f58 <REMNG_ExecRamp>
        REMNG_ExecRamp( pREMNG[M1], Iq, TRANSITION_DURATION );
 8000f60:	4629      	mov	r1, r5
 8000f62:	f8d8 0000 	ldr.w	r0, [r8]
 8000f66:	4d41      	ldr	r5, [pc, #260]	; (800106c <MC_RunMotorControlTasks+0x488>)
 8000f68:	2219      	movs	r2, #25
 8000f6a:	f004 fff5 	bl	8005f58 <REMNG_ExecRamp>
        STM_NextState( &STM[M1], SWITCH_OVER );
 8000f6e:	2113      	movs	r1, #19
 8000f70:	483f      	ldr	r0, [pc, #252]	; (8001070 <MC_RunMotorControlTasks+0x48c>)
 8000f72:	f005 f997 	bl	80062a4 <STM_NextState>
 8000f76:	e6de      	b.n	8000d36 <MC_RunMotorControlTasks+0x152>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8000f78:	4b41      	ldr	r3, [pc, #260]	; (8001080 <MC_RunMotorControlTasks+0x49c>)
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8000f7a:	4f42      	ldr	r7, [pc, #264]	; (8001084 <MC_RunMotorControlTasks+0x4a0>)
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8000f7c:	6818      	ldr	r0, [r3, #0]
 8000f7e:	f003 fbdf 	bl	8004740 <MCI_ExecBufferedCommands>
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8000f82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f86:	b153      	cbz	r3, 8000f9e <MC_RunMotorControlTasks+0x3ba>
    if( !IsSpeedReliable )
 8000f88:	2d00      	cmp	r5, #0
 8000f8a:	f47f aef5 	bne.w	8000d78 <MC_RunMotorControlTasks+0x194>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 8000f8e:	462a      	mov	r2, r5
 8000f90:	2120      	movs	r1, #32
 8000f92:	4837      	ldr	r0, [pc, #220]	; (8001070 <MC_RunMotorControlTasks+0x48c>)
 8000f94:	4f34      	ldr	r7, [pc, #208]	; (8001068 <MC_RunMotorControlTasks+0x484>)
 8000f96:	4d35      	ldr	r5, [pc, #212]	; (800106c <MC_RunMotorControlTasks+0x488>)
 8000f98:	f005 fa0a 	bl	80063b0 <STM_FaultProcessing>
 8000f9c:	e6cb      	b.n	8000d36 <MC_RunMotorControlTasks+0x152>
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8000f9e:	4b3a      	ldr	r3, [pc, #232]	; (8001088 <MC_RunMotorControlTasks+0x4a4>)
 8000fa0:	6818      	ldr	r0, [r3, #0]
 8000fa2:	f005 f91f 	bl	80061e4 <STC_CalcTorqueReference>
 8000fa6:	83f8      	strh	r0, [r7, #30]
    FOCVars[bMotor].Iqdref.qI_Component1 = FOCVars[bMotor].hTeref;
 8000fa8:	8238      	strh	r0, [r7, #16]
 8000faa:	e7ed      	b.n	8000f88 <MC_RunMotorControlTasks+0x3a4>
        LoopClosed = VSS_CalcAvrgMecSpeed01Hz(&VirtualSpeedSensorM1,&hForcedMecSpeed01Hz);
 8000fac:	a901      	add	r1, sp, #4
 8000fae:	4832      	ldr	r0, [pc, #200]	; (8001078 <MC_RunMotorControlTasks+0x494>)
 8000fb0:	f005 fc06 	bl	80067c0 <VSS_CalcAvrgMecSpeed01Hz>
 8000fb4:	4605      	mov	r5, r0
        LoopClosed |= VSS_TransitionEnded( &VirtualSpeedSensorM1 );
 8000fb6:	4830      	ldr	r0, [pc, #192]	; (8001078 <MC_RunMotorControlTasks+0x494>)
 8000fb8:	f005 fc96 	bl	80068e8 <VSS_TransitionEnded>
        if ( LoopClosed == true ) 
 8000fbc:	b915      	cbnz	r5, 8000fc4 <MC_RunMotorControlTasks+0x3e0>
 8000fbe:	2800      	cmp	r0, #0
 8000fc0:	f43f aeda 	beq.w	8000d78 <MC_RunMotorControlTasks+0x194>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8000fc4:	4a31      	ldr	r2, [pc, #196]	; (800108c <MC_RunMotorControlTasks+0x4a8>)
                               (int32_t) ( FOCVars[M1].Iqdref.qI_Component1 * PID_GetKIDivisor(pPIDSpeed[M1]) /
 8000fc6:	4b2f      	ldr	r3, [pc, #188]	; (8001084 <MC_RunMotorControlTasks+0x4a0>)
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8000fc8:	f8d2 8000 	ldr.w	r8, [r2]
                               (int32_t) ( FOCVars[M1].Iqdref.qI_Component1 * PID_GetKIDivisor(pPIDSpeed[M1]) /
 8000fcc:	f9b3 9010 	ldrsh.w	r9, [r3, #16]
 8000fd0:	4f25      	ldr	r7, [pc, #148]	; (8001068 <MC_RunMotorControlTasks+0x484>)
 8000fd2:	4d26      	ldr	r5, [pc, #152]	; (800106c <MC_RunMotorControlTasks+0x488>)
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	f003 fe4b 	bl	8004c70 <PID_GetKIDivisor>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8000fda:	fb09 f100 	mul.w	r1, r9, r0
 8000fde:	4640      	mov	r0, r8
 8000fe0:	f003 fe42 	bl	8004c68 <PID_SetIntegralTerm>
          STM_NextState( &STM[M1], START_RUN );
 8000fe4:	2105      	movs	r1, #5
 8000fe6:	4822      	ldr	r0, [pc, #136]	; (8001070 <MC_RunMotorControlTasks+0x48c>)
 8000fe8:	f005 f95c 	bl	80062a4 <STM_NextState>
 8000fec:	e6a3      	b.n	8000d36 <MC_RunMotorControlTasks+0x152>
      STM_NextState( &STM[M1], STOP_IDLE );
 8000fee:	2109      	movs	r1, #9
 8000ff0:	481f      	ldr	r0, [pc, #124]	; (8001070 <MC_RunMotorControlTasks+0x48c>)
 8000ff2:	4f1d      	ldr	r7, [pc, #116]	; (8001068 <MC_RunMotorControlTasks+0x484>)
 8000ff4:	f005 f956 	bl	80062a4 <STM_NextState>
 8000ff8:	e69d      	b.n	8000d36 <MC_RunMotorControlTasks+0x152>
        IqdRef.qI_Component1 = STC_CalcTorqueReference( pSTC[M1] );
 8000ffa:	4b23      	ldr	r3, [pc, #140]	; (8001088 <MC_RunMotorControlTasks+0x4a4>)
 8000ffc:	6818      	ldr	r0, [r3, #0]
 8000ffe:	f005 f8f1 	bl	80061e4 <STC_CalcTorqueReference>
        IqdRef.qI_Component2 = FOCVars[M1].UserIdref;
 8001002:	4b20      	ldr	r3, [pc, #128]	; (8001084 <MC_RunMotorControlTasks+0x4a0>)
 8001004:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
        FOCVars[M1].Iqdref = IqdRef;
 8001008:	8218      	strh	r0, [r3, #16]
 800100a:	825a      	strh	r2, [r3, #18]
 800100c:	e77b      	b.n	8000f06 <MC_RunMotorControlTasks+0x322>
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800100e:	4b20      	ldr	r3, [pc, #128]	; (8001090 <MC_RunMotorControlTasks+0x4ac>)
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001010:	f8df a050 	ldr.w	sl, [pc, #80]	; 8001064 <MC_RunMotorControlTasks+0x480>
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001014:	6818      	ldr	r0, [r3, #0]
 8001016:	4f14      	ldr	r7, [pc, #80]	; (8001068 <MC_RunMotorControlTasks+0x484>)
  FOCVars[bMotor].Iab = Inull;
 8001018:	f04f 0800 	mov.w	r8, #0
 800101c:	f8c5 8000 	str.w	r8, [r5]
 8001020:	f8c5 8004 	str.w	r8, [r5, #4]
  FOCVars[bMotor].Iqd = Inull;
 8001024:	f8c5 800c 	str.w	r8, [r5, #12]
 8001028:	f8c5 8010 	str.w	r8, [r5, #16]
  FOCVars[bMotor].Vqd = Vnull;
 800102c:	f8c5 8016 	str.w	r8, [r5, #22]
 8001030:	f8c5 801a 	str.w	r8, [r5, #26]
 8001034:	f8c5 801e 	str.w	r8, [r5, #30]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001038:	4641      	mov	r1, r8
 800103a:	f003 fe15 	bl	8004c68 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <MC_RunMotorControlTasks+0x4b0>)
 8001040:	4d0a      	ldr	r5, [pc, #40]	; (800106c <MC_RunMotorControlTasks+0x488>)
 8001042:	6818      	ldr	r0, [r3, #0]
 8001044:	4641      	mov	r1, r8
 8001046:	f003 fe0f 	bl	8004c68 <PID_SetIntegralTerm>
  STC_Clear(pSTC[bMotor]);
 800104a:	f8d9 0000 	ldr.w	r0, [r9]
 800104e:	f005 f86b 	bl	8006128 <STC_Clear>
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001052:	f8da 0000 	ldr.w	r0, [sl]
 8001056:	f003 ffc5 	bl	8004fe4 <PWMC_SwitchOffPWM>
      R3F4XX_SwitchOnPWM( pwmcHandle[M1] );
 800105a:	f8da 0000 	ldr.w	r0, [sl]
 800105e:	f004 f935 	bl	80052cc <R3F4XX_SwitchOnPWM>
 8001062:	e668      	b.n	8000d36 <MC_RunMotorControlTasks+0x152>
 8001064:	20000824 	.word	0x20000824
 8001068:	200006de 	.word	0x200006de
 800106c:	200006e2 	.word	0x200006e2
 8001070:	200008d4 	.word	0x200008d4
 8001074:	20000320 	.word	0x20000320
 8001078:	20000528 	.word	0x20000528
 800107c:	200003ac 	.word	0x200003ac
 8001080:	20000830 	.word	0x20000830
 8001084:	20000838 	.word	0x20000838
 8001088:	200008e8 	.word	0x200008e8
 800108c:	20000828 	.word	0x20000828
 8001090:	2000082c 	.word	0x2000082c
 8001094:	200008e4 	.word	0x200008e4
 8001098:	200008dc 	.word	0x200008dc

0800109c <MC_Scheduler>:
  if (bMCBootCompleted == 1)
 800109c:	4ba7      	ldr	r3, [pc, #668]	; (800133c <MC_Scheduler+0x2a0>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d000      	beq.n	80010a6 <MC_Scheduler+0xa>
 80010a4:	4770      	bx	lr
{
 80010a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(hMFTaskCounterM1 > 0u)
 80010aa:	4ca5      	ldr	r4, [pc, #660]	; (8001340 <MC_Scheduler+0x2a4>)
 80010ac:	8823      	ldrh	r3, [r4, #0]
 80010ae:	b29b      	uxth	r3, r3
{
 80010b0:	b082      	sub	sp, #8
    if(hMFTaskCounterM1 > 0u)
 80010b2:	b1bb      	cbz	r3, 80010e4 <MC_Scheduler+0x48>
      hMFTaskCounterM1--;
 80010b4:	8823      	ldrh	r3, [r4, #0]
 80010b6:	4ea3      	ldr	r6, [pc, #652]	; (8001344 <MC_Scheduler+0x2a8>)
 80010b8:	4da3      	ldr	r5, [pc, #652]	; (8001348 <MC_Scheduler+0x2ac>)
 80010ba:	3b01      	subs	r3, #1
 80010bc:	b29b      	uxth	r3, r3
 80010be:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0u)
 80010c0:	8833      	ldrh	r3, [r6, #0]
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	b94b      	cbnz	r3, 80010da <MC_Scheduler+0x3e>
    if(hStopPermanencyCounterM1 > 0u)
 80010c6:	882b      	ldrh	r3, [r5, #0]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	b11b      	cbz	r3, 80010d4 <MC_Scheduler+0x38>
      hStopPermanencyCounterM1--;
 80010cc:	882b      	ldrh	r3, [r5, #0]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	802b      	strh	r3, [r5, #0]
}
 80010d4:	b002      	add	sp, #8
 80010d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hBootCapDelayCounterM1--;
 80010da:	8833      	ldrh	r3, [r6, #0]
 80010dc:	3b01      	subs	r3, #1
 80010de:	b29b      	uxth	r3, r3
 80010e0:	8033      	strh	r3, [r6, #0]
 80010e2:	e7f0      	b.n	80010c6 <MC_Scheduler+0x2a>
  int16_t wAux = 0;
 80010e4:	a902      	add	r1, sp, #8
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeed01Hz( &STO_PLL_M1, &wAux );
 80010e6:	4899      	ldr	r0, [pc, #612]	; (800134c <MC_Scheduler+0x2b0>)
  int16_t wAux = 0;
 80010e8:	f821 3d08 	strh.w	r3, [r1, #-8]!
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeed01Hz( &STO_PLL_M1, &wAux );
 80010ec:	f005 fd4a 	bl	8006b84 <STO_PLL_CalcAvrgMecSpeed01Hz>
  PQD_CalcElMotorPower( pMPM[M1] );
 80010f0:	4f97      	ldr	r7, [pc, #604]	; (8001350 <MC_Scheduler+0x2b4>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeed01Hz( &STO_PLL_M1, &wAux );
 80010f2:	4605      	mov	r5, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 80010f4:	6838      	ldr	r0, [r7, #0]
 80010f6:	f003 fe05 	bl	8004d04 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 80010fa:	4896      	ldr	r0, [pc, #600]	; (8001354 <MC_Scheduler+0x2b8>)
 80010fc:	f005 f972 	bl	80063e4 <STM_GetState>
  switch ( StateM1 )
 8001100:	3803      	subs	r0, #3
 8001102:	2810      	cmp	r0, #16
 8001104:	d83f      	bhi.n	8001186 <MC_Scheduler+0xea>
 8001106:	e8df f010 	tbh	[pc, r0, lsl #1]
 800110a:	00c7      	.short	0x00c7
 800110c:	00ab00d4 	.word	0x00ab00d4
 8001110:	00750139 	.word	0x00750139
 8001114:	005e006d 	.word	0x005e006d
 8001118:	003e003e 	.word	0x003e003e
 800111c:	003e003e 	.word	0x003e003e
 8001120:	003e003e 	.word	0x003e003e
 8001124:	0041004f 	.word	0x0041004f
 8001128:	00110021 	.word	0x00110021
      if( ! RUC_Exec( &RevUpControlM1 ) )
 800112c:	488a      	ldr	r0, [pc, #552]	; (8001358 <MC_Scheduler+0x2bc>)
 800112e:	f005 ff77 	bl	8007020 <RUC_Exec>
 8001132:	2800      	cmp	r0, #0
 8001134:	f040 813c 	bne.w	80013b0 <MC_Scheduler+0x314>
          STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );  
 8001138:	4602      	mov	r2, r0
 800113a:	2110      	movs	r1, #16
 800113c:	4885      	ldr	r0, [pc, #532]	; (8001354 <MC_Scheduler+0x2b8>)
 800113e:	4e81      	ldr	r6, [pc, #516]	; (8001344 <MC_Scheduler+0x2a8>)
 8001140:	4d81      	ldr	r5, [pc, #516]	; (8001348 <MC_Scheduler+0x2ac>)
 8001142:	f005 f935 	bl	80063b0 <STM_FaultProcessing>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 8001146:	2301      	movs	r3, #1
 8001148:	8023      	strh	r3, [r4, #0]
 800114a:	e7b9      	b.n	80010c0 <MC_Scheduler+0x24>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800114c:	f8df 821c 	ldr.w	r8, [pc, #540]	; 800136c <MC_Scheduler+0x2d0>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001150:	4f82      	ldr	r7, [pc, #520]	; (800135c <MC_Scheduler+0x2c0>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001152:	4983      	ldr	r1, [pc, #524]	; (8001360 <MC_Scheduler+0x2c4>)
 8001154:	f8d8 0000 	ldr.w	r0, [r8]
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001158:	2301      	movs	r3, #1
 800115a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800115e:	f004 ffdf 	bl	8006120 <STC_SetSpeedSensor>
    RUC_Clear( &RevUpControlM1, MCI_GetImposedMotorDirection( oMCInterface[M1] ) );
 8001162:	4b80      	ldr	r3, [pc, #512]	; (8001364 <MC_Scheduler+0x2c8>)
 8001164:	6818      	ldr	r0, [r3, #0]
 8001166:	f003 fb2d 	bl	80047c4 <MCI_GetImposedMotorDirection>
 800116a:	4601      	mov	r1, r0
 800116c:	487a      	ldr	r0, [pc, #488]	; (8001358 <MC_Scheduler+0x2bc>)
 800116e:	f005 ff0f 	bl	8006f90 <RUC_Clear>
    STO_PLL_Clear( &STO_PLL_M1 );
 8001172:	4876      	ldr	r0, [pc, #472]	; (800134c <MC_Scheduler+0x2b0>)
 8001174:	f005 fdde 	bl	8006d34 <STO_PLL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8001178:	2104      	movs	r1, #4
 800117a:	4876      	ldr	r0, [pc, #472]	; (8001354 <MC_Scheduler+0x2b8>)
 800117c:	f005 f892 	bl	80062a4 <STM_NextState>
 8001180:	2800      	cmp	r0, #0
 8001182:	f040 8145 	bne.w	8001410 <MC_Scheduler+0x374>
 8001186:	4e6f      	ldr	r6, [pc, #444]	; (8001344 <MC_Scheduler+0x2a8>)
 8001188:	4d6f      	ldr	r5, [pc, #444]	; (8001348 <MC_Scheduler+0x2ac>)
 800118a:	e7dc      	b.n	8001146 <MC_Scheduler+0xaa>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 800118c:	4b76      	ldr	r3, [pc, #472]	; (8001368 <MC_Scheduler+0x2cc>)
 800118e:	2101      	movs	r1, #1
 8001190:	6818      	ldr	r0, [r3, #0]
 8001192:	f003 ff29 	bl	8004fe8 <PWMC_CurrentReadingCalibr>
 8001196:	2800      	cmp	r0, #0
 8001198:	d0f5      	beq.n	8001186 <MC_Scheduler+0xea>
      STM_NextState( &STM[M1], CLEAR );
 800119a:	2112      	movs	r1, #18
 800119c:	486d      	ldr	r0, [pc, #436]	; (8001354 <MC_Scheduler+0x2b8>)
 800119e:	4e69      	ldr	r6, [pc, #420]	; (8001344 <MC_Scheduler+0x2a8>)
 80011a0:	4d69      	ldr	r5, [pc, #420]	; (8001348 <MC_Scheduler+0x2ac>)
 80011a2:	f005 f87f 	bl	80062a4 <STM_NextState>
 80011a6:	e7ce      	b.n	8001146 <MC_Scheduler+0xaa>
  if (hBootCapDelayCounterM1 == 0)
 80011a8:	4e66      	ldr	r6, [pc, #408]	; (8001344 <MC_Scheduler+0x2a8>)
 80011aa:	8831      	ldrh	r1, [r6, #0]
 80011ac:	b289      	uxth	r1, r1
 80011ae:	2900      	cmp	r1, #0
 80011b0:	d1ea      	bne.n	8001188 <MC_Scheduler+0xec>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 80011b2:	4b6d      	ldr	r3, [pc, #436]	; (8001368 <MC_Scheduler+0x2cc>)
 80011b4:	4d64      	ldr	r5, [pc, #400]	; (8001348 <MC_Scheduler+0x2ac>)
 80011b6:	6818      	ldr	r0, [r3, #0]
 80011b8:	f003 ff16 	bl	8004fe8 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 80011bc:	2111      	movs	r1, #17
 80011be:	4865      	ldr	r0, [pc, #404]	; (8001354 <MC_Scheduler+0x2b8>)
 80011c0:	f005 f870 	bl	80062a4 <STM_NextState>
 80011c4:	e7bf      	b.n	8001146 <MC_Scheduler+0xaa>
    STC_SetSpeedSensor( pSTC[M1],&VirtualSpeedSensorM1._Super );  	/*  sensor-less */
 80011c6:	4b69      	ldr	r3, [pc, #420]	; (800136c <MC_Scheduler+0x2d0>)
 80011c8:	4965      	ldr	r1, [pc, #404]	; (8001360 <MC_Scheduler+0x2c4>)
 80011ca:	6818      	ldr	r0, [r3, #0]
 80011cc:	4e5d      	ldr	r6, [pc, #372]	; (8001344 <MC_Scheduler+0x2a8>)
 80011ce:	4d5e      	ldr	r5, [pc, #376]	; (8001348 <MC_Scheduler+0x2ac>)
 80011d0:	f004 ffa6 	bl	8006120 <STC_SetSpeedSensor>
    VSS_Clear( &VirtualSpeedSensorM1 ); /* Reset measured speed in IDLE */
 80011d4:	4862      	ldr	r0, [pc, #392]	; (8001360 <MC_Scheduler+0x2c4>)
 80011d6:	f005 fa8f 	bl	80066f8 <VSS_Clear>
    STM_NextState( &STM[M1], IDLE );
 80011da:	2100      	movs	r1, #0
 80011dc:	485d      	ldr	r0, [pc, #372]	; (8001354 <MC_Scheduler+0x2b8>)
 80011de:	f005 f861 	bl	80062a4 <STM_NextState>
 80011e2:	e7b0      	b.n	8001146 <MC_Scheduler+0xaa>
  if (hStopPermanencyCounterM1 == 0)
 80011e4:	4d58      	ldr	r5, [pc, #352]	; (8001348 <MC_Scheduler+0x2ac>)
 80011e6:	882b      	ldrh	r3, [r5, #0]
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 8100 	beq.w	80013f0 <MC_Scheduler+0x354>
 80011f0:	4e54      	ldr	r6, [pc, #336]	; (8001344 <MC_Scheduler+0x2a8>)
 80011f2:	e7a8      	b.n	8001146 <MC_Scheduler+0xaa>
    R3F4XX_SwitchOffPWM( pwmcHandle[M1] );
 80011f4:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8001368 <MC_Scheduler+0x2cc>
  hStopPermanencyCounterM1 = hTickCount;
 80011f8:	4d53      	ldr	r5, [pc, #332]	; (8001348 <MC_Scheduler+0x2ac>)
    R3F4XX_SwitchOffPWM( pwmcHandle[M1] );
 80011fa:	f8d9 0000 	ldr.w	r0, [r9]
 80011fe:	4e51      	ldr	r6, [pc, #324]	; (8001344 <MC_Scheduler+0x2a8>)
 8001200:	f004 f8a8 	bl	8005354 <R3F4XX_SwitchOffPWM>
  FOCVars[bMotor].Iab = Inull;
 8001204:	4b55      	ldr	r3, [pc, #340]	; (800135c <MC_Scheduler+0x2c0>)
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001206:	4a5a      	ldr	r2, [pc, #360]	; (8001370 <MC_Scheduler+0x2d4>)
  FOCVars[bMotor].Iab = Inull;
 8001208:	f04f 0800 	mov.w	r8, #0
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800120c:	6810      	ldr	r0, [r2, #0]
  FOCVars[bMotor].Iab = Inull;
 800120e:	f8c3 8000 	str.w	r8, [r3]
 8001212:	f8c3 8004 	str.w	r8, [r3, #4]
  FOCVars[bMotor].Iqd = Inull;
 8001216:	f8c3 800c 	str.w	r8, [r3, #12]
 800121a:	f8c3 8010 	str.w	r8, [r3, #16]
  FOCVars[bMotor].Vqd = Vnull;
 800121e:	f8c3 8016 	str.w	r8, [r3, #22]
 8001222:	f8c3 801a 	str.w	r8, [r3, #26]
 8001226:	f8c3 801e 	str.w	r8, [r3, #30]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800122a:	4641      	mov	r1, r8
 800122c:	f003 fd1c 	bl	8004c68 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8001230:	4b50      	ldr	r3, [pc, #320]	; (8001374 <MC_Scheduler+0x2d8>)
 8001232:	4641      	mov	r1, r8
 8001234:	6818      	ldr	r0, [r3, #0]
 8001236:	f003 fd17 	bl	8004c68 <PID_SetIntegralTerm>
  STC_Clear(pSTC[bMotor]);
 800123a:	4b4c      	ldr	r3, [pc, #304]	; (800136c <MC_Scheduler+0x2d0>)
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	f004 ff73 	bl	8006128 <STC_Clear>
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001242:	f8d9 0000 	ldr.w	r0, [r9]
 8001246:	f003 fecd 	bl	8004fe4 <PWMC_SwitchOffPWM>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 800124a:	6838      	ldr	r0, [r7, #0]
 800124c:	f003 fc78 	bl	8004b40 <MPM_Clear>
  hStopPermanencyCounterM1 = hTickCount;
 8001250:	f44f 7348 	mov.w	r3, #800	; 0x320
    STM_NextState( &STM[M1], STOP );
 8001254:	2108      	movs	r1, #8
 8001256:	483f      	ldr	r0, [pc, #252]	; (8001354 <MC_Scheduler+0x2b8>)
  hStopPermanencyCounterM1 = hTickCount;
 8001258:	802b      	strh	r3, [r5, #0]
    STM_NextState( &STM[M1], STOP );
 800125a:	f005 f823 	bl	80062a4 <STM_NextState>
 800125e:	e772      	b.n	8001146 <MC_Scheduler+0xaa>
    STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8001260:	4f42      	ldr	r7, [pc, #264]	; (800136c <MC_Scheduler+0x2d0>)
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8001262:	4d3e      	ldr	r5, [pc, #248]	; (800135c <MC_Scheduler+0x2c0>)
    STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8001264:	6838      	ldr	r0, [r7, #0]
 8001266:	4939      	ldr	r1, [pc, #228]	; (800134c <MC_Scheduler+0x2b0>)
 8001268:	f004 ff5a 	bl	8006120 <STC_SetSpeedSensor>
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 800126c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8001270:	b923      	cbnz	r3, 800127c <MC_Scheduler+0x1e0>
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001272:	6838      	ldr	r0, [r7, #0]
 8001274:	f004 ffb6 	bl	80061e4 <STC_CalcTorqueReference>
 8001278:	83e8      	strh	r0, [r5, #30]
    FOCVars[bMotor].Iqdref.qI_Component1 = FOCVars[bMotor].hTeref;
 800127a:	8228      	strh	r0, [r5, #16]
      STM_NextState( &STM[M1], RUN );
 800127c:	2106      	movs	r1, #6
 800127e:	4835      	ldr	r0, [pc, #212]	; (8001354 <MC_Scheduler+0x2b8>)
 8001280:	4e30      	ldr	r6, [pc, #192]	; (8001344 <MC_Scheduler+0x2a8>)
 8001282:	4d31      	ldr	r5, [pc, #196]	; (8001348 <MC_Scheduler+0x2ac>)
 8001284:	f005 f80e 	bl	80062a4 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8001288:	6838      	ldr	r0, [r7, #0]
 800128a:	f004 fffd 	bl	8006288 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 800128e:	4b35      	ldr	r3, [pc, #212]	; (8001364 <MC_Scheduler+0x2c8>)
 8001290:	6818      	ldr	r0, [r3, #0]
 8001292:	f003 fa55 	bl	8004740 <MCI_ExecBufferedCommands>
 8001296:	e756      	b.n	8001146 <MC_Scheduler+0xaa>
    R3F4XX_TurnOnLowSides( pwmcHandle[M1] );
 8001298:	4b33      	ldr	r3, [pc, #204]	; (8001368 <MC_Scheduler+0x2cc>)
   hBootCapDelayCounterM1 = hTickCount;
 800129a:	4e2a      	ldr	r6, [pc, #168]	; (8001344 <MC_Scheduler+0x2a8>)
    R3F4XX_TurnOnLowSides( pwmcHandle[M1] );
 800129c:	6818      	ldr	r0, [r3, #0]
 800129e:	4d2a      	ldr	r5, [pc, #168]	; (8001348 <MC_Scheduler+0x2ac>)
 80012a0:	f003 fff0 	bl	8005284 <R3F4XX_TurnOnLowSides>
   hBootCapDelayCounterM1 = hTickCount;
 80012a4:	2314      	movs	r3, #20
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 80012a6:	2110      	movs	r1, #16
 80012a8:	482a      	ldr	r0, [pc, #168]	; (8001354 <MC_Scheduler+0x2b8>)
   hBootCapDelayCounterM1 = hTickCount;
 80012aa:	8033      	strh	r3, [r6, #0]
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 80012ac:	f004 fffa 	bl	80062a4 <STM_NextState>
 80012b0:	e749      	b.n	8001146 <MC_Scheduler+0xaa>
      if( ! RUC_Exec( &RevUpControlM1 ) )
 80012b2:	4829      	ldr	r0, [pc, #164]	; (8001358 <MC_Scheduler+0x2bc>)
 80012b4:	f005 feb4 	bl	8007020 <RUC_Exec>
 80012b8:	2800      	cmp	r0, #0
 80012ba:	f040 809f 	bne.w	80013fc <MC_Scheduler+0x360>
        STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );  
 80012be:	4602      	mov	r2, r0
 80012c0:	2110      	movs	r1, #16
 80012c2:	4824      	ldr	r0, [pc, #144]	; (8001354 <MC_Scheduler+0x2b8>)
 80012c4:	f005 f874 	bl	80063b0 <STM_FaultProcessing>
      (void) VSS_CalcAvrgMecSpeed01Hz( &VirtualSpeedSensorM1, &hForcedMecSpeed01Hz );
 80012c8:	f10d 0102 	add.w	r1, sp, #2
 80012cc:	4824      	ldr	r0, [pc, #144]	; (8001360 <MC_Scheduler+0x2c4>)
 80012ce:	f005 fa77 	bl	80067c0 <VSS_CalcAvrgMecSpeed01Hz>
      ObserverConverged = STO_PLL_IsObserverConverged( &STO_PLL_M1,hForcedMecSpeed01Hz );
 80012d2:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 80012d6:	481d      	ldr	r0, [pc, #116]	; (800134c <MC_Scheduler+0x2b0>)
 80012d8:	f005 fd5c 	bl	8006d94 <STO_PLL_IsObserverConverged>
 80012dc:	4605      	mov	r5, r0
      (void) VSS_SetStartTransition( &VirtualSpeedSensorM1, ObserverConverged );
 80012de:	4601      	mov	r1, r0
 80012e0:	481f      	ldr	r0, [pc, #124]	; (8001360 <MC_Scheduler+0x2c4>)
 80012e2:	f005 faf3 	bl	80068cc <VSS_SetStartTransition>
      if ( ObserverConverged )
 80012e6:	2d00      	cmp	r5, #0
 80012e8:	f43f af4d 	beq.w	8001186 <MC_Scheduler+0xea>
        Curr_Components StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 80012ec:	4817      	ldr	r0, [pc, #92]	; (800134c <MC_Scheduler+0x2b0>)
 80012ee:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800135c <MC_Scheduler+0x2c0>
        REMNG_Init( pREMNG[M1] );
 80012f2:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8001378 <MC_Scheduler+0x2dc>
 80012f6:	4e13      	ldr	r6, [pc, #76]	; (8001344 <MC_Scheduler+0x2a8>)
 80012f8:	4d13      	ldr	r5, [pc, #76]	; (8001348 <MC_Scheduler+0x2ac>)
        Curr_Components StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 80012fa:	f004 febf 	bl	800607c <SPD_GetElAngle>
 80012fe:	4601      	mov	r1, r0
 8001300:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8001304:	f003 fb06 	bl	8004914 <MCM_Park>
 8001308:	4607      	mov	r7, r0
        REMNG_Init( pREMNG[M1] );
 800130a:	f8d8 0000 	ldr.w	r0, [r8]
        Curr_Components StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 800130e:	9701      	str	r7, [sp, #4]
        REMNG_Init( pREMNG[M1] );
 8001310:	f004 fdfe 	bl	8005f10 <REMNG_Init>
        Iq = StatorCurrent.qI_Component1;
 8001314:	b23f      	sxth	r7, r7
        REMNG_ExecRamp( pREMNG[M1], FOCVars[M1].Iqdref.qI_Component1, 0 );
 8001316:	f9b9 1010 	ldrsh.w	r1, [r9, #16]
 800131a:	f8d8 0000 	ldr.w	r0, [r8]
 800131e:	2200      	movs	r2, #0
 8001320:	f004 fe1a 	bl	8005f58 <REMNG_ExecRamp>
        REMNG_ExecRamp( pREMNG[M1], Iq, TRANSITION_DURATION );
 8001324:	4639      	mov	r1, r7
 8001326:	f8d8 0000 	ldr.w	r0, [r8]
 800132a:	2219      	movs	r2, #25
 800132c:	f004 fe14 	bl	8005f58 <REMNG_ExecRamp>
        STM_NextState( &STM[M1], SWITCH_OVER );
 8001330:	2113      	movs	r1, #19
 8001332:	4808      	ldr	r0, [pc, #32]	; (8001354 <MC_Scheduler+0x2b8>)
 8001334:	f004 ffb6 	bl	80062a4 <STM_NextState>
 8001338:	e705      	b.n	8001146 <MC_Scheduler+0xaa>
 800133a:	bf00      	nop
 800133c:	200006dc 	.word	0x200006dc
 8001340:	200006e0 	.word	0x200006e0
 8001344:	200006de 	.word	0x200006de
 8001348:	200006e2 	.word	0x200006e2
 800134c:	200003ac 	.word	0x200003ac
 8001350:	200008e0 	.word	0x200008e0
 8001354:	200008d4 	.word	0x200008d4
 8001358:	20000320 	.word	0x20000320
 800135c:	20000838 	.word	0x20000838
 8001360:	20000528 	.word	0x20000528
 8001364:	20000830 	.word	0x20000830
 8001368:	20000824 	.word	0x20000824
 800136c:	200008e8 	.word	0x200008e8
 8001370:	2000082c 	.word	0x2000082c
 8001374:	200008e4 	.word	0x200008e4
 8001378:	200008dc 	.word	0x200008dc
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 800137c:	4b3a      	ldr	r3, [pc, #232]	; (8001468 <MC_Scheduler+0x3cc>)
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 800137e:	4e3b      	ldr	r6, [pc, #236]	; (800146c <MC_Scheduler+0x3d0>)
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8001380:	6818      	ldr	r0, [r3, #0]
 8001382:	f003 f9dd 	bl	8004740 <MCI_ExecBufferedCommands>
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8001386:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 800138a:	b153      	cbz	r3, 80013a2 <MC_Scheduler+0x306>
    if( !IsSpeedReliable )
 800138c:	2d00      	cmp	r5, #0
 800138e:	f47f aefa 	bne.w	8001186 <MC_Scheduler+0xea>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 8001392:	462a      	mov	r2, r5
 8001394:	2120      	movs	r1, #32
 8001396:	4836      	ldr	r0, [pc, #216]	; (8001470 <MC_Scheduler+0x3d4>)
 8001398:	4e36      	ldr	r6, [pc, #216]	; (8001474 <MC_Scheduler+0x3d8>)
 800139a:	4d37      	ldr	r5, [pc, #220]	; (8001478 <MC_Scheduler+0x3dc>)
 800139c:	f005 f808 	bl	80063b0 <STM_FaultProcessing>
 80013a0:	e6d1      	b.n	8001146 <MC_Scheduler+0xaa>
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80013a2:	4b36      	ldr	r3, [pc, #216]	; (800147c <MC_Scheduler+0x3e0>)
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	f004 ff1d 	bl	80061e4 <STC_CalcTorqueReference>
 80013aa:	83f0      	strh	r0, [r6, #30]
    FOCVars[bMotor].Iqdref.qI_Component1 = FOCVars[bMotor].hTeref;
 80013ac:	8230      	strh	r0, [r6, #16]
 80013ae:	e7ed      	b.n	800138c <MC_Scheduler+0x2f0>
        LoopClosed = VSS_CalcAvrgMecSpeed01Hz(&VirtualSpeedSensorM1,&hForcedMecSpeed01Hz);
 80013b0:	a901      	add	r1, sp, #4
 80013b2:	4833      	ldr	r0, [pc, #204]	; (8001480 <MC_Scheduler+0x3e4>)
 80013b4:	f005 fa04 	bl	80067c0 <VSS_CalcAvrgMecSpeed01Hz>
 80013b8:	4605      	mov	r5, r0
        LoopClosed |= VSS_TransitionEnded( &VirtualSpeedSensorM1 );
 80013ba:	4831      	ldr	r0, [pc, #196]	; (8001480 <MC_Scheduler+0x3e4>)
 80013bc:	f005 fa94 	bl	80068e8 <VSS_TransitionEnded>
        if ( LoopClosed == true ) 
 80013c0:	b915      	cbnz	r5, 80013c8 <MC_Scheduler+0x32c>
 80013c2:	2800      	cmp	r0, #0
 80013c4:	f43f aedf 	beq.w	8001186 <MC_Scheduler+0xea>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 80013c8:	4a2e      	ldr	r2, [pc, #184]	; (8001484 <MC_Scheduler+0x3e8>)
                               (int32_t) ( FOCVars[M1].Iqdref.qI_Component1 * PID_GetKIDivisor(pPIDSpeed[M1]) /
 80013ca:	4b28      	ldr	r3, [pc, #160]	; (800146c <MC_Scheduler+0x3d0>)
          PID_SetIntegralTerm( pPIDSpeed[M1],
 80013cc:	6817      	ldr	r7, [r2, #0]
                               (int32_t) ( FOCVars[M1].Iqdref.qI_Component1 * PID_GetKIDivisor(pPIDSpeed[M1]) /
 80013ce:	f9b3 8010 	ldrsh.w	r8, [r3, #16]
 80013d2:	4e28      	ldr	r6, [pc, #160]	; (8001474 <MC_Scheduler+0x3d8>)
 80013d4:	4d28      	ldr	r5, [pc, #160]	; (8001478 <MC_Scheduler+0x3dc>)
 80013d6:	4638      	mov	r0, r7
 80013d8:	f003 fc4a 	bl	8004c70 <PID_GetKIDivisor>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 80013dc:	fb08 f100 	mul.w	r1, r8, r0
 80013e0:	4638      	mov	r0, r7
 80013e2:	f003 fc41 	bl	8004c68 <PID_SetIntegralTerm>
          STM_NextState( &STM[M1], START_RUN );
 80013e6:	2105      	movs	r1, #5
 80013e8:	4821      	ldr	r0, [pc, #132]	; (8001470 <MC_Scheduler+0x3d4>)
 80013ea:	f004 ff5b 	bl	80062a4 <STM_NextState>
 80013ee:	e6aa      	b.n	8001146 <MC_Scheduler+0xaa>
      STM_NextState( &STM[M1], STOP_IDLE );
 80013f0:	2109      	movs	r1, #9
 80013f2:	481f      	ldr	r0, [pc, #124]	; (8001470 <MC_Scheduler+0x3d4>)
 80013f4:	4e1f      	ldr	r6, [pc, #124]	; (8001474 <MC_Scheduler+0x3d8>)
 80013f6:	f004 ff55 	bl	80062a4 <STM_NextState>
 80013fa:	e6a4      	b.n	8001146 <MC_Scheduler+0xaa>
        IqdRef.qI_Component1 = STC_CalcTorqueReference( pSTC[M1] );
 80013fc:	4b1f      	ldr	r3, [pc, #124]	; (800147c <MC_Scheduler+0x3e0>)
 80013fe:	6818      	ldr	r0, [r3, #0]
 8001400:	f004 fef0 	bl	80061e4 <STC_CalcTorqueReference>
        IqdRef.qI_Component2 = FOCVars[M1].UserIdref;
 8001404:	4b19      	ldr	r3, [pc, #100]	; (800146c <MC_Scheduler+0x3d0>)
 8001406:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
        FOCVars[M1].Iqdref = IqdRef;
 800140a:	8218      	strh	r0, [r3, #16]
 800140c:	825a      	strh	r2, [r3, #18]
 800140e:	e75b      	b.n	80012c8 <MC_Scheduler+0x22c>
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001410:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <MC_Scheduler+0x3ec>)
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001412:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8001490 <MC_Scheduler+0x3f4>
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001416:	6818      	ldr	r0, [r3, #0]
 8001418:	4e16      	ldr	r6, [pc, #88]	; (8001474 <MC_Scheduler+0x3d8>)
 800141a:	4d17      	ldr	r5, [pc, #92]	; (8001478 <MC_Scheduler+0x3dc>)
  FOCVars[bMotor].Iab = Inull;
 800141c:	f04f 0900 	mov.w	r9, #0
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001420:	4649      	mov	r1, r9
  FOCVars[bMotor].Iab = Inull;
 8001422:	f8c7 9000 	str.w	r9, [r7]
 8001426:	f8c7 9004 	str.w	r9, [r7, #4]
  FOCVars[bMotor].Iqd = Inull;
 800142a:	f8c7 900c 	str.w	r9, [r7, #12]
 800142e:	f8c7 9010 	str.w	r9, [r7, #16]
  FOCVars[bMotor].Vqd = Vnull;
 8001432:	f8c7 9016 	str.w	r9, [r7, #22]
 8001436:	f8c7 901a 	str.w	r9, [r7, #26]
 800143a:	f8c7 901e 	str.w	r9, [r7, #30]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800143e:	f003 fc13 	bl	8004c68 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8001442:	4b12      	ldr	r3, [pc, #72]	; (800148c <MC_Scheduler+0x3f0>)
 8001444:	4649      	mov	r1, r9
 8001446:	6818      	ldr	r0, [r3, #0]
 8001448:	f003 fc0e 	bl	8004c68 <PID_SetIntegralTerm>
  STC_Clear(pSTC[bMotor]);
 800144c:	f8d8 0000 	ldr.w	r0, [r8]
 8001450:	f004 fe6a 	bl	8006128 <STC_Clear>
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001454:	f8da 0000 	ldr.w	r0, [sl]
 8001458:	f003 fdc4 	bl	8004fe4 <PWMC_SwitchOffPWM>
      R3F4XX_SwitchOnPWM( pwmcHandle[M1] );
 800145c:	f8da 0000 	ldr.w	r0, [sl]
 8001460:	f003 ff34 	bl	80052cc <R3F4XX_SwitchOnPWM>
 8001464:	e66f      	b.n	8001146 <MC_Scheduler+0xaa>
 8001466:	bf00      	nop
 8001468:	20000830 	.word	0x20000830
 800146c:	20000838 	.word	0x20000838
 8001470:	200008d4 	.word	0x200008d4
 8001474:	200006de 	.word	0x200006de
 8001478:	200006e2 	.word	0x200006e2
 800147c:	200008e8 	.word	0x200008e8
 8001480:	20000528 	.word	0x20000528
 8001484:	20000828 	.word	0x20000828
 8001488:	2000082c 	.word	0x2000082c
 800148c:	200008e4 	.word	0x200008e4
 8001490:	20000824 	.word	0x20000824

08001494 <TSK_HighFrequencyTask>:
{
 8001494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ( STM[M1].bState == SWITCH_OVER )
 8001498:	4b4c      	ldr	r3, [pc, #304]	; (80015cc <TSK_HighFrequencyTask+0x138>)
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 800149a:	4c4d      	ldr	r4, [pc, #308]	; (80015d0 <TSK_HighFrequencyTask+0x13c>)
  if ( STM[M1].bState == SWITCH_OVER )
 800149c:	781b      	ldrb	r3, [r3, #0]
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 800149e:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 80014a2:	b088      	sub	sp, #32
  if ( STM[M1].bState == SWITCH_OVER )
 80014a4:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 80014a6:	9005      	str	r0, [sp, #20]
  if ( STM[M1].bState == SWITCH_OVER )
 80014a8:	f000 8084 	beq.w	80015b4 <TSK_HighFrequencyTask+0x120>
  hElAngle = SPD_GetElAngle(STC_GetSpeedSensor(pSTC[bMotor]));
 80014ac:	4b49      	ldr	r3, [pc, #292]	; (80015d4 <TSK_HighFrequencyTask+0x140>)
  PWMC_GetPhaseCurrents(pwmcHandle[bMotor], &Iab);
 80014ae:	4e4a      	ldr	r6, [pc, #296]	; (80015d8 <TSK_HighFrequencyTask+0x144>)
  hElAngle = SPD_GetElAngle(STC_GetSpeedSensor(pSTC[bMotor]));
 80014b0:	6818      	ldr	r0, [r3, #0]
  FOCVars[bMotor].Ialphabeta = Ialphabeta;
 80014b2:	4f4a      	ldr	r7, [pc, #296]	; (80015dc <TSK_HighFrequencyTask+0x148>)
  hElAngle = SPD_GetElAngle(STC_GetSpeedSensor(pSTC[bMotor]));
 80014b4:	f004 fe36 	bl	8006124 <STC_GetSpeedSensor>
 80014b8:	f004 fde0 	bl	800607c <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[bMotor], &Iab);
 80014bc:	4669      	mov	r1, sp
  hElAngle = SPD_GetElAngle(STC_GetSpeedSensor(pSTC[bMotor]));
 80014be:	4605      	mov	r5, r0
  PWMC_GetPhaseCurrents(pwmcHandle[bMotor], &Iab);
 80014c0:	6830      	ldr	r0, [r6, #0]
 80014c2:	f003 fc87 	bl	8004dd4 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 80014c6:	9800      	ldr	r0, [sp, #0]
 80014c8:	f003 f9fe 	bl	80048c8 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80014cc:	4629      	mov	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 80014ce:	9001      	str	r0, [sp, #4]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80014d0:	f003 fa20 	bl	8004914 <MCM_Park>
  Vqd.qV_Component1 = PI_Controller(pPIDIq[bMotor],
 80014d4:	4b42      	ldr	r3, [pc, #264]	; (80015e0 <TSK_HighFrequencyTask+0x14c>)
            (int32_t)(FOCVars[bMotor].Iqdref.qI_Component1) - Iqd.qI_Component1);
 80014d6:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80014da:	9002      	str	r0, [sp, #8]
            (int32_t)(FOCVars[bMotor].Iqdref.qI_Component1) - Iqd.qI_Component1);
 80014dc:	b200      	sxth	r0, r0
  Vqd.qV_Component1 = PI_Controller(pPIDIq[bMotor],
 80014de:	1a09      	subs	r1, r1, r0
 80014e0:	6818      	ldr	r0, [r3, #0]
 80014e2:	f003 fbcd 	bl	8004c80 <PI_Controller>
            (int32_t)(FOCVars[bMotor].Iqdref.qI_Component2) - Iqd.qI_Component2);
 80014e6:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
  Vqd.qV_Component2 = PI_Controller(pPIDId[bMotor],
 80014ea:	4b3e      	ldr	r3, [pc, #248]	; (80015e4 <TSK_HighFrequencyTask+0x150>)
            (int32_t)(FOCVars[bMotor].Iqdref.qI_Component2) - Iqd.qI_Component2);
 80014ec:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.qV_Component1 = PI_Controller(pPIDIq[bMotor],
 80014f0:	4680      	mov	r8, r0
  Vqd.qV_Component2 = PI_Controller(pPIDId[bMotor],
 80014f2:	1a89      	subs	r1, r1, r2
 80014f4:	6818      	ldr	r0, [r3, #0]
 80014f6:	f003 fbc3 	bl	8004c80 <PI_Controller>
  Vqd = Circle_Limitation(pCLM[bMotor], Vqd);
 80014fa:	4a3b      	ldr	r2, [pc, #236]	; (80015e8 <TSK_HighFrequencyTask+0x154>)
 80014fc:	f8ad 8010 	strh.w	r8, [sp, #16]
  Vqd.qV_Component2 = PI_Controller(pPIDId[bMotor],
 8001500:	4603      	mov	r3, r0
  Vqd = Circle_Limitation(pCLM[bMotor], Vqd);
 8001502:	f8ad 3012 	strh.w	r3, [sp, #18]
 8001506:	6810      	ldr	r0, [r2, #0]
  FOCVars[bMotor].Vqd = Vqd;
 8001508:	8323      	strh	r3, [r4, #24]
  Vqd = Circle_Limitation(pCLM[bMotor], Vqd);
 800150a:	9904      	ldr	r1, [sp, #16]
  FOCVars[bMotor].Vqd = Vqd;
 800150c:	f8a4 8016 	strh.w	r8, [r4, #22]
  Vqd = Circle_Limitation(pCLM[bMotor], Vqd);
 8001510:	f003 f86c 	bl	80045ec <Circle_Limitation>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001514:	4629      	mov	r1, r5
 8001516:	f003 fa71 	bl	80049fc <MCM_Rev_Park>
 800151a:	4603      	mov	r3, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[bMotor], Valphabeta);
 800151c:	4601      	mov	r1, r0
 800151e:	6830      	ldr	r0, [r6, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001520:	9303      	str	r3, [sp, #12]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[bMotor], Valphabeta);
 8001522:	f003 fc59 	bl	8004dd8 <PWMC_SetPhaseVoltage>
 8001526:	4601      	mov	r1, r0
  FOCVars[bMotor].Iab = Iab;
 8001528:	9800      	ldr	r0, [sp, #0]
 800152a:	6020      	str	r0, [r4, #0]
  FOCVars[bMotor].Ialphabeta = Ialphabeta;
 800152c:	9801      	ldr	r0, [sp, #4]
 800152e:	6060      	str	r0, [r4, #4]
  FOCVars[bMotor].Iqd = Iqd;
 8001530:	9802      	ldr	r0, [sp, #8]
 8001532:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_FOC_DURATION)
 8001534:	2901      	cmp	r1, #1
  FOCVars[bMotor].Valphabeta = Valphabeta;
 8001536:	9803      	ldr	r0, [sp, #12]
  FOCVars[bMotor].hElAngle = hElAngle;
 8001538:	8425      	strh	r5, [r4, #32]
  FOCVars[bMotor].Valphabeta = Valphabeta;
 800153a:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_FOC_DURATION)
 800153e:	d031      	beq.n	80015a4 <TSK_HighFrequencyTask+0x110>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1); 
 8001540:	482a      	ldr	r0, [pc, #168]	; (80015ec <TSK_HighFrequencyTask+0x158>)
 8001542:	f005 fda5 	bl	8007090 <RUC_FirstAccelerationStageReached>
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001546:	4b2a      	ldr	r3, [pc, #168]	; (80015f0 <TSK_HighFrequencyTask+0x15c>)
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1); 
 8001548:	4604      	mov	r4, r0
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 800154a:	6838      	ldr	r0, [r7, #0]
 800154c:	9006      	str	r0, [sp, #24]
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 800154e:	6818      	ldr	r0, [r3, #0]
 8001550:	f003 f844 	bl	80045dc <VBS_GetAvBusVoltage_d>
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8001554:	a905      	add	r1, sp, #20
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001556:	f8ad 001c 	strh.w	r0, [sp, #28]
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 800155a:	4826      	ldr	r0, [pc, #152]	; (80015f4 <TSK_HighFrequencyTask+0x160>)
 800155c:	f005 fa2a 	bl	80069b4 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1); /*  Only in case of Sensor-less */
 8001560:	4824      	ldr	r0, [pc, #144]	; (80015f4 <TSK_HighFrequencyTask+0x160>)
 8001562:	f005 fbb7 	bl	8006cd4 <STO_PLL_CalcAvrgElSpeedDpp>
	 if (IsAccelerationStageReached == false)
 8001566:	b1cc      	cbz	r4, 800159c <TSK_HighFrequencyTask+0x108>
    hState = STM_GetState(&STM[M1]);
 8001568:	4818      	ldr	r0, [pc, #96]	; (80015cc <TSK_HighFrequencyTask+0x138>)
 800156a:	f004 ff3b 	bl	80063e4 <STM_GetState>
    if((hState == START) || (hState == SWITCH_OVER) || (hState == START_RUN)) /*  only for sensor-less*/
 800156e:	1f03      	subs	r3, r0, #4
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b01      	cmp	r3, #1
 8001574:	d905      	bls.n	8001582 <TSK_HighFrequencyTask+0xee>
 8001576:	2813      	cmp	r0, #19
 8001578:	d003      	beq.n	8001582 <TSK_HighFrequencyTask+0xee>
}
 800157a:	2000      	movs	r0, #0
 800157c:	b008      	add	sp, #32
 800157e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);      
 8001582:	481c      	ldr	r0, [pc, #112]	; (80015f4 <TSK_HighFrequencyTask+0x160>)
 8001584:	f004 fd7a 	bl	800607c <SPD_GetElAngle>
 8001588:	a908      	add	r1, sp, #32
 800158a:	f821 0d14 	strh.w	r0, [r1, #-20]!
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);  
 800158e:	481a      	ldr	r0, [pc, #104]	; (80015f8 <TSK_HighFrequencyTask+0x164>)
 8001590:	f005 f8c8 	bl	8006724 <VSS_CalcElAngle>
}
 8001594:	2000      	movs	r0, #0
 8001596:	b008      	add	sp, #32
 8001598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      STO_ResetPLL(&STO_PLL_M1);
 800159c:	4815      	ldr	r0, [pc, #84]	; (80015f4 <TSK_HighFrequencyTask+0x160>)
 800159e:	f005 fc9d 	bl	8006edc <STO_ResetPLL>
 80015a2:	e7e1      	b.n	8001568 <TSK_HighFrequencyTask+0xd4>
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 80015a4:	2200      	movs	r2, #0
 80015a6:	4809      	ldr	r0, [pc, #36]	; (80015cc <TSK_HighFrequencyTask+0x138>)
 80015a8:	f004 ff02 	bl	80063b0 <STM_FaultProcessing>
}
 80015ac:	2000      	movs	r0, #0
 80015ae:	b008      	add	sp, #32
 80015b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!REMNG_RampCompleted(pREMNG[M1]))
 80015b4:	4d11      	ldr	r5, [pc, #68]	; (80015fc <TSK_HighFrequencyTask+0x168>)
 80015b6:	6828      	ldr	r0, [r5, #0]
 80015b8:	f004 fd5a 	bl	8006070 <REMNG_RampCompleted>
 80015bc:	2800      	cmp	r0, #0
 80015be:	f47f af75 	bne.w	80014ac <TSK_HighFrequencyTask+0x18>
      FOCVars[M1].Iqdref.qI_Component1 = REMNG_Calc(pREMNG[M1]);
 80015c2:	6828      	ldr	r0, [r5, #0]
 80015c4:	f004 fcac 	bl	8005f20 <REMNG_Calc>
 80015c8:	8220      	strh	r0, [r4, #16]
 80015ca:	e76f      	b.n	80014ac <TSK_HighFrequencyTask+0x18>
 80015cc:	200008d4 	.word	0x200008d4
 80015d0:	20000838 	.word	0x20000838
 80015d4:	200008e8 	.word	0x200008e8
 80015d8:	20000824 	.word	0x20000824
 80015dc:	2000083c 	.word	0x2000083c
 80015e0:	2000082c 	.word	0x2000082c
 80015e4:	200008e4 	.word	0x200008e4
 80015e8:	200008b0 	.word	0x200008b0
 80015ec:	20000320 	.word	0x20000320
 80015f0:	200008b4 	.word	0x200008b4
 80015f4:	200003ac 	.word	0x200003ac
 80015f8:	20000528 	.word	0x20000528
 80015fc:	200008dc 	.word	0x200008dc

08001600 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected  
  * by the microcontroller and is used to put the system in safety condition.
  */
void TSK_HardwareFaultTask(void)
{
 8001600:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  
  R3F4XX_SwitchOffPWM(pwmcHandle[M1]);
 8001602:	4b05      	ldr	r3, [pc, #20]	; (8001618 <TSK_HardwareFaultTask+0x18>)
 8001604:	6818      	ldr	r0, [r3, #0]
 8001606:	f003 fea5 	bl	8005354 <R3F4XX_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2180      	movs	r1, #128	; 0x80
 800160e:	4803      	ldr	r0, [pc, #12]	; (800161c <TSK_HardwareFaultTask+0x1c>)
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001610:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8001614:	f004 becc 	b.w	80063b0 <STM_FaultProcessing>
 8001618:	20000824 	.word	0x20000824
 800161c:	200008d4 	.word	0x200008d4

08001620 <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration 
  */
void mc_lock_pins (void)
{
 8001620:	b470      	push	{r4, r5, r6}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001622:	4a35      	ldr	r2, [pc, #212]	; (80016f8 <mc_lock_pins+0xd8>)
 8001624:	4b35      	ldr	r3, [pc, #212]	; (80016fc <mc_lock_pins+0xdc>)
 8001626:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800162c:	61d1      	str	r1, [r2, #28]
 800162e:	b08d      	sub	sp, #52	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001630:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001632:	69d3      	ldr	r3, [r2, #28]
 8001634:	930b      	str	r3, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001636:	f44f 7100 	mov.w	r1, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800163a:	f44f 3381 	mov.w	r3, #66048	; 0x10200
  (void) temp;
 800163e:	980b      	ldr	r0, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001640:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001642:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001644:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001646:	69d3      	ldr	r3, [r2, #28]
 8001648:	930a      	str	r3, [sp, #40]	; 0x28
  (void) temp;
 800164a:	990a      	ldr	r1, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800164c:	4b2c      	ldr	r3, [pc, #176]	; (8001700 <mc_lock_pins+0xe0>)
 800164e:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001650:	2140      	movs	r1, #64	; 0x40
 8001652:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001654:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001656:	69d3      	ldr	r3, [r2, #28]
 8001658:	9309      	str	r3, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800165a:	f44f 3182 	mov.w	r1, #66560	; 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 800165e:	f44f 6080 	mov.w	r0, #1024	; 0x400
  (void) temp;
 8001662:	9b09      	ldr	r3, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001664:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001666:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001668:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800166a:	4b26      	ldr	r3, [pc, #152]	; (8001704 <mc_lock_pins+0xe4>)
  temp = READ_REG(GPIOx->LCKR);
 800166c:	69d4      	ldr	r4, [r2, #28]
 800166e:	9408      	str	r4, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001670:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001674:	f44f 3488 	mov.w	r4, #69632	; 0x11000
  (void) temp;
 8001678:	9e08      	ldr	r6, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800167a:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800167c:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800167e:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001680:	69dc      	ldr	r4, [r3, #28]
 8001682:	9407      	str	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001684:	f44f 6500 	mov.w	r5, #2048	; 0x800
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001688:	f44f 3484 	mov.w	r4, #67584	; 0x10800
  (void) temp;
 800168c:	9e07      	ldr	r6, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800168e:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001690:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001692:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001694:	69dc      	ldr	r4, [r3, #28]
 8001696:	9406      	str	r4, [sp, #24]
  (void) temp;
 8001698:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800169a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800169c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800169e:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80016a0:	69d9      	ldr	r1, [r3, #28]
 80016a2:	9105      	str	r1, [sp, #20]
  (void) temp;
 80016a4:	9805      	ldr	r0, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016a6:	4918      	ldr	r1, [pc, #96]	; (8001708 <mc_lock_pins+0xe8>)
 80016a8:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80016aa:	2002      	movs	r0, #2
 80016ac:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016ae:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80016b0:	69d4      	ldr	r4, [r2, #28]
 80016b2:	9404      	str	r4, [sp, #16]
  (void) temp;
 80016b4:	9d04      	ldr	r5, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016b6:	4c15      	ldr	r4, [pc, #84]	; (800170c <mc_lock_pins+0xec>)
 80016b8:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80016ba:	2504      	movs	r5, #4
 80016bc:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016be:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80016c0:	69dc      	ldr	r4, [r3, #28]
 80016c2:	9403      	str	r4, [sp, #12]
  (void) temp;
 80016c4:	9c03      	ldr	r4, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016c6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80016c8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016ca:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80016cc:	69d9      	ldr	r1, [r3, #28]
 80016ce:	9102      	str	r1, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80016d0:	2001      	movs	r0, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  (void) temp;
 80016d6:	9c02      	ldr	r4, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016d8:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80016da:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016dc:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80016de:	69d2      	ldr	r2, [r2, #28]
 80016e0:	9201      	str	r2, [sp, #4]
  (void) temp;
 80016e2:	9a01      	ldr	r2, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016e4:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80016e6:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016e8:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	9300      	str	r3, [sp, #0]
  (void) temp;
 80016ee:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
}
 80016f0:	b00d      	add	sp, #52	; 0x34
 80016f2:	bc70      	pop	{r4, r5, r6}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40020000 	.word	0x40020000
 80016fc:	00010100 	.word	0x00010100
 8001700:	00010040 	.word	0x00010040
 8001704:	40020800 	.word	0x40020800
 8001708:	00010002 	.word	0x00010002
 800170c:	00010004 	.word	0x00010004

08001710 <MCP_SentFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
void MCP_SentFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8001710:	b510      	push	{r4, lr}
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001712:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001714:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001716:	6980      	ldr	r0, [r0, #24]
 8001718:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 800171a:	2380      	movs	r3, #128	; 0x80
 800171c:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
  pHandle->fFcpReceive(pHandle->pFCP);
 8001720:	69a0      	ldr	r0, [r4, #24]
 8001722:	6a23      	ldr	r3, [r4, #32]
    MCP_WaitNextFrame(pHandle);
}
 8001724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8001728:	4718      	bx	r3
 800172a:	bf00      	nop

0800172c <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 800172c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001730:	4616      	mov	r6, r2
  bool bNoError = false; // Default is error
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 8001732:	094a      	lsrs	r2, r1, #5
{
 8001734:	b08c      	sub	sp, #48	; 0x30
 8001736:	460c      	mov	r4, r1
 8001738:	4698      	mov	r8, r3
 800173a:	4605      	mov	r5, r0
  if (bMotorSelection != 0)
 800173c:	d111      	bne.n	8001762 <MCP_ReceivedFrame+0x36>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 800173e:	2c0c      	cmp	r4, #12
 8001740:	f200 821e 	bhi.w	8001b80 <MCP_ReceivedFrame+0x454>
 8001744:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001748:	002b01fc 	.word	0x002b01fc
 800174c:	013f00b3 	.word	0x013f00b3
 8001750:	021c021c 	.word	0x021c021c
 8001754:	0174014a 	.word	0x0174014a
 8001758:	01b80187 	.word	0x01b80187
 800175c:	01ef01d9 	.word	0x01ef01d9
 8001760:	01ff      	.short	0x01ff
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 8001762:	1e57      	subs	r7, r2, #1
 8001764:	463a      	mov	r2, r7
 8001766:	2100      	movs	r1, #0
 8001768:	f000 fe8e 	bl	8002488 <UI_SetReg>
 800176c:	b960      	cbnz	r0, 8001788 <MCP_ReceivedFrame+0x5c>
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 800176e:	ac0c      	add	r4, sp, #48	; 0x30
 8001770:	230b      	movs	r3, #11
 8001772:	f804 3d22 	strb.w	r3, [r4, #-34]!
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 8001776:	4622      	mov	r2, r4
 8001778:	69a8      	ldr	r0, [r5, #24]
 800177a:	69ec      	ldr	r4, [r5, #28]
 800177c:	2301      	movs	r3, #1
 800177e:	21ff      	movs	r1, #255	; 0xff
 8001780:	47a0      	blx	r4
    }
  }
}
 8001782:	b00c      	add	sp, #48	; 0x30
 8001784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pHandle->pDAC)
 8001788:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
      Code &= 0x1F; /* Mask: 0001|1111 */
 800178c:	f004 041f 	and.w	r4, r4, #31
      if (pHandle->pDAC)
 8001790:	2800      	cmp	r0, #0
 8001792:	d0d4      	beq.n	800173e <MCP_ReceivedFrame+0x12>
        UI_SetReg(&pHandle->pDAC->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1);
 8001794:	463a      	mov	r2, r7
 8001796:	2100      	movs	r1, #0
 8001798:	f000 fe76 	bl	8002488 <UI_SetReg>
 800179c:	e7cf      	b.n	800173e <MCP_ReceivedFrame+0x12>
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 800179e:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 80017a0:	2305      	movs	r3, #5
 80017a2:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 80017a6:	297e      	cmp	r1, #126	; 0x7e
 80017a8:	f200 823e 	bhi.w	8001c28 <MCP_ReceivedFrame+0x4fc>
 80017ac:	e8df f011 	tbh	[pc, r1, lsl #1]
 80017b0:	023c022f 	.word	0x023c022f
 80017b4:	022a023c 	.word	0x022a023c
 80017b8:	0222023c 	.word	0x0222023c
 80017bc:	02220222 	.word	0x02220222
 80017c0:	02220222 	.word	0x02220222
 80017c4:	02220222 	.word	0x02220222
 80017c8:	02220222 	.word	0x02220222
 80017cc:	02220222 	.word	0x02220222
 80017d0:	02140214 	.word	0x02140214
 80017d4:	023c023c 	.word	0x023c023c
 80017d8:	02220222 	.word	0x02220222
 80017dc:	02220222 	.word	0x02220222
 80017e0:	023c0222 	.word	0x023c0222
 80017e4:	023c023c 	.word	0x023c023c
 80017e8:	01b201b2 	.word	0x01b201b2
 80017ec:	023c023c 	.word	0x023c023c
 80017f0:	023c023c 	.word	0x023c023c
 80017f4:	023c023c 	.word	0x023c023c
 80017f8:	023c023c 	.word	0x023c023c
 80017fc:	023c023c 	.word	0x023c023c
 8001800:	023c023c 	.word	0x023c023c
 8001804:	023c023c 	.word	0x023c023c
 8001808:	023c023c 	.word	0x023c023c
 800180c:	023c023c 	.word	0x023c023c
 8001810:	023c023c 	.word	0x023c023c
 8001814:	023c023c 	.word	0x023c023c
 8001818:	023c023c 	.word	0x023c023c
 800181c:	023c023c 	.word	0x023c023c
 8001820:	023c023c 	.word	0x023c023c
 8001824:	023c023c 	.word	0x023c023c
 8001828:	023c023c 	.word	0x023c023c
 800182c:	023c023c 	.word	0x023c023c
 8001830:	0222023c 	.word	0x0222023c
 8001834:	023c023c 	.word	0x023c023c
 8001838:	023c023c 	.word	0x023c023c
 800183c:	02140214 	.word	0x02140214
 8001840:	023c0214 	.word	0x023c0214
 8001844:	023c023c 	.word	0x023c023c
 8001848:	023c023c 	.word	0x023c023c
 800184c:	0222023c 	.word	0x0222023c
 8001850:	023c023c 	.word	0x023c023c
 8001854:	0222023c 	.word	0x0222023c
 8001858:	02220222 	.word	0x02220222
 800185c:	02220222 	.word	0x02220222
 8001860:	02220222 	.word	0x02220222
 8001864:	0214023c 	.word	0x0214023c
 8001868:	023c023c 	.word	0x023c023c
 800186c:	023c023c 	.word	0x023c023c
 8001870:	0222023c 	.word	0x0222023c
 8001874:	023c023c 	.word	0x023c023c
 8001878:	02220222 	.word	0x02220222
 800187c:	023c023c 	.word	0x023c023c
 8001880:	023c023c 	.word	0x023c023c
 8001884:	023c023c 	.word	0x023c023c
 8001888:	023c023c 	.word	0x023c023c
 800188c:	023c023c 	.word	0x023c023c
 8001890:	023c023c 	.word	0x023c023c
 8001894:	023c023c 	.word	0x023c023c
 8001898:	0214022a 	.word	0x0214022a
 800189c:	02140214 	.word	0x02140214
 80018a0:	02140214 	.word	0x02140214
 80018a4:	023c023c 	.word	0x023c023c
 80018a8:	0214023c 	.word	0x0214023c
 80018ac:	0214      	.short	0x0214
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80018ae:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 80018b0:	2303      	movs	r3, #3
 80018b2:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 80018b6:	2982      	cmp	r1, #130	; 0x82
 80018b8:	f200 8142 	bhi.w	8001b40 <MCP_ReceivedFrame+0x414>
 80018bc:	e8df f011 	tbh	[pc, r1, lsl #1]
 80018c0:	0172017f 	.word	0x0172017f
 80018c4:	017f017f 	.word	0x017f017f
 80018c8:	01650172 	.word	0x01650172
 80018cc:	01650165 	.word	0x01650165
 80018d0:	01650165 	.word	0x01650165
 80018d4:	01650165 	.word	0x01650165
 80018d8:	01650165 	.word	0x01650165
 80018dc:	01650165 	.word	0x01650165
 80018e0:	01650165 	.word	0x01650165
 80018e4:	01650165 	.word	0x01650165
 80018e8:	01650165 	.word	0x01650165
 80018ec:	01650165 	.word	0x01650165
 80018f0:	01650165 	.word	0x01650165
 80018f4:	01650165 	.word	0x01650165
 80018f8:	01400140 	.word	0x01400140
 80018fc:	01650172 	.word	0x01650172
 8001900:	01650165 	.word	0x01650165
 8001904:	0140017f 	.word	0x0140017f
 8001908:	01400140 	.word	0x01400140
 800190c:	01400140 	.word	0x01400140
 8001910:	01400140 	.word	0x01400140
 8001914:	01400140 	.word	0x01400140
 8001918:	01400140 	.word	0x01400140
 800191c:	01400140 	.word	0x01400140
 8001920:	01400140 	.word	0x01400140
 8001924:	01400140 	.word	0x01400140
 8001928:	01400140 	.word	0x01400140
 800192c:	01400140 	.word	0x01400140
 8001930:	01400140 	.word	0x01400140
 8001934:	01400140 	.word	0x01400140
 8001938:	01400140 	.word	0x01400140
 800193c:	01400140 	.word	0x01400140
 8001940:	01650140 	.word	0x01650140
 8001944:	01400140 	.word	0x01400140
 8001948:	01400140 	.word	0x01400140
 800194c:	01720172 	.word	0x01720172
 8001950:	01650172 	.word	0x01650172
 8001954:	01650165 	.word	0x01650165
 8001958:	017f0165 	.word	0x017f0165
 800195c:	01650172 	.word	0x01650172
 8001960:	01650165 	.word	0x01650165
 8001964:	01650165 	.word	0x01650165
 8001968:	01650165 	.word	0x01650165
 800196c:	01650165 	.word	0x01650165
 8001970:	01650165 	.word	0x01650165
 8001974:	0172017f 	.word	0x0172017f
 8001978:	01650140 	.word	0x01650140
 800197c:	01650165 	.word	0x01650165
 8001980:	01650165 	.word	0x01650165
 8001984:	01400140 	.word	0x01400140
 8001988:	01650165 	.word	0x01650165
 800198c:	017f017f 	.word	0x017f017f
 8001990:	01720172 	.word	0x01720172
 8001994:	01720172 	.word	0x01720172
 8001998:	017f0172 	.word	0x017f0172
 800199c:	01650165 	.word	0x01650165
 80019a0:	01400172 	.word	0x01400172
 80019a4:	01650165 	.word	0x01650165
 80019a8:	0172017f 	.word	0x0172017f
 80019ac:	01720172 	.word	0x01720172
 80019b0:	01720172 	.word	0x01720172
 80019b4:	01720172 	.word	0x01720172
 80019b8:	01720172 	.word	0x01720172
 80019bc:	01720172 	.word	0x01720172
 80019c0:	0140017f 	.word	0x0140017f
 80019c4:	017f      	.short	0x017f
      bErrorCode = ERROR_CODE_WRONG_CMD;
 80019c6:	2307      	movs	r3, #7
      uint8_t bCmdID = buffer[0];
 80019c8:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 80019ca:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 80019ce:	4628      	mov	r0, r5
 80019d0:	f001 f93e 	bl	8002c50 <UI_ExecCmd>
    if (bNoError)
 80019d4:	2800      	cmp	r0, #0
 80019d6:	f000 80b3 	beq.w	8001b40 <MCP_ReceivedFrame+0x414>
 80019da:	e09b      	b.n	8001b14 <MCP_ReceivedFrame+0x3e8>
 80019dc:	ac04      	add	r4, sp, #16
 80019de:	2100      	movs	r1, #0
 80019e0:	4620      	mov	r0, r4
 80019e2:	2220      	movs	r2, #32
 80019e4:	f005 fbae 	bl	8007144 <memset>
 80019e8:	f8d5 60a8 	ldr.w	r6, [r5, #168]	; 0xa8
 80019ec:	f10d 0012 	add.w	r0, sp, #18
 80019f0:	1e71      	subs	r1, r6, #1
  switch (Code)
 80019f2:	2300      	movs	r3, #0
 80019f4:	e005      	b.n	8001a02 <MCP_ReceivedFrame+0x2d6>
 80019f6:	3301      	adds	r3, #1
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80019f8:	2b1d      	cmp	r3, #29
        outBuff[3+i] = pHandle->s_fwVer[i];
 80019fa:	f800 2f01 	strb.w	r2, [r0, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80019fe:	f000 8118 	beq.w	8001c32 <MCP_ReceivedFrame+0x506>
 8001a02:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001a06:	2a09      	cmp	r2, #9
 8001a08:	d1f5      	bne.n	80019f6 <MCP_ReceivedFrame+0x2ca>
 8001a0a:	1d59      	adds	r1, r3, #5
 8001a0c:	1dda      	adds	r2, r3, #7
 8001a0e:	3309      	adds	r3, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001a10:	5c71      	ldrb	r1, [r6, r1]
 8001a12:	f88d 1010 	strb.w	r1, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001a16:	5cb2      	ldrb	r2, [r6, r2]
 8001a18:	f88d 2011 	strb.w	r2, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001a1c:	5cf3      	ldrb	r3, [r6, r3]
 8001a1e:	f88d 3012 	strb.w	r3, [sp, #18]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001a22:	4622      	mov	r2, r4
 8001a24:	69a8      	ldr	r0, [r5, #24]
 8001a26:	69ec      	ldr	r4, [r5, #28]
 8001a28:	2320      	movs	r3, #32
 8001a2a:	21f0      	movs	r1, #240	; 0xf0
 8001a2c:	47a0      	blx	r4
    break;
 8001a2e:	e071      	b.n	8001b14 <MCP_ReceivedFrame+0x3e8>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001a30:	7877      	ldrb	r7, [r6, #1]
 8001a32:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001a34:	7970      	ldrb	r0, [r6, #5]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001a36:	78b4      	ldrb	r4, [r6, #2]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001a38:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001a3a:	78f1      	ldrb	r1, [r6, #3]
 8001a3c:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8001a40:	eb03 4304 	add.w	r3, r3, r4, lsl #16
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001a44:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8001a48:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 8001a4c:	b292      	uxth	r2, r2
 8001a4e:	4628      	mov	r0, r5
 8001a50:	f001 f93a 	bl	8002cc8 <UI_ExecSpeedRamp>
    break;
 8001a54:	e7be      	b.n	80019d4 <MCP_ReceivedFrame+0x2a8>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeed01Hz, &FinalTorque);
 8001a56:	f10d 040e 	add.w	r4, sp, #14
 8001a5a:	7831      	ldrb	r1, [r6, #0]
 8001a5c:	9400      	str	r4, [sp, #0]
 8001a5e:	ab03      	add	r3, sp, #12
 8001a60:	f10d 020a 	add.w	r2, sp, #10
 8001a64:	4628      	mov	r0, r5
 8001a66:	f001 f941 	bl	8002cec <UI_GetRevupData>
      rpm = FinalMecSpeed01Hz * 6;
 8001a6a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      outBuff[6] = (uint8_t)(Durationms);
 8001a6e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
      outBuff[4] = (uint8_t)(FinalTorque);
 8001a72:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 8001a76:	f88d 1014 	strb.w	r1, [sp, #20]
      rpm = FinalMecSpeed01Hz * 6;
 8001a7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001a7e:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 8001a80:	2200      	movs	r2, #0
      outBuff[1] = (uint8_t)(rpm >> 8);
 8001a82:	121e      	asrs	r6, r3, #8
      outBuff[0] = (uint8_t)(rpm);
 8001a84:	f363 0207 	bfi	r2, r3, #0, #8
 8001a88:	f366 220f 	bfi	r2, r6, #8, #8
      outBuff[2] = (uint8_t)(rpm >> 16);
 8001a8c:	141e      	asrs	r6, r3, #16
      outBuff[0] = (uint8_t)(rpm);
 8001a8e:	f366 4217 	bfi	r2, r6, #16, #8
      outBuff[3] = (uint8_t)(rpm >> 24);
 8001a92:	161b      	asrs	r3, r3, #24
      outBuff[0] = (uint8_t)(rpm);
 8001a94:	f363 621f 	bfi	r2, r3, #24, #8
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8001a98:	1209      	asrs	r1, r1, #8
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8001a9a:	0a03      	lsrs	r3, r0, #8
      outBuff[0] = (uint8_t)(rpm);
 8001a9c:	9204      	str	r2, [sp, #16]
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8001a9e:	f88d 1015 	strb.w	r1, [sp, #21]
      outBuff[6] = (uint8_t)(Durationms);
 8001aa2:	f88d 0016 	strb.w	r0, [sp, #22]
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8001aa6:	f88d 3017 	strb.w	r3, [sp, #23]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8001aaa:	69ee      	ldr	r6, [r5, #28]
 8001aac:	69a8      	ldr	r0, [r5, #24]
 8001aae:	2308      	movs	r3, #8
 8001ab0:	aa04      	add	r2, sp, #16
 8001ab2:	21f0      	movs	r1, #240	; 0xf0
 8001ab4:	47b0      	blx	r6
    break;
 8001ab6:	e65e      	b.n	8001776 <MCP_ReceivedFrame+0x4a>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001ab8:	78b4      	ldrb	r4, [r6, #2]
 8001aba:	7873      	ldrb	r3, [r6, #1]
 8001abc:	78f0      	ldrb	r0, [r6, #3]
 8001abe:	7931      	ldrb	r1, [r6, #4]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001ac0:	f896 e006 	ldrb.w	lr, [r6, #6]
      hFinalMecSpeed01Hz = rpm / 6;
 8001ac4:	4a60      	ldr	r2, [pc, #384]	; (8001c48 <MCP_ReceivedFrame+0x51c>)
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001ac6:	7a37      	ldrb	r7, [r6, #8]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001ac8:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8001acc:	eb03 4300 	add.w	r3, r3, r0, lsl #16
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001ad0:	7970      	ldrb	r0, [r6, #5]
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001ad2:	79f4      	ldrb	r4, [r6, #7]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001ad4:	eb03 6301 	add.w	r3, r3, r1, lsl #24
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001ad8:	eb00 200e 	add.w	r0, r0, lr, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeed01Hz, hFinalTorque );
 8001adc:	7831      	ldrb	r1, [r6, #0]
      hFinalMecSpeed01Hz = rpm / 6;
 8001ade:	fb82 6203 	smull	r6, r2, r2, r3
 8001ae2:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeed01Hz, hFinalTorque );
 8001ae6:	b200      	sxth	r0, r0
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001ae8:	eb04 2207 	add.w	r2, r4, r7, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeed01Hz, hFinalTorque );
 8001aec:	9000      	str	r0, [sp, #0]
 8001aee:	b21b      	sxth	r3, r3
 8001af0:	b292      	uxth	r2, r2
 8001af2:	4628      	mov	r0, r5
 8001af4:	f001 f916 	bl	8002d24 <UI_SetRevupData>
    break;
 8001af8:	e76c      	b.n	80019d4 <MCP_ReceivedFrame+0x2a8>
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001afa:	78f0      	ldrb	r0, [r6, #3]
 8001afc:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001afe:	7873      	ldrb	r3, [r6, #1]
 8001b00:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001b02:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001b06:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8001b0a:	b212      	sxth	r2, r2
 8001b0c:	b209      	sxth	r1, r1
 8001b0e:	4628      	mov	r0, r5
 8001b10:	f001 f922 	bl	8002d58 <UI_SetCurrentReferences>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8001b14:	2300      	movs	r3, #0
 8001b16:	461a      	mov	r2, r3
 8001b18:	69ec      	ldr	r4, [r5, #28]
 8001b1a:	69a8      	ldr	r0, [r5, #24]
 8001b1c:	21f0      	movs	r1, #240	; 0xf0
 8001b1e:	47a0      	blx	r4
}
 8001b20:	b00c      	add	sp, #48	; 0x30
 8001b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001b26:	4c49      	ldr	r4, [pc, #292]	; (8001c4c <MCP_ReceivedFrame+0x520>)
      stepList.data = buffer;
 8001b28:	9604      	str	r6, [sp, #16]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001b2a:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001b2c:	4621      	mov	r1, r4
 8001b2e:	a804      	add	r0, sp, #16
      stepList.len = Size;
 8001b30:	f88d 8014 	strb.w	r8, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001b34:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001b38:	f001 f91e 	bl	8002d78 <UI_GetMPInfo>
      if (bNoError)
 8001b3c:	2800      	cmp	r0, #0
 8001b3e:	d17c      	bne.n	8001c3a <MCP_ReceivedFrame+0x50e>
 8001b40:	f10d 040e 	add.w	r4, sp, #14
 8001b44:	e617      	b.n	8001776 <MCP_ReceivedFrame+0x4a>
 8001b46:	f8d5 20a8 	ldr.w	r2, [r5, #168]	; 0xa8
 8001b4a:	ac04      	add	r4, sp, #16
 8001b4c:	3a01      	subs	r2, #1
  switch (Code)
 8001b4e:	4623      	mov	r3, r4
 8001b50:	ae0c      	add	r6, sp, #48	; 0x30
 8001b52:	e004      	b.n	8001b5e <MCP_ReceivedFrame+0x432>
        outBuff[i] = pHandle->s_fwVer[i];
 8001b54:	f803 1b01 	strb.w	r1, [r3], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001b58:	429e      	cmp	r6, r3
 8001b5a:	f43f af62 	beq.w	8001a22 <MCP_ReceivedFrame+0x2f6>
 8001b5e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8001b62:	1b18      	subs	r0, r3, r4
 8001b64:	b2c0      	uxtb	r0, r0
 8001b66:	2900      	cmp	r1, #0
 8001b68:	d1f4      	bne.n	8001b54 <MCP_ReceivedFrame+0x428>
      for (; i < 32; i++)
 8001b6a:	281f      	cmp	r0, #31
 8001b6c:	f63f af59 	bhi.w	8001a22 <MCP_ReceivedFrame+0x2f6>
        outBuff[i] = 0;
 8001b70:	f1c0 021f 	rsb	r2, r0, #31
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	3201      	adds	r2, #1
 8001b78:	4420      	add	r0, r4
 8001b7a:	f005 fae3 	bl	8007144 <memset>
 8001b7e:	e750      	b.n	8001a22 <MCP_ReceivedFrame+0x2f6>
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001b80:	ac0c      	add	r4, sp, #48	; 0x30
 8001b82:	2301      	movs	r3, #1
 8001b84:	f804 3d22 	strb.w	r3, [r4, #-34]!
    break;
 8001b88:	e5f5      	b.n	8001776 <MCP_ReceivedFrame+0x4a>
          int32_t value = UI_GetReg(&pHandle->_Super, bRegID);
 8001b8a:	4628      	mov	r0, r5
 8001b8c:	f000 fdee 	bl	800276c <UI_GetReg>
 8001b90:	9004      	str	r0, [sp, #16]
          if (value != (int32_t)(GUI_ERROR_CODE))
 8001b92:	3001      	adds	r0, #1
 8001b94:	d0d4      	beq.n	8001b40 <MCP_ReceivedFrame+0x414>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8001b96:	69ec      	ldr	r4, [r5, #28]
 8001b98:	69a8      	ldr	r0, [r5, #24]
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	aa04      	add	r2, sp, #16
 8001b9e:	21f0      	movs	r1, #240	; 0xf0
 8001ba0:	47a0      	blx	r4
 8001ba2:	e5ee      	b.n	8001782 <MCP_ReceivedFrame+0x56>
          int32_t value = UI_GetReg(&pHandle->_Super, bRegID);
 8001ba4:	4628      	mov	r0, r5
 8001ba6:	f000 fde1 	bl	800276c <UI_GetReg>
 8001baa:	9004      	str	r0, [sp, #16]
          if (value != (int32_t)(GUI_ERROR_CODE))
 8001bac:	3001      	adds	r0, #1
 8001bae:	d0c7      	beq.n	8001b40 <MCP_ReceivedFrame+0x414>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8001bb0:	69ec      	ldr	r4, [r5, #28]
 8001bb2:	69a8      	ldr	r0, [r5, #24]
 8001bb4:	2304      	movs	r3, #4
 8001bb6:	aa04      	add	r2, sp, #16
 8001bb8:	21f0      	movs	r1, #240	; 0xf0
 8001bba:	47a0      	blx	r4
 8001bbc:	e5e1      	b.n	8001782 <MCP_ReceivedFrame+0x56>
          int32_t value = UI_GetReg(&pHandle->_Super, bRegID);
 8001bbe:	4628      	mov	r0, r5
 8001bc0:	f000 fdd4 	bl	800276c <UI_GetReg>
 8001bc4:	9004      	str	r0, [sp, #16]
          if (value != (int32_t)(GUI_ERROR_CODE))
 8001bc6:	3001      	adds	r0, #1
 8001bc8:	d0ba      	beq.n	8001b40 <MCP_ReceivedFrame+0x414>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001bca:	69ec      	ldr	r4, [r5, #28]
 8001bcc:	69a8      	ldr	r0, [r5, #24]
 8001bce:	2301      	movs	r3, #1
 8001bd0:	aa04      	add	r2, sp, #16
 8001bd2:	21f0      	movs	r1, #240	; 0xf0
 8001bd4:	47a0      	blx	r4
 8001bd6:	e5d4      	b.n	8001782 <MCP_ReceivedFrame+0x56>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001bd8:	78b4      	ldrb	r4, [r6, #2]
 8001bda:	7873      	ldrb	r3, [r6, #1]
 8001bdc:	78f0      	ldrb	r0, [r6, #3]
 8001bde:	7932      	ldrb	r2, [r6, #4]
 8001be0:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8001be4:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001be8:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 8001bec:	4628      	mov	r0, r5
 8001bee:	f000 fc4b 	bl	8002488 <UI_SetReg>
        break;
 8001bf2:	e6ef      	b.n	80019d4 <MCP_ReceivedFrame+0x2a8>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8001bf4:	78b2      	ldrb	r2, [r6, #2]
 8001bf6:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001bf8:	4628      	mov	r0, r5
 8001bfa:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8001bfe:	f000 fc43 	bl	8002488 <UI_SetReg>
        break;
 8001c02:	e6e7      	b.n	80019d4 <MCP_ReceivedFrame+0x2a8>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8001c04:	7872      	ldrb	r2, [r6, #1]
 8001c06:	4628      	mov	r0, r5
 8001c08:	f000 fc3e 	bl	8002488 <UI_SetReg>
        break;
 8001c0c:	e6e2      	b.n	80019d4 <MCP_ReceivedFrame+0x2a8>
          int32_t wValue = (int32_t)(buffer[1]);
 8001c0e:	7874      	ldrb	r4, [r6, #1]
          UI_SetReg(&pHandle->pDAC->_Super, bRegID, wValue);
 8001c10:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
 8001c14:	4622      	mov	r2, r4
 8001c16:	2100      	movs	r1, #0
 8001c18:	f000 fc36 	bl	8002488 <UI_SetReg>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001c1c:	4622      	mov	r2, r4
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4628      	mov	r0, r5
 8001c22:	f000 fc31 	bl	8002488 <UI_SetReg>
        break;
 8001c26:	e6d5      	b.n	80019d4 <MCP_ReceivedFrame+0x2a8>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001c28:	ac0c      	add	r4, sp, #48	; 0x30
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	f804 3d22 	strb.w	r3, [r4, #-34]!
        break;
 8001c30:	e5a1      	b.n	8001776 <MCP_ReceivedFrame+0x4a>
 8001c32:	2326      	movs	r3, #38	; 0x26
 8001c34:	2224      	movs	r2, #36	; 0x24
 8001c36:	2122      	movs	r1, #34	; 0x22
 8001c38:	e6ea      	b.n	8001a10 <MCP_ReceivedFrame+0x2e4>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8001c3a:	69ee      	ldr	r6, [r5, #28]
 8001c3c:	69a8      	ldr	r0, [r5, #24]
 8001c3e:	7923      	ldrb	r3, [r4, #4]
 8001c40:	6822      	ldr	r2, [r4, #0]
 8001c42:	21f0      	movs	r1, #240	; 0xf0
 8001c44:	47b0      	blx	r6
 8001c46:	e59c      	b.n	8001782 <MCP_ReceivedFrame+0x56>
 8001c48:	2aaaaaab 	.word	0x2aaaaaab
 8001c4c:	200006e4 	.word	0x200006e4

08001c50 <MCP_OnTimeOut>:
 8001c50:	b510      	push	{r4, lr}
 8001c52:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c54:	4604      	mov	r4, r0
 8001c56:	6980      	ldr	r0, [r0, #24]
 8001c58:	4798      	blx	r3
 8001c5a:	2380      	movs	r3, #128	; 0x80
 8001c5c:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
 8001c60:	69a0      	ldr	r0, [r4, #24]
 8001c62:	6a23      	ldr	r3, [r4, #32]
 8001c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c68:	4718      	bx	r3
 8001c6a:	bf00      	nop

08001c6c <MCP_Init>:
{
 8001c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	4604      	mov	r4, r0
 8001c72:	461e      	mov	r6, r3
  pHandle->pDAC = pDAC;
 8001c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
  pHandle->pFCP = pFCP;
 8001c76:	6181      	str	r1, [r0, #24]
  FCP_SetClient( pFCP, pHandle,
 8001c78:	4d0e      	ldr	r5, [pc, #56]	; (8001cb4 <MCP_Init+0x48>)
  pHandle->pDAC = pDAC;
 8001c7a:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
  pHandle->s_fwVer = s_fwVer;
 8001c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001c80:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
  FCP_SetClient( pFCP, pHandle,
 8001c84:	4608      	mov	r0, r1
{
 8001c86:	4617      	mov	r7, r2
  FCP_SetClient( pFCP, pHandle,
 8001c88:	4621      	mov	r1, r4
 8001c8a:	9500      	str	r5, [sp, #0]
 8001c8c:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <MCP_Init+0x4c>)
{
 8001c8e:	9d08      	ldr	r5, [sp, #32]
  FCP_SetClient( pFCP, pHandle,
 8001c90:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <MCP_Init+0x50>)
 8001c92:	f002 fcf3 	bl	800467c <FCP_SetClient>
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001c96:	69a0      	ldr	r0, [r4, #24]
  pHandle->fFcpSend = fFcpSend;
 8001c98:	61e7      	str	r7, [r4, #28]
  pHandle->fFcpReceive = fFcpReceive;
 8001c9a:	6226      	str	r6, [r4, #32]
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8001c9c:	6265      	str	r5, [r4, #36]	; 0x24
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001c9e:	47a8      	blx	r5
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8001ca0:	2380      	movs	r3, #128	; 0x80
 8001ca2:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
  pHandle->fFcpReceive(pHandle->pFCP);
 8001ca6:	69a0      	ldr	r0, [r4, #24]
 8001ca8:	6a23      	ldr	r3, [r4, #32]
}
 8001caa:	b003      	add	sp, #12
 8001cac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8001cb0:	4718      	bx	r3
 8001cb2:	bf00      	nop
 8001cb4:	08001c51 	.word	0x08001c51
 8001cb8:	0800172d 	.word	0x0800172d
 8001cbc:	08001711 	.word	0x08001711

08001cc0 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and 
 * before the NVIC is configured
 */
void MX_MotorControl_Init(void) 
{
 8001cc0:	b530      	push	{r4, r5, lr}
 8001cc2:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001cc4:	f001 fd72 	bl	80037ac <HAL_RCC_GetHCLKFreq>
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <MX_MotorControl_Init+0x38>)

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8001cca:	4d0c      	ldr	r5, [pc, #48]	; (8001cfc <MX_MotorControl_Init+0x3c>)
 8001ccc:	4c0c      	ldr	r4, [pc, #48]	; (8001d00 <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001cce:	fba3 3000 	umull	r3, r0, r3, r0
 8001cd2:	09c0      	lsrs	r0, r0, #7
 8001cd4:	f001 fb66 	bl	80033a4 <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 8001cd8:	4629      	mov	r1, r5
 8001cda:	4620      	mov	r0, r4
 8001cdc:	f7fe fe64 	bl	80009a8 <MCboot>
  mc_lock_pins();
 8001ce0:	f7ff fc9e 	bl	8001620 <mc_lock_pins>
  
  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8001ce4:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <MX_MotorControl_Init+0x44>)
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	4622      	mov	r2, r4
 8001cea:	462b      	mov	r3, r5
 8001cec:	2101      	movs	r1, #1
 8001cee:	4806      	ldr	r0, [pc, #24]	; (8001d08 <MX_MotorControl_Init+0x48>)
 8001cf0:	f000 fb44 	bl	800237c <UI_TaskInit>
}
 8001cf4:	b003      	add	sp, #12
 8001cf6:	bd30      	pop	{r4, r5, pc}
 8001cf8:	10624dd3 	.word	0x10624dd3
 8001cfc:	200008f0 	.word	0x200008f0
 8001d00:	200008ec 	.word	0x200008ec
 8001d04:	080071a0 	.word	0x080071a0
 8001d08:	20000694 	.word	0x20000694

08001d0c <RCM_RegisterRegConv>:
  *         Contains ADC, Channel and sampling time to be used.
  *
  *  @retval the handle of the registered conversion or 255 if the registration failed
  */
uint8_t RCM_RegisterRegConv(RegConv_t * regConv)
{
 8001d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  
    /* Parse the array to be sure that same 
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    { 
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)  
 8001d0e:	4950      	ldr	r1, [pc, #320]	; (8001e50 <RCM_RegisterRegConv+0x144>)
 8001d10:	7902      	ldrb	r2, [r0, #4]
 8001d12:	680b      	ldr	r3, [r1, #0]
      {
        handle = i; /* First location available, but still looping to check that this config does not already exist*/ 
      }
      if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001d14:	791d      	ldrb	r5, [r3, #4]
{
 8001d16:	4604      	mov	r4, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)  
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	bf14      	ite	ne
 8001d1c:	20ff      	movne	r0, #255	; 0xff
 8001d1e:	2000      	moveq	r0, #0
      if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001d20:	4295      	cmp	r5, r2
 8001d22:	d06f      	beq.n	8001e04 <RCM_RegisterRegConv+0xf8>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)  
 8001d24:	684b      	ldr	r3, [r1, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 8084 	beq.w	8001e34 <RCM_RegisterRegConv+0x128>
      if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001d2c:	791d      	ldrb	r5, [r3, #4]
 8001d2e:	4295      	cmp	r5, r2
 8001d30:	d06e      	beq.n	8001e10 <RCM_RegisterRegConv+0x104>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)  
 8001d32:	688b      	ldr	r3, [r1, #8]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 8082 	beq.w	8001e3e <RCM_RegisterRegConv+0x132>
      if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001d3a:	791d      	ldrb	r5, [r3, #4]
 8001d3c:	4295      	cmp	r5, r2
 8001d3e:	d06d      	beq.n	8001e1c <RCM_RegisterRegConv+0x110>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)  
 8001d40:	68cb      	ldr	r3, [r1, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d07f      	beq.n	8001e46 <RCM_RegisterRegConv+0x13a>
      if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001d46:	791d      	ldrb	r5, [r3, #4]
 8001d48:	4295      	cmp	r5, r2
 8001d4a:	d06d      	beq.n	8001e28 <RCM_RegisterRegConv+0x11c>
         handle =i; /* Reuse the same handle */
         i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
        }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8001d4c:	2803      	cmp	r0, #3
 8001d4e:	d84f      	bhi.n	8001df0 <RCM_RegisterRegConv+0xe4>
 8001d50:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8001d52:	689d      	ldr	r5, [r3, #8]
    {    
      RCM_handle_array [handle] = regConv;
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8001d54:	4e3f      	ldr	r6, [pc, #252]	; (8001e54 <RCM_RegisterRegConv+0x148>)
      RCM_handle_array [handle] = regConv;
 8001d56:	f841 4020 	str.w	r4, [r1, r0, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	f846 1030 	str.w	r1, [r6, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8001d60:	07e9      	lsls	r1, r5, #31
 8001d62:	d411      	bmi.n	8001d88 <RCM_RegisterRegConv+0x7c>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8001d64:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8001d66:	f06f 0502 	mvn.w	r5, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8001d6a:	f021 0120 	bic.w	r1, r1, #32
 8001d6e:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8001d70:	601d      	str	r5, [r3, #0]
{
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8001d72:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8001d74:	f06f 0504 	mvn.w	r5, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8001d78:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8001d7c:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8001d7e:	601d      	str	r5, [r3, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8001d80:	6899      	ldr	r1, [r3, #8]
 8001d82:	f041 0101 	orr.w	r1, r1, #1
 8001d86:	6099      	str	r1, [r3, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001d88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
      {
      }
      /* reset regular conversion sequencer length set by cubeMX */
      LL_ADC_REG_SetSequencerLength( regConv->regADC, LL_ADC_REG_SEQ_SCAN_DISABLE );
      /* configure the sampling time (should already be configured by for non user conversions)*/
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8001d8a:	2a09      	cmp	r2, #9
 8001d8c:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8001d90:	62d9      	str	r1, [r3, #44]	; 0x2c
 8001d92:	d82f      	bhi.n	8001df4 <RCM_RegisterRegConv+0xe8>
 8001d94:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8001d98:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001d9c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da0:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8001da4:	fa97 f7a7 	rbit	r7, r7
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001da8:	fab7 f187 	clz	r1, r7
 8001dac:	f002 7700 	and.w	r7, r2, #33554432	; 0x2000000
 8001db0:	40cf      	lsrs	r7, r1
 8001db2:	330c      	adds	r3, #12
  MODIFY_REG(*preg,
 8001db4:	f002 72f8 	and.w	r2, r2, #32505856	; 0x1f00000
 8001db8:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8001dbc:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001dc0:	fa91 f6a1 	rbit	r6, r1
 8001dc4:	fab6 f686 	clz	r6, r6
 8001dc8:	fa91 f1a1 	rbit	r1, r1
 8001dcc:	f04f 0e07 	mov.w	lr, #7
 8001dd0:	68a4      	ldr	r4, [r4, #8]
 8001dd2:	fab1 f181 	clz	r1, r1
 8001dd6:	fa22 f606 	lsr.w	r6, r2, r6
 8001dda:	fa0e f606 	lsl.w	r6, lr, r6
 8001dde:	40ca      	lsrs	r2, r1
 8001de0:	fa04 f102 	lsl.w	r1, r4, r2
 8001de4:	ea25 0206 	bic.w	r2, r5, r6
 8001de8:	430a      	orrs	r2, r1
 8001dea:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
 8001dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001df0:	20ff      	movs	r0, #255	; 0xff
    }
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
 8001df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8001df4:	2103      	movs	r1, #3
 8001df6:	f06f 051d 	mvn.w	r5, #29
 8001dfa:	fb11 5102 	smlabb	r1, r1, r2, r5
 8001dfe:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8001e02:	e7cd      	b.n	8001da0 <RCM_RegisterRegConv+0x94>
      if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001e04:	681d      	ldr	r5, [r3, #0]
 8001e06:	6823      	ldr	r3, [r4, #0]
 8001e08:	42ab      	cmp	r3, r5
 8001e0a:	d18b      	bne.n	8001d24 <RCM_RegisterRegConv+0x18>
  uint8_t i=0;
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	e7a0      	b.n	8001d52 <RCM_RegisterRegConv+0x46>
      if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001e10:	681d      	ldr	r5, [r3, #0]
 8001e12:	6823      	ldr	r3, [r4, #0]
 8001e14:	429d      	cmp	r5, r3
 8001e16:	d18c      	bne.n	8001d32 <RCM_RegisterRegConv+0x26>
      i++;
 8001e18:	2001      	movs	r0, #1
 8001e1a:	e79a      	b.n	8001d52 <RCM_RegisterRegConv+0x46>
      if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001e1c:	681d      	ldr	r5, [r3, #0]
 8001e1e:	6823      	ldr	r3, [r4, #0]
 8001e20:	429d      	cmp	r5, r3
 8001e22:	d18d      	bne.n	8001d40 <RCM_RegisterRegConv+0x34>
      i++;
 8001e24:	2002      	movs	r0, #2
 8001e26:	e794      	b.n	8001d52 <RCM_RegisterRegConv+0x46>
      if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001e28:	681d      	ldr	r5, [r3, #0]
 8001e2a:	6823      	ldr	r3, [r4, #0]
 8001e2c:	429d      	cmp	r5, r3
 8001e2e:	d18d      	bne.n	8001d4c <RCM_RegisterRegConv+0x40>
      i++;
 8001e30:	2003      	movs	r0, #3
 8001e32:	e78e      	b.n	8001d52 <RCM_RegisterRegConv+0x46>
 8001e34:	2804      	cmp	r0, #4
 8001e36:	bf94      	ite	ls
 8001e38:	2000      	movls	r0, #0
 8001e3a:	2001      	movhi	r0, #1
 8001e3c:	e776      	b.n	8001d2c <RCM_RegisterRegConv+0x20>
 8001e3e:	2805      	cmp	r0, #5
 8001e40:	bf28      	it	cs
 8001e42:	2002      	movcs	r0, #2
 8001e44:	e779      	b.n	8001d3a <RCM_RegisterRegConv+0x2e>
 8001e46:	2805      	cmp	r0, #5
 8001e48:	bf28      	it	cs
 8001e4a:	2003      	movcs	r0, #3
 8001e4c:	e77b      	b.n	8001d46 <RCM_RegisterRegConv+0x3a>
 8001e4e:	bf00      	nop
 8001e50:	2000091c 	.word	0x2000091c
 8001e54:	200008f8 	.word	0x200008f8

08001e58 <RCM_ExecRegularConv>:
 * There is no issue to execute regular conversion asynchronously.
 *
 * NOTE: This function is not part of the public API and users should not call it. 
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
 8001e58:	b430      	push	{r4, r5}
  uint16_t retVal;
 
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <RCM_ExecRegularConv+0x70>)
 8001e5c:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001e60:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	2b09      	cmp	r3, #9
 8001e66:	d827      	bhi.n	8001eb8 <RCM_ExecRegularConv+0x60>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001e68:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001e6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e70:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8001e74:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001e78:	fa91 f1a1 	rbit	r1, r1
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001e7c:	f44f 7500 	mov.w	r5, #512	; 0x200
 8001e80:	fab1 f181 	clz	r1, r1
 8001e84:	40cd      	lsrs	r5, r1
 8001e86:	f102 042c 	add.w	r4, r2, #44	; 0x2c
  MODIFY_REG(*preg,
 8001e8a:	f003 031f 	and.w	r3, r3, #31
 8001e8e:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8001e92:	f020 001f 	bic.w	r0, r0, #31
 8001e96:	4303      	orrs	r3, r0

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET ( &RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos );
 8001e98:	0151      	lsls	r1, r2, #5
 8001e9a:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
 8001e9e:	f101 4184 	add.w	r1, r1, #1107296256	; 0x42000000
 8001ea2:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001ea4:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8001ea6:	f8c1 3178 	str.w	r3, [r1, #376]	; 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8001eaa:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOCS( RCM_handle_array[handle]->regADC ) == 0u ) {}  
 8001eac:	079b      	lsls	r3, r3, #30
 8001eae:	d5fc      	bpl.n	8001eaa <RCM_ExecRegularConv+0x52>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001eb0:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );   
return retVal;
}
 8001eb2:	bc30      	pop	{r4, r5}
 8001eb4:	b280      	uxth	r0, r0
 8001eb6:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001eb8:	2103      	movs	r1, #3
 8001eba:	f06f 001d 	mvn.w	r0, #29
 8001ebe:	fb11 0103 	smlabb	r1, r1, r3, r0
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001ec2:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8001ec6:	e7d5      	b.n	8001e74 <RCM_ExecRegularConv+0x1c>
 8001ec8:	2000091c 	.word	0x2000091c

08001ecc <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it. 
 */
void RCM_ExecUserConv ()
{
 8001ecc:	b4f0      	push	{r4, r5, r6, r7}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8001ece:	4c27      	ldr	r4, [pc, #156]	; (8001f6c <RCM_ExecUserConv+0xa0>)
 8001ed0:	7823      	ldrb	r3, [r4, #0]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d001      	beq.n	8001eda <RCM_ExecUserConv+0xe>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 8001ed6:	bcf0      	pop	{r4, r5, r6, r7}
 8001ed8:	4770      	bx	lr
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001eda:	4a25      	ldr	r2, [pc, #148]	; (8001f70 <RCM_ExecUserConv+0xa4>)
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001edc:	4b25      	ldr	r3, [pc, #148]	; (8001f74 <RCM_ExecUserConv+0xa8>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001ede:	7810      	ldrb	r0, [r2, #0]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001ee0:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001ee4:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	2b09      	cmp	r3, #9
 8001eea:	d836      	bhi.n	8001f5a <RCM_ExecUserConv+0x8e>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001eec:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001ef0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ef4:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8001ef8:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001efc:	fa91 f1a1 	rbit	r1, r1
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001f00:	f44f 7700 	mov.w	r7, #512	; 0x200
 8001f04:	fab1 f181 	clz	r1, r1
 8001f08:	40cf      	lsrs	r7, r1
 8001f0a:	f102 062c 	add.w	r6, r2, #44	; 0x2c
  MODIFY_REG(*preg,
 8001f0e:	f003 031f 	and.w	r3, r3, #31
 8001f12:	f856 5027 	ldr.w	r5, [r6, r7, lsl #2]
 8001f16:	f025 051f 	bic.w	r5, r5, #31
 8001f1a:	432b      	orrs	r3, r5
  BB_REG_BIT_SET ( &RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos );
 8001f1c:	0151      	lsls	r1, r2, #5
 8001f1e:	f846 3027 	str.w	r3, [r6, r7, lsl #2]
 8001f22:	f101 4184 	add.w	r1, r1, #1107296256	; 0x42000000
 8001f26:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001f28:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8001f2a:	f8c1 3178 	str.w	r3, [r1, #376]	; 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8001f2e:	6813      	ldr	r3, [r2, #0]
  while ( LL_ADC_IsActiveFlag_EOCS( RCM_handle_array[handle]->regADC ) == 0u ) {}  
 8001f30:	079b      	lsls	r3, r3, #30
 8001f32:	d5fc      	bpl.n	8001f2e <RCM_ExecUserConv+0x62>
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001f34:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <RCM_ExecUserConv+0xac>)
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001f36:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001f38:	4e10      	ldr	r6, [pc, #64]	; (8001f7c <RCM_ExecUserConv+0xb0>)
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001f3a:	f853 5030 	ldr.w	r5, [r3, r0, lsl #3]
 8001f3e:	b289      	uxth	r1, r1
    RCM_UserConvState = RCM_USERCONV_EOC;
 8001f40:	2202      	movs	r2, #2
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001f42:	8031      	strh	r1, [r6, #0]
    RCM_UserConvState = RCM_USERCONV_EOC;
 8001f44:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001f46:	2d00      	cmp	r5, #0
 8001f48:	d0c5      	beq.n	8001ed6 <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001f4a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8001f4e:	2600      	movs	r6, #0
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001f50:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8001f52:	7026      	strb	r6, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001f54:	462b      	mov	r3, r5
}
 8001f56:	bcf0      	pop	{r4, r5, r6, r7}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001f58:	4718      	bx	r3
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001f5a:	2103      	movs	r1, #3
 8001f5c:	f06f 051d 	mvn.w	r5, #29
 8001f60:	fb11 5103 	smlabb	r1, r1, r3, r5
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001f64:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8001f68:	e7c6      	b.n	8001ef8 <RCM_ExecUserConv+0x2c>
 8001f6a:	bf00      	nop
 8001f6c:	20000918 	.word	0x20000918
 8001f70:	200008f4 	.word	0x200008f4
 8001f74:	2000091c 	.word	0x2000091c
 8001f78:	200008f8 	.word	0x200008f8
 8001f7c:	2000092c 	.word	0x2000092c

08001f80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f80:	b500      	push	{lr}
 8001f82:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f84:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <HAL_MspInit+0x3c>)
 8001f86:	2100      	movs	r1, #0
 8001f88:	9100      	str	r1, [sp, #0]
 8001f8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f90:	645a      	str	r2, [r3, #68]	; 0x44
 8001f92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f94:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001f98:	9200      	str	r2, [sp, #0]
 8001f9a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f9c:	9101      	str	r1, [sp, #4]
 8001f9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fa0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001fa4:	641a      	str	r2, [r3, #64]	; 0x40
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fac:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001fae:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001fb2:	f001 f9a1 	bl	80032f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fb6:	b003      	add	sp, #12
 8001fb8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fbc:	40023800 	.word	0x40023800

08001fc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fc0:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8001fc2:	6803      	ldr	r3, [r0, #0]
 8001fc4:	4a36      	ldr	r2, [pc, #216]	; (80020a0 <HAL_ADC_MspInit+0xe0>)
{
 8001fc6:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8001fca:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fcc:	9408      	str	r4, [sp, #32]
 8001fce:	9407      	str	r4, [sp, #28]
 8001fd0:	9409      	str	r4, [sp, #36]	; 0x24
 8001fd2:	940a      	str	r4, [sp, #40]	; 0x28
 8001fd4:	940b      	str	r4, [sp, #44]	; 0x2c
  if(hadc->Instance==ADC1)
 8001fd6:	d033      	beq.n	8002040 <HAL_ADC_MspInit+0x80>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8001fd8:	4a32      	ldr	r2, [pc, #200]	; (80020a4 <HAL_ADC_MspInit+0xe4>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d001      	beq.n	8001fe2 <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001fde:	b00d      	add	sp, #52	; 0x34
 8001fe0:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001fe2:	4b31      	ldr	r3, [pc, #196]	; (80020a8 <HAL_ADC_MspInit+0xe8>)
 8001fe4:	9404      	str	r4, [sp, #16]
 8001fe6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe8:	4830      	ldr	r0, [pc, #192]	; (80020ac <HAL_ADC_MspInit+0xec>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fee:	645a      	str	r2, [r3, #68]	; 0x44
 8001ff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ff2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001ff6:	9204      	str	r2, [sp, #16]
 8001ff8:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ffa:	9405      	str	r4, [sp, #20]
 8001ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ffe:	f042 0204 	orr.w	r2, r2, #4
 8002002:	631a      	str	r2, [r3, #48]	; 0x30
 8002004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002006:	f002 0204 	and.w	r2, r2, #4
 800200a:	9205      	str	r2, [sp, #20]
 800200c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200e:	9406      	str	r4, [sp, #24]
 8002010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002012:	f042 0201 	orr.w	r2, r2, #1
 8002016:	631a      	str	r2, [r3, #48]	; 0x30
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin;
 800201e:	2503      	movs	r5, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002020:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002022:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002024:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin;
 8002026:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002028:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800202a:	f001 f9db 	bl	80033e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 800202e:	2301      	movs	r3, #1
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 8002030:	a907      	add	r1, sp, #28
 8002032:	481f      	ldr	r0, [pc, #124]	; (80020b0 <HAL_ADC_MspInit+0xf0>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002034:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 8002038:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 800203a:	f001 f9d3 	bl	80033e4 <HAL_GPIO_Init>
}
 800203e:	e7ce      	b.n	8001fde <HAL_ADC_MspInit+0x1e>
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002040:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <HAL_ADC_MspInit+0xe8>)
 8002042:	9401      	str	r4, [sp, #4]
 8002044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002046:	4819      	ldr	r0, [pc, #100]	; (80020ac <HAL_ADC_MspInit+0xec>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800204c:	645a      	str	r2, [r3, #68]	; 0x44
 800204e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002050:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002054:	9201      	str	r2, [sp, #4]
 8002056:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002058:	9402      	str	r4, [sp, #8]
 800205a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800205c:	f042 0204 	orr.w	r2, r2, #4
 8002060:	631a      	str	r2, [r3, #48]	; 0x30
 8002062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002064:	f002 0204 	and.w	r2, r2, #4
 8002068:	9202      	str	r2, [sp, #8]
 800206a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206c:	9403      	str	r4, [sp, #12]
 800206e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002070:	f042 0201 	orr.w	r2, r2, #1
 8002074:	631a      	str	r2, [r3, #48]	; 0x30
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800207e:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_TEMPERATURE_Pin;
 8002080:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002082:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002084:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_TEMPERATURE_Pin;
 8002086:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002088:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800208a:	f001 f9ab 	bl	80033e4 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208e:	a907      	add	r1, sp, #28
 8002090:	4807      	ldr	r0, [pc, #28]	; (80020b0 <HAL_ADC_MspInit+0xf0>)
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 8002092:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002094:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002098:	f001 f9a4 	bl	80033e4 <HAL_GPIO_Init>
 800209c:	e79f      	b.n	8001fde <HAL_ADC_MspInit+0x1e>
 800209e:	bf00      	nop
 80020a0:	40012000 	.word	0x40012000
 80020a4:	40012100 	.word	0x40012100
 80020a8:	40023800 	.word	0x40023800
 80020ac:	40020800 	.word	0x40020800
 80020b0:	40020000 	.word	0x40020000

080020b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020b4:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 80020b6:	6801      	ldr	r1, [r0, #0]
 80020b8:	4a17      	ldr	r2, [pc, #92]	; (8002118 <HAL_TIM_Base_MspInit+0x64>)
{
 80020ba:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020bc:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 80020be:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	9304      	str	r3, [sp, #16]
 80020c2:	9303      	str	r3, [sp, #12]
 80020c4:	9305      	str	r3, [sp, #20]
 80020c6:	9306      	str	r3, [sp, #24]
 80020c8:	9307      	str	r3, [sp, #28]
  if(htim_base->Instance==TIM1)
 80020ca:	d001      	beq.n	80020d0 <HAL_TIM_Base_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80020cc:	b009      	add	sp, #36	; 0x24
 80020ce:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020d0:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80020d8:	4810      	ldr	r0, [pc, #64]	; (800211c <HAL_TIM_Base_MspInit+0x68>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020da:	f041 0101 	orr.w	r1, r1, #1
 80020de:	6451      	str	r1, [r2, #68]	; 0x44
 80020e0:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80020e2:	f001 0101 	and.w	r1, r1, #1
 80020e6:	9101      	str	r1, [sp, #4]
 80020e8:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ea:	9302      	str	r3, [sp, #8]
 80020ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	6313      	str	r3, [r2, #48]	; 0x30
 80020f4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	2202      	movs	r2, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020fe:	2301      	movs	r3, #1
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8002100:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8002102:	2440      	movs	r4, #64	; 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002104:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8002106:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002108:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800210a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800210c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 800210e:	f001 f969 	bl	80033e4 <HAL_GPIO_Init>
}
 8002112:	b009      	add	sp, #36	; 0x24
 8002114:	bd30      	pop	{r4, r5, pc}
 8002116:	bf00      	nop
 8002118:	40010000 	.word	0x40010000
 800211c:	40020000 	.word	0x40020000

08002120 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002120:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8002122:	6801      	ldr	r1, [r0, #0]
 8002124:	4a13      	ldr	r2, [pc, #76]	; (8002174 <HAL_TIM_MspPostInit+0x54>)
{
 8002126:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002128:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 800212a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	9302      	str	r3, [sp, #8]
 800212e:	9301      	str	r3, [sp, #4]
 8002130:	9303      	str	r3, [sp, #12]
 8002132:	9304      	str	r3, [sp, #16]
 8002134:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 8002136:	d001      	beq.n	800213c <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002138:	b007      	add	sp, #28
 800213a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213c:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002144:	480c      	ldr	r0, [pc, #48]	; (8002178 <HAL_TIM_MspPostInit+0x58>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6313      	str	r3, [r2, #48]	; 0x30
 800214c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002154:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002156:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002158:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800215a:	f44f 64e0 	mov.w	r4, #1792	; 0x700
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800215e:	9d00      	ldr	r5, [sp, #0]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002160:	9401      	str	r4, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002164:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002166:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002168:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216a:	f001 f93b 	bl	80033e4 <HAL_GPIO_Init>
}
 800216e:	b007      	add	sp, #28
 8002170:	bd30      	pop	{r4, r5, pc}
 8002172:	bf00      	nop
 8002174:	40010000 	.word	0x40010000
 8002178:	40020000 	.word	0x40020000

0800217c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800217c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 800217e:	6801      	ldr	r1, [r0, #0]
 8002180:	4a16      	ldr	r2, [pc, #88]	; (80021dc <HAL_UART_MspInit+0x60>)
{
 8002182:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002184:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 8002186:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002188:	9304      	str	r3, [sp, #16]
 800218a:	9303      	str	r3, [sp, #12]
 800218c:	9305      	str	r3, [sp, #20]
 800218e:	9306      	str	r3, [sp, #24]
 8002190:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8002192:	d001      	beq.n	8002198 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002194:	b009      	add	sp, #36	; 0x24
 8002196:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8002198:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 800219c:	9301      	str	r3, [sp, #4]
 800219e:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a0:	480f      	ldr	r0, [pc, #60]	; (80021e0 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80021a2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80021a6:	6411      	str	r1, [r2, #64]	; 0x40
 80021a8:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80021aa:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
 80021ae:	9101      	str	r1, [sp, #4]
 80021b0:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b2:	9302      	str	r3, [sp, #8]
 80021b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	6313      	str	r3, [r2, #48]	; 0x30
 80021bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c4:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021c6:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80021ca:	240c      	movs	r4, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021cc:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80021ce:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021d2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d4:	f001 f906 	bl	80033e4 <HAL_GPIO_Init>
}
 80021d8:	b009      	add	sp, #36	; 0x24
 80021da:	bd30      	pop	{r4, r5, pc}
 80021dc:	40004400 	.word	0x40004400
 80021e0:	40020000 	.word	0x40020000

080021e4 <ADC_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 80021e4:	4b08      	ldr	r3, [pc, #32]	; (8002208 <ADC_IRQHandler+0x24>)
 80021e6:	681a      	ldr	r2, [r3, #0]
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 80021e8:	0752      	lsls	r2, r2, #29
 80021ea:	d406      	bmi.n	80021fa <ADC_IRQHandler+0x16>
  }
#ifdef ADC3
  else
  {
    // Clear Flags
    ADC3->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 80021ec:	4a07      	ldr	r2, [pc, #28]	; (800220c <ADC_IRQHandler+0x28>)
 80021ee:	6813      	ldr	r3, [r2, #0]
 80021f0:	f023 030c 	bic.w	r3, r3, #12
 80021f4:	6013      	str	r3, [r2, #0]

    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 80021f6:	f7ff b94d 	b.w	8001494 <TSK_HighFrequencyTask>
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	f022 020c 	bic.w	r2, r2, #12
 8002200:	601a      	str	r2, [r3, #0]
    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 8002202:	f7ff b947 	b.w	8001494 <TSK_HighFrequencyTask>
 8002206:	bf00      	nop
 8002208:	40012000 	.word	0x40012000
 800220c:	40012200 	.word	0x40012200

08002210 <TIM1_UP_TIM10_IRQHandler>:
void TIMx_UP_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */  
  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 8002210:	4804      	ldr	r0, [pc, #16]	; (8002224 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002212:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 8002216:	689b      	ldr	r3, [r3, #8]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002218:	f06f 0201 	mvn.w	r2, #1
 800221c:	611a      	str	r2, [r3, #16]
  R3F4XX_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 800221e:	f003 bc77 	b.w	8005b10 <R3F4XX_TIMx_UP_IRQHandler>
 8002222:	bf00      	nop
 8002224:	2000024c 	.word	0x2000024c

08002228 <TIM1_BRK_TIM9_IRQHandler>:
void TIMx_BRK_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */ 
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8002228:	4808      	ldr	r0, [pc, #32]	; (800224c <TIM1_BRK_TIM9_IRQHandler+0x24>)
{
 800222a:	b508      	push	{r3, lr}
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 800222c:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 8002230:	689b      	ldr	r3, [r3, #8]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	0612      	lsls	r2, r2, #24
 8002236:	d504      	bpl.n	8002242 <TIM1_BRK_TIM9_IRQHandler+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8002238:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800223c:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    R3F4XX_BRK_IRQHandler(&PWM_Handle_M1);
 800223e:	f003 fcaf 	bl	8005ba0 <R3F4XX_BRK_IRQHandler>
  MC_Scheduler();
  
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */ 
}
 8002242:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8002246:	f7fe bf29 	b.w	800109c <MC_Scheduler>
 800224a:	bf00      	nop
 800224c:	2000024c 	.word	0x2000024c

08002250 <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8002250:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */ 
  
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data received */
 8002252:	4c1a      	ldr	r4, [pc, #104]	; (80022bc <USART2_IRQHandler+0x6c>)
 8002254:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	0691      	lsls	r1, r2, #26
{
 800225c:	b082      	sub	sp, #8
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data received */
 800225e:	d418      	bmi.n	8002292 <USART2_IRQHandler+0x42>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002260:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE   */ 
  }
  
  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) // Overrun error occurs after SR access and before DR access
 8002262:	0712      	lsls	r2, r2, #28
 8002264:	d407      	bmi.n	8002276 <USART2_IRQHandler+0x26>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002266:	681b      	ldr	r3, [r3, #0]
    /* USER CODE BEGIN USART_ORE */

    /* USER CODE END USART_ORE   */
  }

  if(LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002268:	061b      	lsls	r3, r3, #24
 800226a:	d502      	bpl.n	8002272 <USART2_IRQHandler+0x22>
  {
    UFCP_TX_IRQ_Handler(&pUSART); /* Flag 1 = TX */
 800226c:	4813      	ldr	r0, [pc, #76]	; (80022bc <USART2_IRQHandler+0x6c>)
 800226e:	f004 f93b 	bl	80064e8 <UFCP_TX_IRQ_Handler>
  }

  /* USER CODE BEGIN USART_IRQn 1 */
  
  /* USER CODE END USART_IRQn 1 */
}
 8002272:	b002      	add	sp, #8
 8002274:	bd10      	pop	{r4, pc}
    UI_SerialCommunicationTimeOutStop();
 8002276:	f000 f8e5 	bl	8002444 <UI_SerialCommunicationTimeOutStop>
    UFCP_OVR_IRQ_Handler(&pUSART);
 800227a:	4810      	ldr	r0, [pc, #64]	; (80022bc <USART2_IRQHandler+0x6c>)
 800227c:	f004 f966 	bl	800654c <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx);
 8002280:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8002288:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 800228e:	9a01      	ldr	r2, [sp, #4]
 8002290:	e7e9      	b.n	8002266 <USART2_IRQHandler+0x16>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002292:	6859      	ldr	r1, [r3, #4]
    retVal = *(uint16_t*)UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)); /* Flag 0 = RX */
 8002294:	4620      	mov	r0, r4
 8002296:	b2c9      	uxtb	r1, r1
 8002298:	f004 f8ba 	bl	8006410 <UFCP_RX_IRQ_Handler>
 800229c:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d004      	beq.n	80022ac <USART2_IRQHandler+0x5c>
    if (retVal == 2)
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d007      	beq.n	80022b6 <USART2_IRQHandler+0x66>
 80022a6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80022aa:	e7d9      	b.n	8002260 <USART2_IRQHandler+0x10>
      UI_SerialCommunicationTimeOutStart();
 80022ac:	f000 f8d0 	bl	8002450 <UI_SerialCommunicationTimeOutStart>
 80022b0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80022b4:	e7d4      	b.n	8002260 <USART2_IRQHandler+0x10>
      UI_SerialCommunicationTimeOutStop();
 80022b6:	f000 f8c5 	bl	8002444 <UI_SerialCommunicationTimeOutStop>
 80022ba:	e7f4      	b.n	80022a6 <USART2_IRQHandler+0x56>
 80022bc:	20000558 	.word	0x20000558

080022c0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80022c0:	b530      	push	{r4, r5, lr}
 80022c2:	b083      	sub	sp, #12
 80022c4:	4c1c      	ldr	r4, [pc, #112]	; (8002338 <HardFault_Handler+0x78>)
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 80022c6:	f7ff f99b 	bl	8001600 <TSK_HardwareFaultTask>
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 80022ca:	4625      	mov	r5, r4
 80022cc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80022d0:	e005      	b.n	80022de <HardFault_Handler+0x1e>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80022d2:	681a      	ldr	r2, [r3, #0]
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
        UI_SerialCommunicationTimeOutStop();
      }
      
      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80022d4:	0611      	lsls	r1, r2, #24
 80022d6:	d417      	bmi.n	8002308 <HardFault_Handler+0x48>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80022d8:	681a      	ldr	r2, [r3, #0]
      {   
        UFCP_TX_IRQ_Handler(&pUSART);
      }  
      
      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80022da:	0692      	lsls	r2, r2, #26
 80022dc:	d41c      	bmi.n	8002318 <HardFault_Handler+0x58>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80022de:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80022e0:	0710      	lsls	r0, r2, #28
 80022e2:	d5f6      	bpl.n	80022d2 <HardFault_Handler+0x12>
        UFCP_OVR_IRQ_Handler(&pUSART);
 80022e4:	4628      	mov	r0, r5
 80022e6:	f004 f931 	bl	800654c <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 80022ea:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  tmpreg = USARTx->SR;
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 80022f2:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 80022f8:	9b01      	ldr	r3, [sp, #4]
        UI_SerialCommunicationTimeOutStop();
 80022fa:	f000 f8a3 	bl	8002444 <UI_SerialCommunicationTimeOutStop>
 80022fe:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002302:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002304:	0611      	lsls	r1, r2, #24
 8002306:	d5e7      	bpl.n	80022d8 <HardFault_Handler+0x18>
        UFCP_TX_IRQ_Handler(&pUSART);
 8002308:	4628      	mov	r0, r5
 800230a:	f004 f8ed 	bl	80064e8 <UFCP_TX_IRQ_Handler>
 800230e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002312:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002314:	0692      	lsls	r2, r2, #26
 8002316:	d5e2      	bpl.n	80022de <HardFault_Handler+0x1e>
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002318:	6859      	ldr	r1, [r3, #4]
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 800231a:	4628      	mov	r0, r5
 800231c:	b2c9      	uxtb	r1, r1
 800231e:	f004 f877 	bl	8006410 <UFCP_RX_IRQ_Handler>
 8002322:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 8002324:	2b01      	cmp	r3, #1
 8002326:	d004      	beq.n	8002332 <HardFault_Handler+0x72>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 8002328:	2b02      	cmp	r3, #2
 800232a:	d1cf      	bne.n	80022cc <HardFault_Handler+0xc>
        {
          UI_SerialCommunicationTimeOutStop();
 800232c:	f000 f88a 	bl	8002444 <UI_SerialCommunicationTimeOutStop>
 8002330:	e7cc      	b.n	80022cc <HardFault_Handler+0xc>
          UI_SerialCommunicationTimeOutStart();
 8002332:	f000 f88d 	bl	8002450 <UI_SerialCommunicationTimeOutStart>
 8002336:	e7c9      	b.n	80022cc <HardFault_Handler+0xc>
 8002338:	20000558 	.word	0x20000558

0800233c <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 800233c:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 800233e:	4c0a      	ldr	r4, [pc, #40]	; (8002368 <SysTick_Handler+0x2c>)
 8002340:	7823      	ldrb	r3, [r4, #0]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d006      	beq.n	8002354 <SysTick_Handler+0x18>
 8002346:	3301      	adds	r3, #1
 8002348:	b2db      	uxtb	r3, r3
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;  
 800234a:	7023      	strb	r3, [r4, #0]
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();
  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 800234c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8002350:	f7fe bc48 	b.w	8000be4 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8002354:	f000 fd78 	bl	8002e48 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8002358:	f001 f840 	bl	80033dc <HAL_SYSTICK_IRQHandler>
 800235c:	2301      	movs	r3, #1
  SystickDividerCounter ++;  
 800235e:	7023      	strb	r3, [r4, #0]
}
 8002360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8002364:	f7fe bc3e 	b.w	8000be4 <MC_RunMotorControlTasks>
 8002368:	20000698 	.word	0x20000698

0800236c <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 800236c:	4b02      	ldr	r3, [pc, #8]	; (8002378 <EXTI15_10_IRQHandler+0xc>)
 800236e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002372:	615a      	str	r2, [r3, #20]
  */
void EXTI15_10_IRQHandler (void)
{
/* USER CODE BEGIN START_STOP_BTN */
  LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_13);
  UI_HandleStartStopButton_cb ();
 8002374:	f000 b872 	b.w	800245c <UI_HandleStartStopButton_cb>
 8002378:	40013c00 	.word	0x40013c00

0800237c <UI_TaskInit>:
  (void*)(&UI_SetCurrentReferences)
};

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 800237c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    pMCP = &MCP_UI_Params;
    pMCP->_Super = UI_Params;
 8002380:	4d17      	ldr	r5, [pc, #92]	; (80023e0 <UI_TaskInit+0x64>)
    pMCP = &MCP_UI_Params;
 8002382:	f8df e078 	ldr.w	lr, [pc, #120]	; 80023fc <UI_TaskInit+0x80>

    UFCP_Init( & pUSART );
 8002386:	4e17      	ldr	r6, [pc, #92]	; (80023e4 <UI_TaskInit+0x68>)
{
 8002388:	4682      	mov	sl, r0
 800238a:	460f      	mov	r7, r1
 800238c:	4690      	mov	r8, r2
 800238e:	4699      	mov	r9, r3
    pMCP->_Super = UI_Params;
 8002390:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002392:	4674      	mov	r4, lr
 8002394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002396:	e895 0003 	ldmia.w	r5, {r0, r1}
{
 800239a:	b085      	sub	sp, #20
    pMCP = &MCP_UI_Params;
 800239c:	4d12      	ldr	r5, [pc, #72]	; (80023e8 <UI_TaskInit+0x6c>)
{
 800239e:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    pMCP = &MCP_UI_Params;
 80023a2:	f8c5 e000 	str.w	lr, [r5]
    pMCP->_Super = UI_Params;
 80023a6:	e884 0003 	stmia.w	r4, {r0, r1}
    UFCP_Init( & pUSART );
 80023aa:	4630      	mov	r0, r6
 80023ac:	f004 f82e 	bl	800640c <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, pDAC, s_fwVer);
 80023b0:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <UI_TaskInit+0x70>)
 80023b2:	4a0f      	ldr	r2, [pc, #60]	; (80023f0 <UI_TaskInit+0x74>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6828      	ldr	r0, [r5, #0]
 80023b8:	f8cd b008 	str.w	fp, [sp, #8]
 80023bc:	e88d 000c 	stmia.w	sp, {r2, r3}
 80023c0:	4631      	mov	r1, r6
 80023c2:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <UI_TaskInit+0x78>)
 80023c4:	4a0c      	ldr	r2, [pc, #48]	; (80023f8 <UI_TaskInit+0x7c>)
 80023c6:	f7ff fc51 	bl	8001c6c <MCP_Init>
    UI_Init(&pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg); /* Initialize UI and link MC components */
 80023ca:	6828      	ldr	r0, [r5, #0]
 80023cc:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80023d0:	464b      	mov	r3, r9
 80023d2:	4642      	mov	r2, r8
 80023d4:	4639      	mov	r1, r7

}
 80023d6:	b005      	add	sp, #20
 80023d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    UI_Init(&pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg); /* Initialize UI and link MC components */
 80023dc:	f000 b84a 	b.w	8002474 <UI_Init>
 80023e0:	200006c4 	.word	0x200006c4
 80023e4:	20000558 	.word	0x20000558
 80023e8:	200006f4 	.word	0x200006f4
 80023ec:	200006f0 	.word	0x200006f0
 80023f0:	080066c5 	.word	0x080066c5
 80023f4:	08006585 	.word	0x08006585
 80023f8:	080065a9 	.word	0x080065a9
 80023fc:	20000930 	.word	0x20000930

08002400 <UI_Scheduler>:

void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8002400:	4a0d      	ldr	r2, [pc, #52]	; (8002438 <UI_Scheduler+0x38>)
 8002402:	8813      	ldrh	r3, [r2, #0]
 8002404:	b29b      	uxth	r3, r3
 8002406:	b11b      	cbz	r3, 8002410 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 8002408:	8813      	ldrh	r3, [r2, #0]
 800240a:	3b01      	subs	r3, #1
 800240c:	b29b      	uxth	r3, r3
 800240e:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8002410:	4a0a      	ldr	r2, [pc, #40]	; (800243c <UI_Scheduler+0x3c>)
 8002412:	8813      	ldrh	r3, [r2, #0]
 8002414:	b29b      	uxth	r3, r3
 8002416:	2b01      	cmp	r3, #1
 8002418:	d903      	bls.n	8002422 <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 800241a:	8813      	ldrh	r3, [r2, #0]
 800241c:	3b01      	subs	r3, #1
 800241e:	b29b      	uxth	r3, r3
 8002420:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8002422:	4a07      	ldr	r2, [pc, #28]	; (8002440 <UI_Scheduler+0x40>)
 8002424:	8813      	ldrh	r3, [r2, #0]
 8002426:	b29b      	uxth	r3, r3
 8002428:	2b01      	cmp	r3, #1
 800242a:	d903      	bls.n	8002434 <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 800242c:	8813      	ldrh	r3, [r2, #0]
 800242e:	3b01      	subs	r3, #1
 8002430:	b29b      	uxth	r3, r3
 8002432:	8013      	strh	r3, [r2, #0]
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	200006ee 	.word	0x200006ee
 800243c:	200006ec 	.word	0x200006ec
 8002440:	2000069a 	.word	0x2000069a

08002444 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 8002444:	4b01      	ldr	r3, [pc, #4]	; (800244c <UI_SerialCommunicationTimeOutStop+0x8>)
 8002446:	2200      	movs	r2, #0
 8002448:	801a      	strh	r2, [r3, #0]
 800244a:	4770      	bx	lr
 800244c:	200006ec 	.word	0x200006ec

08002450 <UI_SerialCommunicationTimeOutStart>:
}

void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8002450:	4b01      	ldr	r3, [pc, #4]	; (8002458 <UI_SerialCommunicationTimeOutStart+0x8>)
 8002452:	224f      	movs	r2, #79	; 0x4f
 8002454:	801a      	strh	r2, [r3, #0]
 8002456:	4770      	bx	lr
 8002458:	200006ec 	.word	0x200006ec

0800245c <UI_HandleStartStopButton_cb>:
}

void UI_HandleStartStopButton_cb (void)
{
 800245c:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (MC_GetSTMStateMotor1() == IDLE)
 800245e:	f7fe fa9d 	bl	800099c <MC_GetSTMStateMotor1>
 8002462:	b118      	cbz	r0, 800246c <UI_HandleStartStopButton_cb+0x10>
  else
  {
    MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8002464:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StopMotor1();
 8002468:	f7fe ba92 	b.w	8000990 <MC_StopMotor1>
}
 800246c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StartMotor1();
 8002470:	f7fe ba88 	b.w	8000984 <MC_StartMotor1>

08002474 <UI_Init>:
  *         Each element of the list must be a bit field containing one (or more) of
  *         the exported configuration option UI_CFGOPT_xxx (eventually OR-ed).
  *  @retval none.
  */
void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
 8002474:	b430      	push	{r4, r5}
 8002476:	9c02      	ldr	r4, [sp, #8]

  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 8002478:	6104      	str	r4, [r0, #16]
  pHandle->bSelectedDrive = 0u;
 800247a:	2500      	movs	r5, #0
 800247c:	7505      	strb	r5, [r0, #20]
  pHandle->bDriveNum = bMCNum;
 800247e:	7101      	strb	r1, [r0, #4]
  pHandle->pMCI = pMCI;
 8002480:	6082      	str	r2, [r0, #8]
  pHandle->pMCT = pMCT;
 8002482:	60c3      	str	r3, [r0, #12]
}
 8002484:	bc30      	pop	{r4, r5}
 8002486:	4770      	bx	lr

08002488 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8002488:	b570      	push	{r4, r5, r6, lr}
 800248a:	4614      	mov	r4, r2
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 800248c:	7d03      	ldrb	r3, [r0, #20]
 800248e:	68c5      	ldr	r5, [r0, #12]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002490:	6882      	ldr	r2, [r0, #8]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002492:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002496:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
{
 800249a:	b082      	sub	sp, #8

  bool retVal = true;
  switch (bRegID)
 800249c:	295b      	cmp	r1, #91	; 0x5b
 800249e:	d86f      	bhi.n	8002580 <UI_SetReg+0xf8>
 80024a0:	e8df f011 	tbh	[pc, r1, lsl #1]
 80024a4:	006e0069 	.word	0x006e0069
 80024a8:	0070006e 	.word	0x0070006e
 80024ac:	007a006e 	.word	0x007a006e
 80024b0:	00860080 	.word	0x00860080
 80024b4:	0098008c 	.word	0x0098008c
 80024b8:	00a4009e 	.word	0x00a4009e
 80024bc:	00b600aa 	.word	0x00b600aa
 80024c0:	00c200bc 	.word	0x00c200bc
 80024c4:	00e200c8 	.word	0x00e200c8
 80024c8:	006e006e 	.word	0x006e006e
 80024cc:	011800fc 	.word	0x011800fc
 80024d0:	006e006e 	.word	0x006e006e
 80024d4:	006e006e 	.word	0x006e006e
 80024d8:	006e006e 	.word	0x006e006e
 80024dc:	006e006e 	.word	0x006e006e
 80024e0:	006e006e 	.word	0x006e006e
 80024e4:	006e006e 	.word	0x006e006e
 80024e8:	006e006e 	.word	0x006e006e
 80024ec:	006e006e 	.word	0x006e006e
 80024f0:	006e006e 	.word	0x006e006e
 80024f4:	006e006e 	.word	0x006e006e
 80024f8:	006e006e 	.word	0x006e006e
 80024fc:	006e006e 	.word	0x006e006e
 8002500:	006e006e 	.word	0x006e006e
 8002504:	006e006e 	.word	0x006e006e
 8002508:	006e006e 	.word	0x006e006e
 800250c:	006e006e 	.word	0x006e006e
 8002510:	006e006e 	.word	0x006e006e
 8002514:	006e006e 	.word	0x006e006e
 8002518:	006e006e 	.word	0x006e006e
 800251c:	006e006e 	.word	0x006e006e
 8002520:	006e006e 	.word	0x006e006e
 8002524:	0134006e 	.word	0x0134006e
 8002528:	006e006e 	.word	0x006e006e
 800252c:	006e006e 	.word	0x006e006e
 8002530:	006e006e 	.word	0x006e006e
 8002534:	006e006e 	.word	0x006e006e
 8002538:	006e006e 	.word	0x006e006e
 800253c:	006e006e 	.word	0x006e006e
 8002540:	006e006e 	.word	0x006e006e
 8002544:	006e006e 	.word	0x006e006e
 8002548:	006e006e 	.word	0x006e006e
 800254c:	006e006e 	.word	0x006e006e
 8002550:	006e006e 	.word	0x006e006e
 8002554:	006e006e 	.word	0x006e006e
 8002558:	005c006e 	.word	0x005c006e
      MCI_SetIdref(pMCI,(int16_t)wValue);
    }
    break;
  case MC_PROTOCOL_REG_RAMP_FINAL_SPEED:
    {
      MCI_ExecSpeedRamp(pMCI,(int16_t)(wValue/6),0);
 800255c:	4982      	ldr	r1, [pc, #520]	; (8002768 <UI_SetReg+0x2e0>)
 800255e:	fb81 3104 	smull	r3, r1, r1, r4
 8002562:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8002566:	4630      	mov	r0, r6
 8002568:	b209      	sxth	r1, r1
 800256a:	2200      	movs	r2, #0
 800256c:	f002 f8b0 	bl	80046d0 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002570:	2001      	movs	r0, #1
    retVal = false;
    break;
  }

  return retVal;
}
 8002572:	b002      	add	sp, #8
 8002574:	bd70      	pop	{r4, r5, r6, pc}
  if (bSelectMC  >= pHandle->bDriveNum)
 8002576:	7903      	ldrb	r3, [r0, #4]
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8002578:	b2e4      	uxtb	r4, r4
  if (bSelectMC  >= pHandle->bDriveNum)
 800257a:	42a3      	cmp	r3, r4
 800257c:	f200 80cc 	bhi.w	8002718 <UI_SetReg+0x290>
    retVal = false;
 8002580:	2000      	movs	r0, #0
 8002582:	e7f6      	b.n	8002572 <UI_SetReg+0xea>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8002584:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8002588:	f000 80c9 	beq.w	800271e <UI_SetReg+0x296>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 800258c:	2c01      	cmp	r4, #1
 800258e:	f000 80e0 	beq.w	8002752 <UI_SetReg+0x2ca>
  bool retVal = true;
 8002592:	2001      	movs	r0, #1
}
 8002594:	b002      	add	sp, #8
 8002596:	bd70      	pop	{r4, r5, r6, pc}
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8002598:	6828      	ldr	r0, [r5, #0]
 800259a:	b221      	sxth	r1, r4
 800259c:	f002 fb58 	bl	8004c50 <PID_SetKP>
  bool retVal = true;
 80025a0:	2001      	movs	r0, #1
    break;
 80025a2:	e7e6      	b.n	8002572 <UI_SetReg+0xea>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 80025a4:	6828      	ldr	r0, [r5, #0]
 80025a6:	b221      	sxth	r1, r4
 80025a8:	f002 fb54 	bl	8004c54 <PID_SetKI>
  bool retVal = true;
 80025ac:	2001      	movs	r0, #1
    break;
 80025ae:	e7e0      	b.n	8002572 <UI_SetReg+0xea>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 80025b0:	6828      	ldr	r0, [r5, #0]
 80025b2:	b221      	sxth	r1, r4
 80025b4:	f002 fb5e 	bl	8004c74 <PID_SetKD>
  bool retVal = true;
 80025b8:	2001      	movs	r0, #1
    break;
 80025ba:	e7da      	b.n	8002572 <UI_SetReg+0xea>
      currComp = MCI_GetIqdref(pMCI);
 80025bc:	4630      	mov	r0, r6
 80025be:	f002 f953 	bl	8004868 <MCI_GetIqdref>
 80025c2:	9001      	str	r0, [sp, #4]
      currComp.qI_Component1 = (int16_t)wValue;
 80025c4:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 80025c8:	4630      	mov	r0, r6
 80025ca:	9901      	ldr	r1, [sp, #4]
 80025cc:	f002 f894 	bl	80046f8 <MCI_SetCurrentReferences>
  bool retVal = true;
 80025d0:	2001      	movs	r0, #1
    break;
 80025d2:	e7ce      	b.n	8002572 <UI_SetReg+0xea>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 80025d4:	6868      	ldr	r0, [r5, #4]
 80025d6:	b221      	sxth	r1, r4
 80025d8:	f002 fb3a 	bl	8004c50 <PID_SetKP>
  bool retVal = true;
 80025dc:	2001      	movs	r0, #1
    break;
 80025de:	e7c8      	b.n	8002572 <UI_SetReg+0xea>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 80025e0:	6868      	ldr	r0, [r5, #4]
 80025e2:	b221      	sxth	r1, r4
 80025e4:	f002 fb36 	bl	8004c54 <PID_SetKI>
  bool retVal = true;
 80025e8:	2001      	movs	r0, #1
    break;
 80025ea:	e7c2      	b.n	8002572 <UI_SetReg+0xea>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 80025ec:	6868      	ldr	r0, [r5, #4]
 80025ee:	b221      	sxth	r1, r4
 80025f0:	f002 fb40 	bl	8004c74 <PID_SetKD>
  bool retVal = true;
 80025f4:	2001      	movs	r0, #1
    break;
 80025f6:	e7bc      	b.n	8002572 <UI_SetReg+0xea>
      currComp = MCI_GetIqdref(pMCI);
 80025f8:	4630      	mov	r0, r6
 80025fa:	f002 f935 	bl	8004868 <MCI_GetIqdref>
 80025fe:	9001      	str	r0, [sp, #4]
      currComp.qI_Component2 = (int16_t)wValue;
 8002600:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002604:	4630      	mov	r0, r6
 8002606:	9901      	ldr	r1, [sp, #4]
 8002608:	f002 f876 	bl	80046f8 <MCI_SetCurrentReferences>
  bool retVal = true;
 800260c:	2001      	movs	r0, #1
    break;
 800260e:	e7b0      	b.n	8002572 <UI_SetReg+0xea>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8002610:	68a8      	ldr	r0, [r5, #8]
 8002612:	b221      	sxth	r1, r4
 8002614:	f002 fb1c 	bl	8004c50 <PID_SetKP>
  bool retVal = true;
 8002618:	2001      	movs	r0, #1
    break;
 800261a:	e7aa      	b.n	8002572 <UI_SetReg+0xea>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 800261c:	68a8      	ldr	r0, [r5, #8]
 800261e:	b221      	sxth	r1, r4
 8002620:	f002 fb18 	bl	8004c54 <PID_SetKI>
  bool retVal = true;
 8002624:	2001      	movs	r0, #1
    break;
 8002626:	e7a4      	b.n	8002572 <UI_SetReg+0xea>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 8002628:	68a8      	ldr	r0, [r5, #8]
 800262a:	b221      	sxth	r1, r4
 800262c:	f002 fb22 	bl	8004c74 <PID_SetKD>
  bool retVal = true;
 8002630:	2001      	movs	r0, #1
    break;
 8002632:	e79e      	b.n	8002572 <UI_SetReg+0xea>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002634:	6902      	ldr	r2, [r0, #16]
 8002636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800263a:	0f1a      	lsrs	r2, r3, #28
 800263c:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800263e:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002642:	d07e      	beq.n	8002742 <UI_SetReg+0x2ba>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002644:	2b09      	cmp	r3, #9
 8002646:	d1a4      	bne.n	8002592 <UI_SetReg+0x10a>
        pSPD = pMCT->pSpeedSensorAux;
 8002648:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 800264a:	2e00      	cmp	r6, #0
 800264c:	d0a1      	beq.n	8002592 <UI_SetReg+0x10a>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 800264e:	aa01      	add	r2, sp, #4
 8002650:	f10d 0102 	add.w	r1, sp, #2
 8002654:	4630      	mov	r0, r6
 8002656:	f004 fc13 	bl	8006e80 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hC2);
 800265a:	b221      	sxth	r1, r4
 800265c:	4630      	mov	r0, r6
 800265e:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002662:	f004 fc15 	bl	8006e90 <STO_PLL_SetObserverGains>
 8002666:	e794      	b.n	8002592 <UI_SetReg+0x10a>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002668:	6902      	ldr	r2, [r0, #16]
 800266a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800266e:	0f1a      	lsrs	r2, r3, #28
 8002670:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002672:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002676:	d05c      	beq.n	8002732 <UI_SetReg+0x2aa>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002678:	2b09      	cmp	r3, #9
 800267a:	d18a      	bne.n	8002592 <UI_SetReg+0x10a>
        pSPD = pMCT->pSpeedSensorAux;
 800267c:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 800267e:	2e00      	cmp	r6, #0
 8002680:	d087      	beq.n	8002592 <UI_SetReg+0x10a>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002682:	aa01      	add	r2, sp, #4
 8002684:	f10d 0102 	add.w	r1, sp, #2
 8002688:	4630      	mov	r0, r6
 800268a:	f004 fbf9 	bl	8006e80 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,hC1,(int16_t)wValue);
 800268e:	b222      	sxth	r2, r4
 8002690:	4630      	mov	r0, r6
 8002692:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002696:	f004 fbfb 	bl	8006e90 <STO_PLL_SetObserverGains>
 800269a:	e77a      	b.n	8002592 <UI_SetReg+0x10a>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800269c:	6902      	ldr	r2, [r0, #16]
 800269e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026a2:	0f1a      	lsrs	r2, r3, #28
 80026a4:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026a6:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026aa:	d04e      	beq.n	800274a <UI_SetReg+0x2c2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026ac:	2b09      	cmp	r3, #9
 80026ae:	f47f af70 	bne.w	8002592 <UI_SetReg+0x10a>
        pSPD = pMCT->pSpeedSensorAux;
 80026b2:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 80026b4:	2e00      	cmp	r6, #0
 80026b6:	f43f af6c 	beq.w	8002592 <UI_SetReg+0x10a>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 80026ba:	aa01      	add	r2, sp, #4
 80026bc:	f10d 0102 	add.w	r1, sp, #2
 80026c0:	4630      	mov	r0, r6
 80026c2:	f004 fbe9 	bl	8006e98 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,hPgain,(int16_t)wValue);
 80026c6:	b222      	sxth	r2, r4
 80026c8:	4630      	mov	r0, r6
 80026ca:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 80026ce:	f004 fbf1 	bl	8006eb4 <STO_SetPLLGains>
 80026d2:	e75e      	b.n	8002592 <UI_SetReg+0x10a>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80026d4:	6902      	ldr	r2, [r0, #16]
 80026d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026da:	0f1a      	lsrs	r2, r3, #28
 80026dc:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026de:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026e2:	d02a      	beq.n	800273a <UI_SetReg+0x2b2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026e4:	2b09      	cmp	r3, #9
 80026e6:	f47f af54 	bne.w	8002592 <UI_SetReg+0x10a>
        pSPD = pMCT->pSpeedSensorAux;
 80026ea:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 80026ec:	2e00      	cmp	r6, #0
 80026ee:	f43f af50 	beq.w	8002592 <UI_SetReg+0x10a>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 80026f2:	aa01      	add	r2, sp, #4
 80026f4:	f10d 0102 	add.w	r1, sp, #2
 80026f8:	4630      	mov	r0, r6
 80026fa:	f004 fbcd 	bl	8006e98 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hIgain);
 80026fe:	b221      	sxth	r1, r4
 8002700:	4630      	mov	r0, r6
 8002702:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002706:	f004 fbd5 	bl	8006eb4 <STO_SetPLLGains>
 800270a:	e742      	b.n	8002592 <UI_SetReg+0x10a>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 800270c:	4630      	mov	r0, r6
 800270e:	b221      	sxth	r1, r4
 8002710:	f002 f8ca 	bl	80048a8 <MCI_SetIdref>
  bool retVal = true;
 8002714:	2001      	movs	r0, #1
    break;
 8002716:	e72c      	b.n	8002572 <UI_SetReg+0xea>
    pHandle->bSelectedDrive = bSelectMC;
 8002718:	7504      	strb	r4, [r0, #20]
  bool retVal = true;
 800271a:	2001      	movs	r0, #1
 800271c:	e729      	b.n	8002572 <UI_SetReg+0xea>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 800271e:	4630      	mov	r0, r6
 8002720:	f002 f8be 	bl	80048a0 <MCI_GetTeref>
 8002724:	4622      	mov	r2, r4
 8002726:	4601      	mov	r1, r0
 8002728:	4630      	mov	r0, r6
 800272a:	f001 ffd9 	bl	80046e0 <MCI_ExecTorqueRamp>
  bool retVal = true;
 800272e:	2001      	movs	r0, #1
 8002730:	e71f      	b.n	8002572 <UI_SetReg+0xea>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002732:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002734:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002736:	d1a2      	bne.n	800267e <UI_SetReg+0x1f6>
 8002738:	e7a0      	b.n	800267c <UI_SetReg+0x1f4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800273a:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 800273c:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800273e:	d1d5      	bne.n	80026ec <UI_SetReg+0x264>
 8002740:	e7d3      	b.n	80026ea <UI_SetReg+0x262>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002742:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002744:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002746:	d180      	bne.n	800264a <UI_SetReg+0x1c2>
 8002748:	e77e      	b.n	8002648 <UI_SetReg+0x1c0>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800274a:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 800274c:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800274e:	d1b1      	bne.n	80026b4 <UI_SetReg+0x22c>
 8002750:	e7af      	b.n	80026b2 <UI_SetReg+0x22a>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRef01Hz(pMCI),0);
 8002752:	4630      	mov	r0, r6
 8002754:	f002 f86c 	bl	8004830 <MCI_GetMecSpeedRef01Hz>
 8002758:	2200      	movs	r2, #0
 800275a:	4601      	mov	r1, r0
 800275c:	4630      	mov	r0, r6
 800275e:	f001 ffb7 	bl	80046d0 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002762:	4620      	mov	r0, r4
 8002764:	e705      	b.n	8002572 <UI_SetReg+0xea>
 8002766:	bf00      	nop
 8002768:	2aaaaaab 	.word	0x2aaaaaab

0800276c <UI_GetReg>:
  * @param  bRegID: Code of register to read. 
  *         See MC_PROTOCOL_REG_xxx values for code definition.
  *  @retval Register value read.
  */
int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID)
{
 800276c:	b530      	push	{r4, r5, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 800276e:	7d03      	ldrb	r3, [r0, #20]
 8002770:	68c5      	ldr	r5, [r0, #12]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002772:	6884      	ldr	r4, [r0, #8]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002774:	b21a      	sxth	r2, r3
{
 8002776:	b091      	sub	sp, #68	; 0x44
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002778:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800277c:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]

  int32_t bRetVal = (int32_t)GUI_ERROR_CODE;
  switch (bRegID)
 8002780:	2981      	cmp	r1, #129	; 0x81
 8002782:	f200 8221 	bhi.w	8002bc8 <UI_GetReg+0x45c>
 8002786:	e8df f011 	tbh	[pc, r1, lsl #1]
 800278a:	00cb      	.short	0x00cb
 800278c:	00c300c7 	.word	0x00c300c7
 8002790:	00b800bf 	.word	0x00b800bf
 8002794:	00b000b4 	.word	0x00b000b4
 8002798:	008800ac 	.word	0x008800ac
 800279c:	00a200a6 	.word	0x00a200a6
 80027a0:	0082009e 	.word	0x0082009e
 80027a4:	00e000e4 	.word	0x00e000e4
 80027a8:	01c900dc 	.word	0x01c900dc
 80027ac:	021f01fb 	.word	0x021f01fb
 80027b0:	01ea021f 	.word	0x01ea021f
 80027b4:	021f01a9 	.word	0x021f01a9
 80027b8:	021f021f 	.word	0x021f021f
 80027bc:	00d801a5 	.word	0x00d801a5
 80027c0:	021f00d4 	.word	0x021f00d4
 80027c4:	00cd021f 	.word	0x00cd021f
 80027c8:	01e501ba 	.word	0x01e501ba
 80027cc:	01e1021f 	.word	0x01e1021f
 80027d0:	009701dc 	.word	0x009701dc
 80027d4:	008d0092 	.word	0x008d0092
 80027d8:	01e501ba 	.word	0x01e501ba
 80027dc:	00820088 	.word	0x00820088
 80027e0:	01bf01c4 	.word	0x01bf01c4
 80027e4:	01220212 	.word	0x01220212
 80027e8:	021f021f 	.word	0x021f021f
 80027ec:	00fc010f 	.word	0x00fc010f
 80027f0:	019200e8 	.word	0x019200e8
 80027f4:	014f017e 	.word	0x014f017e
 80027f8:	021f021f 	.word	0x021f021f
 80027fc:	021f021f 	.word	0x021f021f
 8002800:	021f021f 	.word	0x021f021f
 8002804:	021f021f 	.word	0x021f021f
 8002808:	01770148 	.word	0x01770148
 800280c:	01630082 	.word	0x01630082
 8002810:	021f0134 	.word	0x021f0134
 8002814:	021f021f 	.word	0x021f021f
 8002818:	021f021f 	.word	0x021f021f
 800281c:	021f021f 	.word	0x021f021f
 8002820:	021f021f 	.word	0x021f021f
 8002824:	021f021f 	.word	0x021f021f
 8002828:	021f021f 	.word	0x021f021f
 800282c:	021f021f 	.word	0x021f021f
 8002830:	021f021f 	.word	0x021f021f
 8002834:	021f021f 	.word	0x021f021f
 8002838:	021f021f 	.word	0x021f021f
 800283c:	021f021f 	.word	0x021f021f
 8002840:	021f0127 	.word	0x021f0127
 8002844:	021f021f 	.word	0x021f021f
 8002848:	021f021f 	.word	0x021f021f
 800284c:	021f021f 	.word	0x021f021f
 8002850:	021f021f 	.word	0x021f021f
 8002854:	021f021f 	.word	0x021f021f
 8002858:	021f021f 	.word	0x021f021f
 800285c:	021f021f 	.word	0x021f021f
 8002860:	021f021f 	.word	0x021f021f
 8002864:	021b021f 	.word	0x021b021f
 8002868:	02100217 	.word	0x02100217
 800286c:	020e021f 	.word	0x020e021f
 8002870:	021f009c 	.word	0x021f009c
 8002874:	021f021f 	.word	0x021f021f
 8002878:	021f021f 	.word	0x021f021f
 800287c:	021f021f 	.word	0x021f021f
 8002880:	021f021f 	.word	0x021f021f
 8002884:	021f021f 	.word	0x021f021f
 8002888:	021f021f 	.word	0x021f021f
 800288c:	00aa      	.short	0x00aa
        bRetVal = MCI_GetIqdref(pMCI).qI_Component1;
      }
      break;
    case MC_PROTOCOL_REG_I_D_REF:
      {
        bRetVal = MCI_GetIqdref(pMCI).qI_Component2;
 800288e:	4620      	mov	r0, r4
 8002890:	f001 ffea 	bl	8004868 <MCI_GetIqdref>
 8002894:	1400      	asrs	r0, r0, #16

  default:
    break;
  }
  return bRetVal;
}
 8002896:	b011      	add	sp, #68	; 0x44
 8002898:	bd30      	pop	{r4, r5, pc}
        bRetVal = MCI_GetIqdref(pMCI).qI_Component1;
 800289a:	4620      	mov	r0, r4
 800289c:	f001 ffe4 	bl	8004868 <MCI_GetIqdref>
 80028a0:	b200      	sxth	r0, r0
      break;
 80028a2:	e7f8      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = MCI_GetIalphabeta(pMCI).qI_Component2;
 80028a4:	4620      	mov	r0, r4
 80028a6:	f001 ffcf 	bl	8004848 <MCI_GetIalphabeta>
 80028aa:	1400      	asrs	r0, r0, #16
      break;
 80028ac:	e7f3      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = MCI_GetIalphabeta(pMCI).qI_Component1;
 80028ae:	4620      	mov	r0, r4
 80028b0:	f001 ffca 	bl	8004848 <MCI_GetIalphabeta>
 80028b4:	b200      	sxth	r0, r0
      break;
 80028b6:	e7ee      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = MCI_GetIab(pMCI).qI_Component2;
 80028b8:	4620      	mov	r0, r4
 80028ba:	f001 ffbd 	bl	8004838 <MCI_GetIab>
 80028be:	1400      	asrs	r0, r0, #16
      break;
 80028c0:	e7e9      	b.n	8002896 <UI_GetReg+0x12a>
      bRetVal = PWBDID;
 80028c2:	2002      	movs	r0, #2
    break;
 80028c4:	e7e7      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 80028c6:	6868      	ldr	r0, [r5, #4]
 80028c8:	f002 f9d6 	bl	8004c78 <PID_GetKD>
      break;
 80028cc:	e7e3      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 80028ce:	6868      	ldr	r0, [r5, #4]
 80028d0:	f002 f9c6 	bl	8004c60 <PID_GetKI>
      break;
 80028d4:	e7df      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 80028d6:	6868      	ldr	r0, [r5, #4]
 80028d8:	f002 f9be 	bl	8004c58 <PID_GetKP>
      break;
 80028dc:	e7db      	b.n	8002896 <UI_GetReg+0x12a>
      bRetVal = 0;
 80028de:	2000      	movs	r0, #0
    break;
 80028e0:	e7d9      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 80028e2:	6828      	ldr	r0, [r5, #0]
 80028e4:	f002 f9c8 	bl	8004c78 <PID_GetKD>
      break;
 80028e8:	e7d5      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 80028ea:	6828      	ldr	r0, [r5, #0]
 80028ec:	f002 f9b8 	bl	8004c60 <PID_GetKI>
      break;
 80028f0:	e7d1      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 80028f2:	6828      	ldr	r0, [r5, #0]
 80028f4:	f002 f9b0 	bl	8004c58 <PID_GetKP>
      break;
 80028f8:	e7cd      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = (int32_t)(MCI_GetMecSpeedRef01Hz(pMCI) * 6);
 80028fa:	4620      	mov	r0, r4
 80028fc:	f001 ff98 	bl	8004830 <MCI_GetMecSpeedRef01Hz>
 8002900:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002904:	0040      	lsls	r0, r0, #1
      break;
 8002906:	e7c6      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8002908:	4620      	mov	r0, r4
 800290a:	f001 ff59 	bl	80047c0 <MCI_GetControlMode>
      break;
 800290e:	e7c2      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8002910:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8002912:	f003 fd67 	bl	80063e4 <STM_GetState>
      break;
 8002916:	e7be      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8002918:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800291a:	f003 fd71 	bl	8006400 <STM_GetFaultState>
      break;
 800291e:	e7ba      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 8002920:	4618      	mov	r0, r3
      break;
 8002922:	e7b8      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = (int32_t)(MCI_GetAvrgMecSpeed01Hz(pMCI) * 6);
 8002924:	4620      	mov	r0, r4
 8002926:	f001 ff7b 	bl	8004820 <MCI_GetAvrgMecSpeed01Hz>
 800292a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800292e:	0040      	lsls	r0, r0, #1
      break;
 8002930:	e7b1      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 8002932:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8002934:	f002 f930 	bl	8004b98 <MPM_GetAvrgElMotorPowerW>
      break;
 8002938:	e7ad      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 800293a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800293c:	f002 f96a 	bl	8004c14 <NTC_GetAvTemp_C>
      break;
 8002940:	e7a9      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 8002942:	68a8      	ldr	r0, [r5, #8]
 8002944:	f002 f998 	bl	8004c78 <PID_GetKD>
      break;
 8002948:	e7a5      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 800294a:	68a8      	ldr	r0, [r5, #8]
 800294c:	f002 f988 	bl	8004c60 <PID_GetKI>
      break;
 8002950:	e7a1      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 8002952:	68a8      	ldr	r0, [r5, #8]
 8002954:	f002 f980 	bl	8004c58 <PID_GetKP>
      break;
 8002958:	e79d      	b.n	8002896 <UI_GetReg+0x12a>
        uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800295a:	6903      	ldr	r3, [r0, #16]
 800295c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002960:	0f1a      	lsrs	r2, r3, #28
 8002962:	2a09      	cmp	r2, #9
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002964:	f3c3 6303 	ubfx	r3, r3, #24, #4
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002968:	f000 813a 	beq.w	8002be0 <UI_GetReg+0x474>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800296c:	2b09      	cmp	r3, #9
 800296e:	f040 812b 	bne.w	8002bc8 <UI_GetReg+0x45c>
          pSPD = pMCT->pSpeedSensorAux;
 8002972:	69e8      	ldr	r0, [r5, #28]
        if (pSPD != MC_NULL)
 8002974:	2800      	cmp	r0, #0
 8002976:	f000 8127 	beq.w	8002bc8 <UI_GetReg+0x45c>
          bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).qI_Component1;
 800297a:	f004 fa6d 	bl	8006e58 <STO_PLL_GetEstimatedCurrent>
 800297e:	b200      	sxth	r0, r0
 8002980:	e789      	b.n	8002896 <UI_GetReg+0x12a>
        uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002982:	6903      	ldr	r3, [r0, #16]
 8002984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002988:	0f1a      	lsrs	r2, r3, #28
 800298a:	2a09      	cmp	r2, #9
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800298c:	f3c3 6303 	ubfx	r3, r3, #24, #4
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002990:	f000 8133 	beq.w	8002bfa <UI_GetReg+0x48e>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002994:	2b09      	cmp	r3, #9
 8002996:	f040 8117 	bne.w	8002bc8 <UI_GetReg+0x45c>
          pSPD = pMCT->pSpeedSensorAux;
 800299a:	69e8      	ldr	r0, [r5, #28]
        if (pSPD != MC_NULL)
 800299c:	2800      	cmp	r0, #0
 800299e:	f000 8113 	beq.w	8002bc8 <UI_GetReg+0x45c>
          bRetVal = SPD_GetS16Speed(pSPD);
 80029a2:	f003 fb9f 	bl	80060e4 <SPD_GetS16Speed>
 80029a6:	e776      	b.n	8002896 <UI_GetReg+0x12a>
        uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80029a8:	6903      	ldr	r3, [r0, #16]
 80029aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029ae:	0f1a      	lsrs	r2, r3, #28
 80029b0:	2a09      	cmp	r2, #9
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029b2:	f3c3 6303 	ubfx	r3, r3, #24, #4
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029b6:	f000 810e 	beq.w	8002bd6 <UI_GetReg+0x46a>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029ba:	2b09      	cmp	r3, #9
 80029bc:	f040 8104 	bne.w	8002bc8 <UI_GetReg+0x45c>
          pSPD = pMCT->pSpeedSensorAux;
 80029c0:	69e8      	ldr	r0, [r5, #28]
        if (pSPD != MC_NULL)
 80029c2:	2800      	cmp	r0, #0
 80029c4:	f000 8100 	beq.w	8002bc8 <UI_GetReg+0x45c>
          bRetVal = SPD_GetElAngle(pSPD);
 80029c8:	f003 fb58 	bl	800607c <SPD_GetElAngle>
 80029cc:	e763      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = MCI_GetValphabeta(pMCI).qV_Component2;
 80029ce:	4620      	mov	r0, r4
 80029d0:	f001 ff5c 	bl	800488c <MCI_GetValphabeta>
 80029d4:	1400      	asrs	r0, r0, #16
      break;
 80029d6:	e75e      	b.n	8002896 <UI_GetReg+0x12a>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 80029d8:	4620      	mov	r0, r4
 80029da:	f001 fef1 	bl	80047c0 <MCI_GetControlMode>
 80029de:	2801      	cmp	r0, #1
        bRetVal = (int32_t)(MCI_GetLastRampFinalSpeed(pMCI) * 6);
 80029e0:	4620      	mov	r0, r4
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 80029e2:	f000 8113 	beq.w	8002c0c <UI_GetReg+0x4a0>
        bRetVal = (int32_t)(MCI_GetMecSpeedRef01Hz(pMCI) * 6);
 80029e6:	f001 ff23 	bl	8004830 <MCI_GetMecSpeedRef01Hz>
 80029ea:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80029ee:	0040      	lsls	r0, r0, #1
 80029f0:	e751      	b.n	8002896 <UI_GetReg+0x12a>
        uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80029f2:	6903      	ldr	r3, [r0, #16]
 80029f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029f8:	0f1a      	lsrs	r2, r3, #28
 80029fa:	2a09      	cmp	r2, #9
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029fc:	f3c3 6303 	ubfx	r3, r3, #24, #4
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a00:	f000 8119 	beq.w	8002c36 <UI_GetReg+0x4ca>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a04:	2b09      	cmp	r3, #9
 8002a06:	f040 80df 	bne.w	8002bc8 <UI_GetReg+0x45c>
          pSPD = pMCT->pSpeedSensorAux;
 8002a0a:	69e8      	ldr	r0, [r5, #28]
        if (pSPD != MC_NULL)
 8002a0c:	2800      	cmp	r0, #0
 8002a0e:	f000 80db 	beq.w	8002bc8 <UI_GetReg+0x45c>
          bRetVal = STO_PLL_GetObservedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8002a12:	f004 fa6b 	bl	8006eec <STO_PLL_GetObservedBemfLevel>
 8002a16:	1400      	asrs	r0, r0, #16
 8002a18:	e73d      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = STC_GetMaxAppPositiveMecSpeed01Hz(pMCT->pSpeednTorqueCtrl) * 6;
 8002a1a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002a1c:	f003 fc1a 	bl	8006254 <STC_GetMaxAppPositiveMecSpeed01Hz>
 8002a20:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002a24:	0040      	lsls	r0, r0, #1
      break;
 8002a26:	e736      	b.n	8002896 <UI_GetReg+0x12a>
        uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002a28:	6903      	ldr	r3, [r0, #16]
 8002a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a2e:	0f1a      	lsrs	r2, r3, #28
 8002a30:	2a09      	cmp	r2, #9
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a32:	f3c3 6303 	ubfx	r3, r3, #24, #4
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a36:	f000 80ef 	beq.w	8002c18 <UI_GetReg+0x4ac>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a3a:	2b09      	cmp	r3, #9
 8002a3c:	f040 80c4 	bne.w	8002bc8 <UI_GetReg+0x45c>
          pSPD = pMCT->pSpeedSensorAux;
 8002a40:	69e8      	ldr	r0, [r5, #28]
        if (pSPD != MC_NULL)
 8002a42:	2800      	cmp	r0, #0
 8002a44:	f000 80c0 	beq.w	8002bc8 <UI_GetReg+0x45c>
          bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).qV_Component2;
 8002a48:	f004 f9fa 	bl	8006e40 <STO_PLL_GetEstimatedBemf>
 8002a4c:	1400      	asrs	r0, r0, #16
 8002a4e:	e722      	b.n	8002896 <UI_GetReg+0x12a>
        uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002a50:	6903      	ldr	r3, [r0, #16]
 8002a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a56:	0f1a      	lsrs	r2, r3, #28
 8002a58:	2a09      	cmp	r2, #9
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a5a:	f3c3 6303 	ubfx	r3, r3, #24, #4
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a5e:	f000 80ef 	beq.w	8002c40 <UI_GetReg+0x4d4>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a62:	2b09      	cmp	r3, #9
 8002a64:	f040 80b0 	bne.w	8002bc8 <UI_GetReg+0x45c>
          pSPD = pMCT->pSpeedSensorAux;
 8002a68:	69e8      	ldr	r0, [r5, #28]
        if (pSPD != MC_NULL)
 8002a6a:	2800      	cmp	r0, #0
 8002a6c:	f000 80ac 	beq.w	8002bc8 <UI_GetReg+0x45c>
          bRetVal = STO_PLL_GetEstimatedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8002a70:	f004 fa38 	bl	8006ee4 <STO_PLL_GetEstimatedBemfLevel>
 8002a74:	1400      	asrs	r0, r0, #16
 8002a76:	e70e      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = STC_GetMinAppNegativeMecSpeed01Hz(pMCT->pSpeednTorqueCtrl) * 6;
 8002a78:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002a7a:	f003 fbed 	bl	8006258 <STC_GetMinAppNegativeMecSpeed01Hz>
 8002a7e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002a82:	0040      	lsls	r0, r0, #1
      break;
 8002a84:	e707      	b.n	8002896 <UI_GetReg+0x12a>
        uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002a86:	6903      	ldr	r3, [r0, #16]
 8002a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a8c:	0f1a      	lsrs	r2, r3, #28
 8002a8e:	2a09      	cmp	r2, #9
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a90:	f3c3 6303 	ubfx	r3, r3, #24, #4
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a94:	f000 80ca 	beq.w	8002c2c <UI_GetReg+0x4c0>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a98:	2b09      	cmp	r3, #9
 8002a9a:	f040 8095 	bne.w	8002bc8 <UI_GetReg+0x45c>
          pSPD =  pMCT->pSpeedSensorAux;
 8002a9e:	69e8      	ldr	r0, [r5, #28]
        if (pSPD != MC_NULL)
 8002aa0:	2800      	cmp	r0, #0
 8002aa2:	f000 8091 	beq.w	8002bc8 <UI_GetReg+0x45c>
          bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).qV_Component1;
 8002aa6:	f004 f9cb 	bl	8006e40 <STO_PLL_GetEstimatedBemf>
 8002aaa:	b200      	sxth	r0, r0
 8002aac:	e6f3      	b.n	8002896 <UI_GetReg+0x12a>
        uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002aae:	6903      	ldr	r3, [r0, #16]
 8002ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ab4:	0f1a      	lsrs	r2, r3, #28
 8002ab6:	2a09      	cmp	r2, #9
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ab8:	f3c3 6303 	ubfx	r3, r3, #24, #4
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002abc:	f000 80b1 	beq.w	8002c22 <UI_GetReg+0x4b6>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ac0:	2b09      	cmp	r3, #9
 8002ac2:	f040 8081 	bne.w	8002bc8 <UI_GetReg+0x45c>
          pSPD = pMCT->pSpeedSensorAux;
 8002ac6:	69e8      	ldr	r0, [r5, #28]
        if (pSPD != MC_NULL)
 8002ac8:	2800      	cmp	r0, #0
 8002aca:	d07d      	beq.n	8002bc8 <UI_GetReg+0x45c>
          bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).qI_Component2;
 8002acc:	f004 f9c4 	bl	8006e58 <STO_PLL_GetEstimatedCurrent>
 8002ad0:	1400      	asrs	r0, r0, #16
 8002ad2:	e6e0      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 8002ad4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002ad6:	f001 fd83 	bl	80045e0 <VBS_GetAvBusVoltage_V>
      break;
 8002ada:	e6dc      	b.n	8002896 <UI_GetReg+0x12a>
        uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002adc:	6903      	ldr	r3, [r0, #16]
 8002ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ae2:	0f1a      	lsrs	r2, r3, #28
 8002ae4:	2a09      	cmp	r2, #9
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ae6:	f3c3 6303 	ubfx	r3, r3, #24, #4
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002aea:	d07e      	beq.n	8002bea <UI_GetReg+0x47e>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002aec:	2b09      	cmp	r3, #9
 8002aee:	d125      	bne.n	8002b3c <UI_GetReg+0x3d0>
          pSPD = pMCT->pSpeedSensorAux;
 8002af0:	69e8      	ldr	r0, [r5, #28]
        if (pSPD != MC_NULL)
 8002af2:	b318      	cbz	r0, 8002b3c <UI_GetReg+0x3d0>
          STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002af4:	aa0f      	add	r2, sp, #60	; 0x3c
 8002af6:	a90e      	add	r1, sp, #56	; 0x38
 8002af8:	f004 f9ce 	bl	8006e98 <STO_GetPLLGains>
 8002afc:	e01e      	b.n	8002b3c <UI_GetReg+0x3d0>
        bRetVal = MCI_GetIqd(pMCI).qI_Component1;
 8002afe:	4620      	mov	r0, r4
 8002b00:	f001 feaa 	bl	8004858 <MCI_GetIqd>
 8002b04:	b200      	sxth	r0, r0
      break;
 8002b06:	e6c6      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = MCI_GetVqd(pMCI).qV_Component2;
 8002b08:	4620      	mov	r0, r4
 8002b0a:	f001 feb5 	bl	8004878 <MCI_GetVqd>
 8002b0e:	1400      	asrs	r0, r0, #16
      break;
 8002b10:	e6c1      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = MCI_GetVqd(pMCI).qV_Component1;
 8002b12:	4620      	mov	r0, r4
 8002b14:	f001 feb0 	bl	8004878 <MCI_GetVqd>
 8002b18:	b200      	sxth	r0, r0
      break;
 8002b1a:	e6bc      	b.n	8002896 <UI_GetReg+0x12a>
        uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002b1c:	6903      	ldr	r3, [r0, #16]
 8002b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b22:	0f1a      	lsrs	r2, r3, #28
 8002b24:	2a09      	cmp	r2, #9
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b26:	f3c3 6303 	ubfx	r3, r3, #24, #4
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b2a:	d06b      	beq.n	8002c04 <UI_GetReg+0x498>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b2c:	2b09      	cmp	r3, #9
 8002b2e:	d105      	bne.n	8002b3c <UI_GetReg+0x3d0>
          pSPD = pMCT->pSpeedSensorAux;
 8002b30:	69e8      	ldr	r0, [r5, #28]
        if (pSPD != MC_NULL)
 8002b32:	b118      	cbz	r0, 8002b3c <UI_GetReg+0x3d0>
          STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002b34:	aa0f      	add	r2, sp, #60	; 0x3c
 8002b36:	a90e      	add	r1, sp, #56	; 0x38
 8002b38:	f004 f9a2 	bl	8006e80 <STO_PLL_GetObserverGains>
        bRetVal = (int32_t)hPgain;
 8002b3c:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
      break;
 8002b40:	e6a9      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = MCI_GetIab(pMCI).qI_Component1;
 8002b42:	4620      	mov	r0, r4
 8002b44:	f001 fe78 	bl	8004838 <MCI_GetIab>
 8002b48:	b200      	sxth	r0, r0
      break;
 8002b4a:	e6a4      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8002b4c:	6968      	ldr	r0, [r5, #20]
 8002b4e:	f004 fad1 	bl	80070f4 <RUC_GetNumberOfPhases>
      break;
 8002b52:	e6a0      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = MCI_GetIqd(pMCI).qI_Component2;
 8002b54:	4620      	mov	r0, r4
 8002b56:	f001 fe7f 	bl	8004858 <MCI_GetIqd>
 8002b5a:	1400      	asrs	r0, r0, #16
      break;
 8002b5c:	e69b      	b.n	8002896 <UI_GetReg+0x12a>
        uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002b5e:	6903      	ldr	r3, [r0, #16]
 8002b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b64:	0f1a      	lsrs	r2, r3, #28
 8002b66:	2a09      	cmp	r2, #9
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b68:	f3c3 6303 	ubfx	r3, r3, #24, #4
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b6c:	d02f      	beq.n	8002bce <UI_GetReg+0x462>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b6e:	2b09      	cmp	r3, #9
 8002b70:	d116      	bne.n	8002ba0 <UI_GetReg+0x434>
          pSPD = pMCT->pSpeedSensorAux;
 8002b72:	69e8      	ldr	r0, [r5, #28]
        if (pSPD != MC_NULL)
 8002b74:	b1a0      	cbz	r0, 8002ba0 <UI_GetReg+0x434>
          STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002b76:	aa0f      	add	r2, sp, #60	; 0x3c
 8002b78:	a90e      	add	r1, sp, #56	; 0x38
 8002b7a:	f004 f98d 	bl	8006e98 <STO_GetPLLGains>
 8002b7e:	e00f      	b.n	8002ba0 <UI_GetReg+0x434>
        uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002b80:	6903      	ldr	r3, [r0, #16]
 8002b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b86:	0f1a      	lsrs	r2, r3, #28
 8002b88:	2a09      	cmp	r2, #9
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b8a:	f3c3 6303 	ubfx	r3, r3, #24, #4
        if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b8e:	d030      	beq.n	8002bf2 <UI_GetReg+0x486>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b90:	2b09      	cmp	r3, #9
 8002b92:	d105      	bne.n	8002ba0 <UI_GetReg+0x434>
          pSPD = pMCT->pSpeedSensorAux;
 8002b94:	69e8      	ldr	r0, [r5, #28]
        if (pSPD != MC_NULL)
 8002b96:	b118      	cbz	r0, 8002ba0 <UI_GetReg+0x434>
          STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002b98:	aa0f      	add	r2, sp, #60	; 0x3c
 8002b9a:	a90e      	add	r1, sp, #56	; 0x38
 8002b9c:	f004 f970 	bl	8006e80 <STO_PLL_GetObserverGains>
        bRetVal = (int32_t)hIgain;
 8002ba0:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
      break;
 8002ba4:	e677      	b.n	8002896 <UI_GetReg+0x12a>
      bRetVal = CTRBDID;
 8002ba6:	2011      	movs	r0, #17
    break;
 8002ba8:	e675      	b.n	8002896 <UI_GetReg+0x12a>
      bRetVal = (int32_t)(MC_UID);
 8002baa:	4828      	ldr	r0, [pc, #160]	; (8002c4c <UI_GetReg+0x4e0>)
 8002bac:	e673      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = MCI_GetValphabeta(pMCI).qV_Component1;
 8002bae:	4620      	mov	r0, r4
 8002bb0:	f001 fe6c 	bl	800488c <MCI_GetValphabeta>
 8002bb4:	b200      	sxth	r0, r0
      break;
 8002bb6:	e66e      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 8002bb8:	6828      	ldr	r0, [r5, #0]
 8002bba:	f002 f859 	bl	8004c70 <PID_GetKIDivisor>
      break;
 8002bbe:	e66a      	b.n	8002896 <UI_GetReg+0x12a>
        bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8002bc0:	6828      	ldr	r0, [r5, #0]
 8002bc2:	f002 f853 	bl	8004c6c <PID_GetKPDivisor>
      break;
 8002bc6:	e666      	b.n	8002896 <UI_GetReg+0x12a>
  int32_t bRetVal = (int32_t)GUI_ERROR_CODE;
 8002bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bcc:	e663      	b.n	8002896 <UI_GetReg+0x12a>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bce:	2b09      	cmp	r3, #9
          pSPD = pMCT->pSpeedSensorMain;
 8002bd0:	69a8      	ldr	r0, [r5, #24]
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bd2:	d1cf      	bne.n	8002b74 <UI_GetReg+0x408>
 8002bd4:	e7cd      	b.n	8002b72 <UI_GetReg+0x406>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bd6:	2b09      	cmp	r3, #9
          pSPD = pMCT->pSpeedSensorMain;
 8002bd8:	69a8      	ldr	r0, [r5, #24]
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bda:	f47f aef2 	bne.w	80029c2 <UI_GetReg+0x256>
 8002bde:	e6ef      	b.n	80029c0 <UI_GetReg+0x254>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002be0:	2b09      	cmp	r3, #9
          pSPD = pMCT->pSpeedSensorMain;
 8002be2:	69a8      	ldr	r0, [r5, #24]
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002be4:	f47f aec6 	bne.w	8002974 <UI_GetReg+0x208>
 8002be8:	e6c3      	b.n	8002972 <UI_GetReg+0x206>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bea:	2b09      	cmp	r3, #9
          pSPD = pMCT->pSpeedSensorMain;
 8002bec:	69a8      	ldr	r0, [r5, #24]
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bee:	d180      	bne.n	8002af2 <UI_GetReg+0x386>
 8002bf0:	e77e      	b.n	8002af0 <UI_GetReg+0x384>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bf2:	2b09      	cmp	r3, #9
          pSPD = pMCT->pSpeedSensorMain;
 8002bf4:	69a8      	ldr	r0, [r5, #24]
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bf6:	d1ce      	bne.n	8002b96 <UI_GetReg+0x42a>
 8002bf8:	e7cc      	b.n	8002b94 <UI_GetReg+0x428>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bfa:	2b09      	cmp	r3, #9
          pSPD = pMCT->pSpeedSensorMain;
 8002bfc:	69a8      	ldr	r0, [r5, #24]
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bfe:	f47f aecd 	bne.w	800299c <UI_GetReg+0x230>
 8002c02:	e6ca      	b.n	800299a <UI_GetReg+0x22e>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c04:	2b09      	cmp	r3, #9
          pSPD = pMCT->pSpeedSensorMain;
 8002c06:	69a8      	ldr	r0, [r5, #24]
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c08:	d193      	bne.n	8002b32 <UI_GetReg+0x3c6>
 8002c0a:	e791      	b.n	8002b30 <UI_GetReg+0x3c4>
        bRetVal = (int32_t)(MCI_GetLastRampFinalSpeed(pMCI) * 6);
 8002c0c:	f001 fdfc 	bl	8004808 <MCI_GetLastRampFinalSpeed>
 8002c10:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002c14:	0040      	lsls	r0, r0, #1
 8002c16:	e63e      	b.n	8002896 <UI_GetReg+0x12a>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c18:	2b09      	cmp	r3, #9
         pSPD = pMCT->pSpeedSensorMain;
 8002c1a:	69a8      	ldr	r0, [r5, #24]
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c1c:	f47f af11 	bne.w	8002a42 <UI_GetReg+0x2d6>
 8002c20:	e70e      	b.n	8002a40 <UI_GetReg+0x2d4>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c22:	2b09      	cmp	r3, #9
          pSPD = pMCT->pSpeedSensorMain;
 8002c24:	69a8      	ldr	r0, [r5, #24]
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c26:	f47f af4f 	bne.w	8002ac8 <UI_GetReg+0x35c>
 8002c2a:	e74c      	b.n	8002ac6 <UI_GetReg+0x35a>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c2c:	2b09      	cmp	r3, #9
          pSPD = pMCT->pSpeedSensorMain;
 8002c2e:	69a8      	ldr	r0, [r5, #24]
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c30:	f47f af36 	bne.w	8002aa0 <UI_GetReg+0x334>
 8002c34:	e733      	b.n	8002a9e <UI_GetReg+0x332>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c36:	2b09      	cmp	r3, #9
          pSPD = pMCT->pSpeedSensorMain;
 8002c38:	69a8      	ldr	r0, [r5, #24]
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c3a:	f47f aee7 	bne.w	8002a0c <UI_GetReg+0x2a0>
 8002c3e:	e6e4      	b.n	8002a0a <UI_GetReg+0x29e>
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c40:	2b09      	cmp	r3, #9
          pSPD = pMCT->pSpeedSensorMain;
 8002c42:	69a8      	ldr	r0, [r5, #24]
        if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002c44:	f47f af11 	bne.w	8002a6a <UI_GetReg+0x2fe>
 8002c48:	e70e      	b.n	8002a68 <UI_GetReg+0x2fc>
 8002c4a:	bf00      	nop
 8002c4c:	34a6847a 	.word	0x34a6847a

08002c50 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8002c50:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002c52:	6883      	ldr	r3, [r0, #8]
 8002c54:	7d02      	ldrb	r2, [r0, #20]

  switch (bCmdID)
 8002c56:	3901      	subs	r1, #1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002c58:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
  switch (bCmdID)
 8002c5c:	290d      	cmp	r1, #13
 8002c5e:	d82c      	bhi.n	8002cba <UI_ExecCmd+0x6a>
 8002c60:	e8df f001 	tbb	[pc, r1]
 8002c64:	0c071217 	.word	0x0c071217
 8002c68:	261c0e0c 	.word	0x261c0e0c
 8002c6c:	2b2b2b21 	.word	0x2b2b2b21
 8002c70:	122b      	.short	0x122b
      MCI_StopMotor(pMCI);
    }
    break;
  case MC_PROTOCOL_CMD_STOP_RAMP:
    {
      if (MCI_GetSTMState(pMCI) == RUN)
 8002c72:	4620      	mov	r0, r4
 8002c74:	f001 fda0 	bl	80047b8 <MCI_GetSTMState>
 8002c78:	2806      	cmp	r0, #6
 8002c7a:	d020      	beq.n	8002cbe <UI_ExecCmd+0x6e>
  bool retVal = true;
 8002c7c:	2001      	movs	r0, #1
  default:
    retVal = false;
    break;
  }
  return retVal;
}
 8002c7e:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 8002c80:	4620      	mov	r0, r4
 8002c82:	f001 fd99 	bl	80047b8 <MCI_GetSTMState>
 8002c86:	b120      	cbz	r0, 8002c92 <UI_ExecCmd+0x42>
        MCI_StopMotor(pMCI);
 8002c88:	4620      	mov	r0, r4
 8002c8a:	f001 fd4d 	bl	8004728 <MCI_StopMotor>
  bool retVal = true;
 8002c8e:	2001      	movs	r0, #1
 8002c90:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 8002c92:	4620      	mov	r0, r4
 8002c94:	f001 fd3e 	bl	8004714 <MCI_StartMotor>
  bool retVal = true;
 8002c98:	2001      	movs	r0, #1
 8002c9a:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 8002c9c:	4620      	mov	r0, r4
 8002c9e:	f001 fd47 	bl	8004730 <MCI_FaultAcknowledged>
  bool retVal = true;
 8002ca2:	2001      	movs	r0, #1
    break;
 8002ca4:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 8002ca6:	4620      	mov	r0, r4
 8002ca8:	f001 fe02 	bl	80048b0 <MCI_Clear_Iqdref>
  bool retVal = true;
 8002cac:	2001      	movs	r0, #1
    break;
 8002cae:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	f001 fd41 	bl	8004738 <MCI_EncoderAlign>
  bool retVal = true;
 8002cb6:	2001      	movs	r0, #1
    break;
 8002cb8:	bd10      	pop	{r4, pc}
    retVal = false;
 8002cba:	2000      	movs	r0, #0
 8002cbc:	bd10      	pop	{r4, pc}
        MCI_StopSpeedRamp(pMCI);
 8002cbe:	4620      	mov	r0, r4
 8002cc0:	f001 fdaa 	bl	8004818 <MCI_StopSpeedRamp>
  bool retVal = true;
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	bd10      	pop	{r4, pc}

08002cc8 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds. 
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedRPM, uint16_t hDurationms)
{
 8002cc8:	b510      	push	{r4, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)(wFinalMecSpeedRPM/6),hDurationms);
 8002cca:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002ccc:	7d04      	ldrb	r4, [r0, #20]
 8002cce:	6880      	ldr	r0, [r0, #8]
  MCI_ExecSpeedRamp(pMCI,(int16_t)(wFinalMecSpeedRPM/6),hDurationms);
 8002cd0:	fb83 e301 	smull	lr, r3, r3, r1
 8002cd4:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8002cd8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8002cdc:	b209      	sxth	r1, r1
 8002cde:	f001 fcf7 	bl	80046d0 <MCI_ExecSpeedRamp>
  return true;
}
 8002ce2:	2001      	movs	r0, #1
 8002ce4:	bd10      	pop	{r4, pc}
 8002ce6:	bf00      	nop
 8002ce8:	2aaaaaab 	.word	0x2aaaaaab

08002cec <UI_GetRevupData>:
  *         digit.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeed01Hz, int16_t* pFinalTorque )
{
 8002cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002cee:	7d04      	ldrb	r4, [r0, #20]
 8002cf0:	68c0      	ldr	r0, [r0, #12]
 8002cf2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8002cf6:	6944      	ldr	r4, [r0, #20]
  if (pRevupCtrl)
 8002cf8:	b194      	cbz	r4, 8002d20 <UI_GetRevupData+0x34>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	461e      	mov	r6, r3
 8002cfe:	4617      	mov	r7, r2
 8002d00:	460d      	mov	r5, r1
 8002d02:	f004 f9e1 	bl	80070c8 <RUC_GetPhaseDurationms>
    *pFinalMecSpeed01Hz = RUC_GetPhaseFinalMecSpeed01Hz(pRevupCtrl, bStage);
 8002d06:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002d08:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeed01Hz = RUC_GetPhaseFinalMecSpeed01Hz(pRevupCtrl, bStage);
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	f004 f9e2 	bl	80070d4 <RUC_GetPhaseFinalMecSpeed01Hz>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002d10:	4629      	mov	r1, r5
    *pFinalMecSpeed01Hz = RUC_GetPhaseFinalMecSpeed01Hz(pRevupCtrl, bStage);
 8002d12:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002d14:	4620      	mov	r0, r4
 8002d16:	f004 f9e5 	bl	80070e4 <RUC_GetPhaseFinalTorque>
 8002d1a:	9b06      	ldr	r3, [sp, #24]
  bool hRetVal = true;
 8002d1c:	2401      	movs	r4, #1
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002d1e:	8018      	strh	r0, [r3, #0]
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 8002d20:	4620      	mov	r0, r4
 8002d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002d24 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeed01Hz, int16_t hFinalTorque )
{
 8002d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d26:	461f      	mov	r7, r3
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002d28:	7d04      	ldrb	r4, [r0, #20]
 8002d2a:	68c3      	ldr	r3, [r0, #12]
{
 8002d2c:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002d30:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8002d34:	695c      	ldr	r4, [r3, #20]
{
 8002d36:	460d      	mov	r5, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8002d38:	4620      	mov	r0, r4
 8002d3a:	f004 f9b3 	bl	80070a4 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeed01Hz(pRevupCtrl, bStage, hFinalMecSpeed01Hz);
 8002d3e:	463a      	mov	r2, r7
 8002d40:	4629      	mov	r1, r5
 8002d42:	4620      	mov	r0, r4
 8002d44:	f004 f9b4 	bl	80070b0 <RUC_SetPhaseFinalMecSpeed01Hz>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8002d48:	4620      	mov	r0, r4
 8002d4a:	4632      	mov	r2, r6
 8002d4c:	4629      	mov	r1, r5
 8002d4e:	f004 f9b5 	bl	80070bc <RUC_SetPhaseFinalTorque>
  return true;
}
 8002d52:	2001      	movs	r0, #1
 8002d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d56:	bf00      	nop

08002d58 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame. 
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8002d58:	b500      	push	{lr}
 8002d5a:	b083      	sub	sp, #12

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002d5c:	6883      	ldr	r3, [r0, #8]
  Curr_Components currComp;
  currComp.qI_Component1 = hIqRef;
 8002d5e:	f8ad 1004 	strh.w	r1, [sp, #4]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002d62:	7d01      	ldrb	r1, [r0, #20]
  currComp.qI_Component2 = hIdRef;
 8002d64:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002d68:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  MCI_SetCurrentReferences(pMCI,currComp);
 8002d6c:	9901      	ldr	r1, [sp, #4]
 8002d6e:	f001 fcc3 	bl	80046f8 <MCI_SetCurrentReferences>
}
 8002d72:	b003      	add	sp, #12
 8002d74:	f85d fb04 	ldr.w	pc, [sp], #4

08002d78 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 8002d78:	2000      	movs	r0, #0
 8002d7a:	4770      	bx	lr

08002d7c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d7c:	4910      	ldr	r1, [pc, #64]	; (8002dc0 <SystemInit+0x44>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002d7e:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d80:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d84:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 8002d88:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d8a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8002d8e:	681a      	ldr	r2, [r3, #0]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002d90:	4c0d      	ldr	r4, [pc, #52]	; (8002dc8 <SystemInit+0x4c>)
  RCC->CFGR = 0x00000000;
 8002d92:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002d94:	f042 0201 	orr.w	r2, r2, #1
 8002d98:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002d9a:	6098      	str	r0, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002da2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002da6:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8002da8:	605c      	str	r4, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002daa:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002dac:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002db0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002db4:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x00000000;
 8002db6:	60d8      	str	r0, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002db8:	608c      	str	r4, [r1, #8]
#endif
}
 8002dba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	e000ed00 	.word	0xe000ed00
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	24003010 	.word	0x24003010

08002dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dcc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dce:	4a0e      	ldr	r2, [pc, #56]	; (8002e08 <HAL_InitTick+0x3c>)
 8002dd0:	4b0e      	ldr	r3, [pc, #56]	; (8002e0c <HAL_InitTick+0x40>)
 8002dd2:	7812      	ldrb	r2, [r2, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
{
 8002dd6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ddc:	fbb0 f0f2 	udiv	r0, r0, r2
 8002de0:	fbb3 f0f0 	udiv	r0, r3, r0
 8002de4:	f000 fade 	bl	80033a4 <HAL_SYSTICK_Config>
 8002de8:	b908      	cbnz	r0, 8002dee <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dea:	2d0f      	cmp	r5, #15
 8002dec:	d901      	bls.n	8002df2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8002dee:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002df0:	bd38      	pop	{r3, r4, r5, pc}
 8002df2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002df4:	4602      	mov	r2, r0
 8002df6:	4629      	mov	r1, r5
 8002df8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dfc:	f000 fa8e 	bl	800331c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e00:	4b03      	ldr	r3, [pc, #12]	; (8002e10 <HAL_InitTick+0x44>)
 8002e02:	4620      	mov	r0, r4
 8002e04:	601d      	str	r5, [r3, #0]
 8002e06:	bd38      	pop	{r3, r4, r5, pc}
 8002e08:	200006a0 	.word	0x200006a0
 8002e0c:	2000069c 	.word	0x2000069c
 8002e10:	200006a4 	.word	0x200006a4

08002e14 <HAL_Init>:
{
 8002e14:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e16:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_Init+0x30>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e1e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e26:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e2e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e30:	2003      	movs	r0, #3
 8002e32:	f000 fa61 	bl	80032f8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e36:	2004      	movs	r0, #4
 8002e38:	f7ff ffc8 	bl	8002dcc <HAL_InitTick>
  HAL_MspInit();
 8002e3c:	f7ff f8a0 	bl	8001f80 <HAL_MspInit>
}
 8002e40:	2000      	movs	r0, #0
 8002e42:	bd08      	pop	{r3, pc}
 8002e44:	40023c00 	.word	0x40023c00

08002e48 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002e48:	4a03      	ldr	r2, [pc, #12]	; (8002e58 <HAL_IncTick+0x10>)
 8002e4a:	4b04      	ldr	r3, [pc, #16]	; (8002e5c <HAL_IncTick+0x14>)
 8002e4c:	6811      	ldr	r1, [r2, #0]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	440b      	add	r3, r1
 8002e52:	6013      	str	r3, [r2, #0]
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	200009e4 	.word	0x200009e4
 8002e5c:	200006a0 	.word	0x200006a0

08002e60 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002e60:	4b01      	ldr	r3, [pc, #4]	; (8002e68 <HAL_GetTick+0x8>)
 8002e62:	6818      	ldr	r0, [r3, #0]
}
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	200009e4 	.word	0x200009e4

08002e6c <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e6c:	2800      	cmp	r0, #0
 8002e6e:	f000 80a6 	beq.w	8002fbe <HAL_ADC_Init+0x152>
{
 8002e72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e74:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002e76:	4604      	mov	r4, r0
 8002e78:	b13d      	cbz	r5, 8002e8a <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e7c:	06db      	lsls	r3, r3, #27
 8002e7e:	d50c      	bpl.n	8002e9a <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e80:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 8002e82:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8002e84:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8002e8a:	f7ff f899 	bl	8001fc0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002e8e:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e90:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8002e92:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e96:	06db      	lsls	r3, r3, #27
 8002e98:	d4f2      	bmi.n	8002e80 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8002e9a:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e9c:	4949      	ldr	r1, [pc, #292]	; (8002fc4 <HAL_ADC_Init+0x158>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e9e:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ea0:	4d49      	ldr	r5, [pc, #292]	; (8002fc8 <HAL_ADC_Init+0x15c>)
    ADC_STATE_CLR_SET(hadc->State,
 8002ea2:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8002ea6:	f022 0202 	bic.w	r2, r2, #2
 8002eaa:	f042 0202 	orr.w	r2, r2, #2
 8002eae:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002eb0:	684a      	ldr	r2, [r1, #4]
 8002eb2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002eb6:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002eb8:	684a      	ldr	r2, [r1, #4]
 8002eba:	6860      	ldr	r0, [r4, #4]
 8002ebc:	4302      	orrs	r2, r0
 8002ebe:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ec0:	6859      	ldr	r1, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ec2:	6920      	ldr	r0, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ec4:	f8d4 e008 	ldr.w	lr, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ec8:	68e7      	ldr	r7, [r4, #12]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002eca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ecc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002ed0:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ed2:	685e      	ldr	r6, [r3, #4]
 8002ed4:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
 8002ed8:	605e      	str	r6, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002eda:	685e      	ldr	r6, [r3, #4]
 8002edc:	f026 7640 	bic.w	r6, r6, #50331648	; 0x3000000
 8002ee0:	605e      	str	r6, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ee2:	6858      	ldr	r0, [r3, #4]
 8002ee4:	ea40 000e 	orr.w	r0, r0, lr
 8002ee8:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002eea:	6898      	ldr	r0, [r3, #8]
 8002eec:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8002ef0:	6098      	str	r0, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ef2:	6899      	ldr	r1, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ef4:	42aa      	cmp	r2, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ef6:	ea41 0107 	orr.w	r1, r1, r7
 8002efa:	6099      	str	r1, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002efc:	d048      	beq.n	8002f90 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002efe:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f00:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f02:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8002f06:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f08:	6899      	ldr	r1, [r3, #8]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f0e:	6899      	ldr	r1, [r3, #8]
 8002f10:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8002f14:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	4302      	orrs	r2, r0
 8002f1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f1c:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f1e:	7e25      	ldrb	r5, [r4, #24]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f20:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f24:	f021 0102 	bic.w	r1, r1, #2
 8002f28:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8002f30:	609a      	str	r2, [r3, #8]
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f32:	685a      	ldr	r2, [r3, #4]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f34:	2800      	cmp	r0, #0
 8002f36:	d134      	bne.n	8002fa2 <HAL_ADC_Init+0x136>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f3c:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f40:	69e5      	ldr	r5, [r4, #28]
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f42:	f894 7030 	ldrb.w	r7, [r4, #48]	; 0x30
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f46:	6966      	ldr	r6, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f48:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f4e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002f50:	3d01      	subs	r5, #1
 8002f52:	ea40 5005 	orr.w	r0, r0, r5, lsl #20
 8002f56:	62d8      	str	r0, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f58:	6898      	ldr	r0, [r3, #8]
 8002f5a:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 8002f5e:	6098      	str	r0, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f60:	6899      	ldr	r1, [r3, #8]
 8002f62:	ea41 2147 	orr.w	r1, r1, r7, lsl #9
 8002f66:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f68:	6899      	ldr	r1, [r3, #8]
 8002f6a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002f6e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f70:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002f72:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f74:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8002f78:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002f7a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002f7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f7e:	f023 0303 	bic.w	r3, r3, #3
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8002f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f9e:	609a      	str	r2, [r3, #8]
 8002fa0:	e7bc      	b.n	8002f1c <HAL_ADC_Init+0xb0>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002fa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002fa6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002fa8:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002fb0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	3901      	subs	r1, #1
 8002fb6:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8002fba:	605a      	str	r2, [r3, #4]
 8002fbc:	e7bf      	b.n	8002f3e <HAL_ADC_Init+0xd2>
    return HAL_ERROR;
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40012300 	.word	0x40012300
 8002fc8:	0f000001 	.word	0x0f000001

08002fcc <HAL_ADC_ConfigChannel>:
{
 8002fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8002fce:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002fd2:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8002fd4:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8002fd6:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8002fd8:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002fda:	d055      	beq.n	8003088 <HAL_ADC_ConfigChannel+0xbc>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002fdc:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8002fde:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002fe0:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8002fe2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002fe6:	d828      	bhi.n	800303a <HAL_ADC_ConfigChannel+0x6e>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fe8:	6804      	ldr	r4, [r0, #0]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fea:	688b      	ldr	r3, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fec:	6922      	ldr	r2, [r4, #16]
 8002fee:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8002ff2:	2607      	movs	r6, #7
 8002ff4:	40be      	lsls	r6, r7
 8002ff6:	ea22 0206 	bic.w	r2, r2, r6
 8002ffa:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ffc:	6922      	ldr	r2, [r4, #16]
 8002ffe:	40bb      	lsls	r3, r7
 8003000:	4313      	orrs	r3, r2
 8003002:	6123      	str	r3, [r4, #16]
  if (sConfig->Rank < 7U)
 8003004:	684b      	ldr	r3, [r1, #4]
 8003006:	2b06      	cmp	r3, #6
 8003008:	462e      	mov	r6, r5
 800300a:	d82b      	bhi.n	8003064 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800300c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003010:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003012:	3b05      	subs	r3, #5
 8003014:	211f      	movs	r1, #31
 8003016:	4099      	lsls	r1, r3
 8003018:	ea22 0201 	bic.w	r2, r2, r1
 800301c:	6362      	str	r2, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800301e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003020:	fa06 f303 	lsl.w	r3, r6, r3
 8003024:	4313      	orrs	r3, r2
 8003026:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003028:	4b3e      	ldr	r3, [pc, #248]	; (8003124 <HAL_ADC_ConfigChannel+0x158>)
 800302a:	429c      	cmp	r4, r3
 800302c:	d03e      	beq.n	80030ac <HAL_ADC_ConfigChannel+0xe0>
  __HAL_UNLOCK(hadc);
 800302e:	2300      	movs	r3, #0
 8003030:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8003034:	4618      	mov	r0, r3
}
 8003036:	b003      	add	sp, #12
 8003038:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800303a:	6804      	ldr	r4, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800303c:	688b      	ldr	r3, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800303e:	68e7      	ldr	r7, [r4, #12]
 8003040:	b2ae      	uxth	r6, r5
 8003042:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8003046:	3a1e      	subs	r2, #30
 8003048:	f04f 0e07 	mov.w	lr, #7
 800304c:	fa0e fe02 	lsl.w	lr, lr, r2
 8003050:	ea27 070e 	bic.w	r7, r7, lr
 8003054:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003056:	68e7      	ldr	r7, [r4, #12]
 8003058:	4093      	lsls	r3, r2
 800305a:	433b      	orrs	r3, r7
 800305c:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 800305e:	684b      	ldr	r3, [r1, #4]
 8003060:	2b06      	cmp	r3, #6
 8003062:	d9d3      	bls.n	800300c <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8003064:	2b0c      	cmp	r3, #12
 8003066:	d812      	bhi.n	800308e <HAL_ADC_ConfigChannel+0xc2>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003068:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800306c:	f1a3 0123 	sub.w	r1, r3, #35	; 0x23
 8003070:	221f      	movs	r2, #31
 8003072:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003074:	408a      	lsls	r2, r1
 8003076:	ea23 0302 	bic.w	r3, r3, r2
 800307a:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800307c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800307e:	fa06 f101 	lsl.w	r1, r6, r1
 8003082:	4319      	orrs	r1, r3
 8003084:	6321      	str	r1, [r4, #48]	; 0x30
 8003086:	e7cf      	b.n	8003028 <HAL_ADC_ConfigChannel+0x5c>
  __HAL_LOCK(hadc);
 8003088:	2002      	movs	r0, #2
}
 800308a:	b003      	add	sp, #12
 800308c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800308e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8003092:	3a41      	subs	r2, #65	; 0x41
 8003094:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003096:	211f      	movs	r1, #31
 8003098:	4091      	lsls	r1, r2
 800309a:	ea23 0301 	bic.w	r3, r3, r1
 800309e:	62e3      	str	r3, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80030a2:	fa06 f102 	lsl.w	r1, r6, r2
 80030a6:	4319      	orrs	r1, r3
 80030a8:	62e1      	str	r1, [r4, #44]	; 0x2c
 80030aa:	e7bd      	b.n	8003028 <HAL_ADC_ConfigChannel+0x5c>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030ac:	2d12      	cmp	r5, #18
 80030ae:	d02b      	beq.n	8003108 <HAL_ADC_ConfigChannel+0x13c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030b0:	4b1d      	ldr	r3, [pc, #116]	; (8003128 <HAL_ADC_ConfigChannel+0x15c>)
 80030b2:	429d      	cmp	r5, r3
 80030b4:	d00b      	beq.n	80030ce <HAL_ADC_ConfigChannel+0x102>
 80030b6:	2d11      	cmp	r5, #17
 80030b8:	d1b9      	bne.n	800302e <HAL_ADC_ConfigChannel+0x62>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80030ba:	4b1c      	ldr	r3, [pc, #112]	; (800312c <HAL_ADC_ConfigChannel+0x160>)
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80030c2:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80030ca:	605a      	str	r2, [r3, #4]
 80030cc:	e7af      	b.n	800302e <HAL_ADC_ConfigChannel+0x62>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80030ce:	4a17      	ldr	r2, [pc, #92]	; (800312c <HAL_ADC_ConfigChannel+0x160>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030d0:	4b17      	ldr	r3, [pc, #92]	; (8003130 <HAL_ADC_ConfigChannel+0x164>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80030d2:	6851      	ldr	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030d4:	4c17      	ldr	r4, [pc, #92]	; (8003134 <HAL_ADC_ConfigChannel+0x168>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80030d6:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 80030da:	6051      	str	r1, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80030dc:	6851      	ldr	r1, [r2, #4]
 80030de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80030e2:	6051      	str	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	fba4 2303 	umull	r2, r3, r4, r3
 80030ea:	0c9b      	lsrs	r3, r3, #18
 80030ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80030f4:	9b01      	ldr	r3, [sp, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d099      	beq.n	800302e <HAL_ADC_ConfigChannel+0x62>
        counter--;
 80030fa:	9b01      	ldr	r3, [sp, #4]
 80030fc:	3b01      	subs	r3, #1
 80030fe:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003100:	9b01      	ldr	r3, [sp, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f9      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x12e>
 8003106:	e792      	b.n	800302e <HAL_ADC_ConfigChannel+0x62>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003108:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 800310c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8003110:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003114:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 8003118:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800311c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
 8003120:	e785      	b.n	800302e <HAL_ADC_ConfigChannel+0x62>
 8003122:	bf00      	nop
 8003124:	40012000 	.word	0x40012000
 8003128:	10000012 	.word	0x10000012
 800312c:	40012300 	.word	0x40012300
 8003130:	2000069c 	.word	0x2000069c
 8003134:	431bde83 	.word	0x431bde83

08003138 <HAL_ADCEx_InjectedConfigChannel>:
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003138:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800313c:	2b01      	cmp	r3, #1
 800313e:	f000 8088 	beq.w	8003252 <HAL_ADCEx_InjectedConfigChannel+0x11a>
{
 8003142:	b5f0      	push	{r4, r5, r6, r7, lr}
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8003144:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8003146:	2301      	movs	r3, #1
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8003148:	2d09      	cmp	r5, #9
 800314a:	462c      	mov	r4, r5
  __HAL_LOCK(hadc);
 800314c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8003150:	d86c      	bhi.n	800322c <HAL_ADCEx_InjectedConfigChannel+0xf4>
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8003152:	6803      	ldr	r3, [r0, #0]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003154:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8003156:	691e      	ldr	r6, [r3, #16]
 8003158:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 800315c:	2707      	movs	r7, #7
 800315e:	fa07 f70e 	lsl.w	r7, r7, lr
 8003162:	ea26 0607 	bic.w	r6, r6, r7
 8003166:	611e      	str	r6, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003168:	691e      	ldr	r6, [r3, #16]
 800316a:	fa02 f20e 	lsl.w	r2, r2, lr
 800316e:	4332      	orrs	r2, r6
 8003170:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8003172:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8003174:	f8d1 e010 	ldr.w	lr, [r1, #16]
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003178:	684e      	ldr	r6, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800317a:	f427 1740 	bic.w	r7, r7, #3145728	; 0x300000
 800317e:	639f      	str	r7, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8003180:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8003182:	f10e 32ff 	add.w	r2, lr, #4294967295
 8003186:	ea47 5702 	orr.w	r7, r7, r2, lsl #20
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800318a:	1cf2      	adds	r2, r6, #3
 800318c:	eba2 020e 	sub.w	r2, r2, lr
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8003190:	639f      	str	r7, [r3, #56]	; 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8003196:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800319a:	f04f 0e1f 	mov.w	lr, #31
 800319e:	fa0e fe02 	lsl.w	lr, lr, r2
 80031a2:	ea27 070e 	bic.w	r7, r7, lr
 80031a6:	639f      	str	r7, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80031a8:	f8d3 e038 	ldr.w	lr, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80031ac:	698f      	ldr	r7, [r1, #24]
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80031ae:	fa04 f202 	lsl.w	r2, r4, r2
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80031b2:	4c4d      	ldr	r4, [pc, #308]	; (80032e8 <HAL_ADCEx_InjectedConfigChannel+0x1b0>)
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80031b4:	ea42 020e 	orr.w	r2, r2, lr
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80031b8:	42a7      	cmp	r7, r4
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80031ba:	639a      	str	r2, [r3, #56]	; 0x38
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80031bc:	d06c      	beq.n	8003298 <HAL_ADCEx_InjectedConfigChannel+0x160>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80031be:	689c      	ldr	r4, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80031c0:	f8d1 e01c 	ldr.w	lr, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80031c4:	f424 2470 	bic.w	r4, r4, #983040	; 0xf0000
 80031c8:	609c      	str	r4, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	4317      	orrs	r7, r2
 80031ce:	609f      	str	r7, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80031d0:	689c      	ldr	r4, [r3, #8]
 80031d2:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 80031d6:	609c      	str	r4, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	ea42 020e 	orr.w	r2, r2, lr
 80031de:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80031e0:	7d4a      	ldrb	r2, [r1, #21]
 80031e2:	2a00      	cmp	r2, #0
 80031e4:	d048      	beq.n	8003278 <HAL_ADCEx_InjectedConfigChannel+0x140>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031ec:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80031ee:	7d0a      	ldrb	r2, [r1, #20]
 80031f0:	2a00      	cmp	r2, #0
 80031f2:	d030      	beq.n	8003256 <HAL_ADCEx_InjectedConfigChannel+0x11e>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80031f4:	685a      	ldr	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }
  
  switch(sConfigInjected->InjectedRank)
 80031f6:	2e02      	cmp	r6, #2
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80031f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031fc:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 80031fe:	d030      	beq.n	8003262 <HAL_ADCEx_InjectedConfigChannel+0x12a>
 8003200:	2e03      	cmp	r6, #3
 8003202:	d052      	beq.n	80032aa <HAL_ADCEx_InjectedConfigChannel+0x172>
 8003204:	2e01      	cmp	r6, #1
 8003206:	d03c      	beq.n	8003282 <HAL_ADCEx_InjectedConfigChannel+0x14a>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8003208:	6a1a      	ldr	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 800320a:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800320c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003210:	f022 020f 	bic.w	r2, r2, #15
 8003214:	621a      	str	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8003216:	6a1a      	ldr	r2, [r3, #32]
 8003218:	430a      	orrs	r2, r1
 800321a:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800321c:	4a33      	ldr	r2, [pc, #204]	; (80032ec <HAL_ADCEx_InjectedConfigChannel+0x1b4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d04e      	beq.n	80032c0 <HAL_ADCEx_InjectedConfigChannel+0x188>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003222:	2300      	movs	r3, #0
 8003224:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003228:	4618      	mov	r0, r3
 800322a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800322c:	6803      	ldr	r3, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800322e:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8003230:	68df      	ldr	r7, [r3, #12]
 8003232:	b2ac      	uxth	r4, r5
 8003234:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8003238:	3e1e      	subs	r6, #30
 800323a:	f04f 0e07 	mov.w	lr, #7
 800323e:	fa0e fe06 	lsl.w	lr, lr, r6
 8003242:	ea27 070e 	bic.w	r7, r7, lr
 8003246:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003248:	68df      	ldr	r7, [r3, #12]
 800324a:	40b2      	lsls	r2, r6
 800324c:	433a      	orrs	r2, r7
 800324e:	60da      	str	r2, [r3, #12]
 8003250:	e78f      	b.n	8003172 <HAL_ADCEx_InjectedConfigChannel+0x3a>
  __HAL_LOCK(hadc);
 8003252:	2002      	movs	r0, #2
 8003254:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8003256:	685a      	ldr	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8003258:	2e02      	cmp	r6, #2
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 800325a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800325e:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8003260:	d1ce      	bne.n	8003200 <HAL_ADCEx_InjectedConfigChannel+0xc8>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8003262:	699a      	ldr	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8003264:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8003266:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800326a:	f022 020f 	bic.w	r2, r2, #15
 800326e:	619a      	str	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8003270:	699a      	ldr	r2, [r3, #24]
 8003272:	430a      	orrs	r2, r1
 8003274:	619a      	str	r2, [r3, #24]
      break;
 8003276:	e7d1      	b.n	800321c <HAL_ADCEx_InjectedConfigChannel+0xe4>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800327e:	605a      	str	r2, [r3, #4]
 8003280:	e7b5      	b.n	80031ee <HAL_ADCEx_InjectedConfigChannel+0xb6>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8003282:	695a      	ldr	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8003284:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8003286:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800328a:	f022 020f 	bic.w	r2, r2, #15
 800328e:	615a      	str	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	430a      	orrs	r2, r1
 8003294:	615a      	str	r2, [r3, #20]
      break;
 8003296:	e7c1      	b.n	800321c <HAL_ADCEx_InjectedConfigChannel+0xe4>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800329e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80032a6:	609a      	str	r2, [r3, #8]
 80032a8:	e79a      	b.n	80031e0 <HAL_ADCEx_InjectedConfigChannel+0xa8>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80032aa:	69da      	ldr	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80032ac:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80032ae:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80032b2:	f022 020f 	bic.w	r2, r2, #15
 80032b6:	61da      	str	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80032b8:	69da      	ldr	r2, [r3, #28]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	61da      	str	r2, [r3, #28]
      break;
 80032be:	e7ad      	b.n	800321c <HAL_ADCEx_InjectedConfigChannel+0xe4>
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80032c0:	2d12      	cmp	r5, #18
 80032c2:	d00a      	beq.n	80032da <HAL_ADCEx_InjectedConfigChannel+0x1a2>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80032c4:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <HAL_ADCEx_InjectedConfigChannel+0x1b8>)
 80032c6:	429d      	cmp	r5, r3
 80032c8:	d001      	beq.n	80032ce <HAL_ADCEx_InjectedConfigChannel+0x196>
 80032ca:	2d11      	cmp	r5, #17
 80032cc:	d1a9      	bne.n	8003222 <HAL_ADCEx_InjectedConfigChannel+0xea>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80032ce:	4a09      	ldr	r2, [pc, #36]	; (80032f4 <HAL_ADCEx_InjectedConfigChannel+0x1bc>)
 80032d0:	6853      	ldr	r3, [r2, #4]
 80032d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032d6:	6053      	str	r3, [r2, #4]
 80032d8:	e7a3      	b.n	8003222 <HAL_ADCEx_InjectedConfigChannel+0xea>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032da:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 80032de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032e2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 80032e6:	e79c      	b.n	8003222 <HAL_ADCEx_InjectedConfigChannel+0xea>
 80032e8:	000f0001 	.word	0x000f0001
 80032ec:	40012000 	.word	0x40012000
 80032f0:	10000012 	.word	0x10000012
 80032f4:	40012300 	.word	0x40012300

080032f8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032f8:	4a07      	ldr	r2, [pc, #28]	; (8003318 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80032fa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032fc:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8003300:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003302:	0200      	lsls	r0, r0, #8
 8003304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003308:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800330c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8003310:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003312:	60d3      	str	r3, [r2, #12]
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800331c:	4b18      	ldr	r3, [pc, #96]	; (8003380 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800331e:	b470      	push	{r4, r5, r6}
 8003320:	68dc      	ldr	r4, [r3, #12]
 8003322:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003326:	f1c4 0607 	rsb	r6, r4, #7
 800332a:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800332c:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003330:	bf28      	it	cs
 8003332:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003334:	2b06      	cmp	r3, #6
 8003336:	d917      	bls.n	8003368 <HAL_NVIC_SetPriority+0x4c>
 8003338:	3c03      	subs	r4, #3
 800333a:	2501      	movs	r5, #1
 800333c:	40a5      	lsls	r5, r4
 800333e:	3d01      	subs	r5, #1
 8003340:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003342:	2301      	movs	r3, #1
 8003344:	40b3      	lsls	r3, r6
 8003346:	3b01      	subs	r3, #1
 8003348:	4019      	ands	r1, r3
 800334a:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 800334c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800334e:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003352:	db0c      	blt.n	800336e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003354:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003358:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800335c:	0109      	lsls	r1, r1, #4
 800335e:	b2c9      	uxtb	r1, r1
 8003360:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003364:	bc70      	pop	{r4, r5, r6}
 8003366:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003368:	2200      	movs	r2, #0
 800336a:	4614      	mov	r4, r2
 800336c:	e7e9      	b.n	8003342 <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800336e:	4b05      	ldr	r3, [pc, #20]	; (8003384 <HAL_NVIC_SetPriority+0x68>)
 8003370:	f000 000f 	and.w	r0, r0, #15
 8003374:	0109      	lsls	r1, r1, #4
 8003376:	4403      	add	r3, r0
 8003378:	b2c9      	uxtb	r1, r1
 800337a:	7619      	strb	r1, [r3, #24]
 800337c:	bc70      	pop	{r4, r5, r6}
 800337e:	4770      	bx	lr
 8003380:	e000ed00 	.word	0xe000ed00
 8003384:	e000ecfc 	.word	0xe000ecfc

08003388 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003388:	2800      	cmp	r0, #0
 800338a:	db07      	blt.n	800339c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800338c:	f000 011f 	and.w	r1, r0, #31
 8003390:	2301      	movs	r3, #1
 8003392:	0940      	lsrs	r0, r0, #5
 8003394:	4a02      	ldr	r2, [pc, #8]	; (80033a0 <HAL_NVIC_EnableIRQ+0x18>)
 8003396:	408b      	lsls	r3, r1
 8003398:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	e000e100 	.word	0xe000e100

080033a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033a4:	3801      	subs	r0, #1
 80033a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80033aa:	d20e      	bcs.n	80033ca <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033ac:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ae:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b0:	4c08      	ldr	r4, [pc, #32]	; (80033d4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033b2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b4:	20f0      	movs	r0, #240	; 0xf0
 80033b6:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033ba:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033bc:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033be:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033c2:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80033c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033c8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80033ca:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	e000e010 	.word	0xe000e010
 80033d4:	e000ed00 	.word	0xe000ed00

080033d8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop

080033dc <HAL_SYSTICK_IRQHandler>:
{
 80033dc:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80033de:	f7ff fffb 	bl	80033d8 <HAL_SYSTICK_Callback>
 80033e2:	bd08      	pop	{r3, pc}

080033e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033e8:	f8d1 c000 	ldr.w	ip, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ec:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 80035ec <HAL_GPIO_Init+0x208>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033f0:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 80035f0 <HAL_GPIO_Init+0x20c>
{
 80033f4:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033f6:	2500      	movs	r5, #0
 80033f8:	e003      	b.n	8003402 <HAL_GPIO_Init+0x1e>
 80033fa:	3501      	adds	r5, #1
 80033fc:	2d10      	cmp	r5, #16
 80033fe:	f000 8093 	beq.w	8003528 <HAL_GPIO_Init+0x144>
    ioposition = 0x01U << position;
 8003402:	2301      	movs	r3, #1
 8003404:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003406:	ea03 020c 	and.w	r2, r3, ip
    if(iocurrent == ioposition)
 800340a:	4293      	cmp	r3, r2
 800340c:	d1f5      	bne.n	80033fa <HAL_GPIO_Init+0x16>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800340e:	684e      	ldr	r6, [r1, #4]
 8003410:	f026 0a10 	bic.w	sl, r6, #16
 8003414:	f1ba 0f02 	cmp.w	sl, #2
 8003418:	f000 8089 	beq.w	800352e <HAL_GPIO_Init+0x14a>
 800341c:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003420:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 8003422:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003426:	fa04 f409 	lsl.w	r4, r4, r9
 800342a:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800342c:	f006 0703 	and.w	r7, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003430:	ea0b 0b04 	and.w	fp, fp, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003434:	fa07 f709 	lsl.w	r7, r7, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003438:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800343c:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003440:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8003444:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003446:	f240 8098 	bls.w	800357a <HAL_GPIO_Init+0x196>
      temp = GPIOx->PUPDR;
 800344a:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800344c:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800344e:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003450:	fa03 f309 	lsl.w	r3, r3, r9
 8003454:	4323      	orrs	r3, r4
      GPIOx->PUPDR = temp;
 8003456:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003458:	00f3      	lsls	r3, r6, #3
 800345a:	d5ce      	bpl.n	80033fa <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800345c:	f04f 0900 	mov.w	r9, #0
 8003460:	f8cd 9004 	str.w	r9, [sp, #4]
 8003464:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8003468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800346c:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 8003470:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
 8003474:	f025 0303 	bic.w	r3, r5, #3
 8003478:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800347c:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8003480:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8003484:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003486:	f005 0403 	and.w	r4, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800348a:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800348c:	f8d3 a008 	ldr.w	sl, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003490:	00a4      	lsls	r4, r4, #2
 8003492:	270f      	movs	r7, #15
 8003494:	40a7      	lsls	r7, r4
 8003496:	ea2a 0a07 	bic.w	sl, sl, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800349a:	4f4e      	ldr	r7, [pc, #312]	; (80035d4 <HAL_GPIO_Init+0x1f0>)
 800349c:	42b8      	cmp	r0, r7
 800349e:	d01a      	beq.n	80034d6 <HAL_GPIO_Init+0xf2>
 80034a0:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80034a4:	42b8      	cmp	r0, r7
 80034a6:	d07b      	beq.n	80035a0 <HAL_GPIO_Init+0x1bc>
 80034a8:	4f4b      	ldr	r7, [pc, #300]	; (80035d8 <HAL_GPIO_Init+0x1f4>)
 80034aa:	42b8      	cmp	r0, r7
 80034ac:	d07d      	beq.n	80035aa <HAL_GPIO_Init+0x1c6>
 80034ae:	4f4b      	ldr	r7, [pc, #300]	; (80035dc <HAL_GPIO_Init+0x1f8>)
 80034b0:	42b8      	cmp	r0, r7
 80034b2:	d07f      	beq.n	80035b4 <HAL_GPIO_Init+0x1d0>
 80034b4:	4f4a      	ldr	r7, [pc, #296]	; (80035e0 <HAL_GPIO_Init+0x1fc>)
 80034b6:	42b8      	cmp	r0, r7
 80034b8:	f000 8081 	beq.w	80035be <HAL_GPIO_Init+0x1da>
 80034bc:	4f49      	ldr	r7, [pc, #292]	; (80035e4 <HAL_GPIO_Init+0x200>)
 80034be:	42b8      	cmp	r0, r7
 80034c0:	f000 8082 	beq.w	80035c8 <HAL_GPIO_Init+0x1e4>
 80034c4:	4f48      	ldr	r7, [pc, #288]	; (80035e8 <HAL_GPIO_Init+0x204>)
 80034c6:	42b8      	cmp	r0, r7
 80034c8:	bf0c      	ite	eq
 80034ca:	f04f 0906 	moveq.w	r9, #6
 80034ce:	f04f 0907 	movne.w	r9, #7
 80034d2:	fa09 f904 	lsl.w	r9, r9, r4
 80034d6:	ea4a 0709 	orr.w	r7, sl, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034da:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 80034dc:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 80034e0:	43d4      	mvns	r4, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034e2:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 80034e4:	bf54      	ite	pl
 80034e6:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 80034e8:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;
 80034ea:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 80034ee:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034f2:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 80034f4:	bf54      	ite	pl
 80034f6:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 80034f8:	4313      	orrmi	r3, r2
        }
        EXTI->EMR = temp;
 80034fa:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034fe:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003502:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 8003504:	bf54      	ite	pl
 8003506:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8003508:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;
 800350a:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 800350e:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003512:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003514:	f105 0501 	add.w	r5, r5, #1
        temp &= ~((uint32_t)iocurrent);
 8003518:	bf54      	ite	pl
 800351a:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 800351c:	4313      	orrmi	r3, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 800351e:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 8003520:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003524:	f47f af6d 	bne.w	8003402 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8003528:	b003      	add	sp, #12
 800352a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->AFR[position >> 3U];
 800352e:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 8003532:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003536:	f005 0707 	and.w	r7, r5, #7
        temp = GPIOx->AFR[position >> 3U];
 800353a:	f8d9 4020 	ldr.w	r4, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800353e:	00bf      	lsls	r7, r7, #2
 8003540:	f04f 0b0f 	mov.w	fp, #15
 8003544:	fa0b fb07 	lsl.w	fp, fp, r7
 8003548:	ea24 0a0b 	bic.w	sl, r4, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800354c:	690c      	ldr	r4, [r1, #16]
 800354e:	40bc      	lsls	r4, r7
 8003550:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 8003554:	f8c9 4020 	str.w	r4, [r9, #32]
 8003558:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800355c:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 800355e:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003562:	fa04 f409 	lsl.w	r4, r4, r9
 8003566:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003568:	f006 0703 	and.w	r7, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800356c:	ea04 0a0a 	and.w	sl, r4, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003570:	fa07 f709 	lsl.w	r7, r7, r9
 8003574:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->MODER = temp;
 8003578:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 800357a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800357c:	ea07 0a04 	and.w	sl, r7, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003580:	68cf      	ldr	r7, [r1, #12]
 8003582:	fa07 f709 	lsl.w	r7, r7, r9
 8003586:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800358a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800358c:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003590:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003594:	ea2a 0303 	bic.w	r3, sl, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003598:	40af      	lsls	r7, r5
 800359a:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 800359c:	6047      	str	r7, [r0, #4]
 800359e:	e754      	b.n	800344a <HAL_GPIO_Init+0x66>
 80035a0:	f04f 0901 	mov.w	r9, #1
 80035a4:	fa09 f904 	lsl.w	r9, r9, r4
 80035a8:	e795      	b.n	80034d6 <HAL_GPIO_Init+0xf2>
 80035aa:	f04f 0902 	mov.w	r9, #2
 80035ae:	fa09 f904 	lsl.w	r9, r9, r4
 80035b2:	e790      	b.n	80034d6 <HAL_GPIO_Init+0xf2>
 80035b4:	f04f 0903 	mov.w	r9, #3
 80035b8:	fa09 f904 	lsl.w	r9, r9, r4
 80035bc:	e78b      	b.n	80034d6 <HAL_GPIO_Init+0xf2>
 80035be:	f04f 0904 	mov.w	r9, #4
 80035c2:	fa09 f904 	lsl.w	r9, r9, r4
 80035c6:	e786      	b.n	80034d6 <HAL_GPIO_Init+0xf2>
 80035c8:	f04f 0905 	mov.w	r9, #5
 80035cc:	fa09 f904 	lsl.w	r9, r9, r4
 80035d0:	e781      	b.n	80034d6 <HAL_GPIO_Init+0xf2>
 80035d2:	bf00      	nop
 80035d4:	40020000 	.word	0x40020000
 80035d8:	40020800 	.word	0x40020800
 80035dc:	40020c00 	.word	0x40020c00
 80035e0:	40021000 	.word	0x40021000
 80035e4:	40021400 	.word	0x40021400
 80035e8:	40021800 	.word	0x40021800
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40013c00 	.word	0x40013c00

080035f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035f4:	b902      	cbnz	r2, 80035f8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035f6:	0409      	lsls	r1, r1, #16
 80035f8:	6181      	str	r1, [r0, #24]
 80035fa:	4770      	bx	lr

080035fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80035fc:	b530      	push	{r4, r5, lr}
 80035fe:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003600:	4b19      	ldr	r3, [pc, #100]	; (8003668 <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003602:	491a      	ldr	r1, [pc, #104]	; (800366c <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003604:	4c1a      	ldr	r4, [pc, #104]	; (8003670 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003606:	2200      	movs	r2, #0
 8003608:	9201      	str	r2, [sp, #4]
 800360a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800360c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003610:	641a      	str	r2, [r3, #64]	; 0x40
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003618:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800361a:	2301      	movs	r3, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800361c:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800361e:	600b      	str	r3, [r1, #0]
  tickstart = HAL_GetTick();
 8003620:	f7ff fc1e 	bl	8002e60 <HAL_GetTick>
 8003624:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003626:	e005      	b.n	8003634 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003628:	f7ff fc1a 	bl	8002e60 <HAL_GetTick>
 800362c:	1b40      	subs	r0, r0, r5
 800362e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003632:	d816      	bhi.n	8003662 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003634:	6863      	ldr	r3, [r4, #4]
 8003636:	03da      	lsls	r2, r3, #15
 8003638:	d5f6      	bpl.n	8003628 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800363a:	4b0e      	ldr	r3, [pc, #56]	; (8003674 <HAL_PWREx_EnableOverDrive+0x78>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800363c:	4c0c      	ldr	r4, [pc, #48]	; (8003670 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800363e:	2201      	movs	r2, #1
 8003640:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8003642:	f7ff fc0d 	bl	8002e60 <HAL_GetTick>
 8003646:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003648:	e005      	b.n	8003656 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800364a:	f7ff fc09 	bl	8002e60 <HAL_GetTick>
 800364e:	1b40      	subs	r0, r0, r5
 8003650:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003654:	d805      	bhi.n	8003662 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003656:	6863      	ldr	r3, [r4, #4]
 8003658:	039b      	lsls	r3, r3, #14
 800365a:	d5f6      	bpl.n	800364a <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800365c:	2000      	movs	r0, #0
}
 800365e:	b003      	add	sp, #12
 8003660:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8003662:	2003      	movs	r0, #3
}
 8003664:	b003      	add	sp, #12
 8003666:	bd30      	pop	{r4, r5, pc}
 8003668:	40023800 	.word	0x40023800
 800366c:	420e0040 	.word	0x420e0040
 8003670:	40007000 	.word	0x40007000
 8003674:	420e0044 	.word	0x420e0044

08003678 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003678:	b160      	cbz	r0, 8003694 <HAL_RCC_ClockConfig+0x1c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800367a:	4a48      	ldr	r2, [pc, #288]	; (800379c <HAL_RCC_ClockConfig+0x124>)
 800367c:	6813      	ldr	r3, [r2, #0]
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	428b      	cmp	r3, r1
 8003684:	d208      	bcs.n	8003698 <HAL_RCC_ClockConfig+0x20>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003686:	b2cb      	uxtb	r3, r1
 8003688:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800368a:	6813      	ldr	r3, [r2, #0]
 800368c:	f003 030f 	and.w	r3, r3, #15
 8003690:	4299      	cmp	r1, r3
 8003692:	d001      	beq.n	8003698 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8003694:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 8003696:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003698:	6803      	ldr	r3, [r0, #0]
{
 800369a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800369e:	079d      	lsls	r5, r3, #30
 80036a0:	d514      	bpl.n	80036cc <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a2:	075c      	lsls	r4, r3, #29
 80036a4:	d504      	bpl.n	80036b0 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036a6:	4c3e      	ldr	r4, [pc, #248]	; (80037a0 <HAL_RCC_ClockConfig+0x128>)
 80036a8:	68a2      	ldr	r2, [r4, #8]
 80036aa:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80036ae:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b0:	071a      	lsls	r2, r3, #28
 80036b2:	d504      	bpl.n	80036be <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036b4:	4c3a      	ldr	r4, [pc, #232]	; (80037a0 <HAL_RCC_ClockConfig+0x128>)
 80036b6:	68a2      	ldr	r2, [r4, #8]
 80036b8:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80036bc:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036be:	4c38      	ldr	r4, [pc, #224]	; (80037a0 <HAL_RCC_ClockConfig+0x128>)
 80036c0:	6885      	ldr	r5, [r0, #8]
 80036c2:	68a2      	ldr	r2, [r4, #8]
 80036c4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80036c8:	432a      	orrs	r2, r5
 80036ca:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036cc:	07df      	lsls	r7, r3, #31
 80036ce:	4604      	mov	r4, r0
 80036d0:	460d      	mov	r5, r1
 80036d2:	d522      	bpl.n	800371a <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036d4:	6842      	ldr	r2, [r0, #4]
 80036d6:	2a01      	cmp	r2, #1
 80036d8:	d05b      	beq.n	8003792 <HAL_RCC_ClockConfig+0x11a>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036da:	1e93      	subs	r3, r2, #2
 80036dc:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036de:	4b30      	ldr	r3, [pc, #192]	; (80037a0 <HAL_RCC_ClockConfig+0x128>)
 80036e0:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036e2:	d950      	bls.n	8003786 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e4:	0799      	lsls	r1, r3, #30
 80036e6:	d525      	bpl.n	8003734 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036e8:	4e2d      	ldr	r6, [pc, #180]	; (80037a0 <HAL_RCC_ClockConfig+0x128>)
 80036ea:	68b3      	ldr	r3, [r6, #8]
 80036ec:	f023 0303 	bic.w	r3, r3, #3
 80036f0:	4313      	orrs	r3, r2
 80036f2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80036f4:	f7ff fbb4 	bl	8002e60 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036f8:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80036fc:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fe:	e005      	b.n	800370c <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003700:	f7ff fbae 	bl	8002e60 <HAL_GetTick>
 8003704:	eba0 0008 	sub.w	r0, r0, r8
 8003708:	42b8      	cmp	r0, r7
 800370a:	d83f      	bhi.n	800378c <HAL_RCC_ClockConfig+0x114>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800370c:	68b3      	ldr	r3, [r6, #8]
 800370e:	6862      	ldr	r2, [r4, #4]
 8003710:	f003 030c 	and.w	r3, r3, #12
 8003714:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003718:	d1f2      	bne.n	8003700 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800371a:	4a20      	ldr	r2, [pc, #128]	; (800379c <HAL_RCC_ClockConfig+0x124>)
 800371c:	6813      	ldr	r3, [r2, #0]
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	429d      	cmp	r5, r3
 8003724:	d209      	bcs.n	800373a <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003726:	b2eb      	uxtb	r3, r5
 8003728:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800372a:	6813      	ldr	r3, [r2, #0]
 800372c:	f003 030f 	and.w	r3, r3, #15
 8003730:	429d      	cmp	r5, r3
 8003732:	d002      	beq.n	800373a <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 8003734:	2001      	movs	r0, #1
 8003736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800373a:	6823      	ldr	r3, [r4, #0]
 800373c:	075a      	lsls	r2, r3, #29
 800373e:	d506      	bpl.n	800374e <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003740:	4917      	ldr	r1, [pc, #92]	; (80037a0 <HAL_RCC_ClockConfig+0x128>)
 8003742:	68e0      	ldr	r0, [r4, #12]
 8003744:	688a      	ldr	r2, [r1, #8]
 8003746:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800374a:	4302      	orrs	r2, r0
 800374c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800374e:	071b      	lsls	r3, r3, #28
 8003750:	d507      	bpl.n	8003762 <HAL_RCC_ClockConfig+0xea>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003752:	4a13      	ldr	r2, [pc, #76]	; (80037a0 <HAL_RCC_ClockConfig+0x128>)
 8003754:	6921      	ldr	r1, [r4, #16]
 8003756:	6893      	ldr	r3, [r2, #8]
 8003758:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800375c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003760:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003762:	f000 f849 	bl	80037f8 <HAL_RCC_GetSysClockFreq>
 8003766:	4b0e      	ldr	r3, [pc, #56]	; (80037a0 <HAL_RCC_ClockConfig+0x128>)
 8003768:	490e      	ldr	r1, [pc, #56]	; (80037a4 <HAL_RCC_ClockConfig+0x12c>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	4a0e      	ldr	r2, [pc, #56]	; (80037a8 <HAL_RCC_ClockConfig+0x130>)
 800376e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003772:	5ccb      	ldrb	r3, [r1, r3]
 8003774:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (TICK_INT_PRIORITY);
 8003778:	2004      	movs	r0, #4
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800377a:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800377c:	f7ff fb26 	bl	8002dcc <HAL_InitTick>
  return HAL_OK;
 8003780:	2000      	movs	r0, #0
 8003782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003786:	0198      	lsls	r0, r3, #6
 8003788:	d4ae      	bmi.n	80036e8 <HAL_RCC_ClockConfig+0x70>
 800378a:	e7d3      	b.n	8003734 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 800378c:	2003      	movs	r0, #3
}
 800378e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003792:	4b03      	ldr	r3, [pc, #12]	; (80037a0 <HAL_RCC_ClockConfig+0x128>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	039e      	lsls	r6, r3, #14
 8003798:	d4a6      	bmi.n	80036e8 <HAL_RCC_ClockConfig+0x70>
 800379a:	e7cb      	b.n	8003734 <HAL_RCC_ClockConfig+0xbc>
 800379c:	40023c00 	.word	0x40023c00
 80037a0:	40023800 	.word	0x40023800
 80037a4:	080071c0 	.word	0x080071c0
 80037a8:	2000069c 	.word	0x2000069c

080037ac <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80037ac:	4b01      	ldr	r3, [pc, #4]	; (80037b4 <HAL_RCC_GetHCLKFreq+0x8>)
}
 80037ae:	6818      	ldr	r0, [r3, #0]
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	2000069c 	.word	0x2000069c

080037b8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037b8:	4b04      	ldr	r3, [pc, #16]	; (80037cc <HAL_RCC_GetPCLK1Freq+0x14>)
 80037ba:	4a05      	ldr	r2, [pc, #20]	; (80037d0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80037bc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80037be:	4905      	ldr	r1, [pc, #20]	; (80037d4 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037c0:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80037c4:	6808      	ldr	r0, [r1, #0]
 80037c6:	5cd3      	ldrb	r3, [r2, r3]
}
 80037c8:	40d8      	lsrs	r0, r3
 80037ca:	4770      	bx	lr
 80037cc:	40023800 	.word	0x40023800
 80037d0:	080071d0 	.word	0x080071d0
 80037d4:	2000069c 	.word	0x2000069c

080037d8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037d8:	4b04      	ldr	r3, [pc, #16]	; (80037ec <HAL_RCC_GetPCLK2Freq+0x14>)
 80037da:	4a05      	ldr	r2, [pc, #20]	; (80037f0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80037dc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80037de:	4905      	ldr	r1, [pc, #20]	; (80037f4 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037e0:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80037e4:	6808      	ldr	r0, [r1, #0]
 80037e6:	5cd3      	ldrb	r3, [r2, r3]
}
 80037e8:	40d8      	lsrs	r0, r3
 80037ea:	4770      	bx	lr
 80037ec:	40023800 	.word	0x40023800
 80037f0:	080071d0 	.word	0x080071d0
 80037f4:	2000069c 	.word	0x2000069c

080037f8 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037f8:	4928      	ldr	r1, [pc, #160]	; (800389c <HAL_RCC_GetSysClockFreq+0xa4>)
{
 80037fa:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037fc:	688b      	ldr	r3, [r1, #8]
 80037fe:	f003 030c 	and.w	r3, r3, #12
 8003802:	2b08      	cmp	r3, #8
 8003804:	d007      	beq.n	8003816 <HAL_RCC_GetSysClockFreq+0x1e>
 8003806:	2b0c      	cmp	r3, #12
 8003808:	d01d      	beq.n	8003846 <HAL_RCC_GetSysClockFreq+0x4e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800380a:	4a25      	ldr	r2, [pc, #148]	; (80038a0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800380c:	4825      	ldr	r0, [pc, #148]	; (80038a4 <HAL_RCC_GetSysClockFreq+0xac>)
 800380e:	2b04      	cmp	r3, #4
 8003810:	bf18      	it	ne
 8003812:	4610      	movne	r0, r2
 8003814:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003816:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003818:	684b      	ldr	r3, [r1, #4]
 800381a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800381e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003822:	d130      	bne.n	8003886 <HAL_RCC_GetSysClockFreq+0x8e>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003824:	6849      	ldr	r1, [r1, #4]
 8003826:	481e      	ldr	r0, [pc, #120]	; (80038a0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003828:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800382c:	fba1 0100 	umull	r0, r1, r1, r0
 8003830:	f7fc fce8 	bl	8000204 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003834:	4b19      	ldr	r3, [pc, #100]	; (800389c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800383c:	3301      	adds	r3, #1
 800383e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003840:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8003844:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003846:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003848:	684b      	ldr	r3, [r1, #4]
 800384a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800384e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003852:	d10e      	bne.n	8003872 <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003854:	6849      	ldr	r1, [r1, #4]
 8003856:	4812      	ldr	r0, [pc, #72]	; (80038a0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003858:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800385c:	fba1 0100 	umull	r0, r1, r1, r0
 8003860:	f7fc fcd0 	bl	8000204 <__aeabi_uldivmod>
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003864:	4b0d      	ldr	r3, [pc, #52]	; (800389c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f3c3 7302 	ubfx	r3, r3, #28, #3

      sysclockfreq = pllvco/pllr;
 800386c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003870:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003872:	684b      	ldr	r3, [r1, #4]
 8003874:	480b      	ldr	r0, [pc, #44]	; (80038a4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003876:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800387a:	fba3 0100 	umull	r0, r1, r3, r0
 800387e:	2300      	movs	r3, #0
 8003880:	f7fc fcc0 	bl	8000204 <__aeabi_uldivmod>
 8003884:	e7ee      	b.n	8003864 <HAL_RCC_GetSysClockFreq+0x6c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003886:	684b      	ldr	r3, [r1, #4]
 8003888:	4806      	ldr	r0, [pc, #24]	; (80038a4 <HAL_RCC_GetSysClockFreq+0xac>)
 800388a:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800388e:	fba3 0100 	umull	r0, r1, r3, r0
 8003892:	2300      	movs	r3, #0
 8003894:	f7fc fcb6 	bl	8000204 <__aeabi_uldivmod>
 8003898:	e7cc      	b.n	8003834 <HAL_RCC_GetSysClockFreq+0x3c>
 800389a:	bf00      	nop
 800389c:	40023800 	.word	0x40023800
 80038a0:	00f42400 	.word	0x00f42400
 80038a4:	007a1200 	.word	0x007a1200

080038a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ac:	6803      	ldr	r3, [r0, #0]
 80038ae:	07da      	lsls	r2, r3, #31
{
 80038b0:	b082      	sub	sp, #8
 80038b2:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038b4:	d536      	bpl.n	8003924 <HAL_RCC_OscConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80038b6:	49aa      	ldr	r1, [pc, #680]	; (8003b60 <HAL_RCC_OscConfig+0x2b8>)
 80038b8:	688a      	ldr	r2, [r1, #8]
 80038ba:	f002 020c 	and.w	r2, r2, #12
 80038be:	2a04      	cmp	r2, #4
 80038c0:	f000 80d6 	beq.w	8003a70 <HAL_RCC_OscConfig+0x1c8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80038c4:	688a      	ldr	r2, [r1, #8]
 80038c6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80038ca:	2a08      	cmp	r2, #8
 80038cc:	f000 80cc 	beq.w	8003a68 <HAL_RCC_OscConfig+0x1c0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038d0:	49a3      	ldr	r1, [pc, #652]	; (8003b60 <HAL_RCC_OscConfig+0x2b8>)
 80038d2:	688a      	ldr	r2, [r1, #8]
 80038d4:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80038d8:	2a0c      	cmp	r2, #12
 80038da:	f000 8158 	beq.w	8003b8e <HAL_RCC_OscConfig+0x2e6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038de:	6863      	ldr	r3, [r4, #4]
 80038e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e4:	f000 8105 	beq.w	8003af2 <HAL_RCC_OscConfig+0x24a>
 80038e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038ec:	f000 816b 	beq.w	8003bc6 <HAL_RCC_OscConfig+0x31e>
 80038f0:	4d9b      	ldr	r5, [pc, #620]	; (8003b60 <HAL_RCC_OscConfig+0x2b8>)
 80038f2:	682a      	ldr	r2, [r5, #0]
 80038f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80038f8:	602a      	str	r2, [r5, #0]
 80038fa:	682a      	ldr	r2, [r5, #0]
 80038fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003900:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003902:	2b00      	cmp	r3, #0
 8003904:	f040 80fa 	bne.w	8003afc <HAL_RCC_OscConfig+0x254>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003908:	f7ff faaa 	bl	8002e60 <HAL_GetTick>
 800390c:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800390e:	e005      	b.n	800391c <HAL_RCC_OscConfig+0x74>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003910:	f7ff faa6 	bl	8002e60 <HAL_GetTick>
 8003914:	1b80      	subs	r0, r0, r6
 8003916:	2864      	cmp	r0, #100	; 0x64
 8003918:	f200 810e 	bhi.w	8003b38 <HAL_RCC_OscConfig+0x290>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391c:	682b      	ldr	r3, [r5, #0]
 800391e:	0399      	lsls	r1, r3, #14
 8003920:	d4f6      	bmi.n	8003910 <HAL_RCC_OscConfig+0x68>
 8003922:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003924:	079a      	lsls	r2, r3, #30
 8003926:	d52f      	bpl.n	8003988 <HAL_RCC_OscConfig+0xe0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003928:	4a8d      	ldr	r2, [pc, #564]	; (8003b60 <HAL_RCC_OscConfig+0x2b8>)
 800392a:	6891      	ldr	r1, [r2, #8]
 800392c:	f011 0f0c 	tst.w	r1, #12
 8003930:	f000 80ac 	beq.w	8003a8c <HAL_RCC_OscConfig+0x1e4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003934:	6891      	ldr	r1, [r2, #8]
 8003936:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800393a:	2908      	cmp	r1, #8
 800393c:	f000 80a2 	beq.w	8003a84 <HAL_RCC_OscConfig+0x1dc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003940:	4987      	ldr	r1, [pc, #540]	; (8003b60 <HAL_RCC_OscConfig+0x2b8>)
 8003942:	688a      	ldr	r2, [r1, #8]
 8003944:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003948:	2a0c      	cmp	r2, #12
 800394a:	f000 8177 	beq.w	8003c3c <HAL_RCC_OscConfig+0x394>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800394e:	68e3      	ldr	r3, [r4, #12]
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 8121 	beq.w	8003b98 <HAL_RCC_OscConfig+0x2f0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003956:	4b83      	ldr	r3, [pc, #524]	; (8003b64 <HAL_RCC_OscConfig+0x2bc>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003958:	4d81      	ldr	r5, [pc, #516]	; (8003b60 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_ENABLE();
 800395a:	2201      	movs	r2, #1
 800395c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800395e:	f7ff fa7f 	bl	8002e60 <HAL_GetTick>
 8003962:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003964:	e005      	b.n	8003972 <HAL_RCC_OscConfig+0xca>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003966:	f7ff fa7b 	bl	8002e60 <HAL_GetTick>
 800396a:	1b80      	subs	r0, r0, r6
 800396c:	2802      	cmp	r0, #2
 800396e:	f200 80e3 	bhi.w	8003b38 <HAL_RCC_OscConfig+0x290>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003972:	682b      	ldr	r3, [r5, #0]
 8003974:	0798      	lsls	r0, r3, #30
 8003976:	d5f6      	bpl.n	8003966 <HAL_RCC_OscConfig+0xbe>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003978:	682b      	ldr	r3, [r5, #0]
 800397a:	6922      	ldr	r2, [r4, #16]
 800397c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003980:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003984:	602b      	str	r3, [r5, #0]
 8003986:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003988:	071a      	lsls	r2, r3, #28
 800398a:	d515      	bpl.n	80039b8 <HAL_RCC_OscConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800398c:	6963      	ldr	r3, [r4, #20]
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 8087 	beq.w	8003aa2 <HAL_RCC_OscConfig+0x1fa>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003994:	4b74      	ldr	r3, [pc, #464]	; (8003b68 <HAL_RCC_OscConfig+0x2c0>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003996:	4d72      	ldr	r5, [pc, #456]	; (8003b60 <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_ENABLE();
 8003998:	2201      	movs	r2, #1
 800399a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800399c:	f7ff fa60 	bl	8002e60 <HAL_GetTick>
 80039a0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039a2:	e005      	b.n	80039b0 <HAL_RCC_OscConfig+0x108>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039a4:	f7ff fa5c 	bl	8002e60 <HAL_GetTick>
 80039a8:	1b80      	subs	r0, r0, r6
 80039aa:	2802      	cmp	r0, #2
 80039ac:	f200 80c4 	bhi.w	8003b38 <HAL_RCC_OscConfig+0x290>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039b0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80039b2:	079b      	lsls	r3, r3, #30
 80039b4:	d5f6      	bpl.n	80039a4 <HAL_RCC_OscConfig+0xfc>
 80039b6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b8:	0758      	lsls	r0, r3, #29
 80039ba:	d420      	bmi.n	80039fe <HAL_RCC_OscConfig+0x156>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039bc:	69a3      	ldr	r3, [r4, #24]
 80039be:	b1d3      	cbz	r3, 80039f6 <HAL_RCC_OscConfig+0x14e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039c0:	4d67      	ldr	r5, [pc, #412]	; (8003b60 <HAL_RCC_OscConfig+0x2b8>)
 80039c2:	68aa      	ldr	r2, [r5, #8]
 80039c4:	f002 020c 	and.w	r2, r2, #12
 80039c8:	2a08      	cmp	r2, #8
 80039ca:	d066      	beq.n	8003a9a <HAL_RCC_OscConfig+0x1f2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039cc:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ce:	4b67      	ldr	r3, [pc, #412]	; (8003b6c <HAL_RCC_OscConfig+0x2c4>)
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039d6:	f000 8100 	beq.w	8003bda <HAL_RCC_OscConfig+0x332>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039da:	f7ff fa41 	bl	8002e60 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039de:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80039e0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e2:	e005      	b.n	80039f0 <HAL_RCC_OscConfig+0x148>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039e4:	f7ff fa3c 	bl	8002e60 <HAL_GetTick>
 80039e8:	1b40      	subs	r0, r0, r5
 80039ea:	2802      	cmp	r0, #2
 80039ec:	f200 80a4 	bhi.w	8003b38 <HAL_RCC_OscConfig+0x290>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f0:	6823      	ldr	r3, [r4, #0]
 80039f2:	019b      	lsls	r3, r3, #6
 80039f4:	d4f6      	bmi.n	80039e4 <HAL_RCC_OscConfig+0x13c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80039f6:	2000      	movs	r0, #0
}
 80039f8:	b002      	add	sp, #8
 80039fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039fe:	4a58      	ldr	r2, [pc, #352]	; (8003b60 <HAL_RCC_OscConfig+0x2b8>)
 8003a00:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003a02:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8003a06:	d068      	beq.n	8003ada <HAL_RCC_OscConfig+0x232>
    FlagStatus       pwrclkchanged = RESET;
 8003a08:	2600      	movs	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0a:	4d59      	ldr	r5, [pc, #356]	; (8003b70 <HAL_RCC_OscConfig+0x2c8>)
 8003a0c:	682b      	ldr	r3, [r5, #0]
 8003a0e:	05d9      	lsls	r1, r3, #23
 8003a10:	f140 8082 	bpl.w	8003b18 <HAL_RCC_OscConfig+0x270>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a14:	68a3      	ldr	r3, [r4, #8]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	f000 80cf 	beq.w	8003bba <HAL_RCC_OscConfig+0x312>
 8003a1c:	2b05      	cmp	r3, #5
 8003a1e:	f000 808f 	beq.w	8003b40 <HAL_RCC_OscConfig+0x298>
 8003a22:	4d4f      	ldr	r5, [pc, #316]	; (8003b60 <HAL_RCC_OscConfig+0x2b8>)
 8003a24:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003a26:	f022 0201 	bic.w	r2, r2, #1
 8003a2a:	672a      	str	r2, [r5, #112]	; 0x70
 8003a2c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003a2e:	f022 0204 	bic.w	r2, r2, #4
 8003a32:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f040 808c 	bne.w	8003b52 <HAL_RCC_OscConfig+0x2aa>
      tickstart = HAL_GetTick();
 8003a3a:	f7ff fa11 	bl	8002e60 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a3e:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003a42:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a44:	e005      	b.n	8003a52 <HAL_RCC_OscConfig+0x1aa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a46:	f7ff fa0b 	bl	8002e60 <HAL_GetTick>
 8003a4a:	eba0 0008 	sub.w	r0, r0, r8
 8003a4e:	42b8      	cmp	r0, r7
 8003a50:	d872      	bhi.n	8003b38 <HAL_RCC_OscConfig+0x290>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a52:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003a54:	0798      	lsls	r0, r3, #30
 8003a56:	d4f6      	bmi.n	8003a46 <HAL_RCC_OscConfig+0x19e>
    if(pwrclkchanged == SET)
 8003a58:	2e00      	cmp	r6, #0
 8003a5a:	d0af      	beq.n	80039bc <HAL_RCC_OscConfig+0x114>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a5c:	4a40      	ldr	r2, [pc, #256]	; (8003b60 <HAL_RCC_OscConfig+0x2b8>)
 8003a5e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a64:	6413      	str	r3, [r2, #64]	; 0x40
 8003a66:	e7a9      	b.n	80039bc <HAL_RCC_OscConfig+0x114>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a68:	684a      	ldr	r2, [r1, #4]
 8003a6a:	0257      	lsls	r7, r2, #9
 8003a6c:	f57f af30 	bpl.w	80038d0 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a70:	4a3b      	ldr	r2, [pc, #236]	; (8003b60 <HAL_RCC_OscConfig+0x2b8>)
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	0395      	lsls	r5, r2, #14
 8003a76:	f57f af55 	bpl.w	8003924 <HAL_RCC_OscConfig+0x7c>
 8003a7a:	6862      	ldr	r2, [r4, #4]
 8003a7c:	2a00      	cmp	r2, #0
 8003a7e:	f47f af51 	bne.w	8003924 <HAL_RCC_OscConfig+0x7c>
 8003a82:	e00a      	b.n	8003a9a <HAL_RCC_OscConfig+0x1f2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a84:	6852      	ldr	r2, [r2, #4]
 8003a86:	0257      	lsls	r7, r2, #9
 8003a88:	f53f af5a 	bmi.w	8003940 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a8c:	4a34      	ldr	r2, [pc, #208]	; (8003b60 <HAL_RCC_OscConfig+0x2b8>)
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	0795      	lsls	r5, r2, #30
 8003a92:	d516      	bpl.n	8003ac2 <HAL_RCC_OscConfig+0x21a>
 8003a94:	68e2      	ldr	r2, [r4, #12]
 8003a96:	2a01      	cmp	r2, #1
 8003a98:	d013      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x21a>
        return HAL_ERROR;
 8003a9a:	2001      	movs	r0, #1
}
 8003a9c:	b002      	add	sp, #8
 8003a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8003aa2:	4a31      	ldr	r2, [pc, #196]	; (8003b68 <HAL_RCC_OscConfig+0x2c0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aa4:	4d2e      	ldr	r5, [pc, #184]	; (8003b60 <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_DISABLE();
 8003aa6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003aa8:	f7ff f9da 	bl	8002e60 <HAL_GetTick>
 8003aac:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aae:	e004      	b.n	8003aba <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ab0:	f7ff f9d6 	bl	8002e60 <HAL_GetTick>
 8003ab4:	1b80      	subs	r0, r0, r6
 8003ab6:	2802      	cmp	r0, #2
 8003ab8:	d83e      	bhi.n	8003b38 <HAL_RCC_OscConfig+0x290>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aba:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003abc:	079f      	lsls	r7, r3, #30
 8003abe:	d4f7      	bmi.n	8003ab0 <HAL_RCC_OscConfig+0x208>
 8003ac0:	e779      	b.n	80039b6 <HAL_RCC_OscConfig+0x10e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac2:	4927      	ldr	r1, [pc, #156]	; (8003b60 <HAL_RCC_OscConfig+0x2b8>)
 8003ac4:	6920      	ldr	r0, [r4, #16]
 8003ac6:	680a      	ldr	r2, [r1, #0]
 8003ac8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003acc:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003ad0:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad2:	071a      	lsls	r2, r3, #28
 8003ad4:	f57f af70 	bpl.w	80039b8 <HAL_RCC_OscConfig+0x110>
 8003ad8:	e758      	b.n	800398c <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ada:	9301      	str	r3, [sp, #4]
 8003adc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8003ae4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aea:	9301      	str	r3, [sp, #4]
 8003aec:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003aee:	2601      	movs	r6, #1
 8003af0:	e78b      	b.n	8003a0a <HAL_RCC_OscConfig+0x162>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003af2:	4a1b      	ldr	r2, [pc, #108]	; (8003b60 <HAL_RCC_OscConfig+0x2b8>)
 8003af4:	6813      	ldr	r3, [r2, #0]
 8003af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003afa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003afc:	f7ff f9b0 	bl	8002e60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b00:	4d17      	ldr	r5, [pc, #92]	; (8003b60 <HAL_RCC_OscConfig+0x2b8>)
        tickstart = HAL_GetTick();
 8003b02:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b04:	e004      	b.n	8003b10 <HAL_RCC_OscConfig+0x268>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b06:	f7ff f9ab 	bl	8002e60 <HAL_GetTick>
 8003b0a:	1b80      	subs	r0, r0, r6
 8003b0c:	2864      	cmp	r0, #100	; 0x64
 8003b0e:	d813      	bhi.n	8003b38 <HAL_RCC_OscConfig+0x290>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b10:	682b      	ldr	r3, [r5, #0]
 8003b12:	0398      	lsls	r0, r3, #14
 8003b14:	d5f7      	bpl.n	8003b06 <HAL_RCC_OscConfig+0x25e>
 8003b16:	e704      	b.n	8003922 <HAL_RCC_OscConfig+0x7a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b18:	682b      	ldr	r3, [r5, #0]
 8003b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b1e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003b20:	f7ff f99e 	bl	8002e60 <HAL_GetTick>
 8003b24:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b26:	682b      	ldr	r3, [r5, #0]
 8003b28:	05da      	lsls	r2, r3, #23
 8003b2a:	f53f af73 	bmi.w	8003a14 <HAL_RCC_OscConfig+0x16c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b2e:	f7ff f997 	bl	8002e60 <HAL_GetTick>
 8003b32:	1bc0      	subs	r0, r0, r7
 8003b34:	2802      	cmp	r0, #2
 8003b36:	d9f6      	bls.n	8003b26 <HAL_RCC_OscConfig+0x27e>
            return HAL_TIMEOUT;
 8003b38:	2003      	movs	r0, #3
}
 8003b3a:	b002      	add	sp, #8
 8003b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b40:	4b07      	ldr	r3, [pc, #28]	; (8003b60 <HAL_RCC_OscConfig+0x2b8>)
 8003b42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b44:	f042 0204 	orr.w	r2, r2, #4
 8003b48:	671a      	str	r2, [r3, #112]	; 0x70
 8003b4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b4c:	f042 0201 	orr.w	r2, r2, #1
 8003b50:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003b52:	f7ff f985 	bl	8002e60 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b56:	4d02      	ldr	r5, [pc, #8]	; (8003b60 <HAL_RCC_OscConfig+0x2b8>)
      tickstart = HAL_GetTick();
 8003b58:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b5a:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b5e:	e00f      	b.n	8003b80 <HAL_RCC_OscConfig+0x2d8>
 8003b60:	40023800 	.word	0x40023800
 8003b64:	42470000 	.word	0x42470000
 8003b68:	42470e80 	.word	0x42470e80
 8003b6c:	42470060 	.word	0x42470060
 8003b70:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b74:	f7ff f974 	bl	8002e60 <HAL_GetTick>
 8003b78:	eba0 0008 	sub.w	r0, r0, r8
 8003b7c:	42b8      	cmp	r0, r7
 8003b7e:	d8db      	bhi.n	8003b38 <HAL_RCC_OscConfig+0x290>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b80:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003b82:	079b      	lsls	r3, r3, #30
 8003b84:	d5f6      	bpl.n	8003b74 <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 8003b86:	2e00      	cmp	r6, #0
 8003b88:	f43f af18 	beq.w	80039bc <HAL_RCC_OscConfig+0x114>
 8003b8c:	e766      	b.n	8003a5c <HAL_RCC_OscConfig+0x1b4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b8e:	684a      	ldr	r2, [r1, #4]
 8003b90:	0256      	lsls	r6, r2, #9
 8003b92:	f57f aea4 	bpl.w	80038de <HAL_RCC_OscConfig+0x36>
 8003b96:	e76b      	b.n	8003a70 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 8003b98:	4a2b      	ldr	r2, [pc, #172]	; (8003c48 <HAL_RCC_OscConfig+0x3a0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b9a:	4d2c      	ldr	r5, [pc, #176]	; (8003c4c <HAL_RCC_OscConfig+0x3a4>)
        __HAL_RCC_HSI_DISABLE();
 8003b9c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003b9e:	f7ff f95f 	bl	8002e60 <HAL_GetTick>
 8003ba2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ba4:	e004      	b.n	8003bb0 <HAL_RCC_OscConfig+0x308>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ba6:	f7ff f95b 	bl	8002e60 <HAL_GetTick>
 8003baa:	1b80      	subs	r0, r0, r6
 8003bac:	2802      	cmp	r0, #2
 8003bae:	d8c3      	bhi.n	8003b38 <HAL_RCC_OscConfig+0x290>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bb0:	682b      	ldr	r3, [r5, #0]
 8003bb2:	0799      	lsls	r1, r3, #30
 8003bb4:	d4f7      	bmi.n	8003ba6 <HAL_RCC_OscConfig+0x2fe>
 8003bb6:	6823      	ldr	r3, [r4, #0]
 8003bb8:	e6e6      	b.n	8003988 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bba:	4a24      	ldr	r2, [pc, #144]	; (8003c4c <HAL_RCC_OscConfig+0x3a4>)
 8003bbc:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003bbe:	f043 0301 	orr.w	r3, r3, #1
 8003bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc4:	e7c5      	b.n	8003b52 <HAL_RCC_OscConfig+0x2aa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bc6:	4b21      	ldr	r3, [pc, #132]	; (8003c4c <HAL_RCC_OscConfig+0x3a4>)
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	e790      	b.n	8003afc <HAL_RCC_OscConfig+0x254>
        tickstart = HAL_GetTick();
 8003bda:	f7ff f941 	bl	8002e60 <HAL_GetTick>
 8003bde:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be0:	e004      	b.n	8003bec <HAL_RCC_OscConfig+0x344>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003be2:	f7ff f93d 	bl	8002e60 <HAL_GetTick>
 8003be6:	1b80      	subs	r0, r0, r6
 8003be8:	2802      	cmp	r0, #2
 8003bea:	d8a5      	bhi.n	8003b38 <HAL_RCC_OscConfig+0x290>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bec:	682b      	ldr	r3, [r5, #0]
 8003bee:	0199      	lsls	r1, r3, #6
 8003bf0:	d4f7      	bmi.n	8003be2 <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bf2:	69e3      	ldr	r3, [r4, #28]
 8003bf4:	f8d4 e020 	ldr.w	lr, [r4, #32]
 8003bf8:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8003bfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bfc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003bfe:	6b20      	ldr	r0, [r4, #48]	; 0x30
        __HAL_RCC_PLL_ENABLE();
 8003c00:	4913      	ldr	r1, [pc, #76]	; (8003c50 <HAL_RCC_OscConfig+0x3a8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c02:	4c12      	ldr	r4, [pc, #72]	; (8003c4c <HAL_RCC_OscConfig+0x3a4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c04:	ea43 030e 	orr.w	r3, r3, lr
 8003c08:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 8003c0c:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8003c10:	0852      	lsrs	r2, r2, #1
 8003c12:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 8003c16:	3a01      	subs	r2, #1
 8003c18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8003c1c:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c1e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003c20:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8003c22:	f7ff f91d 	bl	8002e60 <HAL_GetTick>
 8003c26:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c28:	e004      	b.n	8003c34 <HAL_RCC_OscConfig+0x38c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c2a:	f7ff f919 	bl	8002e60 <HAL_GetTick>
 8003c2e:	1b40      	subs	r0, r0, r5
 8003c30:	2802      	cmp	r0, #2
 8003c32:	d881      	bhi.n	8003b38 <HAL_RCC_OscConfig+0x290>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c34:	6823      	ldr	r3, [r4, #0]
 8003c36:	019a      	lsls	r2, r3, #6
 8003c38:	d5f7      	bpl.n	8003c2a <HAL_RCC_OscConfig+0x382>
 8003c3a:	e6dc      	b.n	80039f6 <HAL_RCC_OscConfig+0x14e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c3c:	684a      	ldr	r2, [r1, #4]
 8003c3e:	0256      	lsls	r6, r2, #9
 8003c40:	f53f ae85 	bmi.w	800394e <HAL_RCC_OscConfig+0xa6>
 8003c44:	e722      	b.n	8003a8c <HAL_RCC_OscConfig+0x1e4>
 8003c46:	bf00      	nop
 8003c48:	42470000 	.word	0x42470000
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	42470060 	.word	0x42470060

08003c54 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c54:	2800      	cmp	r0, #0
 8003c56:	f000 8098 	beq.w	8003d8a <HAL_TIM_Base_Init+0x136>
{
 8003c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c5c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003c60:	4604      	mov	r4, r0
 8003c62:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d066      	beq.n	8003d38 <HAL_TIM_Base_Init+0xe4>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c6a:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c6c:	4948      	ldr	r1, [pc, #288]	; (8003d90 <HAL_TIM_Base_Init+0x13c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003c6e:	2202      	movs	r2, #2
 8003c70:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c74:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8003c76:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c78:	d063      	beq.n	8003d42 <HAL_TIM_Base_Init+0xee>
 8003c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c7e:	d072      	beq.n	8003d66 <HAL_TIM_Base_Init+0x112>
 8003c80:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8003c84:	428b      	cmp	r3, r1
 8003c86:	d02d      	beq.n	8003ce4 <HAL_TIM_Base_Init+0x90>
 8003c88:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003c8c:	428b      	cmp	r3, r1
 8003c8e:	d029      	beq.n	8003ce4 <HAL_TIM_Base_Init+0x90>
 8003c90:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003c94:	428b      	cmp	r3, r1
 8003c96:	d025      	beq.n	8003ce4 <HAL_TIM_Base_Init+0x90>
 8003c98:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8003c9c:	428b      	cmp	r3, r1
 8003c9e:	d021      	beq.n	8003ce4 <HAL_TIM_Base_Init+0x90>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ca0:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8003ca4:	428b      	cmp	r3, r1
 8003ca6:	d039      	beq.n	8003d1c <HAL_TIM_Base_Init+0xc8>
 8003ca8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003cac:	428b      	cmp	r3, r1
 8003cae:	d035      	beq.n	8003d1c <HAL_TIM_Base_Init+0xc8>
 8003cb0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003cb4:	428b      	cmp	r3, r1
 8003cb6:	d031      	beq.n	8003d1c <HAL_TIM_Base_Init+0xc8>
 8003cb8:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 8003cbc:	428b      	cmp	r3, r1
 8003cbe:	d02d      	beq.n	8003d1c <HAL_TIM_Base_Init+0xc8>
 8003cc0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003cc4:	428b      	cmp	r3, r1
 8003cc6:	d029      	beq.n	8003d1c <HAL_TIM_Base_Init+0xc8>
 8003cc8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003ccc:	428b      	cmp	r3, r1
 8003cce:	d025      	beq.n	8003d1c <HAL_TIM_Base_Init+0xc8>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cd0:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cd2:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cd4:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cda:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8003cdc:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cde:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003ce0:	6299      	str	r1, [r3, #40]	; 0x28
 8003ce2:	e015      	b.n	8003d10 <HAL_TIM_Base_Init+0xbc>
    tmpcr1 |= Structure->CounterMode;
 8003ce4:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ce6:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ce8:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cea:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8003cec:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003cf2:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cf4:	f422 7240 	bic.w	r2, r2, #768	; 0x300

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cf8:	4926      	ldr	r1, [pc, #152]	; (8003d94 <HAL_TIM_Base_Init+0x140>)
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cfa:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d00:	4302      	orrs	r2, r0
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d02:	428b      	cmp	r3, r1
  TIMx->CR1 = tmpcr1;
 8003d04:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d06:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003d08:	629d      	str	r5, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d0a:	d101      	bne.n	8003d10 <HAL_TIM_Base_Init+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d0c:	6962      	ldr	r2, [r4, #20]
 8003d0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d10:	2201      	movs	r2, #1
 8003d12:	615a      	str	r2, [r3, #20]
  return HAL_OK;
 8003d14:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003d16:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  return HAL_OK;
 8003d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d1c:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d1e:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d20:	68e5      	ldr	r5, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8003d22:	6861      	ldr	r1, [r4, #4]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d24:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d28:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d2e:	4302      	orrs	r2, r0
  TIMx->CR1 = tmpcr1;
 8003d30:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d32:	62dd      	str	r5, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003d34:	6299      	str	r1, [r3, #40]	; 0x28
 8003d36:	e7eb      	b.n	8003d10 <HAL_TIM_Base_Init+0xbc>
    htim->Lock = HAL_UNLOCKED;
 8003d38:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003d3c:	f7fe f9ba 	bl	80020b4 <HAL_TIM_Base_MspInit>
 8003d40:	e793      	b.n	8003c6a <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= Structure->CounterMode;
 8003d42:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d44:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d46:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d48:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003d4c:	432a      	orrs	r2, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d4e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d52:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d58:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8003d5a:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d5c:	68e2      	ldr	r2, [r4, #12]
 8003d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003d60:	6862      	ldr	r2, [r4, #4]
 8003d62:	629a      	str	r2, [r3, #40]	; 0x28
 8003d64:	e7d2      	b.n	8003d0c <HAL_TIM_Base_Init+0xb8>
    tmpcr1 |= Structure->CounterMode;
 8003d66:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d68:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d6a:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d6c:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8003d6e:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d70:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003d74:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d76:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d7a:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d80:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8003d82:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d84:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003d86:	629d      	str	r5, [r3, #40]	; 0x28
 8003d88:	e7c2      	b.n	8003d10 <HAL_TIM_Base_Init+0xbc>
    return HAL_ERROR;
 8003d8a:	2001      	movs	r0, #1
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	40010000 	.word	0x40010000
 8003d94:	40010400 	.word	0x40010400

08003d98 <HAL_TIM_PWM_MspInit>:
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop

08003d9c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003d9c:	2800      	cmp	r0, #0
 8003d9e:	f000 8098 	beq.w	8003ed2 <HAL_TIM_PWM_Init+0x136>
{
 8003da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003da4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003da8:	4604      	mov	r4, r0
 8003daa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d066      	beq.n	8003e80 <HAL_TIM_PWM_Init+0xe4>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003db2:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003db4:	4948      	ldr	r1, [pc, #288]	; (8003ed8 <HAL_TIM_PWM_Init+0x13c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003db6:	2202      	movs	r2, #2
 8003db8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dbc:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8003dbe:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dc0:	d063      	beq.n	8003e8a <HAL_TIM_PWM_Init+0xee>
 8003dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc6:	d072      	beq.n	8003eae <HAL_TIM_PWM_Init+0x112>
 8003dc8:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8003dcc:	428b      	cmp	r3, r1
 8003dce:	d02d      	beq.n	8003e2c <HAL_TIM_PWM_Init+0x90>
 8003dd0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003dd4:	428b      	cmp	r3, r1
 8003dd6:	d029      	beq.n	8003e2c <HAL_TIM_PWM_Init+0x90>
 8003dd8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003ddc:	428b      	cmp	r3, r1
 8003dde:	d025      	beq.n	8003e2c <HAL_TIM_PWM_Init+0x90>
 8003de0:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8003de4:	428b      	cmp	r3, r1
 8003de6:	d021      	beq.n	8003e2c <HAL_TIM_PWM_Init+0x90>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003de8:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8003dec:	428b      	cmp	r3, r1
 8003dee:	d039      	beq.n	8003e64 <HAL_TIM_PWM_Init+0xc8>
 8003df0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003df4:	428b      	cmp	r3, r1
 8003df6:	d035      	beq.n	8003e64 <HAL_TIM_PWM_Init+0xc8>
 8003df8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003dfc:	428b      	cmp	r3, r1
 8003dfe:	d031      	beq.n	8003e64 <HAL_TIM_PWM_Init+0xc8>
 8003e00:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 8003e04:	428b      	cmp	r3, r1
 8003e06:	d02d      	beq.n	8003e64 <HAL_TIM_PWM_Init+0xc8>
 8003e08:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003e0c:	428b      	cmp	r3, r1
 8003e0e:	d029      	beq.n	8003e64 <HAL_TIM_PWM_Init+0xc8>
 8003e10:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003e14:	428b      	cmp	r3, r1
 8003e16:	d025      	beq.n	8003e64 <HAL_TIM_PWM_Init+0xc8>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e18:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e1a:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8003e1c:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e22:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8003e24:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e26:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003e28:	6299      	str	r1, [r3, #40]	; 0x28
 8003e2a:	e015      	b.n	8003e58 <HAL_TIM_PWM_Init+0xbc>
    tmpcr1 |= Structure->CounterMode;
 8003e2c:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e2e:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e30:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e32:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8003e34:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e36:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003e3a:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e3c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e40:	4926      	ldr	r1, [pc, #152]	; (8003edc <HAL_TIM_PWM_Init+0x140>)
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e42:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e48:	4302      	orrs	r2, r0
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e4a:	428b      	cmp	r3, r1
  TIMx->CR1 = tmpcr1;
 8003e4c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e4e:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003e50:	629d      	str	r5, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e52:	d101      	bne.n	8003e58 <HAL_TIM_PWM_Init+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8003e54:	6962      	ldr	r2, [r4, #20]
 8003e56:	631a      	str	r2, [r3, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003e58:	2201      	movs	r2, #1
 8003e5a:	615a      	str	r2, [r3, #20]
  return HAL_OK;
 8003e5c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003e5e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  return HAL_OK;
 8003e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e64:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e66:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e68:	68e5      	ldr	r5, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8003e6a:	6861      	ldr	r1, [r4, #4]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e6c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e70:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e76:	4302      	orrs	r2, r0
  TIMx->CR1 = tmpcr1;
 8003e78:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e7a:	62dd      	str	r5, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003e7c:	6299      	str	r1, [r3, #40]	; 0x28
 8003e7e:	e7eb      	b.n	8003e58 <HAL_TIM_PWM_Init+0xbc>
    htim->Lock = HAL_UNLOCKED;
 8003e80:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003e84:	f7ff ff88 	bl	8003d98 <HAL_TIM_PWM_MspInit>
 8003e88:	e793      	b.n	8003db2 <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= Structure->CounterMode;
 8003e8a:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e8c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e8e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e90:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003e94:	432a      	orrs	r2, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e96:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e9a:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ea0:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8003ea2:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ea4:	68e2      	ldr	r2, [r4, #12]
 8003ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003ea8:	6862      	ldr	r2, [r4, #4]
 8003eaa:	629a      	str	r2, [r3, #40]	; 0x28
 8003eac:	e7d2      	b.n	8003e54 <HAL_TIM_PWM_Init+0xb8>
    tmpcr1 |= Structure->CounterMode;
 8003eae:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eb0:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eb2:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eb4:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8003eb6:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eb8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003ebc:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ebe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ec2:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ec4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ec8:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8003eca:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ecc:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003ece:	629d      	str	r5, [r3, #40]	; 0x28
 8003ed0:	e7c2      	b.n	8003e58 <HAL_TIM_PWM_Init+0xbc>
    return HAL_ERROR;
 8003ed2:	2001      	movs	r0, #1
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	40010000 	.word	0x40010000
 8003edc:	40010400 	.word	0x40010400

08003ee0 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8003ee0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d047      	beq.n	8003f78 <HAL_TIM_PWM_ConfigChannel+0x98>
{
 8003ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8003eea:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8003eec:	2401      	movs	r4, #1
 8003eee:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8003ef6:	2a0c      	cmp	r2, #12
 8003ef8:	d836      	bhi.n	8003f68 <HAL_TIM_PWM_ConfigChannel+0x88>
 8003efa:	e8df f002 	tbb	[pc, r2]
 8003efe:	356c      	.short	0x356c
 8003f00:	35073535 	.word	0x35073535
 8003f04:	35983535 	.word	0x35983535
 8003f08:	3535      	.short	0x3535
 8003f0a:	3f          	.byte	0x3f
 8003f0b:	00          	.byte	0x00
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f0c:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f0e:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f12:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f14:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f16:	4e74      	ldr	r6, [pc, #464]	; (80040e8 <HAL_TIM_PWM_ConfigChannel+0x208>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f18:	f025 0510 	bic.w	r5, r5, #16
 8003f1c:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8003f1e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003f20:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8003f22:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8003f24:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f28:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f2c:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f2e:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f32:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f36:	f000 80bb 	beq.w	80040b0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8003f3a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003f3e:	42b3      	cmp	r3, r6
 8003f40:	f000 80b6 	beq.w	80040b0 <HAL_TIM_PWM_ConfigChannel+0x1d0>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f44:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003f46:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003f48:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003f4a:	639e      	str	r6, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f4c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f4e:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f50:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f52:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8003f56:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f58:	6999      	ldr	r1, [r3, #24]
 8003f5a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003f5e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f60:	699a      	ldr	r2, [r3, #24]
 8003f62:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003f66:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8003f68:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003f70:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8003f74:	4618      	mov	r0, r3
 8003f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8003f78:	2002      	movs	r0, #2
 8003f7a:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f7c:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f7e:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f82:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f84:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f86:	4e58      	ldr	r6, [pc, #352]	; (80040e8 <HAL_TIM_PWM_ConfigChannel+0x208>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f88:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8003f8c:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8003f8e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003f90:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003f92:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8003f94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f98:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f9c:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f9e:	ea42 320e 	orr.w	r2, r2, lr, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fa2:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fa6:	d06e      	beq.n	8004086 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8003fa8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003fac:	42b3      	cmp	r3, r6
 8003fae:	d06a      	beq.n	8004086 <HAL_TIM_PWM_ConfigChannel+0x1a6>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fb0:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003fb2:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003fb4:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003fb6:	641e      	str	r6, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fb8:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fba:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fbc:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fbe:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8003fc2:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fc4:	69d9      	ldr	r1, [r3, #28]
 8003fc6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003fca:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fcc:	69da      	ldr	r2, [r3, #28]
 8003fce:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003fd2:	61da      	str	r2, [r3, #28]
      break;
 8003fd4:	e7c8      	b.n	8003f68 <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fd6:	6803      	ldr	r3, [r0, #0]
  tmpccer |= OC_Config->OCPolarity;
 8003fd8:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fdc:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8003fde:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fe0:	4e41      	ldr	r6, [pc, #260]	; (80040e8 <HAL_TIM_PWM_ConfigChannel+0x208>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fe2:	f025 0501 	bic.w	r5, r5, #1
 8003fe6:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8003fe8:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003fea:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8003fec:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8003fee:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ff2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ff6:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 8003ff8:	ea42 020e 	orr.w	r2, r2, lr
  tmpccmrx |= OC_Config->OCMode;
 8003ffc:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004000:	d065      	beq.n	80040ce <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004002:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004006:	42b3      	cmp	r3, r6
 8004008:	d061      	beq.n	80040ce <HAL_TIM_PWM_ConfigChannel+0x1ee>
  TIMx->CCR1 = OC_Config->Pulse;
 800400a:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800400c:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800400e:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004010:	635e      	str	r6, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8004012:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004014:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004016:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004018:	f044 0408 	orr.w	r4, r4, #8
 800401c:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800401e:	6999      	ldr	r1, [r3, #24]
 8004020:	f021 0104 	bic.w	r1, r1, #4
 8004024:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004026:	699a      	ldr	r2, [r3, #24]
 8004028:	432a      	orrs	r2, r5
 800402a:	619a      	str	r2, [r3, #24]
      break;
 800402c:	e79c      	b.n	8003f68 <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800402e:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004030:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004034:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8004036:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004038:	4e2b      	ldr	r6, [pc, #172]	; (80040e8 <HAL_TIM_PWM_ConfigChannel+0x208>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800403a:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 800403e:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8004040:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004042:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004044:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8004046:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800404a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800404e:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004050:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8004054:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004058:	d01b      	beq.n	8004092 <HAL_TIM_PWM_ConfigChannel+0x1b2>
 800405a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800405e:	42b3      	cmp	r3, r6
 8004060:	d017      	beq.n	8004092 <HAL_TIM_PWM_ConfigChannel+0x1b2>
  TIMx->CCR3 = OC_Config->Pulse;
 8004062:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004064:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004066:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004068:	63de      	str	r6, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800406a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800406c:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800406e:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004070:	f044 0408 	orr.w	r4, r4, #8
 8004074:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004076:	69d9      	ldr	r1, [r3, #28]
 8004078:	f021 0104 	bic.w	r1, r1, #4
 800407c:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800407e:	69da      	ldr	r2, [r3, #28]
 8004080:	432a      	orrs	r2, r5
 8004082:	61da      	str	r2, [r3, #28]
      break;
 8004084:	e770      	b.n	8003f68 <HAL_TIM_PWM_ConfigChannel+0x88>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004086:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004088:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800408c:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8004090:	e78e      	b.n	8003fb0 <HAL_TIM_PWM_ConfigChannel+0xd0>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004092:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004094:	698f      	ldr	r7, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004096:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800409a:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800409e:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040a0:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040a4:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 80040a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040aa:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 80040ae:	e7d8      	b.n	8004062 <HAL_TIM_PWM_ConfigChannel+0x182>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040b0:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040b2:	698f      	ldr	r7, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 80040b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040b8:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040bc:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040be:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040c2:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 80040c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040c8:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 80040cc:	e73a      	b.n	8003f44 <HAL_TIM_PWM_ConfigChannel+0x64>
    tmpccer |= OC_Config->OCNPolarity;
 80040ce:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 80040d0:	698f      	ldr	r7, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 80040d2:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 80040d6:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 80040d8:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040da:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80040de:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 80040e0:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80040e4:	4335      	orrs	r5, r6
 80040e6:	e790      	b.n	800400a <HAL_TIM_PWM_ConfigChannel+0x12a>
 80040e8:	40010000 	.word	0x40010000

080040ec <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 80040ec:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80040f0:	2a01      	cmp	r2, #1
 80040f2:	d101      	bne.n	80040f8 <HAL_TIM_SlaveConfigSynchro+0xc>
 80040f4:	2002      	movs	r0, #2
 80040f6:	4770      	bx	lr
 80040f8:	4603      	mov	r3, r0
  htim->State = HAL_TIM_STATE_BUSY;
 80040fa:	2002      	movs	r0, #2
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040fc:	681a      	ldr	r2, [r3, #0]
{
 80040fe:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8004100:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004104:	6894      	ldr	r4, [r2, #8]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004106:	684d      	ldr	r5, [r1, #4]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004108:	680e      	ldr	r6, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 800410a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800410e:	432c      	orrs	r4, r5
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004110:	f024 0407 	bic.w	r4, r4, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004114:	4334      	orrs	r4, r6
  __HAL_LOCK(htim);
 8004116:	2001      	movs	r0, #1

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004118:	2d50      	cmp	r5, #80	; 0x50
  __HAL_LOCK(htim);
 800411a:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 800411e:	6094      	str	r4, [r2, #8]
  switch (sSlaveConfig->InputTrigger)
 8004120:	d04d      	beq.n	80041be <HAL_TIM_SlaveConfigSynchro+0xd2>
 8004122:	d920      	bls.n	8004166 <HAL_TIM_SlaveConfigSynchro+0x7a>
 8004124:	2d60      	cmp	r5, #96	; 0x60
 8004126:	d037      	beq.n	8004198 <HAL_TIM_SlaveConfigSynchro+0xac>
 8004128:	2d70      	cmp	r5, #112	; 0x70
 800412a:	d10b      	bne.n	8004144 <HAL_TIM_SlaveConfigSynchro+0x58>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800412c:	68c8      	ldr	r0, [r1, #12]
 800412e:	688e      	ldr	r6, [r1, #8]
 8004130:	690d      	ldr	r5, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 8004132:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004134:	ea40 0106 	orr.w	r1, r0, r6
 8004138:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800413c:	f424 407f 	bic.w	r0, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004140:	4301      	orrs	r1, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004142:	6091      	str	r1, [r2, #8]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004144:	68d1      	ldr	r1, [r2, #12]
 8004146:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800414a:	60d1      	str	r1, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800414c:	68d1      	ldr	r1, [r2, #12]
  __HAL_UNLOCK(htim);
 800414e:	2400      	movs	r4, #0
  htim->State = HAL_TIM_STATE_READY;
 8004150:	2501      	movs	r5, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004152:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8004156:	60d1      	str	r1, [r2, #12]
  return HAL_OK;
 8004158:	4620      	mov	r0, r4
  htim->State = HAL_TIM_STATE_READY;
 800415a:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800415e:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
}
 8004162:	bc70      	pop	{r4, r5, r6}
 8004164:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8004166:	2d40      	cmp	r5, #64	; 0x40
 8004168:	d1ec      	bne.n	8004144 <HAL_TIM_SlaveConfigSynchro+0x58>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800416a:	2e05      	cmp	r6, #5
 800416c:	d00d      	beq.n	800418a <HAL_TIM_SlaveConfigSynchro+0x9e>
      tmpccer = htim->Instance->CCER;
 800416e:	6a14      	ldr	r4, [r2, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004170:	6a10      	ldr	r0, [r2, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004172:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004174:	f020 0001 	bic.w	r0, r0, #1
 8004178:	6210      	str	r0, [r2, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800417a:	6991      	ldr	r1, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800417c:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004180:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8004184:	6191      	str	r1, [r2, #24]
      htim->Instance->CCER = tmpccer;
 8004186:	6214      	str	r4, [r2, #32]
 8004188:	e7dc      	b.n	8004144 <HAL_TIM_SlaveConfigSynchro+0x58>
    __HAL_UNLOCK(htim);
 800418a:	2200      	movs	r2, #0
      htim->State = HAL_TIM_STATE_READY;
 800418c:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004194:	bc70      	pop	{r4, r5, r6}
 8004196:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004198:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800419a:	688d      	ldr	r5, [r1, #8]
 800419c:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800419e:	f024 0410 	bic.w	r4, r4, #16
 80041a2:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041a4:	6990      	ldr	r0, [r2, #24]
  tmpccer = TIMx->CCER;
 80041a6:	6a11      	ldr	r1, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041a8:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041ac:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041b0:	ea40 3006 	orr.w	r0, r0, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80041b4:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80041b8:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 80041ba:	6211      	str	r1, [r2, #32]
 80041bc:	e7c2      	b.n	8004144 <HAL_TIM_SlaveConfigSynchro+0x58>
  tmpccer = TIMx->CCER;
 80041be:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041c0:	6a15      	ldr	r5, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041c2:	6888      	ldr	r0, [r1, #8]
 80041c4:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041c6:	f025 0501 	bic.w	r5, r5, #1
 80041ca:	6215      	str	r5, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041cc:	6991      	ldr	r1, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ce:	f024 040a 	bic.w	r4, r4, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041d2:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 80041d6:	4320      	orrs	r0, r4
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041d8:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80041dc:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 80041de:	6210      	str	r0, [r2, #32]
 80041e0:	e7b0      	b.n	8004144 <HAL_TIM_SlaveConfigSynchro+0x58>
 80041e2:	bf00      	nop

080041e4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041e4:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80041e8:	2a01      	cmp	r2, #1
 80041ea:	d01a      	beq.n	8004222 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
{
 80041ec:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ee:	2202      	movs	r2, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041f0:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80041f2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
 80041f6:	4603      	mov	r3, r0
  tmpcr2 = htim->Instance->CR2;
 80041f8:	6860      	ldr	r0, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041fa:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041fc:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041fe:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004200:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  tmpcr2 &= ~TIM_CR2_MMS;
 8004204:	f020 0170 	bic.w	r1, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004208:	4331      	orrs	r1, r6
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800420a:	432a      	orrs	r2, r5

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800420c:	2601      	movs	r6, #1

  __HAL_UNLOCK(htim);
 800420e:	2500      	movs	r5, #0
  htim->Instance->CR2 = tmpcr2;
 8004210:	6061      	str	r1, [r4, #4]

  return HAL_OK;
 8004212:	4628      	mov	r0, r5
  htim->Instance->SMCR = tmpsmcr;
 8004214:	60a2      	str	r2, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004216:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800421a:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
}
 800421e:	bc70      	pop	{r4, r5, r6}
 8004220:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004222:	2002      	movs	r0, #2
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop

08004228 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004228:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800422c:	2b01      	cmp	r3, #1
 800422e:	d021      	beq.n	8004274 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004230:	68ca      	ldr	r2, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004232:	684b      	ldr	r3, [r1, #4]
{
 8004234:	b4f0      	push	{r4, r5, r6, r7}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004236:	688f      	ldr	r7, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004238:	680e      	ldr	r6, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800423a:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800423c:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800423e:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004240:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004244:	433a      	orrs	r2, r7
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800424a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800424c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004250:	4333      	orrs	r3, r6
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004252:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004256:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004258:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800425c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800425e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004262:	6804      	ldr	r4, [r0, #0]

  __HAL_UNLOCK(htim);
 8004264:	2200      	movs	r2, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004266:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8004268:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800426a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  return HAL_OK;
}
 800426e:	bcf0      	pop	{r4, r5, r6, r7}
 8004270:	4610      	mov	r0, r2
 8004272:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004274:	2302      	movs	r3, #2
}
 8004276:	4618      	mov	r0, r3
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop

0800427c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800427c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004280:	6804      	ldr	r4, [r0, #0]
 8004282:	6922      	ldr	r2, [r4, #16]
{
 8004284:	4682      	mov	sl, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004286:	68c0      	ldr	r0, [r0, #12]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004288:	f8da 101c 	ldr.w	r1, [sl, #28]
 800428c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004290:	f8da 6010 	ldr.w	r6, [sl, #16]
 8004294:	f8da 5014 	ldr.w	r5, [sl, #20]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004298:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800429c:	4302      	orrs	r2, r0
 800429e:	6122      	str	r2, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 80042a0:	68e2      	ldr	r2, [r4, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042a2:	f8da 0018 	ldr.w	r0, [sl, #24]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042a6:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR1,
 80042a8:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042ac:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1,
 80042ae:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042b2:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 80042b4:	4313      	orrs	r3, r2
 80042b6:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042b8:	6963      	ldr	r3, [r4, #20]
 80042ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042be:	4303      	orrs	r3, r0

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042c0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042c4:	6163      	str	r3, [r4, #20]
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042c6:	4bab      	ldr	r3, [pc, #684]	; (8004574 <UART_SetConfig+0x2f8>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042c8:	d061      	beq.n	800438e <UART_SetConfig+0x112>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042ca:	429c      	cmp	r4, r3
 80042cc:	f000 8101 	beq.w	80044d2 <UART_SetConfig+0x256>
 80042d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042d4:	429c      	cmp	r4, r3
 80042d6:	f000 80fc 	beq.w	80044d2 <UART_SetConfig+0x256>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80042da:	f7ff fa6d 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 80042de:	4fa6      	ldr	r7, [pc, #664]	; (8004578 <UART_SetConfig+0x2fc>)
 80042e0:	f8da 3004 	ldr.w	r3, [sl, #4]
 80042e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80042e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80042f2:	fba7 2303 	umull	r2, r3, r7, r3
 80042f6:	095b      	lsrs	r3, r3, #5
 80042f8:	011d      	lsls	r5, r3, #4
 80042fa:	f7ff fa5d 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 80042fe:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004302:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800430c:	fbb0 f6f3 	udiv	r6, r0, r3
 8004310:	f7ff fa52 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 8004314:	f8da 2004 	ldr.w	r2, [sl, #4]
 8004318:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800431c:	0093      	lsls	r3, r2, #2
 800431e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004322:	fbb0 f3f3 	udiv	r3, r0, r3
 8004326:	fba7 2303 	umull	r2, r3, r7, r3
 800432a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800432e:	095b      	lsrs	r3, r3, #5
 8004330:	fb09 6313 	mls	r3, r9, r3, r6
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	3332      	adds	r3, #50	; 0x32
 8004338:	fba7 2303 	umull	r2, r3, r7, r3
 800433c:	095b      	lsrs	r3, r3, #5
 800433e:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8004342:	f7ff fa39 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 8004346:	f8da 2004 	ldr.w	r2, [sl, #4]
 800434a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800434e:	0093      	lsls	r3, r2, #2
 8004350:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004354:	fbb0 f8f3 	udiv	r8, r0, r3
 8004358:	f7ff fa2e 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 800435c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004360:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800436a:	fbb0 f0f3 	udiv	r0, r0, r3
 800436e:	fba7 3000 	umull	r3, r0, r7, r0
 8004372:	0940      	lsrs	r0, r0, #5
 8004374:	fb09 8310 	mls	r3, r9, r0, r8
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	3332      	adds	r3, #50	; 0x32
 800437c:	fba7 2303 	umull	r2, r3, r7, r3
 8004380:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8004384:	4333      	orrs	r3, r6
 8004386:	442b      	add	r3, r5
 8004388:	60a3      	str	r3, [r4, #8]
 800438a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800438e:	429c      	cmp	r4, r3
 8004390:	d05d      	beq.n	800444e <UART_SetConfig+0x1d2>
 8004392:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004396:	429c      	cmp	r4, r3
 8004398:	d059      	beq.n	800444e <UART_SetConfig+0x1d2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800439a:	f7ff fa0d 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 800439e:	4f76      	ldr	r7, [pc, #472]	; (8004578 <UART_SetConfig+0x2fc>)
 80043a0:	f8da 3004 	ldr.w	r3, [sl, #4]
 80043a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80043a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80043b2:	fba7 2303 	umull	r2, r3, r7, r3
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	011e      	lsls	r6, r3, #4
 80043ba:	f7ff f9fd 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 80043be:	f8da 3004 	ldr.w	r3, [sl, #4]
 80043c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80043cc:	fbb0 f5f3 	udiv	r5, r0, r3
 80043d0:	f7ff f9f2 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 80043d4:	f8da 2004 	ldr.w	r2, [sl, #4]
 80043d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80043dc:	0053      	lsls	r3, r2, #1
 80043de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80043e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043e6:	fba7 2303 	umull	r2, r3, r7, r3
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	f04f 0964 	mov.w	r9, #100	; 0x64
 80043f0:	fb09 5313 	mls	r3, r9, r3, r5
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	3332      	adds	r3, #50	; 0x32
 80043f8:	fba7 2303 	umull	r2, r3, r7, r3
 80043fc:	091b      	lsrs	r3, r3, #4
 80043fe:	f403 75f8 	and.w	r5, r3, #496	; 0x1f0
 8004402:	f7ff f9d9 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 8004406:	f8da 2004 	ldr.w	r2, [sl, #4]
 800440a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800440e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004412:	0053      	lsls	r3, r2, #1
 8004414:	fbb0 f8f3 	udiv	r8, r0, r3
 8004418:	f7ff f9ce 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 800441c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004420:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004424:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	fbb0 f3f3 	udiv	r3, r0, r3
 800442e:	fba7 2303 	umull	r2, r3, r7, r3
 8004432:	095b      	lsrs	r3, r3, #5
 8004434:	fb09 8313 	mls	r3, r9, r3, r8
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	3332      	adds	r3, #50	; 0x32
 800443c:	fba7 2303 	umull	r2, r3, r7, r3
 8004440:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8004444:	4433      	add	r3, r6
 8004446:	442b      	add	r3, r5
 8004448:	60a3      	str	r3, [r4, #8]
 800444a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800444e:	f7ff f9c3 	bl	80037d8 <HAL_RCC_GetPCLK2Freq>
 8004452:	4f49      	ldr	r7, [pc, #292]	; (8004578 <UART_SetConfig+0x2fc>)
 8004454:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004458:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800445c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	fbb0 f3f3 	udiv	r3, r0, r3
 8004466:	fba7 2303 	umull	r2, r3, r7, r3
 800446a:	095b      	lsrs	r3, r3, #5
 800446c:	011e      	lsls	r6, r3, #4
 800446e:	f7ff f9b3 	bl	80037d8 <HAL_RCC_GetPCLK2Freq>
 8004472:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004476:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004480:	fbb0 f5f3 	udiv	r5, r0, r3
 8004484:	f7ff f9a8 	bl	80037d8 <HAL_RCC_GetPCLK2Freq>
 8004488:	f8da 2004 	ldr.w	r2, [sl, #4]
 800448c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004490:	0053      	lsls	r3, r2, #1
 8004492:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004496:	fbb0 f3f3 	udiv	r3, r0, r3
 800449a:	fba7 2303 	umull	r2, r3, r7, r3
 800449e:	f04f 0964 	mov.w	r9, #100	; 0x64
 80044a2:	095b      	lsrs	r3, r3, #5
 80044a4:	fb09 5313 	mls	r3, r9, r3, r5
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	3332      	adds	r3, #50	; 0x32
 80044ac:	fba7 2303 	umull	r2, r3, r7, r3
 80044b0:	091b      	lsrs	r3, r3, #4
 80044b2:	f403 75f8 	and.w	r5, r3, #496	; 0x1f0
 80044b6:	f7ff f98f 	bl	80037d8 <HAL_RCC_GetPCLK2Freq>
 80044ba:	f8da 2004 	ldr.w	r2, [sl, #4]
 80044be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80044c2:	0053      	lsls	r3, r2, #1
 80044c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80044c8:	fbb0 f8f3 	udiv	r8, r0, r3
 80044cc:	f7ff f984 	bl	80037d8 <HAL_RCC_GetPCLK2Freq>
 80044d0:	e7a4      	b.n	800441c <UART_SetConfig+0x1a0>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80044d2:	f7ff f981 	bl	80037d8 <HAL_RCC_GetPCLK2Freq>
 80044d6:	4f28      	ldr	r7, [pc, #160]	; (8004578 <UART_SetConfig+0x2fc>)
 80044d8:	f8da 3004 	ldr.w	r3, [sl, #4]
 80044dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80044e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80044ea:	fba7 2303 	umull	r2, r3, r7, r3
 80044ee:	095b      	lsrs	r3, r3, #5
 80044f0:	011d      	lsls	r5, r3, #4
 80044f2:	f7ff f971 	bl	80037d8 <HAL_RCC_GetPCLK2Freq>
 80044f6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80044fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004504:	fbb0 f6f3 	udiv	r6, r0, r3
 8004508:	f7ff f966 	bl	80037d8 <HAL_RCC_GetPCLK2Freq>
 800450c:	f8da 2004 	ldr.w	r2, [sl, #4]
 8004510:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004514:	0093      	lsls	r3, r2, #2
 8004516:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800451a:	fbb0 f3f3 	udiv	r3, r0, r3
 800451e:	fba7 2303 	umull	r2, r3, r7, r3
 8004522:	f04f 0964 	mov.w	r9, #100	; 0x64
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	fb09 6313 	mls	r3, r9, r3, r6
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	3332      	adds	r3, #50	; 0x32
 8004530:	fba7 2303 	umull	r2, r3, r7, r3
 8004534:	095b      	lsrs	r3, r3, #5
 8004536:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 800453a:	f7ff f94d 	bl	80037d8 <HAL_RCC_GetPCLK2Freq>
 800453e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8004542:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004546:	0093      	lsls	r3, r2, #2
 8004548:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800454c:	fbb0 f8f3 	udiv	r8, r0, r3
 8004550:	f7ff f942 	bl	80037d8 <HAL_RCC_GetPCLK2Freq>
 8004554:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004558:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800455c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	fbb0 f3f3 	udiv	r3, r0, r3
 8004566:	fba7 2303 	umull	r2, r3, r7, r3
 800456a:	095b      	lsrs	r3, r3, #5
 800456c:	fb09 8313 	mls	r3, r9, r3, r8
 8004570:	e702      	b.n	8004378 <UART_SetConfig+0xfc>
 8004572:	bf00      	nop
 8004574:	40011000 	.word	0x40011000
 8004578:	51eb851f 	.word	0x51eb851f

0800457c <HAL_UART_Init>:
  if (huart == NULL)
 800457c:	b360      	cbz	r0, 80045d8 <HAL_UART_Init+0x5c>
{
 800457e:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8004580:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004584:	4604      	mov	r4, r0
 8004586:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800458a:	b303      	cbz	r3, 80045ce <HAL_UART_Init+0x52>
  __HAL_UART_DISABLE(huart);
 800458c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800458e:	2324      	movs	r3, #36	; 0x24
 8004590:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8004594:	68d3      	ldr	r3, [r2, #12]
 8004596:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800459a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800459c:	4620      	mov	r0, r4
 800459e:	f7ff fe6d 	bl	800427c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045a2:	6823      	ldr	r3, [r4, #0]
 80045a4:	691a      	ldr	r2, [r3, #16]
 80045a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045ac:	695a      	ldr	r2, [r3, #20]
 80045ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045b2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80045b4:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b6:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80045b8:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80045ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045be:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 80045c0:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c2:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80045c4:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80045c8:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
  return HAL_OK;
 80045cc:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 80045ce:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80045d2:	f7fd fdd3 	bl	800217c <HAL_UART_MspInit>
 80045d6:	e7d9      	b.n	800458c <HAL_UART_Init+0x10>
    return HAL_ERROR;
 80045d8:	2001      	movs	r0, #1
 80045da:	4770      	bx	lr

080045dc <VBS_GetAvBusVoltage_d>:
  * @retval uint16_t Latest averaged Vbus measurement in digit
  */
uint16_t VBS_GetAvBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
{
  return ( pHandle->AvBusVoltage_d );
}
 80045dc:	88c0      	ldrh	r0, [r0, #6]
 80045de:	4770      	bx	lr

080045e0 <VBS_GetAvBusVoltage_V>:
  */
uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 80045e0:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 80045e2:	8840      	ldrh	r0, [r0, #2]
 80045e4:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 80045e8:	0c00      	lsrs	r0, r0, #16
 80045ea:	4770      	bx	lr

080045ec <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval Volt_Components Limited Vqd vector
  */
Volt_Components Circle_Limitation( CircleLimitation_Handle_t * pHandle, Volt_Components Vqd )
{
 80045ec:	b410      	push	{r4}
 80045ee:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.qV_Component2 ) * Vqd.qV_Component2;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 2*32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80045f0:	8802      	ldrh	r2, [r0, #0]
 80045f2:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.qV_Component2 ) * Vqd.qV_Component2;
 80045f4:	fb03 f403 	mul.w	r4, r3, r3
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80045f8:	fb02 f202 	mul.w	r2, r2, r2
  sw_temp = ( int32_t )( Vqd.qV_Component1 ) * Vqd.qV_Component1 +
 80045fc:	fb01 4401 	mla	r4, r1, r1, r4
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8004600:	4294      	cmp	r4, r2
{
 8004602:	b085      	sub	sp, #20
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8004604:	d919      	bls.n	800463a <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 8004606:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
 800460a:	ebc2 6414 	rsb	r4, r2, r4, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 800460e:	b2e4      	uxtb	r4, r4
 8004610:	eb00 0044 	add.w	r0, r0, r4, lsl #1

    sw_temp = Vqd.qV_Component1 * ( int32_t )table_element;
 8004614:	8842      	ldrh	r2, [r0, #2]
 8004616:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.qV_Component1 = ( int16_t )( sw_temp / 32768 );
 800461a:	2900      	cmp	r1, #0

    sw_temp = Vqd.qV_Component2 * ( int32_t )( table_element );
 800461c:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.qV_Component1 = ( int16_t )( sw_temp / 32768 );
 8004620:	bfbc      	itt	lt
 8004622:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 8004626:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.qV_Component2 = ( int16_t )( sw_temp / 32768 );
 8004628:	2b00      	cmp	r3, #0
 800462a:	bfbc      	itt	lt
 800462c:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 8004630:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.qV_Component1 = ( int16_t )( sw_temp / 32768 );
 8004632:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.qV_Component2 = ( int16_t )( sw_temp / 32768 );
 8004636:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 800463a:	b289      	uxth	r1, r1
 800463c:	2000      	movs	r0, #0
 800463e:	b29b      	uxth	r3, r3
 8004640:	f361 000f 	bfi	r0, r1, #0, #16
 8004644:	f363 401f 	bfi	r0, r3, #16, #16
}
 8004648:	b005      	add	sp, #20
 800464a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800464e:	4770      	bx	lr

08004650 <FCP_Init>:
 * @{
 */

void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 8004650:	2300      	movs	r3, #0
 8004652:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 8004654:	7503      	strb	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
 8004656:	7543      	strb	r3, [r0, #21]
  pHandle->TxFrame.FrameCRC = 0;
 8004658:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
 800465c:	f880 3097 	strb.w	r3, [r0, #151]	; 0x97
  pHandle->TxFrameLevel = 0;
 8004660:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98

  pHandle->RxFrame.Code = 0x0;
 8004664:	f880 3099 	strb.w	r3, [r0, #153]	; 0x99
  pHandle->RxFrame.Size = 0;
 8004668:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 800466c:	f880 311b 	strb.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8004670:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
  pHandle->RxFrameLevel = 0;
 8004674:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop

0800467c <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 800467c:	b118      	cbz	r0, 8004686 <FCP_SetClient+0xa>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 800467e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8004682:	9b00      	ldr	r3, [sp, #0]
 8004684:	60c3      	str	r3, [r0, #12]
 8004686:	4770      	bx	lr

08004688 <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8004688:	b1a8      	cbz	r0, 80046b6 <FCP_CalcCRC+0x2e>
{
 800468a:	b410      	push	{r4}
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 800468c:	7844      	ldrb	r4, [r0, #1]
    nSum += pFrame->Code;
 800468e:	7803      	ldrb	r3, [r0, #0]
    nSum += pFrame->Size;
 8004690:	4423      	add	r3, r4

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8004692:	b154      	cbz	r4, 80046aa <FCP_CalcCRC+0x22>
 8004694:	3c01      	subs	r4, #1
 8004696:	b2e4      	uxtb	r4, r4
 8004698:	3402      	adds	r4, #2
 800469a:	4404      	add	r4, r0
 800469c:	1c42      	adds	r2, r0, #1
    {
      nSum += pFrame->Buffer[idx];
 800469e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80046a2:	440b      	add	r3, r1
    for ( idx = 0; idx < pFrame->Size; idx++ )
 80046a4:	4294      	cmp	r4, r2
      nSum += pFrame->Buffer[idx];
 80046a6:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 80046a8:	d1f9      	bne.n	800469e <FCP_CalcCRC+0x16>
    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
  }

  return nCRC ;
}
 80046aa:	f85d 4b04 	ldr.w	r4, [sp], #4
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 80046ae:	eb03 2313 	add.w	r3, r3, r3, lsr #8
 80046b2:	f003 00ff 	and.w	r0, r3, #255	; 0xff
}
 80046b6:	4770      	bx	lr

080046b8 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 80046b8:	b410      	push	{r4}
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80046ba:	2400      	movs	r4, #0
 80046bc:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = 0;
 80046be:	f8c0 400e 	str.w	r4, [r0, #14]
  pHandle->hFinalTorque = 0;
  pHandle->hDurationms = 0;
 80046c2:	82c4      	strh	r4, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 80046c4:	7604      	strb	r4, [r0, #24]
  pHandle->pFOCVars = pFOCVars;
 80046c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
}
 80046ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 80046d0:	2301      	movs	r3, #1
  pHandle->hFinalSpeed = hFinalSpeed;
 80046d2:	81c1      	strh	r1, [r0, #14]
  pHandle->hDurationms = hDurationms;
 80046d4:	82c2      	strh	r2, [r0, #22]
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 80046d6:	7303      	strb	r3, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80046d8:	7603      	strb	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
 80046da:	7643      	strb	r3, [r0, #25]
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop

080046e0 <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 80046e0:	b430      	push	{r4, r5}
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 80046e2:	2300      	movs	r3, #0
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 80046e4:	2502      	movs	r5, #2
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80046e6:	2401      	movs	r4, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 80046e8:	7305      	strb	r5, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80046ea:	7604      	strb	r4, [r0, #24]
  pHandle->hFinalTorque = hFinalTorque;
 80046ec:	8201      	strh	r1, [r0, #16]
  pHandle->hDurationms = hDurationms;
 80046ee:	82c2      	strh	r2, [r0, #22]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 80046f0:	7643      	strb	r3, [r0, #25]
}
 80046f2:	bc30      	pop	{r4, r5}
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop

080046f8 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in Curr_Components
  *         format.
  * @retval none.
  */
void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, Curr_Components Iqdref )
{
 80046f8:	b410      	push	{r4}
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
  pHandle->Iqdref.qI_Component1 = Iqdref.qI_Component1;
  pHandle->Iqdref.qI_Component2 = Iqdref.qI_Component2;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80046fa:	2201      	movs	r2, #1
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 80046fc:	2403      	movs	r4, #3
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 80046fe:	2300      	movs	r3, #0
{
 8004700:	b083      	sub	sp, #12
  pHandle->Iqdref.qI_Component1 = Iqdref.qI_Component1;
 8004702:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8004706:	7304      	strb	r4, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8004708:	7602      	strb	r2, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 800470a:	7643      	strb	r3, [r0, #25]
}
 800470c:	b003      	add	sp, #12
 800470e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004712:	4770      	bx	lr

08004714 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8004714:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8004716:	2103      	movs	r1, #3
{
 8004718:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 800471a:	6800      	ldr	r0, [r0, #0]
 800471c:	f001 fdc2 	bl	80062a4 <STM_NextState>

  if ( RetVal == true )
 8004720:	b108      	cbz	r0, 8004726 <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8004722:	2301      	movs	r3, #1
 8004724:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 8004726:	bd10      	pop	{r4, pc}

08004728 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8004728:	6800      	ldr	r0, [r0, #0]
 800472a:	2107      	movs	r1, #7
 800472c:	f001 bdba 	b.w	80062a4 <STM_NextState>

08004730 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8004730:	6800      	ldr	r0, [r0, #0]
 8004732:	f001 be59 	b.w	80063e8 <STM_FaultAcknowledged>
 8004736:	bf00      	nop

08004738 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8004738:	6800      	ldr	r0, [r0, #0]
 800473a:	2101      	movs	r1, #1
 800473c:	f001 bdb2 	b.w	80062a4 <STM_NextState>

08004740 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8004740:	b110      	cbz	r0, 8004748 <MCI_ExecBufferedCommands+0x8>
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8004742:	7e03      	ldrb	r3, [r0, #24]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d000      	beq.n	800474a <MCI_ExecBufferedCommands+0xa>
 8004748:	4770      	bx	lr
    {
      bool commandHasBeenExecuted = false;
      switch ( pHandle->lastCommand )
 800474a:	7b01      	ldrb	r1, [r0, #12]
 800474c:	2902      	cmp	r1, #2
{
 800474e:	b510      	push	{r4, lr}
 8004750:	4604      	mov	r4, r0
      switch ( pHandle->lastCommand )
 8004752:	d00f      	beq.n	8004774 <MCI_ExecBufferedCommands+0x34>
 8004754:	2903      	cmp	r1, #3
 8004756:	d004      	beq.n	8004762 <MCI_ExecBufferedCommands+0x22>
 8004758:	2901      	cmp	r1, #1
 800475a:	d01d      	beq.n	8004798 <MCI_ExecBufferedCommands+0x58>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 800475c:	2303      	movs	r3, #3
 800475e:	7623      	strb	r3, [r4, #24]
 8004760:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8004762:	6882      	ldr	r2, [r0, #8]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8004764:	f8d0 1012 	ldr.w	r1, [r0, #18]
 8004768:	6111      	str	r1, [r2, #16]
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 800476a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 800476e:	2302      	movs	r3, #2
 8004770:	7623      	strb	r3, [r4, #24]
 8004772:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8004774:	6883      	ldr	r3, [r0, #8]
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8004776:	6840      	ldr	r0, [r0, #4]
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8004778:	2100      	movs	r1, #0
 800477a:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 800477e:	f001 fce3 	bl	8006148 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8004782:	8ae2      	ldrh	r2, [r4, #22]
 8004784:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8004788:	6860      	ldr	r0, [r4, #4]
 800478a:	f001 fce1 	bl	8006150 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 800478e:	2800      	cmp	r0, #0
 8004790:	d1ed      	bne.n	800476e <MCI_ExecBufferedCommands+0x2e>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8004792:	2303      	movs	r3, #3
 8004794:	7623      	strb	r3, [r4, #24]
 8004796:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8004798:	6883      	ldr	r3, [r0, #8]
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 800479a:	6840      	ldr	r0, [r0, #4]
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 80047a2:	f001 fcd1 	bl	8006148 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 80047a6:	8ae2      	ldrh	r2, [r4, #22]
 80047a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047ac:	6860      	ldr	r0, [r4, #4]
 80047ae:	f001 fccf 	bl	8006150 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 80047b2:	2800      	cmp	r0, #0
 80047b4:	d0ed      	beq.n	8004792 <MCI_ExecBufferedCommands+0x52>
 80047b6:	e7da      	b.n	800476e <MCI_ExecBufferedCommands+0x2e>

080047b8 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 80047b8:	6800      	ldr	r0, [r0, #0]
 80047ba:	f001 be13 	b.w	80063e4 <STM_GetState>
 80047be:	bf00      	nop

080047c0 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 80047c0:	7e40      	ldrb	r0, [r0, #25]
 80047c2:	4770      	bx	lr

080047c4 <MCI_GetImposedMotorDirection>:
  */
int16_t MCI_GetImposedMotorDirection( MCI_Handle_t * pHandle )
{
  int16_t retVal = 1;

  switch ( pHandle->lastCommand )
 80047c4:	7b03      	ldrb	r3, [r0, #12]
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d015      	beq.n	80047f6 <MCI_GetImposedMotorDirection+0x32>
 80047ca:	2b03      	cmp	r3, #3
 80047cc:	d00b      	beq.n	80047e6 <MCI_GetImposedMotorDirection+0x22>
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d001      	beq.n	80047d6 <MCI_GetImposedMotorDirection+0x12>
  int16_t retVal = 1;
 80047d2:	2001      	movs	r0, #1
      break;
    default:
      break;
  }
  return retVal;
}
 80047d4:	4770      	bx	lr
      if ( pHandle->hFinalSpeed < 0 )
 80047d6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80047da:	2b00      	cmp	r3, #0
        retVal = -1;
 80047dc:	bfac      	ite	ge
 80047de:	2001      	movge	r0, #1
 80047e0:	f04f 30ff 	movlt.w	r0, #4294967295
 80047e4:	4770      	bx	lr
      if ( pHandle->Iqdref.qI_Component1 < 0 )
 80047e6:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 80047ea:	2b00      	cmp	r3, #0
        retVal = -1;
 80047ec:	bfac      	ite	ge
 80047ee:	2001      	movge	r0, #1
 80047f0:	f04f 30ff 	movlt.w	r0, #4294967295
 80047f4:	4770      	bx	lr
      if ( pHandle->hFinalTorque < 0 )
 80047f6:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 80047fa:	2b00      	cmp	r3, #0
        retVal = -1;
 80047fc:	bfac      	ite	ge
 80047fe:	2001      	movge	r0, #1
 8004800:	f04f 30ff 	movlt.w	r0, #4294967295
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop

08004808 <MCI_GetLastRampFinalSpeed>:
int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8004808:	7b03      	ldrb	r3, [r0, #12]
 800480a:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 800480c:	bf0c      	ite	eq
 800480e:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 8004812:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop

08004818 <MCI_StopSpeedRamp>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is executed, false otherwise.
  */
bool MCI_StopSpeedRamp( MCI_Handle_t * pHandle )
{
  return STC_StopSpeedRamp( pHandle->pSTC );
 8004818:	6840      	ldr	r0, [r0, #4]
 800481a:	f001 bd21 	b.w	8006260 <STC_StopSpeedRamp>
 800481e:	bf00      	nop

08004820 <MCI_GetAvrgMecSpeed01Hz>:
  *         algorithm
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t rotor average mechanical speed (01Hz)
  */
int16_t MCI_GetAvrgMecSpeed01Hz( MCI_Handle_t * pHandle )
{
 8004820:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8004822:	6840      	ldr	r0, [r0, #4]
 8004824:	f001 fc7e 	bl	8006124 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeed01Hz( SpeedSensor ) );
}
 8004828:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeed01Hz( SpeedSensor ) );
 800482c:	f001 bc2a 	b.w	8006084 <SPD_GetAvrgMecSpeed01Hz>

08004830 <MCI_GetMecSpeedRef01Hz>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
int16_t MCI_GetMecSpeedRef01Hz( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRef01Hz( pHandle->pSTC ) );
 8004830:	6840      	ldr	r0, [r0, #4]
 8004832:	f001 bc81 	b.w	8006138 <STC_GetMecSpeedRef01Hz>
 8004836:	bf00      	nop

08004838 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval Curr_Components Stator current Iab
  */
Curr_Components MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8004838:	6883      	ldr	r3, [r0, #8]
 800483a:	6818      	ldr	r0, [r3, #0]
 800483c:	b283      	uxth	r3, r0
}
 800483e:	f363 000f 	bfi	r0, r3, #0, #16
{
 8004842:	b082      	sub	sp, #8
}
 8004844:	b002      	add	sp, #8
 8004846:	4770      	bx	lr

08004848 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval Curr_Components Stator current Ialphabeta
  */
Curr_Components MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8004848:	6883      	ldr	r3, [r0, #8]
 800484a:	6858      	ldr	r0, [r3, #4]
 800484c:	b283      	uxth	r3, r0
}
 800484e:	f363 000f 	bfi	r0, r3, #0, #16
{
 8004852:	b082      	sub	sp, #8
}
 8004854:	b002      	add	sp, #8
 8004856:	4770      	bx	lr

08004858 <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval Curr_Components Stator current Iqd
  */
Curr_Components MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8004858:	6883      	ldr	r3, [r0, #8]
 800485a:	68d8      	ldr	r0, [r3, #12]
 800485c:	b283      	uxth	r3, r0
}
 800485e:	f363 000f 	bfi	r0, r3, #0, #16
{
 8004862:	b082      	sub	sp, #8
}
 8004864:	b002      	add	sp, #8
 8004866:	4770      	bx	lr

08004868 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval Curr_Components Stator current Iqdref
  */
Curr_Components MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8004868:	6883      	ldr	r3, [r0, #8]
 800486a:	6918      	ldr	r0, [r3, #16]
 800486c:	b283      	uxth	r3, r0
}
 800486e:	f363 000f 	bfi	r0, r3, #0, #16
{
 8004872:	b082      	sub	sp, #8
}
 8004874:	b002      	add	sp, #8
 8004876:	4770      	bx	lr

08004878 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval Curr_Components Stator current Vqd
  */
Volt_Components MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8004878:	6883      	ldr	r3, [r0, #8]
 800487a:	f8d3 0016 	ldr.w	r0, [r3, #22]
 800487e:	b283      	uxth	r3, r0
}
 8004880:	f363 000f 	bfi	r0, r3, #0, #16
{
 8004884:	b082      	sub	sp, #8
}
 8004886:	b002      	add	sp, #8
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop

0800488c <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval Curr_Components Stator current Valphabeta
  */
Volt_Components MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 800488c:	6883      	ldr	r3, [r0, #8]
 800488e:	f8d3 001a 	ldr.w	r0, [r3, #26]
 8004892:	b283      	uxth	r3, r0
}
 8004894:	f363 000f 	bfi	r0, r3, #0, #16
{
 8004898:	b082      	sub	sp, #8
}
 800489a:	b002      	add	sp, #8
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop

080048a0 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 80048a0:	6883      	ldr	r3, [r0, #8]
}
 80048a2:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 80048a6:	4770      	bx	lr

080048a8 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.qI_Component2 = hNewIdref;
 80048a8:	6883      	ldr	r3, [r0, #8]
 80048aa:	8259      	strh	r1, [r3, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
 80048ac:	8299      	strh	r1, [r3, #20]
 80048ae:	4770      	bx	lr

080048b0 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 80048b0:	4603      	mov	r3, r0
 80048b2:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 80048b4:	6840      	ldr	r0, [r0, #4]
 80048b6:	689c      	ldr	r4, [r3, #8]
 80048b8:	f001 fcda 	bl	8006270 <STC_GetDefaultIqdref>
 80048bc:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80048c0:	8220      	strh	r0, [r4, #16]
 80048c2:	8263      	strh	r3, [r4, #18]
 80048c4:	bd10      	pop	{r4, pc}
 80048c6:	bf00      	nop

080048c8 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Curr_Output.qI_Component1 = Curr_Input.qI_Component1;

  qIa_divSQRT3_tmp = divSQRT_3 * ( int32_t )Curr_Input.qI_Component1;

  qIb_divSQRT3_tmp = divSQRT_3 * ( int32_t )Curr_Input.qI_Component2;
 80048c8:	f644 11e6 	movw	r1, #18918	; 0x49e6
 80048cc:	b202      	sxth	r2, r0
 80048ce:	0c03      	lsrs	r3, r0, #16
  qIa_divSQRT3_tmp = divSQRT_3 * ( int32_t )Curr_Input.qI_Component1;
 80048d0:	fb12 f001 	smulbb	r0, r2, r1
  qIb_divSQRT3_tmp = divSQRT_3 * ( int32_t )Curr_Input.qI_Component2;
 80048d4:	fb13 f301 	smulbb	r3, r3, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wIbeta_tmp = ( -( qIa_divSQRT3_tmp ) - ( qIb_divSQRT3_tmp ) -
 80048d8:	4240      	negs	r0, r0
 80048da:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 80048de:	13c0      	asrs	r0, r0, #15
                 ( qIb_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wIbeta_tmp > INT16_MAX )
 80048e0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
{
 80048e4:	b084      	sub	sp, #16
  if ( wIbeta_tmp > INT16_MAX )
 80048e6:	da04      	bge.n	80048f2 <MCM_Clarke+0x2a>
  {
    hIbeta_tmp = INT16_MAX;
  }
  else if ( wIbeta_tmp < ( -32768 ) )
 80048e8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80048ec:	da0c      	bge.n	8004908 <MCM_Clarke+0x40>

  Curr_Output.qI_Component2 = hIbeta_tmp;

  if ( Curr_Output.qI_Component2 == ( int16_t )( -32768 ) )
  {
    Curr_Output.qI_Component2 = -32767;
 80048ee:	4b08      	ldr	r3, [pc, #32]	; (8004910 <MCM_Clarke+0x48>)
 80048f0:	e001      	b.n	80048f6 <MCM_Clarke+0x2e>
    hIbeta_tmp = INT16_MAX;
 80048f2:	f647 73ff 	movw	r3, #32767	; 0x7fff
  }

  return ( Curr_Output );
 80048f6:	b292      	uxth	r2, r2
 80048f8:	2000      	movs	r0, #0
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	f362 000f 	bfi	r0, r2, #0, #16
 8004900:	f363 401f 	bfi	r0, r3, #16, #16
}
 8004904:	b004      	add	sp, #16
 8004906:	4770      	bx	lr
    hIbeta_tmp = ( int16_t )( wIbeta_tmp );
 8004908:	b203      	sxth	r3, r0
  if ( Curr_Output.qI_Component2 == ( int16_t )( -32768 ) )
 800490a:	d1f4      	bne.n	80048f6 <MCM_Clarke+0x2e>
    Curr_Output.qI_Component2 = -32767;
 800490c:	4b00      	ldr	r3, [pc, #0]	; (8004910 <MCM_Clarke+0x48>)
 800490e:	e7f2      	b.n	80048f6 <MCM_Clarke+0x2e>
 8004910:	ffff8001 	.word	0xffff8001

08004914 <MCM_Park>:
  * @param  Curr_Input: stator current Ialpha and Ibeta in Curr_Components format
  * @param  Theta: rotating frame angular position in q1.15 format
  * @retval Stator current Iq and Id in Curr_Components format
  */
Curr_Components MCM_Park( Curr_Components Curr_Input, int16_t Theta )
{
 8004914:	b430      	push	{r4, r5}
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8004916:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
 800491a:	f3c1 1189 	ubfx	r1, r1, #6, #10


  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 800491e:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8004922:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004926:	b205      	sxth	r5, r0
{
 8004928:	b084      	sub	sp, #16
 800492a:	ea4f 4020 	mov.w	r0, r0, asr #16
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 800492e:	d055      	beq.n	80049dc <MCM_Park+0xc8>
 8004930:	d943      	bls.n	80049ba <MCM_Park+0xa6>
 8004932:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004936:	d031      	beq.n	800499c <MCM_Park+0x88>
 8004938:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800493c:	d109      	bne.n	8004952 <MCM_Park+0x3e>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U90_180:
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800493e:	b2c9      	uxtb	r1, r1
 8004940:	4a2c      	ldr	r2, [pc, #176]	; (80049f4 <MCM_Park+0xe0>)
 8004942:	43cb      	mvns	r3, r1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8004944:	f832 4011 	ldrh.w	r4, [r2, r1, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004948:	b2db      	uxtb	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800494a:	4264      	negs	r4, r4
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800494c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8004950:	b224      	sxth	r4, r4
  qIq_tmp_1 = Curr_Input.qI_Component1 * ( int32_t )Local_Vector_Components.hCos;
 8004952:	fb05 f204 	mul.w	r2, r5, r4
  wIqd_tmp = ( qIq_tmp_1 - qIq_tmp_2 ) >> 15;
 8004956:	fb00 2213 	mls	r2, r0, r3, r2
 800495a:	13d2      	asrs	r2, r2, #15
  if ( wIqd_tmp > INT16_MAX )
 800495c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004960:	da28      	bge.n	80049b4 <MCM_Park+0xa0>
  else if ( wIqd_tmp < ( -32768 ) )
 8004962:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8004966:	db37      	blt.n	80049d8 <MCM_Park+0xc4>
    hIqd_tmp = ( int16_t )( wIqd_tmp );
 8004968:	b212      	sxth	r2, r2
  if ( Curr_Output.qI_Component1 == ( int16_t )( -32768 ) )
 800496a:	d035      	beq.n	80049d8 <MCM_Park+0xc4>
  qId_tmp_2 = Curr_Input.qI_Component2 * ( int32_t )Local_Vector_Components.hCos;
 800496c:	fb04 f400 	mul.w	r4, r4, r0
  wIqd_tmp = ( qId_tmp_1 + qId_tmp_2 ) >> 15;
 8004970:	fb05 4303 	mla	r3, r5, r3, r4
 8004974:	13db      	asrs	r3, r3, #15
  if ( wIqd_tmp > INT16_MAX )
 8004976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800497a:	da18      	bge.n	80049ae <MCM_Park+0x9a>
  else if ( wIqd_tmp < ( -32768 ) )
 800497c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8004980:	db01      	blt.n	8004986 <MCM_Park+0x72>
    hIqd_tmp = ( int16_t )( wIqd_tmp );
 8004982:	b21b      	sxth	r3, r3
  if ( Curr_Output.qI_Component2 == ( int16_t )( -32768 ) )
 8004984:	d100      	bne.n	8004988 <MCM_Park+0x74>
    Curr_Output.qI_Component2 = -32767;
 8004986:	4b1c      	ldr	r3, [pc, #112]	; (80049f8 <MCM_Park+0xe4>)
  return ( Curr_Output );
 8004988:	b292      	uxth	r2, r2
 800498a:	2000      	movs	r0, #0
 800498c:	b29b      	uxth	r3, r3
 800498e:	f362 000f 	bfi	r0, r2, #0, #16
 8004992:	f363 401f 	bfi	r0, r3, #16, #16
}
 8004996:	b004      	add	sp, #16
 8004998:	bc30      	pop	{r4, r5}
 800499a:	4770      	bx	lr
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800499c:	b2c9      	uxtb	r1, r1
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800499e:	43cb      	mvns	r3, r1
 80049a0:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80049a2:	4a14      	ldr	r2, [pc, #80]	; (80049f4 <MCM_Park+0xe0>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80049a4:	f932 4013 	ldrsh.w	r4, [r2, r3, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80049a8:	f932 3011 	ldrsh.w	r3, [r2, r1, lsl #1]
 80049ac:	e7d1      	b.n	8004952 <MCM_Park+0x3e>
    hIqd_tmp = INT16_MAX;
 80049ae:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80049b2:	e7e9      	b.n	8004988 <MCM_Park+0x74>
    hIqd_tmp = INT16_MAX;
 80049b4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80049b8:	e7d8      	b.n	800496c <MCM_Park+0x58>
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 80049ba:	2a00      	cmp	r2, #0
 80049bc:	d1c9      	bne.n	8004952 <MCM_Park+0x3e>
      break;

    case U180_270:
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80049be:	b2c9      	uxtb	r1, r1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80049c0:	43cb      	mvns	r3, r1
 80049c2:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80049c4:	4a0b      	ldr	r2, [pc, #44]	; (80049f4 <MCM_Park+0xe0>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80049c6:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80049ca:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80049ce:	4264      	negs	r4, r4
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80049d0:	425b      	negs	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80049d2:	b224      	sxth	r4, r4
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80049d4:	b21b      	sxth	r3, r3
 80049d6:	e7bc      	b.n	8004952 <MCM_Park+0x3e>
    Curr_Output.qI_Component1 = -32767;
 80049d8:	4a07      	ldr	r2, [pc, #28]	; (80049f8 <MCM_Park+0xe4>)
 80049da:	e7c7      	b.n	800496c <MCM_Park+0x58>
      break;

    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80049dc:	b2c9      	uxtb	r1, r1
 80049de:	43cb      	mvns	r3, r1
 80049e0:	4a04      	ldr	r2, [pc, #16]	; (80049f4 <MCM_Park+0xe0>)
 80049e2:	b2db      	uxtb	r3, r3
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 80049e4:	f932 4011 	ldrsh.w	r4, [r2, r1, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80049e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049ec:	425b      	negs	r3, r3
 80049ee:	b21b      	sxth	r3, r3
 80049f0:	e7af      	b.n	8004952 <MCM_Park+0x3e>
 80049f2:	bf00      	nop
 80049f4:	080071d8 	.word	0x080071d8
 80049f8:	ffff8001 	.word	0xffff8001

080049fc <MCM_Rev_Park>:
{
 80049fc:	b430      	push	{r4, r5}
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 80049fe:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
  uhindex /= ( uint16_t )64;
 8004a02:	f3c1 1189 	ubfx	r1, r1, #6, #10
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8004a06:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8004a0a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004a0e:	b205      	sxth	r5, r0
{
 8004a10:	b084      	sub	sp, #16
 8004a12:	ea4f 4020 	mov.w	r0, r0, asr #16
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8004a16:	d03c      	beq.n	8004a92 <MCM_Rev_Park+0x96>
 8004a18:	d92c      	bls.n	8004a74 <MCM_Rev_Park+0x78>
 8004a1a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004a1e:	d020      	beq.n	8004a62 <MCM_Rev_Park+0x66>
 8004a20:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004a24:	d109      	bne.n	8004a3a <MCM_Rev_Park+0x3e>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004a26:	b2c9      	uxtb	r1, r1
 8004a28:	4a1f      	ldr	r2, [pc, #124]	; (8004aa8 <MCM_Rev_Park+0xac>)
 8004a2a:	43cb      	mvns	r3, r1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8004a2c:	f832 4011 	ldrh.w	r4, [r2, r1, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004a30:	b2db      	uxtb	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8004a32:	4264      	negs	r4, r4
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004a34:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8004a38:	b224      	sxth	r4, r4
  qValpha_tmp2 = Volt_Input.qV_Component2 * ( int32_t )Local_Vector_Components.hSin;
 8004a3a:	fb00 f203 	mul.w	r2, r0, r3
  Volt_Output.qV_Component1 = ( int16_t )( ( ( qValpha_tmp1 ) + ( qValpha_tmp2 ) ) >> 15 );
 8004a3e:	fb05 2204 	mla	r2, r5, r4, r2
  qVbeta_tmp2 = Volt_Input.qV_Component2 * ( int32_t )Local_Vector_Components.hCos;
 8004a42:	fb04 f000 	mul.w	r0, r4, r0
  Volt_Output.qV_Component2 = ( int16_t )( ( qVbeta_tmp2 - qVbeta_tmp1 ) >> 15 );
 8004a46:	fb05 0313 	mls	r3, r5, r3, r0
  return ( Volt_Output );
 8004a4a:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 8004a4e:	2000      	movs	r0, #0
 8004a50:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8004a54:	f362 000f 	bfi	r0, r2, #0, #16
 8004a58:	f363 401f 	bfi	r0, r3, #16, #16
}
 8004a5c:	b004      	add	sp, #16
 8004a5e:	bc30      	pop	{r4, r5}
 8004a60:	4770      	bx	lr
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8004a62:	b2c9      	uxtb	r1, r1
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004a64:	43cb      	mvns	r3, r1
 8004a66:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8004a68:	4a0f      	ldr	r2, [pc, #60]	; (8004aa8 <MCM_Rev_Park+0xac>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004a6a:	f932 4013 	ldrsh.w	r4, [r2, r3, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8004a6e:	f932 3011 	ldrsh.w	r3, [r2, r1, lsl #1]
 8004a72:	e7e2      	b.n	8004a3a <MCM_Rev_Park+0x3e>
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8004a74:	2a00      	cmp	r2, #0
 8004a76:	d1e0      	bne.n	8004a3a <MCM_Rev_Park+0x3e>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8004a78:	b2c9      	uxtb	r1, r1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004a7a:	43cb      	mvns	r3, r1
 8004a7c:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8004a7e:	4a0a      	ldr	r2, [pc, #40]	; (8004aa8 <MCM_Rev_Park+0xac>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004a80:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8004a84:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004a88:	4264      	negs	r4, r4
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8004a8a:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004a8c:	b224      	sxth	r4, r4
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8004a8e:	b213      	sxth	r3, r2
 8004a90:	e7d3      	b.n	8004a3a <MCM_Rev_Park+0x3e>
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004a92:	b2c9      	uxtb	r1, r1
 8004a94:	43cb      	mvns	r3, r1
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	4c03      	ldr	r4, [pc, #12]	; (8004aa8 <MCM_Rev_Park+0xac>)
 8004a9a:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8004a9e:	f934 4011 	ldrsh.w	r4, [r4, r1, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004aa2:	4252      	negs	r2, r2
 8004aa4:	b213      	sxth	r3, r2
 8004aa6:	e7c8      	b.n	8004a3a <MCM_Rev_Park+0x3e>
 8004aa8:	080071d8 	.word	0x080071d8

08004aac <MCM_Trig_Functions>:
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8004aac:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex /= ( uint16_t )64;
 8004ab0:	f3c0 1089 	ubfx	r0, r0, #6, #10
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8004ab4:	f400 7140 	and.w	r1, r0, #768	; 0x300
 8004ab8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 8004abc:	b082      	sub	sp, #8
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8004abe:	d031      	beq.n	8004b24 <MCM_Trig_Functions+0x78>
 8004ac0:	d921      	bls.n	8004b06 <MCM_Trig_Functions+0x5a>
 8004ac2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004ac6:	d015      	beq.n	8004af4 <MCM_Trig_Functions+0x48>
 8004ac8:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8004acc:	d109      	bne.n	8004ae2 <MCM_Trig_Functions+0x36>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004ace:	b2c0      	uxtb	r0, r0
 8004ad0:	491a      	ldr	r1, [pc, #104]	; (8004b3c <MCM_Trig_Functions+0x90>)
 8004ad2:	43c3      	mvns	r3, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8004ad4:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004ad8:	b2db      	uxtb	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8004ada:	4252      	negs	r2, r2
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004adc:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8004ae0:	b212      	sxth	r2, r2
      break;
    default:
      break;
  }
  return ( Local_Components );
 8004ae2:	b292      	uxth	r2, r2
 8004ae4:	2000      	movs	r0, #0
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	f362 000f 	bfi	r0, r2, #0, #16
 8004aec:	f363 401f 	bfi	r0, r3, #16, #16
}
 8004af0:	b002      	add	sp, #8
 8004af2:	4770      	bx	lr
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8004af4:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004af6:	43c3      	mvns	r3, r0
 8004af8:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8004afa:	4910      	ldr	r1, [pc, #64]	; (8004b3c <MCM_Trig_Functions+0x90>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004afc:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8004b00:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      break;
 8004b04:	e7ed      	b.n	8004ae2 <MCM_Trig_Functions+0x36>
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8004b06:	2900      	cmp	r1, #0
 8004b08:	d1eb      	bne.n	8004ae2 <MCM_Trig_Functions+0x36>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8004b0a:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004b0c:	43c3      	mvns	r3, r0
 8004b0e:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8004b10:	490a      	ldr	r1, [pc, #40]	; (8004b3c <MCM_Trig_Functions+0x90>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004b12:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8004b16:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004b1a:	4252      	negs	r2, r2
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8004b1c:	425b      	negs	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004b1e:	b212      	sxth	r2, r2
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8004b20:	b21b      	sxth	r3, r3
      break;
 8004b22:	e7de      	b.n	8004ae2 <MCM_Trig_Functions+0x36>
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004b24:	b2c0      	uxtb	r0, r0
 8004b26:	43c3      	mvns	r3, r0
 8004b28:	4a04      	ldr	r2, [pc, #16]	; (8004b3c <MCM_Trig_Functions+0x90>)
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8004b30:	f932 2010 	ldrsh.w	r2, [r2, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8004b34:	425b      	negs	r3, r3
 8004b36:	b21b      	sxth	r3, r3
      break;
 8004b38:	e7d3      	b.n	8004ae2 <MCM_Trig_Functions+0x36>
 8004b3a:	bf00      	nop
 8004b3c:	080071d8 	.word	0x080071d8

08004b40 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8004b40:	b510      	push	{r4, lr}
 8004b42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b46:	4604      	mov	r4, r0
 8004b48:	2100      	movs	r1, #0
 8004b4a:	f002 fafb 	bl	8007144 <memset>
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004b54:	bd10      	pop	{r4, pc}
 8004b56:	bf00      	nop

08004b58 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8004b58:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8004b5c:	1c53      	adds	r3, r2, #1
 8004b5e:	b29b      	uxth	r3, r3
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8004b60:	2b7f      	cmp	r3, #127	; 0x7f
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8004b62:	bf88      	it	hi
 8004b64:	2300      	movhi	r3, #0
{
 8004b66:	b430      	push	{r4, r5}
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8004b68:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 8004b6c:	f100 05fe 	add.w	r5, r0, #254	; 0xfe
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8004b70:	f8a0 2102 	strh.w	r2, [r0, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 8004b74:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
  int32_t wAux = 0;
 8004b78:	2200      	movs	r2, #0
 8004b7a:	1e83      	subs	r3, r0, #2
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8004b7c:	f933 4f02 	ldrsh.w	r4, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8004b80:	42ab      	cmp	r3, r5
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8004b82:	4422      	add	r2, r4
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8004b84:	d1fa      	bne.n	8004b7c <MPM_CalcElMotorPower+0x24>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8004b86:	2a00      	cmp	r2, #0
 8004b88:	bfb8      	it	lt
 8004b8a:	327f      	addlt	r2, #127	; 0x7f
 8004b8c:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8004b8e:	f8a0 2104 	strh.w	r2, [r0, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8004b92:	bc30      	pop	{r4, r5}
 8004b94:	4608      	mov	r0, r1
 8004b96:	4770      	bx	lr

08004b98 <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8004b98:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop

08004ba0 <NTC_Init>:
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 *
 *  @p pPWMnCurrentSensor : Handle on the PWMC component to be used for regular conversions
 */
void NTC_Init( NTC_Handle_t * pHandle )
{
 8004ba0:	b538      	push	{r3, r4, r5, lr}

  if ( pHandle->bSensorType == REAL_SENSOR )
 8004ba2:	7805      	ldrb	r5, [r0, #0]
 8004ba4:	b125      	cbz	r5, 8004bb0 <NTC_Init+0x10>
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
    NTC_Clear( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8004ba6:	2200      	movs	r2, #0
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8004ba8:	8a43      	ldrh	r3, [r0, #18]
    pHandle->hFaultState = MC_NO_ERROR;
 8004baa:	82c2      	strh	r2, [r0, #22]
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8004bac:	8203      	strh	r3, [r0, #16]
 8004bae:	bd38      	pop	{r3, r4, r5, pc}
 8004bb0:	4604      	mov	r4, r0
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8004bb2:	3004      	adds	r0, #4
 8004bb4:	f7fd f8aa 	bl	8001d0c <RCM_RegisterRegConv>
 8004bb8:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8004bbc:	8225      	strh	r5, [r4, #16]
 8004bbe:	bd38      	pop	{r3, r4, r5, pc}

08004bc0 <NTC_CalcAvTemp>:
uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8004bc0:	7803      	ldrb	r3, [r0, #0]
 8004bc2:	b11b      	cbz	r3, 8004bcc <NTC_CalcAvTemp+0xc>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	82c3      	strh	r3, [r0, #22]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	4770      	bx	lr
{
 8004bcc:	b510      	push	{r4, lr}
 8004bce:	4604      	mov	r4, r0
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8004bd0:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8004bd4:	f7fd f940 	bl	8001e58 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8004bd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bdc:	4298      	cmp	r0, r3
 8004bde:	d014      	beq.n	8004c0a <NTC_CalcAvTemp+0x4a>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8004be0:	8b22      	ldrh	r2, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8004be2:	8a23      	ldrh	r3, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8004be4:	1e51      	subs	r1, r2, #1
      wtemp += hAux;
 8004be6:	fb01 0303 	mla	r3, r1, r3, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8004bea:	fbb3 f3f2 	udiv	r3, r3, r2
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	8223      	strh	r3, [r4, #16]
  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8004bf2:	8b62      	ldrh	r2, [r4, #26]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d305      	bcc.n	8004c04 <NTC_CalcAvTemp+0x44>
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8004bf8:	8ba2      	ldrh	r2, [r4, #28]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d807      	bhi.n	8004c0e <NTC_CalcAvTemp+0x4e>
    hFault = pHandle->hFaultState;
 8004bfe:	8ae0      	ldrh	r0, [r4, #22]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8004c00:	82e0      	strh	r0, [r4, #22]
 8004c02:	bd10      	pop	{r4, pc}
    hFault = MC_OVER_TEMP;
 8004c04:	2008      	movs	r0, #8
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8004c06:	82e0      	strh	r0, [r4, #22]
 8004c08:	bd10      	pop	{r4, pc}
 8004c0a:	8a23      	ldrh	r3, [r4, #16]
 8004c0c:	e7f1      	b.n	8004bf2 <NTC_CalcAvTemp+0x32>
    hFault = MC_NO_ERROR;
 8004c0e:	2000      	movs	r0, #0
 8004c10:	e7f6      	b.n	8004c00 <NTC_CalcAvTemp+0x40>
 8004c12:	bf00      	nop

08004c14 <NTC_GetAvTemp_C>:
  */
int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8004c14:	7803      	ldrb	r3, [r0, #0]
 8004c16:	b113      	cbz	r3, 8004c1e <NTC_GetAvTemp_C+0xa>
    wTemp *= pHandle->hSensitivity;
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
  }
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
 8004c18:	8a80      	ldrh	r0, [r0, #20]
  }
  return ( ( int16_t )wTemp );
}
 8004c1a:	b200      	sxth	r0, r0
 8004c1c:	4770      	bx	lr
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8004c1e:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8004c20:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8004c22:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8004c26:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8004c28:	1a5b      	subs	r3, r3, r1
    wTemp *= pHandle->hSensitivity;
 8004c2a:	fb03 f302 	mul.w	r3, r3, r2
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	bfbc      	itt	lt
 8004c32:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8004c36:	33ff      	addlt	r3, #255	; 0xff
 8004c38:	eb00 4023 	add.w	r0, r0, r3, asr #16
}
 8004c3c:	b200      	sxth	r0, r0
 8004c3e:	4770      	bx	lr

08004c40 <PID_HandleInit>:
void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8004c40:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8004c42:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8004c44:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8004c46:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8004c48:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8004c4a:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8004c4c:	6283      	str	r3, [r0, #40]	; 0x28
 8004c4e:	4770      	bx	lr

08004c50 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8004c50:	8081      	strh	r1, [r0, #4]
 8004c52:	4770      	bx	lr

08004c54 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8004c54:	80c1      	strh	r1, [r0, #6]
 8004c56:	4770      	bx	lr

08004c58 <PID_GetKP>:
 * @retval Kp gain
 */
int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8004c58:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop

08004c60 <PID_GetKI>:
 * @retval Ki gain
 */
int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8004c60:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop

08004c68 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8004c68:	6081      	str	r1, [r0, #8]
 8004c6a:	4770      	bx	lr

08004c6c <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 8004c6c:	8b00      	ldrh	r0, [r0, #24]
 8004c6e:	4770      	bx	lr

08004c70 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8004c70:	8b40      	ldrh	r0, [r0, #26]
 8004c72:	4770      	bx	lr

08004c74 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8004c74:	8441      	strh	r1, [r0, #34]	; 0x22
 8004c76:	4770      	bx	lr

08004c78 <PID_GetKD>:
 * @retval Kd gain
 */
int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8004c78:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop

08004c80 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8004c80:	f9b0 2004 	ldrsh.w	r2, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8004c84:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
{
 8004c88:	b470      	push	{r4, r5, r6}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8004c8a:	fb01 f202 	mul.w	r2, r1, r2
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8004c8e:	f9b0 4014 	ldrsh.w	r4, [r0, #20]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8004c92:	f9b0 5016 	ldrsh.w	r5, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 8004c96:	b163      	cbz	r3, 8004cb2 <PI_Controller+0x32>
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8004c98:	6886      	ldr	r6, [r0, #8]
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8004c9a:	fb01 f103 	mul.w	r1, r1, r3

    if ( wIntegral_sum_temp < 0 )
 8004c9e:	198b      	adds	r3, r1, r6
 8004ca0:	d41d      	bmi.n	8004cde <PI_Controller+0x5e>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 8004ca2:	2e00      	cmp	r6, #0
 8004ca4:	db26      	blt.n	8004cf4 <PI_Controller+0x74>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8004ca6:	68c1      	ldr	r1, [r0, #12]
 8004ca8:	428b      	cmp	r3, r1
 8004caa:	dc03      	bgt.n	8004cb4 <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8004cac:	6901      	ldr	r1, [r0, #16]
 8004cae:	428b      	cmp	r3, r1
 8004cb0:	db00      	blt.n	8004cb4 <PI_Controller+0x34>
 8004cb2:	4619      	mov	r1, r3
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8004cb4:	8b86      	ldrh	r6, [r0, #28]
 8004cb6:	8bc3      	ldrh	r3, [r0, #30]
 8004cb8:	4132      	asrs	r2, r6
 8004cba:	fa41 f303 	asr.w	r3, r1, r3
 8004cbe:	4413      	add	r3, r2
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8004cc0:	42a3      	cmp	r3, r4
 8004cc2:	dc09      	bgt.n	8004cd8 <PI_Controller+0x58>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
    wOutput_32 = hUpperOutputLimit;
  }
  else if ( wOutput_32 < hLowerOutputLimit )
 8004cc4:	42ab      	cmp	r3, r5
  {

    wDischarge = hLowerOutputLimit - wOutput_32;
 8004cc6:	bfb6      	itet	lt
 8004cc8:	1aea      	sublt	r2, r5, r3
  int32_t wDischarge = 0;
 8004cca:	2200      	movge	r2, #0
 8004ccc:	462b      	movlt	r3, r5
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8004cce:	4411      	add	r1, r2
 8004cd0:	6081      	str	r1, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 8004cd2:	bc70      	pop	{r4, r5, r6}
  return ( ( int16_t )( wOutput_32 ) );
 8004cd4:	b218      	sxth	r0, r3
}
 8004cd6:	4770      	bx	lr
    wDischarge = hUpperOutputLimit - wOutput_32;
 8004cd8:	1ae2      	subs	r2, r4, r3
 8004cda:	4623      	mov	r3, r4
 8004cdc:	e7f7      	b.n	8004cce <PI_Controller+0x4e>
      if ( pHandle->wIntegralTerm > 0 )
 8004cde:	2e00      	cmp	r6, #0
 8004ce0:	dde1      	ble.n	8004ca6 <PI_Controller+0x26>
        if ( wIntegral_Term > 0 )
 8004ce2:	2900      	cmp	r1, #0
 8004ce4:	dddf      	ble.n	8004ca6 <PI_Controller+0x26>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8004ce6:	68c1      	ldr	r1, [r0, #12]
 8004ce8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004cec:	4299      	cmp	r1, r3
 8004cee:	d1e1      	bne.n	8004cb4 <PI_Controller+0x34>
          wIntegral_sum_temp = INT32_MAX;
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	e7de      	b.n	8004cb2 <PI_Controller+0x32>
          wIntegral_sum_temp = -INT32_MAX;
 8004cf4:	4e02      	ldr	r6, [pc, #8]	; (8004d00 <PI_Controller+0x80>)
 8004cf6:	ea33 0321 	bics.w	r3, r3, r1, asr #32
 8004cfa:	bf28      	it	cs
 8004cfc:	4633      	movcs	r3, r6
 8004cfe:	e7d2      	b.n	8004ca6 <PI_Controller+0x26>
 8004d00:	80000001 	.word	0x80000001

08004d04 <PQD_CalcElMotorPower>:
  */
void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  Curr_Components Iqd = pHandle->pFOCVars->Iqd;
 8004d04:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
  Volt_Components Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.qI_Component1 * ( int32_t )Vqd.qV_Component1 ) +
         ( ( int32_t )Iqd.qI_Component2 * ( int32_t )Vqd.qV_Component2 );
 8004d08:	8b11      	ldrh	r1, [r2, #24]
 8004d0a:	89d3      	ldrh	r3, [r2, #14]
{
 8004d0c:	b570      	push	{r4, r5, r6, lr}
 8004d0e:	4606      	mov	r6, r0
  wAux = ( ( int32_t )Iqd.qI_Component1 * ( int32_t )Vqd.qV_Component1 ) +
 8004d10:	8995      	ldrh	r5, [r2, #12]
 8004d12:	8ad2      	ldrh	r2, [r2, #22]
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8004d14:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 8004d18:	f8d6 4108 	ldr.w	r4, [r6, #264]	; 0x108
         ( ( int32_t )Iqd.qI_Component2 * ( int32_t )Vqd.qV_Component2 );
 8004d1c:	fb13 f301 	smulbb	r3, r3, r1
  wAux = ( ( int32_t )Iqd.qI_Component1 * ( int32_t )Vqd.qV_Component1 ) +
 8004d20:	fb15 3502 	smlabb	r5, r5, r2, r3
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8004d24:	f7ff fc5c 	bl	80045e0 <VBS_GetAvBusVoltage_V>
  wAux /= 65536;
 8004d28:	2d00      	cmp	r5, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8004d2a:	4b0f      	ldr	r3, [pc, #60]	; (8004d68 <PQD_CalcElMotorPower+0x64>)

  wAux3 = wAux * wAux2;
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8004d2c:	490f      	ldr	r1, [pc, #60]	; (8004d6c <PQD_CalcElMotorPower+0x68>)
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8004d2e:	fb04 f000 	mul.w	r0, r4, r0
  wAux /= 65536;
 8004d32:	bfb8      	it	lt
 8004d34:	f505 457f 	addlt.w	r5, r5, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8004d38:	fb83 2300 	smull	r2, r3, r3, r0
  wAux /= 65536;
 8004d3c:	bfb8      	it	lt
 8004d3e:	35ff      	addlt	r5, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8004d40:	17c0      	asrs	r0, r0, #31
  wAux /= 65536;
 8004d42:	142d      	asrs	r5, r5, #16
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8004d44:	ebc0 13a3 	rsb	r3, r0, r3, asr #6
  wAux3 = wAux * wAux2;
 8004d48:	fb03 f305 	mul.w	r3, r3, r5
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8004d4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004d50:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8004d52:	fb81 2103 	smull	r2, r1, r1, r3
 8004d56:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8004d58:	4630      	mov	r0, r6
 8004d5a:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8004d5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8004d62:	f7ff bef9 	b.w	8004b58 <MPM_CalcElMotorPower>
 8004d66:	bf00      	nop
 8004d68:	1b4e81b5 	.word	0x1b4e81b5
 8004d6c:	66666667 	.word	0x66666667

08004d70 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 8004d70:	4b17      	ldr	r3, [pc, #92]	; (8004dd0 <startTimers+0x60>)
 8004d72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  if ( isTIM2ClockOn == 0 )
 8004d74:	07d2      	lsls	r2, r2, #31
 8004d76:	d514      	bpl.n	8004da2 <startTimers+0x32>
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_APB1_GRP1_DisableClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  }
  else
  {
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8004d78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d7c:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004d7e:	6859      	ldr	r1, [r3, #4]
 8004d80:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004d84:	f041 0120 	orr.w	r1, r1, #32
 8004d88:	6059      	str	r1, [r3, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004d8a:	6959      	ldr	r1, [r3, #20]
 8004d8c:	f041 0101 	orr.w	r1, r1, #1
 8004d90:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004d92:	6859      	ldr	r1, [r3, #4]
 8004d94:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004d98:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	605a      	str	r2, [r3, #4]
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 8004da0:	4770      	bx	lr
  SET_BIT(RCC->APB1ENR, Periphs);
 8004da2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004da4:	f042 0201 	orr.w	r2, r2, #1
 8004da8:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004daa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8004dac:	b082      	sub	sp, #8
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004dae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004db2:	f002 0201 	and.w	r2, r2, #1
 8004db6:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8004db8:	9a01      	ldr	r2, [sp, #4]
 8004dba:	694a      	ldr	r2, [r1, #20]
 8004dbc:	f042 0201 	orr.w	r2, r2, #1
 8004dc0:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8004dc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dc4:	f022 0201 	bic.w	r2, r2, #1
 8004dc8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004dca:	b002      	add	sp, #8
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	40023800 	.word	0x40023800

08004dd4 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in Curr_Components format.
*/
void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, Curr_Components * pStator_Currents )
{
  pHandle->pFctGetPhaseCurrents( pHandle, pStator_Currents );
 8004dd4:	6843      	ldr	r3, [r0, #4]
 8004dd6:	4718      	bx	r3

08004dd8 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, Volt_Components Valfa_beta )
{
 8004dd8:	b470      	push	{r4, r5, r6}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;
  PWMC_SetSampPointSectX_Cb_t pSetADCSamplingPoint;

  wUAlpha = Valfa_beta.qV_Component1 * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.qV_Component2 * ( int32_t )( pHandle->hPWMperiod ) ) * 2;
 8004dda:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  wUAlpha = Valfa_beta.qV_Component1 * ( int32_t )pHandle->hT_Sqrt3;
 8004dde:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
  wUBeta = -( Valfa_beta.qV_Component2 * ( int32_t )( pHandle->hPWMperiod ) ) * 2;
 8004de2:	140c      	asrs	r4, r1, #16
{
 8004de4:	b083      	sub	sp, #12
  wUBeta = -( Valfa_beta.qV_Component2 * ( int32_t )( pHandle->hPWMperiod ) ) * 2;
 8004de6:	fb06 f404 	mul.w	r4, r6, r4
{
 8004dea:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.qV_Component2 * ( int32_t )( pHandle->hPWMperiod ) ) * 2;
 8004dec:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
  wUAlpha = Valfa_beta.qV_Component1 * ( int32_t )pHandle->hT_Sqrt3;
 8004df0:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.qV_Component2 * ( int32_t )( pHandle->hPWMperiod ) ) * 2;
 8004df2:	0064      	lsls	r4, r4, #1
  wUAlpha = Valfa_beta.qV_Component1 * ( int32_t )pHandle->hT_Sqrt3;
 8004df4:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
  wZ = ( wUBeta - wUAlpha ) / 2;
 8004df8:	1a63      	subs	r3, r4, r1
  wY = ( wUBeta + wUAlpha ) / 2;
 8004dfa:	4421      	add	r1, r4
 8004dfc:	eb01 75d1 	add.w	r5, r1, r1, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8004e00:	eb03 72d3 	add.w	r2, r3, r3, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8004e04:	106d      	asrs	r5, r5, #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8004e06:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 8004e0a:	d44f      	bmi.n	8004eac <PWMC_SetPhaseVoltage+0xd4>
        pSetADCSamplingPoint = pHandle->pFctSetADCSampPointSect3;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8004e0c:	2a00      	cmp	r2, #0
 8004e0e:	f2c0 808c 	blt.w	8004f2a <PWMC_SetPhaseVoltage+0x152>
    {
      pHandle->hSector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004e12:	1aad      	subs	r5, r5, r2
 8004e14:	bf44      	itt	mi
 8004e16:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8004e1a:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	bfbc      	itt	lt
 8004e22:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 8004e26:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8004e2a:	2900      	cmp	r1, #0
      pHandle->hSector = SECTOR_2;
 8004e2c:	f04f 0401 	mov.w	r4, #1
      wTimePhC = wTimePhA - wY / 131072;
 8004e30:	bfb8      	it	lt
 8004e32:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004e36:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8004e3a:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      pHandle->hSector = SECTOR_2;
 8004e3e:	f8a0 4046 	strh.w	r4, [r0, #70]	; 0x46
      wTimePhC = wTimePhA - wY / 131072;
 8004e42:	bfb8      	it	lt
 8004e44:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      pSetADCSamplingPoint = pHandle->pFctSetADCSampPointSect2;
 8004e48:	69c4      	ldr	r4, [r0, #28]
      wTimePhB = wTimePhA + wZ / 131072;
 8004e4a:	eb02 43a3 	add.w	r3, r2, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8004e4e:	eba2 41a1 	sub.w	r1, r2, r1, asr #18

  pHandle->hCntPhA = ( uint16_t )wTimePhA;
  pHandle->hCntPhB = ( uint16_t )wTimePhB;
  pHandle->hCntPhC = ( uint16_t )wTimePhC;

  if ( pHandle->DTTest == 1u )
 8004e52:	f8b0 505c 	ldrh.w	r5, [r0, #92]	; 0x5c
  pHandle->hCntPhA = ( uint16_t )wTimePhA;
 8004e56:	b292      	uxth	r2, r2
  pHandle->hCntPhB = ( uint16_t )wTimePhB;
 8004e58:	b29b      	uxth	r3, r3
  pHandle->hCntPhC = ( uint16_t )wTimePhC;
 8004e5a:	b289      	uxth	r1, r1
  if ( pHandle->DTTest == 1u )
 8004e5c:	2d01      	cmp	r5, #1
  pHandle->hCntPhA = ( uint16_t )wTimePhA;
 8004e5e:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
  pHandle->hCntPhB = ( uint16_t )wTimePhB;
 8004e62:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
  pHandle->hCntPhC = ( uint16_t )wTimePhC;
 8004e66:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
  if ( pHandle->DTTest == 1u )
 8004e6a:	d11b      	bne.n	8004ea4 <PWMC_SetPhaseVoltage+0xcc>
  {
    /* Dead time compensation */
    if ( pHandle->hIa > 0 )
 8004e6c:	f9b0 5056 	ldrsh.w	r5, [r0, #86]	; 0x56
    else
    {
      pHandle->hCntPhA -= pHandle->DTCompCnt;
    }

    if ( pHandle->hIb > 0 )
 8004e70:	f9b0 6058 	ldrsh.w	r6, [r0, #88]	; 0x58
    if ( pHandle->hIa > 0 )
 8004e74:	2d00      	cmp	r5, #0
      pHandle->hCntPhA += pHandle->DTCompCnt;
 8004e76:	f8b0 505e 	ldrh.w	r5, [r0, #94]	; 0x5e
 8004e7a:	bfcc      	ite	gt
 8004e7c:	1952      	addgt	r2, r2, r5
      pHandle->hCntPhA -= pHandle->DTCompCnt;
 8004e7e:	1b52      	suble	r2, r2, r5
 8004e80:	b292      	uxth	r2, r2
 8004e82:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    else
    {
      pHandle->hCntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->hIc > 0 )
 8004e86:	f9b0 205a 	ldrsh.w	r2, [r0, #90]	; 0x5a
    if ( pHandle->hIb > 0 )
 8004e8a:	2e00      	cmp	r6, #0
      pHandle->hCntPhB += pHandle->DTCompCnt;
 8004e8c:	bfcc      	ite	gt
 8004e8e:	195b      	addgt	r3, r3, r5
      pHandle->hCntPhB -= pHandle->DTCompCnt;
 8004e90:	1b5b      	suble	r3, r3, r5
    if ( pHandle->hIc > 0 )
 8004e92:	2a00      	cmp	r2, #0
      pHandle->hCntPhB -= pHandle->DTCompCnt;
 8004e94:	b29b      	uxth	r3, r3
    {
      pHandle->hCntPhC += pHandle->DTCompCnt;
 8004e96:	bfcc      	ite	gt
 8004e98:	1949      	addgt	r1, r1, r5
    }
    else
    {
      pHandle->hCntPhC -= pHandle->DTCompCnt;
 8004e9a:	1b49      	suble	r1, r1, r5
 8004e9c:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
 8004ea0:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    }
  }

  return ( pSetADCSamplingPoint( pHandle ) );
 8004ea4:	4623      	mov	r3, r4
}
 8004ea6:	b003      	add	sp, #12
 8004ea8:	bc70      	pop	{r4, r5, r6}
  return ( pSetADCSamplingPoint( pHandle ) );
 8004eaa:	4718      	bx	r3
    if ( wZ < 0 )
 8004eac:	2a00      	cmp	r2, #0
 8004eae:	db1b      	blt.n	8004ee8 <PWMC_SetPhaseVoltage+0x110>
      if ( wX <= 0 )
 8004eb0:	2c00      	cmp	r4, #0
 8004eb2:	dd59      	ble.n	8004f68 <PWMC_SetPhaseVoltage+0x190>
        wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004eb4:	1b2d      	subs	r5, r5, r4
 8004eb6:	bf44      	itt	mi
 8004eb8:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8004ebc:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8004ec0:	2900      	cmp	r1, #0
 8004ec2:	bfb8      	it	lt
 8004ec4:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004ec8:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8004ecc:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8004ed0:	bfb8      	it	lt
 8004ed2:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->hSector = SECTOR_3;
 8004ed6:	2302      	movs	r3, #2
        wTimePhC = wTimePhA - wY / 131072;
 8004ed8:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
        pHandle->hSector = SECTOR_3;
 8004edc:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
        wTimePhB = wTimePhC + wX / 131072;
 8004ee0:	eb01 4364 	add.w	r3, r1, r4, asr #17
        pSetADCSamplingPoint = pHandle->pFctSetADCSampPointSect3;
 8004ee4:	6a04      	ldr	r4, [r0, #32]
 8004ee6:	e7b4      	b.n	8004e52 <PWMC_SetPhaseVoltage+0x7a>
      wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004ee8:	1aad      	subs	r5, r5, r2
 8004eea:	bf44      	itt	mi
 8004eec:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8004ef0:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	bfbc      	itt	lt
 8004ef8:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 8004efc:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8004f00:	2900      	cmp	r1, #0
 8004f02:	bfb8      	it	lt
 8004f04:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004f08:	ea4f 0296 	mov.w	r2, r6, lsr #2
      pHandle->hSector = SECTOR_5;
 8004f0c:	f04f 0404 	mov.w	r4, #4
      wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004f10:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8004f14:	bfb8      	it	lt
 8004f16:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      pHandle->hSector = SECTOR_5;
 8004f1a:	f8a0 4046 	strh.w	r4, [r0, #70]	; 0x46
      wTimePhB = wTimePhA + wZ / 131072;
 8004f1e:	eb02 43a3 	add.w	r3, r2, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8004f22:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
      pSetADCSamplingPoint = pHandle->pFctSetADCSampPointSect5;
 8004f26:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004f28:	e793      	b.n	8004e52 <PWMC_SetPhaseVoltage+0x7a>
      if ( wX <= 0 )
 8004f2a:	2c00      	cmp	r4, #0
 8004f2c:	dd3d      	ble.n	8004faa <PWMC_SetPhaseVoltage+0x1d2>
        wTimePhB = wTimePhA + wZ / 131072;
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	bfb8      	it	lt
 8004f32:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->hSector = SECTOR_1;
 8004f36:	f04f 0100 	mov.w	r1, #0
        wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004f3a:	eba4 0502 	sub.w	r5, r4, r2
        wTimePhB = wTimePhA + wZ / 131072;
 8004f3e:	bfb8      	it	lt
 8004f40:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004f44:	08b2      	lsrs	r2, r6, #2
        pHandle->hSector = SECTOR_1;
 8004f46:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
        wTimePhC = wTimePhB - wX / 131072;
 8004f4a:	1e21      	subs	r1, r4, #0
 8004f4c:	bfb8      	it	lt
 8004f4e:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004f52:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhB = wTimePhA + wZ / 131072;
 8004f56:	eb02 43a3 	add.w	r3, r2, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8004f5a:	bfb8      	it	lt
 8004f5c:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
        pSetADCSamplingPoint = pHandle->pFctSetADCSampPointSect1;
 8004f60:	6984      	ldr	r4, [r0, #24]
        wTimePhC = wTimePhB - wX / 131072;
 8004f62:	eba3 4161 	sub.w	r1, r3, r1, asr #17
 8004f66:	e774      	b.n	8004e52 <PWMC_SetPhaseVoltage+0x7a>
        wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004f68:	1aa5      	subs	r5, r4, r2
 8004f6a:	bf44      	itt	mi
 8004f6c:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8004f70:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	bfb8      	it	lt
 8004f78:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->hSector = SECTOR_4;
 8004f7c:	f04f 0103 	mov.w	r1, #3
        wTimePhB = wTimePhA + wZ / 131072;
 8004f80:	bfb8      	it	lt
 8004f82:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->hSector = SECTOR_4;
 8004f86:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
        wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004f8a:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 8004f8c:	1e21      	subs	r1, r4, #0
 8004f8e:	bfb8      	it	lt
 8004f90:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004f94:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhB = wTimePhA + wZ / 131072;
 8004f98:	eb02 43a3 	add.w	r3, r2, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8004f9c:	bfb8      	it	lt
 8004f9e:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8004fa2:	eba3 4161 	sub.w	r1, r3, r1, asr #17
        pSetADCSamplingPoint = pHandle->pFctSetADCSampPointSect4;
 8004fa6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004fa8:	e753      	b.n	8004e52 <PWMC_SetPhaseVoltage+0x7a>
        wTimePhC = wTimePhA - wY / 131072;
 8004faa:	2900      	cmp	r1, #0
 8004fac:	bfb8      	it	lt
 8004fae:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->hSector = SECTOR_6;
 8004fb2:	f04f 0305 	mov.w	r3, #5
        wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004fb6:	eba5 0504 	sub.w	r5, r5, r4
        wTimePhC = wTimePhA - wY / 131072;
 8004fba:	bfb8      	it	lt
 8004fbc:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004fc0:	08b2      	lsrs	r2, r6, #2
        pHandle->hSector = SECTOR_6;
 8004fc2:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
        wTimePhB = wTimePhC + wX / 131072;
 8004fc6:	1e23      	subs	r3, r4, #0
 8004fc8:	bfb8      	it	lt
 8004fca:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhA = ( int32_t )( pHandle->hPWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004fce:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8004fd2:	eba2 41a1 	sub.w	r1, r2, r1, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8004fd6:	bfb8      	it	lt
 8004fd8:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8004fdc:	eb01 4363 	add.w	r3, r1, r3, asr #17
        pSetADCSamplingPoint = pHandle->pFctSetADCSampPointSect6;
 8004fe0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004fe2:	e736      	b.n	8004e52 <PWMC_SetPhaseVoltage+0x7a>

08004fe4 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8004fe4:	6883      	ldr	r3, [r0, #8]
 8004fe6:	4718      	bx	r3

08004fe8 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8004fe8:	b510      	push	{r4, lr}
 8004fea:	4604      	mov	r4, r0
 8004fec:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 8004fee:	b199      	cbz	r1, 8005018 <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8004ff0:	2901      	cmp	r1, #1
 8004ff2:	d002      	beq.n	8004ffa <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8004ff4:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8004ff6:	b002      	add	sp, #8
 8004ff8:	bd10      	pop	{r4, pc}
    if ( pHandle->hOffCalibrWaitTimeCounter > 0u )
 8004ffa:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8004ffe:	b1c3      	cbz	r3, 8005032 <PWMC_CurrentReadingCalibr+0x4a>
      pHandle->hOffCalibrWaitTimeCounter--;
 8005000:	3b01      	subs	r3, #1
 8005002:	b29b      	uxth	r3, r3
 8005004:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      if ( pHandle->hOffCalibrWaitTimeCounter == 0u )
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1f3      	bne.n	8004ff4 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 800500c:	6903      	ldr	r3, [r0, #16]
 800500e:	9101      	str	r1, [sp, #4]
 8005010:	4798      	blx	r3
        retVal = true;
 8005012:	9901      	ldr	r1, [sp, #4]
 8005014:	4608      	mov	r0, r1
 8005016:	e7ee      	b.n	8004ff6 <PWMC_CurrentReadingCalibr+0xe>
  pHandle->pFctSwitchOffPwm( pHandle );
 8005018:	6883      	ldr	r3, [r0, #8]
 800501a:	4798      	blx	r3
    pHandle->hOffCalibrWaitTimeCounter = pHandle->hOffCalibrWaitTicks;
 800501c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005020:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    if ( pHandle->hOffCalibrWaitTicks == 0u )
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1e5      	bne.n	8004ff4 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 8005028:	4620      	mov	r0, r4
 800502a:	6923      	ldr	r3, [r4, #16]
 800502c:	4798      	blx	r3
      retVal = true;
 800502e:	2001      	movs	r0, #1
 8005030:	e7e1      	b.n	8004ff6 <PWMC_CurrentReadingCalibr+0xe>
      retVal = true;
 8005032:	4608      	mov	r0, r1
}
 8005034:	b002      	add	sp, #8
 8005036:	bd10      	pop	{r4, pc}

08005038 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8005038:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800503a:	4718      	bx	r3

0800503c <R3F4XX_GetPhaseCurrents>:
  uint8_t bSector;
  int32_t wAux;
  PWMC_R3_F4_Handle_t * pHandle = ( PWMC_R3_F4_Handle_t * )pHdl;

  /* Deactivate TIMx CH4 to disable next triggers using bit-banding access */
  BB_REG_BIT_CLR ( &pHandle->pParams_str->TIMx->CCER, TIM_CCER_CC4E_Pos );
 800503c:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 8005040:	689b      	ldr	r3, [r3, #8]
{
 8005042:	b470      	push	{r4, r5, r6}
  BB_REG_BIT_CLR ( &pHandle->pParams_str->TIMx->CCER, TIM_CCER_CC4E_Pos );
 8005044:	015b      	lsls	r3, r3, #5

  /* Reset the SOFOC flag to indicate the start of FOC algorithm*/
  pHandle->bSoFOC = 0u;

  bSector = pHandle->_Super.hSector;
 8005046:	f890 4046 	ldrb.w	r4, [r0, #70]	; 0x46
  BB_REG_BIT_CLR ( &pHandle->pParams_str->TIMx->CCER, TIM_CCER_CC4E_Pos );
 800504a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800504e:	2200      	movs	r2, #0
 8005050:	2c05      	cmp	r4, #5
 8005052:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  pHandle->bSoFOC = 0u;
 8005056:	f880 2082 	strb.w	r2, [r0, #130]	; 0x82
 800505a:	d846      	bhi.n	80050ea <R3F4XX_GetPhaseCurrents+0xae>
 800505c:	2301      	movs	r3, #1
 800505e:	40a3      	lsls	r3, r4
 8005060:	f013 0f21 	tst.w	r3, #33	; 0x21
 8005064:	d120      	bne.n	80050a8 <R3F4XX_GetPhaseCurrents+0x6c>
 8005066:	f013 0f06 	tst.w	r3, #6
 800506a:	d04e      	beq.n	800510a <R3F4XX_GetPhaseCurrents+0xce>

    case SECTOR_2:
    case SECTOR_3:
      /* Current on Phase B is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      wAux = ( int32_t )( ADC1->JDR1 );
 800506c:	4b57      	ldr	r3, [pc, #348]	; (80051cc <R3F4XX_GetPhaseCurrents+0x190>)
      wAux *= 2;
      wAux = ( int32_t )( pHandle->wPhaseAOffset ) - wAux;
 800506e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
      wAux = ( int32_t )( ADC1->JDR1 );
 8005070:	6bdd      	ldr	r5, [r3, #60]	; 0x3c

      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 8005072:	4b57      	ldr	r3, [pc, #348]	; (80051d0 <R3F4XX_GetPhaseCurrents+0x194>)
      wAux = ( int32_t )( pHandle->wPhaseAOffset ) - wAux;
 8005074:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
      if ( wAux < -INT16_MAX )
 8005078:	429d      	cmp	r5, r3
 800507a:	da7f      	bge.n	800517c <R3F4XX_GetPhaseCurrents+0x140>
 800507c:	461d      	mov	r5, r3
      {
        pStator_Currents->qI_Component1 = -INT16_MAX;
 800507e:	800b      	strh	r3, [r1, #0]
 8005080:	461e      	mov	r6, r3
 8005082:	f248 0301 	movw	r3, #32769	; 0x8001
      {
        pStator_Currents->qI_Component1 = ( int16_t )wAux;
      }

      /* Ib = -Ic -Ia */
      wAux = ( int32_t )( ADC2->JDR1 );
 8005086:	4a53      	ldr	r2, [pc, #332]	; (80051d4 <R3F4XX_GetPhaseCurrents+0x198>)
      wAux *= 2;
      wAux -= ( int32_t )pHandle->wPhaseCOffset;
 8005088:	6f44      	ldr	r4, [r0, #116]	; 0x74
      wAux = ( int32_t )( ADC2->JDR1 );
 800508a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
      wAux -= ( int32_t )pHandle->wPhaseCOffset;
 800508c:	ebc4 0242 	rsb	r2, r4, r2, lsl #1
      wAux -= ( int32_t )pStator_Currents->qI_Component1;
 8005090:	1b52      	subs	r2, r2, r5

      /* Saturation of Ib */
      if ( wAux > INT16_MAX )
 8005092:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005096:	da7b      	bge.n	8005190 <R3F4XX_GetPhaseCurrents+0x154>
      {
        pStator_Currents->qI_Component2 = INT16_MAX;
      }
      else  if ( wAux < -INT16_MAX )
 8005098:	4d4d      	ldr	r5, [pc, #308]	; (80051d0 <R3F4XX_GetPhaseCurrents+0x194>)
 800509a:	42aa      	cmp	r2, r5
 800509c:	f2c0 8084 	blt.w	80051a8 <R3F4XX_GetPhaseCurrents+0x16c>
      {
        pStator_Currents->qI_Component2 = -INT16_MAX;
      }
      else
      {
        pStator_Currents->qI_Component2 = ( int16_t )wAux;
 80050a0:	b215      	sxth	r5, r2
 80050a2:	804d      	strh	r5, [r1, #2]
 80050a4:	b292      	uxth	r2, r2
 80050a6:	e026      	b.n	80050f6 <R3F4XX_GetPhaseCurrents+0xba>
      wAux = ( int32_t )( ADC1->JDR1 );
 80050a8:	4b48      	ldr	r3, [pc, #288]	; (80051cc <R3F4XX_GetPhaseCurrents+0x190>)
      wAux = ( int32_t )( pHandle->wPhaseBOffset ) - wAux;
 80050aa:	6f04      	ldr	r4, [r0, #112]	; 0x70
      wAux = ( int32_t )( ADC1->JDR1 );
 80050ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if ( wAux < -INT16_MAX )
 80050ae:	4a48      	ldr	r2, [pc, #288]	; (80051d0 <R3F4XX_GetPhaseCurrents+0x194>)
      wAux = ( int32_t )( pHandle->wPhaseBOffset ) - wAux;
 80050b0:	eba4 0443 	sub.w	r4, r4, r3, lsl #1
      if ( wAux < -INT16_MAX )
 80050b4:	4294      	cmp	r4, r2
 80050b6:	db4d      	blt.n	8005154 <R3F4XX_GetPhaseCurrents+0x118>
      else  if ( wAux > INT16_MAX )
 80050b8:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80050bc:	db5a      	blt.n	8005174 <R3F4XX_GetPhaseCurrents+0x138>
        pStator_Currents->qI_Component2 = INT16_MAX;
 80050be:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80050c2:	461a      	mov	r2, r3
 80050c4:	804b      	strh	r3, [r1, #2]
 80050c6:	461c      	mov	r4, r3
 80050c8:	461d      	mov	r5, r3
      wAux = ( int32_t )( ADC2->JDR1 );
 80050ca:	4e42      	ldr	r6, [pc, #264]	; (80051d4 <R3F4XX_GetPhaseCurrents+0x198>)
      wAux -= ( int32_t )pHandle->wPhaseCOffset;
 80050cc:	6f43      	ldr	r3, [r0, #116]	; 0x74
      wAux = ( int32_t )( ADC2->JDR1 );
 80050ce:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
      wAux -= ( int32_t )pHandle->wPhaseCOffset;
 80050d0:	ebc3 0346 	rsb	r3, r3, r6, lsl #1
      wAux -= ( int32_t )pStator_Currents->qI_Component2;
 80050d4:	1b1c      	subs	r4, r3, r4
      if ( wAux > INT16_MAX )
 80050d6:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80050da:	da41      	bge.n	8005160 <R3F4XX_GetPhaseCurrents+0x124>
      else  if ( wAux < -INT16_MAX )
 80050dc:	4e3c      	ldr	r6, [pc, #240]	; (80051d0 <R3F4XX_GetPhaseCurrents+0x194>)
 80050de:	42b4      	cmp	r4, r6
 80050e0:	da44      	bge.n	800516c <R3F4XX_GetPhaseCurrents+0x130>
        pStator_Currents->qI_Component1 = -INT16_MAX;
 80050e2:	800e      	strh	r6, [r1, #0]
 80050e4:	f248 0301 	movw	r3, #32769	; 0x8001
 80050e8:	e005      	b.n	80050f6 <R3F4XX_GetPhaseCurrents+0xba>
 80050ea:	f9b1 6000 	ldrsh.w	r6, [r1]
 80050ee:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80050f2:	b2b3      	uxth	r3, r6
 80050f4:	b2aa      	uxth	r2, r5
      break;
  }

  pHandle->_Super.hIa = pStator_Currents->qI_Component1;
  pHandle->_Super.hIb = pStator_Currents->qI_Component2;
  pHandle->_Super.hIc = -pStator_Currents->qI_Component1 - pStator_Currents->qI_Component2;
 80050f6:	4413      	add	r3, r2
 80050f8:	425b      	negs	r3, r3
  pHandle->_Super.hIa = pStator_Currents->qI_Component1;
 80050fa:	f8a0 6056 	strh.w	r6, [r0, #86]	; 0x56
  pHandle->_Super.hIb = pStator_Currents->qI_Component2;
 80050fe:	f8a0 5058 	strh.w	r5, [r0, #88]	; 0x58
  pHandle->_Super.hIc = -pStator_Currents->qI_Component1 - pStator_Currents->qI_Component2;
 8005102:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
}
 8005106:	bc70      	pop	{r4, r5, r6}
 8005108:	4770      	bx	lr
 800510a:	f013 0f18 	tst.w	r3, #24
 800510e:	d0ec      	beq.n	80050ea <R3F4XX_GetPhaseCurrents+0xae>
      wAux = ( int32_t )( ADC1->JDR1 );
 8005110:	4a2e      	ldr	r2, [pc, #184]	; (80051cc <R3F4XX_GetPhaseCurrents+0x190>)
      wAux = ( int32_t )( pHandle->wPhaseAOffset ) - wAux;
 8005112:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
      wAux = ( int32_t )( ADC1->JDR1 );
 8005114:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
      if ( wAux < -INT16_MAX )
 8005116:	4a2e      	ldr	r2, [pc, #184]	; (80051d0 <R3F4XX_GetPhaseCurrents+0x194>)
      wAux = ( int32_t )( pHandle->wPhaseAOffset ) - wAux;
 8005118:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
      if ( wAux < -INT16_MAX )
 800511c:	4293      	cmp	r3, r2
 800511e:	db41      	blt.n	80051a4 <R3F4XX_GetPhaseCurrents+0x168>
      else  if ( wAux > INT16_MAX )
 8005120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
        pStator_Currents->qI_Component1 = INT16_MAX;
 8005124:	bfa8      	it	ge
 8005126:	f647 73ff 	movwge	r3, #32767	; 0x7fff
        pStator_Currents->qI_Component1 = ( int16_t )wAux;
 800512a:	800b      	strh	r3, [r1, #0]
      wAux = ( int32_t )( ADC2->JDR1 );
 800512c:	4b29      	ldr	r3, [pc, #164]	; (80051d4 <R3F4XX_GetPhaseCurrents+0x198>)
      wAux = ( int32_t )( pHandle->wPhaseBOffset ) - wAux;
 800512e:	6f02      	ldr	r2, [r0, #112]	; 0x70
      wAux = ( int32_t )( ADC2->JDR1 );
 8005130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if ( wAux < -INT16_MAX )
 8005132:	4d27      	ldr	r5, [pc, #156]	; (80051d0 <R3F4XX_GetPhaseCurrents+0x194>)
      wAux = ( int32_t )( pHandle->wPhaseBOffset ) - wAux;
 8005134:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
      if ( wAux < -INT16_MAX )
 8005138:	42aa      	cmp	r2, r5
 800513a:	db39      	blt.n	80051b0 <R3F4XX_GetPhaseCurrents+0x174>
      else  if ( wAux > INT16_MAX )
 800513c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005140:	db3d      	blt.n	80051be <R3F4XX_GetPhaseCurrents+0x182>
 8005142:	f9b1 6000 	ldrsh.w	r6, [r1]
        pStator_Currents->qI_Component2 = INT16_MAX;
 8005146:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800514a:	804b      	strh	r3, [r1, #2]
 800514c:	461a      	mov	r2, r3
 800514e:	461d      	mov	r5, r3
 8005150:	b2b3      	uxth	r3, r6
 8005152:	e7d0      	b.n	80050f6 <R3F4XX_GetPhaseCurrents+0xba>
 8005154:	4614      	mov	r4, r2
        pStator_Currents->qI_Component2 = -INT16_MAX;
 8005156:	804a      	strh	r2, [r1, #2]
 8005158:	4615      	mov	r5, r2
 800515a:	f248 0201 	movw	r2, #32769	; 0x8001
 800515e:	e7b4      	b.n	80050ca <R3F4XX_GetPhaseCurrents+0x8e>
        pStator_Currents->qI_Component1 = INT16_MAX;
 8005160:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8005164:	4623      	mov	r3, r4
 8005166:	800c      	strh	r4, [r1, #0]
 8005168:	4626      	mov	r6, r4
 800516a:	e7c4      	b.n	80050f6 <R3F4XX_GetPhaseCurrents+0xba>
        pStator_Currents->qI_Component1 = ( int16_t )wAux;
 800516c:	b226      	sxth	r6, r4
 800516e:	800e      	strh	r6, [r1, #0]
 8005170:	b2a3      	uxth	r3, r4
 8005172:	e7c0      	b.n	80050f6 <R3F4XX_GetPhaseCurrents+0xba>
        pStator_Currents->qI_Component2 = ( int16_t )wAux;
 8005174:	b225      	sxth	r5, r4
 8005176:	804d      	strh	r5, [r1, #2]
 8005178:	b2a2      	uxth	r2, r4
 800517a:	e7a6      	b.n	80050ca <R3F4XX_GetPhaseCurrents+0x8e>
      else  if ( wAux > INT16_MAX )
 800517c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 8005180:	db0c      	blt.n	800519c <R3F4XX_GetPhaseCurrents+0x160>
        pStator_Currents->qI_Component1 = INT16_MAX;
 8005182:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005186:	4613      	mov	r3, r2
 8005188:	800a      	strh	r2, [r1, #0]
 800518a:	4615      	mov	r5, r2
 800518c:	4616      	mov	r6, r2
 800518e:	e77a      	b.n	8005086 <R3F4XX_GetPhaseCurrents+0x4a>
        pStator_Currents->qI_Component2 = INT16_MAX;
 8005190:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8005194:	4622      	mov	r2, r4
 8005196:	804c      	strh	r4, [r1, #2]
 8005198:	4625      	mov	r5, r4
 800519a:	e7ac      	b.n	80050f6 <R3F4XX_GetPhaseCurrents+0xba>
        pStator_Currents->qI_Component1 = ( int16_t )wAux;
 800519c:	b22e      	sxth	r6, r5
 800519e:	800e      	strh	r6, [r1, #0]
 80051a0:	b2ab      	uxth	r3, r5
 80051a2:	e770      	b.n	8005086 <R3F4XX_GetPhaseCurrents+0x4a>
        pStator_Currents->qI_Component1 = -INT16_MAX;
 80051a4:	800a      	strh	r2, [r1, #0]
 80051a6:	e7c1      	b.n	800512c <R3F4XX_GetPhaseCurrents+0xf0>
        pStator_Currents->qI_Component2 = -INT16_MAX;
 80051a8:	804d      	strh	r5, [r1, #2]
 80051aa:	f248 0201 	movw	r2, #32769	; 0x8001
 80051ae:	e7a2      	b.n	80050f6 <R3F4XX_GetPhaseCurrents+0xba>
 80051b0:	f9b1 6000 	ldrsh.w	r6, [r1]
        pStator_Currents->qI_Component2 = -INT16_MAX;
 80051b4:	804d      	strh	r5, [r1, #2]
 80051b6:	b2b3      	uxth	r3, r6
 80051b8:	f248 0201 	movw	r2, #32769	; 0x8001
 80051bc:	e79b      	b.n	80050f6 <R3F4XX_GetPhaseCurrents+0xba>
 80051be:	f9b1 6000 	ldrsh.w	r6, [r1]
        pStator_Currents->qI_Component2 = ( int16_t )wAux;
 80051c2:	b215      	sxth	r5, r2
 80051c4:	b2b3      	uxth	r3, r6
 80051c6:	804d      	strh	r5, [r1, #2]
 80051c8:	b292      	uxth	r2, r2
 80051ca:	e794      	b.n	80050f6 <R3F4XX_GetPhaseCurrents+0xba>
 80051cc:	40012000 	.word	0x40012000
 80051d0:	ffff8001 	.word	0xffff8001
 80051d4:	40012100 	.word	0x40012100

080051d8 <R3F4XX_HFCurrentsCalibrationAB>:
static void R3F4XX_HFCurrentsCalibrationAB( PWMC_Handle_t * pHdl, Curr_Components * pStator_Currents )
{
  PWMC_R3_F4_Handle_t * pHandle = ( PWMC_R3_F4_Handle_t * )pHdl;

  /* Deactivate TIMx CH4 to disable next triggers using bit-banding access */
  BB_REG_BIT_CLR ( &pHandle->pParams_str->TIMx->CCER, TIM_CCER_CC4E_Pos );
 80051d8:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	015b      	lsls	r3, r3, #5
 80051e0:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80051e4:	2200      	movs	r2, #0
 80051e6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Reset the SOFOC flag to indicate the start of FOC algorithm*/
  pHandle->bSoFOC = 0u;
 80051ea:	f880 2082 	strb.w	r2, [r0, #130]	; 0x82

  if ( pHandle->bIndex < NB_CONVERSIONS )
 80051ee:	f890 3083 	ldrb.w	r3, [r0, #131]	; 0x83
 80051f2:	2b0f      	cmp	r3, #15
 80051f4:	d817      	bhi.n	8005226 <R3F4XX_HFCurrentsCalibrationAB+0x4e>
  {
    pHandle-> wPhaseAOffset += ADC1->JDR1;
 80051f6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80051fa:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
{
 80051fe:	b430      	push	{r4, r5}
    pHandle-> wPhaseAOffset += ADC1->JDR1;
 8005200:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005202:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
    pHandle-> wPhaseBOffset += ADC2->JDR1;
 8005204:	4c09      	ldr	r4, [pc, #36]	; (800522c <R3F4XX_HFCurrentsCalibrationAB+0x54>)
 8005206:	6f02      	ldr	r2, [r0, #112]	; 0x70
    pHandle-> wPhaseAOffset += ADC1->JDR1;
 8005208:	442b      	add	r3, r5
 800520a:	66c3      	str	r3, [r0, #108]	; 0x6c
    pHandle-> wPhaseBOffset += ADC2->JDR1;
 800520c:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    pHandle->bIndex++;
 800520e:	f890 3083 	ldrb.w	r3, [r0, #131]	; 0x83
 8005212:	3301      	adds	r3, #1
 8005214:	b2db      	uxtb	r3, r3
    pHandle-> wPhaseBOffset += ADC2->JDR1;
 8005216:	4422      	add	r2, r4
    pHandle->bIndex++;
 8005218:	f880 3083 	strb.w	r3, [r0, #131]	; 0x83
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->qI_Component1 = 0;
 800521c:	2300      	movs	r3, #0
    pHandle-> wPhaseBOffset += ADC2->JDR1;
 800521e:	6702      	str	r2, [r0, #112]	; 0x70
  pStator_Currents->qI_Component2 = 0;
}
 8005220:	bc30      	pop	{r4, r5}
  pStator_Currents->qI_Component1 = 0;
 8005222:	600b      	str	r3, [r1, #0]
}
 8005224:	4770      	bx	lr
  pStator_Currents->qI_Component1 = 0;
 8005226:	2300      	movs	r3, #0
 8005228:	600b      	str	r3, [r1, #0]
 800522a:	4770      	bx	lr
 800522c:	40012100 	.word	0x40012100

08005230 <R3F4XX_HFCurrentsCalibrationC>:
static void R3F4XX_HFCurrentsCalibrationC( PWMC_Handle_t * pHdl, Curr_Components * pStator_Currents )
{
  PWMC_R3_F4_Handle_t * pHandle = ( PWMC_R3_F4_Handle_t * )pHdl;

  /* Deactivate TIMx CH4 to disable next triggers using bit-banding access */
  BB_REG_BIT_CLR ( &pHandle->pParams_str->TIMx->CCER, TIM_CCER_CC4E_Pos );
 8005230:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	015b      	lsls	r3, r3, #5
 8005238:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800523c:	2200      	movs	r2, #0
 800523e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Reset the SOFOC flag to indicate the start of FOC algorithm*/
  pHandle->bSoFOC = 0u;
 8005242:	f880 2082 	strb.w	r2, [r0, #130]	; 0x82

  if ( pHandle->bIndex < NB_CONVERSIONS / 2u )
 8005246:	f890 3083 	ldrb.w	r3, [r0, #131]	; 0x83
 800524a:	2b07      	cmp	r3, #7
 800524c:	d815      	bhi.n	800527a <R3F4XX_HFCurrentsCalibrationC+0x4a>
  {
    pHandle-> wPhaseCOffset += ADC1->JDR1;
 800524e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005252:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
    pHandle-> wPhaseCOffset += ADC2->JDR1;
 8005256:	4b0a      	ldr	r3, [pc, #40]	; (8005280 <R3F4XX_HFCurrentsCalibrationC+0x50>)
{
 8005258:	b430      	push	{r4, r5}
    pHandle-> wPhaseCOffset += ADC1->JDR1;
 800525a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
    pHandle-> wPhaseCOffset += ADC2->JDR1;
 800525c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    pHandle->bIndex++;
 800525e:	f890 3083 	ldrb.w	r3, [r0, #131]	; 0x83
    pHandle-> wPhaseCOffset += ADC2->JDR1;
 8005262:	6f42      	ldr	r2, [r0, #116]	; 0x74
    pHandle->bIndex++;
 8005264:	3301      	adds	r3, #1
    pHandle-> wPhaseCOffset += ADC2->JDR1;
 8005266:	442c      	add	r4, r5
    pHandle->bIndex++;
 8005268:	b2db      	uxtb	r3, r3
    pHandle-> wPhaseCOffset += ADC2->JDR1;
 800526a:	4422      	add	r2, r4
    pHandle->bIndex++;
 800526c:	f880 3083 	strb.w	r3, [r0, #131]	; 0x83
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->qI_Component1 = 0;
 8005270:	2300      	movs	r3, #0
    pHandle-> wPhaseCOffset += ADC2->JDR1;
 8005272:	6742      	str	r2, [r0, #116]	; 0x74
  pStator_Currents->qI_Component2 = 0;
}
 8005274:	bc30      	pop	{r4, r5}
  pStator_Currents->qI_Component1 = 0;
 8005276:	600b      	str	r3, [r1, #0]
}
 8005278:	4770      	bx	lr
  pStator_Currents->qI_Component1 = 0;
 800527a:	2300      	movs	r3, #0
 800527c:	600b      	str	r3, [r1, #0]
 800527e:	4770      	bx	lr
 8005280:	40012100 	.word	0x40012100

08005284 <R3F4XX_TurnOnLowSides>:
  * @retval none
  */
void R3F4XX_TurnOnLowSides( PWMC_Handle_t * pHdl )
{
  PWMC_R3_F4_Handle_t * pHandle = ( PWMC_R3_F4_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005284:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90

  pHandle->_Super.bTurnOnLowSidesAction = true;
 8005288:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800528a:	688a      	ldr	r2, [r1, #8]
  pHandle->_Super.bTurnOnLowSidesAction = true;
 800528c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005290:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005292:	f06f 0001 	mvn.w	r0, #1
 8005296:	6110      	str	r0, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005298:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800529a:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800529c:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800529e:	6913      	ldr	r3, [r2, #16]
 80052a0:	07db      	lsls	r3, r3, #31
 80052a2:	d5fc      	bpl.n	800529e <R3F4XX_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80052a4:	6c53      	ldr	r3, [r2, #68]	; 0x44
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET )
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80052a6:	7d08      	ldrb	r0, [r1, #20]
 80052a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ac:	2802      	cmp	r0, #2
 80052ae:	6453      	str	r3, [r2, #68]	; 0x44
 80052b0:	d10a      	bne.n	80052c8 <R3F4XX_TurnOnLowSides+0x44>
{
 80052b2:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80052b4:	6a08      	ldr	r0, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80052b6:	698d      	ldr	r5, [r1, #24]
 80052b8:	69ce      	ldr	r6, [r1, #28]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80052ba:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80052bc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80052be:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 80052c0:	61ae      	str	r6, [r5, #24]
 80052c2:	6184      	str	r4, [r0, #24]
  }
  return;
}
 80052c4:	bc70      	pop	{r4, r5, r6}
 80052c6:	619a      	str	r2, [r3, #24]
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop

080052cc <R3F4XX_SwitchOnPWM>:
  *         bit
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
void R3F4XX_SwitchOnPWM( PWMC_Handle_t * pHdl )
{
 80052cc:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;

  pHandle->_Super.bTurnOnLowSidesAction = false;

  /* It clears ADCs JSTRT and JEOC bits */
  ADC1->SR &= ~ADC_SR_MASK;
 80052ce:	4d1f      	ldr	r5, [pc, #124]	; (800534c <R3F4XX_SwitchOnPWM+0x80>)
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80052d0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
  ADC1->SR &= ~ADC_SR_MASK;
 80052d4:	6829      	ldr	r1, [r5, #0]
  ADC2->SR &= ~ADC_SR_MASK;
 80052d6:	4c1e      	ldr	r4, [pc, #120]	; (8005350 <R3F4XX_SwitchOnPWM+0x84>)
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80052d8:	6893      	ldr	r3, [r2, #8]
  ADC1->SR &= ~ADC_SR_MASK;
 80052da:	f021 010c 	bic.w	r1, r1, #12
  pHandle->_Super.bTurnOnLowSidesAction = false;
 80052de:	2600      	movs	r6, #0
 80052e0:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
  ADC1->SR &= ~ADC_SR_MASK;
 80052e4:	6029      	str	r1, [r5, #0]
  ADC2->SR &= ~ADC_SR_MASK;
 80052e6:	6821      	ldr	r1, [r4, #0]

  LL_TIM_EnableIT_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80052e8:	7d10      	ldrb	r0, [r2, #20]
  ADC2->SR &= ~ADC_SR_MASK;
 80052ea:	f021 010c 	bic.w	r1, r1, #12
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80052ee:	f06f 0501 	mvn.w	r5, #1
 80052f2:	6021      	str	r1, [r4, #0]
 80052f4:	611d      	str	r5, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80052f6:	68d9      	ldr	r1, [r3, #12]
 80052f8:	f041 0101 	orr.w	r1, r1, #1
 80052fc:	60d9      	str	r1, [r3, #12]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80052fe:	6c59      	ldr	r1, [r3, #68]	; 0x44
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005300:	2802      	cmp	r0, #2
 8005302:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8005306:	6459      	str	r1, [r3, #68]	; 0x44
 8005308:	d001      	beq.n	800530e <R3F4XX_SwitchOnPWM+0x42>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
    }
  }
  return;
}
 800530a:	bc70      	pop	{r4, r5, r6}
 800530c:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800530e:	6a19      	ldr	r1, [r3, #32]
 8005310:	f240 5355 	movw	r3, #1365	; 0x555
 8005314:	4219      	tst	r1, r3
 8005316:	d10d      	bne.n	8005334 <R3F4XX_SwitchOnPWM+0x68>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005318:	69d0      	ldr	r0, [r2, #28]
 800531a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800531c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800531e:	6996      	ldr	r6, [r2, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005320:	6a15      	ldr	r5, [r2, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005322:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8005324:	0400      	lsls	r0, r0, #16
 8005326:	0409      	lsls	r1, r1, #16
 8005328:	041b      	lsls	r3, r3, #16
 800532a:	61b0      	str	r0, [r6, #24]
 800532c:	61a9      	str	r1, [r5, #24]
 800532e:	61a3      	str	r3, [r4, #24]
}
 8005330:	bc70      	pop	{r4, r5, r6}
 8005332:	4770      	bx	lr
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005334:	6994      	ldr	r4, [r2, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005336:	6a11      	ldr	r1, [r2, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005338:	6a93      	ldr	r3, [r2, #40]	; 0x28
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800533a:	69d5      	ldr	r5, [r2, #28]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800533c:	6a50      	ldr	r0, [r2, #36]	; 0x24
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800533e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005340:	61a5      	str	r5, [r4, #24]
 8005342:	6188      	str	r0, [r1, #24]
}
 8005344:	bc70      	pop	{r4, r5, r6}
 8005346:	619a      	str	r2, [r3, #24]
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	40012000 	.word	0x40012000
 8005350:	40012100 	.word	0x40012100

08005354 <R3F4XX_SwitchOffPWM>:
  * @retval none
  */
void R3F4XX_SwitchOffPWM( PWMC_Handle_t * pHdl )
{
  PWMC_R3_F4_Handle_t * pHandle = ( PWMC_R3_F4_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005354:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
 8005358:	688b      	ldr	r3, [r1, #8]

  pHandle->_Super.bTurnOnLowSidesAction = false;
 800535a:	2200      	movs	r2, #0
 800535c:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005360:	68da      	ldr	r2, [r3, #12]
 8005362:	f022 0201 	bic.w	r2, r2, #1
 8005366:	60da      	str	r2, [r3, #12]

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );

  TIMx->CCER &= ( uint16_t )( ~TIMxCCER_MASK_CH123 );
 8005368:	6a1a      	ldr	r2, [r3, #32]
 800536a:	f64f 20aa 	movw	r0, #64170	; 0xfaaa
 800536e:	4002      	ands	r2, r0
 8005370:	621a      	str	r2, [r3, #32]

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET )
 8005372:	e002      	b.n	800537a <R3F4XX_SwitchOffPWM+0x26>
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8005374:	68da      	ldr	r2, [r3, #12]
 8005376:	07d2      	lsls	r2, r2, #31
 8005378:	d402      	bmi.n	8005380 <R3F4XX_SwitchOffPWM+0x2c>
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	07d0      	lsls	r0, r2, #31
 800537e:	d5f9      	bpl.n	8005374 <R3F4XX_SwitchOffPWM+0x20>
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    }
  }

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005382:	7d08      	ldrb	r0, [r1, #20]
 8005384:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005388:	2802      	cmp	r0, #2
 800538a:	645a      	str	r2, [r3, #68]	; 0x44
 800538c:	d006      	beq.n	800539c <R3F4XX_SwitchOffPWM+0x48>
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
  }
  TIMx->CCER |= TIMxCCER_MASK_CH123;
 800538e:	6a1a      	ldr	r2, [r3, #32]
 8005390:	f442 62aa 	orr.w	r2, r2, #1360	; 0x550
 8005394:	f042 0205 	orr.w	r2, r2, #5
 8005398:	621a      	str	r2, [r3, #32]
 800539a:	4770      	bx	lr
{
 800539c:	b4f0      	push	{r4, r5, r6, r7}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800539e:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80053a0:	69cc      	ldr	r4, [r1, #28]
 80053a2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80053a4:	698f      	ldr	r7, [r1, #24]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80053a6:	6a0e      	ldr	r6, [r1, #32]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80053a8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80053aa:	0424      	lsls	r4, r4, #16
 80053ac:	0412      	lsls	r2, r2, #16
 80053ae:	0400      	lsls	r0, r0, #16
 80053b0:	61bc      	str	r4, [r7, #24]
 80053b2:	61b0      	str	r0, [r6, #24]
 80053b4:	61aa      	str	r2, [r5, #24]
  TIMx->CCER |= TIMxCCER_MASK_CH123;
 80053b6:	6a1a      	ldr	r2, [r3, #32]
 80053b8:	f442 62aa 	orr.w	r2, r2, #1360	; 0x550
 80053bc:	f042 0205 	orr.w	r2, r2, #5
 80053c0:	621a      	str	r2, [r3, #32]

  return;
}
 80053c2:	bcf0      	pop	{r4, r5, r6, r7}
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop

080053c8 <R3F4XX_RLGetPhaseCurrents>:
{
  PWMC_R3_F4_Handle_t * pHandle = ( PWMC_R3_F4_Handle_t * )pHdl;
  int32_t wAux;

  /* Reset the SOFOC flag to indicate the start of FOC algorithm*/
  pHandle->bSoFOC = 0u;
 80053c8:	2300      	movs	r3, #0

  wAux = ( int32_t )( ADC1->JDR1 );
 80053ca:	4a0d      	ldr	r2, [pc, #52]	; (8005400 <R3F4XX_RLGetPhaseCurrents+0x38>)
  pHandle->bSoFOC = 0u;
 80053cc:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
  wAux *= 2;
  wAux = ( int32_t )( pHandle->wPhaseBOffset ) - wAux;
 80053d0:	6f03      	ldr	r3, [r0, #112]	; 0x70
  wAux = ( int32_t )( ADC1->JDR1 );
 80053d2:	6bd0      	ldr	r0, [r2, #60]	; 0x3c

  /* Check saturation */
  if ( wAux > -INT16_MAX )
 80053d4:	4a0b      	ldr	r2, [pc, #44]	; (8005404 <R3F4XX_RLGetPhaseCurrents+0x3c>)
  wAux = ( int32_t )( pHandle->wPhaseBOffset ) - wAux;
 80053d6:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
  if ( wAux > -INT16_MAX )
 80053da:	4293      	cmp	r3, r2
 80053dc:	db0c      	blt.n	80053f8 <R3F4XX_RLGetPhaseCurrents+0x30>
  {
    if ( wAux < INT16_MAX )
 80053de:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80053e2:	4293      	cmp	r3, r2
 80053e4:	dd04      	ble.n	80053f0 <R3F4XX_RLGetPhaseCurrents+0x28>
 80053e6:	f647 73ff 	movw	r3, #32767	; 0x7fff
  else
  {
    wAux = -INT16_MAX;
  }

  pStator_Currents->qI_Component1 = ( int16_t )( wAux );
 80053ea:	800b      	strh	r3, [r1, #0]
  pStator_Currents->qI_Component2 = ( int16_t )( wAux );
 80053ec:	804b      	strh	r3, [r1, #2]
 80053ee:	4770      	bx	lr
 80053f0:	b21b      	sxth	r3, r3
  pStator_Currents->qI_Component1 = ( int16_t )( wAux );
 80053f2:	800b      	strh	r3, [r1, #0]
  pStator_Currents->qI_Component2 = ( int16_t )( wAux );
 80053f4:	804b      	strh	r3, [r1, #2]
 80053f6:	4770      	bx	lr
 80053f8:	4b03      	ldr	r3, [pc, #12]	; (8005408 <R3F4XX_RLGetPhaseCurrents+0x40>)
  pStator_Currents->qI_Component1 = ( int16_t )( wAux );
 80053fa:	800b      	strh	r3, [r1, #0]
  pStator_Currents->qI_Component2 = ( int16_t )( wAux );
 80053fc:	804b      	strh	r3, [r1, #2]
 80053fe:	4770      	bx	lr
 8005400:	40012000 	.word	0x40012000
 8005404:	ffff8002 	.word	0xffff8002
 8005408:	ffff8001 	.word	0xffff8001

0800540c <R3F4XX_RLTurnOnLowSides>:
  * @retval none
  */
static void R3F4XX_RLTurnOnLowSides( PWMC_Handle_t * pHdl )
{
  PWMC_R3_F4_Handle_t * pHandle = ( PWMC_R3_F4_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800540c:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
 8005410:	688a      	ldr	r2, [r1, #8]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005412:	2000      	movs	r0, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005414:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005418:	6350      	str	r0, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800541a:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800541c:	6913      	ldr	r3, [r2, #16]
 800541e:	07db      	lsls	r3, r3, #31
 8005420:	d5fc      	bpl.n	800541c <R3F4XX_RLTurnOnLowSides+0x10>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005422:	6c53      	ldr	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005424:	7d08      	ldrb	r0, [r1, #20]
 8005426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800542a:	2802      	cmp	r0, #2
 800542c:	6453      	str	r3, [r2, #68]	; 0x44
 800542e:	d10c      	bne.n	800544a <R3F4XX_RLTurnOnLowSides+0x3e>
{
 8005430:	b430      	push	{r4, r5}
 8005432:	6a4a      	ldr	r2, [r1, #36]	; 0x24
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005434:	698d      	ldr	r5, [r1, #24]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005436:	6a0c      	ldr	r4, [r1, #32]
 8005438:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800543a:	6a88      	ldr	r0, [r1, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800543c:	69c9      	ldr	r1, [r1, #28]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800543e:	61a9      	str	r1, [r5, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005440:	0412      	lsls	r2, r2, #16
 8005442:	61a2      	str	r2, [r4, #24]
  }
  return;
}
 8005444:	bc30      	pop	{r4, r5}
 8005446:	041b      	lsls	r3, r3, #16
 8005448:	6183      	str	r3, [r0, #24]
 800544a:	4770      	bx	lr

0800544c <R3F4XX_RLSwitchOnPWM>:
  * @retval none
  */
static void R3F4XX_RLSwitchOnPWM( PWMC_Handle_t * pHdl )
{
  PWMC_R3_F4_Handle_t * pHandle = ( PWMC_R3_F4_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800544c:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
 8005450:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005452:	f06f 0201 	mvn.w	r2, #1
{
 8005456:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005458:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800545a:	691a      	ldr	r2, [r3, #16]
 800545c:	07d4      	lsls	r4, r2, #31
 800545e:	d5fc      	bpl.n	800545a <R3F4XX_RLSwitchOnPWM+0xe>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  LL_TIM_OC_SetCompareCH1( TIMx, 1u );
  LL_TIM_OC_SetCompareCH4( TIMx, ( pHandle->Half_PWMPeriod ) - 5u );
 8005460:	f8b0 2080 	ldrh.w	r2, [r0, #128]	; 0x80
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005464:	f06f 0501 	mvn.w	r5, #1
 8005468:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 800546a:	2401      	movs	r4, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800546c:	611d      	str	r5, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800546e:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8005470:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005472:	691a      	ldr	r2, [r3, #16]
 8005474:	07d2      	lsls	r2, r2, #31
 8005476:	d5fc      	bpl.n	8005472 <R3F4XX_RLSwitchOnPWM+0x26>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005478:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800547a:	7d0c      	ldrb	r4, [r1, #20]
 800547c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005480:	2c02      	cmp	r4, #2
 8005482:	645a      	str	r2, [r3, #68]	; 0x44
 8005484:	d012      	beq.n	80054ac <R3F4XX_RLSwitchOnPWM+0x60>
    }
  }

  /* Switch Context */
  /* Disabling trigger to avoid unwanted conversion */
  ADC1->CR2 = pHandle->wADCTriggerUnSet;
 8005486:	4c19      	ldr	r4, [pc, #100]	; (80054ec <R3F4XX_RLSwitchOnPWM+0xa0>)
  ADC2->CR2 = pHandle->wADCTriggerUnSet;
 8005488:	4a19      	ldr	r2, [pc, #100]	; (80054f0 <R3F4XX_RLSwitchOnPWM+0xa4>)
  ADC1->CR2 = pHandle->wADCTriggerUnSet;
 800548a:	f8d0 5088 	ldr.w	r5, [r0, #136]	; 0x88
 800548e:	60a5      	str	r5, [r4, #8]
  ADC2->CR2 = pHandle->wADCTriggerUnSet;
 8005490:	6095      	str	r5, [r2, #8]

  /* Enabling next Trigger */
  TIMx->CCER |= 0x1000u;
 8005492:	6a1d      	ldr	r5, [r3, #32]

  /* It re-initilize AD converter in run time when using dual MC */
  ADC1->CR2 = pHandle->wADCTriggerSet;
 8005494:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
  TIMx->CCER |= 0x1000u;
 8005498:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
 800549c:	621d      	str	r5, [r3, #32]
  ADC1->CR2 = pHandle->wADCTriggerSet;
 800549e:	60a6      	str	r6, [r4, #8]
  ADC2->CR2 = pHandle->wADCTriggerSet;
 80054a0:	6096      	str	r6, [r2, #8]

  ADC1->JSQR = PHASE_B_MSK;
 80054a2:	794b      	ldrb	r3, [r1, #5]
 80054a4:	03db      	lsls	r3, r3, #15
 80054a6:	63a3      	str	r3, [r4, #56]	; 0x38
  ADC2->JSQR = PHASE_B_MSK;
 80054a8:	6393      	str	r3, [r2, #56]	; 0x38
 80054aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80054ac:	6a1c      	ldr	r4, [r3, #32]
 80054ae:	f240 5255 	movw	r2, #1365	; 0x555
 80054b2:	4214      	tst	r4, r2
 80054b4:	d10e      	bne.n	80054d4 <R3F4XX_RLSwitchOnPWM+0x88>
 80054b6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80054b8:	69ce      	ldr	r6, [r1, #28]
 80054ba:	6a4c      	ldr	r4, [r1, #36]	; 0x24
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80054bc:	6a0d      	ldr	r5, [r1, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80054be:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 80054c0:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 80054c4:	698a      	ldr	r2, [r1, #24]
 80054c6:	0436      	lsls	r6, r6, #16
 80054c8:	0424      	lsls	r4, r4, #16
 80054ca:	6196      	str	r6, [r2, #24]
 80054cc:	61ac      	str	r4, [r5, #24]
 80054ce:	f8c7 e018 	str.w	lr, [r7, #24]
 80054d2:	e7d8      	b.n	8005486 <R3F4XX_RLSwitchOnPWM+0x3a>
 80054d4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80054d6:	698e      	ldr	r6, [r1, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80054d8:	6a0d      	ldr	r5, [r1, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80054da:	6a8c      	ldr	r4, [r1, #40]	; 0x28
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80054dc:	69cf      	ldr	r7, [r1, #28]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80054de:	61b7      	str	r7, [r6, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80054e0:	0412      	lsls	r2, r2, #16
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80054e2:	6a4e      	ldr	r6, [r1, #36]	; 0x24
  WRITE_REG(GPIOx->BSRR, PinMask);
 80054e4:	61ae      	str	r6, [r5, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80054e6:	61a2      	str	r2, [r4, #24]
 80054e8:	e7cd      	b.n	8005486 <R3F4XX_RLSwitchOnPWM+0x3a>
 80054ea:	bf00      	nop
 80054ec:	40012000 	.word	0x40012000
 80054f0:	40012100 	.word	0x40012100

080054f4 <R3F4XX_Init>:
    R3F4XX_TIMxInit( pHandle->pParams_str->TIMx, &pHandle->_Super );
 80054f4:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
 80054f8:	688b      	ldr	r3, [r1, #8]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	f022 0201 	bic.w	r2, r2, #1
{
 8005500:	b410      	push	{r4}
  if ( ( pHandle->pParams_str->EmergencyStop ) != DISABLE )
 8005502:	f891 4030 	ldrb.w	r4, [r1, #48]	; 0x30
 8005506:	601a      	str	r2, [r3, #0]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8005508:	699a      	ldr	r2, [r3, #24]
 800550a:	f042 0208 	orr.w	r2, r2, #8
 800550e:	619a      	str	r2, [r3, #24]
 8005510:	699a      	ldr	r2, [r3, #24]
 8005512:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005516:	619a      	str	r2, [r3, #24]
 8005518:	69da      	ldr	r2, [r3, #28]
 800551a:	f042 0208 	orr.w	r2, r2, #8
 800551e:	61da      	str	r2, [r3, #28]
 8005520:	69da      	ldr	r2, [r3, #28]
 8005522:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005526:	61da      	str	r2, [r3, #28]
 8005528:	b134      	cbz	r4, 8005538 <R3F4XX_Init+0x44>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800552a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800552e:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005536:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005538:	695a      	ldr	r2, [r3, #20]
 800553a:	f042 0201 	orr.w	r2, r2, #1
 800553e:	615a      	str	r2, [r3, #20]
  if ( pHandle->pParams_str->bFreqRatio == 2u )
 8005540:	788a      	ldrb	r2, [r1, #2]
 8005542:	2a02      	cmp	r2, #2
 8005544:	d038      	beq.n	80055b8 <R3F4XX_Init+0xc4>
    if ( pHandle->_Super.bMotor == M1 )
 8005546:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 800554a:	b91a      	cbnz	r2, 8005554 <R3F4XX_Init+0x60>
      LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 800554c:	f8b0 2080 	ldrh.w	r2, [r0, #128]	; 0x80
 8005550:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 8005552:	625a      	str	r2, [r3, #36]	; 0x24
    if ( pHandle->pParams_str->TIMx == TIM1 )
 8005554:	4a2f      	ldr	r2, [pc, #188]	; (8005614 <R3F4XX_Init+0x120>)
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8005556:	4c30      	ldr	r4, [pc, #192]	; (8005618 <R3F4XX_Init+0x124>)
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8005558:	4930      	ldr	r1, [pc, #192]	; (800561c <R3F4XX_Init+0x128>)
 800555a:	4293      	cmp	r3, r2
 800555c:	4b30      	ldr	r3, [pc, #192]	; (8005620 <R3F4XX_Init+0x12c>)
 800555e:	68e2      	ldr	r2, [r4, #12]
 8005560:	d037      	beq.n	80055d2 <R3F4XX_Init+0xde>
 8005562:	f042 0202 	orr.w	r2, r2, #2
 8005566:	60e2      	str	r2, [r4, #12]
 8005568:	689a      	ldr	r2, [r3, #8]
 800556a:	f042 0201 	orr.w	r2, r2, #1
 800556e:	609a      	str	r2, [r3, #8]
 8005570:	688a      	ldr	r2, [r1, #8]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8005572:	f06f 0404 	mvn.w	r4, #4
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8005576:	f042 0201 	orr.w	r2, r2, #1
 800557a:	608a      	str	r2, [r1, #8]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800557c:	601c      	str	r4, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005584:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8005586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005588:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800558c:	62da      	str	r2, [r3, #44]	; 0x2c
      pHandle->wADCTriggerUnSet = ADC1->CR2 & 0xFFC0FFFFu; /* JEXTEN = 00b (Disable), JEXTSEL = 0000b (TIM1_CC4 "dummy") */
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
      pHandle->wADCTriggerSet   = pHandle->wADCTriggerUnSet |
 8005594:	f443 12f0 	orr.w	r2, r3, #1966080	; 0x1e0000
      pHandle->wADCTriggerUnSet = ADC1->CR2 & 0xFFC0FFFFu; /* JEXTEN = 00b (Disable), JEXTSEL = 0000b (TIM1_CC4 "dummy") */
 8005598:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      pHandle->wADCTriggerSet   = pHandle->wADCTriggerUnSet |
 800559c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    pHandle->OverCurrentFlag = false;
 80055a0:	2300      	movs	r3, #0
    pHandle->_Super.DTCompCnt = pHandle->_Super.hDTCompCnt;
 80055a2:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
    pHandle->OverCurrentFlag = false;
 80055a6:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
    pHandle->_Super.DTTest = 0u;
 80055aa:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    pHandle->_Super.DTCompCnt = pHandle->_Super.hDTCompCnt;
 80055ae:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
}
 80055b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055b6:	4770      	bx	lr
    if ( pHandle->pParams_str->bIsHigherFreqTim == HIGHER_FREQ )
 80055b8:	78ca      	ldrb	r2, [r1, #3]
 80055ba:	2a01      	cmp	r2, #1
 80055bc:	d1c6      	bne.n	800554c <R3F4XX_Init+0x58>
      if ( pHandle->pParams_str->bRepetitionCounter == 3u )
 80055be:	7b89      	ldrb	r1, [r1, #14]
 80055c0:	2903      	cmp	r1, #3
 80055c2:	d1c3      	bne.n	800554c <R3F4XX_Init+0x58>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80055c4:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80055c6:	695a      	ldr	r2, [r3, #20]
 80055c8:	f042 0201 	orr.w	r2, r2, #1
 80055cc:	615a      	str	r2, [r3, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80055ce:	6319      	str	r1, [r3, #48]	; 0x30
 80055d0:	e7bc      	b.n	800554c <R3F4XX_Init+0x58>
 80055d2:	f042 0201 	orr.w	r2, r2, #1
 80055d6:	60e2      	str	r2, [r4, #12]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	f042 0201 	orr.w	r2, r2, #1
 80055de:	609a      	str	r2, [r3, #8]
 80055e0:	688a      	ldr	r2, [r1, #8]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80055e2:	f06f 0404 	mvn.w	r4, #4
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80055e6:	f042 0201 	orr.w	r2, r2, #1
 80055ea:	608a      	str	r2, [r1, #8]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80055ec:	601c      	str	r4, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055f4:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80055f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80055fc:	62da      	str	r2, [r3, #44]	; 0x2c
      pHandle->wADCTriggerUnSet = ADC1->CR2 & 0xFFC0FFFFu; /* JEXTEN = 00b (Disable), JEXTSEL = 0000b (TIM1_CC4) */
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
      pHandle->wADCTriggerSet   = pHandle->wADCTriggerUnSet |
 8005604:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
      pHandle->wADCTriggerUnSet = ADC1->CR2 & 0xFFC0FFFFu; /* JEXTEN = 00b (Disable), JEXTSEL = 0000b (TIM1_CC4) */
 8005608:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      pHandle->wADCTriggerSet   = pHandle->wADCTriggerUnSet |
 800560c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 8005610:	e7c6      	b.n	80055a0 <R3F4XX_Init+0xac>
 8005612:	bf00      	nop
 8005614:	40010000 	.word	0x40010000
 8005618:	e0042000 	.word	0xe0042000
 800561c:	40012100 	.word	0x40012100
 8005620:	40012000 	.word	0x40012000

08005624 <R3F4XX_CurrentReadingCalibration>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005624:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
{
 8005628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800562a:	6895      	ldr	r5, [r2, #8]
  pHandle->_Super.pFctGetPhaseCurrents = &R3F4XX_HFCurrentsCalibrationAB;
 800562c:	4e33      	ldr	r6, [pc, #204]	; (80056fc <R3F4XX_CurrentReadingCalibration+0xd8>)
  pHandle->wPhaseAOffset = 0u;
 800562e:	2300      	movs	r3, #0
  pHandle->bIndex = 0u;
 8005630:	f880 3083 	strb.w	r3, [r0, #131]	; 0x83
  TIMx->CCER &= TIMxCCER_MASK;
 8005634:	6a29      	ldr	r1, [r5, #32]
  pHandle->wPhaseAOffset = 0u;
 8005636:	66c3      	str	r3, [r0, #108]	; 0x6c
  TIMx->CCER &= TIMxCCER_MASK;
 8005638:	f64e 27aa 	movw	r7, #60074	; 0xeaaa
 800563c:	4039      	ands	r1, r7
  pHandle->wPhaseBOffset = 0u;
 800563e:	6703      	str	r3, [r0, #112]	; 0x70
  pHandle->wPhaseCOffset = 0u;
 8005640:	6743      	str	r3, [r0, #116]	; 0x74
  TIMx->CCER &= TIMxCCER_MASK;
 8005642:	6229      	str	r1, [r5, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &R3F4XX_HFCurrentsCalibrationAB;
 8005644:	6046      	str	r6, [r0, #4]
  pHandle->wADC1Channel = PHASE_A_MSK;
 8005646:	7913      	ldrb	r3, [r2, #4]
 8005648:	03db      	lsls	r3, r3, #15
 800564a:	6783      	str	r3, [r0, #120]	; 0x78
  pHandle->wADC2Channel = PHASE_B_MSK;
 800564c:	7953      	ldrb	r3, [r2, #5]
 800564e:	03db      	lsls	r3, r3, #15
 8005650:	67c3      	str	r3, [r0, #124]	; 0x7c
{
 8005652:	4604      	mov	r4, r0
  R3F4XX_SwitchOnPWM( &pHandle->_Super );
 8005654:	f7ff fe3a 	bl	80052cc <R3F4XX_SwitchOnPWM>
      pHandle->bIndex = NB_CONVERSIONS;
 8005658:	2210      	movs	r2, #16
  while ( pHandle->bIndex < ( NB_CONVERSIONS ) )
 800565a:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
 800565e:	2b0f      	cmp	r3, #15
 8005660:	d808      	bhi.n	8005674 <R3F4XX_CurrentReadingCalibration+0x50>
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8005662:	68eb      	ldr	r3, [r5, #12]
 8005664:	07d9      	lsls	r1, r3, #31
 8005666:	d4f8      	bmi.n	800565a <R3F4XX_CurrentReadingCalibration+0x36>
      pHandle->bIndex = NB_CONVERSIONS;
 8005668:	f884 2083 	strb.w	r2, [r4, #131]	; 0x83
  while ( pHandle->bIndex < ( NB_CONVERSIONS ) )
 800566c:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
 8005670:	2b0f      	cmp	r3, #15
 8005672:	d9f6      	bls.n	8005662 <R3F4XX_CurrentReadingCalibration+0x3e>
  pHandle->_Super.pFctGetPhaseCurrents = &R3F4XX_HFCurrentsCalibrationC;
 8005674:	4a22      	ldr	r2, [pc, #136]	; (8005700 <R3F4XX_CurrentReadingCalibration+0xdc>)
  pHandle->wADC1Channel = PHASE_C_MSK;
 8005676:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  pHandle->_Super.pFctGetPhaseCurrents = &R3F4XX_HFCurrentsCalibrationC;
 800567a:	6062      	str	r2, [r4, #4]
  pHandle->bIndex = 0u;
 800567c:	2100      	movs	r1, #0
 800567e:	f884 1083 	strb.w	r1, [r4, #131]	; 0x83
  pHandle->wADC1Channel = PHASE_C_MSK;
 8005682:	799b      	ldrb	r3, [r3, #6]
 8005684:	03db      	lsls	r3, r3, #15
 8005686:	67a3      	str	r3, [r4, #120]	; 0x78
  pHandle->wADC2Channel = PHASE_C_MSK;
 8005688:	67e3      	str	r3, [r4, #124]	; 0x7c
  R3F4XX_SwitchOnPWM( &pHandle->_Super );
 800568a:	4620      	mov	r0, r4
 800568c:	f7ff fe1e 	bl	80052cc <R3F4XX_SwitchOnPWM>
      pHandle->bIndex = NB_CONVERSIONS;
 8005690:	2210      	movs	r2, #16
  while ( pHandle->bIndex < ( NB_CONVERSIONS / 2u ) )
 8005692:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
 8005696:	2b07      	cmp	r3, #7
 8005698:	d808      	bhi.n	80056ac <R3F4XX_CurrentReadingCalibration+0x88>
 800569a:	68eb      	ldr	r3, [r5, #12]
 800569c:	07db      	lsls	r3, r3, #31
 800569e:	d4f8      	bmi.n	8005692 <R3F4XX_CurrentReadingCalibration+0x6e>
      pHandle->bIndex = NB_CONVERSIONS;
 80056a0:	f884 2083 	strb.w	r2, [r4, #131]	; 0x83
  while ( pHandle->bIndex < ( NB_CONVERSIONS / 2u ) )
 80056a4:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
 80056a8:	2b07      	cmp	r3, #7
 80056aa:	d9f6      	bls.n	800569a <R3F4XX_CurrentReadingCalibration+0x76>
  TIMx->CCMR1 &= 0xF7F7u;
 80056ac:	69ab      	ldr	r3, [r5, #24]
  pHandle->wPhaseAOffset >>= 3;
 80056ae:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  pHandle->wPhaseBOffset >>= 3;
 80056b0:	6f20      	ldr	r0, [r4, #112]	; 0x70
  pHandle->wPhaseCOffset >>= 3;
 80056b2:	6f61      	ldr	r1, [r4, #116]	; 0x74
  pHandle->_Super.pFctGetPhaseCurrents = &R3F4XX_GetPhaseCurrents;
 80056b4:	4a13      	ldr	r2, [pc, #76]	; (8005704 <R3F4XX_CurrentReadingCalibration+0xe0>)
 80056b6:	6062      	str	r2, [r4, #4]
  TIMx->CCMR1 &= 0xF7F7u;
 80056b8:	f24f 77f7 	movw	r7, #63479	; 0xf7f7
  pHandle->wPhaseCOffset >>= 3;
 80056bc:	08c9      	lsrs	r1, r1, #3
  TIMx->CCMR1 &= 0xF7F7u;
 80056be:	403b      	ands	r3, r7
  pHandle->wPhaseAOffset >>= 3;
 80056c0:	08f6      	lsrs	r6, r6, #3
  pHandle->wPhaseBOffset >>= 3;
 80056c2:	08c0      	lsrs	r0, r0, #3
  pHandle->wPhaseCOffset >>= 3;
 80056c4:	6761      	str	r1, [r4, #116]	; 0x74
  pHandle->wPhaseAOffset >>= 3;
 80056c6:	66e6      	str	r6, [r4, #108]	; 0x6c
  pHandle->wPhaseBOffset >>= 3;
 80056c8:	6720      	str	r0, [r4, #112]	; 0x70
  TIMx->CCMR1 &= 0xF7F7u;
 80056ca:	61ab      	str	r3, [r5, #24]
  TIMx->CCMR2 &= 0xF7F7u;
 80056cc:	69ea      	ldr	r2, [r5, #28]
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->Half_PWMPeriod );
 80056ce:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
  TIMx->CCMR2 &= 0xF7F7u;
 80056d2:	403a      	ands	r2, r7
 80056d4:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80056d6:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80056d8:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80056da:	63eb      	str	r3, [r5, #60]	; 0x3c
  TIMx->CCMR1 |= 0x0808u;
 80056dc:	69aa      	ldr	r2, [r5, #24]
 80056de:	f640 0108 	movw	r1, #2056	; 0x808
 80056e2:	430a      	orrs	r2, r1
 80056e4:	61aa      	str	r2, [r5, #24]
  TIMx->CCMR2 |= 0x0808u;
 80056e6:	69eb      	ldr	r3, [r5, #28]
 80056e8:	430b      	orrs	r3, r1
 80056ea:	61eb      	str	r3, [r5, #28]
  TIMx->CCER |= 0x555u;
 80056ec:	6a2b      	ldr	r3, [r5, #32]
 80056ee:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 80056f2:	f043 0305 	orr.w	r3, r3, #5
 80056f6:	622b      	str	r3, [r5, #32]
}
 80056f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056fa:	bf00      	nop
 80056fc:	080051d9 	.word	0x080051d9
 8005700:	08005231 	.word	0x08005231
 8005704:	0800503d 	.word	0x0800503d

08005708 <R3F4XX_SetADCSampPointSect1>:
{
 8005708:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhA ) > pHandle->pParams_str->hTafter )
 800570a:	f8b0 1080 	ldrh.w	r1, [r0, #128]	; 0x80
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800570e:	f8d0 4090 	ldr.w	r4, [r0, #144]	; 0x90
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhA ) > pHandle->pParams_str->hTafter )
 8005712:	f8b0 7048 	ldrh.w	r7, [r0, #72]	; 0x48
  pHandle->wADCTriggerSet &= ~LL_ADC_INJ_TRIG_EXT_RISINGFALLING;
 8005716:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhA ) > pHandle->pParams_str->hTafter )
 800571a:	8a23      	ldrh	r3, [r4, #16]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800571c:	68a5      	ldr	r5, [r4, #8]
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhA ) > pHandle->pParams_str->hTafter )
 800571e:	1bca      	subs	r2, r1, r7
 8005720:	b292      	uxth	r2, r2
  pHandle->wADCTriggerSet &= ~LL_ADC_INJ_TRIG_EXT_RISINGFALLING;
 8005722:	f426 1640 	bic.w	r6, r6, #3145728	; 0x300000
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhA ) > pHandle->pParams_str->hTafter )
 8005726:	429a      	cmp	r2, r3
  pHandle->wADCTriggerSet &= ~LL_ADC_INJ_TRIG_EXT_RISINGFALLING;
 8005728:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhA ) > pHandle->pParams_str->hTafter )
 800572c:	d91e      	bls.n	800576c <R3F4XX_SetADCSampPointSect1+0x64>
    pHandle->_Super.hSector = SECTOR_4;
 800572e:	2303      	movs	r3, #3
 8005730:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    pHandle->wADC1Channel = PHASE_A_MSK;
 8005734:	7923      	ldrb	r3, [r4, #4]
 8005736:	f8b0 e04a 	ldrh.w	lr, [r0, #74]	; 0x4a
 800573a:	03db      	lsls	r3, r3, #15
 800573c:	6783      	str	r3, [r0, #120]	; 0x78
    pHandle->wADC2Channel = PHASE_B_MSK;
 800573e:	7962      	ldrb	r2, [r4, #5]
    hCntSmp = pHandle->Half_PWMPeriod - 1u;
 8005740:	1e4b      	subs	r3, r1, #1
    pHandle->wADC2Channel = PHASE_B_MSK;
 8005742:	03d2      	lsls	r2, r2, #15
 8005744:	67c2      	str	r2, [r0, #124]	; 0x7c
    hCntSmp = pHandle->Half_PWMPeriod - 1u;
 8005746:	b29b      	uxth	r3, r3
  uint32_t adcTrig = LL_ADC_INJ_TRIG_EXT_RISING;
 8005748:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  TIMx->CCR3 = pHandle->_Super.hCntPhC;
 800574c:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
  pHandle->wADCTriggerSet |= adcTrig;
 8005750:	4332      	orrs	r2, r6
 8005752:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  TIMx->CCR4 = hCntSmp;
 8005756:	642b      	str	r3, [r5, #64]	; 0x40
  TIMx->CCR1 = pHandle->_Super.hCntPhA;
 8005758:	636f      	str	r7, [r5, #52]	; 0x34
  TIMx->CCR2 = pHandle->_Super.hCntPhB;
 800575a:	f8c5 e038 	str.w	lr, [r5, #56]	; 0x38
  TIMx->CCR3 = pHandle->_Super.hCntPhC;
 800575e:	63e9      	str	r1, [r5, #60]	; 0x3c
  if ( pHandle->bSoFOC != 0u )
 8005760:	f890 0082 	ldrb.w	r0, [r0, #130]	; 0x82
}
 8005764:	3000      	adds	r0, #0
 8005766:	bf18      	it	ne
 8005768:	2001      	movne	r0, #1
 800576a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hDeltaDuty = ( uint16_t )( pHandle->_Super.hCntPhA - pHandle->_Super.hCntPhB );
 800576c:	f8b0 e04a 	ldrh.w	lr, [r0, #74]	; 0x4a
 8005770:	eba7 0c0e 	sub.w	ip, r7, lr
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhA ) * 2u )
 8005774:	fa1f fc8c 	uxth.w	ip, ip
 8005778:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 800577c:	d90b      	bls.n	8005796 <R3F4XX_SetADCSampPointSect1+0x8e>
      hCntSmp = pHandle->_Super.hCntPhA - pHandle->pParams_str->hTbefore;
 800577e:	8a63      	ldrh	r3, [r4, #18]
 8005780:	1afb      	subs	r3, r7, r3
 8005782:	b29b      	uxth	r3, r3
  uint32_t adcTrig = LL_ADC_INJ_TRIG_EXT_RISING;
 8005784:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    pHandle->wADC1Channel = PHASE_B_MSK;
 8005788:	7961      	ldrb	r1, [r4, #5]
 800578a:	03c9      	lsls	r1, r1, #15
 800578c:	6781      	str	r1, [r0, #120]	; 0x78
    pHandle->wADC2Channel = PHASE_C_MSK;
 800578e:	79a1      	ldrb	r1, [r4, #6]
 8005790:	03c9      	lsls	r1, r1, #15
 8005792:	67c1      	str	r1, [r0, #124]	; 0x7c
 8005794:	e7da      	b.n	800574c <R3F4XX_SetADCSampPointSect1+0x44>
      hCntSmp = pHandle->_Super.hCntPhA + pHandle->pParams_str->hTafter;
 8005796:	443b      	add	r3, r7
 8005798:	b29b      	uxth	r3, r3
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 800579a:	4299      	cmp	r1, r3
 800579c:	d806      	bhi.n	80057ac <R3F4XX_SetADCSampPointSect1+0xa4>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 800579e:	43db      	mvns	r3, r3
 80057a0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80057a4:	b29b      	uxth	r3, r3
        adcTrig = LL_ADC_INJ_TRIG_EXT_FALLING;
 80057a6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80057aa:	e7ed      	b.n	8005788 <R3F4XX_SetADCSampPointSect1+0x80>
  uint32_t adcTrig = LL_ADC_INJ_TRIG_EXT_RISING;
 80057ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80057b0:	e7ea      	b.n	8005788 <R3F4XX_SetADCSampPointSect1+0x80>
 80057b2:	bf00      	nop

080057b4 <R3F4XX_SetADCSampPointSect2>:
{
 80057b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhB ) > pHandle->pParams_str->hTafter )
 80057b6:	f8b0 1080 	ldrh.w	r1, [r0, #128]	; 0x80
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80057ba:	f8d0 4090 	ldr.w	r4, [r0, #144]	; 0x90
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhB ) > pHandle->pParams_str->hTafter )
 80057be:	f8b0 704a 	ldrh.w	r7, [r0, #74]	; 0x4a
  pHandle->wADCTriggerSet &= ~LL_ADC_INJ_TRIG_EXT_RISINGFALLING;
 80057c2:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhB ) > pHandle->pParams_str->hTafter )
 80057c6:	8a23      	ldrh	r3, [r4, #16]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80057c8:	68a5      	ldr	r5, [r4, #8]
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhB ) > pHandle->pParams_str->hTafter )
 80057ca:	1bca      	subs	r2, r1, r7
 80057cc:	b292      	uxth	r2, r2
  pHandle->wADCTriggerSet &= ~LL_ADC_INJ_TRIG_EXT_RISINGFALLING;
 80057ce:	f426 1640 	bic.w	r6, r6, #3145728	; 0x300000
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhB ) > pHandle->pParams_str->hTafter )
 80057d2:	429a      	cmp	r2, r3
  pHandle->wADCTriggerSet &= ~LL_ADC_INJ_TRIG_EXT_RISINGFALLING;
 80057d4:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhB ) > pHandle->pParams_str->hTafter )
 80057d8:	d91e      	bls.n	8005818 <R3F4XX_SetADCSampPointSect2+0x64>
    pHandle->_Super.hSector = SECTOR_4;
 80057da:	2303      	movs	r3, #3
 80057dc:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    pHandle->wADC1Channel = PHASE_A_MSK;
 80057e0:	7923      	ldrb	r3, [r4, #4]
 80057e2:	f8b0 e048 	ldrh.w	lr, [r0, #72]	; 0x48
 80057e6:	03db      	lsls	r3, r3, #15
 80057e8:	6783      	str	r3, [r0, #120]	; 0x78
    pHandle->wADC2Channel = PHASE_B_MSK;
 80057ea:	7962      	ldrb	r2, [r4, #5]
    hCntSmp = pHandle->Half_PWMPeriod - 1u;
 80057ec:	1e4b      	subs	r3, r1, #1
    pHandle->wADC2Channel = PHASE_B_MSK;
 80057ee:	03d2      	lsls	r2, r2, #15
 80057f0:	67c2      	str	r2, [r0, #124]	; 0x7c
    hCntSmp = pHandle->Half_PWMPeriod - 1u;
 80057f2:	b29b      	uxth	r3, r3
  uint32_t adcTrig = LL_ADC_INJ_TRIG_EXT_RISING;
 80057f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  TIMx->CCR3 = pHandle->_Super.hCntPhC;
 80057f8:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
  pHandle->wADCTriggerSet |= adcTrig;
 80057fc:	4332      	orrs	r2, r6
 80057fe:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  TIMx->CCR4 = hCntSmp;
 8005802:	642b      	str	r3, [r5, #64]	; 0x40
  TIMx->CCR1 = pHandle->_Super.hCntPhA;
 8005804:	f8c5 e034 	str.w	lr, [r5, #52]	; 0x34
  TIMx->CCR2 = pHandle->_Super.hCntPhB;
 8005808:	63af      	str	r7, [r5, #56]	; 0x38
  TIMx->CCR3 = pHandle->_Super.hCntPhC;
 800580a:	63e9      	str	r1, [r5, #60]	; 0x3c
  if ( pHandle->bSoFOC != 0u )
 800580c:	f890 0082 	ldrb.w	r0, [r0, #130]	; 0x82
}
 8005810:	3000      	adds	r0, #0
 8005812:	bf18      	it	ne
 8005814:	2001      	movne	r0, #1
 8005816:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hDeltaDuty = ( uint16_t )( pHandle->_Super.hCntPhB - pHandle->_Super.hCntPhA );
 8005818:	f8b0 e048 	ldrh.w	lr, [r0, #72]	; 0x48
 800581c:	eba7 0c0e 	sub.w	ip, r7, lr
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhB ) * 2u )
 8005820:	fa1f fc8c 	uxth.w	ip, ip
 8005824:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 8005828:	d90b      	bls.n	8005842 <R3F4XX_SetADCSampPointSect2+0x8e>
      hCntSmp = pHandle->_Super.hCntPhB - pHandle->pParams_str->hTbefore;
 800582a:	8a63      	ldrh	r3, [r4, #18]
 800582c:	1afb      	subs	r3, r7, r3
 800582e:	b29b      	uxth	r3, r3
  uint32_t adcTrig = LL_ADC_INJ_TRIG_EXT_RISING;
 8005830:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    pHandle->wADC1Channel = PHASE_A_MSK;
 8005834:	7921      	ldrb	r1, [r4, #4]
 8005836:	03c9      	lsls	r1, r1, #15
 8005838:	6781      	str	r1, [r0, #120]	; 0x78
    pHandle->wADC2Channel = PHASE_C_MSK;
 800583a:	79a1      	ldrb	r1, [r4, #6]
 800583c:	03c9      	lsls	r1, r1, #15
 800583e:	67c1      	str	r1, [r0, #124]	; 0x7c
 8005840:	e7da      	b.n	80057f8 <R3F4XX_SetADCSampPointSect2+0x44>
      hCntSmp = pHandle->_Super.hCntPhB + pHandle->pParams_str->hTafter;
 8005842:	443b      	add	r3, r7
 8005844:	b29b      	uxth	r3, r3
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 8005846:	4299      	cmp	r1, r3
 8005848:	d806      	bhi.n	8005858 <R3F4XX_SetADCSampPointSect2+0xa4>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 800584a:	43db      	mvns	r3, r3
 800584c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8005850:	b29b      	uxth	r3, r3
        adcTrig = LL_ADC_INJ_TRIG_EXT_FALLING;
 8005852:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005856:	e7ed      	b.n	8005834 <R3F4XX_SetADCSampPointSect2+0x80>
  uint32_t adcTrig = LL_ADC_INJ_TRIG_EXT_RISING;
 8005858:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800585c:	e7ea      	b.n	8005834 <R3F4XX_SetADCSampPointSect2+0x80>
 800585e:	bf00      	nop

08005860 <R3F4XX_SetADCSampPointSect3>:
{
 8005860:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhB ) > pHandle->pParams_str->hTafter )
 8005862:	f8b0 1080 	ldrh.w	r1, [r0, #128]	; 0x80
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005866:	f8d0 4090 	ldr.w	r4, [r0, #144]	; 0x90
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhB ) > pHandle->pParams_str->hTafter )
 800586a:	f8b0 704a 	ldrh.w	r7, [r0, #74]	; 0x4a
  pHandle->wADCTriggerSet &= ~LL_ADC_INJ_TRIG_EXT_RISINGFALLING;
 800586e:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhB ) > pHandle->pParams_str->hTafter )
 8005872:	8a23      	ldrh	r3, [r4, #16]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005874:	68a5      	ldr	r5, [r4, #8]
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhB ) > pHandle->pParams_str->hTafter )
 8005876:	1bca      	subs	r2, r1, r7
 8005878:	b292      	uxth	r2, r2
  pHandle->wADCTriggerSet &= ~LL_ADC_INJ_TRIG_EXT_RISINGFALLING;
 800587a:	f426 1640 	bic.w	r6, r6, #3145728	; 0x300000
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhB ) > pHandle->pParams_str->hTafter )
 800587e:	429a      	cmp	r2, r3
  pHandle->wADCTriggerSet &= ~LL_ADC_INJ_TRIG_EXT_RISINGFALLING;
 8005880:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhB ) > pHandle->pParams_str->hTafter )
 8005884:	d91e      	bls.n	80058c4 <R3F4XX_SetADCSampPointSect3+0x64>
    pHandle->_Super.hSector = SECTOR_4;
 8005886:	2303      	movs	r3, #3
 8005888:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    pHandle->wADC1Channel = PHASE_A_MSK;
 800588c:	7923      	ldrb	r3, [r4, #4]
 800588e:	f8b0 e04c 	ldrh.w	lr, [r0, #76]	; 0x4c
 8005892:	03db      	lsls	r3, r3, #15
 8005894:	6783      	str	r3, [r0, #120]	; 0x78
    pHandle->wADC2Channel = PHASE_B_MSK;
 8005896:	7962      	ldrb	r2, [r4, #5]
    hCntSmp = pHandle->Half_PWMPeriod - 1u;
 8005898:	1e4b      	subs	r3, r1, #1
    pHandle->wADC2Channel = PHASE_B_MSK;
 800589a:	03d2      	lsls	r2, r2, #15
 800589c:	67c2      	str	r2, [r0, #124]	; 0x7c
    hCntSmp = pHandle->Half_PWMPeriod - 1u;
 800589e:	b29b      	uxth	r3, r3
  uint32_t adcTrig = LL_ADC_INJ_TRIG_EXT_RISING;
 80058a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  TIMx->CCR1 = pHandle->_Super.hCntPhA;
 80058a4:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
  pHandle->wADCTriggerSet |= adcTrig;
 80058a8:	4332      	orrs	r2, r6
 80058aa:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  TIMx->CCR4 = hCntSmp;
 80058ae:	642b      	str	r3, [r5, #64]	; 0x40
  TIMx->CCR1 = pHandle->_Super.hCntPhA;
 80058b0:	6369      	str	r1, [r5, #52]	; 0x34
  TIMx->CCR2 = pHandle->_Super.hCntPhB;
 80058b2:	63af      	str	r7, [r5, #56]	; 0x38
  TIMx->CCR3 = pHandle->_Super.hCntPhC;
 80058b4:	f8c5 e03c 	str.w	lr, [r5, #60]	; 0x3c
  if ( pHandle->bSoFOC != 0u )
 80058b8:	f890 0082 	ldrb.w	r0, [r0, #130]	; 0x82
}
 80058bc:	3000      	adds	r0, #0
 80058be:	bf18      	it	ne
 80058c0:	2001      	movne	r0, #1
 80058c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hDeltaDuty = ( uint16_t )( pHandle->_Super.hCntPhB - pHandle->_Super.hCntPhC );
 80058c4:	f8b0 e04c 	ldrh.w	lr, [r0, #76]	; 0x4c
 80058c8:	eba7 0c0e 	sub.w	ip, r7, lr
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhB ) * 2u )
 80058cc:	fa1f fc8c 	uxth.w	ip, ip
 80058d0:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 80058d4:	d90b      	bls.n	80058ee <R3F4XX_SetADCSampPointSect3+0x8e>
      hCntSmp = pHandle->_Super.hCntPhB - pHandle->pParams_str->hTbefore;
 80058d6:	8a63      	ldrh	r3, [r4, #18]
 80058d8:	1afb      	subs	r3, r7, r3
 80058da:	b29b      	uxth	r3, r3
  uint32_t adcTrig = LL_ADC_INJ_TRIG_EXT_RISING;
 80058dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    pHandle->wADC1Channel = PHASE_A_MSK;
 80058e0:	7921      	ldrb	r1, [r4, #4]
 80058e2:	03c9      	lsls	r1, r1, #15
 80058e4:	6781      	str	r1, [r0, #120]	; 0x78
    pHandle->wADC2Channel = PHASE_C_MSK;
 80058e6:	79a1      	ldrb	r1, [r4, #6]
 80058e8:	03c9      	lsls	r1, r1, #15
 80058ea:	67c1      	str	r1, [r0, #124]	; 0x7c
 80058ec:	e7da      	b.n	80058a4 <R3F4XX_SetADCSampPointSect3+0x44>
      hCntSmp = pHandle->_Super.hCntPhB + pHandle->pParams_str->hTafter;
 80058ee:	443b      	add	r3, r7
 80058f0:	b29b      	uxth	r3, r3
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 80058f2:	4299      	cmp	r1, r3
 80058f4:	d806      	bhi.n	8005904 <R3F4XX_SetADCSampPointSect3+0xa4>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80058f6:	43db      	mvns	r3, r3
 80058f8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80058fc:	b29b      	uxth	r3, r3
        adcTrig = LL_ADC_INJ_TRIG_EXT_FALLING;
 80058fe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005902:	e7ed      	b.n	80058e0 <R3F4XX_SetADCSampPointSect3+0x80>
  uint32_t adcTrig = LL_ADC_INJ_TRIG_EXT_RISING;
 8005904:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005908:	e7ea      	b.n	80058e0 <R3F4XX_SetADCSampPointSect3+0x80>
 800590a:	bf00      	nop

0800590c <R3F4XX_SetADCSampPointSect4>:
{
 800590c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhC ) > pHandle->pParams_str->hTafter )
 800590e:	f8b0 1080 	ldrh.w	r1, [r0, #128]	; 0x80
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005912:	f8d0 4090 	ldr.w	r4, [r0, #144]	; 0x90
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhC ) > pHandle->pParams_str->hTafter )
 8005916:	f8b0 704c 	ldrh.w	r7, [r0, #76]	; 0x4c
  pHandle->wADCTriggerSet &= ~LL_ADC_INJ_TRIG_EXT_RISINGFALLING;
 800591a:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhC ) > pHandle->pParams_str->hTafter )
 800591e:	8a23      	ldrh	r3, [r4, #16]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005920:	68a5      	ldr	r5, [r4, #8]
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhC ) > pHandle->pParams_str->hTafter )
 8005922:	1bca      	subs	r2, r1, r7
 8005924:	b292      	uxth	r2, r2
  pHandle->wADCTriggerSet &= ~LL_ADC_INJ_TRIG_EXT_RISINGFALLING;
 8005926:	f426 1640 	bic.w	r6, r6, #3145728	; 0x300000
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhC ) > pHandle->pParams_str->hTafter )
 800592a:	429a      	cmp	r2, r3
  pHandle->wADCTriggerSet &= ~LL_ADC_INJ_TRIG_EXT_RISINGFALLING;
 800592c:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhC ) > pHandle->pParams_str->hTafter )
 8005930:	d91e      	bls.n	8005970 <R3F4XX_SetADCSampPointSect4+0x64>
    pHandle->_Super.hSector = SECTOR_4;
 8005932:	2303      	movs	r3, #3
 8005934:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    pHandle->wADC1Channel = PHASE_A_MSK;
 8005938:	7923      	ldrb	r3, [r4, #4]
 800593a:	f8b0 e04a 	ldrh.w	lr, [r0, #74]	; 0x4a
 800593e:	03db      	lsls	r3, r3, #15
 8005940:	6783      	str	r3, [r0, #120]	; 0x78
    pHandle->wADC2Channel = PHASE_B_MSK;
 8005942:	7962      	ldrb	r2, [r4, #5]
    hCntSmp = pHandle->Half_PWMPeriod - 1u;
 8005944:	1e4b      	subs	r3, r1, #1
    pHandle->wADC2Channel = PHASE_B_MSK;
 8005946:	03d2      	lsls	r2, r2, #15
 8005948:	67c2      	str	r2, [r0, #124]	; 0x7c
    hCntSmp = pHandle->Half_PWMPeriod - 1u;
 800594a:	b29b      	uxth	r3, r3
  uint32_t adcTrig = LL_ADC_INJ_TRIG_EXT_RISING;
 800594c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  TIMx->CCR1 = pHandle->_Super.hCntPhA;
 8005950:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
  pHandle->wADCTriggerSet |= adcTrig;
 8005954:	4332      	orrs	r2, r6
 8005956:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  TIMx->CCR4 = hCntSmp;
 800595a:	642b      	str	r3, [r5, #64]	; 0x40
  TIMx->CCR1 = pHandle->_Super.hCntPhA;
 800595c:	6369      	str	r1, [r5, #52]	; 0x34
  TIMx->CCR2 = pHandle->_Super.hCntPhB;
 800595e:	f8c5 e038 	str.w	lr, [r5, #56]	; 0x38
  TIMx->CCR3 = pHandle->_Super.hCntPhC;
 8005962:	63ef      	str	r7, [r5, #60]	; 0x3c
  if ( pHandle->bSoFOC != 0u )
 8005964:	f890 0082 	ldrb.w	r0, [r0, #130]	; 0x82
}
 8005968:	3000      	adds	r0, #0
 800596a:	bf18      	it	ne
 800596c:	2001      	movne	r0, #1
 800596e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hDeltaDuty = ( uint16_t )( pHandle->_Super.hCntPhC - pHandle->_Super.hCntPhB );
 8005970:	f8b0 e04a 	ldrh.w	lr, [r0, #74]	; 0x4a
 8005974:	eba7 0c0e 	sub.w	ip, r7, lr
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhC ) * 2u )
 8005978:	fa1f fc8c 	uxth.w	ip, ip
 800597c:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 8005980:	d90b      	bls.n	800599a <R3F4XX_SetADCSampPointSect4+0x8e>
      hCntSmp = pHandle->_Super.hCntPhC - pHandle->pParams_str->hTbefore;
 8005982:	8a63      	ldrh	r3, [r4, #18]
 8005984:	1afb      	subs	r3, r7, r3
 8005986:	b29b      	uxth	r3, r3
  uint32_t adcTrig = LL_ADC_INJ_TRIG_EXT_RISING;
 8005988:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    pHandle->wADC1Channel = PHASE_A_MSK;
 800598c:	7921      	ldrb	r1, [r4, #4]
 800598e:	03c9      	lsls	r1, r1, #15
 8005990:	6781      	str	r1, [r0, #120]	; 0x78
    pHandle->wADC2Channel = PHASE_B_MSK;
 8005992:	7961      	ldrb	r1, [r4, #5]
 8005994:	03c9      	lsls	r1, r1, #15
 8005996:	67c1      	str	r1, [r0, #124]	; 0x7c
 8005998:	e7da      	b.n	8005950 <R3F4XX_SetADCSampPointSect4+0x44>
      hCntSmp = pHandle->_Super.hCntPhC + pHandle->pParams_str->hTafter;
 800599a:	443b      	add	r3, r7
 800599c:	b29b      	uxth	r3, r3
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 800599e:	4299      	cmp	r1, r3
 80059a0:	d806      	bhi.n	80059b0 <R3F4XX_SetADCSampPointSect4+0xa4>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80059a2:	43db      	mvns	r3, r3
 80059a4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80059a8:	b29b      	uxth	r3, r3
        adcTrig = LL_ADC_INJ_TRIG_EXT_FALLING;
 80059aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80059ae:	e7ed      	b.n	800598c <R3F4XX_SetADCSampPointSect4+0x80>
  uint32_t adcTrig = LL_ADC_INJ_TRIG_EXT_RISING;
 80059b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80059b4:	e7ea      	b.n	800598c <R3F4XX_SetADCSampPointSect4+0x80>
 80059b6:	bf00      	nop

080059b8 <R3F4XX_SetADCSampPointSect5>:
{
 80059b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhC ) > pHandle->pParams_str->hTafter )
 80059ba:	f8b0 1080 	ldrh.w	r1, [r0, #128]	; 0x80
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80059be:	f8d0 4090 	ldr.w	r4, [r0, #144]	; 0x90
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhC ) > pHandle->pParams_str->hTafter )
 80059c2:	f8b0 704c 	ldrh.w	r7, [r0, #76]	; 0x4c
  pHandle->wADCTriggerSet &= ~LL_ADC_INJ_TRIG_EXT_RISINGFALLING;
 80059c6:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhC ) > pHandle->pParams_str->hTafter )
 80059ca:	8a23      	ldrh	r3, [r4, #16]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80059cc:	68a5      	ldr	r5, [r4, #8]
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhC ) > pHandle->pParams_str->hTafter )
 80059ce:	1bca      	subs	r2, r1, r7
 80059d0:	b292      	uxth	r2, r2
  pHandle->wADCTriggerSet &= ~LL_ADC_INJ_TRIG_EXT_RISINGFALLING;
 80059d2:	f426 1640 	bic.w	r6, r6, #3145728	; 0x300000
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhC ) > pHandle->pParams_str->hTafter )
 80059d6:	429a      	cmp	r2, r3
  pHandle->wADCTriggerSet &= ~LL_ADC_INJ_TRIG_EXT_RISINGFALLING;
 80059d8:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhC ) > pHandle->pParams_str->hTafter )
 80059dc:	d91e      	bls.n	8005a1c <R3F4XX_SetADCSampPointSect5+0x64>
    pHandle->_Super.hSector = SECTOR_4;
 80059de:	2303      	movs	r3, #3
 80059e0:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    pHandle->wADC1Channel = PHASE_A_MSK;
 80059e4:	7923      	ldrb	r3, [r4, #4]
 80059e6:	f8b0 e048 	ldrh.w	lr, [r0, #72]	; 0x48
 80059ea:	03db      	lsls	r3, r3, #15
 80059ec:	6783      	str	r3, [r0, #120]	; 0x78
    pHandle->wADC2Channel = PHASE_B_MSK;
 80059ee:	7962      	ldrb	r2, [r4, #5]
    hCntSmp = pHandle->Half_PWMPeriod - 1u;
 80059f0:	1e4b      	subs	r3, r1, #1
    pHandle->wADC2Channel = PHASE_B_MSK;
 80059f2:	03d2      	lsls	r2, r2, #15
 80059f4:	67c2      	str	r2, [r0, #124]	; 0x7c
    hCntSmp = pHandle->Half_PWMPeriod - 1u;
 80059f6:	b29b      	uxth	r3, r3
  uint32_t adcTrig = LL_ADC_INJ_TRIG_EXT_RISING;
 80059f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  TIMx->CCR2 = pHandle->_Super.hCntPhB;
 80059fc:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
  pHandle->wADCTriggerSet |= adcTrig;
 8005a00:	4332      	orrs	r2, r6
 8005a02:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  TIMx->CCR4 = hCntSmp;
 8005a06:	642b      	str	r3, [r5, #64]	; 0x40
  TIMx->CCR1 = pHandle->_Super.hCntPhA;
 8005a08:	f8c5 e034 	str.w	lr, [r5, #52]	; 0x34
  TIMx->CCR2 = pHandle->_Super.hCntPhB;
 8005a0c:	63a9      	str	r1, [r5, #56]	; 0x38
  TIMx->CCR3 = pHandle->_Super.hCntPhC;
 8005a0e:	63ef      	str	r7, [r5, #60]	; 0x3c
  if ( pHandle->bSoFOC != 0u )
 8005a10:	f890 0082 	ldrb.w	r0, [r0, #130]	; 0x82
}
 8005a14:	3000      	adds	r0, #0
 8005a16:	bf18      	it	ne
 8005a18:	2001      	movne	r0, #1
 8005a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hDeltaDuty = ( uint16_t )( pHandle->_Super.hCntPhC - pHandle->_Super.hCntPhA );
 8005a1c:	f8b0 e048 	ldrh.w	lr, [r0, #72]	; 0x48
 8005a20:	eba7 0c0e 	sub.w	ip, r7, lr
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhC ) * 2u )
 8005a24:	fa1f fc8c 	uxth.w	ip, ip
 8005a28:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 8005a2c:	d90b      	bls.n	8005a46 <R3F4XX_SetADCSampPointSect5+0x8e>
      hCntSmp = pHandle->_Super.hCntPhC - pHandle->pParams_str->hTbefore;
 8005a2e:	8a63      	ldrh	r3, [r4, #18]
 8005a30:	1afb      	subs	r3, r7, r3
 8005a32:	b29b      	uxth	r3, r3
  uint32_t adcTrig = LL_ADC_INJ_TRIG_EXT_RISING;
 8005a34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    pHandle->wADC1Channel = PHASE_A_MSK;
 8005a38:	7921      	ldrb	r1, [r4, #4]
 8005a3a:	03c9      	lsls	r1, r1, #15
 8005a3c:	6781      	str	r1, [r0, #120]	; 0x78
    pHandle->wADC2Channel = PHASE_B_MSK;
 8005a3e:	7961      	ldrb	r1, [r4, #5]
 8005a40:	03c9      	lsls	r1, r1, #15
 8005a42:	67c1      	str	r1, [r0, #124]	; 0x7c
 8005a44:	e7da      	b.n	80059fc <R3F4XX_SetADCSampPointSect5+0x44>
      hCntSmp = pHandle->_Super.hCntPhC + pHandle->pParams_str->hTafter;
 8005a46:	443b      	add	r3, r7
 8005a48:	b29b      	uxth	r3, r3
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 8005a4a:	4299      	cmp	r1, r3
 8005a4c:	d806      	bhi.n	8005a5c <R3F4XX_SetADCSampPointSect5+0xa4>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8005a4e:	43db      	mvns	r3, r3
 8005a50:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8005a54:	b29b      	uxth	r3, r3
        adcTrig = LL_ADC_INJ_TRIG_EXT_FALLING;
 8005a56:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005a5a:	e7ed      	b.n	8005a38 <R3F4XX_SetADCSampPointSect5+0x80>
  uint32_t adcTrig = LL_ADC_INJ_TRIG_EXT_RISING;
 8005a5c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005a60:	e7ea      	b.n	8005a38 <R3F4XX_SetADCSampPointSect5+0x80>
 8005a62:	bf00      	nop

08005a64 <R3F4XX_SetADCSampPointSect6>:
{
 8005a64:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhA ) > pHandle->pParams_str->hTafter )
 8005a66:	f8b0 1080 	ldrh.w	r1, [r0, #128]	; 0x80
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005a6a:	f8d0 4090 	ldr.w	r4, [r0, #144]	; 0x90
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhA ) > pHandle->pParams_str->hTafter )
 8005a6e:	f8b0 7048 	ldrh.w	r7, [r0, #72]	; 0x48
  pHandle->wADCTriggerSet &= ~LL_ADC_INJ_TRIG_EXT_RISINGFALLING;
 8005a72:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhA ) > pHandle->pParams_str->hTafter )
 8005a76:	8a23      	ldrh	r3, [r4, #16]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005a78:	68a5      	ldr	r5, [r4, #8]
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhA ) > pHandle->pParams_str->hTafter )
 8005a7a:	1bca      	subs	r2, r1, r7
 8005a7c:	b292      	uxth	r2, r2
  pHandle->wADCTriggerSet &= ~LL_ADC_INJ_TRIG_EXT_RISINGFALLING;
 8005a7e:	f426 1640 	bic.w	r6, r6, #3145728	; 0x300000
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhA ) > pHandle->pParams_str->hTafter )
 8005a82:	429a      	cmp	r2, r3
  pHandle->wADCTriggerSet &= ~LL_ADC_INJ_TRIG_EXT_RISINGFALLING;
 8005a84:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhA ) > pHandle->pParams_str->hTafter )
 8005a88:	d91e      	bls.n	8005ac8 <R3F4XX_SetADCSampPointSect6+0x64>
    pHandle->_Super.hSector = SECTOR_4;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    pHandle->wADC1Channel = PHASE_A_MSK;
 8005a90:	7923      	ldrb	r3, [r4, #4]
 8005a92:	f8b0 e04c 	ldrh.w	lr, [r0, #76]	; 0x4c
 8005a96:	03db      	lsls	r3, r3, #15
 8005a98:	6783      	str	r3, [r0, #120]	; 0x78
    pHandle->wADC2Channel = PHASE_B_MSK;
 8005a9a:	7962      	ldrb	r2, [r4, #5]
    hCntSmp = pHandle->Half_PWMPeriod - 1u;
 8005a9c:	1e4b      	subs	r3, r1, #1
    pHandle->wADC2Channel = PHASE_B_MSK;
 8005a9e:	03d2      	lsls	r2, r2, #15
 8005aa0:	67c2      	str	r2, [r0, #124]	; 0x7c
    hCntSmp = pHandle->Half_PWMPeriod - 1u;
 8005aa2:	b29b      	uxth	r3, r3
  uint32_t adcTrig = LL_ADC_INJ_TRIG_EXT_RISING;
 8005aa4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  TIMx->CCR2 = pHandle->_Super.hCntPhB;
 8005aa8:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
  pHandle->wADCTriggerSet |= adcTrig;
 8005aac:	4332      	orrs	r2, r6
 8005aae:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  TIMx->CCR4 = hCntSmp;
 8005ab2:	642b      	str	r3, [r5, #64]	; 0x40
  TIMx->CCR1 = pHandle->_Super.hCntPhA;
 8005ab4:	636f      	str	r7, [r5, #52]	; 0x34
  TIMx->CCR2 = pHandle->_Super.hCntPhB;
 8005ab6:	63a9      	str	r1, [r5, #56]	; 0x38
  TIMx->CCR3 = pHandle->_Super.hCntPhC;
 8005ab8:	f8c5 e03c 	str.w	lr, [r5, #60]	; 0x3c
  if ( pHandle->bSoFOC != 0u )
 8005abc:	f890 0082 	ldrb.w	r0, [r0, #130]	; 0x82
}
 8005ac0:	3000      	adds	r0, #0
 8005ac2:	bf18      	it	ne
 8005ac4:	2001      	movne	r0, #1
 8005ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hDeltaDuty = ( uint16_t )( pHandle->_Super.hCntPhA - pHandle->_Super.hCntPhC );
 8005ac8:	f8b0 e04c 	ldrh.w	lr, [r0, #76]	; 0x4c
 8005acc:	eba7 0c0e 	sub.w	ip, r7, lr
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHandle->_Super.hCntPhA ) * 2u )
 8005ad0:	fa1f fc8c 	uxth.w	ip, ip
 8005ad4:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 8005ad8:	d90b      	bls.n	8005af2 <R3F4XX_SetADCSampPointSect6+0x8e>
      hCntSmp = pHandle->_Super.hCntPhA - pHandle->pParams_str->hTbefore;
 8005ada:	8a63      	ldrh	r3, [r4, #18]
 8005adc:	1afb      	subs	r3, r7, r3
 8005ade:	b29b      	uxth	r3, r3
  uint32_t adcTrig = LL_ADC_INJ_TRIG_EXT_RISING;
 8005ae0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    pHandle->wADC1Channel = PHASE_B_MSK;
 8005ae4:	7961      	ldrb	r1, [r4, #5]
 8005ae6:	03c9      	lsls	r1, r1, #15
 8005ae8:	6781      	str	r1, [r0, #120]	; 0x78
    pHandle->wADC2Channel = PHASE_C_MSK;
 8005aea:	79a1      	ldrb	r1, [r4, #6]
 8005aec:	03c9      	lsls	r1, r1, #15
 8005aee:	67c1      	str	r1, [r0, #124]	; 0x7c
 8005af0:	e7da      	b.n	8005aa8 <R3F4XX_SetADCSampPointSect6+0x44>
      hCntSmp = pHandle->_Super.hCntPhA + pHandle->pParams_str->hTafter;
 8005af2:	443b      	add	r3, r7
 8005af4:	b29b      	uxth	r3, r3
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 8005af6:	4299      	cmp	r1, r3
 8005af8:	d806      	bhi.n	8005b08 <R3F4XX_SetADCSampPointSect6+0xa4>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8005afa:	43db      	mvns	r3, r3
 8005afc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8005b00:	b29b      	uxth	r3, r3
        adcTrig = LL_ADC_INJ_TRIG_EXT_FALLING;
 8005b02:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005b06:	e7ed      	b.n	8005ae4 <R3F4XX_SetADCSampPointSect6+0x80>
  uint32_t adcTrig = LL_ADC_INJ_TRIG_EXT_RISING;
 8005b08:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005b0c:	e7ea      	b.n	8005ae4 <R3F4XX_SetADCSampPointSect6+0x80>
 8005b0e:	bf00      	nop

08005b10 <R3F4XX_TIMx_UP_IRQHandler>:
{
 8005b10:	b430      	push	{r4, r5}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005b12:	f8d0 4090 	ldr.w	r4, [r0, #144]	; 0x90
  wADCInjFlags = ( ADC1-> SR ) & ADC_SR_MASK;
 8005b16:	4920      	ldr	r1, [pc, #128]	; (8005b98 <R3F4XX_TIMx_UP_IRQHandler+0x88>)
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005b18:	68a2      	ldr	r2, [r4, #8]
  pHandle->bSoFOC = 1u;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
  wADCInjFlags = ( ADC1-> SR ) & ADC_SR_MASK;
 8005b20:	680b      	ldr	r3, [r1, #0]
 8005b22:	f003 030c 	and.w	r3, r3, #12
  if ( wADCInjFlags == CONV_STARTED )
 8005b26:	2b08      	cmp	r3, #8
 8005b28:	d01f      	beq.n	8005b6a <R3F4XX_TIMx_UP_IRQHandler+0x5a>
  else if ( wADCInjFlags == FLAGS_CLEARED )
 8005b2a:	b94b      	cbnz	r3, 8005b40 <R3F4XX_TIMx_UP_IRQHandler+0x30>
 8005b2c:	8821      	ldrh	r1, [r4, #0]
    while ( ( TIMx->CNT ) < ( pHandle->pParams_str->Tw ) )
 8005b2e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8005b30:	428b      	cmp	r3, r1
 8005b32:	d3fc      	bcc.n	8005b2e <R3F4XX_TIMx_UP_IRQHandler+0x1e>
    wADCInjFlags = ( ADC1-> SR ) & ADC_SR_MASK;
 8005b34:	4918      	ldr	r1, [pc, #96]	; (8005b98 <R3F4XX_TIMx_UP_IRQHandler+0x88>)
 8005b36:	680b      	ldr	r3, [r1, #0]
 8005b38:	f003 030c 	and.w	r3, r3, #12
    if ( wADCInjFlags == CONV_STARTED )
 8005b3c:	2b08      	cmp	r3, #8
 8005b3e:	d01f      	beq.n	8005b80 <R3F4XX_TIMx_UP_IRQHandler+0x70>
  ADC1->CR2 = pHandle->wADCTriggerUnSet;
 8005b40:	4915      	ldr	r1, [pc, #84]	; (8005b98 <R3F4XX_TIMx_UP_IRQHandler+0x88>)
  ADC2->CR2 = pHandle->wADCTriggerUnSet;
 8005b42:	4b16      	ldr	r3, [pc, #88]	; (8005b9c <R3F4XX_TIMx_UP_IRQHandler+0x8c>)
  ADC1->CR2 = pHandle->wADCTriggerUnSet;
 8005b44:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
 8005b48:	608c      	str	r4, [r1, #8]
  ADC2->CR2 = pHandle->wADCTriggerUnSet;
 8005b4a:	609c      	str	r4, [r3, #8]
  TIMx->CCER |= 0x1000u;
 8005b4c:	6a14      	ldr	r4, [r2, #32]
  ADC1->CR2 = pHandle->wADCTriggerSet;
 8005b4e:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
  TIMx->CCER |= 0x1000u;
 8005b52:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
 8005b56:	6214      	str	r4, [r2, #32]
  ADC1->CR2 = pHandle->wADCTriggerSet;
 8005b58:	608d      	str	r5, [r1, #8]
  ADC2->CR2 = pHandle->wADCTriggerSet;
 8005b5a:	609d      	str	r5, [r3, #8]
  ADC1->JSQR = pHandle->wADC1Channel;
 8005b5c:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8005b5e:	638a      	str	r2, [r1, #56]	; 0x38
  ADC2->JSQR = pHandle->wADC2Channel;
 8005b60:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8005b62:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005b64:	3054      	adds	r0, #84	; 0x54
 8005b66:	bc30      	pop	{r4, r5}
 8005b68:	4770      	bx	lr
      wADCInjFlags = ( ADC1-> SR ) & ADC_SR_MASK;
 8005b6a:	680b      	ldr	r3, [r1, #0]
 8005b6c:	f003 030c 	and.w	r3, r3, #12
    while ( wADCInjFlags != CONV_FINISHED );
 8005b70:	2b0c      	cmp	r3, #12
 8005b72:	d0e5      	beq.n	8005b40 <R3F4XX_TIMx_UP_IRQHandler+0x30>
      wADCInjFlags = ( ADC1-> SR ) & ADC_SR_MASK;
 8005b74:	680b      	ldr	r3, [r1, #0]
 8005b76:	f003 030c 	and.w	r3, r3, #12
    while ( wADCInjFlags != CONV_FINISHED );
 8005b7a:	2b0c      	cmp	r3, #12
 8005b7c:	d1f5      	bne.n	8005b6a <R3F4XX_TIMx_UP_IRQHandler+0x5a>
 8005b7e:	e7df      	b.n	8005b40 <R3F4XX_TIMx_UP_IRQHandler+0x30>
        wADCInjFlags = ( ADC1-> SR ) & ADC_SR_MASK;
 8005b80:	680b      	ldr	r3, [r1, #0]
 8005b82:	f003 030c 	and.w	r3, r3, #12
      while ( wADCInjFlags != CONV_FINISHED );
 8005b86:	2b0c      	cmp	r3, #12
 8005b88:	d0da      	beq.n	8005b40 <R3F4XX_TIMx_UP_IRQHandler+0x30>
        wADCInjFlags = ( ADC1-> SR ) & ADC_SR_MASK;
 8005b8a:	680b      	ldr	r3, [r1, #0]
 8005b8c:	f003 030c 	and.w	r3, r3, #12
      while ( wADCInjFlags != CONV_FINISHED );
 8005b90:	2b0c      	cmp	r3, #12
 8005b92:	d1f5      	bne.n	8005b80 <R3F4XX_TIMx_UP_IRQHandler+0x70>
 8005b94:	e7d4      	b.n	8005b40 <R3F4XX_TIMx_UP_IRQHandler+0x30>
 8005b96:	bf00      	nop
 8005b98:	40012000 	.word	0x40012000
 8005b9c:	40012100 	.word	0x40012100

08005ba0 <R3F4XX_BRK_IRQHandler>:
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005ba0:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 8005ba4:	7d1a      	ldrb	r2, [r3, #20]
 8005ba6:	2a02      	cmp	r2, #2
 8005ba8:	d004      	beq.n	8005bb4 <R3F4XX_BRK_IRQHandler+0x14>
  pHandle->OverCurrentFlag = true;
 8005baa:	2301      	movs	r3, #1
 8005bac:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
}
 8005bb0:	3054      	adds	r0, #84	; 0x54
 8005bb2:	4770      	bx	lr
{
 8005bb4:	b4f0      	push	{r4, r5, r6, r7}
 8005bb6:	69d9      	ldr	r1, [r3, #28]
 8005bb8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_v_pin );
 8005bbc:	699f      	ldr	r7, [r3, #24]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_u_pin );
 8005bbe:	6a1e      	ldr	r6, [r3, #32]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005bc0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8005bc2:	0424      	lsls	r4, r4, #16
 8005bc4:	0409      	lsls	r1, r1, #16
 8005bc6:	0412      	lsls	r2, r2, #16
  pHandle->OverCurrentFlag = true;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	61bc      	str	r4, [r7, #24]
}
 8005bcc:	3054      	adds	r0, #84	; 0x54
 8005bce:	61b1      	str	r1, [r6, #24]
 8005bd0:	61aa      	str	r2, [r5, #24]
  pHandle->OverCurrentFlag = true;
 8005bd2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
}
 8005bd6:	bcf0      	pop	{r4, r5, r6, r7}
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop

08005bdc <R3F4XX_IsOverCurrentOccurred>:
  if ( pHandle->OverCurrentFlag == true )
 8005bdc:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
 8005be0:	b123      	cbz	r3, 8005bec <R3F4XX_IsOverCurrentOccurred+0x10>
    pHandle->OverCurrentFlag = false;
 8005be2:	2300      	movs	r3, #0
 8005be4:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
    retVal = MC_BREAK_IN;
 8005be8:	2040      	movs	r0, #64	; 0x40
 8005bea:	4770      	bx	lr
  uint16_t retVal = MC_NO_FAULTS;
 8005bec:	4618      	mov	r0, r3
}
 8005bee:	4770      	bx	lr

08005bf0 <R3F4XX_RLDetectionModeEnable>:
  if ( pHandle->_Super.RLDetectionMode == false )
 8005bf0:	f890 1055 	ldrb.w	r1, [r0, #85]	; 0x55
{
 8005bf4:	b430      	push	{r4, r5}
  if ( pHandle->_Super.RLDetectionMode == false )
 8005bf6:	bb41      	cbnz	r1, 8005c4a <R3F4XX_RLDetectionModeEnable+0x5a>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005bf8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8005bfc:	6893      	ldr	r3, [r2, #8]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8005bfe:	7d15      	ldrb	r5, [r2, #20]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8005c00:	699a      	ldr	r2, [r3, #24]
 8005c02:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8005c06:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005c0a:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8005c0c:	6a1a      	ldr	r2, [r3, #32]
 8005c0e:	f042 0201 	orr.w	r2, r2, #1
 8005c12:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005c14:	6a1a      	ldr	r2, [r3, #32]
 8005c16:	2d01      	cmp	r5, #1
 8005c18:	f022 0204 	bic.w	r2, r2, #4
 8005c1c:	621a      	str	r2, [r3, #32]
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8005c1e:	f103 0418 	add.w	r4, r3, #24
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005c22:	6359      	str	r1, [r3, #52]	; 0x34
 8005c24:	d01e      	beq.n	8005c64 <R3F4XX_RLDetectionModeEnable+0x74>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005c26:	2d02      	cmp	r5, #2
 8005c28:	d02b      	beq.n	8005c82 <R3F4XX_RLDetectionModeEnable+0x92>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8005c2a:	6862      	ldr	r2, [r4, #4]
 8005c2c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8005c30:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8005c34:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005c36:	6a1a      	ldr	r2, [r3, #32]
    pHandle->wPhaseAOffset = pHandle->wPhaseBOffset; /* Use only the offset of phB */
 8005c38:	6f01      	ldr	r1, [r0, #112]	; 0x70
 8005c3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c3e:	621a      	str	r2, [r3, #32]
 8005c40:	6a1a      	ldr	r2, [r3, #32]
 8005c42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c46:	621a      	str	r2, [r3, #32]
 8005c48:	66c1      	str	r1, [r0, #108]	; 0x6c
  pHandle->_Super.pFctGetPhaseCurrents = &R3F4XX_RLGetPhaseCurrents;
 8005c4a:	4b15      	ldr	r3, [pc, #84]	; (8005ca0 <R3F4XX_RLDetectionModeEnable+0xb0>)
  pHandle->_Super.pFctTurnOnLowSides = &R3F4XX_RLTurnOnLowSides;
 8005c4c:	4c15      	ldr	r4, [pc, #84]	; (8005ca4 <R3F4XX_RLDetectionModeEnable+0xb4>)
  pHandle->_Super.pFctSwitchOnPwm = &R3F4XX_RLSwitchOnPWM;
 8005c4e:	4916      	ldr	r1, [pc, #88]	; (8005ca8 <R3F4XX_RLDetectionModeEnable+0xb8>)
  pHandle->_Super.pFctSwitchOffPwm = &R3F4XX_SwitchOffPWM;
 8005c50:	4a16      	ldr	r2, [pc, #88]	; (8005cac <R3F4XX_RLDetectionModeEnable+0xbc>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3F4XX_RLGetPhaseCurrents;
 8005c52:	6043      	str	r3, [r0, #4]
  pHandle->_Super.RLDetectionMode = true;
 8005c54:	2301      	movs	r3, #1
  pHandle->_Super.pFctTurnOnLowSides = &R3F4XX_RLTurnOnLowSides;
 8005c56:	6144      	str	r4, [r0, #20]
  pHandle->_Super.pFctSwitchOnPwm = &R3F4XX_RLSwitchOnPWM;
 8005c58:	60c1      	str	r1, [r0, #12]
  pHandle->_Super.pFctSwitchOffPwm = &R3F4XX_SwitchOffPWM;
 8005c5a:	6082      	str	r2, [r0, #8]
  pHandle->_Super.RLDetectionMode = true;
 8005c5c:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
}
 8005c60:	bc30      	pop	{r4, r5}
 8005c62:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8005c64:	699a      	ldr	r2, [r3, #24]
 8005c66:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8005c6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c6e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005c70:	6a1a      	ldr	r2, [r3, #32]
 8005c72:	f022 0210 	bic.w	r2, r2, #16
 8005c76:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8005c78:	6a1a      	ldr	r2, [r3, #32]
 8005c7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c7e:	621a      	str	r2, [r3, #32]
 8005c80:	e7d3      	b.n	8005c2a <R3F4XX_RLDetectionModeEnable+0x3a>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8005c82:	699a      	ldr	r2, [r3, #24]
 8005c84:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8005c88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c8c:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8005c8e:	6a1a      	ldr	r2, [r3, #32]
 8005c90:	f042 0210 	orr.w	r2, r2, #16
 8005c94:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005c96:	6a1a      	ldr	r2, [r3, #32]
 8005c98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c9c:	621a      	str	r2, [r3, #32]
 8005c9e:	e7c4      	b.n	8005c2a <R3F4XX_RLDetectionModeEnable+0x3a>
 8005ca0:	080053c9 	.word	0x080053c9
 8005ca4:	0800540d 	.word	0x0800540d
 8005ca8:	0800544d 	.word	0x0800544d
 8005cac:	08005355 	.word	0x08005355

08005cb0 <R3F4XX_RLDetectionModeDisable>:
  if ( pHandle->_Super.RLDetectionMode == true )
 8005cb0:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d038      	beq.n	8005d2a <R3F4XX_RLDetectionModeDisable+0x7a>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005cb8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8005cbc:	6893      	ldr	r3, [r2, #8]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8005cbe:	7d11      	ldrb	r1, [r2, #20]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8005cc0:	699a      	ldr	r2, [r3, #24]
 8005cc2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8005cc6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
{
 8005cca:	b470      	push	{r4, r5, r6}
 8005ccc:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8005cce:	6a1a      	ldr	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8005cd0:	2901      	cmp	r1, #1
 8005cd2:	f042 0201 	orr.w	r2, r2, #1
 8005cd6:	621a      	str	r2, [r3, #32]
 8005cd8:	d028      	beq.n	8005d2c <R3F4XX_RLDetectionModeDisable+0x7c>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005cda:	2902      	cmp	r1, #2
 8005cdc:	d04c      	beq.n	8005d78 <R3F4XX_RLDetectionModeDisable+0xc8>
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 8005cde:	f8b0 2080 	ldrh.w	r2, [r0, #128]	; 0x80
 8005ce2:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005ce4:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8005ce6:	6999      	ldr	r1, [r3, #24]
 8005ce8:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8005cec:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8005cf0:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8005cf2:	6a19      	ldr	r1, [r3, #32]
 8005cf4:	f041 0110 	orr.w	r1, r1, #16
 8005cf8:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005cfa:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8005cfc:	69d9      	ldr	r1, [r3, #28]
 8005cfe:	f021 0173 	bic.w	r1, r1, #115	; 0x73
 8005d02:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8005d06:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8005d08:	6a19      	ldr	r1, [r3, #32]
 8005d0a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005d0e:	6219      	str	r1, [r3, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3F4XX_GetPhaseCurrents;
 8005d10:	4e2c      	ldr	r6, [pc, #176]	; (8005dc4 <R3F4XX_RLDetectionModeDisable+0x114>)
    pHandle->_Super.pFctTurnOnLowSides = &R3F4XX_TurnOnLowSides;
 8005d12:	4d2d      	ldr	r5, [pc, #180]	; (8005dc8 <R3F4XX_RLDetectionModeDisable+0x118>)
    pHandle->_Super.pFctSwitchOnPwm = &R3F4XX_SwitchOnPWM;
 8005d14:	4c2d      	ldr	r4, [pc, #180]	; (8005dcc <R3F4XX_RLDetectionModeDisable+0x11c>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005d16:	63da      	str	r2, [r3, #60]	; 0x3c
    pHandle->_Super.pFctGetPhaseCurrents = &R3F4XX_GetPhaseCurrents;
 8005d18:	6046      	str	r6, [r0, #4]
    pHandle->_Super.pFctTurnOnLowSides = &R3F4XX_TurnOnLowSides;
 8005d1a:	6145      	str	r5, [r0, #20]
    pHandle->_Super.pFctSwitchOnPwm = &R3F4XX_SwitchOnPWM;
 8005d1c:	60c4      	str	r4, [r0, #12]
}
 8005d1e:	bc70      	pop	{r4, r5, r6}
    pHandle->_Super.pFctSwitchOffPwm = &R3F4XX_SwitchOffPWM;
 8005d20:	492b      	ldr	r1, [pc, #172]	; (8005dd0 <R3F4XX_RLDetectionModeDisable+0x120>)
 8005d22:	6081      	str	r1, [r0, #8]
    pHandle->_Super.RLDetectionMode = false;
 8005d24:	2300      	movs	r3, #0
 8005d26:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
}
 8005d2a:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8005d2c:	6a19      	ldr	r1, [r3, #32]
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 8005d2e:	f8b0 2080 	ldrh.w	r2, [r0, #128]	; 0x80
 8005d32:	f041 0104 	orr.w	r1, r1, #4
 8005d36:	0852      	lsrs	r2, r2, #1
 8005d38:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005d3a:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8005d3c:	6999      	ldr	r1, [r3, #24]
 8005d3e:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8005d42:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8005d46:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8005d48:	6a19      	ldr	r1, [r3, #32]
 8005d4a:	f041 0110 	orr.w	r1, r1, #16
 8005d4e:	6219      	str	r1, [r3, #32]
 8005d50:	6a19      	ldr	r1, [r3, #32]
 8005d52:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005d56:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005d58:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8005d5a:	69d9      	ldr	r1, [r3, #28]
 8005d5c:	f021 0173 	bic.w	r1, r1, #115	; 0x73
 8005d60:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8005d64:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8005d66:	6a19      	ldr	r1, [r3, #32]
 8005d68:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005d6c:	6219      	str	r1, [r3, #32]
 8005d6e:	6a19      	ldr	r1, [r3, #32]
 8005d70:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8005d74:	6219      	str	r1, [r3, #32]
 8005d76:	e7cb      	b.n	8005d10 <R3F4XX_RLDetectionModeDisable+0x60>
  CLEAR_BIT(TIMx->CCER, Channels);
 8005d78:	6a19      	ldr	r1, [r3, #32]
 8005d7a:	f8b0 2080 	ldrh.w	r2, [r0, #128]	; 0x80
 8005d7e:	f021 0104 	bic.w	r1, r1, #4
 8005d82:	0852      	lsrs	r2, r2, #1
 8005d84:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005d86:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8005d88:	6999      	ldr	r1, [r3, #24]
 8005d8a:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8005d8e:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8005d92:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8005d94:	6a19      	ldr	r1, [r3, #32]
 8005d96:	f041 0110 	orr.w	r1, r1, #16
 8005d9a:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005d9c:	6a19      	ldr	r1, [r3, #32]
 8005d9e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8005da2:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005da4:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8005da6:	69d9      	ldr	r1, [r3, #28]
 8005da8:	f021 0173 	bic.w	r1, r1, #115	; 0x73
 8005dac:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8005db0:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8005db2:	6a19      	ldr	r1, [r3, #32]
 8005db4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005db8:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005dba:	6a19      	ldr	r1, [r3, #32]
 8005dbc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005dc0:	6219      	str	r1, [r3, #32]
 8005dc2:	e7a5      	b.n	8005d10 <R3F4XX_RLDetectionModeDisable+0x60>
 8005dc4:	0800503d 	.word	0x0800503d
 8005dc8:	08005285 	.word	0x08005285
 8005dcc:	080052cd 	.word	0x080052cd
 8005dd0:	08005355 	.word	0x08005355

08005dd4 <R3F4XX_RLDetectionModeSetDuty>:
{
 8005dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005dd6:	f8d0 7090 	ldr.w	r7, [r0, #144]	; 0x90
 8005dda:	68bb      	ldr	r3, [r7, #8]
{
 8005ddc:	4602      	mov	r2, r0
  uint32_t val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8005dde:	f8b0 0080 	ldrh.w	r0, [r0, #128]	; 0x80
  TIMx->CCMR2 &= CCMR2_CH4_DISABLE;
 8005de2:	69dc      	ldr	r4, [r3, #28]
  TIMx->CCR4 = ( uint32_t )( pHandle->Half_PWMPeriod ) - pHandle->_Super.Ton;
 8005de4:	f8b2 e066 	ldrh.w	lr, [r2, #102]	; 0x66
  TIMx->CCMR2 &= CCMR2_CH4_DISABLE;
 8005de8:	f648 75ff 	movw	r5, #36863	; 0x8fff
  uint32_t val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8005dec:	fb00 f101 	mul.w	r1, r0, r1
  TIMx->CCMR2 &= CCMR2_CH4_DISABLE;
 8005df0:	402c      	ands	r4, r5
  uint32_t val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8005df2:	0c09      	lsrs	r1, r1, #16
  pHandle->_Super.hCntPhA = ( uint16_t )( val );
 8005df4:	f8a2 1048 	strh.w	r1, [r2, #72]	; 0x48
  TIMx->CCMR2 &= CCMR2_CH4_DISABLE;
 8005df8:	61dc      	str	r4, [r3, #28]
  TIMx->CCMR2 |= CCMR2_CH4_PWM1;
 8005dfa:	69de      	ldr	r6, [r3, #28]
  ADC1->CR2 = pHandle->wADCTriggerUnSet;
 8005dfc:	4d13      	ldr	r5, [pc, #76]	; (8005e4c <R3F4XX_RLDetectionModeSetDuty+0x78>)
  ADC2->CR2 = pHandle->wADCTriggerUnSet;
 8005dfe:	4c14      	ldr	r4, [pc, #80]	; (8005e50 <R3F4XX_RLDetectionModeSetDuty+0x7c>)
  TIMx->CCR4 = ( uint32_t )( pHandle->Half_PWMPeriod ) - pHandle->_Super.Ton;
 8005e00:	eba0 000e 	sub.w	r0, r0, lr
  TIMx->CCMR2 |= CCMR2_CH4_PWM1;
 8005e04:	f446 46c0 	orr.w	r6, r6, #24576	; 0x6000
 8005e08:	61de      	str	r6, [r3, #28]
  TIMx->CCR3 = pHandle->_Super.Toff;
 8005e0a:	f8b2 6068 	ldrh.w	r6, [r2, #104]	; 0x68
  TIMx->CCR4 = ( uint32_t )( pHandle->Half_PWMPeriod ) - pHandle->_Super.Ton;
 8005e0e:	6418      	str	r0, [r3, #64]	; 0x40
  ADC1->CR2 = pHandle->wADCTriggerUnSet;
 8005e10:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
  TIMx->CCR3 = pHandle->_Super.Toff;
 8005e14:	63de      	str	r6, [r3, #60]	; 0x3c
  TIMx->CCR1 = pHandle->_Super.hCntPhA;
 8005e16:	6359      	str	r1, [r3, #52]	; 0x34
  ADC1->CR2 = pHandle->wADCTriggerUnSet;
 8005e18:	60a8      	str	r0, [r5, #8]
  ADC2->CR2 = pHandle->wADCTriggerUnSet;
 8005e1a:	60a0      	str	r0, [r4, #8]
  TIMx->CCER |= 0x1000u;
 8005e1c:	6a19      	ldr	r1, [r3, #32]
  ADC1->CR2 = pHandle->wADCTriggerSet;
 8005e1e:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
  if ( pHandle->_Super.SWerror == 1u )
 8005e22:	f8b2 004e 	ldrh.w	r0, [r2, #78]	; 0x4e
  TIMx->CCER |= 0x1000u;
 8005e26:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8005e2a:	6219      	str	r1, [r3, #32]
  ADC1->CR2 = pHandle->wADCTriggerSet;
 8005e2c:	60ae      	str	r6, [r5, #8]
  ADC2->CR2 = pHandle->wADCTriggerSet;
 8005e2e:	60a6      	str	r6, [r4, #8]
  ADC1->JSQR = PHASE_B_MSK;
 8005e30:	7979      	ldrb	r1, [r7, #5]
 8005e32:	03c9      	lsls	r1, r1, #15
 8005e34:	63a9      	str	r1, [r5, #56]	; 0x38
  ADC2->JSQR = PHASE_B_MSK;
 8005e36:	63a1      	str	r1, [r4, #56]	; 0x38
  if ( TIMx->SR & TIM_SR_UIF )
 8005e38:	691b      	ldr	r3, [r3, #16]
  if ( pHandle->_Super.SWerror == 1u )
 8005e3a:	2801      	cmp	r0, #1
    pHandle->_Super.SWerror = 0u;
 8005e3c:	bf0a      	itet	eq
 8005e3e:	2300      	moveq	r3, #0
    hAux = MC_FOC_DURATION;
 8005e40:	f003 0001 	andne.w	r0, r3, #1
    pHandle->_Super.SWerror = 0u;
 8005e44:	f8a2 304e 	strheq.w	r3, [r2, #78]	; 0x4e
}
 8005e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	40012000 	.word	0x40012000
 8005e50:	40012100 	.word	0x40012100

08005e54 <RVBS_Init>:
    It must be called only after PWMC_Init.
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
void RVBS_Init( RDivider_Handle_t * pHandle )
{
 8005e54:	b510      	push	{r4, lr}
 8005e56:	4604      	mov	r4, r0
  /* Need to be register with RegularConvManager */
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8005e58:	300c      	adds	r0, #12
 8005e5a:	f7fb ff57 	bl	8001d0c <RCM_RegisterRegConv>
void RVBS_Clear( RDivider_Handle_t * pHandle )
{
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8005e5e:	8b61      	ldrh	r1, [r4, #26]
 8005e60:	8ba2      	ldrh	r2, [r4, #28]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8005e62:	8b23      	ldrh	r3, [r4, #24]
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8005e64:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8005e68:	4411      	add	r1, r2
 8005e6a:	f3c1 014f 	ubfx	r1, r1, #1, #16
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8005e6e:	b143      	cbz	r3, 8005e82 <RVBS_Init+0x2e>
 8005e70:	6a20      	ldr	r0, [r4, #32]
 8005e72:	2300      	movs	r3, #0
  {
    pHandle->aBuffer[index] = aux;
 8005e74:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8005e78:	3301      	adds	r3, #1
 8005e7a:	8b22      	ldrh	r2, [r4, #24]
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d8f8      	bhi.n	8005e74 <RVBS_Init+0x20>
  }
  pHandle->_Super.LatestConv = aux;
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 8005e82:	2300      	movs	r3, #0
 8005e84:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  pHandle->_Super.LatestConv = aux;
 8005e88:	80a1      	strh	r1, [r4, #4]
  pHandle->_Super.AvBusVoltage_d = aux;
 8005e8a:	80e1      	strh	r1, [r4, #6]
}
 8005e8c:	bd10      	pop	{r4, pc}
 8005e8e:	bf00      	nop

08005e90 <RVBS_CalcAvVbus>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
uint16_t RVBS_CalcAvVbus( RDivider_Handle_t * pHandle )
{
 8005e90:	b570      	push	{r4, r5, r6, lr}
 8005e92:	4605      	mov	r5, r0
  uint32_t wtemp;
  uint16_t hAux;
  uint8_t i;

  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8005e94:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8005e98:	f7fb ffde 	bl	8001e58 <RCM_ExecRegularConv>

  if ( hAux != 0xFFFF )
 8005e9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ea0:	4298      	cmp	r0, r3
 8005ea2:	d032      	beq.n	8005f0a <RVBS_CalcAvVbus+0x7a>
  {
    pHandle->aBuffer[pHandle->index] = hAux;
 8005ea4:	6a2e      	ldr	r6, [r5, #32]
 8005ea6:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8005eaa:	f826 0013 	strh.w	r0, [r6, r3, lsl #1]
    wtemp = 0;
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8005eae:	8b2c      	ldrh	r4, [r5, #24]
 8005eb0:	b1dc      	cbz	r4, 8005eea <RVBS_CalcAvVbus+0x5a>
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	461a      	mov	r2, r3
    {
      wtemp += pHandle->aBuffer[i];
 8005eb6:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8005eba:	3301      	adds	r3, #1
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	42a3      	cmp	r3, r4
      wtemp += pHandle->aBuffer[i];
 8005ec0:	440a      	add	r2, r1
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8005ec2:	d3f8      	bcc.n	8005eb6 <RVBS_CalcAvVbus+0x26>
    }
    wtemp /= pHandle->LowPassFilterBW;
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
    pHandle->_Super.LatestConv = hAux;

    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8005ec4:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    wtemp /= pHandle->LowPassFilterBW;
 8005ec8:	fbb2 f2f4 	udiv	r2, r2, r4
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8005ecc:	3c01      	subs	r4, #1
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8005ece:	b292      	uxth	r2, r2
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8005ed0:	42a3      	cmp	r3, r4
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8005ed2:	80ea      	strh	r2, [r5, #6]
    pHandle->_Super.LatestConv = hAux;
 8005ed4:	80a8      	strh	r0, [r5, #4]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8005ed6:	da0b      	bge.n	8005ef0 <RVBS_CalcAvVbus+0x60>
    {
      pHandle->index++;
 8005ed8:	3301      	adds	r3, #1
 8005eda:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  */
uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8005ede:	8b6b      	ldrh	r3, [r5, #26]
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d20b      	bcs.n	8005efc <RVBS_CalcAvVbus+0x6c>
  {
    fault = MC_OVER_VOLT;
 8005ee4:	2002      	movs	r0, #2
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8005ee6:	8128      	strh	r0, [r5, #8]
}
 8005ee8:	bd70      	pop	{r4, r5, r6, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8005eea:	4622      	mov	r2, r4
 8005eec:	80ec      	strh	r4, [r5, #6]
    pHandle->_Super.LatestConv = hAux;
 8005eee:	80a8      	strh	r0, [r5, #4]
      pHandle->index = 0;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8005ef6:	8b6b      	ldrh	r3, [r5, #26]
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d3f3      	bcc.n	8005ee4 <RVBS_CalcAvVbus+0x54>
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8005efc:	8ba8      	ldrh	r0, [r5, #28]
  {
    fault = MC_UNDER_VOLT;
 8005efe:	4290      	cmp	r0, r2
 8005f00:	bf8c      	ite	hi
 8005f02:	2004      	movhi	r0, #4
 8005f04:	2000      	movls	r0, #0
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8005f06:	8128      	strh	r0, [r5, #8]
}
 8005f08:	bd70      	pop	{r4, r5, r6, pc}
 8005f0a:	88ea      	ldrh	r2, [r5, #6]
 8005f0c:	e7e7      	b.n	8005ede <RVBS_CalcAvVbus+0x4e>
 8005f0e:	bf00      	nop

08005f10 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8005f10:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 8005f12:	2201      	movs	r2, #1
 8005f14:	6142      	str	r2, [r0, #20]
  pHandle->Ext = 0;
 8005f16:	6083      	str	r3, [r0, #8]
  pHandle->TargetFinal = 0;
 8005f18:	6043      	str	r3, [r0, #4]
  pHandle->RampRemainingStep = 0u;
 8005f1a:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8005f1c:	6103      	str	r3, [r0, #16]
 8005f1e:	4770      	bx	lr

08005f20 <REMNG_Calc>:
  int32_t current_ref;

  current_ref = pHandle->Ext;

  /* Update the variable and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8005f20:	68c2      	ldr	r2, [r0, #12]
  current_ref = pHandle->Ext;
 8005f22:	6883      	ldr	r3, [r0, #8]
  if ( pHandle->RampRemainingStep > 1u )
 8005f24:	2a01      	cmp	r2, #1
 8005f26:	d90b      	bls.n	8005f40 <REMNG_Calc+0x20>
{
 8005f28:	b410      	push	{r4}
  {
    /* Increment/decrement the reference value. */
    current_ref += pHandle->IncDecAmount;
 8005f2a:	6904      	ldr	r4, [r0, #16]
 8005f2c:	6941      	ldr	r1, [r0, #20]
 8005f2e:	4423      	add	r3, r4

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep --;
 8005f30:	3a01      	subs	r2, #1
 8005f32:	60c2      	str	r2, [r0, #12]
  else
  {
    /* Do nothing. */
  }

  pHandle->Ext = current_ref;
 8005f34:	6083      	str	r3, [r0, #8]
#else
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
#endif

  return ret_val;
}
 8005f36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f3a:	fb93 f0f1 	sdiv	r0, r3, r1
 8005f3e:	4770      	bx	lr
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8005f40:	6941      	ldr	r1, [r0, #20]
  else if ( pHandle->RampRemainingStep == 1u )
 8005f42:	d104      	bne.n	8005f4e <REMNG_Calc+0x2e>
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8005f44:	6843      	ldr	r3, [r0, #4]
    pHandle->RampRemainingStep = 0u;
 8005f46:	2200      	movs	r2, #0
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8005f48:	fb03 f301 	mul.w	r3, r3, r1
    pHandle->RampRemainingStep = 0u;
 8005f4c:	60c2      	str	r2, [r0, #12]
  pHandle->Ext = current_ref;
 8005f4e:	6083      	str	r3, [r0, #8]
}
 8005f50:	fb93 f0f1 	sdiv	r0, r3, r1
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop

08005f58 <REMNG_ExecRamp>:
  *         milliseconds. It is possible to set 0 to perform an instantaneous
  *         change in the value.
  * @retval bool It returns true is command is valid, false otherwise
  */
bool REMNG_ExecRamp( RampExtMngr_Handle_t * pHandle, int32_t TargetFinal, uint32_t Durationms )
{
 8005f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  current_ref = FD_FastDiv( &( pHandle->fd ), pHandle->Ext, ( int32_t )( pHandle->ScalingFactor ) );
#else
  current_ref = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
#endif

  if ( Durationms == 0u )
 8005f5c:	b9da      	cbnz	r2, 8005f96 <REMNG_ExecRamp+0x3e>
{
 8005f5e:	2301      	movs	r3, #1
  uint32_t TargetAbs;
  int32_t aux;

  if ( Target < 0 )
  {
    aux = -Target;
 8005f60:	ea81 75e1 	eor.w	r5, r1, r1, asr #31
  {
    TargetAbs = ( uint32_t )( Target );
  }
  for ( i = 1u; i < 32u; i++ )
  {
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8005f64:	461c      	mov	r4, r3
    aux = -Target;
 8005f66:	eba5 75e1 	sub.w	r5, r5, r1, asr #31
 8005f6a:	e002      	b.n	8005f72 <REMNG_ExecRamp+0x1a>
 8005f6c:	3301      	adds	r3, #1
  for ( i = 1u; i < 32u; i++ )
 8005f6e:	2b20      	cmp	r3, #32
 8005f70:	d074      	beq.n	800605c <REMNG_ExecRamp+0x104>
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8005f72:	f1c3 021f 	rsb	r2, r3, #31
 8005f76:	fa04 f202 	lsl.w	r2, r4, r2
    if ( TargetAbs >= limit )
 8005f7a:	42aa      	cmp	r2, r5
 8005f7c:	d8f6      	bhi.n	8005f6c <REMNG_ExecRamp+0x14>
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	409c      	lsls	r4, r3
    pHandle->RampRemainingStep = 0u;
 8005f82:	2200      	movs	r2, #0
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8005f84:	fa01 f303 	lsl.w	r3, r1, r3
 8005f88:	6083      	str	r3, [r0, #8]
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 8005f8a:	6144      	str	r4, [r0, #20]
    pHandle->RampRemainingStep = 0u;
 8005f8c:	60c2      	str	r2, [r0, #12]
    pHandle->IncDecAmount = 0;
 8005f8e:	6102      	str	r2, [r0, #16]
}
 8005f90:	2001      	movs	r0, #1
 8005f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  current_ref = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8005f96:	6884      	ldr	r4, [r0, #8]
 8005f98:	6943      	ldr	r3, [r0, #20]
 8005f9a:	fb94 f3f3 	sdiv	r3, r4, r3
    uint32_t wScalingFactor = getScalingFactor( TargetFinal - current_ref );
 8005f9e:	1acf      	subs	r7, r1, r3
  for ( i = 1u; i < 32u; i++ )
 8005fa0:	2401      	movs	r4, #1
    aux = -Target;
 8005fa2:	ea87 76e7 	eor.w	r6, r7, r7, asr #31
 8005fa6:	eba6 76e7 	sub.w	r6, r6, r7, asr #31
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8005faa:	46a6      	mov	lr, r4
 8005fac:	e002      	b.n	8005fb4 <REMNG_ExecRamp+0x5c>
 8005fae:	3401      	adds	r4, #1
  for ( i = 1u; i < 32u; i++ )
 8005fb0:	2c20      	cmp	r4, #32
 8005fb2:	d050      	beq.n	8006056 <REMNG_ExecRamp+0xfe>
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8005fb4:	f1c4 051f 	rsb	r5, r4, #31
 8005fb8:	fa0e f505 	lsl.w	r5, lr, r5
    if ( TargetAbs >= limit )
 8005fbc:	42b5      	cmp	r5, r6
 8005fbe:	d8f6      	bhi.n	8005fae <REMNG_ExecRamp+0x56>
 8005fc0:	3c01      	subs	r4, #1
 8005fc2:	fa0e fe04 	lsl.w	lr, lr, r4
  for ( i = 1u; i < 32u; i++ )
 8005fc6:	2501      	movs	r5, #1
    aux = -Target;
 8005fc8:	ea83 7ce3 	eor.w	ip, r3, r3, asr #31
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8005fcc:	462c      	mov	r4, r5
    aux = -Target;
 8005fce:	ebac 7ce3 	sub.w	ip, ip, r3, asr #31
 8005fd2:	e002      	b.n	8005fda <REMNG_ExecRamp+0x82>
 8005fd4:	3501      	adds	r5, #1
  for ( i = 1u; i < 32u; i++ )
 8005fd6:	2d20      	cmp	r5, #32
 8005fd8:	d044      	beq.n	8006064 <REMNG_ExecRamp+0x10c>
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8005fda:	f1c5 061f 	rsb	r6, r5, #31
 8005fde:	fa04 f606 	lsl.w	r6, r4, r6
    if ( TargetAbs >= limit )
 8005fe2:	4566      	cmp	r6, ip
 8005fe4:	d8f6      	bhi.n	8005fd4 <REMNG_ExecRamp+0x7c>
 8005fe6:	3d01      	subs	r5, #1
 8005fe8:	fa04 f505 	lsl.w	r5, r4, r5
  for ( i = 1u; i < 32u; i++ )
 8005fec:	2401      	movs	r4, #1
    aux = -Target;
 8005fee:	ea81 78e1 	eor.w	r8, r1, r1, asr #31
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8005ff2:	46a4      	mov	ip, r4
    aux = -Target;
 8005ff4:	eba8 78e1 	sub.w	r8, r8, r1, asr #31
 8005ff8:	e002      	b.n	8006000 <REMNG_ExecRamp+0xa8>
 8005ffa:	3401      	adds	r4, #1
  for ( i = 1u; i < 32u; i++ )
 8005ffc:	2c20      	cmp	r4, #32
 8005ffe:	d027      	beq.n	8006050 <REMNG_ExecRamp+0xf8>
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8006000:	f1c4 061f 	rsb	r6, r4, #31
 8006004:	fa0c f606 	lsl.w	r6, ip, r6
    if ( TargetAbs >= limit )
 8006008:	4546      	cmp	r6, r8
 800600a:	d8f6      	bhi.n	8005ffa <REMNG_ExecRamp+0xa2>
 800600c:	3c01      	subs	r4, #1
 800600e:	fa0c f404 	lsl.w	r4, ip, r4
    if ( wScalingFactor <  wScalingFactor2 )
 8006012:	45ae      	cmp	lr, r5
 8006014:	d218      	bcs.n	8006048 <REMNG_ExecRamp+0xf0>
 8006016:	4574      	cmp	r4, lr
 8006018:	bf28      	it	cs
 800601a:	4674      	movcs	r4, lr
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 800601c:	8806      	ldrh	r6, [r0, #0]
    aux /= 1000u;
 800601e:	4d13      	ldr	r5, [pc, #76]	; (800606c <REMNG_ExecRamp+0x114>)
    pHandle->ScalingFactor = wScalingFactorMin;
 8006020:	6144      	str	r4, [r0, #20]
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 8006022:	fb02 f206 	mul.w	r2, r2, r6
    aux /= 1000u;
 8006026:	fba5 5202 	umull	r5, r2, r5, r2
 800602a:	0992      	lsrs	r2, r2, #6
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 800602c:	fb04 f303 	mul.w	r3, r4, r3
    pHandle->RampRemainingStep++;
 8006030:	3201      	adds	r2, #1
    aux1 = ( TargetFinal - current_ref ) * ( int32_t )( pHandle->ScalingFactor );
 8006032:	fb04 f407 	mul.w	r4, r4, r7
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 8006036:	6083      	str	r3, [r0, #8]
    pHandle->TargetFinal = TargetFinal;
 8006038:	6041      	str	r1, [r0, #4]
    aux1 /= ( int32_t )( pHandle->RampRemainingStep );
 800603a:	fb94 f4f2 	sdiv	r4, r4, r2
    pHandle->RampRemainingStep++;
 800603e:	60c2      	str	r2, [r0, #12]
    pHandle->IncDecAmount = aux1;
 8006040:	6104      	str	r4, [r0, #16]
}
 8006042:	2001      	movs	r0, #1
 8006044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006048:	42ac      	cmp	r4, r5
 800604a:	bf28      	it	cs
 800604c:	462c      	movcs	r4, r5
 800604e:	e7e5      	b.n	800601c <REMNG_ExecRamp+0xc4>
  for ( i = 1u; i < 32u; i++ )
 8006050:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006054:	e7dd      	b.n	8006012 <REMNG_ExecRamp+0xba>
 8006056:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 800605a:	e7b4      	b.n	8005fc6 <REMNG_ExecRamp+0x6e>
 800605c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006060:	231f      	movs	r3, #31
 8006062:	e78e      	b.n	8005f82 <REMNG_ExecRamp+0x2a>
 8006064:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8006068:	e7c0      	b.n	8005fec <REMNG_ExecRamp+0x94>
 800606a:	bf00      	nop
 800606c:	10624dd3 	.word	0x10624dd3

08006070 <REMNG_RampCompleted>:
  if ( pHandle->RampRemainingStep == 0u )
 8006070:	68c0      	ldr	r0, [r0, #12]
}
 8006072:	fab0 f080 	clz	r0, r0
 8006076:	0940      	lsrs	r0, r0, #5
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop

0800607c <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 800607c:	f9b0 0000 	ldrsh.w	r0, [r0]
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop

08006084 <SPD_GetAvrgMecSpeed01Hz>:
  * @retval int16_t rotor average mechanical speed (01Hz)
  */
int16_t SPD_GetAvrgMecSpeed01Hz( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeed01Hz );
}
 8006084:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop

0800608c <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeed01Hz < 0 )
 800608c:	f9b1 3000 	ldrsh.w	r3, [r1]
  if ( hAbsMecSpeed01Hz > pHandle->hMaxReliableMecSpeed01Hz )
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeed01Hz < pHandle->hMinReliableMecSpeed01Hz )
 8006090:	89c1      	ldrh	r1, [r0, #14]
{
 8006092:	b430      	push	{r4, r5}
  if ( *pMecSpeed01Hz < 0 )
 8006094:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeed01Hz );
 8006096:	bfb8      	it	lt
 8006098:	425b      	neglt	r3, r3
    hAbsMecSpeed01Hz = ( uint16_t )( *pMecSpeed01Hz );
 800609a:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeed01Hz < pHandle->hMinReliableMecSpeed01Hz )
 800609c:	4299      	cmp	r1, r3
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800609e:	7c04      	ldrb	r4, [r0, #16]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 80060a0:	7a82      	ldrb	r2, [r0, #10]
  if ( hAbsMecSpeed01Hz > pHandle->hMaxReliableMecSpeed01Hz )
 80060a2:	8985      	ldrh	r5, [r0, #12]
  if ( hAbsMecSpeed01Hz < pHandle->hMinReliableMecSpeed01Hz )
 80060a4:	d816      	bhi.n	80060d4 <SPD_IsMecSpeedReliable+0x48>
  if ( hAbsMecSpeed01Hz > pHandle->hMaxReliableMecSpeed01Hz )
 80060a6:	42ab      	cmp	r3, r5
 80060a8:	bf94      	ite	ls
 80060aa:	2300      	movls	r3, #0
 80060ac:	2301      	movhi	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccel01HzP < 0 )
 80060ae:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
  else
  {
    hAbsMecAccel01HzP = ( uint16_t )( pHandle->hMecAccel01HzP );
  }

  if ( hAbsMecAccel01HzP > pHandle->hMaxReliableMecAccel01HzP )
 80060b2:	8a45      	ldrh	r5, [r0, #18]
  if ( pHandle->hMecAccel01HzP < 0 )
 80060b4:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccel01HzP );
 80060b6:	bfb8      	it	lt
 80060b8:	4249      	neglt	r1, r1
    hAbsMecAccel01HzP = ( uint16_t )( pHandle->hMecAccel01HzP );
 80060ba:	b289      	uxth	r1, r1
  if ( hAbsMecAccel01HzP > pHandle->hMaxReliableMecAccel01HzP )
 80060bc:	428d      	cmp	r5, r1
 80060be:	d30b      	bcc.n	80060d8 <SPD_IsMecSpeedReliable+0x4c>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 80060c0:	b953      	cbnz	r3, 80060d8 <SPD_IsMecSpeedReliable+0x4c>
  }
  else
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
    {
      bSpeedErrorNumber = 0u;
 80060c2:	4294      	cmp	r4, r2
 80060c4:	bf88      	it	hi
 80060c6:	2200      	movhi	r2, #0
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 80060c8:	7282      	strb	r2, [r0, #10]

  return ( SpeedSensorReliability );
}
 80060ca:	1b10      	subs	r0, r2, r4
 80060cc:	bf18      	it	ne
 80060ce:	2001      	movne	r0, #1
 80060d0:	bc30      	pop	{r4, r5}
 80060d2:	4770      	bx	lr
    SpeedError = true;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e7ea      	b.n	80060ae <SPD_IsMecSpeedReliable+0x22>
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 80060d8:	4294      	cmp	r4, r2
 80060da:	d9f5      	bls.n	80060c8 <SPD_IsMecSpeedReliable+0x3c>
      bSpeedErrorNumber++;
 80060dc:	3201      	adds	r2, #1
 80060de:	b2d2      	uxtb	r2, r2
 80060e0:	e7f2      	b.n	80060c8 <SPD_IsMecSpeedReliable+0x3c>
 80060e2:	bf00      	nop

080060e4 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeed01Hz;
  wAux *= INT16_MAX;
 80060e4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeed01Hz;
 80060e8:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
  wAux *= INT16_MAX;
 80060ec:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeed01Hz;
 80060f0:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 80060f4:	b200      	sxth	r0, r0
 80060f6:	4770      	bx	lr

080060f8 <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 80060f8:	b470      	push	{r4, r5, r6}

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRef01HzExt = ( int32_t )pHandle->MecSpeedRef01HzDefault * 65536;
 80060fa:	f9b0 502c 	ldrsh.w	r5, [r0, #44]	; 0x2c
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 80060fe:	f9b0 402e 	ldrsh.w	r4, [r0, #46]	; 0x2e
  pHandle->Mode = pHandle->ModeDefault;
 8006102:	f890 602a 	ldrb.w	r6, [r0, #42]	; 0x2a
 8006106:	7006      	strb	r6, [r0, #0]
  pHandle->TargetFinal = 0;
 8006108:	2300      	movs	r3, #0
  pHandle->SpeedRef01HzExt = ( int32_t )pHandle->MecSpeedRef01HzDefault * 65536;
 800610a:	042d      	lsls	r5, r5, #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800610c:	0424      	lsls	r4, r4, #16
  pHandle->SpeedRef01HzExt = ( int32_t )pHandle->MecSpeedRef01HzDefault * 65536;
 800610e:	6045      	str	r5, [r0, #4]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8006110:	6084      	str	r4, [r0, #8]
  pHandle->PISpeed = pPI;
 8006112:	6101      	str	r1, [r0, #16]
  pHandle->SPD = SPD_Handle;
 8006114:	6142      	str	r2, [r0, #20]
  pHandle->TargetFinal = 0;
 8006116:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 8006118:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 800611a:	6183      	str	r3, [r0, #24]
}
 800611c:	bc70      	pop	{r4, r5, r6}
 800611e:	4770      	bx	lr

08006120 <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  pHandle->SPD = SPD_Handle;
 8006120:	6141      	str	r1, [r0, #20]
 8006122:	4770      	bx	lr

08006124 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 8006124:	6940      	ldr	r0, [r0, #20]
 8006126:	4770      	bx	lr

08006128 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 8006128:	7803      	ldrb	r3, [r0, #0]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d000      	beq.n	8006130 <STC_Clear+0x8>
 800612e:	4770      	bx	lr
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8006130:	6900      	ldr	r0, [r0, #16]
 8006132:	2100      	movs	r1, #0
 8006134:	f7fe bd98 	b.w	8004c68 <PID_SetIntegralTerm>

08006138 <STC_GetMecSpeedRef01Hz>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
int16_t STC_GetMecSpeedRef01Hz( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRef01HzExt / 65536 ) );
 8006138:	6840      	ldr	r0, [r0, #4]
 800613a:	2800      	cmp	r0, #0
 800613c:	bfbc      	itt	lt
 800613e:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8006142:	30ff      	addlt	r0, #255	; 0xff
}
 8006144:	1400      	asrs	r0, r0, #16
 8006146:	4770      	bx	lr

08006148 <STC_SetControlMode>:
  * @retval none
  */
void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8006148:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 800614a:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800614c:	60c3      	str	r3, [r0, #12]
 800614e:	4770      	bx	lr

08006150 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8006150:	4603      	mov	r3, r0
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006152:	7800      	ldrb	r0, [r0, #0]
{
 8006154:	b430      	push	{r4, r5}
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006156:	b980      	cbnz	r0, 800617a <STC_ExecRamp+0x2a>
#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
    {
      AllowedRange = false;
    }
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8006158:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	; 0x28
 800615c:	428c      	cmp	r4, r1
 800615e:	dc0a      	bgt.n	8006176 <STC_ExecRamp+0x26>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 8006160:	8cdd      	ldrh	r5, [r3, #38]	; 0x26
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 8006162:	689c      	ldr	r4, [r3, #8]
    }
    else {}
#endif
  }

  if ( AllowedRange == true )
 8006164:	42a9      	cmp	r1, r5
 8006166:	dc06      	bgt.n	8006176 <STC_ExecRamp+0x26>
  {
    /* Interrupts the execution of any previous ramp command */
    if ( hDurationms == 0u )
 8006168:	b9fa      	cbnz	r2, 80061aa <STC_ExecRamp+0x5a>
      {
        pHandle->SpeedRef01HzExt = ( int32_t )hTargetFinal * 65536;
      }
      else
      {
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 800616a:	0409      	lsls	r1, r1, #16
 800616c:	6099      	str	r1, [r3, #8]
      }
      pHandle->RampRemainingStep = 0u;
 800616e:	2200      	movs	r2, #0
 8006170:	60da      	str	r2, [r3, #12]
      pHandle->IncDecAmount = 0;
 8006172:	619a      	str	r2, [r3, #24]
 8006174:	2001      	movs	r0, #1
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8006176:	bc30      	pop	{r4, r5}
 8006178:	4770      	bx	lr
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeed01Hz )
 800617a:	8bdc      	ldrh	r4, [r3, #30]
 800617c:	42a1      	cmp	r1, r4
 800617e:	dd02      	ble.n	8006186 <STC_ExecRamp+0x36>
 8006180:	2000      	movs	r0, #0
}
 8006182:	bc30      	pop	{r4, r5}
 8006184:	4770      	bx	lr
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeed01Hz )
 8006186:	f9b3 4024 	ldrsh.w	r4, [r3, #36]	; 0x24
 800618a:	428c      	cmp	r4, r1
 800618c:	dcf8      	bgt.n	8006180 <STC_ExecRamp+0x30>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeed01Hz )
 800618e:	8c1c      	ldrh	r4, [r3, #32]
 8006190:	42a1      	cmp	r1, r4
 8006192:	da03      	bge.n	800619c <STC_ExecRamp+0x4c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeed01Hz )
 8006194:	f9b3 4022 	ldrsh.w	r4, [r3, #34]	; 0x22
 8006198:	428c      	cmp	r4, r1
 800619a:	dbf1      	blt.n	8006180 <STC_ExecRamp+0x30>
    hCurrentReference = ( int16_t )( pHandle->SpeedRef01HzExt >> 16 );
 800619c:	685c      	ldr	r4, [r3, #4]
    if ( hDurationms == 0u )
 800619e:	b9e2      	cbnz	r2, 80061da <STC_ExecRamp+0x8a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 80061a0:	2801      	cmp	r0, #1
 80061a2:	d1e2      	bne.n	800616a <STC_ExecRamp+0x1a>
        pHandle->SpeedRef01HzExt = ( int32_t )hTargetFinal * 65536;
 80061a4:	0409      	lsls	r1, r1, #16
 80061a6:	6059      	str	r1, [r3, #4]
 80061a8:	e7e1      	b.n	800616e <STC_ExecRamp+0x1e>
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 80061aa:	1e20      	subs	r0, r4, #0
 80061ac:	bfbc      	itt	lt
 80061ae:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 80061b2:	30ff      	addlt	r0, #255	; 0xff
 80061b4:	1400      	asrs	r0, r0, #16
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 80061b6:	8b9c      	ldrh	r4, [r3, #28]
      wAux /= 1000u;
 80061b8:	4d09      	ldr	r5, [pc, #36]	; (80061e0 <STC_ExecRamp+0x90>)
      pHandle->TargetFinal = hTargetFinal;
 80061ba:	8059      	strh	r1, [r3, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 80061bc:	fb02 f204 	mul.w	r2, r2, r4
      wAux /= 1000u;
 80061c0:	fba5 4202 	umull	r4, r2, r5, r2
 80061c4:	0992      	lsrs	r2, r2, #6
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 80061c6:	1a09      	subs	r1, r1, r0
      pHandle->RampRemainingStep++;
 80061c8:	3201      	adds	r2, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 80061ca:	0409      	lsls	r1, r1, #16
      pHandle->IncDecAmount = wAux1;
 80061cc:	2001      	movs	r0, #1
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 80061ce:	fb91 f1f2 	sdiv	r1, r1, r2
      pHandle->RampRemainingStep++;
 80061d2:	60da      	str	r2, [r3, #12]
      pHandle->IncDecAmount = wAux1;
 80061d4:	6199      	str	r1, [r3, #24]
}
 80061d6:	bc30      	pop	{r4, r5}
 80061d8:	4770      	bx	lr
    hCurrentReference = ( int16_t )( pHandle->SpeedRef01HzExt >> 16 );
 80061da:	1420      	asrs	r0, r4, #16
 80061dc:	e7eb      	b.n	80061b6 <STC_ExecRamp+0x66>
 80061de:	bf00      	nop
 80061e0:	10624dd3 	.word	0x10624dd3

080061e4 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 80061e4:	b538      	push	{r3, r4, r5, lr}
  int16_t hTorqueReference = 0;
  int16_t hMeasuredSpeed;
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
 80061e6:	7802      	ldrb	r2, [r0, #0]
  {
    wCurrentReference = pHandle->TorqueRef;
  }
  else
  {
    wCurrentReference = pHandle->SpeedRef01HzExt;
 80061e8:	6845      	ldr	r5, [r0, #4]
    wCurrentReference = pHandle->TorqueRef;
 80061ea:	6881      	ldr	r1, [r0, #8]
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 80061ec:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 80061ee:	2a00      	cmp	r2, #0
 80061f0:	bf08      	it	eq
 80061f2:	460d      	moveq	r5, r1
  if ( pHandle->RampRemainingStep > 1u )
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d90d      	bls.n	8006214 <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 80061f8:	6981      	ldr	r1, [r0, #24]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 80061fa:	3b01      	subs	r3, #1
 80061fc:	60c3      	str	r3, [r0, #12]
    wCurrentReference += pHandle->IncDecAmount;
 80061fe:	440d      	add	r5, r1
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 8006200:	2a01      	cmp	r2, #1
 8006202:	d00e      	beq.n	8006222 <STC_CalcTorqueReference+0x3e>
    pHandle->SpeedRef01HzExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 8006204:	6085      	str	r5, [r0, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8006206:	2d00      	cmp	r5, #0
 8006208:	bfbc      	itt	lt
 800620a:	f505 457f 	addlt.w	r5, r5, #65280	; 0xff00
 800620e:	35ff      	addlt	r5, #255	; 0xff
 8006210:	1428      	asrs	r0, r5, #16
  }

  return hTorqueReference;
}
 8006212:	bd38      	pop	{r3, r4, r5, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 8006214:	d1f4      	bne.n	8006200 <STC_CalcTorqueReference+0x1c>
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8006216:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 800621a:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800621c:	042d      	lsls	r5, r5, #16
    pHandle->RampRemainingStep = 0u;
 800621e:	60c3      	str	r3, [r0, #12]
 8006220:	e7ee      	b.n	8006200 <STC_CalcTorqueReference+0x1c>
 8006222:	4604      	mov	r4, r0
    hMeasuredSpeed = SPD_GetAvrgMecSpeed01Hz( pHandle->SPD );
 8006224:	6940      	ldr	r0, [r0, #20]
 8006226:	f7ff ff2d 	bl	8006084 <SPD_GetAvrgMecSpeed01Hz>
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 800622a:	2d00      	cmp	r5, #0
 800622c:	4629      	mov	r1, r5
 800622e:	bfbc      	itt	lt
 8006230:	f505 417f 	addlt.w	r1, r5, #65280	; 0xff00
 8006234:	31ff      	addlt	r1, #255	; 0xff
    hError = hTargetSpeed - hMeasuredSpeed;
 8006236:	ebc0 4121 	rsb	r1, r0, r1, asr #16
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 800623a:	b209      	sxth	r1, r1
 800623c:	6920      	ldr	r0, [r4, #16]
 800623e:	f7fe fd1f 	bl	8004c80 <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8006242:	0403      	lsls	r3, r0, #16
    pHandle->SpeedRef01HzExt = wCurrentReference;
 8006244:	6065      	str	r5, [r4, #4]
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8006246:	60a3      	str	r3, [r4, #8]
 8006248:	bd38      	pop	{r3, r4, r5, pc}
 800624a:	bf00      	nop

0800624c <STC_GetMecSpeedRef01HzDefault>:
  *         expressed in tenths of HZ.
  */
int16_t STC_GetMecSpeedRef01HzDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRef01HzDefault;
}
 800624c:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop

08006254 <STC_GetMaxAppPositiveMecSpeed01Hz>:
            speed expressed in tenth of mechanical Hertz.
  */
uint16_t STC_GetMaxAppPositiveMecSpeed01Hz( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeed01Hz;
}
 8006254:	8bc0      	ldrh	r0, [r0, #30]
 8006256:	4770      	bx	lr

08006258 <STC_GetMinAppNegativeMecSpeed01Hz>:
            speed expressed in tenth of mechanical Hertz.
  */
int16_t STC_GetMinAppNegativeMecSpeed01Hz( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeed01Hz;
}
 8006258:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop

08006260 <STC_StopSpeedRamp>:
  * @retval bool It returns true if the command is executed, false otherwise.
  */
bool STC_StopSpeedRamp( SpeednTorqCtrl_Handle_t * pHandle )
{
  bool retVal = false;
  if ( pHandle->Mode == STC_SPEED_MODE )
 8006260:	7803      	ldrb	r3, [r0, #0]
 8006262:	2b01      	cmp	r3, #1
  {
    pHandle->RampRemainingStep = 0u;
 8006264:	bf0a      	itet	eq
 8006266:	2200      	moveq	r2, #0
  bool retVal = false;
 8006268:	2300      	movne	r3, #0
    pHandle->RampRemainingStep = 0u;
 800626a:	60c2      	streq	r2, [r0, #12]
    retVal = true;
  }
  return retVal;
}
 800626c:	4618      	mov	r0, r3
 800626e:	4770      	bx	lr

08006270 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
Curr_Components STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  Curr_Components IqdRefDefault;
  IqdRefDefault.qI_Component1 = pHandle->TorqueRefDefault;
 8006270:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.qI_Component2 = pHandle->IdrefDefault;
  return IqdRefDefault;
 8006274:	2000      	movs	r0, #0
 8006276:	b29a      	uxth	r2, r3
 8006278:	f362 000f 	bfi	r0, r2, #0, #16
 800627c:	0c1b      	lsrs	r3, r3, #16
 800627e:	f363 401f 	bfi	r0, r3, #16, #16
{
 8006282:	b082      	sub	sp, #8
}
 8006284:	b002      	add	sp, #8
 8006286:	4770      	bx	lr

08006288 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8006288:	b510      	push	{r4, lr}
 800628a:	4604      	mov	r4, r0
  pHandle->SpeedRef01HzExt = ( int32_t )SPD_GetAvrgMecSpeed01Hz( pHandle->SPD ) * ( int32_t )65536;
 800628c:	6940      	ldr	r0, [r0, #20]
 800628e:	f7ff fef9 	bl	8006084 <SPD_GetAvrgMecSpeed01Hz>
 8006292:	0400      	lsls	r0, r0, #16
 8006294:	6060      	str	r0, [r4, #4]
 8006296:	bd10      	pop	{r4, pc}

08006298 <STM_Init>:
  * @retval none.
  */
void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8006298:	2300      	movs	r3, #0
 800629a:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 800629c:	f8c0 3002 	str.w	r3, [r0, #2]
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop

080062a4 <STM_NextState>:
  *         bState, false if the requested state can't be reached
  */
bool STM_NextState( STM_Handle_t * pHandle, State_t bState )
{
  bool bChangeState = false;
  State_t bCurrentState = pHandle->bState;
 80062a4:	7803      	ldrb	r3, [r0, #0]
  State_t bNewState = bCurrentState;

  switch ( bCurrentState )
 80062a6:	2b14      	cmp	r3, #20
 80062a8:	d822      	bhi.n	80062f0 <STM_NextState+0x4c>
 80062aa:	e8df f003 	tbb	[pc, r3]
 80062ae:	7a52      	.short	0x7a52
 80062b0:	76735e0b 	.word	0x76735e0b
 80062b4:	2b281f0b 	.word	0x2b281f0b
 80062b8:	312f2121 	.word	0x312f2121
 80062bc:	3e3b4538 	.word	0x3e3b4538
 80062c0:	4b48      	.short	0x4b48
 80062c2:	5b          	.byte	0x5b
 80062c3:	00          	.byte	0x00
        bChangeState = true;
      }
      break;

    case RUN:
      if ( bState == ANY_STOP )
 80062c4:	2907      	cmp	r1, #7
 80062c6:	d027      	beq.n	8006318 <STM_NextState+0x74>
  {
    pHandle->bState = bNewState;
  }
  else
  {
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80062c8:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 80062cc:	2901      	cmp	r1, #1
 80062ce:	d00b      	beq.n	80062e8 <STM_NextState+0x44>
                             hResetErrors )
{
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80062d0:	8841      	ldrh	r1, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 80062d2:	8882      	ldrh	r2, [r0, #4]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80062d4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  pHandle->hFaultOccurred |= hSetErrors;
 80062d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80

  if ( LocalState == FAULT_NOW )
 80062dc:	2b0a      	cmp	r3, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80062de:	8041      	strh	r1, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 80062e0:	8082      	strh	r2, [r0, #4]
  if ( LocalState == FAULT_NOW )
 80062e2:	d001      	beq.n	80062e8 <STM_NextState+0x44>
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
    {
      pHandle->bState = FAULT_NOW;
 80062e4:	230a      	movs	r3, #10
 80062e6:	7003      	strb	r3, [r0, #0]
 80062e8:	2000      	movs	r0, #0
 80062ea:	4770      	bx	lr
      if ( bState == STOP )
 80062ec:	2908      	cmp	r1, #8
 80062ee:	d013      	beq.n	8006318 <STM_NextState+0x74>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80062f0:	f001 02fd 	and.w	r2, r1, #253	; 0xfd
 80062f4:	2a01      	cmp	r2, #1
 80062f6:	d0f7      	beq.n	80062e8 <STM_NextState+0x44>
 80062f8:	2907      	cmp	r1, #7
 80062fa:	d0f5      	beq.n	80062e8 <STM_NextState+0x44>
 80062fc:	e7e8      	b.n	80062d0 <STM_NextState+0x2c>
      if ( bState == STOP_IDLE )
 80062fe:	2909      	cmp	r1, #9
 8006300:	d1f6      	bne.n	80062f0 <STM_NextState+0x4c>
 8006302:	e009      	b.n	8006318 <STM_NextState+0x74>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 8006304:	b141      	cbz	r1, 8006318 <STM_NextState+0x74>
 8006306:	290c      	cmp	r1, #12
 8006308:	d1f2      	bne.n	80062f0 <STM_NextState+0x4c>
 800630a:	e005      	b.n	8006318 <STM_NextState+0x74>
      if ( bState == IDLE )
 800630c:	b121      	cbz	r1, 8006318 <STM_NextState+0x74>
 800630e:	e7ef      	b.n	80062f0 <STM_NextState+0x4c>
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8006310:	290e      	cmp	r1, #14
 8006312:	d001      	beq.n	8006318 <STM_NextState+0x74>
 8006314:	2907      	cmp	r1, #7
 8006316:	d1d7      	bne.n	80062c8 <STM_NextState+0x24>
    pHandle->bState = bNewState;
 8006318:	7001      	strb	r1, [r0, #0]
 800631a:	2001      	movs	r0, #1
  return ( bChangeState );
 800631c:	4770      	bx	lr
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 800631e:	290f      	cmp	r1, #15
 8006320:	d1f8      	bne.n	8006314 <STM_NextState+0x70>
 8006322:	e7f9      	b.n	8006318 <STM_NextState+0x74>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8006324:	2911      	cmp	r1, #17
 8006326:	d1f5      	bne.n	8006314 <STM_NextState+0x70>
 8006328:	e7f6      	b.n	8006318 <STM_NextState+0x74>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 800632a:	2912      	cmp	r1, #18
 800632c:	d0f4      	beq.n	8006318 <STM_NextState+0x74>
 800632e:	2907      	cmp	r1, #7
 8006330:	d0f2      	beq.n	8006318 <STM_NextState+0x74>
 8006332:	2914      	cmp	r1, #20
 8006334:	d1c8      	bne.n	80062c8 <STM_NextState+0x24>
 8006336:	e7ef      	b.n	8006318 <STM_NextState+0x74>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 8006338:	2902      	cmp	r1, #2
 800633a:	d1eb      	bne.n	8006314 <STM_NextState+0x70>
 800633c:	e7ec      	b.n	8006318 <STM_NextState+0x74>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 800633e:	2904      	cmp	r1, #4
 8006340:	d1e8      	bne.n	8006314 <STM_NextState+0x70>
 8006342:	e7e9      	b.n	8006318 <STM_NextState+0x74>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8006344:	2904      	cmp	r1, #4
 8006346:	d0e7      	beq.n	8006318 <STM_NextState+0x74>
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8006348:	2907      	cmp	r1, #7
 800634a:	d0e5      	beq.n	8006318 <STM_NextState+0x74>
 800634c:	2905      	cmp	r1, #5
 800634e:	d0e3      	beq.n	8006318 <STM_NextState+0x74>
 8006350:	e7ce      	b.n	80062f0 <STM_NextState+0x4c>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8006352:	2903      	cmp	r1, #3
 8006354:	d0e0      	beq.n	8006318 <STM_NextState+0x74>
 8006356:	2901      	cmp	r1, #1
 8006358:	d0de      	beq.n	8006318 <STM_NextState+0x74>
           || ( bState == ICLWAIT ) )
 800635a:	290c      	cmp	r1, #12
 800635c:	d0dc      	beq.n	8006318 <STM_NextState+0x74>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800635e:	2907      	cmp	r1, #7
 8006360:	d0c2      	beq.n	80062e8 <STM_NextState+0x44>
 8006362:	e00e      	b.n	8006382 <STM_NextState+0xde>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 8006364:	2912      	cmp	r1, #18
 8006366:	d1d5      	bne.n	8006314 <STM_NextState+0x70>
 8006368:	e7d6      	b.n	8006318 <STM_NextState+0x74>
      if ( ( bState == ANY_STOP ) || ( bState == CHARGE_BOOT_CAP ) ||
 800636a:	2907      	cmp	r1, #7
 800636c:	d0d4      	beq.n	8006318 <STM_NextState+0x74>
 800636e:	2910      	cmp	r1, #16
 8006370:	d0d2      	beq.n	8006318 <STM_NextState+0x74>
 8006372:	2904      	cmp	r1, #4
 8006374:	d0d0      	beq.n	8006318 <STM_NextState+0x74>
           ( bState == START ) ||
 8006376:	2911      	cmp	r1, #17
 8006378:	d0ce      	beq.n	8006318 <STM_NextState+0x74>
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 800637a:	2901      	cmp	r1, #1
 800637c:	d0cc      	beq.n	8006318 <STM_NextState+0x74>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800637e:	2903      	cmp	r1, #3
 8006380:	d0b2      	beq.n	80062e8 <STM_NextState+0x44>
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006382:	8842      	ldrh	r2, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8006384:	8883      	ldrh	r3, [r0, #4]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006386:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  pHandle->hFaultOccurred |= hSetErrors;
 800638a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800638e:	8042      	strh	r2, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8006390:	8083      	strh	r3, [r0, #4]
 8006392:	e7a7      	b.n	80062e4 <STM_NextState+0x40>
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8006394:	2913      	cmp	r1, #19
 8006396:	d1d7      	bne.n	8006348 <STM_NextState+0xa4>
 8006398:	e7be      	b.n	8006318 <STM_NextState+0x74>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 800639a:	1f8a      	subs	r2, r1, #6
 800639c:	2a01      	cmp	r2, #1
 800639e:	d8a7      	bhi.n	80062f0 <STM_NextState+0x4c>
 80063a0:	e7ba      	b.n	8006318 <STM_NextState+0x74>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 80063a2:	2907      	cmp	r1, #7
 80063a4:	d0b8      	beq.n	8006318 <STM_NextState+0x74>
 80063a6:	290d      	cmp	r1, #13
 80063a8:	d0b6      	beq.n	8006318 <STM_NextState+0x74>
           || ( bState == ALIGN_OFFSET_CALIB ) )
 80063aa:	290e      	cmp	r1, #14
 80063ac:	d18c      	bne.n	80062c8 <STM_NextState+0x24>
 80063ae:	e7b3      	b.n	8006318 <STM_NextState+0x74>

080063b0 <STM_FaultProcessing>:
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80063b0:	8843      	ldrh	r3, [r0, #2]
{
 80063b2:	b430      	push	{r4, r5}
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80063b4:	430b      	orrs	r3, r1
  pHandle->hFaultOccurred |= hSetErrors;
 80063b6:	8885      	ldrh	r5, [r0, #4]
{
 80063b8:	4604      	mov	r4, r0
  State_t LocalState =  pHandle->bState;
 80063ba:	7800      	ldrb	r0, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80063bc:	ea23 0202 	bic.w	r2, r3, r2
  pHandle->hFaultOccurred |= hSetErrors;
 80063c0:	4329      	orrs	r1, r5
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80063c2:	b292      	uxth	r2, r2
  if ( LocalState == FAULT_NOW )
 80063c4:	280a      	cmp	r0, #10
  pHandle->hFaultOccurred |= hSetErrors;
 80063c6:	80a1      	strh	r1, [r4, #4]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80063c8:	8062      	strh	r2, [r4, #2]
  if ( LocalState == FAULT_NOW )
 80063ca:	d004      	beq.n	80063d6 <STM_FaultProcessing+0x26>
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 80063cc:	b10a      	cbz	r2, 80063d2 <STM_FaultProcessing+0x22>
      pHandle->bState = FAULT_NOW;
 80063ce:	200a      	movs	r0, #10
 80063d0:	7020      	strb	r0, [r4, #0]
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 80063d2:	bc30      	pop	{r4, r5}
 80063d4:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 80063d6:	2a00      	cmp	r2, #0
 80063d8:	d1fb      	bne.n	80063d2 <STM_FaultProcessing+0x22>
      pHandle->bState = FAULT_OVER;
 80063da:	200b      	movs	r0, #11
 80063dc:	7020      	strb	r0, [r4, #0]
}
 80063de:	bc30      	pop	{r4, r5}
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop

080063e4 <STM_GetState>:
  * @retval State_t Current state machine state
  */
State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 80063e4:	7800      	ldrb	r0, [r0, #0]
 80063e6:	4770      	bx	lr

080063e8 <STM_FaultAcknowledged>:
  */
bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 80063e8:	7803      	ldrb	r3, [r0, #0]
 80063ea:	2b0b      	cmp	r3, #11
 80063ec:	d001      	beq.n	80063f2 <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 80063ee:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 80063f0:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 80063f2:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 80063f4:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 80063f6:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 80063f8:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 80063fa:	2001      	movs	r0, #1
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop

08006400 <STM_GetFaultState>:
  */
uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 8006400:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 8006402:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 8006404:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop

0800640c <UFCP_Init>:

void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 800640c:	f7fe b920 	b.w	8004650 <FCP_Init>

08006410 <UFCP_RX_IRQ_Handler>:
{
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;
  uint8_t error_code;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8006410:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8006414:	b1bb      	cbz	r3, 8006446 <UFCP_RX_IRQ_Handler+0x36>
{
 8006416:	b570      	push	{r4, r5, r6, lr}
  {
    uint8_t rx_byte = (uint8_t) rx_data;

    switch ( pBaseHandle->RxFrameLevel )
 8006418:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
 800641c:	4604      	mov	r4, r0
    uint8_t rx_byte = (uint8_t) rx_data;
 800641e:	b2c9      	uxtb	r1, r1
    switch ( pBaseHandle->RxFrameLevel )
 8006420:	b143      	cbz	r3, 8006434 <UFCP_RX_IRQ_Handler+0x24>
 8006422:	2b01      	cmp	r3, #1
 8006424:	d111      	bne.n	800644a <UFCP_RX_IRQ_Handler+0x3a>
        pBaseHandle->RxFrameLevel++;
        break;

      case 1: // Second Byte received --> Size of the payload
        pBaseHandle->RxFrame.Size = rx_byte;
        pBaseHandle->RxFrameLevel++;
 8006426:	2302      	movs	r3, #2
        pBaseHandle->RxFrame.Size = rx_byte;
 8006428:	f880 109a 	strb.w	r1, [r0, #154]	; 0x9a
        pBaseHandle->RxFrameLevel++;
 800642c:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8006430:	482a      	ldr	r0, [pc, #168]	; (80064dc <UFCP_RX_IRQ_Handler+0xcc>)
        break;
 8006432:	bd70      	pop	{r4, r5, r6, pc}
        pBaseHandle->RxFrameLevel++;
 8006434:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8006436:	8a00      	ldrh	r0, [r0, #16]
        pBaseHandle->RxFrame.Code = rx_byte;
 8006438:	f884 1099 	strb.w	r1, [r4, #153]	; 0x99
        pBaseHandle->RxFrameLevel++;
 800643c:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8006440:	8260      	strh	r0, [r4, #18]
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 8006442:	4827      	ldr	r0, [pc, #156]	; (80064e0 <UFCP_RX_IRQ_Handler+0xd0>)
        break;
 8006444:	bd70      	pop	{r4, r5, r6, pc}
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8006446:	4825      	ldr	r0, [pc, #148]	; (80064dc <UFCP_RX_IRQ_Handler+0xcc>)
 8006448:	4770      	bx	lr

      default: // In the payload or the "CRC"
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 800644a:	f890 009a 	ldrb.w	r0, [r0, #154]	; 0x9a
 800644e:	3001      	adds	r0, #1
 8006450:	4283      	cmp	r3, r0
 8006452:	dc07      	bgt.n	8006464 <UFCP_RX_IRQ_Handler+0x54>
        {
          // read byte is for the payload
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8006454:	18e0      	adds	r0, r4, r3
          pBaseHandle->RxFrameLevel++;
 8006456:	3301      	adds	r3, #1
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8006458:	f880 1099 	strb.w	r1, [r0, #153]	; 0x99
          pBaseHandle->RxFrameLevel++;
 800645c:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8006460:	481e      	ldr	r0, [pc, #120]	; (80064dc <UFCP_RX_IRQ_Handler+0xcc>)
 8006462:	bd70      	pop	{r4, r5, r6, pc}
          ret_val = (void *) & UFCP_Usart_Timeout_stop;

          /* Stop Rx Timeout */
          pBaseHandle->RxTimeoutCountdown = 0;
          /* Disable the reception IRQ */
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 8006464:	f8d4 5120 	ldr.w	r5, [r4, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 8006468:	f884 111b 	strb.w	r1, [r4, #283]	; 0x11b
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800646c:	68eb      	ldr	r3, [r5, #12]
          pBaseHandle->RxTimeoutCountdown = 0;
 800646e:	2200      	movs	r2, #0
 8006470:	f023 0320 	bic.w	r3, r3, #32
 8006474:	8262      	strh	r2, [r4, #18]
          /* Indicate the reception is complete. */
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;

          /* Check the Control Sum */
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8006476:	f104 0099 	add.w	r0, r4, #153	; 0x99
 800647a:	60eb      	str	r3, [r5, #12]
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800647c:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8006480:	f7fe f902 	bl	8004688 <FCP_CalcCRC>
 8006484:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 8006488:	4283      	cmp	r3, r0
 800648a:	d01c      	beq.n	80064c6 <UFCP_RX_IRQ_Handler+0xb6>

uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 800648c:	f894 5097 	ldrb.w	r5, [r4, #151]	; 0x97
 8006490:	b10d      	cbz	r5, 8006496 <UFCP_RX_IRQ_Handler+0x86>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8006492:	4814      	ldr	r0, [pc, #80]	; (80064e4 <UFCP_RX_IRQ_Handler+0xd4>)
}
 8006494:	bd70      	pop	{r4, r5, r6, pc}
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
    uint8_t *dest = pHandle->TxFrame.Buffer;

    pHandle->TxFrame.Code = code;
 8006496:	22ff      	movs	r2, #255	; 0xff
    pHandle->TxFrame.Size = size;
 8006498:	2601      	movs	r6, #1
    while ( size-- ) *dest++ = *buffer++;
 800649a:	230a      	movs	r3, #10
    pHandle->TxFrame.Code = code;
 800649c:	7522      	strb	r2, [r4, #20]
    while ( size-- ) *dest++ = *buffer++;
 800649e:	75a3      	strb	r3, [r4, #22]
    pHandle->TxFrame.Size = size;
 80064a0:	7566      	strb	r6, [r4, #21]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 80064a2:	f104 0014 	add.w	r0, r4, #20
 80064a6:	f7fe f8ef 	bl	8004688 <FCP_CalcCRC>

    pHandle->TxFrameLevel = 0;
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;

    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 80064aa:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 80064ae:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameLevel = 0;
 80064b2:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80064b6:	68d3      	ldr	r3, [r2, #12]
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 80064b8:	480a      	ldr	r0, [pc, #40]	; (80064e4 <UFCP_RX_IRQ_Handler+0xd4>)
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 80064ba:	f884 6097 	strb.w	r6, [r4, #151]	; 0x97
 80064be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064c2:	60d3      	str	r3, [r2, #12]
 80064c4:	bd70      	pop	{r4, r5, r6, pc}
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 80064c6:	6820      	ldr	r0, [r4, #0]
 80064c8:	68a5      	ldr	r5, [r4, #8]
 80064ca:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 80064ce:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 80064d2:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 80064d6:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 80064d8:	4802      	ldr	r0, [pc, #8]	; (80064e4 <UFCP_RX_IRQ_Handler+0xd4>)
 80064da:	bd70      	pop	{r4, r5, r6, pc}
 80064dc:	080073d8 	.word	0x080073d8
 80064e0:	080073da 	.word	0x080073da
 80064e4:	080073dc 	.word	0x080073dc

080064e8 <UFCP_TX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 80064e8:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
 80064ec:	b16a      	cbz	r2, 800650a <UFCP_TX_IRQ_Handler+0x22>
    switch ( pBaseHandle->TxFrameLevel )
 80064ee:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
 80064f2:	4603      	mov	r3, r0
 80064f4:	b152      	cbz	r2, 800650c <UFCP_TX_IRQ_Handler+0x24>
 80064f6:	2a01      	cmp	r2, #1
 80064f8:	d10a      	bne.n	8006510 <UFCP_TX_IRQ_Handler+0x28>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 80064fa:	7d40      	ldrb	r0, [r0, #21]
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 80064fc:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
      pBaseHandle->TxFrameLevel++;
 8006500:	3201      	adds	r2, #1
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8006502:	6048      	str	r0, [r1, #4]
 8006504:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
 8006508:	4770      	bx	lr
 800650a:	4770      	bx	lr
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 800650c:	7d00      	ldrb	r0, [r0, #20]
        break;
 800650e:	e7f5      	b.n	80064fc <UFCP_TX_IRQ_Handler+0x14>
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8006510:	7d41      	ldrb	r1, [r0, #21]
 8006512:	3101      	adds	r1, #1
 8006514:	428a      	cmp	r2, r1
 8006516:	dc08      	bgt.n	800652a <UFCP_TX_IRQ_Handler+0x42>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 8006518:	1881      	adds	r1, r0, r2
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 800651a:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
 800651e:	7d09      	ldrb	r1, [r1, #20]
 8006520:	6041      	str	r1, [r0, #4]
      pBaseHandle->TxFrameLevel++;
 8006522:	3201      	adds	r2, #1
 8006524:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
 8006528:	4770      	bx	lr
{
 800652a:	b430      	push	{r4, r5}
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 800652c:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
 8006530:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
 8006534:	6051      	str	r1, [r2, #4]
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8006536:	c811      	ldmia	r0, {r0, r4}
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8006538:	68d1      	ldr	r1, [r2, #12]
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 800653a:	2500      	movs	r5, #0
 800653c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006540:	60d1      	str	r1, [r2, #12]
 8006542:	f883 5097 	strb.w	r5, [r3, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8006546:	4623      	mov	r3, r4
}
 8006548:	bc30      	pop	{r4, r5}
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800654a:	4718      	bx	r3

0800654c <UFCP_OVR_IRQ_Handler>:
{
 800654c:	b570      	push	{r4, r5, r6, lr}
  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 800654e:	f890 5097 	ldrb.w	r5, [r0, #151]	; 0x97
 8006552:	b9ad      	cbnz	r5, 8006580 <UFCP_OVR_IRQ_Handler+0x34>
    pHandle->TxFrame.Code = code;
 8006554:	22ff      	movs	r2, #255	; 0xff
    while ( size-- ) *dest++ = *buffer++;
 8006556:	2308      	movs	r3, #8
    pHandle->TxFrame.Size = size;
 8006558:	2601      	movs	r6, #1
 800655a:	4604      	mov	r4, r0
    pHandle->TxFrame.Code = code;
 800655c:	7502      	strb	r2, [r0, #20]
    while ( size-- ) *dest++ = *buffer++;
 800655e:	7583      	strb	r3, [r0, #22]
    pHandle->TxFrame.Size = size;
 8006560:	7546      	strb	r6, [r0, #21]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8006562:	3014      	adds	r0, #20
 8006564:	f7fe f890 	bl	8004688 <FCP_CalcCRC>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 8006568:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 800656c:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameLevel = 0;
 8006570:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8006574:	68d3      	ldr	r3, [r2, #12]
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8006576:	f884 6097 	strb.w	r6, [r4, #151]	; 0x97
 800657a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800657e:	60d3      	str	r3, [r2, #12]
 8006580:	bd70      	pop	{r4, r5, r6, pc}
 8006582:	bf00      	nop

08006584 <UFCP_Receive>:
  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8006584:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8006588:	b963      	cbnz	r3, 80065a4 <UFCP_Receive+0x20>
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 800658a:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
    pHandle->RxFrameLevel = 0;
 800658e:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8006592:	68d3      	ldr	r3, [r2, #12]
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8006594:	2101      	movs	r1, #1
 8006596:	f043 0320 	orr.w	r3, r3, #32
 800659a:	f880 111c 	strb.w	r1, [r0, #284]	; 0x11c
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 800659e:	2002      	movs	r0, #2
 80065a0:	60d3      	str	r3, [r2, #12]
 80065a2:	4770      	bx	lr
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 80065a4:	2001      	movs	r0, #1
}
 80065a6:	4770      	bx	lr

080065a8 <UFCP_Send>:
{
 80065a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065ac:	4604      	mov	r4, r0
  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 80065ae:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 80065b2:	2800      	cmp	r0, #0
 80065b4:	d175      	bne.n	80066a2 <UFCP_Send+0xfa>
    while ( size-- ) *dest++ = *buffer++;
 80065b6:	1e58      	subs	r0, r3, #1
    pHandle->TxFrame.Code = code;
 80065b8:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 80065ba:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 80065bc:	b2c1      	uxtb	r1, r0
    uint8_t *dest = pHandle->TxFrame.Buffer;
 80065be:	f104 0016 	add.w	r0, r4, #22
    while ( size-- ) *dest++ = *buffer++;
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d058      	beq.n	8006678 <UFCP_Send+0xd0>
 80065c6:	1d15      	adds	r5, r2, #4
 80065c8:	f104 061a 	add.w	r6, r4, #26
 80065cc:	4296      	cmp	r6, r2
 80065ce:	bf88      	it	hi
 80065d0:	4285      	cmphi	r5, r0
 80065d2:	d869      	bhi.n	80066a8 <UFCP_Send+0x100>
 80065d4:	2b0b      	cmp	r3, #11
 80065d6:	d967      	bls.n	80066a8 <UFCP_Send+0x100>
 80065d8:	f1c2 0c00 	rsb	ip, r2, #0
 80065dc:	f01c 0c03 	ands.w	ip, ip, #3
 80065e0:	d06c      	beq.n	80066bc <UFCP_Send+0x114>
 80065e2:	7810      	ldrb	r0, [r2, #0]
 80065e4:	75a0      	strb	r0, [r4, #22]
 80065e6:	1e9d      	subs	r5, r3, #2
 80065e8:	f1bc 0f01 	cmp.w	ip, #1
 80065ec:	b2ed      	uxtb	r5, r5
 80065ee:	f104 0017 	add.w	r0, r4, #23
 80065f2:	f102 0601 	add.w	r6, r2, #1
 80065f6:	d011      	beq.n	800661c <UFCP_Send+0x74>
 80065f8:	7850      	ldrb	r0, [r2, #1]
 80065fa:	75e0      	strb	r0, [r4, #23]
 80065fc:	1edd      	subs	r5, r3, #3
 80065fe:	f1bc 0f03 	cmp.w	ip, #3
 8006602:	b2ed      	uxtb	r5, r5
 8006604:	f104 0018 	add.w	r0, r4, #24
 8006608:	f102 0602 	add.w	r6, r2, #2
 800660c:	d106      	bne.n	800661c <UFCP_Send+0x74>
 800660e:	7890      	ldrb	r0, [r2, #2]
 8006610:	7620      	strb	r0, [r4, #24]
 8006612:	1f1d      	subs	r5, r3, #4
 8006614:	b2ed      	uxtb	r5, r5
 8006616:	f104 0019 	add.w	r0, r4, #25
 800661a:	1cd6      	adds	r6, r2, #3
 800661c:	eba3 030c 	sub.w	r3, r3, ip
 8006620:	b2db      	uxtb	r3, r3
 8006622:	f1a3 0804 	sub.w	r8, r3, #4
 8006626:	f3c8 0885 	ubfx	r8, r8, #2, #6
 800662a:	eba1 010c 	sub.w	r1, r1, ip
 800662e:	f108 0801 	add.w	r8, r8, #1
 8006632:	b2c9      	uxtb	r1, r1
 8006634:	ea4f 0788 	mov.w	r7, r8, lsl #2
 8006638:	2902      	cmp	r1, #2
 800663a:	b2ff      	uxtb	r7, r7
 800663c:	d913      	bls.n	8006666 <UFCP_Send+0xbe>
 800663e:	f10c 0e16 	add.w	lr, ip, #22
 8006642:	4462      	add	r2, ip
 8006644:	44a6      	add	lr, r4
 8006646:	2100      	movs	r1, #0
 8006648:	3101      	adds	r1, #1
 800664a:	fa5f fc81 	uxtb.w	ip, r1
 800664e:	f852 9b04 	ldr.w	r9, [r2], #4
 8006652:	f84e 9b04 	str.w	r9, [lr], #4
 8006656:	45e0      	cmp	r8, ip
 8006658:	d8f6      	bhi.n	8006648 <UFCP_Send+0xa0>
 800665a:	1bed      	subs	r5, r5, r7
 800665c:	42bb      	cmp	r3, r7
 800665e:	b2ed      	uxtb	r5, r5
 8006660:	4438      	add	r0, r7
 8006662:	443e      	add	r6, r7
 8006664:	d008      	beq.n	8006678 <UFCP_Send+0xd0>
 8006666:	7833      	ldrb	r3, [r6, #0]
 8006668:	7003      	strb	r3, [r0, #0]
 800666a:	b12d      	cbz	r5, 8006678 <UFCP_Send+0xd0>
 800666c:	7873      	ldrb	r3, [r6, #1]
 800666e:	7043      	strb	r3, [r0, #1]
 8006670:	2d01      	cmp	r5, #1
 8006672:	d001      	beq.n	8006678 <UFCP_Send+0xd0>
 8006674:	78b3      	ldrb	r3, [r6, #2]
 8006676:	7083      	strb	r3, [r0, #2]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8006678:	f104 0014 	add.w	r0, r4, #20
 800667c:	f7fe f804 	bl	8004688 <FCP_CalcCRC>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 8006680:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8006684:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameLevel = 0;
 8006688:	2300      	movs	r3, #0
 800668a:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800668e:	68d3      	ldr	r3, [r2, #12]
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8006690:	2101      	movs	r1, #1
 8006692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006696:	f884 1097 	strb.w	r1, [r4, #151]	; 0x97
 800669a:	2002      	movs	r0, #2
 800669c:	60d3      	str	r3, [r2, #12]
 800669e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 80066a2:	2001      	movs	r0, #1
  }

  return ret_val;
}
 80066a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066a8:	1843      	adds	r3, r0, r1
 80066aa:	f104 0115 	add.w	r1, r4, #21
    while ( size-- ) *dest++ = *buffer++;
 80066ae:	f812 0b01 	ldrb.w	r0, [r2], #1
 80066b2:	f801 0f01 	strb.w	r0, [r1, #1]!
 80066b6:	4299      	cmp	r1, r3
 80066b8:	d1f9      	bne.n	80066ae <UFCP_Send+0x106>
 80066ba:	e7dd      	b.n	8006678 <UFCP_Send+0xd0>
 80066bc:	460d      	mov	r5, r1
 80066be:	4616      	mov	r6, r2
 80066c0:	e7ac      	b.n	800661c <UFCP_Send+0x74>
 80066c2:	bf00      	nop

080066c4 <UFCP_AbortReceive>:

void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 80066c4:	2300      	movs	r3, #0
 80066c6:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
 80066ca:	4770      	bx	lr

080066cc <VSS_Init>:
 80066cc:	2300      	movs	r3, #0
 80066ce:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
 80066d0:	84c2      	strh	r2, [r0, #38]	; 0x26
 80066d2:	7283      	strb	r3, [r0, #10]
 80066d4:	8003      	strh	r3, [r0, #0]
 80066d6:	8043      	strh	r3, [r0, #2]
 80066d8:	8083      	strh	r3, [r0, #4]
 80066da:	80c3      	strh	r3, [r0, #6]
 80066dc:	8103      	strh	r3, [r0, #8]
 80066de:	6183      	str	r3, [r0, #24]
 80066e0:	61c3      	str	r3, [r0, #28]
 80066e2:	8403      	strh	r3, [r0, #32]
 80066e4:	8503      	strh	r3, [r0, #40]	; 0x28
 80066e6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 80066ea:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 80066ee:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
 80066f2:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
 80066f6:	4770      	bx	lr

080066f8 <VSS_Clear>:
* @retval none
*/
void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{

  pHandle->_Super.bSpeedErrorNumber = 0u;
 80066f8:	2300      	movs	r3, #0
  pHandle->hRemainingStep = 0u;
  pHandle->hElAngleAccu = 0;

  pHandle->bTransitionStarted = false;
  pHandle->bTransitionEnded = false;
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 80066fa:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
 80066fc:	84c2      	strh	r2, [r0, #38]	; 0x26
  pHandle->_Super.bSpeedErrorNumber = 0u;
 80066fe:	7283      	strb	r3, [r0, #10]
  pHandle->_Super.hElAngle = 0;
 8006700:	8003      	strh	r3, [r0, #0]
  pHandle->_Super.hMecAngle = 0;
 8006702:	8043      	strh	r3, [r0, #2]
  pHandle->_Super.hAvrMecSpeed01Hz = 0;
 8006704:	8083      	strh	r3, [r0, #4]
  pHandle->_Super.hElSpeedDpp = 0;
 8006706:	80c3      	strh	r3, [r0, #6]
  pHandle->_Super.hMecAccel01HzP = 0;
 8006708:	8103      	strh	r3, [r0, #8]
  pHandle->wElAccDppP32 = 0;
 800670a:	6183      	str	r3, [r0, #24]
  pHandle->wElSpeedDpp32 = 0;
 800670c:	61c3      	str	r3, [r0, #28]
  pHandle->hRemainingStep = 0u;
 800670e:	8403      	strh	r3, [r0, #32]
  pHandle->hElAngleAccu = 0;
 8006710:	8503      	strh	r3, [r0, #40]	; 0x28
  pHandle->bTransitionStarted = false;
 8006712:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  pHandle->bTransitionEnded = false;
 8006716:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  pHandle->bTransitionLocked = false;
 800671a:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a

  pHandle->bCopyObserver = false;
 800671e:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
 8006722:	4770      	bx	lr

08006724 <VSS_CalcElAngle>:
  int16_t hAngleDiff;
  int16_t hAngleCorr;
  int32_t wAux;
  int16_t hSignCorr = 1;

  if ( pHandle->bCopyObserver == true )
 8006724:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
{
 8006728:	4603      	mov	r3, r0
  if ( pHandle->bCopyObserver == true )
 800672a:	bb7a      	cbnz	r2, 800678c <VSS_CalcElAngle+0x68>
{
 800672c:	b4f0      	push	{r4, r5, r6, r7}
  {
    hRetAngle = *( int16_t * )pInputVars_str;
  }
  else
  {
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800672e:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 8006730:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
#ifdef FASTDIV
    pHandle->_Super.hMecAngle += ( int16_t )( FD_FastDiv( &( pHandle->fd ),
                                 ( int32_t )pHandle->_Super.hElSpeedDpp,
                                 ( int32_t )pHandle->_Super.bElToMecRatio ) );
#else
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8006734:	8847      	ldrh	r7, [r0, #2]
                                 ( int16_t )pHandle->_Super.bElToMecRatio;
#endif

    if ( pHandle->bTransitionStarted == true )
 8006736:	f890 6024 	ldrb.w	r6, [r0, #36]	; 0x24
                                 ( int16_t )pHandle->_Super.bElToMecRatio;
 800673a:	7ac4      	ldrb	r4, [r0, #11]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 800673c:	fb95 f4f4 	sdiv	r4, r5, r4
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8006740:	442a      	add	r2, r5
 8006742:	b292      	uxth	r2, r2
 8006744:	b210      	sxth	r0, r2
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8006746:	443c      	add	r4, r7
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8006748:	8518      	strh	r0, [r3, #40]	; 0x28
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 800674a:	805c      	strh	r4, [r3, #2]
    if ( pHandle->bTransitionStarted == true )
 800674c:	b1de      	cbz	r6, 8006786 <VSS_CalcElAngle+0x62>
    {
      if ( pHandle->hTransitionRemainingSteps == 0 )
 800674e:	f9b3 4026 	ldrsh.w	r4, [r3, #38]	; 0x26
 8006752:	b324      	cbz	r4, 800679e <VSS_CalcElAngle+0x7a>
        pHandle->bTransitionEnded = true;
        pHandle->_Super.bSpeedErrorNumber = 0u;
      }
      else
      {
        pHandle->hTransitionRemainingSteps--;
 8006754:	3c01      	subs	r4, #1
 8006756:	b224      	sxth	r4, r4
 8006758:	84dc      	strh	r4, [r3, #38]	; 0x26

        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 800675a:	2d00      	cmp	r5, #0
        {
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 800675c:	8809      	ldrh	r1, [r1, #0]
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 800675e:	db19      	blt.n	8006794 <VSS_CalcElAngle+0x70>
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 8006760:	1a8a      	subs	r2, r1, r2
 8006762:	b212      	sxth	r2, r2
 8006764:	2601      	movs	r6, #1
        {
          hAngleDiff = pHandle->hElAngleAccu - *( int16_t * )pInputVars_str;
          hSignCorr = -1;
        }

        wAux = ( int32_t )hAngleDiff * pHandle->hTransitionRemainingSteps;
 8006766:	fb02 f404 	mul.w	r4, r2, r4
#ifdef FASTDIV
        hAngleCorr = ( int16_t )( FD_FastDiv( &( pHandle->fd ),
                                              wAux,
                                              ( int32_t )( pHandle->hTransitionSteps ) ) );
#else
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 800676a:	f9b3 502e 	ldrsh.w	r5, [r3, #46]	; 0x2e
 800676e:	fb94 f4f5 	sdiv	r4, r4, r5
#endif

        hAngleCorr *= hSignCorr;

        if ( hAngleDiff >= 0 )
 8006772:	2a00      	cmp	r2, #0
        hAngleCorr *= hSignCorr;
 8006774:	fb14 f406 	smulbb	r4, r4, r6
 8006778:	b2a4      	uxth	r4, r4
        if ( hAngleDiff >= 0 )
 800677a:	db19      	blt.n	80067b0 <VSS_CalcElAngle+0x8c>
        {
          pHandle->bTransitionLocked = true;
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 800677c:	1b0c      	subs	r4, r1, r4
          pHandle->bTransitionLocked = true;
 800677e:	2201      	movs	r2, #1
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 8006780:	b220      	sxth	r0, r4
          pHandle->bTransitionLocked = true;
 8006782:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    {
      hRetAngle = pHandle->hElAngleAccu;
    }
  }

  pHandle->_Super.hElAngle = hRetAngle;
 8006786:	8018      	strh	r0, [r3, #0]
  return hRetAngle;
}
 8006788:	bcf0      	pop	{r4, r5, r6, r7}
 800678a:	4770      	bx	lr
    hRetAngle = *( int16_t * )pInputVars_str;
 800678c:	f9b1 0000 	ldrsh.w	r0, [r1]
  pHandle->_Super.hElAngle = hRetAngle;
 8006790:	8018      	strh	r0, [r3, #0]
}
 8006792:	4770      	bx	lr
          hAngleDiff = pHandle->hElAngleAccu - *( int16_t * )pInputVars_str;
 8006794:	1a52      	subs	r2, r2, r1
 8006796:	b212      	sxth	r2, r2
 8006798:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800679c:	e7e3      	b.n	8006766 <VSS_CalcElAngle+0x42>
        hRetAngle = *( int16_t * )pInputVars_str;
 800679e:	f9b1 0000 	ldrsh.w	r0, [r1]
        pHandle->_Super.bSpeedErrorNumber = 0u;
 80067a2:	729c      	strb	r4, [r3, #10]
        pHandle->bTransitionEnded = true;
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pHandle->_Super.hElAngle = hRetAngle;
 80067aa:	8018      	strh	r0, [r3, #0]
}
 80067ac:	bcf0      	pop	{r4, r5, r6, r7}
 80067ae:	4770      	bx	lr
          if ( pHandle->bTransitionLocked == false )
 80067b0:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80067b4:	2a00      	cmp	r2, #0
 80067b6:	d0e6      	beq.n	8006786 <VSS_CalcElAngle+0x62>
            hRetAngle = *( int16_t * )pInputVars_str + hAngleCorr;
 80067b8:	440c      	add	r4, r1
 80067ba:	b220      	sxth	r0, r4
 80067bc:	e7e3      	b.n	8006786 <VSS_CalcElAngle+0x62>
 80067be:	bf00      	nop

080067c0 <VSS_CalcAvrgMecSpeed01Hz>:
  */
bool VSS_CalcAvrgMecSpeed01Hz( VirtualSpeedSensor_Handle_t * pHandle, int16_t * hMecSpeed01Hz )
{
  bool SpeedSensorReliability = false;

  if ( pHandle->hRemainingStep > 1u )
 80067c0:	8c03      	ldrh	r3, [r0, #32]
 80067c2:	2b01      	cmp	r3, #1
{
 80067c4:	b430      	push	{r4, r5}
  if ( pHandle->hRemainingStep > 1u )
 80067c6:	d926      	bls.n	8006816 <VSS_CalcAvrgMecSpeed01Hz+0x56>
  {
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 80067c8:	69c3      	ldr	r3, [r0, #28]
 80067ca:	6982      	ldr	r2, [r0, #24]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );

    /* Convert dpp into Mec01Hz */
    *hMecSpeed01Hz = ( int16_t )( ( pHandle->_Super.hElSpeedDpp *
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * 10 ) /
                                  ( 65536 * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 80067cc:	7ac5      	ldrb	r5, [r0, #11]
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 80067ce:	4413      	add	r3, r2
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 80067d0:	1e1c      	subs	r4, r3, #0
 80067d2:	bfb8      	it	lt
 80067d4:	f504 447f 	addlt.w	r4, r4, #65280	; 0xff00
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * 10 ) /
 80067d8:	8a82      	ldrh	r2, [r0, #20]
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 80067da:	61c3      	str	r3, [r0, #28]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 80067dc:	bfb8      	it	lt
 80067de:	34ff      	addlt	r4, #255	; 0xff
 80067e0:	1424      	asrs	r4, r4, #16
    *hMecSpeed01Hz = ( int16_t )( ( pHandle->_Super.hElSpeedDpp *
 80067e2:	fb04 f202 	mul.w	r2, r4, r2
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * 10 ) /
 80067e6:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 80067ea:	005b      	lsls	r3, r3, #1
                                  ( 65536 * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 80067ec:	042a      	lsls	r2, r5, #16
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * 10 ) /
 80067ee:	fb93 f3f2 	sdiv	r3, r3, r2
    *hMecSpeed01Hz = ( int16_t )( ( pHandle->_Super.hElSpeedDpp *
 80067f2:	b21b      	sxth	r3, r3
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 80067f4:	80c4      	strh	r4, [r0, #6]
    *hMecSpeed01Hz = ( int16_t )( ( pHandle->_Super.hElSpeedDpp *
 80067f6:	800b      	strh	r3, [r1, #0]

    pHandle->_Super.hAvrMecSpeed01Hz = *hMecSpeed01Hz;

    pHandle->hRemainingStep--;
 80067f8:	8c02      	ldrh	r2, [r0, #32]
    pHandle->_Super.hAvrMecSpeed01Hz = *hMecSpeed01Hz;
 80067fa:	8083      	strh	r3, [r0, #4]
    pHandle->hRemainingStep--;
 80067fc:	1e53      	subs	r3, r2, #1
 80067fe:	8403      	strh	r3, [r0, #32]
  else
  {
    *hMecSpeed01Hz = pHandle->_Super.hAvrMecSpeed01Hz;
  }
  /* If the transition is not done yet, we already know that speed is not reliable */
  if ( pHandle->bTransitionEnded == false )
 8006800:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8006804:	b923      	cbnz	r3, 8006810 <VSS_CalcAvrgMecSpeed01Hz+0x50>
  {
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8006806:	7c02      	ldrb	r2, [r0, #16]
 8006808:	7282      	strb	r2, [r0, #10]
  {
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeed01Hz );
  }

  return ( SpeedSensorReliability );
}
 800680a:	bc30      	pop	{r4, r5}
 800680c:	4618      	mov	r0, r3
 800680e:	4770      	bx	lr
 8006810:	bc30      	pop	{r4, r5}
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeed01Hz );
 8006812:	f7ff bc3b 	b.w	800608c <SPD_IsMecSpeedReliable>
  else if ( pHandle->hRemainingStep == 1u )
 8006816:	d003      	beq.n	8006820 <VSS_CalcAvrgMecSpeed01Hz+0x60>
    *hMecSpeed01Hz = pHandle->_Super.hAvrMecSpeed01Hz;
 8006818:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800681c:	800b      	strh	r3, [r1, #0]
 800681e:	e7ef      	b.n	8006800 <VSS_CalcAvrgMecSpeed01Hz+0x40>
    *hMecSpeed01Hz = pHandle->hFinalMecSpeed01Hz;
 8006820:	f9b0 2022 	ldrsh.w	r2, [r0, #34]	; 0x22
 8006824:	800a      	strh	r2, [r1, #0]
                                  ( ( int32_t )10 * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8006826:	8a83      	ldrh	r3, [r0, #20]
    pHandle->_Super.hAvrMecSpeed01Hz = *hMecSpeed01Hz;
 8006828:	8082      	strh	r2, [r0, #4]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeed01Hz ) *
 800682a:	f9b1 2000 	ldrsh.w	r2, [r1]
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800682e:	7ac4      	ldrb	r4, [r0, #11]
                                  ( ( int32_t )10 * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8006830:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006834:	005b      	lsls	r3, r3, #1
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeed01Hz ) *
 8006836:	0412      	lsls	r2, r2, #16
    pHandle->hRemainingStep = 0u;
 8006838:	2500      	movs	r5, #0
                                  ( int32_t )65536 ) /
 800683a:	fb92 f3f3 	sdiv	r3, r2, r3
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800683e:	fb14 f303 	smulbb	r3, r4, r3
 8006842:	80c3      	strh	r3, [r0, #6]
    pHandle->hRemainingStep = 0u;
 8006844:	8405      	strh	r5, [r0, #32]
 8006846:	e7db      	b.n	8006800 <VSS_CalcAvrgMecSpeed01Hz+0x40>

08006848 <VSS_SetMecAngle>:
  * @retval none
  */
void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{

  pHandle->hElAngleAccu = hMecAngle;
 8006848:	8501      	strh	r1, [r0, #40]	; 0x28
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
  pHandle->_Super.hElAngle = hMecAngle;
 800684a:	8001      	strh	r1, [r0, #0]
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 800684c:	7ac3      	ldrb	r3, [r0, #11]
 800684e:	fb91 f1f3 	sdiv	r1, r1, r3
 8006852:	8041      	strh	r1, [r0, #2]
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop

08006858 <VSS_SetMecAcceleration>:
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 8006858:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800685c:	bb1b      	cbnz	r3, 80068a6 <VSS_SetMecAcceleration+0x4e>
{
 800685e:	b4f0      	push	{r4, r5, r6, r7}
  {
    if ( hDurationms == 0u )
 8006860:	b312      	cbz	r2, 80068a8 <VSS_SetMecAcceleration+0x50>
      pHandle->hFinalMecSpeed01Hz = hFinalMecSpeed01Hz;
    }
    else
    {
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8006862:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8006864:	4f18      	ldr	r7, [pc, #96]	; (80068c8 <VSS_SetMecAcceleration+0x70>)

      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
                            ( int16_t )pHandle->_Super.bElToMecRatio;

      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeed01Hz * ( int32_t )65536 ) /
                                       ( ( int32_t )10 * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8006866:	8a85      	ldrh	r5, [r0, #20]
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8006868:	f9b0 6006 	ldrsh.w	r6, [r0, #6]
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 800686c:	7ac4      	ldrb	r4, [r0, #11]
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
                        ( int32_t )65536 ) / ( int32_t )hNbrStep;

      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;

      pHandle->hFinalMecSpeed01Hz = hFinalMecSpeed01Hz;
 800686e:	8441      	strh	r1, [r0, #34]	; 0x22
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8006870:	fb02 f303 	mul.w	r3, r2, r3
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8006874:	fba7 2303 	umull	r2, r3, r7, r3
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8006878:	f3c3 138f 	ubfx	r3, r3, #6, #16
                                       ( ( int32_t )10 * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800687c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeed01Hz * ( int32_t )65536 ) /
 8006880:	0409      	lsls	r1, r1, #16
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8006882:	fb96 f5f4 	sdiv	r5, r6, r4
                                       ( ( int32_t )10 * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8006886:	0052      	lsls	r2, r2, #1
      hNbrStep++;
 8006888:	3301      	adds	r3, #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeed01Hz * ( int32_t )65536 ) /
 800688a:	fb91 f2f2 	sdiv	r2, r1, r2
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 800688e:	1b52      	subs	r2, r2, r5
      hNbrStep++;
 8006890:	b29b      	uxth	r3, r3
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8006892:	0412      	lsls	r2, r2, #16

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8006894:	0436      	lsls	r6, r6, #16
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8006896:	fb92 f2f3 	sdiv	r2, r2, r3
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 800689a:	fb04 f202 	mul.w	r2, r4, r2
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 800689e:	61c6      	str	r6, [r0, #28]
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 80068a0:	6182      	str	r2, [r0, #24]
      pHandle->hRemainingStep = hNbrStep;
 80068a2:	8403      	strh	r3, [r0, #32]
    }
  }
}
 80068a4:	bcf0      	pop	{r4, r5, r6, r7}
 80068a6:	4770      	bx	lr
                                    ( ( int32_t )10 * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 80068a8:	8a83      	ldrh	r3, [r0, #20]
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 80068aa:	7ac4      	ldrb	r4, [r0, #11]
      pHandle->_Super.hAvrMecSpeed01Hz = hFinalMecSpeed01Hz;
 80068ac:	8081      	strh	r1, [r0, #4]
                                    ( ( int32_t )10 * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 80068ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeed01Hz ) *
 80068b2:	040d      	lsls	r5, r1, #16
                                    ( ( int32_t )10 * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 80068b4:	005b      	lsls	r3, r3, #1
                                    ( int32_t )65536 ) /
 80068b6:	fb95 f3f3 	sdiv	r3, r5, r3
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 80068ba:	fb14 f303 	smulbb	r3, r4, r3
      pHandle->hRemainingStep = 0u;
 80068be:	8402      	strh	r2, [r0, #32]
      pHandle->hFinalMecSpeed01Hz = hFinalMecSpeed01Hz;
 80068c0:	8441      	strh	r1, [r0, #34]	; 0x22
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 80068c2:	80c3      	strh	r3, [r0, #6]
 80068c4:	e7ee      	b.n	80068a4 <VSS_SetMecAcceleration+0x4c>
 80068c6:	bf00      	nop
 80068c8:	10624dd3 	.word	0x10624dd3

080068cc <VSS_SetStartTransition>:
            (parameter hTransitionSteps = 0)
  */
bool VSS_SetStartTransition( VirtualSpeedSensor_Handle_t * pHandle, bool bCommand )
{
  bool bAux = true;
  if ( bCommand == true )
 80068cc:	b151      	cbz	r1, 80068e4 <VSS_SetStartTransition+0x18>
  {
    pHandle->bTransitionStarted = true;

    if ( pHandle->hTransitionSteps == 0 )
 80068ce:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
    pHandle->bTransitionStarted = true;
 80068d2:	2201      	movs	r2, #1
 80068d4:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    if ( pHandle->hTransitionSteps == 0 )
 80068d8:	b923      	cbnz	r3, 80068e4 <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionEnded = true;
 80068da:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
      pHandle->_Super.bSpeedErrorNumber = 0u;
 80068de:	7283      	strb	r3, [r0, #10]
      bAux = false;
 80068e0:	4618      	mov	r0, r3
    }
  }
  return bAux;
}
 80068e2:	4770      	bx	lr
  bool bAux = true;
 80068e4:	2001      	movs	r0, #1
 80068e6:	4770      	bx	lr

080068e8 <VSS_TransitionEnded>:
}

bool VSS_TransitionEnded( VirtualSpeedSensor_Handle_t * pHandle )
{
    return pHandle->bTransitionEnded;
}
 80068e8:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop

080068f0 <STO_PLL_Init>:
 80068f0:	b570      	push	{r4, r5, r6, lr}
 80068f2:	4604      	mov	r4, r0
 80068f4:	2101      	movs	r1, #1
 80068f6:	f890 010e 	ldrb.w	r0, [r0, #270]	; 0x10e
 80068fa:	f9b4 5024 	ldrsh.w	r5, [r4, #36]	; 0x24
 80068fe:	4b2b      	ldr	r3, [pc, #172]	; (80069ac <STO_PLL_Init+0xbc>)
 8006900:	fb93 f3f5 	sdiv	r3, r3, r5
 8006904:	2200      	movs	r2, #0
 8006906:	b21b      	sxth	r3, r3
 8006908:	f884 00ee 	strb.w	r0, [r4, #238]	; 0xee
 800690c:	8522      	strh	r2, [r4, #40]	; 0x28
 800690e:	f884 10fc 	strb.w	r1, [r4, #252]	; 0xfc
 8006912:	4608      	mov	r0, r1
 8006914:	b90b      	cbnz	r3, 800691a <STO_PLL_Init+0x2a>
 8006916:	e00b      	b.n	8006930 <STO_PLL_Init+0x40>
 8006918:	4611      	mov	r1, r2
 800691a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800691e:	1c4a      	adds	r2, r1, #1
 8006920:	105b      	asrs	r3, r3, #1
 8006922:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8006926:	b292      	uxth	r2, r2
 8006928:	d1f6      	bne.n	8006918 <STO_PLL_Init+0x28>
 800692a:	b200      	sxth	r0, r0
 800692c:	8521      	strh	r1, [r4, #40]	; 0x28
 800692e:	4601      	mov	r1, r0
 8006930:	4e1f      	ldr	r6, [pc, #124]	; (80069b0 <STO_PLL_Init+0xc0>)
 8006932:	84e0      	strh	r0, [r4, #38]	; 0x26
 8006934:	fb01 f305 	mul.w	r3, r1, r5
 8006938:	fb86 0103 	smull	r0, r1, r6, r3
 800693c:	f894 2106 	ldrb.w	r2, [r4, #262]	; 0x106
 8006940:	17db      	asrs	r3, r3, #31
 8006942:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 8006946:	2100      	movs	r1, #0
 8006948:	8423      	strh	r3, [r4, #32]
 800694a:	65a1      	str	r1, [r4, #88]	; 0x58
 800694c:	65e1      	str	r1, [r4, #92]	; 0x5c
 800694e:	6621      	str	r1, [r4, #96]	; 0x60
 8006950:	6661      	str	r1, [r4, #100]	; 0x64
 8006952:	8021      	strh	r1, [r4, #0]
 8006954:	80e1      	strh	r1, [r4, #6]
 8006956:	f884 10ee 	strb.w	r1, [r4, #238]	; 0xee
 800695a:	f884 10ef 	strb.w	r1, [r4, #239]	; 0xef
 800695e:	f884 10f0 	strb.w	r1, [r4, #240]	; 0xf0
 8006962:	f884 10f1 	strb.w	r1, [r4, #241]	; 0xf1
 8006966:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
 800696a:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
 800696e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006972:	f884 111a 	strb.w	r1, [r4, #282]	; 0x11a
 8006976:	f884 111b 	strb.w	r1, [r4, #283]	; 0x11b
 800697a:	b13a      	cbz	r2, 800698c <STO_PLL_Init+0x9c>
 800697c:	3a01      	subs	r2, #1
 800697e:	b2d2      	uxtb	r2, r2
 8006980:	3201      	adds	r2, #1
 8006982:	0052      	lsls	r2, r2, #1
 8006984:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8006988:	f000 fbdc 	bl	8007144 <memset>
 800698c:	2500      	movs	r5, #0
 800698e:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8006992:	4629      	mov	r1, r5
 8006994:	4630      	mov	r0, r6
 8006996:	f884 50ec 	strb.w	r5, [r4, #236]	; 0xec
 800699a:	f8a4 5104 	strh.w	r5, [r4, #260]	; 0x104
 800699e:	f7fe f963 	bl	8004c68 <PID_SetIntegralTerm>
 80069a2:	4630      	mov	r0, r6
 80069a4:	f7fe f94c 	bl	8004c40 <PID_HandleInit>
 80069a8:	8125      	strh	r5, [r4, #8]
 80069aa:	bd70      	pop	{r4, r5, r6, pc}
 80069ac:	000fea5e 	.word	0x000fea5e
 80069b0:	06488dc5 	.word	0x06488dc5

080069b4 <STO_PLL_CalcElAngle>:
 80069b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b8:	f9b0 3024 	ldrsh.w	r3, [r0, #36]	; 0x24
 80069bc:	f8d0 e060 	ldr.w	lr, [r0, #96]	; 0x60
 80069c0:	03dd      	lsls	r5, r3, #15
 80069c2:	1aea      	subs	r2, r5, r3
 80069c4:	4596      	cmp	lr, r2
 80069c6:	b089      	sub	sp, #36	; 0x24
 80069c8:	4604      	mov	r4, r0
 80069ca:	f340 80c3 	ble.w	8006b54 <STO_PLL_CalcElAngle+0x1a0>
 80069ce:	6602      	str	r2, [r0, #96]	; 0x60
 80069d0:	4696      	mov	lr, r2
 80069d2:	f8b4 0116 	ldrh.w	r0, [r4, #278]	; 0x116
 80069d6:	6e67      	ldr	r7, [r4, #100]	; 0x64
 80069d8:	fa4e f600 	asr.w	r6, lr, r0
 80069dc:	9603      	str	r6, [sp, #12]
 80069de:	42ba      	cmp	r2, r7
 80069e0:	b236      	sxth	r6, r6
 80069e2:	9601      	str	r6, [sp, #4]
 80069e4:	f280 80c8 	bge.w	8006b78 <STO_PLL_CalcElAngle+0x1c4>
 80069e8:	6662      	str	r2, [r4, #100]	; 0x64
 80069ea:	4617      	mov	r7, r2
 80069ec:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 80069f0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80069f2:	fa47 f000 	asr.w	r0, r7, r0
 80069f6:	03de      	lsls	r6, r3, #15
 80069f8:	4605      	mov	r5, r0
 80069fa:	9004      	str	r0, [sp, #16]
 80069fc:	1af0      	subs	r0, r6, r3
 80069fe:	b22d      	sxth	r5, r5
 8006a00:	4282      	cmp	r2, r0
 8006a02:	9502      	str	r5, [sp, #8]
 8006a04:	f340 80b2 	ble.w	8006b6c <STO_PLL_CalcElAngle+0x1b8>
 8006a08:	65a0      	str	r0, [r4, #88]	; 0x58
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 8006a0e:	42a8      	cmp	r0, r5
 8006a10:	f280 80a6 	bge.w	8006b60 <STO_PLL_CalcElAngle+0x1ac>
 8006a14:	65e0      	str	r0, [r4, #92]	; 0x5c
 8006a16:	4605      	mov	r5, r0
 8006a18:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
 8006a1c:	8888      	ldrh	r0, [r1, #4]
 8006a1e:	f9b4 c016 	ldrsh.w	ip, [r4, #22]
 8006a22:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8006a26:	f8b1 8008 	ldrh.w	r8, [r1, #8]
 8006a2a:	f8b1 9006 	ldrh.w	r9, [r1, #6]
 8006a2e:	f9b1 b000 	ldrsh.w	fp, [r1]
 8006a32:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8006a36:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
 8006a3a:	fa42 f603 	asr.w	r6, r2, r3
 8006a3e:	fa45 f303 	asr.w	r3, r5, r3
 8006a42:	f9b4 a018 	ldrsh.w	sl, [r4, #24]
 8006a46:	1a30      	subs	r0, r6, r0
 8006a48:	fb16 f60c 	smulbb	r6, r6, ip
 8006a4c:	fb13 fc0c 	smulbb	ip, r3, ip
 8006a50:	b200      	sxth	r0, r0
 8006a52:	eba5 0c0c 	sub.w	ip, r5, ip
 8006a56:	1b92      	subs	r2, r2, r6
 8006a58:	fb08 f50b 	mul.w	r5, r8, fp
 8006a5c:	f9b4 b01e 	ldrsh.w	fp, [r4, #30]
 8006a60:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 8006a62:	fb0a 2200 	mla	r2, sl, r0, r2
 8006a66:	142d      	asrs	r5, r5, #16
 8006a68:	fb0b 2205 	mla	r2, fp, r5, r2
 8006a6c:	eba3 0309 	sub.w	r3, r3, r9
 8006a70:	9205      	str	r2, [sp, #20]
 8006a72:	9d02      	ldr	r5, [sp, #8]
 8006a74:	9a01      	ldr	r2, [sp, #4]
 8006a76:	f8bd 9008 	ldrh.w	r9, [sp, #8]
 8006a7a:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
 8006a7e:	b21b      	sxth	r3, r3
 8006a80:	fb08 f101 	mul.w	r1, r8, r1
 8006a84:	1409      	asrs	r1, r1, #16
 8006a86:	fb0a c803 	mla	r8, sl, r3, ip
 8006a8a:	f9b4 a020 	ldrsh.w	sl, [r4, #32]
 8006a8e:	f9b4 c01c 	ldrsh.w	ip, [r4, #28]
 8006a92:	f9b4 911c 	ldrsh.w	r9, [r4, #284]	; 0x11c
 8006a96:	fb0b 8101 	mla	r1, fp, r1, r8
 8006a9a:	4135      	asrs	r5, r6
 8006a9c:	f9b4 b006 	ldrsh.w	fp, [r4, #6]
 8006aa0:	f9b4 801a 	ldrsh.w	r8, [r4, #26]
 8006aa4:	fa42 f606 	asr.w	r6, r2, r6
 8006aa8:	fb0c 7303 	mla	r3, ip, r3, r7
 8006aac:	fb06 f60a 	mul.w	r6, r6, sl
 8006ab0:	fb06 361b 	mls	r6, r6, fp, r3
 8006ab4:	9b05      	ldr	r3, [sp, #20]
 8006ab6:	f1b9 0f00 	cmp.w	r9, #0
 8006aba:	46a1      	mov	r9, r4
 8006abc:	fb08 3712 	mls	r7, r8, r2, r3
 8006ac0:	fb00 ee0c 	mla	lr, r0, ip, lr
 8006ac4:	9b02      	ldr	r3, [sp, #8]
 8006ac6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006aca:	fb0a f505 	mul.w	r5, sl, r5
 8006ace:	bfb8      	it	lt
 8006ad0:	4682      	movlt	sl, r0
 8006ad2:	f939 0b2c 	ldrsh.w	r0, [r9], #44
 8006ad6:	bfa8      	it	ge
 8006ad8:	f04f 0a01 	movge.w	sl, #1
 8006adc:	fb08 1813 	mls	r8, r8, r3, r1
 8006ae0:	fb0b e505 	mla	r5, fp, r5, lr
 8006ae4:	f7fd ffe2 	bl	8004aac <MCM_Trig_Functions>
 8006ae8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8006aec:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8006af0:	fb13 f30a 	smulbb	r3, r3, sl
 8006af4:	fb12 f10a 	smulbb	r1, r2, sl
 8006af8:	425b      	negs	r3, r3
 8006afa:	fb10 f303 	smulbb	r3, r0, r3
 8006afe:	fb10 f021 	smultb	r0, r0, r1
 8006b02:	f343 33cf 	sbfx	r3, r3, #15, #16
 8006b06:	f340 31cf 	sbfx	r1, r0, #15, #16
 8006b0a:	1a59      	subs	r1, r3, r1
 8006b0c:	4648      	mov	r0, r9
 8006b0e:	f7fe f8b7 	bl	8004c80 <PI_Controller>
 8006b12:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 8006b16:	f894 2106 	ldrb.w	r2, [r4, #262]	; 0x106
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	bf0a      	itet	eq
 8006b22:	2200      	moveq	r2, #0
 8006b24:	461a      	movne	r2, r3
 8006b26:	4613      	moveq	r3, r2
 8006b28:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8006b2c:	f9b2 106c 	ldrsh.w	r1, [r2, #108]	; 0x6c
 8006b30:	f8a4 1104 	strh.w	r1, [r4, #260]	; 0x104
 8006b34:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
 8006b38:	8822      	ldrh	r2, [r4, #0]
 8006b3a:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 8006b3e:	4410      	add	r0, r2
 8006b40:	b200      	sxth	r0, r0
 8006b42:	65a7      	str	r7, [r4, #88]	; 0x58
 8006b44:	6625      	str	r5, [r4, #96]	; 0x60
 8006b46:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
 8006b4a:	6666      	str	r6, [r4, #100]	; 0x64
 8006b4c:	8020      	strh	r0, [r4, #0]
 8006b4e:	b009      	add	sp, #36	; 0x24
 8006b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b54:	1b58      	subs	r0, r3, r5
 8006b56:	4586      	cmp	lr, r0
 8006b58:	bfdc      	itt	le
 8006b5a:	6620      	strle	r0, [r4, #96]	; 0x60
 8006b5c:	4686      	movle	lr, r0
 8006b5e:	e738      	b.n	80069d2 <STO_PLL_CalcElAngle+0x1e>
 8006b60:	1b9b      	subs	r3, r3, r6
 8006b62:	429d      	cmp	r5, r3
 8006b64:	bfdc      	itt	le
 8006b66:	65e3      	strle	r3, [r4, #92]	; 0x5c
 8006b68:	461d      	movle	r5, r3
 8006b6a:	e755      	b.n	8006a18 <STO_PLL_CalcElAngle+0x64>
 8006b6c:	1b9d      	subs	r5, r3, r6
 8006b6e:	42aa      	cmp	r2, r5
 8006b70:	bfdc      	itt	le
 8006b72:	65a5      	strle	r5, [r4, #88]	; 0x58
 8006b74:	462a      	movle	r2, r5
 8006b76:	e749      	b.n	8006a0c <STO_PLL_CalcElAngle+0x58>
 8006b78:	1b5b      	subs	r3, r3, r5
 8006b7a:	429f      	cmp	r7, r3
 8006b7c:	bfdc      	itt	le
 8006b7e:	6663      	strle	r3, [r4, #100]	; 0x64
 8006b80:	461f      	movle	r7, r3
 8006b82:	e733      	b.n	80069ec <STO_PLL_CalcElAngle+0x38>

08006b84 <STO_PLL_CalcAvrgMecSpeed01Hz>:
 8006b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b86:	f890 7106 	ldrb.w	r7, [r0, #262]	; 0x106
 8006b8a:	2f00      	cmp	r7, #0
 8006b8c:	f000 809e 	beq.w	8006ccc <STO_PLL_CalcAvrgMecSpeed01Hz+0x148>
 8006b90:	1e7e      	subs	r6, r7, #1
 8006b92:	b2f6      	uxtb	r6, r6
 8006b94:	3636      	adds	r6, #54	; 0x36
 8006b96:	f100 056a 	add.w	r5, r0, #106	; 0x6a
 8006b9a:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8006b9e:	462a      	mov	r2, r5
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 8006ba6:	4296      	cmp	r6, r2
 8006ba8:	4423      	add	r3, r4
 8006baa:	d1fa      	bne.n	8006ba2 <STO_PLL_CalcAvrgMecSpeed01Hz+0x1e>
 8006bac:	2600      	movs	r6, #0
 8006bae:	fb93 f4f7 	sdiv	r4, r3, r7
 8006bb2:	f935 3f02 	ldrsh.w	r3, [r5, #2]!
 8006bb6:	1b1b      	subs	r3, r3, r4
 8006bb8:	42aa      	cmp	r2, r5
 8006bba:	fb03 6603 	mla	r6, r3, r3, r6
 8006bbe:	d1f8      	bne.n	8006bb2 <STO_PLL_CalcAvrgMecSpeed01Hz+0x2e>
 8006bc0:	fb96 f6f7 	sdiv	r6, r6, r7
 8006bc4:	8a82      	ldrh	r2, [r0, #20]
 8006bc6:	f8b0 5108 	ldrh.w	r5, [r0, #264]	; 0x108
 8006bca:	fb04 f202 	mul.w	r2, r4, r2
 8006bce:	fb04 f304 	mul.w	r3, r4, r4
 8006bd2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006bd6:	0052      	lsls	r2, r2, #1
 8006bd8:	fb05 f403 	mul.w	r4, r5, r3
 8006bdc:	bf48      	it	mi
 8006bde:	f502 427f 	addmi.w	r2, r2, #65280	; 0xff00
 8006be2:	ea4f 14e4 	mov.w	r4, r4, asr #7
 8006be6:	bf48      	it	mi
 8006be8:	32ff      	addmi	r2, #255	; 0xff
 8006bea:	f890 50fc 	ldrb.w	r5, [r0, #252]	; 0xfc
 8006bee:	7ac3      	ldrb	r3, [r0, #11]
 8006bf0:	42b4      	cmp	r4, r6
 8006bf2:	ea4f 4222 	mov.w	r2, r2, asr #16
 8006bf6:	bfd8      	it	le
 8006bf8:	2700      	movle	r7, #0
 8006bfa:	fb92 f3f3 	sdiv	r3, r2, r3
 8006bfe:	bfc8      	it	gt
 8006c00:	2701      	movgt	r7, #1
 8006c02:	b21a      	sxth	r2, r3
 8006c04:	800a      	strh	r2, [r1, #0]
 8006c06:	8082      	strh	r2, [r0, #4]
 8006c08:	f880 70ed 	strb.w	r7, [r0, #237]	; 0xed
 8006c0c:	b1b5      	cbz	r5, 8006c3c <STO_PLL_CalcAvrgMecSpeed01Hz+0xb8>
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f8b0 2112 	ldrh.w	r2, [r0, #274]	; 0x112
 8006c14:	bfb8      	it	lt
 8006c16:	425b      	neglt	r3, r3
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	db30      	blt.n	8006c7e <STO_PLL_CalcAvrgMecSpeed01Hz+0xfa>
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	461a      	mov	r2, r3
 8006c20:	461d      	mov	r5, r3
 8006c22:	f8c0 20f8 	str.w	r2, [r0, #248]	; 0xf8
 8006c26:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
 8006c2a:	f880 30f1 	strb.w	r3, [r0, #241]	; 0xf1
 8006c2e:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
 8006c32:	b942      	cbnz	r2, 8006c46 <STO_PLL_CalcAvrgMecSpeed01Hz+0xc2>
 8006c34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006c38:	f7ff ba28 	b.w	800608c <SPD_IsMecSpeedReliable>
 8006c3c:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
 8006c40:	2301      	movs	r3, #1
 8006c42:	2a00      	cmp	r2, #0
 8006c44:	d0f6      	beq.n	8006c34 <STO_PLL_CalcAvrgMecSpeed01Hz+0xb0>
 8006c46:	42b4      	cmp	r4, r6
 8006c48:	dc10      	bgt.n	8006c6c <STO_PLL_CalcAvrgMecSpeed01Hz+0xe8>
 8006c4a:	f890 30ef 	ldrb.w	r3, [r0, #239]	; 0xef
 8006c4e:	f890 210f 	ldrb.w	r2, [r0, #271]	; 0x10f
 8006c52:	3301      	adds	r3, #1
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	429a      	cmp	r2, r3
 8006c58:	f880 30ef 	strb.w	r3, [r0, #239]	; 0xef
 8006c5c:	d8ea      	bhi.n	8006c34 <STO_PLL_CalcAvrgMecSpeed01Hz+0xb0>
 8006c5e:	2300      	movs	r3, #0
 8006c60:	7c02      	ldrb	r2, [r0, #16]
 8006c62:	f880 30ef 	strb.w	r3, [r0, #239]	; 0xef
 8006c66:	7282      	strb	r2, [r0, #10]
 8006c68:	4618      	mov	r0, r3
 8006c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d0ec      	beq.n	8006c4a <STO_PLL_CalcAvrgMecSpeed01Hz+0xc6>
 8006c70:	2300      	movs	r3, #0
 8006c72:	f880 30ef 	strb.w	r3, [r0, #239]	; 0xef
 8006c76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006c7a:	f7ff ba07 	b.w	800608c <SPD_IsMecSpeedReliable>
 8006c7e:	f890 2111 	ldrb.w	r2, [r0, #273]	; 0x111
 8006c82:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8006c86:	f9b0 706a 	ldrsh.w	r7, [r0, #106]	; 0x6a
 8006c8a:	f9b0 5068 	ldrsh.w	r5, [r0, #104]	; 0x68
 8006c8e:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8006c92:	fb93 f3fe 	sdiv	r3, r3, lr
 8006c96:	fb03 f202 	mul.w	r2, r3, r2
 8006c9a:	2a00      	cmp	r2, #0
 8006c9c:	bfb8      	it	lt
 8006c9e:	323f      	addlt	r2, #63	; 0x3f
 8006ca0:	1192      	asrs	r2, r2, #6
 8006ca2:	fb02 f203 	mul.w	r2, r2, r3
 8006ca6:	fb07 f707 	mul.w	r7, r7, r7
 8006caa:	2a00      	cmp	r2, #0
 8006cac:	fb05 7505 	mla	r5, r5, r5, r7
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	f890 7110 	ldrb.w	r7, [r0, #272]	; 0x110
 8006cb6:	bfb8      	it	lt
 8006cb8:	f102 033f 	addlt.w	r3, r2, #63	; 0x3f
 8006cbc:	119b      	asrs	r3, r3, #6
 8006cbe:	fb07 2313 	mls	r3, r7, r3, r2
 8006cc2:	429d      	cmp	r5, r3
 8006cc4:	bfd4      	ite	le
 8006cc6:	2300      	movle	r3, #0
 8006cc8:	2301      	movgt	r3, #1
 8006cca:	e7aa      	b.n	8006c22 <STO_PLL_CalcAvrgMecSpeed01Hz+0x9e>
 8006ccc:	463e      	mov	r6, r7
 8006cce:	463c      	mov	r4, r7
 8006cd0:	e778      	b.n	8006bc4 <STO_PLL_CalcAvrgMecSpeed01Hz+0x40>
 8006cd2:	bf00      	nop

08006cd4 <STO_PLL_CalcAvrgElSpeedDpp>:
 8006cd4:	b470      	push	{r4, r5, r6}
 8006cd6:	f890 5106 	ldrb.w	r5, [r0, #262]	; 0x106
 8006cda:	f890 3107 	ldrb.w	r3, [r0, #263]	; 0x107
 8006cde:	f890 20ec 	ldrb.w	r2, [r0, #236]	; 0xec
 8006ce2:	f8d0 4100 	ldr.w	r4, [r0, #256]	; 0x100
 8006ce6:	b2ae      	uxth	r6, r5
 8006ce8:	1af3      	subs	r3, r6, r3
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	b1c3      	cbz	r3, 8006d20 <STO_PLL_CalcAvrgElSpeedDpp+0x4c>
 8006cee:	4413      	add	r3, r2
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	b219      	sxth	r1, r3
 8006cf4:	428d      	cmp	r5, r1
 8006cf6:	bfdc      	itt	le
 8006cf8:	1b9b      	suble	r3, r3, r6
 8006cfa:	b219      	sxthle	r1, r3
 8006cfc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8006d00:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8006d04:	f9b2 306c 	ldrsh.w	r3, [r2, #108]	; 0x6c
 8006d08:	f9b1 206c 	ldrsh.w	r2, [r1, #108]	; 0x6c
 8006d0c:	4423      	add	r3, r4
 8006d0e:	1a9b      	subs	r3, r3, r2
 8006d10:	f8b0 2118 	ldrh.w	r2, [r0, #280]	; 0x118
 8006d14:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8006d18:	4113      	asrs	r3, r2
 8006d1a:	80c3      	strh	r3, [r0, #6]
 8006d1c:	bc70      	pop	{r4, r5, r6}
 8006d1e:	4770      	bx	lr
 8006d20:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8006d24:	f9b0 1104 	ldrsh.w	r1, [r0, #260]	; 0x104
 8006d28:	f9b2 306c 	ldrsh.w	r3, [r2, #108]	; 0x6c
 8006d2c:	4423      	add	r3, r4
 8006d2e:	1a5b      	subs	r3, r3, r1
 8006d30:	e7ee      	b.n	8006d10 <STO_PLL_CalcAvrgElSpeedDpp+0x3c>
 8006d32:	bf00      	nop

08006d34 <STO_PLL_Clear>:
 8006d34:	b510      	push	{r4, lr}
 8006d36:	f890 2106 	ldrb.w	r2, [r0, #262]	; 0x106
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	4604      	mov	r4, r0
 8006d3e:	6581      	str	r1, [r0, #88]	; 0x58
 8006d40:	65c1      	str	r1, [r0, #92]	; 0x5c
 8006d42:	6601      	str	r1, [r0, #96]	; 0x60
 8006d44:	6641      	str	r1, [r0, #100]	; 0x64
 8006d46:	8001      	strh	r1, [r0, #0]
 8006d48:	80c1      	strh	r1, [r0, #6]
 8006d4a:	f880 10ee 	strb.w	r1, [r0, #238]	; 0xee
 8006d4e:	f880 10ef 	strb.w	r1, [r0, #239]	; 0xef
 8006d52:	f880 10f0 	strb.w	r1, [r0, #240]	; 0xf0
 8006d56:	f880 10f1 	strb.w	r1, [r0, #241]	; 0xf1
 8006d5a:	f8c0 10f4 	str.w	r1, [r0, #244]	; 0xf4
 8006d5e:	f8c0 10f8 	str.w	r1, [r0, #248]	; 0xf8
 8006d62:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
 8006d66:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
 8006d6a:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
 8006d6e:	b132      	cbz	r2, 8006d7e <STO_PLL_Clear+0x4a>
 8006d70:	3a01      	subs	r2, #1
 8006d72:	b2d2      	uxtb	r2, r2
 8006d74:	3201      	adds	r2, #1
 8006d76:	0052      	lsls	r2, r2, #1
 8006d78:	306c      	adds	r0, #108	; 0x6c
 8006d7a:	f000 f9e3 	bl	8007144 <memset>
 8006d7e:	2100      	movs	r1, #0
 8006d80:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
 8006d84:	f8a4 1104 	strh.w	r1, [r4, #260]	; 0x104
 8006d88:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8006d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d90:	f7fd bf6a 	b.w	8004c68 <PID_SetIntegralTerm>

08006d94 <STO_PLL_IsObserverConverged>:
 8006d94:	f890 211b 	ldrb.w	r2, [r0, #283]	; 0x11b
 8006d98:	f8a0 111c 	strh.w	r1, [r0, #284]	; 0x11c
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	b10a      	cbz	r2, 8006da4 <STO_PLL_IsObserverConverged+0x10>
 8006da0:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8006da4:	f893 011a 	ldrb.w	r0, [r3, #282]	; 0x11a
 8006da8:	2800      	cmp	r0, #0
 8006daa:	d143      	bne.n	8006e34 <STO_PLL_IsObserverConverged+0xa0>
 8006dac:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8006db0:	b430      	push	{r4, r5}
 8006db2:	fb02 f501 	mul.w	r5, r2, r1
 8006db6:	2d00      	cmp	r5, #0
 8006db8:	460c      	mov	r4, r1
 8006dba:	dd34      	ble.n	8006e26 <STO_PLL_IsObserverConverged+0x92>
 8006dbc:	2a00      	cmp	r2, #0
 8006dbe:	bfbc      	itt	lt
 8006dc0:	4252      	neglt	r2, r2
 8006dc2:	b212      	sxthlt	r2, r2
 8006dc4:	2900      	cmp	r1, #0
 8006dc6:	bfbc      	itt	lt
 8006dc8:	4249      	neglt	r1, r1
 8006dca:	b20c      	sxthlt	r4, r1
 8006dcc:	f893 10ed 	ldrb.w	r1, [r3, #237]	; 0xed
 8006dd0:	b359      	cbz	r1, 8006e2a <STO_PLL_IsObserverConverged+0x96>
 8006dd2:	f8b3 510c 	ldrh.w	r5, [r3, #268]	; 0x10c
 8006dd6:	b291      	uxth	r1, r2
 8006dd8:	428d      	cmp	r5, r1
 8006dda:	d226      	bcs.n	8006e2a <STO_PLL_IsObserverConverged+0x96>
 8006ddc:	f893 110b 	ldrb.w	r1, [r3, #267]	; 0x10b
 8006de0:	fb04 f101 	mul.w	r1, r4, r1
 8006de4:	2900      	cmp	r1, #0
 8006de6:	bfb8      	it	lt
 8006de8:	310f      	addlt	r1, #15
 8006dea:	f341 110f 	sbfx	r1, r1, #4, #16
 8006dee:	428a      	cmp	r2, r1
 8006df0:	db1b      	blt.n	8006e2a <STO_PLL_IsObserverConverged+0x96>
 8006df2:	f893 110a 	ldrb.w	r1, [r3, #266]	; 0x10a
 8006df6:	fb04 f101 	mul.w	r1, r4, r1
 8006dfa:	2900      	cmp	r1, #0
 8006dfc:	bfb8      	it	lt
 8006dfe:	310f      	addlt	r1, #15
 8006e00:	f341 110f 	sbfx	r1, r1, #4, #16
 8006e04:	428a      	cmp	r2, r1
 8006e06:	dc10      	bgt.n	8006e2a <STO_PLL_IsObserverConverged+0x96>
 8006e08:	f893 20ee 	ldrb.w	r2, [r3, #238]	; 0xee
 8006e0c:	f893 110e 	ldrb.w	r1, [r3, #270]	; 0x10e
 8006e10:	3201      	adds	r2, #1
 8006e12:	b2d2      	uxtb	r2, r2
 8006e14:	4291      	cmp	r1, r2
 8006e16:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8006e1a:	d804      	bhi.n	8006e26 <STO_PLL_IsObserverConverged+0x92>
 8006e1c:	2001      	movs	r0, #1
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 00f0 	strb.w	r0, [r3, #240]	; 0xf0
 8006e24:	729a      	strb	r2, [r3, #10]
 8006e26:	bc30      	pop	{r4, r5}
 8006e28:	4770      	bx	lr
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8006e30:	bc30      	pop	{r4, r5}
 8006e32:	4770      	bx	lr
 8006e34:	2001      	movs	r0, #1
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 00f0 	strb.w	r0, [r3, #240]	; 0xf0
 8006e3c:	729a      	strb	r2, [r3, #10]
 8006e3e:	4770      	bx	lr

08006e40 <STO_PLL_GetEstimatedBemf>:
 8006e40:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006e42:	2000      	movs	r0, #0
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	f362 000f 	bfi	r0, r2, #0, #16
 8006e4a:	0c1b      	lsrs	r3, r3, #16
 8006e4c:	f363 401f 	bfi	r0, r3, #16, #16
 8006e50:	b082      	sub	sp, #8
 8006e52:	b002      	add	sp, #8
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop

08006e58 <STO_PLL_GetEstimatedCurrent>:
 8006e58:	b410      	push	{r4}
 8006e5a:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8006e5c:	f8b0 4114 	ldrh.w	r4, [r0, #276]	; 0x114
 8006e60:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8006e62:	4122      	asrs	r2, r4
 8006e64:	b292      	uxth	r2, r2
 8006e66:	4123      	asrs	r3, r4
 8006e68:	2100      	movs	r1, #0
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	f362 010f 	bfi	r1, r2, #0, #16
 8006e70:	f363 411f 	bfi	r1, r3, #16, #16
 8006e74:	4608      	mov	r0, r1
 8006e76:	b083      	sub	sp, #12
 8006e78:	b003      	add	sp, #12
 8006e7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <STO_PLL_GetObserverGains>:
 8006e80:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
 8006e84:	800b      	strh	r3, [r1, #0]
 8006e86:	f9b0 301c 	ldrsh.w	r3, [r0, #28]
 8006e8a:	8013      	strh	r3, [r2, #0]
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop

08006e90 <STO_PLL_SetObserverGains>:
 8006e90:	8301      	strh	r1, [r0, #24]
 8006e92:	8382      	strh	r2, [r0, #28]
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop

08006e98 <STO_GetPLLGains>:
 8006e98:	b570      	push	{r4, r5, r6, lr}
 8006e9a:	f100 042c 	add.w	r4, r0, #44	; 0x2c
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	460e      	mov	r6, r1
 8006ea2:	4615      	mov	r5, r2
 8006ea4:	f7fd fed8 	bl	8004c58 <PID_GetKP>
 8006ea8:	8030      	strh	r0, [r6, #0]
 8006eaa:	4620      	mov	r0, r4
 8006eac:	f7fd fed8 	bl	8004c60 <PID_GetKI>
 8006eb0:	8028      	strh	r0, [r5, #0]
 8006eb2:	bd70      	pop	{r4, r5, r6, pc}

08006eb4 <STO_SetPLLGains>:
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	f100 042c 	add.w	r4, r0, #44	; 0x2c
 8006eba:	4615      	mov	r5, r2
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f7fd fec7 	bl	8004c50 <PID_SetKP>
 8006ec2:	4629      	mov	r1, r5
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006eca:	f7fd bec3 	b.w	8004c54 <PID_SetKI>
 8006ece:	bf00      	nop

08006ed0 <STO_OTF_ResetPLL>:
 8006ed0:	6800      	ldr	r0, [r0, #0]
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	302c      	adds	r0, #44	; 0x2c
 8006ed6:	f7fd bec7 	b.w	8004c68 <PID_SetIntegralTerm>
 8006eda:	bf00      	nop

08006edc <STO_ResetPLL>:
 8006edc:	302c      	adds	r0, #44	; 0x2c
 8006ede:	2100      	movs	r1, #0
 8006ee0:	f7fd bec2 	b.w	8004c68 <PID_SetIntegralTerm>

08006ee4 <STO_PLL_GetEstimatedBemfLevel>:
 8006ee4:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop

08006eec <STO_PLL_GetObservedBemfLevel>:
 8006eec:	f8d0 00f4 	ldr.w	r0, [r0, #244]	; 0xf4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop

08006ef4 <STO_PLL_IsVarianceTight>:
 8006ef4:	6803      	ldr	r3, [r0, #0]
 8006ef6:	f893 00ed 	ldrb.w	r0, [r3, #237]	; 0xed
 8006efa:	4770      	bx	lr

08006efc <STO_PLL_ForceConvergency1>:
 8006efc:	6803      	ldr	r3, [r0, #0]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop

08006f08 <STO_PLL_ForceConvergency2>:
 8006f08:	6803      	ldr	r3, [r0, #0]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop

08006f14 <RUC_Init>:
 8006f14:	b430      	push	{r4, r5}
 8006f16:	6681      	str	r1, [r0, #104]	; 0x68
 8006f18:	2100      	movs	r1, #0
 8006f1a:	9c02      	ldr	r4, [sp, #8]
 8006f1c:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 8006f20:	f880 1055 	strb.w	r1, [r0, #85]	; 0x55
 8006f24:	f110 010c 	adds.w	r1, r0, #12
 8006f28:	66c2      	str	r2, [r0, #108]	; 0x6c
 8006f2a:	6703      	str	r3, [r0, #112]	; 0x70
 8006f2c:	6744      	str	r4, [r0, #116]	; 0x74
 8006f2e:	d023      	beq.n	8006f78 <RUC_Init+0x64>
 8006f30:	6943      	ldr	r3, [r0, #20]
 8006f32:	b323      	cbz	r3, 8006f7e <RUC_Init+0x6a>
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	b323      	cbz	r3, 8006f82 <RUC_Init+0x6e>
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	b323      	cbz	r3, 8006f86 <RUC_Init+0x72>
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	b1c3      	cbz	r3, 8006f72 <RUC_Init+0x5e>
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	2105      	movs	r1, #5
 8006f44:	b1b3      	cbz	r3, 8006f74 <RUC_Init+0x60>
 8006f46:	2204      	movs	r2, #4
 8006f48:	2105      	movs	r1, #5
 8006f4a:	8805      	ldrh	r5, [r0, #0]
 8006f4c:	4c0f      	ldr	r4, [pc, #60]	; (8006f8c <RUC_Init+0x78>)
 8006f4e:	2364      	movs	r3, #100	; 0x64
 8006f50:	fb03 f305 	mul.w	r3, r3, r5
 8006f54:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006f58:	fba4 4303 	umull	r4, r3, r4, r3
 8006f5c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006f60:	2400      	movs	r4, #0
 8006f62:	099b      	lsrs	r3, r3, #6
 8006f64:	6154      	str	r4, [r2, #20]
 8006f66:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
 8006f6a:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
 8006f6e:	bc30      	pop	{r4, r5}
 8006f70:	4770      	bx	lr
 8006f72:	2104      	movs	r1, #4
 8006f74:	1e4a      	subs	r2, r1, #1
 8006f76:	e7e8      	b.n	8006f4a <RUC_Init+0x36>
 8006f78:	f04f 32ff 	mov.w	r2, #4294967295
 8006f7c:	e7e5      	b.n	8006f4a <RUC_Init+0x36>
 8006f7e:	2101      	movs	r1, #1
 8006f80:	e7f8      	b.n	8006f74 <RUC_Init+0x60>
 8006f82:	2102      	movs	r1, #2
 8006f84:	e7f6      	b.n	8006f74 <RUC_Init+0x60>
 8006f86:	2103      	movs	r1, #3
 8006f88:	e7f4      	b.n	8006f74 <RUC_Init+0x60>
 8006f8a:	bf00      	nop
 8006f8c:	10624dd3 	.word	0x10624dd3

08006f90 <RUC_Clear>:
 8006f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f94:	4604      	mov	r4, r0
 8006f96:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
 8006f98:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
 8006f9c:	80e1      	strh	r1, [r4, #6]
 8006f9e:	2500      	movs	r5, #0
 8006fa0:	4638      	mov	r0, r7
 8006fa2:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
 8006fa6:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8006faa:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 8006fae:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 8006fb2:	460e      	mov	r6, r1
 8006fb4:	f7ff fba0 	bl	80066f8 <VSS_Clear>
 8006fb8:	4629      	mov	r1, r5
 8006fba:	4640      	mov	r0, r8
 8006fbc:	f7ff f8c4 	bl	8006148 <STC_SetControlMode>
 8006fc0:	8861      	ldrh	r1, [r4, #2]
 8006fc2:	b2b6      	uxth	r6, r6
 8006fc4:	fb11 f106 	smulbb	r1, r1, r6
 8006fc8:	b209      	sxth	r1, r1
 8006fca:	4638      	mov	r0, r7
 8006fcc:	f7ff fc3c 	bl	8006848 <VSS_SetMecAngle>
 8006fd0:	462a      	mov	r2, r5
 8006fd2:	4629      	mov	r1, r5
 8006fd4:	4640      	mov	r0, r8
 8006fd6:	f7ff f8bb 	bl	8006150 <STC_ExecRamp>
 8006fda:	8a21      	ldrh	r1, [r4, #16]
 8006fdc:	89a2      	ldrh	r2, [r4, #12]
 8006fde:	fb11 f106 	smulbb	r1, r1, r6
 8006fe2:	b209      	sxth	r1, r1
 8006fe4:	4640      	mov	r0, r8
 8006fe6:	f7ff f8b3 	bl	8006150 <STC_ExecRamp>
 8006fea:	89e1      	ldrh	r1, [r4, #14]
 8006fec:	89a2      	ldrh	r2, [r4, #12]
 8006fee:	fb11 f106 	smulbb	r1, r1, r6
 8006ff2:	4638      	mov	r0, r7
 8006ff4:	b209      	sxth	r1, r1
 8006ff6:	f7ff fc2f 	bl	8006858 <VSS_SetMecAcceleration>
 8006ffa:	89a0      	ldrh	r0, [r4, #12]
 8006ffc:	8823      	ldrh	r3, [r4, #0]
 8006ffe:	4907      	ldr	r1, [pc, #28]	; (800701c <RUC_Clear+0x8c>)
 8007000:	6962      	ldr	r2, [r4, #20]
 8007002:	f884 5057 	strb.w	r5, [r4, #87]	; 0x57
 8007006:	fb03 f300 	mul.w	r3, r3, r0
 800700a:	fba1 1303 	umull	r1, r3, r1, r3
 800700e:	099b      	lsrs	r3, r3, #6
 8007010:	3301      	adds	r3, #1
 8007012:	80a3      	strh	r3, [r4, #4]
 8007014:	60a2      	str	r2, [r4, #8]
 8007016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800701a:	bf00      	nop
 800701c:	10624dd3 	.word	0x10624dd3

08007020 <RUC_Exec>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	8883      	ldrh	r3, [r0, #4]
 8007024:	b12b      	cbz	r3, 8007032 <RUC_Exec+0x12>
 8007026:	3b01      	subs	r3, #1
 8007028:	b29b      	uxth	r3, r3
 800702a:	8083      	strh	r3, [r0, #4]
 800702c:	b10b      	cbz	r3, 8007032 <RUC_Exec+0x12>
 800702e:	2001      	movs	r0, #1
 8007030:	bd38      	pop	{r3, r4, r5, pc}
 8007032:	6883      	ldr	r3, [r0, #8]
 8007034:	b33b      	cbz	r3, 8007086 <RUC_Exec+0x66>
 8007036:	88c5      	ldrh	r5, [r0, #6]
 8007038:	8899      	ldrh	r1, [r3, #4]
 800703a:	881a      	ldrh	r2, [r3, #0]
 800703c:	4604      	mov	r4, r0
 800703e:	fb11 f105 	smulbb	r1, r1, r5
 8007042:	b209      	sxth	r1, r1
 8007044:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8007046:	f7ff f883 	bl	8006150 <STC_ExecRamp>
 800704a:	68a3      	ldr	r3, [r4, #8]
 800704c:	88e5      	ldrh	r5, [r4, #6]
 800704e:	8859      	ldrh	r1, [r3, #2]
 8007050:	881a      	ldrh	r2, [r3, #0]
 8007052:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007054:	fb11 f105 	smulbb	r1, r1, r5
 8007058:	b209      	sxth	r1, r1
 800705a:	f7ff fbfd 	bl	8006858 <VSS_SetMecAcceleration>
 800705e:	68a1      	ldr	r1, [r4, #8]
 8007060:	8823      	ldrh	r3, [r4, #0]
 8007062:	880d      	ldrh	r5, [r1, #0]
 8007064:	4809      	ldr	r0, [pc, #36]	; (800708c <RUC_Exec+0x6c>)
 8007066:	6889      	ldr	r1, [r1, #8]
 8007068:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 800706c:	60a1      	str	r1, [r4, #8]
 800706e:	fb03 f305 	mul.w	r3, r3, r5
 8007072:	fba0 1303 	umull	r1, r3, r0, r3
 8007076:	3201      	adds	r2, #1
 8007078:	099b      	lsrs	r3, r3, #6
 800707a:	3301      	adds	r3, #1
 800707c:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 8007080:	80a3      	strh	r3, [r4, #4]
 8007082:	2001      	movs	r0, #1
 8007084:	bd38      	pop	{r3, r4, r5, pc}
 8007086:	4618      	mov	r0, r3
 8007088:	bd38      	pop	{r3, r4, r5, pc}
 800708a:	bf00      	nop
 800708c:	10624dd3 	.word	0x10624dd3

08007090 <RUC_FirstAccelerationStageReached>:
 8007090:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8007094:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
 8007098:	4282      	cmp	r2, r0
 800709a:	bf34      	ite	cc
 800709c:	2000      	movcc	r0, #0
 800709e:	2001      	movcs	r0, #1
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop

080070a4 <RUC_SetPhaseDurationms>:
 80070a4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80070a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80070ac:	818a      	strh	r2, [r1, #12]
 80070ae:	4770      	bx	lr

080070b0 <RUC_SetPhaseFinalMecSpeed01Hz>:
 80070b0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80070b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80070b8:	81ca      	strh	r2, [r1, #14]
 80070ba:	4770      	bx	lr

080070bc <RUC_SetPhaseFinalTorque>:
 80070bc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80070c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80070c4:	820a      	strh	r2, [r1, #16]
 80070c6:	4770      	bx	lr

080070c8 <RUC_GetPhaseDurationms>:
 80070c8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80070cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80070d0:	8988      	ldrh	r0, [r1, #12]
 80070d2:	4770      	bx	lr

080070d4 <RUC_GetPhaseFinalMecSpeed01Hz>:
 80070d4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80070d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80070dc:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop

080070e4 <RUC_GetPhaseFinalTorque>:
 80070e4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80070e8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80070ec:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop

080070f4 <RUC_GetNumberOfPhases>:
 80070f4:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop

080070fc <__libc_init_array>:
 80070fc:	b570      	push	{r4, r5, r6, lr}
 80070fe:	4e0d      	ldr	r6, [pc, #52]	; (8007134 <__libc_init_array+0x38>)
 8007100:	4c0d      	ldr	r4, [pc, #52]	; (8007138 <__libc_init_array+0x3c>)
 8007102:	1ba4      	subs	r4, r4, r6
 8007104:	10a4      	asrs	r4, r4, #2
 8007106:	2500      	movs	r5, #0
 8007108:	42a5      	cmp	r5, r4
 800710a:	d109      	bne.n	8007120 <__libc_init_array+0x24>
 800710c:	4e0b      	ldr	r6, [pc, #44]	; (800713c <__libc_init_array+0x40>)
 800710e:	4c0c      	ldr	r4, [pc, #48]	; (8007140 <__libc_init_array+0x44>)
 8007110:	f000 f820 	bl	8007154 <_init>
 8007114:	1ba4      	subs	r4, r4, r6
 8007116:	10a4      	asrs	r4, r4, #2
 8007118:	2500      	movs	r5, #0
 800711a:	42a5      	cmp	r5, r4
 800711c:	d105      	bne.n	800712a <__libc_init_array+0x2e>
 800711e:	bd70      	pop	{r4, r5, r6, pc}
 8007120:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007124:	4798      	blx	r3
 8007126:	3501      	adds	r5, #1
 8007128:	e7ee      	b.n	8007108 <__libc_init_array+0xc>
 800712a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800712e:	4798      	blx	r3
 8007130:	3501      	adds	r5, #1
 8007132:	e7f2      	b.n	800711a <__libc_init_array+0x1e>
 8007134:	080073e8 	.word	0x080073e8
 8007138:	080073e8 	.word	0x080073e8
 800713c:	080073e8 	.word	0x080073e8
 8007140:	080073ec 	.word	0x080073ec

08007144 <memset>:
 8007144:	4402      	add	r2, r0
 8007146:	4603      	mov	r3, r0
 8007148:	4293      	cmp	r3, r2
 800714a:	d100      	bne.n	800714e <memset+0xa>
 800714c:	4770      	bx	lr
 800714e:	f803 1b01 	strb.w	r1, [r3], #1
 8007152:	e7f9      	b.n	8007148 <memset+0x4>

08007154 <_init>:
 8007154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007156:	bf00      	nop
 8007158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800715a:	bc08      	pop	{r3}
 800715c:	469e      	mov	lr, r3
 800715e:	4770      	bx	lr

08007160 <_fini>:
 8007160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007162:	bf00      	nop
 8007164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007166:	bc08      	pop	{r3}
 8007168:	469e      	mov	lr, r3
 800716a:	4770      	bx	lr
